
I2C_DMA_testes.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a66c  080002ac  080002ac  000012ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  0800a918  0800a918  0000b918  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a974  0800a974  0000b974  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a97c  0800a97c  0000b97c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800a980  0800a980  0000b980  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000060  24000000  0800a984  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000390  24000060  0800a9e4  0000c060  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240003f0  0800a9e4  0000c3f0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000c060  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001b2d3  00000000  00000000  0000c08e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000327a  00000000  00000000  00027361  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001440  00000000  00000000  0002a5e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000fde  00000000  00000000  0002ba20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00031893  00000000  00000000  0002c9fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001e89d  00000000  00000000  0005e291  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001403a3  00000000  00000000  0007cb2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001bced1  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005898  00000000  00000000  001bcf14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000008f  00000000  00000000  001c27ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002ac <__do_global_dtors_aux>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	4c05      	ldr	r4, [pc, #20]	@ (80002c4 <__do_global_dtors_aux+0x18>)
 80002b0:	7823      	ldrb	r3, [r4, #0]
 80002b2:	b933      	cbnz	r3, 80002c2 <__do_global_dtors_aux+0x16>
 80002b4:	4b04      	ldr	r3, [pc, #16]	@ (80002c8 <__do_global_dtors_aux+0x1c>)
 80002b6:	b113      	cbz	r3, 80002be <__do_global_dtors_aux+0x12>
 80002b8:	4804      	ldr	r0, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x20>)
 80002ba:	f3af 8000 	nop.w
 80002be:	2301      	movs	r3, #1
 80002c0:	7023      	strb	r3, [r4, #0]
 80002c2:	bd10      	pop	{r4, pc}
 80002c4:	24000060 	.word	0x24000060
 80002c8:	00000000 	.word	0x00000000
 80002cc:	0800a900 	.word	0x0800a900

080002d0 <frame_dummy>:
 80002d0:	b508      	push	{r3, lr}
 80002d2:	4b03      	ldr	r3, [pc, #12]	@ (80002e0 <frame_dummy+0x10>)
 80002d4:	b11b      	cbz	r3, 80002de <frame_dummy+0xe>
 80002d6:	4903      	ldr	r1, [pc, #12]	@ (80002e4 <frame_dummy+0x14>)
 80002d8:	4803      	ldr	r0, [pc, #12]	@ (80002e8 <frame_dummy+0x18>)
 80002da:	f3af 8000 	nop.w
 80002de:	bd08      	pop	{r3, pc}
 80002e0:	00000000 	.word	0x00000000
 80002e4:	24000064 	.word	0x24000064
 80002e8:	0800a900 	.word	0x0800a900

080002ec <__aeabi_uldivmod>:
 80002ec:	b953      	cbnz	r3, 8000304 <__aeabi_uldivmod+0x18>
 80002ee:	b94a      	cbnz	r2, 8000304 <__aeabi_uldivmod+0x18>
 80002f0:	2900      	cmp	r1, #0
 80002f2:	bf08      	it	eq
 80002f4:	2800      	cmpeq	r0, #0
 80002f6:	bf1c      	itt	ne
 80002f8:	f04f 31ff 	movne.w	r1, #4294967295
 80002fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000300:	f000 b96a 	b.w	80005d8 <__aeabi_idiv0>
 8000304:	f1ad 0c08 	sub.w	ip, sp, #8
 8000308:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800030c:	f000 f806 	bl	800031c <__udivmoddi4>
 8000310:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000314:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000318:	b004      	add	sp, #16
 800031a:	4770      	bx	lr

0800031c <__udivmoddi4>:
 800031c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000320:	9d08      	ldr	r5, [sp, #32]
 8000322:	460c      	mov	r4, r1
 8000324:	2b00      	cmp	r3, #0
 8000326:	d14e      	bne.n	80003c6 <__udivmoddi4+0xaa>
 8000328:	4694      	mov	ip, r2
 800032a:	458c      	cmp	ip, r1
 800032c:	4686      	mov	lr, r0
 800032e:	fab2 f282 	clz	r2, r2
 8000332:	d962      	bls.n	80003fa <__udivmoddi4+0xde>
 8000334:	b14a      	cbz	r2, 800034a <__udivmoddi4+0x2e>
 8000336:	f1c2 0320 	rsb	r3, r2, #32
 800033a:	4091      	lsls	r1, r2
 800033c:	fa20 f303 	lsr.w	r3, r0, r3
 8000340:	fa0c fc02 	lsl.w	ip, ip, r2
 8000344:	4319      	orrs	r1, r3
 8000346:	fa00 fe02 	lsl.w	lr, r0, r2
 800034a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800034e:	fa1f f68c 	uxth.w	r6, ip
 8000352:	fbb1 f4f7 	udiv	r4, r1, r7
 8000356:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035a:	fb07 1114 	mls	r1, r7, r4, r1
 800035e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000362:	fb04 f106 	mul.w	r1, r4, r6
 8000366:	4299      	cmp	r1, r3
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x64>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000372:	f080 8112 	bcs.w	800059a <__udivmoddi4+0x27e>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 810f 	bls.w	800059a <__udivmoddi4+0x27e>
 800037c:	3c02      	subs	r4, #2
 800037e:	4463      	add	r3, ip
 8000380:	1a59      	subs	r1, r3, r1
 8000382:	fa1f f38e 	uxth.w	r3, lr
 8000386:	fbb1 f0f7 	udiv	r0, r1, r7
 800038a:	fb07 1110 	mls	r1, r7, r0, r1
 800038e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000392:	fb00 f606 	mul.w	r6, r0, r6
 8000396:	429e      	cmp	r6, r3
 8000398:	d90a      	bls.n	80003b0 <__udivmoddi4+0x94>
 800039a:	eb1c 0303 	adds.w	r3, ip, r3
 800039e:	f100 31ff 	add.w	r1, r0, #4294967295
 80003a2:	f080 80fc 	bcs.w	800059e <__udivmoddi4+0x282>
 80003a6:	429e      	cmp	r6, r3
 80003a8:	f240 80f9 	bls.w	800059e <__udivmoddi4+0x282>
 80003ac:	4463      	add	r3, ip
 80003ae:	3802      	subs	r0, #2
 80003b0:	1b9b      	subs	r3, r3, r6
 80003b2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11d      	cbz	r5, 80003c2 <__udivmoddi4+0xa6>
 80003ba:	40d3      	lsrs	r3, r2
 80003bc:	2200      	movs	r2, #0
 80003be:	e9c5 3200 	strd	r3, r2, [r5]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d905      	bls.n	80003d6 <__udivmoddi4+0xba>
 80003ca:	b10d      	cbz	r5, 80003d0 <__udivmoddi4+0xb4>
 80003cc:	e9c5 0100 	strd	r0, r1, [r5]
 80003d0:	2100      	movs	r1, #0
 80003d2:	4608      	mov	r0, r1
 80003d4:	e7f5      	b.n	80003c2 <__udivmoddi4+0xa6>
 80003d6:	fab3 f183 	clz	r1, r3
 80003da:	2900      	cmp	r1, #0
 80003dc:	d146      	bne.n	800046c <__udivmoddi4+0x150>
 80003de:	42a3      	cmp	r3, r4
 80003e0:	d302      	bcc.n	80003e8 <__udivmoddi4+0xcc>
 80003e2:	4290      	cmp	r0, r2
 80003e4:	f0c0 80f0 	bcc.w	80005c8 <__udivmoddi4+0x2ac>
 80003e8:	1a86      	subs	r6, r0, r2
 80003ea:	eb64 0303 	sbc.w	r3, r4, r3
 80003ee:	2001      	movs	r0, #1
 80003f0:	2d00      	cmp	r5, #0
 80003f2:	d0e6      	beq.n	80003c2 <__udivmoddi4+0xa6>
 80003f4:	e9c5 6300 	strd	r6, r3, [r5]
 80003f8:	e7e3      	b.n	80003c2 <__udivmoddi4+0xa6>
 80003fa:	2a00      	cmp	r2, #0
 80003fc:	f040 8090 	bne.w	8000520 <__udivmoddi4+0x204>
 8000400:	eba1 040c 	sub.w	r4, r1, ip
 8000404:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000408:	fa1f f78c 	uxth.w	r7, ip
 800040c:	2101      	movs	r1, #1
 800040e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000412:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000416:	fb08 4416 	mls	r4, r8, r6, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb07 f006 	mul.w	r0, r7, r6
 8000422:	4298      	cmp	r0, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x11c>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f106 34ff 	add.w	r4, r6, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x11a>
 8000430:	4298      	cmp	r0, r3
 8000432:	f200 80cd 	bhi.w	80005d0 <__udivmoddi4+0x2b4>
 8000436:	4626      	mov	r6, r4
 8000438:	1a1c      	subs	r4, r3, r0
 800043a:	fa1f f38e 	uxth.w	r3, lr
 800043e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000442:	fb08 4410 	mls	r4, r8, r0, r4
 8000446:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044a:	fb00 f707 	mul.w	r7, r0, r7
 800044e:	429f      	cmp	r7, r3
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x148>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 34ff 	add.w	r4, r0, #4294967295
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x146>
 800045c:	429f      	cmp	r7, r3
 800045e:	f200 80b0 	bhi.w	80005c2 <__udivmoddi4+0x2a6>
 8000462:	4620      	mov	r0, r4
 8000464:	1bdb      	subs	r3, r3, r7
 8000466:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046a:	e7a5      	b.n	80003b8 <__udivmoddi4+0x9c>
 800046c:	f1c1 0620 	rsb	r6, r1, #32
 8000470:	408b      	lsls	r3, r1
 8000472:	fa22 f706 	lsr.w	r7, r2, r6
 8000476:	431f      	orrs	r7, r3
 8000478:	fa20 fc06 	lsr.w	ip, r0, r6
 800047c:	fa04 f301 	lsl.w	r3, r4, r1
 8000480:	ea43 030c 	orr.w	r3, r3, ip
 8000484:	40f4      	lsrs	r4, r6
 8000486:	fa00 f801 	lsl.w	r8, r0, r1
 800048a:	0c38      	lsrs	r0, r7, #16
 800048c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000490:	fbb4 fef0 	udiv	lr, r4, r0
 8000494:	fa1f fc87 	uxth.w	ip, r7
 8000498:	fb00 441e 	mls	r4, r0, lr, r4
 800049c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a0:	fb0e f90c 	mul.w	r9, lr, ip
 80004a4:	45a1      	cmp	r9, r4
 80004a6:	fa02 f201 	lsl.w	r2, r2, r1
 80004aa:	d90a      	bls.n	80004c2 <__udivmoddi4+0x1a6>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004b2:	f080 8084 	bcs.w	80005be <__udivmoddi4+0x2a2>
 80004b6:	45a1      	cmp	r9, r4
 80004b8:	f240 8081 	bls.w	80005be <__udivmoddi4+0x2a2>
 80004bc:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	eba4 0409 	sub.w	r4, r4, r9
 80004c6:	fa1f f983 	uxth.w	r9, r3
 80004ca:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ce:	fb00 4413 	mls	r4, r0, r3, r4
 80004d2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004d6:	fb03 fc0c 	mul.w	ip, r3, ip
 80004da:	45a4      	cmp	ip, r4
 80004dc:	d907      	bls.n	80004ee <__udivmoddi4+0x1d2>
 80004de:	193c      	adds	r4, r7, r4
 80004e0:	f103 30ff 	add.w	r0, r3, #4294967295
 80004e4:	d267      	bcs.n	80005b6 <__udivmoddi4+0x29a>
 80004e6:	45a4      	cmp	ip, r4
 80004e8:	d965      	bls.n	80005b6 <__udivmoddi4+0x29a>
 80004ea:	3b02      	subs	r3, #2
 80004ec:	443c      	add	r4, r7
 80004ee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f2:	fba0 9302 	umull	r9, r3, r0, r2
 80004f6:	eba4 040c 	sub.w	r4, r4, ip
 80004fa:	429c      	cmp	r4, r3
 80004fc:	46ce      	mov	lr, r9
 80004fe:	469c      	mov	ip, r3
 8000500:	d351      	bcc.n	80005a6 <__udivmoddi4+0x28a>
 8000502:	d04e      	beq.n	80005a2 <__udivmoddi4+0x286>
 8000504:	b155      	cbz	r5, 800051c <__udivmoddi4+0x200>
 8000506:	ebb8 030e 	subs.w	r3, r8, lr
 800050a:	eb64 040c 	sbc.w	r4, r4, ip
 800050e:	fa04 f606 	lsl.w	r6, r4, r6
 8000512:	40cb      	lsrs	r3, r1
 8000514:	431e      	orrs	r6, r3
 8000516:	40cc      	lsrs	r4, r1
 8000518:	e9c5 6400 	strd	r6, r4, [r5]
 800051c:	2100      	movs	r1, #0
 800051e:	e750      	b.n	80003c2 <__udivmoddi4+0xa6>
 8000520:	f1c2 0320 	rsb	r3, r2, #32
 8000524:	fa20 f103 	lsr.w	r1, r0, r3
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	fa24 f303 	lsr.w	r3, r4, r3
 8000530:	4094      	lsls	r4, r2
 8000532:	430c      	orrs	r4, r1
 8000534:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000538:	fa00 fe02 	lsl.w	lr, r0, r2
 800053c:	fa1f f78c 	uxth.w	r7, ip
 8000540:	fbb3 f0f8 	udiv	r0, r3, r8
 8000544:	fb08 3110 	mls	r1, r8, r0, r3
 8000548:	0c23      	lsrs	r3, r4, #16
 800054a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800054e:	fb00 f107 	mul.w	r1, r0, r7
 8000552:	4299      	cmp	r1, r3
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x24c>
 8000556:	eb1c 0303 	adds.w	r3, ip, r3
 800055a:	f100 36ff 	add.w	r6, r0, #4294967295
 800055e:	d22c      	bcs.n	80005ba <__udivmoddi4+0x29e>
 8000560:	4299      	cmp	r1, r3
 8000562:	d92a      	bls.n	80005ba <__udivmoddi4+0x29e>
 8000564:	3802      	subs	r0, #2
 8000566:	4463      	add	r3, ip
 8000568:	1a5b      	subs	r3, r3, r1
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000570:	fb08 3311 	mls	r3, r8, r1, r3
 8000574:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000578:	fb01 f307 	mul.w	r3, r1, r7
 800057c:	42a3      	cmp	r3, r4
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x276>
 8000580:	eb1c 0404 	adds.w	r4, ip, r4
 8000584:	f101 36ff 	add.w	r6, r1, #4294967295
 8000588:	d213      	bcs.n	80005b2 <__udivmoddi4+0x296>
 800058a:	42a3      	cmp	r3, r4
 800058c:	d911      	bls.n	80005b2 <__udivmoddi4+0x296>
 800058e:	3902      	subs	r1, #2
 8000590:	4464      	add	r4, ip
 8000592:	1ae4      	subs	r4, r4, r3
 8000594:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000598:	e739      	b.n	800040e <__udivmoddi4+0xf2>
 800059a:	4604      	mov	r4, r0
 800059c:	e6f0      	b.n	8000380 <__udivmoddi4+0x64>
 800059e:	4608      	mov	r0, r1
 80005a0:	e706      	b.n	80003b0 <__udivmoddi4+0x94>
 80005a2:	45c8      	cmp	r8, r9
 80005a4:	d2ae      	bcs.n	8000504 <__udivmoddi4+0x1e8>
 80005a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80005aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80005ae:	3801      	subs	r0, #1
 80005b0:	e7a8      	b.n	8000504 <__udivmoddi4+0x1e8>
 80005b2:	4631      	mov	r1, r6
 80005b4:	e7ed      	b.n	8000592 <__udivmoddi4+0x276>
 80005b6:	4603      	mov	r3, r0
 80005b8:	e799      	b.n	80004ee <__udivmoddi4+0x1d2>
 80005ba:	4630      	mov	r0, r6
 80005bc:	e7d4      	b.n	8000568 <__udivmoddi4+0x24c>
 80005be:	46d6      	mov	lr, sl
 80005c0:	e77f      	b.n	80004c2 <__udivmoddi4+0x1a6>
 80005c2:	4463      	add	r3, ip
 80005c4:	3802      	subs	r0, #2
 80005c6:	e74d      	b.n	8000464 <__udivmoddi4+0x148>
 80005c8:	4606      	mov	r6, r0
 80005ca:	4623      	mov	r3, r4
 80005cc:	4608      	mov	r0, r1
 80005ce:	e70f      	b.n	80003f0 <__udivmoddi4+0xd4>
 80005d0:	3e02      	subs	r6, #2
 80005d2:	4463      	add	r3, ip
 80005d4:	e730      	b.n	8000438 <__udivmoddi4+0x11c>
 80005d6:	bf00      	nop

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005e2:	4b11      	ldr	r3, [pc, #68]	@ (8000628 <MX_DMA_Init+0x4c>)
 80005e4:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 80005e8:	4a0f      	ldr	r2, [pc, #60]	@ (8000628 <MX_DMA_Init+0x4c>)
 80005ea:	f043 0301 	orr.w	r3, r3, #1
 80005ee:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 80005f2:	4b0d      	ldr	r3, [pc, #52]	@ (8000628 <MX_DMA_Init+0x4c>)
 80005f4:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 80005f8:	f003 0301 	and.w	r3, r3, #1
 80005fc:	607b      	str	r3, [r7, #4]
 80005fe:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 6, 0);
 8000600:	2200      	movs	r2, #0
 8000602:	2106      	movs	r1, #6
 8000604:	200b      	movs	r0, #11
 8000606:	f000 fe15 	bl	8001234 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800060a:	200b      	movs	r0, #11
 800060c:	f000 fe2c 	bl	8001268 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 6, 0);
 8000610:	2200      	movs	r2, #0
 8000612:	2106      	movs	r1, #6
 8000614:	200c      	movs	r0, #12
 8000616:	f000 fe0d 	bl	8001234 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800061a:	200c      	movs	r0, #12
 800061c:	f000 fe24 	bl	8001268 <HAL_NVIC_EnableIRQ>

}
 8000620:	bf00      	nop
 8000622:	3708      	adds	r7, #8
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	58024400 	.word	0x58024400

0800062c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b088      	sub	sp, #32
 8000630:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000632:	f107 030c 	add.w	r3, r7, #12
 8000636:	2200      	movs	r2, #0
 8000638:	601a      	str	r2, [r3, #0]
 800063a:	605a      	str	r2, [r3, #4]
 800063c:	609a      	str	r2, [r3, #8]
 800063e:	60da      	str	r2, [r3, #12]
 8000640:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000642:	4b1b      	ldr	r3, [pc, #108]	@ (80006b0 <MX_GPIO_Init+0x84>)
 8000644:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000648:	4a19      	ldr	r2, [pc, #100]	@ (80006b0 <MX_GPIO_Init+0x84>)
 800064a:	f043 0302 	orr.w	r3, r3, #2
 800064e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000652:	4b17      	ldr	r3, [pc, #92]	@ (80006b0 <MX_GPIO_Init+0x84>)
 8000654:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000658:	f003 0302 	and.w	r3, r3, #2
 800065c:	60bb      	str	r3, [r7, #8]
 800065e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000660:	4b13      	ldr	r3, [pc, #76]	@ (80006b0 <MX_GPIO_Init+0x84>)
 8000662:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000666:	4a12      	ldr	r2, [pc, #72]	@ (80006b0 <MX_GPIO_Init+0x84>)
 8000668:	f043 0301 	orr.w	r3, r3, #1
 800066c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000670:	4b0f      	ldr	r3, [pc, #60]	@ (80006b0 <MX_GPIO_Init+0x84>)
 8000672:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000676:	f003 0301 	and.w	r3, r3, #1
 800067a:	607b      	str	r3, [r7, #4]
 800067c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = esp32i2cInterruptReqest_Pin;
 800067e:	2320      	movs	r3, #32
 8000680:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000682:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000686:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000688:	2300      	movs	r3, #0
 800068a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(esp32i2cInterruptReqest_GPIO_Port, &GPIO_InitStruct);
 800068c:	f107 030c 	add.w	r3, r7, #12
 8000690:	4619      	mov	r1, r3
 8000692:	4808      	ldr	r0, [pc, #32]	@ (80006b4 <MX_GPIO_Init+0x88>)
 8000694:	f003 f9d0 	bl	8003a38 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000698:	2200      	movs	r2, #0
 800069a:	2105      	movs	r1, #5
 800069c:	2017      	movs	r0, #23
 800069e:	f000 fdc9 	bl	8001234 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80006a2:	2017      	movs	r0, #23
 80006a4:	f000 fde0 	bl	8001268 <HAL_NVIC_EnableIRQ>

}
 80006a8:	bf00      	nop
 80006aa:	3720      	adds	r7, #32
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	58024400 	.word	0x58024400
 80006b4:	58020400 	.word	0x58020400

080006b8 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006bc:	4b1b      	ldr	r3, [pc, #108]	@ (800072c <MX_I2C1_Init+0x74>)
 80006be:	4a1c      	ldr	r2, [pc, #112]	@ (8000730 <MX_I2C1_Init+0x78>)
 80006c0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20B0CCFF;
 80006c2:	4b1a      	ldr	r3, [pc, #104]	@ (800072c <MX_I2C1_Init+0x74>)
 80006c4:	4a1b      	ldr	r2, [pc, #108]	@ (8000734 <MX_I2C1_Init+0x7c>)
 80006c6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80006c8:	4b18      	ldr	r3, [pc, #96]	@ (800072c <MX_I2C1_Init+0x74>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006ce:	4b17      	ldr	r3, [pc, #92]	@ (800072c <MX_I2C1_Init+0x74>)
 80006d0:	2201      	movs	r2, #1
 80006d2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006d4:	4b15      	ldr	r3, [pc, #84]	@ (800072c <MX_I2C1_Init+0x74>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80006da:	4b14      	ldr	r3, [pc, #80]	@ (800072c <MX_I2C1_Init+0x74>)
 80006dc:	2200      	movs	r2, #0
 80006de:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006e0:	4b12      	ldr	r3, [pc, #72]	@ (800072c <MX_I2C1_Init+0x74>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006e6:	4b11      	ldr	r3, [pc, #68]	@ (800072c <MX_I2C1_Init+0x74>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 80006ec:	4b0f      	ldr	r3, [pc, #60]	@ (800072c <MX_I2C1_Init+0x74>)
 80006ee:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80006f2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006f4:	480d      	ldr	r0, [pc, #52]	@ (800072c <MX_I2C1_Init+0x74>)
 80006f6:	f003 fb75 	bl	8003de4 <HAL_I2C_Init>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000700:	f000 f9e6 	bl	8000ad0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000704:	2100      	movs	r1, #0
 8000706:	4809      	ldr	r0, [pc, #36]	@ (800072c <MX_I2C1_Init+0x74>)
 8000708:	f005 fc92 	bl	8006030 <HAL_I2CEx_ConfigAnalogFilter>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000712:	f000 f9dd 	bl	8000ad0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000716:	2100      	movs	r1, #0
 8000718:	4804      	ldr	r0, [pc, #16]	@ (800072c <MX_I2C1_Init+0x74>)
 800071a:	f005 fcd4 	bl	80060c6 <HAL_I2CEx_ConfigDigitalFilter>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000724:	f000 f9d4 	bl	8000ad0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000728:	bf00      	nop
 800072a:	bd80      	pop	{r7, pc}
 800072c:	2400007c 	.word	0x2400007c
 8000730:	40005400 	.word	0x40005400
 8000734:	20b0ccff 	.word	0x20b0ccff

08000738 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b0ba      	sub	sp, #232	@ 0xe8
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000740:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000744:	2200      	movs	r2, #0
 8000746:	601a      	str	r2, [r3, #0]
 8000748:	605a      	str	r2, [r3, #4]
 800074a:	609a      	str	r2, [r3, #8]
 800074c:	60da      	str	r2, [r3, #12]
 800074e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000750:	f107 0310 	add.w	r3, r7, #16
 8000754:	22c0      	movs	r2, #192	@ 0xc0
 8000756:	2100      	movs	r1, #0
 8000758:	4618      	mov	r0, r3
 800075a:	f00a f87f 	bl	800a85c <memset>
  if(i2cHandle->Instance==I2C1)
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	4a5c      	ldr	r2, [pc, #368]	@ (80008d4 <HAL_I2C_MspInit+0x19c>)
 8000764:	4293      	cmp	r3, r2
 8000766:	f040 80b1 	bne.w	80008cc <HAL_I2C_MspInit+0x194>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800076a:	f04f 0208 	mov.w	r2, #8
 800076e:	f04f 0300 	mov.w	r3, #0
 8000772:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000776:	2300      	movs	r3, #0
 8000778:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800077c:	f107 0310 	add.w	r3, r7, #16
 8000780:	4618      	mov	r0, r3
 8000782:	f006 fd27 	bl	80071d4 <HAL_RCCEx_PeriphCLKConfig>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <HAL_I2C_MspInit+0x58>
    {
      Error_Handler();
 800078c:	f000 f9a0 	bl	8000ad0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000790:	4b51      	ldr	r3, [pc, #324]	@ (80008d8 <HAL_I2C_MspInit+0x1a0>)
 8000792:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000796:	4a50      	ldr	r2, [pc, #320]	@ (80008d8 <HAL_I2C_MspInit+0x1a0>)
 8000798:	f043 0302 	orr.w	r3, r3, #2
 800079c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80007a0:	4b4d      	ldr	r3, [pc, #308]	@ (80008d8 <HAL_I2C_MspInit+0x1a0>)
 80007a2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80007a6:	f003 0302 	and.w	r3, r3, #2
 80007aa:	60fb      	str	r3, [r7, #12]
 80007ac:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80007ae:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80007b2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007b6:	2312      	movs	r3, #18
 80007b8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007bc:	2300      	movs	r3, #0
 80007be:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c2:	2300      	movs	r3, #0
 80007c4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80007c8:	2304      	movs	r3, #4
 80007ca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007ce:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80007d2:	4619      	mov	r1, r3
 80007d4:	4841      	ldr	r0, [pc, #260]	@ (80008dc <HAL_I2C_MspInit+0x1a4>)
 80007d6:	f003 f92f 	bl	8003a38 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80007da:	4b3f      	ldr	r3, [pc, #252]	@ (80008d8 <HAL_I2C_MspInit+0x1a0>)
 80007dc:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80007e0:	4a3d      	ldr	r2, [pc, #244]	@ (80008d8 <HAL_I2C_MspInit+0x1a0>)
 80007e2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80007e6:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 80007ea:	4b3b      	ldr	r3, [pc, #236]	@ (80008d8 <HAL_I2C_MspInit+0x1a0>)
 80007ec:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80007f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80007f4:	60bb      	str	r3, [r7, #8]
 80007f6:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 80007f8:	4b39      	ldr	r3, [pc, #228]	@ (80008e0 <HAL_I2C_MspInit+0x1a8>)
 80007fa:	4a3a      	ldr	r2, [pc, #232]	@ (80008e4 <HAL_I2C_MspInit+0x1ac>)
 80007fc:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 80007fe:	4b38      	ldr	r3, [pc, #224]	@ (80008e0 <HAL_I2C_MspInit+0x1a8>)
 8000800:	2221      	movs	r2, #33	@ 0x21
 8000802:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000804:	4b36      	ldr	r3, [pc, #216]	@ (80008e0 <HAL_I2C_MspInit+0x1a8>)
 8000806:	2200      	movs	r2, #0
 8000808:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800080a:	4b35      	ldr	r3, [pc, #212]	@ (80008e0 <HAL_I2C_MspInit+0x1a8>)
 800080c:	2200      	movs	r2, #0
 800080e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000810:	4b33      	ldr	r3, [pc, #204]	@ (80008e0 <HAL_I2C_MspInit+0x1a8>)
 8000812:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000816:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000818:	4b31      	ldr	r3, [pc, #196]	@ (80008e0 <HAL_I2C_MspInit+0x1a8>)
 800081a:	2200      	movs	r2, #0
 800081c:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800081e:	4b30      	ldr	r3, [pc, #192]	@ (80008e0 <HAL_I2C_MspInit+0x1a8>)
 8000820:	2200      	movs	r2, #0
 8000822:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8000824:	4b2e      	ldr	r3, [pc, #184]	@ (80008e0 <HAL_I2C_MspInit+0x1a8>)
 8000826:	2200      	movs	r2, #0
 8000828:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800082a:	4b2d      	ldr	r3, [pc, #180]	@ (80008e0 <HAL_I2C_MspInit+0x1a8>)
 800082c:	2200      	movs	r2, #0
 800082e:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000830:	4b2b      	ldr	r3, [pc, #172]	@ (80008e0 <HAL_I2C_MspInit+0x1a8>)
 8000832:	2200      	movs	r2, #0
 8000834:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8000836:	482a      	ldr	r0, [pc, #168]	@ (80008e0 <HAL_I2C_MspInit+0x1a8>)
 8000838:	f000 fd24 	bl	8001284 <HAL_DMA_Init>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <HAL_I2C_MspInit+0x10e>
    {
      Error_Handler();
 8000842:	f000 f945 	bl	8000ad0 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	4a25      	ldr	r2, [pc, #148]	@ (80008e0 <HAL_I2C_MspInit+0x1a8>)
 800084a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800084c:	4a24      	ldr	r2, [pc, #144]	@ (80008e0 <HAL_I2C_MspInit+0x1a8>)
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream1;
 8000852:	4b25      	ldr	r3, [pc, #148]	@ (80008e8 <HAL_I2C_MspInit+0x1b0>)
 8000854:	4a25      	ldr	r2, [pc, #148]	@ (80008ec <HAL_I2C_MspInit+0x1b4>)
 8000856:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 8000858:	4b23      	ldr	r3, [pc, #140]	@ (80008e8 <HAL_I2C_MspInit+0x1b0>)
 800085a:	2222      	movs	r2, #34	@ 0x22
 800085c:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800085e:	4b22      	ldr	r3, [pc, #136]	@ (80008e8 <HAL_I2C_MspInit+0x1b0>)
 8000860:	2240      	movs	r2, #64	@ 0x40
 8000862:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000864:	4b20      	ldr	r3, [pc, #128]	@ (80008e8 <HAL_I2C_MspInit+0x1b0>)
 8000866:	2200      	movs	r2, #0
 8000868:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800086a:	4b1f      	ldr	r3, [pc, #124]	@ (80008e8 <HAL_I2C_MspInit+0x1b0>)
 800086c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000870:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000872:	4b1d      	ldr	r3, [pc, #116]	@ (80008e8 <HAL_I2C_MspInit+0x1b0>)
 8000874:	2200      	movs	r2, #0
 8000876:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000878:	4b1b      	ldr	r3, [pc, #108]	@ (80008e8 <HAL_I2C_MspInit+0x1b0>)
 800087a:	2200      	movs	r2, #0
 800087c:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800087e:	4b1a      	ldr	r3, [pc, #104]	@ (80008e8 <HAL_I2C_MspInit+0x1b0>)
 8000880:	2200      	movs	r2, #0
 8000882:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000884:	4b18      	ldr	r3, [pc, #96]	@ (80008e8 <HAL_I2C_MspInit+0x1b0>)
 8000886:	2200      	movs	r2, #0
 8000888:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800088a:	4b17      	ldr	r3, [pc, #92]	@ (80008e8 <HAL_I2C_MspInit+0x1b0>)
 800088c:	2200      	movs	r2, #0
 800088e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8000890:	4815      	ldr	r0, [pc, #84]	@ (80008e8 <HAL_I2C_MspInit+0x1b0>)
 8000892:	f000 fcf7 	bl	8001284 <HAL_DMA_Init>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <HAL_I2C_MspInit+0x168>
    {
      Error_Handler();
 800089c:	f000 f918 	bl	8000ad0 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	4a11      	ldr	r2, [pc, #68]	@ (80008e8 <HAL_I2C_MspInit+0x1b0>)
 80008a4:	639a      	str	r2, [r3, #56]	@ 0x38
 80008a6:	4a10      	ldr	r2, [pc, #64]	@ (80008e8 <HAL_I2C_MspInit+0x1b0>)
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80008ac:	2200      	movs	r2, #0
 80008ae:	2100      	movs	r1, #0
 80008b0:	201f      	movs	r0, #31
 80008b2:	f000 fcbf 	bl	8001234 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80008b6:	201f      	movs	r0, #31
 80008b8:	f000 fcd6 	bl	8001268 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80008bc:	2200      	movs	r2, #0
 80008be:	2100      	movs	r1, #0
 80008c0:	2020      	movs	r0, #32
 80008c2:	f000 fcb7 	bl	8001234 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80008c6:	2020      	movs	r0, #32
 80008c8:	f000 fcce 	bl	8001268 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80008cc:	bf00      	nop
 80008ce:	37e8      	adds	r7, #232	@ 0xe8
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	40005400 	.word	0x40005400
 80008d8:	58024400 	.word	0x58024400
 80008dc:	58020400 	.word	0x58020400
 80008e0:	240000d0 	.word	0x240000d0
 80008e4:	40020010 	.word	0x40020010
 80008e8:	24000148 	.word	0x24000148
 80008ec:	40020028 	.word	0x40020028

080008f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b08e      	sub	sp, #56	@ 0x38
 80008f4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008f6:	f000 fb65 	bl	8000fc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008fa:	f000 f861 	bl	80009c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008fe:	f7ff fe95 	bl	800062c <MX_GPIO_Init>
  MX_DMA_Init();
 8000902:	f7ff fe6b 	bl	80005dc <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000906:	f000 fa7d 	bl	8000e04 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 800090a:	f7ff fed5 	bl	80006b8 <MX_I2C1_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	uint8_t dataToSend[2];
	dataToSend[0]='A';
 800090e:	2341      	movs	r3, #65	@ 0x41
 8000910:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
	dataToSend[1]='B';
 8000914:	2342      	movs	r3, #66	@ 0x42
 8000916:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
	uint8_t dataToSend1[2];
	dataToSend1[0]='C';
 800091a:	2343      	movs	r3, #67	@ 0x43
 800091c:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
	dataToSend1[1]='D';
 8000920:	2344      	movs	r3, #68	@ 0x44
 8000922:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
	char trash[] = "HelloABCDEF";
 8000926:	4a22      	ldr	r2, [pc, #136]	@ (80009b0 <main+0xc0>)
 8000928:	f107 031c 	add.w	r3, r7, #28
 800092c:	ca07      	ldmia	r2, {r0, r1, r2}
 800092e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	char start[] = "Start";
 8000932:	4a20      	ldr	r2, [pc, #128]	@ (80009b4 <main+0xc4>)
 8000934:	f107 0314 	add.w	r3, r7, #20
 8000938:	e892 0003 	ldmia.w	r2, {r0, r1}
 800093c:	6018      	str	r0, [r3, #0]
 800093e:	3304      	adds	r3, #4
 8000940:	8019      	strh	r1, [r3, #0]
	char trash1[] = "Hello";
 8000942:	4a1d      	ldr	r2, [pc, #116]	@ (80009b8 <main+0xc8>)
 8000944:	f107 030c 	add.w	r3, r7, #12
 8000948:	e892 0003 	ldmia.w	r2, {r0, r1}
 800094c:	6018      	str	r0, [r3, #0]
 800094e:	3304      	adds	r3, #4
 8000950:	8019      	strh	r1, [r3, #0]

	i2cFrame_transmitQueue testTransm;

	testTransm.slaveDevice7bitAddress = I2C_SLAVE_ADDRESS_ESP32<<1;
 8000952:	2378      	movs	r3, #120	@ 0x78
 8000954:	703b      	strb	r3, [r7, #0]
	testTransm.dataSize =sizeof(trash);
 8000956:	230c      	movs	r3, #12
 8000958:	607b      	str	r3, [r7, #4]
	testTransm.pData = &trash;
 800095a:	f107 031c 	add.w	r3, r7, #28
 800095e:	60bb      	str	r3, [r7, #8]

	void* testBuffer;
	size_t bufferLenght = sizeof(testTransm.dataSize)+testTransm.dataSize;
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	3304      	adds	r3, #4
 8000964:	637b      	str	r3, [r7, #52]	@ 0x34
	testBuffer = malloc(bufferLenght); //new char[bufferLenght];
 8000966:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8000968:	f009 fec2 	bl	800a6f0 <malloc>
 800096c:	4603      	mov	r3, r0
 800096e:	633b      	str	r3, [r7, #48]	@ 0x30


	memcpy(testBuffer,&testTransm.dataSize, sizeof(testTransm.dataSize));
 8000970:	687a      	ldr	r2, [r7, #4]
 8000972:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000974:	601a      	str	r2, [r3, #0]
	memcpy(testBuffer+sizeof(size_t), testTransm.pData, testTransm.dataSize);
 8000976:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000978:	3304      	adds	r3, #4
 800097a:	68b9      	ldr	r1, [r7, #8]
 800097c:	687a      	ldr	r2, [r7, #4]
 800097e:	4618      	mov	r0, r3
 8000980:	f009 ffb0 	bl	800a8e4 <memcpy>
  while (1)
  {
		while(HAL_I2C_GetState(&hi2c1)!= HAL_I2C_STATE_READY){};
 8000984:	bf00      	nop
 8000986:	480d      	ldr	r0, [pc, #52]	@ (80009bc <main+0xcc>)
 8000988:	f003 fcb9 	bl	80042fe <HAL_I2C_GetState>
 800098c:	4603      	mov	r3, r0
 800098e:	2b20      	cmp	r3, #32
 8000990:	d1f9      	bne.n	8000986 <main+0x96>
		//HAL_StatusTypeDef retVal = HAL_I2C_Master_Transmit(&hi2c1, I2C_SLAVE_ADDRESS_ESP32<<1, (uint8_t*) testBuffer, bufferLenght,20000);

		HAL_StatusTypeDef retVal =HAL_I2C_Master_Transmit_DMA(&hi2c1, I2C_SLAVE_ADDRESS_ESP32<<1, (uint8_t*) testBuffer, bufferLenght);
 8000992:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000994:	b29b      	uxth	r3, r3
 8000996:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000998:	2178      	movs	r1, #120	@ 0x78
 800099a:	4808      	ldr	r0, [pc, #32]	@ (80009bc <main+0xcc>)
 800099c:	f003 fabe 	bl	8003f1c <HAL_I2C_Master_Transmit_DMA>
 80009a0:	4603      	mov	r3, r0
 80009a2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

		//pętla opóźniająca jest potrzebna między kolejnymi przesyłkami
//		for(uint32_t i=0; i<0xfffff; i++){
//
//		}
		HAL_Delay(10);
 80009a6:	200a      	movs	r0, #10
 80009a8:	f000 fb68 	bl	800107c <HAL_Delay>
  {
 80009ac:	e7ea      	b.n	8000984 <main+0x94>
 80009ae:	bf00      	nop
 80009b0:	0800a918 	.word	0x0800a918
 80009b4:	0800a924 	.word	0x0800a924
 80009b8:	0800a92c 	.word	0x0800a92c
 80009bc:	2400007c 	.word	0x2400007c

080009c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b09c      	sub	sp, #112	@ 0x70
 80009c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009ca:	224c      	movs	r2, #76	@ 0x4c
 80009cc:	2100      	movs	r1, #0
 80009ce:	4618      	mov	r0, r3
 80009d0:	f009 ff44 	bl	800a85c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009d4:	1d3b      	adds	r3, r7, #4
 80009d6:	2220      	movs	r2, #32
 80009d8:	2100      	movs	r1, #0
 80009da:	4618      	mov	r0, r3
 80009dc:	f009 ff3e 	bl	800a85c <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 80009e0:	4b30      	ldr	r3, [pc, #192]	@ (8000aa4 <SystemClock_Config+0xe4>)
 80009e2:	f04f 32ff 	mov.w	r2, #4294967295
 80009e6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80009ea:	2002      	movs	r0, #2
 80009ec:	f005 fbb8 	bl	8006160 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80009f0:	2300      	movs	r3, #0
 80009f2:	603b      	str	r3, [r7, #0]
 80009f4:	4b2c      	ldr	r3, [pc, #176]	@ (8000aa8 <SystemClock_Config+0xe8>)
 80009f6:	699b      	ldr	r3, [r3, #24]
 80009f8:	4a2b      	ldr	r2, [pc, #172]	@ (8000aa8 <SystemClock_Config+0xe8>)
 80009fa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80009fe:	6193      	str	r3, [r2, #24]
 8000a00:	4b29      	ldr	r3, [pc, #164]	@ (8000aa8 <SystemClock_Config+0xe8>)
 8000a02:	699b      	ldr	r3, [r3, #24]
 8000a04:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a08:	603b      	str	r3, [r7, #0]
 8000a0a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a0c:	bf00      	nop
 8000a0e:	4b26      	ldr	r3, [pc, #152]	@ (8000aa8 <SystemClock_Config+0xe8>)
 8000a10:	699b      	ldr	r3, [r3, #24]
 8000a12:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000a16:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000a1a:	d1f8      	bne.n	8000a0e <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a1c:	2302      	movs	r3, #2
 8000a1e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000a20:	2301      	movs	r3, #1
 8000a22:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8000a24:	2340      	movs	r3, #64	@ 0x40
 8000a26:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a28:	2302      	movs	r3, #2
 8000a2a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a30:	2304      	movs	r3, #4
 8000a32:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 35;
 8000a34:	2323      	movs	r3, #35	@ 0x23
 8000a36:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000a38:	2302      	movs	r3, #2
 8000a3a:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000a3c:	2302      	movs	r3, #2
 8000a3e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a40:	2302      	movs	r3, #2
 8000a42:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000a44:	230c      	movs	r3, #12
 8000a46:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a50:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a54:	4618      	mov	r0, r3
 8000a56:	f005 fbbd 	bl	80061d4 <HAL_RCC_OscConfig>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000a60:	f000 f836 	bl	8000ad0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a64:	233f      	movs	r3, #63	@ 0x3f
 8000a66:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a68:	2303      	movs	r3, #3
 8000a6a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000a70:	2300      	movs	r3, #0
 8000a72:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000a74:	2340      	movs	r3, #64	@ 0x40
 8000a76:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000a78:	2340      	movs	r3, #64	@ 0x40
 8000a7a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000a7c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a80:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000a82:	2340      	movs	r3, #64	@ 0x40
 8000a84:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000a86:	1d3b      	adds	r3, r7, #4
 8000a88:	2106      	movs	r1, #6
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f005 ffd4 	bl	8006a38 <HAL_RCC_ClockConfig>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <SystemClock_Config+0xda>
  {
    Error_Handler();
 8000a96:	f000 f81b 	bl	8000ad0 <Error_Handler>
  }
}
 8000a9a:	bf00      	nop
 8000a9c:	3770      	adds	r7, #112	@ 0x70
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	58024400 	.word	0x58024400
 8000aa8:	58024800 	.word	0x58024800

08000aac <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a04      	ldr	r2, [pc, #16]	@ (8000acc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000aba:	4293      	cmp	r3, r2
 8000abc:	d101      	bne.n	8000ac2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000abe:	f000 fabd 	bl	800103c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ac2:	bf00      	nop
 8000ac4:	3708      	adds	r7, #8
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	40010000 	.word	0x40010000

08000ad0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ad4:	b672      	cpsid	i
}
 8000ad6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ad8:	bf00      	nop
 8000ada:	e7fd      	b.n	8000ad8 <Error_Handler+0x8>

08000adc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	b083      	sub	sp, #12
 8000ae0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ae2:	4b0a      	ldr	r3, [pc, #40]	@ (8000b0c <HAL_MspInit+0x30>)
 8000ae4:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000ae8:	4a08      	ldr	r2, [pc, #32]	@ (8000b0c <HAL_MspInit+0x30>)
 8000aea:	f043 0302 	orr.w	r3, r3, #2
 8000aee:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8000af2:	4b06      	ldr	r3, [pc, #24]	@ (8000b0c <HAL_MspInit+0x30>)
 8000af4:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000af8:	f003 0302 	and.w	r3, r3, #2
 8000afc:	607b      	str	r3, [r7, #4]
 8000afe:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b00:	bf00      	nop
 8000b02:	370c      	adds	r7, #12
 8000b04:	46bd      	mov	sp, r7
 8000b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0a:	4770      	bx	lr
 8000b0c:	58024400 	.word	0x58024400

08000b10 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b08e      	sub	sp, #56	@ 0x38
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	2b0f      	cmp	r3, #15
 8000b1c:	d844      	bhi.n	8000ba8 <HAL_InitTick+0x98>
  {
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0U);
 8000b1e:	2200      	movs	r2, #0
 8000b20:	6879      	ldr	r1, [r7, #4]
 8000b22:	2019      	movs	r0, #25
 8000b24:	f000 fb86 	bl	8001234 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000b28:	2019      	movs	r0, #25
 8000b2a:	f000 fb9d 	bl	8001268 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8000b2e:	4a24      	ldr	r2, [pc, #144]	@ (8000bc0 <HAL_InitTick+0xb0>)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000b34:	4b23      	ldr	r3, [pc, #140]	@ (8000bc4 <HAL_InitTick+0xb4>)
 8000b36:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8000b3a:	4a22      	ldr	r2, [pc, #136]	@ (8000bc4 <HAL_InitTick+0xb4>)
 8000b3c:	f043 0301 	orr.w	r3, r3, #1
 8000b40:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 8000b44:	4b1f      	ldr	r3, [pc, #124]	@ (8000bc4 <HAL_InitTick+0xb4>)
 8000b46:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8000b4a:	f003 0301 	and.w	r3, r3, #1
 8000b4e:	60bb      	str	r3, [r7, #8]
 8000b50:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b52:	f107 020c 	add.w	r2, r7, #12
 8000b56:	f107 0310 	add.w	r3, r7, #16
 8000b5a:	4611      	mov	r1, r2
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f006 faf7 	bl	8007150 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000b62:	f006 fadf 	bl	8007124 <HAL_RCC_GetPCLK2Freq>
 8000b66:	4603      	mov	r3, r0
 8000b68:	005b      	lsls	r3, r3, #1
 8000b6a:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000b6e:	4a16      	ldr	r2, [pc, #88]	@ (8000bc8 <HAL_InitTick+0xb8>)
 8000b70:	fba2 2303 	umull	r2, r3, r2, r3
 8000b74:	0c9b      	lsrs	r3, r3, #18
 8000b76:	3b01      	subs	r3, #1
 8000b78:	633b      	str	r3, [r7, #48]	@ 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000b7a:	4b14      	ldr	r3, [pc, #80]	@ (8000bcc <HAL_InitTick+0xbc>)
 8000b7c:	4a14      	ldr	r2, [pc, #80]	@ (8000bd0 <HAL_InitTick+0xc0>)
 8000b7e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000b80:	4b12      	ldr	r3, [pc, #72]	@ (8000bcc <HAL_InitTick+0xbc>)
 8000b82:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000b86:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000b88:	4a10      	ldr	r2, [pc, #64]	@ (8000bcc <HAL_InitTick+0xbc>)
 8000b8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000b8c:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000b8e:	4b0f      	ldr	r3, [pc, #60]	@ (8000bcc <HAL_InitTick+0xbc>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b94:	4b0d      	ldr	r3, [pc, #52]	@ (8000bcc <HAL_InitTick+0xbc>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000b9a:	480c      	ldr	r0, [pc, #48]	@ (8000bcc <HAL_InitTick+0xbc>)
 8000b9c:	f008 f8fa 	bl	8008d94 <HAL_TIM_Base_Init>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d107      	bne.n	8000bb6 <HAL_InitTick+0xa6>
 8000ba6:	e001      	b.n	8000bac <HAL_InitTick+0x9c>
    return HAL_ERROR;
 8000ba8:	2301      	movs	r3, #1
 8000baa:	e005      	b.n	8000bb8 <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000bac:	4807      	ldr	r0, [pc, #28]	@ (8000bcc <HAL_InitTick+0xbc>)
 8000bae:	f008 f953 	bl	8008e58 <HAL_TIM_Base_Start_IT>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	e000      	b.n	8000bb8 <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 8000bb6:	2301      	movs	r3, #1
}
 8000bb8:	4618      	mov	r0, r3
 8000bba:	3738      	adds	r7, #56	@ 0x38
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	24000008 	.word	0x24000008
 8000bc4:	58024400 	.word	0x58024400
 8000bc8:	431bde83 	.word	0x431bde83
 8000bcc:	240001c0 	.word	0x240001c0
 8000bd0:	40010000 	.word	0x40010000

08000bd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bd8:	bf00      	nop
 8000bda:	e7fd      	b.n	8000bd8 <NMI_Handler+0x4>

08000bdc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000be0:	bf00      	nop
 8000be2:	e7fd      	b.n	8000be0 <HardFault_Handler+0x4>

08000be4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000be8:	bf00      	nop
 8000bea:	e7fd      	b.n	8000be8 <MemManage_Handler+0x4>

08000bec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bf0:	bf00      	nop
 8000bf2:	e7fd      	b.n	8000bf0 <BusFault_Handler+0x4>

08000bf4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bf8:	bf00      	nop
 8000bfa:	e7fd      	b.n	8000bf8 <UsageFault_Handler+0x4>

08000bfc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c00:	bf00      	nop
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr

08000c0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c0a:	b480      	push	{r7}
 8000c0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c0e:	bf00      	nop
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr

08000c18 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c1c:	bf00      	nop
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr

08000c26 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c26:	b480      	push	{r7}
 8000c28:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c2a:	bf00      	nop
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c32:	4770      	bx	lr

08000c34 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8000c38:	4802      	ldr	r0, [pc, #8]	@ (8000c44 <DMA1_Stream0_IRQHandler+0x10>)
 8000c3a:	f001 fb61 	bl	8002300 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000c3e:	bf00      	nop
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	240000d0 	.word	0x240000d0

08000c48 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8000c4c:	4802      	ldr	r0, [pc, #8]	@ (8000c58 <DMA1_Stream1_IRQHandler+0x10>)
 8000c4e:	f001 fb57 	bl	8002300 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8000c52:	bf00      	nop
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	24000148 	.word	0x24000148

08000c5c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(esp32i2cInterruptReqest_Pin);
 8000c60:	2020      	movs	r0, #32
 8000c62:	f003 f899 	bl	8003d98 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000c66:	bf00      	nop
 8000c68:	bd80      	pop	{r7, pc}
	...

08000c6c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000c70:	4802      	ldr	r0, [pc, #8]	@ (8000c7c <TIM1_UP_IRQHandler+0x10>)
 8000c72:	f008 f969 	bl	8008f48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000c76:	bf00      	nop
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	240001c0 	.word	0x240001c0

08000c80 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000c84:	4802      	ldr	r0, [pc, #8]	@ (8000c90 <I2C1_EV_IRQHandler+0x10>)
 8000c86:	f003 fa5d 	bl	8004144 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000c8a:	bf00      	nop
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	2400007c 	.word	0x2400007c

08000c94 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000c98:	4802      	ldr	r0, [pc, #8]	@ (8000ca4 <I2C1_ER_IRQHandler+0x10>)
 8000c9a:	f003 fa6d 	bl	8004178 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000c9e:	bf00      	nop
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	2400007c 	.word	0x2400007c

08000ca8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b086      	sub	sp, #24
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cb0:	4a14      	ldr	r2, [pc, #80]	@ (8000d04 <_sbrk+0x5c>)
 8000cb2:	4b15      	ldr	r3, [pc, #84]	@ (8000d08 <_sbrk+0x60>)
 8000cb4:	1ad3      	subs	r3, r2, r3
 8000cb6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cbc:	4b13      	ldr	r3, [pc, #76]	@ (8000d0c <_sbrk+0x64>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d102      	bne.n	8000cca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cc4:	4b11      	ldr	r3, [pc, #68]	@ (8000d0c <_sbrk+0x64>)
 8000cc6:	4a12      	ldr	r2, [pc, #72]	@ (8000d10 <_sbrk+0x68>)
 8000cc8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cca:	4b10      	ldr	r3, [pc, #64]	@ (8000d0c <_sbrk+0x64>)
 8000ccc:	681a      	ldr	r2, [r3, #0]
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	4413      	add	r3, r2
 8000cd2:	693a      	ldr	r2, [r7, #16]
 8000cd4:	429a      	cmp	r2, r3
 8000cd6:	d207      	bcs.n	8000ce8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cd8:	f009 fdd8 	bl	800a88c <__errno>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	220c      	movs	r2, #12
 8000ce0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ce2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ce6:	e009      	b.n	8000cfc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ce8:	4b08      	ldr	r3, [pc, #32]	@ (8000d0c <_sbrk+0x64>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cee:	4b07      	ldr	r3, [pc, #28]	@ (8000d0c <_sbrk+0x64>)
 8000cf0:	681a      	ldr	r2, [r3, #0]
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	4413      	add	r3, r2
 8000cf6:	4a05      	ldr	r2, [pc, #20]	@ (8000d0c <_sbrk+0x64>)
 8000cf8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cfa:	68fb      	ldr	r3, [r7, #12]
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	3718      	adds	r7, #24
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	24100000 	.word	0x24100000
 8000d08:	00000400 	.word	0x00000400
 8000d0c:	2400020c 	.word	0x2400020c
 8000d10:	240003f0 	.word	0x240003f0

08000d14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000d18:	4b32      	ldr	r3, [pc, #200]	@ (8000de4 <SystemInit+0xd0>)
 8000d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d1e:	4a31      	ldr	r2, [pc, #196]	@ (8000de4 <SystemInit+0xd0>)
 8000d20:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d24:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000d28:	4b2f      	ldr	r3, [pc, #188]	@ (8000de8 <SystemInit+0xd4>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	f003 030f 	and.w	r3, r3, #15
 8000d30:	2b02      	cmp	r3, #2
 8000d32:	d807      	bhi.n	8000d44 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000d34:	4b2c      	ldr	r3, [pc, #176]	@ (8000de8 <SystemInit+0xd4>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	f023 030f 	bic.w	r3, r3, #15
 8000d3c:	4a2a      	ldr	r2, [pc, #168]	@ (8000de8 <SystemInit+0xd4>)
 8000d3e:	f043 0303 	orr.w	r3, r3, #3
 8000d42:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000d44:	4b29      	ldr	r3, [pc, #164]	@ (8000dec <SystemInit+0xd8>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4a28      	ldr	r2, [pc, #160]	@ (8000dec <SystemInit+0xd8>)
 8000d4a:	f043 0301 	orr.w	r3, r3, #1
 8000d4e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000d50:	4b26      	ldr	r3, [pc, #152]	@ (8000dec <SystemInit+0xd8>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000d56:	4b25      	ldr	r3, [pc, #148]	@ (8000dec <SystemInit+0xd8>)
 8000d58:	681a      	ldr	r2, [r3, #0]
 8000d5a:	4924      	ldr	r1, [pc, #144]	@ (8000dec <SystemInit+0xd8>)
 8000d5c:	4b24      	ldr	r3, [pc, #144]	@ (8000df0 <SystemInit+0xdc>)
 8000d5e:	4013      	ands	r3, r2
 8000d60:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000d62:	4b21      	ldr	r3, [pc, #132]	@ (8000de8 <SystemInit+0xd4>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	f003 030c 	and.w	r3, r3, #12
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d007      	beq.n	8000d7e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000d6e:	4b1e      	ldr	r3, [pc, #120]	@ (8000de8 <SystemInit+0xd4>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	f023 030f 	bic.w	r3, r3, #15
 8000d76:	4a1c      	ldr	r2, [pc, #112]	@ (8000de8 <SystemInit+0xd4>)
 8000d78:	f043 0303 	orr.w	r3, r3, #3
 8000d7c:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8000d7e:	4b1b      	ldr	r3, [pc, #108]	@ (8000dec <SystemInit+0xd8>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8000d84:	4b19      	ldr	r3, [pc, #100]	@ (8000dec <SystemInit+0xd8>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8000d8a:	4b18      	ldr	r3, [pc, #96]	@ (8000dec <SystemInit+0xd8>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000d90:	4b16      	ldr	r3, [pc, #88]	@ (8000dec <SystemInit+0xd8>)
 8000d92:	4a18      	ldr	r2, [pc, #96]	@ (8000df4 <SystemInit+0xe0>)
 8000d94:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000d96:	4b15      	ldr	r3, [pc, #84]	@ (8000dec <SystemInit+0xd8>)
 8000d98:	4a17      	ldr	r2, [pc, #92]	@ (8000df8 <SystemInit+0xe4>)
 8000d9a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000d9c:	4b13      	ldr	r3, [pc, #76]	@ (8000dec <SystemInit+0xd8>)
 8000d9e:	4a17      	ldr	r2, [pc, #92]	@ (8000dfc <SystemInit+0xe8>)
 8000da0:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000da2:	4b12      	ldr	r3, [pc, #72]	@ (8000dec <SystemInit+0xd8>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000da8:	4b10      	ldr	r3, [pc, #64]	@ (8000dec <SystemInit+0xd8>)
 8000daa:	4a14      	ldr	r2, [pc, #80]	@ (8000dfc <SystemInit+0xe8>)
 8000dac:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000dae:	4b0f      	ldr	r3, [pc, #60]	@ (8000dec <SystemInit+0xd8>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000db4:	4b0d      	ldr	r3, [pc, #52]	@ (8000dec <SystemInit+0xd8>)
 8000db6:	4a11      	ldr	r2, [pc, #68]	@ (8000dfc <SystemInit+0xe8>)
 8000db8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000dba:	4b0c      	ldr	r3, [pc, #48]	@ (8000dec <SystemInit+0xd8>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000dc0:	4b0a      	ldr	r3, [pc, #40]	@ (8000dec <SystemInit+0xd8>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a09      	ldr	r2, [pc, #36]	@ (8000dec <SystemInit+0xd8>)
 8000dc6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000dca:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000dcc:	4b07      	ldr	r3, [pc, #28]	@ (8000dec <SystemInit+0xd8>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000dd2:	4b0b      	ldr	r3, [pc, #44]	@ (8000e00 <SystemInit+0xec>)
 8000dd4:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000dd8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000dda:	bf00      	nop
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr
 8000de4:	e000ed00 	.word	0xe000ed00
 8000de8:	52002000 	.word	0x52002000
 8000dec:	58024400 	.word	0x58024400
 8000df0:	eaf6ed7f 	.word	0xeaf6ed7f
 8000df4:	02020200 	.word	0x02020200
 8000df8:	01ff0000 	.word	0x01ff0000
 8000dfc:	01010280 	.word	0x01010280
 8000e00:	52004000 	.word	0x52004000

08000e04 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e08:	4b22      	ldr	r3, [pc, #136]	@ (8000e94 <MX_USART1_UART_Init+0x90>)
 8000e0a:	4a23      	ldr	r2, [pc, #140]	@ (8000e98 <MX_USART1_UART_Init+0x94>)
 8000e0c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000e0e:	4b21      	ldr	r3, [pc, #132]	@ (8000e94 <MX_USART1_UART_Init+0x90>)
 8000e10:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e14:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e16:	4b1f      	ldr	r3, [pc, #124]	@ (8000e94 <MX_USART1_UART_Init+0x90>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e1c:	4b1d      	ldr	r3, [pc, #116]	@ (8000e94 <MX_USART1_UART_Init+0x90>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e22:	4b1c      	ldr	r3, [pc, #112]	@ (8000e94 <MX_USART1_UART_Init+0x90>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e28:	4b1a      	ldr	r3, [pc, #104]	@ (8000e94 <MX_USART1_UART_Init+0x90>)
 8000e2a:	220c      	movs	r2, #12
 8000e2c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e2e:	4b19      	ldr	r3, [pc, #100]	@ (8000e94 <MX_USART1_UART_Init+0x90>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e34:	4b17      	ldr	r3, [pc, #92]	@ (8000e94 <MX_USART1_UART_Init+0x90>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e3a:	4b16      	ldr	r3, [pc, #88]	@ (8000e94 <MX_USART1_UART_Init+0x90>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e40:	4b14      	ldr	r3, [pc, #80]	@ (8000e94 <MX_USART1_UART_Init+0x90>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e46:	4b13      	ldr	r3, [pc, #76]	@ (8000e94 <MX_USART1_UART_Init+0x90>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e4c:	4811      	ldr	r0, [pc, #68]	@ (8000e94 <MX_USART1_UART_Init+0x90>)
 8000e4e:	f008 fa6f 	bl	8009330 <HAL_UART_Init>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000e58:	f7ff fe3a 	bl	8000ad0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e5c:	2100      	movs	r1, #0
 8000e5e:	480d      	ldr	r0, [pc, #52]	@ (8000e94 <MX_USART1_UART_Init+0x90>)
 8000e60:	f009 fb7b 	bl	800a55a <HAL_UARTEx_SetTxFifoThreshold>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d001      	beq.n	8000e6e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000e6a:	f7ff fe31 	bl	8000ad0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e6e:	2100      	movs	r1, #0
 8000e70:	4808      	ldr	r0, [pc, #32]	@ (8000e94 <MX_USART1_UART_Init+0x90>)
 8000e72:	f009 fbb0 	bl	800a5d6 <HAL_UARTEx_SetRxFifoThreshold>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d001      	beq.n	8000e80 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000e7c:	f7ff fe28 	bl	8000ad0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000e80:	4804      	ldr	r0, [pc, #16]	@ (8000e94 <MX_USART1_UART_Init+0x90>)
 8000e82:	f009 fb31 	bl	800a4e8 <HAL_UARTEx_DisableFifoMode>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d001      	beq.n	8000e90 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000e8c:	f7ff fe20 	bl	8000ad0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e90:	bf00      	nop
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	24000210 	.word	0x24000210
 8000e98:	40011000 	.word	0x40011000

08000e9c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b0ba      	sub	sp, #232	@ 0xe8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	601a      	str	r2, [r3, #0]
 8000eac:	605a      	str	r2, [r3, #4]
 8000eae:	609a      	str	r2, [r3, #8]
 8000eb0:	60da      	str	r2, [r3, #12]
 8000eb2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000eb4:	f107 0310 	add.w	r3, r7, #16
 8000eb8:	22c0      	movs	r2, #192	@ 0xc0
 8000eba:	2100      	movs	r1, #0
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f009 fccd 	bl	800a85c <memset>
  if(uartHandle->Instance==USART1)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	4a27      	ldr	r2, [pc, #156]	@ (8000f64 <HAL_UART_MspInit+0xc8>)
 8000ec8:	4293      	cmp	r3, r2
 8000eca:	d146      	bne.n	8000f5a <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000ecc:	f04f 0201 	mov.w	r2, #1
 8000ed0:	f04f 0300 	mov.w	r3, #0
 8000ed4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ede:	f107 0310 	add.w	r3, r7, #16
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f006 f976 	bl	80071d4 <HAL_RCCEx_PeriphCLKConfig>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000eee:	f7ff fdef 	bl	8000ad0 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ef2:	4b1d      	ldr	r3, [pc, #116]	@ (8000f68 <HAL_UART_MspInit+0xcc>)
 8000ef4:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8000ef8:	4a1b      	ldr	r2, [pc, #108]	@ (8000f68 <HAL_UART_MspInit+0xcc>)
 8000efa:	f043 0310 	orr.w	r3, r3, #16
 8000efe:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 8000f02:	4b19      	ldr	r3, [pc, #100]	@ (8000f68 <HAL_UART_MspInit+0xcc>)
 8000f04:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8000f08:	f003 0310 	and.w	r3, r3, #16
 8000f0c:	60fb      	str	r3, [r7, #12]
 8000f0e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f10:	4b15      	ldr	r3, [pc, #84]	@ (8000f68 <HAL_UART_MspInit+0xcc>)
 8000f12:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f16:	4a14      	ldr	r2, [pc, #80]	@ (8000f68 <HAL_UART_MspInit+0xcc>)
 8000f18:	f043 0302 	orr.w	r3, r3, #2
 8000f1c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000f20:	4b11      	ldr	r3, [pc, #68]	@ (8000f68 <HAL_UART_MspInit+0xcc>)
 8000f22:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f26:	f003 0302 	and.w	r3, r3, #2
 8000f2a:	60bb      	str	r3, [r7, #8]
 8000f2c:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = dbg_UART_TX_Pin|dbg_UART_RX_Pin;
 8000f2e:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000f32:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f36:	2302      	movs	r3, #2
 8000f38:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f42:	2300      	movs	r3, #0
 8000f44:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8000f48:	2304      	movs	r3, #4
 8000f4a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f4e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000f52:	4619      	mov	r1, r3
 8000f54:	4805      	ldr	r0, [pc, #20]	@ (8000f6c <HAL_UART_MspInit+0xd0>)
 8000f56:	f002 fd6f 	bl	8003a38 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000f5a:	bf00      	nop
 8000f5c:	37e8      	adds	r7, #232	@ 0xe8
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	40011000 	.word	0x40011000
 8000f68:	58024400 	.word	0x58024400
 8000f6c:	58020400 	.word	0x58020400

08000f70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000f70:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000fa8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f74:	f7ff fece 	bl	8000d14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f78:	480c      	ldr	r0, [pc, #48]	@ (8000fac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f7a:	490d      	ldr	r1, [pc, #52]	@ (8000fb0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f7c:	4a0d      	ldr	r2, [pc, #52]	@ (8000fb4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f80:	e002      	b.n	8000f88 <LoopCopyDataInit>

08000f82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f86:	3304      	adds	r3, #4

08000f88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f8c:	d3f9      	bcc.n	8000f82 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f8e:	4a0a      	ldr	r2, [pc, #40]	@ (8000fb8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f90:	4c0a      	ldr	r4, [pc, #40]	@ (8000fbc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f94:	e001      	b.n	8000f9a <LoopFillZerobss>

08000f96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f98:	3204      	adds	r2, #4

08000f9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f9c:	d3fb      	bcc.n	8000f96 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f9e:	f009 fc7b 	bl	800a898 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fa2:	f7ff fca5 	bl	80008f0 <main>
  bx  lr
 8000fa6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000fa8:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8000fac:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000fb0:	24000060 	.word	0x24000060
  ldr r2, =_sidata
 8000fb4:	0800a984 	.word	0x0800a984
  ldr r2, =_sbss
 8000fb8:	24000060 	.word	0x24000060
  ldr r4, =_ebss
 8000fbc:	240003f0 	.word	0x240003f0

08000fc0 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fc0:	e7fe      	b.n	8000fc0 <ADC_IRQHandler>
	...

08000fc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fca:	2003      	movs	r0, #3
 8000fcc:	f000 f927 	bl	800121e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8000fd0:	f005 fee8 	bl	8006da4 <HAL_RCC_GetSysClockFreq>
 8000fd4:	4602      	mov	r2, r0
 8000fd6:	4b15      	ldr	r3, [pc, #84]	@ (800102c <HAL_Init+0x68>)
 8000fd8:	699b      	ldr	r3, [r3, #24]
 8000fda:	0a1b      	lsrs	r3, r3, #8
 8000fdc:	f003 030f 	and.w	r3, r3, #15
 8000fe0:	4913      	ldr	r1, [pc, #76]	@ (8001030 <HAL_Init+0x6c>)
 8000fe2:	5ccb      	ldrb	r3, [r1, r3]
 8000fe4:	f003 031f 	and.w	r3, r3, #31
 8000fe8:	fa22 f303 	lsr.w	r3, r2, r3
 8000fec:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8000fee:	4b0f      	ldr	r3, [pc, #60]	@ (800102c <HAL_Init+0x68>)
 8000ff0:	699b      	ldr	r3, [r3, #24]
 8000ff2:	f003 030f 	and.w	r3, r3, #15
 8000ff6:	4a0e      	ldr	r2, [pc, #56]	@ (8001030 <HAL_Init+0x6c>)
 8000ff8:	5cd3      	ldrb	r3, [r2, r3]
 8000ffa:	f003 031f 	and.w	r3, r3, #31
 8000ffe:	687a      	ldr	r2, [r7, #4]
 8001000:	fa22 f303 	lsr.w	r3, r2, r3
 8001004:	4a0b      	ldr	r2, [pc, #44]	@ (8001034 <HAL_Init+0x70>)
 8001006:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001008:	4a0b      	ldr	r2, [pc, #44]	@ (8001038 <HAL_Init+0x74>)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800100e:	200f      	movs	r0, #15
 8001010:	f7ff fd7e 	bl	8000b10 <HAL_InitTick>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800101a:	2301      	movs	r3, #1
 800101c:	e002      	b.n	8001024 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800101e:	f7ff fd5d 	bl	8000adc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001022:	2300      	movs	r3, #0
}
 8001024:	4618      	mov	r0, r3
 8001026:	3708      	adds	r7, #8
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	58024400 	.word	0x58024400
 8001030:	0800a934 	.word	0x0800a934
 8001034:	24000004 	.word	0x24000004
 8001038:	24000000 	.word	0x24000000

0800103c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001040:	4b06      	ldr	r3, [pc, #24]	@ (800105c <HAL_IncTick+0x20>)
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	461a      	mov	r2, r3
 8001046:	4b06      	ldr	r3, [pc, #24]	@ (8001060 <HAL_IncTick+0x24>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4413      	add	r3, r2
 800104c:	4a04      	ldr	r2, [pc, #16]	@ (8001060 <HAL_IncTick+0x24>)
 800104e:	6013      	str	r3, [r2, #0]
}
 8001050:	bf00      	nop
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	2400000c 	.word	0x2400000c
 8001060:	240002a4 	.word	0x240002a4

08001064 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  return uwTick;
 8001068:	4b03      	ldr	r3, [pc, #12]	@ (8001078 <HAL_GetTick+0x14>)
 800106a:	681b      	ldr	r3, [r3, #0]
}
 800106c:	4618      	mov	r0, r3
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	240002a4 	.word	0x240002a4

0800107c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b084      	sub	sp, #16
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001084:	f7ff ffee 	bl	8001064 <HAL_GetTick>
 8001088:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001094:	d005      	beq.n	80010a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001096:	4b0a      	ldr	r3, [pc, #40]	@ (80010c0 <HAL_Delay+0x44>)
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	461a      	mov	r2, r3
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	4413      	add	r3, r2
 80010a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010a2:	bf00      	nop
 80010a4:	f7ff ffde 	bl	8001064 <HAL_GetTick>
 80010a8:	4602      	mov	r2, r0
 80010aa:	68bb      	ldr	r3, [r7, #8]
 80010ac:	1ad3      	subs	r3, r2, r3
 80010ae:	68fa      	ldr	r2, [r7, #12]
 80010b0:	429a      	cmp	r2, r3
 80010b2:	d8f7      	bhi.n	80010a4 <HAL_Delay+0x28>
  {
  }
}
 80010b4:	bf00      	nop
 80010b6:	bf00      	nop
 80010b8:	3710      	adds	r7, #16
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	2400000c 	.word	0x2400000c

080010c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b085      	sub	sp, #20
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	f003 0307 	and.w	r3, r3, #7
 80010d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010d4:	4b0b      	ldr	r3, [pc, #44]	@ (8001104 <__NVIC_SetPriorityGrouping+0x40>)
 80010d6:	68db      	ldr	r3, [r3, #12]
 80010d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010da:	68ba      	ldr	r2, [r7, #8]
 80010dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80010e0:	4013      	ands	r3, r2
 80010e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80010ec:	4b06      	ldr	r3, [pc, #24]	@ (8001108 <__NVIC_SetPriorityGrouping+0x44>)
 80010ee:	4313      	orrs	r3, r2
 80010f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010f2:	4a04      	ldr	r2, [pc, #16]	@ (8001104 <__NVIC_SetPriorityGrouping+0x40>)
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	60d3      	str	r3, [r2, #12]
}
 80010f8:	bf00      	nop
 80010fa:	3714      	adds	r7, #20
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr
 8001104:	e000ed00 	.word	0xe000ed00
 8001108:	05fa0000 	.word	0x05fa0000

0800110c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001110:	4b04      	ldr	r3, [pc, #16]	@ (8001124 <__NVIC_GetPriorityGrouping+0x18>)
 8001112:	68db      	ldr	r3, [r3, #12]
 8001114:	0a1b      	lsrs	r3, r3, #8
 8001116:	f003 0307 	and.w	r3, r3, #7
}
 800111a:	4618      	mov	r0, r3
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr
 8001124:	e000ed00 	.word	0xe000ed00

08001128 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001128:	b480      	push	{r7}
 800112a:	b083      	sub	sp, #12
 800112c:	af00      	add	r7, sp, #0
 800112e:	4603      	mov	r3, r0
 8001130:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001132:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001136:	2b00      	cmp	r3, #0
 8001138:	db0b      	blt.n	8001152 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800113a:	88fb      	ldrh	r3, [r7, #6]
 800113c:	f003 021f 	and.w	r2, r3, #31
 8001140:	4907      	ldr	r1, [pc, #28]	@ (8001160 <__NVIC_EnableIRQ+0x38>)
 8001142:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001146:	095b      	lsrs	r3, r3, #5
 8001148:	2001      	movs	r0, #1
 800114a:	fa00 f202 	lsl.w	r2, r0, r2
 800114e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001152:	bf00      	nop
 8001154:	370c      	adds	r7, #12
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	e000e100 	.word	0xe000e100

08001164 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001164:	b480      	push	{r7}
 8001166:	b083      	sub	sp, #12
 8001168:	af00      	add	r7, sp, #0
 800116a:	4603      	mov	r3, r0
 800116c:	6039      	str	r1, [r7, #0]
 800116e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001170:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001174:	2b00      	cmp	r3, #0
 8001176:	db0a      	blt.n	800118e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	b2da      	uxtb	r2, r3
 800117c:	490c      	ldr	r1, [pc, #48]	@ (80011b0 <__NVIC_SetPriority+0x4c>)
 800117e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001182:	0112      	lsls	r2, r2, #4
 8001184:	b2d2      	uxtb	r2, r2
 8001186:	440b      	add	r3, r1
 8001188:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800118c:	e00a      	b.n	80011a4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	b2da      	uxtb	r2, r3
 8001192:	4908      	ldr	r1, [pc, #32]	@ (80011b4 <__NVIC_SetPriority+0x50>)
 8001194:	88fb      	ldrh	r3, [r7, #6]
 8001196:	f003 030f 	and.w	r3, r3, #15
 800119a:	3b04      	subs	r3, #4
 800119c:	0112      	lsls	r2, r2, #4
 800119e:	b2d2      	uxtb	r2, r2
 80011a0:	440b      	add	r3, r1
 80011a2:	761a      	strb	r2, [r3, #24]
}
 80011a4:	bf00      	nop
 80011a6:	370c      	adds	r7, #12
 80011a8:	46bd      	mov	sp, r7
 80011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ae:	4770      	bx	lr
 80011b0:	e000e100 	.word	0xe000e100
 80011b4:	e000ed00 	.word	0xe000ed00

080011b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b089      	sub	sp, #36	@ 0x24
 80011bc:	af00      	add	r7, sp, #0
 80011be:	60f8      	str	r0, [r7, #12]
 80011c0:	60b9      	str	r1, [r7, #8]
 80011c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	f003 0307 	and.w	r3, r3, #7
 80011ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011cc:	69fb      	ldr	r3, [r7, #28]
 80011ce:	f1c3 0307 	rsb	r3, r3, #7
 80011d2:	2b04      	cmp	r3, #4
 80011d4:	bf28      	it	cs
 80011d6:	2304      	movcs	r3, #4
 80011d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	3304      	adds	r3, #4
 80011de:	2b06      	cmp	r3, #6
 80011e0:	d902      	bls.n	80011e8 <NVIC_EncodePriority+0x30>
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	3b03      	subs	r3, #3
 80011e6:	e000      	b.n	80011ea <NVIC_EncodePriority+0x32>
 80011e8:	2300      	movs	r3, #0
 80011ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011ec:	f04f 32ff 	mov.w	r2, #4294967295
 80011f0:	69bb      	ldr	r3, [r7, #24]
 80011f2:	fa02 f303 	lsl.w	r3, r2, r3
 80011f6:	43da      	mvns	r2, r3
 80011f8:	68bb      	ldr	r3, [r7, #8]
 80011fa:	401a      	ands	r2, r3
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001200:	f04f 31ff 	mov.w	r1, #4294967295
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	fa01 f303 	lsl.w	r3, r1, r3
 800120a:	43d9      	mvns	r1, r3
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001210:	4313      	orrs	r3, r2
         );
}
 8001212:	4618      	mov	r0, r3
 8001214:	3724      	adds	r7, #36	@ 0x24
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr

0800121e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800121e:	b580      	push	{r7, lr}
 8001220:	b082      	sub	sp, #8
 8001222:	af00      	add	r7, sp, #0
 8001224:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001226:	6878      	ldr	r0, [r7, #4]
 8001228:	f7ff ff4c 	bl	80010c4 <__NVIC_SetPriorityGrouping>
}
 800122c:	bf00      	nop
 800122e:	3708      	adds	r7, #8
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}

08001234 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b086      	sub	sp, #24
 8001238:	af00      	add	r7, sp, #0
 800123a:	4603      	mov	r3, r0
 800123c:	60b9      	str	r1, [r7, #8]
 800123e:	607a      	str	r2, [r7, #4]
 8001240:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001242:	f7ff ff63 	bl	800110c <__NVIC_GetPriorityGrouping>
 8001246:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001248:	687a      	ldr	r2, [r7, #4]
 800124a:	68b9      	ldr	r1, [r7, #8]
 800124c:	6978      	ldr	r0, [r7, #20]
 800124e:	f7ff ffb3 	bl	80011b8 <NVIC_EncodePriority>
 8001252:	4602      	mov	r2, r0
 8001254:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001258:	4611      	mov	r1, r2
 800125a:	4618      	mov	r0, r3
 800125c:	f7ff ff82 	bl	8001164 <__NVIC_SetPriority>
}
 8001260:	bf00      	nop
 8001262:	3718      	adds	r7, #24
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}

08001268 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
 800126e:	4603      	mov	r3, r0
 8001270:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001272:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001276:	4618      	mov	r0, r3
 8001278:	f7ff ff56 	bl	8001128 <__NVIC_EnableIRQ>
}
 800127c:	bf00      	nop
 800127e:	3708      	adds	r7, #8
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}

08001284 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b086      	sub	sp, #24
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800128c:	f7ff feea 	bl	8001064 <HAL_GetTick>
 8001290:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d101      	bne.n	800129c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001298:	2301      	movs	r3, #1
 800129a:	e37d      	b.n	8001998 <HAL_DMA_Init+0x714>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a66      	ldr	r2, [pc, #408]	@ (800143c <HAL_DMA_Init+0x1b8>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d04a      	beq.n	800133c <HAL_DMA_Init+0xb8>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a65      	ldr	r2, [pc, #404]	@ (8001440 <HAL_DMA_Init+0x1bc>)
 80012ac:	4293      	cmp	r3, r2
 80012ae:	d045      	beq.n	800133c <HAL_DMA_Init+0xb8>
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a63      	ldr	r2, [pc, #396]	@ (8001444 <HAL_DMA_Init+0x1c0>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d040      	beq.n	800133c <HAL_DMA_Init+0xb8>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4a62      	ldr	r2, [pc, #392]	@ (8001448 <HAL_DMA_Init+0x1c4>)
 80012c0:	4293      	cmp	r3, r2
 80012c2:	d03b      	beq.n	800133c <HAL_DMA_Init+0xb8>
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a60      	ldr	r2, [pc, #384]	@ (800144c <HAL_DMA_Init+0x1c8>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d036      	beq.n	800133c <HAL_DMA_Init+0xb8>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4a5f      	ldr	r2, [pc, #380]	@ (8001450 <HAL_DMA_Init+0x1cc>)
 80012d4:	4293      	cmp	r3, r2
 80012d6:	d031      	beq.n	800133c <HAL_DMA_Init+0xb8>
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a5d      	ldr	r2, [pc, #372]	@ (8001454 <HAL_DMA_Init+0x1d0>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d02c      	beq.n	800133c <HAL_DMA_Init+0xb8>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4a5c      	ldr	r2, [pc, #368]	@ (8001458 <HAL_DMA_Init+0x1d4>)
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d027      	beq.n	800133c <HAL_DMA_Init+0xb8>
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a5a      	ldr	r2, [pc, #360]	@ (800145c <HAL_DMA_Init+0x1d8>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d022      	beq.n	800133c <HAL_DMA_Init+0xb8>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4a59      	ldr	r2, [pc, #356]	@ (8001460 <HAL_DMA_Init+0x1dc>)
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d01d      	beq.n	800133c <HAL_DMA_Init+0xb8>
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a57      	ldr	r2, [pc, #348]	@ (8001464 <HAL_DMA_Init+0x1e0>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d018      	beq.n	800133c <HAL_DMA_Init+0xb8>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4a56      	ldr	r2, [pc, #344]	@ (8001468 <HAL_DMA_Init+0x1e4>)
 8001310:	4293      	cmp	r3, r2
 8001312:	d013      	beq.n	800133c <HAL_DMA_Init+0xb8>
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a54      	ldr	r2, [pc, #336]	@ (800146c <HAL_DMA_Init+0x1e8>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d00e      	beq.n	800133c <HAL_DMA_Init+0xb8>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4a53      	ldr	r2, [pc, #332]	@ (8001470 <HAL_DMA_Init+0x1ec>)
 8001324:	4293      	cmp	r3, r2
 8001326:	d009      	beq.n	800133c <HAL_DMA_Init+0xb8>
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a51      	ldr	r2, [pc, #324]	@ (8001474 <HAL_DMA_Init+0x1f0>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d004      	beq.n	800133c <HAL_DMA_Init+0xb8>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4a50      	ldr	r2, [pc, #320]	@ (8001478 <HAL_DMA_Init+0x1f4>)
 8001338:	4293      	cmp	r3, r2
 800133a:	d101      	bne.n	8001340 <HAL_DMA_Init+0xbc>
 800133c:	2301      	movs	r3, #1
 800133e:	e000      	b.n	8001342 <HAL_DMA_Init+0xbe>
 8001340:	2300      	movs	r3, #0
 8001342:	2b00      	cmp	r3, #0
 8001344:	f000 813c 	beq.w	80015c0 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2202      	movs	r2, #2
 800134c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2200      	movs	r2, #0
 8001354:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a37      	ldr	r2, [pc, #220]	@ (800143c <HAL_DMA_Init+0x1b8>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d04a      	beq.n	80013f8 <HAL_DMA_Init+0x174>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4a36      	ldr	r2, [pc, #216]	@ (8001440 <HAL_DMA_Init+0x1bc>)
 8001368:	4293      	cmp	r3, r2
 800136a:	d045      	beq.n	80013f8 <HAL_DMA_Init+0x174>
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a34      	ldr	r2, [pc, #208]	@ (8001444 <HAL_DMA_Init+0x1c0>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d040      	beq.n	80013f8 <HAL_DMA_Init+0x174>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4a33      	ldr	r2, [pc, #204]	@ (8001448 <HAL_DMA_Init+0x1c4>)
 800137c:	4293      	cmp	r3, r2
 800137e:	d03b      	beq.n	80013f8 <HAL_DMA_Init+0x174>
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a31      	ldr	r2, [pc, #196]	@ (800144c <HAL_DMA_Init+0x1c8>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d036      	beq.n	80013f8 <HAL_DMA_Init+0x174>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4a30      	ldr	r2, [pc, #192]	@ (8001450 <HAL_DMA_Init+0x1cc>)
 8001390:	4293      	cmp	r3, r2
 8001392:	d031      	beq.n	80013f8 <HAL_DMA_Init+0x174>
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a2e      	ldr	r2, [pc, #184]	@ (8001454 <HAL_DMA_Init+0x1d0>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d02c      	beq.n	80013f8 <HAL_DMA_Init+0x174>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4a2d      	ldr	r2, [pc, #180]	@ (8001458 <HAL_DMA_Init+0x1d4>)
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d027      	beq.n	80013f8 <HAL_DMA_Init+0x174>
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a2b      	ldr	r2, [pc, #172]	@ (800145c <HAL_DMA_Init+0x1d8>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d022      	beq.n	80013f8 <HAL_DMA_Init+0x174>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4a2a      	ldr	r2, [pc, #168]	@ (8001460 <HAL_DMA_Init+0x1dc>)
 80013b8:	4293      	cmp	r3, r2
 80013ba:	d01d      	beq.n	80013f8 <HAL_DMA_Init+0x174>
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a28      	ldr	r2, [pc, #160]	@ (8001464 <HAL_DMA_Init+0x1e0>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d018      	beq.n	80013f8 <HAL_DMA_Init+0x174>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4a27      	ldr	r2, [pc, #156]	@ (8001468 <HAL_DMA_Init+0x1e4>)
 80013cc:	4293      	cmp	r3, r2
 80013ce:	d013      	beq.n	80013f8 <HAL_DMA_Init+0x174>
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a25      	ldr	r2, [pc, #148]	@ (800146c <HAL_DMA_Init+0x1e8>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d00e      	beq.n	80013f8 <HAL_DMA_Init+0x174>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4a24      	ldr	r2, [pc, #144]	@ (8001470 <HAL_DMA_Init+0x1ec>)
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d009      	beq.n	80013f8 <HAL_DMA_Init+0x174>
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a22      	ldr	r2, [pc, #136]	@ (8001474 <HAL_DMA_Init+0x1f0>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d004      	beq.n	80013f8 <HAL_DMA_Init+0x174>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4a21      	ldr	r2, [pc, #132]	@ (8001478 <HAL_DMA_Init+0x1f4>)
 80013f4:	4293      	cmp	r3, r2
 80013f6:	d108      	bne.n	800140a <HAL_DMA_Init+0x186>
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	681a      	ldr	r2, [r3, #0]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f022 0201 	bic.w	r2, r2, #1
 8001406:	601a      	str	r2, [r3, #0]
 8001408:	e007      	b.n	800141a <HAL_DMA_Init+0x196>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	681a      	ldr	r2, [r3, #0]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f022 0201 	bic.w	r2, r2, #1
 8001418:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800141a:	e02f      	b.n	800147c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800141c:	f7ff fe22 	bl	8001064 <HAL_GetTick>
 8001420:	4602      	mov	r2, r0
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	2b05      	cmp	r3, #5
 8001428:	d928      	bls.n	800147c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2220      	movs	r2, #32
 800142e:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2203      	movs	r2, #3
 8001434:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8001438:	2301      	movs	r3, #1
 800143a:	e2ad      	b.n	8001998 <HAL_DMA_Init+0x714>
 800143c:	40020010 	.word	0x40020010
 8001440:	40020028 	.word	0x40020028
 8001444:	40020040 	.word	0x40020040
 8001448:	40020058 	.word	0x40020058
 800144c:	40020070 	.word	0x40020070
 8001450:	40020088 	.word	0x40020088
 8001454:	400200a0 	.word	0x400200a0
 8001458:	400200b8 	.word	0x400200b8
 800145c:	40020410 	.word	0x40020410
 8001460:	40020428 	.word	0x40020428
 8001464:	40020440 	.word	0x40020440
 8001468:	40020458 	.word	0x40020458
 800146c:	40020470 	.word	0x40020470
 8001470:	40020488 	.word	0x40020488
 8001474:	400204a0 	.word	0x400204a0
 8001478:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f003 0301 	and.w	r3, r3, #1
 8001486:	2b00      	cmp	r3, #0
 8001488:	d1c8      	bne.n	800141c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001492:	697a      	ldr	r2, [r7, #20]
 8001494:	4b73      	ldr	r3, [pc, #460]	@ (8001664 <HAL_DMA_Init+0x3e0>)
 8001496:	4013      	ands	r3, r2
 8001498:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80014a2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	691b      	ldr	r3, [r3, #16]
 80014a8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014ae:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	699b      	ldr	r3, [r3, #24]
 80014b4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014ba:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6a1b      	ldr	r3, [r3, #32]
 80014c0:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80014c2:	697a      	ldr	r2, [r7, #20]
 80014c4:	4313      	orrs	r3, r2
 80014c6:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014cc:	2b04      	cmp	r3, #4
 80014ce:	d107      	bne.n	80014e0 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014d8:	4313      	orrs	r3, r2
 80014da:	697a      	ldr	r2, [r7, #20]
 80014dc:	4313      	orrs	r3, r2
 80014de:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	2b28      	cmp	r3, #40	@ 0x28
 80014e6:	d903      	bls.n	80014f0 <HAL_DMA_Init+0x26c>
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	2b2e      	cmp	r3, #46	@ 0x2e
 80014ee:	d91f      	bls.n	8001530 <HAL_DMA_Init+0x2ac>
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	2b3e      	cmp	r3, #62	@ 0x3e
 80014f6:	d903      	bls.n	8001500 <HAL_DMA_Init+0x27c>
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	2b42      	cmp	r3, #66	@ 0x42
 80014fe:	d917      	bls.n	8001530 <HAL_DMA_Init+0x2ac>
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	2b46      	cmp	r3, #70	@ 0x46
 8001506:	d903      	bls.n	8001510 <HAL_DMA_Init+0x28c>
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	2b48      	cmp	r3, #72	@ 0x48
 800150e:	d90f      	bls.n	8001530 <HAL_DMA_Init+0x2ac>
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	2b4e      	cmp	r3, #78	@ 0x4e
 8001516:	d903      	bls.n	8001520 <HAL_DMA_Init+0x29c>
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	2b52      	cmp	r3, #82	@ 0x52
 800151e:	d907      	bls.n	8001530 <HAL_DMA_Init+0x2ac>
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	2b73      	cmp	r3, #115	@ 0x73
 8001526:	d905      	bls.n	8001534 <HAL_DMA_Init+0x2b0>
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	2b77      	cmp	r3, #119	@ 0x77
 800152e:	d801      	bhi.n	8001534 <HAL_DMA_Init+0x2b0>
 8001530:	2301      	movs	r3, #1
 8001532:	e000      	b.n	8001536 <HAL_DMA_Init+0x2b2>
 8001534:	2300      	movs	r3, #0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d003      	beq.n	8001542 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001540:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	697a      	ldr	r2, [r7, #20]
 8001548:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	695b      	ldr	r3, [r3, #20]
 8001550:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	f023 0307 	bic.w	r3, r3, #7
 8001558:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800155e:	697a      	ldr	r2, [r7, #20]
 8001560:	4313      	orrs	r3, r2
 8001562:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001568:	2b04      	cmp	r3, #4
 800156a:	d117      	bne.n	800159c <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001570:	697a      	ldr	r2, [r7, #20]
 8001572:	4313      	orrs	r3, r2
 8001574:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800157a:	2b00      	cmp	r3, #0
 800157c:	d00e      	beq.n	800159c <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800157e:	6878      	ldr	r0, [r7, #4]
 8001580:	f002 f8d0 	bl	8003724 <DMA_CheckFifoParam>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d008      	beq.n	800159c <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2240      	movs	r2, #64	@ 0x40
 800158e:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2201      	movs	r2, #1
 8001594:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8001598:	2301      	movs	r3, #1
 800159a:	e1fd      	b.n	8001998 <HAL_DMA_Init+0x714>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	697a      	ldr	r2, [r7, #20]
 80015a2:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80015a4:	6878      	ldr	r0, [r7, #4]
 80015a6:	f002 f80b 	bl	80035c0 <DMA_CalcBaseAndBitshift>
 80015aa:	4603      	mov	r3, r0
 80015ac:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015b2:	f003 031f 	and.w	r3, r3, #31
 80015b6:	223f      	movs	r2, #63	@ 0x3f
 80015b8:	409a      	lsls	r2, r3
 80015ba:	68bb      	ldr	r3, [r7, #8]
 80015bc:	609a      	str	r2, [r3, #8]
 80015be:	e0fd      	b.n	80017bc <HAL_DMA_Init+0x538>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a28      	ldr	r2, [pc, #160]	@ (8001668 <HAL_DMA_Init+0x3e4>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d04a      	beq.n	8001660 <HAL_DMA_Init+0x3dc>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4a27      	ldr	r2, [pc, #156]	@ (800166c <HAL_DMA_Init+0x3e8>)
 80015d0:	4293      	cmp	r3, r2
 80015d2:	d045      	beq.n	8001660 <HAL_DMA_Init+0x3dc>
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a25      	ldr	r2, [pc, #148]	@ (8001670 <HAL_DMA_Init+0x3ec>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d040      	beq.n	8001660 <HAL_DMA_Init+0x3dc>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4a24      	ldr	r2, [pc, #144]	@ (8001674 <HAL_DMA_Init+0x3f0>)
 80015e4:	4293      	cmp	r3, r2
 80015e6:	d03b      	beq.n	8001660 <HAL_DMA_Init+0x3dc>
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a22      	ldr	r2, [pc, #136]	@ (8001678 <HAL_DMA_Init+0x3f4>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d036      	beq.n	8001660 <HAL_DMA_Init+0x3dc>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4a21      	ldr	r2, [pc, #132]	@ (800167c <HAL_DMA_Init+0x3f8>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d031      	beq.n	8001660 <HAL_DMA_Init+0x3dc>
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a1f      	ldr	r2, [pc, #124]	@ (8001680 <HAL_DMA_Init+0x3fc>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d02c      	beq.n	8001660 <HAL_DMA_Init+0x3dc>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4a1e      	ldr	r2, [pc, #120]	@ (8001684 <HAL_DMA_Init+0x400>)
 800160c:	4293      	cmp	r3, r2
 800160e:	d027      	beq.n	8001660 <HAL_DMA_Init+0x3dc>
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a1c      	ldr	r2, [pc, #112]	@ (8001688 <HAL_DMA_Init+0x404>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d022      	beq.n	8001660 <HAL_DMA_Init+0x3dc>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4a1b      	ldr	r2, [pc, #108]	@ (800168c <HAL_DMA_Init+0x408>)
 8001620:	4293      	cmp	r3, r2
 8001622:	d01d      	beq.n	8001660 <HAL_DMA_Init+0x3dc>
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a19      	ldr	r2, [pc, #100]	@ (8001690 <HAL_DMA_Init+0x40c>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d018      	beq.n	8001660 <HAL_DMA_Init+0x3dc>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4a18      	ldr	r2, [pc, #96]	@ (8001694 <HAL_DMA_Init+0x410>)
 8001634:	4293      	cmp	r3, r2
 8001636:	d013      	beq.n	8001660 <HAL_DMA_Init+0x3dc>
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a16      	ldr	r2, [pc, #88]	@ (8001698 <HAL_DMA_Init+0x414>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d00e      	beq.n	8001660 <HAL_DMA_Init+0x3dc>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a15      	ldr	r2, [pc, #84]	@ (800169c <HAL_DMA_Init+0x418>)
 8001648:	4293      	cmp	r3, r2
 800164a:	d009      	beq.n	8001660 <HAL_DMA_Init+0x3dc>
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a13      	ldr	r2, [pc, #76]	@ (80016a0 <HAL_DMA_Init+0x41c>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d004      	beq.n	8001660 <HAL_DMA_Init+0x3dc>
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4a12      	ldr	r2, [pc, #72]	@ (80016a4 <HAL_DMA_Init+0x420>)
 800165c:	4293      	cmp	r3, r2
 800165e:	d123      	bne.n	80016a8 <HAL_DMA_Init+0x424>
 8001660:	2301      	movs	r3, #1
 8001662:	e022      	b.n	80016aa <HAL_DMA_Init+0x426>
 8001664:	fe10803f 	.word	0xfe10803f
 8001668:	48022c08 	.word	0x48022c08
 800166c:	48022c1c 	.word	0x48022c1c
 8001670:	48022c30 	.word	0x48022c30
 8001674:	48022c44 	.word	0x48022c44
 8001678:	48022c58 	.word	0x48022c58
 800167c:	48022c6c 	.word	0x48022c6c
 8001680:	48022c80 	.word	0x48022c80
 8001684:	48022c94 	.word	0x48022c94
 8001688:	58025408 	.word	0x58025408
 800168c:	5802541c 	.word	0x5802541c
 8001690:	58025430 	.word	0x58025430
 8001694:	58025444 	.word	0x58025444
 8001698:	58025458 	.word	0x58025458
 800169c:	5802546c 	.word	0x5802546c
 80016a0:	58025480 	.word	0x58025480
 80016a4:	58025494 	.word	0x58025494
 80016a8:	2300      	movs	r3, #0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d07d      	beq.n	80017aa <HAL_DMA_Init+0x526>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4a7f      	ldr	r2, [pc, #508]	@ (80018b0 <HAL_DMA_Init+0x62c>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d021      	beq.n	80016fc <HAL_DMA_Init+0x478>
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a7d      	ldr	r2, [pc, #500]	@ (80018b4 <HAL_DMA_Init+0x630>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d01c      	beq.n	80016fc <HAL_DMA_Init+0x478>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a7c      	ldr	r2, [pc, #496]	@ (80018b8 <HAL_DMA_Init+0x634>)
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d017      	beq.n	80016fc <HAL_DMA_Init+0x478>
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a7a      	ldr	r2, [pc, #488]	@ (80018bc <HAL_DMA_Init+0x638>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d012      	beq.n	80016fc <HAL_DMA_Init+0x478>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4a79      	ldr	r2, [pc, #484]	@ (80018c0 <HAL_DMA_Init+0x63c>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	d00d      	beq.n	80016fc <HAL_DMA_Init+0x478>
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a77      	ldr	r2, [pc, #476]	@ (80018c4 <HAL_DMA_Init+0x640>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d008      	beq.n	80016fc <HAL_DMA_Init+0x478>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a76      	ldr	r2, [pc, #472]	@ (80018c8 <HAL_DMA_Init+0x644>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d003      	beq.n	80016fc <HAL_DMA_Init+0x478>
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a74      	ldr	r2, [pc, #464]	@ (80018cc <HAL_DMA_Init+0x648>)
 80016fa:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2202      	movs	r2, #2
 8001700:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2200      	movs	r2, #0
 8001708:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001714:	697a      	ldr	r2, [r7, #20]
 8001716:	4b6e      	ldr	r3, [pc, #440]	@ (80018d0 <HAL_DMA_Init+0x64c>)
 8001718:	4013      	ands	r3, r2
 800171a:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	2b40      	cmp	r3, #64	@ 0x40
 8001722:	d008      	beq.n	8001736 <HAL_DMA_Init+0x4b2>
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	689b      	ldr	r3, [r3, #8]
 8001728:	2b80      	cmp	r3, #128	@ 0x80
 800172a:	d102      	bne.n	8001732 <HAL_DMA_Init+0x4ae>
 800172c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001730:	e002      	b.n	8001738 <HAL_DMA_Init+0x4b4>
 8001732:	2300      	movs	r3, #0
 8001734:	e000      	b.n	8001738 <HAL_DMA_Init+0x4b4>
 8001736:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001738:	687a      	ldr	r2, [r7, #4]
 800173a:	68d2      	ldr	r2, [r2, #12]
 800173c:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800173e:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	691b      	ldr	r3, [r3, #16]
 8001744:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001746:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	695b      	ldr	r3, [r3, #20]
 800174c:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800174e:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	699b      	ldr	r3, [r3, #24]
 8001754:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001756:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	69db      	ldr	r3, [r3, #28]
 800175c:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800175e:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6a1b      	ldr	r3, [r3, #32]
 8001764:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001766:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001768:	697a      	ldr	r2, [r7, #20]
 800176a:	4313      	orrs	r3, r2
 800176c:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	697a      	ldr	r2, [r7, #20]
 8001774:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	461a      	mov	r2, r3
 800177c:	4b55      	ldr	r3, [pc, #340]	@ (80018d4 <HAL_DMA_Init+0x650>)
 800177e:	4413      	add	r3, r2
 8001780:	4a55      	ldr	r2, [pc, #340]	@ (80018d8 <HAL_DMA_Init+0x654>)
 8001782:	fba2 2303 	umull	r2, r3, r2, r3
 8001786:	091b      	lsrs	r3, r3, #4
 8001788:	009a      	lsls	r2, r3, #2
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800178e:	6878      	ldr	r0, [r7, #4]
 8001790:	f001 ff16 	bl	80035c0 <DMA_CalcBaseAndBitshift>
 8001794:	4603      	mov	r3, r0
 8001796:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800179c:	f003 031f 	and.w	r3, r3, #31
 80017a0:	2201      	movs	r2, #1
 80017a2:	409a      	lsls	r2, r3
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	605a      	str	r2, [r3, #4]
 80017a8:	e008      	b.n	80017bc <HAL_DMA_Init+0x538>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2240      	movs	r2, #64	@ 0x40
 80017ae:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2203      	movs	r2, #3
 80017b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 80017b8:	2301      	movs	r3, #1
 80017ba:	e0ed      	b.n	8001998 <HAL_DMA_Init+0x714>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a46      	ldr	r2, [pc, #280]	@ (80018dc <HAL_DMA_Init+0x658>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d072      	beq.n	80018ac <HAL_DMA_Init+0x628>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a45      	ldr	r2, [pc, #276]	@ (80018e0 <HAL_DMA_Init+0x65c>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d06d      	beq.n	80018ac <HAL_DMA_Init+0x628>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a43      	ldr	r2, [pc, #268]	@ (80018e4 <HAL_DMA_Init+0x660>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d068      	beq.n	80018ac <HAL_DMA_Init+0x628>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a42      	ldr	r2, [pc, #264]	@ (80018e8 <HAL_DMA_Init+0x664>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d063      	beq.n	80018ac <HAL_DMA_Init+0x628>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a40      	ldr	r2, [pc, #256]	@ (80018ec <HAL_DMA_Init+0x668>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d05e      	beq.n	80018ac <HAL_DMA_Init+0x628>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a3f      	ldr	r2, [pc, #252]	@ (80018f0 <HAL_DMA_Init+0x66c>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d059      	beq.n	80018ac <HAL_DMA_Init+0x628>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a3d      	ldr	r2, [pc, #244]	@ (80018f4 <HAL_DMA_Init+0x670>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d054      	beq.n	80018ac <HAL_DMA_Init+0x628>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a3c      	ldr	r2, [pc, #240]	@ (80018f8 <HAL_DMA_Init+0x674>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d04f      	beq.n	80018ac <HAL_DMA_Init+0x628>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a3a      	ldr	r2, [pc, #232]	@ (80018fc <HAL_DMA_Init+0x678>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d04a      	beq.n	80018ac <HAL_DMA_Init+0x628>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a39      	ldr	r2, [pc, #228]	@ (8001900 <HAL_DMA_Init+0x67c>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d045      	beq.n	80018ac <HAL_DMA_Init+0x628>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a37      	ldr	r2, [pc, #220]	@ (8001904 <HAL_DMA_Init+0x680>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d040      	beq.n	80018ac <HAL_DMA_Init+0x628>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a36      	ldr	r2, [pc, #216]	@ (8001908 <HAL_DMA_Init+0x684>)
 8001830:	4293      	cmp	r3, r2
 8001832:	d03b      	beq.n	80018ac <HAL_DMA_Init+0x628>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a34      	ldr	r2, [pc, #208]	@ (800190c <HAL_DMA_Init+0x688>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d036      	beq.n	80018ac <HAL_DMA_Init+0x628>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a33      	ldr	r2, [pc, #204]	@ (8001910 <HAL_DMA_Init+0x68c>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d031      	beq.n	80018ac <HAL_DMA_Init+0x628>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a31      	ldr	r2, [pc, #196]	@ (8001914 <HAL_DMA_Init+0x690>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d02c      	beq.n	80018ac <HAL_DMA_Init+0x628>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a30      	ldr	r2, [pc, #192]	@ (8001918 <HAL_DMA_Init+0x694>)
 8001858:	4293      	cmp	r3, r2
 800185a:	d027      	beq.n	80018ac <HAL_DMA_Init+0x628>
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a13      	ldr	r2, [pc, #76]	@ (80018b0 <HAL_DMA_Init+0x62c>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d022      	beq.n	80018ac <HAL_DMA_Init+0x628>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4a12      	ldr	r2, [pc, #72]	@ (80018b4 <HAL_DMA_Init+0x630>)
 800186c:	4293      	cmp	r3, r2
 800186e:	d01d      	beq.n	80018ac <HAL_DMA_Init+0x628>
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a10      	ldr	r2, [pc, #64]	@ (80018b8 <HAL_DMA_Init+0x634>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d018      	beq.n	80018ac <HAL_DMA_Init+0x628>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a0f      	ldr	r2, [pc, #60]	@ (80018bc <HAL_DMA_Init+0x638>)
 8001880:	4293      	cmp	r3, r2
 8001882:	d013      	beq.n	80018ac <HAL_DMA_Init+0x628>
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a0d      	ldr	r2, [pc, #52]	@ (80018c0 <HAL_DMA_Init+0x63c>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d00e      	beq.n	80018ac <HAL_DMA_Init+0x628>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a0c      	ldr	r2, [pc, #48]	@ (80018c4 <HAL_DMA_Init+0x640>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d009      	beq.n	80018ac <HAL_DMA_Init+0x628>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a0a      	ldr	r2, [pc, #40]	@ (80018c8 <HAL_DMA_Init+0x644>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d004      	beq.n	80018ac <HAL_DMA_Init+0x628>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a09      	ldr	r2, [pc, #36]	@ (80018cc <HAL_DMA_Init+0x648>)
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d137      	bne.n	800191c <HAL_DMA_Init+0x698>
 80018ac:	2301      	movs	r3, #1
 80018ae:	e036      	b.n	800191e <HAL_DMA_Init+0x69a>
 80018b0:	58025408 	.word	0x58025408
 80018b4:	5802541c 	.word	0x5802541c
 80018b8:	58025430 	.word	0x58025430
 80018bc:	58025444 	.word	0x58025444
 80018c0:	58025458 	.word	0x58025458
 80018c4:	5802546c 	.word	0x5802546c
 80018c8:	58025480 	.word	0x58025480
 80018cc:	58025494 	.word	0x58025494
 80018d0:	fffe000f 	.word	0xfffe000f
 80018d4:	a7fdabf8 	.word	0xa7fdabf8
 80018d8:	cccccccd 	.word	0xcccccccd
 80018dc:	40020010 	.word	0x40020010
 80018e0:	40020028 	.word	0x40020028
 80018e4:	40020040 	.word	0x40020040
 80018e8:	40020058 	.word	0x40020058
 80018ec:	40020070 	.word	0x40020070
 80018f0:	40020088 	.word	0x40020088
 80018f4:	400200a0 	.word	0x400200a0
 80018f8:	400200b8 	.word	0x400200b8
 80018fc:	40020410 	.word	0x40020410
 8001900:	40020428 	.word	0x40020428
 8001904:	40020440 	.word	0x40020440
 8001908:	40020458 	.word	0x40020458
 800190c:	40020470 	.word	0x40020470
 8001910:	40020488 	.word	0x40020488
 8001914:	400204a0 	.word	0x400204a0
 8001918:	400204b8 	.word	0x400204b8
 800191c:	2300      	movs	r3, #0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d032      	beq.n	8001988 <HAL_DMA_Init+0x704>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001922:	6878      	ldr	r0, [r7, #4]
 8001924:	f001 ff7a 	bl	800381c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	2b80      	cmp	r3, #128	@ 0x80
 800192e:	d102      	bne.n	8001936 <HAL_DMA_Init+0x6b2>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2200      	movs	r2, #0
 8001934:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	685a      	ldr	r2, [r3, #4]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800193e:	b2d2      	uxtb	r2, r2
 8001940:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001946:	687a      	ldr	r2, [r7, #4]
 8001948:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800194a:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d010      	beq.n	8001976 <HAL_DMA_Init+0x6f2>
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	2b08      	cmp	r3, #8
 800195a:	d80c      	bhi.n	8001976 <HAL_DMA_Init+0x6f2>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800195c:	6878      	ldr	r0, [r7, #4]
 800195e:	f001 fff7 	bl	8003950 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001966:	2200      	movs	r2, #0
 8001968:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800196e:	687a      	ldr	r2, [r7, #4]
 8001970:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8001972:	605a      	str	r2, [r3, #4]
 8001974:	e008      	b.n	8001988 <HAL_DMA_Init+0x704>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2200      	movs	r2, #0
 800197a:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2200      	movs	r2, #0
 8001980:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2200      	movs	r2, #0
 8001986:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2200      	movs	r2, #0
 800198c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2201      	movs	r2, #1
 8001992:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001996:	2300      	movs	r3, #0
}
 8001998:	4618      	mov	r0, r3
 800199a:	3718      	adds	r7, #24
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}

080019a0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b086      	sub	sp, #24
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	60f8      	str	r0, [r7, #12]
 80019a8:	60b9      	str	r1, [r7, #8]
 80019aa:	607a      	str	r2, [r7, #4]
 80019ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80019ae:	2300      	movs	r3, #0
 80019b0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d101      	bne.n	80019bc <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80019b8:	2301      	movs	r3, #1
 80019ba:	e226      	b.n	8001e0a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d101      	bne.n	80019ca <HAL_DMA_Start_IT+0x2a>
 80019c6:	2302      	movs	r3, #2
 80019c8:	e21f      	b.n	8001e0a <HAL_DMA_Start_IT+0x46a>
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	2201      	movs	r2, #1
 80019ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	2b01      	cmp	r3, #1
 80019dc:	f040 820a 	bne.w	8001df4 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	2202      	movs	r2, #2
 80019e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	2200      	movs	r2, #0
 80019ec:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a68      	ldr	r2, [pc, #416]	@ (8001b94 <HAL_DMA_Start_IT+0x1f4>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d04a      	beq.n	8001a8e <HAL_DMA_Start_IT+0xee>
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a66      	ldr	r2, [pc, #408]	@ (8001b98 <HAL_DMA_Start_IT+0x1f8>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d045      	beq.n	8001a8e <HAL_DMA_Start_IT+0xee>
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a65      	ldr	r2, [pc, #404]	@ (8001b9c <HAL_DMA_Start_IT+0x1fc>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d040      	beq.n	8001a8e <HAL_DMA_Start_IT+0xee>
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a63      	ldr	r2, [pc, #396]	@ (8001ba0 <HAL_DMA_Start_IT+0x200>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d03b      	beq.n	8001a8e <HAL_DMA_Start_IT+0xee>
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a62      	ldr	r2, [pc, #392]	@ (8001ba4 <HAL_DMA_Start_IT+0x204>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d036      	beq.n	8001a8e <HAL_DMA_Start_IT+0xee>
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a60      	ldr	r2, [pc, #384]	@ (8001ba8 <HAL_DMA_Start_IT+0x208>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d031      	beq.n	8001a8e <HAL_DMA_Start_IT+0xee>
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a5f      	ldr	r2, [pc, #380]	@ (8001bac <HAL_DMA_Start_IT+0x20c>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d02c      	beq.n	8001a8e <HAL_DMA_Start_IT+0xee>
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a5d      	ldr	r2, [pc, #372]	@ (8001bb0 <HAL_DMA_Start_IT+0x210>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d027      	beq.n	8001a8e <HAL_DMA_Start_IT+0xee>
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a5c      	ldr	r2, [pc, #368]	@ (8001bb4 <HAL_DMA_Start_IT+0x214>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d022      	beq.n	8001a8e <HAL_DMA_Start_IT+0xee>
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a5a      	ldr	r2, [pc, #360]	@ (8001bb8 <HAL_DMA_Start_IT+0x218>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d01d      	beq.n	8001a8e <HAL_DMA_Start_IT+0xee>
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a59      	ldr	r2, [pc, #356]	@ (8001bbc <HAL_DMA_Start_IT+0x21c>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d018      	beq.n	8001a8e <HAL_DMA_Start_IT+0xee>
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a57      	ldr	r2, [pc, #348]	@ (8001bc0 <HAL_DMA_Start_IT+0x220>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d013      	beq.n	8001a8e <HAL_DMA_Start_IT+0xee>
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a56      	ldr	r2, [pc, #344]	@ (8001bc4 <HAL_DMA_Start_IT+0x224>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d00e      	beq.n	8001a8e <HAL_DMA_Start_IT+0xee>
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a54      	ldr	r2, [pc, #336]	@ (8001bc8 <HAL_DMA_Start_IT+0x228>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d009      	beq.n	8001a8e <HAL_DMA_Start_IT+0xee>
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a53      	ldr	r2, [pc, #332]	@ (8001bcc <HAL_DMA_Start_IT+0x22c>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d004      	beq.n	8001a8e <HAL_DMA_Start_IT+0xee>
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a51      	ldr	r2, [pc, #324]	@ (8001bd0 <HAL_DMA_Start_IT+0x230>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d108      	bne.n	8001aa0 <HAL_DMA_Start_IT+0x100>
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f022 0201 	bic.w	r2, r2, #1
 8001a9c:	601a      	str	r2, [r3, #0]
 8001a9e:	e007      	b.n	8001ab0 <HAL_DMA_Start_IT+0x110>
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	681a      	ldr	r2, [r3, #0]
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f022 0201 	bic.w	r2, r2, #1
 8001aae:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	687a      	ldr	r2, [r7, #4]
 8001ab4:	68b9      	ldr	r1, [r7, #8]
 8001ab6:	68f8      	ldr	r0, [r7, #12]
 8001ab8:	f001 fb9e 	bl	80031f8 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a34      	ldr	r2, [pc, #208]	@ (8001b94 <HAL_DMA_Start_IT+0x1f4>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d04a      	beq.n	8001b5c <HAL_DMA_Start_IT+0x1bc>
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a33      	ldr	r2, [pc, #204]	@ (8001b98 <HAL_DMA_Start_IT+0x1f8>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d045      	beq.n	8001b5c <HAL_DMA_Start_IT+0x1bc>
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a31      	ldr	r2, [pc, #196]	@ (8001b9c <HAL_DMA_Start_IT+0x1fc>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d040      	beq.n	8001b5c <HAL_DMA_Start_IT+0x1bc>
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a30      	ldr	r2, [pc, #192]	@ (8001ba0 <HAL_DMA_Start_IT+0x200>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d03b      	beq.n	8001b5c <HAL_DMA_Start_IT+0x1bc>
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a2e      	ldr	r2, [pc, #184]	@ (8001ba4 <HAL_DMA_Start_IT+0x204>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d036      	beq.n	8001b5c <HAL_DMA_Start_IT+0x1bc>
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a2d      	ldr	r2, [pc, #180]	@ (8001ba8 <HAL_DMA_Start_IT+0x208>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d031      	beq.n	8001b5c <HAL_DMA_Start_IT+0x1bc>
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a2b      	ldr	r2, [pc, #172]	@ (8001bac <HAL_DMA_Start_IT+0x20c>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d02c      	beq.n	8001b5c <HAL_DMA_Start_IT+0x1bc>
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a2a      	ldr	r2, [pc, #168]	@ (8001bb0 <HAL_DMA_Start_IT+0x210>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d027      	beq.n	8001b5c <HAL_DMA_Start_IT+0x1bc>
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a28      	ldr	r2, [pc, #160]	@ (8001bb4 <HAL_DMA_Start_IT+0x214>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d022      	beq.n	8001b5c <HAL_DMA_Start_IT+0x1bc>
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a27      	ldr	r2, [pc, #156]	@ (8001bb8 <HAL_DMA_Start_IT+0x218>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d01d      	beq.n	8001b5c <HAL_DMA_Start_IT+0x1bc>
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a25      	ldr	r2, [pc, #148]	@ (8001bbc <HAL_DMA_Start_IT+0x21c>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d018      	beq.n	8001b5c <HAL_DMA_Start_IT+0x1bc>
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a24      	ldr	r2, [pc, #144]	@ (8001bc0 <HAL_DMA_Start_IT+0x220>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d013      	beq.n	8001b5c <HAL_DMA_Start_IT+0x1bc>
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a22      	ldr	r2, [pc, #136]	@ (8001bc4 <HAL_DMA_Start_IT+0x224>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d00e      	beq.n	8001b5c <HAL_DMA_Start_IT+0x1bc>
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a21      	ldr	r2, [pc, #132]	@ (8001bc8 <HAL_DMA_Start_IT+0x228>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d009      	beq.n	8001b5c <HAL_DMA_Start_IT+0x1bc>
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a1f      	ldr	r2, [pc, #124]	@ (8001bcc <HAL_DMA_Start_IT+0x22c>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d004      	beq.n	8001b5c <HAL_DMA_Start_IT+0x1bc>
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a1e      	ldr	r2, [pc, #120]	@ (8001bd0 <HAL_DMA_Start_IT+0x230>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d101      	bne.n	8001b60 <HAL_DMA_Start_IT+0x1c0>
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	e000      	b.n	8001b62 <HAL_DMA_Start_IT+0x1c2>
 8001b60:	2300      	movs	r3, #0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d036      	beq.n	8001bd4 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f023 021e 	bic.w	r2, r3, #30
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f042 0216 	orr.w	r2, r2, #22
 8001b78:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d03e      	beq.n	8001c00 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	681a      	ldr	r2, [r3, #0]
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f042 0208 	orr.w	r2, r2, #8
 8001b90:	601a      	str	r2, [r3, #0]
 8001b92:	e035      	b.n	8001c00 <HAL_DMA_Start_IT+0x260>
 8001b94:	40020010 	.word	0x40020010
 8001b98:	40020028 	.word	0x40020028
 8001b9c:	40020040 	.word	0x40020040
 8001ba0:	40020058 	.word	0x40020058
 8001ba4:	40020070 	.word	0x40020070
 8001ba8:	40020088 	.word	0x40020088
 8001bac:	400200a0 	.word	0x400200a0
 8001bb0:	400200b8 	.word	0x400200b8
 8001bb4:	40020410 	.word	0x40020410
 8001bb8:	40020428 	.word	0x40020428
 8001bbc:	40020440 	.word	0x40020440
 8001bc0:	40020458 	.word	0x40020458
 8001bc4:	40020470 	.word	0x40020470
 8001bc8:	40020488 	.word	0x40020488
 8001bcc:	400204a0 	.word	0x400204a0
 8001bd0:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f023 020e 	bic.w	r2, r3, #14
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f042 020a 	orr.w	r2, r2, #10
 8001be6:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d007      	beq.n	8001c00 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f042 0204 	orr.w	r2, r2, #4
 8001bfe:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a83      	ldr	r2, [pc, #524]	@ (8001e14 <HAL_DMA_Start_IT+0x474>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d072      	beq.n	8001cf0 <HAL_DMA_Start_IT+0x350>
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a82      	ldr	r2, [pc, #520]	@ (8001e18 <HAL_DMA_Start_IT+0x478>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d06d      	beq.n	8001cf0 <HAL_DMA_Start_IT+0x350>
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a80      	ldr	r2, [pc, #512]	@ (8001e1c <HAL_DMA_Start_IT+0x47c>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d068      	beq.n	8001cf0 <HAL_DMA_Start_IT+0x350>
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a7f      	ldr	r2, [pc, #508]	@ (8001e20 <HAL_DMA_Start_IT+0x480>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d063      	beq.n	8001cf0 <HAL_DMA_Start_IT+0x350>
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a7d      	ldr	r2, [pc, #500]	@ (8001e24 <HAL_DMA_Start_IT+0x484>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d05e      	beq.n	8001cf0 <HAL_DMA_Start_IT+0x350>
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a7c      	ldr	r2, [pc, #496]	@ (8001e28 <HAL_DMA_Start_IT+0x488>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d059      	beq.n	8001cf0 <HAL_DMA_Start_IT+0x350>
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a7a      	ldr	r2, [pc, #488]	@ (8001e2c <HAL_DMA_Start_IT+0x48c>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d054      	beq.n	8001cf0 <HAL_DMA_Start_IT+0x350>
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a79      	ldr	r2, [pc, #484]	@ (8001e30 <HAL_DMA_Start_IT+0x490>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d04f      	beq.n	8001cf0 <HAL_DMA_Start_IT+0x350>
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a77      	ldr	r2, [pc, #476]	@ (8001e34 <HAL_DMA_Start_IT+0x494>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d04a      	beq.n	8001cf0 <HAL_DMA_Start_IT+0x350>
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a76      	ldr	r2, [pc, #472]	@ (8001e38 <HAL_DMA_Start_IT+0x498>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d045      	beq.n	8001cf0 <HAL_DMA_Start_IT+0x350>
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a74      	ldr	r2, [pc, #464]	@ (8001e3c <HAL_DMA_Start_IT+0x49c>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d040      	beq.n	8001cf0 <HAL_DMA_Start_IT+0x350>
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a73      	ldr	r2, [pc, #460]	@ (8001e40 <HAL_DMA_Start_IT+0x4a0>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d03b      	beq.n	8001cf0 <HAL_DMA_Start_IT+0x350>
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a71      	ldr	r2, [pc, #452]	@ (8001e44 <HAL_DMA_Start_IT+0x4a4>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d036      	beq.n	8001cf0 <HAL_DMA_Start_IT+0x350>
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a70      	ldr	r2, [pc, #448]	@ (8001e48 <HAL_DMA_Start_IT+0x4a8>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d031      	beq.n	8001cf0 <HAL_DMA_Start_IT+0x350>
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a6e      	ldr	r2, [pc, #440]	@ (8001e4c <HAL_DMA_Start_IT+0x4ac>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d02c      	beq.n	8001cf0 <HAL_DMA_Start_IT+0x350>
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a6d      	ldr	r2, [pc, #436]	@ (8001e50 <HAL_DMA_Start_IT+0x4b0>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d027      	beq.n	8001cf0 <HAL_DMA_Start_IT+0x350>
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a6b      	ldr	r2, [pc, #428]	@ (8001e54 <HAL_DMA_Start_IT+0x4b4>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d022      	beq.n	8001cf0 <HAL_DMA_Start_IT+0x350>
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a6a      	ldr	r2, [pc, #424]	@ (8001e58 <HAL_DMA_Start_IT+0x4b8>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d01d      	beq.n	8001cf0 <HAL_DMA_Start_IT+0x350>
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a68      	ldr	r2, [pc, #416]	@ (8001e5c <HAL_DMA_Start_IT+0x4bc>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d018      	beq.n	8001cf0 <HAL_DMA_Start_IT+0x350>
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a67      	ldr	r2, [pc, #412]	@ (8001e60 <HAL_DMA_Start_IT+0x4c0>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d013      	beq.n	8001cf0 <HAL_DMA_Start_IT+0x350>
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a65      	ldr	r2, [pc, #404]	@ (8001e64 <HAL_DMA_Start_IT+0x4c4>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d00e      	beq.n	8001cf0 <HAL_DMA_Start_IT+0x350>
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a64      	ldr	r2, [pc, #400]	@ (8001e68 <HAL_DMA_Start_IT+0x4c8>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d009      	beq.n	8001cf0 <HAL_DMA_Start_IT+0x350>
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a62      	ldr	r2, [pc, #392]	@ (8001e6c <HAL_DMA_Start_IT+0x4cc>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d004      	beq.n	8001cf0 <HAL_DMA_Start_IT+0x350>
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a61      	ldr	r2, [pc, #388]	@ (8001e70 <HAL_DMA_Start_IT+0x4d0>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d101      	bne.n	8001cf4 <HAL_DMA_Start_IT+0x354>
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e000      	b.n	8001cf6 <HAL_DMA_Start_IT+0x356>
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d01a      	beq.n	8001d30 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d007      	beq.n	8001d18 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d12:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001d16:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d007      	beq.n	8001d30 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001d2a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001d2e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a37      	ldr	r2, [pc, #220]	@ (8001e14 <HAL_DMA_Start_IT+0x474>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d04a      	beq.n	8001dd0 <HAL_DMA_Start_IT+0x430>
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a36      	ldr	r2, [pc, #216]	@ (8001e18 <HAL_DMA_Start_IT+0x478>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d045      	beq.n	8001dd0 <HAL_DMA_Start_IT+0x430>
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a34      	ldr	r2, [pc, #208]	@ (8001e1c <HAL_DMA_Start_IT+0x47c>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d040      	beq.n	8001dd0 <HAL_DMA_Start_IT+0x430>
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a33      	ldr	r2, [pc, #204]	@ (8001e20 <HAL_DMA_Start_IT+0x480>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d03b      	beq.n	8001dd0 <HAL_DMA_Start_IT+0x430>
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a31      	ldr	r2, [pc, #196]	@ (8001e24 <HAL_DMA_Start_IT+0x484>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d036      	beq.n	8001dd0 <HAL_DMA_Start_IT+0x430>
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a30      	ldr	r2, [pc, #192]	@ (8001e28 <HAL_DMA_Start_IT+0x488>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d031      	beq.n	8001dd0 <HAL_DMA_Start_IT+0x430>
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a2e      	ldr	r2, [pc, #184]	@ (8001e2c <HAL_DMA_Start_IT+0x48c>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d02c      	beq.n	8001dd0 <HAL_DMA_Start_IT+0x430>
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a2d      	ldr	r2, [pc, #180]	@ (8001e30 <HAL_DMA_Start_IT+0x490>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d027      	beq.n	8001dd0 <HAL_DMA_Start_IT+0x430>
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a2b      	ldr	r2, [pc, #172]	@ (8001e34 <HAL_DMA_Start_IT+0x494>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d022      	beq.n	8001dd0 <HAL_DMA_Start_IT+0x430>
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a2a      	ldr	r2, [pc, #168]	@ (8001e38 <HAL_DMA_Start_IT+0x498>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d01d      	beq.n	8001dd0 <HAL_DMA_Start_IT+0x430>
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a28      	ldr	r2, [pc, #160]	@ (8001e3c <HAL_DMA_Start_IT+0x49c>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d018      	beq.n	8001dd0 <HAL_DMA_Start_IT+0x430>
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a27      	ldr	r2, [pc, #156]	@ (8001e40 <HAL_DMA_Start_IT+0x4a0>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d013      	beq.n	8001dd0 <HAL_DMA_Start_IT+0x430>
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a25      	ldr	r2, [pc, #148]	@ (8001e44 <HAL_DMA_Start_IT+0x4a4>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d00e      	beq.n	8001dd0 <HAL_DMA_Start_IT+0x430>
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a24      	ldr	r2, [pc, #144]	@ (8001e48 <HAL_DMA_Start_IT+0x4a8>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d009      	beq.n	8001dd0 <HAL_DMA_Start_IT+0x430>
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a22      	ldr	r2, [pc, #136]	@ (8001e4c <HAL_DMA_Start_IT+0x4ac>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d004      	beq.n	8001dd0 <HAL_DMA_Start_IT+0x430>
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a21      	ldr	r2, [pc, #132]	@ (8001e50 <HAL_DMA_Start_IT+0x4b0>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d108      	bne.n	8001de2 <HAL_DMA_Start_IT+0x442>
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f042 0201 	orr.w	r2, r2, #1
 8001dde:	601a      	str	r2, [r3, #0]
 8001de0:	e012      	b.n	8001e08 <HAL_DMA_Start_IT+0x468>
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f042 0201 	orr.w	r2, r2, #1
 8001df0:	601a      	str	r2, [r3, #0]
 8001df2:	e009      	b.n	8001e08 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001dfa:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	2200      	movs	r2, #0
 8001e00:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8001e04:	2301      	movs	r3, #1
 8001e06:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8001e08:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3718      	adds	r7, #24
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	40020010 	.word	0x40020010
 8001e18:	40020028 	.word	0x40020028
 8001e1c:	40020040 	.word	0x40020040
 8001e20:	40020058 	.word	0x40020058
 8001e24:	40020070 	.word	0x40020070
 8001e28:	40020088 	.word	0x40020088
 8001e2c:	400200a0 	.word	0x400200a0
 8001e30:	400200b8 	.word	0x400200b8
 8001e34:	40020410 	.word	0x40020410
 8001e38:	40020428 	.word	0x40020428
 8001e3c:	40020440 	.word	0x40020440
 8001e40:	40020458 	.word	0x40020458
 8001e44:	40020470 	.word	0x40020470
 8001e48:	40020488 	.word	0x40020488
 8001e4c:	400204a0 	.word	0x400204a0
 8001e50:	400204b8 	.word	0x400204b8
 8001e54:	58025408 	.word	0x58025408
 8001e58:	5802541c 	.word	0x5802541c
 8001e5c:	58025430 	.word	0x58025430
 8001e60:	58025444 	.word	0x58025444
 8001e64:	58025458 	.word	0x58025458
 8001e68:	5802546c 	.word	0x5802546c
 8001e6c:	58025480 	.word	0x58025480
 8001e70:	58025494 	.word	0x58025494

08001e74 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b084      	sub	sp, #16
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d101      	bne.n	8001e86 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	e237      	b.n	80022f6 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	2b02      	cmp	r3, #2
 8001e90:	d004      	beq.n	8001e9c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2280      	movs	r2, #128	@ 0x80
 8001e96:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	e22c      	b.n	80022f6 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a5c      	ldr	r2, [pc, #368]	@ (8002014 <HAL_DMA_Abort_IT+0x1a0>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d04a      	beq.n	8001f3c <HAL_DMA_Abort_IT+0xc8>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a5b      	ldr	r2, [pc, #364]	@ (8002018 <HAL_DMA_Abort_IT+0x1a4>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d045      	beq.n	8001f3c <HAL_DMA_Abort_IT+0xc8>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a59      	ldr	r2, [pc, #356]	@ (800201c <HAL_DMA_Abort_IT+0x1a8>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d040      	beq.n	8001f3c <HAL_DMA_Abort_IT+0xc8>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a58      	ldr	r2, [pc, #352]	@ (8002020 <HAL_DMA_Abort_IT+0x1ac>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d03b      	beq.n	8001f3c <HAL_DMA_Abort_IT+0xc8>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a56      	ldr	r2, [pc, #344]	@ (8002024 <HAL_DMA_Abort_IT+0x1b0>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d036      	beq.n	8001f3c <HAL_DMA_Abort_IT+0xc8>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a55      	ldr	r2, [pc, #340]	@ (8002028 <HAL_DMA_Abort_IT+0x1b4>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d031      	beq.n	8001f3c <HAL_DMA_Abort_IT+0xc8>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a53      	ldr	r2, [pc, #332]	@ (800202c <HAL_DMA_Abort_IT+0x1b8>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d02c      	beq.n	8001f3c <HAL_DMA_Abort_IT+0xc8>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a52      	ldr	r2, [pc, #328]	@ (8002030 <HAL_DMA_Abort_IT+0x1bc>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d027      	beq.n	8001f3c <HAL_DMA_Abort_IT+0xc8>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a50      	ldr	r2, [pc, #320]	@ (8002034 <HAL_DMA_Abort_IT+0x1c0>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d022      	beq.n	8001f3c <HAL_DMA_Abort_IT+0xc8>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a4f      	ldr	r2, [pc, #316]	@ (8002038 <HAL_DMA_Abort_IT+0x1c4>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d01d      	beq.n	8001f3c <HAL_DMA_Abort_IT+0xc8>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a4d      	ldr	r2, [pc, #308]	@ (800203c <HAL_DMA_Abort_IT+0x1c8>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d018      	beq.n	8001f3c <HAL_DMA_Abort_IT+0xc8>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a4c      	ldr	r2, [pc, #304]	@ (8002040 <HAL_DMA_Abort_IT+0x1cc>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d013      	beq.n	8001f3c <HAL_DMA_Abort_IT+0xc8>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a4a      	ldr	r2, [pc, #296]	@ (8002044 <HAL_DMA_Abort_IT+0x1d0>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d00e      	beq.n	8001f3c <HAL_DMA_Abort_IT+0xc8>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a49      	ldr	r2, [pc, #292]	@ (8002048 <HAL_DMA_Abort_IT+0x1d4>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d009      	beq.n	8001f3c <HAL_DMA_Abort_IT+0xc8>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a47      	ldr	r2, [pc, #284]	@ (800204c <HAL_DMA_Abort_IT+0x1d8>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d004      	beq.n	8001f3c <HAL_DMA_Abort_IT+0xc8>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a46      	ldr	r2, [pc, #280]	@ (8002050 <HAL_DMA_Abort_IT+0x1dc>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d101      	bne.n	8001f40 <HAL_DMA_Abort_IT+0xcc>
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e000      	b.n	8001f42 <HAL_DMA_Abort_IT+0xce>
 8001f40:	2300      	movs	r3, #0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	f000 8086 	beq.w	8002054 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2204      	movs	r2, #4
 8001f4c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a2f      	ldr	r2, [pc, #188]	@ (8002014 <HAL_DMA_Abort_IT+0x1a0>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d04a      	beq.n	8001ff0 <HAL_DMA_Abort_IT+0x17c>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a2e      	ldr	r2, [pc, #184]	@ (8002018 <HAL_DMA_Abort_IT+0x1a4>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d045      	beq.n	8001ff0 <HAL_DMA_Abort_IT+0x17c>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a2c      	ldr	r2, [pc, #176]	@ (800201c <HAL_DMA_Abort_IT+0x1a8>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d040      	beq.n	8001ff0 <HAL_DMA_Abort_IT+0x17c>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a2b      	ldr	r2, [pc, #172]	@ (8002020 <HAL_DMA_Abort_IT+0x1ac>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d03b      	beq.n	8001ff0 <HAL_DMA_Abort_IT+0x17c>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a29      	ldr	r2, [pc, #164]	@ (8002024 <HAL_DMA_Abort_IT+0x1b0>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d036      	beq.n	8001ff0 <HAL_DMA_Abort_IT+0x17c>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a28      	ldr	r2, [pc, #160]	@ (8002028 <HAL_DMA_Abort_IT+0x1b4>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d031      	beq.n	8001ff0 <HAL_DMA_Abort_IT+0x17c>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a26      	ldr	r2, [pc, #152]	@ (800202c <HAL_DMA_Abort_IT+0x1b8>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d02c      	beq.n	8001ff0 <HAL_DMA_Abort_IT+0x17c>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a25      	ldr	r2, [pc, #148]	@ (8002030 <HAL_DMA_Abort_IT+0x1bc>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d027      	beq.n	8001ff0 <HAL_DMA_Abort_IT+0x17c>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a23      	ldr	r2, [pc, #140]	@ (8002034 <HAL_DMA_Abort_IT+0x1c0>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d022      	beq.n	8001ff0 <HAL_DMA_Abort_IT+0x17c>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a22      	ldr	r2, [pc, #136]	@ (8002038 <HAL_DMA_Abort_IT+0x1c4>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d01d      	beq.n	8001ff0 <HAL_DMA_Abort_IT+0x17c>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a20      	ldr	r2, [pc, #128]	@ (800203c <HAL_DMA_Abort_IT+0x1c8>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d018      	beq.n	8001ff0 <HAL_DMA_Abort_IT+0x17c>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a1f      	ldr	r2, [pc, #124]	@ (8002040 <HAL_DMA_Abort_IT+0x1cc>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d013      	beq.n	8001ff0 <HAL_DMA_Abort_IT+0x17c>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a1d      	ldr	r2, [pc, #116]	@ (8002044 <HAL_DMA_Abort_IT+0x1d0>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d00e      	beq.n	8001ff0 <HAL_DMA_Abort_IT+0x17c>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a1c      	ldr	r2, [pc, #112]	@ (8002048 <HAL_DMA_Abort_IT+0x1d4>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d009      	beq.n	8001ff0 <HAL_DMA_Abort_IT+0x17c>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a1a      	ldr	r2, [pc, #104]	@ (800204c <HAL_DMA_Abort_IT+0x1d8>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d004      	beq.n	8001ff0 <HAL_DMA_Abort_IT+0x17c>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a19      	ldr	r2, [pc, #100]	@ (8002050 <HAL_DMA_Abort_IT+0x1dc>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d108      	bne.n	8002002 <HAL_DMA_Abort_IT+0x18e>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f022 0201 	bic.w	r2, r2, #1
 8001ffe:	601a      	str	r2, [r3, #0]
 8002000:	e178      	b.n	80022f4 <HAL_DMA_Abort_IT+0x480>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f022 0201 	bic.w	r2, r2, #1
 8002010:	601a      	str	r2, [r3, #0]
 8002012:	e16f      	b.n	80022f4 <HAL_DMA_Abort_IT+0x480>
 8002014:	40020010 	.word	0x40020010
 8002018:	40020028 	.word	0x40020028
 800201c:	40020040 	.word	0x40020040
 8002020:	40020058 	.word	0x40020058
 8002024:	40020070 	.word	0x40020070
 8002028:	40020088 	.word	0x40020088
 800202c:	400200a0 	.word	0x400200a0
 8002030:	400200b8 	.word	0x400200b8
 8002034:	40020410 	.word	0x40020410
 8002038:	40020428 	.word	0x40020428
 800203c:	40020440 	.word	0x40020440
 8002040:	40020458 	.word	0x40020458
 8002044:	40020470 	.word	0x40020470
 8002048:	40020488 	.word	0x40020488
 800204c:	400204a0 	.word	0x400204a0
 8002050:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f022 020e 	bic.w	r2, r2, #14
 8002062:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a6c      	ldr	r2, [pc, #432]	@ (800221c <HAL_DMA_Abort_IT+0x3a8>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d04a      	beq.n	8002104 <HAL_DMA_Abort_IT+0x290>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a6b      	ldr	r2, [pc, #428]	@ (8002220 <HAL_DMA_Abort_IT+0x3ac>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d045      	beq.n	8002104 <HAL_DMA_Abort_IT+0x290>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a69      	ldr	r2, [pc, #420]	@ (8002224 <HAL_DMA_Abort_IT+0x3b0>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d040      	beq.n	8002104 <HAL_DMA_Abort_IT+0x290>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a68      	ldr	r2, [pc, #416]	@ (8002228 <HAL_DMA_Abort_IT+0x3b4>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d03b      	beq.n	8002104 <HAL_DMA_Abort_IT+0x290>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a66      	ldr	r2, [pc, #408]	@ (800222c <HAL_DMA_Abort_IT+0x3b8>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d036      	beq.n	8002104 <HAL_DMA_Abort_IT+0x290>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a65      	ldr	r2, [pc, #404]	@ (8002230 <HAL_DMA_Abort_IT+0x3bc>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d031      	beq.n	8002104 <HAL_DMA_Abort_IT+0x290>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a63      	ldr	r2, [pc, #396]	@ (8002234 <HAL_DMA_Abort_IT+0x3c0>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d02c      	beq.n	8002104 <HAL_DMA_Abort_IT+0x290>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a62      	ldr	r2, [pc, #392]	@ (8002238 <HAL_DMA_Abort_IT+0x3c4>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d027      	beq.n	8002104 <HAL_DMA_Abort_IT+0x290>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a60      	ldr	r2, [pc, #384]	@ (800223c <HAL_DMA_Abort_IT+0x3c8>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d022      	beq.n	8002104 <HAL_DMA_Abort_IT+0x290>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a5f      	ldr	r2, [pc, #380]	@ (8002240 <HAL_DMA_Abort_IT+0x3cc>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d01d      	beq.n	8002104 <HAL_DMA_Abort_IT+0x290>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a5d      	ldr	r2, [pc, #372]	@ (8002244 <HAL_DMA_Abort_IT+0x3d0>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d018      	beq.n	8002104 <HAL_DMA_Abort_IT+0x290>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a5c      	ldr	r2, [pc, #368]	@ (8002248 <HAL_DMA_Abort_IT+0x3d4>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d013      	beq.n	8002104 <HAL_DMA_Abort_IT+0x290>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a5a      	ldr	r2, [pc, #360]	@ (800224c <HAL_DMA_Abort_IT+0x3d8>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d00e      	beq.n	8002104 <HAL_DMA_Abort_IT+0x290>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a59      	ldr	r2, [pc, #356]	@ (8002250 <HAL_DMA_Abort_IT+0x3dc>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d009      	beq.n	8002104 <HAL_DMA_Abort_IT+0x290>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a57      	ldr	r2, [pc, #348]	@ (8002254 <HAL_DMA_Abort_IT+0x3e0>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d004      	beq.n	8002104 <HAL_DMA_Abort_IT+0x290>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a56      	ldr	r2, [pc, #344]	@ (8002258 <HAL_DMA_Abort_IT+0x3e4>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d108      	bne.n	8002116 <HAL_DMA_Abort_IT+0x2a2>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f022 0201 	bic.w	r2, r2, #1
 8002112:	601a      	str	r2, [r3, #0]
 8002114:	e007      	b.n	8002126 <HAL_DMA_Abort_IT+0x2b2>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f022 0201 	bic.w	r2, r2, #1
 8002124:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a3c      	ldr	r2, [pc, #240]	@ (800221c <HAL_DMA_Abort_IT+0x3a8>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d072      	beq.n	8002216 <HAL_DMA_Abort_IT+0x3a2>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a3a      	ldr	r2, [pc, #232]	@ (8002220 <HAL_DMA_Abort_IT+0x3ac>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d06d      	beq.n	8002216 <HAL_DMA_Abort_IT+0x3a2>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a39      	ldr	r2, [pc, #228]	@ (8002224 <HAL_DMA_Abort_IT+0x3b0>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d068      	beq.n	8002216 <HAL_DMA_Abort_IT+0x3a2>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a37      	ldr	r2, [pc, #220]	@ (8002228 <HAL_DMA_Abort_IT+0x3b4>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d063      	beq.n	8002216 <HAL_DMA_Abort_IT+0x3a2>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a36      	ldr	r2, [pc, #216]	@ (800222c <HAL_DMA_Abort_IT+0x3b8>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d05e      	beq.n	8002216 <HAL_DMA_Abort_IT+0x3a2>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a34      	ldr	r2, [pc, #208]	@ (8002230 <HAL_DMA_Abort_IT+0x3bc>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d059      	beq.n	8002216 <HAL_DMA_Abort_IT+0x3a2>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a33      	ldr	r2, [pc, #204]	@ (8002234 <HAL_DMA_Abort_IT+0x3c0>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d054      	beq.n	8002216 <HAL_DMA_Abort_IT+0x3a2>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a31      	ldr	r2, [pc, #196]	@ (8002238 <HAL_DMA_Abort_IT+0x3c4>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d04f      	beq.n	8002216 <HAL_DMA_Abort_IT+0x3a2>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a30      	ldr	r2, [pc, #192]	@ (800223c <HAL_DMA_Abort_IT+0x3c8>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d04a      	beq.n	8002216 <HAL_DMA_Abort_IT+0x3a2>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a2e      	ldr	r2, [pc, #184]	@ (8002240 <HAL_DMA_Abort_IT+0x3cc>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d045      	beq.n	8002216 <HAL_DMA_Abort_IT+0x3a2>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a2d      	ldr	r2, [pc, #180]	@ (8002244 <HAL_DMA_Abort_IT+0x3d0>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d040      	beq.n	8002216 <HAL_DMA_Abort_IT+0x3a2>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a2b      	ldr	r2, [pc, #172]	@ (8002248 <HAL_DMA_Abort_IT+0x3d4>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d03b      	beq.n	8002216 <HAL_DMA_Abort_IT+0x3a2>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a2a      	ldr	r2, [pc, #168]	@ (800224c <HAL_DMA_Abort_IT+0x3d8>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d036      	beq.n	8002216 <HAL_DMA_Abort_IT+0x3a2>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a28      	ldr	r2, [pc, #160]	@ (8002250 <HAL_DMA_Abort_IT+0x3dc>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d031      	beq.n	8002216 <HAL_DMA_Abort_IT+0x3a2>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a27      	ldr	r2, [pc, #156]	@ (8002254 <HAL_DMA_Abort_IT+0x3e0>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d02c      	beq.n	8002216 <HAL_DMA_Abort_IT+0x3a2>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a25      	ldr	r2, [pc, #148]	@ (8002258 <HAL_DMA_Abort_IT+0x3e4>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d027      	beq.n	8002216 <HAL_DMA_Abort_IT+0x3a2>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a24      	ldr	r2, [pc, #144]	@ (800225c <HAL_DMA_Abort_IT+0x3e8>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d022      	beq.n	8002216 <HAL_DMA_Abort_IT+0x3a2>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a22      	ldr	r2, [pc, #136]	@ (8002260 <HAL_DMA_Abort_IT+0x3ec>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d01d      	beq.n	8002216 <HAL_DMA_Abort_IT+0x3a2>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a21      	ldr	r2, [pc, #132]	@ (8002264 <HAL_DMA_Abort_IT+0x3f0>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d018      	beq.n	8002216 <HAL_DMA_Abort_IT+0x3a2>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a1f      	ldr	r2, [pc, #124]	@ (8002268 <HAL_DMA_Abort_IT+0x3f4>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d013      	beq.n	8002216 <HAL_DMA_Abort_IT+0x3a2>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a1e      	ldr	r2, [pc, #120]	@ (800226c <HAL_DMA_Abort_IT+0x3f8>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d00e      	beq.n	8002216 <HAL_DMA_Abort_IT+0x3a2>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a1c      	ldr	r2, [pc, #112]	@ (8002270 <HAL_DMA_Abort_IT+0x3fc>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d009      	beq.n	8002216 <HAL_DMA_Abort_IT+0x3a2>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a1b      	ldr	r2, [pc, #108]	@ (8002274 <HAL_DMA_Abort_IT+0x400>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d004      	beq.n	8002216 <HAL_DMA_Abort_IT+0x3a2>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a19      	ldr	r2, [pc, #100]	@ (8002278 <HAL_DMA_Abort_IT+0x404>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d132      	bne.n	800227c <HAL_DMA_Abort_IT+0x408>
 8002216:	2301      	movs	r3, #1
 8002218:	e031      	b.n	800227e <HAL_DMA_Abort_IT+0x40a>
 800221a:	bf00      	nop
 800221c:	40020010 	.word	0x40020010
 8002220:	40020028 	.word	0x40020028
 8002224:	40020040 	.word	0x40020040
 8002228:	40020058 	.word	0x40020058
 800222c:	40020070 	.word	0x40020070
 8002230:	40020088 	.word	0x40020088
 8002234:	400200a0 	.word	0x400200a0
 8002238:	400200b8 	.word	0x400200b8
 800223c:	40020410 	.word	0x40020410
 8002240:	40020428 	.word	0x40020428
 8002244:	40020440 	.word	0x40020440
 8002248:	40020458 	.word	0x40020458
 800224c:	40020470 	.word	0x40020470
 8002250:	40020488 	.word	0x40020488
 8002254:	400204a0 	.word	0x400204a0
 8002258:	400204b8 	.word	0x400204b8
 800225c:	58025408 	.word	0x58025408
 8002260:	5802541c 	.word	0x5802541c
 8002264:	58025430 	.word	0x58025430
 8002268:	58025444 	.word	0x58025444
 800226c:	58025458 	.word	0x58025458
 8002270:	5802546c 	.word	0x5802546c
 8002274:	58025480 	.word	0x58025480
 8002278:	58025494 	.word	0x58025494
 800227c:	2300      	movs	r3, #0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d028      	beq.n	80022d4 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800228c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002290:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002296:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800229c:	f003 031f 	and.w	r3, r3, #31
 80022a0:	2201      	movs	r2, #1
 80022a2:	409a      	lsls	r2, r3
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80022ac:	687a      	ldr	r2, [r7, #4]
 80022ae:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80022b0:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d00c      	beq.n	80022d4 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80022c4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80022c8:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022ce:	687a      	ldr	r2, [r7, #4]
 80022d0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80022d2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2201      	movs	r2, #1
 80022d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2200      	movs	r2, #0
 80022e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d003      	beq.n	80022f4 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80022f0:	6878      	ldr	r0, [r7, #4]
 80022f2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80022f4:	2300      	movs	r3, #0
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3710      	adds	r7, #16
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop

08002300 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b08a      	sub	sp, #40	@ 0x28
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002308:	2300      	movs	r3, #0
 800230a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800230c:	4b67      	ldr	r3, [pc, #412]	@ (80024ac <HAL_DMA_IRQHandler+0x1ac>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a67      	ldr	r2, [pc, #412]	@ (80024b0 <HAL_DMA_IRQHandler+0x1b0>)
 8002312:	fba2 2303 	umull	r2, r3, r2, r3
 8002316:	0a9b      	lsrs	r3, r3, #10
 8002318:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800231e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002324:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8002326:	6a3b      	ldr	r3, [r7, #32]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800232c:	69fb      	ldr	r3, [r7, #28]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a5f      	ldr	r2, [pc, #380]	@ (80024b4 <HAL_DMA_IRQHandler+0x1b4>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d04a      	beq.n	80023d2 <HAL_DMA_IRQHandler+0xd2>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a5d      	ldr	r2, [pc, #372]	@ (80024b8 <HAL_DMA_IRQHandler+0x1b8>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d045      	beq.n	80023d2 <HAL_DMA_IRQHandler+0xd2>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a5c      	ldr	r2, [pc, #368]	@ (80024bc <HAL_DMA_IRQHandler+0x1bc>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d040      	beq.n	80023d2 <HAL_DMA_IRQHandler+0xd2>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a5a      	ldr	r2, [pc, #360]	@ (80024c0 <HAL_DMA_IRQHandler+0x1c0>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d03b      	beq.n	80023d2 <HAL_DMA_IRQHandler+0xd2>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a59      	ldr	r2, [pc, #356]	@ (80024c4 <HAL_DMA_IRQHandler+0x1c4>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d036      	beq.n	80023d2 <HAL_DMA_IRQHandler+0xd2>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a57      	ldr	r2, [pc, #348]	@ (80024c8 <HAL_DMA_IRQHandler+0x1c8>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d031      	beq.n	80023d2 <HAL_DMA_IRQHandler+0xd2>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a56      	ldr	r2, [pc, #344]	@ (80024cc <HAL_DMA_IRQHandler+0x1cc>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d02c      	beq.n	80023d2 <HAL_DMA_IRQHandler+0xd2>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a54      	ldr	r2, [pc, #336]	@ (80024d0 <HAL_DMA_IRQHandler+0x1d0>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d027      	beq.n	80023d2 <HAL_DMA_IRQHandler+0xd2>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a53      	ldr	r2, [pc, #332]	@ (80024d4 <HAL_DMA_IRQHandler+0x1d4>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d022      	beq.n	80023d2 <HAL_DMA_IRQHandler+0xd2>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a51      	ldr	r2, [pc, #324]	@ (80024d8 <HAL_DMA_IRQHandler+0x1d8>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d01d      	beq.n	80023d2 <HAL_DMA_IRQHandler+0xd2>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a50      	ldr	r2, [pc, #320]	@ (80024dc <HAL_DMA_IRQHandler+0x1dc>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d018      	beq.n	80023d2 <HAL_DMA_IRQHandler+0xd2>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a4e      	ldr	r2, [pc, #312]	@ (80024e0 <HAL_DMA_IRQHandler+0x1e0>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d013      	beq.n	80023d2 <HAL_DMA_IRQHandler+0xd2>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a4d      	ldr	r2, [pc, #308]	@ (80024e4 <HAL_DMA_IRQHandler+0x1e4>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d00e      	beq.n	80023d2 <HAL_DMA_IRQHandler+0xd2>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a4b      	ldr	r2, [pc, #300]	@ (80024e8 <HAL_DMA_IRQHandler+0x1e8>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d009      	beq.n	80023d2 <HAL_DMA_IRQHandler+0xd2>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a4a      	ldr	r2, [pc, #296]	@ (80024ec <HAL_DMA_IRQHandler+0x1ec>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d004      	beq.n	80023d2 <HAL_DMA_IRQHandler+0xd2>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a48      	ldr	r2, [pc, #288]	@ (80024f0 <HAL_DMA_IRQHandler+0x1f0>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d101      	bne.n	80023d6 <HAL_DMA_IRQHandler+0xd6>
 80023d2:	2301      	movs	r3, #1
 80023d4:	e000      	b.n	80023d8 <HAL_DMA_IRQHandler+0xd8>
 80023d6:	2300      	movs	r3, #0
 80023d8:	2b00      	cmp	r3, #0
 80023da:	f000 842b 	beq.w	8002c34 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023e2:	f003 031f 	and.w	r3, r3, #31
 80023e6:	2208      	movs	r2, #8
 80023e8:	409a      	lsls	r2, r3
 80023ea:	69bb      	ldr	r3, [r7, #24]
 80023ec:	4013      	ands	r3, r2
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	f000 80a2 	beq.w	8002538 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a2e      	ldr	r2, [pc, #184]	@ (80024b4 <HAL_DMA_IRQHandler+0x1b4>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d04a      	beq.n	8002494 <HAL_DMA_IRQHandler+0x194>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a2d      	ldr	r2, [pc, #180]	@ (80024b8 <HAL_DMA_IRQHandler+0x1b8>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d045      	beq.n	8002494 <HAL_DMA_IRQHandler+0x194>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a2b      	ldr	r2, [pc, #172]	@ (80024bc <HAL_DMA_IRQHandler+0x1bc>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d040      	beq.n	8002494 <HAL_DMA_IRQHandler+0x194>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a2a      	ldr	r2, [pc, #168]	@ (80024c0 <HAL_DMA_IRQHandler+0x1c0>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d03b      	beq.n	8002494 <HAL_DMA_IRQHandler+0x194>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a28      	ldr	r2, [pc, #160]	@ (80024c4 <HAL_DMA_IRQHandler+0x1c4>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d036      	beq.n	8002494 <HAL_DMA_IRQHandler+0x194>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a27      	ldr	r2, [pc, #156]	@ (80024c8 <HAL_DMA_IRQHandler+0x1c8>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d031      	beq.n	8002494 <HAL_DMA_IRQHandler+0x194>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a25      	ldr	r2, [pc, #148]	@ (80024cc <HAL_DMA_IRQHandler+0x1cc>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d02c      	beq.n	8002494 <HAL_DMA_IRQHandler+0x194>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a24      	ldr	r2, [pc, #144]	@ (80024d0 <HAL_DMA_IRQHandler+0x1d0>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d027      	beq.n	8002494 <HAL_DMA_IRQHandler+0x194>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a22      	ldr	r2, [pc, #136]	@ (80024d4 <HAL_DMA_IRQHandler+0x1d4>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d022      	beq.n	8002494 <HAL_DMA_IRQHandler+0x194>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a21      	ldr	r2, [pc, #132]	@ (80024d8 <HAL_DMA_IRQHandler+0x1d8>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d01d      	beq.n	8002494 <HAL_DMA_IRQHandler+0x194>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a1f      	ldr	r2, [pc, #124]	@ (80024dc <HAL_DMA_IRQHandler+0x1dc>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d018      	beq.n	8002494 <HAL_DMA_IRQHandler+0x194>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a1e      	ldr	r2, [pc, #120]	@ (80024e0 <HAL_DMA_IRQHandler+0x1e0>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d013      	beq.n	8002494 <HAL_DMA_IRQHandler+0x194>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a1c      	ldr	r2, [pc, #112]	@ (80024e4 <HAL_DMA_IRQHandler+0x1e4>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d00e      	beq.n	8002494 <HAL_DMA_IRQHandler+0x194>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a1b      	ldr	r2, [pc, #108]	@ (80024e8 <HAL_DMA_IRQHandler+0x1e8>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d009      	beq.n	8002494 <HAL_DMA_IRQHandler+0x194>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a19      	ldr	r2, [pc, #100]	@ (80024ec <HAL_DMA_IRQHandler+0x1ec>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d004      	beq.n	8002494 <HAL_DMA_IRQHandler+0x194>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a18      	ldr	r2, [pc, #96]	@ (80024f0 <HAL_DMA_IRQHandler+0x1f0>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d12f      	bne.n	80024f4 <HAL_DMA_IRQHandler+0x1f4>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 0304 	and.w	r3, r3, #4
 800249e:	2b00      	cmp	r3, #0
 80024a0:	bf14      	ite	ne
 80024a2:	2301      	movne	r3, #1
 80024a4:	2300      	moveq	r3, #0
 80024a6:	b2db      	uxtb	r3, r3
 80024a8:	e02e      	b.n	8002508 <HAL_DMA_IRQHandler+0x208>
 80024aa:	bf00      	nop
 80024ac:	24000000 	.word	0x24000000
 80024b0:	1b4e81b5 	.word	0x1b4e81b5
 80024b4:	40020010 	.word	0x40020010
 80024b8:	40020028 	.word	0x40020028
 80024bc:	40020040 	.word	0x40020040
 80024c0:	40020058 	.word	0x40020058
 80024c4:	40020070 	.word	0x40020070
 80024c8:	40020088 	.word	0x40020088
 80024cc:	400200a0 	.word	0x400200a0
 80024d0:	400200b8 	.word	0x400200b8
 80024d4:	40020410 	.word	0x40020410
 80024d8:	40020428 	.word	0x40020428
 80024dc:	40020440 	.word	0x40020440
 80024e0:	40020458 	.word	0x40020458
 80024e4:	40020470 	.word	0x40020470
 80024e8:	40020488 	.word	0x40020488
 80024ec:	400204a0 	.word	0x400204a0
 80024f0:	400204b8 	.word	0x400204b8
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 0308 	and.w	r3, r3, #8
 80024fe:	2b00      	cmp	r3, #0
 8002500:	bf14      	ite	ne
 8002502:	2301      	movne	r3, #1
 8002504:	2300      	moveq	r3, #0
 8002506:	b2db      	uxtb	r3, r3
 8002508:	2b00      	cmp	r3, #0
 800250a:	d015      	beq.n	8002538 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f022 0204 	bic.w	r2, r2, #4
 800251a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002520:	f003 031f 	and.w	r3, r3, #31
 8002524:	2208      	movs	r2, #8
 8002526:	409a      	lsls	r2, r3
 8002528:	6a3b      	ldr	r3, [r7, #32]
 800252a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002530:	f043 0201 	orr.w	r2, r3, #1
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800253c:	f003 031f 	and.w	r3, r3, #31
 8002540:	69ba      	ldr	r2, [r7, #24]
 8002542:	fa22 f303 	lsr.w	r3, r2, r3
 8002546:	f003 0301 	and.w	r3, r3, #1
 800254a:	2b00      	cmp	r3, #0
 800254c:	d06e      	beq.n	800262c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a69      	ldr	r2, [pc, #420]	@ (80026f8 <HAL_DMA_IRQHandler+0x3f8>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d04a      	beq.n	80025ee <HAL_DMA_IRQHandler+0x2ee>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a67      	ldr	r2, [pc, #412]	@ (80026fc <HAL_DMA_IRQHandler+0x3fc>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d045      	beq.n	80025ee <HAL_DMA_IRQHandler+0x2ee>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a66      	ldr	r2, [pc, #408]	@ (8002700 <HAL_DMA_IRQHandler+0x400>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d040      	beq.n	80025ee <HAL_DMA_IRQHandler+0x2ee>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a64      	ldr	r2, [pc, #400]	@ (8002704 <HAL_DMA_IRQHandler+0x404>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d03b      	beq.n	80025ee <HAL_DMA_IRQHandler+0x2ee>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a63      	ldr	r2, [pc, #396]	@ (8002708 <HAL_DMA_IRQHandler+0x408>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d036      	beq.n	80025ee <HAL_DMA_IRQHandler+0x2ee>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a61      	ldr	r2, [pc, #388]	@ (800270c <HAL_DMA_IRQHandler+0x40c>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d031      	beq.n	80025ee <HAL_DMA_IRQHandler+0x2ee>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a60      	ldr	r2, [pc, #384]	@ (8002710 <HAL_DMA_IRQHandler+0x410>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d02c      	beq.n	80025ee <HAL_DMA_IRQHandler+0x2ee>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a5e      	ldr	r2, [pc, #376]	@ (8002714 <HAL_DMA_IRQHandler+0x414>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d027      	beq.n	80025ee <HAL_DMA_IRQHandler+0x2ee>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a5d      	ldr	r2, [pc, #372]	@ (8002718 <HAL_DMA_IRQHandler+0x418>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d022      	beq.n	80025ee <HAL_DMA_IRQHandler+0x2ee>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a5b      	ldr	r2, [pc, #364]	@ (800271c <HAL_DMA_IRQHandler+0x41c>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d01d      	beq.n	80025ee <HAL_DMA_IRQHandler+0x2ee>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a5a      	ldr	r2, [pc, #360]	@ (8002720 <HAL_DMA_IRQHandler+0x420>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d018      	beq.n	80025ee <HAL_DMA_IRQHandler+0x2ee>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a58      	ldr	r2, [pc, #352]	@ (8002724 <HAL_DMA_IRQHandler+0x424>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d013      	beq.n	80025ee <HAL_DMA_IRQHandler+0x2ee>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a57      	ldr	r2, [pc, #348]	@ (8002728 <HAL_DMA_IRQHandler+0x428>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d00e      	beq.n	80025ee <HAL_DMA_IRQHandler+0x2ee>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a55      	ldr	r2, [pc, #340]	@ (800272c <HAL_DMA_IRQHandler+0x42c>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d009      	beq.n	80025ee <HAL_DMA_IRQHandler+0x2ee>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a54      	ldr	r2, [pc, #336]	@ (8002730 <HAL_DMA_IRQHandler+0x430>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d004      	beq.n	80025ee <HAL_DMA_IRQHandler+0x2ee>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a52      	ldr	r2, [pc, #328]	@ (8002734 <HAL_DMA_IRQHandler+0x434>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d10a      	bne.n	8002604 <HAL_DMA_IRQHandler+0x304>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	695b      	ldr	r3, [r3, #20]
 80025f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	bf14      	ite	ne
 80025fc:	2301      	movne	r3, #1
 80025fe:	2300      	moveq	r3, #0
 8002600:	b2db      	uxtb	r3, r3
 8002602:	e003      	b.n	800260c <HAL_DMA_IRQHandler+0x30c>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	2300      	movs	r3, #0
 800260c:	2b00      	cmp	r3, #0
 800260e:	d00d      	beq.n	800262c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002614:	f003 031f 	and.w	r3, r3, #31
 8002618:	2201      	movs	r2, #1
 800261a:	409a      	lsls	r2, r3
 800261c:	6a3b      	ldr	r3, [r7, #32]
 800261e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002624:	f043 0202 	orr.w	r2, r3, #2
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002630:	f003 031f 	and.w	r3, r3, #31
 8002634:	2204      	movs	r2, #4
 8002636:	409a      	lsls	r2, r3
 8002638:	69bb      	ldr	r3, [r7, #24]
 800263a:	4013      	ands	r3, r2
 800263c:	2b00      	cmp	r3, #0
 800263e:	f000 808f 	beq.w	8002760 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a2c      	ldr	r2, [pc, #176]	@ (80026f8 <HAL_DMA_IRQHandler+0x3f8>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d04a      	beq.n	80026e2 <HAL_DMA_IRQHandler+0x3e2>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a2a      	ldr	r2, [pc, #168]	@ (80026fc <HAL_DMA_IRQHandler+0x3fc>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d045      	beq.n	80026e2 <HAL_DMA_IRQHandler+0x3e2>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a29      	ldr	r2, [pc, #164]	@ (8002700 <HAL_DMA_IRQHandler+0x400>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d040      	beq.n	80026e2 <HAL_DMA_IRQHandler+0x3e2>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a27      	ldr	r2, [pc, #156]	@ (8002704 <HAL_DMA_IRQHandler+0x404>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d03b      	beq.n	80026e2 <HAL_DMA_IRQHandler+0x3e2>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a26      	ldr	r2, [pc, #152]	@ (8002708 <HAL_DMA_IRQHandler+0x408>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d036      	beq.n	80026e2 <HAL_DMA_IRQHandler+0x3e2>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a24      	ldr	r2, [pc, #144]	@ (800270c <HAL_DMA_IRQHandler+0x40c>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d031      	beq.n	80026e2 <HAL_DMA_IRQHandler+0x3e2>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a23      	ldr	r2, [pc, #140]	@ (8002710 <HAL_DMA_IRQHandler+0x410>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d02c      	beq.n	80026e2 <HAL_DMA_IRQHandler+0x3e2>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a21      	ldr	r2, [pc, #132]	@ (8002714 <HAL_DMA_IRQHandler+0x414>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d027      	beq.n	80026e2 <HAL_DMA_IRQHandler+0x3e2>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a20      	ldr	r2, [pc, #128]	@ (8002718 <HAL_DMA_IRQHandler+0x418>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d022      	beq.n	80026e2 <HAL_DMA_IRQHandler+0x3e2>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a1e      	ldr	r2, [pc, #120]	@ (800271c <HAL_DMA_IRQHandler+0x41c>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d01d      	beq.n	80026e2 <HAL_DMA_IRQHandler+0x3e2>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a1d      	ldr	r2, [pc, #116]	@ (8002720 <HAL_DMA_IRQHandler+0x420>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d018      	beq.n	80026e2 <HAL_DMA_IRQHandler+0x3e2>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a1b      	ldr	r2, [pc, #108]	@ (8002724 <HAL_DMA_IRQHandler+0x424>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d013      	beq.n	80026e2 <HAL_DMA_IRQHandler+0x3e2>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a1a      	ldr	r2, [pc, #104]	@ (8002728 <HAL_DMA_IRQHandler+0x428>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d00e      	beq.n	80026e2 <HAL_DMA_IRQHandler+0x3e2>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a18      	ldr	r2, [pc, #96]	@ (800272c <HAL_DMA_IRQHandler+0x42c>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d009      	beq.n	80026e2 <HAL_DMA_IRQHandler+0x3e2>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a17      	ldr	r2, [pc, #92]	@ (8002730 <HAL_DMA_IRQHandler+0x430>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d004      	beq.n	80026e2 <HAL_DMA_IRQHandler+0x3e2>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a15      	ldr	r2, [pc, #84]	@ (8002734 <HAL_DMA_IRQHandler+0x434>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d12a      	bne.n	8002738 <HAL_DMA_IRQHandler+0x438>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 0302 	and.w	r3, r3, #2
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	bf14      	ite	ne
 80026f0:	2301      	movne	r3, #1
 80026f2:	2300      	moveq	r3, #0
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	e023      	b.n	8002740 <HAL_DMA_IRQHandler+0x440>
 80026f8:	40020010 	.word	0x40020010
 80026fc:	40020028 	.word	0x40020028
 8002700:	40020040 	.word	0x40020040
 8002704:	40020058 	.word	0x40020058
 8002708:	40020070 	.word	0x40020070
 800270c:	40020088 	.word	0x40020088
 8002710:	400200a0 	.word	0x400200a0
 8002714:	400200b8 	.word	0x400200b8
 8002718:	40020410 	.word	0x40020410
 800271c:	40020428 	.word	0x40020428
 8002720:	40020440 	.word	0x40020440
 8002724:	40020458 	.word	0x40020458
 8002728:	40020470 	.word	0x40020470
 800272c:	40020488 	.word	0x40020488
 8002730:	400204a0 	.word	0x400204a0
 8002734:	400204b8 	.word	0x400204b8
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	2300      	movs	r3, #0
 8002740:	2b00      	cmp	r3, #0
 8002742:	d00d      	beq.n	8002760 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002748:	f003 031f 	and.w	r3, r3, #31
 800274c:	2204      	movs	r2, #4
 800274e:	409a      	lsls	r2, r3
 8002750:	6a3b      	ldr	r3, [r7, #32]
 8002752:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002758:	f043 0204 	orr.w	r2, r3, #4
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002764:	f003 031f 	and.w	r3, r3, #31
 8002768:	2210      	movs	r2, #16
 800276a:	409a      	lsls	r2, r3
 800276c:	69bb      	ldr	r3, [r7, #24]
 800276e:	4013      	ands	r3, r2
 8002770:	2b00      	cmp	r3, #0
 8002772:	f000 80a6 	beq.w	80028c2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a85      	ldr	r2, [pc, #532]	@ (8002990 <HAL_DMA_IRQHandler+0x690>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d04a      	beq.n	8002816 <HAL_DMA_IRQHandler+0x516>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a83      	ldr	r2, [pc, #524]	@ (8002994 <HAL_DMA_IRQHandler+0x694>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d045      	beq.n	8002816 <HAL_DMA_IRQHandler+0x516>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a82      	ldr	r2, [pc, #520]	@ (8002998 <HAL_DMA_IRQHandler+0x698>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d040      	beq.n	8002816 <HAL_DMA_IRQHandler+0x516>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a80      	ldr	r2, [pc, #512]	@ (800299c <HAL_DMA_IRQHandler+0x69c>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d03b      	beq.n	8002816 <HAL_DMA_IRQHandler+0x516>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a7f      	ldr	r2, [pc, #508]	@ (80029a0 <HAL_DMA_IRQHandler+0x6a0>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d036      	beq.n	8002816 <HAL_DMA_IRQHandler+0x516>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a7d      	ldr	r2, [pc, #500]	@ (80029a4 <HAL_DMA_IRQHandler+0x6a4>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d031      	beq.n	8002816 <HAL_DMA_IRQHandler+0x516>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a7c      	ldr	r2, [pc, #496]	@ (80029a8 <HAL_DMA_IRQHandler+0x6a8>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d02c      	beq.n	8002816 <HAL_DMA_IRQHandler+0x516>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a7a      	ldr	r2, [pc, #488]	@ (80029ac <HAL_DMA_IRQHandler+0x6ac>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d027      	beq.n	8002816 <HAL_DMA_IRQHandler+0x516>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a79      	ldr	r2, [pc, #484]	@ (80029b0 <HAL_DMA_IRQHandler+0x6b0>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d022      	beq.n	8002816 <HAL_DMA_IRQHandler+0x516>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a77      	ldr	r2, [pc, #476]	@ (80029b4 <HAL_DMA_IRQHandler+0x6b4>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d01d      	beq.n	8002816 <HAL_DMA_IRQHandler+0x516>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a76      	ldr	r2, [pc, #472]	@ (80029b8 <HAL_DMA_IRQHandler+0x6b8>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d018      	beq.n	8002816 <HAL_DMA_IRQHandler+0x516>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a74      	ldr	r2, [pc, #464]	@ (80029bc <HAL_DMA_IRQHandler+0x6bc>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d013      	beq.n	8002816 <HAL_DMA_IRQHandler+0x516>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a73      	ldr	r2, [pc, #460]	@ (80029c0 <HAL_DMA_IRQHandler+0x6c0>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d00e      	beq.n	8002816 <HAL_DMA_IRQHandler+0x516>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a71      	ldr	r2, [pc, #452]	@ (80029c4 <HAL_DMA_IRQHandler+0x6c4>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d009      	beq.n	8002816 <HAL_DMA_IRQHandler+0x516>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a70      	ldr	r2, [pc, #448]	@ (80029c8 <HAL_DMA_IRQHandler+0x6c8>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d004      	beq.n	8002816 <HAL_DMA_IRQHandler+0x516>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a6e      	ldr	r2, [pc, #440]	@ (80029cc <HAL_DMA_IRQHandler+0x6cc>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d10a      	bne.n	800282c <HAL_DMA_IRQHandler+0x52c>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 0308 	and.w	r3, r3, #8
 8002820:	2b00      	cmp	r3, #0
 8002822:	bf14      	ite	ne
 8002824:	2301      	movne	r3, #1
 8002826:	2300      	moveq	r3, #0
 8002828:	b2db      	uxtb	r3, r3
 800282a:	e009      	b.n	8002840 <HAL_DMA_IRQHandler+0x540>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 0304 	and.w	r3, r3, #4
 8002836:	2b00      	cmp	r3, #0
 8002838:	bf14      	ite	ne
 800283a:	2301      	movne	r3, #1
 800283c:	2300      	moveq	r3, #0
 800283e:	b2db      	uxtb	r3, r3
 8002840:	2b00      	cmp	r3, #0
 8002842:	d03e      	beq.n	80028c2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002848:	f003 031f 	and.w	r3, r3, #31
 800284c:	2210      	movs	r2, #16
 800284e:	409a      	lsls	r2, r3
 8002850:	6a3b      	ldr	r3, [r7, #32]
 8002852:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800285e:	2b00      	cmp	r3, #0
 8002860:	d018      	beq.n	8002894 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800286c:	2b00      	cmp	r3, #0
 800286e:	d108      	bne.n	8002882 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002874:	2b00      	cmp	r3, #0
 8002876:	d024      	beq.n	80028c2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800287c:	6878      	ldr	r0, [r7, #4]
 800287e:	4798      	blx	r3
 8002880:	e01f      	b.n	80028c2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002886:	2b00      	cmp	r3, #0
 8002888:	d01b      	beq.n	80028c2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	4798      	blx	r3
 8002892:	e016      	b.n	80028c2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d107      	bne.n	80028b2 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f022 0208 	bic.w	r2, r2, #8
 80028b0:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d003      	beq.n	80028c2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028c6:	f003 031f 	and.w	r3, r3, #31
 80028ca:	2220      	movs	r2, #32
 80028cc:	409a      	lsls	r2, r3
 80028ce:	69bb      	ldr	r3, [r7, #24]
 80028d0:	4013      	ands	r3, r2
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	f000 8110 	beq.w	8002af8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a2c      	ldr	r2, [pc, #176]	@ (8002990 <HAL_DMA_IRQHandler+0x690>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d04a      	beq.n	8002978 <HAL_DMA_IRQHandler+0x678>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a2b      	ldr	r2, [pc, #172]	@ (8002994 <HAL_DMA_IRQHandler+0x694>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d045      	beq.n	8002978 <HAL_DMA_IRQHandler+0x678>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a29      	ldr	r2, [pc, #164]	@ (8002998 <HAL_DMA_IRQHandler+0x698>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d040      	beq.n	8002978 <HAL_DMA_IRQHandler+0x678>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a28      	ldr	r2, [pc, #160]	@ (800299c <HAL_DMA_IRQHandler+0x69c>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d03b      	beq.n	8002978 <HAL_DMA_IRQHandler+0x678>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a26      	ldr	r2, [pc, #152]	@ (80029a0 <HAL_DMA_IRQHandler+0x6a0>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d036      	beq.n	8002978 <HAL_DMA_IRQHandler+0x678>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a25      	ldr	r2, [pc, #148]	@ (80029a4 <HAL_DMA_IRQHandler+0x6a4>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d031      	beq.n	8002978 <HAL_DMA_IRQHandler+0x678>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a23      	ldr	r2, [pc, #140]	@ (80029a8 <HAL_DMA_IRQHandler+0x6a8>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d02c      	beq.n	8002978 <HAL_DMA_IRQHandler+0x678>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a22      	ldr	r2, [pc, #136]	@ (80029ac <HAL_DMA_IRQHandler+0x6ac>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d027      	beq.n	8002978 <HAL_DMA_IRQHandler+0x678>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a20      	ldr	r2, [pc, #128]	@ (80029b0 <HAL_DMA_IRQHandler+0x6b0>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d022      	beq.n	8002978 <HAL_DMA_IRQHandler+0x678>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a1f      	ldr	r2, [pc, #124]	@ (80029b4 <HAL_DMA_IRQHandler+0x6b4>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d01d      	beq.n	8002978 <HAL_DMA_IRQHandler+0x678>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a1d      	ldr	r2, [pc, #116]	@ (80029b8 <HAL_DMA_IRQHandler+0x6b8>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d018      	beq.n	8002978 <HAL_DMA_IRQHandler+0x678>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a1c      	ldr	r2, [pc, #112]	@ (80029bc <HAL_DMA_IRQHandler+0x6bc>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d013      	beq.n	8002978 <HAL_DMA_IRQHandler+0x678>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a1a      	ldr	r2, [pc, #104]	@ (80029c0 <HAL_DMA_IRQHandler+0x6c0>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d00e      	beq.n	8002978 <HAL_DMA_IRQHandler+0x678>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a19      	ldr	r2, [pc, #100]	@ (80029c4 <HAL_DMA_IRQHandler+0x6c4>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d009      	beq.n	8002978 <HAL_DMA_IRQHandler+0x678>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a17      	ldr	r2, [pc, #92]	@ (80029c8 <HAL_DMA_IRQHandler+0x6c8>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d004      	beq.n	8002978 <HAL_DMA_IRQHandler+0x678>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a16      	ldr	r2, [pc, #88]	@ (80029cc <HAL_DMA_IRQHandler+0x6cc>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d12b      	bne.n	80029d0 <HAL_DMA_IRQHandler+0x6d0>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 0310 	and.w	r3, r3, #16
 8002982:	2b00      	cmp	r3, #0
 8002984:	bf14      	ite	ne
 8002986:	2301      	movne	r3, #1
 8002988:	2300      	moveq	r3, #0
 800298a:	b2db      	uxtb	r3, r3
 800298c:	e02a      	b.n	80029e4 <HAL_DMA_IRQHandler+0x6e4>
 800298e:	bf00      	nop
 8002990:	40020010 	.word	0x40020010
 8002994:	40020028 	.word	0x40020028
 8002998:	40020040 	.word	0x40020040
 800299c:	40020058 	.word	0x40020058
 80029a0:	40020070 	.word	0x40020070
 80029a4:	40020088 	.word	0x40020088
 80029a8:	400200a0 	.word	0x400200a0
 80029ac:	400200b8 	.word	0x400200b8
 80029b0:	40020410 	.word	0x40020410
 80029b4:	40020428 	.word	0x40020428
 80029b8:	40020440 	.word	0x40020440
 80029bc:	40020458 	.word	0x40020458
 80029c0:	40020470 	.word	0x40020470
 80029c4:	40020488 	.word	0x40020488
 80029c8:	400204a0 	.word	0x400204a0
 80029cc:	400204b8 	.word	0x400204b8
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 0302 	and.w	r3, r3, #2
 80029da:	2b00      	cmp	r3, #0
 80029dc:	bf14      	ite	ne
 80029de:	2301      	movne	r3, #1
 80029e0:	2300      	moveq	r3, #0
 80029e2:	b2db      	uxtb	r3, r3
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	f000 8087 	beq.w	8002af8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029ee:	f003 031f 	and.w	r3, r3, #31
 80029f2:	2220      	movs	r2, #32
 80029f4:	409a      	lsls	r2, r3
 80029f6:	6a3b      	ldr	r3, [r7, #32]
 80029f8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	2b04      	cmp	r3, #4
 8002a04:	d139      	bne.n	8002a7a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f022 0216 	bic.w	r2, r2, #22
 8002a14:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	695a      	ldr	r2, [r3, #20]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002a24:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d103      	bne.n	8002a36 <HAL_DMA_IRQHandler+0x736>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d007      	beq.n	8002a46 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f022 0208 	bic.w	r2, r2, #8
 8002a44:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a4a:	f003 031f 	and.w	r3, r3, #31
 8002a4e:	223f      	movs	r2, #63	@ 0x3f
 8002a50:	409a      	lsls	r2, r3
 8002a52:	6a3b      	ldr	r3, [r7, #32]
 8002a54:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2201      	movs	r2, #1
 8002a5a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2200      	movs	r2, #0
 8002a62:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	f000 8382 	beq.w	8003174 <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a74:	6878      	ldr	r0, [r7, #4]
 8002a76:	4798      	blx	r3
          }
          return;
 8002a78:	e37c      	b.n	8003174 <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d018      	beq.n	8002aba <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d108      	bne.n	8002aa8 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d02c      	beq.n	8002af8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	4798      	blx	r3
 8002aa6:	e027      	b.n	8002af8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d023      	beq.n	8002af8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ab4:	6878      	ldr	r0, [r7, #4]
 8002ab6:	4798      	blx	r3
 8002ab8:	e01e      	b.n	8002af8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d10f      	bne.n	8002ae8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f022 0210 	bic.w	r2, r2, #16
 8002ad6:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2201      	movs	r2, #1
 8002adc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d003      	beq.n	8002af8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002af4:	6878      	ldr	r0, [r7, #4]
 8002af6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	f000 833e 	beq.w	800317e <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b06:	f003 0301 	and.w	r3, r3, #1
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	f000 8088 	beq.w	8002c20 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2204      	movs	r2, #4
 8002b14:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a89      	ldr	r2, [pc, #548]	@ (8002d44 <HAL_DMA_IRQHandler+0xa44>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d04a      	beq.n	8002bb8 <HAL_DMA_IRQHandler+0x8b8>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a88      	ldr	r2, [pc, #544]	@ (8002d48 <HAL_DMA_IRQHandler+0xa48>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d045      	beq.n	8002bb8 <HAL_DMA_IRQHandler+0x8b8>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a86      	ldr	r2, [pc, #536]	@ (8002d4c <HAL_DMA_IRQHandler+0xa4c>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d040      	beq.n	8002bb8 <HAL_DMA_IRQHandler+0x8b8>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a85      	ldr	r2, [pc, #532]	@ (8002d50 <HAL_DMA_IRQHandler+0xa50>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d03b      	beq.n	8002bb8 <HAL_DMA_IRQHandler+0x8b8>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a83      	ldr	r2, [pc, #524]	@ (8002d54 <HAL_DMA_IRQHandler+0xa54>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d036      	beq.n	8002bb8 <HAL_DMA_IRQHandler+0x8b8>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a82      	ldr	r2, [pc, #520]	@ (8002d58 <HAL_DMA_IRQHandler+0xa58>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d031      	beq.n	8002bb8 <HAL_DMA_IRQHandler+0x8b8>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a80      	ldr	r2, [pc, #512]	@ (8002d5c <HAL_DMA_IRQHandler+0xa5c>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d02c      	beq.n	8002bb8 <HAL_DMA_IRQHandler+0x8b8>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a7f      	ldr	r2, [pc, #508]	@ (8002d60 <HAL_DMA_IRQHandler+0xa60>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d027      	beq.n	8002bb8 <HAL_DMA_IRQHandler+0x8b8>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a7d      	ldr	r2, [pc, #500]	@ (8002d64 <HAL_DMA_IRQHandler+0xa64>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d022      	beq.n	8002bb8 <HAL_DMA_IRQHandler+0x8b8>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a7c      	ldr	r2, [pc, #496]	@ (8002d68 <HAL_DMA_IRQHandler+0xa68>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d01d      	beq.n	8002bb8 <HAL_DMA_IRQHandler+0x8b8>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a7a      	ldr	r2, [pc, #488]	@ (8002d6c <HAL_DMA_IRQHandler+0xa6c>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d018      	beq.n	8002bb8 <HAL_DMA_IRQHandler+0x8b8>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a79      	ldr	r2, [pc, #484]	@ (8002d70 <HAL_DMA_IRQHandler+0xa70>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d013      	beq.n	8002bb8 <HAL_DMA_IRQHandler+0x8b8>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a77      	ldr	r2, [pc, #476]	@ (8002d74 <HAL_DMA_IRQHandler+0xa74>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d00e      	beq.n	8002bb8 <HAL_DMA_IRQHandler+0x8b8>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a76      	ldr	r2, [pc, #472]	@ (8002d78 <HAL_DMA_IRQHandler+0xa78>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d009      	beq.n	8002bb8 <HAL_DMA_IRQHandler+0x8b8>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a74      	ldr	r2, [pc, #464]	@ (8002d7c <HAL_DMA_IRQHandler+0xa7c>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d004      	beq.n	8002bb8 <HAL_DMA_IRQHandler+0x8b8>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a73      	ldr	r2, [pc, #460]	@ (8002d80 <HAL_DMA_IRQHandler+0xa80>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d108      	bne.n	8002bca <HAL_DMA_IRQHandler+0x8ca>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f022 0201 	bic.w	r2, r2, #1
 8002bc6:	601a      	str	r2, [r3, #0]
 8002bc8:	e007      	b.n	8002bda <HAL_DMA_IRQHandler+0x8da>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f022 0201 	bic.w	r2, r2, #1
 8002bd8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	3301      	adds	r3, #1
 8002bde:	60fb      	str	r3, [r7, #12]
 8002be0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002be2:	429a      	cmp	r2, r3
 8002be4:	d307      	bcc.n	8002bf6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f003 0301 	and.w	r3, r3, #1
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d1f2      	bne.n	8002bda <HAL_DMA_IRQHandler+0x8da>
 8002bf4:	e000      	b.n	8002bf8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8002bf6:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 0301 	and.w	r3, r3, #1
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d004      	beq.n	8002c10 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2203      	movs	r2, #3
 8002c0a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8002c0e:	e003      	b.n	8002c18 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2201      	movs	r2, #1
 8002c14:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	f000 82aa 	beq.w	800317e <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	4798      	blx	r3
 8002c32:	e2a4      	b.n	800317e <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a52      	ldr	r2, [pc, #328]	@ (8002d84 <HAL_DMA_IRQHandler+0xa84>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d04a      	beq.n	8002cd4 <HAL_DMA_IRQHandler+0x9d4>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a51      	ldr	r2, [pc, #324]	@ (8002d88 <HAL_DMA_IRQHandler+0xa88>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d045      	beq.n	8002cd4 <HAL_DMA_IRQHandler+0x9d4>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a4f      	ldr	r2, [pc, #316]	@ (8002d8c <HAL_DMA_IRQHandler+0xa8c>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d040      	beq.n	8002cd4 <HAL_DMA_IRQHandler+0x9d4>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a4e      	ldr	r2, [pc, #312]	@ (8002d90 <HAL_DMA_IRQHandler+0xa90>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d03b      	beq.n	8002cd4 <HAL_DMA_IRQHandler+0x9d4>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a4c      	ldr	r2, [pc, #304]	@ (8002d94 <HAL_DMA_IRQHandler+0xa94>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d036      	beq.n	8002cd4 <HAL_DMA_IRQHandler+0x9d4>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a4b      	ldr	r2, [pc, #300]	@ (8002d98 <HAL_DMA_IRQHandler+0xa98>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d031      	beq.n	8002cd4 <HAL_DMA_IRQHandler+0x9d4>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a49      	ldr	r2, [pc, #292]	@ (8002d9c <HAL_DMA_IRQHandler+0xa9c>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d02c      	beq.n	8002cd4 <HAL_DMA_IRQHandler+0x9d4>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a48      	ldr	r2, [pc, #288]	@ (8002da0 <HAL_DMA_IRQHandler+0xaa0>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d027      	beq.n	8002cd4 <HAL_DMA_IRQHandler+0x9d4>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a46      	ldr	r2, [pc, #280]	@ (8002da4 <HAL_DMA_IRQHandler+0xaa4>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d022      	beq.n	8002cd4 <HAL_DMA_IRQHandler+0x9d4>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a45      	ldr	r2, [pc, #276]	@ (8002da8 <HAL_DMA_IRQHandler+0xaa8>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d01d      	beq.n	8002cd4 <HAL_DMA_IRQHandler+0x9d4>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a43      	ldr	r2, [pc, #268]	@ (8002dac <HAL_DMA_IRQHandler+0xaac>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d018      	beq.n	8002cd4 <HAL_DMA_IRQHandler+0x9d4>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a42      	ldr	r2, [pc, #264]	@ (8002db0 <HAL_DMA_IRQHandler+0xab0>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d013      	beq.n	8002cd4 <HAL_DMA_IRQHandler+0x9d4>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a40      	ldr	r2, [pc, #256]	@ (8002db4 <HAL_DMA_IRQHandler+0xab4>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d00e      	beq.n	8002cd4 <HAL_DMA_IRQHandler+0x9d4>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a3f      	ldr	r2, [pc, #252]	@ (8002db8 <HAL_DMA_IRQHandler+0xab8>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d009      	beq.n	8002cd4 <HAL_DMA_IRQHandler+0x9d4>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a3d      	ldr	r2, [pc, #244]	@ (8002dbc <HAL_DMA_IRQHandler+0xabc>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d004      	beq.n	8002cd4 <HAL_DMA_IRQHandler+0x9d4>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a3c      	ldr	r2, [pc, #240]	@ (8002dc0 <HAL_DMA_IRQHandler+0xac0>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d101      	bne.n	8002cd8 <HAL_DMA_IRQHandler+0x9d8>
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e000      	b.n	8002cda <HAL_DMA_IRQHandler+0x9da>
 8002cd8:	2300      	movs	r3, #0
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	f000 824f 	beq.w	800317e <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cec:	f003 031f 	and.w	r3, r3, #31
 8002cf0:	2204      	movs	r2, #4
 8002cf2:	409a      	lsls	r2, r3
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	f000 80dd 	beq.w	8002eb8 <HAL_DMA_IRQHandler+0xbb8>
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	f003 0304 	and.w	r3, r3, #4
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	f000 80d7 	beq.w	8002eb8 <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d0e:	f003 031f 	and.w	r3, r3, #31
 8002d12:	2204      	movs	r2, #4
 8002d14:	409a      	lsls	r2, r3
 8002d16:	69fb      	ldr	r3, [r7, #28]
 8002d18:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d059      	beq.n	8002dd8 <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d14a      	bne.n	8002dc4 <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	f000 8220 	beq.w	8003178 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d3c:	6878      	ldr	r0, [r7, #4]
 8002d3e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002d40:	e21a      	b.n	8003178 <HAL_DMA_IRQHandler+0xe78>
 8002d42:	bf00      	nop
 8002d44:	40020010 	.word	0x40020010
 8002d48:	40020028 	.word	0x40020028
 8002d4c:	40020040 	.word	0x40020040
 8002d50:	40020058 	.word	0x40020058
 8002d54:	40020070 	.word	0x40020070
 8002d58:	40020088 	.word	0x40020088
 8002d5c:	400200a0 	.word	0x400200a0
 8002d60:	400200b8 	.word	0x400200b8
 8002d64:	40020410 	.word	0x40020410
 8002d68:	40020428 	.word	0x40020428
 8002d6c:	40020440 	.word	0x40020440
 8002d70:	40020458 	.word	0x40020458
 8002d74:	40020470 	.word	0x40020470
 8002d78:	40020488 	.word	0x40020488
 8002d7c:	400204a0 	.word	0x400204a0
 8002d80:	400204b8 	.word	0x400204b8
 8002d84:	48022c08 	.word	0x48022c08
 8002d88:	48022c1c 	.word	0x48022c1c
 8002d8c:	48022c30 	.word	0x48022c30
 8002d90:	48022c44 	.word	0x48022c44
 8002d94:	48022c58 	.word	0x48022c58
 8002d98:	48022c6c 	.word	0x48022c6c
 8002d9c:	48022c80 	.word	0x48022c80
 8002da0:	48022c94 	.word	0x48022c94
 8002da4:	58025408 	.word	0x58025408
 8002da8:	5802541c 	.word	0x5802541c
 8002dac:	58025430 	.word	0x58025430
 8002db0:	58025444 	.word	0x58025444
 8002db4:	58025458 	.word	0x58025458
 8002db8:	5802546c 	.word	0x5802546c
 8002dbc:	58025480 	.word	0x58025480
 8002dc0:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	f000 81d5 	beq.w	8003178 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002dd6:	e1cf      	b.n	8003178 <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	f003 0320 	and.w	r3, r3, #32
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d160      	bne.n	8002ea4 <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a7f      	ldr	r2, [pc, #508]	@ (8002fe4 <HAL_DMA_IRQHandler+0xce4>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d04a      	beq.n	8002e82 <HAL_DMA_IRQHandler+0xb82>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a7d      	ldr	r2, [pc, #500]	@ (8002fe8 <HAL_DMA_IRQHandler+0xce8>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d045      	beq.n	8002e82 <HAL_DMA_IRQHandler+0xb82>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a7c      	ldr	r2, [pc, #496]	@ (8002fec <HAL_DMA_IRQHandler+0xcec>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d040      	beq.n	8002e82 <HAL_DMA_IRQHandler+0xb82>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a7a      	ldr	r2, [pc, #488]	@ (8002ff0 <HAL_DMA_IRQHandler+0xcf0>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d03b      	beq.n	8002e82 <HAL_DMA_IRQHandler+0xb82>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a79      	ldr	r2, [pc, #484]	@ (8002ff4 <HAL_DMA_IRQHandler+0xcf4>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d036      	beq.n	8002e82 <HAL_DMA_IRQHandler+0xb82>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a77      	ldr	r2, [pc, #476]	@ (8002ff8 <HAL_DMA_IRQHandler+0xcf8>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d031      	beq.n	8002e82 <HAL_DMA_IRQHandler+0xb82>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a76      	ldr	r2, [pc, #472]	@ (8002ffc <HAL_DMA_IRQHandler+0xcfc>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d02c      	beq.n	8002e82 <HAL_DMA_IRQHandler+0xb82>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a74      	ldr	r2, [pc, #464]	@ (8003000 <HAL_DMA_IRQHandler+0xd00>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d027      	beq.n	8002e82 <HAL_DMA_IRQHandler+0xb82>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a73      	ldr	r2, [pc, #460]	@ (8003004 <HAL_DMA_IRQHandler+0xd04>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d022      	beq.n	8002e82 <HAL_DMA_IRQHandler+0xb82>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a71      	ldr	r2, [pc, #452]	@ (8003008 <HAL_DMA_IRQHandler+0xd08>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d01d      	beq.n	8002e82 <HAL_DMA_IRQHandler+0xb82>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a70      	ldr	r2, [pc, #448]	@ (800300c <HAL_DMA_IRQHandler+0xd0c>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d018      	beq.n	8002e82 <HAL_DMA_IRQHandler+0xb82>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a6e      	ldr	r2, [pc, #440]	@ (8003010 <HAL_DMA_IRQHandler+0xd10>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d013      	beq.n	8002e82 <HAL_DMA_IRQHandler+0xb82>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a6d      	ldr	r2, [pc, #436]	@ (8003014 <HAL_DMA_IRQHandler+0xd14>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d00e      	beq.n	8002e82 <HAL_DMA_IRQHandler+0xb82>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a6b      	ldr	r2, [pc, #428]	@ (8003018 <HAL_DMA_IRQHandler+0xd18>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d009      	beq.n	8002e82 <HAL_DMA_IRQHandler+0xb82>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a6a      	ldr	r2, [pc, #424]	@ (800301c <HAL_DMA_IRQHandler+0xd1c>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d004      	beq.n	8002e82 <HAL_DMA_IRQHandler+0xb82>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a68      	ldr	r2, [pc, #416]	@ (8003020 <HAL_DMA_IRQHandler+0xd20>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d108      	bne.n	8002e94 <HAL_DMA_IRQHandler+0xb94>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f022 0208 	bic.w	r2, r2, #8
 8002e90:	601a      	str	r2, [r3, #0]
 8002e92:	e007      	b.n	8002ea4 <HAL_DMA_IRQHandler+0xba4>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f022 0204 	bic.w	r2, r2, #4
 8002ea2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	f000 8165 	beq.w	8003178 <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002eb6:	e15f      	b.n	8003178 <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ebc:	f003 031f 	and.w	r3, r3, #31
 8002ec0:	2202      	movs	r2, #2
 8002ec2:	409a      	lsls	r2, r3
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	f000 80c5 	beq.w	8003058 <HAL_DMA_IRQHandler+0xd58>
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	f003 0302 	and.w	r3, r3, #2
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	f000 80bf 	beq.w	8003058 <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ede:	f003 031f 	and.w	r3, r3, #31
 8002ee2:	2202      	movs	r2, #2
 8002ee4:	409a      	lsls	r2, r3
 8002ee6:	69fb      	ldr	r3, [r7, #28]
 8002ee8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d018      	beq.n	8002f26 <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d109      	bne.n	8002f12 <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	f000 813a 	beq.w	800317c <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f0c:	6878      	ldr	r0, [r7, #4]
 8002f0e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002f10:	e134      	b.n	800317c <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	f000 8130 	beq.w	800317c <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f20:	6878      	ldr	r0, [r7, #4]
 8002f22:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002f24:	e12a      	b.n	800317c <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	f003 0320 	and.w	r3, r3, #32
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	f040 8089 	bne.w	8003044 <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a2b      	ldr	r2, [pc, #172]	@ (8002fe4 <HAL_DMA_IRQHandler+0xce4>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d04a      	beq.n	8002fd2 <HAL_DMA_IRQHandler+0xcd2>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a29      	ldr	r2, [pc, #164]	@ (8002fe8 <HAL_DMA_IRQHandler+0xce8>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d045      	beq.n	8002fd2 <HAL_DMA_IRQHandler+0xcd2>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a28      	ldr	r2, [pc, #160]	@ (8002fec <HAL_DMA_IRQHandler+0xcec>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d040      	beq.n	8002fd2 <HAL_DMA_IRQHandler+0xcd2>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a26      	ldr	r2, [pc, #152]	@ (8002ff0 <HAL_DMA_IRQHandler+0xcf0>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d03b      	beq.n	8002fd2 <HAL_DMA_IRQHandler+0xcd2>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a25      	ldr	r2, [pc, #148]	@ (8002ff4 <HAL_DMA_IRQHandler+0xcf4>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d036      	beq.n	8002fd2 <HAL_DMA_IRQHandler+0xcd2>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a23      	ldr	r2, [pc, #140]	@ (8002ff8 <HAL_DMA_IRQHandler+0xcf8>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d031      	beq.n	8002fd2 <HAL_DMA_IRQHandler+0xcd2>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a22      	ldr	r2, [pc, #136]	@ (8002ffc <HAL_DMA_IRQHandler+0xcfc>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d02c      	beq.n	8002fd2 <HAL_DMA_IRQHandler+0xcd2>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a20      	ldr	r2, [pc, #128]	@ (8003000 <HAL_DMA_IRQHandler+0xd00>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d027      	beq.n	8002fd2 <HAL_DMA_IRQHandler+0xcd2>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a1f      	ldr	r2, [pc, #124]	@ (8003004 <HAL_DMA_IRQHandler+0xd04>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d022      	beq.n	8002fd2 <HAL_DMA_IRQHandler+0xcd2>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a1d      	ldr	r2, [pc, #116]	@ (8003008 <HAL_DMA_IRQHandler+0xd08>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d01d      	beq.n	8002fd2 <HAL_DMA_IRQHandler+0xcd2>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a1c      	ldr	r2, [pc, #112]	@ (800300c <HAL_DMA_IRQHandler+0xd0c>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d018      	beq.n	8002fd2 <HAL_DMA_IRQHandler+0xcd2>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a1a      	ldr	r2, [pc, #104]	@ (8003010 <HAL_DMA_IRQHandler+0xd10>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d013      	beq.n	8002fd2 <HAL_DMA_IRQHandler+0xcd2>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a19      	ldr	r2, [pc, #100]	@ (8003014 <HAL_DMA_IRQHandler+0xd14>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d00e      	beq.n	8002fd2 <HAL_DMA_IRQHandler+0xcd2>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a17      	ldr	r2, [pc, #92]	@ (8003018 <HAL_DMA_IRQHandler+0xd18>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d009      	beq.n	8002fd2 <HAL_DMA_IRQHandler+0xcd2>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a16      	ldr	r2, [pc, #88]	@ (800301c <HAL_DMA_IRQHandler+0xd1c>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d004      	beq.n	8002fd2 <HAL_DMA_IRQHandler+0xcd2>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a14      	ldr	r2, [pc, #80]	@ (8003020 <HAL_DMA_IRQHandler+0xd20>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d128      	bne.n	8003024 <HAL_DMA_IRQHandler+0xd24>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	681a      	ldr	r2, [r3, #0]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f022 0214 	bic.w	r2, r2, #20
 8002fe0:	601a      	str	r2, [r3, #0]
 8002fe2:	e027      	b.n	8003034 <HAL_DMA_IRQHandler+0xd34>
 8002fe4:	40020010 	.word	0x40020010
 8002fe8:	40020028 	.word	0x40020028
 8002fec:	40020040 	.word	0x40020040
 8002ff0:	40020058 	.word	0x40020058
 8002ff4:	40020070 	.word	0x40020070
 8002ff8:	40020088 	.word	0x40020088
 8002ffc:	400200a0 	.word	0x400200a0
 8003000:	400200b8 	.word	0x400200b8
 8003004:	40020410 	.word	0x40020410
 8003008:	40020428 	.word	0x40020428
 800300c:	40020440 	.word	0x40020440
 8003010:	40020458 	.word	0x40020458
 8003014:	40020470 	.word	0x40020470
 8003018:	40020488 	.word	0x40020488
 800301c:	400204a0 	.word	0x400204a0
 8003020:	400204b8 	.word	0x400204b8
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f022 020a 	bic.w	r2, r2, #10
 8003032:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2201      	movs	r2, #1
 8003038:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2200      	movs	r2, #0
 8003040:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003048:	2b00      	cmp	r3, #0
 800304a:	f000 8097 	beq.w	800317c <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003056:	e091      	b.n	800317c <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800305c:	f003 031f 	and.w	r3, r3, #31
 8003060:	2208      	movs	r2, #8
 8003062:	409a      	lsls	r2, r3
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	4013      	ands	r3, r2
 8003068:	2b00      	cmp	r3, #0
 800306a:	f000 8088 	beq.w	800317e <HAL_DMA_IRQHandler+0xe7e>
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	f003 0308 	and.w	r3, r3, #8
 8003074:	2b00      	cmp	r3, #0
 8003076:	f000 8082 	beq.w	800317e <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a41      	ldr	r2, [pc, #260]	@ (8003184 <HAL_DMA_IRQHandler+0xe84>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d04a      	beq.n	800311a <HAL_DMA_IRQHandler+0xe1a>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a3f      	ldr	r2, [pc, #252]	@ (8003188 <HAL_DMA_IRQHandler+0xe88>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d045      	beq.n	800311a <HAL_DMA_IRQHandler+0xe1a>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a3e      	ldr	r2, [pc, #248]	@ (800318c <HAL_DMA_IRQHandler+0xe8c>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d040      	beq.n	800311a <HAL_DMA_IRQHandler+0xe1a>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a3c      	ldr	r2, [pc, #240]	@ (8003190 <HAL_DMA_IRQHandler+0xe90>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d03b      	beq.n	800311a <HAL_DMA_IRQHandler+0xe1a>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a3b      	ldr	r2, [pc, #236]	@ (8003194 <HAL_DMA_IRQHandler+0xe94>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d036      	beq.n	800311a <HAL_DMA_IRQHandler+0xe1a>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a39      	ldr	r2, [pc, #228]	@ (8003198 <HAL_DMA_IRQHandler+0xe98>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d031      	beq.n	800311a <HAL_DMA_IRQHandler+0xe1a>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a38      	ldr	r2, [pc, #224]	@ (800319c <HAL_DMA_IRQHandler+0xe9c>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d02c      	beq.n	800311a <HAL_DMA_IRQHandler+0xe1a>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a36      	ldr	r2, [pc, #216]	@ (80031a0 <HAL_DMA_IRQHandler+0xea0>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d027      	beq.n	800311a <HAL_DMA_IRQHandler+0xe1a>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a35      	ldr	r2, [pc, #212]	@ (80031a4 <HAL_DMA_IRQHandler+0xea4>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d022      	beq.n	800311a <HAL_DMA_IRQHandler+0xe1a>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a33      	ldr	r2, [pc, #204]	@ (80031a8 <HAL_DMA_IRQHandler+0xea8>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d01d      	beq.n	800311a <HAL_DMA_IRQHandler+0xe1a>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a32      	ldr	r2, [pc, #200]	@ (80031ac <HAL_DMA_IRQHandler+0xeac>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d018      	beq.n	800311a <HAL_DMA_IRQHandler+0xe1a>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a30      	ldr	r2, [pc, #192]	@ (80031b0 <HAL_DMA_IRQHandler+0xeb0>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d013      	beq.n	800311a <HAL_DMA_IRQHandler+0xe1a>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a2f      	ldr	r2, [pc, #188]	@ (80031b4 <HAL_DMA_IRQHandler+0xeb4>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d00e      	beq.n	800311a <HAL_DMA_IRQHandler+0xe1a>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a2d      	ldr	r2, [pc, #180]	@ (80031b8 <HAL_DMA_IRQHandler+0xeb8>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d009      	beq.n	800311a <HAL_DMA_IRQHandler+0xe1a>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a2c      	ldr	r2, [pc, #176]	@ (80031bc <HAL_DMA_IRQHandler+0xebc>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d004      	beq.n	800311a <HAL_DMA_IRQHandler+0xe1a>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a2a      	ldr	r2, [pc, #168]	@ (80031c0 <HAL_DMA_IRQHandler+0xec0>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d108      	bne.n	800312c <HAL_DMA_IRQHandler+0xe2c>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f022 021c 	bic.w	r2, r2, #28
 8003128:	601a      	str	r2, [r3, #0]
 800312a:	e007      	b.n	800313c <HAL_DMA_IRQHandler+0xe3c>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f022 020e 	bic.w	r2, r2, #14
 800313a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003140:	f003 031f 	and.w	r3, r3, #31
 8003144:	2201      	movs	r2, #1
 8003146:	409a      	lsls	r2, r3
 8003148:	69fb      	ldr	r3, [r7, #28]
 800314a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2201      	movs	r2, #1
 8003150:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2201      	movs	r2, #1
 8003156:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2200      	movs	r2, #0
 800315e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003166:	2b00      	cmp	r3, #0
 8003168:	d009      	beq.n	800317e <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	4798      	blx	r3
 8003172:	e004      	b.n	800317e <HAL_DMA_IRQHandler+0xe7e>
          return;
 8003174:	bf00      	nop
 8003176:	e002      	b.n	800317e <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003178:	bf00      	nop
 800317a:	e000      	b.n	800317e <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800317c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800317e:	3728      	adds	r7, #40	@ 0x28
 8003180:	46bd      	mov	sp, r7
 8003182:	bd80      	pop	{r7, pc}
 8003184:	40020010 	.word	0x40020010
 8003188:	40020028 	.word	0x40020028
 800318c:	40020040 	.word	0x40020040
 8003190:	40020058 	.word	0x40020058
 8003194:	40020070 	.word	0x40020070
 8003198:	40020088 	.word	0x40020088
 800319c:	400200a0 	.word	0x400200a0
 80031a0:	400200b8 	.word	0x400200b8
 80031a4:	40020410 	.word	0x40020410
 80031a8:	40020428 	.word	0x40020428
 80031ac:	40020440 	.word	0x40020440
 80031b0:	40020458 	.word	0x40020458
 80031b4:	40020470 	.word	0x40020470
 80031b8:	40020488 	.word	0x40020488
 80031bc:	400204a0 	.word	0x400204a0
 80031c0:	400204b8 	.word	0x400204b8

080031c4 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b083      	sub	sp, #12
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80031d2:	b2db      	uxtb	r3, r3
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	370c      	adds	r7, #12
 80031d8:	46bd      	mov	sp, r7
 80031da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031de:	4770      	bx	lr

080031e0 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b083      	sub	sp, #12
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	370c      	adds	r7, #12
 80031f0:	46bd      	mov	sp, r7
 80031f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f6:	4770      	bx	lr

080031f8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b087      	sub	sp, #28
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	60f8      	str	r0, [r7, #12]
 8003200:	60b9      	str	r1, [r7, #8]
 8003202:	607a      	str	r2, [r7, #4]
 8003204:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800320a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003210:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a7f      	ldr	r2, [pc, #508]	@ (8003414 <DMA_SetConfig+0x21c>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d072      	beq.n	8003302 <DMA_SetConfig+0x10a>
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a7d      	ldr	r2, [pc, #500]	@ (8003418 <DMA_SetConfig+0x220>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d06d      	beq.n	8003302 <DMA_SetConfig+0x10a>
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a7c      	ldr	r2, [pc, #496]	@ (800341c <DMA_SetConfig+0x224>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d068      	beq.n	8003302 <DMA_SetConfig+0x10a>
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a7a      	ldr	r2, [pc, #488]	@ (8003420 <DMA_SetConfig+0x228>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d063      	beq.n	8003302 <DMA_SetConfig+0x10a>
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a79      	ldr	r2, [pc, #484]	@ (8003424 <DMA_SetConfig+0x22c>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d05e      	beq.n	8003302 <DMA_SetConfig+0x10a>
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a77      	ldr	r2, [pc, #476]	@ (8003428 <DMA_SetConfig+0x230>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d059      	beq.n	8003302 <DMA_SetConfig+0x10a>
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a76      	ldr	r2, [pc, #472]	@ (800342c <DMA_SetConfig+0x234>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d054      	beq.n	8003302 <DMA_SetConfig+0x10a>
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a74      	ldr	r2, [pc, #464]	@ (8003430 <DMA_SetConfig+0x238>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d04f      	beq.n	8003302 <DMA_SetConfig+0x10a>
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a73      	ldr	r2, [pc, #460]	@ (8003434 <DMA_SetConfig+0x23c>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d04a      	beq.n	8003302 <DMA_SetConfig+0x10a>
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a71      	ldr	r2, [pc, #452]	@ (8003438 <DMA_SetConfig+0x240>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d045      	beq.n	8003302 <DMA_SetConfig+0x10a>
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a70      	ldr	r2, [pc, #448]	@ (800343c <DMA_SetConfig+0x244>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d040      	beq.n	8003302 <DMA_SetConfig+0x10a>
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a6e      	ldr	r2, [pc, #440]	@ (8003440 <DMA_SetConfig+0x248>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d03b      	beq.n	8003302 <DMA_SetConfig+0x10a>
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a6d      	ldr	r2, [pc, #436]	@ (8003444 <DMA_SetConfig+0x24c>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d036      	beq.n	8003302 <DMA_SetConfig+0x10a>
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a6b      	ldr	r2, [pc, #428]	@ (8003448 <DMA_SetConfig+0x250>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d031      	beq.n	8003302 <DMA_SetConfig+0x10a>
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a6a      	ldr	r2, [pc, #424]	@ (800344c <DMA_SetConfig+0x254>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d02c      	beq.n	8003302 <DMA_SetConfig+0x10a>
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a68      	ldr	r2, [pc, #416]	@ (8003450 <DMA_SetConfig+0x258>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d027      	beq.n	8003302 <DMA_SetConfig+0x10a>
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a67      	ldr	r2, [pc, #412]	@ (8003454 <DMA_SetConfig+0x25c>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d022      	beq.n	8003302 <DMA_SetConfig+0x10a>
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a65      	ldr	r2, [pc, #404]	@ (8003458 <DMA_SetConfig+0x260>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d01d      	beq.n	8003302 <DMA_SetConfig+0x10a>
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a64      	ldr	r2, [pc, #400]	@ (800345c <DMA_SetConfig+0x264>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d018      	beq.n	8003302 <DMA_SetConfig+0x10a>
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a62      	ldr	r2, [pc, #392]	@ (8003460 <DMA_SetConfig+0x268>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d013      	beq.n	8003302 <DMA_SetConfig+0x10a>
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a61      	ldr	r2, [pc, #388]	@ (8003464 <DMA_SetConfig+0x26c>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d00e      	beq.n	8003302 <DMA_SetConfig+0x10a>
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a5f      	ldr	r2, [pc, #380]	@ (8003468 <DMA_SetConfig+0x270>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d009      	beq.n	8003302 <DMA_SetConfig+0x10a>
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a5e      	ldr	r2, [pc, #376]	@ (800346c <DMA_SetConfig+0x274>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d004      	beq.n	8003302 <DMA_SetConfig+0x10a>
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a5c      	ldr	r2, [pc, #368]	@ (8003470 <DMA_SetConfig+0x278>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d101      	bne.n	8003306 <DMA_SetConfig+0x10e>
 8003302:	2301      	movs	r3, #1
 8003304:	e000      	b.n	8003308 <DMA_SetConfig+0x110>
 8003306:	2300      	movs	r3, #0
 8003308:	2b00      	cmp	r3, #0
 800330a:	d00d      	beq.n	8003328 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003310:	68fa      	ldr	r2, [r7, #12]
 8003312:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003314:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800331a:	2b00      	cmp	r3, #0
 800331c:	d004      	beq.n	8003328 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003322:	68fa      	ldr	r2, [r7, #12]
 8003324:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003326:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a39      	ldr	r2, [pc, #228]	@ (8003414 <DMA_SetConfig+0x21c>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d04a      	beq.n	80033c8 <DMA_SetConfig+0x1d0>
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a38      	ldr	r2, [pc, #224]	@ (8003418 <DMA_SetConfig+0x220>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d045      	beq.n	80033c8 <DMA_SetConfig+0x1d0>
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a36      	ldr	r2, [pc, #216]	@ (800341c <DMA_SetConfig+0x224>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d040      	beq.n	80033c8 <DMA_SetConfig+0x1d0>
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a35      	ldr	r2, [pc, #212]	@ (8003420 <DMA_SetConfig+0x228>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d03b      	beq.n	80033c8 <DMA_SetConfig+0x1d0>
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a33      	ldr	r2, [pc, #204]	@ (8003424 <DMA_SetConfig+0x22c>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d036      	beq.n	80033c8 <DMA_SetConfig+0x1d0>
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a32      	ldr	r2, [pc, #200]	@ (8003428 <DMA_SetConfig+0x230>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d031      	beq.n	80033c8 <DMA_SetConfig+0x1d0>
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a30      	ldr	r2, [pc, #192]	@ (800342c <DMA_SetConfig+0x234>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d02c      	beq.n	80033c8 <DMA_SetConfig+0x1d0>
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a2f      	ldr	r2, [pc, #188]	@ (8003430 <DMA_SetConfig+0x238>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d027      	beq.n	80033c8 <DMA_SetConfig+0x1d0>
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a2d      	ldr	r2, [pc, #180]	@ (8003434 <DMA_SetConfig+0x23c>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d022      	beq.n	80033c8 <DMA_SetConfig+0x1d0>
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a2c      	ldr	r2, [pc, #176]	@ (8003438 <DMA_SetConfig+0x240>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d01d      	beq.n	80033c8 <DMA_SetConfig+0x1d0>
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a2a      	ldr	r2, [pc, #168]	@ (800343c <DMA_SetConfig+0x244>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d018      	beq.n	80033c8 <DMA_SetConfig+0x1d0>
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a29      	ldr	r2, [pc, #164]	@ (8003440 <DMA_SetConfig+0x248>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d013      	beq.n	80033c8 <DMA_SetConfig+0x1d0>
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a27      	ldr	r2, [pc, #156]	@ (8003444 <DMA_SetConfig+0x24c>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d00e      	beq.n	80033c8 <DMA_SetConfig+0x1d0>
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a26      	ldr	r2, [pc, #152]	@ (8003448 <DMA_SetConfig+0x250>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d009      	beq.n	80033c8 <DMA_SetConfig+0x1d0>
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a24      	ldr	r2, [pc, #144]	@ (800344c <DMA_SetConfig+0x254>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d004      	beq.n	80033c8 <DMA_SetConfig+0x1d0>
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a23      	ldr	r2, [pc, #140]	@ (8003450 <DMA_SetConfig+0x258>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d101      	bne.n	80033cc <DMA_SetConfig+0x1d4>
 80033c8:	2301      	movs	r3, #1
 80033ca:	e000      	b.n	80033ce <DMA_SetConfig+0x1d6>
 80033cc:	2300      	movs	r3, #0
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d059      	beq.n	8003486 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033d6:	f003 031f 	and.w	r3, r3, #31
 80033da:	223f      	movs	r2, #63	@ 0x3f
 80033dc:	409a      	lsls	r2, r3
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80033f0:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	683a      	ldr	r2, [r7, #0]
 80033f8:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	2b40      	cmp	r3, #64	@ 0x40
 8003400:	d138      	bne.n	8003474 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	687a      	ldr	r2, [r7, #4]
 8003408:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	68ba      	ldr	r2, [r7, #8]
 8003410:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003412:	e0ae      	b.n	8003572 <DMA_SetConfig+0x37a>
 8003414:	40020010 	.word	0x40020010
 8003418:	40020028 	.word	0x40020028
 800341c:	40020040 	.word	0x40020040
 8003420:	40020058 	.word	0x40020058
 8003424:	40020070 	.word	0x40020070
 8003428:	40020088 	.word	0x40020088
 800342c:	400200a0 	.word	0x400200a0
 8003430:	400200b8 	.word	0x400200b8
 8003434:	40020410 	.word	0x40020410
 8003438:	40020428 	.word	0x40020428
 800343c:	40020440 	.word	0x40020440
 8003440:	40020458 	.word	0x40020458
 8003444:	40020470 	.word	0x40020470
 8003448:	40020488 	.word	0x40020488
 800344c:	400204a0 	.word	0x400204a0
 8003450:	400204b8 	.word	0x400204b8
 8003454:	58025408 	.word	0x58025408
 8003458:	5802541c 	.word	0x5802541c
 800345c:	58025430 	.word	0x58025430
 8003460:	58025444 	.word	0x58025444
 8003464:	58025458 	.word	0x58025458
 8003468:	5802546c 	.word	0x5802546c
 800346c:	58025480 	.word	0x58025480
 8003470:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	68ba      	ldr	r2, [r7, #8]
 800347a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	687a      	ldr	r2, [r7, #4]
 8003482:	60da      	str	r2, [r3, #12]
}
 8003484:	e075      	b.n	8003572 <DMA_SetConfig+0x37a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a3d      	ldr	r2, [pc, #244]	@ (8003580 <DMA_SetConfig+0x388>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d04a      	beq.n	8003526 <DMA_SetConfig+0x32e>
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a3b      	ldr	r2, [pc, #236]	@ (8003584 <DMA_SetConfig+0x38c>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d045      	beq.n	8003526 <DMA_SetConfig+0x32e>
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a3a      	ldr	r2, [pc, #232]	@ (8003588 <DMA_SetConfig+0x390>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d040      	beq.n	8003526 <DMA_SetConfig+0x32e>
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a38      	ldr	r2, [pc, #224]	@ (800358c <DMA_SetConfig+0x394>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d03b      	beq.n	8003526 <DMA_SetConfig+0x32e>
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a37      	ldr	r2, [pc, #220]	@ (8003590 <DMA_SetConfig+0x398>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d036      	beq.n	8003526 <DMA_SetConfig+0x32e>
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a35      	ldr	r2, [pc, #212]	@ (8003594 <DMA_SetConfig+0x39c>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d031      	beq.n	8003526 <DMA_SetConfig+0x32e>
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a34      	ldr	r2, [pc, #208]	@ (8003598 <DMA_SetConfig+0x3a0>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d02c      	beq.n	8003526 <DMA_SetConfig+0x32e>
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a32      	ldr	r2, [pc, #200]	@ (800359c <DMA_SetConfig+0x3a4>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d027      	beq.n	8003526 <DMA_SetConfig+0x32e>
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a31      	ldr	r2, [pc, #196]	@ (80035a0 <DMA_SetConfig+0x3a8>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d022      	beq.n	8003526 <DMA_SetConfig+0x32e>
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a2f      	ldr	r2, [pc, #188]	@ (80035a4 <DMA_SetConfig+0x3ac>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d01d      	beq.n	8003526 <DMA_SetConfig+0x32e>
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a2e      	ldr	r2, [pc, #184]	@ (80035a8 <DMA_SetConfig+0x3b0>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d018      	beq.n	8003526 <DMA_SetConfig+0x32e>
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a2c      	ldr	r2, [pc, #176]	@ (80035ac <DMA_SetConfig+0x3b4>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d013      	beq.n	8003526 <DMA_SetConfig+0x32e>
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a2b      	ldr	r2, [pc, #172]	@ (80035b0 <DMA_SetConfig+0x3b8>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d00e      	beq.n	8003526 <DMA_SetConfig+0x32e>
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a29      	ldr	r2, [pc, #164]	@ (80035b4 <DMA_SetConfig+0x3bc>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d009      	beq.n	8003526 <DMA_SetConfig+0x32e>
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a28      	ldr	r2, [pc, #160]	@ (80035b8 <DMA_SetConfig+0x3c0>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d004      	beq.n	8003526 <DMA_SetConfig+0x32e>
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a26      	ldr	r2, [pc, #152]	@ (80035bc <DMA_SetConfig+0x3c4>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d101      	bne.n	800352a <DMA_SetConfig+0x332>
 8003526:	2301      	movs	r3, #1
 8003528:	e000      	b.n	800352c <DMA_SetConfig+0x334>
 800352a:	2300      	movs	r3, #0
 800352c:	2b00      	cmp	r3, #0
 800352e:	d020      	beq.n	8003572 <DMA_SetConfig+0x37a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003534:	f003 031f 	and.w	r3, r3, #31
 8003538:	2201      	movs	r2, #1
 800353a:	409a      	lsls	r2, r3
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	683a      	ldr	r2, [r7, #0]
 8003546:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	2b40      	cmp	r3, #64	@ 0x40
 800354e:	d108      	bne.n	8003562 <DMA_SetConfig+0x36a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	687a      	ldr	r2, [r7, #4]
 8003556:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	68ba      	ldr	r2, [r7, #8]
 800355e:	60da      	str	r2, [r3, #12]
}
 8003560:	e007      	b.n	8003572 <DMA_SetConfig+0x37a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	68ba      	ldr	r2, [r7, #8]
 8003568:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	687a      	ldr	r2, [r7, #4]
 8003570:	60da      	str	r2, [r3, #12]
}
 8003572:	bf00      	nop
 8003574:	371c      	adds	r7, #28
 8003576:	46bd      	mov	sp, r7
 8003578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357c:	4770      	bx	lr
 800357e:	bf00      	nop
 8003580:	48022c08 	.word	0x48022c08
 8003584:	48022c1c 	.word	0x48022c1c
 8003588:	48022c30 	.word	0x48022c30
 800358c:	48022c44 	.word	0x48022c44
 8003590:	48022c58 	.word	0x48022c58
 8003594:	48022c6c 	.word	0x48022c6c
 8003598:	48022c80 	.word	0x48022c80
 800359c:	48022c94 	.word	0x48022c94
 80035a0:	58025408 	.word	0x58025408
 80035a4:	5802541c 	.word	0x5802541c
 80035a8:	58025430 	.word	0x58025430
 80035ac:	58025444 	.word	0x58025444
 80035b0:	58025458 	.word	0x58025458
 80035b4:	5802546c 	.word	0x5802546c
 80035b8:	58025480 	.word	0x58025480
 80035bc:	58025494 	.word	0x58025494

080035c0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b085      	sub	sp, #20
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a42      	ldr	r2, [pc, #264]	@ (80036d8 <DMA_CalcBaseAndBitshift+0x118>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d04a      	beq.n	8003668 <DMA_CalcBaseAndBitshift+0xa8>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a41      	ldr	r2, [pc, #260]	@ (80036dc <DMA_CalcBaseAndBitshift+0x11c>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d045      	beq.n	8003668 <DMA_CalcBaseAndBitshift+0xa8>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a3f      	ldr	r2, [pc, #252]	@ (80036e0 <DMA_CalcBaseAndBitshift+0x120>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d040      	beq.n	8003668 <DMA_CalcBaseAndBitshift+0xa8>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a3e      	ldr	r2, [pc, #248]	@ (80036e4 <DMA_CalcBaseAndBitshift+0x124>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d03b      	beq.n	8003668 <DMA_CalcBaseAndBitshift+0xa8>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a3c      	ldr	r2, [pc, #240]	@ (80036e8 <DMA_CalcBaseAndBitshift+0x128>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d036      	beq.n	8003668 <DMA_CalcBaseAndBitshift+0xa8>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a3b      	ldr	r2, [pc, #236]	@ (80036ec <DMA_CalcBaseAndBitshift+0x12c>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d031      	beq.n	8003668 <DMA_CalcBaseAndBitshift+0xa8>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a39      	ldr	r2, [pc, #228]	@ (80036f0 <DMA_CalcBaseAndBitshift+0x130>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d02c      	beq.n	8003668 <DMA_CalcBaseAndBitshift+0xa8>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a38      	ldr	r2, [pc, #224]	@ (80036f4 <DMA_CalcBaseAndBitshift+0x134>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d027      	beq.n	8003668 <DMA_CalcBaseAndBitshift+0xa8>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a36      	ldr	r2, [pc, #216]	@ (80036f8 <DMA_CalcBaseAndBitshift+0x138>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d022      	beq.n	8003668 <DMA_CalcBaseAndBitshift+0xa8>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a35      	ldr	r2, [pc, #212]	@ (80036fc <DMA_CalcBaseAndBitshift+0x13c>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d01d      	beq.n	8003668 <DMA_CalcBaseAndBitshift+0xa8>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a33      	ldr	r2, [pc, #204]	@ (8003700 <DMA_CalcBaseAndBitshift+0x140>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d018      	beq.n	8003668 <DMA_CalcBaseAndBitshift+0xa8>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a32      	ldr	r2, [pc, #200]	@ (8003704 <DMA_CalcBaseAndBitshift+0x144>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d013      	beq.n	8003668 <DMA_CalcBaseAndBitshift+0xa8>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a30      	ldr	r2, [pc, #192]	@ (8003708 <DMA_CalcBaseAndBitshift+0x148>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d00e      	beq.n	8003668 <DMA_CalcBaseAndBitshift+0xa8>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a2f      	ldr	r2, [pc, #188]	@ (800370c <DMA_CalcBaseAndBitshift+0x14c>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d009      	beq.n	8003668 <DMA_CalcBaseAndBitshift+0xa8>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a2d      	ldr	r2, [pc, #180]	@ (8003710 <DMA_CalcBaseAndBitshift+0x150>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d004      	beq.n	8003668 <DMA_CalcBaseAndBitshift+0xa8>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a2c      	ldr	r2, [pc, #176]	@ (8003714 <DMA_CalcBaseAndBitshift+0x154>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d101      	bne.n	800366c <DMA_CalcBaseAndBitshift+0xac>
 8003668:	2301      	movs	r3, #1
 800366a:	e000      	b.n	800366e <DMA_CalcBaseAndBitshift+0xae>
 800366c:	2300      	movs	r3, #0
 800366e:	2b00      	cmp	r3, #0
 8003670:	d024      	beq.n	80036bc <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	b2db      	uxtb	r3, r3
 8003678:	3b10      	subs	r3, #16
 800367a:	4a27      	ldr	r2, [pc, #156]	@ (8003718 <DMA_CalcBaseAndBitshift+0x158>)
 800367c:	fba2 2303 	umull	r2, r3, r2, r3
 8003680:	091b      	lsrs	r3, r3, #4
 8003682:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	f003 0307 	and.w	r3, r3, #7
 800368a:	4a24      	ldr	r2, [pc, #144]	@ (800371c <DMA_CalcBaseAndBitshift+0x15c>)
 800368c:	5cd3      	ldrb	r3, [r2, r3]
 800368e:	461a      	mov	r2, r3
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2b03      	cmp	r3, #3
 8003698:	d908      	bls.n	80036ac <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	461a      	mov	r2, r3
 80036a0:	4b1f      	ldr	r3, [pc, #124]	@ (8003720 <DMA_CalcBaseAndBitshift+0x160>)
 80036a2:	4013      	ands	r3, r2
 80036a4:	1d1a      	adds	r2, r3, #4
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	659a      	str	r2, [r3, #88]	@ 0x58
 80036aa:	e00d      	b.n	80036c8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	461a      	mov	r2, r3
 80036b2:	4b1b      	ldr	r3, [pc, #108]	@ (8003720 <DMA_CalcBaseAndBitshift+0x160>)
 80036b4:	4013      	ands	r3, r2
 80036b6:	687a      	ldr	r2, [r7, #4]
 80036b8:	6593      	str	r3, [r2, #88]	@ 0x58
 80036ba:	e005      	b.n	80036c8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	3714      	adds	r7, #20
 80036d0:	46bd      	mov	sp, r7
 80036d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d6:	4770      	bx	lr
 80036d8:	40020010 	.word	0x40020010
 80036dc:	40020028 	.word	0x40020028
 80036e0:	40020040 	.word	0x40020040
 80036e4:	40020058 	.word	0x40020058
 80036e8:	40020070 	.word	0x40020070
 80036ec:	40020088 	.word	0x40020088
 80036f0:	400200a0 	.word	0x400200a0
 80036f4:	400200b8 	.word	0x400200b8
 80036f8:	40020410 	.word	0x40020410
 80036fc:	40020428 	.word	0x40020428
 8003700:	40020440 	.word	0x40020440
 8003704:	40020458 	.word	0x40020458
 8003708:	40020470 	.word	0x40020470
 800370c:	40020488 	.word	0x40020488
 8003710:	400204a0 	.word	0x400204a0
 8003714:	400204b8 	.word	0x400204b8
 8003718:	aaaaaaab 	.word	0xaaaaaaab
 800371c:	0800a944 	.word	0x0800a944
 8003720:	fffffc00 	.word	0xfffffc00

08003724 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003724:	b480      	push	{r7}
 8003726:	b085      	sub	sp, #20
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800372c:	2300      	movs	r3, #0
 800372e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	699b      	ldr	r3, [r3, #24]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d120      	bne.n	800377a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800373c:	2b03      	cmp	r3, #3
 800373e:	d858      	bhi.n	80037f2 <DMA_CheckFifoParam+0xce>
 8003740:	a201      	add	r2, pc, #4	@ (adr r2, 8003748 <DMA_CheckFifoParam+0x24>)
 8003742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003746:	bf00      	nop
 8003748:	08003759 	.word	0x08003759
 800374c:	0800376b 	.word	0x0800376b
 8003750:	08003759 	.word	0x08003759
 8003754:	080037f3 	.word	0x080037f3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800375c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003760:	2b00      	cmp	r3, #0
 8003762:	d048      	beq.n	80037f6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003768:	e045      	b.n	80037f6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800376e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003772:	d142      	bne.n	80037fa <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003778:	e03f      	b.n	80037fa <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	699b      	ldr	r3, [r3, #24]
 800377e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003782:	d123      	bne.n	80037cc <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003788:	2b03      	cmp	r3, #3
 800378a:	d838      	bhi.n	80037fe <DMA_CheckFifoParam+0xda>
 800378c:	a201      	add	r2, pc, #4	@ (adr r2, 8003794 <DMA_CheckFifoParam+0x70>)
 800378e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003792:	bf00      	nop
 8003794:	080037a5 	.word	0x080037a5
 8003798:	080037ab 	.word	0x080037ab
 800379c:	080037a5 	.word	0x080037a5
 80037a0:	080037bd 	.word	0x080037bd
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	73fb      	strb	r3, [r7, #15]
        break;
 80037a8:	e030      	b.n	800380c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037ae:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d025      	beq.n	8003802 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80037ba:	e022      	b.n	8003802 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037c0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80037c4:	d11f      	bne.n	8003806 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80037ca:	e01c      	b.n	8003806 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037d0:	2b02      	cmp	r3, #2
 80037d2:	d902      	bls.n	80037da <DMA_CheckFifoParam+0xb6>
 80037d4:	2b03      	cmp	r3, #3
 80037d6:	d003      	beq.n	80037e0 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80037d8:	e018      	b.n	800380c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	73fb      	strb	r3, [r7, #15]
        break;
 80037de:	e015      	b.n	800380c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037e4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d00e      	beq.n	800380a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	73fb      	strb	r3, [r7, #15]
    break;
 80037f0:	e00b      	b.n	800380a <DMA_CheckFifoParam+0xe6>
        break;
 80037f2:	bf00      	nop
 80037f4:	e00a      	b.n	800380c <DMA_CheckFifoParam+0xe8>
        break;
 80037f6:	bf00      	nop
 80037f8:	e008      	b.n	800380c <DMA_CheckFifoParam+0xe8>
        break;
 80037fa:	bf00      	nop
 80037fc:	e006      	b.n	800380c <DMA_CheckFifoParam+0xe8>
        break;
 80037fe:	bf00      	nop
 8003800:	e004      	b.n	800380c <DMA_CheckFifoParam+0xe8>
        break;
 8003802:	bf00      	nop
 8003804:	e002      	b.n	800380c <DMA_CheckFifoParam+0xe8>
        break;
 8003806:	bf00      	nop
 8003808:	e000      	b.n	800380c <DMA_CheckFifoParam+0xe8>
    break;
 800380a:	bf00      	nop
    }
  }

  return status;
 800380c:	7bfb      	ldrb	r3, [r7, #15]
}
 800380e:	4618      	mov	r0, r3
 8003810:	3714      	adds	r7, #20
 8003812:	46bd      	mov	sp, r7
 8003814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003818:	4770      	bx	lr
 800381a:	bf00      	nop

0800381c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800381c:	b480      	push	{r7}
 800381e:	b085      	sub	sp, #20
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a38      	ldr	r2, [pc, #224]	@ (8003910 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d022      	beq.n	800387a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a36      	ldr	r2, [pc, #216]	@ (8003914 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d01d      	beq.n	800387a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a35      	ldr	r2, [pc, #212]	@ (8003918 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d018      	beq.n	800387a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a33      	ldr	r2, [pc, #204]	@ (800391c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d013      	beq.n	800387a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a32      	ldr	r2, [pc, #200]	@ (8003920 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d00e      	beq.n	800387a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a30      	ldr	r2, [pc, #192]	@ (8003924 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d009      	beq.n	800387a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a2f      	ldr	r2, [pc, #188]	@ (8003928 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d004      	beq.n	800387a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a2d      	ldr	r2, [pc, #180]	@ (800392c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d101      	bne.n	800387e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800387a:	2301      	movs	r3, #1
 800387c:	e000      	b.n	8003880 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800387e:	2300      	movs	r3, #0
 8003880:	2b00      	cmp	r3, #0
 8003882:	d01a      	beq.n	80038ba <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	b2db      	uxtb	r3, r3
 800388a:	3b08      	subs	r3, #8
 800388c:	4a28      	ldr	r2, [pc, #160]	@ (8003930 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800388e:	fba2 2303 	umull	r2, r3, r2, r3
 8003892:	091b      	lsrs	r3, r3, #4
 8003894:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003896:	68fa      	ldr	r2, [r7, #12]
 8003898:	4b26      	ldr	r3, [pc, #152]	@ (8003934 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800389a:	4413      	add	r3, r2
 800389c:	009b      	lsls	r3, r3, #2
 800389e:	461a      	mov	r2, r3
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	4a24      	ldr	r2, [pc, #144]	@ (8003938 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80038a8:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	f003 031f 	and.w	r3, r3, #31
 80038b0:	2201      	movs	r2, #1
 80038b2:	409a      	lsls	r2, r3
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80038b8:	e024      	b.n	8003904 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	b2db      	uxtb	r3, r3
 80038c0:	3b10      	subs	r3, #16
 80038c2:	4a1e      	ldr	r2, [pc, #120]	@ (800393c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80038c4:	fba2 2303 	umull	r2, r3, r2, r3
 80038c8:	091b      	lsrs	r3, r3, #4
 80038ca:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	4a1c      	ldr	r2, [pc, #112]	@ (8003940 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d806      	bhi.n	80038e2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	4a1b      	ldr	r2, [pc, #108]	@ (8003944 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d902      	bls.n	80038e2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	3308      	adds	r3, #8
 80038e0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80038e2:	68fa      	ldr	r2, [r7, #12]
 80038e4:	4b18      	ldr	r3, [pc, #96]	@ (8003948 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80038e6:	4413      	add	r3, r2
 80038e8:	009b      	lsls	r3, r3, #2
 80038ea:	461a      	mov	r2, r3
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	4a16      	ldr	r2, [pc, #88]	@ (800394c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80038f4:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	f003 031f 	and.w	r3, r3, #31
 80038fc:	2201      	movs	r2, #1
 80038fe:	409a      	lsls	r2, r3
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003904:	bf00      	nop
 8003906:	3714      	adds	r7, #20
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr
 8003910:	58025408 	.word	0x58025408
 8003914:	5802541c 	.word	0x5802541c
 8003918:	58025430 	.word	0x58025430
 800391c:	58025444 	.word	0x58025444
 8003920:	58025458 	.word	0x58025458
 8003924:	5802546c 	.word	0x5802546c
 8003928:	58025480 	.word	0x58025480
 800392c:	58025494 	.word	0x58025494
 8003930:	cccccccd 	.word	0xcccccccd
 8003934:	16009600 	.word	0x16009600
 8003938:	58025880 	.word	0x58025880
 800393c:	aaaaaaab 	.word	0xaaaaaaab
 8003940:	400204b8 	.word	0x400204b8
 8003944:	4002040f 	.word	0x4002040f
 8003948:	10008200 	.word	0x10008200
 800394c:	40020880 	.word	0x40020880

08003950 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003950:	b480      	push	{r7}
 8003952:	b085      	sub	sp, #20
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	b2db      	uxtb	r3, r3
 800395e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d04a      	beq.n	80039fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2b08      	cmp	r3, #8
 800396a:	d847      	bhi.n	80039fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a25      	ldr	r2, [pc, #148]	@ (8003a08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d022      	beq.n	80039bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a24      	ldr	r2, [pc, #144]	@ (8003a0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d01d      	beq.n	80039bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a22      	ldr	r2, [pc, #136]	@ (8003a10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d018      	beq.n	80039bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a21      	ldr	r2, [pc, #132]	@ (8003a14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d013      	beq.n	80039bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a1f      	ldr	r2, [pc, #124]	@ (8003a18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d00e      	beq.n	80039bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a1e      	ldr	r2, [pc, #120]	@ (8003a1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d009      	beq.n	80039bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a1c      	ldr	r2, [pc, #112]	@ (8003a20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d004      	beq.n	80039bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a1b      	ldr	r2, [pc, #108]	@ (8003a24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d101      	bne.n	80039c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80039bc:	2301      	movs	r3, #1
 80039be:	e000      	b.n	80039c2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80039c0:	2300      	movs	r3, #0
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d00a      	beq.n	80039dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80039c6:	68fa      	ldr	r2, [r7, #12]
 80039c8:	4b17      	ldr	r3, [pc, #92]	@ (8003a28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80039ca:	4413      	add	r3, r2
 80039cc:	009b      	lsls	r3, r3, #2
 80039ce:	461a      	mov	r2, r3
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	4a15      	ldr	r2, [pc, #84]	@ (8003a2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80039d8:	671a      	str	r2, [r3, #112]	@ 0x70
 80039da:	e009      	b.n	80039f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80039dc:	68fa      	ldr	r2, [r7, #12]
 80039de:	4b14      	ldr	r3, [pc, #80]	@ (8003a30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80039e0:	4413      	add	r3, r2
 80039e2:	009b      	lsls	r3, r3, #2
 80039e4:	461a      	mov	r2, r3
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	4a11      	ldr	r2, [pc, #68]	@ (8003a34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80039ee:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	3b01      	subs	r3, #1
 80039f4:	2201      	movs	r2, #1
 80039f6:	409a      	lsls	r2, r3
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 80039fc:	bf00      	nop
 80039fe:	3714      	adds	r7, #20
 8003a00:	46bd      	mov	sp, r7
 8003a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a06:	4770      	bx	lr
 8003a08:	58025408 	.word	0x58025408
 8003a0c:	5802541c 	.word	0x5802541c
 8003a10:	58025430 	.word	0x58025430
 8003a14:	58025444 	.word	0x58025444
 8003a18:	58025458 	.word	0x58025458
 8003a1c:	5802546c 	.word	0x5802546c
 8003a20:	58025480 	.word	0x58025480
 8003a24:	58025494 	.word	0x58025494
 8003a28:	1600963f 	.word	0x1600963f
 8003a2c:	58025940 	.word	0x58025940
 8003a30:	1000823f 	.word	0x1000823f
 8003a34:	40020940 	.word	0x40020940

08003a38 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b089      	sub	sp, #36	@ 0x24
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
 8003a40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003a42:	2300      	movs	r3, #0
 8003a44:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003a46:	4b89      	ldr	r3, [pc, #548]	@ (8003c6c <HAL_GPIO_Init+0x234>)
 8003a48:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003a4a:	e194      	b.n	8003d76 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	2101      	movs	r1, #1
 8003a52:	69fb      	ldr	r3, [r7, #28]
 8003a54:	fa01 f303 	lsl.w	r3, r1, r3
 8003a58:	4013      	ands	r3, r2
 8003a5a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	f000 8186 	beq.w	8003d70 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	f003 0303 	and.w	r3, r3, #3
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d005      	beq.n	8003a7c <HAL_GPIO_Init+0x44>
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	f003 0303 	and.w	r3, r3, #3
 8003a78:	2b02      	cmp	r3, #2
 8003a7a:	d130      	bne.n	8003ade <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003a82:	69fb      	ldr	r3, [r7, #28]
 8003a84:	005b      	lsls	r3, r3, #1
 8003a86:	2203      	movs	r2, #3
 8003a88:	fa02 f303 	lsl.w	r3, r2, r3
 8003a8c:	43db      	mvns	r3, r3
 8003a8e:	69ba      	ldr	r2, [r7, #24]
 8003a90:	4013      	ands	r3, r2
 8003a92:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	68da      	ldr	r2, [r3, #12]
 8003a98:	69fb      	ldr	r3, [r7, #28]
 8003a9a:	005b      	lsls	r3, r3, #1
 8003a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa0:	69ba      	ldr	r2, [r7, #24]
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	69ba      	ldr	r2, [r7, #24]
 8003aaa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	69fb      	ldr	r3, [r7, #28]
 8003ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8003aba:	43db      	mvns	r3, r3
 8003abc:	69ba      	ldr	r2, [r7, #24]
 8003abe:	4013      	ands	r3, r2
 8003ac0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	091b      	lsrs	r3, r3, #4
 8003ac8:	f003 0201 	and.w	r2, r3, #1
 8003acc:	69fb      	ldr	r3, [r7, #28]
 8003ace:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad2:	69ba      	ldr	r2, [r7, #24]
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	69ba      	ldr	r2, [r7, #24]
 8003adc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	f003 0303 	and.w	r3, r3, #3
 8003ae6:	2b03      	cmp	r3, #3
 8003ae8:	d017      	beq.n	8003b1a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	68db      	ldr	r3, [r3, #12]
 8003aee:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003af0:	69fb      	ldr	r3, [r7, #28]
 8003af2:	005b      	lsls	r3, r3, #1
 8003af4:	2203      	movs	r2, #3
 8003af6:	fa02 f303 	lsl.w	r3, r2, r3
 8003afa:	43db      	mvns	r3, r3
 8003afc:	69ba      	ldr	r2, [r7, #24]
 8003afe:	4013      	ands	r3, r2
 8003b00:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	689a      	ldr	r2, [r3, #8]
 8003b06:	69fb      	ldr	r3, [r7, #28]
 8003b08:	005b      	lsls	r3, r3, #1
 8003b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b0e:	69ba      	ldr	r2, [r7, #24]
 8003b10:	4313      	orrs	r3, r2
 8003b12:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	69ba      	ldr	r2, [r7, #24]
 8003b18:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	f003 0303 	and.w	r3, r3, #3
 8003b22:	2b02      	cmp	r3, #2
 8003b24:	d123      	bne.n	8003b6e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003b26:	69fb      	ldr	r3, [r7, #28]
 8003b28:	08da      	lsrs	r2, r3, #3
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	3208      	adds	r2, #8
 8003b2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b32:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003b34:	69fb      	ldr	r3, [r7, #28]
 8003b36:	f003 0307 	and.w	r3, r3, #7
 8003b3a:	009b      	lsls	r3, r3, #2
 8003b3c:	220f      	movs	r2, #15
 8003b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b42:	43db      	mvns	r3, r3
 8003b44:	69ba      	ldr	r2, [r7, #24]
 8003b46:	4013      	ands	r3, r2
 8003b48:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	691a      	ldr	r2, [r3, #16]
 8003b4e:	69fb      	ldr	r3, [r7, #28]
 8003b50:	f003 0307 	and.w	r3, r3, #7
 8003b54:	009b      	lsls	r3, r3, #2
 8003b56:	fa02 f303 	lsl.w	r3, r2, r3
 8003b5a:	69ba      	ldr	r2, [r7, #24]
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003b60:	69fb      	ldr	r3, [r7, #28]
 8003b62:	08da      	lsrs	r2, r3, #3
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	3208      	adds	r2, #8
 8003b68:	69b9      	ldr	r1, [r7, #24]
 8003b6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003b74:	69fb      	ldr	r3, [r7, #28]
 8003b76:	005b      	lsls	r3, r3, #1
 8003b78:	2203      	movs	r2, #3
 8003b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b7e:	43db      	mvns	r3, r3
 8003b80:	69ba      	ldr	r2, [r7, #24]
 8003b82:	4013      	ands	r3, r2
 8003b84:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	f003 0203 	and.w	r2, r3, #3
 8003b8e:	69fb      	ldr	r3, [r7, #28]
 8003b90:	005b      	lsls	r3, r3, #1
 8003b92:	fa02 f303 	lsl.w	r3, r2, r3
 8003b96:	69ba      	ldr	r2, [r7, #24]
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	69ba      	ldr	r2, [r7, #24]
 8003ba0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	f000 80e0 	beq.w	8003d70 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bb0:	4b2f      	ldr	r3, [pc, #188]	@ (8003c70 <HAL_GPIO_Init+0x238>)
 8003bb2:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8003bb6:	4a2e      	ldr	r2, [pc, #184]	@ (8003c70 <HAL_GPIO_Init+0x238>)
 8003bb8:	f043 0302 	orr.w	r3, r3, #2
 8003bbc:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8003bc0:	4b2b      	ldr	r3, [pc, #172]	@ (8003c70 <HAL_GPIO_Init+0x238>)
 8003bc2:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8003bc6:	f003 0302 	and.w	r3, r3, #2
 8003bca:	60fb      	str	r3, [r7, #12]
 8003bcc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003bce:	4a29      	ldr	r2, [pc, #164]	@ (8003c74 <HAL_GPIO_Init+0x23c>)
 8003bd0:	69fb      	ldr	r3, [r7, #28]
 8003bd2:	089b      	lsrs	r3, r3, #2
 8003bd4:	3302      	adds	r3, #2
 8003bd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bda:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003bdc:	69fb      	ldr	r3, [r7, #28]
 8003bde:	f003 0303 	and.w	r3, r3, #3
 8003be2:	009b      	lsls	r3, r3, #2
 8003be4:	220f      	movs	r2, #15
 8003be6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bea:	43db      	mvns	r3, r3
 8003bec:	69ba      	ldr	r2, [r7, #24]
 8003bee:	4013      	ands	r3, r2
 8003bf0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	4a20      	ldr	r2, [pc, #128]	@ (8003c78 <HAL_GPIO_Init+0x240>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d052      	beq.n	8003ca0 <HAL_GPIO_Init+0x268>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	4a1f      	ldr	r2, [pc, #124]	@ (8003c7c <HAL_GPIO_Init+0x244>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d031      	beq.n	8003c66 <HAL_GPIO_Init+0x22e>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	4a1e      	ldr	r2, [pc, #120]	@ (8003c80 <HAL_GPIO_Init+0x248>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d02b      	beq.n	8003c62 <HAL_GPIO_Init+0x22a>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	4a1d      	ldr	r2, [pc, #116]	@ (8003c84 <HAL_GPIO_Init+0x24c>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d025      	beq.n	8003c5e <HAL_GPIO_Init+0x226>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	4a1c      	ldr	r2, [pc, #112]	@ (8003c88 <HAL_GPIO_Init+0x250>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d01f      	beq.n	8003c5a <HAL_GPIO_Init+0x222>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	4a1b      	ldr	r2, [pc, #108]	@ (8003c8c <HAL_GPIO_Init+0x254>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d019      	beq.n	8003c56 <HAL_GPIO_Init+0x21e>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	4a1a      	ldr	r2, [pc, #104]	@ (8003c90 <HAL_GPIO_Init+0x258>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d013      	beq.n	8003c52 <HAL_GPIO_Init+0x21a>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	4a19      	ldr	r2, [pc, #100]	@ (8003c94 <HAL_GPIO_Init+0x25c>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d00d      	beq.n	8003c4e <HAL_GPIO_Init+0x216>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	4a18      	ldr	r2, [pc, #96]	@ (8003c98 <HAL_GPIO_Init+0x260>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d007      	beq.n	8003c4a <HAL_GPIO_Init+0x212>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	4a17      	ldr	r2, [pc, #92]	@ (8003c9c <HAL_GPIO_Init+0x264>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d101      	bne.n	8003c46 <HAL_GPIO_Init+0x20e>
 8003c42:	2309      	movs	r3, #9
 8003c44:	e02d      	b.n	8003ca2 <HAL_GPIO_Init+0x26a>
 8003c46:	230a      	movs	r3, #10
 8003c48:	e02b      	b.n	8003ca2 <HAL_GPIO_Init+0x26a>
 8003c4a:	2308      	movs	r3, #8
 8003c4c:	e029      	b.n	8003ca2 <HAL_GPIO_Init+0x26a>
 8003c4e:	2307      	movs	r3, #7
 8003c50:	e027      	b.n	8003ca2 <HAL_GPIO_Init+0x26a>
 8003c52:	2306      	movs	r3, #6
 8003c54:	e025      	b.n	8003ca2 <HAL_GPIO_Init+0x26a>
 8003c56:	2305      	movs	r3, #5
 8003c58:	e023      	b.n	8003ca2 <HAL_GPIO_Init+0x26a>
 8003c5a:	2304      	movs	r3, #4
 8003c5c:	e021      	b.n	8003ca2 <HAL_GPIO_Init+0x26a>
 8003c5e:	2303      	movs	r3, #3
 8003c60:	e01f      	b.n	8003ca2 <HAL_GPIO_Init+0x26a>
 8003c62:	2302      	movs	r3, #2
 8003c64:	e01d      	b.n	8003ca2 <HAL_GPIO_Init+0x26a>
 8003c66:	2301      	movs	r3, #1
 8003c68:	e01b      	b.n	8003ca2 <HAL_GPIO_Init+0x26a>
 8003c6a:	bf00      	nop
 8003c6c:	58000080 	.word	0x58000080
 8003c70:	58024400 	.word	0x58024400
 8003c74:	58000400 	.word	0x58000400
 8003c78:	58020000 	.word	0x58020000
 8003c7c:	58020400 	.word	0x58020400
 8003c80:	58020800 	.word	0x58020800
 8003c84:	58020c00 	.word	0x58020c00
 8003c88:	58021000 	.word	0x58021000
 8003c8c:	58021400 	.word	0x58021400
 8003c90:	58021800 	.word	0x58021800
 8003c94:	58021c00 	.word	0x58021c00
 8003c98:	58022000 	.word	0x58022000
 8003c9c:	58022400 	.word	0x58022400
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	69fa      	ldr	r2, [r7, #28]
 8003ca4:	f002 0203 	and.w	r2, r2, #3
 8003ca8:	0092      	lsls	r2, r2, #2
 8003caa:	4093      	lsls	r3, r2
 8003cac:	69ba      	ldr	r2, [r7, #24]
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003cb2:	4938      	ldr	r1, [pc, #224]	@ (8003d94 <HAL_GPIO_Init+0x35c>)
 8003cb4:	69fb      	ldr	r3, [r7, #28]
 8003cb6:	089b      	lsrs	r3, r3, #2
 8003cb8:	3302      	adds	r3, #2
 8003cba:	69ba      	ldr	r2, [r7, #24]
 8003cbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003cc0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	43db      	mvns	r3, r3
 8003ccc:	69ba      	ldr	r2, [r7, #24]
 8003cce:	4013      	ands	r3, r2
 8003cd0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d003      	beq.n	8003ce6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003cde:	69ba      	ldr	r2, [r7, #24]
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003ce6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003cea:	69bb      	ldr	r3, [r7, #24]
 8003cec:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003cee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	43db      	mvns	r3, r3
 8003cfa:	69ba      	ldr	r2, [r7, #24]
 8003cfc:	4013      	ands	r3, r2
 8003cfe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d003      	beq.n	8003d14 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003d0c:	69ba      	ldr	r2, [r7, #24]
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	4313      	orrs	r3, r2
 8003d12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003d14:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003d18:	69bb      	ldr	r3, [r7, #24]
 8003d1a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	43db      	mvns	r3, r3
 8003d26:	69ba      	ldr	r2, [r7, #24]
 8003d28:	4013      	ands	r3, r2
 8003d2a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d003      	beq.n	8003d40 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003d38:	69ba      	ldr	r2, [r7, #24]
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	69ba      	ldr	r2, [r7, #24]
 8003d44:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003d4c:	693b      	ldr	r3, [r7, #16]
 8003d4e:	43db      	mvns	r3, r3
 8003d50:	69ba      	ldr	r2, [r7, #24]
 8003d52:	4013      	ands	r3, r2
 8003d54:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d003      	beq.n	8003d6a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8003d62:	69ba      	ldr	r2, [r7, #24]
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	4313      	orrs	r3, r2
 8003d68:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	69ba      	ldr	r2, [r7, #24]
 8003d6e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003d70:	69fb      	ldr	r3, [r7, #28]
 8003d72:	3301      	adds	r3, #1
 8003d74:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	69fb      	ldr	r3, [r7, #28]
 8003d7c:	fa22 f303 	lsr.w	r3, r2, r3
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	f47f ae63 	bne.w	8003a4c <HAL_GPIO_Init+0x14>
  }
}
 8003d86:	bf00      	nop
 8003d88:	bf00      	nop
 8003d8a:	3724      	adds	r7, #36	@ 0x24
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d92:	4770      	bx	lr
 8003d94:	58000400 	.word	0x58000400

08003d98 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b082      	sub	sp, #8
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	4603      	mov	r3, r0
 8003da0:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8003da2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003da6:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003daa:	88fb      	ldrh	r3, [r7, #6]
 8003dac:	4013      	ands	r3, r2
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d008      	beq.n	8003dc4 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003db2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003db6:	88fb      	ldrh	r3, [r7, #6]
 8003db8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003dbc:	88fb      	ldrh	r3, [r7, #6]
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f000 f804 	bl	8003dcc <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8003dc4:	bf00      	nop
 8003dc6:	3708      	adds	r7, #8
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}

08003dcc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b083      	sub	sp, #12
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003dd6:	bf00      	nop
 8003dd8:	370c      	adds	r7, #12
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de0:	4770      	bx	lr
	...

08003de4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b082      	sub	sp, #8
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d101      	bne.n	8003df6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	e08b      	b.n	8003f0e <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003dfc:	b2db      	uxtb	r3, r3
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d106      	bne.n	8003e10 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2200      	movs	r2, #0
 8003e06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	f7fc fc94 	bl	8000738 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2224      	movs	r2, #36	@ 0x24
 8003e14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	681a      	ldr	r2, [r3, #0]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f022 0201 	bic.w	r2, r2, #1
 8003e26:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	685a      	ldr	r2, [r3, #4]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003e34:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	689a      	ldr	r2, [r3, #8]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003e44:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	68db      	ldr	r3, [r3, #12]
 8003e4a:	2b01      	cmp	r3, #1
 8003e4c:	d107      	bne.n	8003e5e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	689a      	ldr	r2, [r3, #8]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003e5a:	609a      	str	r2, [r3, #8]
 8003e5c:	e006      	b.n	8003e6c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	689a      	ldr	r2, [r3, #8]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003e6a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	68db      	ldr	r3, [r3, #12]
 8003e70:	2b02      	cmp	r3, #2
 8003e72:	d108      	bne.n	8003e86 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	685a      	ldr	r2, [r3, #4]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003e82:	605a      	str	r2, [r3, #4]
 8003e84:	e007      	b.n	8003e96 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	685a      	ldr	r2, [r3, #4]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003e94:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	6859      	ldr	r1, [r3, #4]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	4b1d      	ldr	r3, [pc, #116]	@ (8003f18 <HAL_I2C_Init+0x134>)
 8003ea2:	430b      	orrs	r3, r1
 8003ea4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	68da      	ldr	r2, [r3, #12]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003eb4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	691a      	ldr	r2, [r3, #16]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	695b      	ldr	r3, [r3, #20]
 8003ebe:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	699b      	ldr	r3, [r3, #24]
 8003ec6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	430a      	orrs	r2, r1
 8003ece:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	69d9      	ldr	r1, [r3, #28]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6a1a      	ldr	r2, [r3, #32]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	430a      	orrs	r2, r1
 8003ede:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	681a      	ldr	r2, [r3, #0]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f042 0201 	orr.w	r2, r2, #1
 8003eee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2220      	movs	r2, #32
 8003efa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2200      	movs	r2, #0
 8003f02:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2200      	movs	r2, #0
 8003f08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003f0c:	2300      	movs	r3, #0
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3708      	adds	r7, #8
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}
 8003f16:	bf00      	nop
 8003f18:	02008000 	.word	0x02008000

08003f1c <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b08a      	sub	sp, #40	@ 0x28
 8003f20:	af02      	add	r7, sp, #8
 8003f22:	60f8      	str	r0, [r7, #12]
 8003f24:	607a      	str	r2, [r7, #4]
 8003f26:	461a      	mov	r2, r3
 8003f28:	460b      	mov	r3, r1
 8003f2a:	817b      	strh	r3, [r7, #10]
 8003f2c:	4613      	mov	r3, r2
 8003f2e:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;
  uint32_t sizetoxfer = 0U;
 8003f30:	2300      	movs	r3, #0
 8003f32:	61bb      	str	r3, [r7, #24]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f3a:	b2db      	uxtb	r3, r3
 8003f3c:	2b20      	cmp	r3, #32
 8003f3e:	f040 80ef 	bne.w	8004120 <HAL_I2C_Master_Transmit_DMA+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	699b      	ldr	r3, [r3, #24]
 8003f48:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003f4c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f50:	d101      	bne.n	8003f56 <HAL_I2C_Master_Transmit_DMA+0x3a>
    {
      return HAL_BUSY;
 8003f52:	2302      	movs	r3, #2
 8003f54:	e0e5      	b.n	8004122 <HAL_I2C_Master_Transmit_DMA+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	d101      	bne.n	8003f64 <HAL_I2C_Master_Transmit_DMA+0x48>
 8003f60:	2302      	movs	r3, #2
 8003f62:	e0de      	b.n	8004122 <HAL_I2C_Master_Transmit_DMA+0x206>
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2201      	movs	r2, #1
 8003f68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	2221      	movs	r2, #33	@ 0x21
 8003f70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2210      	movs	r2, #16
 8003f78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	687a      	ldr	r2, [r7, #4]
 8003f86:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	893a      	ldrh	r2, [r7, #8]
 8003f8c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	4a66      	ldr	r2, [pc, #408]	@ (800412c <HAL_I2C_Master_Transmit_DMA+0x210>)
 8003f92:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	4a66      	ldr	r2, [pc, #408]	@ (8004130 <HAL_I2C_Master_Transmit_DMA+0x214>)
 8003f98:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f9e:	b29b      	uxth	r3, r3
 8003fa0:	2bff      	cmp	r3, #255	@ 0xff
 8003fa2:	d906      	bls.n	8003fb2 <HAL_I2C_Master_Transmit_DMA+0x96>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	22ff      	movs	r2, #255	@ 0xff
 8003fa8:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8003faa:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003fae:	61fb      	str	r3, [r7, #28]
 8003fb0:	e007      	b.n	8003fc2 <HAL_I2C_Master_Transmit_DMA+0xa6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fb6:	b29a      	uxth	r2, r3
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003fbc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003fc0:	61fb      	str	r3, [r7, #28]
    }

    if (hi2c->XferSize > 0U)
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d01a      	beq.n	8004000 <HAL_I2C_Master_Transmit_DMA+0xe4>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fce:	781a      	ldrb	r2, [r3, #0]
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fda:	1c5a      	adds	r2, r3, #1
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	625a      	str	r2, [r3, #36]	@ 0x24

      sizetoxfer = hi2c->XferSize;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fe4:	61bb      	str	r3, [r7, #24]
      hi2c->XferCount--;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fea:	b29b      	uxth	r3, r3
 8003fec:	3b01      	subs	r3, #1
 8003fee:	b29a      	uxth	r2, r3
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ff8:	3b01      	subs	r3, #1
 8003ffa:	b29a      	uxth	r2, r3
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    if (hi2c->XferSize > 0U)
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004004:	2b00      	cmp	r3, #0
 8004006:	d074      	beq.n	80040f2 <HAL_I2C_Master_Transmit_DMA+0x1d6>
    {
      if (hi2c->hdmatx != NULL)
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800400c:	2b00      	cmp	r3, #0
 800400e:	d022      	beq.n	8004056 <HAL_I2C_Master_Transmit_DMA+0x13a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004014:	4a47      	ldr	r2, [pc, #284]	@ (8004134 <HAL_I2C_Master_Transmit_DMA+0x218>)
 8004016:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800401c:	4a46      	ldr	r2, [pc, #280]	@ (8004138 <HAL_I2C_Master_Transmit_DMA+0x21c>)
 800401e:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004024:	2200      	movs	r2, #0
 8004026:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmatx->XferAbortCallback = NULL;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800402c:	2200      	movs	r2, #0
 800402e:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream or channel depends on Instance */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004038:	4619      	mov	r1, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	3328      	adds	r3, #40	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8004040:	461a      	mov	r2, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8004046:	f7fd fcab 	bl	80019a0 <HAL_DMA_Start_IT>
 800404a:	4603      	mov	r3, r0
 800404c:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800404e:	7dfb      	ldrb	r3, [r7, #23]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d13a      	bne.n	80040ca <HAL_I2C_Master_Transmit_DMA+0x1ae>
 8004054:	e013      	b.n	800407e <HAL_I2C_Master_Transmit_DMA+0x162>
        hi2c->State     = HAL_I2C_STATE_READY;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	2220      	movs	r2, #32
 800405a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2200      	movs	r2, #0
 8004062:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800406a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2200      	movs	r2, #0
 8004076:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	e051      	b.n	8004122 <HAL_I2C_Master_Transmit_DMA+0x206>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U),
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004082:	b2db      	uxtb	r3, r3
 8004084:	3301      	adds	r3, #1
 8004086:	b2da      	uxtb	r2, r3
 8004088:	8979      	ldrh	r1, [r7, #10]
 800408a:	4b2c      	ldr	r3, [pc, #176]	@ (800413c <HAL_I2C_Master_Transmit_DMA+0x220>)
 800408c:	9300      	str	r3, [sp, #0]
 800408e:	69fb      	ldr	r3, [r7, #28]
 8004090:	68f8      	ldr	r0, [r7, #12]
 8004092:	f001 feb9 	bl	8005e08 <I2C_TransferConfig>
                           xfermode, I2C_GENERATE_START_WRITE);

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800409a:	b29a      	uxth	r2, r3
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040a0:	1ad3      	subs	r3, r2, r3
 80040a2:	b29a      	uxth	r2, r3
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2200      	movs	r2, #0
 80040ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80040b0:	2110      	movs	r1, #16
 80040b2:	68f8      	ldr	r0, [r7, #12]
 80040b4:	f001 feda 	bl	8005e6c <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	681a      	ldr	r2, [r3, #0]
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80040c6:	601a      	str	r2, [r3, #0]
 80040c8:	e028      	b.n	800411c <HAL_I2C_Master_Transmit_DMA+0x200>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	2220      	movs	r2, #32
 80040ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2200      	movs	r2, #0
 80040d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040de:	f043 0210 	orr.w	r2, r3, #16
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	2200      	movs	r2, #0
 80040ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	e017      	b.n	8004122 <HAL_I2C_Master_Transmit_DMA+0x206>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	4a12      	ldr	r2, [pc, #72]	@ (8004140 <HAL_I2C_Master_Transmit_DMA+0x224>)
 80040f6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)sizetoxfer, I2C_AUTOEND_MODE,
 80040f8:	69bb      	ldr	r3, [r7, #24]
 80040fa:	b2da      	uxtb	r2, r3
 80040fc:	8979      	ldrh	r1, [r7, #10]
 80040fe:	4b0f      	ldr	r3, [pc, #60]	@ (800413c <HAL_I2C_Master_Transmit_DMA+0x220>)
 8004100:	9300      	str	r3, [sp, #0]
 8004102:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004106:	68f8      	ldr	r0, [r7, #12]
 8004108:	f001 fe7e 	bl	8005e08 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2200      	movs	r2, #0
 8004110:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004114:	2101      	movs	r1, #1
 8004116:	68f8      	ldr	r0, [r7, #12]
 8004118:	f001 fea8 	bl	8005e6c <I2C_Enable_IRQ>
    }

    return HAL_OK;
 800411c:	2300      	movs	r3, #0
 800411e:	e000      	b.n	8004122 <HAL_I2C_Master_Transmit_DMA+0x206>
  }
  else
  {
    return HAL_BUSY;
 8004120:	2302      	movs	r3, #2
  }
}
 8004122:	4618      	mov	r0, r3
 8004124:	3720      	adds	r7, #32
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}
 800412a:	bf00      	nop
 800412c:	ffff0000 	.word	0xffff0000
 8004130:	0800475b 	.word	0x0800475b
 8004134:	08005ac3 	.word	0x08005ac3
 8004138:	08005b59 	.word	0x08005b59
 800413c:	80002000 	.word	0x80002000
 8004140:	0800431b 	.word	0x0800431b

08004144 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b084      	sub	sp, #16
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	699b      	ldr	r3, [r3, #24]
 8004152:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004160:	2b00      	cmp	r3, #0
 8004162:	d005      	beq.n	8004170 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004168:	68ba      	ldr	r2, [r7, #8]
 800416a:	68f9      	ldr	r1, [r7, #12]
 800416c:	6878      	ldr	r0, [r7, #4]
 800416e:	4798      	blx	r3
  }
}
 8004170:	bf00      	nop
 8004172:	3710      	adds	r7, #16
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}

08004178 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b086      	sub	sp, #24
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	699b      	ldr	r3, [r3, #24]
 8004186:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004196:	2b00      	cmp	r3, #0
 8004198:	d00f      	beq.n	80041ba <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d00a      	beq.n	80041ba <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041a8:	f043 0201 	orr.w	r2, r3, #1
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80041b8:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d00f      	beq.n	80041e4 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d00a      	beq.n	80041e4 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041d2:	f043 0208 	orr.w	r2, r3, #8
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80041e2:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d00f      	beq.n	800420e <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d00a      	beq.n	800420e <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041fc:	f043 0202 	orr.w	r2, r3, #2
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800420c:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004212:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	f003 030b 	and.w	r3, r3, #11
 800421a:	2b00      	cmp	r3, #0
 800421c:	d003      	beq.n	8004226 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 800421e:	68f9      	ldr	r1, [r7, #12]
 8004220:	6878      	ldr	r0, [r7, #4]
 8004222:	f001 fb13 	bl	800584c <I2C_ITError>
  }
}
 8004226:	bf00      	nop
 8004228:	3718      	adds	r7, #24
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}

0800422e <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800422e:	b480      	push	{r7}
 8004230:	b083      	sub	sp, #12
 8004232:	af00      	add	r7, sp, #0
 8004234:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004236:	bf00      	nop
 8004238:	370c      	adds	r7, #12
 800423a:	46bd      	mov	sp, r7
 800423c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004240:	4770      	bx	lr

08004242 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004242:	b480      	push	{r7}
 8004244:	b083      	sub	sp, #12
 8004246:	af00      	add	r7, sp, #0
 8004248:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800424a:	bf00      	nop
 800424c:	370c      	adds	r7, #12
 800424e:	46bd      	mov	sp, r7
 8004250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004254:	4770      	bx	lr

08004256 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004256:	b480      	push	{r7}
 8004258:	b083      	sub	sp, #12
 800425a:	af00      	add	r7, sp, #0
 800425c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800425e:	bf00      	nop
 8004260:	370c      	adds	r7, #12
 8004262:	46bd      	mov	sp, r7
 8004264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004268:	4770      	bx	lr

0800426a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800426a:	b480      	push	{r7}
 800426c:	b083      	sub	sp, #12
 800426e:	af00      	add	r7, sp, #0
 8004270:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004272:	bf00      	nop
 8004274:	370c      	adds	r7, #12
 8004276:	46bd      	mov	sp, r7
 8004278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427c:	4770      	bx	lr

0800427e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800427e:	b480      	push	{r7}
 8004280:	b083      	sub	sp, #12
 8004282:	af00      	add	r7, sp, #0
 8004284:	6078      	str	r0, [r7, #4]
 8004286:	460b      	mov	r3, r1
 8004288:	70fb      	strb	r3, [r7, #3]
 800428a:	4613      	mov	r3, r2
 800428c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800428e:	bf00      	nop
 8004290:	370c      	adds	r7, #12
 8004292:	46bd      	mov	sp, r7
 8004294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004298:	4770      	bx	lr

0800429a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800429a:	b480      	push	{r7}
 800429c:	b083      	sub	sp, #12
 800429e:	af00      	add	r7, sp, #0
 80042a0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80042a2:	bf00      	nop
 80042a4:	370c      	adds	r7, #12
 80042a6:	46bd      	mov	sp, r7
 80042a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ac:	4770      	bx	lr

080042ae <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80042ae:	b480      	push	{r7}
 80042b0:	b083      	sub	sp, #12
 80042b2:	af00      	add	r7, sp, #0
 80042b4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80042b6:	bf00      	nop
 80042b8:	370c      	adds	r7, #12
 80042ba:	46bd      	mov	sp, r7
 80042bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c0:	4770      	bx	lr

080042c2 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80042c2:	b480      	push	{r7}
 80042c4:	b083      	sub	sp, #12
 80042c6:	af00      	add	r7, sp, #0
 80042c8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80042ca:	bf00      	nop
 80042cc:	370c      	adds	r7, #12
 80042ce:	46bd      	mov	sp, r7
 80042d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d4:	4770      	bx	lr

080042d6 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80042d6:	b480      	push	{r7}
 80042d8:	b083      	sub	sp, #12
 80042da:	af00      	add	r7, sp, #0
 80042dc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80042de:	bf00      	nop
 80042e0:	370c      	adds	r7, #12
 80042e2:	46bd      	mov	sp, r7
 80042e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e8:	4770      	bx	lr

080042ea <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80042ea:	b480      	push	{r7}
 80042ec:	b083      	sub	sp, #12
 80042ee:	af00      	add	r7, sp, #0
 80042f0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80042f2:	bf00      	nop
 80042f4:	370c      	adds	r7, #12
 80042f6:	46bd      	mov	sp, r7
 80042f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fc:	4770      	bx	lr

080042fe <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 80042fe:	b480      	push	{r7}
 8004300:	b083      	sub	sp, #12
 8004302:	af00      	add	r7, sp, #0
 8004304:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800430c:	b2db      	uxtb	r3, r3
}
 800430e:	4618      	mov	r0, r3
 8004310:	370c      	adds	r7, #12
 8004312:	46bd      	mov	sp, r7
 8004314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004318:	4770      	bx	lr

0800431a <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800431a:	b580      	push	{r7, lr}
 800431c:	b088      	sub	sp, #32
 800431e:	af02      	add	r7, sp, #8
 8004320:	60f8      	str	r0, [r7, #12]
 8004322:	60b9      	str	r1, [r7, #8]
 8004324:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004330:	2b01      	cmp	r3, #1
 8004332:	d101      	bne.n	8004338 <I2C_Master_ISR_IT+0x1e>
 8004334:	2302      	movs	r3, #2
 8004336:	e113      	b.n	8004560 <I2C_Master_ISR_IT+0x246>
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2201      	movs	r2, #1
 800433c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	f003 0310 	and.w	r3, r3, #16
 8004346:	2b00      	cmp	r3, #0
 8004348:	d012      	beq.n	8004370 <I2C_Master_ISR_IT+0x56>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004350:	2b00      	cmp	r3, #0
 8004352:	d00d      	beq.n	8004370 <I2C_Master_ISR_IT+0x56>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	2210      	movs	r2, #16
 800435a:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004360:	f043 0204 	orr.w	r2, r3, #4
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004368:	68f8      	ldr	r0, [r7, #12]
 800436a:	f001 fb86 	bl	8005a7a <I2C_Flush_TXDR>
 800436e:	e0e4      	b.n	800453a <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	f003 0304 	and.w	r3, r3, #4
 8004376:	2b00      	cmp	r3, #0
 8004378:	d022      	beq.n	80043c0 <I2C_Master_ISR_IT+0xa6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004380:	2b00      	cmp	r3, #0
 8004382:	d01d      	beq.n	80043c0 <I2C_Master_ISR_IT+0xa6>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	f023 0304 	bic.w	r3, r3, #4
 800438a:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004396:	b2d2      	uxtb	r2, r2
 8004398:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800439e:	1c5a      	adds	r2, r3, #1
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043a8:	3b01      	subs	r3, #1
 80043aa:	b29a      	uxth	r2, r3
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043b4:	b29b      	uxth	r3, r3
 80043b6:	3b01      	subs	r3, #1
 80043b8:	b29a      	uxth	r2, r3
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80043be:	e0bc      	b.n	800453a <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d128      	bne.n	800441c <I2C_Master_ISR_IT+0x102>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80043ca:	697b      	ldr	r3, [r7, #20]
 80043cc:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d023      	beq.n	800441c <I2C_Master_ISR_IT+0x102>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	f003 0302 	and.w	r3, r3, #2
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d01e      	beq.n	800441c <I2C_Master_ISR_IT+0x102>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043e2:	b29b      	uxth	r3, r3
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	f000 80a8 	beq.w	800453a <I2C_Master_ISR_IT+0x220>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043ee:	781a      	ldrb	r2, [r3, #0]
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043fa:	1c5a      	adds	r2, r3, #1
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004404:	3b01      	subs	r3, #1
 8004406:	b29a      	uxth	r2, r3
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004410:	b29b      	uxth	r3, r3
 8004412:	3b01      	subs	r3, #1
 8004414:	b29a      	uxth	r2, r3
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->XferCount != 0U)
 800441a:	e08e      	b.n	800453a <I2C_Master_ISR_IT+0x220>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004422:	2b00      	cmp	r3, #0
 8004424:	d05c      	beq.n	80044e0 <I2C_Master_ISR_IT+0x1c6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800442c:	2b00      	cmp	r3, #0
 800442e:	d057      	beq.n	80044e0 <I2C_Master_ISR_IT+0x1c6>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004434:	b29b      	uxth	r3, r3
 8004436:	2b00      	cmp	r3, #0
 8004438:	d040      	beq.n	80044bc <I2C_Master_ISR_IT+0x1a2>
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800443e:	2b00      	cmp	r3, #0
 8004440:	d13c      	bne.n	80044bc <I2C_Master_ISR_IT+0x1a2>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	b29b      	uxth	r3, r3
 800444a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800444e:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004454:	b29b      	uxth	r3, r3
 8004456:	2bff      	cmp	r3, #255	@ 0xff
 8004458:	d90e      	bls.n	8004478 <I2C_Master_ISR_IT+0x15e>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	22ff      	movs	r2, #255	@ 0xff
 800445e:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004464:	b2da      	uxtb	r2, r3
 8004466:	8a79      	ldrh	r1, [r7, #18]
 8004468:	2300      	movs	r3, #0
 800446a:	9300      	str	r3, [sp, #0]
 800446c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004470:	68f8      	ldr	r0, [r7, #12]
 8004472:	f001 fcc9 	bl	8005e08 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004476:	e032      	b.n	80044de <I2C_Master_ISR_IT+0x1c4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800447c:	b29a      	uxth	r2, r3
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004486:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800448a:	d00b      	beq.n	80044a4 <I2C_Master_ISR_IT+0x18a>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004490:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8004496:	8a79      	ldrh	r1, [r7, #18]
 8004498:	2000      	movs	r0, #0
 800449a:	9000      	str	r0, [sp, #0]
 800449c:	68f8      	ldr	r0, [r7, #12]
 800449e:	f001 fcb3 	bl	8005e08 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80044a2:	e01c      	b.n	80044de <I2C_Master_ISR_IT+0x1c4>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044a8:	b2da      	uxtb	r2, r3
 80044aa:	8a79      	ldrh	r1, [r7, #18]
 80044ac:	2300      	movs	r3, #0
 80044ae:	9300      	str	r3, [sp, #0]
 80044b0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80044b4:	68f8      	ldr	r0, [r7, #12]
 80044b6:	f001 fca7 	bl	8005e08 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80044ba:	e010      	b.n	80044de <I2C_Master_ISR_IT+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044c6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80044ca:	d003      	beq.n	80044d4 <I2C_Master_ISR_IT+0x1ba>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80044cc:	68f8      	ldr	r0, [r7, #12]
 80044ce:	f000 fdb3 	bl	8005038 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80044d2:	e032      	b.n	800453a <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80044d4:	2140      	movs	r1, #64	@ 0x40
 80044d6:	68f8      	ldr	r0, [r7, #12]
 80044d8:	f001 f9b8 	bl	800584c <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80044dc:	e02d      	b.n	800453a <I2C_Master_ISR_IT+0x220>
 80044de:	e02c      	b.n	800453a <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d027      	beq.n	800453a <I2C_Master_ISR_IT+0x220>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d022      	beq.n	800453a <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044f8:	b29b      	uxth	r3, r3
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d119      	bne.n	8004532 <I2C_Master_ISR_IT+0x218>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004508:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800450c:	d015      	beq.n	800453a <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004512:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004516:	d108      	bne.n	800452a <I2C_Master_ISR_IT+0x210>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	685a      	ldr	r2, [r3, #4]
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004526:	605a      	str	r2, [r3, #4]
 8004528:	e007      	b.n	800453a <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800452a:	68f8      	ldr	r0, [r7, #12]
 800452c:	f000 fd84 	bl	8005038 <I2C_ITMasterSeqCplt>
 8004530:	e003      	b.n	800453a <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8004532:	2140      	movs	r1, #64	@ 0x40
 8004534:	68f8      	ldr	r0, [r7, #12]
 8004536:	f001 f989 	bl	800584c <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	f003 0320 	and.w	r3, r3, #32
 8004540:	2b00      	cmp	r3, #0
 8004542:	d008      	beq.n	8004556 <I2C_Master_ISR_IT+0x23c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800454a:	2b00      	cmp	r3, #0
 800454c:	d003      	beq.n	8004556 <I2C_Master_ISR_IT+0x23c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 800454e:	6979      	ldr	r1, [r7, #20]
 8004550:	68f8      	ldr	r0, [r7, #12]
 8004552:	f000 fe0b 	bl	800516c <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2200      	movs	r2, #0
 800455a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800455e:	2300      	movs	r3, #0
}
 8004560:	4618      	mov	r0, r3
 8004562:	3718      	adds	r7, #24
 8004564:	46bd      	mov	sp, r7
 8004566:	bd80      	pop	{r7, pc}

08004568 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b086      	sub	sp, #24
 800456c:	af00      	add	r7, sp, #0
 800456e:	60f8      	str	r0, [r7, #12]
 8004570:	60b9      	str	r1, [r7, #8]
 8004572:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004578:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004584:	2b01      	cmp	r3, #1
 8004586:	d101      	bne.n	800458c <I2C_Slave_ISR_IT+0x24>
 8004588:	2302      	movs	r3, #2
 800458a:	e0e2      	b.n	8004752 <I2C_Slave_ISR_IT+0x1ea>
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2201      	movs	r2, #1
 8004590:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	f003 0320 	and.w	r3, r3, #32
 800459a:	2b00      	cmp	r3, #0
 800459c:	d009      	beq.n	80045b2 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d004      	beq.n	80045b2 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80045a8:	6939      	ldr	r1, [r7, #16]
 80045aa:	68f8      	ldr	r0, [r7, #12]
 80045ac:	f000 fea6 	bl	80052fc <I2C_ITSlaveCplt>
 80045b0:	e0ca      	b.n	8004748 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	f003 0310 	and.w	r3, r3, #16
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d04b      	beq.n	8004654 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d046      	beq.n	8004654 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045ca:	b29b      	uxth	r3, r3
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d128      	bne.n	8004622 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80045d6:	b2db      	uxtb	r3, r3
 80045d8:	2b28      	cmp	r3, #40	@ 0x28
 80045da:	d108      	bne.n	80045ee <I2C_Slave_ISR_IT+0x86>
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80045e2:	d104      	bne.n	80045ee <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80045e4:	6939      	ldr	r1, [r7, #16]
 80045e6:	68f8      	ldr	r0, [r7, #12]
 80045e8:	f001 f8dc 	bl	80057a4 <I2C_ITListenCplt>
 80045ec:	e031      	b.n	8004652 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80045f4:	b2db      	uxtb	r3, r3
 80045f6:	2b29      	cmp	r3, #41	@ 0x29
 80045f8:	d10e      	bne.n	8004618 <I2C_Slave_ISR_IT+0xb0>
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004600:	d00a      	beq.n	8004618 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	2210      	movs	r2, #16
 8004608:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800460a:	68f8      	ldr	r0, [r7, #12]
 800460c:	f001 fa35 	bl	8005a7a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004610:	68f8      	ldr	r0, [r7, #12]
 8004612:	f000 fd4e 	bl	80050b2 <I2C_ITSlaveSeqCplt>
 8004616:	e01c      	b.n	8004652 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	2210      	movs	r2, #16
 800461e:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8004620:	e08f      	b.n	8004742 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	2210      	movs	r2, #16
 8004628:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800462e:	f043 0204 	orr.w	r2, r3, #4
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d003      	beq.n	8004644 <I2C_Slave_ISR_IT+0xdc>
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004642:	d17e      	bne.n	8004742 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004648:	4619      	mov	r1, r3
 800464a:	68f8      	ldr	r0, [r7, #12]
 800464c:	f001 f8fe 	bl	800584c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8004650:	e077      	b.n	8004742 <I2C_Slave_ISR_IT+0x1da>
 8004652:	e076      	b.n	8004742 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	f003 0304 	and.w	r3, r3, #4
 800465a:	2b00      	cmp	r3, #0
 800465c:	d02f      	beq.n	80046be <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004664:	2b00      	cmp	r3, #0
 8004666:	d02a      	beq.n	80046be <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800466c:	b29b      	uxth	r3, r3
 800466e:	2b00      	cmp	r3, #0
 8004670:	d018      	beq.n	80046a4 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800467c:	b2d2      	uxtb	r2, r2
 800467e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004684:	1c5a      	adds	r2, r3, #1
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800468e:	3b01      	subs	r3, #1
 8004690:	b29a      	uxth	r2, r3
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800469a:	b29b      	uxth	r3, r3
 800469c:	3b01      	subs	r3, #1
 800469e:	b29a      	uxth	r2, r3
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046a8:	b29b      	uxth	r3, r3
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d14b      	bne.n	8004746 <I2C_Slave_ISR_IT+0x1de>
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80046b4:	d047      	beq.n	8004746 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80046b6:	68f8      	ldr	r0, [r7, #12]
 80046b8:	f000 fcfb 	bl	80050b2 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80046bc:	e043      	b.n	8004746 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	f003 0308 	and.w	r3, r3, #8
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d009      	beq.n	80046dc <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d004      	beq.n	80046dc <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80046d2:	6939      	ldr	r1, [r7, #16]
 80046d4:	68f8      	ldr	r0, [r7, #12]
 80046d6:	f000 fc2b 	bl	8004f30 <I2C_ITAddrCplt>
 80046da:	e035      	b.n	8004748 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	f003 0302 	and.w	r3, r3, #2
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d030      	beq.n	8004748 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d02b      	beq.n	8004748 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046f4:	b29b      	uxth	r3, r3
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d018      	beq.n	800472c <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046fe:	781a      	ldrb	r2, [r3, #0]
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800470a:	1c5a      	adds	r2, r3, #1
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004714:	b29b      	uxth	r3, r3
 8004716:	3b01      	subs	r3, #1
 8004718:	b29a      	uxth	r2, r3
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004722:	3b01      	subs	r3, #1
 8004724:	b29a      	uxth	r2, r3
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	851a      	strh	r2, [r3, #40]	@ 0x28
 800472a:	e00d      	b.n	8004748 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004732:	d002      	beq.n	800473a <I2C_Slave_ISR_IT+0x1d2>
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d106      	bne.n	8004748 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800473a:	68f8      	ldr	r0, [r7, #12]
 800473c:	f000 fcb9 	bl	80050b2 <I2C_ITSlaveSeqCplt>
 8004740:	e002      	b.n	8004748 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8004742:	bf00      	nop
 8004744:	e000      	b.n	8004748 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 8004746:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	2200      	movs	r2, #0
 800474c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004750:	2300      	movs	r3, #0
}
 8004752:	4618      	mov	r0, r3
 8004754:	3718      	adds	r7, #24
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}

0800475a <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 800475a:	b580      	push	{r7, lr}
 800475c:	b088      	sub	sp, #32
 800475e:	af02      	add	r7, sp, #8
 8004760:	60f8      	str	r0, [r7, #12]
 8004762:	60b9      	str	r1, [r7, #8]
 8004764:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800476c:	2b01      	cmp	r3, #1
 800476e:	d101      	bne.n	8004774 <I2C_Master_ISR_DMA+0x1a>
 8004770:	2302      	movs	r3, #2
 8004772:	e0d9      	b.n	8004928 <I2C_Master_ISR_DMA+0x1ce>
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	2201      	movs	r2, #1
 8004778:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	f003 0310 	and.w	r3, r3, #16
 8004782:	2b00      	cmp	r3, #0
 8004784:	d016      	beq.n	80047b4 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800478c:	2b00      	cmp	r3, #0
 800478e:	d011      	beq.n	80047b4 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	2210      	movs	r2, #16
 8004796:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800479c:	f043 0204 	orr.w	r2, r3, #4
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80047a4:	2120      	movs	r1, #32
 80047a6:	68f8      	ldr	r0, [r7, #12]
 80047a8:	f001 fb60 	bl	8005e6c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80047ac:	68f8      	ldr	r0, [r7, #12]
 80047ae:	f001 f964 	bl	8005a7a <I2C_Flush_TXDR>
 80047b2:	e0b4      	b.n	800491e <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d071      	beq.n	80048a2 <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d06c      	beq.n	80048a2 <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	681a      	ldr	r2, [r3, #0]
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80047d6:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047dc:	b29b      	uxth	r3, r3
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d04e      	beq.n	8004880 <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	b29b      	uxth	r3, r3
 80047ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80047ee:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047f4:	b29b      	uxth	r3, r3
 80047f6:	2bff      	cmp	r3, #255	@ 0xff
 80047f8:	d906      	bls.n	8004808 <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	22ff      	movs	r2, #255	@ 0xff
 80047fe:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 8004800:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004804:	617b      	str	r3, [r7, #20]
 8004806:	e010      	b.n	800482a <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800480c:	b29a      	uxth	r2, r3
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004816:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800481a:	d003      	beq.n	8004824 <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004820:	617b      	str	r3, [r7, #20]
 8004822:	e002      	b.n	800482a <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8004824:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004828:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800482e:	b2da      	uxtb	r2, r3
 8004830:	8a79      	ldrh	r1, [r7, #18]
 8004832:	2300      	movs	r3, #0
 8004834:	9300      	str	r3, [sp, #0]
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	68f8      	ldr	r0, [r7, #12]
 800483a:	f001 fae5 	bl	8005e08 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004842:	b29a      	uxth	r2, r3
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004848:	1ad3      	subs	r3, r2, r3
 800484a:	b29a      	uxth	r2, r3
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004856:	b2db      	uxtb	r3, r3
 8004858:	2b22      	cmp	r3, #34	@ 0x22
 800485a:	d108      	bne.n	800486e <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	681a      	ldr	r2, [r3, #0]
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800486a:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800486c:	e057      	b.n	800491e <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	681a      	ldr	r2, [r3, #0]
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800487c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800487e:	e04e      	b.n	800491e <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800488a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800488e:	d003      	beq.n	8004898 <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8004890:	68f8      	ldr	r0, [r7, #12]
 8004892:	f000 fbd1 	bl	8005038 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8004896:	e042      	b.n	800491e <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8004898:	2140      	movs	r1, #64	@ 0x40
 800489a:	68f8      	ldr	r0, [r7, #12]
 800489c:	f000 ffd6 	bl	800584c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80048a0:	e03d      	b.n	800491e <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d028      	beq.n	80048fe <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d023      	beq.n	80048fe <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048ba:	b29b      	uxth	r3, r3
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d119      	bne.n	80048f4 <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048ca:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80048ce:	d025      	beq.n	800491c <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048d4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80048d8:	d108      	bne.n	80048ec <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	685a      	ldr	r2, [r3, #4]
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80048e8:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 80048ea:	e017      	b.n	800491c <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80048ec:	68f8      	ldr	r0, [r7, #12]
 80048ee:	f000 fba3 	bl	8005038 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 80048f2:	e013      	b.n	800491c <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80048f4:	2140      	movs	r1, #64	@ 0x40
 80048f6:	68f8      	ldr	r0, [r7, #12]
 80048f8:	f000 ffa8 	bl	800584c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80048fc:	e00e      	b.n	800491c <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	f003 0320 	and.w	r3, r3, #32
 8004904:	2b00      	cmp	r3, #0
 8004906:	d00a      	beq.n	800491e <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800490e:	2b00      	cmp	r3, #0
 8004910:	d005      	beq.n	800491e <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8004912:	68b9      	ldr	r1, [r7, #8]
 8004914:	68f8      	ldr	r0, [r7, #12]
 8004916:	f000 fc29 	bl	800516c <I2C_ITMasterCplt>
 800491a:	e000      	b.n	800491e <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 800491c:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	2200      	movs	r2, #0
 8004922:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004926:	2300      	movs	r3, #0
}
 8004928:	4618      	mov	r0, r3
 800492a:	3718      	adds	r7, #24
 800492c:	46bd      	mov	sp, r7
 800492e:	bd80      	pop	{r7, pc}

08004930 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b088      	sub	sp, #32
 8004934:	af02      	add	r7, sp, #8
 8004936:	60f8      	str	r0, [r7, #12]
 8004938:	60b9      	str	r1, [r7, #8]
 800493a:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 800493c:	4b8d      	ldr	r3, [pc, #564]	@ (8004b74 <I2C_Mem_ISR_DMA+0x244>)
 800493e:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004946:	2b01      	cmp	r3, #1
 8004948:	d101      	bne.n	800494e <I2C_Mem_ISR_DMA+0x1e>
 800494a:	2302      	movs	r3, #2
 800494c:	e10e      	b.n	8004b6c <I2C_Mem_ISR_DMA+0x23c>
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	2201      	movs	r2, #1
 8004952:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	f003 0310 	and.w	r3, r3, #16
 800495c:	2b00      	cmp	r3, #0
 800495e:	d016      	beq.n	800498e <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004966:	2b00      	cmp	r3, #0
 8004968:	d011      	beq.n	800498e <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	2210      	movs	r2, #16
 8004970:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004976:	f043 0204 	orr.w	r2, r3, #4
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800497e:	2120      	movs	r1, #32
 8004980:	68f8      	ldr	r0, [r7, #12]
 8004982:	f001 fa73 	bl	8005e6c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004986:	68f8      	ldr	r0, [r7, #12]
 8004988:	f001 f877 	bl	8005a7a <I2C_Flush_TXDR>
 800498c:	e0e9      	b.n	8004b62 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	f003 0302 	and.w	r3, r3, #2
 8004994:	2b00      	cmp	r3, #0
 8004996:	d00e      	beq.n	80049b6 <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d009      	beq.n	80049b6 <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	68fa      	ldr	r2, [r7, #12]
 80049a8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80049aa:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	f04f 32ff 	mov.w	r2, #4294967295
 80049b2:	651a      	str	r2, [r3, #80]	@ 0x50
 80049b4:	e0d5      	b.n	8004b62 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d05f      	beq.n	8004a80 <I2C_Mem_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d05a      	beq.n	8004a80 <I2C_Mem_ISR_DMA+0x150>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80049ca:	2101      	movs	r1, #1
 80049cc:	68f8      	ldr	r0, [r7, #12]
 80049ce:	f001 fad1 	bl	8005f74 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80049d2:	2110      	movs	r1, #16
 80049d4:	68f8      	ldr	r0, [r7, #12]
 80049d6:	f001 fa49 	bl	8005e6c <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049de:	b29b      	uxth	r3, r3
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d048      	beq.n	8004a76 <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049e8:	b29b      	uxth	r3, r3
 80049ea:	2bff      	cmp	r3, #255	@ 0xff
 80049ec:	d910      	bls.n	8004a10 <I2C_Mem_ISR_DMA+0xe0>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	22ff      	movs	r2, #255	@ 0xff
 80049f2:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049f8:	b299      	uxth	r1, r3
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049fe:	b2da      	uxtb	r2, r3
 8004a00:	2300      	movs	r3, #0
 8004a02:	9300      	str	r3, [sp, #0]
 8004a04:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004a08:	68f8      	ldr	r0, [r7, #12]
 8004a0a:	f001 f9fd 	bl	8005e08 <I2C_TransferConfig>
 8004a0e:	e011      	b.n	8004a34 <I2C_Mem_ISR_DMA+0x104>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a14:	b29a      	uxth	r2, r3
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a1e:	b299      	uxth	r1, r3
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a24:	b2da      	uxtb	r2, r3
 8004a26:	2300      	movs	r3, #0
 8004a28:	9300      	str	r3, [sp, #0]
 8004a2a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004a2e:	68f8      	ldr	r0, [r7, #12]
 8004a30:	f001 f9ea 	bl	8005e08 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a38:	b29a      	uxth	r2, r3
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a3e:	1ad3      	subs	r3, r2, r3
 8004a40:	b29a      	uxth	r2, r3
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a4c:	b2db      	uxtb	r3, r3
 8004a4e:	2b22      	cmp	r3, #34	@ 0x22
 8004a50:	d108      	bne.n	8004a64 <I2C_Mem_ISR_DMA+0x134>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	681a      	ldr	r2, [r3, #0]
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004a60:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8004a62:	e07e      	b.n	8004b62 <I2C_Mem_ISR_DMA+0x232>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	681a      	ldr	r2, [r3, #0]
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004a72:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8004a74:	e075      	b.n	8004b62 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8004a76:	2140      	movs	r1, #64	@ 0x40
 8004a78:	68f8      	ldr	r0, [r7, #12]
 8004a7a:	f000 fee7 	bl	800584c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8004a7e:	e070      	b.n	8004b62 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d05d      	beq.n	8004b46 <I2C_Mem_ISR_DMA+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d058      	beq.n	8004b46 <I2C_Mem_ISR_DMA+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004a94:	2101      	movs	r1, #1
 8004a96:	68f8      	ldr	r0, [r7, #12]
 8004a98:	f001 fa6c 	bl	8005f74 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8004a9c:	2110      	movs	r1, #16
 8004a9e:	68f8      	ldr	r0, [r7, #12]
 8004aa0:	f001 f9e4 	bl	8005e6c <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004aaa:	b2db      	uxtb	r3, r3
 8004aac:	2b22      	cmp	r3, #34	@ 0x22
 8004aae:	d101      	bne.n	8004ab4 <I2C_Mem_ISR_DMA+0x184>
    {
      direction = I2C_GENERATE_START_READ;
 8004ab0:	4b31      	ldr	r3, [pc, #196]	@ (8004b78 <I2C_Mem_ISR_DMA+0x248>)
 8004ab2:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ab8:	b29b      	uxth	r3, r3
 8004aba:	2bff      	cmp	r3, #255	@ 0xff
 8004abc:	d910      	bls.n	8004ae0 <I2C_Mem_ISR_DMA+0x1b0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	22ff      	movs	r2, #255	@ 0xff
 8004ac2:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ac8:	b299      	uxth	r1, r3
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ace:	b2da      	uxtb	r2, r3
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	9300      	str	r3, [sp, #0]
 8004ad4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004ad8:	68f8      	ldr	r0, [r7, #12]
 8004ada:	f001 f995 	bl	8005e08 <I2C_TransferConfig>
 8004ade:	e011      	b.n	8004b04 <I2C_Mem_ISR_DMA+0x1d4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ae4:	b29a      	uxth	r2, r3
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004aee:	b299      	uxth	r1, r3
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004af4:	b2da      	uxtb	r2, r3
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	9300      	str	r3, [sp, #0]
 8004afa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004afe:	68f8      	ldr	r0, [r7, #12]
 8004b00:	f001 f982 	bl	8005e08 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b08:	b29a      	uxth	r2, r3
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b0e:	1ad3      	subs	r3, r2, r3
 8004b10:	b29a      	uxth	r2, r3
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b1c:	b2db      	uxtb	r3, r3
 8004b1e:	2b22      	cmp	r3, #34	@ 0x22
 8004b20:	d108      	bne.n	8004b34 <I2C_Mem_ISR_DMA+0x204>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	681a      	ldr	r2, [r3, #0]
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004b30:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004b32:	e016      	b.n	8004b62 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	681a      	ldr	r2, [r3, #0]
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004b42:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004b44:	e00d      	b.n	8004b62 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	f003 0320 	and.w	r3, r3, #32
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d008      	beq.n	8004b62 <I2C_Mem_ISR_DMA+0x232>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d003      	beq.n	8004b62 <I2C_Mem_ISR_DMA+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8004b5a:	68b9      	ldr	r1, [r7, #8]
 8004b5c:	68f8      	ldr	r0, [r7, #12]
 8004b5e:	f000 fb05 	bl	800516c <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	2200      	movs	r2, #0
 8004b66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004b6a:	2300      	movs	r3, #0
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	3718      	adds	r7, #24
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bd80      	pop	{r7, pc}
 8004b74:	80002000 	.word	0x80002000
 8004b78:	80002400 	.word	0x80002400

08004b7c <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b088      	sub	sp, #32
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	60f8      	str	r0, [r7, #12]
 8004b84:	60b9      	str	r1, [r7, #8]
 8004b86:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b8c:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8004b8e:	2300      	movs	r3, #0
 8004b90:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	d101      	bne.n	8004ba0 <I2C_Slave_ISR_DMA+0x24>
 8004b9c:	2302      	movs	r3, #2
 8004b9e:	e1c2      	b.n	8004f26 <I2C_Slave_ISR_DMA+0x3aa>
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	f003 0320 	and.w	r3, r3, #32
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d009      	beq.n	8004bc6 <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d004      	beq.n	8004bc6 <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8004bbc:	68b9      	ldr	r1, [r7, #8]
 8004bbe:	68f8      	ldr	r0, [r7, #12]
 8004bc0:	f000 fb9c 	bl	80052fc <I2C_ITSlaveCplt>
 8004bc4:	e1aa      	b.n	8004f1c <I2C_Slave_ISR_DMA+0x3a0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	f003 0310 	and.w	r3, r3, #16
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	f000 8197 	beq.w	8004f00 <I2C_Slave_ISR_DMA+0x384>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	f000 8191 	beq.w	8004f00 <I2C_Slave_ISR_DMA+0x384>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d105      	bne.n	8004bf4 <I2C_Slave_ISR_DMA+0x78>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	f000 817f 	beq.w	8004ef2 <I2C_Slave_ISR_DMA+0x376>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d07b      	beq.n	8004cf4 <I2C_Slave_ISR_DMA+0x178>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d076      	beq.n	8004cf4 <I2C_Slave_ISR_DMA+0x178>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a74      	ldr	r2, [pc, #464]	@ (8004de0 <I2C_Slave_ISR_DMA+0x264>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d059      	beq.n	8004cc6 <I2C_Slave_ISR_DMA+0x14a>
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a72      	ldr	r2, [pc, #456]	@ (8004de4 <I2C_Slave_ISR_DMA+0x268>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d053      	beq.n	8004cc6 <I2C_Slave_ISR_DMA+0x14a>
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a70      	ldr	r2, [pc, #448]	@ (8004de8 <I2C_Slave_ISR_DMA+0x26c>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d04d      	beq.n	8004cc6 <I2C_Slave_ISR_DMA+0x14a>
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a6e      	ldr	r2, [pc, #440]	@ (8004dec <I2C_Slave_ISR_DMA+0x270>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d047      	beq.n	8004cc6 <I2C_Slave_ISR_DMA+0x14a>
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a6c      	ldr	r2, [pc, #432]	@ (8004df0 <I2C_Slave_ISR_DMA+0x274>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d041      	beq.n	8004cc6 <I2C_Slave_ISR_DMA+0x14a>
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a6a      	ldr	r2, [pc, #424]	@ (8004df4 <I2C_Slave_ISR_DMA+0x278>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d03b      	beq.n	8004cc6 <I2C_Slave_ISR_DMA+0x14a>
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a68      	ldr	r2, [pc, #416]	@ (8004df8 <I2C_Slave_ISR_DMA+0x27c>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d035      	beq.n	8004cc6 <I2C_Slave_ISR_DMA+0x14a>
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a66      	ldr	r2, [pc, #408]	@ (8004dfc <I2C_Slave_ISR_DMA+0x280>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d02f      	beq.n	8004cc6 <I2C_Slave_ISR_DMA+0x14a>
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a64      	ldr	r2, [pc, #400]	@ (8004e00 <I2C_Slave_ISR_DMA+0x284>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d029      	beq.n	8004cc6 <I2C_Slave_ISR_DMA+0x14a>
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a62      	ldr	r2, [pc, #392]	@ (8004e04 <I2C_Slave_ISR_DMA+0x288>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d023      	beq.n	8004cc6 <I2C_Slave_ISR_DMA+0x14a>
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a60      	ldr	r2, [pc, #384]	@ (8004e08 <I2C_Slave_ISR_DMA+0x28c>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d01d      	beq.n	8004cc6 <I2C_Slave_ISR_DMA+0x14a>
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a5e      	ldr	r2, [pc, #376]	@ (8004e0c <I2C_Slave_ISR_DMA+0x290>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d017      	beq.n	8004cc6 <I2C_Slave_ISR_DMA+0x14a>
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a5c      	ldr	r2, [pc, #368]	@ (8004e10 <I2C_Slave_ISR_DMA+0x294>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d011      	beq.n	8004cc6 <I2C_Slave_ISR_DMA+0x14a>
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a5a      	ldr	r2, [pc, #360]	@ (8004e14 <I2C_Slave_ISR_DMA+0x298>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d00b      	beq.n	8004cc6 <I2C_Slave_ISR_DMA+0x14a>
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a58      	ldr	r2, [pc, #352]	@ (8004e18 <I2C_Slave_ISR_DMA+0x29c>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d005      	beq.n	8004cc6 <I2C_Slave_ISR_DMA+0x14a>
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a56      	ldr	r2, [pc, #344]	@ (8004e1c <I2C_Slave_ISR_DMA+0x2a0>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d109      	bne.n	8004cda <I2C_Slave_ISR_DMA+0x15e>
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	bf0c      	ite	eq
 8004cd2:	2301      	moveq	r3, #1
 8004cd4:	2300      	movne	r3, #0
 8004cd6:	b2db      	uxtb	r3, r3
 8004cd8:	e008      	b.n	8004cec <I2C_Slave_ISR_DMA+0x170>
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	bf0c      	ite	eq
 8004ce6:	2301      	moveq	r3, #1
 8004ce8:	2300      	movne	r3, #0
 8004cea:	b2db      	uxtb	r3, r3
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d001      	beq.n	8004cf4 <I2C_Slave_ISR_DMA+0x178>
          {
            treatdmanack = 1U;
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	f000 809e 	beq.w	8004e3a <I2C_Slave_ISR_DMA+0x2be>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	f000 8098 	beq.w	8004e3a <I2C_Slave_ISR_DMA+0x2be>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a33      	ldr	r2, [pc, #204]	@ (8004de0 <I2C_Slave_ISR_DMA+0x264>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d059      	beq.n	8004dca <I2C_Slave_ISR_DMA+0x24e>
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a31      	ldr	r2, [pc, #196]	@ (8004de4 <I2C_Slave_ISR_DMA+0x268>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d053      	beq.n	8004dca <I2C_Slave_ISR_DMA+0x24e>
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a2f      	ldr	r2, [pc, #188]	@ (8004de8 <I2C_Slave_ISR_DMA+0x26c>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d04d      	beq.n	8004dca <I2C_Slave_ISR_DMA+0x24e>
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a2d      	ldr	r2, [pc, #180]	@ (8004dec <I2C_Slave_ISR_DMA+0x270>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d047      	beq.n	8004dca <I2C_Slave_ISR_DMA+0x24e>
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a2b      	ldr	r2, [pc, #172]	@ (8004df0 <I2C_Slave_ISR_DMA+0x274>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d041      	beq.n	8004dca <I2C_Slave_ISR_DMA+0x24e>
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a29      	ldr	r2, [pc, #164]	@ (8004df4 <I2C_Slave_ISR_DMA+0x278>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d03b      	beq.n	8004dca <I2C_Slave_ISR_DMA+0x24e>
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a27      	ldr	r2, [pc, #156]	@ (8004df8 <I2C_Slave_ISR_DMA+0x27c>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d035      	beq.n	8004dca <I2C_Slave_ISR_DMA+0x24e>
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a25      	ldr	r2, [pc, #148]	@ (8004dfc <I2C_Slave_ISR_DMA+0x280>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d02f      	beq.n	8004dca <I2C_Slave_ISR_DMA+0x24e>
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a23      	ldr	r2, [pc, #140]	@ (8004e00 <I2C_Slave_ISR_DMA+0x284>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d029      	beq.n	8004dca <I2C_Slave_ISR_DMA+0x24e>
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a21      	ldr	r2, [pc, #132]	@ (8004e04 <I2C_Slave_ISR_DMA+0x288>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d023      	beq.n	8004dca <I2C_Slave_ISR_DMA+0x24e>
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a1f      	ldr	r2, [pc, #124]	@ (8004e08 <I2C_Slave_ISR_DMA+0x28c>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d01d      	beq.n	8004dca <I2C_Slave_ISR_DMA+0x24e>
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a1d      	ldr	r2, [pc, #116]	@ (8004e0c <I2C_Slave_ISR_DMA+0x290>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d017      	beq.n	8004dca <I2C_Slave_ISR_DMA+0x24e>
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a1b      	ldr	r2, [pc, #108]	@ (8004e10 <I2C_Slave_ISR_DMA+0x294>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d011      	beq.n	8004dca <I2C_Slave_ISR_DMA+0x24e>
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a19      	ldr	r2, [pc, #100]	@ (8004e14 <I2C_Slave_ISR_DMA+0x298>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d00b      	beq.n	8004dca <I2C_Slave_ISR_DMA+0x24e>
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a17      	ldr	r2, [pc, #92]	@ (8004e18 <I2C_Slave_ISR_DMA+0x29c>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d005      	beq.n	8004dca <I2C_Slave_ISR_DMA+0x24e>
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a15      	ldr	r2, [pc, #84]	@ (8004e1c <I2C_Slave_ISR_DMA+0x2a0>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d12a      	bne.n	8004e20 <I2C_Slave_ISR_DMA+0x2a4>
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	685b      	ldr	r3, [r3, #4]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	bf0c      	ite	eq
 8004dd6:	2301      	moveq	r3, #1
 8004dd8:	2300      	movne	r3, #0
 8004dda:	b2db      	uxtb	r3, r3
 8004ddc:	e029      	b.n	8004e32 <I2C_Slave_ISR_DMA+0x2b6>
 8004dde:	bf00      	nop
 8004de0:	40020010 	.word	0x40020010
 8004de4:	40020028 	.word	0x40020028
 8004de8:	40020040 	.word	0x40020040
 8004dec:	40020058 	.word	0x40020058
 8004df0:	40020070 	.word	0x40020070
 8004df4:	40020088 	.word	0x40020088
 8004df8:	400200a0 	.word	0x400200a0
 8004dfc:	400200b8 	.word	0x400200b8
 8004e00:	40020410 	.word	0x40020410
 8004e04:	40020428 	.word	0x40020428
 8004e08:	40020440 	.word	0x40020440
 8004e0c:	40020458 	.word	0x40020458
 8004e10:	40020470 	.word	0x40020470
 8004e14:	40020488 	.word	0x40020488
 8004e18:	400204a0 	.word	0x400204a0
 8004e1c:	400204b8 	.word	0x400204b8
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	bf0c      	ite	eq
 8004e2c:	2301      	moveq	r3, #1
 8004e2e:	2300      	movne	r3, #0
 8004e30:	b2db      	uxtb	r3, r3
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d001      	beq.n	8004e3a <I2C_Slave_ISR_DMA+0x2be>
          {
            treatdmanack = 1U;
 8004e36:	2301      	movs	r3, #1
 8004e38:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8004e3a:	69fb      	ldr	r3, [r7, #28]
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	d128      	bne.n	8004e92 <I2C_Slave_ISR_DMA+0x316>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e46:	b2db      	uxtb	r3, r3
 8004e48:	2b28      	cmp	r3, #40	@ 0x28
 8004e4a:	d108      	bne.n	8004e5e <I2C_Slave_ISR_DMA+0x2e2>
 8004e4c:	69bb      	ldr	r3, [r7, #24]
 8004e4e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004e52:	d104      	bne.n	8004e5e <I2C_Slave_ISR_DMA+0x2e2>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8004e54:	68b9      	ldr	r1, [r7, #8]
 8004e56:	68f8      	ldr	r0, [r7, #12]
 8004e58:	f000 fca4 	bl	80057a4 <I2C_ITListenCplt>
 8004e5c:	e048      	b.n	8004ef0 <I2C_Slave_ISR_DMA+0x374>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e64:	b2db      	uxtb	r3, r3
 8004e66:	2b29      	cmp	r3, #41	@ 0x29
 8004e68:	d10e      	bne.n	8004e88 <I2C_Slave_ISR_DMA+0x30c>
 8004e6a:	69bb      	ldr	r3, [r7, #24]
 8004e6c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004e70:	d00a      	beq.n	8004e88 <I2C_Slave_ISR_DMA+0x30c>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	2210      	movs	r2, #16
 8004e78:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8004e7a:	68f8      	ldr	r0, [r7, #12]
 8004e7c:	f000 fdfd 	bl	8005a7a <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8004e80:	68f8      	ldr	r0, [r7, #12]
 8004e82:	f000 f916 	bl	80050b2 <I2C_ITSlaveSeqCplt>
 8004e86:	e033      	b.n	8004ef0 <I2C_Slave_ISR_DMA+0x374>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	2210      	movs	r2, #16
 8004e8e:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8004e90:	e034      	b.n	8004efc <I2C_Slave_ISR_DMA+0x380>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	2210      	movs	r2, #16
 8004e98:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e9e:	f043 0204 	orr.w	r2, r3, #4
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004eac:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004eae:	69bb      	ldr	r3, [r7, #24]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d003      	beq.n	8004ebc <I2C_Slave_ISR_DMA+0x340>
 8004eb4:	69bb      	ldr	r3, [r7, #24]
 8004eb6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004eba:	d11f      	bne.n	8004efc <I2C_Slave_ISR_DMA+0x380>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004ebc:	7dfb      	ldrb	r3, [r7, #23]
 8004ebe:	2b21      	cmp	r3, #33	@ 0x21
 8004ec0:	d002      	beq.n	8004ec8 <I2C_Slave_ISR_DMA+0x34c>
 8004ec2:	7dfb      	ldrb	r3, [r7, #23]
 8004ec4:	2b29      	cmp	r3, #41	@ 0x29
 8004ec6:	d103      	bne.n	8004ed0 <I2C_Slave_ISR_DMA+0x354>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	2221      	movs	r2, #33	@ 0x21
 8004ecc:	631a      	str	r2, [r3, #48]	@ 0x30
 8004ece:	e008      	b.n	8004ee2 <I2C_Slave_ISR_DMA+0x366>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004ed0:	7dfb      	ldrb	r3, [r7, #23]
 8004ed2:	2b22      	cmp	r3, #34	@ 0x22
 8004ed4:	d002      	beq.n	8004edc <I2C_Slave_ISR_DMA+0x360>
 8004ed6:	7dfb      	ldrb	r3, [r7, #23]
 8004ed8:	2b2a      	cmp	r3, #42	@ 0x2a
 8004eda:	d102      	bne.n	8004ee2 <I2C_Slave_ISR_DMA+0x366>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	2222      	movs	r2, #34	@ 0x22
 8004ee0:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ee6:	4619      	mov	r1, r3
 8004ee8:	68f8      	ldr	r0, [r7, #12]
 8004eea:	f000 fcaf 	bl	800584c <I2C_ITError>
      if (treatdmanack == 1U)
 8004eee:	e005      	b.n	8004efc <I2C_Slave_ISR_DMA+0x380>
 8004ef0:	e004      	b.n	8004efc <I2C_Slave_ISR_DMA+0x380>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	2210      	movs	r2, #16
 8004ef8:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004efa:	e00f      	b.n	8004f1c <I2C_Slave_ISR_DMA+0x3a0>
      if (treatdmanack == 1U)
 8004efc:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004efe:	e00d      	b.n	8004f1c <I2C_Slave_ISR_DMA+0x3a0>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	f003 0308 	and.w	r3, r3, #8
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d008      	beq.n	8004f1c <I2C_Slave_ISR_DMA+0x3a0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d003      	beq.n	8004f1c <I2C_Slave_ISR_DMA+0x3a0>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8004f14:	68b9      	ldr	r1, [r7, #8]
 8004f16:	68f8      	ldr	r0, [r7, #12]
 8004f18:	f000 f80a 	bl	8004f30 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004f24:	2300      	movs	r3, #0
}
 8004f26:	4618      	mov	r0, r3
 8004f28:	3720      	adds	r7, #32
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	bd80      	pop	{r7, pc}
 8004f2e:	bf00      	nop

08004f30 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b084      	sub	sp, #16
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
 8004f38:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f40:	b2db      	uxtb	r3, r3
 8004f42:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004f46:	2b28      	cmp	r3, #40	@ 0x28
 8004f48:	d16a      	bne.n	8005020 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	699b      	ldr	r3, [r3, #24]
 8004f50:	0c1b      	lsrs	r3, r3, #16
 8004f52:	b2db      	uxtb	r3, r3
 8004f54:	f003 0301 	and.w	r3, r3, #1
 8004f58:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	699b      	ldr	r3, [r3, #24]
 8004f60:	0c1b      	lsrs	r3, r3, #16
 8004f62:	b29b      	uxth	r3, r3
 8004f64:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8004f68:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	689b      	ldr	r3, [r3, #8]
 8004f70:	b29b      	uxth	r3, r3
 8004f72:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004f76:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	68db      	ldr	r3, [r3, #12]
 8004f7e:	b29b      	uxth	r3, r3
 8004f80:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8004f84:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	68db      	ldr	r3, [r3, #12]
 8004f8a:	2b02      	cmp	r3, #2
 8004f8c:	d138      	bne.n	8005000 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8004f8e:	897b      	ldrh	r3, [r7, #10]
 8004f90:	09db      	lsrs	r3, r3, #7
 8004f92:	b29a      	uxth	r2, r3
 8004f94:	89bb      	ldrh	r3, [r7, #12]
 8004f96:	4053      	eors	r3, r2
 8004f98:	b29b      	uxth	r3, r3
 8004f9a:	f003 0306 	and.w	r3, r3, #6
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d11c      	bne.n	8004fdc <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8004fa2:	897b      	ldrh	r3, [r7, #10]
 8004fa4:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004faa:	1c5a      	adds	r2, r3, #1
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fb4:	2b02      	cmp	r3, #2
 8004fb6:	d13b      	bne.n	8005030 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	2208      	movs	r2, #8
 8004fc4:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004fce:	89ba      	ldrh	r2, [r7, #12]
 8004fd0:	7bfb      	ldrb	r3, [r7, #15]
 8004fd2:	4619      	mov	r1, r3
 8004fd4:	6878      	ldr	r0, [r7, #4]
 8004fd6:	f7ff f952 	bl	800427e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004fda:	e029      	b.n	8005030 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8004fdc:	893b      	ldrh	r3, [r7, #8]
 8004fde:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004fe0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004fe4:	6878      	ldr	r0, [r7, #4]
 8004fe6:	f000 ffc5 	bl	8005f74 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2200      	movs	r2, #0
 8004fee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004ff2:	89ba      	ldrh	r2, [r7, #12]
 8004ff4:	7bfb      	ldrb	r3, [r7, #15]
 8004ff6:	4619      	mov	r1, r3
 8004ff8:	6878      	ldr	r0, [r7, #4]
 8004ffa:	f7ff f940 	bl	800427e <HAL_I2C_AddrCallback>
}
 8004ffe:	e017      	b.n	8005030 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005000:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005004:	6878      	ldr	r0, [r7, #4]
 8005006:	f000 ffb5 	bl	8005f74 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2200      	movs	r2, #0
 800500e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005012:	89ba      	ldrh	r2, [r7, #12]
 8005014:	7bfb      	ldrb	r3, [r7, #15]
 8005016:	4619      	mov	r1, r3
 8005018:	6878      	ldr	r0, [r7, #4]
 800501a:	f7ff f930 	bl	800427e <HAL_I2C_AddrCallback>
}
 800501e:	e007      	b.n	8005030 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	2208      	movs	r2, #8
 8005026:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2200      	movs	r2, #0
 800502c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8005030:	bf00      	nop
 8005032:	3710      	adds	r7, #16
 8005034:	46bd      	mov	sp, r7
 8005036:	bd80      	pop	{r7, pc}

08005038 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b082      	sub	sp, #8
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2200      	movs	r2, #0
 8005044:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800504e:	b2db      	uxtb	r3, r3
 8005050:	2b21      	cmp	r3, #33	@ 0x21
 8005052:	d115      	bne.n	8005080 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2220      	movs	r2, #32
 8005058:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2211      	movs	r2, #17
 8005060:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2200      	movs	r2, #0
 8005066:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005068:	2101      	movs	r1, #1
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	f000 ff82 	bl	8005f74 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2200      	movs	r2, #0
 8005074:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8005078:	6878      	ldr	r0, [r7, #4]
 800507a:	f7ff f8d8 	bl	800422e <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800507e:	e014      	b.n	80050aa <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2220      	movs	r2, #32
 8005084:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2212      	movs	r2, #18
 800508c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2200      	movs	r2, #0
 8005092:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005094:	2102      	movs	r1, #2
 8005096:	6878      	ldr	r0, [r7, #4]
 8005098:	f000 ff6c 	bl	8005f74 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2200      	movs	r2, #0
 80050a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 80050a4:	6878      	ldr	r0, [r7, #4]
 80050a6:	f7ff f8cc 	bl	8004242 <HAL_I2C_MasterRxCpltCallback>
}
 80050aa:	bf00      	nop
 80050ac:	3708      	adds	r7, #8
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}

080050b2 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80050b2:	b580      	push	{r7, lr}
 80050b4:	b084      	sub	sp, #16
 80050b6:	af00      	add	r7, sp, #0
 80050b8:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2200      	movs	r2, #0
 80050c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d008      	beq.n	80050e6 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	681a      	ldr	r2, [r3, #0]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80050e2:	601a      	str	r2, [r3, #0]
 80050e4:	e00c      	b.n	8005100 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d007      	beq.n	8005100 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	681a      	ldr	r2, [r3, #0]
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80050fe:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005106:	b2db      	uxtb	r3, r3
 8005108:	2b29      	cmp	r3, #41	@ 0x29
 800510a:	d112      	bne.n	8005132 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2228      	movs	r2, #40	@ 0x28
 8005110:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2221      	movs	r2, #33	@ 0x21
 8005118:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800511a:	2101      	movs	r1, #1
 800511c:	6878      	ldr	r0, [r7, #4]
 800511e:	f000 ff29 	bl	8005f74 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2200      	movs	r2, #0
 8005126:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	f7ff f893 	bl	8004256 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8005130:	e017      	b.n	8005162 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005138:	b2db      	uxtb	r3, r3
 800513a:	2b2a      	cmp	r3, #42	@ 0x2a
 800513c:	d111      	bne.n	8005162 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2228      	movs	r2, #40	@ 0x28
 8005142:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2222      	movs	r2, #34	@ 0x22
 800514a:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800514c:	2102      	movs	r1, #2
 800514e:	6878      	ldr	r0, [r7, #4]
 8005150:	f000 ff10 	bl	8005f74 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2200      	movs	r2, #0
 8005158:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800515c:	6878      	ldr	r0, [r7, #4]
 800515e:	f7ff f884 	bl	800426a <HAL_I2C_SlaveRxCpltCallback>
}
 8005162:	bf00      	nop
 8005164:	3710      	adds	r7, #16
 8005166:	46bd      	mov	sp, r7
 8005168:	bd80      	pop	{r7, pc}
	...

0800516c <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b086      	sub	sp, #24
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
 8005174:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	2220      	movs	r2, #32
 8005180:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005188:	b2db      	uxtb	r3, r3
 800518a:	2b21      	cmp	r3, #33	@ 0x21
 800518c:	d107      	bne.n	800519e <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800518e:	2101      	movs	r1, #1
 8005190:	6878      	ldr	r0, [r7, #4]
 8005192:	f000 feef 	bl	8005f74 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2211      	movs	r2, #17
 800519a:	631a      	str	r2, [r3, #48]	@ 0x30
 800519c:	e00c      	b.n	80051b8 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80051a4:	b2db      	uxtb	r3, r3
 80051a6:	2b22      	cmp	r3, #34	@ 0x22
 80051a8:	d106      	bne.n	80051b8 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80051aa:	2102      	movs	r1, #2
 80051ac:	6878      	ldr	r0, [r7, #4]
 80051ae:	f000 fee1 	bl	8005f74 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2212      	movs	r2, #18
 80051b6:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	6859      	ldr	r1, [r3, #4]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681a      	ldr	r2, [r3, #0]
 80051c2:	4b4c      	ldr	r3, [pc, #304]	@ (80052f4 <I2C_ITMasterCplt+0x188>)
 80051c4:	400b      	ands	r3, r1
 80051c6:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2200      	movs	r2, #0
 80051cc:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	4a49      	ldr	r2, [pc, #292]	@ (80052f8 <I2C_ITMasterCplt+0x18c>)
 80051d2:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	f003 0310 	and.w	r3, r3, #16
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d009      	beq.n	80051f2 <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	2210      	movs	r2, #16
 80051e4:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051ea:	f043 0204 	orr.w	r2, r3, #4
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80051f8:	b2db      	uxtb	r3, r3
 80051fa:	2b60      	cmp	r3, #96	@ 0x60
 80051fc:	d10a      	bne.n	8005214 <I2C_ITMasterCplt+0xa8>
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	f003 0304 	and.w	r3, r3, #4
 8005204:	2b00      	cmp	r3, #0
 8005206:	d005      	beq.n	8005214 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800520e:	b2db      	uxtb	r3, r3
 8005210:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8005212:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8005214:	6878      	ldr	r0, [r7, #4]
 8005216:	f000 fc30 	bl	8005a7a <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800521e:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005226:	b2db      	uxtb	r3, r3
 8005228:	2b60      	cmp	r3, #96	@ 0x60
 800522a:	d002      	beq.n	8005232 <I2C_ITMasterCplt+0xc6>
 800522c:	693b      	ldr	r3, [r7, #16]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d006      	beq.n	8005240 <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005236:	4619      	mov	r1, r3
 8005238:	6878      	ldr	r0, [r7, #4]
 800523a:	f000 fb07 	bl	800584c <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800523e:	e054      	b.n	80052ea <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005246:	b2db      	uxtb	r3, r3
 8005248:	2b21      	cmp	r3, #33	@ 0x21
 800524a:	d124      	bne.n	8005296 <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2220      	movs	r2, #32
 8005250:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2200      	movs	r2, #0
 8005258:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005260:	b2db      	uxtb	r3, r3
 8005262:	2b40      	cmp	r3, #64	@ 0x40
 8005264:	d10b      	bne.n	800527e <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2200      	movs	r2, #0
 800526a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2200      	movs	r2, #0
 8005272:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f7ff f819 	bl	80042ae <HAL_I2C_MemTxCpltCallback>
}
 800527c:	e035      	b.n	80052ea <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2200      	movs	r2, #0
 8005282:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2200      	movs	r2, #0
 800528a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800528e:	6878      	ldr	r0, [r7, #4]
 8005290:	f7fe ffcd 	bl	800422e <HAL_I2C_MasterTxCpltCallback>
}
 8005294:	e029      	b.n	80052ea <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800529c:	b2db      	uxtb	r3, r3
 800529e:	2b22      	cmp	r3, #34	@ 0x22
 80052a0:	d123      	bne.n	80052ea <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2220      	movs	r2, #32
 80052a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2200      	movs	r2, #0
 80052ae:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80052b6:	b2db      	uxtb	r3, r3
 80052b8:	2b40      	cmp	r3, #64	@ 0x40
 80052ba:	d10b      	bne.n	80052d4 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2200      	movs	r2, #0
 80052c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2200      	movs	r2, #0
 80052c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 80052cc:	6878      	ldr	r0, [r7, #4]
 80052ce:	f7fe fff8 	bl	80042c2 <HAL_I2C_MemRxCpltCallback>
}
 80052d2:	e00a      	b.n	80052ea <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2200      	movs	r2, #0
 80052d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2200      	movs	r2, #0
 80052e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80052e4:	6878      	ldr	r0, [r7, #4]
 80052e6:	f7fe ffac 	bl	8004242 <HAL_I2C_MasterRxCpltCallback>
}
 80052ea:	bf00      	nop
 80052ec:	3718      	adds	r7, #24
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bd80      	pop	{r7, pc}
 80052f2:	bf00      	nop
 80052f4:	fe00e800 	.word	0xfe00e800
 80052f8:	ffff0000 	.word	0xffff0000

080052fc <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b086      	sub	sp, #24
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
 8005304:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005316:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800531e:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	2220      	movs	r2, #32
 8005326:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005328:	7afb      	ldrb	r3, [r7, #11]
 800532a:	2b21      	cmp	r3, #33	@ 0x21
 800532c:	d002      	beq.n	8005334 <I2C_ITSlaveCplt+0x38>
 800532e:	7afb      	ldrb	r3, [r7, #11]
 8005330:	2b29      	cmp	r3, #41	@ 0x29
 8005332:	d108      	bne.n	8005346 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8005334:	f248 0101 	movw	r1, #32769	@ 0x8001
 8005338:	6878      	ldr	r0, [r7, #4]
 800533a:	f000 fe1b 	bl	8005f74 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2221      	movs	r2, #33	@ 0x21
 8005342:	631a      	str	r2, [r3, #48]	@ 0x30
 8005344:	e019      	b.n	800537a <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005346:	7afb      	ldrb	r3, [r7, #11]
 8005348:	2b22      	cmp	r3, #34	@ 0x22
 800534a:	d002      	beq.n	8005352 <I2C_ITSlaveCplt+0x56>
 800534c:	7afb      	ldrb	r3, [r7, #11]
 800534e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005350:	d108      	bne.n	8005364 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8005352:	f248 0102 	movw	r1, #32770	@ 0x8002
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	f000 fe0c 	bl	8005f74 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2222      	movs	r2, #34	@ 0x22
 8005360:	631a      	str	r2, [r3, #48]	@ 0x30
 8005362:	e00a      	b.n	800537a <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8005364:	7afb      	ldrb	r3, [r7, #11]
 8005366:	2b28      	cmp	r3, #40	@ 0x28
 8005368:	d107      	bne.n	800537a <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800536a:	f248 0103 	movw	r1, #32771	@ 0x8003
 800536e:	6878      	ldr	r0, [r7, #4]
 8005370:	f000 fe00 	bl	8005f74 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2200      	movs	r2, #0
 8005378:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	685a      	ldr	r2, [r3, #4]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005388:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	6859      	ldr	r1, [r3, #4]
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681a      	ldr	r2, [r3, #0]
 8005394:	4b7f      	ldr	r3, [pc, #508]	@ (8005594 <I2C_ITSlaveCplt+0x298>)
 8005396:	400b      	ands	r3, r1
 8005398:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800539a:	6878      	ldr	r0, [r7, #4]
 800539c:	f000 fb6d 	bl	8005a7a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d07a      	beq.n	80054a0 <I2C_ITSlaveCplt+0x1a4>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	681a      	ldr	r2, [r3, #0]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80053b8:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053be:	2b00      	cmp	r3, #0
 80053c0:	f000 8111 	beq.w	80055e6 <I2C_ITSlaveCplt+0x2ea>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4a73      	ldr	r2, [pc, #460]	@ (8005598 <I2C_ITSlaveCplt+0x29c>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d059      	beq.n	8005484 <I2C_ITSlaveCplt+0x188>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a71      	ldr	r2, [pc, #452]	@ (800559c <I2C_ITSlaveCplt+0x2a0>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d053      	beq.n	8005484 <I2C_ITSlaveCplt+0x188>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a6f      	ldr	r2, [pc, #444]	@ (80055a0 <I2C_ITSlaveCplt+0x2a4>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d04d      	beq.n	8005484 <I2C_ITSlaveCplt+0x188>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4a6d      	ldr	r2, [pc, #436]	@ (80055a4 <I2C_ITSlaveCplt+0x2a8>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d047      	beq.n	8005484 <I2C_ITSlaveCplt+0x188>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a6b      	ldr	r2, [pc, #428]	@ (80055a8 <I2C_ITSlaveCplt+0x2ac>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d041      	beq.n	8005484 <I2C_ITSlaveCplt+0x188>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a69      	ldr	r2, [pc, #420]	@ (80055ac <I2C_ITSlaveCplt+0x2b0>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d03b      	beq.n	8005484 <I2C_ITSlaveCplt+0x188>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4a67      	ldr	r2, [pc, #412]	@ (80055b0 <I2C_ITSlaveCplt+0x2b4>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d035      	beq.n	8005484 <I2C_ITSlaveCplt+0x188>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a65      	ldr	r2, [pc, #404]	@ (80055b4 <I2C_ITSlaveCplt+0x2b8>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d02f      	beq.n	8005484 <I2C_ITSlaveCplt+0x188>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a63      	ldr	r2, [pc, #396]	@ (80055b8 <I2C_ITSlaveCplt+0x2bc>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d029      	beq.n	8005484 <I2C_ITSlaveCplt+0x188>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a61      	ldr	r2, [pc, #388]	@ (80055bc <I2C_ITSlaveCplt+0x2c0>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d023      	beq.n	8005484 <I2C_ITSlaveCplt+0x188>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4a5f      	ldr	r2, [pc, #380]	@ (80055c0 <I2C_ITSlaveCplt+0x2c4>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d01d      	beq.n	8005484 <I2C_ITSlaveCplt+0x188>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a5d      	ldr	r2, [pc, #372]	@ (80055c4 <I2C_ITSlaveCplt+0x2c8>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d017      	beq.n	8005484 <I2C_ITSlaveCplt+0x188>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a5b      	ldr	r2, [pc, #364]	@ (80055c8 <I2C_ITSlaveCplt+0x2cc>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d011      	beq.n	8005484 <I2C_ITSlaveCplt+0x188>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4a59      	ldr	r2, [pc, #356]	@ (80055cc <I2C_ITSlaveCplt+0x2d0>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d00b      	beq.n	8005484 <I2C_ITSlaveCplt+0x188>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a57      	ldr	r2, [pc, #348]	@ (80055d0 <I2C_ITSlaveCplt+0x2d4>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d005      	beq.n	8005484 <I2C_ITSlaveCplt+0x188>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a55      	ldr	r2, [pc, #340]	@ (80055d4 <I2C_ITSlaveCplt+0x2d8>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d105      	bne.n	8005490 <I2C_ITSlaveCplt+0x194>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	685b      	ldr	r3, [r3, #4]
 800548c:	b29b      	uxth	r3, r3
 800548e:	e004      	b.n	800549a <I2C_ITSlaveCplt+0x19e>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	685b      	ldr	r3, [r3, #4]
 8005498:	b29b      	uxth	r3, r3
 800549a:	687a      	ldr	r2, [r7, #4]
 800549c:	8553      	strh	r3, [r2, #42]	@ 0x2a
 800549e:	e0a2      	b.n	80055e6 <I2C_ITSlaveCplt+0x2ea>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80054a0:	693b      	ldr	r3, [r7, #16]
 80054a2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	f000 809d 	beq.w	80055e6 <I2C_ITSlaveCplt+0x2ea>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	681a      	ldr	r2, [r3, #0]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80054ba:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	f000 8090 	beq.w	80055e6 <I2C_ITSlaveCplt+0x2ea>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a32      	ldr	r2, [pc, #200]	@ (8005598 <I2C_ITSlaveCplt+0x29c>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d059      	beq.n	8005586 <I2C_ITSlaveCplt+0x28a>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a30      	ldr	r2, [pc, #192]	@ (800559c <I2C_ITSlaveCplt+0x2a0>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d053      	beq.n	8005586 <I2C_ITSlaveCplt+0x28a>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a2e      	ldr	r2, [pc, #184]	@ (80055a0 <I2C_ITSlaveCplt+0x2a4>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d04d      	beq.n	8005586 <I2C_ITSlaveCplt+0x28a>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a2c      	ldr	r2, [pc, #176]	@ (80055a4 <I2C_ITSlaveCplt+0x2a8>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d047      	beq.n	8005586 <I2C_ITSlaveCplt+0x28a>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a2a      	ldr	r2, [pc, #168]	@ (80055a8 <I2C_ITSlaveCplt+0x2ac>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d041      	beq.n	8005586 <I2C_ITSlaveCplt+0x28a>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a28      	ldr	r2, [pc, #160]	@ (80055ac <I2C_ITSlaveCplt+0x2b0>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d03b      	beq.n	8005586 <I2C_ITSlaveCplt+0x28a>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a26      	ldr	r2, [pc, #152]	@ (80055b0 <I2C_ITSlaveCplt+0x2b4>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d035      	beq.n	8005586 <I2C_ITSlaveCplt+0x28a>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a24      	ldr	r2, [pc, #144]	@ (80055b4 <I2C_ITSlaveCplt+0x2b8>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d02f      	beq.n	8005586 <I2C_ITSlaveCplt+0x28a>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a22      	ldr	r2, [pc, #136]	@ (80055b8 <I2C_ITSlaveCplt+0x2bc>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d029      	beq.n	8005586 <I2C_ITSlaveCplt+0x28a>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a20      	ldr	r2, [pc, #128]	@ (80055bc <I2C_ITSlaveCplt+0x2c0>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d023      	beq.n	8005586 <I2C_ITSlaveCplt+0x28a>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a1e      	ldr	r2, [pc, #120]	@ (80055c0 <I2C_ITSlaveCplt+0x2c4>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d01d      	beq.n	8005586 <I2C_ITSlaveCplt+0x28a>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a1c      	ldr	r2, [pc, #112]	@ (80055c4 <I2C_ITSlaveCplt+0x2c8>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d017      	beq.n	8005586 <I2C_ITSlaveCplt+0x28a>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a1a      	ldr	r2, [pc, #104]	@ (80055c8 <I2C_ITSlaveCplt+0x2cc>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d011      	beq.n	8005586 <I2C_ITSlaveCplt+0x28a>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a18      	ldr	r2, [pc, #96]	@ (80055cc <I2C_ITSlaveCplt+0x2d0>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d00b      	beq.n	8005586 <I2C_ITSlaveCplt+0x28a>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a16      	ldr	r2, [pc, #88]	@ (80055d0 <I2C_ITSlaveCplt+0x2d4>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d005      	beq.n	8005586 <I2C_ITSlaveCplt+0x28a>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a14      	ldr	r2, [pc, #80]	@ (80055d4 <I2C_ITSlaveCplt+0x2d8>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d128      	bne.n	80055d8 <I2C_ITSlaveCplt+0x2dc>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	b29b      	uxth	r3, r3
 8005590:	e027      	b.n	80055e2 <I2C_ITSlaveCplt+0x2e6>
 8005592:	bf00      	nop
 8005594:	fe00e800 	.word	0xfe00e800
 8005598:	40020010 	.word	0x40020010
 800559c:	40020028 	.word	0x40020028
 80055a0:	40020040 	.word	0x40020040
 80055a4:	40020058 	.word	0x40020058
 80055a8:	40020070 	.word	0x40020070
 80055ac:	40020088 	.word	0x40020088
 80055b0:	400200a0 	.word	0x400200a0
 80055b4:	400200b8 	.word	0x400200b8
 80055b8:	40020410 	.word	0x40020410
 80055bc:	40020428 	.word	0x40020428
 80055c0:	40020440 	.word	0x40020440
 80055c4:	40020458 	.word	0x40020458
 80055c8:	40020470 	.word	0x40020470
 80055cc:	40020488 	.word	0x40020488
 80055d0:	400204a0 	.word	0x400204a0
 80055d4:	400204b8 	.word	0x400204b8
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	685b      	ldr	r3, [r3, #4]
 80055e0:	b29b      	uxth	r3, r3
 80055e2:	687a      	ldr	r2, [r7, #4]
 80055e4:	8553      	strh	r3, [r2, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80055e6:	697b      	ldr	r3, [r7, #20]
 80055e8:	f003 0304 	and.w	r3, r3, #4
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d020      	beq.n	8005632 <I2C_ITSlaveCplt+0x336>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80055f0:	697b      	ldr	r3, [r7, #20]
 80055f2:	f023 0304 	bic.w	r3, r3, #4
 80055f6:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005602:	b2d2      	uxtb	r2, r2
 8005604:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800560a:	1c5a      	adds	r2, r3, #1
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005614:	2b00      	cmp	r3, #0
 8005616:	d00c      	beq.n	8005632 <I2C_ITSlaveCplt+0x336>
    {
      hi2c->XferSize--;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800561c:	3b01      	subs	r3, #1
 800561e:	b29a      	uxth	r2, r3
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005628:	b29b      	uxth	r3, r3
 800562a:	3b01      	subs	r3, #1
 800562c:	b29a      	uxth	r2, r3
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005636:	b29b      	uxth	r3, r3
 8005638:	2b00      	cmp	r3, #0
 800563a:	d005      	beq.n	8005648 <I2C_ITSlaveCplt+0x34c>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005640:	f043 0204 	orr.w	r2, r3, #4
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005648:	697b      	ldr	r3, [r7, #20]
 800564a:	f003 0310 	and.w	r3, r3, #16
 800564e:	2b00      	cmp	r3, #0
 8005650:	d049      	beq.n	80056e6 <I2C_ITSlaveCplt+0x3ea>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8005652:	693b      	ldr	r3, [r7, #16]
 8005654:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005658:	2b00      	cmp	r3, #0
 800565a:	d044      	beq.n	80056e6 <I2C_ITSlaveCplt+0x3ea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005660:	b29b      	uxth	r3, r3
 8005662:	2b00      	cmp	r3, #0
 8005664:	d128      	bne.n	80056b8 <I2C_ITSlaveCplt+0x3bc>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800566c:	b2db      	uxtb	r3, r3
 800566e:	2b28      	cmp	r3, #40	@ 0x28
 8005670:	d108      	bne.n	8005684 <I2C_ITSlaveCplt+0x388>
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005678:	d104      	bne.n	8005684 <I2C_ITSlaveCplt+0x388>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800567a:	6979      	ldr	r1, [r7, #20]
 800567c:	6878      	ldr	r0, [r7, #4]
 800567e:	f000 f891 	bl	80057a4 <I2C_ITListenCplt>
 8005682:	e030      	b.n	80056e6 <I2C_ITSlaveCplt+0x3ea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800568a:	b2db      	uxtb	r3, r3
 800568c:	2b29      	cmp	r3, #41	@ 0x29
 800568e:	d10e      	bne.n	80056ae <I2C_ITSlaveCplt+0x3b2>
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005696:	d00a      	beq.n	80056ae <I2C_ITSlaveCplt+0x3b2>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	2210      	movs	r2, #16
 800569e:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80056a0:	6878      	ldr	r0, [r7, #4]
 80056a2:	f000 f9ea 	bl	8005a7a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80056a6:	6878      	ldr	r0, [r7, #4]
 80056a8:	f7ff fd03 	bl	80050b2 <I2C_ITSlaveSeqCplt>
 80056ac:	e01b      	b.n	80056e6 <I2C_ITSlaveCplt+0x3ea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	2210      	movs	r2, #16
 80056b4:	61da      	str	r2, [r3, #28]
 80056b6:	e016      	b.n	80056e6 <I2C_ITSlaveCplt+0x3ea>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	2210      	movs	r2, #16
 80056be:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056c4:	f043 0204 	orr.w	r2, r3, #4
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d003      	beq.n	80056da <I2C_ITSlaveCplt+0x3de>
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80056d8:	d105      	bne.n	80056e6 <I2C_ITSlaveCplt+0x3ea>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056de:	4619      	mov	r1, r3
 80056e0:	6878      	ldr	r0, [r7, #4]
 80056e2:	f000 f8b3 	bl	800584c <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2200      	movs	r2, #0
 80056ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2200      	movs	r2, #0
 80056f2:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d010      	beq.n	800571e <I2C_ITSlaveCplt+0x422>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005700:	4619      	mov	r1, r3
 8005702:	6878      	ldr	r0, [r7, #4]
 8005704:	f000 f8a2 	bl	800584c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800570e:	b2db      	uxtb	r3, r3
 8005710:	2b28      	cmp	r3, #40	@ 0x28
 8005712:	d141      	bne.n	8005798 <I2C_ITSlaveCplt+0x49c>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8005714:	6979      	ldr	r1, [r7, #20]
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	f000 f844 	bl	80057a4 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800571c:	e03c      	b.n	8005798 <I2C_ITSlaveCplt+0x49c>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005722:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005726:	d014      	beq.n	8005752 <I2C_ITSlaveCplt+0x456>
    I2C_ITSlaveSeqCplt(hi2c);
 8005728:	6878      	ldr	r0, [r7, #4]
 800572a:	f7ff fcc2 	bl	80050b2 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	4a1b      	ldr	r2, [pc, #108]	@ (80057a0 <I2C_ITSlaveCplt+0x4a4>)
 8005732:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2220      	movs	r2, #32
 8005738:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2200      	movs	r2, #0
 8005740:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2200      	movs	r2, #0
 8005746:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800574a:	6878      	ldr	r0, [r7, #4]
 800574c:	f7fe fda5 	bl	800429a <HAL_I2C_ListenCpltCallback>
}
 8005750:	e022      	b.n	8005798 <I2C_ITSlaveCplt+0x49c>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005758:	b2db      	uxtb	r3, r3
 800575a:	2b22      	cmp	r3, #34	@ 0x22
 800575c:	d10e      	bne.n	800577c <I2C_ITSlaveCplt+0x480>
    hi2c->State = HAL_I2C_STATE_READY;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2220      	movs	r2, #32
 8005762:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2200      	movs	r2, #0
 800576a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2200      	movs	r2, #0
 8005770:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005774:	6878      	ldr	r0, [r7, #4]
 8005776:	f7fe fd78 	bl	800426a <HAL_I2C_SlaveRxCpltCallback>
}
 800577a:	e00d      	b.n	8005798 <I2C_ITSlaveCplt+0x49c>
    hi2c->State = HAL_I2C_STATE_READY;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2220      	movs	r2, #32
 8005780:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2200      	movs	r2, #0
 8005788:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2200      	movs	r2, #0
 800578e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005792:	6878      	ldr	r0, [r7, #4]
 8005794:	f7fe fd5f 	bl	8004256 <HAL_I2C_SlaveTxCpltCallback>
}
 8005798:	bf00      	nop
 800579a:	3718      	adds	r7, #24
 800579c:	46bd      	mov	sp, r7
 800579e:	bd80      	pop	{r7, pc}
 80057a0:	ffff0000 	.word	0xffff0000

080057a4 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b082      	sub	sp, #8
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
 80057ac:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	4a25      	ldr	r2, [pc, #148]	@ (8005848 <I2C_ITListenCplt+0xa4>)
 80057b2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2200      	movs	r2, #0
 80057b8:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2220      	movs	r2, #32
 80057be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2200      	movs	r2, #0
 80057c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2200      	movs	r2, #0
 80057ce:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	f003 0304 	and.w	r3, r3, #4
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d022      	beq.n	8005820 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057e4:	b2d2      	uxtb	r2, r2
 80057e6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057ec:	1c5a      	adds	r2, r3, #1
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d012      	beq.n	8005820 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057fe:	3b01      	subs	r3, #1
 8005800:	b29a      	uxth	r2, r3
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800580a:	b29b      	uxth	r3, r3
 800580c:	3b01      	subs	r3, #1
 800580e:	b29a      	uxth	r2, r3
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005818:	f043 0204 	orr.w	r2, r3, #4
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005820:	f248 0103 	movw	r1, #32771	@ 0x8003
 8005824:	6878      	ldr	r0, [r7, #4]
 8005826:	f000 fba5 	bl	8005f74 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	2210      	movs	r2, #16
 8005830:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2200      	movs	r2, #0
 8005836:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800583a:	6878      	ldr	r0, [r7, #4]
 800583c:	f7fe fd2d 	bl	800429a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8005840:	bf00      	nop
 8005842:	3708      	adds	r7, #8
 8005844:	46bd      	mov	sp, r7
 8005846:	bd80      	pop	{r7, pc}
 8005848:	ffff0000 	.word	0xffff0000

0800584c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b084      	sub	sp, #16
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
 8005854:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800585c:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2200      	movs	r2, #0
 8005862:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	4a6d      	ldr	r2, [pc, #436]	@ (8005a20 <I2C_ITError+0x1d4>)
 800586a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2200      	movs	r2, #0
 8005870:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	431a      	orrs	r2, r3
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800587e:	7bfb      	ldrb	r3, [r7, #15]
 8005880:	2b28      	cmp	r3, #40	@ 0x28
 8005882:	d005      	beq.n	8005890 <I2C_ITError+0x44>
 8005884:	7bfb      	ldrb	r3, [r7, #15]
 8005886:	2b29      	cmp	r3, #41	@ 0x29
 8005888:	d002      	beq.n	8005890 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800588a:	7bfb      	ldrb	r3, [r7, #15]
 800588c:	2b2a      	cmp	r3, #42	@ 0x2a
 800588e:	d10b      	bne.n	80058a8 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005890:	2103      	movs	r1, #3
 8005892:	6878      	ldr	r0, [r7, #4]
 8005894:	f000 fb6e 	bl	8005f74 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2228      	movs	r2, #40	@ 0x28
 800589c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	4a60      	ldr	r2, [pc, #384]	@ (8005a24 <I2C_ITError+0x1d8>)
 80058a4:	635a      	str	r2, [r3, #52]	@ 0x34
 80058a6:	e030      	b.n	800590a <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80058a8:	f248 0103 	movw	r1, #32771	@ 0x8003
 80058ac:	6878      	ldr	r0, [r7, #4]
 80058ae:	f000 fb61 	bl	8005f74 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80058b2:	6878      	ldr	r0, [r7, #4]
 80058b4:	f000 f8e1 	bl	8005a7a <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80058be:	b2db      	uxtb	r3, r3
 80058c0:	2b60      	cmp	r3, #96	@ 0x60
 80058c2:	d01f      	beq.n	8005904 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2220      	movs	r2, #32
 80058c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	699b      	ldr	r3, [r3, #24]
 80058d2:	f003 0320 	and.w	r3, r3, #32
 80058d6:	2b20      	cmp	r3, #32
 80058d8:	d114      	bne.n	8005904 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	699b      	ldr	r3, [r3, #24]
 80058e0:	f003 0310 	and.w	r3, r3, #16
 80058e4:	2b10      	cmp	r3, #16
 80058e6:	d109      	bne.n	80058fc <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	2210      	movs	r2, #16
 80058ee:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058f4:	f043 0204 	orr.w	r2, r3, #4
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	2220      	movs	r2, #32
 8005902:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2200      	movs	r2, #0
 8005908:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800590e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005914:	2b00      	cmp	r3, #0
 8005916:	d039      	beq.n	800598c <I2C_ITError+0x140>
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	2b11      	cmp	r3, #17
 800591c:	d002      	beq.n	8005924 <I2C_ITError+0xd8>
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	2b21      	cmp	r3, #33	@ 0x21
 8005922:	d133      	bne.n	800598c <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800592e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005932:	d107      	bne.n	8005944 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	681a      	ldr	r2, [r3, #0]
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005942:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005948:	4618      	mov	r0, r3
 800594a:	f7fd fc3b 	bl	80031c4 <HAL_DMA_GetState>
 800594e:	4603      	mov	r3, r0
 8005950:	2b01      	cmp	r3, #1
 8005952:	d017      	beq.n	8005984 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005958:	4a33      	ldr	r2, [pc, #204]	@ (8005a28 <I2C_ITError+0x1dc>)
 800595a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2200      	movs	r2, #0
 8005960:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005968:	4618      	mov	r0, r3
 800596a:	f7fc fa83 	bl	8001e74 <HAL_DMA_Abort_IT>
 800596e:	4603      	mov	r3, r0
 8005970:	2b00      	cmp	r3, #0
 8005972:	d04d      	beq.n	8005a10 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005978:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800597a:	687a      	ldr	r2, [r7, #4]
 800597c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800597e:	4610      	mov	r0, r2
 8005980:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005982:	e045      	b.n	8005a10 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8005984:	6878      	ldr	r0, [r7, #4]
 8005986:	f000 f851 	bl	8005a2c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800598a:	e041      	b.n	8005a10 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005990:	2b00      	cmp	r3, #0
 8005992:	d039      	beq.n	8005a08 <I2C_ITError+0x1bc>
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	2b12      	cmp	r3, #18
 8005998:	d002      	beq.n	80059a0 <I2C_ITError+0x154>
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	2b22      	cmp	r3, #34	@ 0x22
 800599e:	d133      	bne.n	8005a08 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80059aa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80059ae:	d107      	bne.n	80059c0 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	681a      	ldr	r2, [r3, #0]
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80059be:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059c4:	4618      	mov	r0, r3
 80059c6:	f7fd fbfd 	bl	80031c4 <HAL_DMA_GetState>
 80059ca:	4603      	mov	r3, r0
 80059cc:	2b01      	cmp	r3, #1
 80059ce:	d017      	beq.n	8005a00 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059d4:	4a14      	ldr	r2, [pc, #80]	@ (8005a28 <I2C_ITError+0x1dc>)
 80059d6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2200      	movs	r2, #0
 80059dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059e4:	4618      	mov	r0, r3
 80059e6:	f7fc fa45 	bl	8001e74 <HAL_DMA_Abort_IT>
 80059ea:	4603      	mov	r3, r0
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d011      	beq.n	8005a14 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059f6:	687a      	ldr	r2, [r7, #4]
 80059f8:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80059fa:	4610      	mov	r0, r2
 80059fc:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80059fe:	e009      	b.n	8005a14 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8005a00:	6878      	ldr	r0, [r7, #4]
 8005a02:	f000 f813 	bl	8005a2c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005a06:	e005      	b.n	8005a14 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8005a08:	6878      	ldr	r0, [r7, #4]
 8005a0a:	f000 f80f 	bl	8005a2c <I2C_TreatErrorCallback>
  }
}
 8005a0e:	e002      	b.n	8005a16 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005a10:	bf00      	nop
 8005a12:	e000      	b.n	8005a16 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005a14:	bf00      	nop
}
 8005a16:	bf00      	nop
 8005a18:	3710      	adds	r7, #16
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}
 8005a1e:	bf00      	nop
 8005a20:	ffff0000 	.word	0xffff0000
 8005a24:	08004569 	.word	0x08004569
 8005a28:	08005dcd 	.word	0x08005dcd

08005a2c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b082      	sub	sp, #8
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a3a:	b2db      	uxtb	r3, r3
 8005a3c:	2b60      	cmp	r3, #96	@ 0x60
 8005a3e:	d10e      	bne.n	8005a5e <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2220      	movs	r2, #32
 8005a44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2200      	movs	r2, #0
 8005a52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	f7fe fc47 	bl	80042ea <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005a5c:	e009      	b.n	8005a72 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2200      	movs	r2, #0
 8005a62:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2200      	movs	r2, #0
 8005a68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8005a6c:	6878      	ldr	r0, [r7, #4]
 8005a6e:	f7fe fc32 	bl	80042d6 <HAL_I2C_ErrorCallback>
}
 8005a72:	bf00      	nop
 8005a74:	3708      	adds	r7, #8
 8005a76:	46bd      	mov	sp, r7
 8005a78:	bd80      	pop	{r7, pc}

08005a7a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005a7a:	b480      	push	{r7}
 8005a7c:	b083      	sub	sp, #12
 8005a7e:	af00      	add	r7, sp, #0
 8005a80:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	699b      	ldr	r3, [r3, #24]
 8005a88:	f003 0302 	and.w	r3, r3, #2
 8005a8c:	2b02      	cmp	r3, #2
 8005a8e:	d103      	bne.n	8005a98 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	2200      	movs	r2, #0
 8005a96:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	699b      	ldr	r3, [r3, #24]
 8005a9e:	f003 0301 	and.w	r3, r3, #1
 8005aa2:	2b01      	cmp	r3, #1
 8005aa4:	d007      	beq.n	8005ab6 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	699a      	ldr	r2, [r3, #24]
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f042 0201 	orr.w	r2, r2, #1
 8005ab4:	619a      	str	r2, [r3, #24]
  }
}
 8005ab6:	bf00      	nop
 8005ab8:	370c      	adds	r7, #12
 8005aba:	46bd      	mov	sp, r7
 8005abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac0:	4770      	bx	lr

08005ac2 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005ac2:	b580      	push	{r7, lr}
 8005ac4:	b084      	sub	sp, #16
 8005ac6:	af00      	add	r7, sp, #0
 8005ac8:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ace:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	681a      	ldr	r2, [r3, #0]
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005ade:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ae4:	b29b      	uxth	r3, r3
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d104      	bne.n	8005af4 <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8005aea:	2120      	movs	r1, #32
 8005aec:	68f8      	ldr	r0, [r7, #12]
 8005aee:	f000 f9bd 	bl	8005e6c <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8005af2:	e02d      	b.n	8005b50 <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005af8:	68fa      	ldr	r2, [r7, #12]
 8005afa:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8005afc:	441a      	add	r2, r3
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b06:	b29b      	uxth	r3, r3
 8005b08:	2bff      	cmp	r3, #255	@ 0xff
 8005b0a:	d903      	bls.n	8005b14 <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	22ff      	movs	r2, #255	@ 0xff
 8005b10:	851a      	strh	r2, [r3, #40]	@ 0x28
 8005b12:	e004      	b.n	8005b1e <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b18:	b29a      	uxth	r2, r3
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b26:	4619      	mov	r1, r3
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	3328      	adds	r3, #40	@ 0x28
 8005b2e:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8005b34:	f7fb ff34 	bl	80019a0 <HAL_DMA_Start_IT>
 8005b38:	4603      	mov	r3, r0
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d004      	beq.n	8005b48 <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8005b3e:	2110      	movs	r1, #16
 8005b40:	68f8      	ldr	r0, [r7, #12]
 8005b42:	f7ff fe83 	bl	800584c <I2C_ITError>
}
 8005b46:	e003      	b.n	8005b50 <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8005b48:	2140      	movs	r1, #64	@ 0x40
 8005b4a:	68f8      	ldr	r0, [r7, #12]
 8005b4c:	f000 f98e 	bl	8005e6c <I2C_Enable_IRQ>
}
 8005b50:	bf00      	nop
 8005b52:	3710      	adds	r7, #16
 8005b54:	46bd      	mov	sp, r7
 8005b56:	bd80      	pop	{r7, pc}

08005b58 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b084      	sub	sp, #16
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
  uint32_t treatdmaerror = 0U;
 8005b60:	2300      	movs	r3, #0
 8005b62:	60fb      	str	r3, [r7, #12]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b68:	60bb      	str	r3, [r7, #8]

  if (hi2c->hdmatx != NULL)
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d076      	beq.n	8005c60 <I2C_DMAError+0x108>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4a71      	ldr	r2, [pc, #452]	@ (8005d40 <I2C_DMAError+0x1e8>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d059      	beq.n	8005c32 <I2C_DMAError+0xda>
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4a6f      	ldr	r2, [pc, #444]	@ (8005d44 <I2C_DMAError+0x1ec>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d053      	beq.n	8005c32 <I2C_DMAError+0xda>
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4a6d      	ldr	r2, [pc, #436]	@ (8005d48 <I2C_DMAError+0x1f0>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d04d      	beq.n	8005c32 <I2C_DMAError+0xda>
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4a6b      	ldr	r2, [pc, #428]	@ (8005d4c <I2C_DMAError+0x1f4>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d047      	beq.n	8005c32 <I2C_DMAError+0xda>
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4a69      	ldr	r2, [pc, #420]	@ (8005d50 <I2C_DMAError+0x1f8>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d041      	beq.n	8005c32 <I2C_DMAError+0xda>
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4a67      	ldr	r2, [pc, #412]	@ (8005d54 <I2C_DMAError+0x1fc>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d03b      	beq.n	8005c32 <I2C_DMAError+0xda>
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4a65      	ldr	r2, [pc, #404]	@ (8005d58 <I2C_DMAError+0x200>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d035      	beq.n	8005c32 <I2C_DMAError+0xda>
 8005bc6:	68bb      	ldr	r3, [r7, #8]
 8005bc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4a63      	ldr	r2, [pc, #396]	@ (8005d5c <I2C_DMAError+0x204>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d02f      	beq.n	8005c32 <I2C_DMAError+0xda>
 8005bd2:	68bb      	ldr	r3, [r7, #8]
 8005bd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4a61      	ldr	r2, [pc, #388]	@ (8005d60 <I2C_DMAError+0x208>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d029      	beq.n	8005c32 <I2C_DMAError+0xda>
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	4a5f      	ldr	r2, [pc, #380]	@ (8005d64 <I2C_DMAError+0x20c>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d023      	beq.n	8005c32 <I2C_DMAError+0xda>
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4a5d      	ldr	r2, [pc, #372]	@ (8005d68 <I2C_DMAError+0x210>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d01d      	beq.n	8005c32 <I2C_DMAError+0xda>
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4a5b      	ldr	r2, [pc, #364]	@ (8005d6c <I2C_DMAError+0x214>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d017      	beq.n	8005c32 <I2C_DMAError+0xda>
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4a59      	ldr	r2, [pc, #356]	@ (8005d70 <I2C_DMAError+0x218>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d011      	beq.n	8005c32 <I2C_DMAError+0xda>
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	4a57      	ldr	r2, [pc, #348]	@ (8005d74 <I2C_DMAError+0x21c>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d00b      	beq.n	8005c32 <I2C_DMAError+0xda>
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4a55      	ldr	r2, [pc, #340]	@ (8005d78 <I2C_DMAError+0x220>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d005      	beq.n	8005c32 <I2C_DMAError+0xda>
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4a53      	ldr	r2, [pc, #332]	@ (8005d7c <I2C_DMAError+0x224>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d109      	bne.n	8005c46 <I2C_DMAError+0xee>
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	685b      	ldr	r3, [r3, #4]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	bf0c      	ite	eq
 8005c3e:	2301      	moveq	r3, #1
 8005c40:	2300      	movne	r3, #0
 8005c42:	b2db      	uxtb	r3, r3
 8005c44:	e008      	b.n	8005c58 <I2C_DMAError+0x100>
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	685b      	ldr	r3, [r3, #4]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	bf0c      	ite	eq
 8005c52:	2301      	moveq	r3, #1
 8005c54:	2300      	movne	r3, #0
 8005c56:	b2db      	uxtb	r3, r3
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d001      	beq.n	8005c60 <I2C_DMAError+0x108>
    {
      treatdmaerror = 1U;
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	60fb      	str	r3, [r7, #12]
    }
  }

  if (hi2c->hdmarx != NULL)
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	f000 8098 	beq.w	8005d9a <I2C_DMAError+0x242>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4a33      	ldr	r2, [pc, #204]	@ (8005d40 <I2C_DMAError+0x1e8>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d059      	beq.n	8005d2a <I2C_DMAError+0x1d2>
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4a31      	ldr	r2, [pc, #196]	@ (8005d44 <I2C_DMAError+0x1ec>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d053      	beq.n	8005d2a <I2C_DMAError+0x1d2>
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	4a2f      	ldr	r2, [pc, #188]	@ (8005d48 <I2C_DMAError+0x1f0>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d04d      	beq.n	8005d2a <I2C_DMAError+0x1d2>
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4a2d      	ldr	r2, [pc, #180]	@ (8005d4c <I2C_DMAError+0x1f4>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d047      	beq.n	8005d2a <I2C_DMAError+0x1d2>
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a2b      	ldr	r2, [pc, #172]	@ (8005d50 <I2C_DMAError+0x1f8>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d041      	beq.n	8005d2a <I2C_DMAError+0x1d2>
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a29      	ldr	r2, [pc, #164]	@ (8005d54 <I2C_DMAError+0x1fc>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d03b      	beq.n	8005d2a <I2C_DMAError+0x1d2>
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4a27      	ldr	r2, [pc, #156]	@ (8005d58 <I2C_DMAError+0x200>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d035      	beq.n	8005d2a <I2C_DMAError+0x1d2>
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4a25      	ldr	r2, [pc, #148]	@ (8005d5c <I2C_DMAError+0x204>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d02f      	beq.n	8005d2a <I2C_DMAError+0x1d2>
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4a23      	ldr	r2, [pc, #140]	@ (8005d60 <I2C_DMAError+0x208>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d029      	beq.n	8005d2a <I2C_DMAError+0x1d2>
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4a21      	ldr	r2, [pc, #132]	@ (8005d64 <I2C_DMAError+0x20c>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d023      	beq.n	8005d2a <I2C_DMAError+0x1d2>
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4a1f      	ldr	r2, [pc, #124]	@ (8005d68 <I2C_DMAError+0x210>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d01d      	beq.n	8005d2a <I2C_DMAError+0x1d2>
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4a1d      	ldr	r2, [pc, #116]	@ (8005d6c <I2C_DMAError+0x214>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d017      	beq.n	8005d2a <I2C_DMAError+0x1d2>
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4a1b      	ldr	r2, [pc, #108]	@ (8005d70 <I2C_DMAError+0x218>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d011      	beq.n	8005d2a <I2C_DMAError+0x1d2>
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	4a19      	ldr	r2, [pc, #100]	@ (8005d74 <I2C_DMAError+0x21c>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d00b      	beq.n	8005d2a <I2C_DMAError+0x1d2>
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4a17      	ldr	r2, [pc, #92]	@ (8005d78 <I2C_DMAError+0x220>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d005      	beq.n	8005d2a <I2C_DMAError+0x1d2>
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4a15      	ldr	r2, [pc, #84]	@ (8005d7c <I2C_DMAError+0x224>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d12a      	bne.n	8005d80 <I2C_DMAError+0x228>
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	685b      	ldr	r3, [r3, #4]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	bf0c      	ite	eq
 8005d36:	2301      	moveq	r3, #1
 8005d38:	2300      	movne	r3, #0
 8005d3a:	b2db      	uxtb	r3, r3
 8005d3c:	e029      	b.n	8005d92 <I2C_DMAError+0x23a>
 8005d3e:	bf00      	nop
 8005d40:	40020010 	.word	0x40020010
 8005d44:	40020028 	.word	0x40020028
 8005d48:	40020040 	.word	0x40020040
 8005d4c:	40020058 	.word	0x40020058
 8005d50:	40020070 	.word	0x40020070
 8005d54:	40020088 	.word	0x40020088
 8005d58:	400200a0 	.word	0x400200a0
 8005d5c:	400200b8 	.word	0x400200b8
 8005d60:	40020410 	.word	0x40020410
 8005d64:	40020428 	.word	0x40020428
 8005d68:	40020440 	.word	0x40020440
 8005d6c:	40020458 	.word	0x40020458
 8005d70:	40020470 	.word	0x40020470
 8005d74:	40020488 	.word	0x40020488
 8005d78:	400204a0 	.word	0x400204a0
 8005d7c:	400204b8 	.word	0x400204b8
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	685b      	ldr	r3, [r3, #4]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	bf0c      	ite	eq
 8005d8c:	2301      	moveq	r3, #1
 8005d8e:	2300      	movne	r3, #0
 8005d90:	b2db      	uxtb	r3, r3
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d001      	beq.n	8005d9a <I2C_DMAError+0x242>
    {
      treatdmaerror = 1U;
 8005d96:	2301      	movs	r3, #1
 8005d98:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Check if a FIFO error is detected, if true normal use case, so no specific action to perform */
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 8005d9a:	6878      	ldr	r0, [r7, #4]
 8005d9c:	f7fd fa20 	bl	80031e0 <HAL_DMA_GetError>
 8005da0:	4603      	mov	r3, r0
 8005da2:	2b02      	cmp	r3, #2
 8005da4:	d00e      	beq.n	8005dc4 <I2C_DMAError+0x26c>
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d00b      	beq.n	8005dc4 <I2C_DMAError+0x26c>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	685a      	ldr	r2, [r3, #4]
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005dba:	605a      	str	r2, [r3, #4]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8005dbc:	2110      	movs	r1, #16
 8005dbe:	68b8      	ldr	r0, [r7, #8]
 8005dc0:	f7ff fd44 	bl	800584c <I2C_ITError>
  }
}
 8005dc4:	bf00      	nop
 8005dc6:	3710      	adds	r7, #16
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	bd80      	pop	{r7, pc}

08005dcc <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b084      	sub	sp, #16
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dd8:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d003      	beq.n	8005dea <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005de6:	2200      	movs	r2, #0
 8005de8:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d003      	beq.n	8005dfa <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005df6:	2200      	movs	r2, #0
 8005df8:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8005dfa:	68f8      	ldr	r0, [r7, #12]
 8005dfc:	f7ff fe16 	bl	8005a2c <I2C_TreatErrorCallback>
}
 8005e00:	bf00      	nop
 8005e02:	3710      	adds	r7, #16
 8005e04:	46bd      	mov	sp, r7
 8005e06:	bd80      	pop	{r7, pc}

08005e08 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005e08:	b480      	push	{r7}
 8005e0a:	b087      	sub	sp, #28
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	60f8      	str	r0, [r7, #12]
 8005e10:	607b      	str	r3, [r7, #4]
 8005e12:	460b      	mov	r3, r1
 8005e14:	817b      	strh	r3, [r7, #10]
 8005e16:	4613      	mov	r3, r2
 8005e18:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005e1a:	897b      	ldrh	r3, [r7, #10]
 8005e1c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005e20:	7a7b      	ldrb	r3, [r7, #9]
 8005e22:	041b      	lsls	r3, r3, #16
 8005e24:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005e28:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005e2e:	6a3b      	ldr	r3, [r7, #32]
 8005e30:	4313      	orrs	r3, r2
 8005e32:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005e36:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	685a      	ldr	r2, [r3, #4]
 8005e3e:	6a3b      	ldr	r3, [r7, #32]
 8005e40:	0d5b      	lsrs	r3, r3, #21
 8005e42:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8005e46:	4b08      	ldr	r3, [pc, #32]	@ (8005e68 <I2C_TransferConfig+0x60>)
 8005e48:	430b      	orrs	r3, r1
 8005e4a:	43db      	mvns	r3, r3
 8005e4c:	ea02 0103 	and.w	r1, r2, r3
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	697a      	ldr	r2, [r7, #20]
 8005e56:	430a      	orrs	r2, r1
 8005e58:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005e5a:	bf00      	nop
 8005e5c:	371c      	adds	r7, #28
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e64:	4770      	bx	lr
 8005e66:	bf00      	nop
 8005e68:	03ff63ff 	.word	0x03ff63ff

08005e6c <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b085      	sub	sp, #20
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
 8005e74:	460b      	mov	r3, r1
 8005e76:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8005e78:	2300      	movs	r3, #0
 8005e7a:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e80:	4a39      	ldr	r2, [pc, #228]	@ (8005f68 <I2C_Enable_IRQ+0xfc>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d032      	beq.n	8005eec <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8005e8a:	4a38      	ldr	r2, [pc, #224]	@ (8005f6c <I2C_Enable_IRQ+0x100>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d02d      	beq.n	8005eec <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8005e94:	4a36      	ldr	r2, [pc, #216]	@ (8005f70 <I2C_Enable_IRQ+0x104>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d028      	beq.n	8005eec <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005e9a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	da03      	bge.n	8005eaa <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8005ea8:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005eaa:	887b      	ldrh	r3, [r7, #2]
 8005eac:	f003 0301 	and.w	r3, r3, #1
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d003      	beq.n	8005ebc <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8005eba:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005ebc:	887b      	ldrh	r3, [r7, #2]
 8005ebe:	f003 0302 	and.w	r3, r3, #2
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d003      	beq.n	8005ece <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8005ecc:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005ece:	887b      	ldrh	r3, [r7, #2]
 8005ed0:	2b10      	cmp	r3, #16
 8005ed2:	d103      	bne.n	8005edc <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8005eda:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005edc:	887b      	ldrh	r3, [r7, #2]
 8005ede:	2b20      	cmp	r3, #32
 8005ee0:	d133      	bne.n	8005f4a <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	f043 0320 	orr.w	r3, r3, #32
 8005ee8:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005eea:	e02e      	b.n	8005f4a <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005eec:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	da03      	bge.n	8005efc <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8005efa:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005efc:	887b      	ldrh	r3, [r7, #2]
 8005efe:	f003 0301 	and.w	r3, r3, #1
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d003      	beq.n	8005f0e <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8005f0c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005f0e:	887b      	ldrh	r3, [r7, #2]
 8005f10:	f003 0302 	and.w	r3, r3, #2
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d003      	beq.n	8005f20 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8005f1e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005f20:	887b      	ldrh	r3, [r7, #2]
 8005f22:	2b10      	cmp	r3, #16
 8005f24:	d103      	bne.n	8005f2e <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8005f2c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005f2e:	887b      	ldrh	r3, [r7, #2]
 8005f30:	2b20      	cmp	r3, #32
 8005f32:	d103      	bne.n	8005f3c <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8005f3a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8005f3c:	887b      	ldrh	r3, [r7, #2]
 8005f3e:	2b40      	cmp	r3, #64	@ 0x40
 8005f40:	d103      	bne.n	8005f4a <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005f48:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	6819      	ldr	r1, [r3, #0]
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	68fa      	ldr	r2, [r7, #12]
 8005f56:	430a      	orrs	r2, r1
 8005f58:	601a      	str	r2, [r3, #0]
}
 8005f5a:	bf00      	nop
 8005f5c:	3714      	adds	r7, #20
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f64:	4770      	bx	lr
 8005f66:	bf00      	nop
 8005f68:	0800475b 	.word	0x0800475b
 8005f6c:	08004b7d 	.word	0x08004b7d
 8005f70:	08004931 	.word	0x08004931

08005f74 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8005f74:	b480      	push	{r7}
 8005f76:	b085      	sub	sp, #20
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
 8005f7c:	460b      	mov	r3, r1
 8005f7e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8005f80:	2300      	movs	r3, #0
 8005f82:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005f84:	887b      	ldrh	r3, [r7, #2]
 8005f86:	f003 0301 	and.w	r3, r3, #1
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d00f      	beq.n	8005fae <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8005f94:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005f9c:	b2db      	uxtb	r3, r3
 8005f9e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005fa2:	2b28      	cmp	r3, #40	@ 0x28
 8005fa4:	d003      	beq.n	8005fae <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8005fac:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005fae:	887b      	ldrh	r3, [r7, #2]
 8005fb0:	f003 0302 	and.w	r3, r3, #2
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d00f      	beq.n	8005fd8 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8005fbe:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005fc6:	b2db      	uxtb	r3, r3
 8005fc8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005fcc:	2b28      	cmp	r3, #40	@ 0x28
 8005fce:	d003      	beq.n	8005fd8 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8005fd6:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005fd8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	da03      	bge.n	8005fe8 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8005fe6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005fe8:	887b      	ldrh	r3, [r7, #2]
 8005fea:	2b10      	cmp	r3, #16
 8005fec:	d103      	bne.n	8005ff6 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8005ff4:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005ff6:	887b      	ldrh	r3, [r7, #2]
 8005ff8:	2b20      	cmp	r3, #32
 8005ffa:	d103      	bne.n	8006004 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	f043 0320 	orr.w	r3, r3, #32
 8006002:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8006004:	887b      	ldrh	r3, [r7, #2]
 8006006:	2b40      	cmp	r3, #64	@ 0x40
 8006008:	d103      	bne.n	8006012 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006010:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	6819      	ldr	r1, [r3, #0]
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	43da      	mvns	r2, r3
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	400a      	ands	r2, r1
 8006022:	601a      	str	r2, [r3, #0]
}
 8006024:	bf00      	nop
 8006026:	3714      	adds	r7, #20
 8006028:	46bd      	mov	sp, r7
 800602a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602e:	4770      	bx	lr

08006030 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006030:	b480      	push	{r7}
 8006032:	b083      	sub	sp, #12
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
 8006038:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006040:	b2db      	uxtb	r3, r3
 8006042:	2b20      	cmp	r3, #32
 8006044:	d138      	bne.n	80060b8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800604c:	2b01      	cmp	r3, #1
 800604e:	d101      	bne.n	8006054 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006050:	2302      	movs	r3, #2
 8006052:	e032      	b.n	80060ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2201      	movs	r2, #1
 8006058:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2224      	movs	r2, #36	@ 0x24
 8006060:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	681a      	ldr	r2, [r3, #0]
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f022 0201 	bic.w	r2, r2, #1
 8006072:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	681a      	ldr	r2, [r3, #0]
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006082:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	6819      	ldr	r1, [r3, #0]
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	683a      	ldr	r2, [r7, #0]
 8006090:	430a      	orrs	r2, r1
 8006092:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	681a      	ldr	r2, [r3, #0]
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f042 0201 	orr.w	r2, r2, #1
 80060a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2220      	movs	r2, #32
 80060a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2200      	movs	r2, #0
 80060b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80060b4:	2300      	movs	r3, #0
 80060b6:	e000      	b.n	80060ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80060b8:	2302      	movs	r3, #2
  }
}
 80060ba:	4618      	mov	r0, r3
 80060bc:	370c      	adds	r7, #12
 80060be:	46bd      	mov	sp, r7
 80060c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c4:	4770      	bx	lr

080060c6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80060c6:	b480      	push	{r7}
 80060c8:	b085      	sub	sp, #20
 80060ca:	af00      	add	r7, sp, #0
 80060cc:	6078      	str	r0, [r7, #4]
 80060ce:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80060d6:	b2db      	uxtb	r3, r3
 80060d8:	2b20      	cmp	r3, #32
 80060da:	d139      	bne.n	8006150 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80060e2:	2b01      	cmp	r3, #1
 80060e4:	d101      	bne.n	80060ea <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80060e6:	2302      	movs	r3, #2
 80060e8:	e033      	b.n	8006152 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2201      	movs	r2, #1
 80060ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2224      	movs	r2, #36	@ 0x24
 80060f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	681a      	ldr	r2, [r3, #0]
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f022 0201 	bic.w	r2, r2, #1
 8006108:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006118:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	021b      	lsls	r3, r3, #8
 800611e:	68fa      	ldr	r2, [r7, #12]
 8006120:	4313      	orrs	r3, r2
 8006122:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	68fa      	ldr	r2, [r7, #12]
 800612a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	681a      	ldr	r2, [r3, #0]
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f042 0201 	orr.w	r2, r2, #1
 800613a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2220      	movs	r2, #32
 8006140:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2200      	movs	r2, #0
 8006148:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800614c:	2300      	movs	r3, #0
 800614e:	e000      	b.n	8006152 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006150:	2302      	movs	r3, #2
  }
}
 8006152:	4618      	mov	r0, r3
 8006154:	3714      	adds	r7, #20
 8006156:	46bd      	mov	sp, r7
 8006158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615c:	4770      	bx	lr
	...

08006160 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b084      	sub	sp, #16
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006168:	4b19      	ldr	r3, [pc, #100]	@ (80061d0 <HAL_PWREx_ConfigSupply+0x70>)
 800616a:	68db      	ldr	r3, [r3, #12]
 800616c:	f003 0304 	and.w	r3, r3, #4
 8006170:	2b04      	cmp	r3, #4
 8006172:	d00a      	beq.n	800618a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006174:	4b16      	ldr	r3, [pc, #88]	@ (80061d0 <HAL_PWREx_ConfigSupply+0x70>)
 8006176:	68db      	ldr	r3, [r3, #12]
 8006178:	f003 0307 	and.w	r3, r3, #7
 800617c:	687a      	ldr	r2, [r7, #4]
 800617e:	429a      	cmp	r2, r3
 8006180:	d001      	beq.n	8006186 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006182:	2301      	movs	r3, #1
 8006184:	e01f      	b.n	80061c6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006186:	2300      	movs	r3, #0
 8006188:	e01d      	b.n	80061c6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800618a:	4b11      	ldr	r3, [pc, #68]	@ (80061d0 <HAL_PWREx_ConfigSupply+0x70>)
 800618c:	68db      	ldr	r3, [r3, #12]
 800618e:	f023 0207 	bic.w	r2, r3, #7
 8006192:	490f      	ldr	r1, [pc, #60]	@ (80061d0 <HAL_PWREx_ConfigSupply+0x70>)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	4313      	orrs	r3, r2
 8006198:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800619a:	f7fa ff63 	bl	8001064 <HAL_GetTick>
 800619e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80061a0:	e009      	b.n	80061b6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80061a2:	f7fa ff5f 	bl	8001064 <HAL_GetTick>
 80061a6:	4602      	mov	r2, r0
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	1ad3      	subs	r3, r2, r3
 80061ac:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80061b0:	d901      	bls.n	80061b6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80061b2:	2301      	movs	r3, #1
 80061b4:	e007      	b.n	80061c6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80061b6:	4b06      	ldr	r3, [pc, #24]	@ (80061d0 <HAL_PWREx_ConfigSupply+0x70>)
 80061b8:	685b      	ldr	r3, [r3, #4]
 80061ba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80061be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80061c2:	d1ee      	bne.n	80061a2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80061c4:	2300      	movs	r3, #0
}
 80061c6:	4618      	mov	r0, r3
 80061c8:	3710      	adds	r7, #16
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bd80      	pop	{r7, pc}
 80061ce:	bf00      	nop
 80061d0:	58024800 	.word	0x58024800

080061d4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b08c      	sub	sp, #48	@ 0x30
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d102      	bne.n	80061e8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80061e2:	2301      	movs	r3, #1
 80061e4:	f000 bc1f 	b.w	8006a26 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f003 0301 	and.w	r3, r3, #1
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	f000 80b3 	beq.w	800635c <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80061f6:	4b95      	ldr	r3, [pc, #596]	@ (800644c <HAL_RCC_OscConfig+0x278>)
 80061f8:	691b      	ldr	r3, [r3, #16]
 80061fa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80061fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006200:	4b92      	ldr	r3, [pc, #584]	@ (800644c <HAL_RCC_OscConfig+0x278>)
 8006202:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006204:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006206:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006208:	2b10      	cmp	r3, #16
 800620a:	d007      	beq.n	800621c <HAL_RCC_OscConfig+0x48>
 800620c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800620e:	2b18      	cmp	r3, #24
 8006210:	d112      	bne.n	8006238 <HAL_RCC_OscConfig+0x64>
 8006212:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006214:	f003 0303 	and.w	r3, r3, #3
 8006218:	2b02      	cmp	r3, #2
 800621a:	d10d      	bne.n	8006238 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800621c:	4b8b      	ldr	r3, [pc, #556]	@ (800644c <HAL_RCC_OscConfig+0x278>)
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006224:	2b00      	cmp	r3, #0
 8006226:	f000 8098 	beq.w	800635a <HAL_RCC_OscConfig+0x186>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	685b      	ldr	r3, [r3, #4]
 800622e:	2b00      	cmp	r3, #0
 8006230:	f040 8093 	bne.w	800635a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8006234:	2301      	movs	r3, #1
 8006236:	e3f6      	b.n	8006a26 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	685b      	ldr	r3, [r3, #4]
 800623c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006240:	d106      	bne.n	8006250 <HAL_RCC_OscConfig+0x7c>
 8006242:	4b82      	ldr	r3, [pc, #520]	@ (800644c <HAL_RCC_OscConfig+0x278>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4a81      	ldr	r2, [pc, #516]	@ (800644c <HAL_RCC_OscConfig+0x278>)
 8006248:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800624c:	6013      	str	r3, [r2, #0]
 800624e:	e058      	b.n	8006302 <HAL_RCC_OscConfig+0x12e>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	685b      	ldr	r3, [r3, #4]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d112      	bne.n	800627e <HAL_RCC_OscConfig+0xaa>
 8006258:	4b7c      	ldr	r3, [pc, #496]	@ (800644c <HAL_RCC_OscConfig+0x278>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4a7b      	ldr	r2, [pc, #492]	@ (800644c <HAL_RCC_OscConfig+0x278>)
 800625e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006262:	6013      	str	r3, [r2, #0]
 8006264:	4b79      	ldr	r3, [pc, #484]	@ (800644c <HAL_RCC_OscConfig+0x278>)
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4a78      	ldr	r2, [pc, #480]	@ (800644c <HAL_RCC_OscConfig+0x278>)
 800626a:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800626e:	6013      	str	r3, [r2, #0]
 8006270:	4b76      	ldr	r3, [pc, #472]	@ (800644c <HAL_RCC_OscConfig+0x278>)
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	4a75      	ldr	r2, [pc, #468]	@ (800644c <HAL_RCC_OscConfig+0x278>)
 8006276:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800627a:	6013      	str	r3, [r2, #0]
 800627c:	e041      	b.n	8006302 <HAL_RCC_OscConfig+0x12e>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	685b      	ldr	r3, [r3, #4]
 8006282:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006286:	d112      	bne.n	80062ae <HAL_RCC_OscConfig+0xda>
 8006288:	4b70      	ldr	r3, [pc, #448]	@ (800644c <HAL_RCC_OscConfig+0x278>)
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	4a6f      	ldr	r2, [pc, #444]	@ (800644c <HAL_RCC_OscConfig+0x278>)
 800628e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006292:	6013      	str	r3, [r2, #0]
 8006294:	4b6d      	ldr	r3, [pc, #436]	@ (800644c <HAL_RCC_OscConfig+0x278>)
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4a6c      	ldr	r2, [pc, #432]	@ (800644c <HAL_RCC_OscConfig+0x278>)
 800629a:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800629e:	6013      	str	r3, [r2, #0]
 80062a0:	4b6a      	ldr	r3, [pc, #424]	@ (800644c <HAL_RCC_OscConfig+0x278>)
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	4a69      	ldr	r2, [pc, #420]	@ (800644c <HAL_RCC_OscConfig+0x278>)
 80062a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80062aa:	6013      	str	r3, [r2, #0]
 80062ac:	e029      	b.n	8006302 <HAL_RCC_OscConfig+0x12e>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	685b      	ldr	r3, [r3, #4]
 80062b2:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 80062b6:	d112      	bne.n	80062de <HAL_RCC_OscConfig+0x10a>
 80062b8:	4b64      	ldr	r3, [pc, #400]	@ (800644c <HAL_RCC_OscConfig+0x278>)
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	4a63      	ldr	r2, [pc, #396]	@ (800644c <HAL_RCC_OscConfig+0x278>)
 80062be:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80062c2:	6013      	str	r3, [r2, #0]
 80062c4:	4b61      	ldr	r3, [pc, #388]	@ (800644c <HAL_RCC_OscConfig+0x278>)
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4a60      	ldr	r2, [pc, #384]	@ (800644c <HAL_RCC_OscConfig+0x278>)
 80062ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80062ce:	6013      	str	r3, [r2, #0]
 80062d0:	4b5e      	ldr	r3, [pc, #376]	@ (800644c <HAL_RCC_OscConfig+0x278>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4a5d      	ldr	r2, [pc, #372]	@ (800644c <HAL_RCC_OscConfig+0x278>)
 80062d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80062da:	6013      	str	r3, [r2, #0]
 80062dc:	e011      	b.n	8006302 <HAL_RCC_OscConfig+0x12e>
 80062de:	4b5b      	ldr	r3, [pc, #364]	@ (800644c <HAL_RCC_OscConfig+0x278>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4a5a      	ldr	r2, [pc, #360]	@ (800644c <HAL_RCC_OscConfig+0x278>)
 80062e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80062e8:	6013      	str	r3, [r2, #0]
 80062ea:	4b58      	ldr	r3, [pc, #352]	@ (800644c <HAL_RCC_OscConfig+0x278>)
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	4a57      	ldr	r2, [pc, #348]	@ (800644c <HAL_RCC_OscConfig+0x278>)
 80062f0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80062f4:	6013      	str	r3, [r2, #0]
 80062f6:	4b55      	ldr	r3, [pc, #340]	@ (800644c <HAL_RCC_OscConfig+0x278>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4a54      	ldr	r2, [pc, #336]	@ (800644c <HAL_RCC_OscConfig+0x278>)
 80062fc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006300:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	685b      	ldr	r3, [r3, #4]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d013      	beq.n	8006332 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800630a:	f7fa feab 	bl	8001064 <HAL_GetTick>
 800630e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006310:	e008      	b.n	8006324 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006312:	f7fa fea7 	bl	8001064 <HAL_GetTick>
 8006316:	4602      	mov	r2, r0
 8006318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800631a:	1ad3      	subs	r3, r2, r3
 800631c:	2b64      	cmp	r3, #100	@ 0x64
 800631e:	d901      	bls.n	8006324 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8006320:	2303      	movs	r3, #3
 8006322:	e380      	b.n	8006a26 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006324:	4b49      	ldr	r3, [pc, #292]	@ (800644c <HAL_RCC_OscConfig+0x278>)
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800632c:	2b00      	cmp	r3, #0
 800632e:	d0f0      	beq.n	8006312 <HAL_RCC_OscConfig+0x13e>
 8006330:	e014      	b.n	800635c <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006332:	f7fa fe97 	bl	8001064 <HAL_GetTick>
 8006336:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006338:	e008      	b.n	800634c <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800633a:	f7fa fe93 	bl	8001064 <HAL_GetTick>
 800633e:	4602      	mov	r2, r0
 8006340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006342:	1ad3      	subs	r3, r2, r3
 8006344:	2b64      	cmp	r3, #100	@ 0x64
 8006346:	d901      	bls.n	800634c <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8006348:	2303      	movs	r3, #3
 800634a:	e36c      	b.n	8006a26 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800634c:	4b3f      	ldr	r3, [pc, #252]	@ (800644c <HAL_RCC_OscConfig+0x278>)
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006354:	2b00      	cmp	r3, #0
 8006356:	d1f0      	bne.n	800633a <HAL_RCC_OscConfig+0x166>
 8006358:	e000      	b.n	800635c <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800635a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f003 0302 	and.w	r3, r3, #2
 8006364:	2b00      	cmp	r3, #0
 8006366:	f000 808c 	beq.w	8006482 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800636a:	4b38      	ldr	r3, [pc, #224]	@ (800644c <HAL_RCC_OscConfig+0x278>)
 800636c:	691b      	ldr	r3, [r3, #16]
 800636e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006372:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006374:	4b35      	ldr	r3, [pc, #212]	@ (800644c <HAL_RCC_OscConfig+0x278>)
 8006376:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006378:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800637a:	6a3b      	ldr	r3, [r7, #32]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d007      	beq.n	8006390 <HAL_RCC_OscConfig+0x1bc>
 8006380:	6a3b      	ldr	r3, [r7, #32]
 8006382:	2b18      	cmp	r3, #24
 8006384:	d137      	bne.n	80063f6 <HAL_RCC_OscConfig+0x222>
 8006386:	69fb      	ldr	r3, [r7, #28]
 8006388:	f003 0303 	and.w	r3, r3, #3
 800638c:	2b00      	cmp	r3, #0
 800638e:	d132      	bne.n	80063f6 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006390:	4b2e      	ldr	r3, [pc, #184]	@ (800644c <HAL_RCC_OscConfig+0x278>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f003 0304 	and.w	r3, r3, #4
 8006398:	2b00      	cmp	r3, #0
 800639a:	d005      	beq.n	80063a8 <HAL_RCC_OscConfig+0x1d4>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	68db      	ldr	r3, [r3, #12]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d101      	bne.n	80063a8 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 80063a4:	2301      	movs	r3, #1
 80063a6:	e33e      	b.n	8006a26 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80063a8:	4b28      	ldr	r3, [pc, #160]	@ (800644c <HAL_RCC_OscConfig+0x278>)
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f023 0219 	bic.w	r2, r3, #25
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	68db      	ldr	r3, [r3, #12]
 80063b4:	4925      	ldr	r1, [pc, #148]	@ (800644c <HAL_RCC_OscConfig+0x278>)
 80063b6:	4313      	orrs	r3, r2
 80063b8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063ba:	f7fa fe53 	bl	8001064 <HAL_GetTick>
 80063be:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80063c0:	e008      	b.n	80063d4 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80063c2:	f7fa fe4f 	bl	8001064 <HAL_GetTick>
 80063c6:	4602      	mov	r2, r0
 80063c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063ca:	1ad3      	subs	r3, r2, r3
 80063cc:	2b02      	cmp	r3, #2
 80063ce:	d901      	bls.n	80063d4 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80063d0:	2303      	movs	r3, #3
 80063d2:	e328      	b.n	8006a26 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80063d4:	4b1d      	ldr	r3, [pc, #116]	@ (800644c <HAL_RCC_OscConfig+0x278>)
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f003 0304 	and.w	r3, r3, #4
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d0f0      	beq.n	80063c2 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063e0:	4b1a      	ldr	r3, [pc, #104]	@ (800644c <HAL_RCC_OscConfig+0x278>)
 80063e2:	685b      	ldr	r3, [r3, #4]
 80063e4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	691b      	ldr	r3, [r3, #16]
 80063ec:	061b      	lsls	r3, r3, #24
 80063ee:	4917      	ldr	r1, [pc, #92]	@ (800644c <HAL_RCC_OscConfig+0x278>)
 80063f0:	4313      	orrs	r3, r2
 80063f2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80063f4:	e045      	b.n	8006482 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	68db      	ldr	r3, [r3, #12]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d028      	beq.n	8006450 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80063fe:	4b13      	ldr	r3, [pc, #76]	@ (800644c <HAL_RCC_OscConfig+0x278>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f023 0219 	bic.w	r2, r3, #25
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	68db      	ldr	r3, [r3, #12]
 800640a:	4910      	ldr	r1, [pc, #64]	@ (800644c <HAL_RCC_OscConfig+0x278>)
 800640c:	4313      	orrs	r3, r2
 800640e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006410:	f7fa fe28 	bl	8001064 <HAL_GetTick>
 8006414:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006416:	e008      	b.n	800642a <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006418:	f7fa fe24 	bl	8001064 <HAL_GetTick>
 800641c:	4602      	mov	r2, r0
 800641e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006420:	1ad3      	subs	r3, r2, r3
 8006422:	2b02      	cmp	r3, #2
 8006424:	d901      	bls.n	800642a <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8006426:	2303      	movs	r3, #3
 8006428:	e2fd      	b.n	8006a26 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800642a:	4b08      	ldr	r3, [pc, #32]	@ (800644c <HAL_RCC_OscConfig+0x278>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f003 0304 	and.w	r3, r3, #4
 8006432:	2b00      	cmp	r3, #0
 8006434:	d0f0      	beq.n	8006418 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006436:	4b05      	ldr	r3, [pc, #20]	@ (800644c <HAL_RCC_OscConfig+0x278>)
 8006438:	685b      	ldr	r3, [r3, #4]
 800643a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	691b      	ldr	r3, [r3, #16]
 8006442:	061b      	lsls	r3, r3, #24
 8006444:	4901      	ldr	r1, [pc, #4]	@ (800644c <HAL_RCC_OscConfig+0x278>)
 8006446:	4313      	orrs	r3, r2
 8006448:	604b      	str	r3, [r1, #4]
 800644a:	e01a      	b.n	8006482 <HAL_RCC_OscConfig+0x2ae>
 800644c:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006450:	4b97      	ldr	r3, [pc, #604]	@ (80066b0 <HAL_RCC_OscConfig+0x4dc>)
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4a96      	ldr	r2, [pc, #600]	@ (80066b0 <HAL_RCC_OscConfig+0x4dc>)
 8006456:	f023 0301 	bic.w	r3, r3, #1
 800645a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800645c:	f7fa fe02 	bl	8001064 <HAL_GetTick>
 8006460:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006462:	e008      	b.n	8006476 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006464:	f7fa fdfe 	bl	8001064 <HAL_GetTick>
 8006468:	4602      	mov	r2, r0
 800646a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800646c:	1ad3      	subs	r3, r2, r3
 800646e:	2b02      	cmp	r3, #2
 8006470:	d901      	bls.n	8006476 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8006472:	2303      	movs	r3, #3
 8006474:	e2d7      	b.n	8006a26 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006476:	4b8e      	ldr	r3, [pc, #568]	@ (80066b0 <HAL_RCC_OscConfig+0x4dc>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f003 0304 	and.w	r3, r3, #4
 800647e:	2b00      	cmp	r3, #0
 8006480:	d1f0      	bne.n	8006464 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f003 0310 	and.w	r3, r3, #16
 800648a:	2b00      	cmp	r3, #0
 800648c:	d06a      	beq.n	8006564 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800648e:	4b88      	ldr	r3, [pc, #544]	@ (80066b0 <HAL_RCC_OscConfig+0x4dc>)
 8006490:	691b      	ldr	r3, [r3, #16]
 8006492:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006496:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006498:	4b85      	ldr	r3, [pc, #532]	@ (80066b0 <HAL_RCC_OscConfig+0x4dc>)
 800649a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800649c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800649e:	69bb      	ldr	r3, [r7, #24]
 80064a0:	2b08      	cmp	r3, #8
 80064a2:	d007      	beq.n	80064b4 <HAL_RCC_OscConfig+0x2e0>
 80064a4:	69bb      	ldr	r3, [r7, #24]
 80064a6:	2b18      	cmp	r3, #24
 80064a8:	d11b      	bne.n	80064e2 <HAL_RCC_OscConfig+0x30e>
 80064aa:	697b      	ldr	r3, [r7, #20]
 80064ac:	f003 0303 	and.w	r3, r3, #3
 80064b0:	2b01      	cmp	r3, #1
 80064b2:	d116      	bne.n	80064e2 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80064b4:	4b7e      	ldr	r3, [pc, #504]	@ (80066b0 <HAL_RCC_OscConfig+0x4dc>)
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d005      	beq.n	80064cc <HAL_RCC_OscConfig+0x2f8>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	69db      	ldr	r3, [r3, #28]
 80064c4:	2b80      	cmp	r3, #128	@ 0x80
 80064c6:	d001      	beq.n	80064cc <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 80064c8:	2301      	movs	r3, #1
 80064ca:	e2ac      	b.n	8006a26 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80064cc:	4b78      	ldr	r3, [pc, #480]	@ (80066b0 <HAL_RCC_OscConfig+0x4dc>)
 80064ce:	68db      	ldr	r3, [r3, #12]
 80064d0:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6a1b      	ldr	r3, [r3, #32]
 80064d8:	061b      	lsls	r3, r3, #24
 80064da:	4975      	ldr	r1, [pc, #468]	@ (80066b0 <HAL_RCC_OscConfig+0x4dc>)
 80064dc:	4313      	orrs	r3, r2
 80064de:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80064e0:	e040      	b.n	8006564 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	69db      	ldr	r3, [r3, #28]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d023      	beq.n	8006532 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80064ea:	4b71      	ldr	r3, [pc, #452]	@ (80066b0 <HAL_RCC_OscConfig+0x4dc>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	4a70      	ldr	r2, [pc, #448]	@ (80066b0 <HAL_RCC_OscConfig+0x4dc>)
 80064f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80064f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064f6:	f7fa fdb5 	bl	8001064 <HAL_GetTick>
 80064fa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80064fc:	e008      	b.n	8006510 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80064fe:	f7fa fdb1 	bl	8001064 <HAL_GetTick>
 8006502:	4602      	mov	r2, r0
 8006504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006506:	1ad3      	subs	r3, r2, r3
 8006508:	2b02      	cmp	r3, #2
 800650a:	d901      	bls.n	8006510 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 800650c:	2303      	movs	r3, #3
 800650e:	e28a      	b.n	8006a26 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006510:	4b67      	ldr	r3, [pc, #412]	@ (80066b0 <HAL_RCC_OscConfig+0x4dc>)
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006518:	2b00      	cmp	r3, #0
 800651a:	d0f0      	beq.n	80064fe <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800651c:	4b64      	ldr	r3, [pc, #400]	@ (80066b0 <HAL_RCC_OscConfig+0x4dc>)
 800651e:	68db      	ldr	r3, [r3, #12]
 8006520:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6a1b      	ldr	r3, [r3, #32]
 8006528:	061b      	lsls	r3, r3, #24
 800652a:	4961      	ldr	r1, [pc, #388]	@ (80066b0 <HAL_RCC_OscConfig+0x4dc>)
 800652c:	4313      	orrs	r3, r2
 800652e:	60cb      	str	r3, [r1, #12]
 8006530:	e018      	b.n	8006564 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006532:	4b5f      	ldr	r3, [pc, #380]	@ (80066b0 <HAL_RCC_OscConfig+0x4dc>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4a5e      	ldr	r2, [pc, #376]	@ (80066b0 <HAL_RCC_OscConfig+0x4dc>)
 8006538:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800653c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800653e:	f7fa fd91 	bl	8001064 <HAL_GetTick>
 8006542:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006544:	e008      	b.n	8006558 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006546:	f7fa fd8d 	bl	8001064 <HAL_GetTick>
 800654a:	4602      	mov	r2, r0
 800654c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800654e:	1ad3      	subs	r3, r2, r3
 8006550:	2b02      	cmp	r3, #2
 8006552:	d901      	bls.n	8006558 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8006554:	2303      	movs	r3, #3
 8006556:	e266      	b.n	8006a26 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006558:	4b55      	ldr	r3, [pc, #340]	@ (80066b0 <HAL_RCC_OscConfig+0x4dc>)
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006560:	2b00      	cmp	r3, #0
 8006562:	d1f0      	bne.n	8006546 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f003 0308 	and.w	r3, r3, #8
 800656c:	2b00      	cmp	r3, #0
 800656e:	d036      	beq.n	80065de <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	695b      	ldr	r3, [r3, #20]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d019      	beq.n	80065ac <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006578:	4b4d      	ldr	r3, [pc, #308]	@ (80066b0 <HAL_RCC_OscConfig+0x4dc>)
 800657a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800657c:	4a4c      	ldr	r2, [pc, #304]	@ (80066b0 <HAL_RCC_OscConfig+0x4dc>)
 800657e:	f043 0301 	orr.w	r3, r3, #1
 8006582:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006584:	f7fa fd6e 	bl	8001064 <HAL_GetTick>
 8006588:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800658a:	e008      	b.n	800659e <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800658c:	f7fa fd6a 	bl	8001064 <HAL_GetTick>
 8006590:	4602      	mov	r2, r0
 8006592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006594:	1ad3      	subs	r3, r2, r3
 8006596:	2b02      	cmp	r3, #2
 8006598:	d901      	bls.n	800659e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800659a:	2303      	movs	r3, #3
 800659c:	e243      	b.n	8006a26 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800659e:	4b44      	ldr	r3, [pc, #272]	@ (80066b0 <HAL_RCC_OscConfig+0x4dc>)
 80065a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80065a2:	f003 0302 	and.w	r3, r3, #2
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d0f0      	beq.n	800658c <HAL_RCC_OscConfig+0x3b8>
 80065aa:	e018      	b.n	80065de <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80065ac:	4b40      	ldr	r3, [pc, #256]	@ (80066b0 <HAL_RCC_OscConfig+0x4dc>)
 80065ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80065b0:	4a3f      	ldr	r2, [pc, #252]	@ (80066b0 <HAL_RCC_OscConfig+0x4dc>)
 80065b2:	f023 0301 	bic.w	r3, r3, #1
 80065b6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065b8:	f7fa fd54 	bl	8001064 <HAL_GetTick>
 80065bc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80065be:	e008      	b.n	80065d2 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80065c0:	f7fa fd50 	bl	8001064 <HAL_GetTick>
 80065c4:	4602      	mov	r2, r0
 80065c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065c8:	1ad3      	subs	r3, r2, r3
 80065ca:	2b02      	cmp	r3, #2
 80065cc:	d901      	bls.n	80065d2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80065ce:	2303      	movs	r3, #3
 80065d0:	e229      	b.n	8006a26 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80065d2:	4b37      	ldr	r3, [pc, #220]	@ (80066b0 <HAL_RCC_OscConfig+0x4dc>)
 80065d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80065d6:	f003 0302 	and.w	r3, r3, #2
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d1f0      	bne.n	80065c0 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f003 0320 	and.w	r3, r3, #32
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d036      	beq.n	8006658 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	699b      	ldr	r3, [r3, #24]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d019      	beq.n	8006626 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80065f2:	4b2f      	ldr	r3, [pc, #188]	@ (80066b0 <HAL_RCC_OscConfig+0x4dc>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	4a2e      	ldr	r2, [pc, #184]	@ (80066b0 <HAL_RCC_OscConfig+0x4dc>)
 80065f8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80065fc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80065fe:	f7fa fd31 	bl	8001064 <HAL_GetTick>
 8006602:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006604:	e008      	b.n	8006618 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006606:	f7fa fd2d 	bl	8001064 <HAL_GetTick>
 800660a:	4602      	mov	r2, r0
 800660c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800660e:	1ad3      	subs	r3, r2, r3
 8006610:	2b02      	cmp	r3, #2
 8006612:	d901      	bls.n	8006618 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8006614:	2303      	movs	r3, #3
 8006616:	e206      	b.n	8006a26 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006618:	4b25      	ldr	r3, [pc, #148]	@ (80066b0 <HAL_RCC_OscConfig+0x4dc>)
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006620:	2b00      	cmp	r3, #0
 8006622:	d0f0      	beq.n	8006606 <HAL_RCC_OscConfig+0x432>
 8006624:	e018      	b.n	8006658 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006626:	4b22      	ldr	r3, [pc, #136]	@ (80066b0 <HAL_RCC_OscConfig+0x4dc>)
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	4a21      	ldr	r2, [pc, #132]	@ (80066b0 <HAL_RCC_OscConfig+0x4dc>)
 800662c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006630:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006632:	f7fa fd17 	bl	8001064 <HAL_GetTick>
 8006636:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006638:	e008      	b.n	800664c <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800663a:	f7fa fd13 	bl	8001064 <HAL_GetTick>
 800663e:	4602      	mov	r2, r0
 8006640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006642:	1ad3      	subs	r3, r2, r3
 8006644:	2b02      	cmp	r3, #2
 8006646:	d901      	bls.n	800664c <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8006648:	2303      	movs	r3, #3
 800664a:	e1ec      	b.n	8006a26 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800664c:	4b18      	ldr	r3, [pc, #96]	@ (80066b0 <HAL_RCC_OscConfig+0x4dc>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006654:	2b00      	cmp	r3, #0
 8006656:	d1f0      	bne.n	800663a <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f003 0304 	and.w	r3, r3, #4
 8006660:	2b00      	cmp	r3, #0
 8006662:	f000 80af 	beq.w	80067c4 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006666:	4b13      	ldr	r3, [pc, #76]	@ (80066b4 <HAL_RCC_OscConfig+0x4e0>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	4a12      	ldr	r2, [pc, #72]	@ (80066b4 <HAL_RCC_OscConfig+0x4e0>)
 800666c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006670:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006672:	f7fa fcf7 	bl	8001064 <HAL_GetTick>
 8006676:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006678:	e008      	b.n	800668c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800667a:	f7fa fcf3 	bl	8001064 <HAL_GetTick>
 800667e:	4602      	mov	r2, r0
 8006680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006682:	1ad3      	subs	r3, r2, r3
 8006684:	2b64      	cmp	r3, #100	@ 0x64
 8006686:	d901      	bls.n	800668c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8006688:	2303      	movs	r3, #3
 800668a:	e1cc      	b.n	8006a26 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800668c:	4b09      	ldr	r3, [pc, #36]	@ (80066b4 <HAL_RCC_OscConfig+0x4e0>)
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006694:	2b00      	cmp	r3, #0
 8006696:	d0f0      	beq.n	800667a <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	689b      	ldr	r3, [r3, #8]
 800669c:	2b01      	cmp	r3, #1
 800669e:	d10b      	bne.n	80066b8 <HAL_RCC_OscConfig+0x4e4>
 80066a0:	4b03      	ldr	r3, [pc, #12]	@ (80066b0 <HAL_RCC_OscConfig+0x4dc>)
 80066a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066a4:	4a02      	ldr	r2, [pc, #8]	@ (80066b0 <HAL_RCC_OscConfig+0x4dc>)
 80066a6:	f043 0301 	orr.w	r3, r3, #1
 80066aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80066ac:	e05b      	b.n	8006766 <HAL_RCC_OscConfig+0x592>
 80066ae:	bf00      	nop
 80066b0:	58024400 	.word	0x58024400
 80066b4:	58024800 	.word	0x58024800
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	689b      	ldr	r3, [r3, #8]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d112      	bne.n	80066e6 <HAL_RCC_OscConfig+0x512>
 80066c0:	4b9d      	ldr	r3, [pc, #628]	@ (8006938 <HAL_RCC_OscConfig+0x764>)
 80066c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066c4:	4a9c      	ldr	r2, [pc, #624]	@ (8006938 <HAL_RCC_OscConfig+0x764>)
 80066c6:	f023 0301 	bic.w	r3, r3, #1
 80066ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80066cc:	4b9a      	ldr	r3, [pc, #616]	@ (8006938 <HAL_RCC_OscConfig+0x764>)
 80066ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066d0:	4a99      	ldr	r2, [pc, #612]	@ (8006938 <HAL_RCC_OscConfig+0x764>)
 80066d2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80066d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80066d8:	4b97      	ldr	r3, [pc, #604]	@ (8006938 <HAL_RCC_OscConfig+0x764>)
 80066da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066dc:	4a96      	ldr	r2, [pc, #600]	@ (8006938 <HAL_RCC_OscConfig+0x764>)
 80066de:	f023 0304 	bic.w	r3, r3, #4
 80066e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80066e4:	e03f      	b.n	8006766 <HAL_RCC_OscConfig+0x592>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	689b      	ldr	r3, [r3, #8]
 80066ea:	2b05      	cmp	r3, #5
 80066ec:	d112      	bne.n	8006714 <HAL_RCC_OscConfig+0x540>
 80066ee:	4b92      	ldr	r3, [pc, #584]	@ (8006938 <HAL_RCC_OscConfig+0x764>)
 80066f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066f2:	4a91      	ldr	r2, [pc, #580]	@ (8006938 <HAL_RCC_OscConfig+0x764>)
 80066f4:	f043 0304 	orr.w	r3, r3, #4
 80066f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80066fa:	4b8f      	ldr	r3, [pc, #572]	@ (8006938 <HAL_RCC_OscConfig+0x764>)
 80066fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066fe:	4a8e      	ldr	r2, [pc, #568]	@ (8006938 <HAL_RCC_OscConfig+0x764>)
 8006700:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006704:	6713      	str	r3, [r2, #112]	@ 0x70
 8006706:	4b8c      	ldr	r3, [pc, #560]	@ (8006938 <HAL_RCC_OscConfig+0x764>)
 8006708:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800670a:	4a8b      	ldr	r2, [pc, #556]	@ (8006938 <HAL_RCC_OscConfig+0x764>)
 800670c:	f043 0301 	orr.w	r3, r3, #1
 8006710:	6713      	str	r3, [r2, #112]	@ 0x70
 8006712:	e028      	b.n	8006766 <HAL_RCC_OscConfig+0x592>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	689b      	ldr	r3, [r3, #8]
 8006718:	2b85      	cmp	r3, #133	@ 0x85
 800671a:	d112      	bne.n	8006742 <HAL_RCC_OscConfig+0x56e>
 800671c:	4b86      	ldr	r3, [pc, #536]	@ (8006938 <HAL_RCC_OscConfig+0x764>)
 800671e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006720:	4a85      	ldr	r2, [pc, #532]	@ (8006938 <HAL_RCC_OscConfig+0x764>)
 8006722:	f043 0304 	orr.w	r3, r3, #4
 8006726:	6713      	str	r3, [r2, #112]	@ 0x70
 8006728:	4b83      	ldr	r3, [pc, #524]	@ (8006938 <HAL_RCC_OscConfig+0x764>)
 800672a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800672c:	4a82      	ldr	r2, [pc, #520]	@ (8006938 <HAL_RCC_OscConfig+0x764>)
 800672e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006732:	6713      	str	r3, [r2, #112]	@ 0x70
 8006734:	4b80      	ldr	r3, [pc, #512]	@ (8006938 <HAL_RCC_OscConfig+0x764>)
 8006736:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006738:	4a7f      	ldr	r2, [pc, #508]	@ (8006938 <HAL_RCC_OscConfig+0x764>)
 800673a:	f043 0301 	orr.w	r3, r3, #1
 800673e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006740:	e011      	b.n	8006766 <HAL_RCC_OscConfig+0x592>
 8006742:	4b7d      	ldr	r3, [pc, #500]	@ (8006938 <HAL_RCC_OscConfig+0x764>)
 8006744:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006746:	4a7c      	ldr	r2, [pc, #496]	@ (8006938 <HAL_RCC_OscConfig+0x764>)
 8006748:	f023 0301 	bic.w	r3, r3, #1
 800674c:	6713      	str	r3, [r2, #112]	@ 0x70
 800674e:	4b7a      	ldr	r3, [pc, #488]	@ (8006938 <HAL_RCC_OscConfig+0x764>)
 8006750:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006752:	4a79      	ldr	r2, [pc, #484]	@ (8006938 <HAL_RCC_OscConfig+0x764>)
 8006754:	f023 0304 	bic.w	r3, r3, #4
 8006758:	6713      	str	r3, [r2, #112]	@ 0x70
 800675a:	4b77      	ldr	r3, [pc, #476]	@ (8006938 <HAL_RCC_OscConfig+0x764>)
 800675c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800675e:	4a76      	ldr	r2, [pc, #472]	@ (8006938 <HAL_RCC_OscConfig+0x764>)
 8006760:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006764:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	689b      	ldr	r3, [r3, #8]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d015      	beq.n	800679a <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800676e:	f7fa fc79 	bl	8001064 <HAL_GetTick>
 8006772:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006774:	e00a      	b.n	800678c <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006776:	f7fa fc75 	bl	8001064 <HAL_GetTick>
 800677a:	4602      	mov	r2, r0
 800677c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800677e:	1ad3      	subs	r3, r2, r3
 8006780:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006784:	4293      	cmp	r3, r2
 8006786:	d901      	bls.n	800678c <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8006788:	2303      	movs	r3, #3
 800678a:	e14c      	b.n	8006a26 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800678c:	4b6a      	ldr	r3, [pc, #424]	@ (8006938 <HAL_RCC_OscConfig+0x764>)
 800678e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006790:	f003 0302 	and.w	r3, r3, #2
 8006794:	2b00      	cmp	r3, #0
 8006796:	d0ee      	beq.n	8006776 <HAL_RCC_OscConfig+0x5a2>
 8006798:	e014      	b.n	80067c4 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800679a:	f7fa fc63 	bl	8001064 <HAL_GetTick>
 800679e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80067a0:	e00a      	b.n	80067b8 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80067a2:	f7fa fc5f 	bl	8001064 <HAL_GetTick>
 80067a6:	4602      	mov	r2, r0
 80067a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067aa:	1ad3      	subs	r3, r2, r3
 80067ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d901      	bls.n	80067b8 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 80067b4:	2303      	movs	r3, #3
 80067b6:	e136      	b.n	8006a26 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80067b8:	4b5f      	ldr	r3, [pc, #380]	@ (8006938 <HAL_RCC_OscConfig+0x764>)
 80067ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067bc:	f003 0302 	and.w	r3, r3, #2
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d1ee      	bne.n	80067a2 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	f000 812b 	beq.w	8006a24 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80067ce:	4b5a      	ldr	r3, [pc, #360]	@ (8006938 <HAL_RCC_OscConfig+0x764>)
 80067d0:	691b      	ldr	r3, [r3, #16]
 80067d2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80067d6:	2b18      	cmp	r3, #24
 80067d8:	f000 80bb 	beq.w	8006952 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067e0:	2b02      	cmp	r3, #2
 80067e2:	f040 8095 	bne.w	8006910 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80067e6:	4b54      	ldr	r3, [pc, #336]	@ (8006938 <HAL_RCC_OscConfig+0x764>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	4a53      	ldr	r2, [pc, #332]	@ (8006938 <HAL_RCC_OscConfig+0x764>)
 80067ec:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80067f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067f2:	f7fa fc37 	bl	8001064 <HAL_GetTick>
 80067f6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80067f8:	e008      	b.n	800680c <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80067fa:	f7fa fc33 	bl	8001064 <HAL_GetTick>
 80067fe:	4602      	mov	r2, r0
 8006800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006802:	1ad3      	subs	r3, r2, r3
 8006804:	2b02      	cmp	r3, #2
 8006806:	d901      	bls.n	800680c <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8006808:	2303      	movs	r3, #3
 800680a:	e10c      	b.n	8006a26 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800680c:	4b4a      	ldr	r3, [pc, #296]	@ (8006938 <HAL_RCC_OscConfig+0x764>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006814:	2b00      	cmp	r3, #0
 8006816:	d1f0      	bne.n	80067fa <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006818:	4b47      	ldr	r3, [pc, #284]	@ (8006938 <HAL_RCC_OscConfig+0x764>)
 800681a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800681c:	4b47      	ldr	r3, [pc, #284]	@ (800693c <HAL_RCC_OscConfig+0x768>)
 800681e:	4013      	ands	r3, r2
 8006820:	687a      	ldr	r2, [r7, #4]
 8006822:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8006824:	687a      	ldr	r2, [r7, #4]
 8006826:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006828:	0112      	lsls	r2, r2, #4
 800682a:	430a      	orrs	r2, r1
 800682c:	4942      	ldr	r1, [pc, #264]	@ (8006938 <HAL_RCC_OscConfig+0x764>)
 800682e:	4313      	orrs	r3, r2
 8006830:	628b      	str	r3, [r1, #40]	@ 0x28
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006836:	3b01      	subs	r3, #1
 8006838:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006840:	3b01      	subs	r3, #1
 8006842:	025b      	lsls	r3, r3, #9
 8006844:	b29b      	uxth	r3, r3
 8006846:	431a      	orrs	r2, r3
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800684c:	3b01      	subs	r3, #1
 800684e:	041b      	lsls	r3, r3, #16
 8006850:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006854:	431a      	orrs	r2, r3
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800685a:	3b01      	subs	r3, #1
 800685c:	061b      	lsls	r3, r3, #24
 800685e:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006862:	4935      	ldr	r1, [pc, #212]	@ (8006938 <HAL_RCC_OscConfig+0x764>)
 8006864:	4313      	orrs	r3, r2
 8006866:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8006868:	4b33      	ldr	r3, [pc, #204]	@ (8006938 <HAL_RCC_OscConfig+0x764>)
 800686a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800686c:	4a32      	ldr	r2, [pc, #200]	@ (8006938 <HAL_RCC_OscConfig+0x764>)
 800686e:	f023 0301 	bic.w	r3, r3, #1
 8006872:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006874:	4b30      	ldr	r3, [pc, #192]	@ (8006938 <HAL_RCC_OscConfig+0x764>)
 8006876:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006878:	4b31      	ldr	r3, [pc, #196]	@ (8006940 <HAL_RCC_OscConfig+0x76c>)
 800687a:	4013      	ands	r3, r2
 800687c:	687a      	ldr	r2, [r7, #4]
 800687e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006880:	00d2      	lsls	r2, r2, #3
 8006882:	492d      	ldr	r1, [pc, #180]	@ (8006938 <HAL_RCC_OscConfig+0x764>)
 8006884:	4313      	orrs	r3, r2
 8006886:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006888:	4b2b      	ldr	r3, [pc, #172]	@ (8006938 <HAL_RCC_OscConfig+0x764>)
 800688a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800688c:	f023 020c 	bic.w	r2, r3, #12
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006894:	4928      	ldr	r1, [pc, #160]	@ (8006938 <HAL_RCC_OscConfig+0x764>)
 8006896:	4313      	orrs	r3, r2
 8006898:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800689a:	4b27      	ldr	r3, [pc, #156]	@ (8006938 <HAL_RCC_OscConfig+0x764>)
 800689c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800689e:	f023 0202 	bic.w	r2, r3, #2
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068a6:	4924      	ldr	r1, [pc, #144]	@ (8006938 <HAL_RCC_OscConfig+0x764>)
 80068a8:	4313      	orrs	r3, r2
 80068aa:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80068ac:	4b22      	ldr	r3, [pc, #136]	@ (8006938 <HAL_RCC_OscConfig+0x764>)
 80068ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068b0:	4a21      	ldr	r2, [pc, #132]	@ (8006938 <HAL_RCC_OscConfig+0x764>)
 80068b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80068b6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80068b8:	4b1f      	ldr	r3, [pc, #124]	@ (8006938 <HAL_RCC_OscConfig+0x764>)
 80068ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068bc:	4a1e      	ldr	r2, [pc, #120]	@ (8006938 <HAL_RCC_OscConfig+0x764>)
 80068be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80068c2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80068c4:	4b1c      	ldr	r3, [pc, #112]	@ (8006938 <HAL_RCC_OscConfig+0x764>)
 80068c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068c8:	4a1b      	ldr	r2, [pc, #108]	@ (8006938 <HAL_RCC_OscConfig+0x764>)
 80068ca:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80068ce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80068d0:	4b19      	ldr	r3, [pc, #100]	@ (8006938 <HAL_RCC_OscConfig+0x764>)
 80068d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068d4:	4a18      	ldr	r2, [pc, #96]	@ (8006938 <HAL_RCC_OscConfig+0x764>)
 80068d6:	f043 0301 	orr.w	r3, r3, #1
 80068da:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80068dc:	4b16      	ldr	r3, [pc, #88]	@ (8006938 <HAL_RCC_OscConfig+0x764>)
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	4a15      	ldr	r2, [pc, #84]	@ (8006938 <HAL_RCC_OscConfig+0x764>)
 80068e2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80068e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068e8:	f7fa fbbc 	bl	8001064 <HAL_GetTick>
 80068ec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80068ee:	e008      	b.n	8006902 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80068f0:	f7fa fbb8 	bl	8001064 <HAL_GetTick>
 80068f4:	4602      	mov	r2, r0
 80068f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068f8:	1ad3      	subs	r3, r2, r3
 80068fa:	2b02      	cmp	r3, #2
 80068fc:	d901      	bls.n	8006902 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 80068fe:	2303      	movs	r3, #3
 8006900:	e091      	b.n	8006a26 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006902:	4b0d      	ldr	r3, [pc, #52]	@ (8006938 <HAL_RCC_OscConfig+0x764>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800690a:	2b00      	cmp	r3, #0
 800690c:	d0f0      	beq.n	80068f0 <HAL_RCC_OscConfig+0x71c>
 800690e:	e089      	b.n	8006a24 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006910:	4b09      	ldr	r3, [pc, #36]	@ (8006938 <HAL_RCC_OscConfig+0x764>)
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	4a08      	ldr	r2, [pc, #32]	@ (8006938 <HAL_RCC_OscConfig+0x764>)
 8006916:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800691a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800691c:	f7fa fba2 	bl	8001064 <HAL_GetTick>
 8006920:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006922:	e00f      	b.n	8006944 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006924:	f7fa fb9e 	bl	8001064 <HAL_GetTick>
 8006928:	4602      	mov	r2, r0
 800692a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800692c:	1ad3      	subs	r3, r2, r3
 800692e:	2b02      	cmp	r3, #2
 8006930:	d908      	bls.n	8006944 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8006932:	2303      	movs	r3, #3
 8006934:	e077      	b.n	8006a26 <HAL_RCC_OscConfig+0x852>
 8006936:	bf00      	nop
 8006938:	58024400 	.word	0x58024400
 800693c:	fffffc0c 	.word	0xfffffc0c
 8006940:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006944:	4b3a      	ldr	r3, [pc, #232]	@ (8006a30 <HAL_RCC_OscConfig+0x85c>)
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800694c:	2b00      	cmp	r3, #0
 800694e:	d1e9      	bne.n	8006924 <HAL_RCC_OscConfig+0x750>
 8006950:	e068      	b.n	8006a24 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006952:	4b37      	ldr	r3, [pc, #220]	@ (8006a30 <HAL_RCC_OscConfig+0x85c>)
 8006954:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006956:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006958:	4b35      	ldr	r3, [pc, #212]	@ (8006a30 <HAL_RCC_OscConfig+0x85c>)
 800695a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800695c:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006962:	2b01      	cmp	r3, #1
 8006964:	d031      	beq.n	80069ca <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006966:	693b      	ldr	r3, [r7, #16]
 8006968:	f003 0203 	and.w	r2, r3, #3
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006970:	429a      	cmp	r2, r3
 8006972:	d12a      	bne.n	80069ca <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006974:	693b      	ldr	r3, [r7, #16]
 8006976:	091b      	lsrs	r3, r3, #4
 8006978:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006980:	429a      	cmp	r2, r3
 8006982:	d122      	bne.n	80069ca <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800698e:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006990:	429a      	cmp	r2, r3
 8006992:	d11a      	bne.n	80069ca <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	0a5b      	lsrs	r3, r3, #9
 8006998:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80069a0:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80069a2:	429a      	cmp	r2, r3
 80069a4:	d111      	bne.n	80069ca <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	0c1b      	lsrs	r3, r3, #16
 80069aa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069b2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80069b4:	429a      	cmp	r2, r3
 80069b6:	d108      	bne.n	80069ca <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	0e1b      	lsrs	r3, r3, #24
 80069bc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069c4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80069c6:	429a      	cmp	r2, r3
 80069c8:	d001      	beq.n	80069ce <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 80069ca:	2301      	movs	r3, #1
 80069cc:	e02b      	b.n	8006a26 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80069ce:	4b18      	ldr	r3, [pc, #96]	@ (8006a30 <HAL_RCC_OscConfig+0x85c>)
 80069d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80069d2:	08db      	lsrs	r3, r3, #3
 80069d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80069d8:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80069de:	693a      	ldr	r2, [r7, #16]
 80069e0:	429a      	cmp	r2, r3
 80069e2:	d01f      	beq.n	8006a24 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80069e4:	4b12      	ldr	r3, [pc, #72]	@ (8006a30 <HAL_RCC_OscConfig+0x85c>)
 80069e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069e8:	4a11      	ldr	r2, [pc, #68]	@ (8006a30 <HAL_RCC_OscConfig+0x85c>)
 80069ea:	f023 0301 	bic.w	r3, r3, #1
 80069ee:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80069f0:	f7fa fb38 	bl	8001064 <HAL_GetTick>
 80069f4:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80069f6:	bf00      	nop
 80069f8:	f7fa fb34 	bl	8001064 <HAL_GetTick>
 80069fc:	4602      	mov	r2, r0
 80069fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d0f9      	beq.n	80069f8 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006a04:	4b0a      	ldr	r3, [pc, #40]	@ (8006a30 <HAL_RCC_OscConfig+0x85c>)
 8006a06:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006a08:	4b0a      	ldr	r3, [pc, #40]	@ (8006a34 <HAL_RCC_OscConfig+0x860>)
 8006a0a:	4013      	ands	r3, r2
 8006a0c:	687a      	ldr	r2, [r7, #4]
 8006a0e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006a10:	00d2      	lsls	r2, r2, #3
 8006a12:	4907      	ldr	r1, [pc, #28]	@ (8006a30 <HAL_RCC_OscConfig+0x85c>)
 8006a14:	4313      	orrs	r3, r2
 8006a16:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8006a18:	4b05      	ldr	r3, [pc, #20]	@ (8006a30 <HAL_RCC_OscConfig+0x85c>)
 8006a1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a1c:	4a04      	ldr	r2, [pc, #16]	@ (8006a30 <HAL_RCC_OscConfig+0x85c>)
 8006a1e:	f043 0301 	orr.w	r3, r3, #1
 8006a22:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8006a24:	2300      	movs	r3, #0
}
 8006a26:	4618      	mov	r0, r3
 8006a28:	3730      	adds	r7, #48	@ 0x30
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bd80      	pop	{r7, pc}
 8006a2e:	bf00      	nop
 8006a30:	58024400 	.word	0x58024400
 8006a34:	ffff0007 	.word	0xffff0007

08006a38 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b086      	sub	sp, #24
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
 8006a40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d101      	bne.n	8006a4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006a48:	2301      	movs	r3, #1
 8006a4a:	e19c      	b.n	8006d86 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006a4c:	4b8a      	ldr	r3, [pc, #552]	@ (8006c78 <HAL_RCC_ClockConfig+0x240>)
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f003 030f 	and.w	r3, r3, #15
 8006a54:	683a      	ldr	r2, [r7, #0]
 8006a56:	429a      	cmp	r2, r3
 8006a58:	d910      	bls.n	8006a7c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a5a:	4b87      	ldr	r3, [pc, #540]	@ (8006c78 <HAL_RCC_ClockConfig+0x240>)
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f023 020f 	bic.w	r2, r3, #15
 8006a62:	4985      	ldr	r1, [pc, #532]	@ (8006c78 <HAL_RCC_ClockConfig+0x240>)
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	4313      	orrs	r3, r2
 8006a68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a6a:	4b83      	ldr	r3, [pc, #524]	@ (8006c78 <HAL_RCC_ClockConfig+0x240>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f003 030f 	and.w	r3, r3, #15
 8006a72:	683a      	ldr	r2, [r7, #0]
 8006a74:	429a      	cmp	r2, r3
 8006a76:	d001      	beq.n	8006a7c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006a78:	2301      	movs	r3, #1
 8006a7a:	e184      	b.n	8006d86 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f003 0304 	and.w	r3, r3, #4
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d010      	beq.n	8006aaa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	691a      	ldr	r2, [r3, #16]
 8006a8c:	4b7b      	ldr	r3, [pc, #492]	@ (8006c7c <HAL_RCC_ClockConfig+0x244>)
 8006a8e:	699b      	ldr	r3, [r3, #24]
 8006a90:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006a94:	429a      	cmp	r2, r3
 8006a96:	d908      	bls.n	8006aaa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006a98:	4b78      	ldr	r3, [pc, #480]	@ (8006c7c <HAL_RCC_ClockConfig+0x244>)
 8006a9a:	699b      	ldr	r3, [r3, #24]
 8006a9c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	691b      	ldr	r3, [r3, #16]
 8006aa4:	4975      	ldr	r1, [pc, #468]	@ (8006c7c <HAL_RCC_ClockConfig+0x244>)
 8006aa6:	4313      	orrs	r3, r2
 8006aa8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f003 0308 	and.w	r3, r3, #8
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d010      	beq.n	8006ad8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	695a      	ldr	r2, [r3, #20]
 8006aba:	4b70      	ldr	r3, [pc, #448]	@ (8006c7c <HAL_RCC_ClockConfig+0x244>)
 8006abc:	69db      	ldr	r3, [r3, #28]
 8006abe:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006ac2:	429a      	cmp	r2, r3
 8006ac4:	d908      	bls.n	8006ad8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006ac6:	4b6d      	ldr	r3, [pc, #436]	@ (8006c7c <HAL_RCC_ClockConfig+0x244>)
 8006ac8:	69db      	ldr	r3, [r3, #28]
 8006aca:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	695b      	ldr	r3, [r3, #20]
 8006ad2:	496a      	ldr	r1, [pc, #424]	@ (8006c7c <HAL_RCC_ClockConfig+0x244>)
 8006ad4:	4313      	orrs	r3, r2
 8006ad6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f003 0310 	and.w	r3, r3, #16
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d010      	beq.n	8006b06 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	699a      	ldr	r2, [r3, #24]
 8006ae8:	4b64      	ldr	r3, [pc, #400]	@ (8006c7c <HAL_RCC_ClockConfig+0x244>)
 8006aea:	69db      	ldr	r3, [r3, #28]
 8006aec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006af0:	429a      	cmp	r2, r3
 8006af2:	d908      	bls.n	8006b06 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006af4:	4b61      	ldr	r3, [pc, #388]	@ (8006c7c <HAL_RCC_ClockConfig+0x244>)
 8006af6:	69db      	ldr	r3, [r3, #28]
 8006af8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	699b      	ldr	r3, [r3, #24]
 8006b00:	495e      	ldr	r1, [pc, #376]	@ (8006c7c <HAL_RCC_ClockConfig+0x244>)
 8006b02:	4313      	orrs	r3, r2
 8006b04:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f003 0320 	and.w	r3, r3, #32
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d010      	beq.n	8006b34 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	69da      	ldr	r2, [r3, #28]
 8006b16:	4b59      	ldr	r3, [pc, #356]	@ (8006c7c <HAL_RCC_ClockConfig+0x244>)
 8006b18:	6a1b      	ldr	r3, [r3, #32]
 8006b1a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006b1e:	429a      	cmp	r2, r3
 8006b20:	d908      	bls.n	8006b34 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006b22:	4b56      	ldr	r3, [pc, #344]	@ (8006c7c <HAL_RCC_ClockConfig+0x244>)
 8006b24:	6a1b      	ldr	r3, [r3, #32]
 8006b26:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	69db      	ldr	r3, [r3, #28]
 8006b2e:	4953      	ldr	r1, [pc, #332]	@ (8006c7c <HAL_RCC_ClockConfig+0x244>)
 8006b30:	4313      	orrs	r3, r2
 8006b32:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f003 0302 	and.w	r3, r3, #2
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d010      	beq.n	8006b62 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	68da      	ldr	r2, [r3, #12]
 8006b44:	4b4d      	ldr	r3, [pc, #308]	@ (8006c7c <HAL_RCC_ClockConfig+0x244>)
 8006b46:	699b      	ldr	r3, [r3, #24]
 8006b48:	f003 030f 	and.w	r3, r3, #15
 8006b4c:	429a      	cmp	r2, r3
 8006b4e:	d908      	bls.n	8006b62 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006b50:	4b4a      	ldr	r3, [pc, #296]	@ (8006c7c <HAL_RCC_ClockConfig+0x244>)
 8006b52:	699b      	ldr	r3, [r3, #24]
 8006b54:	f023 020f 	bic.w	r2, r3, #15
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	68db      	ldr	r3, [r3, #12]
 8006b5c:	4947      	ldr	r1, [pc, #284]	@ (8006c7c <HAL_RCC_ClockConfig+0x244>)
 8006b5e:	4313      	orrs	r3, r2
 8006b60:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f003 0301 	and.w	r3, r3, #1
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d055      	beq.n	8006c1a <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006b6e:	4b43      	ldr	r3, [pc, #268]	@ (8006c7c <HAL_RCC_ClockConfig+0x244>)
 8006b70:	699b      	ldr	r3, [r3, #24]
 8006b72:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	689b      	ldr	r3, [r3, #8]
 8006b7a:	4940      	ldr	r1, [pc, #256]	@ (8006c7c <HAL_RCC_ClockConfig+0x244>)
 8006b7c:	4313      	orrs	r3, r2
 8006b7e:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	685b      	ldr	r3, [r3, #4]
 8006b84:	2b02      	cmp	r3, #2
 8006b86:	d107      	bne.n	8006b98 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006b88:	4b3c      	ldr	r3, [pc, #240]	@ (8006c7c <HAL_RCC_ClockConfig+0x244>)
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d121      	bne.n	8006bd8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006b94:	2301      	movs	r3, #1
 8006b96:	e0f6      	b.n	8006d86 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	685b      	ldr	r3, [r3, #4]
 8006b9c:	2b03      	cmp	r3, #3
 8006b9e:	d107      	bne.n	8006bb0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006ba0:	4b36      	ldr	r3, [pc, #216]	@ (8006c7c <HAL_RCC_ClockConfig+0x244>)
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d115      	bne.n	8006bd8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006bac:	2301      	movs	r3, #1
 8006bae:	e0ea      	b.n	8006d86 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	685b      	ldr	r3, [r3, #4]
 8006bb4:	2b01      	cmp	r3, #1
 8006bb6:	d107      	bne.n	8006bc8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006bb8:	4b30      	ldr	r3, [pc, #192]	@ (8006c7c <HAL_RCC_ClockConfig+0x244>)
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d109      	bne.n	8006bd8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006bc4:	2301      	movs	r3, #1
 8006bc6:	e0de      	b.n	8006d86 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006bc8:	4b2c      	ldr	r3, [pc, #176]	@ (8006c7c <HAL_RCC_ClockConfig+0x244>)
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f003 0304 	and.w	r3, r3, #4
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d101      	bne.n	8006bd8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006bd4:	2301      	movs	r3, #1
 8006bd6:	e0d6      	b.n	8006d86 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006bd8:	4b28      	ldr	r3, [pc, #160]	@ (8006c7c <HAL_RCC_ClockConfig+0x244>)
 8006bda:	691b      	ldr	r3, [r3, #16]
 8006bdc:	f023 0207 	bic.w	r2, r3, #7
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	685b      	ldr	r3, [r3, #4]
 8006be4:	4925      	ldr	r1, [pc, #148]	@ (8006c7c <HAL_RCC_ClockConfig+0x244>)
 8006be6:	4313      	orrs	r3, r2
 8006be8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006bea:	f7fa fa3b 	bl	8001064 <HAL_GetTick>
 8006bee:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006bf0:	e00a      	b.n	8006c08 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006bf2:	f7fa fa37 	bl	8001064 <HAL_GetTick>
 8006bf6:	4602      	mov	r2, r0
 8006bf8:	697b      	ldr	r3, [r7, #20]
 8006bfa:	1ad3      	subs	r3, r2, r3
 8006bfc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d901      	bls.n	8006c08 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8006c04:	2303      	movs	r3, #3
 8006c06:	e0be      	b.n	8006d86 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c08:	4b1c      	ldr	r3, [pc, #112]	@ (8006c7c <HAL_RCC_ClockConfig+0x244>)
 8006c0a:	691b      	ldr	r3, [r3, #16]
 8006c0c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	685b      	ldr	r3, [r3, #4]
 8006c14:	00db      	lsls	r3, r3, #3
 8006c16:	429a      	cmp	r2, r3
 8006c18:	d1eb      	bne.n	8006bf2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f003 0302 	and.w	r3, r3, #2
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d010      	beq.n	8006c48 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	68da      	ldr	r2, [r3, #12]
 8006c2a:	4b14      	ldr	r3, [pc, #80]	@ (8006c7c <HAL_RCC_ClockConfig+0x244>)
 8006c2c:	699b      	ldr	r3, [r3, #24]
 8006c2e:	f003 030f 	and.w	r3, r3, #15
 8006c32:	429a      	cmp	r2, r3
 8006c34:	d208      	bcs.n	8006c48 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006c36:	4b11      	ldr	r3, [pc, #68]	@ (8006c7c <HAL_RCC_ClockConfig+0x244>)
 8006c38:	699b      	ldr	r3, [r3, #24]
 8006c3a:	f023 020f 	bic.w	r2, r3, #15
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	68db      	ldr	r3, [r3, #12]
 8006c42:	490e      	ldr	r1, [pc, #56]	@ (8006c7c <HAL_RCC_ClockConfig+0x244>)
 8006c44:	4313      	orrs	r3, r2
 8006c46:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006c48:	4b0b      	ldr	r3, [pc, #44]	@ (8006c78 <HAL_RCC_ClockConfig+0x240>)
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f003 030f 	and.w	r3, r3, #15
 8006c50:	683a      	ldr	r2, [r7, #0]
 8006c52:	429a      	cmp	r2, r3
 8006c54:	d214      	bcs.n	8006c80 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c56:	4b08      	ldr	r3, [pc, #32]	@ (8006c78 <HAL_RCC_ClockConfig+0x240>)
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f023 020f 	bic.w	r2, r3, #15
 8006c5e:	4906      	ldr	r1, [pc, #24]	@ (8006c78 <HAL_RCC_ClockConfig+0x240>)
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	4313      	orrs	r3, r2
 8006c64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c66:	4b04      	ldr	r3, [pc, #16]	@ (8006c78 <HAL_RCC_ClockConfig+0x240>)
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f003 030f 	and.w	r3, r3, #15
 8006c6e:	683a      	ldr	r2, [r7, #0]
 8006c70:	429a      	cmp	r2, r3
 8006c72:	d005      	beq.n	8006c80 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006c74:	2301      	movs	r3, #1
 8006c76:	e086      	b.n	8006d86 <HAL_RCC_ClockConfig+0x34e>
 8006c78:	52002000 	.word	0x52002000
 8006c7c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f003 0304 	and.w	r3, r3, #4
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d010      	beq.n	8006cae <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	691a      	ldr	r2, [r3, #16]
 8006c90:	4b3f      	ldr	r3, [pc, #252]	@ (8006d90 <HAL_RCC_ClockConfig+0x358>)
 8006c92:	699b      	ldr	r3, [r3, #24]
 8006c94:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006c98:	429a      	cmp	r2, r3
 8006c9a:	d208      	bcs.n	8006cae <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006c9c:	4b3c      	ldr	r3, [pc, #240]	@ (8006d90 <HAL_RCC_ClockConfig+0x358>)
 8006c9e:	699b      	ldr	r3, [r3, #24]
 8006ca0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	691b      	ldr	r3, [r3, #16]
 8006ca8:	4939      	ldr	r1, [pc, #228]	@ (8006d90 <HAL_RCC_ClockConfig+0x358>)
 8006caa:	4313      	orrs	r3, r2
 8006cac:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f003 0308 	and.w	r3, r3, #8
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d010      	beq.n	8006cdc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	695a      	ldr	r2, [r3, #20]
 8006cbe:	4b34      	ldr	r3, [pc, #208]	@ (8006d90 <HAL_RCC_ClockConfig+0x358>)
 8006cc0:	69db      	ldr	r3, [r3, #28]
 8006cc2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006cc6:	429a      	cmp	r2, r3
 8006cc8:	d208      	bcs.n	8006cdc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006cca:	4b31      	ldr	r3, [pc, #196]	@ (8006d90 <HAL_RCC_ClockConfig+0x358>)
 8006ccc:	69db      	ldr	r3, [r3, #28]
 8006cce:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	695b      	ldr	r3, [r3, #20]
 8006cd6:	492e      	ldr	r1, [pc, #184]	@ (8006d90 <HAL_RCC_ClockConfig+0x358>)
 8006cd8:	4313      	orrs	r3, r2
 8006cda:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f003 0310 	and.w	r3, r3, #16
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d010      	beq.n	8006d0a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	699a      	ldr	r2, [r3, #24]
 8006cec:	4b28      	ldr	r3, [pc, #160]	@ (8006d90 <HAL_RCC_ClockConfig+0x358>)
 8006cee:	69db      	ldr	r3, [r3, #28]
 8006cf0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006cf4:	429a      	cmp	r2, r3
 8006cf6:	d208      	bcs.n	8006d0a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006cf8:	4b25      	ldr	r3, [pc, #148]	@ (8006d90 <HAL_RCC_ClockConfig+0x358>)
 8006cfa:	69db      	ldr	r3, [r3, #28]
 8006cfc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	699b      	ldr	r3, [r3, #24]
 8006d04:	4922      	ldr	r1, [pc, #136]	@ (8006d90 <HAL_RCC_ClockConfig+0x358>)
 8006d06:	4313      	orrs	r3, r2
 8006d08:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f003 0320 	and.w	r3, r3, #32
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d010      	beq.n	8006d38 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	69da      	ldr	r2, [r3, #28]
 8006d1a:	4b1d      	ldr	r3, [pc, #116]	@ (8006d90 <HAL_RCC_ClockConfig+0x358>)
 8006d1c:	6a1b      	ldr	r3, [r3, #32]
 8006d1e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006d22:	429a      	cmp	r2, r3
 8006d24:	d208      	bcs.n	8006d38 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006d26:	4b1a      	ldr	r3, [pc, #104]	@ (8006d90 <HAL_RCC_ClockConfig+0x358>)
 8006d28:	6a1b      	ldr	r3, [r3, #32]
 8006d2a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	69db      	ldr	r3, [r3, #28]
 8006d32:	4917      	ldr	r1, [pc, #92]	@ (8006d90 <HAL_RCC_ClockConfig+0x358>)
 8006d34:	4313      	orrs	r3, r2
 8006d36:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8006d38:	f000 f834 	bl	8006da4 <HAL_RCC_GetSysClockFreq>
 8006d3c:	4602      	mov	r2, r0
 8006d3e:	4b14      	ldr	r3, [pc, #80]	@ (8006d90 <HAL_RCC_ClockConfig+0x358>)
 8006d40:	699b      	ldr	r3, [r3, #24]
 8006d42:	0a1b      	lsrs	r3, r3, #8
 8006d44:	f003 030f 	and.w	r3, r3, #15
 8006d48:	4912      	ldr	r1, [pc, #72]	@ (8006d94 <HAL_RCC_ClockConfig+0x35c>)
 8006d4a:	5ccb      	ldrb	r3, [r1, r3]
 8006d4c:	f003 031f 	and.w	r3, r3, #31
 8006d50:	fa22 f303 	lsr.w	r3, r2, r3
 8006d54:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8006d56:	4b0e      	ldr	r3, [pc, #56]	@ (8006d90 <HAL_RCC_ClockConfig+0x358>)
 8006d58:	699b      	ldr	r3, [r3, #24]
 8006d5a:	f003 030f 	and.w	r3, r3, #15
 8006d5e:	4a0d      	ldr	r2, [pc, #52]	@ (8006d94 <HAL_RCC_ClockConfig+0x35c>)
 8006d60:	5cd3      	ldrb	r3, [r2, r3]
 8006d62:	f003 031f 	and.w	r3, r3, #31
 8006d66:	693a      	ldr	r2, [r7, #16]
 8006d68:	fa22 f303 	lsr.w	r3, r2, r3
 8006d6c:	4a0a      	ldr	r2, [pc, #40]	@ (8006d98 <HAL_RCC_ClockConfig+0x360>)
 8006d6e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006d70:	4a0a      	ldr	r2, [pc, #40]	@ (8006d9c <HAL_RCC_ClockConfig+0x364>)
 8006d72:	693b      	ldr	r3, [r7, #16]
 8006d74:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8006d76:	4b0a      	ldr	r3, [pc, #40]	@ (8006da0 <HAL_RCC_ClockConfig+0x368>)
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	f7f9 fec8 	bl	8000b10 <HAL_InitTick>
 8006d80:	4603      	mov	r3, r0
 8006d82:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006d84:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d86:	4618      	mov	r0, r3
 8006d88:	3718      	adds	r7, #24
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bd80      	pop	{r7, pc}
 8006d8e:	bf00      	nop
 8006d90:	58024400 	.word	0x58024400
 8006d94:	0800a934 	.word	0x0800a934
 8006d98:	24000004 	.word	0x24000004
 8006d9c:	24000000 	.word	0x24000000
 8006da0:	24000008 	.word	0x24000008

08006da4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006da4:	b480      	push	{r7}
 8006da6:	b089      	sub	sp, #36	@ 0x24
 8006da8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006daa:	4bb3      	ldr	r3, [pc, #716]	@ (8007078 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006dac:	691b      	ldr	r3, [r3, #16]
 8006dae:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006db2:	2b18      	cmp	r3, #24
 8006db4:	f200 8155 	bhi.w	8007062 <HAL_RCC_GetSysClockFreq+0x2be>
 8006db8:	a201      	add	r2, pc, #4	@ (adr r2, 8006dc0 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006dba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dbe:	bf00      	nop
 8006dc0:	08006e25 	.word	0x08006e25
 8006dc4:	08007063 	.word	0x08007063
 8006dc8:	08007063 	.word	0x08007063
 8006dcc:	08007063 	.word	0x08007063
 8006dd0:	08007063 	.word	0x08007063
 8006dd4:	08007063 	.word	0x08007063
 8006dd8:	08007063 	.word	0x08007063
 8006ddc:	08007063 	.word	0x08007063
 8006de0:	08006e4b 	.word	0x08006e4b
 8006de4:	08007063 	.word	0x08007063
 8006de8:	08007063 	.word	0x08007063
 8006dec:	08007063 	.word	0x08007063
 8006df0:	08007063 	.word	0x08007063
 8006df4:	08007063 	.word	0x08007063
 8006df8:	08007063 	.word	0x08007063
 8006dfc:	08007063 	.word	0x08007063
 8006e00:	08006e51 	.word	0x08006e51
 8006e04:	08007063 	.word	0x08007063
 8006e08:	08007063 	.word	0x08007063
 8006e0c:	08007063 	.word	0x08007063
 8006e10:	08007063 	.word	0x08007063
 8006e14:	08007063 	.word	0x08007063
 8006e18:	08007063 	.word	0x08007063
 8006e1c:	08007063 	.word	0x08007063
 8006e20:	08006e57 	.word	0x08006e57
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006e24:	4b94      	ldr	r3, [pc, #592]	@ (8007078 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f003 0320 	and.w	r3, r3, #32
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d009      	beq.n	8006e44 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006e30:	4b91      	ldr	r3, [pc, #580]	@ (8007078 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	08db      	lsrs	r3, r3, #3
 8006e36:	f003 0303 	and.w	r3, r3, #3
 8006e3a:	4a90      	ldr	r2, [pc, #576]	@ (800707c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006e3c:	fa22 f303 	lsr.w	r3, r2, r3
 8006e40:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8006e42:	e111      	b.n	8007068 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006e44:	4b8d      	ldr	r3, [pc, #564]	@ (800707c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006e46:	61bb      	str	r3, [r7, #24]
      break;
 8006e48:	e10e      	b.n	8007068 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8006e4a:	4b8d      	ldr	r3, [pc, #564]	@ (8007080 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006e4c:	61bb      	str	r3, [r7, #24]
      break;
 8006e4e:	e10b      	b.n	8007068 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8006e50:	4b8c      	ldr	r3, [pc, #560]	@ (8007084 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006e52:	61bb      	str	r3, [r7, #24]
      break;
 8006e54:	e108      	b.n	8007068 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006e56:	4b88      	ldr	r3, [pc, #544]	@ (8007078 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e5a:	f003 0303 	and.w	r3, r3, #3
 8006e5e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006e60:	4b85      	ldr	r3, [pc, #532]	@ (8007078 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e64:	091b      	lsrs	r3, r3, #4
 8006e66:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006e6a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006e6c:	4b82      	ldr	r3, [pc, #520]	@ (8007078 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e70:	f003 0301 	and.w	r3, r3, #1
 8006e74:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006e76:	4b80      	ldr	r3, [pc, #512]	@ (8007078 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e7a:	08db      	lsrs	r3, r3, #3
 8006e7c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006e80:	68fa      	ldr	r2, [r7, #12]
 8006e82:	fb02 f303 	mul.w	r3, r2, r3
 8006e86:	ee07 3a90 	vmov	s15, r3
 8006e8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e8e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8006e92:	693b      	ldr	r3, [r7, #16]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	f000 80e1 	beq.w	800705c <HAL_RCC_GetSysClockFreq+0x2b8>
 8006e9a:	697b      	ldr	r3, [r7, #20]
 8006e9c:	2b02      	cmp	r3, #2
 8006e9e:	f000 8083 	beq.w	8006fa8 <HAL_RCC_GetSysClockFreq+0x204>
 8006ea2:	697b      	ldr	r3, [r7, #20]
 8006ea4:	2b02      	cmp	r3, #2
 8006ea6:	f200 80a1 	bhi.w	8006fec <HAL_RCC_GetSysClockFreq+0x248>
 8006eaa:	697b      	ldr	r3, [r7, #20]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d003      	beq.n	8006eb8 <HAL_RCC_GetSysClockFreq+0x114>
 8006eb0:	697b      	ldr	r3, [r7, #20]
 8006eb2:	2b01      	cmp	r3, #1
 8006eb4:	d056      	beq.n	8006f64 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006eb6:	e099      	b.n	8006fec <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006eb8:	4b6f      	ldr	r3, [pc, #444]	@ (8007078 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f003 0320 	and.w	r3, r3, #32
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d02d      	beq.n	8006f20 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006ec4:	4b6c      	ldr	r3, [pc, #432]	@ (8007078 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	08db      	lsrs	r3, r3, #3
 8006eca:	f003 0303 	and.w	r3, r3, #3
 8006ece:	4a6b      	ldr	r2, [pc, #428]	@ (800707c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006ed0:	fa22 f303 	lsr.w	r3, r2, r3
 8006ed4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	ee07 3a90 	vmov	s15, r3
 8006edc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ee0:	693b      	ldr	r3, [r7, #16]
 8006ee2:	ee07 3a90 	vmov	s15, r3
 8006ee6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006eea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006eee:	4b62      	ldr	r3, [pc, #392]	@ (8007078 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ef2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ef6:	ee07 3a90 	vmov	s15, r3
 8006efa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006efe:	ed97 6a02 	vldr	s12, [r7, #8]
 8006f02:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8007088 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006f06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f0e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f1a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8006f1e:	e087      	b.n	8007030 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006f20:	693b      	ldr	r3, [r7, #16]
 8006f22:	ee07 3a90 	vmov	s15, r3
 8006f26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f2a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800708c <HAL_RCC_GetSysClockFreq+0x2e8>
 8006f2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f32:	4b51      	ldr	r3, [pc, #324]	@ (8007078 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f3a:	ee07 3a90 	vmov	s15, r3
 8006f3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f42:	ed97 6a02 	vldr	s12, [r7, #8]
 8006f46:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8007088 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006f4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f5e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006f62:	e065      	b.n	8007030 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006f64:	693b      	ldr	r3, [r7, #16]
 8006f66:	ee07 3a90 	vmov	s15, r3
 8006f6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f6e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8007090 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006f72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f76:	4b40      	ldr	r3, [pc, #256]	@ (8007078 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f7e:	ee07 3a90 	vmov	s15, r3
 8006f82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f86:	ed97 6a02 	vldr	s12, [r7, #8]
 8006f8a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8007088 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006f8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f96:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fa2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006fa6:	e043      	b.n	8007030 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006fa8:	693b      	ldr	r3, [r7, #16]
 8006faa:	ee07 3a90 	vmov	s15, r3
 8006fae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fb2:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8007094 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006fb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006fba:	4b2f      	ldr	r3, [pc, #188]	@ (8007078 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006fbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fc2:	ee07 3a90 	vmov	s15, r3
 8006fc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fca:	ed97 6a02 	vldr	s12, [r7, #8]
 8006fce:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8007088 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006fd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006fd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006fda:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006fde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006fe2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fe6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006fea:	e021      	b.n	8007030 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006fec:	693b      	ldr	r3, [r7, #16]
 8006fee:	ee07 3a90 	vmov	s15, r3
 8006ff2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ff6:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8007090 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006ffa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ffe:	4b1e      	ldr	r3, [pc, #120]	@ (8007078 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007002:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007006:	ee07 3a90 	vmov	s15, r3
 800700a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800700e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007012:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8007088 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007016:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800701a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800701e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007022:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007026:	ee67 7a27 	vmul.f32	s15, s14, s15
 800702a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800702e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8007030:	4b11      	ldr	r3, [pc, #68]	@ (8007078 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007032:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007034:	0a5b      	lsrs	r3, r3, #9
 8007036:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800703a:	3301      	adds	r3, #1
 800703c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	ee07 3a90 	vmov	s15, r3
 8007044:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007048:	edd7 6a07 	vldr	s13, [r7, #28]
 800704c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007050:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007054:	ee17 3a90 	vmov	r3, s15
 8007058:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800705a:	e005      	b.n	8007068 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800705c:	2300      	movs	r3, #0
 800705e:	61bb      	str	r3, [r7, #24]
      break;
 8007060:	e002      	b.n	8007068 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8007062:	4b07      	ldr	r3, [pc, #28]	@ (8007080 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007064:	61bb      	str	r3, [r7, #24]
      break;
 8007066:	bf00      	nop
  }

  return sysclockfreq;
 8007068:	69bb      	ldr	r3, [r7, #24]
}
 800706a:	4618      	mov	r0, r3
 800706c:	3724      	adds	r7, #36	@ 0x24
 800706e:	46bd      	mov	sp, r7
 8007070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007074:	4770      	bx	lr
 8007076:	bf00      	nop
 8007078:	58024400 	.word	0x58024400
 800707c:	03d09000 	.word	0x03d09000
 8007080:	003d0900 	.word	0x003d0900
 8007084:	016e3600 	.word	0x016e3600
 8007088:	46000000 	.word	0x46000000
 800708c:	4c742400 	.word	0x4c742400
 8007090:	4a742400 	.word	0x4a742400
 8007094:	4bb71b00 	.word	0x4bb71b00

08007098 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b082      	sub	sp, #8
 800709c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800709e:	f7ff fe81 	bl	8006da4 <HAL_RCC_GetSysClockFreq>
 80070a2:	4602      	mov	r2, r0
 80070a4:	4b10      	ldr	r3, [pc, #64]	@ (80070e8 <HAL_RCC_GetHCLKFreq+0x50>)
 80070a6:	699b      	ldr	r3, [r3, #24]
 80070a8:	0a1b      	lsrs	r3, r3, #8
 80070aa:	f003 030f 	and.w	r3, r3, #15
 80070ae:	490f      	ldr	r1, [pc, #60]	@ (80070ec <HAL_RCC_GetHCLKFreq+0x54>)
 80070b0:	5ccb      	ldrb	r3, [r1, r3]
 80070b2:	f003 031f 	and.w	r3, r3, #31
 80070b6:	fa22 f303 	lsr.w	r3, r2, r3
 80070ba:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80070bc:	4b0a      	ldr	r3, [pc, #40]	@ (80070e8 <HAL_RCC_GetHCLKFreq+0x50>)
 80070be:	699b      	ldr	r3, [r3, #24]
 80070c0:	f003 030f 	and.w	r3, r3, #15
 80070c4:	4a09      	ldr	r2, [pc, #36]	@ (80070ec <HAL_RCC_GetHCLKFreq+0x54>)
 80070c6:	5cd3      	ldrb	r3, [r2, r3]
 80070c8:	f003 031f 	and.w	r3, r3, #31
 80070cc:	687a      	ldr	r2, [r7, #4]
 80070ce:	fa22 f303 	lsr.w	r3, r2, r3
 80070d2:	4a07      	ldr	r2, [pc, #28]	@ (80070f0 <HAL_RCC_GetHCLKFreq+0x58>)
 80070d4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80070d6:	4a07      	ldr	r2, [pc, #28]	@ (80070f4 <HAL_RCC_GetHCLKFreq+0x5c>)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80070dc:	4b04      	ldr	r3, [pc, #16]	@ (80070f0 <HAL_RCC_GetHCLKFreq+0x58>)
 80070de:	681b      	ldr	r3, [r3, #0]
}
 80070e0:	4618      	mov	r0, r3
 80070e2:	3708      	adds	r7, #8
 80070e4:	46bd      	mov	sp, r7
 80070e6:	bd80      	pop	{r7, pc}
 80070e8:	58024400 	.word	0x58024400
 80070ec:	0800a934 	.word	0x0800a934
 80070f0:	24000004 	.word	0x24000004
 80070f4:	24000000 	.word	0x24000000

080070f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 80070fc:	f7ff ffcc 	bl	8007098 <HAL_RCC_GetHCLKFreq>
 8007100:	4602      	mov	r2, r0
 8007102:	4b06      	ldr	r3, [pc, #24]	@ (800711c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007104:	69db      	ldr	r3, [r3, #28]
 8007106:	091b      	lsrs	r3, r3, #4
 8007108:	f003 0307 	and.w	r3, r3, #7
 800710c:	4904      	ldr	r1, [pc, #16]	@ (8007120 <HAL_RCC_GetPCLK1Freq+0x28>)
 800710e:	5ccb      	ldrb	r3, [r1, r3]
 8007110:	f003 031f 	and.w	r3, r3, #31
 8007114:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8007118:	4618      	mov	r0, r3
 800711a:	bd80      	pop	{r7, pc}
 800711c:	58024400 	.word	0x58024400
 8007120:	0800a934 	.word	0x0800a934

08007124 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8007128:	f7ff ffb6 	bl	8007098 <HAL_RCC_GetHCLKFreq>
 800712c:	4602      	mov	r2, r0
 800712e:	4b06      	ldr	r3, [pc, #24]	@ (8007148 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007130:	69db      	ldr	r3, [r3, #28]
 8007132:	0a1b      	lsrs	r3, r3, #8
 8007134:	f003 0307 	and.w	r3, r3, #7
 8007138:	4904      	ldr	r1, [pc, #16]	@ (800714c <HAL_RCC_GetPCLK2Freq+0x28>)
 800713a:	5ccb      	ldrb	r3, [r1, r3]
 800713c:	f003 031f 	and.w	r3, r3, #31
 8007140:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8007144:	4618      	mov	r0, r3
 8007146:	bd80      	pop	{r7, pc}
 8007148:	58024400 	.word	0x58024400
 800714c:	0800a934 	.word	0x0800a934

08007150 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007150:	b480      	push	{r7}
 8007152:	b083      	sub	sp, #12
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
 8007158:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	223f      	movs	r2, #63	@ 0x3f
 800715e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007160:	4b1a      	ldr	r3, [pc, #104]	@ (80071cc <HAL_RCC_GetClockConfig+0x7c>)
 8007162:	691b      	ldr	r3, [r3, #16]
 8007164:	f003 0207 	and.w	r2, r3, #7
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	605a      	str	r2, [r3, #4]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
#else
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE);
 800716c:	4b17      	ldr	r3, [pc, #92]	@ (80071cc <HAL_RCC_GetClockConfig+0x7c>)
 800716e:	699b      	ldr	r3, [r3, #24]
 8007170:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE);
 8007178:	4b14      	ldr	r3, [pc, #80]	@ (80071cc <HAL_RCC_GetClockConfig+0x7c>)
 800717a:	699b      	ldr	r3, [r3, #24]
 800717c:	f003 020f 	and.w	r2, r3, #15
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE);
 8007184:	4b11      	ldr	r3, [pc, #68]	@ (80071cc <HAL_RCC_GetClockConfig+0x7c>)
 8007186:	699b      	ldr	r3, [r3, #24]
 8007188:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1);
 8007190:	4b0e      	ldr	r3, [pc, #56]	@ (80071cc <HAL_RCC_GetClockConfig+0x7c>)
 8007192:	69db      	ldr	r3, [r3, #28]
 8007194:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2);
 800719c:	4b0b      	ldr	r3, [pc, #44]	@ (80071cc <HAL_RCC_GetClockConfig+0x7c>)
 800719e:	69db      	ldr	r3, [r3, #28]
 80071a0:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
 80071a8:	4b08      	ldr	r3, [pc, #32]	@ (80071cc <HAL_RCC_GetClockConfig+0x7c>)
 80071aa:	6a1b      	ldr	r3, [r3, #32]
 80071ac:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	61da      	str	r2, [r3, #28]
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80071b4:	4b06      	ldr	r3, [pc, #24]	@ (80071d0 <HAL_RCC_GetClockConfig+0x80>)
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f003 020f 	and.w	r2, r3, #15
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	601a      	str	r2, [r3, #0]
}
 80071c0:	bf00      	nop
 80071c2:	370c      	adds	r7, #12
 80071c4:	46bd      	mov	sp, r7
 80071c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ca:	4770      	bx	lr
 80071cc:	58024400 	.word	0x58024400
 80071d0:	52002000 	.word	0x52002000

080071d4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80071d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80071d8:	b0c8      	sub	sp, #288	@ 0x120
 80071da:	af00      	add	r7, sp, #0
 80071dc:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80071e0:	2300      	movs	r3, #0
 80071e2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80071e6:	2300      	movs	r3, #0
 80071e8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80071ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80071f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071f4:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80071f8:	2500      	movs	r5, #0
 80071fa:	ea54 0305 	orrs.w	r3, r4, r5
 80071fe:	d049      	beq.n	8007294 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8007200:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007204:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007206:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800720a:	d02f      	beq.n	800726c <HAL_RCCEx_PeriphCLKConfig+0x98>
 800720c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007210:	d828      	bhi.n	8007264 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007212:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007216:	d01a      	beq.n	800724e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007218:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800721c:	d822      	bhi.n	8007264 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800721e:	2b00      	cmp	r3, #0
 8007220:	d003      	beq.n	800722a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8007222:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007226:	d007      	beq.n	8007238 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007228:	e01c      	b.n	8007264 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800722a:	4ba7      	ldr	r3, [pc, #668]	@ (80074c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800722c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800722e:	4aa6      	ldr	r2, [pc, #664]	@ (80074c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007230:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007234:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007236:	e01a      	b.n	800726e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007238:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800723c:	3308      	adds	r3, #8
 800723e:	2102      	movs	r1, #2
 8007240:	4618      	mov	r0, r3
 8007242:	f001 fc43 	bl	8008acc <RCCEx_PLL2_Config>
 8007246:	4603      	mov	r3, r0
 8007248:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800724c:	e00f      	b.n	800726e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800724e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007252:	3328      	adds	r3, #40	@ 0x28
 8007254:	2102      	movs	r1, #2
 8007256:	4618      	mov	r0, r3
 8007258:	f001 fcea 	bl	8008c30 <RCCEx_PLL3_Config>
 800725c:	4603      	mov	r3, r0
 800725e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007262:	e004      	b.n	800726e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007264:	2301      	movs	r3, #1
 8007266:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800726a:	e000      	b.n	800726e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800726c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800726e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007272:	2b00      	cmp	r3, #0
 8007274:	d10a      	bne.n	800728c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007276:	4b94      	ldr	r3, [pc, #592]	@ (80074c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007278:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800727a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800727e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007282:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007284:	4a90      	ldr	r2, [pc, #576]	@ (80074c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007286:	430b      	orrs	r3, r1
 8007288:	6513      	str	r3, [r2, #80]	@ 0x50
 800728a:	e003      	b.n	8007294 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800728c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007290:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007294:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800729c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80072a0:	f04f 0900 	mov.w	r9, #0
 80072a4:	ea58 0309 	orrs.w	r3, r8, r9
 80072a8:	d047      	beq.n	800733a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80072aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80072ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80072b0:	2b04      	cmp	r3, #4
 80072b2:	d82a      	bhi.n	800730a <HAL_RCCEx_PeriphCLKConfig+0x136>
 80072b4:	a201      	add	r2, pc, #4	@ (adr r2, 80072bc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80072b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072ba:	bf00      	nop
 80072bc:	080072d1 	.word	0x080072d1
 80072c0:	080072df 	.word	0x080072df
 80072c4:	080072f5 	.word	0x080072f5
 80072c8:	08007313 	.word	0x08007313
 80072cc:	08007313 	.word	0x08007313
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80072d0:	4b7d      	ldr	r3, [pc, #500]	@ (80074c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80072d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072d4:	4a7c      	ldr	r2, [pc, #496]	@ (80074c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80072d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80072da:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80072dc:	e01a      	b.n	8007314 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80072de:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80072e2:	3308      	adds	r3, #8
 80072e4:	2100      	movs	r1, #0
 80072e6:	4618      	mov	r0, r3
 80072e8:	f001 fbf0 	bl	8008acc <RCCEx_PLL2_Config>
 80072ec:	4603      	mov	r3, r0
 80072ee:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80072f2:	e00f      	b.n	8007314 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80072f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80072f8:	3328      	adds	r3, #40	@ 0x28
 80072fa:	2100      	movs	r1, #0
 80072fc:	4618      	mov	r0, r3
 80072fe:	f001 fc97 	bl	8008c30 <RCCEx_PLL3_Config>
 8007302:	4603      	mov	r3, r0
 8007304:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007308:	e004      	b.n	8007314 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800730a:	2301      	movs	r3, #1
 800730c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007310:	e000      	b.n	8007314 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8007312:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007314:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007318:	2b00      	cmp	r3, #0
 800731a:	d10a      	bne.n	8007332 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800731c:	4b6a      	ldr	r3, [pc, #424]	@ (80074c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800731e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007320:	f023 0107 	bic.w	r1, r3, #7
 8007324:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007328:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800732a:	4a67      	ldr	r2, [pc, #412]	@ (80074c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800732c:	430b      	orrs	r3, r1
 800732e:	6513      	str	r3, [r2, #80]	@ 0x50
 8007330:	e003      	b.n	800733a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007332:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007336:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 800733a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800733e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007342:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8007346:	f04f 0b00 	mov.w	fp, #0
 800734a:	ea5a 030b 	orrs.w	r3, sl, fp
 800734e:	d054      	beq.n	80073fa <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8007350:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007354:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007356:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800735a:	d036      	beq.n	80073ca <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 800735c:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8007360:	d82f      	bhi.n	80073c2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8007362:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007366:	d032      	beq.n	80073ce <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8007368:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800736c:	d829      	bhi.n	80073c2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800736e:	2bc0      	cmp	r3, #192	@ 0xc0
 8007370:	d02f      	beq.n	80073d2 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8007372:	2bc0      	cmp	r3, #192	@ 0xc0
 8007374:	d825      	bhi.n	80073c2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8007376:	2b80      	cmp	r3, #128	@ 0x80
 8007378:	d018      	beq.n	80073ac <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 800737a:	2b80      	cmp	r3, #128	@ 0x80
 800737c:	d821      	bhi.n	80073c2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800737e:	2b00      	cmp	r3, #0
 8007380:	d002      	beq.n	8007388 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8007382:	2b40      	cmp	r3, #64	@ 0x40
 8007384:	d007      	beq.n	8007396 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8007386:	e01c      	b.n	80073c2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007388:	4b4f      	ldr	r3, [pc, #316]	@ (80074c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800738a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800738c:	4a4e      	ldr	r2, [pc, #312]	@ (80074c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800738e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007392:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8007394:	e01e      	b.n	80073d4 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007396:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800739a:	3308      	adds	r3, #8
 800739c:	2100      	movs	r1, #0
 800739e:	4618      	mov	r0, r3
 80073a0:	f001 fb94 	bl	8008acc <RCCEx_PLL2_Config>
 80073a4:	4603      	mov	r3, r0
 80073a6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80073aa:	e013      	b.n	80073d4 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80073ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80073b0:	3328      	adds	r3, #40	@ 0x28
 80073b2:	2100      	movs	r1, #0
 80073b4:	4618      	mov	r0, r3
 80073b6:	f001 fc3b 	bl	8008c30 <RCCEx_PLL3_Config>
 80073ba:	4603      	mov	r3, r0
 80073bc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80073c0:	e008      	b.n	80073d4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80073c2:	2301      	movs	r3, #1
 80073c4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80073c8:	e004      	b.n	80073d4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80073ca:	bf00      	nop
 80073cc:	e002      	b.n	80073d4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80073ce:	bf00      	nop
 80073d0:	e000      	b.n	80073d4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80073d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80073d4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d10a      	bne.n	80073f2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 80073dc:	4b3a      	ldr	r3, [pc, #232]	@ (80074c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80073de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80073e0:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80073e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80073e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80073ea:	4a37      	ldr	r2, [pc, #220]	@ (80074c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80073ec:	430b      	orrs	r3, r1
 80073ee:	6513      	str	r3, [r2, #80]	@ 0x50
 80073f0:	e003      	b.n	80073fa <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073f2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80073f6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 80073fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80073fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007402:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8007406:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800740a:	2300      	movs	r3, #0
 800740c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8007410:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8007414:	460b      	mov	r3, r1
 8007416:	4313      	orrs	r3, r2
 8007418:	d05c      	beq.n	80074d4 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 800741a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800741e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007420:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8007424:	d03b      	beq.n	800749e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007426:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800742a:	d834      	bhi.n	8007496 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800742c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007430:	d037      	beq.n	80074a2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8007432:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007436:	d82e      	bhi.n	8007496 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8007438:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800743c:	d033      	beq.n	80074a6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800743e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007442:	d828      	bhi.n	8007496 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8007444:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007448:	d01a      	beq.n	8007480 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 800744a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800744e:	d822      	bhi.n	8007496 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8007450:	2b00      	cmp	r3, #0
 8007452:	d003      	beq.n	800745c <HAL_RCCEx_PeriphCLKConfig+0x288>
 8007454:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007458:	d007      	beq.n	800746a <HAL_RCCEx_PeriphCLKConfig+0x296>
 800745a:	e01c      	b.n	8007496 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800745c:	4b1a      	ldr	r3, [pc, #104]	@ (80074c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800745e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007460:	4a19      	ldr	r2, [pc, #100]	@ (80074c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007462:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007466:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8007468:	e01e      	b.n	80074a8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800746a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800746e:	3308      	adds	r3, #8
 8007470:	2100      	movs	r1, #0
 8007472:	4618      	mov	r0, r3
 8007474:	f001 fb2a 	bl	8008acc <RCCEx_PLL2_Config>
 8007478:	4603      	mov	r3, r0
 800747a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800747e:	e013      	b.n	80074a8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007480:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007484:	3328      	adds	r3, #40	@ 0x28
 8007486:	2100      	movs	r1, #0
 8007488:	4618      	mov	r0, r3
 800748a:	f001 fbd1 	bl	8008c30 <RCCEx_PLL3_Config>
 800748e:	4603      	mov	r3, r0
 8007490:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8007494:	e008      	b.n	80074a8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007496:	2301      	movs	r3, #1
 8007498:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800749c:	e004      	b.n	80074a8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800749e:	bf00      	nop
 80074a0:	e002      	b.n	80074a8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80074a2:	bf00      	nop
 80074a4:	e000      	b.n	80074a8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80074a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80074a8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d10d      	bne.n	80074cc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 80074b0:	4b05      	ldr	r3, [pc, #20]	@ (80074c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80074b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80074b4:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 80074b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80074bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80074be:	4a02      	ldr	r2, [pc, #8]	@ (80074c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80074c0:	430b      	orrs	r3, r1
 80074c2:	6513      	str	r3, [r2, #80]	@ 0x50
 80074c4:	e006      	b.n	80074d4 <HAL_RCCEx_PeriphCLKConfig+0x300>
 80074c6:	bf00      	nop
 80074c8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074cc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80074d0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80074d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80074d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074dc:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80074e0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80074e4:	2300      	movs	r3, #0
 80074e6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80074ea:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80074ee:	460b      	mov	r3, r1
 80074f0:	4313      	orrs	r3, r2
 80074f2:	d03a      	beq.n	800756a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80074f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80074f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80074fa:	2b30      	cmp	r3, #48	@ 0x30
 80074fc:	d01f      	beq.n	800753e <HAL_RCCEx_PeriphCLKConfig+0x36a>
 80074fe:	2b30      	cmp	r3, #48	@ 0x30
 8007500:	d819      	bhi.n	8007536 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8007502:	2b20      	cmp	r3, #32
 8007504:	d00c      	beq.n	8007520 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8007506:	2b20      	cmp	r3, #32
 8007508:	d815      	bhi.n	8007536 <HAL_RCCEx_PeriphCLKConfig+0x362>
 800750a:	2b00      	cmp	r3, #0
 800750c:	d019      	beq.n	8007542 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800750e:	2b10      	cmp	r3, #16
 8007510:	d111      	bne.n	8007536 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007512:	4bae      	ldr	r3, [pc, #696]	@ (80077cc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007514:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007516:	4aad      	ldr	r2, [pc, #692]	@ (80077cc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007518:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800751c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800751e:	e011      	b.n	8007544 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007520:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007524:	3308      	adds	r3, #8
 8007526:	2102      	movs	r1, #2
 8007528:	4618      	mov	r0, r3
 800752a:	f001 facf 	bl	8008acc <RCCEx_PLL2_Config>
 800752e:	4603      	mov	r3, r0
 8007530:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8007534:	e006      	b.n	8007544 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007536:	2301      	movs	r3, #1
 8007538:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800753c:	e002      	b.n	8007544 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800753e:	bf00      	nop
 8007540:	e000      	b.n	8007544 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8007542:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007544:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007548:	2b00      	cmp	r3, #0
 800754a:	d10a      	bne.n	8007562 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800754c:	4b9f      	ldr	r3, [pc, #636]	@ (80077cc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800754e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007550:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8007554:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007558:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800755a:	4a9c      	ldr	r2, [pc, #624]	@ (80077cc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800755c:	430b      	orrs	r3, r1
 800755e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007560:	e003      	b.n	800756a <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007562:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007566:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800756a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800756e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007572:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8007576:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800757a:	2300      	movs	r3, #0
 800757c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007580:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8007584:	460b      	mov	r3, r1
 8007586:	4313      	orrs	r3, r2
 8007588:	d051      	beq.n	800762e <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800758a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800758e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007590:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007594:	d035      	beq.n	8007602 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8007596:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800759a:	d82e      	bhi.n	80075fa <HAL_RCCEx_PeriphCLKConfig+0x426>
 800759c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80075a0:	d031      	beq.n	8007606 <HAL_RCCEx_PeriphCLKConfig+0x432>
 80075a2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80075a6:	d828      	bhi.n	80075fa <HAL_RCCEx_PeriphCLKConfig+0x426>
 80075a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80075ac:	d01a      	beq.n	80075e4 <HAL_RCCEx_PeriphCLKConfig+0x410>
 80075ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80075b2:	d822      	bhi.n	80075fa <HAL_RCCEx_PeriphCLKConfig+0x426>
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d003      	beq.n	80075c0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 80075b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80075bc:	d007      	beq.n	80075ce <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 80075be:	e01c      	b.n	80075fa <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80075c0:	4b82      	ldr	r3, [pc, #520]	@ (80077cc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80075c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075c4:	4a81      	ldr	r2, [pc, #516]	@ (80077cc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80075c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80075ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80075cc:	e01c      	b.n	8007608 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80075ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80075d2:	3308      	adds	r3, #8
 80075d4:	2100      	movs	r1, #0
 80075d6:	4618      	mov	r0, r3
 80075d8:	f001 fa78 	bl	8008acc <RCCEx_PLL2_Config>
 80075dc:	4603      	mov	r3, r0
 80075de:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80075e2:	e011      	b.n	8007608 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80075e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80075e8:	3328      	adds	r3, #40	@ 0x28
 80075ea:	2100      	movs	r1, #0
 80075ec:	4618      	mov	r0, r3
 80075ee:	f001 fb1f 	bl	8008c30 <RCCEx_PLL3_Config>
 80075f2:	4603      	mov	r3, r0
 80075f4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80075f8:	e006      	b.n	8007608 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80075fa:	2301      	movs	r3, #1
 80075fc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007600:	e002      	b.n	8007608 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8007602:	bf00      	nop
 8007604:	e000      	b.n	8007608 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8007606:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007608:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800760c:	2b00      	cmp	r3, #0
 800760e:	d10a      	bne.n	8007626 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007610:	4b6e      	ldr	r3, [pc, #440]	@ (80077cc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007612:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007614:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8007618:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800761c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800761e:	4a6b      	ldr	r2, [pc, #428]	@ (80077cc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007620:	430b      	orrs	r3, r1
 8007622:	6513      	str	r3, [r2, #80]	@ 0x50
 8007624:	e003      	b.n	800762e <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007626:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800762a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800762e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007636:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800763a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800763e:	2300      	movs	r3, #0
 8007640:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007644:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8007648:	460b      	mov	r3, r1
 800764a:	4313      	orrs	r3, r2
 800764c:	d053      	beq.n	80076f6 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800764e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007652:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007654:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007658:	d033      	beq.n	80076c2 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800765a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800765e:	d82c      	bhi.n	80076ba <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8007660:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007664:	d02f      	beq.n	80076c6 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8007666:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800766a:	d826      	bhi.n	80076ba <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800766c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007670:	d02b      	beq.n	80076ca <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8007672:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007676:	d820      	bhi.n	80076ba <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8007678:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800767c:	d012      	beq.n	80076a4 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800767e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007682:	d81a      	bhi.n	80076ba <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8007684:	2b00      	cmp	r3, #0
 8007686:	d022      	beq.n	80076ce <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8007688:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800768c:	d115      	bne.n	80076ba <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800768e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007692:	3308      	adds	r3, #8
 8007694:	2101      	movs	r1, #1
 8007696:	4618      	mov	r0, r3
 8007698:	f001 fa18 	bl	8008acc <RCCEx_PLL2_Config>
 800769c:	4603      	mov	r3, r0
 800769e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80076a2:	e015      	b.n	80076d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80076a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80076a8:	3328      	adds	r3, #40	@ 0x28
 80076aa:	2101      	movs	r1, #1
 80076ac:	4618      	mov	r0, r3
 80076ae:	f001 fabf 	bl	8008c30 <RCCEx_PLL3_Config>
 80076b2:	4603      	mov	r3, r0
 80076b4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80076b8:	e00a      	b.n	80076d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80076ba:	2301      	movs	r3, #1
 80076bc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80076c0:	e006      	b.n	80076d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80076c2:	bf00      	nop
 80076c4:	e004      	b.n	80076d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80076c6:	bf00      	nop
 80076c8:	e002      	b.n	80076d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80076ca:	bf00      	nop
 80076cc:	e000      	b.n	80076d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80076ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80076d0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d10a      	bne.n	80076ee <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80076d8:	4b3c      	ldr	r3, [pc, #240]	@ (80077cc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80076da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80076dc:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80076e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80076e4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80076e6:	4a39      	ldr	r2, [pc, #228]	@ (80077cc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80076e8:	430b      	orrs	r3, r1
 80076ea:	6513      	str	r3, [r2, #80]	@ 0x50
 80076ec:	e003      	b.n	80076f6 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076ee:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80076f2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80076f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80076fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076fe:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8007702:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007706:	2300      	movs	r3, #0
 8007708:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800770c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8007710:	460b      	mov	r3, r1
 8007712:	4313      	orrs	r3, r2
 8007714:	d060      	beq.n	80077d8 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8007716:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800771a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800771e:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8007722:	d039      	beq.n	8007798 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8007724:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8007728:	d832      	bhi.n	8007790 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800772a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800772e:	d035      	beq.n	800779c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8007730:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007734:	d82c      	bhi.n	8007790 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8007736:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800773a:	d031      	beq.n	80077a0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800773c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007740:	d826      	bhi.n	8007790 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8007742:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007746:	d02d      	beq.n	80077a4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8007748:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800774c:	d820      	bhi.n	8007790 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800774e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007752:	d012      	beq.n	800777a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8007754:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007758:	d81a      	bhi.n	8007790 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800775a:	2b00      	cmp	r3, #0
 800775c:	d024      	beq.n	80077a8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800775e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007762:	d115      	bne.n	8007790 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007764:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007768:	3308      	adds	r3, #8
 800776a:	2101      	movs	r1, #1
 800776c:	4618      	mov	r0, r3
 800776e:	f001 f9ad 	bl	8008acc <RCCEx_PLL2_Config>
 8007772:	4603      	mov	r3, r0
 8007774:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007778:	e017      	b.n	80077aa <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800777a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800777e:	3328      	adds	r3, #40	@ 0x28
 8007780:	2101      	movs	r1, #1
 8007782:	4618      	mov	r0, r3
 8007784:	f001 fa54 	bl	8008c30 <RCCEx_PLL3_Config>
 8007788:	4603      	mov	r3, r0
 800778a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800778e:	e00c      	b.n	80077aa <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8007790:	2301      	movs	r3, #1
 8007792:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007796:	e008      	b.n	80077aa <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007798:	bf00      	nop
 800779a:	e006      	b.n	80077aa <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800779c:	bf00      	nop
 800779e:	e004      	b.n	80077aa <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80077a0:	bf00      	nop
 80077a2:	e002      	b.n	80077aa <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80077a4:	bf00      	nop
 80077a6:	e000      	b.n	80077aa <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80077a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80077aa:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d10e      	bne.n	80077d0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80077b2:	4b06      	ldr	r3, [pc, #24]	@ (80077cc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80077b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80077b6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80077ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80077be:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80077c2:	4a02      	ldr	r2, [pc, #8]	@ (80077cc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80077c4:	430b      	orrs	r3, r1
 80077c6:	6593      	str	r3, [r2, #88]	@ 0x58
 80077c8:	e006      	b.n	80077d8 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80077ca:	bf00      	nop
 80077cc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077d0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80077d4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80077d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80077dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077e0:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80077e4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80077e8:	2300      	movs	r3, #0
 80077ea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80077ee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80077f2:	460b      	mov	r3, r1
 80077f4:	4313      	orrs	r3, r2
 80077f6:	d037      	beq.n	8007868 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80077f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80077fc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80077fe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007802:	d00e      	beq.n	8007822 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8007804:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007808:	d816      	bhi.n	8007838 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800780a:	2b00      	cmp	r3, #0
 800780c:	d018      	beq.n	8007840 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800780e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007812:	d111      	bne.n	8007838 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007814:	4bc4      	ldr	r3, [pc, #784]	@ (8007b28 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007816:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007818:	4ac3      	ldr	r2, [pc, #780]	@ (8007b28 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800781a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800781e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007820:	e00f      	b.n	8007842 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007822:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007826:	3308      	adds	r3, #8
 8007828:	2101      	movs	r1, #1
 800782a:	4618      	mov	r0, r3
 800782c:	f001 f94e 	bl	8008acc <RCCEx_PLL2_Config>
 8007830:	4603      	mov	r3, r0
 8007832:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007836:	e004      	b.n	8007842 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007838:	2301      	movs	r3, #1
 800783a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800783e:	e000      	b.n	8007842 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8007840:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007842:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007846:	2b00      	cmp	r3, #0
 8007848:	d10a      	bne.n	8007860 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800784a:	4bb7      	ldr	r3, [pc, #732]	@ (8007b28 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800784c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800784e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007852:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007856:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007858:	4ab3      	ldr	r2, [pc, #716]	@ (8007b28 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800785a:	430b      	orrs	r3, r1
 800785c:	6513      	str	r3, [r2, #80]	@ 0x50
 800785e:	e003      	b.n	8007868 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007860:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007864:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007868:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800786c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007870:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8007874:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007878:	2300      	movs	r3, #0
 800787a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800787e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8007882:	460b      	mov	r3, r1
 8007884:	4313      	orrs	r3, r2
 8007886:	d039      	beq.n	80078fc <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8007888:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800788c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800788e:	2b03      	cmp	r3, #3
 8007890:	d81c      	bhi.n	80078cc <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8007892:	a201      	add	r2, pc, #4	@ (adr r2, 8007898 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8007894:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007898:	080078d5 	.word	0x080078d5
 800789c:	080078a9 	.word	0x080078a9
 80078a0:	080078b7 	.word	0x080078b7
 80078a4:	080078d5 	.word	0x080078d5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80078a8:	4b9f      	ldr	r3, [pc, #636]	@ (8007b28 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80078aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078ac:	4a9e      	ldr	r2, [pc, #632]	@ (8007b28 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80078ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80078b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80078b4:	e00f      	b.n	80078d6 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80078b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80078ba:	3308      	adds	r3, #8
 80078bc:	2102      	movs	r1, #2
 80078be:	4618      	mov	r0, r3
 80078c0:	f001 f904 	bl	8008acc <RCCEx_PLL2_Config>
 80078c4:	4603      	mov	r3, r0
 80078c6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 80078ca:	e004      	b.n	80078d6 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80078cc:	2301      	movs	r3, #1
 80078ce:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80078d2:	e000      	b.n	80078d6 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80078d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80078d6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d10a      	bne.n	80078f4 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80078de:	4b92      	ldr	r3, [pc, #584]	@ (8007b28 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80078e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80078e2:	f023 0103 	bic.w	r1, r3, #3
 80078e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80078ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80078ec:	4a8e      	ldr	r2, [pc, #568]	@ (8007b28 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80078ee:	430b      	orrs	r3, r1
 80078f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80078f2:	e003      	b.n	80078fc <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078f4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80078f8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80078fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007904:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8007908:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800790c:	2300      	movs	r3, #0
 800790e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007912:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8007916:	460b      	mov	r3, r1
 8007918:	4313      	orrs	r3, r2
 800791a:	f000 8099 	beq.w	8007a50 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800791e:	4b83      	ldr	r3, [pc, #524]	@ (8007b2c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	4a82      	ldr	r2, [pc, #520]	@ (8007b2c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007924:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007928:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800792a:	f7f9 fb9b 	bl	8001064 <HAL_GetTick>
 800792e:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007932:	e00b      	b.n	800794c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007934:	f7f9 fb96 	bl	8001064 <HAL_GetTick>
 8007938:	4602      	mov	r2, r0
 800793a:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800793e:	1ad3      	subs	r3, r2, r3
 8007940:	2b64      	cmp	r3, #100	@ 0x64
 8007942:	d903      	bls.n	800794c <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8007944:	2303      	movs	r3, #3
 8007946:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800794a:	e005      	b.n	8007958 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800794c:	4b77      	ldr	r3, [pc, #476]	@ (8007b2c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007954:	2b00      	cmp	r3, #0
 8007956:	d0ed      	beq.n	8007934 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8007958:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800795c:	2b00      	cmp	r3, #0
 800795e:	d173      	bne.n	8007a48 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007960:	4b71      	ldr	r3, [pc, #452]	@ (8007b28 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007962:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007964:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007968:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800796c:	4053      	eors	r3, r2
 800796e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007972:	2b00      	cmp	r3, #0
 8007974:	d015      	beq.n	80079a2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007976:	4b6c      	ldr	r3, [pc, #432]	@ (8007b28 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007978:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800797a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800797e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007982:	4b69      	ldr	r3, [pc, #420]	@ (8007b28 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007984:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007986:	4a68      	ldr	r2, [pc, #416]	@ (8007b28 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007988:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800798c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800798e:	4b66      	ldr	r3, [pc, #408]	@ (8007b28 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007990:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007992:	4a65      	ldr	r2, [pc, #404]	@ (8007b28 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007994:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007998:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800799a:	4a63      	ldr	r2, [pc, #396]	@ (8007b28 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800799c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079a0:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80079a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80079a6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80079aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80079ae:	d118      	bne.n	80079e2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079b0:	f7f9 fb58 	bl	8001064 <HAL_GetTick>
 80079b4:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80079b8:	e00d      	b.n	80079d6 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80079ba:	f7f9 fb53 	bl	8001064 <HAL_GetTick>
 80079be:	4602      	mov	r2, r0
 80079c0:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80079c4:	1ad2      	subs	r2, r2, r3
 80079c6:	f241 3388 	movw	r3, #5000	@ 0x1388
 80079ca:	429a      	cmp	r2, r3
 80079cc:	d903      	bls.n	80079d6 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80079ce:	2303      	movs	r3, #3
 80079d0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 80079d4:	e005      	b.n	80079e2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80079d6:	4b54      	ldr	r3, [pc, #336]	@ (8007b28 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80079d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80079da:	f003 0302 	and.w	r3, r3, #2
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d0eb      	beq.n	80079ba <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80079e2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d129      	bne.n	8007a3e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80079ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80079ee:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80079f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80079f6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80079fa:	d10e      	bne.n	8007a1a <HAL_RCCEx_PeriphCLKConfig+0x846>
 80079fc:	4b4a      	ldr	r3, [pc, #296]	@ (8007b28 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80079fe:	691b      	ldr	r3, [r3, #16]
 8007a00:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8007a04:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007a08:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007a0c:	091a      	lsrs	r2, r3, #4
 8007a0e:	4b48      	ldr	r3, [pc, #288]	@ (8007b30 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8007a10:	4013      	ands	r3, r2
 8007a12:	4a45      	ldr	r2, [pc, #276]	@ (8007b28 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007a14:	430b      	orrs	r3, r1
 8007a16:	6113      	str	r3, [r2, #16]
 8007a18:	e005      	b.n	8007a26 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8007a1a:	4b43      	ldr	r3, [pc, #268]	@ (8007b28 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007a1c:	691b      	ldr	r3, [r3, #16]
 8007a1e:	4a42      	ldr	r2, [pc, #264]	@ (8007b28 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007a20:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007a24:	6113      	str	r3, [r2, #16]
 8007a26:	4b40      	ldr	r3, [pc, #256]	@ (8007b28 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007a28:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8007a2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007a2e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007a32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007a36:	4a3c      	ldr	r2, [pc, #240]	@ (8007b28 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007a38:	430b      	orrs	r3, r1
 8007a3a:	6713      	str	r3, [r2, #112]	@ 0x70
 8007a3c:	e008      	b.n	8007a50 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007a3e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007a42:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 8007a46:	e003      	b.n	8007a50 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a48:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007a4c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007a50:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a58:	f002 0301 	and.w	r3, r2, #1
 8007a5c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007a60:	2300      	movs	r3, #0
 8007a62:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007a66:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007a6a:	460b      	mov	r3, r1
 8007a6c:	4313      	orrs	r3, r2
 8007a6e:	f000 8090 	beq.w	8007b92 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8007a72:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007a76:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007a7a:	2b28      	cmp	r3, #40	@ 0x28
 8007a7c:	d870      	bhi.n	8007b60 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8007a7e:	a201      	add	r2, pc, #4	@ (adr r2, 8007a84 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8007a80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a84:	08007b69 	.word	0x08007b69
 8007a88:	08007b61 	.word	0x08007b61
 8007a8c:	08007b61 	.word	0x08007b61
 8007a90:	08007b61 	.word	0x08007b61
 8007a94:	08007b61 	.word	0x08007b61
 8007a98:	08007b61 	.word	0x08007b61
 8007a9c:	08007b61 	.word	0x08007b61
 8007aa0:	08007b61 	.word	0x08007b61
 8007aa4:	08007b35 	.word	0x08007b35
 8007aa8:	08007b61 	.word	0x08007b61
 8007aac:	08007b61 	.word	0x08007b61
 8007ab0:	08007b61 	.word	0x08007b61
 8007ab4:	08007b61 	.word	0x08007b61
 8007ab8:	08007b61 	.word	0x08007b61
 8007abc:	08007b61 	.word	0x08007b61
 8007ac0:	08007b61 	.word	0x08007b61
 8007ac4:	08007b4b 	.word	0x08007b4b
 8007ac8:	08007b61 	.word	0x08007b61
 8007acc:	08007b61 	.word	0x08007b61
 8007ad0:	08007b61 	.word	0x08007b61
 8007ad4:	08007b61 	.word	0x08007b61
 8007ad8:	08007b61 	.word	0x08007b61
 8007adc:	08007b61 	.word	0x08007b61
 8007ae0:	08007b61 	.word	0x08007b61
 8007ae4:	08007b69 	.word	0x08007b69
 8007ae8:	08007b61 	.word	0x08007b61
 8007aec:	08007b61 	.word	0x08007b61
 8007af0:	08007b61 	.word	0x08007b61
 8007af4:	08007b61 	.word	0x08007b61
 8007af8:	08007b61 	.word	0x08007b61
 8007afc:	08007b61 	.word	0x08007b61
 8007b00:	08007b61 	.word	0x08007b61
 8007b04:	08007b69 	.word	0x08007b69
 8007b08:	08007b61 	.word	0x08007b61
 8007b0c:	08007b61 	.word	0x08007b61
 8007b10:	08007b61 	.word	0x08007b61
 8007b14:	08007b61 	.word	0x08007b61
 8007b18:	08007b61 	.word	0x08007b61
 8007b1c:	08007b61 	.word	0x08007b61
 8007b20:	08007b61 	.word	0x08007b61
 8007b24:	08007b69 	.word	0x08007b69
 8007b28:	58024400 	.word	0x58024400
 8007b2c:	58024800 	.word	0x58024800
 8007b30:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007b34:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007b38:	3308      	adds	r3, #8
 8007b3a:	2101      	movs	r1, #1
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	f000 ffc5 	bl	8008acc <RCCEx_PLL2_Config>
 8007b42:	4603      	mov	r3, r0
 8007b44:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007b48:	e00f      	b.n	8007b6a <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007b4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007b4e:	3328      	adds	r3, #40	@ 0x28
 8007b50:	2101      	movs	r1, #1
 8007b52:	4618      	mov	r0, r3
 8007b54:	f001 f86c 	bl	8008c30 <RCCEx_PLL3_Config>
 8007b58:	4603      	mov	r3, r0
 8007b5a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007b5e:	e004      	b.n	8007b6a <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007b60:	2301      	movs	r3, #1
 8007b62:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007b66:	e000      	b.n	8007b6a <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8007b68:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b6a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d10b      	bne.n	8007b8a <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007b72:	4bc0      	ldr	r3, [pc, #768]	@ (8007e74 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007b74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b76:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8007b7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007b7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007b82:	4abc      	ldr	r2, [pc, #752]	@ (8007e74 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007b84:	430b      	orrs	r3, r1
 8007b86:	6553      	str	r3, [r2, #84]	@ 0x54
 8007b88:	e003      	b.n	8007b92 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b8a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007b8e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007b92:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b9a:	f002 0302 	and.w	r3, r2, #2
 8007b9e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007ba8:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8007bac:	460b      	mov	r3, r1
 8007bae:	4313      	orrs	r3, r2
 8007bb0:	d043      	beq.n	8007c3a <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8007bb2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007bb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007bba:	2b05      	cmp	r3, #5
 8007bbc:	d824      	bhi.n	8007c08 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8007bbe:	a201      	add	r2, pc, #4	@ (adr r2, 8007bc4 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8007bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bc4:	08007c11 	.word	0x08007c11
 8007bc8:	08007bdd 	.word	0x08007bdd
 8007bcc:	08007bf3 	.word	0x08007bf3
 8007bd0:	08007c11 	.word	0x08007c11
 8007bd4:	08007c11 	.word	0x08007c11
 8007bd8:	08007c11 	.word	0x08007c11
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007bdc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007be0:	3308      	adds	r3, #8
 8007be2:	2101      	movs	r1, #1
 8007be4:	4618      	mov	r0, r3
 8007be6:	f000 ff71 	bl	8008acc <RCCEx_PLL2_Config>
 8007bea:	4603      	mov	r3, r0
 8007bec:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007bf0:	e00f      	b.n	8007c12 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007bf2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007bf6:	3328      	adds	r3, #40	@ 0x28
 8007bf8:	2101      	movs	r1, #1
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	f001 f818 	bl	8008c30 <RCCEx_PLL3_Config>
 8007c00:	4603      	mov	r3, r0
 8007c02:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007c06:	e004      	b.n	8007c12 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007c08:	2301      	movs	r3, #1
 8007c0a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007c0e:	e000      	b.n	8007c12 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8007c10:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c12:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d10b      	bne.n	8007c32 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007c1a:	4b96      	ldr	r3, [pc, #600]	@ (8007e74 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007c1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c1e:	f023 0107 	bic.w	r1, r3, #7
 8007c22:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007c26:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007c2a:	4a92      	ldr	r2, [pc, #584]	@ (8007e74 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007c2c:	430b      	orrs	r3, r1
 8007c2e:	6553      	str	r3, [r2, #84]	@ 0x54
 8007c30:	e003      	b.n	8007c3a <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c32:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007c36:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007c3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c42:	f002 0304 	and.w	r3, r2, #4
 8007c46:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007c50:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8007c54:	460b      	mov	r3, r1
 8007c56:	4313      	orrs	r3, r2
 8007c58:	d043      	beq.n	8007ce2 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007c5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007c5e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007c62:	2b05      	cmp	r3, #5
 8007c64:	d824      	bhi.n	8007cb0 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8007c66:	a201      	add	r2, pc, #4	@ (adr r2, 8007c6c <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8007c68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c6c:	08007cb9 	.word	0x08007cb9
 8007c70:	08007c85 	.word	0x08007c85
 8007c74:	08007c9b 	.word	0x08007c9b
 8007c78:	08007cb9 	.word	0x08007cb9
 8007c7c:	08007cb9 	.word	0x08007cb9
 8007c80:	08007cb9 	.word	0x08007cb9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007c84:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007c88:	3308      	adds	r3, #8
 8007c8a:	2101      	movs	r1, #1
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	f000 ff1d 	bl	8008acc <RCCEx_PLL2_Config>
 8007c92:	4603      	mov	r3, r0
 8007c94:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007c98:	e00f      	b.n	8007cba <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007c9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007c9e:	3328      	adds	r3, #40	@ 0x28
 8007ca0:	2101      	movs	r1, #1
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	f000 ffc4 	bl	8008c30 <RCCEx_PLL3_Config>
 8007ca8:	4603      	mov	r3, r0
 8007caa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007cae:	e004      	b.n	8007cba <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007cb0:	2301      	movs	r3, #1
 8007cb2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007cb6:	e000      	b.n	8007cba <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8007cb8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007cba:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d10b      	bne.n	8007cda <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007cc2:	4b6c      	ldr	r3, [pc, #432]	@ (8007e74 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007cc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007cc6:	f023 0107 	bic.w	r1, r3, #7
 8007cca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007cce:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007cd2:	4a68      	ldr	r2, [pc, #416]	@ (8007e74 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007cd4:	430b      	orrs	r3, r1
 8007cd6:	6593      	str	r3, [r2, #88]	@ 0x58
 8007cd8:	e003      	b.n	8007ce2 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cda:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007cde:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007ce2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cea:	f002 0320 	and.w	r3, r2, #32
 8007cee:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007cf8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007cfc:	460b      	mov	r3, r1
 8007cfe:	4313      	orrs	r3, r2
 8007d00:	d055      	beq.n	8007dae <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8007d02:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007d06:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007d0a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007d0e:	d033      	beq.n	8007d78 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8007d10:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007d14:	d82c      	bhi.n	8007d70 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8007d16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d1a:	d02f      	beq.n	8007d7c <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8007d1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d20:	d826      	bhi.n	8007d70 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8007d22:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007d26:	d02b      	beq.n	8007d80 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8007d28:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007d2c:	d820      	bhi.n	8007d70 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8007d2e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007d32:	d012      	beq.n	8007d5a <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8007d34:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007d38:	d81a      	bhi.n	8007d70 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d022      	beq.n	8007d84 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8007d3e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007d42:	d115      	bne.n	8007d70 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007d44:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007d48:	3308      	adds	r3, #8
 8007d4a:	2100      	movs	r1, #0
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	f000 febd 	bl	8008acc <RCCEx_PLL2_Config>
 8007d52:	4603      	mov	r3, r0
 8007d54:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007d58:	e015      	b.n	8007d86 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007d5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007d5e:	3328      	adds	r3, #40	@ 0x28
 8007d60:	2102      	movs	r1, #2
 8007d62:	4618      	mov	r0, r3
 8007d64:	f000 ff64 	bl	8008c30 <RCCEx_PLL3_Config>
 8007d68:	4603      	mov	r3, r0
 8007d6a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007d6e:	e00a      	b.n	8007d86 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007d70:	2301      	movs	r3, #1
 8007d72:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007d76:	e006      	b.n	8007d86 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8007d78:	bf00      	nop
 8007d7a:	e004      	b.n	8007d86 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8007d7c:	bf00      	nop
 8007d7e:	e002      	b.n	8007d86 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8007d80:	bf00      	nop
 8007d82:	e000      	b.n	8007d86 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8007d84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d86:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d10b      	bne.n	8007da6 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007d8e:	4b39      	ldr	r3, [pc, #228]	@ (8007e74 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007d90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d92:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007d96:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007d9a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007d9e:	4a35      	ldr	r2, [pc, #212]	@ (8007e74 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007da0:	430b      	orrs	r3, r1
 8007da2:	6553      	str	r3, [r2, #84]	@ 0x54
 8007da4:	e003      	b.n	8007dae <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007da6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007daa:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007dae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007db6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8007dba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007dc4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8007dc8:	460b      	mov	r3, r1
 8007dca:	4313      	orrs	r3, r2
 8007dcc:	d058      	beq.n	8007e80 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8007dce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007dd2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007dd6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007dda:	d033      	beq.n	8007e44 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8007ddc:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007de0:	d82c      	bhi.n	8007e3c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8007de2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007de6:	d02f      	beq.n	8007e48 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8007de8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007dec:	d826      	bhi.n	8007e3c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8007dee:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007df2:	d02b      	beq.n	8007e4c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8007df4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007df8:	d820      	bhi.n	8007e3c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8007dfa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007dfe:	d012      	beq.n	8007e26 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8007e00:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007e04:	d81a      	bhi.n	8007e3c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d022      	beq.n	8007e50 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 8007e0a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007e0e:	d115      	bne.n	8007e3c <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007e10:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007e14:	3308      	adds	r3, #8
 8007e16:	2100      	movs	r1, #0
 8007e18:	4618      	mov	r0, r3
 8007e1a:	f000 fe57 	bl	8008acc <RCCEx_PLL2_Config>
 8007e1e:	4603      	mov	r3, r0
 8007e20:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007e24:	e015      	b.n	8007e52 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007e26:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007e2a:	3328      	adds	r3, #40	@ 0x28
 8007e2c:	2102      	movs	r1, #2
 8007e2e:	4618      	mov	r0, r3
 8007e30:	f000 fefe 	bl	8008c30 <RCCEx_PLL3_Config>
 8007e34:	4603      	mov	r3, r0
 8007e36:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007e3a:	e00a      	b.n	8007e52 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007e3c:	2301      	movs	r3, #1
 8007e3e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007e42:	e006      	b.n	8007e52 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8007e44:	bf00      	nop
 8007e46:	e004      	b.n	8007e52 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8007e48:	bf00      	nop
 8007e4a:	e002      	b.n	8007e52 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8007e4c:	bf00      	nop
 8007e4e:	e000      	b.n	8007e52 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8007e50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e52:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d10e      	bne.n	8007e78 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007e5a:	4b06      	ldr	r3, [pc, #24]	@ (8007e74 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007e5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e5e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8007e62:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007e66:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007e6a:	4a02      	ldr	r2, [pc, #8]	@ (8007e74 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007e6c:	430b      	orrs	r3, r1
 8007e6e:	6593      	str	r3, [r2, #88]	@ 0x58
 8007e70:	e006      	b.n	8007e80 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 8007e72:	bf00      	nop
 8007e74:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e78:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007e7c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007e80:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e88:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8007e8c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007e90:	2300      	movs	r3, #0
 8007e92:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007e96:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8007e9a:	460b      	mov	r3, r1
 8007e9c:	4313      	orrs	r3, r2
 8007e9e:	d055      	beq.n	8007f4c <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8007ea0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007ea4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007ea8:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007eac:	d033      	beq.n	8007f16 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8007eae:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007eb2:	d82c      	bhi.n	8007f0e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8007eb4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007eb8:	d02f      	beq.n	8007f1a <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8007eba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007ebe:	d826      	bhi.n	8007f0e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8007ec0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007ec4:	d02b      	beq.n	8007f1e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8007ec6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007eca:	d820      	bhi.n	8007f0e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8007ecc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007ed0:	d012      	beq.n	8007ef8 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8007ed2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007ed6:	d81a      	bhi.n	8007f0e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d022      	beq.n	8007f22 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8007edc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007ee0:	d115      	bne.n	8007f0e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007ee2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007ee6:	3308      	adds	r3, #8
 8007ee8:	2100      	movs	r1, #0
 8007eea:	4618      	mov	r0, r3
 8007eec:	f000 fdee 	bl	8008acc <RCCEx_PLL2_Config>
 8007ef0:	4603      	mov	r3, r0
 8007ef2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007ef6:	e015      	b.n	8007f24 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007ef8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007efc:	3328      	adds	r3, #40	@ 0x28
 8007efe:	2102      	movs	r1, #2
 8007f00:	4618      	mov	r0, r3
 8007f02:	f000 fe95 	bl	8008c30 <RCCEx_PLL3_Config>
 8007f06:	4603      	mov	r3, r0
 8007f08:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007f0c:	e00a      	b.n	8007f24 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007f0e:	2301      	movs	r3, #1
 8007f10:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007f14:	e006      	b.n	8007f24 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8007f16:	bf00      	nop
 8007f18:	e004      	b.n	8007f24 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8007f1a:	bf00      	nop
 8007f1c:	e002      	b.n	8007f24 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8007f1e:	bf00      	nop
 8007f20:	e000      	b.n	8007f24 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8007f22:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f24:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d10b      	bne.n	8007f44 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007f2c:	4ba1      	ldr	r3, [pc, #644]	@ (80081b4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007f2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f30:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8007f34:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007f38:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007f3c:	4a9d      	ldr	r2, [pc, #628]	@ (80081b4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007f3e:	430b      	orrs	r3, r1
 8007f40:	6593      	str	r3, [r2, #88]	@ 0x58
 8007f42:	e003      	b.n	8007f4c <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f44:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007f48:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007f4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f54:	f002 0308 	and.w	r3, r2, #8
 8007f58:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007f62:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8007f66:	460b      	mov	r3, r1
 8007f68:	4313      	orrs	r3, r2
 8007f6a:	d01e      	beq.n	8007faa <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8007f6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007f70:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007f74:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007f78:	d10c      	bne.n	8007f94 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007f7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007f7e:	3328      	adds	r3, #40	@ 0x28
 8007f80:	2102      	movs	r1, #2
 8007f82:	4618      	mov	r0, r3
 8007f84:	f000 fe54 	bl	8008c30 <RCCEx_PLL3_Config>
 8007f88:	4603      	mov	r3, r0
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d002      	beq.n	8007f94 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 8007f8e:	2301      	movs	r3, #1
 8007f90:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007f94:	4b87      	ldr	r3, [pc, #540]	@ (80081b4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007f96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f98:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007f9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007fa0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007fa4:	4a83      	ldr	r2, [pc, #524]	@ (80081b4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007fa6:	430b      	orrs	r3, r1
 8007fa8:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007faa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fb2:	f002 0310 	and.w	r3, r2, #16
 8007fb6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007fba:	2300      	movs	r3, #0
 8007fbc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007fc0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8007fc4:	460b      	mov	r3, r1
 8007fc6:	4313      	orrs	r3, r2
 8007fc8:	d01e      	beq.n	8008008 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8007fca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007fce:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007fd2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007fd6:	d10c      	bne.n	8007ff2 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007fd8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007fdc:	3328      	adds	r3, #40	@ 0x28
 8007fde:	2102      	movs	r1, #2
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	f000 fe25 	bl	8008c30 <RCCEx_PLL3_Config>
 8007fe6:	4603      	mov	r3, r0
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d002      	beq.n	8007ff2 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8007fec:	2301      	movs	r3, #1
 8007fee:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007ff2:	4b70      	ldr	r3, [pc, #448]	@ (80081b4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007ff4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ff6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007ffa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007ffe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008002:	4a6c      	ldr	r2, [pc, #432]	@ (80081b4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008004:	430b      	orrs	r3, r1
 8008006:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008008:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800800c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008010:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8008014:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008018:	2300      	movs	r3, #0
 800801a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800801e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8008022:	460b      	mov	r3, r1
 8008024:	4313      	orrs	r3, r2
 8008026:	d03e      	beq.n	80080a6 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8008028:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800802c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008030:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008034:	d022      	beq.n	800807c <HAL_RCCEx_PeriphCLKConfig+0xea8>
 8008036:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800803a:	d81b      	bhi.n	8008074 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800803c:	2b00      	cmp	r3, #0
 800803e:	d003      	beq.n	8008048 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8008040:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008044:	d00b      	beq.n	800805e <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8008046:	e015      	b.n	8008074 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008048:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800804c:	3308      	adds	r3, #8
 800804e:	2100      	movs	r1, #0
 8008050:	4618      	mov	r0, r3
 8008052:	f000 fd3b 	bl	8008acc <RCCEx_PLL2_Config>
 8008056:	4603      	mov	r3, r0
 8008058:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800805c:	e00f      	b.n	800807e <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800805e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008062:	3328      	adds	r3, #40	@ 0x28
 8008064:	2102      	movs	r1, #2
 8008066:	4618      	mov	r0, r3
 8008068:	f000 fde2 	bl	8008c30 <RCCEx_PLL3_Config>
 800806c:	4603      	mov	r3, r0
 800806e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008072:	e004      	b.n	800807e <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008074:	2301      	movs	r3, #1
 8008076:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800807a:	e000      	b.n	800807e <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 800807c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800807e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008082:	2b00      	cmp	r3, #0
 8008084:	d10b      	bne.n	800809e <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008086:	4b4b      	ldr	r3, [pc, #300]	@ (80081b4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008088:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800808a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800808e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008092:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008096:	4a47      	ldr	r2, [pc, #284]	@ (80081b4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008098:	430b      	orrs	r3, r1
 800809a:	6593      	str	r3, [r2, #88]	@ 0x58
 800809c:	e003      	b.n	80080a6 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800809e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80080a2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80080a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80080aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080ae:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80080b2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80080b4:	2300      	movs	r3, #0
 80080b6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80080b8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80080bc:	460b      	mov	r3, r1
 80080be:	4313      	orrs	r3, r2
 80080c0:	d03b      	beq.n	800813a <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80080c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80080c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80080ca:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80080ce:	d01f      	beq.n	8008110 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 80080d0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80080d4:	d818      	bhi.n	8008108 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80080d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80080da:	d003      	beq.n	80080e4 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 80080dc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80080e0:	d007      	beq.n	80080f2 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 80080e2:	e011      	b.n	8008108 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80080e4:	4b33      	ldr	r3, [pc, #204]	@ (80081b4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80080e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080e8:	4a32      	ldr	r2, [pc, #200]	@ (80081b4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80080ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80080ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80080f0:	e00f      	b.n	8008112 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80080f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80080f6:	3328      	adds	r3, #40	@ 0x28
 80080f8:	2101      	movs	r1, #1
 80080fa:	4618      	mov	r0, r3
 80080fc:	f000 fd98 	bl	8008c30 <RCCEx_PLL3_Config>
 8008100:	4603      	mov	r3, r0
 8008102:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 8008106:	e004      	b.n	8008112 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008108:	2301      	movs	r3, #1
 800810a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800810e:	e000      	b.n	8008112 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8008110:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008112:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008116:	2b00      	cmp	r3, #0
 8008118:	d10b      	bne.n	8008132 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800811a:	4b26      	ldr	r3, [pc, #152]	@ (80081b4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800811c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800811e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8008122:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008126:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800812a:	4a22      	ldr	r2, [pc, #136]	@ (80081b4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800812c:	430b      	orrs	r3, r1
 800812e:	6553      	str	r3, [r2, #84]	@ 0x54
 8008130:	e003      	b.n	800813a <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008132:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008136:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800813a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800813e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008142:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8008146:	673b      	str	r3, [r7, #112]	@ 0x70
 8008148:	2300      	movs	r3, #0
 800814a:	677b      	str	r3, [r7, #116]	@ 0x74
 800814c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8008150:	460b      	mov	r3, r1
 8008152:	4313      	orrs	r3, r2
 8008154:	d034      	beq.n	80081c0 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8008156:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800815a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800815c:	2b00      	cmp	r3, #0
 800815e:	d003      	beq.n	8008168 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8008160:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008164:	d007      	beq.n	8008176 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8008166:	e011      	b.n	800818c <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008168:	4b12      	ldr	r3, [pc, #72]	@ (80081b4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800816a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800816c:	4a11      	ldr	r2, [pc, #68]	@ (80081b4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800816e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008172:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008174:	e00e      	b.n	8008194 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008176:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800817a:	3308      	adds	r3, #8
 800817c:	2102      	movs	r1, #2
 800817e:	4618      	mov	r0, r3
 8008180:	f000 fca4 	bl	8008acc <RCCEx_PLL2_Config>
 8008184:	4603      	mov	r3, r0
 8008186:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800818a:	e003      	b.n	8008194 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 800818c:	2301      	movs	r3, #1
 800818e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008192:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008194:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008198:	2b00      	cmp	r3, #0
 800819a:	d10d      	bne.n	80081b8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800819c:	4b05      	ldr	r3, [pc, #20]	@ (80081b4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800819e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80081a0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80081a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80081a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80081aa:	4a02      	ldr	r2, [pc, #8]	@ (80081b4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80081ac:	430b      	orrs	r3, r1
 80081ae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80081b0:	e006      	b.n	80081c0 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 80081b2:	bf00      	nop
 80081b4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081b8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80081bc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80081c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80081c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081c8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80081cc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80081ce:	2300      	movs	r3, #0
 80081d0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80081d2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80081d6:	460b      	mov	r3, r1
 80081d8:	4313      	orrs	r3, r2
 80081da:	d00c      	beq.n	80081f6 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80081dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80081e0:	3328      	adds	r3, #40	@ 0x28
 80081e2:	2102      	movs	r1, #2
 80081e4:	4618      	mov	r0, r3
 80081e6:	f000 fd23 	bl	8008c30 <RCCEx_PLL3_Config>
 80081ea:	4603      	mov	r3, r0
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d002      	beq.n	80081f6 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 80081f0:	2301      	movs	r3, #1
 80081f2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80081f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80081fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081fe:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8008202:	663b      	str	r3, [r7, #96]	@ 0x60
 8008204:	2300      	movs	r3, #0
 8008206:	667b      	str	r3, [r7, #100]	@ 0x64
 8008208:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800820c:	460b      	mov	r3, r1
 800820e:	4313      	orrs	r3, r2
 8008210:	d038      	beq.n	8008284 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 8008212:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008216:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800821a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800821e:	d018      	beq.n	8008252 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8008220:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008224:	d811      	bhi.n	800824a <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8008226:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800822a:	d014      	beq.n	8008256 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 800822c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008230:	d80b      	bhi.n	800824a <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8008232:	2b00      	cmp	r3, #0
 8008234:	d011      	beq.n	800825a <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8008236:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800823a:	d106      	bne.n	800824a <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800823c:	4bc3      	ldr	r3, [pc, #780]	@ (800854c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800823e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008240:	4ac2      	ldr	r2, [pc, #776]	@ (800854c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008242:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008246:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8008248:	e008      	b.n	800825c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800824a:	2301      	movs	r3, #1
 800824c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008250:	e004      	b.n	800825c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8008252:	bf00      	nop
 8008254:	e002      	b.n	800825c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8008256:	bf00      	nop
 8008258:	e000      	b.n	800825c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800825a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800825c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008260:	2b00      	cmp	r3, #0
 8008262:	d10b      	bne.n	800827c <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008264:	4bb9      	ldr	r3, [pc, #740]	@ (800854c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008266:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008268:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800826c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008270:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008274:	4ab5      	ldr	r2, [pc, #724]	@ (800854c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008276:	430b      	orrs	r3, r1
 8008278:	6553      	str	r3, [r2, #84]	@ 0x54
 800827a:	e003      	b.n	8008284 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800827c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008280:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008284:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800828c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8008290:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008292:	2300      	movs	r3, #0
 8008294:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008296:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800829a:	460b      	mov	r3, r1
 800829c:	4313      	orrs	r3, r2
 800829e:	d009      	beq.n	80082b4 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80082a0:	4baa      	ldr	r3, [pc, #680]	@ (800854c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80082a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80082a4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80082a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80082ac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80082ae:	4aa7      	ldr	r2, [pc, #668]	@ (800854c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80082b0:	430b      	orrs	r3, r1
 80082b2:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80082b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80082b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082bc:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80082c0:	653b      	str	r3, [r7, #80]	@ 0x50
 80082c2:	2300      	movs	r3, #0
 80082c4:	657b      	str	r3, [r7, #84]	@ 0x54
 80082c6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80082ca:	460b      	mov	r3, r1
 80082cc:	4313      	orrs	r3, r2
 80082ce:	d009      	beq.n	80082e4 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80082d0:	4b9e      	ldr	r3, [pc, #632]	@ (800854c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80082d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80082d4:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80082d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80082dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80082de:	4a9b      	ldr	r2, [pc, #620]	@ (800854c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80082e0:	430b      	orrs	r3, r1
 80082e2:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 80082e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80082e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082ec:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80082f0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80082f2:	2300      	movs	r3, #0
 80082f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80082f6:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80082fa:	460b      	mov	r3, r1
 80082fc:	4313      	orrs	r3, r2
 80082fe:	d009      	beq.n	8008314 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8008300:	4b92      	ldr	r3, [pc, #584]	@ (800854c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008302:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008304:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 8008308:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800830c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800830e:	4a8f      	ldr	r2, [pc, #572]	@ (800854c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008310:	430b      	orrs	r3, r1
 8008312:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008314:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800831c:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8008320:	643b      	str	r3, [r7, #64]	@ 0x40
 8008322:	2300      	movs	r3, #0
 8008324:	647b      	str	r3, [r7, #68]	@ 0x44
 8008326:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800832a:	460b      	mov	r3, r1
 800832c:	4313      	orrs	r3, r2
 800832e:	d00e      	beq.n	800834e <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008330:	4b86      	ldr	r3, [pc, #536]	@ (800854c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008332:	691b      	ldr	r3, [r3, #16]
 8008334:	4a85      	ldr	r2, [pc, #532]	@ (800854c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008336:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800833a:	6113      	str	r3, [r2, #16]
 800833c:	4b83      	ldr	r3, [pc, #524]	@ (800854c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800833e:	6919      	ldr	r1, [r3, #16]
 8008340:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008344:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8008348:	4a80      	ldr	r2, [pc, #512]	@ (800854c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800834a:	430b      	orrs	r3, r1
 800834c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800834e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008356:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800835a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800835c:	2300      	movs	r3, #0
 800835e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008360:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8008364:	460b      	mov	r3, r1
 8008366:	4313      	orrs	r3, r2
 8008368:	d009      	beq.n	800837e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800836a:	4b78      	ldr	r3, [pc, #480]	@ (800854c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800836c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800836e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8008372:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008376:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008378:	4a74      	ldr	r2, [pc, #464]	@ (800854c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800837a:	430b      	orrs	r3, r1
 800837c:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800837e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008386:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800838a:	633b      	str	r3, [r7, #48]	@ 0x30
 800838c:	2300      	movs	r3, #0
 800838e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008390:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8008394:	460b      	mov	r3, r1
 8008396:	4313      	orrs	r3, r2
 8008398:	d00a      	beq.n	80083b0 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800839a:	4b6c      	ldr	r3, [pc, #432]	@ (800854c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800839c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800839e:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80083a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80083a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80083aa:	4a68      	ldr	r2, [pc, #416]	@ (800854c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80083ac:	430b      	orrs	r3, r1
 80083ae:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80083b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80083b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083b8:	2100      	movs	r1, #0
 80083ba:	62b9      	str	r1, [r7, #40]	@ 0x28
 80083bc:	f003 0301 	and.w	r3, r3, #1
 80083c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80083c2:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80083c6:	460b      	mov	r3, r1
 80083c8:	4313      	orrs	r3, r2
 80083ca:	d011      	beq.n	80083f0 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80083cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80083d0:	3308      	adds	r3, #8
 80083d2:	2100      	movs	r1, #0
 80083d4:	4618      	mov	r0, r3
 80083d6:	f000 fb79 	bl	8008acc <RCCEx_PLL2_Config>
 80083da:	4603      	mov	r3, r0
 80083dc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80083e0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d003      	beq.n	80083f0 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083e8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80083ec:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80083f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80083f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083f8:	2100      	movs	r1, #0
 80083fa:	6239      	str	r1, [r7, #32]
 80083fc:	f003 0302 	and.w	r3, r3, #2
 8008400:	627b      	str	r3, [r7, #36]	@ 0x24
 8008402:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8008406:	460b      	mov	r3, r1
 8008408:	4313      	orrs	r3, r2
 800840a:	d011      	beq.n	8008430 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800840c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008410:	3308      	adds	r3, #8
 8008412:	2101      	movs	r1, #1
 8008414:	4618      	mov	r0, r3
 8008416:	f000 fb59 	bl	8008acc <RCCEx_PLL2_Config>
 800841a:	4603      	mov	r3, r0
 800841c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8008420:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008424:	2b00      	cmp	r3, #0
 8008426:	d003      	beq.n	8008430 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008428:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800842c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8008430:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008438:	2100      	movs	r1, #0
 800843a:	61b9      	str	r1, [r7, #24]
 800843c:	f003 0304 	and.w	r3, r3, #4
 8008440:	61fb      	str	r3, [r7, #28]
 8008442:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008446:	460b      	mov	r3, r1
 8008448:	4313      	orrs	r3, r2
 800844a:	d011      	beq.n	8008470 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800844c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008450:	3308      	adds	r3, #8
 8008452:	2102      	movs	r1, #2
 8008454:	4618      	mov	r0, r3
 8008456:	f000 fb39 	bl	8008acc <RCCEx_PLL2_Config>
 800845a:	4603      	mov	r3, r0
 800845c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8008460:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008464:	2b00      	cmp	r3, #0
 8008466:	d003      	beq.n	8008470 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008468:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800846c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8008470:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008478:	2100      	movs	r1, #0
 800847a:	6139      	str	r1, [r7, #16]
 800847c:	f003 0308 	and.w	r3, r3, #8
 8008480:	617b      	str	r3, [r7, #20]
 8008482:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008486:	460b      	mov	r3, r1
 8008488:	4313      	orrs	r3, r2
 800848a:	d011      	beq.n	80084b0 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800848c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008490:	3328      	adds	r3, #40	@ 0x28
 8008492:	2100      	movs	r1, #0
 8008494:	4618      	mov	r0, r3
 8008496:	f000 fbcb 	bl	8008c30 <RCCEx_PLL3_Config>
 800849a:	4603      	mov	r3, r0
 800849c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 80084a0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d003      	beq.n	80084b0 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084a8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80084ac:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80084b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80084b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084b8:	2100      	movs	r1, #0
 80084ba:	60b9      	str	r1, [r7, #8]
 80084bc:	f003 0310 	and.w	r3, r3, #16
 80084c0:	60fb      	str	r3, [r7, #12]
 80084c2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80084c6:	460b      	mov	r3, r1
 80084c8:	4313      	orrs	r3, r2
 80084ca:	d011      	beq.n	80084f0 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80084cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80084d0:	3328      	adds	r3, #40	@ 0x28
 80084d2:	2101      	movs	r1, #1
 80084d4:	4618      	mov	r0, r3
 80084d6:	f000 fbab 	bl	8008c30 <RCCEx_PLL3_Config>
 80084da:	4603      	mov	r3, r0
 80084dc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80084e0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d003      	beq.n	80084f0 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084e8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80084ec:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80084f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80084f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084f8:	2100      	movs	r1, #0
 80084fa:	6039      	str	r1, [r7, #0]
 80084fc:	f003 0320 	and.w	r3, r3, #32
 8008500:	607b      	str	r3, [r7, #4]
 8008502:	e9d7 1200 	ldrd	r1, r2, [r7]
 8008506:	460b      	mov	r3, r1
 8008508:	4313      	orrs	r3, r2
 800850a:	d011      	beq.n	8008530 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800850c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008510:	3328      	adds	r3, #40	@ 0x28
 8008512:	2102      	movs	r1, #2
 8008514:	4618      	mov	r0, r3
 8008516:	f000 fb8b 	bl	8008c30 <RCCEx_PLL3_Config>
 800851a:	4603      	mov	r3, r0
 800851c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8008520:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008524:	2b00      	cmp	r3, #0
 8008526:	d003      	beq.n	8008530 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008528:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800852c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 8008530:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8008534:	2b00      	cmp	r3, #0
 8008536:	d101      	bne.n	800853c <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8008538:	2300      	movs	r3, #0
 800853a:	e000      	b.n	800853e <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 800853c:	2301      	movs	r3, #1
}
 800853e:	4618      	mov	r0, r3
 8008540:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8008544:	46bd      	mov	sp, r7
 8008546:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800854a:	bf00      	nop
 800854c:	58024400 	.word	0x58024400

08008550 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008550:	b580      	push	{r7, lr}
 8008552:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8008554:	f7fe fda0 	bl	8007098 <HAL_RCC_GetHCLKFreq>
 8008558:	4602      	mov	r2, r0
 800855a:	4b06      	ldr	r3, [pc, #24]	@ (8008574 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800855c:	6a1b      	ldr	r3, [r3, #32]
 800855e:	091b      	lsrs	r3, r3, #4
 8008560:	f003 0307 	and.w	r3, r3, #7
 8008564:	4904      	ldr	r1, [pc, #16]	@ (8008578 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008566:	5ccb      	ldrb	r3, [r1, r3]
 8008568:	f003 031f 	and.w	r3, r3, #31
 800856c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8008570:	4618      	mov	r0, r3
 8008572:	bd80      	pop	{r7, pc}
 8008574:	58024400 	.word	0x58024400
 8008578:	0800a934 	.word	0x0800a934

0800857c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800857c:	b480      	push	{r7}
 800857e:	b089      	sub	sp, #36	@ 0x24
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008584:	4ba1      	ldr	r3, [pc, #644]	@ (800880c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008586:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008588:	f003 0303 	and.w	r3, r3, #3
 800858c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800858e:	4b9f      	ldr	r3, [pc, #636]	@ (800880c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008590:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008592:	0b1b      	lsrs	r3, r3, #12
 8008594:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008598:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800859a:	4b9c      	ldr	r3, [pc, #624]	@ (800880c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800859c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800859e:	091b      	lsrs	r3, r3, #4
 80085a0:	f003 0301 	and.w	r3, r3, #1
 80085a4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80085a6:	4b99      	ldr	r3, [pc, #612]	@ (800880c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80085a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085aa:	08db      	lsrs	r3, r3, #3
 80085ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80085b0:	693a      	ldr	r2, [r7, #16]
 80085b2:	fb02 f303 	mul.w	r3, r2, r3
 80085b6:	ee07 3a90 	vmov	s15, r3
 80085ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085be:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80085c2:	697b      	ldr	r3, [r7, #20]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	f000 8111 	beq.w	80087ec <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80085ca:	69bb      	ldr	r3, [r7, #24]
 80085cc:	2b02      	cmp	r3, #2
 80085ce:	f000 8083 	beq.w	80086d8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80085d2:	69bb      	ldr	r3, [r7, #24]
 80085d4:	2b02      	cmp	r3, #2
 80085d6:	f200 80a1 	bhi.w	800871c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80085da:	69bb      	ldr	r3, [r7, #24]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d003      	beq.n	80085e8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80085e0:	69bb      	ldr	r3, [r7, #24]
 80085e2:	2b01      	cmp	r3, #1
 80085e4:	d056      	beq.n	8008694 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80085e6:	e099      	b.n	800871c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80085e8:	4b88      	ldr	r3, [pc, #544]	@ (800880c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	f003 0320 	and.w	r3, r3, #32
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d02d      	beq.n	8008650 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80085f4:	4b85      	ldr	r3, [pc, #532]	@ (800880c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	08db      	lsrs	r3, r3, #3
 80085fa:	f003 0303 	and.w	r3, r3, #3
 80085fe:	4a84      	ldr	r2, [pc, #528]	@ (8008810 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008600:	fa22 f303 	lsr.w	r3, r2, r3
 8008604:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008606:	68bb      	ldr	r3, [r7, #8]
 8008608:	ee07 3a90 	vmov	s15, r3
 800860c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008610:	697b      	ldr	r3, [r7, #20]
 8008612:	ee07 3a90 	vmov	s15, r3
 8008616:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800861a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800861e:	4b7b      	ldr	r3, [pc, #492]	@ (800880c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008620:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008622:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008626:	ee07 3a90 	vmov	s15, r3
 800862a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800862e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008632:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008814 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008636:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800863a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800863e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008642:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008646:	ee67 7a27 	vmul.f32	s15, s14, s15
 800864a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800864e:	e087      	b.n	8008760 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008650:	697b      	ldr	r3, [r7, #20]
 8008652:	ee07 3a90 	vmov	s15, r3
 8008656:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800865a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008818 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800865e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008662:	4b6a      	ldr	r3, [pc, #424]	@ (800880c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008664:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008666:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800866a:	ee07 3a90 	vmov	s15, r3
 800866e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008672:	ed97 6a03 	vldr	s12, [r7, #12]
 8008676:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008814 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800867a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800867e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008682:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008686:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800868a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800868e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008692:	e065      	b.n	8008760 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008694:	697b      	ldr	r3, [r7, #20]
 8008696:	ee07 3a90 	vmov	s15, r3
 800869a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800869e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800881c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80086a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80086a6:	4b59      	ldr	r3, [pc, #356]	@ (800880c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80086a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086ae:	ee07 3a90 	vmov	s15, r3
 80086b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80086ba:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008814 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80086be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80086c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80086c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80086ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80086ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80086d6:	e043      	b.n	8008760 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80086d8:	697b      	ldr	r3, [r7, #20]
 80086da:	ee07 3a90 	vmov	s15, r3
 80086de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086e2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008820 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80086e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80086ea:	4b48      	ldr	r3, [pc, #288]	@ (800880c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80086ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086f2:	ee07 3a90 	vmov	s15, r3
 80086f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80086fe:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008814 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008702:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008706:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800870a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800870e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008712:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008716:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800871a:	e021      	b.n	8008760 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800871c:	697b      	ldr	r3, [r7, #20]
 800871e:	ee07 3a90 	vmov	s15, r3
 8008722:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008726:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800881c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800872a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800872e:	4b37      	ldr	r3, [pc, #220]	@ (800880c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008730:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008732:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008736:	ee07 3a90 	vmov	s15, r3
 800873a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800873e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008742:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008814 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008746:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800874a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800874e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008752:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008756:	ee67 7a27 	vmul.f32	s15, s14, s15
 800875a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800875e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8008760:	4b2a      	ldr	r3, [pc, #168]	@ (800880c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008762:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008764:	0a5b      	lsrs	r3, r3, #9
 8008766:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800876a:	ee07 3a90 	vmov	s15, r3
 800876e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008772:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008776:	ee37 7a87 	vadd.f32	s14, s15, s14
 800877a:	edd7 6a07 	vldr	s13, [r7, #28]
 800877e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008782:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008786:	ee17 2a90 	vmov	r2, s15
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800878e:	4b1f      	ldr	r3, [pc, #124]	@ (800880c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008790:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008792:	0c1b      	lsrs	r3, r3, #16
 8008794:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008798:	ee07 3a90 	vmov	s15, r3
 800879c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087a0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80087a4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80087a8:	edd7 6a07 	vldr	s13, [r7, #28]
 80087ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80087b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80087b4:	ee17 2a90 	vmov	r2, s15
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80087bc:	4b13      	ldr	r3, [pc, #76]	@ (800880c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80087be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087c0:	0e1b      	lsrs	r3, r3, #24
 80087c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80087c6:	ee07 3a90 	vmov	s15, r3
 80087ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087ce:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80087d2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80087d6:	edd7 6a07 	vldr	s13, [r7, #28]
 80087da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80087de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80087e2:	ee17 2a90 	vmov	r2, s15
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80087ea:	e008      	b.n	80087fe <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	2200      	movs	r2, #0
 80087f0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	2200      	movs	r2, #0
 80087f6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	2200      	movs	r2, #0
 80087fc:	609a      	str	r2, [r3, #8]
}
 80087fe:	bf00      	nop
 8008800:	3724      	adds	r7, #36	@ 0x24
 8008802:	46bd      	mov	sp, r7
 8008804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008808:	4770      	bx	lr
 800880a:	bf00      	nop
 800880c:	58024400 	.word	0x58024400
 8008810:	03d09000 	.word	0x03d09000
 8008814:	46000000 	.word	0x46000000
 8008818:	4c742400 	.word	0x4c742400
 800881c:	4a742400 	.word	0x4a742400
 8008820:	4bb71b00 	.word	0x4bb71b00

08008824 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8008824:	b480      	push	{r7}
 8008826:	b089      	sub	sp, #36	@ 0x24
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800882c:	4ba1      	ldr	r3, [pc, #644]	@ (8008ab4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800882e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008830:	f003 0303 	and.w	r3, r3, #3
 8008834:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8008836:	4b9f      	ldr	r3, [pc, #636]	@ (8008ab4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008838:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800883a:	0d1b      	lsrs	r3, r3, #20
 800883c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008840:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008842:	4b9c      	ldr	r3, [pc, #624]	@ (8008ab4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008844:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008846:	0a1b      	lsrs	r3, r3, #8
 8008848:	f003 0301 	and.w	r3, r3, #1
 800884c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800884e:	4b99      	ldr	r3, [pc, #612]	@ (8008ab4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008850:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008852:	08db      	lsrs	r3, r3, #3
 8008854:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008858:	693a      	ldr	r2, [r7, #16]
 800885a:	fb02 f303 	mul.w	r3, r2, r3
 800885e:	ee07 3a90 	vmov	s15, r3
 8008862:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008866:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800886a:	697b      	ldr	r3, [r7, #20]
 800886c:	2b00      	cmp	r3, #0
 800886e:	f000 8111 	beq.w	8008a94 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008872:	69bb      	ldr	r3, [r7, #24]
 8008874:	2b02      	cmp	r3, #2
 8008876:	f000 8083 	beq.w	8008980 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800887a:	69bb      	ldr	r3, [r7, #24]
 800887c:	2b02      	cmp	r3, #2
 800887e:	f200 80a1 	bhi.w	80089c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008882:	69bb      	ldr	r3, [r7, #24]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d003      	beq.n	8008890 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008888:	69bb      	ldr	r3, [r7, #24]
 800888a:	2b01      	cmp	r3, #1
 800888c:	d056      	beq.n	800893c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800888e:	e099      	b.n	80089c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008890:	4b88      	ldr	r3, [pc, #544]	@ (8008ab4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	f003 0320 	and.w	r3, r3, #32
 8008898:	2b00      	cmp	r3, #0
 800889a:	d02d      	beq.n	80088f8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800889c:	4b85      	ldr	r3, [pc, #532]	@ (8008ab4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	08db      	lsrs	r3, r3, #3
 80088a2:	f003 0303 	and.w	r3, r3, #3
 80088a6:	4a84      	ldr	r2, [pc, #528]	@ (8008ab8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80088a8:	fa22 f303 	lsr.w	r3, r2, r3
 80088ac:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80088ae:	68bb      	ldr	r3, [r7, #8]
 80088b0:	ee07 3a90 	vmov	s15, r3
 80088b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088b8:	697b      	ldr	r3, [r7, #20]
 80088ba:	ee07 3a90 	vmov	s15, r3
 80088be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088c6:	4b7b      	ldr	r3, [pc, #492]	@ (8008ab4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80088c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088ce:	ee07 3a90 	vmov	s15, r3
 80088d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80088da:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008abc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80088de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80088e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80088e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80088ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088f2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80088f6:	e087      	b.n	8008a08 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80088f8:	697b      	ldr	r3, [r7, #20]
 80088fa:	ee07 3a90 	vmov	s15, r3
 80088fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008902:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008ac0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008906:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800890a:	4b6a      	ldr	r3, [pc, #424]	@ (8008ab4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800890c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800890e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008912:	ee07 3a90 	vmov	s15, r3
 8008916:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800891a:	ed97 6a03 	vldr	s12, [r7, #12]
 800891e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008abc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008922:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008926:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800892a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800892e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008932:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008936:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800893a:	e065      	b.n	8008a08 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800893c:	697b      	ldr	r3, [r7, #20]
 800893e:	ee07 3a90 	vmov	s15, r3
 8008942:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008946:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008ac4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800894a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800894e:	4b59      	ldr	r3, [pc, #356]	@ (8008ab4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008952:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008956:	ee07 3a90 	vmov	s15, r3
 800895a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800895e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008962:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008abc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008966:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800896a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800896e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008972:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008976:	ee67 7a27 	vmul.f32	s15, s14, s15
 800897a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800897e:	e043      	b.n	8008a08 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008980:	697b      	ldr	r3, [r7, #20]
 8008982:	ee07 3a90 	vmov	s15, r3
 8008986:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800898a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008ac8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800898e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008992:	4b48      	ldr	r3, [pc, #288]	@ (8008ab4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008994:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008996:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800899a:	ee07 3a90 	vmov	s15, r3
 800899e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80089a6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008abc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80089aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80089ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80089b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80089b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80089ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80089c2:	e021      	b.n	8008a08 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80089c4:	697b      	ldr	r3, [r7, #20]
 80089c6:	ee07 3a90 	vmov	s15, r3
 80089ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089ce:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008ac4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80089d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80089d6:	4b37      	ldr	r3, [pc, #220]	@ (8008ab4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80089d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089de:	ee07 3a90 	vmov	s15, r3
 80089e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80089ea:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008abc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80089ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80089f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80089f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80089fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80089fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a02:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008a06:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8008a08:	4b2a      	ldr	r3, [pc, #168]	@ (8008ab4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a0c:	0a5b      	lsrs	r3, r3, #9
 8008a0e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008a12:	ee07 3a90 	vmov	s15, r3
 8008a16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a1a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008a1e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008a22:	edd7 6a07 	vldr	s13, [r7, #28]
 8008a26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008a2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008a2e:	ee17 2a90 	vmov	r2, s15
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8008a36:	4b1f      	ldr	r3, [pc, #124]	@ (8008ab4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a3a:	0c1b      	lsrs	r3, r3, #16
 8008a3c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008a40:	ee07 3a90 	vmov	s15, r3
 8008a44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a48:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008a4c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008a50:	edd7 6a07 	vldr	s13, [r7, #28]
 8008a54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008a58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008a5c:	ee17 2a90 	vmov	r2, s15
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8008a64:	4b13      	ldr	r3, [pc, #76]	@ (8008ab4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a68:	0e1b      	lsrs	r3, r3, #24
 8008a6a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008a6e:	ee07 3a90 	vmov	s15, r3
 8008a72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a76:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008a7a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008a7e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008a82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008a86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008a8a:	ee17 2a90 	vmov	r2, s15
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008a92:	e008      	b.n	8008aa6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	2200      	movs	r2, #0
 8008a98:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	609a      	str	r2, [r3, #8]
}
 8008aa6:	bf00      	nop
 8008aa8:	3724      	adds	r7, #36	@ 0x24
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab0:	4770      	bx	lr
 8008ab2:	bf00      	nop
 8008ab4:	58024400 	.word	0x58024400
 8008ab8:	03d09000 	.word	0x03d09000
 8008abc:	46000000 	.word	0x46000000
 8008ac0:	4c742400 	.word	0x4c742400
 8008ac4:	4a742400 	.word	0x4a742400
 8008ac8:	4bb71b00 	.word	0x4bb71b00

08008acc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008acc:	b580      	push	{r7, lr}
 8008ace:	b084      	sub	sp, #16
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	6078      	str	r0, [r7, #4]
 8008ad4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008ad6:	2300      	movs	r3, #0
 8008ad8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008ada:	4b53      	ldr	r3, [pc, #332]	@ (8008c28 <RCCEx_PLL2_Config+0x15c>)
 8008adc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ade:	f003 0303 	and.w	r3, r3, #3
 8008ae2:	2b03      	cmp	r3, #3
 8008ae4:	d101      	bne.n	8008aea <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008ae6:	2301      	movs	r3, #1
 8008ae8:	e099      	b.n	8008c1e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008aea:	4b4f      	ldr	r3, [pc, #316]	@ (8008c28 <RCCEx_PLL2_Config+0x15c>)
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	4a4e      	ldr	r2, [pc, #312]	@ (8008c28 <RCCEx_PLL2_Config+0x15c>)
 8008af0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008af4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008af6:	f7f8 fab5 	bl	8001064 <HAL_GetTick>
 8008afa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008afc:	e008      	b.n	8008b10 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008afe:	f7f8 fab1 	bl	8001064 <HAL_GetTick>
 8008b02:	4602      	mov	r2, r0
 8008b04:	68bb      	ldr	r3, [r7, #8]
 8008b06:	1ad3      	subs	r3, r2, r3
 8008b08:	2b02      	cmp	r3, #2
 8008b0a:	d901      	bls.n	8008b10 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008b0c:	2303      	movs	r3, #3
 8008b0e:	e086      	b.n	8008c1e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008b10:	4b45      	ldr	r3, [pc, #276]	@ (8008c28 <RCCEx_PLL2_Config+0x15c>)
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d1f0      	bne.n	8008afe <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008b1c:	4b42      	ldr	r3, [pc, #264]	@ (8008c28 <RCCEx_PLL2_Config+0x15c>)
 8008b1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b20:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	031b      	lsls	r3, r3, #12
 8008b2a:	493f      	ldr	r1, [pc, #252]	@ (8008c28 <RCCEx_PLL2_Config+0x15c>)
 8008b2c:	4313      	orrs	r3, r2
 8008b2e:	628b      	str	r3, [r1, #40]	@ 0x28
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	685b      	ldr	r3, [r3, #4]
 8008b34:	3b01      	subs	r3, #1
 8008b36:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	689b      	ldr	r3, [r3, #8]
 8008b3e:	3b01      	subs	r3, #1
 8008b40:	025b      	lsls	r3, r3, #9
 8008b42:	b29b      	uxth	r3, r3
 8008b44:	431a      	orrs	r2, r3
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	68db      	ldr	r3, [r3, #12]
 8008b4a:	3b01      	subs	r3, #1
 8008b4c:	041b      	lsls	r3, r3, #16
 8008b4e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008b52:	431a      	orrs	r2, r3
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	691b      	ldr	r3, [r3, #16]
 8008b58:	3b01      	subs	r3, #1
 8008b5a:	061b      	lsls	r3, r3, #24
 8008b5c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008b60:	4931      	ldr	r1, [pc, #196]	@ (8008c28 <RCCEx_PLL2_Config+0x15c>)
 8008b62:	4313      	orrs	r3, r2
 8008b64:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008b66:	4b30      	ldr	r3, [pc, #192]	@ (8008c28 <RCCEx_PLL2_Config+0x15c>)
 8008b68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b6a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	695b      	ldr	r3, [r3, #20]
 8008b72:	492d      	ldr	r1, [pc, #180]	@ (8008c28 <RCCEx_PLL2_Config+0x15c>)
 8008b74:	4313      	orrs	r3, r2
 8008b76:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008b78:	4b2b      	ldr	r3, [pc, #172]	@ (8008c28 <RCCEx_PLL2_Config+0x15c>)
 8008b7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b7c:	f023 0220 	bic.w	r2, r3, #32
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	699b      	ldr	r3, [r3, #24]
 8008b84:	4928      	ldr	r1, [pc, #160]	@ (8008c28 <RCCEx_PLL2_Config+0x15c>)
 8008b86:	4313      	orrs	r3, r2
 8008b88:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008b8a:	4b27      	ldr	r3, [pc, #156]	@ (8008c28 <RCCEx_PLL2_Config+0x15c>)
 8008b8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b8e:	4a26      	ldr	r2, [pc, #152]	@ (8008c28 <RCCEx_PLL2_Config+0x15c>)
 8008b90:	f023 0310 	bic.w	r3, r3, #16
 8008b94:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008b96:	4b24      	ldr	r3, [pc, #144]	@ (8008c28 <RCCEx_PLL2_Config+0x15c>)
 8008b98:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008b9a:	4b24      	ldr	r3, [pc, #144]	@ (8008c2c <RCCEx_PLL2_Config+0x160>)
 8008b9c:	4013      	ands	r3, r2
 8008b9e:	687a      	ldr	r2, [r7, #4]
 8008ba0:	69d2      	ldr	r2, [r2, #28]
 8008ba2:	00d2      	lsls	r2, r2, #3
 8008ba4:	4920      	ldr	r1, [pc, #128]	@ (8008c28 <RCCEx_PLL2_Config+0x15c>)
 8008ba6:	4313      	orrs	r3, r2
 8008ba8:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008baa:	4b1f      	ldr	r3, [pc, #124]	@ (8008c28 <RCCEx_PLL2_Config+0x15c>)
 8008bac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bae:	4a1e      	ldr	r2, [pc, #120]	@ (8008c28 <RCCEx_PLL2_Config+0x15c>)
 8008bb0:	f043 0310 	orr.w	r3, r3, #16
 8008bb4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008bb6:	683b      	ldr	r3, [r7, #0]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d106      	bne.n	8008bca <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008bbc:	4b1a      	ldr	r3, [pc, #104]	@ (8008c28 <RCCEx_PLL2_Config+0x15c>)
 8008bbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bc0:	4a19      	ldr	r2, [pc, #100]	@ (8008c28 <RCCEx_PLL2_Config+0x15c>)
 8008bc2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008bc6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008bc8:	e00f      	b.n	8008bea <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008bca:	683b      	ldr	r3, [r7, #0]
 8008bcc:	2b01      	cmp	r3, #1
 8008bce:	d106      	bne.n	8008bde <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008bd0:	4b15      	ldr	r3, [pc, #84]	@ (8008c28 <RCCEx_PLL2_Config+0x15c>)
 8008bd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bd4:	4a14      	ldr	r2, [pc, #80]	@ (8008c28 <RCCEx_PLL2_Config+0x15c>)
 8008bd6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008bda:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008bdc:	e005      	b.n	8008bea <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008bde:	4b12      	ldr	r3, [pc, #72]	@ (8008c28 <RCCEx_PLL2_Config+0x15c>)
 8008be0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008be2:	4a11      	ldr	r2, [pc, #68]	@ (8008c28 <RCCEx_PLL2_Config+0x15c>)
 8008be4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008be8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008bea:	4b0f      	ldr	r3, [pc, #60]	@ (8008c28 <RCCEx_PLL2_Config+0x15c>)
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	4a0e      	ldr	r2, [pc, #56]	@ (8008c28 <RCCEx_PLL2_Config+0x15c>)
 8008bf0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008bf4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008bf6:	f7f8 fa35 	bl	8001064 <HAL_GetTick>
 8008bfa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008bfc:	e008      	b.n	8008c10 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008bfe:	f7f8 fa31 	bl	8001064 <HAL_GetTick>
 8008c02:	4602      	mov	r2, r0
 8008c04:	68bb      	ldr	r3, [r7, #8]
 8008c06:	1ad3      	subs	r3, r2, r3
 8008c08:	2b02      	cmp	r3, #2
 8008c0a:	d901      	bls.n	8008c10 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008c0c:	2303      	movs	r3, #3
 8008c0e:	e006      	b.n	8008c1e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008c10:	4b05      	ldr	r3, [pc, #20]	@ (8008c28 <RCCEx_PLL2_Config+0x15c>)
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d0f0      	beq.n	8008bfe <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008c1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c1e:	4618      	mov	r0, r3
 8008c20:	3710      	adds	r7, #16
 8008c22:	46bd      	mov	sp, r7
 8008c24:	bd80      	pop	{r7, pc}
 8008c26:	bf00      	nop
 8008c28:	58024400 	.word	0x58024400
 8008c2c:	ffff0007 	.word	0xffff0007

08008c30 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b084      	sub	sp, #16
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]
 8008c38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008c3e:	4b53      	ldr	r3, [pc, #332]	@ (8008d8c <RCCEx_PLL3_Config+0x15c>)
 8008c40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c42:	f003 0303 	and.w	r3, r3, #3
 8008c46:	2b03      	cmp	r3, #3
 8008c48:	d101      	bne.n	8008c4e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008c4a:	2301      	movs	r3, #1
 8008c4c:	e099      	b.n	8008d82 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008c4e:	4b4f      	ldr	r3, [pc, #316]	@ (8008d8c <RCCEx_PLL3_Config+0x15c>)
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	4a4e      	ldr	r2, [pc, #312]	@ (8008d8c <RCCEx_PLL3_Config+0x15c>)
 8008c54:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008c58:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008c5a:	f7f8 fa03 	bl	8001064 <HAL_GetTick>
 8008c5e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008c60:	e008      	b.n	8008c74 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008c62:	f7f8 f9ff 	bl	8001064 <HAL_GetTick>
 8008c66:	4602      	mov	r2, r0
 8008c68:	68bb      	ldr	r3, [r7, #8]
 8008c6a:	1ad3      	subs	r3, r2, r3
 8008c6c:	2b02      	cmp	r3, #2
 8008c6e:	d901      	bls.n	8008c74 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008c70:	2303      	movs	r3, #3
 8008c72:	e086      	b.n	8008d82 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008c74:	4b45      	ldr	r3, [pc, #276]	@ (8008d8c <RCCEx_PLL3_Config+0x15c>)
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d1f0      	bne.n	8008c62 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008c80:	4b42      	ldr	r3, [pc, #264]	@ (8008d8c <RCCEx_PLL3_Config+0x15c>)
 8008c82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c84:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	051b      	lsls	r3, r3, #20
 8008c8e:	493f      	ldr	r1, [pc, #252]	@ (8008d8c <RCCEx_PLL3_Config+0x15c>)
 8008c90:	4313      	orrs	r3, r2
 8008c92:	628b      	str	r3, [r1, #40]	@ 0x28
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	685b      	ldr	r3, [r3, #4]
 8008c98:	3b01      	subs	r3, #1
 8008c9a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	689b      	ldr	r3, [r3, #8]
 8008ca2:	3b01      	subs	r3, #1
 8008ca4:	025b      	lsls	r3, r3, #9
 8008ca6:	b29b      	uxth	r3, r3
 8008ca8:	431a      	orrs	r2, r3
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	68db      	ldr	r3, [r3, #12]
 8008cae:	3b01      	subs	r3, #1
 8008cb0:	041b      	lsls	r3, r3, #16
 8008cb2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008cb6:	431a      	orrs	r2, r3
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	691b      	ldr	r3, [r3, #16]
 8008cbc:	3b01      	subs	r3, #1
 8008cbe:	061b      	lsls	r3, r3, #24
 8008cc0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008cc4:	4931      	ldr	r1, [pc, #196]	@ (8008d8c <RCCEx_PLL3_Config+0x15c>)
 8008cc6:	4313      	orrs	r3, r2
 8008cc8:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008cca:	4b30      	ldr	r3, [pc, #192]	@ (8008d8c <RCCEx_PLL3_Config+0x15c>)
 8008ccc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cce:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	695b      	ldr	r3, [r3, #20]
 8008cd6:	492d      	ldr	r1, [pc, #180]	@ (8008d8c <RCCEx_PLL3_Config+0x15c>)
 8008cd8:	4313      	orrs	r3, r2
 8008cda:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008cdc:	4b2b      	ldr	r3, [pc, #172]	@ (8008d8c <RCCEx_PLL3_Config+0x15c>)
 8008cde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ce0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	699b      	ldr	r3, [r3, #24]
 8008ce8:	4928      	ldr	r1, [pc, #160]	@ (8008d8c <RCCEx_PLL3_Config+0x15c>)
 8008cea:	4313      	orrs	r3, r2
 8008cec:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008cee:	4b27      	ldr	r3, [pc, #156]	@ (8008d8c <RCCEx_PLL3_Config+0x15c>)
 8008cf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cf2:	4a26      	ldr	r2, [pc, #152]	@ (8008d8c <RCCEx_PLL3_Config+0x15c>)
 8008cf4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008cf8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008cfa:	4b24      	ldr	r3, [pc, #144]	@ (8008d8c <RCCEx_PLL3_Config+0x15c>)
 8008cfc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008cfe:	4b24      	ldr	r3, [pc, #144]	@ (8008d90 <RCCEx_PLL3_Config+0x160>)
 8008d00:	4013      	ands	r3, r2
 8008d02:	687a      	ldr	r2, [r7, #4]
 8008d04:	69d2      	ldr	r2, [r2, #28]
 8008d06:	00d2      	lsls	r2, r2, #3
 8008d08:	4920      	ldr	r1, [pc, #128]	@ (8008d8c <RCCEx_PLL3_Config+0x15c>)
 8008d0a:	4313      	orrs	r3, r2
 8008d0c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008d0e:	4b1f      	ldr	r3, [pc, #124]	@ (8008d8c <RCCEx_PLL3_Config+0x15c>)
 8008d10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d12:	4a1e      	ldr	r2, [pc, #120]	@ (8008d8c <RCCEx_PLL3_Config+0x15c>)
 8008d14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008d18:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008d1a:	683b      	ldr	r3, [r7, #0]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d106      	bne.n	8008d2e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008d20:	4b1a      	ldr	r3, [pc, #104]	@ (8008d8c <RCCEx_PLL3_Config+0x15c>)
 8008d22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d24:	4a19      	ldr	r2, [pc, #100]	@ (8008d8c <RCCEx_PLL3_Config+0x15c>)
 8008d26:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8008d2a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008d2c:	e00f      	b.n	8008d4e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008d2e:	683b      	ldr	r3, [r7, #0]
 8008d30:	2b01      	cmp	r3, #1
 8008d32:	d106      	bne.n	8008d42 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008d34:	4b15      	ldr	r3, [pc, #84]	@ (8008d8c <RCCEx_PLL3_Config+0x15c>)
 8008d36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d38:	4a14      	ldr	r2, [pc, #80]	@ (8008d8c <RCCEx_PLL3_Config+0x15c>)
 8008d3a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008d3e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008d40:	e005      	b.n	8008d4e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008d42:	4b12      	ldr	r3, [pc, #72]	@ (8008d8c <RCCEx_PLL3_Config+0x15c>)
 8008d44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d46:	4a11      	ldr	r2, [pc, #68]	@ (8008d8c <RCCEx_PLL3_Config+0x15c>)
 8008d48:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008d4c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008d4e:	4b0f      	ldr	r3, [pc, #60]	@ (8008d8c <RCCEx_PLL3_Config+0x15c>)
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	4a0e      	ldr	r2, [pc, #56]	@ (8008d8c <RCCEx_PLL3_Config+0x15c>)
 8008d54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008d58:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008d5a:	f7f8 f983 	bl	8001064 <HAL_GetTick>
 8008d5e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008d60:	e008      	b.n	8008d74 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008d62:	f7f8 f97f 	bl	8001064 <HAL_GetTick>
 8008d66:	4602      	mov	r2, r0
 8008d68:	68bb      	ldr	r3, [r7, #8]
 8008d6a:	1ad3      	subs	r3, r2, r3
 8008d6c:	2b02      	cmp	r3, #2
 8008d6e:	d901      	bls.n	8008d74 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008d70:	2303      	movs	r3, #3
 8008d72:	e006      	b.n	8008d82 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008d74:	4b05      	ldr	r3, [pc, #20]	@ (8008d8c <RCCEx_PLL3_Config+0x15c>)
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d0f0      	beq.n	8008d62 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008d80:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d82:	4618      	mov	r0, r3
 8008d84:	3710      	adds	r7, #16
 8008d86:	46bd      	mov	sp, r7
 8008d88:	bd80      	pop	{r7, pc}
 8008d8a:	bf00      	nop
 8008d8c:	58024400 	.word	0x58024400
 8008d90:	ffff0007 	.word	0xffff0007

08008d94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008d94:	b580      	push	{r7, lr}
 8008d96:	b082      	sub	sp, #8
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d101      	bne.n	8008da6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008da2:	2301      	movs	r3, #1
 8008da4:	e049      	b.n	8008e3a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008dac:	b2db      	uxtb	r3, r3
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d106      	bne.n	8008dc0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	2200      	movs	r2, #0
 8008db6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008dba:	6878      	ldr	r0, [r7, #4]
 8008dbc:	f000 f841 	bl	8008e42 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2202      	movs	r2, #2
 8008dc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681a      	ldr	r2, [r3, #0]
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	3304      	adds	r3, #4
 8008dd0:	4619      	mov	r1, r3
 8008dd2:	4610      	mov	r0, r2
 8008dd4:	f000 f9e8 	bl	80091a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	2201      	movs	r2, #1
 8008ddc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	2201      	movs	r2, #1
 8008de4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	2201      	movs	r2, #1
 8008dec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	2201      	movs	r2, #1
 8008df4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	2201      	movs	r2, #1
 8008dfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	2201      	movs	r2, #1
 8008e04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	2201      	movs	r2, #1
 8008e0c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	2201      	movs	r2, #1
 8008e14:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	2201      	movs	r2, #1
 8008e1c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	2201      	movs	r2, #1
 8008e24:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	2201      	movs	r2, #1
 8008e2c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	2201      	movs	r2, #1
 8008e34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008e38:	2300      	movs	r3, #0
}
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	3708      	adds	r7, #8
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	bd80      	pop	{r7, pc}

08008e42 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8008e42:	b480      	push	{r7}
 8008e44:	b083      	sub	sp, #12
 8008e46:	af00      	add	r7, sp, #0
 8008e48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8008e4a:	bf00      	nop
 8008e4c:	370c      	adds	r7, #12
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e54:	4770      	bx	lr
	...

08008e58 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008e58:	b480      	push	{r7}
 8008e5a:	b085      	sub	sp, #20
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008e66:	b2db      	uxtb	r3, r3
 8008e68:	2b01      	cmp	r3, #1
 8008e6a:	d001      	beq.n	8008e70 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008e6c:	2301      	movs	r3, #1
 8008e6e:	e054      	b.n	8008f1a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	2202      	movs	r2, #2
 8008e74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	68da      	ldr	r2, [r3, #12]
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	f042 0201 	orr.w	r2, r2, #1
 8008e86:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	4a26      	ldr	r2, [pc, #152]	@ (8008f28 <HAL_TIM_Base_Start_IT+0xd0>)
 8008e8e:	4293      	cmp	r3, r2
 8008e90:	d022      	beq.n	8008ed8 <HAL_TIM_Base_Start_IT+0x80>
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008e9a:	d01d      	beq.n	8008ed8 <HAL_TIM_Base_Start_IT+0x80>
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	4a22      	ldr	r2, [pc, #136]	@ (8008f2c <HAL_TIM_Base_Start_IT+0xd4>)
 8008ea2:	4293      	cmp	r3, r2
 8008ea4:	d018      	beq.n	8008ed8 <HAL_TIM_Base_Start_IT+0x80>
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	4a21      	ldr	r2, [pc, #132]	@ (8008f30 <HAL_TIM_Base_Start_IT+0xd8>)
 8008eac:	4293      	cmp	r3, r2
 8008eae:	d013      	beq.n	8008ed8 <HAL_TIM_Base_Start_IT+0x80>
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	4a1f      	ldr	r2, [pc, #124]	@ (8008f34 <HAL_TIM_Base_Start_IT+0xdc>)
 8008eb6:	4293      	cmp	r3, r2
 8008eb8:	d00e      	beq.n	8008ed8 <HAL_TIM_Base_Start_IT+0x80>
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	4a1e      	ldr	r2, [pc, #120]	@ (8008f38 <HAL_TIM_Base_Start_IT+0xe0>)
 8008ec0:	4293      	cmp	r3, r2
 8008ec2:	d009      	beq.n	8008ed8 <HAL_TIM_Base_Start_IT+0x80>
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	4a1c      	ldr	r2, [pc, #112]	@ (8008f3c <HAL_TIM_Base_Start_IT+0xe4>)
 8008eca:	4293      	cmp	r3, r2
 8008ecc:	d004      	beq.n	8008ed8 <HAL_TIM_Base_Start_IT+0x80>
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	4a1b      	ldr	r2, [pc, #108]	@ (8008f40 <HAL_TIM_Base_Start_IT+0xe8>)
 8008ed4:	4293      	cmp	r3, r2
 8008ed6:	d115      	bne.n	8008f04 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	689a      	ldr	r2, [r3, #8]
 8008ede:	4b19      	ldr	r3, [pc, #100]	@ (8008f44 <HAL_TIM_Base_Start_IT+0xec>)
 8008ee0:	4013      	ands	r3, r2
 8008ee2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	2b06      	cmp	r3, #6
 8008ee8:	d015      	beq.n	8008f16 <HAL_TIM_Base_Start_IT+0xbe>
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008ef0:	d011      	beq.n	8008f16 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	681a      	ldr	r2, [r3, #0]
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	f042 0201 	orr.w	r2, r2, #1
 8008f00:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f02:	e008      	b.n	8008f16 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	681a      	ldr	r2, [r3, #0]
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	f042 0201 	orr.w	r2, r2, #1
 8008f12:	601a      	str	r2, [r3, #0]
 8008f14:	e000      	b.n	8008f18 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f16:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008f18:	2300      	movs	r3, #0
}
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	3714      	adds	r7, #20
 8008f1e:	46bd      	mov	sp, r7
 8008f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f24:	4770      	bx	lr
 8008f26:	bf00      	nop
 8008f28:	40010000 	.word	0x40010000
 8008f2c:	40000400 	.word	0x40000400
 8008f30:	40000800 	.word	0x40000800
 8008f34:	40000c00 	.word	0x40000c00
 8008f38:	40010400 	.word	0x40010400
 8008f3c:	40001800 	.word	0x40001800
 8008f40:	40014000 	.word	0x40014000
 8008f44:	00010007 	.word	0x00010007

08008f48 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008f48:	b580      	push	{r7, lr}
 8008f4a:	b084      	sub	sp, #16
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	68db      	ldr	r3, [r3, #12]
 8008f56:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	691b      	ldr	r3, [r3, #16]
 8008f5e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008f60:	68bb      	ldr	r3, [r7, #8]
 8008f62:	f003 0302 	and.w	r3, r3, #2
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d020      	beq.n	8008fac <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	f003 0302 	and.w	r3, r3, #2
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d01b      	beq.n	8008fac <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	f06f 0202 	mvn.w	r2, #2
 8008f7c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	2201      	movs	r2, #1
 8008f82:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	699b      	ldr	r3, [r3, #24]
 8008f8a:	f003 0303 	and.w	r3, r3, #3
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d003      	beq.n	8008f9a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008f92:	6878      	ldr	r0, [r7, #4]
 8008f94:	f000 f8e9 	bl	800916a <HAL_TIM_IC_CaptureCallback>
 8008f98:	e005      	b.n	8008fa6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f9a:	6878      	ldr	r0, [r7, #4]
 8008f9c:	f000 f8db 	bl	8009156 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008fa0:	6878      	ldr	r0, [r7, #4]
 8008fa2:	f000 f8ec 	bl	800917e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	2200      	movs	r2, #0
 8008faa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008fac:	68bb      	ldr	r3, [r7, #8]
 8008fae:	f003 0304 	and.w	r3, r3, #4
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d020      	beq.n	8008ff8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	f003 0304 	and.w	r3, r3, #4
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d01b      	beq.n	8008ff8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	f06f 0204 	mvn.w	r2, #4
 8008fc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	2202      	movs	r2, #2
 8008fce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	699b      	ldr	r3, [r3, #24]
 8008fd6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d003      	beq.n	8008fe6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008fde:	6878      	ldr	r0, [r7, #4]
 8008fe0:	f000 f8c3 	bl	800916a <HAL_TIM_IC_CaptureCallback>
 8008fe4:	e005      	b.n	8008ff2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008fe6:	6878      	ldr	r0, [r7, #4]
 8008fe8:	f000 f8b5 	bl	8009156 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008fec:	6878      	ldr	r0, [r7, #4]
 8008fee:	f000 f8c6 	bl	800917e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	2200      	movs	r2, #0
 8008ff6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008ff8:	68bb      	ldr	r3, [r7, #8]
 8008ffa:	f003 0308 	and.w	r3, r3, #8
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d020      	beq.n	8009044 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	f003 0308 	and.w	r3, r3, #8
 8009008:	2b00      	cmp	r3, #0
 800900a:	d01b      	beq.n	8009044 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	f06f 0208 	mvn.w	r2, #8
 8009014:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	2204      	movs	r2, #4
 800901a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	69db      	ldr	r3, [r3, #28]
 8009022:	f003 0303 	and.w	r3, r3, #3
 8009026:	2b00      	cmp	r3, #0
 8009028:	d003      	beq.n	8009032 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800902a:	6878      	ldr	r0, [r7, #4]
 800902c:	f000 f89d 	bl	800916a <HAL_TIM_IC_CaptureCallback>
 8009030:	e005      	b.n	800903e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009032:	6878      	ldr	r0, [r7, #4]
 8009034:	f000 f88f 	bl	8009156 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009038:	6878      	ldr	r0, [r7, #4]
 800903a:	f000 f8a0 	bl	800917e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	2200      	movs	r2, #0
 8009042:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009044:	68bb      	ldr	r3, [r7, #8]
 8009046:	f003 0310 	and.w	r3, r3, #16
 800904a:	2b00      	cmp	r3, #0
 800904c:	d020      	beq.n	8009090 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	f003 0310 	and.w	r3, r3, #16
 8009054:	2b00      	cmp	r3, #0
 8009056:	d01b      	beq.n	8009090 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	f06f 0210 	mvn.w	r2, #16
 8009060:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	2208      	movs	r2, #8
 8009066:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	69db      	ldr	r3, [r3, #28]
 800906e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009072:	2b00      	cmp	r3, #0
 8009074:	d003      	beq.n	800907e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009076:	6878      	ldr	r0, [r7, #4]
 8009078:	f000 f877 	bl	800916a <HAL_TIM_IC_CaptureCallback>
 800907c:	e005      	b.n	800908a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800907e:	6878      	ldr	r0, [r7, #4]
 8009080:	f000 f869 	bl	8009156 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009084:	6878      	ldr	r0, [r7, #4]
 8009086:	f000 f87a 	bl	800917e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	2200      	movs	r2, #0
 800908e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009090:	68bb      	ldr	r3, [r7, #8]
 8009092:	f003 0301 	and.w	r3, r3, #1
 8009096:	2b00      	cmp	r3, #0
 8009098:	d00c      	beq.n	80090b4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	f003 0301 	and.w	r3, r3, #1
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d007      	beq.n	80090b4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	f06f 0201 	mvn.w	r2, #1
 80090ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80090ae:	6878      	ldr	r0, [r7, #4]
 80090b0:	f7f7 fcfc 	bl	8000aac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80090b4:	68bb      	ldr	r3, [r7, #8]
 80090b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d104      	bne.n	80090c8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80090be:	68bb      	ldr	r3, [r7, #8]
 80090c0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d00c      	beq.n	80090e2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d007      	beq.n	80090e2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80090da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80090dc:	6878      	ldr	r0, [r7, #4]
 80090de:	f000 f913 	bl	8009308 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80090e2:	68bb      	ldr	r3, [r7, #8]
 80090e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d00c      	beq.n	8009106 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d007      	beq.n	8009106 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80090fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009100:	6878      	ldr	r0, [r7, #4]
 8009102:	f000 f90b 	bl	800931c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009106:	68bb      	ldr	r3, [r7, #8]
 8009108:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800910c:	2b00      	cmp	r3, #0
 800910e:	d00c      	beq.n	800912a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009116:	2b00      	cmp	r3, #0
 8009118:	d007      	beq.n	800912a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009122:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009124:	6878      	ldr	r0, [r7, #4]
 8009126:	f000 f834 	bl	8009192 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800912a:	68bb      	ldr	r3, [r7, #8]
 800912c:	f003 0320 	and.w	r3, r3, #32
 8009130:	2b00      	cmp	r3, #0
 8009132:	d00c      	beq.n	800914e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	f003 0320 	and.w	r3, r3, #32
 800913a:	2b00      	cmp	r3, #0
 800913c:	d007      	beq.n	800914e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	f06f 0220 	mvn.w	r2, #32
 8009146:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009148:	6878      	ldr	r0, [r7, #4]
 800914a:	f000 f8d3 	bl	80092f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800914e:	bf00      	nop
 8009150:	3710      	adds	r7, #16
 8009152:	46bd      	mov	sp, r7
 8009154:	bd80      	pop	{r7, pc}

08009156 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009156:	b480      	push	{r7}
 8009158:	b083      	sub	sp, #12
 800915a:	af00      	add	r7, sp, #0
 800915c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800915e:	bf00      	nop
 8009160:	370c      	adds	r7, #12
 8009162:	46bd      	mov	sp, r7
 8009164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009168:	4770      	bx	lr

0800916a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800916a:	b480      	push	{r7}
 800916c:	b083      	sub	sp, #12
 800916e:	af00      	add	r7, sp, #0
 8009170:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009172:	bf00      	nop
 8009174:	370c      	adds	r7, #12
 8009176:	46bd      	mov	sp, r7
 8009178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917c:	4770      	bx	lr

0800917e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800917e:	b480      	push	{r7}
 8009180:	b083      	sub	sp, #12
 8009182:	af00      	add	r7, sp, #0
 8009184:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009186:	bf00      	nop
 8009188:	370c      	adds	r7, #12
 800918a:	46bd      	mov	sp, r7
 800918c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009190:	4770      	bx	lr

08009192 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009192:	b480      	push	{r7}
 8009194:	b083      	sub	sp, #12
 8009196:	af00      	add	r7, sp, #0
 8009198:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800919a:	bf00      	nop
 800919c:	370c      	adds	r7, #12
 800919e:	46bd      	mov	sp, r7
 80091a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a4:	4770      	bx	lr
	...

080091a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80091a8:	b480      	push	{r7}
 80091aa:	b085      	sub	sp, #20
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	6078      	str	r0, [r7, #4]
 80091b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	4a46      	ldr	r2, [pc, #280]	@ (80092d4 <TIM_Base_SetConfig+0x12c>)
 80091bc:	4293      	cmp	r3, r2
 80091be:	d013      	beq.n	80091e8 <TIM_Base_SetConfig+0x40>
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80091c6:	d00f      	beq.n	80091e8 <TIM_Base_SetConfig+0x40>
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	4a43      	ldr	r2, [pc, #268]	@ (80092d8 <TIM_Base_SetConfig+0x130>)
 80091cc:	4293      	cmp	r3, r2
 80091ce:	d00b      	beq.n	80091e8 <TIM_Base_SetConfig+0x40>
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	4a42      	ldr	r2, [pc, #264]	@ (80092dc <TIM_Base_SetConfig+0x134>)
 80091d4:	4293      	cmp	r3, r2
 80091d6:	d007      	beq.n	80091e8 <TIM_Base_SetConfig+0x40>
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	4a41      	ldr	r2, [pc, #260]	@ (80092e0 <TIM_Base_SetConfig+0x138>)
 80091dc:	4293      	cmp	r3, r2
 80091de:	d003      	beq.n	80091e8 <TIM_Base_SetConfig+0x40>
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	4a40      	ldr	r2, [pc, #256]	@ (80092e4 <TIM_Base_SetConfig+0x13c>)
 80091e4:	4293      	cmp	r3, r2
 80091e6:	d108      	bne.n	80091fa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80091ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80091f0:	683b      	ldr	r3, [r7, #0]
 80091f2:	685b      	ldr	r3, [r3, #4]
 80091f4:	68fa      	ldr	r2, [r7, #12]
 80091f6:	4313      	orrs	r3, r2
 80091f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	4a35      	ldr	r2, [pc, #212]	@ (80092d4 <TIM_Base_SetConfig+0x12c>)
 80091fe:	4293      	cmp	r3, r2
 8009200:	d01f      	beq.n	8009242 <TIM_Base_SetConfig+0x9a>
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009208:	d01b      	beq.n	8009242 <TIM_Base_SetConfig+0x9a>
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	4a32      	ldr	r2, [pc, #200]	@ (80092d8 <TIM_Base_SetConfig+0x130>)
 800920e:	4293      	cmp	r3, r2
 8009210:	d017      	beq.n	8009242 <TIM_Base_SetConfig+0x9a>
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	4a31      	ldr	r2, [pc, #196]	@ (80092dc <TIM_Base_SetConfig+0x134>)
 8009216:	4293      	cmp	r3, r2
 8009218:	d013      	beq.n	8009242 <TIM_Base_SetConfig+0x9a>
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	4a30      	ldr	r2, [pc, #192]	@ (80092e0 <TIM_Base_SetConfig+0x138>)
 800921e:	4293      	cmp	r3, r2
 8009220:	d00f      	beq.n	8009242 <TIM_Base_SetConfig+0x9a>
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	4a2f      	ldr	r2, [pc, #188]	@ (80092e4 <TIM_Base_SetConfig+0x13c>)
 8009226:	4293      	cmp	r3, r2
 8009228:	d00b      	beq.n	8009242 <TIM_Base_SetConfig+0x9a>
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	4a2e      	ldr	r2, [pc, #184]	@ (80092e8 <TIM_Base_SetConfig+0x140>)
 800922e:	4293      	cmp	r3, r2
 8009230:	d007      	beq.n	8009242 <TIM_Base_SetConfig+0x9a>
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	4a2d      	ldr	r2, [pc, #180]	@ (80092ec <TIM_Base_SetConfig+0x144>)
 8009236:	4293      	cmp	r3, r2
 8009238:	d003      	beq.n	8009242 <TIM_Base_SetConfig+0x9a>
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	4a2c      	ldr	r2, [pc, #176]	@ (80092f0 <TIM_Base_SetConfig+0x148>)
 800923e:	4293      	cmp	r3, r2
 8009240:	d108      	bne.n	8009254 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009248:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800924a:	683b      	ldr	r3, [r7, #0]
 800924c:	68db      	ldr	r3, [r3, #12]
 800924e:	68fa      	ldr	r2, [r7, #12]
 8009250:	4313      	orrs	r3, r2
 8009252:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800925a:	683b      	ldr	r3, [r7, #0]
 800925c:	695b      	ldr	r3, [r3, #20]
 800925e:	4313      	orrs	r3, r2
 8009260:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	68fa      	ldr	r2, [r7, #12]
 8009266:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009268:	683b      	ldr	r3, [r7, #0]
 800926a:	689a      	ldr	r2, [r3, #8]
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009270:	683b      	ldr	r3, [r7, #0]
 8009272:	681a      	ldr	r2, [r3, #0]
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	4a16      	ldr	r2, [pc, #88]	@ (80092d4 <TIM_Base_SetConfig+0x12c>)
 800927c:	4293      	cmp	r3, r2
 800927e:	d00f      	beq.n	80092a0 <TIM_Base_SetConfig+0xf8>
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	4a18      	ldr	r2, [pc, #96]	@ (80092e4 <TIM_Base_SetConfig+0x13c>)
 8009284:	4293      	cmp	r3, r2
 8009286:	d00b      	beq.n	80092a0 <TIM_Base_SetConfig+0xf8>
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	4a17      	ldr	r2, [pc, #92]	@ (80092e8 <TIM_Base_SetConfig+0x140>)
 800928c:	4293      	cmp	r3, r2
 800928e:	d007      	beq.n	80092a0 <TIM_Base_SetConfig+0xf8>
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	4a16      	ldr	r2, [pc, #88]	@ (80092ec <TIM_Base_SetConfig+0x144>)
 8009294:	4293      	cmp	r3, r2
 8009296:	d003      	beq.n	80092a0 <TIM_Base_SetConfig+0xf8>
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	4a15      	ldr	r2, [pc, #84]	@ (80092f0 <TIM_Base_SetConfig+0x148>)
 800929c:	4293      	cmp	r3, r2
 800929e:	d103      	bne.n	80092a8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80092a0:	683b      	ldr	r3, [r7, #0]
 80092a2:	691a      	ldr	r2, [r3, #16]
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	2201      	movs	r2, #1
 80092ac:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	691b      	ldr	r3, [r3, #16]
 80092b2:	f003 0301 	and.w	r3, r3, #1
 80092b6:	2b01      	cmp	r3, #1
 80092b8:	d105      	bne.n	80092c6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	691b      	ldr	r3, [r3, #16]
 80092be:	f023 0201 	bic.w	r2, r3, #1
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	611a      	str	r2, [r3, #16]
  }
}
 80092c6:	bf00      	nop
 80092c8:	3714      	adds	r7, #20
 80092ca:	46bd      	mov	sp, r7
 80092cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d0:	4770      	bx	lr
 80092d2:	bf00      	nop
 80092d4:	40010000 	.word	0x40010000
 80092d8:	40000400 	.word	0x40000400
 80092dc:	40000800 	.word	0x40000800
 80092e0:	40000c00 	.word	0x40000c00
 80092e4:	40010400 	.word	0x40010400
 80092e8:	40014000 	.word	0x40014000
 80092ec:	40014400 	.word	0x40014400
 80092f0:	40014800 	.word	0x40014800

080092f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80092f4:	b480      	push	{r7}
 80092f6:	b083      	sub	sp, #12
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80092fc:	bf00      	nop
 80092fe:	370c      	adds	r7, #12
 8009300:	46bd      	mov	sp, r7
 8009302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009306:	4770      	bx	lr

08009308 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009308:	b480      	push	{r7}
 800930a:	b083      	sub	sp, #12
 800930c:	af00      	add	r7, sp, #0
 800930e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009310:	bf00      	nop
 8009312:	370c      	adds	r7, #12
 8009314:	46bd      	mov	sp, r7
 8009316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931a:	4770      	bx	lr

0800931c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800931c:	b480      	push	{r7}
 800931e:	b083      	sub	sp, #12
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009324:	bf00      	nop
 8009326:	370c      	adds	r7, #12
 8009328:	46bd      	mov	sp, r7
 800932a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932e:	4770      	bx	lr

08009330 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009330:	b580      	push	{r7, lr}
 8009332:	b082      	sub	sp, #8
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	2b00      	cmp	r3, #0
 800933c:	d101      	bne.n	8009342 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800933e:	2301      	movs	r3, #1
 8009340:	e042      	b.n	80093c8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009348:	2b00      	cmp	r3, #0
 800934a:	d106      	bne.n	800935a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	2200      	movs	r2, #0
 8009350:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009354:	6878      	ldr	r0, [r7, #4]
 8009356:	f7f7 fda1 	bl	8000e9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	2224      	movs	r2, #36	@ 0x24
 800935e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	681a      	ldr	r2, [r3, #0]
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	f022 0201 	bic.w	r2, r2, #1
 8009370:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009376:	2b00      	cmp	r3, #0
 8009378:	d002      	beq.n	8009380 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800937a:	6878      	ldr	r0, [r7, #4]
 800937c:	f000 fe94 	bl	800a0a8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009380:	6878      	ldr	r0, [r7, #4]
 8009382:	f000 f825 	bl	80093d0 <UART_SetConfig>
 8009386:	4603      	mov	r3, r0
 8009388:	2b01      	cmp	r3, #1
 800938a:	d101      	bne.n	8009390 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800938c:	2301      	movs	r3, #1
 800938e:	e01b      	b.n	80093c8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	685a      	ldr	r2, [r3, #4]
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800939e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	689a      	ldr	r2, [r3, #8]
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80093ae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	681a      	ldr	r2, [r3, #0]
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	f042 0201 	orr.w	r2, r2, #1
 80093be:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80093c0:	6878      	ldr	r0, [r7, #4]
 80093c2:	f000 ff13 	bl	800a1ec <UART_CheckIdleState>
 80093c6:	4603      	mov	r3, r0
}
 80093c8:	4618      	mov	r0, r3
 80093ca:	3708      	adds	r7, #8
 80093cc:	46bd      	mov	sp, r7
 80093ce:	bd80      	pop	{r7, pc}

080093d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80093d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80093d4:	b092      	sub	sp, #72	@ 0x48
 80093d6:	af00      	add	r7, sp, #0
 80093d8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80093da:	2300      	movs	r3, #0
 80093dc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80093e0:	697b      	ldr	r3, [r7, #20]
 80093e2:	689a      	ldr	r2, [r3, #8]
 80093e4:	697b      	ldr	r3, [r7, #20]
 80093e6:	691b      	ldr	r3, [r3, #16]
 80093e8:	431a      	orrs	r2, r3
 80093ea:	697b      	ldr	r3, [r7, #20]
 80093ec:	695b      	ldr	r3, [r3, #20]
 80093ee:	431a      	orrs	r2, r3
 80093f0:	697b      	ldr	r3, [r7, #20]
 80093f2:	69db      	ldr	r3, [r3, #28]
 80093f4:	4313      	orrs	r3, r2
 80093f6:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80093f8:	697b      	ldr	r3, [r7, #20]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	681a      	ldr	r2, [r3, #0]
 80093fe:	4bbe      	ldr	r3, [pc, #760]	@ (80096f8 <UART_SetConfig+0x328>)
 8009400:	4013      	ands	r3, r2
 8009402:	697a      	ldr	r2, [r7, #20]
 8009404:	6812      	ldr	r2, [r2, #0]
 8009406:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009408:	430b      	orrs	r3, r1
 800940a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800940c:	697b      	ldr	r3, [r7, #20]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	685b      	ldr	r3, [r3, #4]
 8009412:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009416:	697b      	ldr	r3, [r7, #20]
 8009418:	68da      	ldr	r2, [r3, #12]
 800941a:	697b      	ldr	r3, [r7, #20]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	430a      	orrs	r2, r1
 8009420:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009422:	697b      	ldr	r3, [r7, #20]
 8009424:	699b      	ldr	r3, [r3, #24]
 8009426:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009428:	697b      	ldr	r3, [r7, #20]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	4ab3      	ldr	r2, [pc, #716]	@ (80096fc <UART_SetConfig+0x32c>)
 800942e:	4293      	cmp	r3, r2
 8009430:	d004      	beq.n	800943c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009432:	697b      	ldr	r3, [r7, #20]
 8009434:	6a1b      	ldr	r3, [r3, #32]
 8009436:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009438:	4313      	orrs	r3, r2
 800943a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800943c:	697b      	ldr	r3, [r7, #20]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	689a      	ldr	r2, [r3, #8]
 8009442:	4baf      	ldr	r3, [pc, #700]	@ (8009700 <UART_SetConfig+0x330>)
 8009444:	4013      	ands	r3, r2
 8009446:	697a      	ldr	r2, [r7, #20]
 8009448:	6812      	ldr	r2, [r2, #0]
 800944a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800944c:	430b      	orrs	r3, r1
 800944e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009450:	697b      	ldr	r3, [r7, #20]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009456:	f023 010f 	bic.w	r1, r3, #15
 800945a:	697b      	ldr	r3, [r7, #20]
 800945c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800945e:	697b      	ldr	r3, [r7, #20]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	430a      	orrs	r2, r1
 8009464:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009466:	697b      	ldr	r3, [r7, #20]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	4aa6      	ldr	r2, [pc, #664]	@ (8009704 <UART_SetConfig+0x334>)
 800946c:	4293      	cmp	r3, r2
 800946e:	d177      	bne.n	8009560 <UART_SetConfig+0x190>
 8009470:	4ba5      	ldr	r3, [pc, #660]	@ (8009708 <UART_SetConfig+0x338>)
 8009472:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009474:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009478:	2b28      	cmp	r3, #40	@ 0x28
 800947a:	d86d      	bhi.n	8009558 <UART_SetConfig+0x188>
 800947c:	a201      	add	r2, pc, #4	@ (adr r2, 8009484 <UART_SetConfig+0xb4>)
 800947e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009482:	bf00      	nop
 8009484:	08009529 	.word	0x08009529
 8009488:	08009559 	.word	0x08009559
 800948c:	08009559 	.word	0x08009559
 8009490:	08009559 	.word	0x08009559
 8009494:	08009559 	.word	0x08009559
 8009498:	08009559 	.word	0x08009559
 800949c:	08009559 	.word	0x08009559
 80094a0:	08009559 	.word	0x08009559
 80094a4:	08009531 	.word	0x08009531
 80094a8:	08009559 	.word	0x08009559
 80094ac:	08009559 	.word	0x08009559
 80094b0:	08009559 	.word	0x08009559
 80094b4:	08009559 	.word	0x08009559
 80094b8:	08009559 	.word	0x08009559
 80094bc:	08009559 	.word	0x08009559
 80094c0:	08009559 	.word	0x08009559
 80094c4:	08009539 	.word	0x08009539
 80094c8:	08009559 	.word	0x08009559
 80094cc:	08009559 	.word	0x08009559
 80094d0:	08009559 	.word	0x08009559
 80094d4:	08009559 	.word	0x08009559
 80094d8:	08009559 	.word	0x08009559
 80094dc:	08009559 	.word	0x08009559
 80094e0:	08009559 	.word	0x08009559
 80094e4:	08009541 	.word	0x08009541
 80094e8:	08009559 	.word	0x08009559
 80094ec:	08009559 	.word	0x08009559
 80094f0:	08009559 	.word	0x08009559
 80094f4:	08009559 	.word	0x08009559
 80094f8:	08009559 	.word	0x08009559
 80094fc:	08009559 	.word	0x08009559
 8009500:	08009559 	.word	0x08009559
 8009504:	08009549 	.word	0x08009549
 8009508:	08009559 	.word	0x08009559
 800950c:	08009559 	.word	0x08009559
 8009510:	08009559 	.word	0x08009559
 8009514:	08009559 	.word	0x08009559
 8009518:	08009559 	.word	0x08009559
 800951c:	08009559 	.word	0x08009559
 8009520:	08009559 	.word	0x08009559
 8009524:	08009551 	.word	0x08009551
 8009528:	2301      	movs	r3, #1
 800952a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800952e:	e326      	b.n	8009b7e <UART_SetConfig+0x7ae>
 8009530:	2304      	movs	r3, #4
 8009532:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009536:	e322      	b.n	8009b7e <UART_SetConfig+0x7ae>
 8009538:	2308      	movs	r3, #8
 800953a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800953e:	e31e      	b.n	8009b7e <UART_SetConfig+0x7ae>
 8009540:	2310      	movs	r3, #16
 8009542:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009546:	e31a      	b.n	8009b7e <UART_SetConfig+0x7ae>
 8009548:	2320      	movs	r3, #32
 800954a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800954e:	e316      	b.n	8009b7e <UART_SetConfig+0x7ae>
 8009550:	2340      	movs	r3, #64	@ 0x40
 8009552:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009556:	e312      	b.n	8009b7e <UART_SetConfig+0x7ae>
 8009558:	2380      	movs	r3, #128	@ 0x80
 800955a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800955e:	e30e      	b.n	8009b7e <UART_SetConfig+0x7ae>
 8009560:	697b      	ldr	r3, [r7, #20]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	4a69      	ldr	r2, [pc, #420]	@ (800970c <UART_SetConfig+0x33c>)
 8009566:	4293      	cmp	r3, r2
 8009568:	d130      	bne.n	80095cc <UART_SetConfig+0x1fc>
 800956a:	4b67      	ldr	r3, [pc, #412]	@ (8009708 <UART_SetConfig+0x338>)
 800956c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800956e:	f003 0307 	and.w	r3, r3, #7
 8009572:	2b05      	cmp	r3, #5
 8009574:	d826      	bhi.n	80095c4 <UART_SetConfig+0x1f4>
 8009576:	a201      	add	r2, pc, #4	@ (adr r2, 800957c <UART_SetConfig+0x1ac>)
 8009578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800957c:	08009595 	.word	0x08009595
 8009580:	0800959d 	.word	0x0800959d
 8009584:	080095a5 	.word	0x080095a5
 8009588:	080095ad 	.word	0x080095ad
 800958c:	080095b5 	.word	0x080095b5
 8009590:	080095bd 	.word	0x080095bd
 8009594:	2300      	movs	r3, #0
 8009596:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800959a:	e2f0      	b.n	8009b7e <UART_SetConfig+0x7ae>
 800959c:	2304      	movs	r3, #4
 800959e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095a2:	e2ec      	b.n	8009b7e <UART_SetConfig+0x7ae>
 80095a4:	2308      	movs	r3, #8
 80095a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095aa:	e2e8      	b.n	8009b7e <UART_SetConfig+0x7ae>
 80095ac:	2310      	movs	r3, #16
 80095ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095b2:	e2e4      	b.n	8009b7e <UART_SetConfig+0x7ae>
 80095b4:	2320      	movs	r3, #32
 80095b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095ba:	e2e0      	b.n	8009b7e <UART_SetConfig+0x7ae>
 80095bc:	2340      	movs	r3, #64	@ 0x40
 80095be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095c2:	e2dc      	b.n	8009b7e <UART_SetConfig+0x7ae>
 80095c4:	2380      	movs	r3, #128	@ 0x80
 80095c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095ca:	e2d8      	b.n	8009b7e <UART_SetConfig+0x7ae>
 80095cc:	697b      	ldr	r3, [r7, #20]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	4a4f      	ldr	r2, [pc, #316]	@ (8009710 <UART_SetConfig+0x340>)
 80095d2:	4293      	cmp	r3, r2
 80095d4:	d130      	bne.n	8009638 <UART_SetConfig+0x268>
 80095d6:	4b4c      	ldr	r3, [pc, #304]	@ (8009708 <UART_SetConfig+0x338>)
 80095d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80095da:	f003 0307 	and.w	r3, r3, #7
 80095de:	2b05      	cmp	r3, #5
 80095e0:	d826      	bhi.n	8009630 <UART_SetConfig+0x260>
 80095e2:	a201      	add	r2, pc, #4	@ (adr r2, 80095e8 <UART_SetConfig+0x218>)
 80095e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095e8:	08009601 	.word	0x08009601
 80095ec:	08009609 	.word	0x08009609
 80095f0:	08009611 	.word	0x08009611
 80095f4:	08009619 	.word	0x08009619
 80095f8:	08009621 	.word	0x08009621
 80095fc:	08009629 	.word	0x08009629
 8009600:	2300      	movs	r3, #0
 8009602:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009606:	e2ba      	b.n	8009b7e <UART_SetConfig+0x7ae>
 8009608:	2304      	movs	r3, #4
 800960a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800960e:	e2b6      	b.n	8009b7e <UART_SetConfig+0x7ae>
 8009610:	2308      	movs	r3, #8
 8009612:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009616:	e2b2      	b.n	8009b7e <UART_SetConfig+0x7ae>
 8009618:	2310      	movs	r3, #16
 800961a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800961e:	e2ae      	b.n	8009b7e <UART_SetConfig+0x7ae>
 8009620:	2320      	movs	r3, #32
 8009622:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009626:	e2aa      	b.n	8009b7e <UART_SetConfig+0x7ae>
 8009628:	2340      	movs	r3, #64	@ 0x40
 800962a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800962e:	e2a6      	b.n	8009b7e <UART_SetConfig+0x7ae>
 8009630:	2380      	movs	r3, #128	@ 0x80
 8009632:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009636:	e2a2      	b.n	8009b7e <UART_SetConfig+0x7ae>
 8009638:	697b      	ldr	r3, [r7, #20]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	4a35      	ldr	r2, [pc, #212]	@ (8009714 <UART_SetConfig+0x344>)
 800963e:	4293      	cmp	r3, r2
 8009640:	d130      	bne.n	80096a4 <UART_SetConfig+0x2d4>
 8009642:	4b31      	ldr	r3, [pc, #196]	@ (8009708 <UART_SetConfig+0x338>)
 8009644:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009646:	f003 0307 	and.w	r3, r3, #7
 800964a:	2b05      	cmp	r3, #5
 800964c:	d826      	bhi.n	800969c <UART_SetConfig+0x2cc>
 800964e:	a201      	add	r2, pc, #4	@ (adr r2, 8009654 <UART_SetConfig+0x284>)
 8009650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009654:	0800966d 	.word	0x0800966d
 8009658:	08009675 	.word	0x08009675
 800965c:	0800967d 	.word	0x0800967d
 8009660:	08009685 	.word	0x08009685
 8009664:	0800968d 	.word	0x0800968d
 8009668:	08009695 	.word	0x08009695
 800966c:	2300      	movs	r3, #0
 800966e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009672:	e284      	b.n	8009b7e <UART_SetConfig+0x7ae>
 8009674:	2304      	movs	r3, #4
 8009676:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800967a:	e280      	b.n	8009b7e <UART_SetConfig+0x7ae>
 800967c:	2308      	movs	r3, #8
 800967e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009682:	e27c      	b.n	8009b7e <UART_SetConfig+0x7ae>
 8009684:	2310      	movs	r3, #16
 8009686:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800968a:	e278      	b.n	8009b7e <UART_SetConfig+0x7ae>
 800968c:	2320      	movs	r3, #32
 800968e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009692:	e274      	b.n	8009b7e <UART_SetConfig+0x7ae>
 8009694:	2340      	movs	r3, #64	@ 0x40
 8009696:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800969a:	e270      	b.n	8009b7e <UART_SetConfig+0x7ae>
 800969c:	2380      	movs	r3, #128	@ 0x80
 800969e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096a2:	e26c      	b.n	8009b7e <UART_SetConfig+0x7ae>
 80096a4:	697b      	ldr	r3, [r7, #20]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	4a1b      	ldr	r2, [pc, #108]	@ (8009718 <UART_SetConfig+0x348>)
 80096aa:	4293      	cmp	r3, r2
 80096ac:	d142      	bne.n	8009734 <UART_SetConfig+0x364>
 80096ae:	4b16      	ldr	r3, [pc, #88]	@ (8009708 <UART_SetConfig+0x338>)
 80096b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80096b2:	f003 0307 	and.w	r3, r3, #7
 80096b6:	2b05      	cmp	r3, #5
 80096b8:	d838      	bhi.n	800972c <UART_SetConfig+0x35c>
 80096ba:	a201      	add	r2, pc, #4	@ (adr r2, 80096c0 <UART_SetConfig+0x2f0>)
 80096bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096c0:	080096d9 	.word	0x080096d9
 80096c4:	080096e1 	.word	0x080096e1
 80096c8:	080096e9 	.word	0x080096e9
 80096cc:	080096f1 	.word	0x080096f1
 80096d0:	0800971d 	.word	0x0800971d
 80096d4:	08009725 	.word	0x08009725
 80096d8:	2300      	movs	r3, #0
 80096da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096de:	e24e      	b.n	8009b7e <UART_SetConfig+0x7ae>
 80096e0:	2304      	movs	r3, #4
 80096e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096e6:	e24a      	b.n	8009b7e <UART_SetConfig+0x7ae>
 80096e8:	2308      	movs	r3, #8
 80096ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096ee:	e246      	b.n	8009b7e <UART_SetConfig+0x7ae>
 80096f0:	2310      	movs	r3, #16
 80096f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096f6:	e242      	b.n	8009b7e <UART_SetConfig+0x7ae>
 80096f8:	cfff69f3 	.word	0xcfff69f3
 80096fc:	58000c00 	.word	0x58000c00
 8009700:	11fff4ff 	.word	0x11fff4ff
 8009704:	40011000 	.word	0x40011000
 8009708:	58024400 	.word	0x58024400
 800970c:	40004400 	.word	0x40004400
 8009710:	40004800 	.word	0x40004800
 8009714:	40004c00 	.word	0x40004c00
 8009718:	40005000 	.word	0x40005000
 800971c:	2320      	movs	r3, #32
 800971e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009722:	e22c      	b.n	8009b7e <UART_SetConfig+0x7ae>
 8009724:	2340      	movs	r3, #64	@ 0x40
 8009726:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800972a:	e228      	b.n	8009b7e <UART_SetConfig+0x7ae>
 800972c:	2380      	movs	r3, #128	@ 0x80
 800972e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009732:	e224      	b.n	8009b7e <UART_SetConfig+0x7ae>
 8009734:	697b      	ldr	r3, [r7, #20]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	4ab1      	ldr	r2, [pc, #708]	@ (8009a00 <UART_SetConfig+0x630>)
 800973a:	4293      	cmp	r3, r2
 800973c:	d176      	bne.n	800982c <UART_SetConfig+0x45c>
 800973e:	4bb1      	ldr	r3, [pc, #708]	@ (8009a04 <UART_SetConfig+0x634>)
 8009740:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009742:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009746:	2b28      	cmp	r3, #40	@ 0x28
 8009748:	d86c      	bhi.n	8009824 <UART_SetConfig+0x454>
 800974a:	a201      	add	r2, pc, #4	@ (adr r2, 8009750 <UART_SetConfig+0x380>)
 800974c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009750:	080097f5 	.word	0x080097f5
 8009754:	08009825 	.word	0x08009825
 8009758:	08009825 	.word	0x08009825
 800975c:	08009825 	.word	0x08009825
 8009760:	08009825 	.word	0x08009825
 8009764:	08009825 	.word	0x08009825
 8009768:	08009825 	.word	0x08009825
 800976c:	08009825 	.word	0x08009825
 8009770:	080097fd 	.word	0x080097fd
 8009774:	08009825 	.word	0x08009825
 8009778:	08009825 	.word	0x08009825
 800977c:	08009825 	.word	0x08009825
 8009780:	08009825 	.word	0x08009825
 8009784:	08009825 	.word	0x08009825
 8009788:	08009825 	.word	0x08009825
 800978c:	08009825 	.word	0x08009825
 8009790:	08009805 	.word	0x08009805
 8009794:	08009825 	.word	0x08009825
 8009798:	08009825 	.word	0x08009825
 800979c:	08009825 	.word	0x08009825
 80097a0:	08009825 	.word	0x08009825
 80097a4:	08009825 	.word	0x08009825
 80097a8:	08009825 	.word	0x08009825
 80097ac:	08009825 	.word	0x08009825
 80097b0:	0800980d 	.word	0x0800980d
 80097b4:	08009825 	.word	0x08009825
 80097b8:	08009825 	.word	0x08009825
 80097bc:	08009825 	.word	0x08009825
 80097c0:	08009825 	.word	0x08009825
 80097c4:	08009825 	.word	0x08009825
 80097c8:	08009825 	.word	0x08009825
 80097cc:	08009825 	.word	0x08009825
 80097d0:	08009815 	.word	0x08009815
 80097d4:	08009825 	.word	0x08009825
 80097d8:	08009825 	.word	0x08009825
 80097dc:	08009825 	.word	0x08009825
 80097e0:	08009825 	.word	0x08009825
 80097e4:	08009825 	.word	0x08009825
 80097e8:	08009825 	.word	0x08009825
 80097ec:	08009825 	.word	0x08009825
 80097f0:	0800981d 	.word	0x0800981d
 80097f4:	2301      	movs	r3, #1
 80097f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097fa:	e1c0      	b.n	8009b7e <UART_SetConfig+0x7ae>
 80097fc:	2304      	movs	r3, #4
 80097fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009802:	e1bc      	b.n	8009b7e <UART_SetConfig+0x7ae>
 8009804:	2308      	movs	r3, #8
 8009806:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800980a:	e1b8      	b.n	8009b7e <UART_SetConfig+0x7ae>
 800980c:	2310      	movs	r3, #16
 800980e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009812:	e1b4      	b.n	8009b7e <UART_SetConfig+0x7ae>
 8009814:	2320      	movs	r3, #32
 8009816:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800981a:	e1b0      	b.n	8009b7e <UART_SetConfig+0x7ae>
 800981c:	2340      	movs	r3, #64	@ 0x40
 800981e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009822:	e1ac      	b.n	8009b7e <UART_SetConfig+0x7ae>
 8009824:	2380      	movs	r3, #128	@ 0x80
 8009826:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800982a:	e1a8      	b.n	8009b7e <UART_SetConfig+0x7ae>
 800982c:	697b      	ldr	r3, [r7, #20]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	4a75      	ldr	r2, [pc, #468]	@ (8009a08 <UART_SetConfig+0x638>)
 8009832:	4293      	cmp	r3, r2
 8009834:	d130      	bne.n	8009898 <UART_SetConfig+0x4c8>
 8009836:	4b73      	ldr	r3, [pc, #460]	@ (8009a04 <UART_SetConfig+0x634>)
 8009838:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800983a:	f003 0307 	and.w	r3, r3, #7
 800983e:	2b05      	cmp	r3, #5
 8009840:	d826      	bhi.n	8009890 <UART_SetConfig+0x4c0>
 8009842:	a201      	add	r2, pc, #4	@ (adr r2, 8009848 <UART_SetConfig+0x478>)
 8009844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009848:	08009861 	.word	0x08009861
 800984c:	08009869 	.word	0x08009869
 8009850:	08009871 	.word	0x08009871
 8009854:	08009879 	.word	0x08009879
 8009858:	08009881 	.word	0x08009881
 800985c:	08009889 	.word	0x08009889
 8009860:	2300      	movs	r3, #0
 8009862:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009866:	e18a      	b.n	8009b7e <UART_SetConfig+0x7ae>
 8009868:	2304      	movs	r3, #4
 800986a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800986e:	e186      	b.n	8009b7e <UART_SetConfig+0x7ae>
 8009870:	2308      	movs	r3, #8
 8009872:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009876:	e182      	b.n	8009b7e <UART_SetConfig+0x7ae>
 8009878:	2310      	movs	r3, #16
 800987a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800987e:	e17e      	b.n	8009b7e <UART_SetConfig+0x7ae>
 8009880:	2320      	movs	r3, #32
 8009882:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009886:	e17a      	b.n	8009b7e <UART_SetConfig+0x7ae>
 8009888:	2340      	movs	r3, #64	@ 0x40
 800988a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800988e:	e176      	b.n	8009b7e <UART_SetConfig+0x7ae>
 8009890:	2380      	movs	r3, #128	@ 0x80
 8009892:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009896:	e172      	b.n	8009b7e <UART_SetConfig+0x7ae>
 8009898:	697b      	ldr	r3, [r7, #20]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	4a5b      	ldr	r2, [pc, #364]	@ (8009a0c <UART_SetConfig+0x63c>)
 800989e:	4293      	cmp	r3, r2
 80098a0:	d130      	bne.n	8009904 <UART_SetConfig+0x534>
 80098a2:	4b58      	ldr	r3, [pc, #352]	@ (8009a04 <UART_SetConfig+0x634>)
 80098a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80098a6:	f003 0307 	and.w	r3, r3, #7
 80098aa:	2b05      	cmp	r3, #5
 80098ac:	d826      	bhi.n	80098fc <UART_SetConfig+0x52c>
 80098ae:	a201      	add	r2, pc, #4	@ (adr r2, 80098b4 <UART_SetConfig+0x4e4>)
 80098b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098b4:	080098cd 	.word	0x080098cd
 80098b8:	080098d5 	.word	0x080098d5
 80098bc:	080098dd 	.word	0x080098dd
 80098c0:	080098e5 	.word	0x080098e5
 80098c4:	080098ed 	.word	0x080098ed
 80098c8:	080098f5 	.word	0x080098f5
 80098cc:	2300      	movs	r3, #0
 80098ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098d2:	e154      	b.n	8009b7e <UART_SetConfig+0x7ae>
 80098d4:	2304      	movs	r3, #4
 80098d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098da:	e150      	b.n	8009b7e <UART_SetConfig+0x7ae>
 80098dc:	2308      	movs	r3, #8
 80098de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098e2:	e14c      	b.n	8009b7e <UART_SetConfig+0x7ae>
 80098e4:	2310      	movs	r3, #16
 80098e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098ea:	e148      	b.n	8009b7e <UART_SetConfig+0x7ae>
 80098ec:	2320      	movs	r3, #32
 80098ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098f2:	e144      	b.n	8009b7e <UART_SetConfig+0x7ae>
 80098f4:	2340      	movs	r3, #64	@ 0x40
 80098f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098fa:	e140      	b.n	8009b7e <UART_SetConfig+0x7ae>
 80098fc:	2380      	movs	r3, #128	@ 0x80
 80098fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009902:	e13c      	b.n	8009b7e <UART_SetConfig+0x7ae>
 8009904:	697b      	ldr	r3, [r7, #20]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	4a41      	ldr	r2, [pc, #260]	@ (8009a10 <UART_SetConfig+0x640>)
 800990a:	4293      	cmp	r3, r2
 800990c:	f040 8082 	bne.w	8009a14 <UART_SetConfig+0x644>
 8009910:	4b3c      	ldr	r3, [pc, #240]	@ (8009a04 <UART_SetConfig+0x634>)
 8009912:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009914:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009918:	2b28      	cmp	r3, #40	@ 0x28
 800991a:	d86d      	bhi.n	80099f8 <UART_SetConfig+0x628>
 800991c:	a201      	add	r2, pc, #4	@ (adr r2, 8009924 <UART_SetConfig+0x554>)
 800991e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009922:	bf00      	nop
 8009924:	080099c9 	.word	0x080099c9
 8009928:	080099f9 	.word	0x080099f9
 800992c:	080099f9 	.word	0x080099f9
 8009930:	080099f9 	.word	0x080099f9
 8009934:	080099f9 	.word	0x080099f9
 8009938:	080099f9 	.word	0x080099f9
 800993c:	080099f9 	.word	0x080099f9
 8009940:	080099f9 	.word	0x080099f9
 8009944:	080099d1 	.word	0x080099d1
 8009948:	080099f9 	.word	0x080099f9
 800994c:	080099f9 	.word	0x080099f9
 8009950:	080099f9 	.word	0x080099f9
 8009954:	080099f9 	.word	0x080099f9
 8009958:	080099f9 	.word	0x080099f9
 800995c:	080099f9 	.word	0x080099f9
 8009960:	080099f9 	.word	0x080099f9
 8009964:	080099d9 	.word	0x080099d9
 8009968:	080099f9 	.word	0x080099f9
 800996c:	080099f9 	.word	0x080099f9
 8009970:	080099f9 	.word	0x080099f9
 8009974:	080099f9 	.word	0x080099f9
 8009978:	080099f9 	.word	0x080099f9
 800997c:	080099f9 	.word	0x080099f9
 8009980:	080099f9 	.word	0x080099f9
 8009984:	080099e1 	.word	0x080099e1
 8009988:	080099f9 	.word	0x080099f9
 800998c:	080099f9 	.word	0x080099f9
 8009990:	080099f9 	.word	0x080099f9
 8009994:	080099f9 	.word	0x080099f9
 8009998:	080099f9 	.word	0x080099f9
 800999c:	080099f9 	.word	0x080099f9
 80099a0:	080099f9 	.word	0x080099f9
 80099a4:	080099e9 	.word	0x080099e9
 80099a8:	080099f9 	.word	0x080099f9
 80099ac:	080099f9 	.word	0x080099f9
 80099b0:	080099f9 	.word	0x080099f9
 80099b4:	080099f9 	.word	0x080099f9
 80099b8:	080099f9 	.word	0x080099f9
 80099bc:	080099f9 	.word	0x080099f9
 80099c0:	080099f9 	.word	0x080099f9
 80099c4:	080099f1 	.word	0x080099f1
 80099c8:	2301      	movs	r3, #1
 80099ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099ce:	e0d6      	b.n	8009b7e <UART_SetConfig+0x7ae>
 80099d0:	2304      	movs	r3, #4
 80099d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099d6:	e0d2      	b.n	8009b7e <UART_SetConfig+0x7ae>
 80099d8:	2308      	movs	r3, #8
 80099da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099de:	e0ce      	b.n	8009b7e <UART_SetConfig+0x7ae>
 80099e0:	2310      	movs	r3, #16
 80099e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099e6:	e0ca      	b.n	8009b7e <UART_SetConfig+0x7ae>
 80099e8:	2320      	movs	r3, #32
 80099ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099ee:	e0c6      	b.n	8009b7e <UART_SetConfig+0x7ae>
 80099f0:	2340      	movs	r3, #64	@ 0x40
 80099f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099f6:	e0c2      	b.n	8009b7e <UART_SetConfig+0x7ae>
 80099f8:	2380      	movs	r3, #128	@ 0x80
 80099fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099fe:	e0be      	b.n	8009b7e <UART_SetConfig+0x7ae>
 8009a00:	40011400 	.word	0x40011400
 8009a04:	58024400 	.word	0x58024400
 8009a08:	40007800 	.word	0x40007800
 8009a0c:	40007c00 	.word	0x40007c00
 8009a10:	40011800 	.word	0x40011800
 8009a14:	697b      	ldr	r3, [r7, #20]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	4aad      	ldr	r2, [pc, #692]	@ (8009cd0 <UART_SetConfig+0x900>)
 8009a1a:	4293      	cmp	r3, r2
 8009a1c:	d176      	bne.n	8009b0c <UART_SetConfig+0x73c>
 8009a1e:	4bad      	ldr	r3, [pc, #692]	@ (8009cd4 <UART_SetConfig+0x904>)
 8009a20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a22:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009a26:	2b28      	cmp	r3, #40	@ 0x28
 8009a28:	d86c      	bhi.n	8009b04 <UART_SetConfig+0x734>
 8009a2a:	a201      	add	r2, pc, #4	@ (adr r2, 8009a30 <UART_SetConfig+0x660>)
 8009a2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a30:	08009ad5 	.word	0x08009ad5
 8009a34:	08009b05 	.word	0x08009b05
 8009a38:	08009b05 	.word	0x08009b05
 8009a3c:	08009b05 	.word	0x08009b05
 8009a40:	08009b05 	.word	0x08009b05
 8009a44:	08009b05 	.word	0x08009b05
 8009a48:	08009b05 	.word	0x08009b05
 8009a4c:	08009b05 	.word	0x08009b05
 8009a50:	08009add 	.word	0x08009add
 8009a54:	08009b05 	.word	0x08009b05
 8009a58:	08009b05 	.word	0x08009b05
 8009a5c:	08009b05 	.word	0x08009b05
 8009a60:	08009b05 	.word	0x08009b05
 8009a64:	08009b05 	.word	0x08009b05
 8009a68:	08009b05 	.word	0x08009b05
 8009a6c:	08009b05 	.word	0x08009b05
 8009a70:	08009ae5 	.word	0x08009ae5
 8009a74:	08009b05 	.word	0x08009b05
 8009a78:	08009b05 	.word	0x08009b05
 8009a7c:	08009b05 	.word	0x08009b05
 8009a80:	08009b05 	.word	0x08009b05
 8009a84:	08009b05 	.word	0x08009b05
 8009a88:	08009b05 	.word	0x08009b05
 8009a8c:	08009b05 	.word	0x08009b05
 8009a90:	08009aed 	.word	0x08009aed
 8009a94:	08009b05 	.word	0x08009b05
 8009a98:	08009b05 	.word	0x08009b05
 8009a9c:	08009b05 	.word	0x08009b05
 8009aa0:	08009b05 	.word	0x08009b05
 8009aa4:	08009b05 	.word	0x08009b05
 8009aa8:	08009b05 	.word	0x08009b05
 8009aac:	08009b05 	.word	0x08009b05
 8009ab0:	08009af5 	.word	0x08009af5
 8009ab4:	08009b05 	.word	0x08009b05
 8009ab8:	08009b05 	.word	0x08009b05
 8009abc:	08009b05 	.word	0x08009b05
 8009ac0:	08009b05 	.word	0x08009b05
 8009ac4:	08009b05 	.word	0x08009b05
 8009ac8:	08009b05 	.word	0x08009b05
 8009acc:	08009b05 	.word	0x08009b05
 8009ad0:	08009afd 	.word	0x08009afd
 8009ad4:	2301      	movs	r3, #1
 8009ad6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ada:	e050      	b.n	8009b7e <UART_SetConfig+0x7ae>
 8009adc:	2304      	movs	r3, #4
 8009ade:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ae2:	e04c      	b.n	8009b7e <UART_SetConfig+0x7ae>
 8009ae4:	2308      	movs	r3, #8
 8009ae6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009aea:	e048      	b.n	8009b7e <UART_SetConfig+0x7ae>
 8009aec:	2310      	movs	r3, #16
 8009aee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009af2:	e044      	b.n	8009b7e <UART_SetConfig+0x7ae>
 8009af4:	2320      	movs	r3, #32
 8009af6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009afa:	e040      	b.n	8009b7e <UART_SetConfig+0x7ae>
 8009afc:	2340      	movs	r3, #64	@ 0x40
 8009afe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b02:	e03c      	b.n	8009b7e <UART_SetConfig+0x7ae>
 8009b04:	2380      	movs	r3, #128	@ 0x80
 8009b06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b0a:	e038      	b.n	8009b7e <UART_SetConfig+0x7ae>
 8009b0c:	697b      	ldr	r3, [r7, #20]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	4a71      	ldr	r2, [pc, #452]	@ (8009cd8 <UART_SetConfig+0x908>)
 8009b12:	4293      	cmp	r3, r2
 8009b14:	d130      	bne.n	8009b78 <UART_SetConfig+0x7a8>
 8009b16:	4b6f      	ldr	r3, [pc, #444]	@ (8009cd4 <UART_SetConfig+0x904>)
 8009b18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009b1a:	f003 0307 	and.w	r3, r3, #7
 8009b1e:	2b05      	cmp	r3, #5
 8009b20:	d826      	bhi.n	8009b70 <UART_SetConfig+0x7a0>
 8009b22:	a201      	add	r2, pc, #4	@ (adr r2, 8009b28 <UART_SetConfig+0x758>)
 8009b24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b28:	08009b41 	.word	0x08009b41
 8009b2c:	08009b49 	.word	0x08009b49
 8009b30:	08009b51 	.word	0x08009b51
 8009b34:	08009b59 	.word	0x08009b59
 8009b38:	08009b61 	.word	0x08009b61
 8009b3c:	08009b69 	.word	0x08009b69
 8009b40:	2302      	movs	r3, #2
 8009b42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b46:	e01a      	b.n	8009b7e <UART_SetConfig+0x7ae>
 8009b48:	2304      	movs	r3, #4
 8009b4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b4e:	e016      	b.n	8009b7e <UART_SetConfig+0x7ae>
 8009b50:	2308      	movs	r3, #8
 8009b52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b56:	e012      	b.n	8009b7e <UART_SetConfig+0x7ae>
 8009b58:	2310      	movs	r3, #16
 8009b5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b5e:	e00e      	b.n	8009b7e <UART_SetConfig+0x7ae>
 8009b60:	2320      	movs	r3, #32
 8009b62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b66:	e00a      	b.n	8009b7e <UART_SetConfig+0x7ae>
 8009b68:	2340      	movs	r3, #64	@ 0x40
 8009b6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b6e:	e006      	b.n	8009b7e <UART_SetConfig+0x7ae>
 8009b70:	2380      	movs	r3, #128	@ 0x80
 8009b72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b76:	e002      	b.n	8009b7e <UART_SetConfig+0x7ae>
 8009b78:	2380      	movs	r3, #128	@ 0x80
 8009b7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009b7e:	697b      	ldr	r3, [r7, #20]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	4a55      	ldr	r2, [pc, #340]	@ (8009cd8 <UART_SetConfig+0x908>)
 8009b84:	4293      	cmp	r3, r2
 8009b86:	f040 80f8 	bne.w	8009d7a <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009b8a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009b8e:	2b20      	cmp	r3, #32
 8009b90:	dc46      	bgt.n	8009c20 <UART_SetConfig+0x850>
 8009b92:	2b02      	cmp	r3, #2
 8009b94:	db75      	blt.n	8009c82 <UART_SetConfig+0x8b2>
 8009b96:	3b02      	subs	r3, #2
 8009b98:	2b1e      	cmp	r3, #30
 8009b9a:	d872      	bhi.n	8009c82 <UART_SetConfig+0x8b2>
 8009b9c:	a201      	add	r2, pc, #4	@ (adr r2, 8009ba4 <UART_SetConfig+0x7d4>)
 8009b9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ba2:	bf00      	nop
 8009ba4:	08009c27 	.word	0x08009c27
 8009ba8:	08009c83 	.word	0x08009c83
 8009bac:	08009c2f 	.word	0x08009c2f
 8009bb0:	08009c83 	.word	0x08009c83
 8009bb4:	08009c83 	.word	0x08009c83
 8009bb8:	08009c83 	.word	0x08009c83
 8009bbc:	08009c3f 	.word	0x08009c3f
 8009bc0:	08009c83 	.word	0x08009c83
 8009bc4:	08009c83 	.word	0x08009c83
 8009bc8:	08009c83 	.word	0x08009c83
 8009bcc:	08009c83 	.word	0x08009c83
 8009bd0:	08009c83 	.word	0x08009c83
 8009bd4:	08009c83 	.word	0x08009c83
 8009bd8:	08009c83 	.word	0x08009c83
 8009bdc:	08009c4f 	.word	0x08009c4f
 8009be0:	08009c83 	.word	0x08009c83
 8009be4:	08009c83 	.word	0x08009c83
 8009be8:	08009c83 	.word	0x08009c83
 8009bec:	08009c83 	.word	0x08009c83
 8009bf0:	08009c83 	.word	0x08009c83
 8009bf4:	08009c83 	.word	0x08009c83
 8009bf8:	08009c83 	.word	0x08009c83
 8009bfc:	08009c83 	.word	0x08009c83
 8009c00:	08009c83 	.word	0x08009c83
 8009c04:	08009c83 	.word	0x08009c83
 8009c08:	08009c83 	.word	0x08009c83
 8009c0c:	08009c83 	.word	0x08009c83
 8009c10:	08009c83 	.word	0x08009c83
 8009c14:	08009c83 	.word	0x08009c83
 8009c18:	08009c83 	.word	0x08009c83
 8009c1c:	08009c75 	.word	0x08009c75
 8009c20:	2b40      	cmp	r3, #64	@ 0x40
 8009c22:	d02a      	beq.n	8009c7a <UART_SetConfig+0x8aa>
 8009c24:	e02d      	b.n	8009c82 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009c26:	f7fe fc93 	bl	8008550 <HAL_RCCEx_GetD3PCLK1Freq>
 8009c2a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009c2c:	e02f      	b.n	8009c8e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009c2e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009c32:	4618      	mov	r0, r3
 8009c34:	f7fe fca2 	bl	800857c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009c38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009c3c:	e027      	b.n	8009c8e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009c3e:	f107 0318 	add.w	r3, r7, #24
 8009c42:	4618      	mov	r0, r3
 8009c44:	f7fe fdee 	bl	8008824 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009c48:	69fb      	ldr	r3, [r7, #28]
 8009c4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009c4c:	e01f      	b.n	8009c8e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009c4e:	4b21      	ldr	r3, [pc, #132]	@ (8009cd4 <UART_SetConfig+0x904>)
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	f003 0320 	and.w	r3, r3, #32
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d009      	beq.n	8009c6e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009c5a:	4b1e      	ldr	r3, [pc, #120]	@ (8009cd4 <UART_SetConfig+0x904>)
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	08db      	lsrs	r3, r3, #3
 8009c60:	f003 0303 	and.w	r3, r3, #3
 8009c64:	4a1d      	ldr	r2, [pc, #116]	@ (8009cdc <UART_SetConfig+0x90c>)
 8009c66:	fa22 f303 	lsr.w	r3, r2, r3
 8009c6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009c6c:	e00f      	b.n	8009c8e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8009c6e:	4b1b      	ldr	r3, [pc, #108]	@ (8009cdc <UART_SetConfig+0x90c>)
 8009c70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009c72:	e00c      	b.n	8009c8e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009c74:	4b1a      	ldr	r3, [pc, #104]	@ (8009ce0 <UART_SetConfig+0x910>)
 8009c76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009c78:	e009      	b.n	8009c8e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009c7a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009c7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009c80:	e005      	b.n	8009c8e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8009c82:	2300      	movs	r3, #0
 8009c84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009c86:	2301      	movs	r3, #1
 8009c88:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009c8c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009c8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	f000 81ee 	beq.w	800a072 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009c96:	697b      	ldr	r3, [r7, #20]
 8009c98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c9a:	4a12      	ldr	r2, [pc, #72]	@ (8009ce4 <UART_SetConfig+0x914>)
 8009c9c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009ca0:	461a      	mov	r2, r3
 8009ca2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ca4:	fbb3 f3f2 	udiv	r3, r3, r2
 8009ca8:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009caa:	697b      	ldr	r3, [r7, #20]
 8009cac:	685a      	ldr	r2, [r3, #4]
 8009cae:	4613      	mov	r3, r2
 8009cb0:	005b      	lsls	r3, r3, #1
 8009cb2:	4413      	add	r3, r2
 8009cb4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009cb6:	429a      	cmp	r2, r3
 8009cb8:	d305      	bcc.n	8009cc6 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009cba:	697b      	ldr	r3, [r7, #20]
 8009cbc:	685b      	ldr	r3, [r3, #4]
 8009cbe:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009cc0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009cc2:	429a      	cmp	r2, r3
 8009cc4:	d910      	bls.n	8009ce8 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8009cc6:	2301      	movs	r3, #1
 8009cc8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009ccc:	e1d1      	b.n	800a072 <UART_SetConfig+0xca2>
 8009cce:	bf00      	nop
 8009cd0:	40011c00 	.word	0x40011c00
 8009cd4:	58024400 	.word	0x58024400
 8009cd8:	58000c00 	.word	0x58000c00
 8009cdc:	03d09000 	.word	0x03d09000
 8009ce0:	003d0900 	.word	0x003d0900
 8009ce4:	0800a94c 	.word	0x0800a94c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009ce8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009cea:	2200      	movs	r2, #0
 8009cec:	60bb      	str	r3, [r7, #8]
 8009cee:	60fa      	str	r2, [r7, #12]
 8009cf0:	697b      	ldr	r3, [r7, #20]
 8009cf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009cf4:	4ac0      	ldr	r2, [pc, #768]	@ (8009ff8 <UART_SetConfig+0xc28>)
 8009cf6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009cfa:	b29b      	uxth	r3, r3
 8009cfc:	2200      	movs	r2, #0
 8009cfe:	603b      	str	r3, [r7, #0]
 8009d00:	607a      	str	r2, [r7, #4]
 8009d02:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009d06:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009d0a:	f7f6 faef 	bl	80002ec <__aeabi_uldivmod>
 8009d0e:	4602      	mov	r2, r0
 8009d10:	460b      	mov	r3, r1
 8009d12:	4610      	mov	r0, r2
 8009d14:	4619      	mov	r1, r3
 8009d16:	f04f 0200 	mov.w	r2, #0
 8009d1a:	f04f 0300 	mov.w	r3, #0
 8009d1e:	020b      	lsls	r3, r1, #8
 8009d20:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009d24:	0202      	lsls	r2, r0, #8
 8009d26:	6979      	ldr	r1, [r7, #20]
 8009d28:	6849      	ldr	r1, [r1, #4]
 8009d2a:	0849      	lsrs	r1, r1, #1
 8009d2c:	2000      	movs	r0, #0
 8009d2e:	460c      	mov	r4, r1
 8009d30:	4605      	mov	r5, r0
 8009d32:	eb12 0804 	adds.w	r8, r2, r4
 8009d36:	eb43 0905 	adc.w	r9, r3, r5
 8009d3a:	697b      	ldr	r3, [r7, #20]
 8009d3c:	685b      	ldr	r3, [r3, #4]
 8009d3e:	2200      	movs	r2, #0
 8009d40:	469a      	mov	sl, r3
 8009d42:	4693      	mov	fp, r2
 8009d44:	4652      	mov	r2, sl
 8009d46:	465b      	mov	r3, fp
 8009d48:	4640      	mov	r0, r8
 8009d4a:	4649      	mov	r1, r9
 8009d4c:	f7f6 face 	bl	80002ec <__aeabi_uldivmod>
 8009d50:	4602      	mov	r2, r0
 8009d52:	460b      	mov	r3, r1
 8009d54:	4613      	mov	r3, r2
 8009d56:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009d58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d5a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009d5e:	d308      	bcc.n	8009d72 <UART_SetConfig+0x9a2>
 8009d60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d62:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009d66:	d204      	bcs.n	8009d72 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8009d68:	697b      	ldr	r3, [r7, #20]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009d6e:	60da      	str	r2, [r3, #12]
 8009d70:	e17f      	b.n	800a072 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8009d72:	2301      	movs	r3, #1
 8009d74:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009d78:	e17b      	b.n	800a072 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009d7a:	697b      	ldr	r3, [r7, #20]
 8009d7c:	69db      	ldr	r3, [r3, #28]
 8009d7e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009d82:	f040 80bd 	bne.w	8009f00 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8009d86:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009d8a:	2b20      	cmp	r3, #32
 8009d8c:	dc48      	bgt.n	8009e20 <UART_SetConfig+0xa50>
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	db7b      	blt.n	8009e8a <UART_SetConfig+0xaba>
 8009d92:	2b20      	cmp	r3, #32
 8009d94:	d879      	bhi.n	8009e8a <UART_SetConfig+0xaba>
 8009d96:	a201      	add	r2, pc, #4	@ (adr r2, 8009d9c <UART_SetConfig+0x9cc>)
 8009d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d9c:	08009e27 	.word	0x08009e27
 8009da0:	08009e2f 	.word	0x08009e2f
 8009da4:	08009e8b 	.word	0x08009e8b
 8009da8:	08009e8b 	.word	0x08009e8b
 8009dac:	08009e37 	.word	0x08009e37
 8009db0:	08009e8b 	.word	0x08009e8b
 8009db4:	08009e8b 	.word	0x08009e8b
 8009db8:	08009e8b 	.word	0x08009e8b
 8009dbc:	08009e47 	.word	0x08009e47
 8009dc0:	08009e8b 	.word	0x08009e8b
 8009dc4:	08009e8b 	.word	0x08009e8b
 8009dc8:	08009e8b 	.word	0x08009e8b
 8009dcc:	08009e8b 	.word	0x08009e8b
 8009dd0:	08009e8b 	.word	0x08009e8b
 8009dd4:	08009e8b 	.word	0x08009e8b
 8009dd8:	08009e8b 	.word	0x08009e8b
 8009ddc:	08009e57 	.word	0x08009e57
 8009de0:	08009e8b 	.word	0x08009e8b
 8009de4:	08009e8b 	.word	0x08009e8b
 8009de8:	08009e8b 	.word	0x08009e8b
 8009dec:	08009e8b 	.word	0x08009e8b
 8009df0:	08009e8b 	.word	0x08009e8b
 8009df4:	08009e8b 	.word	0x08009e8b
 8009df8:	08009e8b 	.word	0x08009e8b
 8009dfc:	08009e8b 	.word	0x08009e8b
 8009e00:	08009e8b 	.word	0x08009e8b
 8009e04:	08009e8b 	.word	0x08009e8b
 8009e08:	08009e8b 	.word	0x08009e8b
 8009e0c:	08009e8b 	.word	0x08009e8b
 8009e10:	08009e8b 	.word	0x08009e8b
 8009e14:	08009e8b 	.word	0x08009e8b
 8009e18:	08009e8b 	.word	0x08009e8b
 8009e1c:	08009e7d 	.word	0x08009e7d
 8009e20:	2b40      	cmp	r3, #64	@ 0x40
 8009e22:	d02e      	beq.n	8009e82 <UART_SetConfig+0xab2>
 8009e24:	e031      	b.n	8009e8a <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009e26:	f7fd f967 	bl	80070f8 <HAL_RCC_GetPCLK1Freq>
 8009e2a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009e2c:	e033      	b.n	8009e96 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009e2e:	f7fd f979 	bl	8007124 <HAL_RCC_GetPCLK2Freq>
 8009e32:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009e34:	e02f      	b.n	8009e96 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009e36:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009e3a:	4618      	mov	r0, r3
 8009e3c:	f7fe fb9e 	bl	800857c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009e40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e44:	e027      	b.n	8009e96 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009e46:	f107 0318 	add.w	r3, r7, #24
 8009e4a:	4618      	mov	r0, r3
 8009e4c:	f7fe fcea 	bl	8008824 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009e50:	69fb      	ldr	r3, [r7, #28]
 8009e52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e54:	e01f      	b.n	8009e96 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009e56:	4b69      	ldr	r3, [pc, #420]	@ (8009ffc <UART_SetConfig+0xc2c>)
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	f003 0320 	and.w	r3, r3, #32
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d009      	beq.n	8009e76 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009e62:	4b66      	ldr	r3, [pc, #408]	@ (8009ffc <UART_SetConfig+0xc2c>)
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	08db      	lsrs	r3, r3, #3
 8009e68:	f003 0303 	and.w	r3, r3, #3
 8009e6c:	4a64      	ldr	r2, [pc, #400]	@ (800a000 <UART_SetConfig+0xc30>)
 8009e6e:	fa22 f303 	lsr.w	r3, r2, r3
 8009e72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009e74:	e00f      	b.n	8009e96 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8009e76:	4b62      	ldr	r3, [pc, #392]	@ (800a000 <UART_SetConfig+0xc30>)
 8009e78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e7a:	e00c      	b.n	8009e96 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009e7c:	4b61      	ldr	r3, [pc, #388]	@ (800a004 <UART_SetConfig+0xc34>)
 8009e7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e80:	e009      	b.n	8009e96 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009e82:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009e86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e88:	e005      	b.n	8009e96 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8009e8a:	2300      	movs	r3, #0
 8009e8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009e8e:	2301      	movs	r3, #1
 8009e90:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009e94:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009e96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	f000 80ea 	beq.w	800a072 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009e9e:	697b      	ldr	r3, [r7, #20]
 8009ea0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ea2:	4a55      	ldr	r2, [pc, #340]	@ (8009ff8 <UART_SetConfig+0xc28>)
 8009ea4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009ea8:	461a      	mov	r2, r3
 8009eaa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009eac:	fbb3 f3f2 	udiv	r3, r3, r2
 8009eb0:	005a      	lsls	r2, r3, #1
 8009eb2:	697b      	ldr	r3, [r7, #20]
 8009eb4:	685b      	ldr	r3, [r3, #4]
 8009eb6:	085b      	lsrs	r3, r3, #1
 8009eb8:	441a      	add	r2, r3
 8009eba:	697b      	ldr	r3, [r7, #20]
 8009ebc:	685b      	ldr	r3, [r3, #4]
 8009ebe:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ec2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009ec4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ec6:	2b0f      	cmp	r3, #15
 8009ec8:	d916      	bls.n	8009ef8 <UART_SetConfig+0xb28>
 8009eca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ecc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009ed0:	d212      	bcs.n	8009ef8 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009ed2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ed4:	b29b      	uxth	r3, r3
 8009ed6:	f023 030f 	bic.w	r3, r3, #15
 8009eda:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009edc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ede:	085b      	lsrs	r3, r3, #1
 8009ee0:	b29b      	uxth	r3, r3
 8009ee2:	f003 0307 	and.w	r3, r3, #7
 8009ee6:	b29a      	uxth	r2, r3
 8009ee8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009eea:	4313      	orrs	r3, r2
 8009eec:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8009eee:	697b      	ldr	r3, [r7, #20]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8009ef4:	60da      	str	r2, [r3, #12]
 8009ef6:	e0bc      	b.n	800a072 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8009ef8:	2301      	movs	r3, #1
 8009efa:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009efe:	e0b8      	b.n	800a072 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009f00:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009f04:	2b20      	cmp	r3, #32
 8009f06:	dc4b      	bgt.n	8009fa0 <UART_SetConfig+0xbd0>
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	f2c0 8087 	blt.w	800a01c <UART_SetConfig+0xc4c>
 8009f0e:	2b20      	cmp	r3, #32
 8009f10:	f200 8084 	bhi.w	800a01c <UART_SetConfig+0xc4c>
 8009f14:	a201      	add	r2, pc, #4	@ (adr r2, 8009f1c <UART_SetConfig+0xb4c>)
 8009f16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f1a:	bf00      	nop
 8009f1c:	08009fa7 	.word	0x08009fa7
 8009f20:	08009faf 	.word	0x08009faf
 8009f24:	0800a01d 	.word	0x0800a01d
 8009f28:	0800a01d 	.word	0x0800a01d
 8009f2c:	08009fb7 	.word	0x08009fb7
 8009f30:	0800a01d 	.word	0x0800a01d
 8009f34:	0800a01d 	.word	0x0800a01d
 8009f38:	0800a01d 	.word	0x0800a01d
 8009f3c:	08009fc7 	.word	0x08009fc7
 8009f40:	0800a01d 	.word	0x0800a01d
 8009f44:	0800a01d 	.word	0x0800a01d
 8009f48:	0800a01d 	.word	0x0800a01d
 8009f4c:	0800a01d 	.word	0x0800a01d
 8009f50:	0800a01d 	.word	0x0800a01d
 8009f54:	0800a01d 	.word	0x0800a01d
 8009f58:	0800a01d 	.word	0x0800a01d
 8009f5c:	08009fd7 	.word	0x08009fd7
 8009f60:	0800a01d 	.word	0x0800a01d
 8009f64:	0800a01d 	.word	0x0800a01d
 8009f68:	0800a01d 	.word	0x0800a01d
 8009f6c:	0800a01d 	.word	0x0800a01d
 8009f70:	0800a01d 	.word	0x0800a01d
 8009f74:	0800a01d 	.word	0x0800a01d
 8009f78:	0800a01d 	.word	0x0800a01d
 8009f7c:	0800a01d 	.word	0x0800a01d
 8009f80:	0800a01d 	.word	0x0800a01d
 8009f84:	0800a01d 	.word	0x0800a01d
 8009f88:	0800a01d 	.word	0x0800a01d
 8009f8c:	0800a01d 	.word	0x0800a01d
 8009f90:	0800a01d 	.word	0x0800a01d
 8009f94:	0800a01d 	.word	0x0800a01d
 8009f98:	0800a01d 	.word	0x0800a01d
 8009f9c:	0800a00f 	.word	0x0800a00f
 8009fa0:	2b40      	cmp	r3, #64	@ 0x40
 8009fa2:	d037      	beq.n	800a014 <UART_SetConfig+0xc44>
 8009fa4:	e03a      	b.n	800a01c <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009fa6:	f7fd f8a7 	bl	80070f8 <HAL_RCC_GetPCLK1Freq>
 8009faa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009fac:	e03c      	b.n	800a028 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009fae:	f7fd f8b9 	bl	8007124 <HAL_RCC_GetPCLK2Freq>
 8009fb2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009fb4:	e038      	b.n	800a028 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009fb6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009fba:	4618      	mov	r0, r3
 8009fbc:	f7fe fade 	bl	800857c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009fc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009fc4:	e030      	b.n	800a028 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009fc6:	f107 0318 	add.w	r3, r7, #24
 8009fca:	4618      	mov	r0, r3
 8009fcc:	f7fe fc2a 	bl	8008824 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009fd0:	69fb      	ldr	r3, [r7, #28]
 8009fd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009fd4:	e028      	b.n	800a028 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009fd6:	4b09      	ldr	r3, [pc, #36]	@ (8009ffc <UART_SetConfig+0xc2c>)
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	f003 0320 	and.w	r3, r3, #32
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d012      	beq.n	800a008 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009fe2:	4b06      	ldr	r3, [pc, #24]	@ (8009ffc <UART_SetConfig+0xc2c>)
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	08db      	lsrs	r3, r3, #3
 8009fe8:	f003 0303 	and.w	r3, r3, #3
 8009fec:	4a04      	ldr	r2, [pc, #16]	@ (800a000 <UART_SetConfig+0xc30>)
 8009fee:	fa22 f303 	lsr.w	r3, r2, r3
 8009ff2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009ff4:	e018      	b.n	800a028 <UART_SetConfig+0xc58>
 8009ff6:	bf00      	nop
 8009ff8:	0800a94c 	.word	0x0800a94c
 8009ffc:	58024400 	.word	0x58024400
 800a000:	03d09000 	.word	0x03d09000
 800a004:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800a008:	4b24      	ldr	r3, [pc, #144]	@ (800a09c <UART_SetConfig+0xccc>)
 800a00a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a00c:	e00c      	b.n	800a028 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a00e:	4b24      	ldr	r3, [pc, #144]	@ (800a0a0 <UART_SetConfig+0xcd0>)
 800a010:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a012:	e009      	b.n	800a028 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a014:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a018:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a01a:	e005      	b.n	800a028 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800a01c:	2300      	movs	r3, #0
 800a01e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a020:	2301      	movs	r3, #1
 800a022:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a026:	bf00      	nop
    }

    if (pclk != 0U)
 800a028:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d021      	beq.n	800a072 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a02e:	697b      	ldr	r3, [r7, #20]
 800a030:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a032:	4a1c      	ldr	r2, [pc, #112]	@ (800a0a4 <UART_SetConfig+0xcd4>)
 800a034:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a038:	461a      	mov	r2, r3
 800a03a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a03c:	fbb3 f2f2 	udiv	r2, r3, r2
 800a040:	697b      	ldr	r3, [r7, #20]
 800a042:	685b      	ldr	r3, [r3, #4]
 800a044:	085b      	lsrs	r3, r3, #1
 800a046:	441a      	add	r2, r3
 800a048:	697b      	ldr	r3, [r7, #20]
 800a04a:	685b      	ldr	r3, [r3, #4]
 800a04c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a050:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a052:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a054:	2b0f      	cmp	r3, #15
 800a056:	d909      	bls.n	800a06c <UART_SetConfig+0xc9c>
 800a058:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a05a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a05e:	d205      	bcs.n	800a06c <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a060:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a062:	b29a      	uxth	r2, r3
 800a064:	697b      	ldr	r3, [r7, #20]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	60da      	str	r2, [r3, #12]
 800a06a:	e002      	b.n	800a072 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800a06c:	2301      	movs	r3, #1
 800a06e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a072:	697b      	ldr	r3, [r7, #20]
 800a074:	2201      	movs	r2, #1
 800a076:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800a07a:	697b      	ldr	r3, [r7, #20]
 800a07c:	2201      	movs	r2, #1
 800a07e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a082:	697b      	ldr	r3, [r7, #20]
 800a084:	2200      	movs	r2, #0
 800a086:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a088:	697b      	ldr	r3, [r7, #20]
 800a08a:	2200      	movs	r2, #0
 800a08c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a08e:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800a092:	4618      	mov	r0, r3
 800a094:	3748      	adds	r7, #72	@ 0x48
 800a096:	46bd      	mov	sp, r7
 800a098:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a09c:	03d09000 	.word	0x03d09000
 800a0a0:	003d0900 	.word	0x003d0900
 800a0a4:	0800a94c 	.word	0x0800a94c

0800a0a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a0a8:	b480      	push	{r7}
 800a0aa:	b083      	sub	sp, #12
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0b4:	f003 0308 	and.w	r3, r3, #8
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d00a      	beq.n	800a0d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	685b      	ldr	r3, [r3, #4]
 800a0c2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	430a      	orrs	r2, r1
 800a0d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0d6:	f003 0301 	and.w	r3, r3, #1
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d00a      	beq.n	800a0f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	685b      	ldr	r3, [r3, #4]
 800a0e4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	430a      	orrs	r2, r1
 800a0f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0f8:	f003 0302 	and.w	r3, r3, #2
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d00a      	beq.n	800a116 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	685b      	ldr	r3, [r3, #4]
 800a106:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	430a      	orrs	r2, r1
 800a114:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a11a:	f003 0304 	and.w	r3, r3, #4
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d00a      	beq.n	800a138 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	685b      	ldr	r3, [r3, #4]
 800a128:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	430a      	orrs	r2, r1
 800a136:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a13c:	f003 0310 	and.w	r3, r3, #16
 800a140:	2b00      	cmp	r3, #0
 800a142:	d00a      	beq.n	800a15a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	689b      	ldr	r3, [r3, #8]
 800a14a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	430a      	orrs	r2, r1
 800a158:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a15e:	f003 0320 	and.w	r3, r3, #32
 800a162:	2b00      	cmp	r3, #0
 800a164:	d00a      	beq.n	800a17c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	689b      	ldr	r3, [r3, #8]
 800a16c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	430a      	orrs	r2, r1
 800a17a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a180:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a184:	2b00      	cmp	r3, #0
 800a186:	d01a      	beq.n	800a1be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	685b      	ldr	r3, [r3, #4]
 800a18e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	430a      	orrs	r2, r1
 800a19c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a1a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a1a6:	d10a      	bne.n	800a1be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	685b      	ldr	r3, [r3, #4]
 800a1ae:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	430a      	orrs	r2, r1
 800a1bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d00a      	beq.n	800a1e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	685b      	ldr	r3, [r3, #4]
 800a1d0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	430a      	orrs	r2, r1
 800a1de:	605a      	str	r2, [r3, #4]
  }
}
 800a1e0:	bf00      	nop
 800a1e2:	370c      	adds	r7, #12
 800a1e4:	46bd      	mov	sp, r7
 800a1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ea:	4770      	bx	lr

0800a1ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a1ec:	b580      	push	{r7, lr}
 800a1ee:	b098      	sub	sp, #96	@ 0x60
 800a1f0:	af02      	add	r7, sp, #8
 800a1f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	2200      	movs	r2, #0
 800a1f8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a1fc:	f7f6 ff32 	bl	8001064 <HAL_GetTick>
 800a200:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	f003 0308 	and.w	r3, r3, #8
 800a20c:	2b08      	cmp	r3, #8
 800a20e:	d12f      	bne.n	800a270 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a210:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a214:	9300      	str	r3, [sp, #0]
 800a216:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a218:	2200      	movs	r2, #0
 800a21a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a21e:	6878      	ldr	r0, [r7, #4]
 800a220:	f000 f88e 	bl	800a340 <UART_WaitOnFlagUntilTimeout>
 800a224:	4603      	mov	r3, r0
 800a226:	2b00      	cmp	r3, #0
 800a228:	d022      	beq.n	800a270 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a230:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a232:	e853 3f00 	ldrex	r3, [r3]
 800a236:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a238:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a23a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a23e:	653b      	str	r3, [r7, #80]	@ 0x50
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	461a      	mov	r2, r3
 800a246:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a248:	647b      	str	r3, [r7, #68]	@ 0x44
 800a24a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a24c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a24e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a250:	e841 2300 	strex	r3, r2, [r1]
 800a254:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a256:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d1e6      	bne.n	800a22a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	2220      	movs	r2, #32
 800a260:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	2200      	movs	r2, #0
 800a268:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a26c:	2303      	movs	r3, #3
 800a26e:	e063      	b.n	800a338 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	f003 0304 	and.w	r3, r3, #4
 800a27a:	2b04      	cmp	r3, #4
 800a27c:	d149      	bne.n	800a312 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a27e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a282:	9300      	str	r3, [sp, #0]
 800a284:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a286:	2200      	movs	r2, #0
 800a288:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a28c:	6878      	ldr	r0, [r7, #4]
 800a28e:	f000 f857 	bl	800a340 <UART_WaitOnFlagUntilTimeout>
 800a292:	4603      	mov	r3, r0
 800a294:	2b00      	cmp	r3, #0
 800a296:	d03c      	beq.n	800a312 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a29e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2a0:	e853 3f00 	ldrex	r3, [r3]
 800a2a4:	623b      	str	r3, [r7, #32]
   return(result);
 800a2a6:	6a3b      	ldr	r3, [r7, #32]
 800a2a8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a2ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	461a      	mov	r2, r3
 800a2b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a2b6:	633b      	str	r3, [r7, #48]	@ 0x30
 800a2b8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2ba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a2bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a2be:	e841 2300 	strex	r3, r2, [r1]
 800a2c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a2c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d1e6      	bne.n	800a298 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	3308      	adds	r3, #8
 800a2d0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2d2:	693b      	ldr	r3, [r7, #16]
 800a2d4:	e853 3f00 	ldrex	r3, [r3]
 800a2d8:	60fb      	str	r3, [r7, #12]
   return(result);
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	f023 0301 	bic.w	r3, r3, #1
 800a2e0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	3308      	adds	r3, #8
 800a2e8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a2ea:	61fa      	str	r2, [r7, #28]
 800a2ec:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2ee:	69b9      	ldr	r1, [r7, #24]
 800a2f0:	69fa      	ldr	r2, [r7, #28]
 800a2f2:	e841 2300 	strex	r3, r2, [r1]
 800a2f6:	617b      	str	r3, [r7, #20]
   return(result);
 800a2f8:	697b      	ldr	r3, [r7, #20]
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d1e5      	bne.n	800a2ca <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	2220      	movs	r2, #32
 800a302:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	2200      	movs	r2, #0
 800a30a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a30e:	2303      	movs	r3, #3
 800a310:	e012      	b.n	800a338 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	2220      	movs	r2, #32
 800a316:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	2220      	movs	r2, #32
 800a31e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	2200      	movs	r2, #0
 800a326:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	2200      	movs	r2, #0
 800a32c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	2200      	movs	r2, #0
 800a332:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a336:	2300      	movs	r3, #0
}
 800a338:	4618      	mov	r0, r3
 800a33a:	3758      	adds	r7, #88	@ 0x58
 800a33c:	46bd      	mov	sp, r7
 800a33e:	bd80      	pop	{r7, pc}

0800a340 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a340:	b580      	push	{r7, lr}
 800a342:	b084      	sub	sp, #16
 800a344:	af00      	add	r7, sp, #0
 800a346:	60f8      	str	r0, [r7, #12]
 800a348:	60b9      	str	r1, [r7, #8]
 800a34a:	603b      	str	r3, [r7, #0]
 800a34c:	4613      	mov	r3, r2
 800a34e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a350:	e04f      	b.n	800a3f2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a352:	69bb      	ldr	r3, [r7, #24]
 800a354:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a358:	d04b      	beq.n	800a3f2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a35a:	f7f6 fe83 	bl	8001064 <HAL_GetTick>
 800a35e:	4602      	mov	r2, r0
 800a360:	683b      	ldr	r3, [r7, #0]
 800a362:	1ad3      	subs	r3, r2, r3
 800a364:	69ba      	ldr	r2, [r7, #24]
 800a366:	429a      	cmp	r2, r3
 800a368:	d302      	bcc.n	800a370 <UART_WaitOnFlagUntilTimeout+0x30>
 800a36a:	69bb      	ldr	r3, [r7, #24]
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d101      	bne.n	800a374 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a370:	2303      	movs	r3, #3
 800a372:	e04e      	b.n	800a412 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	f003 0304 	and.w	r3, r3, #4
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d037      	beq.n	800a3f2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a382:	68bb      	ldr	r3, [r7, #8]
 800a384:	2b80      	cmp	r3, #128	@ 0x80
 800a386:	d034      	beq.n	800a3f2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a388:	68bb      	ldr	r3, [r7, #8]
 800a38a:	2b40      	cmp	r3, #64	@ 0x40
 800a38c:	d031      	beq.n	800a3f2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	69db      	ldr	r3, [r3, #28]
 800a394:	f003 0308 	and.w	r3, r3, #8
 800a398:	2b08      	cmp	r3, #8
 800a39a:	d110      	bne.n	800a3be <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	2208      	movs	r2, #8
 800a3a2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a3a4:	68f8      	ldr	r0, [r7, #12]
 800a3a6:	f000 f839 	bl	800a41c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	2208      	movs	r2, #8
 800a3ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	2200      	movs	r2, #0
 800a3b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a3ba:	2301      	movs	r3, #1
 800a3bc:	e029      	b.n	800a412 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	69db      	ldr	r3, [r3, #28]
 800a3c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a3c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a3cc:	d111      	bne.n	800a3f2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a3d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a3d8:	68f8      	ldr	r0, [r7, #12]
 800a3da:	f000 f81f 	bl	800a41c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	2220      	movs	r2, #32
 800a3e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	2200      	movs	r2, #0
 800a3ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a3ee:	2303      	movs	r3, #3
 800a3f0:	e00f      	b.n	800a412 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	69da      	ldr	r2, [r3, #28]
 800a3f8:	68bb      	ldr	r3, [r7, #8]
 800a3fa:	4013      	ands	r3, r2
 800a3fc:	68ba      	ldr	r2, [r7, #8]
 800a3fe:	429a      	cmp	r2, r3
 800a400:	bf0c      	ite	eq
 800a402:	2301      	moveq	r3, #1
 800a404:	2300      	movne	r3, #0
 800a406:	b2db      	uxtb	r3, r3
 800a408:	461a      	mov	r2, r3
 800a40a:	79fb      	ldrb	r3, [r7, #7]
 800a40c:	429a      	cmp	r2, r3
 800a40e:	d0a0      	beq.n	800a352 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a410:	2300      	movs	r3, #0
}
 800a412:	4618      	mov	r0, r3
 800a414:	3710      	adds	r7, #16
 800a416:	46bd      	mov	sp, r7
 800a418:	bd80      	pop	{r7, pc}
	...

0800a41c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a41c:	b480      	push	{r7}
 800a41e:	b095      	sub	sp, #84	@ 0x54
 800a420:	af00      	add	r7, sp, #0
 800a422:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a42a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a42c:	e853 3f00 	ldrex	r3, [r3]
 800a430:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a432:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a434:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a438:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	461a      	mov	r2, r3
 800a440:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a442:	643b      	str	r3, [r7, #64]	@ 0x40
 800a444:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a446:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a448:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a44a:	e841 2300 	strex	r3, r2, [r1]
 800a44e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a450:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a452:	2b00      	cmp	r3, #0
 800a454:	d1e6      	bne.n	800a424 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	3308      	adds	r3, #8
 800a45c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a45e:	6a3b      	ldr	r3, [r7, #32]
 800a460:	e853 3f00 	ldrex	r3, [r3]
 800a464:	61fb      	str	r3, [r7, #28]
   return(result);
 800a466:	69fa      	ldr	r2, [r7, #28]
 800a468:	4b1e      	ldr	r3, [pc, #120]	@ (800a4e4 <UART_EndRxTransfer+0xc8>)
 800a46a:	4013      	ands	r3, r2
 800a46c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	3308      	adds	r3, #8
 800a474:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a476:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a478:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a47a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a47c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a47e:	e841 2300 	strex	r3, r2, [r1]
 800a482:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a486:	2b00      	cmp	r3, #0
 800a488:	d1e5      	bne.n	800a456 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a48e:	2b01      	cmp	r3, #1
 800a490:	d118      	bne.n	800a4c4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	e853 3f00 	ldrex	r3, [r3]
 800a49e:	60bb      	str	r3, [r7, #8]
   return(result);
 800a4a0:	68bb      	ldr	r3, [r7, #8]
 800a4a2:	f023 0310 	bic.w	r3, r3, #16
 800a4a6:	647b      	str	r3, [r7, #68]	@ 0x44
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	461a      	mov	r2, r3
 800a4ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a4b0:	61bb      	str	r3, [r7, #24]
 800a4b2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4b4:	6979      	ldr	r1, [r7, #20]
 800a4b6:	69ba      	ldr	r2, [r7, #24]
 800a4b8:	e841 2300 	strex	r3, r2, [r1]
 800a4bc:	613b      	str	r3, [r7, #16]
   return(result);
 800a4be:	693b      	ldr	r3, [r7, #16]
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d1e6      	bne.n	800a492 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	2220      	movs	r2, #32
 800a4c8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	2200      	movs	r2, #0
 800a4d0:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	2200      	movs	r2, #0
 800a4d6:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a4d8:	bf00      	nop
 800a4da:	3754      	adds	r7, #84	@ 0x54
 800a4dc:	46bd      	mov	sp, r7
 800a4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e2:	4770      	bx	lr
 800a4e4:	effffffe 	.word	0xeffffffe

0800a4e8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a4e8:	b480      	push	{r7}
 800a4ea:	b085      	sub	sp, #20
 800a4ec:	af00      	add	r7, sp, #0
 800a4ee:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a4f6:	2b01      	cmp	r3, #1
 800a4f8:	d101      	bne.n	800a4fe <HAL_UARTEx_DisableFifoMode+0x16>
 800a4fa:	2302      	movs	r3, #2
 800a4fc:	e027      	b.n	800a54e <HAL_UARTEx_DisableFifoMode+0x66>
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	2201      	movs	r2, #1
 800a502:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	2224      	movs	r2, #36	@ 0x24
 800a50a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	681a      	ldr	r2, [r3, #0]
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	f022 0201 	bic.w	r2, r2, #1
 800a524:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a52c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	2200      	movs	r2, #0
 800a532:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	68fa      	ldr	r2, [r7, #12]
 800a53a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	2220      	movs	r2, #32
 800a540:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	2200      	movs	r2, #0
 800a548:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a54c:	2300      	movs	r3, #0
}
 800a54e:	4618      	mov	r0, r3
 800a550:	3714      	adds	r7, #20
 800a552:	46bd      	mov	sp, r7
 800a554:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a558:	4770      	bx	lr

0800a55a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a55a:	b580      	push	{r7, lr}
 800a55c:	b084      	sub	sp, #16
 800a55e:	af00      	add	r7, sp, #0
 800a560:	6078      	str	r0, [r7, #4]
 800a562:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a56a:	2b01      	cmp	r3, #1
 800a56c:	d101      	bne.n	800a572 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a56e:	2302      	movs	r3, #2
 800a570:	e02d      	b.n	800a5ce <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	2201      	movs	r2, #1
 800a576:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	2224      	movs	r2, #36	@ 0x24
 800a57e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	681a      	ldr	r2, [r3, #0]
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	f022 0201 	bic.w	r2, r2, #1
 800a598:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	689b      	ldr	r3, [r3, #8]
 800a5a0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	683a      	ldr	r2, [r7, #0]
 800a5aa:	430a      	orrs	r2, r1
 800a5ac:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a5ae:	6878      	ldr	r0, [r7, #4]
 800a5b0:	f000 f850 	bl	800a654 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	68fa      	ldr	r2, [r7, #12]
 800a5ba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	2220      	movs	r2, #32
 800a5c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	2200      	movs	r2, #0
 800a5c8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a5cc:	2300      	movs	r3, #0
}
 800a5ce:	4618      	mov	r0, r3
 800a5d0:	3710      	adds	r7, #16
 800a5d2:	46bd      	mov	sp, r7
 800a5d4:	bd80      	pop	{r7, pc}

0800a5d6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a5d6:	b580      	push	{r7, lr}
 800a5d8:	b084      	sub	sp, #16
 800a5da:	af00      	add	r7, sp, #0
 800a5dc:	6078      	str	r0, [r7, #4]
 800a5de:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a5e6:	2b01      	cmp	r3, #1
 800a5e8:	d101      	bne.n	800a5ee <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a5ea:	2302      	movs	r3, #2
 800a5ec:	e02d      	b.n	800a64a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	2201      	movs	r2, #1
 800a5f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	2224      	movs	r2, #36	@ 0x24
 800a5fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	681a      	ldr	r2, [r3, #0]
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	f022 0201 	bic.w	r2, r2, #1
 800a614:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	689b      	ldr	r3, [r3, #8]
 800a61c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	683a      	ldr	r2, [r7, #0]
 800a626:	430a      	orrs	r2, r1
 800a628:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a62a:	6878      	ldr	r0, [r7, #4]
 800a62c:	f000 f812 	bl	800a654 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	68fa      	ldr	r2, [r7, #12]
 800a636:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	2220      	movs	r2, #32
 800a63c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	2200      	movs	r2, #0
 800a644:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a648:	2300      	movs	r3, #0
}
 800a64a:	4618      	mov	r0, r3
 800a64c:	3710      	adds	r7, #16
 800a64e:	46bd      	mov	sp, r7
 800a650:	bd80      	pop	{r7, pc}
	...

0800a654 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a654:	b480      	push	{r7}
 800a656:	b085      	sub	sp, #20
 800a658:	af00      	add	r7, sp, #0
 800a65a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a660:	2b00      	cmp	r3, #0
 800a662:	d108      	bne.n	800a676 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	2201      	movs	r2, #1
 800a668:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	2201      	movs	r2, #1
 800a670:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a674:	e031      	b.n	800a6da <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a676:	2310      	movs	r3, #16
 800a678:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a67a:	2310      	movs	r3, #16
 800a67c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	689b      	ldr	r3, [r3, #8]
 800a684:	0e5b      	lsrs	r3, r3, #25
 800a686:	b2db      	uxtb	r3, r3
 800a688:	f003 0307 	and.w	r3, r3, #7
 800a68c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	689b      	ldr	r3, [r3, #8]
 800a694:	0f5b      	lsrs	r3, r3, #29
 800a696:	b2db      	uxtb	r3, r3
 800a698:	f003 0307 	and.w	r3, r3, #7
 800a69c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a69e:	7bbb      	ldrb	r3, [r7, #14]
 800a6a0:	7b3a      	ldrb	r2, [r7, #12]
 800a6a2:	4911      	ldr	r1, [pc, #68]	@ (800a6e8 <UARTEx_SetNbDataToProcess+0x94>)
 800a6a4:	5c8a      	ldrb	r2, [r1, r2]
 800a6a6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a6aa:	7b3a      	ldrb	r2, [r7, #12]
 800a6ac:	490f      	ldr	r1, [pc, #60]	@ (800a6ec <UARTEx_SetNbDataToProcess+0x98>)
 800a6ae:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a6b0:	fb93 f3f2 	sdiv	r3, r3, r2
 800a6b4:	b29a      	uxth	r2, r3
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a6bc:	7bfb      	ldrb	r3, [r7, #15]
 800a6be:	7b7a      	ldrb	r2, [r7, #13]
 800a6c0:	4909      	ldr	r1, [pc, #36]	@ (800a6e8 <UARTEx_SetNbDataToProcess+0x94>)
 800a6c2:	5c8a      	ldrb	r2, [r1, r2]
 800a6c4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a6c8:	7b7a      	ldrb	r2, [r7, #13]
 800a6ca:	4908      	ldr	r1, [pc, #32]	@ (800a6ec <UARTEx_SetNbDataToProcess+0x98>)
 800a6cc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a6ce:	fb93 f3f2 	sdiv	r3, r3, r2
 800a6d2:	b29a      	uxth	r2, r3
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a6da:	bf00      	nop
 800a6dc:	3714      	adds	r7, #20
 800a6de:	46bd      	mov	sp, r7
 800a6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e4:	4770      	bx	lr
 800a6e6:	bf00      	nop
 800a6e8:	0800a964 	.word	0x0800a964
 800a6ec:	0800a96c 	.word	0x0800a96c

0800a6f0 <malloc>:
 800a6f0:	4b02      	ldr	r3, [pc, #8]	@ (800a6fc <malloc+0xc>)
 800a6f2:	4601      	mov	r1, r0
 800a6f4:	6818      	ldr	r0, [r3, #0]
 800a6f6:	f000 b825 	b.w	800a744 <_malloc_r>
 800a6fa:	bf00      	nop
 800a6fc:	24000010 	.word	0x24000010

0800a700 <sbrk_aligned>:
 800a700:	b570      	push	{r4, r5, r6, lr}
 800a702:	4e0f      	ldr	r6, [pc, #60]	@ (800a740 <sbrk_aligned+0x40>)
 800a704:	460c      	mov	r4, r1
 800a706:	6831      	ldr	r1, [r6, #0]
 800a708:	4605      	mov	r5, r0
 800a70a:	b911      	cbnz	r1, 800a712 <sbrk_aligned+0x12>
 800a70c:	f000 f8ae 	bl	800a86c <_sbrk_r>
 800a710:	6030      	str	r0, [r6, #0]
 800a712:	4621      	mov	r1, r4
 800a714:	4628      	mov	r0, r5
 800a716:	f000 f8a9 	bl	800a86c <_sbrk_r>
 800a71a:	1c43      	adds	r3, r0, #1
 800a71c:	d103      	bne.n	800a726 <sbrk_aligned+0x26>
 800a71e:	f04f 34ff 	mov.w	r4, #4294967295
 800a722:	4620      	mov	r0, r4
 800a724:	bd70      	pop	{r4, r5, r6, pc}
 800a726:	1cc4      	adds	r4, r0, #3
 800a728:	f024 0403 	bic.w	r4, r4, #3
 800a72c:	42a0      	cmp	r0, r4
 800a72e:	d0f8      	beq.n	800a722 <sbrk_aligned+0x22>
 800a730:	1a21      	subs	r1, r4, r0
 800a732:	4628      	mov	r0, r5
 800a734:	f000 f89a 	bl	800a86c <_sbrk_r>
 800a738:	3001      	adds	r0, #1
 800a73a:	d1f2      	bne.n	800a722 <sbrk_aligned+0x22>
 800a73c:	e7ef      	b.n	800a71e <sbrk_aligned+0x1e>
 800a73e:	bf00      	nop
 800a740:	240002a8 	.word	0x240002a8

0800a744 <_malloc_r>:
 800a744:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a748:	1ccd      	adds	r5, r1, #3
 800a74a:	f025 0503 	bic.w	r5, r5, #3
 800a74e:	3508      	adds	r5, #8
 800a750:	2d0c      	cmp	r5, #12
 800a752:	bf38      	it	cc
 800a754:	250c      	movcc	r5, #12
 800a756:	2d00      	cmp	r5, #0
 800a758:	4606      	mov	r6, r0
 800a75a:	db01      	blt.n	800a760 <_malloc_r+0x1c>
 800a75c:	42a9      	cmp	r1, r5
 800a75e:	d904      	bls.n	800a76a <_malloc_r+0x26>
 800a760:	230c      	movs	r3, #12
 800a762:	6033      	str	r3, [r6, #0]
 800a764:	2000      	movs	r0, #0
 800a766:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a76a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a840 <_malloc_r+0xfc>
 800a76e:	f000 f869 	bl	800a844 <__malloc_lock>
 800a772:	f8d8 3000 	ldr.w	r3, [r8]
 800a776:	461c      	mov	r4, r3
 800a778:	bb44      	cbnz	r4, 800a7cc <_malloc_r+0x88>
 800a77a:	4629      	mov	r1, r5
 800a77c:	4630      	mov	r0, r6
 800a77e:	f7ff ffbf 	bl	800a700 <sbrk_aligned>
 800a782:	1c43      	adds	r3, r0, #1
 800a784:	4604      	mov	r4, r0
 800a786:	d158      	bne.n	800a83a <_malloc_r+0xf6>
 800a788:	f8d8 4000 	ldr.w	r4, [r8]
 800a78c:	4627      	mov	r7, r4
 800a78e:	2f00      	cmp	r7, #0
 800a790:	d143      	bne.n	800a81a <_malloc_r+0xd6>
 800a792:	2c00      	cmp	r4, #0
 800a794:	d04b      	beq.n	800a82e <_malloc_r+0xea>
 800a796:	6823      	ldr	r3, [r4, #0]
 800a798:	4639      	mov	r1, r7
 800a79a:	4630      	mov	r0, r6
 800a79c:	eb04 0903 	add.w	r9, r4, r3
 800a7a0:	f000 f864 	bl	800a86c <_sbrk_r>
 800a7a4:	4581      	cmp	r9, r0
 800a7a6:	d142      	bne.n	800a82e <_malloc_r+0xea>
 800a7a8:	6821      	ldr	r1, [r4, #0]
 800a7aa:	1a6d      	subs	r5, r5, r1
 800a7ac:	4629      	mov	r1, r5
 800a7ae:	4630      	mov	r0, r6
 800a7b0:	f7ff ffa6 	bl	800a700 <sbrk_aligned>
 800a7b4:	3001      	adds	r0, #1
 800a7b6:	d03a      	beq.n	800a82e <_malloc_r+0xea>
 800a7b8:	6823      	ldr	r3, [r4, #0]
 800a7ba:	442b      	add	r3, r5
 800a7bc:	6023      	str	r3, [r4, #0]
 800a7be:	f8d8 3000 	ldr.w	r3, [r8]
 800a7c2:	685a      	ldr	r2, [r3, #4]
 800a7c4:	bb62      	cbnz	r2, 800a820 <_malloc_r+0xdc>
 800a7c6:	f8c8 7000 	str.w	r7, [r8]
 800a7ca:	e00f      	b.n	800a7ec <_malloc_r+0xa8>
 800a7cc:	6822      	ldr	r2, [r4, #0]
 800a7ce:	1b52      	subs	r2, r2, r5
 800a7d0:	d420      	bmi.n	800a814 <_malloc_r+0xd0>
 800a7d2:	2a0b      	cmp	r2, #11
 800a7d4:	d917      	bls.n	800a806 <_malloc_r+0xc2>
 800a7d6:	1961      	adds	r1, r4, r5
 800a7d8:	42a3      	cmp	r3, r4
 800a7da:	6025      	str	r5, [r4, #0]
 800a7dc:	bf18      	it	ne
 800a7de:	6059      	strne	r1, [r3, #4]
 800a7e0:	6863      	ldr	r3, [r4, #4]
 800a7e2:	bf08      	it	eq
 800a7e4:	f8c8 1000 	streq.w	r1, [r8]
 800a7e8:	5162      	str	r2, [r4, r5]
 800a7ea:	604b      	str	r3, [r1, #4]
 800a7ec:	4630      	mov	r0, r6
 800a7ee:	f000 f82f 	bl	800a850 <__malloc_unlock>
 800a7f2:	f104 000b 	add.w	r0, r4, #11
 800a7f6:	1d23      	adds	r3, r4, #4
 800a7f8:	f020 0007 	bic.w	r0, r0, #7
 800a7fc:	1ac2      	subs	r2, r0, r3
 800a7fe:	bf1c      	itt	ne
 800a800:	1a1b      	subne	r3, r3, r0
 800a802:	50a3      	strne	r3, [r4, r2]
 800a804:	e7af      	b.n	800a766 <_malloc_r+0x22>
 800a806:	6862      	ldr	r2, [r4, #4]
 800a808:	42a3      	cmp	r3, r4
 800a80a:	bf0c      	ite	eq
 800a80c:	f8c8 2000 	streq.w	r2, [r8]
 800a810:	605a      	strne	r2, [r3, #4]
 800a812:	e7eb      	b.n	800a7ec <_malloc_r+0xa8>
 800a814:	4623      	mov	r3, r4
 800a816:	6864      	ldr	r4, [r4, #4]
 800a818:	e7ae      	b.n	800a778 <_malloc_r+0x34>
 800a81a:	463c      	mov	r4, r7
 800a81c:	687f      	ldr	r7, [r7, #4]
 800a81e:	e7b6      	b.n	800a78e <_malloc_r+0x4a>
 800a820:	461a      	mov	r2, r3
 800a822:	685b      	ldr	r3, [r3, #4]
 800a824:	42a3      	cmp	r3, r4
 800a826:	d1fb      	bne.n	800a820 <_malloc_r+0xdc>
 800a828:	2300      	movs	r3, #0
 800a82a:	6053      	str	r3, [r2, #4]
 800a82c:	e7de      	b.n	800a7ec <_malloc_r+0xa8>
 800a82e:	230c      	movs	r3, #12
 800a830:	6033      	str	r3, [r6, #0]
 800a832:	4630      	mov	r0, r6
 800a834:	f000 f80c 	bl	800a850 <__malloc_unlock>
 800a838:	e794      	b.n	800a764 <_malloc_r+0x20>
 800a83a:	6005      	str	r5, [r0, #0]
 800a83c:	e7d6      	b.n	800a7ec <_malloc_r+0xa8>
 800a83e:	bf00      	nop
 800a840:	240002ac 	.word	0x240002ac

0800a844 <__malloc_lock>:
 800a844:	4801      	ldr	r0, [pc, #4]	@ (800a84c <__malloc_lock+0x8>)
 800a846:	f000 b84b 	b.w	800a8e0 <__retarget_lock_acquire_recursive>
 800a84a:	bf00      	nop
 800a84c:	240003ec 	.word	0x240003ec

0800a850 <__malloc_unlock>:
 800a850:	4801      	ldr	r0, [pc, #4]	@ (800a858 <__malloc_unlock+0x8>)
 800a852:	f000 b846 	b.w	800a8e2 <__retarget_lock_release_recursive>
 800a856:	bf00      	nop
 800a858:	240003ec 	.word	0x240003ec

0800a85c <memset>:
 800a85c:	4402      	add	r2, r0
 800a85e:	4603      	mov	r3, r0
 800a860:	4293      	cmp	r3, r2
 800a862:	d100      	bne.n	800a866 <memset+0xa>
 800a864:	4770      	bx	lr
 800a866:	f803 1b01 	strb.w	r1, [r3], #1
 800a86a:	e7f9      	b.n	800a860 <memset+0x4>

0800a86c <_sbrk_r>:
 800a86c:	b538      	push	{r3, r4, r5, lr}
 800a86e:	4d06      	ldr	r5, [pc, #24]	@ (800a888 <_sbrk_r+0x1c>)
 800a870:	2300      	movs	r3, #0
 800a872:	4604      	mov	r4, r0
 800a874:	4608      	mov	r0, r1
 800a876:	602b      	str	r3, [r5, #0]
 800a878:	f7f6 fa16 	bl	8000ca8 <_sbrk>
 800a87c:	1c43      	adds	r3, r0, #1
 800a87e:	d102      	bne.n	800a886 <_sbrk_r+0x1a>
 800a880:	682b      	ldr	r3, [r5, #0]
 800a882:	b103      	cbz	r3, 800a886 <_sbrk_r+0x1a>
 800a884:	6023      	str	r3, [r4, #0]
 800a886:	bd38      	pop	{r3, r4, r5, pc}
 800a888:	240003e8 	.word	0x240003e8

0800a88c <__errno>:
 800a88c:	4b01      	ldr	r3, [pc, #4]	@ (800a894 <__errno+0x8>)
 800a88e:	6818      	ldr	r0, [r3, #0]
 800a890:	4770      	bx	lr
 800a892:	bf00      	nop
 800a894:	24000010 	.word	0x24000010

0800a898 <__libc_init_array>:
 800a898:	b570      	push	{r4, r5, r6, lr}
 800a89a:	4d0d      	ldr	r5, [pc, #52]	@ (800a8d0 <__libc_init_array+0x38>)
 800a89c:	4c0d      	ldr	r4, [pc, #52]	@ (800a8d4 <__libc_init_array+0x3c>)
 800a89e:	1b64      	subs	r4, r4, r5
 800a8a0:	10a4      	asrs	r4, r4, #2
 800a8a2:	2600      	movs	r6, #0
 800a8a4:	42a6      	cmp	r6, r4
 800a8a6:	d109      	bne.n	800a8bc <__libc_init_array+0x24>
 800a8a8:	4d0b      	ldr	r5, [pc, #44]	@ (800a8d8 <__libc_init_array+0x40>)
 800a8aa:	4c0c      	ldr	r4, [pc, #48]	@ (800a8dc <__libc_init_array+0x44>)
 800a8ac:	f000 f828 	bl	800a900 <_init>
 800a8b0:	1b64      	subs	r4, r4, r5
 800a8b2:	10a4      	asrs	r4, r4, #2
 800a8b4:	2600      	movs	r6, #0
 800a8b6:	42a6      	cmp	r6, r4
 800a8b8:	d105      	bne.n	800a8c6 <__libc_init_array+0x2e>
 800a8ba:	bd70      	pop	{r4, r5, r6, pc}
 800a8bc:	f855 3b04 	ldr.w	r3, [r5], #4
 800a8c0:	4798      	blx	r3
 800a8c2:	3601      	adds	r6, #1
 800a8c4:	e7ee      	b.n	800a8a4 <__libc_init_array+0xc>
 800a8c6:	f855 3b04 	ldr.w	r3, [r5], #4
 800a8ca:	4798      	blx	r3
 800a8cc:	3601      	adds	r6, #1
 800a8ce:	e7f2      	b.n	800a8b6 <__libc_init_array+0x1e>
 800a8d0:	0800a97c 	.word	0x0800a97c
 800a8d4:	0800a97c 	.word	0x0800a97c
 800a8d8:	0800a97c 	.word	0x0800a97c
 800a8dc:	0800a980 	.word	0x0800a980

0800a8e0 <__retarget_lock_acquire_recursive>:
 800a8e0:	4770      	bx	lr

0800a8e2 <__retarget_lock_release_recursive>:
 800a8e2:	4770      	bx	lr

0800a8e4 <memcpy>:
 800a8e4:	440a      	add	r2, r1
 800a8e6:	4291      	cmp	r1, r2
 800a8e8:	f100 33ff 	add.w	r3, r0, #4294967295
 800a8ec:	d100      	bne.n	800a8f0 <memcpy+0xc>
 800a8ee:	4770      	bx	lr
 800a8f0:	b510      	push	{r4, lr}
 800a8f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a8f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a8fa:	4291      	cmp	r1, r2
 800a8fc:	d1f9      	bne.n	800a8f2 <memcpy+0xe>
 800a8fe:	bd10      	pop	{r4, pc}

0800a900 <_init>:
 800a900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a902:	bf00      	nop
 800a904:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a906:	bc08      	pop	{r3}
 800a908:	469e      	mov	lr, r3
 800a90a:	4770      	bx	lr

0800a90c <_fini>:
 800a90c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a90e:	bf00      	nop
 800a910:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a912:	bc08      	pop	{r3}
 800a914:	469e      	mov	lr, r3
 800a916:	4770      	bx	lr
