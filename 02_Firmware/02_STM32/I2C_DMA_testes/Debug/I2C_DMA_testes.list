
I2C_DMA_testes.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bb4c  080002b0  080002b0  000012b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  0800bdfc  0800bdfc  0000cdfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800be88  0800be88  0000ce88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800be90  0800be90  0000ce90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800be94  0800be94  0000ce94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000064  24000000  0800be98  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000407c  24000064  0800befc  0000d064  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240040e0  0800befc  0000d0e0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000d064  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001fbb1  00000000  00000000  0000d092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003f81  00000000  00000000  0002cc43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001810  00000000  00000000  00030bc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000012ce  00000000  00000000  000323d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00032772  00000000  00000000  000336a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002330e  00000000  00000000  00065e18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00149260  00000000  00000000  00089126  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001d2386  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006a1c  00000000  00000000  001d23cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000008f  00000000  00000000  001d8de8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	@ (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	@ (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000064 	.word	0x24000064
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0800bde4 	.word	0x0800bde4

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	@ (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	@ (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	@ (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000068 	.word	0x24000068
 80002ec:	0800bde4 	.word	0x0800bde4

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96a 	b.w	800067c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	460c      	mov	r4, r1
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d14e      	bne.n	800046a <__udivmoddi4+0xaa>
 80003cc:	4694      	mov	ip, r2
 80003ce:	458c      	cmp	ip, r1
 80003d0:	4686      	mov	lr, r0
 80003d2:	fab2 f282 	clz	r2, r2
 80003d6:	d962      	bls.n	800049e <__udivmoddi4+0xde>
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0320 	rsb	r3, r2, #32
 80003de:	4091      	lsls	r1, r2
 80003e0:	fa20 f303 	lsr.w	r3, r0, r3
 80003e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003e8:	4319      	orrs	r1, r3
 80003ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f2:	fa1f f68c 	uxth.w	r6, ip
 80003f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000402:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000406:	fb04 f106 	mul.w	r1, r4, r6
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f104 30ff 	add.w	r0, r4, #4294967295
 8000416:	f080 8112 	bcs.w	800063e <__udivmoddi4+0x27e>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 810f 	bls.w	800063e <__udivmoddi4+0x27e>
 8000420:	3c02      	subs	r4, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a59      	subs	r1, r3, r1
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb1 f0f7 	udiv	r0, r1, r7
 800042e:	fb07 1110 	mls	r1, r7, r0, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f606 	mul.w	r6, r0, r6
 800043a:	429e      	cmp	r6, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x94>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 31ff 	add.w	r1, r0, #4294967295
 8000446:	f080 80fc 	bcs.w	8000642 <__udivmoddi4+0x282>
 800044a:	429e      	cmp	r6, r3
 800044c:	f240 80f9 	bls.w	8000642 <__udivmoddi4+0x282>
 8000450:	4463      	add	r3, ip
 8000452:	3802      	subs	r0, #2
 8000454:	1b9b      	subs	r3, r3, r6
 8000456:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800045a:	2100      	movs	r1, #0
 800045c:	b11d      	cbz	r5, 8000466 <__udivmoddi4+0xa6>
 800045e:	40d3      	lsrs	r3, r2
 8000460:	2200      	movs	r2, #0
 8000462:	e9c5 3200 	strd	r3, r2, [r5]
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d905      	bls.n	800047a <__udivmoddi4+0xba>
 800046e:	b10d      	cbz	r5, 8000474 <__udivmoddi4+0xb4>
 8000470:	e9c5 0100 	strd	r0, r1, [r5]
 8000474:	2100      	movs	r1, #0
 8000476:	4608      	mov	r0, r1
 8000478:	e7f5      	b.n	8000466 <__udivmoddi4+0xa6>
 800047a:	fab3 f183 	clz	r1, r3
 800047e:	2900      	cmp	r1, #0
 8000480:	d146      	bne.n	8000510 <__udivmoddi4+0x150>
 8000482:	42a3      	cmp	r3, r4
 8000484:	d302      	bcc.n	800048c <__udivmoddi4+0xcc>
 8000486:	4290      	cmp	r0, r2
 8000488:	f0c0 80f0 	bcc.w	800066c <__udivmoddi4+0x2ac>
 800048c:	1a86      	subs	r6, r0, r2
 800048e:	eb64 0303 	sbc.w	r3, r4, r3
 8000492:	2001      	movs	r0, #1
 8000494:	2d00      	cmp	r5, #0
 8000496:	d0e6      	beq.n	8000466 <__udivmoddi4+0xa6>
 8000498:	e9c5 6300 	strd	r6, r3, [r5]
 800049c:	e7e3      	b.n	8000466 <__udivmoddi4+0xa6>
 800049e:	2a00      	cmp	r2, #0
 80004a0:	f040 8090 	bne.w	80005c4 <__udivmoddi4+0x204>
 80004a4:	eba1 040c 	sub.w	r4, r1, ip
 80004a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ac:	fa1f f78c 	uxth.w	r7, ip
 80004b0:	2101      	movs	r1, #1
 80004b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ba:	fb08 4416 	mls	r4, r8, r6, r4
 80004be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004c2:	fb07 f006 	mul.w	r0, r7, r6
 80004c6:	4298      	cmp	r0, r3
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x11c>
 80004ca:	eb1c 0303 	adds.w	r3, ip, r3
 80004ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x11a>
 80004d4:	4298      	cmp	r0, r3
 80004d6:	f200 80cd 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004da:	4626      	mov	r6, r4
 80004dc:	1a1c      	subs	r4, r3, r0
 80004de:	fa1f f38e 	uxth.w	r3, lr
 80004e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004e6:	fb08 4410 	mls	r4, r8, r0, r4
 80004ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004ee:	fb00 f707 	mul.w	r7, r0, r7
 80004f2:	429f      	cmp	r7, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x148>
 80004f6:	eb1c 0303 	adds.w	r3, ip, r3
 80004fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80004fe:	d202      	bcs.n	8000506 <__udivmoddi4+0x146>
 8000500:	429f      	cmp	r7, r3
 8000502:	f200 80b0 	bhi.w	8000666 <__udivmoddi4+0x2a6>
 8000506:	4620      	mov	r0, r4
 8000508:	1bdb      	subs	r3, r3, r7
 800050a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800050e:	e7a5      	b.n	800045c <__udivmoddi4+0x9c>
 8000510:	f1c1 0620 	rsb	r6, r1, #32
 8000514:	408b      	lsls	r3, r1
 8000516:	fa22 f706 	lsr.w	r7, r2, r6
 800051a:	431f      	orrs	r7, r3
 800051c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000520:	fa04 f301 	lsl.w	r3, r4, r1
 8000524:	ea43 030c 	orr.w	r3, r3, ip
 8000528:	40f4      	lsrs	r4, r6
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	0c38      	lsrs	r0, r7, #16
 8000530:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000534:	fbb4 fef0 	udiv	lr, r4, r0
 8000538:	fa1f fc87 	uxth.w	ip, r7
 800053c:	fb00 441e 	mls	r4, r0, lr, r4
 8000540:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000544:	fb0e f90c 	mul.w	r9, lr, ip
 8000548:	45a1      	cmp	r9, r4
 800054a:	fa02 f201 	lsl.w	r2, r2, r1
 800054e:	d90a      	bls.n	8000566 <__udivmoddi4+0x1a6>
 8000550:	193c      	adds	r4, r7, r4
 8000552:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000556:	f080 8084 	bcs.w	8000662 <__udivmoddi4+0x2a2>
 800055a:	45a1      	cmp	r9, r4
 800055c:	f240 8081 	bls.w	8000662 <__udivmoddi4+0x2a2>
 8000560:	f1ae 0e02 	sub.w	lr, lr, #2
 8000564:	443c      	add	r4, r7
 8000566:	eba4 0409 	sub.w	r4, r4, r9
 800056a:	fa1f f983 	uxth.w	r9, r3
 800056e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000572:	fb00 4413 	mls	r4, r0, r3, r4
 8000576:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800057a:	fb03 fc0c 	mul.w	ip, r3, ip
 800057e:	45a4      	cmp	ip, r4
 8000580:	d907      	bls.n	8000592 <__udivmoddi4+0x1d2>
 8000582:	193c      	adds	r4, r7, r4
 8000584:	f103 30ff 	add.w	r0, r3, #4294967295
 8000588:	d267      	bcs.n	800065a <__udivmoddi4+0x29a>
 800058a:	45a4      	cmp	ip, r4
 800058c:	d965      	bls.n	800065a <__udivmoddi4+0x29a>
 800058e:	3b02      	subs	r3, #2
 8000590:	443c      	add	r4, r7
 8000592:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000596:	fba0 9302 	umull	r9, r3, r0, r2
 800059a:	eba4 040c 	sub.w	r4, r4, ip
 800059e:	429c      	cmp	r4, r3
 80005a0:	46ce      	mov	lr, r9
 80005a2:	469c      	mov	ip, r3
 80005a4:	d351      	bcc.n	800064a <__udivmoddi4+0x28a>
 80005a6:	d04e      	beq.n	8000646 <__udivmoddi4+0x286>
 80005a8:	b155      	cbz	r5, 80005c0 <__udivmoddi4+0x200>
 80005aa:	ebb8 030e 	subs.w	r3, r8, lr
 80005ae:	eb64 040c 	sbc.w	r4, r4, ip
 80005b2:	fa04 f606 	lsl.w	r6, r4, r6
 80005b6:	40cb      	lsrs	r3, r1
 80005b8:	431e      	orrs	r6, r3
 80005ba:	40cc      	lsrs	r4, r1
 80005bc:	e9c5 6400 	strd	r6, r4, [r5]
 80005c0:	2100      	movs	r1, #0
 80005c2:	e750      	b.n	8000466 <__udivmoddi4+0xa6>
 80005c4:	f1c2 0320 	rsb	r3, r2, #32
 80005c8:	fa20 f103 	lsr.w	r1, r0, r3
 80005cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d0:	fa24 f303 	lsr.w	r3, r4, r3
 80005d4:	4094      	lsls	r4, r2
 80005d6:	430c      	orrs	r4, r1
 80005d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005e0:	fa1f f78c 	uxth.w	r7, ip
 80005e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005e8:	fb08 3110 	mls	r1, r8, r0, r3
 80005ec:	0c23      	lsrs	r3, r4, #16
 80005ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005f2:	fb00 f107 	mul.w	r1, r0, r7
 80005f6:	4299      	cmp	r1, r3
 80005f8:	d908      	bls.n	800060c <__udivmoddi4+0x24c>
 80005fa:	eb1c 0303 	adds.w	r3, ip, r3
 80005fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000602:	d22c      	bcs.n	800065e <__udivmoddi4+0x29e>
 8000604:	4299      	cmp	r1, r3
 8000606:	d92a      	bls.n	800065e <__udivmoddi4+0x29e>
 8000608:	3802      	subs	r0, #2
 800060a:	4463      	add	r3, ip
 800060c:	1a5b      	subs	r3, r3, r1
 800060e:	b2a4      	uxth	r4, r4
 8000610:	fbb3 f1f8 	udiv	r1, r3, r8
 8000614:	fb08 3311 	mls	r3, r8, r1, r3
 8000618:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800061c:	fb01 f307 	mul.w	r3, r1, r7
 8000620:	42a3      	cmp	r3, r4
 8000622:	d908      	bls.n	8000636 <__udivmoddi4+0x276>
 8000624:	eb1c 0404 	adds.w	r4, ip, r4
 8000628:	f101 36ff 	add.w	r6, r1, #4294967295
 800062c:	d213      	bcs.n	8000656 <__udivmoddi4+0x296>
 800062e:	42a3      	cmp	r3, r4
 8000630:	d911      	bls.n	8000656 <__udivmoddi4+0x296>
 8000632:	3902      	subs	r1, #2
 8000634:	4464      	add	r4, ip
 8000636:	1ae4      	subs	r4, r4, r3
 8000638:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800063c:	e739      	b.n	80004b2 <__udivmoddi4+0xf2>
 800063e:	4604      	mov	r4, r0
 8000640:	e6f0      	b.n	8000424 <__udivmoddi4+0x64>
 8000642:	4608      	mov	r0, r1
 8000644:	e706      	b.n	8000454 <__udivmoddi4+0x94>
 8000646:	45c8      	cmp	r8, r9
 8000648:	d2ae      	bcs.n	80005a8 <__udivmoddi4+0x1e8>
 800064a:	ebb9 0e02 	subs.w	lr, r9, r2
 800064e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000652:	3801      	subs	r0, #1
 8000654:	e7a8      	b.n	80005a8 <__udivmoddi4+0x1e8>
 8000656:	4631      	mov	r1, r6
 8000658:	e7ed      	b.n	8000636 <__udivmoddi4+0x276>
 800065a:	4603      	mov	r3, r0
 800065c:	e799      	b.n	8000592 <__udivmoddi4+0x1d2>
 800065e:	4630      	mov	r0, r6
 8000660:	e7d4      	b.n	800060c <__udivmoddi4+0x24c>
 8000662:	46d6      	mov	lr, sl
 8000664:	e77f      	b.n	8000566 <__udivmoddi4+0x1a6>
 8000666:	4463      	add	r3, ip
 8000668:	3802      	subs	r0, #2
 800066a:	e74d      	b.n	8000508 <__udivmoddi4+0x148>
 800066c:	4606      	mov	r6, r0
 800066e:	4623      	mov	r3, r4
 8000670:	4608      	mov	r0, r1
 8000672:	e70f      	b.n	8000494 <__udivmoddi4+0xd4>
 8000674:	3e02      	subs	r6, #2
 8000676:	4463      	add	r3, ip
 8000678:	e730      	b.n	80004dc <__udivmoddi4+0x11c>
 800067a:	bf00      	nop

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000686:	4b15      	ldr	r3, [pc, #84]	@ (80006dc <MX_DMA_Init+0x5c>)
 8000688:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 800068c:	4a13      	ldr	r2, [pc, #76]	@ (80006dc <MX_DMA_Init+0x5c>)
 800068e:	f043 0301 	orr.w	r3, r3, #1
 8000692:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 8000696:	4b11      	ldr	r3, [pc, #68]	@ (80006dc <MX_DMA_Init+0x5c>)
 8000698:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 800069c:	f003 0301 	and.w	r3, r3, #1
 80006a0:	607b      	str	r3, [r7, #4]
 80006a2:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 6, 0);
 80006a4:	2200      	movs	r2, #0
 80006a6:	2106      	movs	r1, #6
 80006a8:	200b      	movs	r0, #11
 80006aa:	f000 fe23 	bl	80012f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80006ae:	200b      	movs	r0, #11
 80006b0:	f000 fe3a 	bl	8001328 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 6, 0);
 80006b4:	2200      	movs	r2, #0
 80006b6:	2106      	movs	r1, #6
 80006b8:	200c      	movs	r0, #12
 80006ba:	f000 fe1b 	bl	80012f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80006be:	200c      	movs	r0, #12
 80006c0:	f000 fe32 	bl	8001328 <HAL_NVIC_EnableIRQ>
  /* DMAMUX1_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX1_OVR_IRQn, 5, 0);
 80006c4:	2200      	movs	r2, #0
 80006c6:	2105      	movs	r1, #5
 80006c8:	2066      	movs	r0, #102	@ 0x66
 80006ca:	f000 fe13 	bl	80012f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX1_OVR_IRQn);
 80006ce:	2066      	movs	r0, #102	@ 0x66
 80006d0:	f000 fe2a 	bl	8001328 <HAL_NVIC_EnableIRQ>

}
 80006d4:	bf00      	nop
 80006d6:	3708      	adds	r7, #8
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	58024400 	.word	0x58024400

080006e0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b088      	sub	sp, #32
 80006e4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e6:	f107 030c 	add.w	r3, r7, #12
 80006ea:	2200      	movs	r2, #0
 80006ec:	601a      	str	r2, [r3, #0]
 80006ee:	605a      	str	r2, [r3, #4]
 80006f0:	609a      	str	r2, [r3, #8]
 80006f2:	60da      	str	r2, [r3, #12]
 80006f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006f6:	4b1b      	ldr	r3, [pc, #108]	@ (8000764 <MX_GPIO_Init+0x84>)
 80006f8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80006fc:	4a19      	ldr	r2, [pc, #100]	@ (8000764 <MX_GPIO_Init+0x84>)
 80006fe:	f043 0302 	orr.w	r3, r3, #2
 8000702:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000706:	4b17      	ldr	r3, [pc, #92]	@ (8000764 <MX_GPIO_Init+0x84>)
 8000708:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800070c:	f003 0302 	and.w	r3, r3, #2
 8000710:	60bb      	str	r3, [r7, #8]
 8000712:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000714:	4b13      	ldr	r3, [pc, #76]	@ (8000764 <MX_GPIO_Init+0x84>)
 8000716:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800071a:	4a12      	ldr	r2, [pc, #72]	@ (8000764 <MX_GPIO_Init+0x84>)
 800071c:	f043 0301 	orr.w	r3, r3, #1
 8000720:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000724:	4b0f      	ldr	r3, [pc, #60]	@ (8000764 <MX_GPIO_Init+0x84>)
 8000726:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800072a:	f003 0301 	and.w	r3, r3, #1
 800072e:	607b      	str	r3, [r7, #4]
 8000730:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = esp32i2cInterruptReqest_Pin;
 8000732:	2320      	movs	r3, #32
 8000734:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000736:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800073a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073c:	2300      	movs	r3, #0
 800073e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(esp32i2cInterruptReqest_GPIO_Port, &GPIO_InitStruct);
 8000740:	f107 030c 	add.w	r3, r7, #12
 8000744:	4619      	mov	r1, r3
 8000746:	4808      	ldr	r0, [pc, #32]	@ (8000768 <MX_GPIO_Init+0x88>)
 8000748:	f003 f9d6 	bl	8003af8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 800074c:	2200      	movs	r2, #0
 800074e:	2105      	movs	r1, #5
 8000750:	2017      	movs	r0, #23
 8000752:	f000 fdcf 	bl	80012f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000756:	2017      	movs	r0, #23
 8000758:	f000 fde6 	bl	8001328 <HAL_NVIC_EnableIRQ>

}
 800075c:	bf00      	nop
 800075e:	3720      	adds	r7, #32
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	58024400 	.word	0x58024400
 8000768:	58020400 	.word	0x58020400

0800076c <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000770:	4b1b      	ldr	r3, [pc, #108]	@ (80007e0 <MX_I2C1_Init+0x74>)
 8000772:	4a1c      	ldr	r2, [pc, #112]	@ (80007e4 <MX_I2C1_Init+0x78>)
 8000774:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20B0CCFF;
 8000776:	4b1a      	ldr	r3, [pc, #104]	@ (80007e0 <MX_I2C1_Init+0x74>)
 8000778:	4a1b      	ldr	r2, [pc, #108]	@ (80007e8 <MX_I2C1_Init+0x7c>)
 800077a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800077c:	4b18      	ldr	r3, [pc, #96]	@ (80007e0 <MX_I2C1_Init+0x74>)
 800077e:	2200      	movs	r2, #0
 8000780:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000782:	4b17      	ldr	r3, [pc, #92]	@ (80007e0 <MX_I2C1_Init+0x74>)
 8000784:	2201      	movs	r2, #1
 8000786:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000788:	4b15      	ldr	r3, [pc, #84]	@ (80007e0 <MX_I2C1_Init+0x74>)
 800078a:	2200      	movs	r2, #0
 800078c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800078e:	4b14      	ldr	r3, [pc, #80]	@ (80007e0 <MX_I2C1_Init+0x74>)
 8000790:	2200      	movs	r2, #0
 8000792:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000794:	4b12      	ldr	r3, [pc, #72]	@ (80007e0 <MX_I2C1_Init+0x74>)
 8000796:	2200      	movs	r2, #0
 8000798:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800079a:	4b11      	ldr	r3, [pc, #68]	@ (80007e0 <MX_I2C1_Init+0x74>)
 800079c:	2200      	movs	r2, #0
 800079e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 80007a0:	4b0f      	ldr	r3, [pc, #60]	@ (80007e0 <MX_I2C1_Init+0x74>)
 80007a2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80007a6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007a8:	480d      	ldr	r0, [pc, #52]	@ (80007e0 <MX_I2C1_Init+0x74>)
 80007aa:	f003 fb7b 	bl	8003ea4 <HAL_I2C_Init>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007b4:	f000 fa18 	bl	8000be8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007b8:	2100      	movs	r1, #0
 80007ba:	4809      	ldr	r0, [pc, #36]	@ (80007e0 <MX_I2C1_Init+0x74>)
 80007bc:	f005 fc98 	bl	80060f0 <HAL_I2CEx_ConfigAnalogFilter>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80007c6:	f000 fa0f 	bl	8000be8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80007ca:	2100      	movs	r1, #0
 80007cc:	4804      	ldr	r0, [pc, #16]	@ (80007e0 <MX_I2C1_Init+0x74>)
 80007ce:	f005 fcda 	bl	8006186 <HAL_I2CEx_ConfigDigitalFilter>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80007d8:	f000 fa06 	bl	8000be8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007dc:	bf00      	nop
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	24000080 	.word	0x24000080
 80007e4:	40005400 	.word	0x40005400
 80007e8:	20b0ccff 	.word	0x20b0ccff

080007ec <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b0ba      	sub	sp, #232	@ 0xe8
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80007f8:	2200      	movs	r2, #0
 80007fa:	601a      	str	r2, [r3, #0]
 80007fc:	605a      	str	r2, [r3, #4]
 80007fe:	609a      	str	r2, [r3, #8]
 8000800:	60da      	str	r2, [r3, #12]
 8000802:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000804:	f107 0310 	add.w	r3, r7, #16
 8000808:	22c0      	movs	r2, #192	@ 0xc0
 800080a:	2100      	movs	r1, #0
 800080c:	4618      	mov	r0, r3
 800080e:	f00a ff17 	bl	800b640 <memset>
  if(i2cHandle->Instance==I2C1)
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	4a5c      	ldr	r2, [pc, #368]	@ (8000988 <HAL_I2C_MspInit+0x19c>)
 8000818:	4293      	cmp	r3, r2
 800081a:	f040 80b1 	bne.w	8000980 <HAL_I2C_MspInit+0x194>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800081e:	f04f 0208 	mov.w	r2, #8
 8000822:	f04f 0300 	mov.w	r3, #0
 8000826:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 800082a:	2300      	movs	r3, #0
 800082c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000830:	f107 0310 	add.w	r3, r7, #16
 8000834:	4618      	mov	r0, r3
 8000836:	f006 fd2d 	bl	8007294 <HAL_RCCEx_PeriphCLKConfig>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <HAL_I2C_MspInit+0x58>
    {
      Error_Handler();
 8000840:	f000 f9d2 	bl	8000be8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000844:	4b51      	ldr	r3, [pc, #324]	@ (800098c <HAL_I2C_MspInit+0x1a0>)
 8000846:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800084a:	4a50      	ldr	r2, [pc, #320]	@ (800098c <HAL_I2C_MspInit+0x1a0>)
 800084c:	f043 0302 	orr.w	r3, r3, #2
 8000850:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000854:	4b4d      	ldr	r3, [pc, #308]	@ (800098c <HAL_I2C_MspInit+0x1a0>)
 8000856:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800085a:	f003 0302 	and.w	r3, r3, #2
 800085e:	60fb      	str	r3, [r7, #12]
 8000860:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000862:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000866:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800086a:	2312      	movs	r3, #18
 800086c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000870:	2300      	movs	r3, #0
 8000872:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000876:	2300      	movs	r3, #0
 8000878:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800087c:	2304      	movs	r3, #4
 800087e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000882:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000886:	4619      	mov	r1, r3
 8000888:	4841      	ldr	r0, [pc, #260]	@ (8000990 <HAL_I2C_MspInit+0x1a4>)
 800088a:	f003 f935 	bl	8003af8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800088e:	4b3f      	ldr	r3, [pc, #252]	@ (800098c <HAL_I2C_MspInit+0x1a0>)
 8000890:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000894:	4a3d      	ldr	r2, [pc, #244]	@ (800098c <HAL_I2C_MspInit+0x1a0>)
 8000896:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800089a:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 800089e:	4b3b      	ldr	r3, [pc, #236]	@ (800098c <HAL_I2C_MspInit+0x1a0>)
 80008a0:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80008a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80008a8:	60bb      	str	r3, [r7, #8]
 80008aa:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 80008ac:	4b39      	ldr	r3, [pc, #228]	@ (8000994 <HAL_I2C_MspInit+0x1a8>)
 80008ae:	4a3a      	ldr	r2, [pc, #232]	@ (8000998 <HAL_I2C_MspInit+0x1ac>)
 80008b0:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 80008b2:	4b38      	ldr	r3, [pc, #224]	@ (8000994 <HAL_I2C_MspInit+0x1a8>)
 80008b4:	2221      	movs	r2, #33	@ 0x21
 80008b6:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80008b8:	4b36      	ldr	r3, [pc, #216]	@ (8000994 <HAL_I2C_MspInit+0x1a8>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80008be:	4b35      	ldr	r3, [pc, #212]	@ (8000994 <HAL_I2C_MspInit+0x1a8>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80008c4:	4b33      	ldr	r3, [pc, #204]	@ (8000994 <HAL_I2C_MspInit+0x1a8>)
 80008c6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80008ca:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80008cc:	4b31      	ldr	r3, [pc, #196]	@ (8000994 <HAL_I2C_MspInit+0x1a8>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80008d2:	4b30      	ldr	r3, [pc, #192]	@ (8000994 <HAL_I2C_MspInit+0x1a8>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80008d8:	4b2e      	ldr	r3, [pc, #184]	@ (8000994 <HAL_I2C_MspInit+0x1a8>)
 80008da:	2200      	movs	r2, #0
 80008dc:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80008de:	4b2d      	ldr	r3, [pc, #180]	@ (8000994 <HAL_I2C_MspInit+0x1a8>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80008e4:	4b2b      	ldr	r3, [pc, #172]	@ (8000994 <HAL_I2C_MspInit+0x1a8>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80008ea:	482a      	ldr	r0, [pc, #168]	@ (8000994 <HAL_I2C_MspInit+0x1a8>)
 80008ec:	f000 fd2a 	bl	8001344 <HAL_DMA_Init>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <HAL_I2C_MspInit+0x10e>
    {
      Error_Handler();
 80008f6:	f000 f977 	bl	8000be8 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	4a25      	ldr	r2, [pc, #148]	@ (8000994 <HAL_I2C_MspInit+0x1a8>)
 80008fe:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000900:	4a24      	ldr	r2, [pc, #144]	@ (8000994 <HAL_I2C_MspInit+0x1a8>)
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream1;
 8000906:	4b25      	ldr	r3, [pc, #148]	@ (800099c <HAL_I2C_MspInit+0x1b0>)
 8000908:	4a25      	ldr	r2, [pc, #148]	@ (80009a0 <HAL_I2C_MspInit+0x1b4>)
 800090a:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 800090c:	4b23      	ldr	r3, [pc, #140]	@ (800099c <HAL_I2C_MspInit+0x1b0>)
 800090e:	2222      	movs	r2, #34	@ 0x22
 8000910:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000912:	4b22      	ldr	r3, [pc, #136]	@ (800099c <HAL_I2C_MspInit+0x1b0>)
 8000914:	2240      	movs	r2, #64	@ 0x40
 8000916:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000918:	4b20      	ldr	r3, [pc, #128]	@ (800099c <HAL_I2C_MspInit+0x1b0>)
 800091a:	2200      	movs	r2, #0
 800091c:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800091e:	4b1f      	ldr	r3, [pc, #124]	@ (800099c <HAL_I2C_MspInit+0x1b0>)
 8000920:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000924:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000926:	4b1d      	ldr	r3, [pc, #116]	@ (800099c <HAL_I2C_MspInit+0x1b0>)
 8000928:	2200      	movs	r2, #0
 800092a:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800092c:	4b1b      	ldr	r3, [pc, #108]	@ (800099c <HAL_I2C_MspInit+0x1b0>)
 800092e:	2200      	movs	r2, #0
 8000930:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8000932:	4b1a      	ldr	r3, [pc, #104]	@ (800099c <HAL_I2C_MspInit+0x1b0>)
 8000934:	2200      	movs	r2, #0
 8000936:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000938:	4b18      	ldr	r3, [pc, #96]	@ (800099c <HAL_I2C_MspInit+0x1b0>)
 800093a:	2200      	movs	r2, #0
 800093c:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800093e:	4b17      	ldr	r3, [pc, #92]	@ (800099c <HAL_I2C_MspInit+0x1b0>)
 8000940:	2200      	movs	r2, #0
 8000942:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8000944:	4815      	ldr	r0, [pc, #84]	@ (800099c <HAL_I2C_MspInit+0x1b0>)
 8000946:	f000 fcfd 	bl	8001344 <HAL_DMA_Init>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <HAL_I2C_MspInit+0x168>
    {
      Error_Handler();
 8000950:	f000 f94a 	bl	8000be8 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	4a11      	ldr	r2, [pc, #68]	@ (800099c <HAL_I2C_MspInit+0x1b0>)
 8000958:	639a      	str	r2, [r3, #56]	@ 0x38
 800095a:	4a10      	ldr	r2, [pc, #64]	@ (800099c <HAL_I2C_MspInit+0x1b0>)
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000960:	2200      	movs	r2, #0
 8000962:	2100      	movs	r1, #0
 8000964:	201f      	movs	r0, #31
 8000966:	f000 fcc5 	bl	80012f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800096a:	201f      	movs	r0, #31
 800096c:	f000 fcdc 	bl	8001328 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000970:	2200      	movs	r2, #0
 8000972:	2100      	movs	r1, #0
 8000974:	2020      	movs	r0, #32
 8000976:	f000 fcbd 	bl	80012f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800097a:	2020      	movs	r0, #32
 800097c:	f000 fcd4 	bl	8001328 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000980:	bf00      	nop
 8000982:	37e8      	adds	r7, #232	@ 0xe8
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	40005400 	.word	0x40005400
 800098c:	58024400 	.word	0x58024400
 8000990:	58020400 	.word	0x58020400
 8000994:	240000d4 	.word	0x240000d4
 8000998:	40020010 	.word	0x40020010
 800099c:	2400014c 	.word	0x2400014c
 80009a0:	40020028 	.word	0x40020028

080009a4 <myPrintf>:
#include <stdio.h>
#include <stdarg.h>
#include <stdlib.h>
#include <string.h>

char* myPrintf(const char *format, ...) {
 80009a4:	b40f      	push	{r0, r1, r2, r3}
 80009a6:	b580      	push	{r7, lr}
 80009a8:	b084      	sub	sp, #16
 80009aa:	af00      	add	r7, sp, #0
    va_list args;
    va_start(args, format);
 80009ac:	f107 031c 	add.w	r3, r7, #28
 80009b0:	607b      	str	r3, [r7, #4]

    // Najpierw określamy długość wynikowego sformatowanego ciągu
    int length = vsnprintf(NULL, 0, format, args);
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	69ba      	ldr	r2, [r7, #24]
 80009b6:	2100      	movs	r1, #0
 80009b8:	2000      	movs	r0, #0
 80009ba:	f00a fe33 	bl	800b624 <vsniprintf>
 80009be:	60f8      	str	r0, [r7, #12]

    // Resetujemy va_list, aby móc go użyć ponownie
    va_end(args);
    va_start(args, format);
 80009c0:	f107 031c 	add.w	r3, r7, #28
 80009c4:	607b      	str	r3, [r7, #4]

    // Alokujemy odpowiednią ilość pamięci
    char *buffer = (char*)malloc((length + 1) * sizeof(char));
 80009c6:	68fb      	ldr	r3, [r7, #12]
 80009c8:	3301      	adds	r3, #1
 80009ca:	4618      	mov	r0, r3
 80009cc:	f00a fd48 	bl	800b460 <malloc>
 80009d0:	4603      	mov	r3, r0
 80009d2:	60bb      	str	r3, [r7, #8]

    if (buffer != NULL) {
 80009d4:	68bb      	ldr	r3, [r7, #8]
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d007      	beq.n	80009ea <myPrintf+0x46>
        // Właściwe formatowanie do bufora
        vsnprintf(buffer, length + 1, format, args);
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	3301      	adds	r3, #1
 80009de:	4619      	mov	r1, r3
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	69ba      	ldr	r2, [r7, #24]
 80009e4:	68b8      	ldr	r0, [r7, #8]
 80009e6:	f00a fe1d 	bl	800b624 <vsniprintf>
    }

    // Zwalniamy zasoby
    va_end(args);

    return buffer;  // Zwracamy wskaźnik na sformatowany ciąg
 80009ea:	68bb      	ldr	r3, [r7, #8]
}
 80009ec:	4618      	mov	r0, r3
 80009ee:	3710      	adds	r7, #16
 80009f0:	46bd      	mov	sp, r7
 80009f2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80009f6:	b004      	add	sp, #16
 80009f8:	4770      	bx	lr
	...

080009fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b08c      	sub	sp, #48	@ 0x30
 8000a00:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a02:	f000 fb63 	bl	80010cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a06:	f000 f867 	bl	8000ad8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a0a:	f7ff fe69 	bl	80006e0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000a0e:	f7ff fe37 	bl	8000680 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000a12:	f000 fa7b 	bl	8000f0c <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8000a16:	f7ff fea9 	bl	800076c <MX_I2C1_Init>



  char* buffer_1;

  buffer_1 = myPrintf("tata %d\r\n", 1);
 8000a1a:	2101      	movs	r1, #1
 8000a1c:	4828      	ldr	r0, [pc, #160]	@ (8000ac0 <main+0xc4>)
 8000a1e:	f7ff ffc1 	bl	80009a4 <myPrintf>
 8000a22:	62b8      	str	r0, [r7, #40]	@ 0x28

  size_t lenght =sizeof(buffer_1);
 8000a24:	2304      	movs	r3, #4
 8000a26:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_UART_Transmit(&huart1, buffer_1, lenght, 200);
 8000a28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a2a:	b29a      	uxth	r2, r3
 8000a2c:	23c8      	movs	r3, #200	@ 0xc8
 8000a2e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8000a30:	4824      	ldr	r0, [pc, #144]	@ (8000ac4 <main+0xc8>)
 8000a32:	f008 fd2d 	bl	8009490 <HAL_UART_Transmit>


	QueueHandle_t handler_Queue = xQueueCreate(20, sizeof(uint8_t));
 8000a36:	2200      	movs	r2, #0
 8000a38:	2101      	movs	r1, #1
 8000a3a:	2014      	movs	r0, #20
 8000a3c:	f00a f81e 	bl	800aa7c <xQueueGenericCreate>
 8000a40:	6238      	str	r0, [r7, #32]

	char trash[] = "HelloABCDEF";
 8000a42:	4a21      	ldr	r2, [pc, #132]	@ (8000ac8 <main+0xcc>)
 8000a44:	f107 030c 	add.w	r3, r7, #12
 8000a48:	ca07      	ldmia	r2, {r0, r1, r2}
 8000a4a:	e883 0007 	stmia.w	r3, {r0, r1, r2}


	i2cFrame_transmitQueue testTransm;

	testTransm.slaveDevice7bitAddress = 0x3C<<1;
 8000a4e:	2378      	movs	r3, #120	@ 0x78
 8000a50:	703b      	strb	r3, [r7, #0]
	testTransm.dataSize =sizeof(trash);
 8000a52:	230c      	movs	r3, #12
 8000a54:	607b      	str	r3, [r7, #4]
	testTransm.pData = &trash;
 8000a56:	f107 030c 	add.w	r3, r7, #12
 8000a5a:	60bb      	str	r3, [r7, #8]


	size_t bufferLenght = sizeof(testTransm.dataSize)+testTransm.dataSize;
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	3304      	adds	r3, #4
 8000a60:	61fb      	str	r3, [r7, #28]
	testBuffer = malloc(bufferLenght);
 8000a62:	69f8      	ldr	r0, [r7, #28]
 8000a64:	f00a fcfc 	bl	800b460 <malloc>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	461a      	mov	r2, r3
 8000a6c:	4b17      	ldr	r3, [pc, #92]	@ (8000acc <main+0xd0>)
 8000a6e:	601a      	str	r2, [r3, #0]

	memcpy(testBuffer,&testTransm.dataSize, sizeof(testTransm.dataSize));
 8000a70:	4b16      	ldr	r3, [pc, #88]	@ (8000acc <main+0xd0>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	687a      	ldr	r2, [r7, #4]
 8000a76:	601a      	str	r2, [r3, #0]
	memcpy(testBuffer+sizeof(size_t), testTransm.pData, testTransm.dataSize);
 8000a78:	4b14      	ldr	r3, [pc, #80]	@ (8000acc <main+0xd0>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	3304      	adds	r3, #4
 8000a7e:	68b9      	ldr	r1, [r7, #8]
 8000a80:	687a      	ldr	r2, [r7, #4]
 8000a82:	4618      	mov	r0, r3
 8000a84:	f00a fe20 	bl	800b6c8 <memcpy>


	while(1){
		while(HAL_I2C_GetState(&hi2c1)!= HAL_I2C_STATE_READY){};
 8000a88:	bf00      	nop
 8000a8a:	4811      	ldr	r0, [pc, #68]	@ (8000ad0 <main+0xd4>)
 8000a8c:	f003 fc97 	bl	80043be <HAL_I2C_GetState>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b20      	cmp	r3, #32
 8000a94:	d1f9      	bne.n	8000a8a <main+0x8e>

		HAL_StatusTypeDef retVal =HAL_I2C_Master_Transmit_DMA(&hi2c1, I2C_SLAVE_ADDRESS_ESP32<<1, (uint8_t*) testBuffer, bufferLenght);
 8000a96:	4b0d      	ldr	r3, [pc, #52]	@ (8000acc <main+0xd0>)
 8000a98:	681a      	ldr	r2, [r3, #0]
 8000a9a:	69fb      	ldr	r3, [r7, #28]
 8000a9c:	b29b      	uxth	r3, r3
 8000a9e:	2178      	movs	r1, #120	@ 0x78
 8000aa0:	480b      	ldr	r0, [pc, #44]	@ (8000ad0 <main+0xd4>)
 8000aa2:	f003 fa9b 	bl	8003fdc <HAL_I2C_Master_Transmit_DMA>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	76fb      	strb	r3, [r7, #27]

		//pętla opóźniająca jest potrzebna między kolejnymi przesyłkami
		for(uint32_t i=0; i<0xfffff; i++){
 8000aaa:	2300      	movs	r3, #0
 8000aac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000aae:	e002      	b.n	8000ab6 <main+0xba>
 8000ab0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ab2:	3301      	adds	r3, #1
 8000ab4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000ab6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ab8:	4a06      	ldr	r2, [pc, #24]	@ (8000ad4 <main+0xd8>)
 8000aba:	4293      	cmp	r3, r2
 8000abc:	d9f8      	bls.n	8000ab0 <main+0xb4>
	while(1){
 8000abe:	e7e3      	b.n	8000a88 <main+0x8c>
 8000ac0:	0800bdfc 	.word	0x0800bdfc
 8000ac4:	24000218 	.word	0x24000218
 8000ac8:	0800be08 	.word	0x0800be08
 8000acc:	240001c4 	.word	0x240001c4
 8000ad0:	24000080 	.word	0x24000080
 8000ad4:	000ffffe 	.word	0x000ffffe

08000ad8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b09c      	sub	sp, #112	@ 0x70
 8000adc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ade:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ae2:	224c      	movs	r2, #76	@ 0x4c
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f00a fdaa 	bl	800b640 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000aec:	1d3b      	adds	r3, r7, #4
 8000aee:	2220      	movs	r2, #32
 8000af0:	2100      	movs	r1, #0
 8000af2:	4618      	mov	r0, r3
 8000af4:	f00a fda4 	bl	800b640 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000af8:	4b30      	ldr	r3, [pc, #192]	@ (8000bbc <SystemClock_Config+0xe4>)
 8000afa:	f04f 32ff 	mov.w	r2, #4294967295
 8000afe:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000b02:	2002      	movs	r0, #2
 8000b04:	f005 fb8c 	bl	8006220 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000b08:	2300      	movs	r3, #0
 8000b0a:	603b      	str	r3, [r7, #0]
 8000b0c:	4b2c      	ldr	r3, [pc, #176]	@ (8000bc0 <SystemClock_Config+0xe8>)
 8000b0e:	699b      	ldr	r3, [r3, #24]
 8000b10:	4a2b      	ldr	r2, [pc, #172]	@ (8000bc0 <SystemClock_Config+0xe8>)
 8000b12:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000b16:	6193      	str	r3, [r2, #24]
 8000b18:	4b29      	ldr	r3, [pc, #164]	@ (8000bc0 <SystemClock_Config+0xe8>)
 8000b1a:	699b      	ldr	r3, [r3, #24]
 8000b1c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000b20:	603b      	str	r3, [r7, #0]
 8000b22:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000b24:	bf00      	nop
 8000b26:	4b26      	ldr	r3, [pc, #152]	@ (8000bc0 <SystemClock_Config+0xe8>)
 8000b28:	699b      	ldr	r3, [r3, #24]
 8000b2a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000b2e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000b32:	d1f8      	bne.n	8000b26 <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b34:	2302      	movs	r3, #2
 8000b36:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000b38:	2301      	movs	r3, #1
 8000b3a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8000b3c:	2340      	movs	r3, #64	@ 0x40
 8000b3e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b40:	2302      	movs	r3, #2
 8000b42:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b44:	2300      	movs	r3, #0
 8000b46:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b48:	2304      	movs	r3, #4
 8000b4a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 35;
 8000b4c:	2323      	movs	r3, #35	@ 0x23
 8000b4e:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000b50:	2302      	movs	r3, #2
 8000b52:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000b54:	2302      	movs	r3, #2
 8000b56:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b58:	2302      	movs	r3, #2
 8000b5a:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000b5c:	230c      	movs	r3, #12
 8000b5e:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000b60:	2300      	movs	r3, #0
 8000b62:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000b64:	2300      	movs	r3, #0
 8000b66:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b68:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f005 fb91 	bl	8006294 <HAL_RCC_OscConfig>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000b78:	f000 f836 	bl	8000be8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b7c:	233f      	movs	r3, #63	@ 0x3f
 8000b7e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b80:	2303      	movs	r3, #3
 8000b82:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000b84:	2300      	movs	r3, #0
 8000b86:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000b8c:	2340      	movs	r3, #64	@ 0x40
 8000b8e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000b90:	2340      	movs	r3, #64	@ 0x40
 8000b92:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000b94:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b98:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000b9a:	2340      	movs	r3, #64	@ 0x40
 8000b9c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000b9e:	1d3b      	adds	r3, r7, #4
 8000ba0:	2106      	movs	r1, #6
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f005 ffa8 	bl	8006af8 <HAL_RCC_ClockConfig>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <SystemClock_Config+0xda>
  {
    Error_Handler();
 8000bae:	f000 f81b 	bl	8000be8 <Error_Handler>
  }
}
 8000bb2:	bf00      	nop
 8000bb4:	3770      	adds	r7, #112	@ 0x70
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	58024400 	.word	0x58024400
 8000bc0:	58024800 	.word	0x58024800

08000bc4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	4a04      	ldr	r2, [pc, #16]	@ (8000be4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000bd2:	4293      	cmp	r3, r2
 8000bd4:	d101      	bne.n	8000bda <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000bd6:	f000 fab5 	bl	8001144 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000bda:	bf00      	nop
 8000bdc:	3708      	adds	r7, #8
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	40010000 	.word	0x40010000

08000be8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bec:	b672      	cpsid	i
}
 8000bee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bf0:	bf00      	nop
 8000bf2:	e7fd      	b.n	8000bf0 <Error_Handler+0x8>

08000bf4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000c2c <HAL_MspInit+0x38>)
 8000bfc:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000c00:	4a0a      	ldr	r2, [pc, #40]	@ (8000c2c <HAL_MspInit+0x38>)
 8000c02:	f043 0302 	orr.w	r3, r3, #2
 8000c06:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8000c0a:	4b08      	ldr	r3, [pc, #32]	@ (8000c2c <HAL_MspInit+0x38>)
 8000c0c:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000c10:	f003 0302 	and.w	r3, r3, #2
 8000c14:	607b      	str	r3, [r7, #4]
 8000c16:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c18:	2200      	movs	r2, #0
 8000c1a:	210f      	movs	r1, #15
 8000c1c:	f06f 0001 	mvn.w	r0, #1
 8000c20:	f000 fb68 	bl	80012f4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c24:	bf00      	nop
 8000c26:	3708      	adds	r7, #8
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	58024400 	.word	0x58024400

08000c30 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b08e      	sub	sp, #56	@ 0x38
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	2b0f      	cmp	r3, #15
 8000c3c:	d844      	bhi.n	8000cc8 <HAL_InitTick+0x98>
  {
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0U);
 8000c3e:	2200      	movs	r2, #0
 8000c40:	6879      	ldr	r1, [r7, #4]
 8000c42:	2019      	movs	r0, #25
 8000c44:	f000 fb56 	bl	80012f4 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000c48:	2019      	movs	r0, #25
 8000c4a:	f000 fb6d 	bl	8001328 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8000c4e:	4a24      	ldr	r2, [pc, #144]	@ (8000ce0 <HAL_InitTick+0xb0>)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000c54:	4b23      	ldr	r3, [pc, #140]	@ (8000ce4 <HAL_InitTick+0xb4>)
 8000c56:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8000c5a:	4a22      	ldr	r2, [pc, #136]	@ (8000ce4 <HAL_InitTick+0xb4>)
 8000c5c:	f043 0301 	orr.w	r3, r3, #1
 8000c60:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 8000c64:	4b1f      	ldr	r3, [pc, #124]	@ (8000ce4 <HAL_InitTick+0xb4>)
 8000c66:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8000c6a:	f003 0301 	and.w	r3, r3, #1
 8000c6e:	60bb      	str	r3, [r7, #8]
 8000c70:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c72:	f107 020c 	add.w	r2, r7, #12
 8000c76:	f107 0310 	add.w	r3, r7, #16
 8000c7a:	4611      	mov	r1, r2
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f006 fac7 	bl	8007210 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000c82:	f006 faaf 	bl	80071e4 <HAL_RCC_GetPCLK2Freq>
 8000c86:	4603      	mov	r3, r0
 8000c88:	005b      	lsls	r3, r3, #1
 8000c8a:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c8e:	4a16      	ldr	r2, [pc, #88]	@ (8000ce8 <HAL_InitTick+0xb8>)
 8000c90:	fba2 2303 	umull	r2, r3, r2, r3
 8000c94:	0c9b      	lsrs	r3, r3, #18
 8000c96:	3b01      	subs	r3, #1
 8000c98:	633b      	str	r3, [r7, #48]	@ 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000c9a:	4b14      	ldr	r3, [pc, #80]	@ (8000cec <HAL_InitTick+0xbc>)
 8000c9c:	4a14      	ldr	r2, [pc, #80]	@ (8000cf0 <HAL_InitTick+0xc0>)
 8000c9e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000ca0:	4b12      	ldr	r3, [pc, #72]	@ (8000cec <HAL_InitTick+0xbc>)
 8000ca2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000ca6:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000ca8:	4a10      	ldr	r2, [pc, #64]	@ (8000cec <HAL_InitTick+0xbc>)
 8000caa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000cac:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000cae:	4b0f      	ldr	r3, [pc, #60]	@ (8000cec <HAL_InitTick+0xbc>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cb4:	4b0d      	ldr	r3, [pc, #52]	@ (8000cec <HAL_InitTick+0xbc>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000cba:	480c      	ldr	r0, [pc, #48]	@ (8000cec <HAL_InitTick+0xbc>)
 8000cbc:	f008 f8ca 	bl	8008e54 <HAL_TIM_Base_Init>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d107      	bne.n	8000cd6 <HAL_InitTick+0xa6>
 8000cc6:	e001      	b.n	8000ccc <HAL_InitTick+0x9c>
    return HAL_ERROR;
 8000cc8:	2301      	movs	r3, #1
 8000cca:	e005      	b.n	8000cd8 <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000ccc:	4807      	ldr	r0, [pc, #28]	@ (8000cec <HAL_InitTick+0xbc>)
 8000cce:	f008 f923 	bl	8008f18 <HAL_TIM_Base_Start_IT>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	e000      	b.n	8000cd8 <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 8000cd6:	2301      	movs	r3, #1
}
 8000cd8:	4618      	mov	r0, r3
 8000cda:	3738      	adds	r7, #56	@ 0x38
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	24000008 	.word	0x24000008
 8000ce4:	58024400 	.word	0x58024400
 8000ce8:	431bde83 	.word	0x431bde83
 8000cec:	240001c8 	.word	0x240001c8
 8000cf0:	40010000 	.word	0x40010000

08000cf4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cf8:	bf00      	nop
 8000cfa:	e7fd      	b.n	8000cf8 <NMI_Handler+0x4>

08000cfc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d00:	bf00      	nop
 8000d02:	e7fd      	b.n	8000d00 <HardFault_Handler+0x4>

08000d04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d08:	bf00      	nop
 8000d0a:	e7fd      	b.n	8000d08 <MemManage_Handler+0x4>

08000d0c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d10:	bf00      	nop
 8000d12:	e7fd      	b.n	8000d10 <BusFault_Handler+0x4>

08000d14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d18:	bf00      	nop
 8000d1a:	e7fd      	b.n	8000d18 <UsageFault_Handler+0x4>

08000d1c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d20:	bf00      	nop
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr
	...

08000d2c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8000d30:	4802      	ldr	r0, [pc, #8]	@ (8000d3c <DMA1_Stream0_IRQHandler+0x10>)
 8000d32:	f001 fb45 	bl	80023c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000d36:	bf00      	nop
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	240000d4 	.word	0x240000d4

08000d40 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8000d44:	4802      	ldr	r0, [pc, #8]	@ (8000d50 <DMA1_Stream1_IRQHandler+0x10>)
 8000d46:	f001 fb3b 	bl	80023c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8000d4a:	bf00      	nop
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	2400014c 	.word	0x2400014c

08000d54 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(esp32i2cInterruptReqest_Pin);
 8000d58:	2020      	movs	r0, #32
 8000d5a:	f003 f87d 	bl	8003e58 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000d5e:	bf00      	nop
 8000d60:	bd80      	pop	{r7, pc}
	...

08000d64 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000d68:	4802      	ldr	r0, [pc, #8]	@ (8000d74 <TIM1_UP_IRQHandler+0x10>)
 8000d6a:	f008 f94d 	bl	8009008 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000d6e:	bf00      	nop
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	240001c8 	.word	0x240001c8

08000d78 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000d7c:	4802      	ldr	r0, [pc, #8]	@ (8000d88 <I2C1_EV_IRQHandler+0x10>)
 8000d7e:	f003 fa41 	bl	8004204 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000d82:	bf00      	nop
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	24000080 	.word	0x24000080

08000d8c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000d90:	4802      	ldr	r0, [pc, #8]	@ (8000d9c <I2C1_ER_IRQHandler+0x10>)
 8000d92:	f003 fa51 	bl	8004238 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000d96:	bf00      	nop
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	24000080 	.word	0x24000080

08000da0 <DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX1 overrun interrupt.
  */
void DMAMUX1_OVR_IRQHandler(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE END DMAMUX1_OVR_IRQn 0 */

  /* USER CODE BEGIN DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMAMUX1_OVR_IRQn 1 */
}
 8000da4:	bf00      	nop
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr
	...

08000db0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b086      	sub	sp, #24
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000db8:	4a14      	ldr	r2, [pc, #80]	@ (8000e0c <_sbrk+0x5c>)
 8000dba:	4b15      	ldr	r3, [pc, #84]	@ (8000e10 <_sbrk+0x60>)
 8000dbc:	1ad3      	subs	r3, r2, r3
 8000dbe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dc4:	4b13      	ldr	r3, [pc, #76]	@ (8000e14 <_sbrk+0x64>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d102      	bne.n	8000dd2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dcc:	4b11      	ldr	r3, [pc, #68]	@ (8000e14 <_sbrk+0x64>)
 8000dce:	4a12      	ldr	r2, [pc, #72]	@ (8000e18 <_sbrk+0x68>)
 8000dd0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dd2:	4b10      	ldr	r3, [pc, #64]	@ (8000e14 <_sbrk+0x64>)
 8000dd4:	681a      	ldr	r2, [r3, #0]
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	4413      	add	r3, r2
 8000dda:	693a      	ldr	r2, [r7, #16]
 8000ddc:	429a      	cmp	r2, r3
 8000dde:	d207      	bcs.n	8000df0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000de0:	f00a fc46 	bl	800b670 <__errno>
 8000de4:	4603      	mov	r3, r0
 8000de6:	220c      	movs	r2, #12
 8000de8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dea:	f04f 33ff 	mov.w	r3, #4294967295
 8000dee:	e009      	b.n	8000e04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000df0:	4b08      	ldr	r3, [pc, #32]	@ (8000e14 <_sbrk+0x64>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000df6:	4b07      	ldr	r3, [pc, #28]	@ (8000e14 <_sbrk+0x64>)
 8000df8:	681a      	ldr	r2, [r3, #0]
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	4413      	add	r3, r2
 8000dfe:	4a05      	ldr	r2, [pc, #20]	@ (8000e14 <_sbrk+0x64>)
 8000e00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e02:	68fb      	ldr	r3, [r7, #12]
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	3718      	adds	r7, #24
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	24100000 	.word	0x24100000
 8000e10:	00000400 	.word	0x00000400
 8000e14:	24000214 	.word	0x24000214
 8000e18:	240040e0 	.word	0x240040e0

08000e1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000e20:	4b32      	ldr	r3, [pc, #200]	@ (8000eec <SystemInit+0xd0>)
 8000e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e26:	4a31      	ldr	r2, [pc, #196]	@ (8000eec <SystemInit+0xd0>)
 8000e28:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e2c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000e30:	4b2f      	ldr	r3, [pc, #188]	@ (8000ef0 <SystemInit+0xd4>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	f003 030f 	and.w	r3, r3, #15
 8000e38:	2b02      	cmp	r3, #2
 8000e3a:	d807      	bhi.n	8000e4c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000e3c:	4b2c      	ldr	r3, [pc, #176]	@ (8000ef0 <SystemInit+0xd4>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	f023 030f 	bic.w	r3, r3, #15
 8000e44:	4a2a      	ldr	r2, [pc, #168]	@ (8000ef0 <SystemInit+0xd4>)
 8000e46:	f043 0303 	orr.w	r3, r3, #3
 8000e4a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000e4c:	4b29      	ldr	r3, [pc, #164]	@ (8000ef4 <SystemInit+0xd8>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a28      	ldr	r2, [pc, #160]	@ (8000ef4 <SystemInit+0xd8>)
 8000e52:	f043 0301 	orr.w	r3, r3, #1
 8000e56:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000e58:	4b26      	ldr	r3, [pc, #152]	@ (8000ef4 <SystemInit+0xd8>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000e5e:	4b25      	ldr	r3, [pc, #148]	@ (8000ef4 <SystemInit+0xd8>)
 8000e60:	681a      	ldr	r2, [r3, #0]
 8000e62:	4924      	ldr	r1, [pc, #144]	@ (8000ef4 <SystemInit+0xd8>)
 8000e64:	4b24      	ldr	r3, [pc, #144]	@ (8000ef8 <SystemInit+0xdc>)
 8000e66:	4013      	ands	r3, r2
 8000e68:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000e6a:	4b21      	ldr	r3, [pc, #132]	@ (8000ef0 <SystemInit+0xd4>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	f003 030c 	and.w	r3, r3, #12
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d007      	beq.n	8000e86 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000e76:	4b1e      	ldr	r3, [pc, #120]	@ (8000ef0 <SystemInit+0xd4>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f023 030f 	bic.w	r3, r3, #15
 8000e7e:	4a1c      	ldr	r2, [pc, #112]	@ (8000ef0 <SystemInit+0xd4>)
 8000e80:	f043 0303 	orr.w	r3, r3, #3
 8000e84:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8000e86:	4b1b      	ldr	r3, [pc, #108]	@ (8000ef4 <SystemInit+0xd8>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8000e8c:	4b19      	ldr	r3, [pc, #100]	@ (8000ef4 <SystemInit+0xd8>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8000e92:	4b18      	ldr	r3, [pc, #96]	@ (8000ef4 <SystemInit+0xd8>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000e98:	4b16      	ldr	r3, [pc, #88]	@ (8000ef4 <SystemInit+0xd8>)
 8000e9a:	4a18      	ldr	r2, [pc, #96]	@ (8000efc <SystemInit+0xe0>)
 8000e9c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000e9e:	4b15      	ldr	r3, [pc, #84]	@ (8000ef4 <SystemInit+0xd8>)
 8000ea0:	4a17      	ldr	r2, [pc, #92]	@ (8000f00 <SystemInit+0xe4>)
 8000ea2:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000ea4:	4b13      	ldr	r3, [pc, #76]	@ (8000ef4 <SystemInit+0xd8>)
 8000ea6:	4a17      	ldr	r2, [pc, #92]	@ (8000f04 <SystemInit+0xe8>)
 8000ea8:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000eaa:	4b12      	ldr	r3, [pc, #72]	@ (8000ef4 <SystemInit+0xd8>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000eb0:	4b10      	ldr	r3, [pc, #64]	@ (8000ef4 <SystemInit+0xd8>)
 8000eb2:	4a14      	ldr	r2, [pc, #80]	@ (8000f04 <SystemInit+0xe8>)
 8000eb4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000eb6:	4b0f      	ldr	r3, [pc, #60]	@ (8000ef4 <SystemInit+0xd8>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000ebc:	4b0d      	ldr	r3, [pc, #52]	@ (8000ef4 <SystemInit+0xd8>)
 8000ebe:	4a11      	ldr	r2, [pc, #68]	@ (8000f04 <SystemInit+0xe8>)
 8000ec0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000ec2:	4b0c      	ldr	r3, [pc, #48]	@ (8000ef4 <SystemInit+0xd8>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000ec8:	4b0a      	ldr	r3, [pc, #40]	@ (8000ef4 <SystemInit+0xd8>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a09      	ldr	r2, [pc, #36]	@ (8000ef4 <SystemInit+0xd8>)
 8000ece:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000ed2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000ed4:	4b07      	ldr	r3, [pc, #28]	@ (8000ef4 <SystemInit+0xd8>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000eda:	4b0b      	ldr	r3, [pc, #44]	@ (8000f08 <SystemInit+0xec>)
 8000edc:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000ee0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000ee2:	bf00      	nop
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr
 8000eec:	e000ed00 	.word	0xe000ed00
 8000ef0:	52002000 	.word	0x52002000
 8000ef4:	58024400 	.word	0x58024400
 8000ef8:	eaf6ed7f 	.word	0xeaf6ed7f
 8000efc:	02020200 	.word	0x02020200
 8000f00:	01ff0000 	.word	0x01ff0000
 8000f04:	01010280 	.word	0x01010280
 8000f08:	52004000 	.word	0x52004000

08000f0c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f10:	4b22      	ldr	r3, [pc, #136]	@ (8000f9c <MX_USART1_UART_Init+0x90>)
 8000f12:	4a23      	ldr	r2, [pc, #140]	@ (8000fa0 <MX_USART1_UART_Init+0x94>)
 8000f14:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000f16:	4b21      	ldr	r3, [pc, #132]	@ (8000f9c <MX_USART1_UART_Init+0x90>)
 8000f18:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f1c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f1e:	4b1f      	ldr	r3, [pc, #124]	@ (8000f9c <MX_USART1_UART_Init+0x90>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f24:	4b1d      	ldr	r3, [pc, #116]	@ (8000f9c <MX_USART1_UART_Init+0x90>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f2a:	4b1c      	ldr	r3, [pc, #112]	@ (8000f9c <MX_USART1_UART_Init+0x90>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f30:	4b1a      	ldr	r3, [pc, #104]	@ (8000f9c <MX_USART1_UART_Init+0x90>)
 8000f32:	220c      	movs	r2, #12
 8000f34:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f36:	4b19      	ldr	r3, [pc, #100]	@ (8000f9c <MX_USART1_UART_Init+0x90>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f3c:	4b17      	ldr	r3, [pc, #92]	@ (8000f9c <MX_USART1_UART_Init+0x90>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f42:	4b16      	ldr	r3, [pc, #88]	@ (8000f9c <MX_USART1_UART_Init+0x90>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f48:	4b14      	ldr	r3, [pc, #80]	@ (8000f9c <MX_USART1_UART_Init+0x90>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f4e:	4b13      	ldr	r3, [pc, #76]	@ (8000f9c <MX_USART1_UART_Init+0x90>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f54:	4811      	ldr	r0, [pc, #68]	@ (8000f9c <MX_USART1_UART_Init+0x90>)
 8000f56:	f008 fa4b 	bl	80093f0 <HAL_UART_Init>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000f60:	f7ff fe42 	bl	8000be8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f64:	2100      	movs	r1, #0
 8000f66:	480d      	ldr	r0, [pc, #52]	@ (8000f9c <MX_USART1_UART_Init+0x90>)
 8000f68:	f009 fbe5 	bl	800a736 <HAL_UARTEx_SetTxFifoThreshold>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000f72:	f7ff fe39 	bl	8000be8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f76:	2100      	movs	r1, #0
 8000f78:	4808      	ldr	r0, [pc, #32]	@ (8000f9c <MX_USART1_UART_Init+0x90>)
 8000f7a:	f009 fc1a 	bl	800a7b2 <HAL_UARTEx_SetRxFifoThreshold>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000f84:	f7ff fe30 	bl	8000be8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000f88:	4804      	ldr	r0, [pc, #16]	@ (8000f9c <MX_USART1_UART_Init+0x90>)
 8000f8a:	f009 fb9b 	bl	800a6c4 <HAL_UARTEx_DisableFifoMode>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000f94:	f7ff fe28 	bl	8000be8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f98:	bf00      	nop
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	24000218 	.word	0x24000218
 8000fa0:	40011000 	.word	0x40011000

08000fa4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b0ba      	sub	sp, #232	@ 0xe8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fac:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	601a      	str	r2, [r3, #0]
 8000fb4:	605a      	str	r2, [r3, #4]
 8000fb6:	609a      	str	r2, [r3, #8]
 8000fb8:	60da      	str	r2, [r3, #12]
 8000fba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fbc:	f107 0310 	add.w	r3, r7, #16
 8000fc0:	22c0      	movs	r2, #192	@ 0xc0
 8000fc2:	2100      	movs	r1, #0
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f00a fb3b 	bl	800b640 <memset>
  if(uartHandle->Instance==USART1)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4a27      	ldr	r2, [pc, #156]	@ (800106c <HAL_UART_MspInit+0xc8>)
 8000fd0:	4293      	cmp	r3, r2
 8000fd2:	d146      	bne.n	8001062 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000fd4:	f04f 0201 	mov.w	r2, #1
 8000fd8:	f04f 0300 	mov.w	r3, #0
 8000fdc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fe6:	f107 0310 	add.w	r3, r7, #16
 8000fea:	4618      	mov	r0, r3
 8000fec:	f006 f952 	bl	8007294 <HAL_RCCEx_PeriphCLKConfig>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000ff6:	f7ff fdf7 	bl	8000be8 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ffa:	4b1d      	ldr	r3, [pc, #116]	@ (8001070 <HAL_UART_MspInit+0xcc>)
 8000ffc:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8001000:	4a1b      	ldr	r2, [pc, #108]	@ (8001070 <HAL_UART_MspInit+0xcc>)
 8001002:	f043 0310 	orr.w	r3, r3, #16
 8001006:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 800100a:	4b19      	ldr	r3, [pc, #100]	@ (8001070 <HAL_UART_MspInit+0xcc>)
 800100c:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8001010:	f003 0310 	and.w	r3, r3, #16
 8001014:	60fb      	str	r3, [r7, #12]
 8001016:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001018:	4b15      	ldr	r3, [pc, #84]	@ (8001070 <HAL_UART_MspInit+0xcc>)
 800101a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800101e:	4a14      	ldr	r2, [pc, #80]	@ (8001070 <HAL_UART_MspInit+0xcc>)
 8001020:	f043 0302 	orr.w	r3, r3, #2
 8001024:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001028:	4b11      	ldr	r3, [pc, #68]	@ (8001070 <HAL_UART_MspInit+0xcc>)
 800102a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800102e:	f003 0302 	and.w	r3, r3, #2
 8001032:	60bb      	str	r3, [r7, #8]
 8001034:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = dbg_UART_TX_Pin|dbg_UART_RX_Pin;
 8001036:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800103a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800103e:	2302      	movs	r3, #2
 8001040:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001044:	2300      	movs	r3, #0
 8001046:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800104a:	2300      	movs	r3, #0
 800104c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001050:	2304      	movs	r3, #4
 8001052:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001056:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800105a:	4619      	mov	r1, r3
 800105c:	4805      	ldr	r0, [pc, #20]	@ (8001074 <HAL_UART_MspInit+0xd0>)
 800105e:	f002 fd4b 	bl	8003af8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001062:	bf00      	nop
 8001064:	37e8      	adds	r7, #232	@ 0xe8
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	40011000 	.word	0x40011000
 8001070:	58024400 	.word	0x58024400
 8001074:	58020400 	.word	0x58020400

08001078 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001078:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80010b0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800107c:	f7ff fece 	bl	8000e1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001080:	480c      	ldr	r0, [pc, #48]	@ (80010b4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001082:	490d      	ldr	r1, [pc, #52]	@ (80010b8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001084:	4a0d      	ldr	r2, [pc, #52]	@ (80010bc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001086:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001088:	e002      	b.n	8001090 <LoopCopyDataInit>

0800108a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800108a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800108c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800108e:	3304      	adds	r3, #4

08001090 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001090:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001092:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001094:	d3f9      	bcc.n	800108a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001096:	4a0a      	ldr	r2, [pc, #40]	@ (80010c0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001098:	4c0a      	ldr	r4, [pc, #40]	@ (80010c4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800109a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800109c:	e001      	b.n	80010a2 <LoopFillZerobss>

0800109e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800109e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010a0:	3204      	adds	r2, #4

080010a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010a4:	d3fb      	bcc.n	800109e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010a6:	f00a fae9 	bl	800b67c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010aa:	f7ff fca7 	bl	80009fc <main>
  bx  lr
 80010ae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80010b0:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 80010b4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80010b8:	24000064 	.word	0x24000064
  ldr r2, =_sidata
 80010bc:	0800be98 	.word	0x0800be98
  ldr r2, =_sbss
 80010c0:	24000064 	.word	0x24000064
  ldr r4, =_ebss
 80010c4:	240040e0 	.word	0x240040e0

080010c8 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010c8:	e7fe      	b.n	80010c8 <ADC_IRQHandler>
	...

080010cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010d2:	2003      	movs	r0, #3
 80010d4:	f000 f903 	bl	80012de <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80010d8:	f005 fec4 	bl	8006e64 <HAL_RCC_GetSysClockFreq>
 80010dc:	4602      	mov	r2, r0
 80010de:	4b15      	ldr	r3, [pc, #84]	@ (8001134 <HAL_Init+0x68>)
 80010e0:	699b      	ldr	r3, [r3, #24]
 80010e2:	0a1b      	lsrs	r3, r3, #8
 80010e4:	f003 030f 	and.w	r3, r3, #15
 80010e8:	4913      	ldr	r1, [pc, #76]	@ (8001138 <HAL_Init+0x6c>)
 80010ea:	5ccb      	ldrb	r3, [r1, r3]
 80010ec:	f003 031f 	and.w	r3, r3, #31
 80010f0:	fa22 f303 	lsr.w	r3, r2, r3
 80010f4:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80010f6:	4b0f      	ldr	r3, [pc, #60]	@ (8001134 <HAL_Init+0x68>)
 80010f8:	699b      	ldr	r3, [r3, #24]
 80010fa:	f003 030f 	and.w	r3, r3, #15
 80010fe:	4a0e      	ldr	r2, [pc, #56]	@ (8001138 <HAL_Init+0x6c>)
 8001100:	5cd3      	ldrb	r3, [r2, r3]
 8001102:	f003 031f 	and.w	r3, r3, #31
 8001106:	687a      	ldr	r2, [r7, #4]
 8001108:	fa22 f303 	lsr.w	r3, r2, r3
 800110c:	4a0b      	ldr	r2, [pc, #44]	@ (800113c <HAL_Init+0x70>)
 800110e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001110:	4a0b      	ldr	r2, [pc, #44]	@ (8001140 <HAL_Init+0x74>)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001116:	200f      	movs	r0, #15
 8001118:	f7ff fd8a 	bl	8000c30 <HAL_InitTick>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001122:	2301      	movs	r3, #1
 8001124:	e002      	b.n	800112c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001126:	f7ff fd65 	bl	8000bf4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800112a:	2300      	movs	r3, #0
}
 800112c:	4618      	mov	r0, r3
 800112e:	3708      	adds	r7, #8
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	58024400 	.word	0x58024400
 8001138:	0800be14 	.word	0x0800be14
 800113c:	24000004 	.word	0x24000004
 8001140:	24000000 	.word	0x24000000

08001144 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001148:	4b06      	ldr	r3, [pc, #24]	@ (8001164 <HAL_IncTick+0x20>)
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	461a      	mov	r2, r3
 800114e:	4b06      	ldr	r3, [pc, #24]	@ (8001168 <HAL_IncTick+0x24>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4413      	add	r3, r2
 8001154:	4a04      	ldr	r2, [pc, #16]	@ (8001168 <HAL_IncTick+0x24>)
 8001156:	6013      	str	r3, [r2, #0]
}
 8001158:	bf00      	nop
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	2400000c 	.word	0x2400000c
 8001168:	240002ac 	.word	0x240002ac

0800116c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  return uwTick;
 8001170:	4b03      	ldr	r3, [pc, #12]	@ (8001180 <HAL_GetTick+0x14>)
 8001172:	681b      	ldr	r3, [r3, #0]
}
 8001174:	4618      	mov	r0, r3
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	240002ac 	.word	0x240002ac

08001184 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001184:	b480      	push	{r7}
 8001186:	b085      	sub	sp, #20
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	f003 0307 	and.w	r3, r3, #7
 8001192:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001194:	4b0b      	ldr	r3, [pc, #44]	@ (80011c4 <__NVIC_SetPriorityGrouping+0x40>)
 8001196:	68db      	ldr	r3, [r3, #12]
 8001198:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800119a:	68ba      	ldr	r2, [r7, #8]
 800119c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80011a0:	4013      	ands	r3, r2
 80011a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80011ac:	4b06      	ldr	r3, [pc, #24]	@ (80011c8 <__NVIC_SetPriorityGrouping+0x44>)
 80011ae:	4313      	orrs	r3, r2
 80011b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011b2:	4a04      	ldr	r2, [pc, #16]	@ (80011c4 <__NVIC_SetPriorityGrouping+0x40>)
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	60d3      	str	r3, [r2, #12]
}
 80011b8:	bf00      	nop
 80011ba:	3714      	adds	r7, #20
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr
 80011c4:	e000ed00 	.word	0xe000ed00
 80011c8:	05fa0000 	.word	0x05fa0000

080011cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011d0:	4b04      	ldr	r3, [pc, #16]	@ (80011e4 <__NVIC_GetPriorityGrouping+0x18>)
 80011d2:	68db      	ldr	r3, [r3, #12]
 80011d4:	0a1b      	lsrs	r3, r3, #8
 80011d6:	f003 0307 	and.w	r3, r3, #7
}
 80011da:	4618      	mov	r0, r3
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr
 80011e4:	e000ed00 	.word	0xe000ed00

080011e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	4603      	mov	r3, r0
 80011f0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80011f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	db0b      	blt.n	8001212 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011fa:	88fb      	ldrh	r3, [r7, #6]
 80011fc:	f003 021f 	and.w	r2, r3, #31
 8001200:	4907      	ldr	r1, [pc, #28]	@ (8001220 <__NVIC_EnableIRQ+0x38>)
 8001202:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001206:	095b      	lsrs	r3, r3, #5
 8001208:	2001      	movs	r0, #1
 800120a:	fa00 f202 	lsl.w	r2, r0, r2
 800120e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001212:	bf00      	nop
 8001214:	370c      	adds	r7, #12
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop
 8001220:	e000e100 	.word	0xe000e100

08001224 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	4603      	mov	r3, r0
 800122c:	6039      	str	r1, [r7, #0]
 800122e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001230:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001234:	2b00      	cmp	r3, #0
 8001236:	db0a      	blt.n	800124e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	b2da      	uxtb	r2, r3
 800123c:	490c      	ldr	r1, [pc, #48]	@ (8001270 <__NVIC_SetPriority+0x4c>)
 800123e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001242:	0112      	lsls	r2, r2, #4
 8001244:	b2d2      	uxtb	r2, r2
 8001246:	440b      	add	r3, r1
 8001248:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800124c:	e00a      	b.n	8001264 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	b2da      	uxtb	r2, r3
 8001252:	4908      	ldr	r1, [pc, #32]	@ (8001274 <__NVIC_SetPriority+0x50>)
 8001254:	88fb      	ldrh	r3, [r7, #6]
 8001256:	f003 030f 	and.w	r3, r3, #15
 800125a:	3b04      	subs	r3, #4
 800125c:	0112      	lsls	r2, r2, #4
 800125e:	b2d2      	uxtb	r2, r2
 8001260:	440b      	add	r3, r1
 8001262:	761a      	strb	r2, [r3, #24]
}
 8001264:	bf00      	nop
 8001266:	370c      	adds	r7, #12
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr
 8001270:	e000e100 	.word	0xe000e100
 8001274:	e000ed00 	.word	0xe000ed00

08001278 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001278:	b480      	push	{r7}
 800127a:	b089      	sub	sp, #36	@ 0x24
 800127c:	af00      	add	r7, sp, #0
 800127e:	60f8      	str	r0, [r7, #12]
 8001280:	60b9      	str	r1, [r7, #8]
 8001282:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	f003 0307 	and.w	r3, r3, #7
 800128a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800128c:	69fb      	ldr	r3, [r7, #28]
 800128e:	f1c3 0307 	rsb	r3, r3, #7
 8001292:	2b04      	cmp	r3, #4
 8001294:	bf28      	it	cs
 8001296:	2304      	movcs	r3, #4
 8001298:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	3304      	adds	r3, #4
 800129e:	2b06      	cmp	r3, #6
 80012a0:	d902      	bls.n	80012a8 <NVIC_EncodePriority+0x30>
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	3b03      	subs	r3, #3
 80012a6:	e000      	b.n	80012aa <NVIC_EncodePriority+0x32>
 80012a8:	2300      	movs	r3, #0
 80012aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012ac:	f04f 32ff 	mov.w	r2, #4294967295
 80012b0:	69bb      	ldr	r3, [r7, #24]
 80012b2:	fa02 f303 	lsl.w	r3, r2, r3
 80012b6:	43da      	mvns	r2, r3
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	401a      	ands	r2, r3
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012c0:	f04f 31ff 	mov.w	r1, #4294967295
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	fa01 f303 	lsl.w	r3, r1, r3
 80012ca:	43d9      	mvns	r1, r3
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012d0:	4313      	orrs	r3, r2
         );
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	3724      	adds	r7, #36	@ 0x24
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr

080012de <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012de:	b580      	push	{r7, lr}
 80012e0:	b082      	sub	sp, #8
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012e6:	6878      	ldr	r0, [r7, #4]
 80012e8:	f7ff ff4c 	bl	8001184 <__NVIC_SetPriorityGrouping>
}
 80012ec:	bf00      	nop
 80012ee:	3708      	adds	r7, #8
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}

080012f4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b086      	sub	sp, #24
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	4603      	mov	r3, r0
 80012fc:	60b9      	str	r1, [r7, #8]
 80012fe:	607a      	str	r2, [r7, #4]
 8001300:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001302:	f7ff ff63 	bl	80011cc <__NVIC_GetPriorityGrouping>
 8001306:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001308:	687a      	ldr	r2, [r7, #4]
 800130a:	68b9      	ldr	r1, [r7, #8]
 800130c:	6978      	ldr	r0, [r7, #20]
 800130e:	f7ff ffb3 	bl	8001278 <NVIC_EncodePriority>
 8001312:	4602      	mov	r2, r0
 8001314:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001318:	4611      	mov	r1, r2
 800131a:	4618      	mov	r0, r3
 800131c:	f7ff ff82 	bl	8001224 <__NVIC_SetPriority>
}
 8001320:	bf00      	nop
 8001322:	3718      	adds	r7, #24
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}

08001328 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	4603      	mov	r3, r0
 8001330:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001332:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001336:	4618      	mov	r0, r3
 8001338:	f7ff ff56 	bl	80011e8 <__NVIC_EnableIRQ>
}
 800133c:	bf00      	nop
 800133e:	3708      	adds	r7, #8
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}

08001344 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b086      	sub	sp, #24
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800134c:	f7ff ff0e 	bl	800116c <HAL_GetTick>
 8001350:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d101      	bne.n	800135c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001358:	2301      	movs	r3, #1
 800135a:	e37d      	b.n	8001a58 <HAL_DMA_Init+0x714>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a66      	ldr	r2, [pc, #408]	@ (80014fc <HAL_DMA_Init+0x1b8>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d04a      	beq.n	80013fc <HAL_DMA_Init+0xb8>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4a65      	ldr	r2, [pc, #404]	@ (8001500 <HAL_DMA_Init+0x1bc>)
 800136c:	4293      	cmp	r3, r2
 800136e:	d045      	beq.n	80013fc <HAL_DMA_Init+0xb8>
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a63      	ldr	r2, [pc, #396]	@ (8001504 <HAL_DMA_Init+0x1c0>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d040      	beq.n	80013fc <HAL_DMA_Init+0xb8>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4a62      	ldr	r2, [pc, #392]	@ (8001508 <HAL_DMA_Init+0x1c4>)
 8001380:	4293      	cmp	r3, r2
 8001382:	d03b      	beq.n	80013fc <HAL_DMA_Init+0xb8>
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a60      	ldr	r2, [pc, #384]	@ (800150c <HAL_DMA_Init+0x1c8>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d036      	beq.n	80013fc <HAL_DMA_Init+0xb8>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a5f      	ldr	r2, [pc, #380]	@ (8001510 <HAL_DMA_Init+0x1cc>)
 8001394:	4293      	cmp	r3, r2
 8001396:	d031      	beq.n	80013fc <HAL_DMA_Init+0xb8>
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a5d      	ldr	r2, [pc, #372]	@ (8001514 <HAL_DMA_Init+0x1d0>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d02c      	beq.n	80013fc <HAL_DMA_Init+0xb8>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4a5c      	ldr	r2, [pc, #368]	@ (8001518 <HAL_DMA_Init+0x1d4>)
 80013a8:	4293      	cmp	r3, r2
 80013aa:	d027      	beq.n	80013fc <HAL_DMA_Init+0xb8>
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a5a      	ldr	r2, [pc, #360]	@ (800151c <HAL_DMA_Init+0x1d8>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d022      	beq.n	80013fc <HAL_DMA_Init+0xb8>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4a59      	ldr	r2, [pc, #356]	@ (8001520 <HAL_DMA_Init+0x1dc>)
 80013bc:	4293      	cmp	r3, r2
 80013be:	d01d      	beq.n	80013fc <HAL_DMA_Init+0xb8>
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a57      	ldr	r2, [pc, #348]	@ (8001524 <HAL_DMA_Init+0x1e0>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d018      	beq.n	80013fc <HAL_DMA_Init+0xb8>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4a56      	ldr	r2, [pc, #344]	@ (8001528 <HAL_DMA_Init+0x1e4>)
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d013      	beq.n	80013fc <HAL_DMA_Init+0xb8>
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a54      	ldr	r2, [pc, #336]	@ (800152c <HAL_DMA_Init+0x1e8>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d00e      	beq.n	80013fc <HAL_DMA_Init+0xb8>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4a53      	ldr	r2, [pc, #332]	@ (8001530 <HAL_DMA_Init+0x1ec>)
 80013e4:	4293      	cmp	r3, r2
 80013e6:	d009      	beq.n	80013fc <HAL_DMA_Init+0xb8>
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a51      	ldr	r2, [pc, #324]	@ (8001534 <HAL_DMA_Init+0x1f0>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d004      	beq.n	80013fc <HAL_DMA_Init+0xb8>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a50      	ldr	r2, [pc, #320]	@ (8001538 <HAL_DMA_Init+0x1f4>)
 80013f8:	4293      	cmp	r3, r2
 80013fa:	d101      	bne.n	8001400 <HAL_DMA_Init+0xbc>
 80013fc:	2301      	movs	r3, #1
 80013fe:	e000      	b.n	8001402 <HAL_DMA_Init+0xbe>
 8001400:	2300      	movs	r3, #0
 8001402:	2b00      	cmp	r3, #0
 8001404:	f000 813c 	beq.w	8001680 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2202      	movs	r2, #2
 800140c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2200      	movs	r2, #0
 8001414:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a37      	ldr	r2, [pc, #220]	@ (80014fc <HAL_DMA_Init+0x1b8>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d04a      	beq.n	80014b8 <HAL_DMA_Init+0x174>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a36      	ldr	r2, [pc, #216]	@ (8001500 <HAL_DMA_Init+0x1bc>)
 8001428:	4293      	cmp	r3, r2
 800142a:	d045      	beq.n	80014b8 <HAL_DMA_Init+0x174>
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a34      	ldr	r2, [pc, #208]	@ (8001504 <HAL_DMA_Init+0x1c0>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d040      	beq.n	80014b8 <HAL_DMA_Init+0x174>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4a33      	ldr	r2, [pc, #204]	@ (8001508 <HAL_DMA_Init+0x1c4>)
 800143c:	4293      	cmp	r3, r2
 800143e:	d03b      	beq.n	80014b8 <HAL_DMA_Init+0x174>
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a31      	ldr	r2, [pc, #196]	@ (800150c <HAL_DMA_Init+0x1c8>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d036      	beq.n	80014b8 <HAL_DMA_Init+0x174>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4a30      	ldr	r2, [pc, #192]	@ (8001510 <HAL_DMA_Init+0x1cc>)
 8001450:	4293      	cmp	r3, r2
 8001452:	d031      	beq.n	80014b8 <HAL_DMA_Init+0x174>
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a2e      	ldr	r2, [pc, #184]	@ (8001514 <HAL_DMA_Init+0x1d0>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d02c      	beq.n	80014b8 <HAL_DMA_Init+0x174>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4a2d      	ldr	r2, [pc, #180]	@ (8001518 <HAL_DMA_Init+0x1d4>)
 8001464:	4293      	cmp	r3, r2
 8001466:	d027      	beq.n	80014b8 <HAL_DMA_Init+0x174>
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a2b      	ldr	r2, [pc, #172]	@ (800151c <HAL_DMA_Init+0x1d8>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d022      	beq.n	80014b8 <HAL_DMA_Init+0x174>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a2a      	ldr	r2, [pc, #168]	@ (8001520 <HAL_DMA_Init+0x1dc>)
 8001478:	4293      	cmp	r3, r2
 800147a:	d01d      	beq.n	80014b8 <HAL_DMA_Init+0x174>
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a28      	ldr	r2, [pc, #160]	@ (8001524 <HAL_DMA_Init+0x1e0>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d018      	beq.n	80014b8 <HAL_DMA_Init+0x174>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4a27      	ldr	r2, [pc, #156]	@ (8001528 <HAL_DMA_Init+0x1e4>)
 800148c:	4293      	cmp	r3, r2
 800148e:	d013      	beq.n	80014b8 <HAL_DMA_Init+0x174>
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a25      	ldr	r2, [pc, #148]	@ (800152c <HAL_DMA_Init+0x1e8>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d00e      	beq.n	80014b8 <HAL_DMA_Init+0x174>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4a24      	ldr	r2, [pc, #144]	@ (8001530 <HAL_DMA_Init+0x1ec>)
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d009      	beq.n	80014b8 <HAL_DMA_Init+0x174>
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a22      	ldr	r2, [pc, #136]	@ (8001534 <HAL_DMA_Init+0x1f0>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d004      	beq.n	80014b8 <HAL_DMA_Init+0x174>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a21      	ldr	r2, [pc, #132]	@ (8001538 <HAL_DMA_Init+0x1f4>)
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d108      	bne.n	80014ca <HAL_DMA_Init+0x186>
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f022 0201 	bic.w	r2, r2, #1
 80014c6:	601a      	str	r2, [r3, #0]
 80014c8:	e007      	b.n	80014da <HAL_DMA_Init+0x196>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	681a      	ldr	r2, [r3, #0]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f022 0201 	bic.w	r2, r2, #1
 80014d8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80014da:	e02f      	b.n	800153c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80014dc:	f7ff fe46 	bl	800116c <HAL_GetTick>
 80014e0:	4602      	mov	r2, r0
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	1ad3      	subs	r3, r2, r3
 80014e6:	2b05      	cmp	r3, #5
 80014e8:	d928      	bls.n	800153c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	2220      	movs	r2, #32
 80014ee:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2203      	movs	r2, #3
 80014f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 80014f8:	2301      	movs	r3, #1
 80014fa:	e2ad      	b.n	8001a58 <HAL_DMA_Init+0x714>
 80014fc:	40020010 	.word	0x40020010
 8001500:	40020028 	.word	0x40020028
 8001504:	40020040 	.word	0x40020040
 8001508:	40020058 	.word	0x40020058
 800150c:	40020070 	.word	0x40020070
 8001510:	40020088 	.word	0x40020088
 8001514:	400200a0 	.word	0x400200a0
 8001518:	400200b8 	.word	0x400200b8
 800151c:	40020410 	.word	0x40020410
 8001520:	40020428 	.word	0x40020428
 8001524:	40020440 	.word	0x40020440
 8001528:	40020458 	.word	0x40020458
 800152c:	40020470 	.word	0x40020470
 8001530:	40020488 	.word	0x40020488
 8001534:	400204a0 	.word	0x400204a0
 8001538:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f003 0301 	and.w	r3, r3, #1
 8001546:	2b00      	cmp	r3, #0
 8001548:	d1c8      	bne.n	80014dc <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001552:	697a      	ldr	r2, [r7, #20]
 8001554:	4b73      	ldr	r3, [pc, #460]	@ (8001724 <HAL_DMA_Init+0x3e0>)
 8001556:	4013      	ands	r3, r2
 8001558:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001562:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	691b      	ldr	r3, [r3, #16]
 8001568:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800156e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	699b      	ldr	r3, [r3, #24]
 8001574:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800157a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6a1b      	ldr	r3, [r3, #32]
 8001580:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001582:	697a      	ldr	r2, [r7, #20]
 8001584:	4313      	orrs	r3, r2
 8001586:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800158c:	2b04      	cmp	r3, #4
 800158e:	d107      	bne.n	80015a0 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001598:	4313      	orrs	r3, r2
 800159a:	697a      	ldr	r2, [r7, #20]
 800159c:	4313      	orrs	r3, r2
 800159e:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	2b28      	cmp	r3, #40	@ 0x28
 80015a6:	d903      	bls.n	80015b0 <HAL_DMA_Init+0x26c>
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	2b2e      	cmp	r3, #46	@ 0x2e
 80015ae:	d91f      	bls.n	80015f0 <HAL_DMA_Init+0x2ac>
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	2b3e      	cmp	r3, #62	@ 0x3e
 80015b6:	d903      	bls.n	80015c0 <HAL_DMA_Init+0x27c>
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	2b42      	cmp	r3, #66	@ 0x42
 80015be:	d917      	bls.n	80015f0 <HAL_DMA_Init+0x2ac>
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	2b46      	cmp	r3, #70	@ 0x46
 80015c6:	d903      	bls.n	80015d0 <HAL_DMA_Init+0x28c>
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	2b48      	cmp	r3, #72	@ 0x48
 80015ce:	d90f      	bls.n	80015f0 <HAL_DMA_Init+0x2ac>
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	2b4e      	cmp	r3, #78	@ 0x4e
 80015d6:	d903      	bls.n	80015e0 <HAL_DMA_Init+0x29c>
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	2b52      	cmp	r3, #82	@ 0x52
 80015de:	d907      	bls.n	80015f0 <HAL_DMA_Init+0x2ac>
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	2b73      	cmp	r3, #115	@ 0x73
 80015e6:	d905      	bls.n	80015f4 <HAL_DMA_Init+0x2b0>
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	2b77      	cmp	r3, #119	@ 0x77
 80015ee:	d801      	bhi.n	80015f4 <HAL_DMA_Init+0x2b0>
 80015f0:	2301      	movs	r3, #1
 80015f2:	e000      	b.n	80015f6 <HAL_DMA_Init+0x2b2>
 80015f4:	2300      	movs	r3, #0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d003      	beq.n	8001602 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001600:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	697a      	ldr	r2, [r7, #20]
 8001608:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	695b      	ldr	r3, [r3, #20]
 8001610:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	f023 0307 	bic.w	r3, r3, #7
 8001618:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800161e:	697a      	ldr	r2, [r7, #20]
 8001620:	4313      	orrs	r3, r2
 8001622:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001628:	2b04      	cmp	r3, #4
 800162a:	d117      	bne.n	800165c <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001630:	697a      	ldr	r2, [r7, #20]
 8001632:	4313      	orrs	r3, r2
 8001634:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800163a:	2b00      	cmp	r3, #0
 800163c:	d00e      	beq.n	800165c <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800163e:	6878      	ldr	r0, [r7, #4]
 8001640:	f002 f8d0 	bl	80037e4 <DMA_CheckFifoParam>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d008      	beq.n	800165c <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2240      	movs	r2, #64	@ 0x40
 800164e:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2201      	movs	r2, #1
 8001654:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8001658:	2301      	movs	r3, #1
 800165a:	e1fd      	b.n	8001a58 <HAL_DMA_Init+0x714>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	697a      	ldr	r2, [r7, #20]
 8001662:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001664:	6878      	ldr	r0, [r7, #4]
 8001666:	f002 f80b 	bl	8003680 <DMA_CalcBaseAndBitshift>
 800166a:	4603      	mov	r3, r0
 800166c:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001672:	f003 031f 	and.w	r3, r3, #31
 8001676:	223f      	movs	r2, #63	@ 0x3f
 8001678:	409a      	lsls	r2, r3
 800167a:	68bb      	ldr	r3, [r7, #8]
 800167c:	609a      	str	r2, [r3, #8]
 800167e:	e0fd      	b.n	800187c <HAL_DMA_Init+0x538>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a28      	ldr	r2, [pc, #160]	@ (8001728 <HAL_DMA_Init+0x3e4>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d04a      	beq.n	8001720 <HAL_DMA_Init+0x3dc>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a27      	ldr	r2, [pc, #156]	@ (800172c <HAL_DMA_Init+0x3e8>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d045      	beq.n	8001720 <HAL_DMA_Init+0x3dc>
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a25      	ldr	r2, [pc, #148]	@ (8001730 <HAL_DMA_Init+0x3ec>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d040      	beq.n	8001720 <HAL_DMA_Init+0x3dc>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a24      	ldr	r2, [pc, #144]	@ (8001734 <HAL_DMA_Init+0x3f0>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d03b      	beq.n	8001720 <HAL_DMA_Init+0x3dc>
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a22      	ldr	r2, [pc, #136]	@ (8001738 <HAL_DMA_Init+0x3f4>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d036      	beq.n	8001720 <HAL_DMA_Init+0x3dc>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a21      	ldr	r2, [pc, #132]	@ (800173c <HAL_DMA_Init+0x3f8>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d031      	beq.n	8001720 <HAL_DMA_Init+0x3dc>
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a1f      	ldr	r2, [pc, #124]	@ (8001740 <HAL_DMA_Init+0x3fc>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d02c      	beq.n	8001720 <HAL_DMA_Init+0x3dc>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a1e      	ldr	r2, [pc, #120]	@ (8001744 <HAL_DMA_Init+0x400>)
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d027      	beq.n	8001720 <HAL_DMA_Init+0x3dc>
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a1c      	ldr	r2, [pc, #112]	@ (8001748 <HAL_DMA_Init+0x404>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d022      	beq.n	8001720 <HAL_DMA_Init+0x3dc>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a1b      	ldr	r2, [pc, #108]	@ (800174c <HAL_DMA_Init+0x408>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d01d      	beq.n	8001720 <HAL_DMA_Init+0x3dc>
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a19      	ldr	r2, [pc, #100]	@ (8001750 <HAL_DMA_Init+0x40c>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d018      	beq.n	8001720 <HAL_DMA_Init+0x3dc>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a18      	ldr	r2, [pc, #96]	@ (8001754 <HAL_DMA_Init+0x410>)
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d013      	beq.n	8001720 <HAL_DMA_Init+0x3dc>
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a16      	ldr	r2, [pc, #88]	@ (8001758 <HAL_DMA_Init+0x414>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d00e      	beq.n	8001720 <HAL_DMA_Init+0x3dc>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a15      	ldr	r2, [pc, #84]	@ (800175c <HAL_DMA_Init+0x418>)
 8001708:	4293      	cmp	r3, r2
 800170a:	d009      	beq.n	8001720 <HAL_DMA_Init+0x3dc>
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a13      	ldr	r2, [pc, #76]	@ (8001760 <HAL_DMA_Init+0x41c>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d004      	beq.n	8001720 <HAL_DMA_Init+0x3dc>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a12      	ldr	r2, [pc, #72]	@ (8001764 <HAL_DMA_Init+0x420>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d123      	bne.n	8001768 <HAL_DMA_Init+0x424>
 8001720:	2301      	movs	r3, #1
 8001722:	e022      	b.n	800176a <HAL_DMA_Init+0x426>
 8001724:	fe10803f 	.word	0xfe10803f
 8001728:	48022c08 	.word	0x48022c08
 800172c:	48022c1c 	.word	0x48022c1c
 8001730:	48022c30 	.word	0x48022c30
 8001734:	48022c44 	.word	0x48022c44
 8001738:	48022c58 	.word	0x48022c58
 800173c:	48022c6c 	.word	0x48022c6c
 8001740:	48022c80 	.word	0x48022c80
 8001744:	48022c94 	.word	0x48022c94
 8001748:	58025408 	.word	0x58025408
 800174c:	5802541c 	.word	0x5802541c
 8001750:	58025430 	.word	0x58025430
 8001754:	58025444 	.word	0x58025444
 8001758:	58025458 	.word	0x58025458
 800175c:	5802546c 	.word	0x5802546c
 8001760:	58025480 	.word	0x58025480
 8001764:	58025494 	.word	0x58025494
 8001768:	2300      	movs	r3, #0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d07d      	beq.n	800186a <HAL_DMA_Init+0x526>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a7f      	ldr	r2, [pc, #508]	@ (8001970 <HAL_DMA_Init+0x62c>)
 8001774:	4293      	cmp	r3, r2
 8001776:	d021      	beq.n	80017bc <HAL_DMA_Init+0x478>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a7d      	ldr	r2, [pc, #500]	@ (8001974 <HAL_DMA_Init+0x630>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d01c      	beq.n	80017bc <HAL_DMA_Init+0x478>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a7c      	ldr	r2, [pc, #496]	@ (8001978 <HAL_DMA_Init+0x634>)
 8001788:	4293      	cmp	r3, r2
 800178a:	d017      	beq.n	80017bc <HAL_DMA_Init+0x478>
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a7a      	ldr	r2, [pc, #488]	@ (800197c <HAL_DMA_Init+0x638>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d012      	beq.n	80017bc <HAL_DMA_Init+0x478>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4a79      	ldr	r2, [pc, #484]	@ (8001980 <HAL_DMA_Init+0x63c>)
 800179c:	4293      	cmp	r3, r2
 800179e:	d00d      	beq.n	80017bc <HAL_DMA_Init+0x478>
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a77      	ldr	r2, [pc, #476]	@ (8001984 <HAL_DMA_Init+0x640>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d008      	beq.n	80017bc <HAL_DMA_Init+0x478>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a76      	ldr	r2, [pc, #472]	@ (8001988 <HAL_DMA_Init+0x644>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d003      	beq.n	80017bc <HAL_DMA_Init+0x478>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a74      	ldr	r2, [pc, #464]	@ (800198c <HAL_DMA_Init+0x648>)
 80017ba:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2202      	movs	r2, #2
 80017c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2200      	movs	r2, #0
 80017c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80017d4:	697a      	ldr	r2, [r7, #20]
 80017d6:	4b6e      	ldr	r3, [pc, #440]	@ (8001990 <HAL_DMA_Init+0x64c>)
 80017d8:	4013      	ands	r3, r2
 80017da:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	2b40      	cmp	r3, #64	@ 0x40
 80017e2:	d008      	beq.n	80017f6 <HAL_DMA_Init+0x4b2>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	2b80      	cmp	r3, #128	@ 0x80
 80017ea:	d102      	bne.n	80017f2 <HAL_DMA_Init+0x4ae>
 80017ec:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80017f0:	e002      	b.n	80017f8 <HAL_DMA_Init+0x4b4>
 80017f2:	2300      	movs	r3, #0
 80017f4:	e000      	b.n	80017f8 <HAL_DMA_Init+0x4b4>
 80017f6:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80017f8:	687a      	ldr	r2, [r7, #4]
 80017fa:	68d2      	ldr	r2, [r2, #12]
 80017fc:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80017fe:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	691b      	ldr	r3, [r3, #16]
 8001804:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001806:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	695b      	ldr	r3, [r3, #20]
 800180c:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800180e:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	699b      	ldr	r3, [r3, #24]
 8001814:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001816:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	69db      	ldr	r3, [r3, #28]
 800181c:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800181e:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6a1b      	ldr	r3, [r3, #32]
 8001824:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001826:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001828:	697a      	ldr	r2, [r7, #20]
 800182a:	4313      	orrs	r3, r2
 800182c:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	697a      	ldr	r2, [r7, #20]
 8001834:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	461a      	mov	r2, r3
 800183c:	4b55      	ldr	r3, [pc, #340]	@ (8001994 <HAL_DMA_Init+0x650>)
 800183e:	4413      	add	r3, r2
 8001840:	4a55      	ldr	r2, [pc, #340]	@ (8001998 <HAL_DMA_Init+0x654>)
 8001842:	fba2 2303 	umull	r2, r3, r2, r3
 8001846:	091b      	lsrs	r3, r3, #4
 8001848:	009a      	lsls	r2, r3, #2
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800184e:	6878      	ldr	r0, [r7, #4]
 8001850:	f001 ff16 	bl	8003680 <DMA_CalcBaseAndBitshift>
 8001854:	4603      	mov	r3, r0
 8001856:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800185c:	f003 031f 	and.w	r3, r3, #31
 8001860:	2201      	movs	r2, #1
 8001862:	409a      	lsls	r2, r3
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	605a      	str	r2, [r3, #4]
 8001868:	e008      	b.n	800187c <HAL_DMA_Init+0x538>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2240      	movs	r2, #64	@ 0x40
 800186e:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2203      	movs	r2, #3
 8001874:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8001878:	2301      	movs	r3, #1
 800187a:	e0ed      	b.n	8001a58 <HAL_DMA_Init+0x714>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a46      	ldr	r2, [pc, #280]	@ (800199c <HAL_DMA_Init+0x658>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d072      	beq.n	800196c <HAL_DMA_Init+0x628>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a45      	ldr	r2, [pc, #276]	@ (80019a0 <HAL_DMA_Init+0x65c>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d06d      	beq.n	800196c <HAL_DMA_Init+0x628>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a43      	ldr	r2, [pc, #268]	@ (80019a4 <HAL_DMA_Init+0x660>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d068      	beq.n	800196c <HAL_DMA_Init+0x628>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a42      	ldr	r2, [pc, #264]	@ (80019a8 <HAL_DMA_Init+0x664>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d063      	beq.n	800196c <HAL_DMA_Init+0x628>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a40      	ldr	r2, [pc, #256]	@ (80019ac <HAL_DMA_Init+0x668>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d05e      	beq.n	800196c <HAL_DMA_Init+0x628>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a3f      	ldr	r2, [pc, #252]	@ (80019b0 <HAL_DMA_Init+0x66c>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d059      	beq.n	800196c <HAL_DMA_Init+0x628>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a3d      	ldr	r2, [pc, #244]	@ (80019b4 <HAL_DMA_Init+0x670>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d054      	beq.n	800196c <HAL_DMA_Init+0x628>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a3c      	ldr	r2, [pc, #240]	@ (80019b8 <HAL_DMA_Init+0x674>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d04f      	beq.n	800196c <HAL_DMA_Init+0x628>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a3a      	ldr	r2, [pc, #232]	@ (80019bc <HAL_DMA_Init+0x678>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d04a      	beq.n	800196c <HAL_DMA_Init+0x628>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a39      	ldr	r2, [pc, #228]	@ (80019c0 <HAL_DMA_Init+0x67c>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	d045      	beq.n	800196c <HAL_DMA_Init+0x628>
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a37      	ldr	r2, [pc, #220]	@ (80019c4 <HAL_DMA_Init+0x680>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d040      	beq.n	800196c <HAL_DMA_Init+0x628>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4a36      	ldr	r2, [pc, #216]	@ (80019c8 <HAL_DMA_Init+0x684>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d03b      	beq.n	800196c <HAL_DMA_Init+0x628>
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a34      	ldr	r2, [pc, #208]	@ (80019cc <HAL_DMA_Init+0x688>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d036      	beq.n	800196c <HAL_DMA_Init+0x628>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4a33      	ldr	r2, [pc, #204]	@ (80019d0 <HAL_DMA_Init+0x68c>)
 8001904:	4293      	cmp	r3, r2
 8001906:	d031      	beq.n	800196c <HAL_DMA_Init+0x628>
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a31      	ldr	r2, [pc, #196]	@ (80019d4 <HAL_DMA_Init+0x690>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d02c      	beq.n	800196c <HAL_DMA_Init+0x628>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a30      	ldr	r2, [pc, #192]	@ (80019d8 <HAL_DMA_Init+0x694>)
 8001918:	4293      	cmp	r3, r2
 800191a:	d027      	beq.n	800196c <HAL_DMA_Init+0x628>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a13      	ldr	r2, [pc, #76]	@ (8001970 <HAL_DMA_Init+0x62c>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d022      	beq.n	800196c <HAL_DMA_Init+0x628>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a12      	ldr	r2, [pc, #72]	@ (8001974 <HAL_DMA_Init+0x630>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d01d      	beq.n	800196c <HAL_DMA_Init+0x628>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a10      	ldr	r2, [pc, #64]	@ (8001978 <HAL_DMA_Init+0x634>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d018      	beq.n	800196c <HAL_DMA_Init+0x628>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a0f      	ldr	r2, [pc, #60]	@ (800197c <HAL_DMA_Init+0x638>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d013      	beq.n	800196c <HAL_DMA_Init+0x628>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a0d      	ldr	r2, [pc, #52]	@ (8001980 <HAL_DMA_Init+0x63c>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d00e      	beq.n	800196c <HAL_DMA_Init+0x628>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a0c      	ldr	r2, [pc, #48]	@ (8001984 <HAL_DMA_Init+0x640>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d009      	beq.n	800196c <HAL_DMA_Init+0x628>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a0a      	ldr	r2, [pc, #40]	@ (8001988 <HAL_DMA_Init+0x644>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d004      	beq.n	800196c <HAL_DMA_Init+0x628>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a09      	ldr	r2, [pc, #36]	@ (800198c <HAL_DMA_Init+0x648>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d137      	bne.n	80019dc <HAL_DMA_Init+0x698>
 800196c:	2301      	movs	r3, #1
 800196e:	e036      	b.n	80019de <HAL_DMA_Init+0x69a>
 8001970:	58025408 	.word	0x58025408
 8001974:	5802541c 	.word	0x5802541c
 8001978:	58025430 	.word	0x58025430
 800197c:	58025444 	.word	0x58025444
 8001980:	58025458 	.word	0x58025458
 8001984:	5802546c 	.word	0x5802546c
 8001988:	58025480 	.word	0x58025480
 800198c:	58025494 	.word	0x58025494
 8001990:	fffe000f 	.word	0xfffe000f
 8001994:	a7fdabf8 	.word	0xa7fdabf8
 8001998:	cccccccd 	.word	0xcccccccd
 800199c:	40020010 	.word	0x40020010
 80019a0:	40020028 	.word	0x40020028
 80019a4:	40020040 	.word	0x40020040
 80019a8:	40020058 	.word	0x40020058
 80019ac:	40020070 	.word	0x40020070
 80019b0:	40020088 	.word	0x40020088
 80019b4:	400200a0 	.word	0x400200a0
 80019b8:	400200b8 	.word	0x400200b8
 80019bc:	40020410 	.word	0x40020410
 80019c0:	40020428 	.word	0x40020428
 80019c4:	40020440 	.word	0x40020440
 80019c8:	40020458 	.word	0x40020458
 80019cc:	40020470 	.word	0x40020470
 80019d0:	40020488 	.word	0x40020488
 80019d4:	400204a0 	.word	0x400204a0
 80019d8:	400204b8 	.word	0x400204b8
 80019dc:	2300      	movs	r3, #0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d032      	beq.n	8001a48 <HAL_DMA_Init+0x704>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80019e2:	6878      	ldr	r0, [r7, #4]
 80019e4:	f001 ff7a 	bl	80038dc <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	2b80      	cmp	r3, #128	@ 0x80
 80019ee:	d102      	bne.n	80019f6 <HAL_DMA_Init+0x6b2>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2200      	movs	r2, #0
 80019f4:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	685a      	ldr	r2, [r3, #4]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019fe:	b2d2      	uxtb	r2, r2
 8001a00:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001a06:	687a      	ldr	r2, [r7, #4]
 8001a08:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001a0a:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d010      	beq.n	8001a36 <HAL_DMA_Init+0x6f2>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	2b08      	cmp	r3, #8
 8001a1a:	d80c      	bhi.n	8001a36 <HAL_DMA_Init+0x6f2>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001a1c:	6878      	ldr	r0, [r7, #4]
 8001a1e:	f001 fff7 	bl	8003a10 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001a26:	2200      	movs	r2, #0
 8001a28:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a2e:	687a      	ldr	r2, [r7, #4]
 8001a30:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8001a32:	605a      	str	r2, [r3, #4]
 8001a34:	e008      	b.n	8001a48 <HAL_DMA_Init+0x704>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2200      	movs	r2, #0
 8001a3a:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2200      	movs	r2, #0
 8001a40:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2200      	movs	r2, #0
 8001a46:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2201      	movs	r2, #1
 8001a52:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001a56:	2300      	movs	r3, #0
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	3718      	adds	r7, #24
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}

08001a60 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b086      	sub	sp, #24
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	60f8      	str	r0, [r7, #12]
 8001a68:	60b9      	str	r1, [r7, #8]
 8001a6a:	607a      	str	r2, [r7, #4]
 8001a6c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d101      	bne.n	8001a7c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e226      	b.n	8001eca <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001a82:	2b01      	cmp	r3, #1
 8001a84:	d101      	bne.n	8001a8a <HAL_DMA_Start_IT+0x2a>
 8001a86:	2302      	movs	r3, #2
 8001a88:	e21f      	b.n	8001eca <HAL_DMA_Start_IT+0x46a>
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	2b01      	cmp	r3, #1
 8001a9c:	f040 820a 	bne.w	8001eb4 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	2202      	movs	r2, #2
 8001aa4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	2200      	movs	r2, #0
 8001aac:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a68      	ldr	r2, [pc, #416]	@ (8001c54 <HAL_DMA_Start_IT+0x1f4>)
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d04a      	beq.n	8001b4e <HAL_DMA_Start_IT+0xee>
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a66      	ldr	r2, [pc, #408]	@ (8001c58 <HAL_DMA_Start_IT+0x1f8>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d045      	beq.n	8001b4e <HAL_DMA_Start_IT+0xee>
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a65      	ldr	r2, [pc, #404]	@ (8001c5c <HAL_DMA_Start_IT+0x1fc>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d040      	beq.n	8001b4e <HAL_DMA_Start_IT+0xee>
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a63      	ldr	r2, [pc, #396]	@ (8001c60 <HAL_DMA_Start_IT+0x200>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d03b      	beq.n	8001b4e <HAL_DMA_Start_IT+0xee>
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a62      	ldr	r2, [pc, #392]	@ (8001c64 <HAL_DMA_Start_IT+0x204>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d036      	beq.n	8001b4e <HAL_DMA_Start_IT+0xee>
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a60      	ldr	r2, [pc, #384]	@ (8001c68 <HAL_DMA_Start_IT+0x208>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d031      	beq.n	8001b4e <HAL_DMA_Start_IT+0xee>
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a5f      	ldr	r2, [pc, #380]	@ (8001c6c <HAL_DMA_Start_IT+0x20c>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d02c      	beq.n	8001b4e <HAL_DMA_Start_IT+0xee>
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a5d      	ldr	r2, [pc, #372]	@ (8001c70 <HAL_DMA_Start_IT+0x210>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d027      	beq.n	8001b4e <HAL_DMA_Start_IT+0xee>
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a5c      	ldr	r2, [pc, #368]	@ (8001c74 <HAL_DMA_Start_IT+0x214>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d022      	beq.n	8001b4e <HAL_DMA_Start_IT+0xee>
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a5a      	ldr	r2, [pc, #360]	@ (8001c78 <HAL_DMA_Start_IT+0x218>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d01d      	beq.n	8001b4e <HAL_DMA_Start_IT+0xee>
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a59      	ldr	r2, [pc, #356]	@ (8001c7c <HAL_DMA_Start_IT+0x21c>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d018      	beq.n	8001b4e <HAL_DMA_Start_IT+0xee>
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a57      	ldr	r2, [pc, #348]	@ (8001c80 <HAL_DMA_Start_IT+0x220>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d013      	beq.n	8001b4e <HAL_DMA_Start_IT+0xee>
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a56      	ldr	r2, [pc, #344]	@ (8001c84 <HAL_DMA_Start_IT+0x224>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d00e      	beq.n	8001b4e <HAL_DMA_Start_IT+0xee>
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a54      	ldr	r2, [pc, #336]	@ (8001c88 <HAL_DMA_Start_IT+0x228>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d009      	beq.n	8001b4e <HAL_DMA_Start_IT+0xee>
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a53      	ldr	r2, [pc, #332]	@ (8001c8c <HAL_DMA_Start_IT+0x22c>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d004      	beq.n	8001b4e <HAL_DMA_Start_IT+0xee>
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a51      	ldr	r2, [pc, #324]	@ (8001c90 <HAL_DMA_Start_IT+0x230>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d108      	bne.n	8001b60 <HAL_DMA_Start_IT+0x100>
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f022 0201 	bic.w	r2, r2, #1
 8001b5c:	601a      	str	r2, [r3, #0]
 8001b5e:	e007      	b.n	8001b70 <HAL_DMA_Start_IT+0x110>
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f022 0201 	bic.w	r2, r2, #1
 8001b6e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	687a      	ldr	r2, [r7, #4]
 8001b74:	68b9      	ldr	r1, [r7, #8]
 8001b76:	68f8      	ldr	r0, [r7, #12]
 8001b78:	f001 fb9e 	bl	80032b8 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a34      	ldr	r2, [pc, #208]	@ (8001c54 <HAL_DMA_Start_IT+0x1f4>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d04a      	beq.n	8001c1c <HAL_DMA_Start_IT+0x1bc>
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a33      	ldr	r2, [pc, #204]	@ (8001c58 <HAL_DMA_Start_IT+0x1f8>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d045      	beq.n	8001c1c <HAL_DMA_Start_IT+0x1bc>
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a31      	ldr	r2, [pc, #196]	@ (8001c5c <HAL_DMA_Start_IT+0x1fc>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d040      	beq.n	8001c1c <HAL_DMA_Start_IT+0x1bc>
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a30      	ldr	r2, [pc, #192]	@ (8001c60 <HAL_DMA_Start_IT+0x200>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d03b      	beq.n	8001c1c <HAL_DMA_Start_IT+0x1bc>
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a2e      	ldr	r2, [pc, #184]	@ (8001c64 <HAL_DMA_Start_IT+0x204>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d036      	beq.n	8001c1c <HAL_DMA_Start_IT+0x1bc>
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a2d      	ldr	r2, [pc, #180]	@ (8001c68 <HAL_DMA_Start_IT+0x208>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d031      	beq.n	8001c1c <HAL_DMA_Start_IT+0x1bc>
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a2b      	ldr	r2, [pc, #172]	@ (8001c6c <HAL_DMA_Start_IT+0x20c>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d02c      	beq.n	8001c1c <HAL_DMA_Start_IT+0x1bc>
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a2a      	ldr	r2, [pc, #168]	@ (8001c70 <HAL_DMA_Start_IT+0x210>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d027      	beq.n	8001c1c <HAL_DMA_Start_IT+0x1bc>
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a28      	ldr	r2, [pc, #160]	@ (8001c74 <HAL_DMA_Start_IT+0x214>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d022      	beq.n	8001c1c <HAL_DMA_Start_IT+0x1bc>
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a27      	ldr	r2, [pc, #156]	@ (8001c78 <HAL_DMA_Start_IT+0x218>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d01d      	beq.n	8001c1c <HAL_DMA_Start_IT+0x1bc>
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a25      	ldr	r2, [pc, #148]	@ (8001c7c <HAL_DMA_Start_IT+0x21c>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d018      	beq.n	8001c1c <HAL_DMA_Start_IT+0x1bc>
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a24      	ldr	r2, [pc, #144]	@ (8001c80 <HAL_DMA_Start_IT+0x220>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d013      	beq.n	8001c1c <HAL_DMA_Start_IT+0x1bc>
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a22      	ldr	r2, [pc, #136]	@ (8001c84 <HAL_DMA_Start_IT+0x224>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d00e      	beq.n	8001c1c <HAL_DMA_Start_IT+0x1bc>
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a21      	ldr	r2, [pc, #132]	@ (8001c88 <HAL_DMA_Start_IT+0x228>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d009      	beq.n	8001c1c <HAL_DMA_Start_IT+0x1bc>
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a1f      	ldr	r2, [pc, #124]	@ (8001c8c <HAL_DMA_Start_IT+0x22c>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d004      	beq.n	8001c1c <HAL_DMA_Start_IT+0x1bc>
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a1e      	ldr	r2, [pc, #120]	@ (8001c90 <HAL_DMA_Start_IT+0x230>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d101      	bne.n	8001c20 <HAL_DMA_Start_IT+0x1c0>
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	e000      	b.n	8001c22 <HAL_DMA_Start_IT+0x1c2>
 8001c20:	2300      	movs	r3, #0
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d036      	beq.n	8001c94 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f023 021e 	bic.w	r2, r3, #30
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f042 0216 	orr.w	r2, r2, #22
 8001c38:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d03e      	beq.n	8001cc0 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f042 0208 	orr.w	r2, r2, #8
 8001c50:	601a      	str	r2, [r3, #0]
 8001c52:	e035      	b.n	8001cc0 <HAL_DMA_Start_IT+0x260>
 8001c54:	40020010 	.word	0x40020010
 8001c58:	40020028 	.word	0x40020028
 8001c5c:	40020040 	.word	0x40020040
 8001c60:	40020058 	.word	0x40020058
 8001c64:	40020070 	.word	0x40020070
 8001c68:	40020088 	.word	0x40020088
 8001c6c:	400200a0 	.word	0x400200a0
 8001c70:	400200b8 	.word	0x400200b8
 8001c74:	40020410 	.word	0x40020410
 8001c78:	40020428 	.word	0x40020428
 8001c7c:	40020440 	.word	0x40020440
 8001c80:	40020458 	.word	0x40020458
 8001c84:	40020470 	.word	0x40020470
 8001c88:	40020488 	.word	0x40020488
 8001c8c:	400204a0 	.word	0x400204a0
 8001c90:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f023 020e 	bic.w	r2, r3, #14
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f042 020a 	orr.w	r2, r2, #10
 8001ca6:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d007      	beq.n	8001cc0 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f042 0204 	orr.w	r2, r2, #4
 8001cbe:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a83      	ldr	r2, [pc, #524]	@ (8001ed4 <HAL_DMA_Start_IT+0x474>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d072      	beq.n	8001db0 <HAL_DMA_Start_IT+0x350>
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a82      	ldr	r2, [pc, #520]	@ (8001ed8 <HAL_DMA_Start_IT+0x478>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d06d      	beq.n	8001db0 <HAL_DMA_Start_IT+0x350>
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a80      	ldr	r2, [pc, #512]	@ (8001edc <HAL_DMA_Start_IT+0x47c>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d068      	beq.n	8001db0 <HAL_DMA_Start_IT+0x350>
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a7f      	ldr	r2, [pc, #508]	@ (8001ee0 <HAL_DMA_Start_IT+0x480>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d063      	beq.n	8001db0 <HAL_DMA_Start_IT+0x350>
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a7d      	ldr	r2, [pc, #500]	@ (8001ee4 <HAL_DMA_Start_IT+0x484>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d05e      	beq.n	8001db0 <HAL_DMA_Start_IT+0x350>
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a7c      	ldr	r2, [pc, #496]	@ (8001ee8 <HAL_DMA_Start_IT+0x488>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d059      	beq.n	8001db0 <HAL_DMA_Start_IT+0x350>
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a7a      	ldr	r2, [pc, #488]	@ (8001eec <HAL_DMA_Start_IT+0x48c>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d054      	beq.n	8001db0 <HAL_DMA_Start_IT+0x350>
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a79      	ldr	r2, [pc, #484]	@ (8001ef0 <HAL_DMA_Start_IT+0x490>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d04f      	beq.n	8001db0 <HAL_DMA_Start_IT+0x350>
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a77      	ldr	r2, [pc, #476]	@ (8001ef4 <HAL_DMA_Start_IT+0x494>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d04a      	beq.n	8001db0 <HAL_DMA_Start_IT+0x350>
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a76      	ldr	r2, [pc, #472]	@ (8001ef8 <HAL_DMA_Start_IT+0x498>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d045      	beq.n	8001db0 <HAL_DMA_Start_IT+0x350>
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a74      	ldr	r2, [pc, #464]	@ (8001efc <HAL_DMA_Start_IT+0x49c>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d040      	beq.n	8001db0 <HAL_DMA_Start_IT+0x350>
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a73      	ldr	r2, [pc, #460]	@ (8001f00 <HAL_DMA_Start_IT+0x4a0>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d03b      	beq.n	8001db0 <HAL_DMA_Start_IT+0x350>
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a71      	ldr	r2, [pc, #452]	@ (8001f04 <HAL_DMA_Start_IT+0x4a4>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d036      	beq.n	8001db0 <HAL_DMA_Start_IT+0x350>
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a70      	ldr	r2, [pc, #448]	@ (8001f08 <HAL_DMA_Start_IT+0x4a8>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d031      	beq.n	8001db0 <HAL_DMA_Start_IT+0x350>
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a6e      	ldr	r2, [pc, #440]	@ (8001f0c <HAL_DMA_Start_IT+0x4ac>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d02c      	beq.n	8001db0 <HAL_DMA_Start_IT+0x350>
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a6d      	ldr	r2, [pc, #436]	@ (8001f10 <HAL_DMA_Start_IT+0x4b0>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d027      	beq.n	8001db0 <HAL_DMA_Start_IT+0x350>
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a6b      	ldr	r2, [pc, #428]	@ (8001f14 <HAL_DMA_Start_IT+0x4b4>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d022      	beq.n	8001db0 <HAL_DMA_Start_IT+0x350>
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a6a      	ldr	r2, [pc, #424]	@ (8001f18 <HAL_DMA_Start_IT+0x4b8>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d01d      	beq.n	8001db0 <HAL_DMA_Start_IT+0x350>
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a68      	ldr	r2, [pc, #416]	@ (8001f1c <HAL_DMA_Start_IT+0x4bc>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d018      	beq.n	8001db0 <HAL_DMA_Start_IT+0x350>
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a67      	ldr	r2, [pc, #412]	@ (8001f20 <HAL_DMA_Start_IT+0x4c0>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d013      	beq.n	8001db0 <HAL_DMA_Start_IT+0x350>
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a65      	ldr	r2, [pc, #404]	@ (8001f24 <HAL_DMA_Start_IT+0x4c4>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d00e      	beq.n	8001db0 <HAL_DMA_Start_IT+0x350>
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a64      	ldr	r2, [pc, #400]	@ (8001f28 <HAL_DMA_Start_IT+0x4c8>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d009      	beq.n	8001db0 <HAL_DMA_Start_IT+0x350>
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a62      	ldr	r2, [pc, #392]	@ (8001f2c <HAL_DMA_Start_IT+0x4cc>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d004      	beq.n	8001db0 <HAL_DMA_Start_IT+0x350>
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a61      	ldr	r2, [pc, #388]	@ (8001f30 <HAL_DMA_Start_IT+0x4d0>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d101      	bne.n	8001db4 <HAL_DMA_Start_IT+0x354>
 8001db0:	2301      	movs	r3, #1
 8001db2:	e000      	b.n	8001db6 <HAL_DMA_Start_IT+0x356>
 8001db4:	2300      	movs	r3, #0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d01a      	beq.n	8001df0 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d007      	beq.n	8001dd8 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001dd2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001dd6:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d007      	beq.n	8001df0 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001dea:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001dee:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a37      	ldr	r2, [pc, #220]	@ (8001ed4 <HAL_DMA_Start_IT+0x474>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d04a      	beq.n	8001e90 <HAL_DMA_Start_IT+0x430>
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a36      	ldr	r2, [pc, #216]	@ (8001ed8 <HAL_DMA_Start_IT+0x478>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d045      	beq.n	8001e90 <HAL_DMA_Start_IT+0x430>
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a34      	ldr	r2, [pc, #208]	@ (8001edc <HAL_DMA_Start_IT+0x47c>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d040      	beq.n	8001e90 <HAL_DMA_Start_IT+0x430>
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a33      	ldr	r2, [pc, #204]	@ (8001ee0 <HAL_DMA_Start_IT+0x480>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d03b      	beq.n	8001e90 <HAL_DMA_Start_IT+0x430>
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a31      	ldr	r2, [pc, #196]	@ (8001ee4 <HAL_DMA_Start_IT+0x484>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d036      	beq.n	8001e90 <HAL_DMA_Start_IT+0x430>
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a30      	ldr	r2, [pc, #192]	@ (8001ee8 <HAL_DMA_Start_IT+0x488>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d031      	beq.n	8001e90 <HAL_DMA_Start_IT+0x430>
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a2e      	ldr	r2, [pc, #184]	@ (8001eec <HAL_DMA_Start_IT+0x48c>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d02c      	beq.n	8001e90 <HAL_DMA_Start_IT+0x430>
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a2d      	ldr	r2, [pc, #180]	@ (8001ef0 <HAL_DMA_Start_IT+0x490>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d027      	beq.n	8001e90 <HAL_DMA_Start_IT+0x430>
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a2b      	ldr	r2, [pc, #172]	@ (8001ef4 <HAL_DMA_Start_IT+0x494>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d022      	beq.n	8001e90 <HAL_DMA_Start_IT+0x430>
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a2a      	ldr	r2, [pc, #168]	@ (8001ef8 <HAL_DMA_Start_IT+0x498>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d01d      	beq.n	8001e90 <HAL_DMA_Start_IT+0x430>
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a28      	ldr	r2, [pc, #160]	@ (8001efc <HAL_DMA_Start_IT+0x49c>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d018      	beq.n	8001e90 <HAL_DMA_Start_IT+0x430>
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a27      	ldr	r2, [pc, #156]	@ (8001f00 <HAL_DMA_Start_IT+0x4a0>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d013      	beq.n	8001e90 <HAL_DMA_Start_IT+0x430>
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a25      	ldr	r2, [pc, #148]	@ (8001f04 <HAL_DMA_Start_IT+0x4a4>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d00e      	beq.n	8001e90 <HAL_DMA_Start_IT+0x430>
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a24      	ldr	r2, [pc, #144]	@ (8001f08 <HAL_DMA_Start_IT+0x4a8>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d009      	beq.n	8001e90 <HAL_DMA_Start_IT+0x430>
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a22      	ldr	r2, [pc, #136]	@ (8001f0c <HAL_DMA_Start_IT+0x4ac>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d004      	beq.n	8001e90 <HAL_DMA_Start_IT+0x430>
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a21      	ldr	r2, [pc, #132]	@ (8001f10 <HAL_DMA_Start_IT+0x4b0>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d108      	bne.n	8001ea2 <HAL_DMA_Start_IT+0x442>
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f042 0201 	orr.w	r2, r2, #1
 8001e9e:	601a      	str	r2, [r3, #0]
 8001ea0:	e012      	b.n	8001ec8 <HAL_DMA_Start_IT+0x468>
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f042 0201 	orr.w	r2, r2, #1
 8001eb0:	601a      	str	r2, [r3, #0]
 8001eb2:	e009      	b.n	8001ec8 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001eba:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8001ec8:	7dfb      	ldrb	r3, [r7, #23]
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3718      	adds	r7, #24
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	40020010 	.word	0x40020010
 8001ed8:	40020028 	.word	0x40020028
 8001edc:	40020040 	.word	0x40020040
 8001ee0:	40020058 	.word	0x40020058
 8001ee4:	40020070 	.word	0x40020070
 8001ee8:	40020088 	.word	0x40020088
 8001eec:	400200a0 	.word	0x400200a0
 8001ef0:	400200b8 	.word	0x400200b8
 8001ef4:	40020410 	.word	0x40020410
 8001ef8:	40020428 	.word	0x40020428
 8001efc:	40020440 	.word	0x40020440
 8001f00:	40020458 	.word	0x40020458
 8001f04:	40020470 	.word	0x40020470
 8001f08:	40020488 	.word	0x40020488
 8001f0c:	400204a0 	.word	0x400204a0
 8001f10:	400204b8 	.word	0x400204b8
 8001f14:	58025408 	.word	0x58025408
 8001f18:	5802541c 	.word	0x5802541c
 8001f1c:	58025430 	.word	0x58025430
 8001f20:	58025444 	.word	0x58025444
 8001f24:	58025458 	.word	0x58025458
 8001f28:	5802546c 	.word	0x5802546c
 8001f2c:	58025480 	.word	0x58025480
 8001f30:	58025494 	.word	0x58025494

08001f34 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b084      	sub	sp, #16
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d101      	bne.n	8001f46 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	e237      	b.n	80023b6 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	2b02      	cmp	r3, #2
 8001f50:	d004      	beq.n	8001f5c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2280      	movs	r2, #128	@ 0x80
 8001f56:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	e22c      	b.n	80023b6 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a5c      	ldr	r2, [pc, #368]	@ (80020d4 <HAL_DMA_Abort_IT+0x1a0>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d04a      	beq.n	8001ffc <HAL_DMA_Abort_IT+0xc8>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a5b      	ldr	r2, [pc, #364]	@ (80020d8 <HAL_DMA_Abort_IT+0x1a4>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d045      	beq.n	8001ffc <HAL_DMA_Abort_IT+0xc8>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a59      	ldr	r2, [pc, #356]	@ (80020dc <HAL_DMA_Abort_IT+0x1a8>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d040      	beq.n	8001ffc <HAL_DMA_Abort_IT+0xc8>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a58      	ldr	r2, [pc, #352]	@ (80020e0 <HAL_DMA_Abort_IT+0x1ac>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d03b      	beq.n	8001ffc <HAL_DMA_Abort_IT+0xc8>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a56      	ldr	r2, [pc, #344]	@ (80020e4 <HAL_DMA_Abort_IT+0x1b0>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d036      	beq.n	8001ffc <HAL_DMA_Abort_IT+0xc8>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a55      	ldr	r2, [pc, #340]	@ (80020e8 <HAL_DMA_Abort_IT+0x1b4>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d031      	beq.n	8001ffc <HAL_DMA_Abort_IT+0xc8>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a53      	ldr	r2, [pc, #332]	@ (80020ec <HAL_DMA_Abort_IT+0x1b8>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d02c      	beq.n	8001ffc <HAL_DMA_Abort_IT+0xc8>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a52      	ldr	r2, [pc, #328]	@ (80020f0 <HAL_DMA_Abort_IT+0x1bc>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d027      	beq.n	8001ffc <HAL_DMA_Abort_IT+0xc8>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a50      	ldr	r2, [pc, #320]	@ (80020f4 <HAL_DMA_Abort_IT+0x1c0>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d022      	beq.n	8001ffc <HAL_DMA_Abort_IT+0xc8>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a4f      	ldr	r2, [pc, #316]	@ (80020f8 <HAL_DMA_Abort_IT+0x1c4>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d01d      	beq.n	8001ffc <HAL_DMA_Abort_IT+0xc8>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a4d      	ldr	r2, [pc, #308]	@ (80020fc <HAL_DMA_Abort_IT+0x1c8>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d018      	beq.n	8001ffc <HAL_DMA_Abort_IT+0xc8>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a4c      	ldr	r2, [pc, #304]	@ (8002100 <HAL_DMA_Abort_IT+0x1cc>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d013      	beq.n	8001ffc <HAL_DMA_Abort_IT+0xc8>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a4a      	ldr	r2, [pc, #296]	@ (8002104 <HAL_DMA_Abort_IT+0x1d0>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d00e      	beq.n	8001ffc <HAL_DMA_Abort_IT+0xc8>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a49      	ldr	r2, [pc, #292]	@ (8002108 <HAL_DMA_Abort_IT+0x1d4>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d009      	beq.n	8001ffc <HAL_DMA_Abort_IT+0xc8>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a47      	ldr	r2, [pc, #284]	@ (800210c <HAL_DMA_Abort_IT+0x1d8>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d004      	beq.n	8001ffc <HAL_DMA_Abort_IT+0xc8>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a46      	ldr	r2, [pc, #280]	@ (8002110 <HAL_DMA_Abort_IT+0x1dc>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d101      	bne.n	8002000 <HAL_DMA_Abort_IT+0xcc>
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e000      	b.n	8002002 <HAL_DMA_Abort_IT+0xce>
 8002000:	2300      	movs	r3, #0
 8002002:	2b00      	cmp	r3, #0
 8002004:	f000 8086 	beq.w	8002114 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2204      	movs	r2, #4
 800200c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a2f      	ldr	r2, [pc, #188]	@ (80020d4 <HAL_DMA_Abort_IT+0x1a0>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d04a      	beq.n	80020b0 <HAL_DMA_Abort_IT+0x17c>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a2e      	ldr	r2, [pc, #184]	@ (80020d8 <HAL_DMA_Abort_IT+0x1a4>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d045      	beq.n	80020b0 <HAL_DMA_Abort_IT+0x17c>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a2c      	ldr	r2, [pc, #176]	@ (80020dc <HAL_DMA_Abort_IT+0x1a8>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d040      	beq.n	80020b0 <HAL_DMA_Abort_IT+0x17c>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a2b      	ldr	r2, [pc, #172]	@ (80020e0 <HAL_DMA_Abort_IT+0x1ac>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d03b      	beq.n	80020b0 <HAL_DMA_Abort_IT+0x17c>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a29      	ldr	r2, [pc, #164]	@ (80020e4 <HAL_DMA_Abort_IT+0x1b0>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d036      	beq.n	80020b0 <HAL_DMA_Abort_IT+0x17c>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a28      	ldr	r2, [pc, #160]	@ (80020e8 <HAL_DMA_Abort_IT+0x1b4>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d031      	beq.n	80020b0 <HAL_DMA_Abort_IT+0x17c>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a26      	ldr	r2, [pc, #152]	@ (80020ec <HAL_DMA_Abort_IT+0x1b8>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d02c      	beq.n	80020b0 <HAL_DMA_Abort_IT+0x17c>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a25      	ldr	r2, [pc, #148]	@ (80020f0 <HAL_DMA_Abort_IT+0x1bc>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d027      	beq.n	80020b0 <HAL_DMA_Abort_IT+0x17c>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a23      	ldr	r2, [pc, #140]	@ (80020f4 <HAL_DMA_Abort_IT+0x1c0>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d022      	beq.n	80020b0 <HAL_DMA_Abort_IT+0x17c>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a22      	ldr	r2, [pc, #136]	@ (80020f8 <HAL_DMA_Abort_IT+0x1c4>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d01d      	beq.n	80020b0 <HAL_DMA_Abort_IT+0x17c>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a20      	ldr	r2, [pc, #128]	@ (80020fc <HAL_DMA_Abort_IT+0x1c8>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d018      	beq.n	80020b0 <HAL_DMA_Abort_IT+0x17c>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a1f      	ldr	r2, [pc, #124]	@ (8002100 <HAL_DMA_Abort_IT+0x1cc>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d013      	beq.n	80020b0 <HAL_DMA_Abort_IT+0x17c>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a1d      	ldr	r2, [pc, #116]	@ (8002104 <HAL_DMA_Abort_IT+0x1d0>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d00e      	beq.n	80020b0 <HAL_DMA_Abort_IT+0x17c>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a1c      	ldr	r2, [pc, #112]	@ (8002108 <HAL_DMA_Abort_IT+0x1d4>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d009      	beq.n	80020b0 <HAL_DMA_Abort_IT+0x17c>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a1a      	ldr	r2, [pc, #104]	@ (800210c <HAL_DMA_Abort_IT+0x1d8>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d004      	beq.n	80020b0 <HAL_DMA_Abort_IT+0x17c>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a19      	ldr	r2, [pc, #100]	@ (8002110 <HAL_DMA_Abort_IT+0x1dc>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d108      	bne.n	80020c2 <HAL_DMA_Abort_IT+0x18e>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f022 0201 	bic.w	r2, r2, #1
 80020be:	601a      	str	r2, [r3, #0]
 80020c0:	e178      	b.n	80023b4 <HAL_DMA_Abort_IT+0x480>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f022 0201 	bic.w	r2, r2, #1
 80020d0:	601a      	str	r2, [r3, #0]
 80020d2:	e16f      	b.n	80023b4 <HAL_DMA_Abort_IT+0x480>
 80020d4:	40020010 	.word	0x40020010
 80020d8:	40020028 	.word	0x40020028
 80020dc:	40020040 	.word	0x40020040
 80020e0:	40020058 	.word	0x40020058
 80020e4:	40020070 	.word	0x40020070
 80020e8:	40020088 	.word	0x40020088
 80020ec:	400200a0 	.word	0x400200a0
 80020f0:	400200b8 	.word	0x400200b8
 80020f4:	40020410 	.word	0x40020410
 80020f8:	40020428 	.word	0x40020428
 80020fc:	40020440 	.word	0x40020440
 8002100:	40020458 	.word	0x40020458
 8002104:	40020470 	.word	0x40020470
 8002108:	40020488 	.word	0x40020488
 800210c:	400204a0 	.word	0x400204a0
 8002110:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f022 020e 	bic.w	r2, r2, #14
 8002122:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a6c      	ldr	r2, [pc, #432]	@ (80022dc <HAL_DMA_Abort_IT+0x3a8>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d04a      	beq.n	80021c4 <HAL_DMA_Abort_IT+0x290>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a6b      	ldr	r2, [pc, #428]	@ (80022e0 <HAL_DMA_Abort_IT+0x3ac>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d045      	beq.n	80021c4 <HAL_DMA_Abort_IT+0x290>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a69      	ldr	r2, [pc, #420]	@ (80022e4 <HAL_DMA_Abort_IT+0x3b0>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d040      	beq.n	80021c4 <HAL_DMA_Abort_IT+0x290>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a68      	ldr	r2, [pc, #416]	@ (80022e8 <HAL_DMA_Abort_IT+0x3b4>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d03b      	beq.n	80021c4 <HAL_DMA_Abort_IT+0x290>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a66      	ldr	r2, [pc, #408]	@ (80022ec <HAL_DMA_Abort_IT+0x3b8>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d036      	beq.n	80021c4 <HAL_DMA_Abort_IT+0x290>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a65      	ldr	r2, [pc, #404]	@ (80022f0 <HAL_DMA_Abort_IT+0x3bc>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d031      	beq.n	80021c4 <HAL_DMA_Abort_IT+0x290>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a63      	ldr	r2, [pc, #396]	@ (80022f4 <HAL_DMA_Abort_IT+0x3c0>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d02c      	beq.n	80021c4 <HAL_DMA_Abort_IT+0x290>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a62      	ldr	r2, [pc, #392]	@ (80022f8 <HAL_DMA_Abort_IT+0x3c4>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d027      	beq.n	80021c4 <HAL_DMA_Abort_IT+0x290>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a60      	ldr	r2, [pc, #384]	@ (80022fc <HAL_DMA_Abort_IT+0x3c8>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d022      	beq.n	80021c4 <HAL_DMA_Abort_IT+0x290>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a5f      	ldr	r2, [pc, #380]	@ (8002300 <HAL_DMA_Abort_IT+0x3cc>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d01d      	beq.n	80021c4 <HAL_DMA_Abort_IT+0x290>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a5d      	ldr	r2, [pc, #372]	@ (8002304 <HAL_DMA_Abort_IT+0x3d0>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d018      	beq.n	80021c4 <HAL_DMA_Abort_IT+0x290>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a5c      	ldr	r2, [pc, #368]	@ (8002308 <HAL_DMA_Abort_IT+0x3d4>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d013      	beq.n	80021c4 <HAL_DMA_Abort_IT+0x290>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a5a      	ldr	r2, [pc, #360]	@ (800230c <HAL_DMA_Abort_IT+0x3d8>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d00e      	beq.n	80021c4 <HAL_DMA_Abort_IT+0x290>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a59      	ldr	r2, [pc, #356]	@ (8002310 <HAL_DMA_Abort_IT+0x3dc>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d009      	beq.n	80021c4 <HAL_DMA_Abort_IT+0x290>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a57      	ldr	r2, [pc, #348]	@ (8002314 <HAL_DMA_Abort_IT+0x3e0>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d004      	beq.n	80021c4 <HAL_DMA_Abort_IT+0x290>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a56      	ldr	r2, [pc, #344]	@ (8002318 <HAL_DMA_Abort_IT+0x3e4>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d108      	bne.n	80021d6 <HAL_DMA_Abort_IT+0x2a2>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f022 0201 	bic.w	r2, r2, #1
 80021d2:	601a      	str	r2, [r3, #0]
 80021d4:	e007      	b.n	80021e6 <HAL_DMA_Abort_IT+0x2b2>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f022 0201 	bic.w	r2, r2, #1
 80021e4:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a3c      	ldr	r2, [pc, #240]	@ (80022dc <HAL_DMA_Abort_IT+0x3a8>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d072      	beq.n	80022d6 <HAL_DMA_Abort_IT+0x3a2>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a3a      	ldr	r2, [pc, #232]	@ (80022e0 <HAL_DMA_Abort_IT+0x3ac>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d06d      	beq.n	80022d6 <HAL_DMA_Abort_IT+0x3a2>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a39      	ldr	r2, [pc, #228]	@ (80022e4 <HAL_DMA_Abort_IT+0x3b0>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d068      	beq.n	80022d6 <HAL_DMA_Abort_IT+0x3a2>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a37      	ldr	r2, [pc, #220]	@ (80022e8 <HAL_DMA_Abort_IT+0x3b4>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d063      	beq.n	80022d6 <HAL_DMA_Abort_IT+0x3a2>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a36      	ldr	r2, [pc, #216]	@ (80022ec <HAL_DMA_Abort_IT+0x3b8>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d05e      	beq.n	80022d6 <HAL_DMA_Abort_IT+0x3a2>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a34      	ldr	r2, [pc, #208]	@ (80022f0 <HAL_DMA_Abort_IT+0x3bc>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d059      	beq.n	80022d6 <HAL_DMA_Abort_IT+0x3a2>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a33      	ldr	r2, [pc, #204]	@ (80022f4 <HAL_DMA_Abort_IT+0x3c0>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d054      	beq.n	80022d6 <HAL_DMA_Abort_IT+0x3a2>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a31      	ldr	r2, [pc, #196]	@ (80022f8 <HAL_DMA_Abort_IT+0x3c4>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d04f      	beq.n	80022d6 <HAL_DMA_Abort_IT+0x3a2>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a30      	ldr	r2, [pc, #192]	@ (80022fc <HAL_DMA_Abort_IT+0x3c8>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d04a      	beq.n	80022d6 <HAL_DMA_Abort_IT+0x3a2>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a2e      	ldr	r2, [pc, #184]	@ (8002300 <HAL_DMA_Abort_IT+0x3cc>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d045      	beq.n	80022d6 <HAL_DMA_Abort_IT+0x3a2>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a2d      	ldr	r2, [pc, #180]	@ (8002304 <HAL_DMA_Abort_IT+0x3d0>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d040      	beq.n	80022d6 <HAL_DMA_Abort_IT+0x3a2>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a2b      	ldr	r2, [pc, #172]	@ (8002308 <HAL_DMA_Abort_IT+0x3d4>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d03b      	beq.n	80022d6 <HAL_DMA_Abort_IT+0x3a2>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a2a      	ldr	r2, [pc, #168]	@ (800230c <HAL_DMA_Abort_IT+0x3d8>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d036      	beq.n	80022d6 <HAL_DMA_Abort_IT+0x3a2>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a28      	ldr	r2, [pc, #160]	@ (8002310 <HAL_DMA_Abort_IT+0x3dc>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d031      	beq.n	80022d6 <HAL_DMA_Abort_IT+0x3a2>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a27      	ldr	r2, [pc, #156]	@ (8002314 <HAL_DMA_Abort_IT+0x3e0>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d02c      	beq.n	80022d6 <HAL_DMA_Abort_IT+0x3a2>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a25      	ldr	r2, [pc, #148]	@ (8002318 <HAL_DMA_Abort_IT+0x3e4>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d027      	beq.n	80022d6 <HAL_DMA_Abort_IT+0x3a2>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a24      	ldr	r2, [pc, #144]	@ (800231c <HAL_DMA_Abort_IT+0x3e8>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d022      	beq.n	80022d6 <HAL_DMA_Abort_IT+0x3a2>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a22      	ldr	r2, [pc, #136]	@ (8002320 <HAL_DMA_Abort_IT+0x3ec>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d01d      	beq.n	80022d6 <HAL_DMA_Abort_IT+0x3a2>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a21      	ldr	r2, [pc, #132]	@ (8002324 <HAL_DMA_Abort_IT+0x3f0>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d018      	beq.n	80022d6 <HAL_DMA_Abort_IT+0x3a2>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a1f      	ldr	r2, [pc, #124]	@ (8002328 <HAL_DMA_Abort_IT+0x3f4>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d013      	beq.n	80022d6 <HAL_DMA_Abort_IT+0x3a2>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a1e      	ldr	r2, [pc, #120]	@ (800232c <HAL_DMA_Abort_IT+0x3f8>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d00e      	beq.n	80022d6 <HAL_DMA_Abort_IT+0x3a2>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a1c      	ldr	r2, [pc, #112]	@ (8002330 <HAL_DMA_Abort_IT+0x3fc>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d009      	beq.n	80022d6 <HAL_DMA_Abort_IT+0x3a2>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a1b      	ldr	r2, [pc, #108]	@ (8002334 <HAL_DMA_Abort_IT+0x400>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d004      	beq.n	80022d6 <HAL_DMA_Abort_IT+0x3a2>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a19      	ldr	r2, [pc, #100]	@ (8002338 <HAL_DMA_Abort_IT+0x404>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d132      	bne.n	800233c <HAL_DMA_Abort_IT+0x408>
 80022d6:	2301      	movs	r3, #1
 80022d8:	e031      	b.n	800233e <HAL_DMA_Abort_IT+0x40a>
 80022da:	bf00      	nop
 80022dc:	40020010 	.word	0x40020010
 80022e0:	40020028 	.word	0x40020028
 80022e4:	40020040 	.word	0x40020040
 80022e8:	40020058 	.word	0x40020058
 80022ec:	40020070 	.word	0x40020070
 80022f0:	40020088 	.word	0x40020088
 80022f4:	400200a0 	.word	0x400200a0
 80022f8:	400200b8 	.word	0x400200b8
 80022fc:	40020410 	.word	0x40020410
 8002300:	40020428 	.word	0x40020428
 8002304:	40020440 	.word	0x40020440
 8002308:	40020458 	.word	0x40020458
 800230c:	40020470 	.word	0x40020470
 8002310:	40020488 	.word	0x40020488
 8002314:	400204a0 	.word	0x400204a0
 8002318:	400204b8 	.word	0x400204b8
 800231c:	58025408 	.word	0x58025408
 8002320:	5802541c 	.word	0x5802541c
 8002324:	58025430 	.word	0x58025430
 8002328:	58025444 	.word	0x58025444
 800232c:	58025458 	.word	0x58025458
 8002330:	5802546c 	.word	0x5802546c
 8002334:	58025480 	.word	0x58025480
 8002338:	58025494 	.word	0x58025494
 800233c:	2300      	movs	r3, #0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d028      	beq.n	8002394 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800234c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002350:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002356:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800235c:	f003 031f 	and.w	r3, r3, #31
 8002360:	2201      	movs	r2, #1
 8002362:	409a      	lsls	r2, r3
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800236c:	687a      	ldr	r2, [r7, #4]
 800236e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002370:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002376:	2b00      	cmp	r3, #0
 8002378:	d00c      	beq.n	8002394 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002384:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002388:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800238e:	687a      	ldr	r2, [r7, #4]
 8002390:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002392:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2201      	movs	r2, #1
 8002398:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2200      	movs	r2, #0
 80023a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d003      	beq.n	80023b4 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80023b0:	6878      	ldr	r0, [r7, #4]
 80023b2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80023b4:	2300      	movs	r3, #0
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3710      	adds	r7, #16
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop

080023c0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b08a      	sub	sp, #40	@ 0x28
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80023c8:	2300      	movs	r3, #0
 80023ca:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80023cc:	4b67      	ldr	r3, [pc, #412]	@ (800256c <HAL_DMA_IRQHandler+0x1ac>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a67      	ldr	r2, [pc, #412]	@ (8002570 <HAL_DMA_IRQHandler+0x1b0>)
 80023d2:	fba2 2303 	umull	r2, r3, r2, r3
 80023d6:	0a9b      	lsrs	r3, r3, #10
 80023d8:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023de:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023e4:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80023e6:	6a3b      	ldr	r3, [r7, #32]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80023ec:	69fb      	ldr	r3, [r7, #28]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a5f      	ldr	r2, [pc, #380]	@ (8002574 <HAL_DMA_IRQHandler+0x1b4>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d04a      	beq.n	8002492 <HAL_DMA_IRQHandler+0xd2>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a5d      	ldr	r2, [pc, #372]	@ (8002578 <HAL_DMA_IRQHandler+0x1b8>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d045      	beq.n	8002492 <HAL_DMA_IRQHandler+0xd2>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a5c      	ldr	r2, [pc, #368]	@ (800257c <HAL_DMA_IRQHandler+0x1bc>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d040      	beq.n	8002492 <HAL_DMA_IRQHandler+0xd2>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a5a      	ldr	r2, [pc, #360]	@ (8002580 <HAL_DMA_IRQHandler+0x1c0>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d03b      	beq.n	8002492 <HAL_DMA_IRQHandler+0xd2>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a59      	ldr	r2, [pc, #356]	@ (8002584 <HAL_DMA_IRQHandler+0x1c4>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d036      	beq.n	8002492 <HAL_DMA_IRQHandler+0xd2>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a57      	ldr	r2, [pc, #348]	@ (8002588 <HAL_DMA_IRQHandler+0x1c8>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d031      	beq.n	8002492 <HAL_DMA_IRQHandler+0xd2>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a56      	ldr	r2, [pc, #344]	@ (800258c <HAL_DMA_IRQHandler+0x1cc>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d02c      	beq.n	8002492 <HAL_DMA_IRQHandler+0xd2>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a54      	ldr	r2, [pc, #336]	@ (8002590 <HAL_DMA_IRQHandler+0x1d0>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d027      	beq.n	8002492 <HAL_DMA_IRQHandler+0xd2>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a53      	ldr	r2, [pc, #332]	@ (8002594 <HAL_DMA_IRQHandler+0x1d4>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d022      	beq.n	8002492 <HAL_DMA_IRQHandler+0xd2>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a51      	ldr	r2, [pc, #324]	@ (8002598 <HAL_DMA_IRQHandler+0x1d8>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d01d      	beq.n	8002492 <HAL_DMA_IRQHandler+0xd2>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a50      	ldr	r2, [pc, #320]	@ (800259c <HAL_DMA_IRQHandler+0x1dc>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d018      	beq.n	8002492 <HAL_DMA_IRQHandler+0xd2>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a4e      	ldr	r2, [pc, #312]	@ (80025a0 <HAL_DMA_IRQHandler+0x1e0>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d013      	beq.n	8002492 <HAL_DMA_IRQHandler+0xd2>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a4d      	ldr	r2, [pc, #308]	@ (80025a4 <HAL_DMA_IRQHandler+0x1e4>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d00e      	beq.n	8002492 <HAL_DMA_IRQHandler+0xd2>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a4b      	ldr	r2, [pc, #300]	@ (80025a8 <HAL_DMA_IRQHandler+0x1e8>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d009      	beq.n	8002492 <HAL_DMA_IRQHandler+0xd2>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a4a      	ldr	r2, [pc, #296]	@ (80025ac <HAL_DMA_IRQHandler+0x1ec>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d004      	beq.n	8002492 <HAL_DMA_IRQHandler+0xd2>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a48      	ldr	r2, [pc, #288]	@ (80025b0 <HAL_DMA_IRQHandler+0x1f0>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d101      	bne.n	8002496 <HAL_DMA_IRQHandler+0xd6>
 8002492:	2301      	movs	r3, #1
 8002494:	e000      	b.n	8002498 <HAL_DMA_IRQHandler+0xd8>
 8002496:	2300      	movs	r3, #0
 8002498:	2b00      	cmp	r3, #0
 800249a:	f000 842b 	beq.w	8002cf4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024a2:	f003 031f 	and.w	r3, r3, #31
 80024a6:	2208      	movs	r2, #8
 80024a8:	409a      	lsls	r2, r3
 80024aa:	69bb      	ldr	r3, [r7, #24]
 80024ac:	4013      	ands	r3, r2
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	f000 80a2 	beq.w	80025f8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a2e      	ldr	r2, [pc, #184]	@ (8002574 <HAL_DMA_IRQHandler+0x1b4>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d04a      	beq.n	8002554 <HAL_DMA_IRQHandler+0x194>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a2d      	ldr	r2, [pc, #180]	@ (8002578 <HAL_DMA_IRQHandler+0x1b8>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d045      	beq.n	8002554 <HAL_DMA_IRQHandler+0x194>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a2b      	ldr	r2, [pc, #172]	@ (800257c <HAL_DMA_IRQHandler+0x1bc>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d040      	beq.n	8002554 <HAL_DMA_IRQHandler+0x194>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a2a      	ldr	r2, [pc, #168]	@ (8002580 <HAL_DMA_IRQHandler+0x1c0>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d03b      	beq.n	8002554 <HAL_DMA_IRQHandler+0x194>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a28      	ldr	r2, [pc, #160]	@ (8002584 <HAL_DMA_IRQHandler+0x1c4>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d036      	beq.n	8002554 <HAL_DMA_IRQHandler+0x194>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a27      	ldr	r2, [pc, #156]	@ (8002588 <HAL_DMA_IRQHandler+0x1c8>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d031      	beq.n	8002554 <HAL_DMA_IRQHandler+0x194>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a25      	ldr	r2, [pc, #148]	@ (800258c <HAL_DMA_IRQHandler+0x1cc>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d02c      	beq.n	8002554 <HAL_DMA_IRQHandler+0x194>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a24      	ldr	r2, [pc, #144]	@ (8002590 <HAL_DMA_IRQHandler+0x1d0>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d027      	beq.n	8002554 <HAL_DMA_IRQHandler+0x194>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a22      	ldr	r2, [pc, #136]	@ (8002594 <HAL_DMA_IRQHandler+0x1d4>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d022      	beq.n	8002554 <HAL_DMA_IRQHandler+0x194>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a21      	ldr	r2, [pc, #132]	@ (8002598 <HAL_DMA_IRQHandler+0x1d8>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d01d      	beq.n	8002554 <HAL_DMA_IRQHandler+0x194>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a1f      	ldr	r2, [pc, #124]	@ (800259c <HAL_DMA_IRQHandler+0x1dc>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d018      	beq.n	8002554 <HAL_DMA_IRQHandler+0x194>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a1e      	ldr	r2, [pc, #120]	@ (80025a0 <HAL_DMA_IRQHandler+0x1e0>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d013      	beq.n	8002554 <HAL_DMA_IRQHandler+0x194>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a1c      	ldr	r2, [pc, #112]	@ (80025a4 <HAL_DMA_IRQHandler+0x1e4>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d00e      	beq.n	8002554 <HAL_DMA_IRQHandler+0x194>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a1b      	ldr	r2, [pc, #108]	@ (80025a8 <HAL_DMA_IRQHandler+0x1e8>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d009      	beq.n	8002554 <HAL_DMA_IRQHandler+0x194>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a19      	ldr	r2, [pc, #100]	@ (80025ac <HAL_DMA_IRQHandler+0x1ec>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d004      	beq.n	8002554 <HAL_DMA_IRQHandler+0x194>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a18      	ldr	r2, [pc, #96]	@ (80025b0 <HAL_DMA_IRQHandler+0x1f0>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d12f      	bne.n	80025b4 <HAL_DMA_IRQHandler+0x1f4>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 0304 	and.w	r3, r3, #4
 800255e:	2b00      	cmp	r3, #0
 8002560:	bf14      	ite	ne
 8002562:	2301      	movne	r3, #1
 8002564:	2300      	moveq	r3, #0
 8002566:	b2db      	uxtb	r3, r3
 8002568:	e02e      	b.n	80025c8 <HAL_DMA_IRQHandler+0x208>
 800256a:	bf00      	nop
 800256c:	24000000 	.word	0x24000000
 8002570:	1b4e81b5 	.word	0x1b4e81b5
 8002574:	40020010 	.word	0x40020010
 8002578:	40020028 	.word	0x40020028
 800257c:	40020040 	.word	0x40020040
 8002580:	40020058 	.word	0x40020058
 8002584:	40020070 	.word	0x40020070
 8002588:	40020088 	.word	0x40020088
 800258c:	400200a0 	.word	0x400200a0
 8002590:	400200b8 	.word	0x400200b8
 8002594:	40020410 	.word	0x40020410
 8002598:	40020428 	.word	0x40020428
 800259c:	40020440 	.word	0x40020440
 80025a0:	40020458 	.word	0x40020458
 80025a4:	40020470 	.word	0x40020470
 80025a8:	40020488 	.word	0x40020488
 80025ac:	400204a0 	.word	0x400204a0
 80025b0:	400204b8 	.word	0x400204b8
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 0308 	and.w	r3, r3, #8
 80025be:	2b00      	cmp	r3, #0
 80025c0:	bf14      	ite	ne
 80025c2:	2301      	movne	r3, #1
 80025c4:	2300      	moveq	r3, #0
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d015      	beq.n	80025f8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f022 0204 	bic.w	r2, r2, #4
 80025da:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025e0:	f003 031f 	and.w	r3, r3, #31
 80025e4:	2208      	movs	r2, #8
 80025e6:	409a      	lsls	r2, r3
 80025e8:	6a3b      	ldr	r3, [r7, #32]
 80025ea:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025f0:	f043 0201 	orr.w	r2, r3, #1
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025fc:	f003 031f 	and.w	r3, r3, #31
 8002600:	69ba      	ldr	r2, [r7, #24]
 8002602:	fa22 f303 	lsr.w	r3, r2, r3
 8002606:	f003 0301 	and.w	r3, r3, #1
 800260a:	2b00      	cmp	r3, #0
 800260c:	d06e      	beq.n	80026ec <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a69      	ldr	r2, [pc, #420]	@ (80027b8 <HAL_DMA_IRQHandler+0x3f8>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d04a      	beq.n	80026ae <HAL_DMA_IRQHandler+0x2ee>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a67      	ldr	r2, [pc, #412]	@ (80027bc <HAL_DMA_IRQHandler+0x3fc>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d045      	beq.n	80026ae <HAL_DMA_IRQHandler+0x2ee>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a66      	ldr	r2, [pc, #408]	@ (80027c0 <HAL_DMA_IRQHandler+0x400>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d040      	beq.n	80026ae <HAL_DMA_IRQHandler+0x2ee>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a64      	ldr	r2, [pc, #400]	@ (80027c4 <HAL_DMA_IRQHandler+0x404>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d03b      	beq.n	80026ae <HAL_DMA_IRQHandler+0x2ee>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a63      	ldr	r2, [pc, #396]	@ (80027c8 <HAL_DMA_IRQHandler+0x408>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d036      	beq.n	80026ae <HAL_DMA_IRQHandler+0x2ee>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a61      	ldr	r2, [pc, #388]	@ (80027cc <HAL_DMA_IRQHandler+0x40c>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d031      	beq.n	80026ae <HAL_DMA_IRQHandler+0x2ee>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a60      	ldr	r2, [pc, #384]	@ (80027d0 <HAL_DMA_IRQHandler+0x410>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d02c      	beq.n	80026ae <HAL_DMA_IRQHandler+0x2ee>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a5e      	ldr	r2, [pc, #376]	@ (80027d4 <HAL_DMA_IRQHandler+0x414>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d027      	beq.n	80026ae <HAL_DMA_IRQHandler+0x2ee>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a5d      	ldr	r2, [pc, #372]	@ (80027d8 <HAL_DMA_IRQHandler+0x418>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d022      	beq.n	80026ae <HAL_DMA_IRQHandler+0x2ee>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a5b      	ldr	r2, [pc, #364]	@ (80027dc <HAL_DMA_IRQHandler+0x41c>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d01d      	beq.n	80026ae <HAL_DMA_IRQHandler+0x2ee>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a5a      	ldr	r2, [pc, #360]	@ (80027e0 <HAL_DMA_IRQHandler+0x420>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d018      	beq.n	80026ae <HAL_DMA_IRQHandler+0x2ee>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a58      	ldr	r2, [pc, #352]	@ (80027e4 <HAL_DMA_IRQHandler+0x424>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d013      	beq.n	80026ae <HAL_DMA_IRQHandler+0x2ee>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a57      	ldr	r2, [pc, #348]	@ (80027e8 <HAL_DMA_IRQHandler+0x428>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d00e      	beq.n	80026ae <HAL_DMA_IRQHandler+0x2ee>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a55      	ldr	r2, [pc, #340]	@ (80027ec <HAL_DMA_IRQHandler+0x42c>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d009      	beq.n	80026ae <HAL_DMA_IRQHandler+0x2ee>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a54      	ldr	r2, [pc, #336]	@ (80027f0 <HAL_DMA_IRQHandler+0x430>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d004      	beq.n	80026ae <HAL_DMA_IRQHandler+0x2ee>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a52      	ldr	r2, [pc, #328]	@ (80027f4 <HAL_DMA_IRQHandler+0x434>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d10a      	bne.n	80026c4 <HAL_DMA_IRQHandler+0x304>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	695b      	ldr	r3, [r3, #20]
 80026b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	bf14      	ite	ne
 80026bc:	2301      	movne	r3, #1
 80026be:	2300      	moveq	r3, #0
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	e003      	b.n	80026cc <HAL_DMA_IRQHandler+0x30c>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	2300      	movs	r3, #0
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d00d      	beq.n	80026ec <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026d4:	f003 031f 	and.w	r3, r3, #31
 80026d8:	2201      	movs	r2, #1
 80026da:	409a      	lsls	r2, r3
 80026dc:	6a3b      	ldr	r3, [r7, #32]
 80026de:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026e4:	f043 0202 	orr.w	r2, r3, #2
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026f0:	f003 031f 	and.w	r3, r3, #31
 80026f4:	2204      	movs	r2, #4
 80026f6:	409a      	lsls	r2, r3
 80026f8:	69bb      	ldr	r3, [r7, #24]
 80026fa:	4013      	ands	r3, r2
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	f000 808f 	beq.w	8002820 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a2c      	ldr	r2, [pc, #176]	@ (80027b8 <HAL_DMA_IRQHandler+0x3f8>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d04a      	beq.n	80027a2 <HAL_DMA_IRQHandler+0x3e2>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a2a      	ldr	r2, [pc, #168]	@ (80027bc <HAL_DMA_IRQHandler+0x3fc>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d045      	beq.n	80027a2 <HAL_DMA_IRQHandler+0x3e2>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a29      	ldr	r2, [pc, #164]	@ (80027c0 <HAL_DMA_IRQHandler+0x400>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d040      	beq.n	80027a2 <HAL_DMA_IRQHandler+0x3e2>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a27      	ldr	r2, [pc, #156]	@ (80027c4 <HAL_DMA_IRQHandler+0x404>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d03b      	beq.n	80027a2 <HAL_DMA_IRQHandler+0x3e2>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a26      	ldr	r2, [pc, #152]	@ (80027c8 <HAL_DMA_IRQHandler+0x408>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d036      	beq.n	80027a2 <HAL_DMA_IRQHandler+0x3e2>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a24      	ldr	r2, [pc, #144]	@ (80027cc <HAL_DMA_IRQHandler+0x40c>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d031      	beq.n	80027a2 <HAL_DMA_IRQHandler+0x3e2>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a23      	ldr	r2, [pc, #140]	@ (80027d0 <HAL_DMA_IRQHandler+0x410>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d02c      	beq.n	80027a2 <HAL_DMA_IRQHandler+0x3e2>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a21      	ldr	r2, [pc, #132]	@ (80027d4 <HAL_DMA_IRQHandler+0x414>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d027      	beq.n	80027a2 <HAL_DMA_IRQHandler+0x3e2>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a20      	ldr	r2, [pc, #128]	@ (80027d8 <HAL_DMA_IRQHandler+0x418>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d022      	beq.n	80027a2 <HAL_DMA_IRQHandler+0x3e2>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a1e      	ldr	r2, [pc, #120]	@ (80027dc <HAL_DMA_IRQHandler+0x41c>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d01d      	beq.n	80027a2 <HAL_DMA_IRQHandler+0x3e2>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a1d      	ldr	r2, [pc, #116]	@ (80027e0 <HAL_DMA_IRQHandler+0x420>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d018      	beq.n	80027a2 <HAL_DMA_IRQHandler+0x3e2>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a1b      	ldr	r2, [pc, #108]	@ (80027e4 <HAL_DMA_IRQHandler+0x424>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d013      	beq.n	80027a2 <HAL_DMA_IRQHandler+0x3e2>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a1a      	ldr	r2, [pc, #104]	@ (80027e8 <HAL_DMA_IRQHandler+0x428>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d00e      	beq.n	80027a2 <HAL_DMA_IRQHandler+0x3e2>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a18      	ldr	r2, [pc, #96]	@ (80027ec <HAL_DMA_IRQHandler+0x42c>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d009      	beq.n	80027a2 <HAL_DMA_IRQHandler+0x3e2>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a17      	ldr	r2, [pc, #92]	@ (80027f0 <HAL_DMA_IRQHandler+0x430>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d004      	beq.n	80027a2 <HAL_DMA_IRQHandler+0x3e2>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a15      	ldr	r2, [pc, #84]	@ (80027f4 <HAL_DMA_IRQHandler+0x434>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d12a      	bne.n	80027f8 <HAL_DMA_IRQHandler+0x438>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f003 0302 	and.w	r3, r3, #2
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	bf14      	ite	ne
 80027b0:	2301      	movne	r3, #1
 80027b2:	2300      	moveq	r3, #0
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	e023      	b.n	8002800 <HAL_DMA_IRQHandler+0x440>
 80027b8:	40020010 	.word	0x40020010
 80027bc:	40020028 	.word	0x40020028
 80027c0:	40020040 	.word	0x40020040
 80027c4:	40020058 	.word	0x40020058
 80027c8:	40020070 	.word	0x40020070
 80027cc:	40020088 	.word	0x40020088
 80027d0:	400200a0 	.word	0x400200a0
 80027d4:	400200b8 	.word	0x400200b8
 80027d8:	40020410 	.word	0x40020410
 80027dc:	40020428 	.word	0x40020428
 80027e0:	40020440 	.word	0x40020440
 80027e4:	40020458 	.word	0x40020458
 80027e8:	40020470 	.word	0x40020470
 80027ec:	40020488 	.word	0x40020488
 80027f0:	400204a0 	.word	0x400204a0
 80027f4:	400204b8 	.word	0x400204b8
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	2300      	movs	r3, #0
 8002800:	2b00      	cmp	r3, #0
 8002802:	d00d      	beq.n	8002820 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002808:	f003 031f 	and.w	r3, r3, #31
 800280c:	2204      	movs	r2, #4
 800280e:	409a      	lsls	r2, r3
 8002810:	6a3b      	ldr	r3, [r7, #32]
 8002812:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002818:	f043 0204 	orr.w	r2, r3, #4
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002824:	f003 031f 	and.w	r3, r3, #31
 8002828:	2210      	movs	r2, #16
 800282a:	409a      	lsls	r2, r3
 800282c:	69bb      	ldr	r3, [r7, #24]
 800282e:	4013      	ands	r3, r2
 8002830:	2b00      	cmp	r3, #0
 8002832:	f000 80a6 	beq.w	8002982 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a85      	ldr	r2, [pc, #532]	@ (8002a50 <HAL_DMA_IRQHandler+0x690>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d04a      	beq.n	80028d6 <HAL_DMA_IRQHandler+0x516>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a83      	ldr	r2, [pc, #524]	@ (8002a54 <HAL_DMA_IRQHandler+0x694>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d045      	beq.n	80028d6 <HAL_DMA_IRQHandler+0x516>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a82      	ldr	r2, [pc, #520]	@ (8002a58 <HAL_DMA_IRQHandler+0x698>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d040      	beq.n	80028d6 <HAL_DMA_IRQHandler+0x516>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a80      	ldr	r2, [pc, #512]	@ (8002a5c <HAL_DMA_IRQHandler+0x69c>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d03b      	beq.n	80028d6 <HAL_DMA_IRQHandler+0x516>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a7f      	ldr	r2, [pc, #508]	@ (8002a60 <HAL_DMA_IRQHandler+0x6a0>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d036      	beq.n	80028d6 <HAL_DMA_IRQHandler+0x516>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a7d      	ldr	r2, [pc, #500]	@ (8002a64 <HAL_DMA_IRQHandler+0x6a4>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d031      	beq.n	80028d6 <HAL_DMA_IRQHandler+0x516>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a7c      	ldr	r2, [pc, #496]	@ (8002a68 <HAL_DMA_IRQHandler+0x6a8>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d02c      	beq.n	80028d6 <HAL_DMA_IRQHandler+0x516>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a7a      	ldr	r2, [pc, #488]	@ (8002a6c <HAL_DMA_IRQHandler+0x6ac>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d027      	beq.n	80028d6 <HAL_DMA_IRQHandler+0x516>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a79      	ldr	r2, [pc, #484]	@ (8002a70 <HAL_DMA_IRQHandler+0x6b0>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d022      	beq.n	80028d6 <HAL_DMA_IRQHandler+0x516>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a77      	ldr	r2, [pc, #476]	@ (8002a74 <HAL_DMA_IRQHandler+0x6b4>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d01d      	beq.n	80028d6 <HAL_DMA_IRQHandler+0x516>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a76      	ldr	r2, [pc, #472]	@ (8002a78 <HAL_DMA_IRQHandler+0x6b8>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d018      	beq.n	80028d6 <HAL_DMA_IRQHandler+0x516>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a74      	ldr	r2, [pc, #464]	@ (8002a7c <HAL_DMA_IRQHandler+0x6bc>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d013      	beq.n	80028d6 <HAL_DMA_IRQHandler+0x516>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a73      	ldr	r2, [pc, #460]	@ (8002a80 <HAL_DMA_IRQHandler+0x6c0>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d00e      	beq.n	80028d6 <HAL_DMA_IRQHandler+0x516>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a71      	ldr	r2, [pc, #452]	@ (8002a84 <HAL_DMA_IRQHandler+0x6c4>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d009      	beq.n	80028d6 <HAL_DMA_IRQHandler+0x516>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a70      	ldr	r2, [pc, #448]	@ (8002a88 <HAL_DMA_IRQHandler+0x6c8>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d004      	beq.n	80028d6 <HAL_DMA_IRQHandler+0x516>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a6e      	ldr	r2, [pc, #440]	@ (8002a8c <HAL_DMA_IRQHandler+0x6cc>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d10a      	bne.n	80028ec <HAL_DMA_IRQHandler+0x52c>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 0308 	and.w	r3, r3, #8
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	bf14      	ite	ne
 80028e4:	2301      	movne	r3, #1
 80028e6:	2300      	moveq	r3, #0
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	e009      	b.n	8002900 <HAL_DMA_IRQHandler+0x540>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 0304 	and.w	r3, r3, #4
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	bf14      	ite	ne
 80028fa:	2301      	movne	r3, #1
 80028fc:	2300      	moveq	r3, #0
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	2b00      	cmp	r3, #0
 8002902:	d03e      	beq.n	8002982 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002908:	f003 031f 	and.w	r3, r3, #31
 800290c:	2210      	movs	r2, #16
 800290e:	409a      	lsls	r2, r3
 8002910:	6a3b      	ldr	r3, [r7, #32]
 8002912:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800291e:	2b00      	cmp	r3, #0
 8002920:	d018      	beq.n	8002954 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800292c:	2b00      	cmp	r3, #0
 800292e:	d108      	bne.n	8002942 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002934:	2b00      	cmp	r3, #0
 8002936:	d024      	beq.n	8002982 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800293c:	6878      	ldr	r0, [r7, #4]
 800293e:	4798      	blx	r3
 8002940:	e01f      	b.n	8002982 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002946:	2b00      	cmp	r3, #0
 8002948:	d01b      	beq.n	8002982 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	4798      	blx	r3
 8002952:	e016      	b.n	8002982 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800295e:	2b00      	cmp	r3, #0
 8002960:	d107      	bne.n	8002972 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f022 0208 	bic.w	r2, r2, #8
 8002970:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002976:	2b00      	cmp	r3, #0
 8002978:	d003      	beq.n	8002982 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002986:	f003 031f 	and.w	r3, r3, #31
 800298a:	2220      	movs	r2, #32
 800298c:	409a      	lsls	r2, r3
 800298e:	69bb      	ldr	r3, [r7, #24]
 8002990:	4013      	ands	r3, r2
 8002992:	2b00      	cmp	r3, #0
 8002994:	f000 8110 	beq.w	8002bb8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a2c      	ldr	r2, [pc, #176]	@ (8002a50 <HAL_DMA_IRQHandler+0x690>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d04a      	beq.n	8002a38 <HAL_DMA_IRQHandler+0x678>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a2b      	ldr	r2, [pc, #172]	@ (8002a54 <HAL_DMA_IRQHandler+0x694>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d045      	beq.n	8002a38 <HAL_DMA_IRQHandler+0x678>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a29      	ldr	r2, [pc, #164]	@ (8002a58 <HAL_DMA_IRQHandler+0x698>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d040      	beq.n	8002a38 <HAL_DMA_IRQHandler+0x678>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a28      	ldr	r2, [pc, #160]	@ (8002a5c <HAL_DMA_IRQHandler+0x69c>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d03b      	beq.n	8002a38 <HAL_DMA_IRQHandler+0x678>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a26      	ldr	r2, [pc, #152]	@ (8002a60 <HAL_DMA_IRQHandler+0x6a0>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d036      	beq.n	8002a38 <HAL_DMA_IRQHandler+0x678>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a25      	ldr	r2, [pc, #148]	@ (8002a64 <HAL_DMA_IRQHandler+0x6a4>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d031      	beq.n	8002a38 <HAL_DMA_IRQHandler+0x678>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a23      	ldr	r2, [pc, #140]	@ (8002a68 <HAL_DMA_IRQHandler+0x6a8>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d02c      	beq.n	8002a38 <HAL_DMA_IRQHandler+0x678>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a22      	ldr	r2, [pc, #136]	@ (8002a6c <HAL_DMA_IRQHandler+0x6ac>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d027      	beq.n	8002a38 <HAL_DMA_IRQHandler+0x678>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a20      	ldr	r2, [pc, #128]	@ (8002a70 <HAL_DMA_IRQHandler+0x6b0>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d022      	beq.n	8002a38 <HAL_DMA_IRQHandler+0x678>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a1f      	ldr	r2, [pc, #124]	@ (8002a74 <HAL_DMA_IRQHandler+0x6b4>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d01d      	beq.n	8002a38 <HAL_DMA_IRQHandler+0x678>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a1d      	ldr	r2, [pc, #116]	@ (8002a78 <HAL_DMA_IRQHandler+0x6b8>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d018      	beq.n	8002a38 <HAL_DMA_IRQHandler+0x678>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a1c      	ldr	r2, [pc, #112]	@ (8002a7c <HAL_DMA_IRQHandler+0x6bc>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d013      	beq.n	8002a38 <HAL_DMA_IRQHandler+0x678>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a1a      	ldr	r2, [pc, #104]	@ (8002a80 <HAL_DMA_IRQHandler+0x6c0>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d00e      	beq.n	8002a38 <HAL_DMA_IRQHandler+0x678>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a19      	ldr	r2, [pc, #100]	@ (8002a84 <HAL_DMA_IRQHandler+0x6c4>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d009      	beq.n	8002a38 <HAL_DMA_IRQHandler+0x678>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a17      	ldr	r2, [pc, #92]	@ (8002a88 <HAL_DMA_IRQHandler+0x6c8>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d004      	beq.n	8002a38 <HAL_DMA_IRQHandler+0x678>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a16      	ldr	r2, [pc, #88]	@ (8002a8c <HAL_DMA_IRQHandler+0x6cc>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d12b      	bne.n	8002a90 <HAL_DMA_IRQHandler+0x6d0>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 0310 	and.w	r3, r3, #16
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	bf14      	ite	ne
 8002a46:	2301      	movne	r3, #1
 8002a48:	2300      	moveq	r3, #0
 8002a4a:	b2db      	uxtb	r3, r3
 8002a4c:	e02a      	b.n	8002aa4 <HAL_DMA_IRQHandler+0x6e4>
 8002a4e:	bf00      	nop
 8002a50:	40020010 	.word	0x40020010
 8002a54:	40020028 	.word	0x40020028
 8002a58:	40020040 	.word	0x40020040
 8002a5c:	40020058 	.word	0x40020058
 8002a60:	40020070 	.word	0x40020070
 8002a64:	40020088 	.word	0x40020088
 8002a68:	400200a0 	.word	0x400200a0
 8002a6c:	400200b8 	.word	0x400200b8
 8002a70:	40020410 	.word	0x40020410
 8002a74:	40020428 	.word	0x40020428
 8002a78:	40020440 	.word	0x40020440
 8002a7c:	40020458 	.word	0x40020458
 8002a80:	40020470 	.word	0x40020470
 8002a84:	40020488 	.word	0x40020488
 8002a88:	400204a0 	.word	0x400204a0
 8002a8c:	400204b8 	.word	0x400204b8
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 0302 	and.w	r3, r3, #2
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	bf14      	ite	ne
 8002a9e:	2301      	movne	r3, #1
 8002aa0:	2300      	moveq	r3, #0
 8002aa2:	b2db      	uxtb	r3, r3
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	f000 8087 	beq.w	8002bb8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002aae:	f003 031f 	and.w	r3, r3, #31
 8002ab2:	2220      	movs	r2, #32
 8002ab4:	409a      	lsls	r2, r3
 8002ab6:	6a3b      	ldr	r3, [r7, #32]
 8002ab8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	2b04      	cmp	r3, #4
 8002ac4:	d139      	bne.n	8002b3a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f022 0216 	bic.w	r2, r2, #22
 8002ad4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	695a      	ldr	r2, [r3, #20]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002ae4:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d103      	bne.n	8002af6 <HAL_DMA_IRQHandler+0x736>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d007      	beq.n	8002b06 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f022 0208 	bic.w	r2, r2, #8
 8002b04:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b0a:	f003 031f 	and.w	r3, r3, #31
 8002b0e:	223f      	movs	r2, #63	@ 0x3f
 8002b10:	409a      	lsls	r2, r3
 8002b12:	6a3b      	ldr	r3, [r7, #32]
 8002b14:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2201      	movs	r2, #1
 8002b1a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2200      	movs	r2, #0
 8002b22:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	f000 8382 	beq.w	8003234 <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b34:	6878      	ldr	r0, [r7, #4]
 8002b36:	4798      	blx	r3
          }
          return;
 8002b38:	e37c      	b.n	8003234 <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d018      	beq.n	8002b7a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d108      	bne.n	8002b68 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d02c      	beq.n	8002bb8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	4798      	blx	r3
 8002b66:	e027      	b.n	8002bb8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d023      	beq.n	8002bb8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b74:	6878      	ldr	r0, [r7, #4]
 8002b76:	4798      	blx	r3
 8002b78:	e01e      	b.n	8002bb8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d10f      	bne.n	8002ba8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f022 0210 	bic.w	r2, r2, #16
 8002b96:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d003      	beq.n	8002bb8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bb4:	6878      	ldr	r0, [r7, #4]
 8002bb6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	f000 833e 	beq.w	800323e <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bc6:	f003 0301 	and.w	r3, r3, #1
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	f000 8088 	beq.w	8002ce0 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2204      	movs	r2, #4
 8002bd4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a89      	ldr	r2, [pc, #548]	@ (8002e04 <HAL_DMA_IRQHandler+0xa44>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d04a      	beq.n	8002c78 <HAL_DMA_IRQHandler+0x8b8>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a88      	ldr	r2, [pc, #544]	@ (8002e08 <HAL_DMA_IRQHandler+0xa48>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d045      	beq.n	8002c78 <HAL_DMA_IRQHandler+0x8b8>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a86      	ldr	r2, [pc, #536]	@ (8002e0c <HAL_DMA_IRQHandler+0xa4c>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d040      	beq.n	8002c78 <HAL_DMA_IRQHandler+0x8b8>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a85      	ldr	r2, [pc, #532]	@ (8002e10 <HAL_DMA_IRQHandler+0xa50>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d03b      	beq.n	8002c78 <HAL_DMA_IRQHandler+0x8b8>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a83      	ldr	r2, [pc, #524]	@ (8002e14 <HAL_DMA_IRQHandler+0xa54>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d036      	beq.n	8002c78 <HAL_DMA_IRQHandler+0x8b8>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a82      	ldr	r2, [pc, #520]	@ (8002e18 <HAL_DMA_IRQHandler+0xa58>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d031      	beq.n	8002c78 <HAL_DMA_IRQHandler+0x8b8>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a80      	ldr	r2, [pc, #512]	@ (8002e1c <HAL_DMA_IRQHandler+0xa5c>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d02c      	beq.n	8002c78 <HAL_DMA_IRQHandler+0x8b8>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a7f      	ldr	r2, [pc, #508]	@ (8002e20 <HAL_DMA_IRQHandler+0xa60>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d027      	beq.n	8002c78 <HAL_DMA_IRQHandler+0x8b8>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a7d      	ldr	r2, [pc, #500]	@ (8002e24 <HAL_DMA_IRQHandler+0xa64>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d022      	beq.n	8002c78 <HAL_DMA_IRQHandler+0x8b8>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a7c      	ldr	r2, [pc, #496]	@ (8002e28 <HAL_DMA_IRQHandler+0xa68>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d01d      	beq.n	8002c78 <HAL_DMA_IRQHandler+0x8b8>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a7a      	ldr	r2, [pc, #488]	@ (8002e2c <HAL_DMA_IRQHandler+0xa6c>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d018      	beq.n	8002c78 <HAL_DMA_IRQHandler+0x8b8>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a79      	ldr	r2, [pc, #484]	@ (8002e30 <HAL_DMA_IRQHandler+0xa70>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d013      	beq.n	8002c78 <HAL_DMA_IRQHandler+0x8b8>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a77      	ldr	r2, [pc, #476]	@ (8002e34 <HAL_DMA_IRQHandler+0xa74>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d00e      	beq.n	8002c78 <HAL_DMA_IRQHandler+0x8b8>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a76      	ldr	r2, [pc, #472]	@ (8002e38 <HAL_DMA_IRQHandler+0xa78>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d009      	beq.n	8002c78 <HAL_DMA_IRQHandler+0x8b8>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a74      	ldr	r2, [pc, #464]	@ (8002e3c <HAL_DMA_IRQHandler+0xa7c>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d004      	beq.n	8002c78 <HAL_DMA_IRQHandler+0x8b8>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a73      	ldr	r2, [pc, #460]	@ (8002e40 <HAL_DMA_IRQHandler+0xa80>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d108      	bne.n	8002c8a <HAL_DMA_IRQHandler+0x8ca>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f022 0201 	bic.w	r2, r2, #1
 8002c86:	601a      	str	r2, [r3, #0]
 8002c88:	e007      	b.n	8002c9a <HAL_DMA_IRQHandler+0x8da>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f022 0201 	bic.w	r2, r2, #1
 8002c98:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	3301      	adds	r3, #1
 8002c9e:	60fb      	str	r3, [r7, #12]
 8002ca0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ca2:	429a      	cmp	r2, r3
 8002ca4:	d307      	bcc.n	8002cb6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 0301 	and.w	r3, r3, #1
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d1f2      	bne.n	8002c9a <HAL_DMA_IRQHandler+0x8da>
 8002cb4:	e000      	b.n	8002cb8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8002cb6:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 0301 	and.w	r3, r3, #1
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d004      	beq.n	8002cd0 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2203      	movs	r2, #3
 8002cca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8002cce:	e003      	b.n	8002cd8 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	f000 82aa 	beq.w	800323e <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	4798      	blx	r3
 8002cf2:	e2a4      	b.n	800323e <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a52      	ldr	r2, [pc, #328]	@ (8002e44 <HAL_DMA_IRQHandler+0xa84>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d04a      	beq.n	8002d94 <HAL_DMA_IRQHandler+0x9d4>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a51      	ldr	r2, [pc, #324]	@ (8002e48 <HAL_DMA_IRQHandler+0xa88>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d045      	beq.n	8002d94 <HAL_DMA_IRQHandler+0x9d4>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a4f      	ldr	r2, [pc, #316]	@ (8002e4c <HAL_DMA_IRQHandler+0xa8c>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d040      	beq.n	8002d94 <HAL_DMA_IRQHandler+0x9d4>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a4e      	ldr	r2, [pc, #312]	@ (8002e50 <HAL_DMA_IRQHandler+0xa90>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d03b      	beq.n	8002d94 <HAL_DMA_IRQHandler+0x9d4>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a4c      	ldr	r2, [pc, #304]	@ (8002e54 <HAL_DMA_IRQHandler+0xa94>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d036      	beq.n	8002d94 <HAL_DMA_IRQHandler+0x9d4>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a4b      	ldr	r2, [pc, #300]	@ (8002e58 <HAL_DMA_IRQHandler+0xa98>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d031      	beq.n	8002d94 <HAL_DMA_IRQHandler+0x9d4>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a49      	ldr	r2, [pc, #292]	@ (8002e5c <HAL_DMA_IRQHandler+0xa9c>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d02c      	beq.n	8002d94 <HAL_DMA_IRQHandler+0x9d4>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a48      	ldr	r2, [pc, #288]	@ (8002e60 <HAL_DMA_IRQHandler+0xaa0>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d027      	beq.n	8002d94 <HAL_DMA_IRQHandler+0x9d4>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a46      	ldr	r2, [pc, #280]	@ (8002e64 <HAL_DMA_IRQHandler+0xaa4>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d022      	beq.n	8002d94 <HAL_DMA_IRQHandler+0x9d4>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a45      	ldr	r2, [pc, #276]	@ (8002e68 <HAL_DMA_IRQHandler+0xaa8>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d01d      	beq.n	8002d94 <HAL_DMA_IRQHandler+0x9d4>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a43      	ldr	r2, [pc, #268]	@ (8002e6c <HAL_DMA_IRQHandler+0xaac>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d018      	beq.n	8002d94 <HAL_DMA_IRQHandler+0x9d4>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a42      	ldr	r2, [pc, #264]	@ (8002e70 <HAL_DMA_IRQHandler+0xab0>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d013      	beq.n	8002d94 <HAL_DMA_IRQHandler+0x9d4>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a40      	ldr	r2, [pc, #256]	@ (8002e74 <HAL_DMA_IRQHandler+0xab4>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d00e      	beq.n	8002d94 <HAL_DMA_IRQHandler+0x9d4>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a3f      	ldr	r2, [pc, #252]	@ (8002e78 <HAL_DMA_IRQHandler+0xab8>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d009      	beq.n	8002d94 <HAL_DMA_IRQHandler+0x9d4>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a3d      	ldr	r2, [pc, #244]	@ (8002e7c <HAL_DMA_IRQHandler+0xabc>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d004      	beq.n	8002d94 <HAL_DMA_IRQHandler+0x9d4>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a3c      	ldr	r2, [pc, #240]	@ (8002e80 <HAL_DMA_IRQHandler+0xac0>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d101      	bne.n	8002d98 <HAL_DMA_IRQHandler+0x9d8>
 8002d94:	2301      	movs	r3, #1
 8002d96:	e000      	b.n	8002d9a <HAL_DMA_IRQHandler+0x9da>
 8002d98:	2300      	movs	r3, #0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	f000 824f 	beq.w	800323e <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dac:	f003 031f 	and.w	r3, r3, #31
 8002db0:	2204      	movs	r2, #4
 8002db2:	409a      	lsls	r2, r3
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	4013      	ands	r3, r2
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	f000 80dd 	beq.w	8002f78 <HAL_DMA_IRQHandler+0xbb8>
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	f003 0304 	and.w	r3, r3, #4
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	f000 80d7 	beq.w	8002f78 <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dce:	f003 031f 	and.w	r3, r3, #31
 8002dd2:	2204      	movs	r2, #4
 8002dd4:	409a      	lsls	r2, r3
 8002dd6:	69fb      	ldr	r3, [r7, #28]
 8002dd8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d059      	beq.n	8002e98 <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d14a      	bne.n	8002e84 <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	f000 8220 	beq.w	8003238 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002dfc:	6878      	ldr	r0, [r7, #4]
 8002dfe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002e00:	e21a      	b.n	8003238 <HAL_DMA_IRQHandler+0xe78>
 8002e02:	bf00      	nop
 8002e04:	40020010 	.word	0x40020010
 8002e08:	40020028 	.word	0x40020028
 8002e0c:	40020040 	.word	0x40020040
 8002e10:	40020058 	.word	0x40020058
 8002e14:	40020070 	.word	0x40020070
 8002e18:	40020088 	.word	0x40020088
 8002e1c:	400200a0 	.word	0x400200a0
 8002e20:	400200b8 	.word	0x400200b8
 8002e24:	40020410 	.word	0x40020410
 8002e28:	40020428 	.word	0x40020428
 8002e2c:	40020440 	.word	0x40020440
 8002e30:	40020458 	.word	0x40020458
 8002e34:	40020470 	.word	0x40020470
 8002e38:	40020488 	.word	0x40020488
 8002e3c:	400204a0 	.word	0x400204a0
 8002e40:	400204b8 	.word	0x400204b8
 8002e44:	48022c08 	.word	0x48022c08
 8002e48:	48022c1c 	.word	0x48022c1c
 8002e4c:	48022c30 	.word	0x48022c30
 8002e50:	48022c44 	.word	0x48022c44
 8002e54:	48022c58 	.word	0x48022c58
 8002e58:	48022c6c 	.word	0x48022c6c
 8002e5c:	48022c80 	.word	0x48022c80
 8002e60:	48022c94 	.word	0x48022c94
 8002e64:	58025408 	.word	0x58025408
 8002e68:	5802541c 	.word	0x5802541c
 8002e6c:	58025430 	.word	0x58025430
 8002e70:	58025444 	.word	0x58025444
 8002e74:	58025458 	.word	0x58025458
 8002e78:	5802546c 	.word	0x5802546c
 8002e7c:	58025480 	.word	0x58025480
 8002e80:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	f000 81d5 	beq.w	8003238 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002e96:	e1cf      	b.n	8003238 <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	f003 0320 	and.w	r3, r3, #32
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d160      	bne.n	8002f64 <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a7f      	ldr	r2, [pc, #508]	@ (80030a4 <HAL_DMA_IRQHandler+0xce4>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d04a      	beq.n	8002f42 <HAL_DMA_IRQHandler+0xb82>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a7d      	ldr	r2, [pc, #500]	@ (80030a8 <HAL_DMA_IRQHandler+0xce8>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d045      	beq.n	8002f42 <HAL_DMA_IRQHandler+0xb82>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a7c      	ldr	r2, [pc, #496]	@ (80030ac <HAL_DMA_IRQHandler+0xcec>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d040      	beq.n	8002f42 <HAL_DMA_IRQHandler+0xb82>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a7a      	ldr	r2, [pc, #488]	@ (80030b0 <HAL_DMA_IRQHandler+0xcf0>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d03b      	beq.n	8002f42 <HAL_DMA_IRQHandler+0xb82>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a79      	ldr	r2, [pc, #484]	@ (80030b4 <HAL_DMA_IRQHandler+0xcf4>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d036      	beq.n	8002f42 <HAL_DMA_IRQHandler+0xb82>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a77      	ldr	r2, [pc, #476]	@ (80030b8 <HAL_DMA_IRQHandler+0xcf8>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d031      	beq.n	8002f42 <HAL_DMA_IRQHandler+0xb82>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a76      	ldr	r2, [pc, #472]	@ (80030bc <HAL_DMA_IRQHandler+0xcfc>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d02c      	beq.n	8002f42 <HAL_DMA_IRQHandler+0xb82>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a74      	ldr	r2, [pc, #464]	@ (80030c0 <HAL_DMA_IRQHandler+0xd00>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d027      	beq.n	8002f42 <HAL_DMA_IRQHandler+0xb82>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a73      	ldr	r2, [pc, #460]	@ (80030c4 <HAL_DMA_IRQHandler+0xd04>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d022      	beq.n	8002f42 <HAL_DMA_IRQHandler+0xb82>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a71      	ldr	r2, [pc, #452]	@ (80030c8 <HAL_DMA_IRQHandler+0xd08>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d01d      	beq.n	8002f42 <HAL_DMA_IRQHandler+0xb82>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a70      	ldr	r2, [pc, #448]	@ (80030cc <HAL_DMA_IRQHandler+0xd0c>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d018      	beq.n	8002f42 <HAL_DMA_IRQHandler+0xb82>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a6e      	ldr	r2, [pc, #440]	@ (80030d0 <HAL_DMA_IRQHandler+0xd10>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d013      	beq.n	8002f42 <HAL_DMA_IRQHandler+0xb82>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a6d      	ldr	r2, [pc, #436]	@ (80030d4 <HAL_DMA_IRQHandler+0xd14>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d00e      	beq.n	8002f42 <HAL_DMA_IRQHandler+0xb82>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a6b      	ldr	r2, [pc, #428]	@ (80030d8 <HAL_DMA_IRQHandler+0xd18>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d009      	beq.n	8002f42 <HAL_DMA_IRQHandler+0xb82>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a6a      	ldr	r2, [pc, #424]	@ (80030dc <HAL_DMA_IRQHandler+0xd1c>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d004      	beq.n	8002f42 <HAL_DMA_IRQHandler+0xb82>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a68      	ldr	r2, [pc, #416]	@ (80030e0 <HAL_DMA_IRQHandler+0xd20>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d108      	bne.n	8002f54 <HAL_DMA_IRQHandler+0xb94>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f022 0208 	bic.w	r2, r2, #8
 8002f50:	601a      	str	r2, [r3, #0]
 8002f52:	e007      	b.n	8002f64 <HAL_DMA_IRQHandler+0xba4>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f022 0204 	bic.w	r2, r2, #4
 8002f62:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	f000 8165 	beq.w	8003238 <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002f76:	e15f      	b.n	8003238 <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f7c:	f003 031f 	and.w	r3, r3, #31
 8002f80:	2202      	movs	r2, #2
 8002f82:	409a      	lsls	r2, r3
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	4013      	ands	r3, r2
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	f000 80c5 	beq.w	8003118 <HAL_DMA_IRQHandler+0xd58>
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	f003 0302 	and.w	r3, r3, #2
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	f000 80bf 	beq.w	8003118 <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f9e:	f003 031f 	and.w	r3, r3, #31
 8002fa2:	2202      	movs	r2, #2
 8002fa4:	409a      	lsls	r2, r3
 8002fa6:	69fb      	ldr	r3, [r7, #28]
 8002fa8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d018      	beq.n	8002fe6 <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d109      	bne.n	8002fd2 <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	f000 813a 	beq.w	800323c <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fcc:	6878      	ldr	r0, [r7, #4]
 8002fce:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002fd0:	e134      	b.n	800323c <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	f000 8130 	beq.w	800323c <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fe0:	6878      	ldr	r0, [r7, #4]
 8002fe2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002fe4:	e12a      	b.n	800323c <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	f003 0320 	and.w	r3, r3, #32
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	f040 8089 	bne.w	8003104 <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a2b      	ldr	r2, [pc, #172]	@ (80030a4 <HAL_DMA_IRQHandler+0xce4>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d04a      	beq.n	8003092 <HAL_DMA_IRQHandler+0xcd2>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a29      	ldr	r2, [pc, #164]	@ (80030a8 <HAL_DMA_IRQHandler+0xce8>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d045      	beq.n	8003092 <HAL_DMA_IRQHandler+0xcd2>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a28      	ldr	r2, [pc, #160]	@ (80030ac <HAL_DMA_IRQHandler+0xcec>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d040      	beq.n	8003092 <HAL_DMA_IRQHandler+0xcd2>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a26      	ldr	r2, [pc, #152]	@ (80030b0 <HAL_DMA_IRQHandler+0xcf0>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d03b      	beq.n	8003092 <HAL_DMA_IRQHandler+0xcd2>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a25      	ldr	r2, [pc, #148]	@ (80030b4 <HAL_DMA_IRQHandler+0xcf4>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d036      	beq.n	8003092 <HAL_DMA_IRQHandler+0xcd2>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a23      	ldr	r2, [pc, #140]	@ (80030b8 <HAL_DMA_IRQHandler+0xcf8>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d031      	beq.n	8003092 <HAL_DMA_IRQHandler+0xcd2>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a22      	ldr	r2, [pc, #136]	@ (80030bc <HAL_DMA_IRQHandler+0xcfc>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d02c      	beq.n	8003092 <HAL_DMA_IRQHandler+0xcd2>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a20      	ldr	r2, [pc, #128]	@ (80030c0 <HAL_DMA_IRQHandler+0xd00>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d027      	beq.n	8003092 <HAL_DMA_IRQHandler+0xcd2>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a1f      	ldr	r2, [pc, #124]	@ (80030c4 <HAL_DMA_IRQHandler+0xd04>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d022      	beq.n	8003092 <HAL_DMA_IRQHandler+0xcd2>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a1d      	ldr	r2, [pc, #116]	@ (80030c8 <HAL_DMA_IRQHandler+0xd08>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d01d      	beq.n	8003092 <HAL_DMA_IRQHandler+0xcd2>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a1c      	ldr	r2, [pc, #112]	@ (80030cc <HAL_DMA_IRQHandler+0xd0c>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d018      	beq.n	8003092 <HAL_DMA_IRQHandler+0xcd2>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a1a      	ldr	r2, [pc, #104]	@ (80030d0 <HAL_DMA_IRQHandler+0xd10>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d013      	beq.n	8003092 <HAL_DMA_IRQHandler+0xcd2>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a19      	ldr	r2, [pc, #100]	@ (80030d4 <HAL_DMA_IRQHandler+0xd14>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d00e      	beq.n	8003092 <HAL_DMA_IRQHandler+0xcd2>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a17      	ldr	r2, [pc, #92]	@ (80030d8 <HAL_DMA_IRQHandler+0xd18>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d009      	beq.n	8003092 <HAL_DMA_IRQHandler+0xcd2>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a16      	ldr	r2, [pc, #88]	@ (80030dc <HAL_DMA_IRQHandler+0xd1c>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d004      	beq.n	8003092 <HAL_DMA_IRQHandler+0xcd2>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a14      	ldr	r2, [pc, #80]	@ (80030e0 <HAL_DMA_IRQHandler+0xd20>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d128      	bne.n	80030e4 <HAL_DMA_IRQHandler+0xd24>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f022 0214 	bic.w	r2, r2, #20
 80030a0:	601a      	str	r2, [r3, #0]
 80030a2:	e027      	b.n	80030f4 <HAL_DMA_IRQHandler+0xd34>
 80030a4:	40020010 	.word	0x40020010
 80030a8:	40020028 	.word	0x40020028
 80030ac:	40020040 	.word	0x40020040
 80030b0:	40020058 	.word	0x40020058
 80030b4:	40020070 	.word	0x40020070
 80030b8:	40020088 	.word	0x40020088
 80030bc:	400200a0 	.word	0x400200a0
 80030c0:	400200b8 	.word	0x400200b8
 80030c4:	40020410 	.word	0x40020410
 80030c8:	40020428 	.word	0x40020428
 80030cc:	40020440 	.word	0x40020440
 80030d0:	40020458 	.word	0x40020458
 80030d4:	40020470 	.word	0x40020470
 80030d8:	40020488 	.word	0x40020488
 80030dc:	400204a0 	.word	0x400204a0
 80030e0:	400204b8 	.word	0x400204b8
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f022 020a 	bic.w	r2, r2, #10
 80030f2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2201      	movs	r2, #1
 80030f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2200      	movs	r2, #0
 8003100:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003108:	2b00      	cmp	r3, #0
 800310a:	f000 8097 	beq.w	800323c <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003116:	e091      	b.n	800323c <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800311c:	f003 031f 	and.w	r3, r3, #31
 8003120:	2208      	movs	r2, #8
 8003122:	409a      	lsls	r2, r3
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	4013      	ands	r3, r2
 8003128:	2b00      	cmp	r3, #0
 800312a:	f000 8088 	beq.w	800323e <HAL_DMA_IRQHandler+0xe7e>
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	f003 0308 	and.w	r3, r3, #8
 8003134:	2b00      	cmp	r3, #0
 8003136:	f000 8082 	beq.w	800323e <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a41      	ldr	r2, [pc, #260]	@ (8003244 <HAL_DMA_IRQHandler+0xe84>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d04a      	beq.n	80031da <HAL_DMA_IRQHandler+0xe1a>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a3f      	ldr	r2, [pc, #252]	@ (8003248 <HAL_DMA_IRQHandler+0xe88>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d045      	beq.n	80031da <HAL_DMA_IRQHandler+0xe1a>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a3e      	ldr	r2, [pc, #248]	@ (800324c <HAL_DMA_IRQHandler+0xe8c>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d040      	beq.n	80031da <HAL_DMA_IRQHandler+0xe1a>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a3c      	ldr	r2, [pc, #240]	@ (8003250 <HAL_DMA_IRQHandler+0xe90>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d03b      	beq.n	80031da <HAL_DMA_IRQHandler+0xe1a>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a3b      	ldr	r2, [pc, #236]	@ (8003254 <HAL_DMA_IRQHandler+0xe94>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d036      	beq.n	80031da <HAL_DMA_IRQHandler+0xe1a>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a39      	ldr	r2, [pc, #228]	@ (8003258 <HAL_DMA_IRQHandler+0xe98>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d031      	beq.n	80031da <HAL_DMA_IRQHandler+0xe1a>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a38      	ldr	r2, [pc, #224]	@ (800325c <HAL_DMA_IRQHandler+0xe9c>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d02c      	beq.n	80031da <HAL_DMA_IRQHandler+0xe1a>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a36      	ldr	r2, [pc, #216]	@ (8003260 <HAL_DMA_IRQHandler+0xea0>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d027      	beq.n	80031da <HAL_DMA_IRQHandler+0xe1a>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a35      	ldr	r2, [pc, #212]	@ (8003264 <HAL_DMA_IRQHandler+0xea4>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d022      	beq.n	80031da <HAL_DMA_IRQHandler+0xe1a>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a33      	ldr	r2, [pc, #204]	@ (8003268 <HAL_DMA_IRQHandler+0xea8>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d01d      	beq.n	80031da <HAL_DMA_IRQHandler+0xe1a>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a32      	ldr	r2, [pc, #200]	@ (800326c <HAL_DMA_IRQHandler+0xeac>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d018      	beq.n	80031da <HAL_DMA_IRQHandler+0xe1a>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a30      	ldr	r2, [pc, #192]	@ (8003270 <HAL_DMA_IRQHandler+0xeb0>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d013      	beq.n	80031da <HAL_DMA_IRQHandler+0xe1a>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a2f      	ldr	r2, [pc, #188]	@ (8003274 <HAL_DMA_IRQHandler+0xeb4>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d00e      	beq.n	80031da <HAL_DMA_IRQHandler+0xe1a>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a2d      	ldr	r2, [pc, #180]	@ (8003278 <HAL_DMA_IRQHandler+0xeb8>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d009      	beq.n	80031da <HAL_DMA_IRQHandler+0xe1a>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a2c      	ldr	r2, [pc, #176]	@ (800327c <HAL_DMA_IRQHandler+0xebc>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d004      	beq.n	80031da <HAL_DMA_IRQHandler+0xe1a>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a2a      	ldr	r2, [pc, #168]	@ (8003280 <HAL_DMA_IRQHandler+0xec0>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d108      	bne.n	80031ec <HAL_DMA_IRQHandler+0xe2c>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f022 021c 	bic.w	r2, r2, #28
 80031e8:	601a      	str	r2, [r3, #0]
 80031ea:	e007      	b.n	80031fc <HAL_DMA_IRQHandler+0xe3c>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f022 020e 	bic.w	r2, r2, #14
 80031fa:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003200:	f003 031f 	and.w	r3, r3, #31
 8003204:	2201      	movs	r2, #1
 8003206:	409a      	lsls	r2, r3
 8003208:	69fb      	ldr	r3, [r7, #28]
 800320a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2201      	movs	r2, #1
 8003210:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2201      	movs	r2, #1
 8003216:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2200      	movs	r2, #0
 800321e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003226:	2b00      	cmp	r3, #0
 8003228:	d009      	beq.n	800323e <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800322e:	6878      	ldr	r0, [r7, #4]
 8003230:	4798      	blx	r3
 8003232:	e004      	b.n	800323e <HAL_DMA_IRQHandler+0xe7e>
          return;
 8003234:	bf00      	nop
 8003236:	e002      	b.n	800323e <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003238:	bf00      	nop
 800323a:	e000      	b.n	800323e <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800323c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800323e:	3728      	adds	r7, #40	@ 0x28
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}
 8003244:	40020010 	.word	0x40020010
 8003248:	40020028 	.word	0x40020028
 800324c:	40020040 	.word	0x40020040
 8003250:	40020058 	.word	0x40020058
 8003254:	40020070 	.word	0x40020070
 8003258:	40020088 	.word	0x40020088
 800325c:	400200a0 	.word	0x400200a0
 8003260:	400200b8 	.word	0x400200b8
 8003264:	40020410 	.word	0x40020410
 8003268:	40020428 	.word	0x40020428
 800326c:	40020440 	.word	0x40020440
 8003270:	40020458 	.word	0x40020458
 8003274:	40020470 	.word	0x40020470
 8003278:	40020488 	.word	0x40020488
 800327c:	400204a0 	.word	0x400204a0
 8003280:	400204b8 	.word	0x400204b8

08003284 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003284:	b480      	push	{r7}
 8003286:	b083      	sub	sp, #12
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003292:	b2db      	uxtb	r3, r3
}
 8003294:	4618      	mov	r0, r3
 8003296:	370c      	adds	r7, #12
 8003298:	46bd      	mov	sp, r7
 800329a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329e:	4770      	bx	lr

080032a0 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b083      	sub	sp, #12
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	370c      	adds	r7, #12
 80032b0:	46bd      	mov	sp, r7
 80032b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b6:	4770      	bx	lr

080032b8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b087      	sub	sp, #28
 80032bc:	af00      	add	r7, sp, #0
 80032be:	60f8      	str	r0, [r7, #12]
 80032c0:	60b9      	str	r1, [r7, #8]
 80032c2:	607a      	str	r2, [r7, #4]
 80032c4:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032ca:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032d0:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a7f      	ldr	r2, [pc, #508]	@ (80034d4 <DMA_SetConfig+0x21c>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d072      	beq.n	80033c2 <DMA_SetConfig+0x10a>
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a7d      	ldr	r2, [pc, #500]	@ (80034d8 <DMA_SetConfig+0x220>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d06d      	beq.n	80033c2 <DMA_SetConfig+0x10a>
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a7c      	ldr	r2, [pc, #496]	@ (80034dc <DMA_SetConfig+0x224>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d068      	beq.n	80033c2 <DMA_SetConfig+0x10a>
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a7a      	ldr	r2, [pc, #488]	@ (80034e0 <DMA_SetConfig+0x228>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d063      	beq.n	80033c2 <DMA_SetConfig+0x10a>
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a79      	ldr	r2, [pc, #484]	@ (80034e4 <DMA_SetConfig+0x22c>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d05e      	beq.n	80033c2 <DMA_SetConfig+0x10a>
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a77      	ldr	r2, [pc, #476]	@ (80034e8 <DMA_SetConfig+0x230>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d059      	beq.n	80033c2 <DMA_SetConfig+0x10a>
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a76      	ldr	r2, [pc, #472]	@ (80034ec <DMA_SetConfig+0x234>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d054      	beq.n	80033c2 <DMA_SetConfig+0x10a>
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a74      	ldr	r2, [pc, #464]	@ (80034f0 <DMA_SetConfig+0x238>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d04f      	beq.n	80033c2 <DMA_SetConfig+0x10a>
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a73      	ldr	r2, [pc, #460]	@ (80034f4 <DMA_SetConfig+0x23c>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d04a      	beq.n	80033c2 <DMA_SetConfig+0x10a>
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a71      	ldr	r2, [pc, #452]	@ (80034f8 <DMA_SetConfig+0x240>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d045      	beq.n	80033c2 <DMA_SetConfig+0x10a>
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a70      	ldr	r2, [pc, #448]	@ (80034fc <DMA_SetConfig+0x244>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d040      	beq.n	80033c2 <DMA_SetConfig+0x10a>
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a6e      	ldr	r2, [pc, #440]	@ (8003500 <DMA_SetConfig+0x248>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d03b      	beq.n	80033c2 <DMA_SetConfig+0x10a>
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a6d      	ldr	r2, [pc, #436]	@ (8003504 <DMA_SetConfig+0x24c>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d036      	beq.n	80033c2 <DMA_SetConfig+0x10a>
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a6b      	ldr	r2, [pc, #428]	@ (8003508 <DMA_SetConfig+0x250>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d031      	beq.n	80033c2 <DMA_SetConfig+0x10a>
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a6a      	ldr	r2, [pc, #424]	@ (800350c <DMA_SetConfig+0x254>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d02c      	beq.n	80033c2 <DMA_SetConfig+0x10a>
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a68      	ldr	r2, [pc, #416]	@ (8003510 <DMA_SetConfig+0x258>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d027      	beq.n	80033c2 <DMA_SetConfig+0x10a>
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a67      	ldr	r2, [pc, #412]	@ (8003514 <DMA_SetConfig+0x25c>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d022      	beq.n	80033c2 <DMA_SetConfig+0x10a>
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a65      	ldr	r2, [pc, #404]	@ (8003518 <DMA_SetConfig+0x260>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d01d      	beq.n	80033c2 <DMA_SetConfig+0x10a>
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a64      	ldr	r2, [pc, #400]	@ (800351c <DMA_SetConfig+0x264>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d018      	beq.n	80033c2 <DMA_SetConfig+0x10a>
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a62      	ldr	r2, [pc, #392]	@ (8003520 <DMA_SetConfig+0x268>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d013      	beq.n	80033c2 <DMA_SetConfig+0x10a>
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a61      	ldr	r2, [pc, #388]	@ (8003524 <DMA_SetConfig+0x26c>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d00e      	beq.n	80033c2 <DMA_SetConfig+0x10a>
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a5f      	ldr	r2, [pc, #380]	@ (8003528 <DMA_SetConfig+0x270>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d009      	beq.n	80033c2 <DMA_SetConfig+0x10a>
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a5e      	ldr	r2, [pc, #376]	@ (800352c <DMA_SetConfig+0x274>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d004      	beq.n	80033c2 <DMA_SetConfig+0x10a>
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a5c      	ldr	r2, [pc, #368]	@ (8003530 <DMA_SetConfig+0x278>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d101      	bne.n	80033c6 <DMA_SetConfig+0x10e>
 80033c2:	2301      	movs	r3, #1
 80033c4:	e000      	b.n	80033c8 <DMA_SetConfig+0x110>
 80033c6:	2300      	movs	r3, #0
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d00d      	beq.n	80033e8 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80033d0:	68fa      	ldr	r2, [r7, #12]
 80033d2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80033d4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d004      	beq.n	80033e8 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033e2:	68fa      	ldr	r2, [r7, #12]
 80033e4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80033e6:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a39      	ldr	r2, [pc, #228]	@ (80034d4 <DMA_SetConfig+0x21c>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d04a      	beq.n	8003488 <DMA_SetConfig+0x1d0>
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a38      	ldr	r2, [pc, #224]	@ (80034d8 <DMA_SetConfig+0x220>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d045      	beq.n	8003488 <DMA_SetConfig+0x1d0>
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a36      	ldr	r2, [pc, #216]	@ (80034dc <DMA_SetConfig+0x224>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d040      	beq.n	8003488 <DMA_SetConfig+0x1d0>
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a35      	ldr	r2, [pc, #212]	@ (80034e0 <DMA_SetConfig+0x228>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d03b      	beq.n	8003488 <DMA_SetConfig+0x1d0>
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a33      	ldr	r2, [pc, #204]	@ (80034e4 <DMA_SetConfig+0x22c>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d036      	beq.n	8003488 <DMA_SetConfig+0x1d0>
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a32      	ldr	r2, [pc, #200]	@ (80034e8 <DMA_SetConfig+0x230>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d031      	beq.n	8003488 <DMA_SetConfig+0x1d0>
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a30      	ldr	r2, [pc, #192]	@ (80034ec <DMA_SetConfig+0x234>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d02c      	beq.n	8003488 <DMA_SetConfig+0x1d0>
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a2f      	ldr	r2, [pc, #188]	@ (80034f0 <DMA_SetConfig+0x238>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d027      	beq.n	8003488 <DMA_SetConfig+0x1d0>
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a2d      	ldr	r2, [pc, #180]	@ (80034f4 <DMA_SetConfig+0x23c>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d022      	beq.n	8003488 <DMA_SetConfig+0x1d0>
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a2c      	ldr	r2, [pc, #176]	@ (80034f8 <DMA_SetConfig+0x240>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d01d      	beq.n	8003488 <DMA_SetConfig+0x1d0>
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a2a      	ldr	r2, [pc, #168]	@ (80034fc <DMA_SetConfig+0x244>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d018      	beq.n	8003488 <DMA_SetConfig+0x1d0>
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a29      	ldr	r2, [pc, #164]	@ (8003500 <DMA_SetConfig+0x248>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d013      	beq.n	8003488 <DMA_SetConfig+0x1d0>
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a27      	ldr	r2, [pc, #156]	@ (8003504 <DMA_SetConfig+0x24c>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d00e      	beq.n	8003488 <DMA_SetConfig+0x1d0>
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a26      	ldr	r2, [pc, #152]	@ (8003508 <DMA_SetConfig+0x250>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d009      	beq.n	8003488 <DMA_SetConfig+0x1d0>
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a24      	ldr	r2, [pc, #144]	@ (800350c <DMA_SetConfig+0x254>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d004      	beq.n	8003488 <DMA_SetConfig+0x1d0>
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a23      	ldr	r2, [pc, #140]	@ (8003510 <DMA_SetConfig+0x258>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d101      	bne.n	800348c <DMA_SetConfig+0x1d4>
 8003488:	2301      	movs	r3, #1
 800348a:	e000      	b.n	800348e <DMA_SetConfig+0x1d6>
 800348c:	2300      	movs	r3, #0
 800348e:	2b00      	cmp	r3, #0
 8003490:	d059      	beq.n	8003546 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003496:	f003 031f 	and.w	r3, r3, #31
 800349a:	223f      	movs	r2, #63	@ 0x3f
 800349c:	409a      	lsls	r2, r3
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80034b0:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	683a      	ldr	r2, [r7, #0]
 80034b8:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	2b40      	cmp	r3, #64	@ 0x40
 80034c0:	d138      	bne.n	8003534 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	687a      	ldr	r2, [r7, #4]
 80034c8:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	68ba      	ldr	r2, [r7, #8]
 80034d0:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80034d2:	e0ae      	b.n	8003632 <DMA_SetConfig+0x37a>
 80034d4:	40020010 	.word	0x40020010
 80034d8:	40020028 	.word	0x40020028
 80034dc:	40020040 	.word	0x40020040
 80034e0:	40020058 	.word	0x40020058
 80034e4:	40020070 	.word	0x40020070
 80034e8:	40020088 	.word	0x40020088
 80034ec:	400200a0 	.word	0x400200a0
 80034f0:	400200b8 	.word	0x400200b8
 80034f4:	40020410 	.word	0x40020410
 80034f8:	40020428 	.word	0x40020428
 80034fc:	40020440 	.word	0x40020440
 8003500:	40020458 	.word	0x40020458
 8003504:	40020470 	.word	0x40020470
 8003508:	40020488 	.word	0x40020488
 800350c:	400204a0 	.word	0x400204a0
 8003510:	400204b8 	.word	0x400204b8
 8003514:	58025408 	.word	0x58025408
 8003518:	5802541c 	.word	0x5802541c
 800351c:	58025430 	.word	0x58025430
 8003520:	58025444 	.word	0x58025444
 8003524:	58025458 	.word	0x58025458
 8003528:	5802546c 	.word	0x5802546c
 800352c:	58025480 	.word	0x58025480
 8003530:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	68ba      	ldr	r2, [r7, #8]
 800353a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	687a      	ldr	r2, [r7, #4]
 8003542:	60da      	str	r2, [r3, #12]
}
 8003544:	e075      	b.n	8003632 <DMA_SetConfig+0x37a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a3d      	ldr	r2, [pc, #244]	@ (8003640 <DMA_SetConfig+0x388>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d04a      	beq.n	80035e6 <DMA_SetConfig+0x32e>
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a3b      	ldr	r2, [pc, #236]	@ (8003644 <DMA_SetConfig+0x38c>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d045      	beq.n	80035e6 <DMA_SetConfig+0x32e>
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a3a      	ldr	r2, [pc, #232]	@ (8003648 <DMA_SetConfig+0x390>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d040      	beq.n	80035e6 <DMA_SetConfig+0x32e>
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a38      	ldr	r2, [pc, #224]	@ (800364c <DMA_SetConfig+0x394>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d03b      	beq.n	80035e6 <DMA_SetConfig+0x32e>
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a37      	ldr	r2, [pc, #220]	@ (8003650 <DMA_SetConfig+0x398>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d036      	beq.n	80035e6 <DMA_SetConfig+0x32e>
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a35      	ldr	r2, [pc, #212]	@ (8003654 <DMA_SetConfig+0x39c>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d031      	beq.n	80035e6 <DMA_SetConfig+0x32e>
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a34      	ldr	r2, [pc, #208]	@ (8003658 <DMA_SetConfig+0x3a0>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d02c      	beq.n	80035e6 <DMA_SetConfig+0x32e>
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a32      	ldr	r2, [pc, #200]	@ (800365c <DMA_SetConfig+0x3a4>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d027      	beq.n	80035e6 <DMA_SetConfig+0x32e>
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a31      	ldr	r2, [pc, #196]	@ (8003660 <DMA_SetConfig+0x3a8>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d022      	beq.n	80035e6 <DMA_SetConfig+0x32e>
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a2f      	ldr	r2, [pc, #188]	@ (8003664 <DMA_SetConfig+0x3ac>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d01d      	beq.n	80035e6 <DMA_SetConfig+0x32e>
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a2e      	ldr	r2, [pc, #184]	@ (8003668 <DMA_SetConfig+0x3b0>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d018      	beq.n	80035e6 <DMA_SetConfig+0x32e>
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a2c      	ldr	r2, [pc, #176]	@ (800366c <DMA_SetConfig+0x3b4>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d013      	beq.n	80035e6 <DMA_SetConfig+0x32e>
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a2b      	ldr	r2, [pc, #172]	@ (8003670 <DMA_SetConfig+0x3b8>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d00e      	beq.n	80035e6 <DMA_SetConfig+0x32e>
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a29      	ldr	r2, [pc, #164]	@ (8003674 <DMA_SetConfig+0x3bc>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d009      	beq.n	80035e6 <DMA_SetConfig+0x32e>
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a28      	ldr	r2, [pc, #160]	@ (8003678 <DMA_SetConfig+0x3c0>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d004      	beq.n	80035e6 <DMA_SetConfig+0x32e>
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a26      	ldr	r2, [pc, #152]	@ (800367c <DMA_SetConfig+0x3c4>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d101      	bne.n	80035ea <DMA_SetConfig+0x332>
 80035e6:	2301      	movs	r3, #1
 80035e8:	e000      	b.n	80035ec <DMA_SetConfig+0x334>
 80035ea:	2300      	movs	r3, #0
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d020      	beq.n	8003632 <DMA_SetConfig+0x37a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035f4:	f003 031f 	and.w	r3, r3, #31
 80035f8:	2201      	movs	r2, #1
 80035fa:	409a      	lsls	r2, r3
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	683a      	ldr	r2, [r7, #0]
 8003606:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	2b40      	cmp	r3, #64	@ 0x40
 800360e:	d108      	bne.n	8003622 <DMA_SetConfig+0x36a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	687a      	ldr	r2, [r7, #4]
 8003616:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	68ba      	ldr	r2, [r7, #8]
 800361e:	60da      	str	r2, [r3, #12]
}
 8003620:	e007      	b.n	8003632 <DMA_SetConfig+0x37a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	68ba      	ldr	r2, [r7, #8]
 8003628:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	687a      	ldr	r2, [r7, #4]
 8003630:	60da      	str	r2, [r3, #12]
}
 8003632:	bf00      	nop
 8003634:	371c      	adds	r7, #28
 8003636:	46bd      	mov	sp, r7
 8003638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363c:	4770      	bx	lr
 800363e:	bf00      	nop
 8003640:	48022c08 	.word	0x48022c08
 8003644:	48022c1c 	.word	0x48022c1c
 8003648:	48022c30 	.word	0x48022c30
 800364c:	48022c44 	.word	0x48022c44
 8003650:	48022c58 	.word	0x48022c58
 8003654:	48022c6c 	.word	0x48022c6c
 8003658:	48022c80 	.word	0x48022c80
 800365c:	48022c94 	.word	0x48022c94
 8003660:	58025408 	.word	0x58025408
 8003664:	5802541c 	.word	0x5802541c
 8003668:	58025430 	.word	0x58025430
 800366c:	58025444 	.word	0x58025444
 8003670:	58025458 	.word	0x58025458
 8003674:	5802546c 	.word	0x5802546c
 8003678:	58025480 	.word	0x58025480
 800367c:	58025494 	.word	0x58025494

08003680 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003680:	b480      	push	{r7}
 8003682:	b085      	sub	sp, #20
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a42      	ldr	r2, [pc, #264]	@ (8003798 <DMA_CalcBaseAndBitshift+0x118>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d04a      	beq.n	8003728 <DMA_CalcBaseAndBitshift+0xa8>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a41      	ldr	r2, [pc, #260]	@ (800379c <DMA_CalcBaseAndBitshift+0x11c>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d045      	beq.n	8003728 <DMA_CalcBaseAndBitshift+0xa8>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a3f      	ldr	r2, [pc, #252]	@ (80037a0 <DMA_CalcBaseAndBitshift+0x120>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d040      	beq.n	8003728 <DMA_CalcBaseAndBitshift+0xa8>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a3e      	ldr	r2, [pc, #248]	@ (80037a4 <DMA_CalcBaseAndBitshift+0x124>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d03b      	beq.n	8003728 <DMA_CalcBaseAndBitshift+0xa8>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a3c      	ldr	r2, [pc, #240]	@ (80037a8 <DMA_CalcBaseAndBitshift+0x128>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d036      	beq.n	8003728 <DMA_CalcBaseAndBitshift+0xa8>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a3b      	ldr	r2, [pc, #236]	@ (80037ac <DMA_CalcBaseAndBitshift+0x12c>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d031      	beq.n	8003728 <DMA_CalcBaseAndBitshift+0xa8>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a39      	ldr	r2, [pc, #228]	@ (80037b0 <DMA_CalcBaseAndBitshift+0x130>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d02c      	beq.n	8003728 <DMA_CalcBaseAndBitshift+0xa8>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a38      	ldr	r2, [pc, #224]	@ (80037b4 <DMA_CalcBaseAndBitshift+0x134>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d027      	beq.n	8003728 <DMA_CalcBaseAndBitshift+0xa8>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a36      	ldr	r2, [pc, #216]	@ (80037b8 <DMA_CalcBaseAndBitshift+0x138>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d022      	beq.n	8003728 <DMA_CalcBaseAndBitshift+0xa8>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a35      	ldr	r2, [pc, #212]	@ (80037bc <DMA_CalcBaseAndBitshift+0x13c>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d01d      	beq.n	8003728 <DMA_CalcBaseAndBitshift+0xa8>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a33      	ldr	r2, [pc, #204]	@ (80037c0 <DMA_CalcBaseAndBitshift+0x140>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d018      	beq.n	8003728 <DMA_CalcBaseAndBitshift+0xa8>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a32      	ldr	r2, [pc, #200]	@ (80037c4 <DMA_CalcBaseAndBitshift+0x144>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d013      	beq.n	8003728 <DMA_CalcBaseAndBitshift+0xa8>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a30      	ldr	r2, [pc, #192]	@ (80037c8 <DMA_CalcBaseAndBitshift+0x148>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d00e      	beq.n	8003728 <DMA_CalcBaseAndBitshift+0xa8>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a2f      	ldr	r2, [pc, #188]	@ (80037cc <DMA_CalcBaseAndBitshift+0x14c>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d009      	beq.n	8003728 <DMA_CalcBaseAndBitshift+0xa8>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a2d      	ldr	r2, [pc, #180]	@ (80037d0 <DMA_CalcBaseAndBitshift+0x150>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d004      	beq.n	8003728 <DMA_CalcBaseAndBitshift+0xa8>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a2c      	ldr	r2, [pc, #176]	@ (80037d4 <DMA_CalcBaseAndBitshift+0x154>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d101      	bne.n	800372c <DMA_CalcBaseAndBitshift+0xac>
 8003728:	2301      	movs	r3, #1
 800372a:	e000      	b.n	800372e <DMA_CalcBaseAndBitshift+0xae>
 800372c:	2300      	movs	r3, #0
 800372e:	2b00      	cmp	r3, #0
 8003730:	d024      	beq.n	800377c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	b2db      	uxtb	r3, r3
 8003738:	3b10      	subs	r3, #16
 800373a:	4a27      	ldr	r2, [pc, #156]	@ (80037d8 <DMA_CalcBaseAndBitshift+0x158>)
 800373c:	fba2 2303 	umull	r2, r3, r2, r3
 8003740:	091b      	lsrs	r3, r3, #4
 8003742:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	f003 0307 	and.w	r3, r3, #7
 800374a:	4a24      	ldr	r2, [pc, #144]	@ (80037dc <DMA_CalcBaseAndBitshift+0x15c>)
 800374c:	5cd3      	ldrb	r3, [r2, r3]
 800374e:	461a      	mov	r2, r3
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	2b03      	cmp	r3, #3
 8003758:	d908      	bls.n	800376c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	461a      	mov	r2, r3
 8003760:	4b1f      	ldr	r3, [pc, #124]	@ (80037e0 <DMA_CalcBaseAndBitshift+0x160>)
 8003762:	4013      	ands	r3, r2
 8003764:	1d1a      	adds	r2, r3, #4
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	659a      	str	r2, [r3, #88]	@ 0x58
 800376a:	e00d      	b.n	8003788 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	461a      	mov	r2, r3
 8003772:	4b1b      	ldr	r3, [pc, #108]	@ (80037e0 <DMA_CalcBaseAndBitshift+0x160>)
 8003774:	4013      	ands	r3, r2
 8003776:	687a      	ldr	r2, [r7, #4]
 8003778:	6593      	str	r3, [r2, #88]	@ 0x58
 800377a:	e005      	b.n	8003788 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800378c:	4618      	mov	r0, r3
 800378e:	3714      	adds	r7, #20
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr
 8003798:	40020010 	.word	0x40020010
 800379c:	40020028 	.word	0x40020028
 80037a0:	40020040 	.word	0x40020040
 80037a4:	40020058 	.word	0x40020058
 80037a8:	40020070 	.word	0x40020070
 80037ac:	40020088 	.word	0x40020088
 80037b0:	400200a0 	.word	0x400200a0
 80037b4:	400200b8 	.word	0x400200b8
 80037b8:	40020410 	.word	0x40020410
 80037bc:	40020428 	.word	0x40020428
 80037c0:	40020440 	.word	0x40020440
 80037c4:	40020458 	.word	0x40020458
 80037c8:	40020470 	.word	0x40020470
 80037cc:	40020488 	.word	0x40020488
 80037d0:	400204a0 	.word	0x400204a0
 80037d4:	400204b8 	.word	0x400204b8
 80037d8:	aaaaaaab 	.word	0xaaaaaaab
 80037dc:	0800be24 	.word	0x0800be24
 80037e0:	fffffc00 	.word	0xfffffc00

080037e4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b085      	sub	sp, #20
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037ec:	2300      	movs	r3, #0
 80037ee:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	699b      	ldr	r3, [r3, #24]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d120      	bne.n	800383a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037fc:	2b03      	cmp	r3, #3
 80037fe:	d858      	bhi.n	80038b2 <DMA_CheckFifoParam+0xce>
 8003800:	a201      	add	r2, pc, #4	@ (adr r2, 8003808 <DMA_CheckFifoParam+0x24>)
 8003802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003806:	bf00      	nop
 8003808:	08003819 	.word	0x08003819
 800380c:	0800382b 	.word	0x0800382b
 8003810:	08003819 	.word	0x08003819
 8003814:	080038b3 	.word	0x080038b3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800381c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003820:	2b00      	cmp	r3, #0
 8003822:	d048      	beq.n	80038b6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003824:	2301      	movs	r3, #1
 8003826:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003828:	e045      	b.n	80038b6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800382e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003832:	d142      	bne.n	80038ba <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003838:	e03f      	b.n	80038ba <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	699b      	ldr	r3, [r3, #24]
 800383e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003842:	d123      	bne.n	800388c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003848:	2b03      	cmp	r3, #3
 800384a:	d838      	bhi.n	80038be <DMA_CheckFifoParam+0xda>
 800384c:	a201      	add	r2, pc, #4	@ (adr r2, 8003854 <DMA_CheckFifoParam+0x70>)
 800384e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003852:	bf00      	nop
 8003854:	08003865 	.word	0x08003865
 8003858:	0800386b 	.word	0x0800386b
 800385c:	08003865 	.word	0x08003865
 8003860:	0800387d 	.word	0x0800387d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	73fb      	strb	r3, [r7, #15]
        break;
 8003868:	e030      	b.n	80038cc <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800386e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003872:	2b00      	cmp	r3, #0
 8003874:	d025      	beq.n	80038c2 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800387a:	e022      	b.n	80038c2 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003880:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003884:	d11f      	bne.n	80038c6 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800388a:	e01c      	b.n	80038c6 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003890:	2b02      	cmp	r3, #2
 8003892:	d902      	bls.n	800389a <DMA_CheckFifoParam+0xb6>
 8003894:	2b03      	cmp	r3, #3
 8003896:	d003      	beq.n	80038a0 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003898:	e018      	b.n	80038cc <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	73fb      	strb	r3, [r7, #15]
        break;
 800389e:	e015      	b.n	80038cc <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038a4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d00e      	beq.n	80038ca <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	73fb      	strb	r3, [r7, #15]
    break;
 80038b0:	e00b      	b.n	80038ca <DMA_CheckFifoParam+0xe6>
        break;
 80038b2:	bf00      	nop
 80038b4:	e00a      	b.n	80038cc <DMA_CheckFifoParam+0xe8>
        break;
 80038b6:	bf00      	nop
 80038b8:	e008      	b.n	80038cc <DMA_CheckFifoParam+0xe8>
        break;
 80038ba:	bf00      	nop
 80038bc:	e006      	b.n	80038cc <DMA_CheckFifoParam+0xe8>
        break;
 80038be:	bf00      	nop
 80038c0:	e004      	b.n	80038cc <DMA_CheckFifoParam+0xe8>
        break;
 80038c2:	bf00      	nop
 80038c4:	e002      	b.n	80038cc <DMA_CheckFifoParam+0xe8>
        break;
 80038c6:	bf00      	nop
 80038c8:	e000      	b.n	80038cc <DMA_CheckFifoParam+0xe8>
    break;
 80038ca:	bf00      	nop
    }
  }

  return status;
 80038cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3714      	adds	r7, #20
 80038d2:	46bd      	mov	sp, r7
 80038d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d8:	4770      	bx	lr
 80038da:	bf00      	nop

080038dc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80038dc:	b480      	push	{r7}
 80038de:	b085      	sub	sp, #20
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a38      	ldr	r2, [pc, #224]	@ (80039d0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d022      	beq.n	800393a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a36      	ldr	r2, [pc, #216]	@ (80039d4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d01d      	beq.n	800393a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a35      	ldr	r2, [pc, #212]	@ (80039d8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d018      	beq.n	800393a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a33      	ldr	r2, [pc, #204]	@ (80039dc <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d013      	beq.n	800393a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a32      	ldr	r2, [pc, #200]	@ (80039e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d00e      	beq.n	800393a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a30      	ldr	r2, [pc, #192]	@ (80039e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d009      	beq.n	800393a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a2f      	ldr	r2, [pc, #188]	@ (80039e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d004      	beq.n	800393a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a2d      	ldr	r2, [pc, #180]	@ (80039ec <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d101      	bne.n	800393e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800393a:	2301      	movs	r3, #1
 800393c:	e000      	b.n	8003940 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800393e:	2300      	movs	r3, #0
 8003940:	2b00      	cmp	r3, #0
 8003942:	d01a      	beq.n	800397a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	b2db      	uxtb	r3, r3
 800394a:	3b08      	subs	r3, #8
 800394c:	4a28      	ldr	r2, [pc, #160]	@ (80039f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800394e:	fba2 2303 	umull	r2, r3, r2, r3
 8003952:	091b      	lsrs	r3, r3, #4
 8003954:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003956:	68fa      	ldr	r2, [r7, #12]
 8003958:	4b26      	ldr	r3, [pc, #152]	@ (80039f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800395a:	4413      	add	r3, r2
 800395c:	009b      	lsls	r3, r3, #2
 800395e:	461a      	mov	r2, r3
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	4a24      	ldr	r2, [pc, #144]	@ (80039f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8003968:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	f003 031f 	and.w	r3, r3, #31
 8003970:	2201      	movs	r2, #1
 8003972:	409a      	lsls	r2, r3
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8003978:	e024      	b.n	80039c4 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	b2db      	uxtb	r3, r3
 8003980:	3b10      	subs	r3, #16
 8003982:	4a1e      	ldr	r2, [pc, #120]	@ (80039fc <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8003984:	fba2 2303 	umull	r2, r3, r2, r3
 8003988:	091b      	lsrs	r3, r3, #4
 800398a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	4a1c      	ldr	r2, [pc, #112]	@ (8003a00 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d806      	bhi.n	80039a2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	4a1b      	ldr	r2, [pc, #108]	@ (8003a04 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d902      	bls.n	80039a2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	3308      	adds	r3, #8
 80039a0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80039a2:	68fa      	ldr	r2, [r7, #12]
 80039a4:	4b18      	ldr	r3, [pc, #96]	@ (8003a08 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80039a6:	4413      	add	r3, r2
 80039a8:	009b      	lsls	r3, r3, #2
 80039aa:	461a      	mov	r2, r3
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	4a16      	ldr	r2, [pc, #88]	@ (8003a0c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80039b4:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	f003 031f 	and.w	r3, r3, #31
 80039bc:	2201      	movs	r2, #1
 80039be:	409a      	lsls	r2, r3
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80039c4:	bf00      	nop
 80039c6:	3714      	adds	r7, #20
 80039c8:	46bd      	mov	sp, r7
 80039ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ce:	4770      	bx	lr
 80039d0:	58025408 	.word	0x58025408
 80039d4:	5802541c 	.word	0x5802541c
 80039d8:	58025430 	.word	0x58025430
 80039dc:	58025444 	.word	0x58025444
 80039e0:	58025458 	.word	0x58025458
 80039e4:	5802546c 	.word	0x5802546c
 80039e8:	58025480 	.word	0x58025480
 80039ec:	58025494 	.word	0x58025494
 80039f0:	cccccccd 	.word	0xcccccccd
 80039f4:	16009600 	.word	0x16009600
 80039f8:	58025880 	.word	0x58025880
 80039fc:	aaaaaaab 	.word	0xaaaaaaab
 8003a00:	400204b8 	.word	0x400204b8
 8003a04:	4002040f 	.word	0x4002040f
 8003a08:	10008200 	.word	0x10008200
 8003a0c:	40020880 	.word	0x40020880

08003a10 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b085      	sub	sp, #20
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	b2db      	uxtb	r3, r3
 8003a1e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d04a      	beq.n	8003abc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2b08      	cmp	r3, #8
 8003a2a:	d847      	bhi.n	8003abc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a25      	ldr	r2, [pc, #148]	@ (8003ac8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d022      	beq.n	8003a7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a24      	ldr	r2, [pc, #144]	@ (8003acc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d01d      	beq.n	8003a7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a22      	ldr	r2, [pc, #136]	@ (8003ad0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d018      	beq.n	8003a7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a21      	ldr	r2, [pc, #132]	@ (8003ad4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d013      	beq.n	8003a7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a1f      	ldr	r2, [pc, #124]	@ (8003ad8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d00e      	beq.n	8003a7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a1e      	ldr	r2, [pc, #120]	@ (8003adc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d009      	beq.n	8003a7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a1c      	ldr	r2, [pc, #112]	@ (8003ae0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d004      	beq.n	8003a7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a1b      	ldr	r2, [pc, #108]	@ (8003ae4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d101      	bne.n	8003a80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	e000      	b.n	8003a82 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8003a80:	2300      	movs	r3, #0
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d00a      	beq.n	8003a9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8003a86:	68fa      	ldr	r2, [r7, #12]
 8003a88:	4b17      	ldr	r3, [pc, #92]	@ (8003ae8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8003a8a:	4413      	add	r3, r2
 8003a8c:	009b      	lsls	r3, r3, #2
 8003a8e:	461a      	mov	r2, r3
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	4a15      	ldr	r2, [pc, #84]	@ (8003aec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8003a98:	671a      	str	r2, [r3, #112]	@ 0x70
 8003a9a:	e009      	b.n	8003ab0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003a9c:	68fa      	ldr	r2, [r7, #12]
 8003a9e:	4b14      	ldr	r3, [pc, #80]	@ (8003af0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8003aa0:	4413      	add	r3, r2
 8003aa2:	009b      	lsls	r3, r3, #2
 8003aa4:	461a      	mov	r2, r3
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	4a11      	ldr	r2, [pc, #68]	@ (8003af4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8003aae:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	3b01      	subs	r3, #1
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	409a      	lsls	r2, r3
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8003abc:	bf00      	nop
 8003abe:	3714      	adds	r7, #20
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac6:	4770      	bx	lr
 8003ac8:	58025408 	.word	0x58025408
 8003acc:	5802541c 	.word	0x5802541c
 8003ad0:	58025430 	.word	0x58025430
 8003ad4:	58025444 	.word	0x58025444
 8003ad8:	58025458 	.word	0x58025458
 8003adc:	5802546c 	.word	0x5802546c
 8003ae0:	58025480 	.word	0x58025480
 8003ae4:	58025494 	.word	0x58025494
 8003ae8:	1600963f 	.word	0x1600963f
 8003aec:	58025940 	.word	0x58025940
 8003af0:	1000823f 	.word	0x1000823f
 8003af4:	40020940 	.word	0x40020940

08003af8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b089      	sub	sp, #36	@ 0x24
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
 8003b00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003b02:	2300      	movs	r3, #0
 8003b04:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003b06:	4b89      	ldr	r3, [pc, #548]	@ (8003d2c <HAL_GPIO_Init+0x234>)
 8003b08:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003b0a:	e194      	b.n	8003e36 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	2101      	movs	r1, #1
 8003b12:	69fb      	ldr	r3, [r7, #28]
 8003b14:	fa01 f303 	lsl.w	r3, r1, r3
 8003b18:	4013      	ands	r3, r2
 8003b1a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	f000 8186 	beq.w	8003e30 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	f003 0303 	and.w	r3, r3, #3
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	d005      	beq.n	8003b3c <HAL_GPIO_Init+0x44>
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	f003 0303 	and.w	r3, r3, #3
 8003b38:	2b02      	cmp	r3, #2
 8003b3a:	d130      	bne.n	8003b9e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003b42:	69fb      	ldr	r3, [r7, #28]
 8003b44:	005b      	lsls	r3, r3, #1
 8003b46:	2203      	movs	r2, #3
 8003b48:	fa02 f303 	lsl.w	r3, r2, r3
 8003b4c:	43db      	mvns	r3, r3
 8003b4e:	69ba      	ldr	r2, [r7, #24]
 8003b50:	4013      	ands	r3, r2
 8003b52:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	68da      	ldr	r2, [r3, #12]
 8003b58:	69fb      	ldr	r3, [r7, #28]
 8003b5a:	005b      	lsls	r3, r3, #1
 8003b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b60:	69ba      	ldr	r2, [r7, #24]
 8003b62:	4313      	orrs	r3, r2
 8003b64:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	69ba      	ldr	r2, [r7, #24]
 8003b6a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003b72:	2201      	movs	r2, #1
 8003b74:	69fb      	ldr	r3, [r7, #28]
 8003b76:	fa02 f303 	lsl.w	r3, r2, r3
 8003b7a:	43db      	mvns	r3, r3
 8003b7c:	69ba      	ldr	r2, [r7, #24]
 8003b7e:	4013      	ands	r3, r2
 8003b80:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	091b      	lsrs	r3, r3, #4
 8003b88:	f003 0201 	and.w	r2, r3, #1
 8003b8c:	69fb      	ldr	r3, [r7, #28]
 8003b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b92:	69ba      	ldr	r2, [r7, #24]
 8003b94:	4313      	orrs	r3, r2
 8003b96:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	69ba      	ldr	r2, [r7, #24]
 8003b9c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	f003 0303 	and.w	r3, r3, #3
 8003ba6:	2b03      	cmp	r3, #3
 8003ba8:	d017      	beq.n	8003bda <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	68db      	ldr	r3, [r3, #12]
 8003bae:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003bb0:	69fb      	ldr	r3, [r7, #28]
 8003bb2:	005b      	lsls	r3, r3, #1
 8003bb4:	2203      	movs	r2, #3
 8003bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bba:	43db      	mvns	r3, r3
 8003bbc:	69ba      	ldr	r2, [r7, #24]
 8003bbe:	4013      	ands	r3, r2
 8003bc0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	689a      	ldr	r2, [r3, #8]
 8003bc6:	69fb      	ldr	r3, [r7, #28]
 8003bc8:	005b      	lsls	r3, r3, #1
 8003bca:	fa02 f303 	lsl.w	r3, r2, r3
 8003bce:	69ba      	ldr	r2, [r7, #24]
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	69ba      	ldr	r2, [r7, #24]
 8003bd8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	f003 0303 	and.w	r3, r3, #3
 8003be2:	2b02      	cmp	r3, #2
 8003be4:	d123      	bne.n	8003c2e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003be6:	69fb      	ldr	r3, [r7, #28]
 8003be8:	08da      	lsrs	r2, r3, #3
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	3208      	adds	r2, #8
 8003bee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003bf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003bf4:	69fb      	ldr	r3, [r7, #28]
 8003bf6:	f003 0307 	and.w	r3, r3, #7
 8003bfa:	009b      	lsls	r3, r3, #2
 8003bfc:	220f      	movs	r2, #15
 8003bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8003c02:	43db      	mvns	r3, r3
 8003c04:	69ba      	ldr	r2, [r7, #24]
 8003c06:	4013      	ands	r3, r2
 8003c08:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	691a      	ldr	r2, [r3, #16]
 8003c0e:	69fb      	ldr	r3, [r7, #28]
 8003c10:	f003 0307 	and.w	r3, r3, #7
 8003c14:	009b      	lsls	r3, r3, #2
 8003c16:	fa02 f303 	lsl.w	r3, r2, r3
 8003c1a:	69ba      	ldr	r2, [r7, #24]
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003c20:	69fb      	ldr	r3, [r7, #28]
 8003c22:	08da      	lsrs	r2, r3, #3
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	3208      	adds	r2, #8
 8003c28:	69b9      	ldr	r1, [r7, #24]
 8003c2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003c34:	69fb      	ldr	r3, [r7, #28]
 8003c36:	005b      	lsls	r3, r3, #1
 8003c38:	2203      	movs	r2, #3
 8003c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c3e:	43db      	mvns	r3, r3
 8003c40:	69ba      	ldr	r2, [r7, #24]
 8003c42:	4013      	ands	r3, r2
 8003c44:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	f003 0203 	and.w	r2, r3, #3
 8003c4e:	69fb      	ldr	r3, [r7, #28]
 8003c50:	005b      	lsls	r3, r3, #1
 8003c52:	fa02 f303 	lsl.w	r3, r2, r3
 8003c56:	69ba      	ldr	r2, [r7, #24]
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	69ba      	ldr	r2, [r7, #24]
 8003c60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	f000 80e0 	beq.w	8003e30 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c70:	4b2f      	ldr	r3, [pc, #188]	@ (8003d30 <HAL_GPIO_Init+0x238>)
 8003c72:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8003c76:	4a2e      	ldr	r2, [pc, #184]	@ (8003d30 <HAL_GPIO_Init+0x238>)
 8003c78:	f043 0302 	orr.w	r3, r3, #2
 8003c7c:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8003c80:	4b2b      	ldr	r3, [pc, #172]	@ (8003d30 <HAL_GPIO_Init+0x238>)
 8003c82:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8003c86:	f003 0302 	and.w	r3, r3, #2
 8003c8a:	60fb      	str	r3, [r7, #12]
 8003c8c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003c8e:	4a29      	ldr	r2, [pc, #164]	@ (8003d34 <HAL_GPIO_Init+0x23c>)
 8003c90:	69fb      	ldr	r3, [r7, #28]
 8003c92:	089b      	lsrs	r3, r3, #2
 8003c94:	3302      	adds	r3, #2
 8003c96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003c9c:	69fb      	ldr	r3, [r7, #28]
 8003c9e:	f003 0303 	and.w	r3, r3, #3
 8003ca2:	009b      	lsls	r3, r3, #2
 8003ca4:	220f      	movs	r2, #15
 8003ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8003caa:	43db      	mvns	r3, r3
 8003cac:	69ba      	ldr	r2, [r7, #24]
 8003cae:	4013      	ands	r3, r2
 8003cb0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	4a20      	ldr	r2, [pc, #128]	@ (8003d38 <HAL_GPIO_Init+0x240>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d052      	beq.n	8003d60 <HAL_GPIO_Init+0x268>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	4a1f      	ldr	r2, [pc, #124]	@ (8003d3c <HAL_GPIO_Init+0x244>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d031      	beq.n	8003d26 <HAL_GPIO_Init+0x22e>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	4a1e      	ldr	r2, [pc, #120]	@ (8003d40 <HAL_GPIO_Init+0x248>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d02b      	beq.n	8003d22 <HAL_GPIO_Init+0x22a>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	4a1d      	ldr	r2, [pc, #116]	@ (8003d44 <HAL_GPIO_Init+0x24c>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d025      	beq.n	8003d1e <HAL_GPIO_Init+0x226>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	4a1c      	ldr	r2, [pc, #112]	@ (8003d48 <HAL_GPIO_Init+0x250>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d01f      	beq.n	8003d1a <HAL_GPIO_Init+0x222>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	4a1b      	ldr	r2, [pc, #108]	@ (8003d4c <HAL_GPIO_Init+0x254>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d019      	beq.n	8003d16 <HAL_GPIO_Init+0x21e>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	4a1a      	ldr	r2, [pc, #104]	@ (8003d50 <HAL_GPIO_Init+0x258>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d013      	beq.n	8003d12 <HAL_GPIO_Init+0x21a>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	4a19      	ldr	r2, [pc, #100]	@ (8003d54 <HAL_GPIO_Init+0x25c>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d00d      	beq.n	8003d0e <HAL_GPIO_Init+0x216>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	4a18      	ldr	r2, [pc, #96]	@ (8003d58 <HAL_GPIO_Init+0x260>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d007      	beq.n	8003d0a <HAL_GPIO_Init+0x212>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	4a17      	ldr	r2, [pc, #92]	@ (8003d5c <HAL_GPIO_Init+0x264>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d101      	bne.n	8003d06 <HAL_GPIO_Init+0x20e>
 8003d02:	2309      	movs	r3, #9
 8003d04:	e02d      	b.n	8003d62 <HAL_GPIO_Init+0x26a>
 8003d06:	230a      	movs	r3, #10
 8003d08:	e02b      	b.n	8003d62 <HAL_GPIO_Init+0x26a>
 8003d0a:	2308      	movs	r3, #8
 8003d0c:	e029      	b.n	8003d62 <HAL_GPIO_Init+0x26a>
 8003d0e:	2307      	movs	r3, #7
 8003d10:	e027      	b.n	8003d62 <HAL_GPIO_Init+0x26a>
 8003d12:	2306      	movs	r3, #6
 8003d14:	e025      	b.n	8003d62 <HAL_GPIO_Init+0x26a>
 8003d16:	2305      	movs	r3, #5
 8003d18:	e023      	b.n	8003d62 <HAL_GPIO_Init+0x26a>
 8003d1a:	2304      	movs	r3, #4
 8003d1c:	e021      	b.n	8003d62 <HAL_GPIO_Init+0x26a>
 8003d1e:	2303      	movs	r3, #3
 8003d20:	e01f      	b.n	8003d62 <HAL_GPIO_Init+0x26a>
 8003d22:	2302      	movs	r3, #2
 8003d24:	e01d      	b.n	8003d62 <HAL_GPIO_Init+0x26a>
 8003d26:	2301      	movs	r3, #1
 8003d28:	e01b      	b.n	8003d62 <HAL_GPIO_Init+0x26a>
 8003d2a:	bf00      	nop
 8003d2c:	58000080 	.word	0x58000080
 8003d30:	58024400 	.word	0x58024400
 8003d34:	58000400 	.word	0x58000400
 8003d38:	58020000 	.word	0x58020000
 8003d3c:	58020400 	.word	0x58020400
 8003d40:	58020800 	.word	0x58020800
 8003d44:	58020c00 	.word	0x58020c00
 8003d48:	58021000 	.word	0x58021000
 8003d4c:	58021400 	.word	0x58021400
 8003d50:	58021800 	.word	0x58021800
 8003d54:	58021c00 	.word	0x58021c00
 8003d58:	58022000 	.word	0x58022000
 8003d5c:	58022400 	.word	0x58022400
 8003d60:	2300      	movs	r3, #0
 8003d62:	69fa      	ldr	r2, [r7, #28]
 8003d64:	f002 0203 	and.w	r2, r2, #3
 8003d68:	0092      	lsls	r2, r2, #2
 8003d6a:	4093      	lsls	r3, r2
 8003d6c:	69ba      	ldr	r2, [r7, #24]
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003d72:	4938      	ldr	r1, [pc, #224]	@ (8003e54 <HAL_GPIO_Init+0x35c>)
 8003d74:	69fb      	ldr	r3, [r7, #28]
 8003d76:	089b      	lsrs	r3, r3, #2
 8003d78:	3302      	adds	r3, #2
 8003d7a:	69ba      	ldr	r2, [r7, #24]
 8003d7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003d80:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	43db      	mvns	r3, r3
 8003d8c:	69ba      	ldr	r2, [r7, #24]
 8003d8e:	4013      	ands	r3, r2
 8003d90:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d003      	beq.n	8003da6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003d9e:	69ba      	ldr	r2, [r7, #24]
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	4313      	orrs	r3, r2
 8003da4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003da6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003daa:	69bb      	ldr	r3, [r7, #24]
 8003dac:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003dae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	43db      	mvns	r3, r3
 8003dba:	69ba      	ldr	r2, [r7, #24]
 8003dbc:	4013      	ands	r3, r2
 8003dbe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d003      	beq.n	8003dd4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003dcc:	69ba      	ldr	r2, [r7, #24]
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003dd4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003dd8:	69bb      	ldr	r3, [r7, #24]
 8003dda:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	43db      	mvns	r3, r3
 8003de6:	69ba      	ldr	r2, [r7, #24]
 8003de8:	4013      	ands	r3, r2
 8003dea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d003      	beq.n	8003e00 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003df8:	69ba      	ldr	r2, [r7, #24]
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	69ba      	ldr	r2, [r7, #24]
 8003e04:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	43db      	mvns	r3, r3
 8003e10:	69ba      	ldr	r2, [r7, #24]
 8003e12:	4013      	ands	r3, r2
 8003e14:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d003      	beq.n	8003e2a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8003e22:	69ba      	ldr	r2, [r7, #24]
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	4313      	orrs	r3, r2
 8003e28:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	69ba      	ldr	r2, [r7, #24]
 8003e2e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003e30:	69fb      	ldr	r3, [r7, #28]
 8003e32:	3301      	adds	r3, #1
 8003e34:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	681a      	ldr	r2, [r3, #0]
 8003e3a:	69fb      	ldr	r3, [r7, #28]
 8003e3c:	fa22 f303 	lsr.w	r3, r2, r3
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	f47f ae63 	bne.w	8003b0c <HAL_GPIO_Init+0x14>
  }
}
 8003e46:	bf00      	nop
 8003e48:	bf00      	nop
 8003e4a:	3724      	adds	r7, #36	@ 0x24
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e52:	4770      	bx	lr
 8003e54:	58000400 	.word	0x58000400

08003e58 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b082      	sub	sp, #8
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	4603      	mov	r3, r0
 8003e60:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8003e62:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e66:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003e6a:	88fb      	ldrh	r3, [r7, #6]
 8003e6c:	4013      	ands	r3, r2
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d008      	beq.n	8003e84 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003e72:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003e76:	88fb      	ldrh	r3, [r7, #6]
 8003e78:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003e7c:	88fb      	ldrh	r3, [r7, #6]
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f000 f804 	bl	8003e8c <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8003e84:	bf00      	nop
 8003e86:	3708      	adds	r7, #8
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}

08003e8c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b083      	sub	sp, #12
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	4603      	mov	r3, r0
 8003e94:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003e96:	bf00      	nop
 8003e98:	370c      	adds	r7, #12
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea0:	4770      	bx	lr
	...

08003ea4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b082      	sub	sp, #8
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d101      	bne.n	8003eb6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e08b      	b.n	8003fce <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ebc:	b2db      	uxtb	r3, r3
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d106      	bne.n	8003ed0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	f7fc fc8e 	bl	80007ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2224      	movs	r2, #36	@ 0x24
 8003ed4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f022 0201 	bic.w	r2, r2, #1
 8003ee6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	685a      	ldr	r2, [r3, #4]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003ef4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	689a      	ldr	r2, [r3, #8]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003f04:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	68db      	ldr	r3, [r3, #12]
 8003f0a:	2b01      	cmp	r3, #1
 8003f0c:	d107      	bne.n	8003f1e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	689a      	ldr	r2, [r3, #8]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003f1a:	609a      	str	r2, [r3, #8]
 8003f1c:	e006      	b.n	8003f2c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	689a      	ldr	r2, [r3, #8]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003f2a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	68db      	ldr	r3, [r3, #12]
 8003f30:	2b02      	cmp	r3, #2
 8003f32:	d108      	bne.n	8003f46 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	685a      	ldr	r2, [r3, #4]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003f42:	605a      	str	r2, [r3, #4]
 8003f44:	e007      	b.n	8003f56 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	685a      	ldr	r2, [r3, #4]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003f54:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	6859      	ldr	r1, [r3, #4]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	4b1d      	ldr	r3, [pc, #116]	@ (8003fd8 <HAL_I2C_Init+0x134>)
 8003f62:	430b      	orrs	r3, r1
 8003f64:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	68da      	ldr	r2, [r3, #12]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003f74:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	691a      	ldr	r2, [r3, #16]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	695b      	ldr	r3, [r3, #20]
 8003f7e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	699b      	ldr	r3, [r3, #24]
 8003f86:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	430a      	orrs	r2, r1
 8003f8e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	69d9      	ldr	r1, [r3, #28]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6a1a      	ldr	r2, [r3, #32]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	430a      	orrs	r2, r1
 8003f9e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	681a      	ldr	r2, [r3, #0]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f042 0201 	orr.w	r2, r2, #1
 8003fae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2220      	movs	r2, #32
 8003fba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003fcc:	2300      	movs	r3, #0
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	3708      	adds	r7, #8
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}
 8003fd6:	bf00      	nop
 8003fd8:	02008000 	.word	0x02008000

08003fdc <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b08a      	sub	sp, #40	@ 0x28
 8003fe0:	af02      	add	r7, sp, #8
 8003fe2:	60f8      	str	r0, [r7, #12]
 8003fe4:	607a      	str	r2, [r7, #4]
 8003fe6:	461a      	mov	r2, r3
 8003fe8:	460b      	mov	r3, r1
 8003fea:	817b      	strh	r3, [r7, #10]
 8003fec:	4613      	mov	r3, r2
 8003fee:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;
  uint32_t sizetoxfer = 0U;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	61bb      	str	r3, [r7, #24]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ffa:	b2db      	uxtb	r3, r3
 8003ffc:	2b20      	cmp	r3, #32
 8003ffe:	f040 80ef 	bne.w	80041e0 <HAL_I2C_Master_Transmit_DMA+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	699b      	ldr	r3, [r3, #24]
 8004008:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800400c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004010:	d101      	bne.n	8004016 <HAL_I2C_Master_Transmit_DMA+0x3a>
    {
      return HAL_BUSY;
 8004012:	2302      	movs	r3, #2
 8004014:	e0e5      	b.n	80041e2 <HAL_I2C_Master_Transmit_DMA+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800401c:	2b01      	cmp	r3, #1
 800401e:	d101      	bne.n	8004024 <HAL_I2C_Master_Transmit_DMA+0x48>
 8004020:	2302      	movs	r3, #2
 8004022:	e0de      	b.n	80041e2 <HAL_I2C_Master_Transmit_DMA+0x206>
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2201      	movs	r2, #1
 8004028:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2221      	movs	r2, #33	@ 0x21
 8004030:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2210      	movs	r2, #16
 8004038:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2200      	movs	r2, #0
 8004040:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	687a      	ldr	r2, [r7, #4]
 8004046:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	893a      	ldrh	r2, [r7, #8]
 800404c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	4a66      	ldr	r2, [pc, #408]	@ (80041ec <HAL_I2C_Master_Transmit_DMA+0x210>)
 8004052:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	4a66      	ldr	r2, [pc, #408]	@ (80041f0 <HAL_I2C_Master_Transmit_DMA+0x214>)
 8004058:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800405e:	b29b      	uxth	r3, r3
 8004060:	2bff      	cmp	r3, #255	@ 0xff
 8004062:	d906      	bls.n	8004072 <HAL_I2C_Master_Transmit_DMA+0x96>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	22ff      	movs	r2, #255	@ 0xff
 8004068:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800406a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800406e:	61fb      	str	r3, [r7, #28]
 8004070:	e007      	b.n	8004082 <HAL_I2C_Master_Transmit_DMA+0xa6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004076:	b29a      	uxth	r2, r3
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800407c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004080:	61fb      	str	r3, [r7, #28]
    }

    if (hi2c->XferSize > 0U)
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004086:	2b00      	cmp	r3, #0
 8004088:	d01a      	beq.n	80040c0 <HAL_I2C_Master_Transmit_DMA+0xe4>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800408e:	781a      	ldrb	r2, [r3, #0]
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800409a:	1c5a      	adds	r2, r3, #1
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	625a      	str	r2, [r3, #36]	@ 0x24

      sizetoxfer = hi2c->XferSize;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040a4:	61bb      	str	r3, [r7, #24]
      hi2c->XferCount--;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040aa:	b29b      	uxth	r3, r3
 80040ac:	3b01      	subs	r3, #1
 80040ae:	b29a      	uxth	r2, r3
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040b8:	3b01      	subs	r3, #1
 80040ba:	b29a      	uxth	r2, r3
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    if (hi2c->XferSize > 0U)
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d074      	beq.n	80041b2 <HAL_I2C_Master_Transmit_DMA+0x1d6>
    {
      if (hi2c->hdmatx != NULL)
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d022      	beq.n	8004116 <HAL_I2C_Master_Transmit_DMA+0x13a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040d4:	4a47      	ldr	r2, [pc, #284]	@ (80041f4 <HAL_I2C_Master_Transmit_DMA+0x218>)
 80040d6:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040dc:	4a46      	ldr	r2, [pc, #280]	@ (80041f8 <HAL_I2C_Master_Transmit_DMA+0x21c>)
 80040de:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040e4:	2200      	movs	r2, #0
 80040e6:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmatx->XferAbortCallback = NULL;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040ec:	2200      	movs	r2, #0
 80040ee:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream or channel depends on Instance */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040f8:	4619      	mov	r1, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	3328      	adds	r3, #40	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8004100:	461a      	mov	r2, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8004106:	f7fd fcab 	bl	8001a60 <HAL_DMA_Start_IT>
 800410a:	4603      	mov	r3, r0
 800410c:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800410e:	7dfb      	ldrb	r3, [r7, #23]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d13a      	bne.n	800418a <HAL_I2C_Master_Transmit_DMA+0x1ae>
 8004114:	e013      	b.n	800413e <HAL_I2C_Master_Transmit_DMA+0x162>
        hi2c->State     = HAL_I2C_STATE_READY;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	2220      	movs	r2, #32
 800411a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2200      	movs	r2, #0
 8004122:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800412a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2200      	movs	r2, #0
 8004136:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	e051      	b.n	80041e2 <HAL_I2C_Master_Transmit_DMA+0x206>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U),
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004142:	b2db      	uxtb	r3, r3
 8004144:	3301      	adds	r3, #1
 8004146:	b2da      	uxtb	r2, r3
 8004148:	8979      	ldrh	r1, [r7, #10]
 800414a:	4b2c      	ldr	r3, [pc, #176]	@ (80041fc <HAL_I2C_Master_Transmit_DMA+0x220>)
 800414c:	9300      	str	r3, [sp, #0]
 800414e:	69fb      	ldr	r3, [r7, #28]
 8004150:	68f8      	ldr	r0, [r7, #12]
 8004152:	f001 feb9 	bl	8005ec8 <I2C_TransferConfig>
                           xfermode, I2C_GENERATE_START_WRITE);

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800415a:	b29a      	uxth	r2, r3
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004160:	1ad3      	subs	r3, r2, r3
 8004162:	b29a      	uxth	r2, r3
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2200      	movs	r2, #0
 800416c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8004170:	2110      	movs	r1, #16
 8004172:	68f8      	ldr	r0, [r7, #12]
 8004174:	f001 feda 	bl	8005f2c <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	681a      	ldr	r2, [r3, #0]
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004186:	601a      	str	r2, [r3, #0]
 8004188:	e028      	b.n	80041dc <HAL_I2C_Master_Transmit_DMA+0x200>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2220      	movs	r2, #32
 800418e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2200      	movs	r2, #0
 8004196:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800419e:	f043 0210 	orr.w	r2, r3, #16
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	2200      	movs	r2, #0
 80041aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	e017      	b.n	80041e2 <HAL_I2C_Master_Transmit_DMA+0x206>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	4a12      	ldr	r2, [pc, #72]	@ (8004200 <HAL_I2C_Master_Transmit_DMA+0x224>)
 80041b6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)sizetoxfer, I2C_AUTOEND_MODE,
 80041b8:	69bb      	ldr	r3, [r7, #24]
 80041ba:	b2da      	uxtb	r2, r3
 80041bc:	8979      	ldrh	r1, [r7, #10]
 80041be:	4b0f      	ldr	r3, [pc, #60]	@ (80041fc <HAL_I2C_Master_Transmit_DMA+0x220>)
 80041c0:	9300      	str	r3, [sp, #0]
 80041c2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80041c6:	68f8      	ldr	r0, [r7, #12]
 80041c8:	f001 fe7e 	bl	8005ec8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	2200      	movs	r2, #0
 80041d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 80041d4:	2101      	movs	r1, #1
 80041d6:	68f8      	ldr	r0, [r7, #12]
 80041d8:	f001 fea8 	bl	8005f2c <I2C_Enable_IRQ>
    }

    return HAL_OK;
 80041dc:	2300      	movs	r3, #0
 80041de:	e000      	b.n	80041e2 <HAL_I2C_Master_Transmit_DMA+0x206>
  }
  else
  {
    return HAL_BUSY;
 80041e0:	2302      	movs	r3, #2
  }
}
 80041e2:	4618      	mov	r0, r3
 80041e4:	3720      	adds	r7, #32
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}
 80041ea:	bf00      	nop
 80041ec:	ffff0000 	.word	0xffff0000
 80041f0:	0800481b 	.word	0x0800481b
 80041f4:	08005b83 	.word	0x08005b83
 80041f8:	08005c19 	.word	0x08005c19
 80041fc:	80002000 	.word	0x80002000
 8004200:	080043db 	.word	0x080043db

08004204 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b084      	sub	sp, #16
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	699b      	ldr	r3, [r3, #24]
 8004212:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004220:	2b00      	cmp	r3, #0
 8004222:	d005      	beq.n	8004230 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004228:	68ba      	ldr	r2, [r7, #8]
 800422a:	68f9      	ldr	r1, [r7, #12]
 800422c:	6878      	ldr	r0, [r7, #4]
 800422e:	4798      	blx	r3
  }
}
 8004230:	bf00      	nop
 8004232:	3710      	adds	r7, #16
 8004234:	46bd      	mov	sp, r7
 8004236:	bd80      	pop	{r7, pc}

08004238 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b086      	sub	sp, #24
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	699b      	ldr	r3, [r3, #24]
 8004246:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004256:	2b00      	cmp	r3, #0
 8004258:	d00f      	beq.n	800427a <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8004260:	2b00      	cmp	r3, #0
 8004262:	d00a      	beq.n	800427a <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004268:	f043 0201 	orr.w	r2, r3, #1
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004278:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004280:	2b00      	cmp	r3, #0
 8004282:	d00f      	beq.n	80042a4 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800428a:	2b00      	cmp	r3, #0
 800428c:	d00a      	beq.n	80042a4 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004292:	f043 0208 	orr.w	r2, r3, #8
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80042a2:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d00f      	beq.n	80042ce <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d00a      	beq.n	80042ce <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042bc:	f043 0202 	orr.w	r2, r3, #2
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80042cc:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042d2:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	f003 030b 	and.w	r3, r3, #11
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d003      	beq.n	80042e6 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 80042de:	68f9      	ldr	r1, [r7, #12]
 80042e0:	6878      	ldr	r0, [r7, #4]
 80042e2:	f001 fb13 	bl	800590c <I2C_ITError>
  }
}
 80042e6:	bf00      	nop
 80042e8:	3718      	adds	r7, #24
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}

080042ee <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80042ee:	b480      	push	{r7}
 80042f0:	b083      	sub	sp, #12
 80042f2:	af00      	add	r7, sp, #0
 80042f4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80042f6:	bf00      	nop
 80042f8:	370c      	adds	r7, #12
 80042fa:	46bd      	mov	sp, r7
 80042fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004300:	4770      	bx	lr

08004302 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004302:	b480      	push	{r7}
 8004304:	b083      	sub	sp, #12
 8004306:	af00      	add	r7, sp, #0
 8004308:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800430a:	bf00      	nop
 800430c:	370c      	adds	r7, #12
 800430e:	46bd      	mov	sp, r7
 8004310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004314:	4770      	bx	lr

08004316 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004316:	b480      	push	{r7}
 8004318:	b083      	sub	sp, #12
 800431a:	af00      	add	r7, sp, #0
 800431c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800431e:	bf00      	nop
 8004320:	370c      	adds	r7, #12
 8004322:	46bd      	mov	sp, r7
 8004324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004328:	4770      	bx	lr

0800432a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800432a:	b480      	push	{r7}
 800432c:	b083      	sub	sp, #12
 800432e:	af00      	add	r7, sp, #0
 8004330:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004332:	bf00      	nop
 8004334:	370c      	adds	r7, #12
 8004336:	46bd      	mov	sp, r7
 8004338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433c:	4770      	bx	lr

0800433e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800433e:	b480      	push	{r7}
 8004340:	b083      	sub	sp, #12
 8004342:	af00      	add	r7, sp, #0
 8004344:	6078      	str	r0, [r7, #4]
 8004346:	460b      	mov	r3, r1
 8004348:	70fb      	strb	r3, [r7, #3]
 800434a:	4613      	mov	r3, r2
 800434c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800434e:	bf00      	nop
 8004350:	370c      	adds	r7, #12
 8004352:	46bd      	mov	sp, r7
 8004354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004358:	4770      	bx	lr

0800435a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800435a:	b480      	push	{r7}
 800435c:	b083      	sub	sp, #12
 800435e:	af00      	add	r7, sp, #0
 8004360:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8004362:	bf00      	nop
 8004364:	370c      	adds	r7, #12
 8004366:	46bd      	mov	sp, r7
 8004368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436c:	4770      	bx	lr

0800436e <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800436e:	b480      	push	{r7}
 8004370:	b083      	sub	sp, #12
 8004372:	af00      	add	r7, sp, #0
 8004374:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004376:	bf00      	nop
 8004378:	370c      	adds	r7, #12
 800437a:	46bd      	mov	sp, r7
 800437c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004380:	4770      	bx	lr

08004382 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004382:	b480      	push	{r7}
 8004384:	b083      	sub	sp, #12
 8004386:	af00      	add	r7, sp, #0
 8004388:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800438a:	bf00      	nop
 800438c:	370c      	adds	r7, #12
 800438e:	46bd      	mov	sp, r7
 8004390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004394:	4770      	bx	lr

08004396 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004396:	b480      	push	{r7}
 8004398:	b083      	sub	sp, #12
 800439a:	af00      	add	r7, sp, #0
 800439c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800439e:	bf00      	nop
 80043a0:	370c      	adds	r7, #12
 80043a2:	46bd      	mov	sp, r7
 80043a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a8:	4770      	bx	lr

080043aa <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80043aa:	b480      	push	{r7}
 80043ac:	b083      	sub	sp, #12
 80043ae:	af00      	add	r7, sp, #0
 80043b0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80043b2:	bf00      	nop
 80043b4:	370c      	adds	r7, #12
 80043b6:	46bd      	mov	sp, r7
 80043b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043bc:	4770      	bx	lr

080043be <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 80043be:	b480      	push	{r7}
 80043c0:	b083      	sub	sp, #12
 80043c2:	af00      	add	r7, sp, #0
 80043c4:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80043cc:	b2db      	uxtb	r3, r3
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	370c      	adds	r7, #12
 80043d2:	46bd      	mov	sp, r7
 80043d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d8:	4770      	bx	lr

080043da <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80043da:	b580      	push	{r7, lr}
 80043dc:	b088      	sub	sp, #32
 80043de:	af02      	add	r7, sp, #8
 80043e0:	60f8      	str	r0, [r7, #12]
 80043e2:	60b9      	str	r1, [r7, #8]
 80043e4:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80043f0:	2b01      	cmp	r3, #1
 80043f2:	d101      	bne.n	80043f8 <I2C_Master_ISR_IT+0x1e>
 80043f4:	2302      	movs	r3, #2
 80043f6:	e113      	b.n	8004620 <I2C_Master_ISR_IT+0x246>
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	2201      	movs	r2, #1
 80043fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	f003 0310 	and.w	r3, r3, #16
 8004406:	2b00      	cmp	r3, #0
 8004408:	d012      	beq.n	8004430 <I2C_Master_ISR_IT+0x56>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004410:	2b00      	cmp	r3, #0
 8004412:	d00d      	beq.n	8004430 <I2C_Master_ISR_IT+0x56>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	2210      	movs	r2, #16
 800441a:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004420:	f043 0204 	orr.w	r2, r3, #4
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004428:	68f8      	ldr	r0, [r7, #12]
 800442a:	f001 fb86 	bl	8005b3a <I2C_Flush_TXDR>
 800442e:	e0e4      	b.n	80045fa <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	f003 0304 	and.w	r3, r3, #4
 8004436:	2b00      	cmp	r3, #0
 8004438:	d022      	beq.n	8004480 <I2C_Master_ISR_IT+0xa6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004440:	2b00      	cmp	r3, #0
 8004442:	d01d      	beq.n	8004480 <I2C_Master_ISR_IT+0xa6>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	f023 0304 	bic.w	r3, r3, #4
 800444a:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004456:	b2d2      	uxtb	r2, r2
 8004458:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800445e:	1c5a      	adds	r2, r3, #1
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004468:	3b01      	subs	r3, #1
 800446a:	b29a      	uxth	r2, r3
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004474:	b29b      	uxth	r3, r3
 8004476:	3b01      	subs	r3, #1
 8004478:	b29a      	uxth	r2, r3
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800447e:	e0bc      	b.n	80045fa <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004486:	2b00      	cmp	r3, #0
 8004488:	d128      	bne.n	80044dc <I2C_Master_ISR_IT+0x102>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8004490:	2b00      	cmp	r3, #0
 8004492:	d023      	beq.n	80044dc <I2C_Master_ISR_IT+0x102>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	f003 0302 	and.w	r3, r3, #2
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800449a:	2b00      	cmp	r3, #0
 800449c:	d01e      	beq.n	80044dc <I2C_Master_ISR_IT+0x102>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044a2:	b29b      	uxth	r3, r3
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	f000 80a8 	beq.w	80045fa <I2C_Master_ISR_IT+0x220>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044ae:	781a      	ldrb	r2, [r3, #0]
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044ba:	1c5a      	adds	r2, r3, #1
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044c4:	3b01      	subs	r3, #1
 80044c6:	b29a      	uxth	r2, r3
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044d0:	b29b      	uxth	r3, r3
 80044d2:	3b01      	subs	r3, #1
 80044d4:	b29a      	uxth	r2, r3
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->XferCount != 0U)
 80044da:	e08e      	b.n	80045fa <I2C_Master_ISR_IT+0x220>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d05c      	beq.n	80045a0 <I2C_Master_ISR_IT+0x1c6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d057      	beq.n	80045a0 <I2C_Master_ISR_IT+0x1c6>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044f4:	b29b      	uxth	r3, r3
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d040      	beq.n	800457c <I2C_Master_ISR_IT+0x1a2>
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d13c      	bne.n	800457c <I2C_Master_ISR_IT+0x1a2>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	b29b      	uxth	r3, r3
 800450a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800450e:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004514:	b29b      	uxth	r3, r3
 8004516:	2bff      	cmp	r3, #255	@ 0xff
 8004518:	d90e      	bls.n	8004538 <I2C_Master_ISR_IT+0x15e>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	22ff      	movs	r2, #255	@ 0xff
 800451e:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004524:	b2da      	uxtb	r2, r3
 8004526:	8a79      	ldrh	r1, [r7, #18]
 8004528:	2300      	movs	r3, #0
 800452a:	9300      	str	r3, [sp, #0]
 800452c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004530:	68f8      	ldr	r0, [r7, #12]
 8004532:	f001 fcc9 	bl	8005ec8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004536:	e032      	b.n	800459e <I2C_Master_ISR_IT+0x1c4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800453c:	b29a      	uxth	r2, r3
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004546:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800454a:	d00b      	beq.n	8004564 <I2C_Master_ISR_IT+0x18a>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004550:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8004556:	8a79      	ldrh	r1, [r7, #18]
 8004558:	2000      	movs	r0, #0
 800455a:	9000      	str	r0, [sp, #0]
 800455c:	68f8      	ldr	r0, [r7, #12]
 800455e:	f001 fcb3 	bl	8005ec8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004562:	e01c      	b.n	800459e <I2C_Master_ISR_IT+0x1c4>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004568:	b2da      	uxtb	r2, r3
 800456a:	8a79      	ldrh	r1, [r7, #18]
 800456c:	2300      	movs	r3, #0
 800456e:	9300      	str	r3, [sp, #0]
 8004570:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004574:	68f8      	ldr	r0, [r7, #12]
 8004576:	f001 fca7 	bl	8005ec8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800457a:	e010      	b.n	800459e <I2C_Master_ISR_IT+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004586:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800458a:	d003      	beq.n	8004594 <I2C_Master_ISR_IT+0x1ba>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800458c:	68f8      	ldr	r0, [r7, #12]
 800458e:	f000 fdb3 	bl	80050f8 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004592:	e032      	b.n	80045fa <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8004594:	2140      	movs	r1, #64	@ 0x40
 8004596:	68f8      	ldr	r0, [r7, #12]
 8004598:	f001 f9b8 	bl	800590c <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800459c:	e02d      	b.n	80045fa <I2C_Master_ISR_IT+0x220>
 800459e:	e02c      	b.n	80045fa <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d027      	beq.n	80045fa <I2C_Master_ISR_IT+0x220>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d022      	beq.n	80045fa <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045b8:	b29b      	uxth	r3, r3
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d119      	bne.n	80045f2 <I2C_Master_ISR_IT+0x218>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045c8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80045cc:	d015      	beq.n	80045fa <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045d2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80045d6:	d108      	bne.n	80045ea <I2C_Master_ISR_IT+0x210>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	685a      	ldr	r2, [r3, #4]
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80045e6:	605a      	str	r2, [r3, #4]
 80045e8:	e007      	b.n	80045fa <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80045ea:	68f8      	ldr	r0, [r7, #12]
 80045ec:	f000 fd84 	bl	80050f8 <I2C_ITMasterSeqCplt>
 80045f0:	e003      	b.n	80045fa <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80045f2:	2140      	movs	r1, #64	@ 0x40
 80045f4:	68f8      	ldr	r0, [r7, #12]
 80045f6:	f001 f989 	bl	800590c <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	f003 0320 	and.w	r3, r3, #32
 8004600:	2b00      	cmp	r3, #0
 8004602:	d008      	beq.n	8004616 <I2C_Master_ISR_IT+0x23c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800460a:	2b00      	cmp	r3, #0
 800460c:	d003      	beq.n	8004616 <I2C_Master_ISR_IT+0x23c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 800460e:	6979      	ldr	r1, [r7, #20]
 8004610:	68f8      	ldr	r0, [r7, #12]
 8004612:	f000 fe0b 	bl	800522c <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2200      	movs	r2, #0
 800461a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800461e:	2300      	movs	r3, #0
}
 8004620:	4618      	mov	r0, r3
 8004622:	3718      	adds	r7, #24
 8004624:	46bd      	mov	sp, r7
 8004626:	bd80      	pop	{r7, pc}

08004628 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b086      	sub	sp, #24
 800462c:	af00      	add	r7, sp, #0
 800462e:	60f8      	str	r0, [r7, #12]
 8004630:	60b9      	str	r1, [r7, #8]
 8004632:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004638:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004644:	2b01      	cmp	r3, #1
 8004646:	d101      	bne.n	800464c <I2C_Slave_ISR_IT+0x24>
 8004648:	2302      	movs	r3, #2
 800464a:	e0e2      	b.n	8004812 <I2C_Slave_ISR_IT+0x1ea>
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	2201      	movs	r2, #1
 8004650:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	f003 0320 	and.w	r3, r3, #32
 800465a:	2b00      	cmp	r3, #0
 800465c:	d009      	beq.n	8004672 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004664:	2b00      	cmp	r3, #0
 8004666:	d004      	beq.n	8004672 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8004668:	6939      	ldr	r1, [r7, #16]
 800466a:	68f8      	ldr	r0, [r7, #12]
 800466c:	f000 fea6 	bl	80053bc <I2C_ITSlaveCplt>
 8004670:	e0ca      	b.n	8004808 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	f003 0310 	and.w	r3, r3, #16
 8004678:	2b00      	cmp	r3, #0
 800467a:	d04b      	beq.n	8004714 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004682:	2b00      	cmp	r3, #0
 8004684:	d046      	beq.n	8004714 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800468a:	b29b      	uxth	r3, r3
 800468c:	2b00      	cmp	r3, #0
 800468e:	d128      	bne.n	80046e2 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004696:	b2db      	uxtb	r3, r3
 8004698:	2b28      	cmp	r3, #40	@ 0x28
 800469a:	d108      	bne.n	80046ae <I2C_Slave_ISR_IT+0x86>
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80046a2:	d104      	bne.n	80046ae <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80046a4:	6939      	ldr	r1, [r7, #16]
 80046a6:	68f8      	ldr	r0, [r7, #12]
 80046a8:	f001 f8dc 	bl	8005864 <I2C_ITListenCplt>
 80046ac:	e031      	b.n	8004712 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046b4:	b2db      	uxtb	r3, r3
 80046b6:	2b29      	cmp	r3, #41	@ 0x29
 80046b8:	d10e      	bne.n	80046d8 <I2C_Slave_ISR_IT+0xb0>
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80046c0:	d00a      	beq.n	80046d8 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	2210      	movs	r2, #16
 80046c8:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80046ca:	68f8      	ldr	r0, [r7, #12]
 80046cc:	f001 fa35 	bl	8005b3a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80046d0:	68f8      	ldr	r0, [r7, #12]
 80046d2:	f000 fd4e 	bl	8005172 <I2C_ITSlaveSeqCplt>
 80046d6:	e01c      	b.n	8004712 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	2210      	movs	r2, #16
 80046de:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80046e0:	e08f      	b.n	8004802 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	2210      	movs	r2, #16
 80046e8:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046ee:	f043 0204 	orr.w	r2, r3, #4
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d003      	beq.n	8004704 <I2C_Slave_ISR_IT+0xdc>
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004702:	d17e      	bne.n	8004802 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004708:	4619      	mov	r1, r3
 800470a:	68f8      	ldr	r0, [r7, #12]
 800470c:	f001 f8fe 	bl	800590c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8004710:	e077      	b.n	8004802 <I2C_Slave_ISR_IT+0x1da>
 8004712:	e076      	b.n	8004802 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	f003 0304 	and.w	r3, r3, #4
 800471a:	2b00      	cmp	r3, #0
 800471c:	d02f      	beq.n	800477e <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004724:	2b00      	cmp	r3, #0
 8004726:	d02a      	beq.n	800477e <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800472c:	b29b      	uxth	r3, r3
 800472e:	2b00      	cmp	r3, #0
 8004730:	d018      	beq.n	8004764 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800473c:	b2d2      	uxtb	r2, r2
 800473e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004744:	1c5a      	adds	r2, r3, #1
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800474e:	3b01      	subs	r3, #1
 8004750:	b29a      	uxth	r2, r3
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800475a:	b29b      	uxth	r3, r3
 800475c:	3b01      	subs	r3, #1
 800475e:	b29a      	uxth	r2, r3
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004768:	b29b      	uxth	r3, r3
 800476a:	2b00      	cmp	r3, #0
 800476c:	d14b      	bne.n	8004806 <I2C_Slave_ISR_IT+0x1de>
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004774:	d047      	beq.n	8004806 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8004776:	68f8      	ldr	r0, [r7, #12]
 8004778:	f000 fcfb 	bl	8005172 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800477c:	e043      	b.n	8004806 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	f003 0308 	and.w	r3, r3, #8
 8004784:	2b00      	cmp	r3, #0
 8004786:	d009      	beq.n	800479c <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800478e:	2b00      	cmp	r3, #0
 8004790:	d004      	beq.n	800479c <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8004792:	6939      	ldr	r1, [r7, #16]
 8004794:	68f8      	ldr	r0, [r7, #12]
 8004796:	f000 fc2b 	bl	8004ff0 <I2C_ITAddrCplt>
 800479a:	e035      	b.n	8004808 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	f003 0302 	and.w	r3, r3, #2
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d030      	beq.n	8004808 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d02b      	beq.n	8004808 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047b4:	b29b      	uxth	r3, r3
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d018      	beq.n	80047ec <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047be:	781a      	ldrb	r2, [r3, #0]
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047ca:	1c5a      	adds	r2, r3, #1
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047d4:	b29b      	uxth	r3, r3
 80047d6:	3b01      	subs	r3, #1
 80047d8:	b29a      	uxth	r2, r3
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047e2:	3b01      	subs	r3, #1
 80047e4:	b29a      	uxth	r2, r3
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	851a      	strh	r2, [r3, #40]	@ 0x28
 80047ea:	e00d      	b.n	8004808 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80047f2:	d002      	beq.n	80047fa <I2C_Slave_ISR_IT+0x1d2>
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d106      	bne.n	8004808 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80047fa:	68f8      	ldr	r0, [r7, #12]
 80047fc:	f000 fcb9 	bl	8005172 <I2C_ITSlaveSeqCplt>
 8004800:	e002      	b.n	8004808 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8004802:	bf00      	nop
 8004804:	e000      	b.n	8004808 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 8004806:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	2200      	movs	r2, #0
 800480c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004810:	2300      	movs	r3, #0
}
 8004812:	4618      	mov	r0, r3
 8004814:	3718      	adds	r7, #24
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}

0800481a <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 800481a:	b580      	push	{r7, lr}
 800481c:	b088      	sub	sp, #32
 800481e:	af02      	add	r7, sp, #8
 8004820:	60f8      	str	r0, [r7, #12]
 8004822:	60b9      	str	r1, [r7, #8]
 8004824:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800482c:	2b01      	cmp	r3, #1
 800482e:	d101      	bne.n	8004834 <I2C_Master_ISR_DMA+0x1a>
 8004830:	2302      	movs	r3, #2
 8004832:	e0d9      	b.n	80049e8 <I2C_Master_ISR_DMA+0x1ce>
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	2201      	movs	r2, #1
 8004838:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	f003 0310 	and.w	r3, r3, #16
 8004842:	2b00      	cmp	r3, #0
 8004844:	d016      	beq.n	8004874 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800484c:	2b00      	cmp	r3, #0
 800484e:	d011      	beq.n	8004874 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	2210      	movs	r2, #16
 8004856:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800485c:	f043 0204 	orr.w	r2, r3, #4
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8004864:	2120      	movs	r1, #32
 8004866:	68f8      	ldr	r0, [r7, #12]
 8004868:	f001 fb60 	bl	8005f2c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800486c:	68f8      	ldr	r0, [r7, #12]
 800486e:	f001 f964 	bl	8005b3a <I2C_Flush_TXDR>
 8004872:	e0b4      	b.n	80049de <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800487a:	2b00      	cmp	r3, #0
 800487c:	d071      	beq.n	8004962 <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8004884:	2b00      	cmp	r3, #0
 8004886:	d06c      	beq.n	8004962 <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	681a      	ldr	r2, [r3, #0]
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004896:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800489c:	b29b      	uxth	r3, r3
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d04e      	beq.n	8004940 <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	b29b      	uxth	r3, r3
 80048aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80048ae:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048b4:	b29b      	uxth	r3, r3
 80048b6:	2bff      	cmp	r3, #255	@ 0xff
 80048b8:	d906      	bls.n	80048c8 <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	22ff      	movs	r2, #255	@ 0xff
 80048be:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 80048c0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80048c4:	617b      	str	r3, [r7, #20]
 80048c6:	e010      	b.n	80048ea <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048cc:	b29a      	uxth	r2, r3
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048d6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80048da:	d003      	beq.n	80048e4 <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048e0:	617b      	str	r3, [r7, #20]
 80048e2:	e002      	b.n	80048ea <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 80048e4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80048e8:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048ee:	b2da      	uxtb	r2, r3
 80048f0:	8a79      	ldrh	r1, [r7, #18]
 80048f2:	2300      	movs	r3, #0
 80048f4:	9300      	str	r3, [sp, #0]
 80048f6:	697b      	ldr	r3, [r7, #20]
 80048f8:	68f8      	ldr	r0, [r7, #12]
 80048fa:	f001 fae5 	bl	8005ec8 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004902:	b29a      	uxth	r2, r3
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004908:	1ad3      	subs	r3, r2, r3
 800490a:	b29a      	uxth	r2, r3
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004916:	b2db      	uxtb	r3, r3
 8004918:	2b22      	cmp	r3, #34	@ 0x22
 800491a:	d108      	bne.n	800492e <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800492a:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800492c:	e057      	b.n	80049de <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	681a      	ldr	r2, [r3, #0]
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800493c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800493e:	e04e      	b.n	80049de <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800494a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800494e:	d003      	beq.n	8004958 <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8004950:	68f8      	ldr	r0, [r7, #12]
 8004952:	f000 fbd1 	bl	80050f8 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8004956:	e042      	b.n	80049de <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8004958:	2140      	movs	r1, #64	@ 0x40
 800495a:	68f8      	ldr	r0, [r7, #12]
 800495c:	f000 ffd6 	bl	800590c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8004960:	e03d      	b.n	80049de <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004968:	2b00      	cmp	r3, #0
 800496a:	d028      	beq.n	80049be <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8004972:	2b00      	cmp	r3, #0
 8004974:	d023      	beq.n	80049be <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800497a:	b29b      	uxth	r3, r3
 800497c:	2b00      	cmp	r3, #0
 800497e:	d119      	bne.n	80049b4 <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800498a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800498e:	d025      	beq.n	80049dc <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004994:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004998:	d108      	bne.n	80049ac <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	685a      	ldr	r2, [r3, #4]
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80049a8:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 80049aa:	e017      	b.n	80049dc <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80049ac:	68f8      	ldr	r0, [r7, #12]
 80049ae:	f000 fba3 	bl	80050f8 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 80049b2:	e013      	b.n	80049dc <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80049b4:	2140      	movs	r1, #64	@ 0x40
 80049b6:	68f8      	ldr	r0, [r7, #12]
 80049b8:	f000 ffa8 	bl	800590c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80049bc:	e00e      	b.n	80049dc <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	f003 0320 	and.w	r3, r3, #32
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d00a      	beq.n	80049de <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d005      	beq.n	80049de <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80049d2:	68b9      	ldr	r1, [r7, #8]
 80049d4:	68f8      	ldr	r0, [r7, #12]
 80049d6:	f000 fc29 	bl	800522c <I2C_ITMasterCplt>
 80049da:	e000      	b.n	80049de <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 80049dc:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	2200      	movs	r2, #0
 80049e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80049e6:	2300      	movs	r3, #0
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	3718      	adds	r7, #24
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bd80      	pop	{r7, pc}

080049f0 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b088      	sub	sp, #32
 80049f4:	af02      	add	r7, sp, #8
 80049f6:	60f8      	str	r0, [r7, #12]
 80049f8:	60b9      	str	r1, [r7, #8]
 80049fa:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 80049fc:	4b8d      	ldr	r3, [pc, #564]	@ (8004c34 <I2C_Mem_ISR_DMA+0x244>)
 80049fe:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004a06:	2b01      	cmp	r3, #1
 8004a08:	d101      	bne.n	8004a0e <I2C_Mem_ISR_DMA+0x1e>
 8004a0a:	2302      	movs	r3, #2
 8004a0c:	e10e      	b.n	8004c2c <I2C_Mem_ISR_DMA+0x23c>
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	2201      	movs	r2, #1
 8004a12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	f003 0310 	and.w	r3, r3, #16
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d016      	beq.n	8004a4e <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d011      	beq.n	8004a4e <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	2210      	movs	r2, #16
 8004a30:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a36:	f043 0204 	orr.w	r2, r3, #4
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8004a3e:	2120      	movs	r1, #32
 8004a40:	68f8      	ldr	r0, [r7, #12]
 8004a42:	f001 fa73 	bl	8005f2c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004a46:	68f8      	ldr	r0, [r7, #12]
 8004a48:	f001 f877 	bl	8005b3a <I2C_Flush_TXDR>
 8004a4c:	e0e9      	b.n	8004c22 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	f003 0302 	and.w	r3, r3, #2
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d00e      	beq.n	8004a76 <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d009      	beq.n	8004a76 <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	68fa      	ldr	r2, [r7, #12]
 8004a68:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004a6a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	f04f 32ff 	mov.w	r2, #4294967295
 8004a72:	651a      	str	r2, [r3, #80]	@ 0x50
 8004a74:	e0d5      	b.n	8004c22 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d05f      	beq.n	8004b40 <I2C_Mem_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d05a      	beq.n	8004b40 <I2C_Mem_ISR_DMA+0x150>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004a8a:	2101      	movs	r1, #1
 8004a8c:	68f8      	ldr	r0, [r7, #12]
 8004a8e:	f001 fad1 	bl	8006034 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8004a92:	2110      	movs	r1, #16
 8004a94:	68f8      	ldr	r0, [r7, #12]
 8004a96:	f001 fa49 	bl	8005f2c <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a9e:	b29b      	uxth	r3, r3
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d048      	beq.n	8004b36 <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004aa8:	b29b      	uxth	r3, r3
 8004aaa:	2bff      	cmp	r3, #255	@ 0xff
 8004aac:	d910      	bls.n	8004ad0 <I2C_Mem_ISR_DMA+0xe0>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	22ff      	movs	r2, #255	@ 0xff
 8004ab2:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ab8:	b299      	uxth	r1, r3
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004abe:	b2da      	uxtb	r2, r3
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	9300      	str	r3, [sp, #0]
 8004ac4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004ac8:	68f8      	ldr	r0, [r7, #12]
 8004aca:	f001 f9fd 	bl	8005ec8 <I2C_TransferConfig>
 8004ace:	e011      	b.n	8004af4 <I2C_Mem_ISR_DMA+0x104>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ad4:	b29a      	uxth	r2, r3
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ade:	b299      	uxth	r1, r3
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ae4:	b2da      	uxtb	r2, r3
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	9300      	str	r3, [sp, #0]
 8004aea:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004aee:	68f8      	ldr	r0, [r7, #12]
 8004af0:	f001 f9ea 	bl	8005ec8 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004af8:	b29a      	uxth	r2, r3
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004afe:	1ad3      	subs	r3, r2, r3
 8004b00:	b29a      	uxth	r2, r3
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b0c:	b2db      	uxtb	r3, r3
 8004b0e:	2b22      	cmp	r3, #34	@ 0x22
 8004b10:	d108      	bne.n	8004b24 <I2C_Mem_ISR_DMA+0x134>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	681a      	ldr	r2, [r3, #0]
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004b20:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8004b22:	e07e      	b.n	8004c22 <I2C_Mem_ISR_DMA+0x232>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	681a      	ldr	r2, [r3, #0]
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004b32:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8004b34:	e075      	b.n	8004c22 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8004b36:	2140      	movs	r1, #64	@ 0x40
 8004b38:	68f8      	ldr	r0, [r7, #12]
 8004b3a:	f000 fee7 	bl	800590c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8004b3e:	e070      	b.n	8004c22 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d05d      	beq.n	8004c06 <I2C_Mem_ISR_DMA+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d058      	beq.n	8004c06 <I2C_Mem_ISR_DMA+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004b54:	2101      	movs	r1, #1
 8004b56:	68f8      	ldr	r0, [r7, #12]
 8004b58:	f001 fa6c 	bl	8006034 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8004b5c:	2110      	movs	r1, #16
 8004b5e:	68f8      	ldr	r0, [r7, #12]
 8004b60:	f001 f9e4 	bl	8005f2c <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b6a:	b2db      	uxtb	r3, r3
 8004b6c:	2b22      	cmp	r3, #34	@ 0x22
 8004b6e:	d101      	bne.n	8004b74 <I2C_Mem_ISR_DMA+0x184>
    {
      direction = I2C_GENERATE_START_READ;
 8004b70:	4b31      	ldr	r3, [pc, #196]	@ (8004c38 <I2C_Mem_ISR_DMA+0x248>)
 8004b72:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b78:	b29b      	uxth	r3, r3
 8004b7a:	2bff      	cmp	r3, #255	@ 0xff
 8004b7c:	d910      	bls.n	8004ba0 <I2C_Mem_ISR_DMA+0x1b0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	22ff      	movs	r2, #255	@ 0xff
 8004b82:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b88:	b299      	uxth	r1, r3
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b8e:	b2da      	uxtb	r2, r3
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	9300      	str	r3, [sp, #0]
 8004b94:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004b98:	68f8      	ldr	r0, [r7, #12]
 8004b9a:	f001 f995 	bl	8005ec8 <I2C_TransferConfig>
 8004b9e:	e011      	b.n	8004bc4 <I2C_Mem_ISR_DMA+0x1d4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ba4:	b29a      	uxth	r2, r3
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bae:	b299      	uxth	r1, r3
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004bb4:	b2da      	uxtb	r2, r3
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	9300      	str	r3, [sp, #0]
 8004bba:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004bbe:	68f8      	ldr	r0, [r7, #12]
 8004bc0:	f001 f982 	bl	8005ec8 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bc8:	b29a      	uxth	r2, r3
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004bce:	1ad3      	subs	r3, r2, r3
 8004bd0:	b29a      	uxth	r2, r3
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004bdc:	b2db      	uxtb	r3, r3
 8004bde:	2b22      	cmp	r3, #34	@ 0x22
 8004be0:	d108      	bne.n	8004bf4 <I2C_Mem_ISR_DMA+0x204>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	681a      	ldr	r2, [r3, #0]
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004bf0:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004bf2:	e016      	b.n	8004c22 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	681a      	ldr	r2, [r3, #0]
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004c02:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004c04:	e00d      	b.n	8004c22 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	f003 0320 	and.w	r3, r3, #32
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d008      	beq.n	8004c22 <I2C_Mem_ISR_DMA+0x232>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d003      	beq.n	8004c22 <I2C_Mem_ISR_DMA+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8004c1a:	68b9      	ldr	r1, [r7, #8]
 8004c1c:	68f8      	ldr	r0, [r7, #12]
 8004c1e:	f000 fb05 	bl	800522c <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	2200      	movs	r2, #0
 8004c26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004c2a:	2300      	movs	r3, #0
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	3718      	adds	r7, #24
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd80      	pop	{r7, pc}
 8004c34:	80002000 	.word	0x80002000
 8004c38:	80002400 	.word	0x80002400

08004c3c <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b088      	sub	sp, #32
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	60f8      	str	r0, [r7, #12]
 8004c44:	60b9      	str	r1, [r7, #8]
 8004c46:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c4c:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8004c4e:	2300      	movs	r3, #0
 8004c50:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004c58:	2b01      	cmp	r3, #1
 8004c5a:	d101      	bne.n	8004c60 <I2C_Slave_ISR_DMA+0x24>
 8004c5c:	2302      	movs	r3, #2
 8004c5e:	e1c2      	b.n	8004fe6 <I2C_Slave_ISR_DMA+0x3aa>
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	2201      	movs	r2, #1
 8004c64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	f003 0320 	and.w	r3, r3, #32
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d009      	beq.n	8004c86 <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d004      	beq.n	8004c86 <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8004c7c:	68b9      	ldr	r1, [r7, #8]
 8004c7e:	68f8      	ldr	r0, [r7, #12]
 8004c80:	f000 fb9c 	bl	80053bc <I2C_ITSlaveCplt>
 8004c84:	e1aa      	b.n	8004fdc <I2C_Slave_ISR_DMA+0x3a0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	f003 0310 	and.w	r3, r3, #16
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	f000 8197 	beq.w	8004fc0 <I2C_Slave_ISR_DMA+0x384>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	f000 8191 	beq.w	8004fc0 <I2C_Slave_ISR_DMA+0x384>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d105      	bne.n	8004cb4 <I2C_Slave_ISR_DMA+0x78>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	f000 817f 	beq.w	8004fb2 <I2C_Slave_ISR_DMA+0x376>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d07b      	beq.n	8004db4 <I2C_Slave_ISR_DMA+0x178>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d076      	beq.n	8004db4 <I2C_Slave_ISR_DMA+0x178>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a74      	ldr	r2, [pc, #464]	@ (8004ea0 <I2C_Slave_ISR_DMA+0x264>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d059      	beq.n	8004d86 <I2C_Slave_ISR_DMA+0x14a>
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a72      	ldr	r2, [pc, #456]	@ (8004ea4 <I2C_Slave_ISR_DMA+0x268>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d053      	beq.n	8004d86 <I2C_Slave_ISR_DMA+0x14a>
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a70      	ldr	r2, [pc, #448]	@ (8004ea8 <I2C_Slave_ISR_DMA+0x26c>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d04d      	beq.n	8004d86 <I2C_Slave_ISR_DMA+0x14a>
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a6e      	ldr	r2, [pc, #440]	@ (8004eac <I2C_Slave_ISR_DMA+0x270>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d047      	beq.n	8004d86 <I2C_Slave_ISR_DMA+0x14a>
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a6c      	ldr	r2, [pc, #432]	@ (8004eb0 <I2C_Slave_ISR_DMA+0x274>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d041      	beq.n	8004d86 <I2C_Slave_ISR_DMA+0x14a>
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a6a      	ldr	r2, [pc, #424]	@ (8004eb4 <I2C_Slave_ISR_DMA+0x278>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d03b      	beq.n	8004d86 <I2C_Slave_ISR_DMA+0x14a>
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a68      	ldr	r2, [pc, #416]	@ (8004eb8 <I2C_Slave_ISR_DMA+0x27c>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d035      	beq.n	8004d86 <I2C_Slave_ISR_DMA+0x14a>
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a66      	ldr	r2, [pc, #408]	@ (8004ebc <I2C_Slave_ISR_DMA+0x280>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d02f      	beq.n	8004d86 <I2C_Slave_ISR_DMA+0x14a>
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a64      	ldr	r2, [pc, #400]	@ (8004ec0 <I2C_Slave_ISR_DMA+0x284>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d029      	beq.n	8004d86 <I2C_Slave_ISR_DMA+0x14a>
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a62      	ldr	r2, [pc, #392]	@ (8004ec4 <I2C_Slave_ISR_DMA+0x288>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d023      	beq.n	8004d86 <I2C_Slave_ISR_DMA+0x14a>
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a60      	ldr	r2, [pc, #384]	@ (8004ec8 <I2C_Slave_ISR_DMA+0x28c>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d01d      	beq.n	8004d86 <I2C_Slave_ISR_DMA+0x14a>
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a5e      	ldr	r2, [pc, #376]	@ (8004ecc <I2C_Slave_ISR_DMA+0x290>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d017      	beq.n	8004d86 <I2C_Slave_ISR_DMA+0x14a>
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a5c      	ldr	r2, [pc, #368]	@ (8004ed0 <I2C_Slave_ISR_DMA+0x294>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d011      	beq.n	8004d86 <I2C_Slave_ISR_DMA+0x14a>
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a5a      	ldr	r2, [pc, #360]	@ (8004ed4 <I2C_Slave_ISR_DMA+0x298>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d00b      	beq.n	8004d86 <I2C_Slave_ISR_DMA+0x14a>
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4a58      	ldr	r2, [pc, #352]	@ (8004ed8 <I2C_Slave_ISR_DMA+0x29c>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d005      	beq.n	8004d86 <I2C_Slave_ISR_DMA+0x14a>
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a56      	ldr	r2, [pc, #344]	@ (8004edc <I2C_Slave_ISR_DMA+0x2a0>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d109      	bne.n	8004d9a <I2C_Slave_ISR_DMA+0x15e>
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	bf0c      	ite	eq
 8004d92:	2301      	moveq	r3, #1
 8004d94:	2300      	movne	r3, #0
 8004d96:	b2db      	uxtb	r3, r3
 8004d98:	e008      	b.n	8004dac <I2C_Slave_ISR_DMA+0x170>
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	bf0c      	ite	eq
 8004da6:	2301      	moveq	r3, #1
 8004da8:	2300      	movne	r3, #0
 8004daa:	b2db      	uxtb	r3, r3
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d001      	beq.n	8004db4 <I2C_Slave_ISR_DMA+0x178>
          {
            treatdmanack = 1U;
 8004db0:	2301      	movs	r3, #1
 8004db2:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	f000 809e 	beq.w	8004efa <I2C_Slave_ISR_DMA+0x2be>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	f000 8098 	beq.w	8004efa <I2C_Slave_ISR_DMA+0x2be>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a33      	ldr	r2, [pc, #204]	@ (8004ea0 <I2C_Slave_ISR_DMA+0x264>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d059      	beq.n	8004e8a <I2C_Slave_ISR_DMA+0x24e>
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a31      	ldr	r2, [pc, #196]	@ (8004ea4 <I2C_Slave_ISR_DMA+0x268>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d053      	beq.n	8004e8a <I2C_Slave_ISR_DMA+0x24e>
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a2f      	ldr	r2, [pc, #188]	@ (8004ea8 <I2C_Slave_ISR_DMA+0x26c>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d04d      	beq.n	8004e8a <I2C_Slave_ISR_DMA+0x24e>
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a2d      	ldr	r2, [pc, #180]	@ (8004eac <I2C_Slave_ISR_DMA+0x270>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d047      	beq.n	8004e8a <I2C_Slave_ISR_DMA+0x24e>
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a2b      	ldr	r2, [pc, #172]	@ (8004eb0 <I2C_Slave_ISR_DMA+0x274>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d041      	beq.n	8004e8a <I2C_Slave_ISR_DMA+0x24e>
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a29      	ldr	r2, [pc, #164]	@ (8004eb4 <I2C_Slave_ISR_DMA+0x278>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d03b      	beq.n	8004e8a <I2C_Slave_ISR_DMA+0x24e>
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a27      	ldr	r2, [pc, #156]	@ (8004eb8 <I2C_Slave_ISR_DMA+0x27c>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d035      	beq.n	8004e8a <I2C_Slave_ISR_DMA+0x24e>
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a25      	ldr	r2, [pc, #148]	@ (8004ebc <I2C_Slave_ISR_DMA+0x280>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d02f      	beq.n	8004e8a <I2C_Slave_ISR_DMA+0x24e>
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a23      	ldr	r2, [pc, #140]	@ (8004ec0 <I2C_Slave_ISR_DMA+0x284>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d029      	beq.n	8004e8a <I2C_Slave_ISR_DMA+0x24e>
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a21      	ldr	r2, [pc, #132]	@ (8004ec4 <I2C_Slave_ISR_DMA+0x288>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d023      	beq.n	8004e8a <I2C_Slave_ISR_DMA+0x24e>
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a1f      	ldr	r2, [pc, #124]	@ (8004ec8 <I2C_Slave_ISR_DMA+0x28c>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d01d      	beq.n	8004e8a <I2C_Slave_ISR_DMA+0x24e>
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a1d      	ldr	r2, [pc, #116]	@ (8004ecc <I2C_Slave_ISR_DMA+0x290>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d017      	beq.n	8004e8a <I2C_Slave_ISR_DMA+0x24e>
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a1b      	ldr	r2, [pc, #108]	@ (8004ed0 <I2C_Slave_ISR_DMA+0x294>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d011      	beq.n	8004e8a <I2C_Slave_ISR_DMA+0x24e>
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a19      	ldr	r2, [pc, #100]	@ (8004ed4 <I2C_Slave_ISR_DMA+0x298>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d00b      	beq.n	8004e8a <I2C_Slave_ISR_DMA+0x24e>
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a17      	ldr	r2, [pc, #92]	@ (8004ed8 <I2C_Slave_ISR_DMA+0x29c>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d005      	beq.n	8004e8a <I2C_Slave_ISR_DMA+0x24e>
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a15      	ldr	r2, [pc, #84]	@ (8004edc <I2C_Slave_ISR_DMA+0x2a0>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d12a      	bne.n	8004ee0 <I2C_Slave_ISR_DMA+0x2a4>
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	bf0c      	ite	eq
 8004e96:	2301      	moveq	r3, #1
 8004e98:	2300      	movne	r3, #0
 8004e9a:	b2db      	uxtb	r3, r3
 8004e9c:	e029      	b.n	8004ef2 <I2C_Slave_ISR_DMA+0x2b6>
 8004e9e:	bf00      	nop
 8004ea0:	40020010 	.word	0x40020010
 8004ea4:	40020028 	.word	0x40020028
 8004ea8:	40020040 	.word	0x40020040
 8004eac:	40020058 	.word	0x40020058
 8004eb0:	40020070 	.word	0x40020070
 8004eb4:	40020088 	.word	0x40020088
 8004eb8:	400200a0 	.word	0x400200a0
 8004ebc:	400200b8 	.word	0x400200b8
 8004ec0:	40020410 	.word	0x40020410
 8004ec4:	40020428 	.word	0x40020428
 8004ec8:	40020440 	.word	0x40020440
 8004ecc:	40020458 	.word	0x40020458
 8004ed0:	40020470 	.word	0x40020470
 8004ed4:	40020488 	.word	0x40020488
 8004ed8:	400204a0 	.word	0x400204a0
 8004edc:	400204b8 	.word	0x400204b8
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	bf0c      	ite	eq
 8004eec:	2301      	moveq	r3, #1
 8004eee:	2300      	movne	r3, #0
 8004ef0:	b2db      	uxtb	r3, r3
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d001      	beq.n	8004efa <I2C_Slave_ISR_DMA+0x2be>
          {
            treatdmanack = 1U;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8004efa:	69fb      	ldr	r3, [r7, #28]
 8004efc:	2b01      	cmp	r3, #1
 8004efe:	d128      	bne.n	8004f52 <I2C_Slave_ISR_DMA+0x316>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f06:	b2db      	uxtb	r3, r3
 8004f08:	2b28      	cmp	r3, #40	@ 0x28
 8004f0a:	d108      	bne.n	8004f1e <I2C_Slave_ISR_DMA+0x2e2>
 8004f0c:	69bb      	ldr	r3, [r7, #24]
 8004f0e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004f12:	d104      	bne.n	8004f1e <I2C_Slave_ISR_DMA+0x2e2>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8004f14:	68b9      	ldr	r1, [r7, #8]
 8004f16:	68f8      	ldr	r0, [r7, #12]
 8004f18:	f000 fca4 	bl	8005864 <I2C_ITListenCplt>
 8004f1c:	e048      	b.n	8004fb0 <I2C_Slave_ISR_DMA+0x374>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f24:	b2db      	uxtb	r3, r3
 8004f26:	2b29      	cmp	r3, #41	@ 0x29
 8004f28:	d10e      	bne.n	8004f48 <I2C_Slave_ISR_DMA+0x30c>
 8004f2a:	69bb      	ldr	r3, [r7, #24]
 8004f2c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004f30:	d00a      	beq.n	8004f48 <I2C_Slave_ISR_DMA+0x30c>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	2210      	movs	r2, #16
 8004f38:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8004f3a:	68f8      	ldr	r0, [r7, #12]
 8004f3c:	f000 fdfd 	bl	8005b3a <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8004f40:	68f8      	ldr	r0, [r7, #12]
 8004f42:	f000 f916 	bl	8005172 <I2C_ITSlaveSeqCplt>
 8004f46:	e033      	b.n	8004fb0 <I2C_Slave_ISR_DMA+0x374>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	2210      	movs	r2, #16
 8004f4e:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8004f50:	e034      	b.n	8004fbc <I2C_Slave_ISR_DMA+0x380>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	2210      	movs	r2, #16
 8004f58:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f5e:	f043 0204 	orr.w	r2, r3, #4
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f6c:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004f6e:	69bb      	ldr	r3, [r7, #24]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d003      	beq.n	8004f7c <I2C_Slave_ISR_DMA+0x340>
 8004f74:	69bb      	ldr	r3, [r7, #24]
 8004f76:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004f7a:	d11f      	bne.n	8004fbc <I2C_Slave_ISR_DMA+0x380>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004f7c:	7dfb      	ldrb	r3, [r7, #23]
 8004f7e:	2b21      	cmp	r3, #33	@ 0x21
 8004f80:	d002      	beq.n	8004f88 <I2C_Slave_ISR_DMA+0x34c>
 8004f82:	7dfb      	ldrb	r3, [r7, #23]
 8004f84:	2b29      	cmp	r3, #41	@ 0x29
 8004f86:	d103      	bne.n	8004f90 <I2C_Slave_ISR_DMA+0x354>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	2221      	movs	r2, #33	@ 0x21
 8004f8c:	631a      	str	r2, [r3, #48]	@ 0x30
 8004f8e:	e008      	b.n	8004fa2 <I2C_Slave_ISR_DMA+0x366>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004f90:	7dfb      	ldrb	r3, [r7, #23]
 8004f92:	2b22      	cmp	r3, #34	@ 0x22
 8004f94:	d002      	beq.n	8004f9c <I2C_Slave_ISR_DMA+0x360>
 8004f96:	7dfb      	ldrb	r3, [r7, #23]
 8004f98:	2b2a      	cmp	r3, #42	@ 0x2a
 8004f9a:	d102      	bne.n	8004fa2 <I2C_Slave_ISR_DMA+0x366>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	2222      	movs	r2, #34	@ 0x22
 8004fa0:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fa6:	4619      	mov	r1, r3
 8004fa8:	68f8      	ldr	r0, [r7, #12]
 8004faa:	f000 fcaf 	bl	800590c <I2C_ITError>
      if (treatdmanack == 1U)
 8004fae:	e005      	b.n	8004fbc <I2C_Slave_ISR_DMA+0x380>
 8004fb0:	e004      	b.n	8004fbc <I2C_Slave_ISR_DMA+0x380>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	2210      	movs	r2, #16
 8004fb8:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004fba:	e00f      	b.n	8004fdc <I2C_Slave_ISR_DMA+0x3a0>
      if (treatdmanack == 1U)
 8004fbc:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004fbe:	e00d      	b.n	8004fdc <I2C_Slave_ISR_DMA+0x3a0>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	f003 0308 	and.w	r3, r3, #8
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d008      	beq.n	8004fdc <I2C_Slave_ISR_DMA+0x3a0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d003      	beq.n	8004fdc <I2C_Slave_ISR_DMA+0x3a0>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8004fd4:	68b9      	ldr	r1, [r7, #8]
 8004fd6:	68f8      	ldr	r0, [r7, #12]
 8004fd8:	f000 f80a 	bl	8004ff0 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004fe4:	2300      	movs	r3, #0
}
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	3720      	adds	r7, #32
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd80      	pop	{r7, pc}
 8004fee:	bf00      	nop

08004ff0 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b084      	sub	sp, #16
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
 8004ff8:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005000:	b2db      	uxtb	r3, r3
 8005002:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005006:	2b28      	cmp	r3, #40	@ 0x28
 8005008:	d16a      	bne.n	80050e0 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	699b      	ldr	r3, [r3, #24]
 8005010:	0c1b      	lsrs	r3, r3, #16
 8005012:	b2db      	uxtb	r3, r3
 8005014:	f003 0301 	and.w	r3, r3, #1
 8005018:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	699b      	ldr	r3, [r3, #24]
 8005020:	0c1b      	lsrs	r3, r3, #16
 8005022:	b29b      	uxth	r3, r3
 8005024:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8005028:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	689b      	ldr	r3, [r3, #8]
 8005030:	b29b      	uxth	r3, r3
 8005032:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005036:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	68db      	ldr	r3, [r3, #12]
 800503e:	b29b      	uxth	r3, r3
 8005040:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8005044:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	68db      	ldr	r3, [r3, #12]
 800504a:	2b02      	cmp	r3, #2
 800504c:	d138      	bne.n	80050c0 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800504e:	897b      	ldrh	r3, [r7, #10]
 8005050:	09db      	lsrs	r3, r3, #7
 8005052:	b29a      	uxth	r2, r3
 8005054:	89bb      	ldrh	r3, [r7, #12]
 8005056:	4053      	eors	r3, r2
 8005058:	b29b      	uxth	r3, r3
 800505a:	f003 0306 	and.w	r3, r3, #6
 800505e:	2b00      	cmp	r3, #0
 8005060:	d11c      	bne.n	800509c <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8005062:	897b      	ldrh	r3, [r7, #10]
 8005064:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800506a:	1c5a      	adds	r2, r3, #1
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005074:	2b02      	cmp	r3, #2
 8005076:	d13b      	bne.n	80050f0 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2200      	movs	r2, #0
 800507c:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	2208      	movs	r2, #8
 8005084:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2200      	movs	r2, #0
 800508a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800508e:	89ba      	ldrh	r2, [r7, #12]
 8005090:	7bfb      	ldrb	r3, [r7, #15]
 8005092:	4619      	mov	r1, r3
 8005094:	6878      	ldr	r0, [r7, #4]
 8005096:	f7ff f952 	bl	800433e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800509a:	e029      	b.n	80050f0 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800509c:	893b      	ldrh	r3, [r7, #8]
 800509e:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80050a0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80050a4:	6878      	ldr	r0, [r7, #4]
 80050a6:	f000 ffc5 	bl	8006034 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2200      	movs	r2, #0
 80050ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80050b2:	89ba      	ldrh	r2, [r7, #12]
 80050b4:	7bfb      	ldrb	r3, [r7, #15]
 80050b6:	4619      	mov	r1, r3
 80050b8:	6878      	ldr	r0, [r7, #4]
 80050ba:	f7ff f940 	bl	800433e <HAL_I2C_AddrCallback>
}
 80050be:	e017      	b.n	80050f0 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80050c0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80050c4:	6878      	ldr	r0, [r7, #4]
 80050c6:	f000 ffb5 	bl	8006034 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2200      	movs	r2, #0
 80050ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80050d2:	89ba      	ldrh	r2, [r7, #12]
 80050d4:	7bfb      	ldrb	r3, [r7, #15]
 80050d6:	4619      	mov	r1, r3
 80050d8:	6878      	ldr	r0, [r7, #4]
 80050da:	f7ff f930 	bl	800433e <HAL_I2C_AddrCallback>
}
 80050de:	e007      	b.n	80050f0 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	2208      	movs	r2, #8
 80050e6:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2200      	movs	r2, #0
 80050ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 80050f0:	bf00      	nop
 80050f2:	3710      	adds	r7, #16
 80050f4:	46bd      	mov	sp, r7
 80050f6:	bd80      	pop	{r7, pc}

080050f8 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b082      	sub	sp, #8
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2200      	movs	r2, #0
 8005104:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800510e:	b2db      	uxtb	r3, r3
 8005110:	2b21      	cmp	r3, #33	@ 0x21
 8005112:	d115      	bne.n	8005140 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2220      	movs	r2, #32
 8005118:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2211      	movs	r2, #17
 8005120:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2200      	movs	r2, #0
 8005126:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005128:	2101      	movs	r1, #1
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	f000 ff82 	bl	8006034 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2200      	movs	r2, #0
 8005134:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8005138:	6878      	ldr	r0, [r7, #4]
 800513a:	f7ff f8d8 	bl	80042ee <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800513e:	e014      	b.n	800516a <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2220      	movs	r2, #32
 8005144:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2212      	movs	r2, #18
 800514c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2200      	movs	r2, #0
 8005152:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005154:	2102      	movs	r1, #2
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	f000 ff6c 	bl	8006034 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2200      	movs	r2, #0
 8005160:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8005164:	6878      	ldr	r0, [r7, #4]
 8005166:	f7ff f8cc 	bl	8004302 <HAL_I2C_MasterRxCpltCallback>
}
 800516a:	bf00      	nop
 800516c:	3708      	adds	r7, #8
 800516e:	46bd      	mov	sp, r7
 8005170:	bd80      	pop	{r7, pc}

08005172 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8005172:	b580      	push	{r7, lr}
 8005174:	b084      	sub	sp, #16
 8005176:	af00      	add	r7, sp, #0
 8005178:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2200      	movs	r2, #0
 8005186:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005190:	2b00      	cmp	r3, #0
 8005192:	d008      	beq.n	80051a6 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	681a      	ldr	r2, [r3, #0]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80051a2:	601a      	str	r2, [r3, #0]
 80051a4:	e00c      	b.n	80051c0 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d007      	beq.n	80051c0 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	681a      	ldr	r2, [r3, #0]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80051be:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80051c6:	b2db      	uxtb	r3, r3
 80051c8:	2b29      	cmp	r3, #41	@ 0x29
 80051ca:	d112      	bne.n	80051f2 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2228      	movs	r2, #40	@ 0x28
 80051d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2221      	movs	r2, #33	@ 0x21
 80051d8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80051da:	2101      	movs	r1, #1
 80051dc:	6878      	ldr	r0, [r7, #4]
 80051de:	f000 ff29 	bl	8006034 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2200      	movs	r2, #0
 80051e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80051ea:	6878      	ldr	r0, [r7, #4]
 80051ec:	f7ff f893 	bl	8004316 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80051f0:	e017      	b.n	8005222 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80051f8:	b2db      	uxtb	r3, r3
 80051fa:	2b2a      	cmp	r3, #42	@ 0x2a
 80051fc:	d111      	bne.n	8005222 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2228      	movs	r2, #40	@ 0x28
 8005202:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2222      	movs	r2, #34	@ 0x22
 800520a:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800520c:	2102      	movs	r1, #2
 800520e:	6878      	ldr	r0, [r7, #4]
 8005210:	f000 ff10 	bl	8006034 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2200      	movs	r2, #0
 8005218:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800521c:	6878      	ldr	r0, [r7, #4]
 800521e:	f7ff f884 	bl	800432a <HAL_I2C_SlaveRxCpltCallback>
}
 8005222:	bf00      	nop
 8005224:	3710      	adds	r7, #16
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}
	...

0800522c <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b086      	sub	sp, #24
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
 8005234:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	2220      	movs	r2, #32
 8005240:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005248:	b2db      	uxtb	r3, r3
 800524a:	2b21      	cmp	r3, #33	@ 0x21
 800524c:	d107      	bne.n	800525e <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800524e:	2101      	movs	r1, #1
 8005250:	6878      	ldr	r0, [r7, #4]
 8005252:	f000 feef 	bl	8006034 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2211      	movs	r2, #17
 800525a:	631a      	str	r2, [r3, #48]	@ 0x30
 800525c:	e00c      	b.n	8005278 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005264:	b2db      	uxtb	r3, r3
 8005266:	2b22      	cmp	r3, #34	@ 0x22
 8005268:	d106      	bne.n	8005278 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800526a:	2102      	movs	r1, #2
 800526c:	6878      	ldr	r0, [r7, #4]
 800526e:	f000 fee1 	bl	8006034 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2212      	movs	r2, #18
 8005276:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	6859      	ldr	r1, [r3, #4]
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681a      	ldr	r2, [r3, #0]
 8005282:	4b4c      	ldr	r3, [pc, #304]	@ (80053b4 <I2C_ITMasterCplt+0x188>)
 8005284:	400b      	ands	r3, r1
 8005286:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2200      	movs	r2, #0
 800528c:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	4a49      	ldr	r2, [pc, #292]	@ (80053b8 <I2C_ITMasterCplt+0x18c>)
 8005292:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	f003 0310 	and.w	r3, r3, #16
 800529a:	2b00      	cmp	r3, #0
 800529c:	d009      	beq.n	80052b2 <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	2210      	movs	r2, #16
 80052a4:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052aa:	f043 0204 	orr.w	r2, r3, #4
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80052b8:	b2db      	uxtb	r3, r3
 80052ba:	2b60      	cmp	r3, #96	@ 0x60
 80052bc:	d10a      	bne.n	80052d4 <I2C_ITMasterCplt+0xa8>
 80052be:	697b      	ldr	r3, [r7, #20]
 80052c0:	f003 0304 	and.w	r3, r3, #4
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d005      	beq.n	80052d4 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052ce:	b2db      	uxtb	r3, r3
 80052d0:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 80052d2:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80052d4:	6878      	ldr	r0, [r7, #4]
 80052d6:	f000 fc30 	bl	8005b3a <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052de:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80052e6:	b2db      	uxtb	r3, r3
 80052e8:	2b60      	cmp	r3, #96	@ 0x60
 80052ea:	d002      	beq.n	80052f2 <I2C_ITMasterCplt+0xc6>
 80052ec:	693b      	ldr	r3, [r7, #16]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d006      	beq.n	8005300 <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052f6:	4619      	mov	r1, r3
 80052f8:	6878      	ldr	r0, [r7, #4]
 80052fa:	f000 fb07 	bl	800590c <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 80052fe:	e054      	b.n	80053aa <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005306:	b2db      	uxtb	r3, r3
 8005308:	2b21      	cmp	r3, #33	@ 0x21
 800530a:	d124      	bne.n	8005356 <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2220      	movs	r2, #32
 8005310:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2200      	movs	r2, #0
 8005318:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005320:	b2db      	uxtb	r3, r3
 8005322:	2b40      	cmp	r3, #64	@ 0x40
 8005324:	d10b      	bne.n	800533e <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2200      	movs	r2, #0
 800532a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2200      	movs	r2, #0
 8005332:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8005336:	6878      	ldr	r0, [r7, #4]
 8005338:	f7ff f819 	bl	800436e <HAL_I2C_MemTxCpltCallback>
}
 800533c:	e035      	b.n	80053aa <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2200      	movs	r2, #0
 8005342:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2200      	movs	r2, #0
 800534a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	f7fe ffcd 	bl	80042ee <HAL_I2C_MasterTxCpltCallback>
}
 8005354:	e029      	b.n	80053aa <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800535c:	b2db      	uxtb	r3, r3
 800535e:	2b22      	cmp	r3, #34	@ 0x22
 8005360:	d123      	bne.n	80053aa <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2220      	movs	r2, #32
 8005366:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2200      	movs	r2, #0
 800536e:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005376:	b2db      	uxtb	r3, r3
 8005378:	2b40      	cmp	r3, #64	@ 0x40
 800537a:	d10b      	bne.n	8005394 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2200      	movs	r2, #0
 8005380:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2200      	movs	r2, #0
 8005388:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 800538c:	6878      	ldr	r0, [r7, #4]
 800538e:	f7fe fff8 	bl	8004382 <HAL_I2C_MemRxCpltCallback>
}
 8005392:	e00a      	b.n	80053aa <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2200      	movs	r2, #0
 8005398:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2200      	movs	r2, #0
 80053a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80053a4:	6878      	ldr	r0, [r7, #4]
 80053a6:	f7fe ffac 	bl	8004302 <HAL_I2C_MasterRxCpltCallback>
}
 80053aa:	bf00      	nop
 80053ac:	3718      	adds	r7, #24
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}
 80053b2:	bf00      	nop
 80053b4:	fe00e800 	.word	0xfe00e800
 80053b8:	ffff0000 	.word	0xffff0000

080053bc <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b086      	sub	sp, #24
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
 80053c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053d6:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80053de:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	2220      	movs	r2, #32
 80053e6:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80053e8:	7afb      	ldrb	r3, [r7, #11]
 80053ea:	2b21      	cmp	r3, #33	@ 0x21
 80053ec:	d002      	beq.n	80053f4 <I2C_ITSlaveCplt+0x38>
 80053ee:	7afb      	ldrb	r3, [r7, #11]
 80053f0:	2b29      	cmp	r3, #41	@ 0x29
 80053f2:	d108      	bne.n	8005406 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80053f4:	f248 0101 	movw	r1, #32769	@ 0x8001
 80053f8:	6878      	ldr	r0, [r7, #4]
 80053fa:	f000 fe1b 	bl	8006034 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2221      	movs	r2, #33	@ 0x21
 8005402:	631a      	str	r2, [r3, #48]	@ 0x30
 8005404:	e019      	b.n	800543a <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005406:	7afb      	ldrb	r3, [r7, #11]
 8005408:	2b22      	cmp	r3, #34	@ 0x22
 800540a:	d002      	beq.n	8005412 <I2C_ITSlaveCplt+0x56>
 800540c:	7afb      	ldrb	r3, [r7, #11]
 800540e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005410:	d108      	bne.n	8005424 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8005412:	f248 0102 	movw	r1, #32770	@ 0x8002
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	f000 fe0c 	bl	8006034 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2222      	movs	r2, #34	@ 0x22
 8005420:	631a      	str	r2, [r3, #48]	@ 0x30
 8005422:	e00a      	b.n	800543a <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8005424:	7afb      	ldrb	r3, [r7, #11]
 8005426:	2b28      	cmp	r3, #40	@ 0x28
 8005428:	d107      	bne.n	800543a <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800542a:	f248 0103 	movw	r1, #32771	@ 0x8003
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	f000 fe00 	bl	8006034 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2200      	movs	r2, #0
 8005438:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	685a      	ldr	r2, [r3, #4]
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005448:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	6859      	ldr	r1, [r3, #4]
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681a      	ldr	r2, [r3, #0]
 8005454:	4b7f      	ldr	r3, [pc, #508]	@ (8005654 <I2C_ITSlaveCplt+0x298>)
 8005456:	400b      	ands	r3, r1
 8005458:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800545a:	6878      	ldr	r0, [r7, #4]
 800545c:	f000 fb6d 	bl	8005b3a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8005460:	693b      	ldr	r3, [r7, #16]
 8005462:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005466:	2b00      	cmp	r3, #0
 8005468:	d07a      	beq.n	8005560 <I2C_ITSlaveCplt+0x1a4>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	681a      	ldr	r2, [r3, #0]
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005478:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800547e:	2b00      	cmp	r3, #0
 8005480:	f000 8111 	beq.w	80056a6 <I2C_ITSlaveCplt+0x2ea>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4a73      	ldr	r2, [pc, #460]	@ (8005658 <I2C_ITSlaveCplt+0x29c>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d059      	beq.n	8005544 <I2C_ITSlaveCplt+0x188>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a71      	ldr	r2, [pc, #452]	@ (800565c <I2C_ITSlaveCplt+0x2a0>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d053      	beq.n	8005544 <I2C_ITSlaveCplt+0x188>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a6f      	ldr	r2, [pc, #444]	@ (8005660 <I2C_ITSlaveCplt+0x2a4>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d04d      	beq.n	8005544 <I2C_ITSlaveCplt+0x188>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4a6d      	ldr	r2, [pc, #436]	@ (8005664 <I2C_ITSlaveCplt+0x2a8>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d047      	beq.n	8005544 <I2C_ITSlaveCplt+0x188>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4a6b      	ldr	r2, [pc, #428]	@ (8005668 <I2C_ITSlaveCplt+0x2ac>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d041      	beq.n	8005544 <I2C_ITSlaveCplt+0x188>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4a69      	ldr	r2, [pc, #420]	@ (800566c <I2C_ITSlaveCplt+0x2b0>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d03b      	beq.n	8005544 <I2C_ITSlaveCplt+0x188>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a67      	ldr	r2, [pc, #412]	@ (8005670 <I2C_ITSlaveCplt+0x2b4>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d035      	beq.n	8005544 <I2C_ITSlaveCplt+0x188>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a65      	ldr	r2, [pc, #404]	@ (8005674 <I2C_ITSlaveCplt+0x2b8>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d02f      	beq.n	8005544 <I2C_ITSlaveCplt+0x188>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a63      	ldr	r2, [pc, #396]	@ (8005678 <I2C_ITSlaveCplt+0x2bc>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d029      	beq.n	8005544 <I2C_ITSlaveCplt+0x188>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4a61      	ldr	r2, [pc, #388]	@ (800567c <I2C_ITSlaveCplt+0x2c0>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d023      	beq.n	8005544 <I2C_ITSlaveCplt+0x188>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a5f      	ldr	r2, [pc, #380]	@ (8005680 <I2C_ITSlaveCplt+0x2c4>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d01d      	beq.n	8005544 <I2C_ITSlaveCplt+0x188>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a5d      	ldr	r2, [pc, #372]	@ (8005684 <I2C_ITSlaveCplt+0x2c8>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d017      	beq.n	8005544 <I2C_ITSlaveCplt+0x188>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4a5b      	ldr	r2, [pc, #364]	@ (8005688 <I2C_ITSlaveCplt+0x2cc>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d011      	beq.n	8005544 <I2C_ITSlaveCplt+0x188>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a59      	ldr	r2, [pc, #356]	@ (800568c <I2C_ITSlaveCplt+0x2d0>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d00b      	beq.n	8005544 <I2C_ITSlaveCplt+0x188>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a57      	ldr	r2, [pc, #348]	@ (8005690 <I2C_ITSlaveCplt+0x2d4>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d005      	beq.n	8005544 <I2C_ITSlaveCplt+0x188>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4a55      	ldr	r2, [pc, #340]	@ (8005694 <I2C_ITSlaveCplt+0x2d8>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d105      	bne.n	8005550 <I2C_ITSlaveCplt+0x194>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	b29b      	uxth	r3, r3
 800554e:	e004      	b.n	800555a <I2C_ITSlaveCplt+0x19e>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	b29b      	uxth	r3, r3
 800555a:	687a      	ldr	r2, [r7, #4]
 800555c:	8553      	strh	r3, [r2, #42]	@ 0x2a
 800555e:	e0a2      	b.n	80056a6 <I2C_ITSlaveCplt+0x2ea>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8005560:	693b      	ldr	r3, [r7, #16]
 8005562:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005566:	2b00      	cmp	r3, #0
 8005568:	f000 809d 	beq.w	80056a6 <I2C_ITSlaveCplt+0x2ea>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	681a      	ldr	r2, [r3, #0]
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800557a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005580:	2b00      	cmp	r3, #0
 8005582:	f000 8090 	beq.w	80056a6 <I2C_ITSlaveCplt+0x2ea>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4a32      	ldr	r2, [pc, #200]	@ (8005658 <I2C_ITSlaveCplt+0x29c>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d059      	beq.n	8005646 <I2C_ITSlaveCplt+0x28a>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4a30      	ldr	r2, [pc, #192]	@ (800565c <I2C_ITSlaveCplt+0x2a0>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d053      	beq.n	8005646 <I2C_ITSlaveCplt+0x28a>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4a2e      	ldr	r2, [pc, #184]	@ (8005660 <I2C_ITSlaveCplt+0x2a4>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d04d      	beq.n	8005646 <I2C_ITSlaveCplt+0x28a>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a2c      	ldr	r2, [pc, #176]	@ (8005664 <I2C_ITSlaveCplt+0x2a8>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d047      	beq.n	8005646 <I2C_ITSlaveCplt+0x28a>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4a2a      	ldr	r2, [pc, #168]	@ (8005668 <I2C_ITSlaveCplt+0x2ac>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d041      	beq.n	8005646 <I2C_ITSlaveCplt+0x28a>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4a28      	ldr	r2, [pc, #160]	@ (800566c <I2C_ITSlaveCplt+0x2b0>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d03b      	beq.n	8005646 <I2C_ITSlaveCplt+0x28a>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4a26      	ldr	r2, [pc, #152]	@ (8005670 <I2C_ITSlaveCplt+0x2b4>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d035      	beq.n	8005646 <I2C_ITSlaveCplt+0x28a>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a24      	ldr	r2, [pc, #144]	@ (8005674 <I2C_ITSlaveCplt+0x2b8>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d02f      	beq.n	8005646 <I2C_ITSlaveCplt+0x28a>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4a22      	ldr	r2, [pc, #136]	@ (8005678 <I2C_ITSlaveCplt+0x2bc>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d029      	beq.n	8005646 <I2C_ITSlaveCplt+0x28a>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4a20      	ldr	r2, [pc, #128]	@ (800567c <I2C_ITSlaveCplt+0x2c0>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d023      	beq.n	8005646 <I2C_ITSlaveCplt+0x28a>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4a1e      	ldr	r2, [pc, #120]	@ (8005680 <I2C_ITSlaveCplt+0x2c4>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d01d      	beq.n	8005646 <I2C_ITSlaveCplt+0x28a>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4a1c      	ldr	r2, [pc, #112]	@ (8005684 <I2C_ITSlaveCplt+0x2c8>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d017      	beq.n	8005646 <I2C_ITSlaveCplt+0x28a>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a1a      	ldr	r2, [pc, #104]	@ (8005688 <I2C_ITSlaveCplt+0x2cc>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d011      	beq.n	8005646 <I2C_ITSlaveCplt+0x28a>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4a18      	ldr	r2, [pc, #96]	@ (800568c <I2C_ITSlaveCplt+0x2d0>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d00b      	beq.n	8005646 <I2C_ITSlaveCplt+0x28a>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	4a16      	ldr	r2, [pc, #88]	@ (8005690 <I2C_ITSlaveCplt+0x2d4>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d005      	beq.n	8005646 <I2C_ITSlaveCplt+0x28a>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4a14      	ldr	r2, [pc, #80]	@ (8005694 <I2C_ITSlaveCplt+0x2d8>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d128      	bne.n	8005698 <I2C_ITSlaveCplt+0x2dc>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	b29b      	uxth	r3, r3
 8005650:	e027      	b.n	80056a2 <I2C_ITSlaveCplt+0x2e6>
 8005652:	bf00      	nop
 8005654:	fe00e800 	.word	0xfe00e800
 8005658:	40020010 	.word	0x40020010
 800565c:	40020028 	.word	0x40020028
 8005660:	40020040 	.word	0x40020040
 8005664:	40020058 	.word	0x40020058
 8005668:	40020070 	.word	0x40020070
 800566c:	40020088 	.word	0x40020088
 8005670:	400200a0 	.word	0x400200a0
 8005674:	400200b8 	.word	0x400200b8
 8005678:	40020410 	.word	0x40020410
 800567c:	40020428 	.word	0x40020428
 8005680:	40020440 	.word	0x40020440
 8005684:	40020458 	.word	0x40020458
 8005688:	40020470 	.word	0x40020470
 800568c:	40020488 	.word	0x40020488
 8005690:	400204a0 	.word	0x400204a0
 8005694:	400204b8 	.word	0x400204b8
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	b29b      	uxth	r3, r3
 80056a2:	687a      	ldr	r2, [r7, #4]
 80056a4:	8553      	strh	r3, [r2, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	f003 0304 	and.w	r3, r3, #4
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d020      	beq.n	80056f2 <I2C_ITSlaveCplt+0x336>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	f023 0304 	bic.w	r3, r3, #4
 80056b6:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056c2:	b2d2      	uxtb	r2, r2
 80056c4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056ca:	1c5a      	adds	r2, r3, #1
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d00c      	beq.n	80056f2 <I2C_ITSlaveCplt+0x336>
    {
      hi2c->XferSize--;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056dc:	3b01      	subs	r3, #1
 80056de:	b29a      	uxth	r2, r3
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056e8:	b29b      	uxth	r3, r3
 80056ea:	3b01      	subs	r3, #1
 80056ec:	b29a      	uxth	r2, r3
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056f6:	b29b      	uxth	r3, r3
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d005      	beq.n	8005708 <I2C_ITSlaveCplt+0x34c>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005700:	f043 0204 	orr.w	r2, r3, #4
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005708:	697b      	ldr	r3, [r7, #20]
 800570a:	f003 0310 	and.w	r3, r3, #16
 800570e:	2b00      	cmp	r3, #0
 8005710:	d049      	beq.n	80057a6 <I2C_ITSlaveCplt+0x3ea>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8005712:	693b      	ldr	r3, [r7, #16]
 8005714:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005718:	2b00      	cmp	r3, #0
 800571a:	d044      	beq.n	80057a6 <I2C_ITSlaveCplt+0x3ea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005720:	b29b      	uxth	r3, r3
 8005722:	2b00      	cmp	r3, #0
 8005724:	d128      	bne.n	8005778 <I2C_ITSlaveCplt+0x3bc>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800572c:	b2db      	uxtb	r3, r3
 800572e:	2b28      	cmp	r3, #40	@ 0x28
 8005730:	d108      	bne.n	8005744 <I2C_ITSlaveCplt+0x388>
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005738:	d104      	bne.n	8005744 <I2C_ITSlaveCplt+0x388>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800573a:	6979      	ldr	r1, [r7, #20]
 800573c:	6878      	ldr	r0, [r7, #4]
 800573e:	f000 f891 	bl	8005864 <I2C_ITListenCplt>
 8005742:	e030      	b.n	80057a6 <I2C_ITSlaveCplt+0x3ea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800574a:	b2db      	uxtb	r3, r3
 800574c:	2b29      	cmp	r3, #41	@ 0x29
 800574e:	d10e      	bne.n	800576e <I2C_ITSlaveCplt+0x3b2>
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005756:	d00a      	beq.n	800576e <I2C_ITSlaveCplt+0x3b2>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	2210      	movs	r2, #16
 800575e:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8005760:	6878      	ldr	r0, [r7, #4]
 8005762:	f000 f9ea 	bl	8005b3a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005766:	6878      	ldr	r0, [r7, #4]
 8005768:	f7ff fd03 	bl	8005172 <I2C_ITSlaveSeqCplt>
 800576c:	e01b      	b.n	80057a6 <I2C_ITSlaveCplt+0x3ea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	2210      	movs	r2, #16
 8005774:	61da      	str	r2, [r3, #28]
 8005776:	e016      	b.n	80057a6 <I2C_ITSlaveCplt+0x3ea>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	2210      	movs	r2, #16
 800577e:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005784:	f043 0204 	orr.w	r2, r3, #4
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d003      	beq.n	800579a <I2C_ITSlaveCplt+0x3de>
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005798:	d105      	bne.n	80057a6 <I2C_ITSlaveCplt+0x3ea>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800579e:	4619      	mov	r1, r3
 80057a0:	6878      	ldr	r0, [r7, #4]
 80057a2:	f000 f8b3 	bl	800590c <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2200      	movs	r2, #0
 80057aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2200      	movs	r2, #0
 80057b2:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d010      	beq.n	80057de <I2C_ITSlaveCplt+0x422>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057c0:	4619      	mov	r1, r3
 80057c2:	6878      	ldr	r0, [r7, #4]
 80057c4:	f000 f8a2 	bl	800590c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80057ce:	b2db      	uxtb	r3, r3
 80057d0:	2b28      	cmp	r3, #40	@ 0x28
 80057d2:	d141      	bne.n	8005858 <I2C_ITSlaveCplt+0x49c>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80057d4:	6979      	ldr	r1, [r7, #20]
 80057d6:	6878      	ldr	r0, [r7, #4]
 80057d8:	f000 f844 	bl	8005864 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80057dc:	e03c      	b.n	8005858 <I2C_ITSlaveCplt+0x49c>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057e2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80057e6:	d014      	beq.n	8005812 <I2C_ITSlaveCplt+0x456>
    I2C_ITSlaveSeqCplt(hi2c);
 80057e8:	6878      	ldr	r0, [r7, #4]
 80057ea:	f7ff fcc2 	bl	8005172 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	4a1b      	ldr	r2, [pc, #108]	@ (8005860 <I2C_ITSlaveCplt+0x4a4>)
 80057f2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2220      	movs	r2, #32
 80057f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2200      	movs	r2, #0
 8005800:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2200      	movs	r2, #0
 8005806:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	f7fe fda5 	bl	800435a <HAL_I2C_ListenCpltCallback>
}
 8005810:	e022      	b.n	8005858 <I2C_ITSlaveCplt+0x49c>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005818:	b2db      	uxtb	r3, r3
 800581a:	2b22      	cmp	r3, #34	@ 0x22
 800581c:	d10e      	bne.n	800583c <I2C_ITSlaveCplt+0x480>
    hi2c->State = HAL_I2C_STATE_READY;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2220      	movs	r2, #32
 8005822:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2200      	movs	r2, #0
 800582a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2200      	movs	r2, #0
 8005830:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005834:	6878      	ldr	r0, [r7, #4]
 8005836:	f7fe fd78 	bl	800432a <HAL_I2C_SlaveRxCpltCallback>
}
 800583a:	e00d      	b.n	8005858 <I2C_ITSlaveCplt+0x49c>
    hi2c->State = HAL_I2C_STATE_READY;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2220      	movs	r2, #32
 8005840:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2200      	movs	r2, #0
 8005848:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2200      	movs	r2, #0
 800584e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005852:	6878      	ldr	r0, [r7, #4]
 8005854:	f7fe fd5f 	bl	8004316 <HAL_I2C_SlaveTxCpltCallback>
}
 8005858:	bf00      	nop
 800585a:	3718      	adds	r7, #24
 800585c:	46bd      	mov	sp, r7
 800585e:	bd80      	pop	{r7, pc}
 8005860:	ffff0000 	.word	0xffff0000

08005864 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b082      	sub	sp, #8
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
 800586c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	4a25      	ldr	r2, [pc, #148]	@ (8005908 <I2C_ITListenCplt+0xa4>)
 8005872:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2200      	movs	r2, #0
 8005878:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2220      	movs	r2, #32
 800587e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2200      	movs	r2, #0
 8005886:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2200      	movs	r2, #0
 800588e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	f003 0304 	and.w	r3, r3, #4
 8005896:	2b00      	cmp	r3, #0
 8005898:	d022      	beq.n	80058e0 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058a4:	b2d2      	uxtb	r2, r2
 80058a6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058ac:	1c5a      	adds	r2, r3, #1
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d012      	beq.n	80058e0 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058be:	3b01      	subs	r3, #1
 80058c0:	b29a      	uxth	r2, r3
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058ca:	b29b      	uxth	r3, r3
 80058cc:	3b01      	subs	r3, #1
 80058ce:	b29a      	uxth	r2, r3
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058d8:	f043 0204 	orr.w	r2, r3, #4
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80058e0:	f248 0103 	movw	r1, #32771	@ 0x8003
 80058e4:	6878      	ldr	r0, [r7, #4]
 80058e6:	f000 fba5 	bl	8006034 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	2210      	movs	r2, #16
 80058f0:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2200      	movs	r2, #0
 80058f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	f7fe fd2d 	bl	800435a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8005900:	bf00      	nop
 8005902:	3708      	adds	r7, #8
 8005904:	46bd      	mov	sp, r7
 8005906:	bd80      	pop	{r7, pc}
 8005908:	ffff0000 	.word	0xffff0000

0800590c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b084      	sub	sp, #16
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
 8005914:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800591c:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2200      	movs	r2, #0
 8005922:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	4a6d      	ldr	r2, [pc, #436]	@ (8005ae0 <I2C_ITError+0x1d4>)
 800592a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2200      	movs	r2, #0
 8005930:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	431a      	orrs	r2, r3
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800593e:	7bfb      	ldrb	r3, [r7, #15]
 8005940:	2b28      	cmp	r3, #40	@ 0x28
 8005942:	d005      	beq.n	8005950 <I2C_ITError+0x44>
 8005944:	7bfb      	ldrb	r3, [r7, #15]
 8005946:	2b29      	cmp	r3, #41	@ 0x29
 8005948:	d002      	beq.n	8005950 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800594a:	7bfb      	ldrb	r3, [r7, #15]
 800594c:	2b2a      	cmp	r3, #42	@ 0x2a
 800594e:	d10b      	bne.n	8005968 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005950:	2103      	movs	r1, #3
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	f000 fb6e 	bl	8006034 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2228      	movs	r2, #40	@ 0x28
 800595c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	4a60      	ldr	r2, [pc, #384]	@ (8005ae4 <I2C_ITError+0x1d8>)
 8005964:	635a      	str	r2, [r3, #52]	@ 0x34
 8005966:	e030      	b.n	80059ca <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005968:	f248 0103 	movw	r1, #32771	@ 0x8003
 800596c:	6878      	ldr	r0, [r7, #4]
 800596e:	f000 fb61 	bl	8006034 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005972:	6878      	ldr	r0, [r7, #4]
 8005974:	f000 f8e1 	bl	8005b3a <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800597e:	b2db      	uxtb	r3, r3
 8005980:	2b60      	cmp	r3, #96	@ 0x60
 8005982:	d01f      	beq.n	80059c4 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2220      	movs	r2, #32
 8005988:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	699b      	ldr	r3, [r3, #24]
 8005992:	f003 0320 	and.w	r3, r3, #32
 8005996:	2b20      	cmp	r3, #32
 8005998:	d114      	bne.n	80059c4 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	699b      	ldr	r3, [r3, #24]
 80059a0:	f003 0310 	and.w	r3, r3, #16
 80059a4:	2b10      	cmp	r3, #16
 80059a6:	d109      	bne.n	80059bc <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	2210      	movs	r2, #16
 80059ae:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059b4:	f043 0204 	orr.w	r2, r3, #4
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	2220      	movs	r2, #32
 80059c2:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2200      	movs	r2, #0
 80059c8:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059ce:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d039      	beq.n	8005a4c <I2C_ITError+0x140>
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	2b11      	cmp	r3, #17
 80059dc:	d002      	beq.n	80059e4 <I2C_ITError+0xd8>
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	2b21      	cmp	r3, #33	@ 0x21
 80059e2:	d133      	bne.n	8005a4c <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80059ee:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80059f2:	d107      	bne.n	8005a04 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	681a      	ldr	r2, [r3, #0]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005a02:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a08:	4618      	mov	r0, r3
 8005a0a:	f7fd fc3b 	bl	8003284 <HAL_DMA_GetState>
 8005a0e:	4603      	mov	r3, r0
 8005a10:	2b01      	cmp	r3, #1
 8005a12:	d017      	beq.n	8005a44 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a18:	4a33      	ldr	r2, [pc, #204]	@ (8005ae8 <I2C_ITError+0x1dc>)
 8005a1a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a28:	4618      	mov	r0, r3
 8005a2a:	f7fc fa83 	bl	8001f34 <HAL_DMA_Abort_IT>
 8005a2e:	4603      	mov	r3, r0
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d04d      	beq.n	8005ad0 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a3a:	687a      	ldr	r2, [r7, #4]
 8005a3c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005a3e:	4610      	mov	r0, r2
 8005a40:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005a42:	e045      	b.n	8005ad0 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8005a44:	6878      	ldr	r0, [r7, #4]
 8005a46:	f000 f851 	bl	8005aec <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005a4a:	e041      	b.n	8005ad0 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d039      	beq.n	8005ac8 <I2C_ITError+0x1bc>
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	2b12      	cmp	r3, #18
 8005a58:	d002      	beq.n	8005a60 <I2C_ITError+0x154>
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	2b22      	cmp	r3, #34	@ 0x22
 8005a5e:	d133      	bne.n	8005ac8 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005a6a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005a6e:	d107      	bne.n	8005a80 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	681a      	ldr	r2, [r3, #0]
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005a7e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a84:	4618      	mov	r0, r3
 8005a86:	f7fd fbfd 	bl	8003284 <HAL_DMA_GetState>
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	2b01      	cmp	r3, #1
 8005a8e:	d017      	beq.n	8005ac0 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a94:	4a14      	ldr	r2, [pc, #80]	@ (8005ae8 <I2C_ITError+0x1dc>)
 8005a96:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	f7fc fa45 	bl	8001f34 <HAL_DMA_Abort_IT>
 8005aaa:	4603      	mov	r3, r0
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d011      	beq.n	8005ad4 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ab4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ab6:	687a      	ldr	r2, [r7, #4]
 8005ab8:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005aba:	4610      	mov	r0, r2
 8005abc:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005abe:	e009      	b.n	8005ad4 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8005ac0:	6878      	ldr	r0, [r7, #4]
 8005ac2:	f000 f813 	bl	8005aec <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005ac6:	e005      	b.n	8005ad4 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8005ac8:	6878      	ldr	r0, [r7, #4]
 8005aca:	f000 f80f 	bl	8005aec <I2C_TreatErrorCallback>
  }
}
 8005ace:	e002      	b.n	8005ad6 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005ad0:	bf00      	nop
 8005ad2:	e000      	b.n	8005ad6 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005ad4:	bf00      	nop
}
 8005ad6:	bf00      	nop
 8005ad8:	3710      	adds	r7, #16
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bd80      	pop	{r7, pc}
 8005ade:	bf00      	nop
 8005ae0:	ffff0000 	.word	0xffff0000
 8005ae4:	08004629 	.word	0x08004629
 8005ae8:	08005e8d 	.word	0x08005e8d

08005aec <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b082      	sub	sp, #8
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005afa:	b2db      	uxtb	r3, r3
 8005afc:	2b60      	cmp	r3, #96	@ 0x60
 8005afe:	d10e      	bne.n	8005b1e <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2220      	movs	r2, #32
 8005b04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2200      	movs	r2, #0
 8005b12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005b16:	6878      	ldr	r0, [r7, #4]
 8005b18:	f7fe fc47 	bl	80043aa <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005b1c:	e009      	b.n	8005b32 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2200      	movs	r2, #0
 8005b22:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2200      	movs	r2, #0
 8005b28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8005b2c:	6878      	ldr	r0, [r7, #4]
 8005b2e:	f7fe fc32 	bl	8004396 <HAL_I2C_ErrorCallback>
}
 8005b32:	bf00      	nop
 8005b34:	3708      	adds	r7, #8
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bd80      	pop	{r7, pc}

08005b3a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005b3a:	b480      	push	{r7}
 8005b3c:	b083      	sub	sp, #12
 8005b3e:	af00      	add	r7, sp, #0
 8005b40:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	699b      	ldr	r3, [r3, #24]
 8005b48:	f003 0302 	and.w	r3, r3, #2
 8005b4c:	2b02      	cmp	r3, #2
 8005b4e:	d103      	bne.n	8005b58 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	2200      	movs	r2, #0
 8005b56:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	699b      	ldr	r3, [r3, #24]
 8005b5e:	f003 0301 	and.w	r3, r3, #1
 8005b62:	2b01      	cmp	r3, #1
 8005b64:	d007      	beq.n	8005b76 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	699a      	ldr	r2, [r3, #24]
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f042 0201 	orr.w	r2, r2, #1
 8005b74:	619a      	str	r2, [r3, #24]
  }
}
 8005b76:	bf00      	nop
 8005b78:	370c      	adds	r7, #12
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b80:	4770      	bx	lr

08005b82 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005b82:	b580      	push	{r7, lr}
 8005b84:	b084      	sub	sp, #16
 8005b86:	af00      	add	r7, sp, #0
 8005b88:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b8e:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	681a      	ldr	r2, [r3, #0]
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005b9e:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ba4:	b29b      	uxth	r3, r3
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d104      	bne.n	8005bb4 <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8005baa:	2120      	movs	r1, #32
 8005bac:	68f8      	ldr	r0, [r7, #12]
 8005bae:	f000 f9bd 	bl	8005f2c <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8005bb2:	e02d      	b.n	8005c10 <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bb8:	68fa      	ldr	r2, [r7, #12]
 8005bba:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8005bbc:	441a      	add	r2, r3
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005bc6:	b29b      	uxth	r3, r3
 8005bc8:	2bff      	cmp	r3, #255	@ 0xff
 8005bca:	d903      	bls.n	8005bd4 <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	22ff      	movs	r2, #255	@ 0xff
 8005bd0:	851a      	strh	r2, [r3, #40]	@ 0x28
 8005bd2:	e004      	b.n	8005bde <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005bd8:	b29a      	uxth	r2, r3
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005be6:	4619      	mov	r1, r3
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	3328      	adds	r3, #40	@ 0x28
 8005bee:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8005bf4:	f7fb ff34 	bl	8001a60 <HAL_DMA_Start_IT>
 8005bf8:	4603      	mov	r3, r0
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d004      	beq.n	8005c08 <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8005bfe:	2110      	movs	r1, #16
 8005c00:	68f8      	ldr	r0, [r7, #12]
 8005c02:	f7ff fe83 	bl	800590c <I2C_ITError>
}
 8005c06:	e003      	b.n	8005c10 <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8005c08:	2140      	movs	r1, #64	@ 0x40
 8005c0a:	68f8      	ldr	r0, [r7, #12]
 8005c0c:	f000 f98e 	bl	8005f2c <I2C_Enable_IRQ>
}
 8005c10:	bf00      	nop
 8005c12:	3710      	adds	r7, #16
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bd80      	pop	{r7, pc}

08005c18 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b084      	sub	sp, #16
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
  uint32_t treatdmaerror = 0U;
 8005c20:	2300      	movs	r3, #0
 8005c22:	60fb      	str	r3, [r7, #12]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c28:	60bb      	str	r3, [r7, #8]

  if (hi2c->hdmatx != NULL)
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d076      	beq.n	8005d20 <I2C_DMAError+0x108>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4a71      	ldr	r2, [pc, #452]	@ (8005e00 <I2C_DMAError+0x1e8>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d059      	beq.n	8005cf2 <I2C_DMAError+0xda>
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4a6f      	ldr	r2, [pc, #444]	@ (8005e04 <I2C_DMAError+0x1ec>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d053      	beq.n	8005cf2 <I2C_DMAError+0xda>
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4a6d      	ldr	r2, [pc, #436]	@ (8005e08 <I2C_DMAError+0x1f0>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d04d      	beq.n	8005cf2 <I2C_DMAError+0xda>
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	4a6b      	ldr	r2, [pc, #428]	@ (8005e0c <I2C_DMAError+0x1f4>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d047      	beq.n	8005cf2 <I2C_DMAError+0xda>
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4a69      	ldr	r2, [pc, #420]	@ (8005e10 <I2C_DMAError+0x1f8>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d041      	beq.n	8005cf2 <I2C_DMAError+0xda>
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4a67      	ldr	r2, [pc, #412]	@ (8005e14 <I2C_DMAError+0x1fc>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d03b      	beq.n	8005cf2 <I2C_DMAError+0xda>
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4a65      	ldr	r2, [pc, #404]	@ (8005e18 <I2C_DMAError+0x200>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d035      	beq.n	8005cf2 <I2C_DMAError+0xda>
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a63      	ldr	r2, [pc, #396]	@ (8005e1c <I2C_DMAError+0x204>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d02f      	beq.n	8005cf2 <I2C_DMAError+0xda>
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4a61      	ldr	r2, [pc, #388]	@ (8005e20 <I2C_DMAError+0x208>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d029      	beq.n	8005cf2 <I2C_DMAError+0xda>
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	4a5f      	ldr	r2, [pc, #380]	@ (8005e24 <I2C_DMAError+0x20c>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d023      	beq.n	8005cf2 <I2C_DMAError+0xda>
 8005caa:	68bb      	ldr	r3, [r7, #8]
 8005cac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4a5d      	ldr	r2, [pc, #372]	@ (8005e28 <I2C_DMAError+0x210>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d01d      	beq.n	8005cf2 <I2C_DMAError+0xda>
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4a5b      	ldr	r2, [pc, #364]	@ (8005e2c <I2C_DMAError+0x214>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d017      	beq.n	8005cf2 <I2C_DMAError+0xda>
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4a59      	ldr	r2, [pc, #356]	@ (8005e30 <I2C_DMAError+0x218>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d011      	beq.n	8005cf2 <I2C_DMAError+0xda>
 8005cce:	68bb      	ldr	r3, [r7, #8]
 8005cd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	4a57      	ldr	r2, [pc, #348]	@ (8005e34 <I2C_DMAError+0x21c>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d00b      	beq.n	8005cf2 <I2C_DMAError+0xda>
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4a55      	ldr	r2, [pc, #340]	@ (8005e38 <I2C_DMAError+0x220>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d005      	beq.n	8005cf2 <I2C_DMAError+0xda>
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4a53      	ldr	r2, [pc, #332]	@ (8005e3c <I2C_DMAError+0x224>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d109      	bne.n	8005d06 <I2C_DMAError+0xee>
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	685b      	ldr	r3, [r3, #4]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	bf0c      	ite	eq
 8005cfe:	2301      	moveq	r3, #1
 8005d00:	2300      	movne	r3, #0
 8005d02:	b2db      	uxtb	r3, r3
 8005d04:	e008      	b.n	8005d18 <I2C_DMAError+0x100>
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	bf0c      	ite	eq
 8005d12:	2301      	moveq	r3, #1
 8005d14:	2300      	movne	r3, #0
 8005d16:	b2db      	uxtb	r3, r3
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d001      	beq.n	8005d20 <I2C_DMAError+0x108>
    {
      treatdmaerror = 1U;
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	60fb      	str	r3, [r7, #12]
    }
  }

  if (hi2c->hdmarx != NULL)
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	f000 8098 	beq.w	8005e5a <I2C_DMAError+0x242>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a33      	ldr	r2, [pc, #204]	@ (8005e00 <I2C_DMAError+0x1e8>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d059      	beq.n	8005dea <I2C_DMAError+0x1d2>
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a31      	ldr	r2, [pc, #196]	@ (8005e04 <I2C_DMAError+0x1ec>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d053      	beq.n	8005dea <I2C_DMAError+0x1d2>
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4a2f      	ldr	r2, [pc, #188]	@ (8005e08 <I2C_DMAError+0x1f0>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d04d      	beq.n	8005dea <I2C_DMAError+0x1d2>
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4a2d      	ldr	r2, [pc, #180]	@ (8005e0c <I2C_DMAError+0x1f4>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d047      	beq.n	8005dea <I2C_DMAError+0x1d2>
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a2b      	ldr	r2, [pc, #172]	@ (8005e10 <I2C_DMAError+0x1f8>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d041      	beq.n	8005dea <I2C_DMAError+0x1d2>
 8005d66:	68bb      	ldr	r3, [r7, #8]
 8005d68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4a29      	ldr	r2, [pc, #164]	@ (8005e14 <I2C_DMAError+0x1fc>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d03b      	beq.n	8005dea <I2C_DMAError+0x1d2>
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a27      	ldr	r2, [pc, #156]	@ (8005e18 <I2C_DMAError+0x200>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d035      	beq.n	8005dea <I2C_DMAError+0x1d2>
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a25      	ldr	r2, [pc, #148]	@ (8005e1c <I2C_DMAError+0x204>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d02f      	beq.n	8005dea <I2C_DMAError+0x1d2>
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a23      	ldr	r2, [pc, #140]	@ (8005e20 <I2C_DMAError+0x208>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d029      	beq.n	8005dea <I2C_DMAError+0x1d2>
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4a21      	ldr	r2, [pc, #132]	@ (8005e24 <I2C_DMAError+0x20c>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d023      	beq.n	8005dea <I2C_DMAError+0x1d2>
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4a1f      	ldr	r2, [pc, #124]	@ (8005e28 <I2C_DMAError+0x210>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d01d      	beq.n	8005dea <I2C_DMAError+0x1d2>
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4a1d      	ldr	r2, [pc, #116]	@ (8005e2c <I2C_DMAError+0x214>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d017      	beq.n	8005dea <I2C_DMAError+0x1d2>
 8005dba:	68bb      	ldr	r3, [r7, #8]
 8005dbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4a1b      	ldr	r2, [pc, #108]	@ (8005e30 <I2C_DMAError+0x218>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d011      	beq.n	8005dea <I2C_DMAError+0x1d2>
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a19      	ldr	r2, [pc, #100]	@ (8005e34 <I2C_DMAError+0x21c>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d00b      	beq.n	8005dea <I2C_DMAError+0x1d2>
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	4a17      	ldr	r2, [pc, #92]	@ (8005e38 <I2C_DMAError+0x220>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d005      	beq.n	8005dea <I2C_DMAError+0x1d2>
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4a15      	ldr	r2, [pc, #84]	@ (8005e3c <I2C_DMAError+0x224>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d12a      	bne.n	8005e40 <I2C_DMAError+0x228>
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	685b      	ldr	r3, [r3, #4]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	bf0c      	ite	eq
 8005df6:	2301      	moveq	r3, #1
 8005df8:	2300      	movne	r3, #0
 8005dfa:	b2db      	uxtb	r3, r3
 8005dfc:	e029      	b.n	8005e52 <I2C_DMAError+0x23a>
 8005dfe:	bf00      	nop
 8005e00:	40020010 	.word	0x40020010
 8005e04:	40020028 	.word	0x40020028
 8005e08:	40020040 	.word	0x40020040
 8005e0c:	40020058 	.word	0x40020058
 8005e10:	40020070 	.word	0x40020070
 8005e14:	40020088 	.word	0x40020088
 8005e18:	400200a0 	.word	0x400200a0
 8005e1c:	400200b8 	.word	0x400200b8
 8005e20:	40020410 	.word	0x40020410
 8005e24:	40020428 	.word	0x40020428
 8005e28:	40020440 	.word	0x40020440
 8005e2c:	40020458 	.word	0x40020458
 8005e30:	40020470 	.word	0x40020470
 8005e34:	40020488 	.word	0x40020488
 8005e38:	400204a0 	.word	0x400204a0
 8005e3c:	400204b8 	.word	0x400204b8
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	685b      	ldr	r3, [r3, #4]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	bf0c      	ite	eq
 8005e4c:	2301      	moveq	r3, #1
 8005e4e:	2300      	movne	r3, #0
 8005e50:	b2db      	uxtb	r3, r3
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d001      	beq.n	8005e5a <I2C_DMAError+0x242>
    {
      treatdmaerror = 1U;
 8005e56:	2301      	movs	r3, #1
 8005e58:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Check if a FIFO error is detected, if true normal use case, so no specific action to perform */
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 8005e5a:	6878      	ldr	r0, [r7, #4]
 8005e5c:	f7fd fa20 	bl	80032a0 <HAL_DMA_GetError>
 8005e60:	4603      	mov	r3, r0
 8005e62:	2b02      	cmp	r3, #2
 8005e64:	d00e      	beq.n	8005e84 <I2C_DMAError+0x26c>
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d00b      	beq.n	8005e84 <I2C_DMAError+0x26c>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	685a      	ldr	r2, [r3, #4]
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005e7a:	605a      	str	r2, [r3, #4]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8005e7c:	2110      	movs	r1, #16
 8005e7e:	68b8      	ldr	r0, [r7, #8]
 8005e80:	f7ff fd44 	bl	800590c <I2C_ITError>
  }
}
 8005e84:	bf00      	nop
 8005e86:	3710      	adds	r7, #16
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	bd80      	pop	{r7, pc}

08005e8c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b084      	sub	sp, #16
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e98:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d003      	beq.n	8005eaa <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d003      	beq.n	8005eba <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8005eba:	68f8      	ldr	r0, [r7, #12]
 8005ebc:	f7ff fe16 	bl	8005aec <I2C_TreatErrorCallback>
}
 8005ec0:	bf00      	nop
 8005ec2:	3710      	adds	r7, #16
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	bd80      	pop	{r7, pc}

08005ec8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005ec8:	b480      	push	{r7}
 8005eca:	b087      	sub	sp, #28
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	60f8      	str	r0, [r7, #12]
 8005ed0:	607b      	str	r3, [r7, #4]
 8005ed2:	460b      	mov	r3, r1
 8005ed4:	817b      	strh	r3, [r7, #10]
 8005ed6:	4613      	mov	r3, r2
 8005ed8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005eda:	897b      	ldrh	r3, [r7, #10]
 8005edc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005ee0:	7a7b      	ldrb	r3, [r7, #9]
 8005ee2:	041b      	lsls	r3, r3, #16
 8005ee4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005ee8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005eee:	6a3b      	ldr	r3, [r7, #32]
 8005ef0:	4313      	orrs	r3, r2
 8005ef2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005ef6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	685a      	ldr	r2, [r3, #4]
 8005efe:	6a3b      	ldr	r3, [r7, #32]
 8005f00:	0d5b      	lsrs	r3, r3, #21
 8005f02:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8005f06:	4b08      	ldr	r3, [pc, #32]	@ (8005f28 <I2C_TransferConfig+0x60>)
 8005f08:	430b      	orrs	r3, r1
 8005f0a:	43db      	mvns	r3, r3
 8005f0c:	ea02 0103 	and.w	r1, r2, r3
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	697a      	ldr	r2, [r7, #20]
 8005f16:	430a      	orrs	r2, r1
 8005f18:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005f1a:	bf00      	nop
 8005f1c:	371c      	adds	r7, #28
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f24:	4770      	bx	lr
 8005f26:	bf00      	nop
 8005f28:	03ff63ff 	.word	0x03ff63ff

08005f2c <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8005f2c:	b480      	push	{r7}
 8005f2e:	b085      	sub	sp, #20
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
 8005f34:	460b      	mov	r3, r1
 8005f36:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8005f38:	2300      	movs	r3, #0
 8005f3a:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f40:	4a39      	ldr	r2, [pc, #228]	@ (8006028 <I2C_Enable_IRQ+0xfc>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d032      	beq.n	8005fac <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8005f4a:	4a38      	ldr	r2, [pc, #224]	@ (800602c <I2C_Enable_IRQ+0x100>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d02d      	beq.n	8005fac <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8005f54:	4a36      	ldr	r2, [pc, #216]	@ (8006030 <I2C_Enable_IRQ+0x104>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d028      	beq.n	8005fac <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005f5a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	da03      	bge.n	8005f6a <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8005f68:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005f6a:	887b      	ldrh	r3, [r7, #2]
 8005f6c:	f003 0301 	and.w	r3, r3, #1
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d003      	beq.n	8005f7c <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8005f7a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005f7c:	887b      	ldrh	r3, [r7, #2]
 8005f7e:	f003 0302 	and.w	r3, r3, #2
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d003      	beq.n	8005f8e <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8005f8c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005f8e:	887b      	ldrh	r3, [r7, #2]
 8005f90:	2b10      	cmp	r3, #16
 8005f92:	d103      	bne.n	8005f9c <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8005f9a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005f9c:	887b      	ldrh	r3, [r7, #2]
 8005f9e:	2b20      	cmp	r3, #32
 8005fa0:	d133      	bne.n	800600a <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	f043 0320 	orr.w	r3, r3, #32
 8005fa8:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005faa:	e02e      	b.n	800600a <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005fac:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	da03      	bge.n	8005fbc <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8005fba:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005fbc:	887b      	ldrh	r3, [r7, #2]
 8005fbe:	f003 0301 	and.w	r3, r3, #1
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d003      	beq.n	8005fce <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8005fcc:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005fce:	887b      	ldrh	r3, [r7, #2]
 8005fd0:	f003 0302 	and.w	r3, r3, #2
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d003      	beq.n	8005fe0 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8005fde:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005fe0:	887b      	ldrh	r3, [r7, #2]
 8005fe2:	2b10      	cmp	r3, #16
 8005fe4:	d103      	bne.n	8005fee <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8005fec:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005fee:	887b      	ldrh	r3, [r7, #2]
 8005ff0:	2b20      	cmp	r3, #32
 8005ff2:	d103      	bne.n	8005ffc <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8005ffa:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8005ffc:	887b      	ldrh	r3, [r7, #2]
 8005ffe:	2b40      	cmp	r3, #64	@ 0x40
 8006000:	d103      	bne.n	800600a <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006008:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	6819      	ldr	r1, [r3, #0]
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	68fa      	ldr	r2, [r7, #12]
 8006016:	430a      	orrs	r2, r1
 8006018:	601a      	str	r2, [r3, #0]
}
 800601a:	bf00      	nop
 800601c:	3714      	adds	r7, #20
 800601e:	46bd      	mov	sp, r7
 8006020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006024:	4770      	bx	lr
 8006026:	bf00      	nop
 8006028:	0800481b 	.word	0x0800481b
 800602c:	08004c3d 	.word	0x08004c3d
 8006030:	080049f1 	.word	0x080049f1

08006034 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8006034:	b480      	push	{r7}
 8006036:	b085      	sub	sp, #20
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
 800603c:	460b      	mov	r3, r1
 800603e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8006040:	2300      	movs	r3, #0
 8006042:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8006044:	887b      	ldrh	r3, [r7, #2]
 8006046:	f003 0301 	and.w	r3, r3, #1
 800604a:	2b00      	cmp	r3, #0
 800604c:	d00f      	beq.n	800606e <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8006054:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800605c:	b2db      	uxtb	r3, r3
 800605e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006062:	2b28      	cmp	r3, #40	@ 0x28
 8006064:	d003      	beq.n	800606e <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800606c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800606e:	887b      	ldrh	r3, [r7, #2]
 8006070:	f003 0302 	and.w	r3, r3, #2
 8006074:	2b00      	cmp	r3, #0
 8006076:	d00f      	beq.n	8006098 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 800607e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006086:	b2db      	uxtb	r3, r3
 8006088:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800608c:	2b28      	cmp	r3, #40	@ 0x28
 800608e:	d003      	beq.n	8006098 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8006096:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8006098:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800609c:	2b00      	cmp	r3, #0
 800609e:	da03      	bge.n	80060a8 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80060a6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80060a8:	887b      	ldrh	r3, [r7, #2]
 80060aa:	2b10      	cmp	r3, #16
 80060ac:	d103      	bne.n	80060b6 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80060b4:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80060b6:	887b      	ldrh	r3, [r7, #2]
 80060b8:	2b20      	cmp	r3, #32
 80060ba:	d103      	bne.n	80060c4 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	f043 0320 	orr.w	r3, r3, #32
 80060c2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80060c4:	887b      	ldrh	r3, [r7, #2]
 80060c6:	2b40      	cmp	r3, #64	@ 0x40
 80060c8:	d103      	bne.n	80060d2 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80060d0:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	6819      	ldr	r1, [r3, #0]
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	43da      	mvns	r2, r3
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	400a      	ands	r2, r1
 80060e2:	601a      	str	r2, [r3, #0]
}
 80060e4:	bf00      	nop
 80060e6:	3714      	adds	r7, #20
 80060e8:	46bd      	mov	sp, r7
 80060ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ee:	4770      	bx	lr

080060f0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80060f0:	b480      	push	{r7}
 80060f2:	b083      	sub	sp, #12
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
 80060f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006100:	b2db      	uxtb	r3, r3
 8006102:	2b20      	cmp	r3, #32
 8006104:	d138      	bne.n	8006178 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800610c:	2b01      	cmp	r3, #1
 800610e:	d101      	bne.n	8006114 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006110:	2302      	movs	r3, #2
 8006112:	e032      	b.n	800617a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2201      	movs	r2, #1
 8006118:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2224      	movs	r2, #36	@ 0x24
 8006120:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	681a      	ldr	r2, [r3, #0]
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f022 0201 	bic.w	r2, r2, #1
 8006132:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	681a      	ldr	r2, [r3, #0]
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006142:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	6819      	ldr	r1, [r3, #0]
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	683a      	ldr	r2, [r7, #0]
 8006150:	430a      	orrs	r2, r1
 8006152:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	681a      	ldr	r2, [r3, #0]
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f042 0201 	orr.w	r2, r2, #1
 8006162:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2220      	movs	r2, #32
 8006168:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2200      	movs	r2, #0
 8006170:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006174:	2300      	movs	r3, #0
 8006176:	e000      	b.n	800617a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006178:	2302      	movs	r3, #2
  }
}
 800617a:	4618      	mov	r0, r3
 800617c:	370c      	adds	r7, #12
 800617e:	46bd      	mov	sp, r7
 8006180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006184:	4770      	bx	lr

08006186 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006186:	b480      	push	{r7}
 8006188:	b085      	sub	sp, #20
 800618a:	af00      	add	r7, sp, #0
 800618c:	6078      	str	r0, [r7, #4]
 800618e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006196:	b2db      	uxtb	r3, r3
 8006198:	2b20      	cmp	r3, #32
 800619a:	d139      	bne.n	8006210 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80061a2:	2b01      	cmp	r3, #1
 80061a4:	d101      	bne.n	80061aa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80061a6:	2302      	movs	r3, #2
 80061a8:	e033      	b.n	8006212 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2201      	movs	r2, #1
 80061ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2224      	movs	r2, #36	@ 0x24
 80061b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	681a      	ldr	r2, [r3, #0]
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f022 0201 	bic.w	r2, r2, #1
 80061c8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80061d8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	021b      	lsls	r3, r3, #8
 80061de:	68fa      	ldr	r2, [r7, #12]
 80061e0:	4313      	orrs	r3, r2
 80061e2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	68fa      	ldr	r2, [r7, #12]
 80061ea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	681a      	ldr	r2, [r3, #0]
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f042 0201 	orr.w	r2, r2, #1
 80061fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2220      	movs	r2, #32
 8006200:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2200      	movs	r2, #0
 8006208:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800620c:	2300      	movs	r3, #0
 800620e:	e000      	b.n	8006212 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006210:	2302      	movs	r3, #2
  }
}
 8006212:	4618      	mov	r0, r3
 8006214:	3714      	adds	r7, #20
 8006216:	46bd      	mov	sp, r7
 8006218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621c:	4770      	bx	lr
	...

08006220 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b084      	sub	sp, #16
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006228:	4b19      	ldr	r3, [pc, #100]	@ (8006290 <HAL_PWREx_ConfigSupply+0x70>)
 800622a:	68db      	ldr	r3, [r3, #12]
 800622c:	f003 0304 	and.w	r3, r3, #4
 8006230:	2b04      	cmp	r3, #4
 8006232:	d00a      	beq.n	800624a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006234:	4b16      	ldr	r3, [pc, #88]	@ (8006290 <HAL_PWREx_ConfigSupply+0x70>)
 8006236:	68db      	ldr	r3, [r3, #12]
 8006238:	f003 0307 	and.w	r3, r3, #7
 800623c:	687a      	ldr	r2, [r7, #4]
 800623e:	429a      	cmp	r2, r3
 8006240:	d001      	beq.n	8006246 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006242:	2301      	movs	r3, #1
 8006244:	e01f      	b.n	8006286 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006246:	2300      	movs	r3, #0
 8006248:	e01d      	b.n	8006286 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800624a:	4b11      	ldr	r3, [pc, #68]	@ (8006290 <HAL_PWREx_ConfigSupply+0x70>)
 800624c:	68db      	ldr	r3, [r3, #12]
 800624e:	f023 0207 	bic.w	r2, r3, #7
 8006252:	490f      	ldr	r1, [pc, #60]	@ (8006290 <HAL_PWREx_ConfigSupply+0x70>)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	4313      	orrs	r3, r2
 8006258:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800625a:	f7fa ff87 	bl	800116c <HAL_GetTick>
 800625e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006260:	e009      	b.n	8006276 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006262:	f7fa ff83 	bl	800116c <HAL_GetTick>
 8006266:	4602      	mov	r2, r0
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	1ad3      	subs	r3, r2, r3
 800626c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006270:	d901      	bls.n	8006276 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006272:	2301      	movs	r3, #1
 8006274:	e007      	b.n	8006286 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006276:	4b06      	ldr	r3, [pc, #24]	@ (8006290 <HAL_PWREx_ConfigSupply+0x70>)
 8006278:	685b      	ldr	r3, [r3, #4]
 800627a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800627e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006282:	d1ee      	bne.n	8006262 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006284:	2300      	movs	r3, #0
}
 8006286:	4618      	mov	r0, r3
 8006288:	3710      	adds	r7, #16
 800628a:	46bd      	mov	sp, r7
 800628c:	bd80      	pop	{r7, pc}
 800628e:	bf00      	nop
 8006290:	58024800 	.word	0x58024800

08006294 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b08c      	sub	sp, #48	@ 0x30
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d102      	bne.n	80062a8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80062a2:	2301      	movs	r3, #1
 80062a4:	f000 bc1f 	b.w	8006ae6 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f003 0301 	and.w	r3, r3, #1
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	f000 80b3 	beq.w	800641c <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80062b6:	4b95      	ldr	r3, [pc, #596]	@ (800650c <HAL_RCC_OscConfig+0x278>)
 80062b8:	691b      	ldr	r3, [r3, #16]
 80062ba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80062be:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80062c0:	4b92      	ldr	r3, [pc, #584]	@ (800650c <HAL_RCC_OscConfig+0x278>)
 80062c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062c4:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80062c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062c8:	2b10      	cmp	r3, #16
 80062ca:	d007      	beq.n	80062dc <HAL_RCC_OscConfig+0x48>
 80062cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062ce:	2b18      	cmp	r3, #24
 80062d0:	d112      	bne.n	80062f8 <HAL_RCC_OscConfig+0x64>
 80062d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062d4:	f003 0303 	and.w	r3, r3, #3
 80062d8:	2b02      	cmp	r3, #2
 80062da:	d10d      	bne.n	80062f8 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062dc:	4b8b      	ldr	r3, [pc, #556]	@ (800650c <HAL_RCC_OscConfig+0x278>)
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	f000 8098 	beq.w	800641a <HAL_RCC_OscConfig+0x186>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	685b      	ldr	r3, [r3, #4]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	f040 8093 	bne.w	800641a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80062f4:	2301      	movs	r3, #1
 80062f6:	e3f6      	b.n	8006ae6 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	685b      	ldr	r3, [r3, #4]
 80062fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006300:	d106      	bne.n	8006310 <HAL_RCC_OscConfig+0x7c>
 8006302:	4b82      	ldr	r3, [pc, #520]	@ (800650c <HAL_RCC_OscConfig+0x278>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4a81      	ldr	r2, [pc, #516]	@ (800650c <HAL_RCC_OscConfig+0x278>)
 8006308:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800630c:	6013      	str	r3, [r2, #0]
 800630e:	e058      	b.n	80063c2 <HAL_RCC_OscConfig+0x12e>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	685b      	ldr	r3, [r3, #4]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d112      	bne.n	800633e <HAL_RCC_OscConfig+0xaa>
 8006318:	4b7c      	ldr	r3, [pc, #496]	@ (800650c <HAL_RCC_OscConfig+0x278>)
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4a7b      	ldr	r2, [pc, #492]	@ (800650c <HAL_RCC_OscConfig+0x278>)
 800631e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006322:	6013      	str	r3, [r2, #0]
 8006324:	4b79      	ldr	r3, [pc, #484]	@ (800650c <HAL_RCC_OscConfig+0x278>)
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4a78      	ldr	r2, [pc, #480]	@ (800650c <HAL_RCC_OscConfig+0x278>)
 800632a:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800632e:	6013      	str	r3, [r2, #0]
 8006330:	4b76      	ldr	r3, [pc, #472]	@ (800650c <HAL_RCC_OscConfig+0x278>)
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4a75      	ldr	r2, [pc, #468]	@ (800650c <HAL_RCC_OscConfig+0x278>)
 8006336:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800633a:	6013      	str	r3, [r2, #0]
 800633c:	e041      	b.n	80063c2 <HAL_RCC_OscConfig+0x12e>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	685b      	ldr	r3, [r3, #4]
 8006342:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006346:	d112      	bne.n	800636e <HAL_RCC_OscConfig+0xda>
 8006348:	4b70      	ldr	r3, [pc, #448]	@ (800650c <HAL_RCC_OscConfig+0x278>)
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4a6f      	ldr	r2, [pc, #444]	@ (800650c <HAL_RCC_OscConfig+0x278>)
 800634e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006352:	6013      	str	r3, [r2, #0]
 8006354:	4b6d      	ldr	r3, [pc, #436]	@ (800650c <HAL_RCC_OscConfig+0x278>)
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4a6c      	ldr	r2, [pc, #432]	@ (800650c <HAL_RCC_OscConfig+0x278>)
 800635a:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800635e:	6013      	str	r3, [r2, #0]
 8006360:	4b6a      	ldr	r3, [pc, #424]	@ (800650c <HAL_RCC_OscConfig+0x278>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4a69      	ldr	r2, [pc, #420]	@ (800650c <HAL_RCC_OscConfig+0x278>)
 8006366:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800636a:	6013      	str	r3, [r2, #0]
 800636c:	e029      	b.n	80063c2 <HAL_RCC_OscConfig+0x12e>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	685b      	ldr	r3, [r3, #4]
 8006372:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8006376:	d112      	bne.n	800639e <HAL_RCC_OscConfig+0x10a>
 8006378:	4b64      	ldr	r3, [pc, #400]	@ (800650c <HAL_RCC_OscConfig+0x278>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	4a63      	ldr	r2, [pc, #396]	@ (800650c <HAL_RCC_OscConfig+0x278>)
 800637e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006382:	6013      	str	r3, [r2, #0]
 8006384:	4b61      	ldr	r3, [pc, #388]	@ (800650c <HAL_RCC_OscConfig+0x278>)
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	4a60      	ldr	r2, [pc, #384]	@ (800650c <HAL_RCC_OscConfig+0x278>)
 800638a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800638e:	6013      	str	r3, [r2, #0]
 8006390:	4b5e      	ldr	r3, [pc, #376]	@ (800650c <HAL_RCC_OscConfig+0x278>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4a5d      	ldr	r2, [pc, #372]	@ (800650c <HAL_RCC_OscConfig+0x278>)
 8006396:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800639a:	6013      	str	r3, [r2, #0]
 800639c:	e011      	b.n	80063c2 <HAL_RCC_OscConfig+0x12e>
 800639e:	4b5b      	ldr	r3, [pc, #364]	@ (800650c <HAL_RCC_OscConfig+0x278>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4a5a      	ldr	r2, [pc, #360]	@ (800650c <HAL_RCC_OscConfig+0x278>)
 80063a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80063a8:	6013      	str	r3, [r2, #0]
 80063aa:	4b58      	ldr	r3, [pc, #352]	@ (800650c <HAL_RCC_OscConfig+0x278>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	4a57      	ldr	r2, [pc, #348]	@ (800650c <HAL_RCC_OscConfig+0x278>)
 80063b0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80063b4:	6013      	str	r3, [r2, #0]
 80063b6:	4b55      	ldr	r3, [pc, #340]	@ (800650c <HAL_RCC_OscConfig+0x278>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4a54      	ldr	r2, [pc, #336]	@ (800650c <HAL_RCC_OscConfig+0x278>)
 80063bc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80063c0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	685b      	ldr	r3, [r3, #4]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d013      	beq.n	80063f2 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063ca:	f7fa fecf 	bl	800116c <HAL_GetTick>
 80063ce:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80063d0:	e008      	b.n	80063e4 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80063d2:	f7fa fecb 	bl	800116c <HAL_GetTick>
 80063d6:	4602      	mov	r2, r0
 80063d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063da:	1ad3      	subs	r3, r2, r3
 80063dc:	2b64      	cmp	r3, #100	@ 0x64
 80063de:	d901      	bls.n	80063e4 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 80063e0:	2303      	movs	r3, #3
 80063e2:	e380      	b.n	8006ae6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80063e4:	4b49      	ldr	r3, [pc, #292]	@ (800650c <HAL_RCC_OscConfig+0x278>)
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d0f0      	beq.n	80063d2 <HAL_RCC_OscConfig+0x13e>
 80063f0:	e014      	b.n	800641c <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063f2:	f7fa febb 	bl	800116c <HAL_GetTick>
 80063f6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80063f8:	e008      	b.n	800640c <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80063fa:	f7fa feb7 	bl	800116c <HAL_GetTick>
 80063fe:	4602      	mov	r2, r0
 8006400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006402:	1ad3      	subs	r3, r2, r3
 8006404:	2b64      	cmp	r3, #100	@ 0x64
 8006406:	d901      	bls.n	800640c <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8006408:	2303      	movs	r3, #3
 800640a:	e36c      	b.n	8006ae6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800640c:	4b3f      	ldr	r3, [pc, #252]	@ (800650c <HAL_RCC_OscConfig+0x278>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006414:	2b00      	cmp	r3, #0
 8006416:	d1f0      	bne.n	80063fa <HAL_RCC_OscConfig+0x166>
 8006418:	e000      	b.n	800641c <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800641a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f003 0302 	and.w	r3, r3, #2
 8006424:	2b00      	cmp	r3, #0
 8006426:	f000 808c 	beq.w	8006542 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800642a:	4b38      	ldr	r3, [pc, #224]	@ (800650c <HAL_RCC_OscConfig+0x278>)
 800642c:	691b      	ldr	r3, [r3, #16]
 800642e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006432:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006434:	4b35      	ldr	r3, [pc, #212]	@ (800650c <HAL_RCC_OscConfig+0x278>)
 8006436:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006438:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800643a:	6a3b      	ldr	r3, [r7, #32]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d007      	beq.n	8006450 <HAL_RCC_OscConfig+0x1bc>
 8006440:	6a3b      	ldr	r3, [r7, #32]
 8006442:	2b18      	cmp	r3, #24
 8006444:	d137      	bne.n	80064b6 <HAL_RCC_OscConfig+0x222>
 8006446:	69fb      	ldr	r3, [r7, #28]
 8006448:	f003 0303 	and.w	r3, r3, #3
 800644c:	2b00      	cmp	r3, #0
 800644e:	d132      	bne.n	80064b6 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006450:	4b2e      	ldr	r3, [pc, #184]	@ (800650c <HAL_RCC_OscConfig+0x278>)
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f003 0304 	and.w	r3, r3, #4
 8006458:	2b00      	cmp	r3, #0
 800645a:	d005      	beq.n	8006468 <HAL_RCC_OscConfig+0x1d4>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	68db      	ldr	r3, [r3, #12]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d101      	bne.n	8006468 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8006464:	2301      	movs	r3, #1
 8006466:	e33e      	b.n	8006ae6 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006468:	4b28      	ldr	r3, [pc, #160]	@ (800650c <HAL_RCC_OscConfig+0x278>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f023 0219 	bic.w	r2, r3, #25
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	68db      	ldr	r3, [r3, #12]
 8006474:	4925      	ldr	r1, [pc, #148]	@ (800650c <HAL_RCC_OscConfig+0x278>)
 8006476:	4313      	orrs	r3, r2
 8006478:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800647a:	f7fa fe77 	bl	800116c <HAL_GetTick>
 800647e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006480:	e008      	b.n	8006494 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006482:	f7fa fe73 	bl	800116c <HAL_GetTick>
 8006486:	4602      	mov	r2, r0
 8006488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800648a:	1ad3      	subs	r3, r2, r3
 800648c:	2b02      	cmp	r3, #2
 800648e:	d901      	bls.n	8006494 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8006490:	2303      	movs	r3, #3
 8006492:	e328      	b.n	8006ae6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006494:	4b1d      	ldr	r3, [pc, #116]	@ (800650c <HAL_RCC_OscConfig+0x278>)
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f003 0304 	and.w	r3, r3, #4
 800649c:	2b00      	cmp	r3, #0
 800649e:	d0f0      	beq.n	8006482 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064a0:	4b1a      	ldr	r3, [pc, #104]	@ (800650c <HAL_RCC_OscConfig+0x278>)
 80064a2:	685b      	ldr	r3, [r3, #4]
 80064a4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	691b      	ldr	r3, [r3, #16]
 80064ac:	061b      	lsls	r3, r3, #24
 80064ae:	4917      	ldr	r1, [pc, #92]	@ (800650c <HAL_RCC_OscConfig+0x278>)
 80064b0:	4313      	orrs	r3, r2
 80064b2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80064b4:	e045      	b.n	8006542 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	68db      	ldr	r3, [r3, #12]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d028      	beq.n	8006510 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80064be:	4b13      	ldr	r3, [pc, #76]	@ (800650c <HAL_RCC_OscConfig+0x278>)
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f023 0219 	bic.w	r2, r3, #25
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	68db      	ldr	r3, [r3, #12]
 80064ca:	4910      	ldr	r1, [pc, #64]	@ (800650c <HAL_RCC_OscConfig+0x278>)
 80064cc:	4313      	orrs	r3, r2
 80064ce:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064d0:	f7fa fe4c 	bl	800116c <HAL_GetTick>
 80064d4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80064d6:	e008      	b.n	80064ea <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80064d8:	f7fa fe48 	bl	800116c <HAL_GetTick>
 80064dc:	4602      	mov	r2, r0
 80064de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064e0:	1ad3      	subs	r3, r2, r3
 80064e2:	2b02      	cmp	r3, #2
 80064e4:	d901      	bls.n	80064ea <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 80064e6:	2303      	movs	r3, #3
 80064e8:	e2fd      	b.n	8006ae6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80064ea:	4b08      	ldr	r3, [pc, #32]	@ (800650c <HAL_RCC_OscConfig+0x278>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f003 0304 	and.w	r3, r3, #4
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d0f0      	beq.n	80064d8 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064f6:	4b05      	ldr	r3, [pc, #20]	@ (800650c <HAL_RCC_OscConfig+0x278>)
 80064f8:	685b      	ldr	r3, [r3, #4]
 80064fa:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	691b      	ldr	r3, [r3, #16]
 8006502:	061b      	lsls	r3, r3, #24
 8006504:	4901      	ldr	r1, [pc, #4]	@ (800650c <HAL_RCC_OscConfig+0x278>)
 8006506:	4313      	orrs	r3, r2
 8006508:	604b      	str	r3, [r1, #4]
 800650a:	e01a      	b.n	8006542 <HAL_RCC_OscConfig+0x2ae>
 800650c:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006510:	4b97      	ldr	r3, [pc, #604]	@ (8006770 <HAL_RCC_OscConfig+0x4dc>)
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	4a96      	ldr	r2, [pc, #600]	@ (8006770 <HAL_RCC_OscConfig+0x4dc>)
 8006516:	f023 0301 	bic.w	r3, r3, #1
 800651a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800651c:	f7fa fe26 	bl	800116c <HAL_GetTick>
 8006520:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006522:	e008      	b.n	8006536 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006524:	f7fa fe22 	bl	800116c <HAL_GetTick>
 8006528:	4602      	mov	r2, r0
 800652a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800652c:	1ad3      	subs	r3, r2, r3
 800652e:	2b02      	cmp	r3, #2
 8006530:	d901      	bls.n	8006536 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8006532:	2303      	movs	r3, #3
 8006534:	e2d7      	b.n	8006ae6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006536:	4b8e      	ldr	r3, [pc, #568]	@ (8006770 <HAL_RCC_OscConfig+0x4dc>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f003 0304 	and.w	r3, r3, #4
 800653e:	2b00      	cmp	r3, #0
 8006540:	d1f0      	bne.n	8006524 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f003 0310 	and.w	r3, r3, #16
 800654a:	2b00      	cmp	r3, #0
 800654c:	d06a      	beq.n	8006624 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800654e:	4b88      	ldr	r3, [pc, #544]	@ (8006770 <HAL_RCC_OscConfig+0x4dc>)
 8006550:	691b      	ldr	r3, [r3, #16]
 8006552:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006556:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006558:	4b85      	ldr	r3, [pc, #532]	@ (8006770 <HAL_RCC_OscConfig+0x4dc>)
 800655a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800655c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800655e:	69bb      	ldr	r3, [r7, #24]
 8006560:	2b08      	cmp	r3, #8
 8006562:	d007      	beq.n	8006574 <HAL_RCC_OscConfig+0x2e0>
 8006564:	69bb      	ldr	r3, [r7, #24]
 8006566:	2b18      	cmp	r3, #24
 8006568:	d11b      	bne.n	80065a2 <HAL_RCC_OscConfig+0x30e>
 800656a:	697b      	ldr	r3, [r7, #20]
 800656c:	f003 0303 	and.w	r3, r3, #3
 8006570:	2b01      	cmp	r3, #1
 8006572:	d116      	bne.n	80065a2 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006574:	4b7e      	ldr	r3, [pc, #504]	@ (8006770 <HAL_RCC_OscConfig+0x4dc>)
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800657c:	2b00      	cmp	r3, #0
 800657e:	d005      	beq.n	800658c <HAL_RCC_OscConfig+0x2f8>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	69db      	ldr	r3, [r3, #28]
 8006584:	2b80      	cmp	r3, #128	@ 0x80
 8006586:	d001      	beq.n	800658c <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8006588:	2301      	movs	r3, #1
 800658a:	e2ac      	b.n	8006ae6 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800658c:	4b78      	ldr	r3, [pc, #480]	@ (8006770 <HAL_RCC_OscConfig+0x4dc>)
 800658e:	68db      	ldr	r3, [r3, #12]
 8006590:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6a1b      	ldr	r3, [r3, #32]
 8006598:	061b      	lsls	r3, r3, #24
 800659a:	4975      	ldr	r1, [pc, #468]	@ (8006770 <HAL_RCC_OscConfig+0x4dc>)
 800659c:	4313      	orrs	r3, r2
 800659e:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80065a0:	e040      	b.n	8006624 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	69db      	ldr	r3, [r3, #28]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d023      	beq.n	80065f2 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80065aa:	4b71      	ldr	r3, [pc, #452]	@ (8006770 <HAL_RCC_OscConfig+0x4dc>)
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	4a70      	ldr	r2, [pc, #448]	@ (8006770 <HAL_RCC_OscConfig+0x4dc>)
 80065b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80065b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065b6:	f7fa fdd9 	bl	800116c <HAL_GetTick>
 80065ba:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80065bc:	e008      	b.n	80065d0 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80065be:	f7fa fdd5 	bl	800116c <HAL_GetTick>
 80065c2:	4602      	mov	r2, r0
 80065c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065c6:	1ad3      	subs	r3, r2, r3
 80065c8:	2b02      	cmp	r3, #2
 80065ca:	d901      	bls.n	80065d0 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 80065cc:	2303      	movs	r3, #3
 80065ce:	e28a      	b.n	8006ae6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80065d0:	4b67      	ldr	r3, [pc, #412]	@ (8006770 <HAL_RCC_OscConfig+0x4dc>)
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d0f0      	beq.n	80065be <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80065dc:	4b64      	ldr	r3, [pc, #400]	@ (8006770 <HAL_RCC_OscConfig+0x4dc>)
 80065de:	68db      	ldr	r3, [r3, #12]
 80065e0:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6a1b      	ldr	r3, [r3, #32]
 80065e8:	061b      	lsls	r3, r3, #24
 80065ea:	4961      	ldr	r1, [pc, #388]	@ (8006770 <HAL_RCC_OscConfig+0x4dc>)
 80065ec:	4313      	orrs	r3, r2
 80065ee:	60cb      	str	r3, [r1, #12]
 80065f0:	e018      	b.n	8006624 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80065f2:	4b5f      	ldr	r3, [pc, #380]	@ (8006770 <HAL_RCC_OscConfig+0x4dc>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	4a5e      	ldr	r2, [pc, #376]	@ (8006770 <HAL_RCC_OscConfig+0x4dc>)
 80065f8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80065fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065fe:	f7fa fdb5 	bl	800116c <HAL_GetTick>
 8006602:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006604:	e008      	b.n	8006618 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006606:	f7fa fdb1 	bl	800116c <HAL_GetTick>
 800660a:	4602      	mov	r2, r0
 800660c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800660e:	1ad3      	subs	r3, r2, r3
 8006610:	2b02      	cmp	r3, #2
 8006612:	d901      	bls.n	8006618 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8006614:	2303      	movs	r3, #3
 8006616:	e266      	b.n	8006ae6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006618:	4b55      	ldr	r3, [pc, #340]	@ (8006770 <HAL_RCC_OscConfig+0x4dc>)
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006620:	2b00      	cmp	r3, #0
 8006622:	d1f0      	bne.n	8006606 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f003 0308 	and.w	r3, r3, #8
 800662c:	2b00      	cmp	r3, #0
 800662e:	d036      	beq.n	800669e <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	695b      	ldr	r3, [r3, #20]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d019      	beq.n	800666c <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006638:	4b4d      	ldr	r3, [pc, #308]	@ (8006770 <HAL_RCC_OscConfig+0x4dc>)
 800663a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800663c:	4a4c      	ldr	r2, [pc, #304]	@ (8006770 <HAL_RCC_OscConfig+0x4dc>)
 800663e:	f043 0301 	orr.w	r3, r3, #1
 8006642:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006644:	f7fa fd92 	bl	800116c <HAL_GetTick>
 8006648:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800664a:	e008      	b.n	800665e <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800664c:	f7fa fd8e 	bl	800116c <HAL_GetTick>
 8006650:	4602      	mov	r2, r0
 8006652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006654:	1ad3      	subs	r3, r2, r3
 8006656:	2b02      	cmp	r3, #2
 8006658:	d901      	bls.n	800665e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800665a:	2303      	movs	r3, #3
 800665c:	e243      	b.n	8006ae6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800665e:	4b44      	ldr	r3, [pc, #272]	@ (8006770 <HAL_RCC_OscConfig+0x4dc>)
 8006660:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006662:	f003 0302 	and.w	r3, r3, #2
 8006666:	2b00      	cmp	r3, #0
 8006668:	d0f0      	beq.n	800664c <HAL_RCC_OscConfig+0x3b8>
 800666a:	e018      	b.n	800669e <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800666c:	4b40      	ldr	r3, [pc, #256]	@ (8006770 <HAL_RCC_OscConfig+0x4dc>)
 800666e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006670:	4a3f      	ldr	r2, [pc, #252]	@ (8006770 <HAL_RCC_OscConfig+0x4dc>)
 8006672:	f023 0301 	bic.w	r3, r3, #1
 8006676:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006678:	f7fa fd78 	bl	800116c <HAL_GetTick>
 800667c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800667e:	e008      	b.n	8006692 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006680:	f7fa fd74 	bl	800116c <HAL_GetTick>
 8006684:	4602      	mov	r2, r0
 8006686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006688:	1ad3      	subs	r3, r2, r3
 800668a:	2b02      	cmp	r3, #2
 800668c:	d901      	bls.n	8006692 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800668e:	2303      	movs	r3, #3
 8006690:	e229      	b.n	8006ae6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006692:	4b37      	ldr	r3, [pc, #220]	@ (8006770 <HAL_RCC_OscConfig+0x4dc>)
 8006694:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006696:	f003 0302 	and.w	r3, r3, #2
 800669a:	2b00      	cmp	r3, #0
 800669c:	d1f0      	bne.n	8006680 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f003 0320 	and.w	r3, r3, #32
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d036      	beq.n	8006718 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	699b      	ldr	r3, [r3, #24]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d019      	beq.n	80066e6 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80066b2:	4b2f      	ldr	r3, [pc, #188]	@ (8006770 <HAL_RCC_OscConfig+0x4dc>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	4a2e      	ldr	r2, [pc, #184]	@ (8006770 <HAL_RCC_OscConfig+0x4dc>)
 80066b8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80066bc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80066be:	f7fa fd55 	bl	800116c <HAL_GetTick>
 80066c2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80066c4:	e008      	b.n	80066d8 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80066c6:	f7fa fd51 	bl	800116c <HAL_GetTick>
 80066ca:	4602      	mov	r2, r0
 80066cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066ce:	1ad3      	subs	r3, r2, r3
 80066d0:	2b02      	cmp	r3, #2
 80066d2:	d901      	bls.n	80066d8 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80066d4:	2303      	movs	r3, #3
 80066d6:	e206      	b.n	8006ae6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80066d8:	4b25      	ldr	r3, [pc, #148]	@ (8006770 <HAL_RCC_OscConfig+0x4dc>)
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d0f0      	beq.n	80066c6 <HAL_RCC_OscConfig+0x432>
 80066e4:	e018      	b.n	8006718 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80066e6:	4b22      	ldr	r3, [pc, #136]	@ (8006770 <HAL_RCC_OscConfig+0x4dc>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4a21      	ldr	r2, [pc, #132]	@ (8006770 <HAL_RCC_OscConfig+0x4dc>)
 80066ec:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80066f0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80066f2:	f7fa fd3b 	bl	800116c <HAL_GetTick>
 80066f6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80066f8:	e008      	b.n	800670c <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80066fa:	f7fa fd37 	bl	800116c <HAL_GetTick>
 80066fe:	4602      	mov	r2, r0
 8006700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006702:	1ad3      	subs	r3, r2, r3
 8006704:	2b02      	cmp	r3, #2
 8006706:	d901      	bls.n	800670c <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8006708:	2303      	movs	r3, #3
 800670a:	e1ec      	b.n	8006ae6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800670c:	4b18      	ldr	r3, [pc, #96]	@ (8006770 <HAL_RCC_OscConfig+0x4dc>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006714:	2b00      	cmp	r3, #0
 8006716:	d1f0      	bne.n	80066fa <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f003 0304 	and.w	r3, r3, #4
 8006720:	2b00      	cmp	r3, #0
 8006722:	f000 80af 	beq.w	8006884 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006726:	4b13      	ldr	r3, [pc, #76]	@ (8006774 <HAL_RCC_OscConfig+0x4e0>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	4a12      	ldr	r2, [pc, #72]	@ (8006774 <HAL_RCC_OscConfig+0x4e0>)
 800672c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006730:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006732:	f7fa fd1b 	bl	800116c <HAL_GetTick>
 8006736:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006738:	e008      	b.n	800674c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800673a:	f7fa fd17 	bl	800116c <HAL_GetTick>
 800673e:	4602      	mov	r2, r0
 8006740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006742:	1ad3      	subs	r3, r2, r3
 8006744:	2b64      	cmp	r3, #100	@ 0x64
 8006746:	d901      	bls.n	800674c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8006748:	2303      	movs	r3, #3
 800674a:	e1cc      	b.n	8006ae6 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800674c:	4b09      	ldr	r3, [pc, #36]	@ (8006774 <HAL_RCC_OscConfig+0x4e0>)
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006754:	2b00      	cmp	r3, #0
 8006756:	d0f0      	beq.n	800673a <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	689b      	ldr	r3, [r3, #8]
 800675c:	2b01      	cmp	r3, #1
 800675e:	d10b      	bne.n	8006778 <HAL_RCC_OscConfig+0x4e4>
 8006760:	4b03      	ldr	r3, [pc, #12]	@ (8006770 <HAL_RCC_OscConfig+0x4dc>)
 8006762:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006764:	4a02      	ldr	r2, [pc, #8]	@ (8006770 <HAL_RCC_OscConfig+0x4dc>)
 8006766:	f043 0301 	orr.w	r3, r3, #1
 800676a:	6713      	str	r3, [r2, #112]	@ 0x70
 800676c:	e05b      	b.n	8006826 <HAL_RCC_OscConfig+0x592>
 800676e:	bf00      	nop
 8006770:	58024400 	.word	0x58024400
 8006774:	58024800 	.word	0x58024800
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	689b      	ldr	r3, [r3, #8]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d112      	bne.n	80067a6 <HAL_RCC_OscConfig+0x512>
 8006780:	4b9d      	ldr	r3, [pc, #628]	@ (80069f8 <HAL_RCC_OscConfig+0x764>)
 8006782:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006784:	4a9c      	ldr	r2, [pc, #624]	@ (80069f8 <HAL_RCC_OscConfig+0x764>)
 8006786:	f023 0301 	bic.w	r3, r3, #1
 800678a:	6713      	str	r3, [r2, #112]	@ 0x70
 800678c:	4b9a      	ldr	r3, [pc, #616]	@ (80069f8 <HAL_RCC_OscConfig+0x764>)
 800678e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006790:	4a99      	ldr	r2, [pc, #612]	@ (80069f8 <HAL_RCC_OscConfig+0x764>)
 8006792:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006796:	6713      	str	r3, [r2, #112]	@ 0x70
 8006798:	4b97      	ldr	r3, [pc, #604]	@ (80069f8 <HAL_RCC_OscConfig+0x764>)
 800679a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800679c:	4a96      	ldr	r2, [pc, #600]	@ (80069f8 <HAL_RCC_OscConfig+0x764>)
 800679e:	f023 0304 	bic.w	r3, r3, #4
 80067a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80067a4:	e03f      	b.n	8006826 <HAL_RCC_OscConfig+0x592>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	689b      	ldr	r3, [r3, #8]
 80067aa:	2b05      	cmp	r3, #5
 80067ac:	d112      	bne.n	80067d4 <HAL_RCC_OscConfig+0x540>
 80067ae:	4b92      	ldr	r3, [pc, #584]	@ (80069f8 <HAL_RCC_OscConfig+0x764>)
 80067b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067b2:	4a91      	ldr	r2, [pc, #580]	@ (80069f8 <HAL_RCC_OscConfig+0x764>)
 80067b4:	f043 0304 	orr.w	r3, r3, #4
 80067b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80067ba:	4b8f      	ldr	r3, [pc, #572]	@ (80069f8 <HAL_RCC_OscConfig+0x764>)
 80067bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067be:	4a8e      	ldr	r2, [pc, #568]	@ (80069f8 <HAL_RCC_OscConfig+0x764>)
 80067c0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80067c4:	6713      	str	r3, [r2, #112]	@ 0x70
 80067c6:	4b8c      	ldr	r3, [pc, #560]	@ (80069f8 <HAL_RCC_OscConfig+0x764>)
 80067c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067ca:	4a8b      	ldr	r2, [pc, #556]	@ (80069f8 <HAL_RCC_OscConfig+0x764>)
 80067cc:	f043 0301 	orr.w	r3, r3, #1
 80067d0:	6713      	str	r3, [r2, #112]	@ 0x70
 80067d2:	e028      	b.n	8006826 <HAL_RCC_OscConfig+0x592>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	689b      	ldr	r3, [r3, #8]
 80067d8:	2b85      	cmp	r3, #133	@ 0x85
 80067da:	d112      	bne.n	8006802 <HAL_RCC_OscConfig+0x56e>
 80067dc:	4b86      	ldr	r3, [pc, #536]	@ (80069f8 <HAL_RCC_OscConfig+0x764>)
 80067de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067e0:	4a85      	ldr	r2, [pc, #532]	@ (80069f8 <HAL_RCC_OscConfig+0x764>)
 80067e2:	f043 0304 	orr.w	r3, r3, #4
 80067e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80067e8:	4b83      	ldr	r3, [pc, #524]	@ (80069f8 <HAL_RCC_OscConfig+0x764>)
 80067ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067ec:	4a82      	ldr	r2, [pc, #520]	@ (80069f8 <HAL_RCC_OscConfig+0x764>)
 80067ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80067f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80067f4:	4b80      	ldr	r3, [pc, #512]	@ (80069f8 <HAL_RCC_OscConfig+0x764>)
 80067f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067f8:	4a7f      	ldr	r2, [pc, #508]	@ (80069f8 <HAL_RCC_OscConfig+0x764>)
 80067fa:	f043 0301 	orr.w	r3, r3, #1
 80067fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8006800:	e011      	b.n	8006826 <HAL_RCC_OscConfig+0x592>
 8006802:	4b7d      	ldr	r3, [pc, #500]	@ (80069f8 <HAL_RCC_OscConfig+0x764>)
 8006804:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006806:	4a7c      	ldr	r2, [pc, #496]	@ (80069f8 <HAL_RCC_OscConfig+0x764>)
 8006808:	f023 0301 	bic.w	r3, r3, #1
 800680c:	6713      	str	r3, [r2, #112]	@ 0x70
 800680e:	4b7a      	ldr	r3, [pc, #488]	@ (80069f8 <HAL_RCC_OscConfig+0x764>)
 8006810:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006812:	4a79      	ldr	r2, [pc, #484]	@ (80069f8 <HAL_RCC_OscConfig+0x764>)
 8006814:	f023 0304 	bic.w	r3, r3, #4
 8006818:	6713      	str	r3, [r2, #112]	@ 0x70
 800681a:	4b77      	ldr	r3, [pc, #476]	@ (80069f8 <HAL_RCC_OscConfig+0x764>)
 800681c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800681e:	4a76      	ldr	r2, [pc, #472]	@ (80069f8 <HAL_RCC_OscConfig+0x764>)
 8006820:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006824:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	689b      	ldr	r3, [r3, #8]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d015      	beq.n	800685a <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800682e:	f7fa fc9d 	bl	800116c <HAL_GetTick>
 8006832:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006834:	e00a      	b.n	800684c <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006836:	f7fa fc99 	bl	800116c <HAL_GetTick>
 800683a:	4602      	mov	r2, r0
 800683c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800683e:	1ad3      	subs	r3, r2, r3
 8006840:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006844:	4293      	cmp	r3, r2
 8006846:	d901      	bls.n	800684c <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8006848:	2303      	movs	r3, #3
 800684a:	e14c      	b.n	8006ae6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800684c:	4b6a      	ldr	r3, [pc, #424]	@ (80069f8 <HAL_RCC_OscConfig+0x764>)
 800684e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006850:	f003 0302 	and.w	r3, r3, #2
 8006854:	2b00      	cmp	r3, #0
 8006856:	d0ee      	beq.n	8006836 <HAL_RCC_OscConfig+0x5a2>
 8006858:	e014      	b.n	8006884 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800685a:	f7fa fc87 	bl	800116c <HAL_GetTick>
 800685e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006860:	e00a      	b.n	8006878 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006862:	f7fa fc83 	bl	800116c <HAL_GetTick>
 8006866:	4602      	mov	r2, r0
 8006868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800686a:	1ad3      	subs	r3, r2, r3
 800686c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006870:	4293      	cmp	r3, r2
 8006872:	d901      	bls.n	8006878 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8006874:	2303      	movs	r3, #3
 8006876:	e136      	b.n	8006ae6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006878:	4b5f      	ldr	r3, [pc, #380]	@ (80069f8 <HAL_RCC_OscConfig+0x764>)
 800687a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800687c:	f003 0302 	and.w	r3, r3, #2
 8006880:	2b00      	cmp	r3, #0
 8006882:	d1ee      	bne.n	8006862 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006888:	2b00      	cmp	r3, #0
 800688a:	f000 812b 	beq.w	8006ae4 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800688e:	4b5a      	ldr	r3, [pc, #360]	@ (80069f8 <HAL_RCC_OscConfig+0x764>)
 8006890:	691b      	ldr	r3, [r3, #16]
 8006892:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006896:	2b18      	cmp	r3, #24
 8006898:	f000 80bb 	beq.w	8006a12 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068a0:	2b02      	cmp	r3, #2
 80068a2:	f040 8095 	bne.w	80069d0 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80068a6:	4b54      	ldr	r3, [pc, #336]	@ (80069f8 <HAL_RCC_OscConfig+0x764>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4a53      	ldr	r2, [pc, #332]	@ (80069f8 <HAL_RCC_OscConfig+0x764>)
 80068ac:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80068b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068b2:	f7fa fc5b 	bl	800116c <HAL_GetTick>
 80068b6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80068b8:	e008      	b.n	80068cc <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80068ba:	f7fa fc57 	bl	800116c <HAL_GetTick>
 80068be:	4602      	mov	r2, r0
 80068c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068c2:	1ad3      	subs	r3, r2, r3
 80068c4:	2b02      	cmp	r3, #2
 80068c6:	d901      	bls.n	80068cc <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 80068c8:	2303      	movs	r3, #3
 80068ca:	e10c      	b.n	8006ae6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80068cc:	4b4a      	ldr	r3, [pc, #296]	@ (80069f8 <HAL_RCC_OscConfig+0x764>)
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d1f0      	bne.n	80068ba <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80068d8:	4b47      	ldr	r3, [pc, #284]	@ (80069f8 <HAL_RCC_OscConfig+0x764>)
 80068da:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80068dc:	4b47      	ldr	r3, [pc, #284]	@ (80069fc <HAL_RCC_OscConfig+0x768>)
 80068de:	4013      	ands	r3, r2
 80068e0:	687a      	ldr	r2, [r7, #4]
 80068e2:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80068e4:	687a      	ldr	r2, [r7, #4]
 80068e6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80068e8:	0112      	lsls	r2, r2, #4
 80068ea:	430a      	orrs	r2, r1
 80068ec:	4942      	ldr	r1, [pc, #264]	@ (80069f8 <HAL_RCC_OscConfig+0x764>)
 80068ee:	4313      	orrs	r3, r2
 80068f0:	628b      	str	r3, [r1, #40]	@ 0x28
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068f6:	3b01      	subs	r3, #1
 80068f8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006900:	3b01      	subs	r3, #1
 8006902:	025b      	lsls	r3, r3, #9
 8006904:	b29b      	uxth	r3, r3
 8006906:	431a      	orrs	r2, r3
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800690c:	3b01      	subs	r3, #1
 800690e:	041b      	lsls	r3, r3, #16
 8006910:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006914:	431a      	orrs	r2, r3
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800691a:	3b01      	subs	r3, #1
 800691c:	061b      	lsls	r3, r3, #24
 800691e:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006922:	4935      	ldr	r1, [pc, #212]	@ (80069f8 <HAL_RCC_OscConfig+0x764>)
 8006924:	4313      	orrs	r3, r2
 8006926:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8006928:	4b33      	ldr	r3, [pc, #204]	@ (80069f8 <HAL_RCC_OscConfig+0x764>)
 800692a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800692c:	4a32      	ldr	r2, [pc, #200]	@ (80069f8 <HAL_RCC_OscConfig+0x764>)
 800692e:	f023 0301 	bic.w	r3, r3, #1
 8006932:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006934:	4b30      	ldr	r3, [pc, #192]	@ (80069f8 <HAL_RCC_OscConfig+0x764>)
 8006936:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006938:	4b31      	ldr	r3, [pc, #196]	@ (8006a00 <HAL_RCC_OscConfig+0x76c>)
 800693a:	4013      	ands	r3, r2
 800693c:	687a      	ldr	r2, [r7, #4]
 800693e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006940:	00d2      	lsls	r2, r2, #3
 8006942:	492d      	ldr	r1, [pc, #180]	@ (80069f8 <HAL_RCC_OscConfig+0x764>)
 8006944:	4313      	orrs	r3, r2
 8006946:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006948:	4b2b      	ldr	r3, [pc, #172]	@ (80069f8 <HAL_RCC_OscConfig+0x764>)
 800694a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800694c:	f023 020c 	bic.w	r2, r3, #12
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006954:	4928      	ldr	r1, [pc, #160]	@ (80069f8 <HAL_RCC_OscConfig+0x764>)
 8006956:	4313      	orrs	r3, r2
 8006958:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800695a:	4b27      	ldr	r3, [pc, #156]	@ (80069f8 <HAL_RCC_OscConfig+0x764>)
 800695c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800695e:	f023 0202 	bic.w	r2, r3, #2
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006966:	4924      	ldr	r1, [pc, #144]	@ (80069f8 <HAL_RCC_OscConfig+0x764>)
 8006968:	4313      	orrs	r3, r2
 800696a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800696c:	4b22      	ldr	r3, [pc, #136]	@ (80069f8 <HAL_RCC_OscConfig+0x764>)
 800696e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006970:	4a21      	ldr	r2, [pc, #132]	@ (80069f8 <HAL_RCC_OscConfig+0x764>)
 8006972:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006976:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006978:	4b1f      	ldr	r3, [pc, #124]	@ (80069f8 <HAL_RCC_OscConfig+0x764>)
 800697a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800697c:	4a1e      	ldr	r2, [pc, #120]	@ (80069f8 <HAL_RCC_OscConfig+0x764>)
 800697e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006982:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006984:	4b1c      	ldr	r3, [pc, #112]	@ (80069f8 <HAL_RCC_OscConfig+0x764>)
 8006986:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006988:	4a1b      	ldr	r2, [pc, #108]	@ (80069f8 <HAL_RCC_OscConfig+0x764>)
 800698a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800698e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8006990:	4b19      	ldr	r3, [pc, #100]	@ (80069f8 <HAL_RCC_OscConfig+0x764>)
 8006992:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006994:	4a18      	ldr	r2, [pc, #96]	@ (80069f8 <HAL_RCC_OscConfig+0x764>)
 8006996:	f043 0301 	orr.w	r3, r3, #1
 800699a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800699c:	4b16      	ldr	r3, [pc, #88]	@ (80069f8 <HAL_RCC_OscConfig+0x764>)
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	4a15      	ldr	r2, [pc, #84]	@ (80069f8 <HAL_RCC_OscConfig+0x764>)
 80069a2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80069a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069a8:	f7fa fbe0 	bl	800116c <HAL_GetTick>
 80069ac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80069ae:	e008      	b.n	80069c2 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80069b0:	f7fa fbdc 	bl	800116c <HAL_GetTick>
 80069b4:	4602      	mov	r2, r0
 80069b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069b8:	1ad3      	subs	r3, r2, r3
 80069ba:	2b02      	cmp	r3, #2
 80069bc:	d901      	bls.n	80069c2 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 80069be:	2303      	movs	r3, #3
 80069c0:	e091      	b.n	8006ae6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80069c2:	4b0d      	ldr	r3, [pc, #52]	@ (80069f8 <HAL_RCC_OscConfig+0x764>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d0f0      	beq.n	80069b0 <HAL_RCC_OscConfig+0x71c>
 80069ce:	e089      	b.n	8006ae4 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80069d0:	4b09      	ldr	r3, [pc, #36]	@ (80069f8 <HAL_RCC_OscConfig+0x764>)
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	4a08      	ldr	r2, [pc, #32]	@ (80069f8 <HAL_RCC_OscConfig+0x764>)
 80069d6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80069da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069dc:	f7fa fbc6 	bl	800116c <HAL_GetTick>
 80069e0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80069e2:	e00f      	b.n	8006a04 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80069e4:	f7fa fbc2 	bl	800116c <HAL_GetTick>
 80069e8:	4602      	mov	r2, r0
 80069ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069ec:	1ad3      	subs	r3, r2, r3
 80069ee:	2b02      	cmp	r3, #2
 80069f0:	d908      	bls.n	8006a04 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 80069f2:	2303      	movs	r3, #3
 80069f4:	e077      	b.n	8006ae6 <HAL_RCC_OscConfig+0x852>
 80069f6:	bf00      	nop
 80069f8:	58024400 	.word	0x58024400
 80069fc:	fffffc0c 	.word	0xfffffc0c
 8006a00:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006a04:	4b3a      	ldr	r3, [pc, #232]	@ (8006af0 <HAL_RCC_OscConfig+0x85c>)
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d1e9      	bne.n	80069e4 <HAL_RCC_OscConfig+0x750>
 8006a10:	e068      	b.n	8006ae4 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006a12:	4b37      	ldr	r3, [pc, #220]	@ (8006af0 <HAL_RCC_OscConfig+0x85c>)
 8006a14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a16:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006a18:	4b35      	ldr	r3, [pc, #212]	@ (8006af0 <HAL_RCC_OscConfig+0x85c>)
 8006a1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a1c:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a22:	2b01      	cmp	r3, #1
 8006a24:	d031      	beq.n	8006a8a <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a26:	693b      	ldr	r3, [r7, #16]
 8006a28:	f003 0203 	and.w	r2, r3, #3
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006a30:	429a      	cmp	r2, r3
 8006a32:	d12a      	bne.n	8006a8a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006a34:	693b      	ldr	r3, [r7, #16]
 8006a36:	091b      	lsrs	r3, r3, #4
 8006a38:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a40:	429a      	cmp	r2, r3
 8006a42:	d122      	bne.n	8006a8a <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a4e:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006a50:	429a      	cmp	r2, r3
 8006a52:	d11a      	bne.n	8006a8a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	0a5b      	lsrs	r3, r3, #9
 8006a58:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a60:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006a62:	429a      	cmp	r2, r3
 8006a64:	d111      	bne.n	8006a8a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	0c1b      	lsrs	r3, r3, #16
 8006a6a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a72:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006a74:	429a      	cmp	r2, r3
 8006a76:	d108      	bne.n	8006a8a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	0e1b      	lsrs	r3, r3, #24
 8006a7c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a84:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006a86:	429a      	cmp	r2, r3
 8006a88:	d001      	beq.n	8006a8e <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8006a8a:	2301      	movs	r3, #1
 8006a8c:	e02b      	b.n	8006ae6 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8006a8e:	4b18      	ldr	r3, [pc, #96]	@ (8006af0 <HAL_RCC_OscConfig+0x85c>)
 8006a90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a92:	08db      	lsrs	r3, r3, #3
 8006a94:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006a98:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006a9e:	693a      	ldr	r2, [r7, #16]
 8006aa0:	429a      	cmp	r2, r3
 8006aa2:	d01f      	beq.n	8006ae4 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8006aa4:	4b12      	ldr	r3, [pc, #72]	@ (8006af0 <HAL_RCC_OscConfig+0x85c>)
 8006aa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006aa8:	4a11      	ldr	r2, [pc, #68]	@ (8006af0 <HAL_RCC_OscConfig+0x85c>)
 8006aaa:	f023 0301 	bic.w	r3, r3, #1
 8006aae:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006ab0:	f7fa fb5c 	bl	800116c <HAL_GetTick>
 8006ab4:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8006ab6:	bf00      	nop
 8006ab8:	f7fa fb58 	bl	800116c <HAL_GetTick>
 8006abc:	4602      	mov	r2, r0
 8006abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d0f9      	beq.n	8006ab8 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006ac4:	4b0a      	ldr	r3, [pc, #40]	@ (8006af0 <HAL_RCC_OscConfig+0x85c>)
 8006ac6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006ac8:	4b0a      	ldr	r3, [pc, #40]	@ (8006af4 <HAL_RCC_OscConfig+0x860>)
 8006aca:	4013      	ands	r3, r2
 8006acc:	687a      	ldr	r2, [r7, #4]
 8006ace:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006ad0:	00d2      	lsls	r2, r2, #3
 8006ad2:	4907      	ldr	r1, [pc, #28]	@ (8006af0 <HAL_RCC_OscConfig+0x85c>)
 8006ad4:	4313      	orrs	r3, r2
 8006ad6:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8006ad8:	4b05      	ldr	r3, [pc, #20]	@ (8006af0 <HAL_RCC_OscConfig+0x85c>)
 8006ada:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006adc:	4a04      	ldr	r2, [pc, #16]	@ (8006af0 <HAL_RCC_OscConfig+0x85c>)
 8006ade:	f043 0301 	orr.w	r3, r3, #1
 8006ae2:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8006ae4:	2300      	movs	r3, #0
}
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	3730      	adds	r7, #48	@ 0x30
 8006aea:	46bd      	mov	sp, r7
 8006aec:	bd80      	pop	{r7, pc}
 8006aee:	bf00      	nop
 8006af0:	58024400 	.word	0x58024400
 8006af4:	ffff0007 	.word	0xffff0007

08006af8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b086      	sub	sp, #24
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
 8006b00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d101      	bne.n	8006b0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006b08:	2301      	movs	r3, #1
 8006b0a:	e19c      	b.n	8006e46 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006b0c:	4b8a      	ldr	r3, [pc, #552]	@ (8006d38 <HAL_RCC_ClockConfig+0x240>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f003 030f 	and.w	r3, r3, #15
 8006b14:	683a      	ldr	r2, [r7, #0]
 8006b16:	429a      	cmp	r2, r3
 8006b18:	d910      	bls.n	8006b3c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b1a:	4b87      	ldr	r3, [pc, #540]	@ (8006d38 <HAL_RCC_ClockConfig+0x240>)
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f023 020f 	bic.w	r2, r3, #15
 8006b22:	4985      	ldr	r1, [pc, #532]	@ (8006d38 <HAL_RCC_ClockConfig+0x240>)
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	4313      	orrs	r3, r2
 8006b28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b2a:	4b83      	ldr	r3, [pc, #524]	@ (8006d38 <HAL_RCC_ClockConfig+0x240>)
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f003 030f 	and.w	r3, r3, #15
 8006b32:	683a      	ldr	r2, [r7, #0]
 8006b34:	429a      	cmp	r2, r3
 8006b36:	d001      	beq.n	8006b3c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006b38:	2301      	movs	r3, #1
 8006b3a:	e184      	b.n	8006e46 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f003 0304 	and.w	r3, r3, #4
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d010      	beq.n	8006b6a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	691a      	ldr	r2, [r3, #16]
 8006b4c:	4b7b      	ldr	r3, [pc, #492]	@ (8006d3c <HAL_RCC_ClockConfig+0x244>)
 8006b4e:	699b      	ldr	r3, [r3, #24]
 8006b50:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006b54:	429a      	cmp	r2, r3
 8006b56:	d908      	bls.n	8006b6a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006b58:	4b78      	ldr	r3, [pc, #480]	@ (8006d3c <HAL_RCC_ClockConfig+0x244>)
 8006b5a:	699b      	ldr	r3, [r3, #24]
 8006b5c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	691b      	ldr	r3, [r3, #16]
 8006b64:	4975      	ldr	r1, [pc, #468]	@ (8006d3c <HAL_RCC_ClockConfig+0x244>)
 8006b66:	4313      	orrs	r3, r2
 8006b68:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f003 0308 	and.w	r3, r3, #8
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d010      	beq.n	8006b98 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	695a      	ldr	r2, [r3, #20]
 8006b7a:	4b70      	ldr	r3, [pc, #448]	@ (8006d3c <HAL_RCC_ClockConfig+0x244>)
 8006b7c:	69db      	ldr	r3, [r3, #28]
 8006b7e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006b82:	429a      	cmp	r2, r3
 8006b84:	d908      	bls.n	8006b98 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006b86:	4b6d      	ldr	r3, [pc, #436]	@ (8006d3c <HAL_RCC_ClockConfig+0x244>)
 8006b88:	69db      	ldr	r3, [r3, #28]
 8006b8a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	695b      	ldr	r3, [r3, #20]
 8006b92:	496a      	ldr	r1, [pc, #424]	@ (8006d3c <HAL_RCC_ClockConfig+0x244>)
 8006b94:	4313      	orrs	r3, r2
 8006b96:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f003 0310 	and.w	r3, r3, #16
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d010      	beq.n	8006bc6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	699a      	ldr	r2, [r3, #24]
 8006ba8:	4b64      	ldr	r3, [pc, #400]	@ (8006d3c <HAL_RCC_ClockConfig+0x244>)
 8006baa:	69db      	ldr	r3, [r3, #28]
 8006bac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006bb0:	429a      	cmp	r2, r3
 8006bb2:	d908      	bls.n	8006bc6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006bb4:	4b61      	ldr	r3, [pc, #388]	@ (8006d3c <HAL_RCC_ClockConfig+0x244>)
 8006bb6:	69db      	ldr	r3, [r3, #28]
 8006bb8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	699b      	ldr	r3, [r3, #24]
 8006bc0:	495e      	ldr	r1, [pc, #376]	@ (8006d3c <HAL_RCC_ClockConfig+0x244>)
 8006bc2:	4313      	orrs	r3, r2
 8006bc4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f003 0320 	and.w	r3, r3, #32
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d010      	beq.n	8006bf4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	69da      	ldr	r2, [r3, #28]
 8006bd6:	4b59      	ldr	r3, [pc, #356]	@ (8006d3c <HAL_RCC_ClockConfig+0x244>)
 8006bd8:	6a1b      	ldr	r3, [r3, #32]
 8006bda:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006bde:	429a      	cmp	r2, r3
 8006be0:	d908      	bls.n	8006bf4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006be2:	4b56      	ldr	r3, [pc, #344]	@ (8006d3c <HAL_RCC_ClockConfig+0x244>)
 8006be4:	6a1b      	ldr	r3, [r3, #32]
 8006be6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	69db      	ldr	r3, [r3, #28]
 8006bee:	4953      	ldr	r1, [pc, #332]	@ (8006d3c <HAL_RCC_ClockConfig+0x244>)
 8006bf0:	4313      	orrs	r3, r2
 8006bf2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f003 0302 	and.w	r3, r3, #2
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d010      	beq.n	8006c22 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	68da      	ldr	r2, [r3, #12]
 8006c04:	4b4d      	ldr	r3, [pc, #308]	@ (8006d3c <HAL_RCC_ClockConfig+0x244>)
 8006c06:	699b      	ldr	r3, [r3, #24]
 8006c08:	f003 030f 	and.w	r3, r3, #15
 8006c0c:	429a      	cmp	r2, r3
 8006c0e:	d908      	bls.n	8006c22 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006c10:	4b4a      	ldr	r3, [pc, #296]	@ (8006d3c <HAL_RCC_ClockConfig+0x244>)
 8006c12:	699b      	ldr	r3, [r3, #24]
 8006c14:	f023 020f 	bic.w	r2, r3, #15
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	68db      	ldr	r3, [r3, #12]
 8006c1c:	4947      	ldr	r1, [pc, #284]	@ (8006d3c <HAL_RCC_ClockConfig+0x244>)
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f003 0301 	and.w	r3, r3, #1
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d055      	beq.n	8006cda <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006c2e:	4b43      	ldr	r3, [pc, #268]	@ (8006d3c <HAL_RCC_ClockConfig+0x244>)
 8006c30:	699b      	ldr	r3, [r3, #24]
 8006c32:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	689b      	ldr	r3, [r3, #8]
 8006c3a:	4940      	ldr	r1, [pc, #256]	@ (8006d3c <HAL_RCC_ClockConfig+0x244>)
 8006c3c:	4313      	orrs	r3, r2
 8006c3e:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	685b      	ldr	r3, [r3, #4]
 8006c44:	2b02      	cmp	r3, #2
 8006c46:	d107      	bne.n	8006c58 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006c48:	4b3c      	ldr	r3, [pc, #240]	@ (8006d3c <HAL_RCC_ClockConfig+0x244>)
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d121      	bne.n	8006c98 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006c54:	2301      	movs	r3, #1
 8006c56:	e0f6      	b.n	8006e46 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	685b      	ldr	r3, [r3, #4]
 8006c5c:	2b03      	cmp	r3, #3
 8006c5e:	d107      	bne.n	8006c70 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006c60:	4b36      	ldr	r3, [pc, #216]	@ (8006d3c <HAL_RCC_ClockConfig+0x244>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d115      	bne.n	8006c98 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006c6c:	2301      	movs	r3, #1
 8006c6e:	e0ea      	b.n	8006e46 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	685b      	ldr	r3, [r3, #4]
 8006c74:	2b01      	cmp	r3, #1
 8006c76:	d107      	bne.n	8006c88 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006c78:	4b30      	ldr	r3, [pc, #192]	@ (8006d3c <HAL_RCC_ClockConfig+0x244>)
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d109      	bne.n	8006c98 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006c84:	2301      	movs	r3, #1
 8006c86:	e0de      	b.n	8006e46 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006c88:	4b2c      	ldr	r3, [pc, #176]	@ (8006d3c <HAL_RCC_ClockConfig+0x244>)
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f003 0304 	and.w	r3, r3, #4
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d101      	bne.n	8006c98 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006c94:	2301      	movs	r3, #1
 8006c96:	e0d6      	b.n	8006e46 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006c98:	4b28      	ldr	r3, [pc, #160]	@ (8006d3c <HAL_RCC_ClockConfig+0x244>)
 8006c9a:	691b      	ldr	r3, [r3, #16]
 8006c9c:	f023 0207 	bic.w	r2, r3, #7
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	685b      	ldr	r3, [r3, #4]
 8006ca4:	4925      	ldr	r1, [pc, #148]	@ (8006d3c <HAL_RCC_ClockConfig+0x244>)
 8006ca6:	4313      	orrs	r3, r2
 8006ca8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006caa:	f7fa fa5f 	bl	800116c <HAL_GetTick>
 8006cae:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006cb0:	e00a      	b.n	8006cc8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006cb2:	f7fa fa5b 	bl	800116c <HAL_GetTick>
 8006cb6:	4602      	mov	r2, r0
 8006cb8:	697b      	ldr	r3, [r7, #20]
 8006cba:	1ad3      	subs	r3, r2, r3
 8006cbc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d901      	bls.n	8006cc8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8006cc4:	2303      	movs	r3, #3
 8006cc6:	e0be      	b.n	8006e46 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006cc8:	4b1c      	ldr	r3, [pc, #112]	@ (8006d3c <HAL_RCC_ClockConfig+0x244>)
 8006cca:	691b      	ldr	r3, [r3, #16]
 8006ccc:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	685b      	ldr	r3, [r3, #4]
 8006cd4:	00db      	lsls	r3, r3, #3
 8006cd6:	429a      	cmp	r2, r3
 8006cd8:	d1eb      	bne.n	8006cb2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f003 0302 	and.w	r3, r3, #2
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d010      	beq.n	8006d08 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	68da      	ldr	r2, [r3, #12]
 8006cea:	4b14      	ldr	r3, [pc, #80]	@ (8006d3c <HAL_RCC_ClockConfig+0x244>)
 8006cec:	699b      	ldr	r3, [r3, #24]
 8006cee:	f003 030f 	and.w	r3, r3, #15
 8006cf2:	429a      	cmp	r2, r3
 8006cf4:	d208      	bcs.n	8006d08 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006cf6:	4b11      	ldr	r3, [pc, #68]	@ (8006d3c <HAL_RCC_ClockConfig+0x244>)
 8006cf8:	699b      	ldr	r3, [r3, #24]
 8006cfa:	f023 020f 	bic.w	r2, r3, #15
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	68db      	ldr	r3, [r3, #12]
 8006d02:	490e      	ldr	r1, [pc, #56]	@ (8006d3c <HAL_RCC_ClockConfig+0x244>)
 8006d04:	4313      	orrs	r3, r2
 8006d06:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006d08:	4b0b      	ldr	r3, [pc, #44]	@ (8006d38 <HAL_RCC_ClockConfig+0x240>)
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f003 030f 	and.w	r3, r3, #15
 8006d10:	683a      	ldr	r2, [r7, #0]
 8006d12:	429a      	cmp	r2, r3
 8006d14:	d214      	bcs.n	8006d40 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d16:	4b08      	ldr	r3, [pc, #32]	@ (8006d38 <HAL_RCC_ClockConfig+0x240>)
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f023 020f 	bic.w	r2, r3, #15
 8006d1e:	4906      	ldr	r1, [pc, #24]	@ (8006d38 <HAL_RCC_ClockConfig+0x240>)
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	4313      	orrs	r3, r2
 8006d24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d26:	4b04      	ldr	r3, [pc, #16]	@ (8006d38 <HAL_RCC_ClockConfig+0x240>)
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f003 030f 	and.w	r3, r3, #15
 8006d2e:	683a      	ldr	r2, [r7, #0]
 8006d30:	429a      	cmp	r2, r3
 8006d32:	d005      	beq.n	8006d40 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006d34:	2301      	movs	r3, #1
 8006d36:	e086      	b.n	8006e46 <HAL_RCC_ClockConfig+0x34e>
 8006d38:	52002000 	.word	0x52002000
 8006d3c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f003 0304 	and.w	r3, r3, #4
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d010      	beq.n	8006d6e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	691a      	ldr	r2, [r3, #16]
 8006d50:	4b3f      	ldr	r3, [pc, #252]	@ (8006e50 <HAL_RCC_ClockConfig+0x358>)
 8006d52:	699b      	ldr	r3, [r3, #24]
 8006d54:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006d58:	429a      	cmp	r2, r3
 8006d5a:	d208      	bcs.n	8006d6e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006d5c:	4b3c      	ldr	r3, [pc, #240]	@ (8006e50 <HAL_RCC_ClockConfig+0x358>)
 8006d5e:	699b      	ldr	r3, [r3, #24]
 8006d60:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	691b      	ldr	r3, [r3, #16]
 8006d68:	4939      	ldr	r1, [pc, #228]	@ (8006e50 <HAL_RCC_ClockConfig+0x358>)
 8006d6a:	4313      	orrs	r3, r2
 8006d6c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f003 0308 	and.w	r3, r3, #8
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d010      	beq.n	8006d9c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	695a      	ldr	r2, [r3, #20]
 8006d7e:	4b34      	ldr	r3, [pc, #208]	@ (8006e50 <HAL_RCC_ClockConfig+0x358>)
 8006d80:	69db      	ldr	r3, [r3, #28]
 8006d82:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006d86:	429a      	cmp	r2, r3
 8006d88:	d208      	bcs.n	8006d9c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006d8a:	4b31      	ldr	r3, [pc, #196]	@ (8006e50 <HAL_RCC_ClockConfig+0x358>)
 8006d8c:	69db      	ldr	r3, [r3, #28]
 8006d8e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	695b      	ldr	r3, [r3, #20]
 8006d96:	492e      	ldr	r1, [pc, #184]	@ (8006e50 <HAL_RCC_ClockConfig+0x358>)
 8006d98:	4313      	orrs	r3, r2
 8006d9a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f003 0310 	and.w	r3, r3, #16
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d010      	beq.n	8006dca <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	699a      	ldr	r2, [r3, #24]
 8006dac:	4b28      	ldr	r3, [pc, #160]	@ (8006e50 <HAL_RCC_ClockConfig+0x358>)
 8006dae:	69db      	ldr	r3, [r3, #28]
 8006db0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006db4:	429a      	cmp	r2, r3
 8006db6:	d208      	bcs.n	8006dca <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006db8:	4b25      	ldr	r3, [pc, #148]	@ (8006e50 <HAL_RCC_ClockConfig+0x358>)
 8006dba:	69db      	ldr	r3, [r3, #28]
 8006dbc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	699b      	ldr	r3, [r3, #24]
 8006dc4:	4922      	ldr	r1, [pc, #136]	@ (8006e50 <HAL_RCC_ClockConfig+0x358>)
 8006dc6:	4313      	orrs	r3, r2
 8006dc8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f003 0320 	and.w	r3, r3, #32
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d010      	beq.n	8006df8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	69da      	ldr	r2, [r3, #28]
 8006dda:	4b1d      	ldr	r3, [pc, #116]	@ (8006e50 <HAL_RCC_ClockConfig+0x358>)
 8006ddc:	6a1b      	ldr	r3, [r3, #32]
 8006dde:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006de2:	429a      	cmp	r2, r3
 8006de4:	d208      	bcs.n	8006df8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006de6:	4b1a      	ldr	r3, [pc, #104]	@ (8006e50 <HAL_RCC_ClockConfig+0x358>)
 8006de8:	6a1b      	ldr	r3, [r3, #32]
 8006dea:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	69db      	ldr	r3, [r3, #28]
 8006df2:	4917      	ldr	r1, [pc, #92]	@ (8006e50 <HAL_RCC_ClockConfig+0x358>)
 8006df4:	4313      	orrs	r3, r2
 8006df6:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8006df8:	f000 f834 	bl	8006e64 <HAL_RCC_GetSysClockFreq>
 8006dfc:	4602      	mov	r2, r0
 8006dfe:	4b14      	ldr	r3, [pc, #80]	@ (8006e50 <HAL_RCC_ClockConfig+0x358>)
 8006e00:	699b      	ldr	r3, [r3, #24]
 8006e02:	0a1b      	lsrs	r3, r3, #8
 8006e04:	f003 030f 	and.w	r3, r3, #15
 8006e08:	4912      	ldr	r1, [pc, #72]	@ (8006e54 <HAL_RCC_ClockConfig+0x35c>)
 8006e0a:	5ccb      	ldrb	r3, [r1, r3]
 8006e0c:	f003 031f 	and.w	r3, r3, #31
 8006e10:	fa22 f303 	lsr.w	r3, r2, r3
 8006e14:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8006e16:	4b0e      	ldr	r3, [pc, #56]	@ (8006e50 <HAL_RCC_ClockConfig+0x358>)
 8006e18:	699b      	ldr	r3, [r3, #24]
 8006e1a:	f003 030f 	and.w	r3, r3, #15
 8006e1e:	4a0d      	ldr	r2, [pc, #52]	@ (8006e54 <HAL_RCC_ClockConfig+0x35c>)
 8006e20:	5cd3      	ldrb	r3, [r2, r3]
 8006e22:	f003 031f 	and.w	r3, r3, #31
 8006e26:	693a      	ldr	r2, [r7, #16]
 8006e28:	fa22 f303 	lsr.w	r3, r2, r3
 8006e2c:	4a0a      	ldr	r2, [pc, #40]	@ (8006e58 <HAL_RCC_ClockConfig+0x360>)
 8006e2e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006e30:	4a0a      	ldr	r2, [pc, #40]	@ (8006e5c <HAL_RCC_ClockConfig+0x364>)
 8006e32:	693b      	ldr	r3, [r7, #16]
 8006e34:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8006e36:	4b0a      	ldr	r3, [pc, #40]	@ (8006e60 <HAL_RCC_ClockConfig+0x368>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	f7f9 fef8 	bl	8000c30 <HAL_InitTick>
 8006e40:	4603      	mov	r3, r0
 8006e42:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006e44:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e46:	4618      	mov	r0, r3
 8006e48:	3718      	adds	r7, #24
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	bd80      	pop	{r7, pc}
 8006e4e:	bf00      	nop
 8006e50:	58024400 	.word	0x58024400
 8006e54:	0800be14 	.word	0x0800be14
 8006e58:	24000004 	.word	0x24000004
 8006e5c:	24000000 	.word	0x24000000
 8006e60:	24000008 	.word	0x24000008

08006e64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006e64:	b480      	push	{r7}
 8006e66:	b089      	sub	sp, #36	@ 0x24
 8006e68:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006e6a:	4bb3      	ldr	r3, [pc, #716]	@ (8007138 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e6c:	691b      	ldr	r3, [r3, #16]
 8006e6e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006e72:	2b18      	cmp	r3, #24
 8006e74:	f200 8155 	bhi.w	8007122 <HAL_RCC_GetSysClockFreq+0x2be>
 8006e78:	a201      	add	r2, pc, #4	@ (adr r2, 8006e80 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006e7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e7e:	bf00      	nop
 8006e80:	08006ee5 	.word	0x08006ee5
 8006e84:	08007123 	.word	0x08007123
 8006e88:	08007123 	.word	0x08007123
 8006e8c:	08007123 	.word	0x08007123
 8006e90:	08007123 	.word	0x08007123
 8006e94:	08007123 	.word	0x08007123
 8006e98:	08007123 	.word	0x08007123
 8006e9c:	08007123 	.word	0x08007123
 8006ea0:	08006f0b 	.word	0x08006f0b
 8006ea4:	08007123 	.word	0x08007123
 8006ea8:	08007123 	.word	0x08007123
 8006eac:	08007123 	.word	0x08007123
 8006eb0:	08007123 	.word	0x08007123
 8006eb4:	08007123 	.word	0x08007123
 8006eb8:	08007123 	.word	0x08007123
 8006ebc:	08007123 	.word	0x08007123
 8006ec0:	08006f11 	.word	0x08006f11
 8006ec4:	08007123 	.word	0x08007123
 8006ec8:	08007123 	.word	0x08007123
 8006ecc:	08007123 	.word	0x08007123
 8006ed0:	08007123 	.word	0x08007123
 8006ed4:	08007123 	.word	0x08007123
 8006ed8:	08007123 	.word	0x08007123
 8006edc:	08007123 	.word	0x08007123
 8006ee0:	08006f17 	.word	0x08006f17
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006ee4:	4b94      	ldr	r3, [pc, #592]	@ (8007138 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f003 0320 	and.w	r3, r3, #32
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d009      	beq.n	8006f04 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006ef0:	4b91      	ldr	r3, [pc, #580]	@ (8007138 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	08db      	lsrs	r3, r3, #3
 8006ef6:	f003 0303 	and.w	r3, r3, #3
 8006efa:	4a90      	ldr	r2, [pc, #576]	@ (800713c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006efc:	fa22 f303 	lsr.w	r3, r2, r3
 8006f00:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8006f02:	e111      	b.n	8007128 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006f04:	4b8d      	ldr	r3, [pc, #564]	@ (800713c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006f06:	61bb      	str	r3, [r7, #24]
      break;
 8006f08:	e10e      	b.n	8007128 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8006f0a:	4b8d      	ldr	r3, [pc, #564]	@ (8007140 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006f0c:	61bb      	str	r3, [r7, #24]
      break;
 8006f0e:	e10b      	b.n	8007128 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8006f10:	4b8c      	ldr	r3, [pc, #560]	@ (8007144 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006f12:	61bb      	str	r3, [r7, #24]
      break;
 8006f14:	e108      	b.n	8007128 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006f16:	4b88      	ldr	r3, [pc, #544]	@ (8007138 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f1a:	f003 0303 	and.w	r3, r3, #3
 8006f1e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006f20:	4b85      	ldr	r3, [pc, #532]	@ (8007138 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f24:	091b      	lsrs	r3, r3, #4
 8006f26:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006f2a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006f2c:	4b82      	ldr	r3, [pc, #520]	@ (8007138 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f30:	f003 0301 	and.w	r3, r3, #1
 8006f34:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006f36:	4b80      	ldr	r3, [pc, #512]	@ (8007138 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f3a:	08db      	lsrs	r3, r3, #3
 8006f3c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006f40:	68fa      	ldr	r2, [r7, #12]
 8006f42:	fb02 f303 	mul.w	r3, r2, r3
 8006f46:	ee07 3a90 	vmov	s15, r3
 8006f4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f4e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8006f52:	693b      	ldr	r3, [r7, #16]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	f000 80e1 	beq.w	800711c <HAL_RCC_GetSysClockFreq+0x2b8>
 8006f5a:	697b      	ldr	r3, [r7, #20]
 8006f5c:	2b02      	cmp	r3, #2
 8006f5e:	f000 8083 	beq.w	8007068 <HAL_RCC_GetSysClockFreq+0x204>
 8006f62:	697b      	ldr	r3, [r7, #20]
 8006f64:	2b02      	cmp	r3, #2
 8006f66:	f200 80a1 	bhi.w	80070ac <HAL_RCC_GetSysClockFreq+0x248>
 8006f6a:	697b      	ldr	r3, [r7, #20]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d003      	beq.n	8006f78 <HAL_RCC_GetSysClockFreq+0x114>
 8006f70:	697b      	ldr	r3, [r7, #20]
 8006f72:	2b01      	cmp	r3, #1
 8006f74:	d056      	beq.n	8007024 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006f76:	e099      	b.n	80070ac <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006f78:	4b6f      	ldr	r3, [pc, #444]	@ (8007138 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f003 0320 	and.w	r3, r3, #32
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d02d      	beq.n	8006fe0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006f84:	4b6c      	ldr	r3, [pc, #432]	@ (8007138 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	08db      	lsrs	r3, r3, #3
 8006f8a:	f003 0303 	and.w	r3, r3, #3
 8006f8e:	4a6b      	ldr	r2, [pc, #428]	@ (800713c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006f90:	fa22 f303 	lsr.w	r3, r2, r3
 8006f94:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	ee07 3a90 	vmov	s15, r3
 8006f9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fa0:	693b      	ldr	r3, [r7, #16]
 8006fa2:	ee07 3a90 	vmov	s15, r3
 8006fa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006faa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006fae:	4b62      	ldr	r3, [pc, #392]	@ (8007138 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006fb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fb6:	ee07 3a90 	vmov	s15, r3
 8006fba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fbe:	ed97 6a02 	vldr	s12, [r7, #8]
 8006fc2:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8007148 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006fc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006fca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006fce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006fd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006fd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fda:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8006fde:	e087      	b.n	80070f0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006fe0:	693b      	ldr	r3, [r7, #16]
 8006fe2:	ee07 3a90 	vmov	s15, r3
 8006fe6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fea:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800714c <HAL_RCC_GetSysClockFreq+0x2e8>
 8006fee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ff2:	4b51      	ldr	r3, [pc, #324]	@ (8007138 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ff6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ffa:	ee07 3a90 	vmov	s15, r3
 8006ffe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007002:	ed97 6a02 	vldr	s12, [r7, #8]
 8007006:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8007148 <HAL_RCC_GetSysClockFreq+0x2e4>
 800700a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800700e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007012:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007016:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800701a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800701e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007022:	e065      	b.n	80070f0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007024:	693b      	ldr	r3, [r7, #16]
 8007026:	ee07 3a90 	vmov	s15, r3
 800702a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800702e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8007150 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007032:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007036:	4b40      	ldr	r3, [pc, #256]	@ (8007138 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007038:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800703a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800703e:	ee07 3a90 	vmov	s15, r3
 8007042:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007046:	ed97 6a02 	vldr	s12, [r7, #8]
 800704a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8007148 <HAL_RCC_GetSysClockFreq+0x2e4>
 800704e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007052:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007056:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800705a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800705e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007062:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007066:	e043      	b.n	80070f0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007068:	693b      	ldr	r3, [r7, #16]
 800706a:	ee07 3a90 	vmov	s15, r3
 800706e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007072:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8007154 <HAL_RCC_GetSysClockFreq+0x2f0>
 8007076:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800707a:	4b2f      	ldr	r3, [pc, #188]	@ (8007138 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800707c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800707e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007082:	ee07 3a90 	vmov	s15, r3
 8007086:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800708a:	ed97 6a02 	vldr	s12, [r7, #8]
 800708e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8007148 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007092:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007096:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800709a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800709e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070a6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80070aa:	e021      	b.n	80070f0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80070ac:	693b      	ldr	r3, [r7, #16]
 80070ae:	ee07 3a90 	vmov	s15, r3
 80070b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070b6:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8007150 <HAL_RCC_GetSysClockFreq+0x2ec>
 80070ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070be:	4b1e      	ldr	r3, [pc, #120]	@ (8007138 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80070c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070c6:	ee07 3a90 	vmov	s15, r3
 80070ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80070d2:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8007148 <HAL_RCC_GetSysClockFreq+0x2e4>
 80070d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80070e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070ea:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80070ee:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80070f0:	4b11      	ldr	r3, [pc, #68]	@ (8007138 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80070f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070f4:	0a5b      	lsrs	r3, r3, #9
 80070f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80070fa:	3301      	adds	r3, #1
 80070fc:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	ee07 3a90 	vmov	s15, r3
 8007104:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007108:	edd7 6a07 	vldr	s13, [r7, #28]
 800710c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007110:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007114:	ee17 3a90 	vmov	r3, s15
 8007118:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800711a:	e005      	b.n	8007128 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800711c:	2300      	movs	r3, #0
 800711e:	61bb      	str	r3, [r7, #24]
      break;
 8007120:	e002      	b.n	8007128 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8007122:	4b07      	ldr	r3, [pc, #28]	@ (8007140 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007124:	61bb      	str	r3, [r7, #24]
      break;
 8007126:	bf00      	nop
  }

  return sysclockfreq;
 8007128:	69bb      	ldr	r3, [r7, #24]
}
 800712a:	4618      	mov	r0, r3
 800712c:	3724      	adds	r7, #36	@ 0x24
 800712e:	46bd      	mov	sp, r7
 8007130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007134:	4770      	bx	lr
 8007136:	bf00      	nop
 8007138:	58024400 	.word	0x58024400
 800713c:	03d09000 	.word	0x03d09000
 8007140:	003d0900 	.word	0x003d0900
 8007144:	016e3600 	.word	0x016e3600
 8007148:	46000000 	.word	0x46000000
 800714c:	4c742400 	.word	0x4c742400
 8007150:	4a742400 	.word	0x4a742400
 8007154:	4bb71b00 	.word	0x4bb71b00

08007158 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b082      	sub	sp, #8
 800715c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800715e:	f7ff fe81 	bl	8006e64 <HAL_RCC_GetSysClockFreq>
 8007162:	4602      	mov	r2, r0
 8007164:	4b10      	ldr	r3, [pc, #64]	@ (80071a8 <HAL_RCC_GetHCLKFreq+0x50>)
 8007166:	699b      	ldr	r3, [r3, #24]
 8007168:	0a1b      	lsrs	r3, r3, #8
 800716a:	f003 030f 	and.w	r3, r3, #15
 800716e:	490f      	ldr	r1, [pc, #60]	@ (80071ac <HAL_RCC_GetHCLKFreq+0x54>)
 8007170:	5ccb      	ldrb	r3, [r1, r3]
 8007172:	f003 031f 	and.w	r3, r3, #31
 8007176:	fa22 f303 	lsr.w	r3, r2, r3
 800717a:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800717c:	4b0a      	ldr	r3, [pc, #40]	@ (80071a8 <HAL_RCC_GetHCLKFreq+0x50>)
 800717e:	699b      	ldr	r3, [r3, #24]
 8007180:	f003 030f 	and.w	r3, r3, #15
 8007184:	4a09      	ldr	r2, [pc, #36]	@ (80071ac <HAL_RCC_GetHCLKFreq+0x54>)
 8007186:	5cd3      	ldrb	r3, [r2, r3]
 8007188:	f003 031f 	and.w	r3, r3, #31
 800718c:	687a      	ldr	r2, [r7, #4]
 800718e:	fa22 f303 	lsr.w	r3, r2, r3
 8007192:	4a07      	ldr	r2, [pc, #28]	@ (80071b0 <HAL_RCC_GetHCLKFreq+0x58>)
 8007194:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007196:	4a07      	ldr	r2, [pc, #28]	@ (80071b4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800719c:	4b04      	ldr	r3, [pc, #16]	@ (80071b0 <HAL_RCC_GetHCLKFreq+0x58>)
 800719e:	681b      	ldr	r3, [r3, #0]
}
 80071a0:	4618      	mov	r0, r3
 80071a2:	3708      	adds	r7, #8
 80071a4:	46bd      	mov	sp, r7
 80071a6:	bd80      	pop	{r7, pc}
 80071a8:	58024400 	.word	0x58024400
 80071ac:	0800be14 	.word	0x0800be14
 80071b0:	24000004 	.word	0x24000004
 80071b4:	24000000 	.word	0x24000000

080071b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 80071bc:	f7ff ffcc 	bl	8007158 <HAL_RCC_GetHCLKFreq>
 80071c0:	4602      	mov	r2, r0
 80071c2:	4b06      	ldr	r3, [pc, #24]	@ (80071dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80071c4:	69db      	ldr	r3, [r3, #28]
 80071c6:	091b      	lsrs	r3, r3, #4
 80071c8:	f003 0307 	and.w	r3, r3, #7
 80071cc:	4904      	ldr	r1, [pc, #16]	@ (80071e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80071ce:	5ccb      	ldrb	r3, [r1, r3]
 80071d0:	f003 031f 	and.w	r3, r3, #31
 80071d4:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80071d8:	4618      	mov	r0, r3
 80071da:	bd80      	pop	{r7, pc}
 80071dc:	58024400 	.word	0x58024400
 80071e0:	0800be14 	.word	0x0800be14

080071e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 80071e8:	f7ff ffb6 	bl	8007158 <HAL_RCC_GetHCLKFreq>
 80071ec:	4602      	mov	r2, r0
 80071ee:	4b06      	ldr	r3, [pc, #24]	@ (8007208 <HAL_RCC_GetPCLK2Freq+0x24>)
 80071f0:	69db      	ldr	r3, [r3, #28]
 80071f2:	0a1b      	lsrs	r3, r3, #8
 80071f4:	f003 0307 	and.w	r3, r3, #7
 80071f8:	4904      	ldr	r1, [pc, #16]	@ (800720c <HAL_RCC_GetPCLK2Freq+0x28>)
 80071fa:	5ccb      	ldrb	r3, [r1, r3]
 80071fc:	f003 031f 	and.w	r3, r3, #31
 8007200:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8007204:	4618      	mov	r0, r3
 8007206:	bd80      	pop	{r7, pc}
 8007208:	58024400 	.word	0x58024400
 800720c:	0800be14 	.word	0x0800be14

08007210 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007210:	b480      	push	{r7}
 8007212:	b083      	sub	sp, #12
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
 8007218:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	223f      	movs	r2, #63	@ 0x3f
 800721e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007220:	4b1a      	ldr	r3, [pc, #104]	@ (800728c <HAL_RCC_GetClockConfig+0x7c>)
 8007222:	691b      	ldr	r3, [r3, #16]
 8007224:	f003 0207 	and.w	r2, r3, #7
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	605a      	str	r2, [r3, #4]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
#else
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE);
 800722c:	4b17      	ldr	r3, [pc, #92]	@ (800728c <HAL_RCC_GetClockConfig+0x7c>)
 800722e:	699b      	ldr	r3, [r3, #24]
 8007230:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE);
 8007238:	4b14      	ldr	r3, [pc, #80]	@ (800728c <HAL_RCC_GetClockConfig+0x7c>)
 800723a:	699b      	ldr	r3, [r3, #24]
 800723c:	f003 020f 	and.w	r2, r3, #15
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE);
 8007244:	4b11      	ldr	r3, [pc, #68]	@ (800728c <HAL_RCC_GetClockConfig+0x7c>)
 8007246:	699b      	ldr	r3, [r3, #24]
 8007248:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1);
 8007250:	4b0e      	ldr	r3, [pc, #56]	@ (800728c <HAL_RCC_GetClockConfig+0x7c>)
 8007252:	69db      	ldr	r3, [r3, #28]
 8007254:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2);
 800725c:	4b0b      	ldr	r3, [pc, #44]	@ (800728c <HAL_RCC_GetClockConfig+0x7c>)
 800725e:	69db      	ldr	r3, [r3, #28]
 8007260:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
 8007268:	4b08      	ldr	r3, [pc, #32]	@ (800728c <HAL_RCC_GetClockConfig+0x7c>)
 800726a:	6a1b      	ldr	r3, [r3, #32]
 800726c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	61da      	str	r2, [r3, #28]
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007274:	4b06      	ldr	r3, [pc, #24]	@ (8007290 <HAL_RCC_GetClockConfig+0x80>)
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f003 020f 	and.w	r2, r3, #15
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	601a      	str	r2, [r3, #0]
}
 8007280:	bf00      	nop
 8007282:	370c      	adds	r7, #12
 8007284:	46bd      	mov	sp, r7
 8007286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728a:	4770      	bx	lr
 800728c:	58024400 	.word	0x58024400
 8007290:	52002000 	.word	0x52002000

08007294 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007294:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007298:	b0c8      	sub	sp, #288	@ 0x120
 800729a:	af00      	add	r7, sp, #0
 800729c:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80072a0:	2300      	movs	r3, #0
 80072a2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80072a6:	2300      	movs	r3, #0
 80072a8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80072ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80072b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072b4:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80072b8:	2500      	movs	r5, #0
 80072ba:	ea54 0305 	orrs.w	r3, r4, r5
 80072be:	d049      	beq.n	8007354 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80072c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80072c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80072c6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80072ca:	d02f      	beq.n	800732c <HAL_RCCEx_PeriphCLKConfig+0x98>
 80072cc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80072d0:	d828      	bhi.n	8007324 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80072d2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80072d6:	d01a      	beq.n	800730e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80072d8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80072dc:	d822      	bhi.n	8007324 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d003      	beq.n	80072ea <HAL_RCCEx_PeriphCLKConfig+0x56>
 80072e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80072e6:	d007      	beq.n	80072f8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80072e8:	e01c      	b.n	8007324 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80072ea:	4ba7      	ldr	r3, [pc, #668]	@ (8007588 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80072ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072ee:	4aa6      	ldr	r2, [pc, #664]	@ (8007588 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80072f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80072f4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80072f6:	e01a      	b.n	800732e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80072f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80072fc:	3308      	adds	r3, #8
 80072fe:	2102      	movs	r1, #2
 8007300:	4618      	mov	r0, r3
 8007302:	f001 fc43 	bl	8008b8c <RCCEx_PLL2_Config>
 8007306:	4603      	mov	r3, r0
 8007308:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800730c:	e00f      	b.n	800732e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800730e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007312:	3328      	adds	r3, #40	@ 0x28
 8007314:	2102      	movs	r1, #2
 8007316:	4618      	mov	r0, r3
 8007318:	f001 fcea 	bl	8008cf0 <RCCEx_PLL3_Config>
 800731c:	4603      	mov	r3, r0
 800731e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007322:	e004      	b.n	800732e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007324:	2301      	movs	r3, #1
 8007326:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800732a:	e000      	b.n	800732e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800732c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800732e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007332:	2b00      	cmp	r3, #0
 8007334:	d10a      	bne.n	800734c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007336:	4b94      	ldr	r3, [pc, #592]	@ (8007588 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007338:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800733a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800733e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007342:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007344:	4a90      	ldr	r2, [pc, #576]	@ (8007588 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007346:	430b      	orrs	r3, r1
 8007348:	6513      	str	r3, [r2, #80]	@ 0x50
 800734a:	e003      	b.n	8007354 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800734c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007350:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007354:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800735c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8007360:	f04f 0900 	mov.w	r9, #0
 8007364:	ea58 0309 	orrs.w	r3, r8, r9
 8007368:	d047      	beq.n	80073fa <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800736a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800736e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007370:	2b04      	cmp	r3, #4
 8007372:	d82a      	bhi.n	80073ca <HAL_RCCEx_PeriphCLKConfig+0x136>
 8007374:	a201      	add	r2, pc, #4	@ (adr r2, 800737c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8007376:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800737a:	bf00      	nop
 800737c:	08007391 	.word	0x08007391
 8007380:	0800739f 	.word	0x0800739f
 8007384:	080073b5 	.word	0x080073b5
 8007388:	080073d3 	.word	0x080073d3
 800738c:	080073d3 	.word	0x080073d3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007390:	4b7d      	ldr	r3, [pc, #500]	@ (8007588 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007392:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007394:	4a7c      	ldr	r2, [pc, #496]	@ (8007588 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007396:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800739a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800739c:	e01a      	b.n	80073d4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800739e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80073a2:	3308      	adds	r3, #8
 80073a4:	2100      	movs	r1, #0
 80073a6:	4618      	mov	r0, r3
 80073a8:	f001 fbf0 	bl	8008b8c <RCCEx_PLL2_Config>
 80073ac:	4603      	mov	r3, r0
 80073ae:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80073b2:	e00f      	b.n	80073d4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80073b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80073b8:	3328      	adds	r3, #40	@ 0x28
 80073ba:	2100      	movs	r1, #0
 80073bc:	4618      	mov	r0, r3
 80073be:	f001 fc97 	bl	8008cf0 <RCCEx_PLL3_Config>
 80073c2:	4603      	mov	r3, r0
 80073c4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80073c8:	e004      	b.n	80073d4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80073ca:	2301      	movs	r3, #1
 80073cc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80073d0:	e000      	b.n	80073d4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80073d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80073d4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d10a      	bne.n	80073f2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80073dc:	4b6a      	ldr	r3, [pc, #424]	@ (8007588 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80073de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80073e0:	f023 0107 	bic.w	r1, r3, #7
 80073e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80073e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80073ea:	4a67      	ldr	r2, [pc, #412]	@ (8007588 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80073ec:	430b      	orrs	r3, r1
 80073ee:	6513      	str	r3, [r2, #80]	@ 0x50
 80073f0:	e003      	b.n	80073fa <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073f2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80073f6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 80073fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80073fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007402:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8007406:	f04f 0b00 	mov.w	fp, #0
 800740a:	ea5a 030b 	orrs.w	r3, sl, fp
 800740e:	d054      	beq.n	80074ba <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8007410:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007414:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007416:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800741a:	d036      	beq.n	800748a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 800741c:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8007420:	d82f      	bhi.n	8007482 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8007422:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007426:	d032      	beq.n	800748e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8007428:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800742c:	d829      	bhi.n	8007482 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800742e:	2bc0      	cmp	r3, #192	@ 0xc0
 8007430:	d02f      	beq.n	8007492 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8007432:	2bc0      	cmp	r3, #192	@ 0xc0
 8007434:	d825      	bhi.n	8007482 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8007436:	2b80      	cmp	r3, #128	@ 0x80
 8007438:	d018      	beq.n	800746c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 800743a:	2b80      	cmp	r3, #128	@ 0x80
 800743c:	d821      	bhi.n	8007482 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800743e:	2b00      	cmp	r3, #0
 8007440:	d002      	beq.n	8007448 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8007442:	2b40      	cmp	r3, #64	@ 0x40
 8007444:	d007      	beq.n	8007456 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8007446:	e01c      	b.n	8007482 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007448:	4b4f      	ldr	r3, [pc, #316]	@ (8007588 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800744a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800744c:	4a4e      	ldr	r2, [pc, #312]	@ (8007588 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800744e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007452:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8007454:	e01e      	b.n	8007494 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007456:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800745a:	3308      	adds	r3, #8
 800745c:	2100      	movs	r1, #0
 800745e:	4618      	mov	r0, r3
 8007460:	f001 fb94 	bl	8008b8c <RCCEx_PLL2_Config>
 8007464:	4603      	mov	r3, r0
 8007466:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800746a:	e013      	b.n	8007494 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800746c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007470:	3328      	adds	r3, #40	@ 0x28
 8007472:	2100      	movs	r1, #0
 8007474:	4618      	mov	r0, r3
 8007476:	f001 fc3b 	bl	8008cf0 <RCCEx_PLL3_Config>
 800747a:	4603      	mov	r3, r0
 800747c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8007480:	e008      	b.n	8007494 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007482:	2301      	movs	r3, #1
 8007484:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007488:	e004      	b.n	8007494 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800748a:	bf00      	nop
 800748c:	e002      	b.n	8007494 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800748e:	bf00      	nop
 8007490:	e000      	b.n	8007494 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8007492:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007494:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007498:	2b00      	cmp	r3, #0
 800749a:	d10a      	bne.n	80074b2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 800749c:	4b3a      	ldr	r3, [pc, #232]	@ (8007588 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800749e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80074a0:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80074a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80074a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80074aa:	4a37      	ldr	r2, [pc, #220]	@ (8007588 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80074ac:	430b      	orrs	r3, r1
 80074ae:	6513      	str	r3, [r2, #80]	@ 0x50
 80074b0:	e003      	b.n	80074ba <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074b2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80074b6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 80074ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80074be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074c2:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80074c6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80074ca:	2300      	movs	r3, #0
 80074cc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80074d0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80074d4:	460b      	mov	r3, r1
 80074d6:	4313      	orrs	r3, r2
 80074d8:	d05c      	beq.n	8007594 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 80074da:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80074de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80074e0:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80074e4:	d03b      	beq.n	800755e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80074e6:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80074ea:	d834      	bhi.n	8007556 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80074ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80074f0:	d037      	beq.n	8007562 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 80074f2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80074f6:	d82e      	bhi.n	8007556 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80074f8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80074fc:	d033      	beq.n	8007566 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80074fe:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007502:	d828      	bhi.n	8007556 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8007504:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007508:	d01a      	beq.n	8007540 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 800750a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800750e:	d822      	bhi.n	8007556 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8007510:	2b00      	cmp	r3, #0
 8007512:	d003      	beq.n	800751c <HAL_RCCEx_PeriphCLKConfig+0x288>
 8007514:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007518:	d007      	beq.n	800752a <HAL_RCCEx_PeriphCLKConfig+0x296>
 800751a:	e01c      	b.n	8007556 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800751c:	4b1a      	ldr	r3, [pc, #104]	@ (8007588 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800751e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007520:	4a19      	ldr	r2, [pc, #100]	@ (8007588 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007522:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007526:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8007528:	e01e      	b.n	8007568 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800752a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800752e:	3308      	adds	r3, #8
 8007530:	2100      	movs	r1, #0
 8007532:	4618      	mov	r0, r3
 8007534:	f001 fb2a 	bl	8008b8c <RCCEx_PLL2_Config>
 8007538:	4603      	mov	r3, r0
 800753a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800753e:	e013      	b.n	8007568 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007540:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007544:	3328      	adds	r3, #40	@ 0x28
 8007546:	2100      	movs	r1, #0
 8007548:	4618      	mov	r0, r3
 800754a:	f001 fbd1 	bl	8008cf0 <RCCEx_PLL3_Config>
 800754e:	4603      	mov	r3, r0
 8007550:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8007554:	e008      	b.n	8007568 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007556:	2301      	movs	r3, #1
 8007558:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800755c:	e004      	b.n	8007568 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800755e:	bf00      	nop
 8007560:	e002      	b.n	8007568 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8007562:	bf00      	nop
 8007564:	e000      	b.n	8007568 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8007566:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007568:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800756c:	2b00      	cmp	r3, #0
 800756e:	d10d      	bne.n	800758c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8007570:	4b05      	ldr	r3, [pc, #20]	@ (8007588 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007572:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007574:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8007578:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800757c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800757e:	4a02      	ldr	r2, [pc, #8]	@ (8007588 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007580:	430b      	orrs	r3, r1
 8007582:	6513      	str	r3, [r2, #80]	@ 0x50
 8007584:	e006      	b.n	8007594 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8007586:	bf00      	nop
 8007588:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800758c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007590:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8007594:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800759c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80075a0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80075a4:	2300      	movs	r3, #0
 80075a6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80075aa:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80075ae:	460b      	mov	r3, r1
 80075b0:	4313      	orrs	r3, r2
 80075b2:	d03a      	beq.n	800762a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80075b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80075b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80075ba:	2b30      	cmp	r3, #48	@ 0x30
 80075bc:	d01f      	beq.n	80075fe <HAL_RCCEx_PeriphCLKConfig+0x36a>
 80075be:	2b30      	cmp	r3, #48	@ 0x30
 80075c0:	d819      	bhi.n	80075f6 <HAL_RCCEx_PeriphCLKConfig+0x362>
 80075c2:	2b20      	cmp	r3, #32
 80075c4:	d00c      	beq.n	80075e0 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80075c6:	2b20      	cmp	r3, #32
 80075c8:	d815      	bhi.n	80075f6 <HAL_RCCEx_PeriphCLKConfig+0x362>
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d019      	beq.n	8007602 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80075ce:	2b10      	cmp	r3, #16
 80075d0:	d111      	bne.n	80075f6 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80075d2:	4bae      	ldr	r3, [pc, #696]	@ (800788c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80075d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075d6:	4aad      	ldr	r2, [pc, #692]	@ (800788c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80075d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80075dc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80075de:	e011      	b.n	8007604 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80075e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80075e4:	3308      	adds	r3, #8
 80075e6:	2102      	movs	r1, #2
 80075e8:	4618      	mov	r0, r3
 80075ea:	f001 facf 	bl	8008b8c <RCCEx_PLL2_Config>
 80075ee:	4603      	mov	r3, r0
 80075f0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80075f4:	e006      	b.n	8007604 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80075f6:	2301      	movs	r3, #1
 80075f8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80075fc:	e002      	b.n	8007604 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 80075fe:	bf00      	nop
 8007600:	e000      	b.n	8007604 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8007602:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007604:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007608:	2b00      	cmp	r3, #0
 800760a:	d10a      	bne.n	8007622 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800760c:	4b9f      	ldr	r3, [pc, #636]	@ (800788c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800760e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007610:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8007614:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007618:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800761a:	4a9c      	ldr	r2, [pc, #624]	@ (800788c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800761c:	430b      	orrs	r3, r1
 800761e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007620:	e003      	b.n	800762a <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007622:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007626:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800762a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800762e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007632:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8007636:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800763a:	2300      	movs	r3, #0
 800763c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007640:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8007644:	460b      	mov	r3, r1
 8007646:	4313      	orrs	r3, r2
 8007648:	d051      	beq.n	80076ee <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800764a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800764e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007650:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007654:	d035      	beq.n	80076c2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8007656:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800765a:	d82e      	bhi.n	80076ba <HAL_RCCEx_PeriphCLKConfig+0x426>
 800765c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007660:	d031      	beq.n	80076c6 <HAL_RCCEx_PeriphCLKConfig+0x432>
 8007662:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007666:	d828      	bhi.n	80076ba <HAL_RCCEx_PeriphCLKConfig+0x426>
 8007668:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800766c:	d01a      	beq.n	80076a4 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800766e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007672:	d822      	bhi.n	80076ba <HAL_RCCEx_PeriphCLKConfig+0x426>
 8007674:	2b00      	cmp	r3, #0
 8007676:	d003      	beq.n	8007680 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8007678:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800767c:	d007      	beq.n	800768e <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 800767e:	e01c      	b.n	80076ba <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007680:	4b82      	ldr	r3, [pc, #520]	@ (800788c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007682:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007684:	4a81      	ldr	r2, [pc, #516]	@ (800788c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007686:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800768a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800768c:	e01c      	b.n	80076c8 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800768e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007692:	3308      	adds	r3, #8
 8007694:	2100      	movs	r1, #0
 8007696:	4618      	mov	r0, r3
 8007698:	f001 fa78 	bl	8008b8c <RCCEx_PLL2_Config>
 800769c:	4603      	mov	r3, r0
 800769e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80076a2:	e011      	b.n	80076c8 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80076a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80076a8:	3328      	adds	r3, #40	@ 0x28
 80076aa:	2100      	movs	r1, #0
 80076ac:	4618      	mov	r0, r3
 80076ae:	f001 fb1f 	bl	8008cf0 <RCCEx_PLL3_Config>
 80076b2:	4603      	mov	r3, r0
 80076b4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80076b8:	e006      	b.n	80076c8 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80076ba:	2301      	movs	r3, #1
 80076bc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80076c0:	e002      	b.n	80076c8 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 80076c2:	bf00      	nop
 80076c4:	e000      	b.n	80076c8 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 80076c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80076c8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d10a      	bne.n	80076e6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80076d0:	4b6e      	ldr	r3, [pc, #440]	@ (800788c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80076d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80076d4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80076d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80076dc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80076de:	4a6b      	ldr	r2, [pc, #428]	@ (800788c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80076e0:	430b      	orrs	r3, r1
 80076e2:	6513      	str	r3, [r2, #80]	@ 0x50
 80076e4:	e003      	b.n	80076ee <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076e6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80076ea:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80076ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80076f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076f6:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80076fa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80076fe:	2300      	movs	r3, #0
 8007700:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007704:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8007708:	460b      	mov	r3, r1
 800770a:	4313      	orrs	r3, r2
 800770c:	d053      	beq.n	80077b6 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800770e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007712:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007714:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007718:	d033      	beq.n	8007782 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800771a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800771e:	d82c      	bhi.n	800777a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8007720:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007724:	d02f      	beq.n	8007786 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8007726:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800772a:	d826      	bhi.n	800777a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800772c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007730:	d02b      	beq.n	800778a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8007732:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007736:	d820      	bhi.n	800777a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8007738:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800773c:	d012      	beq.n	8007764 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800773e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007742:	d81a      	bhi.n	800777a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8007744:	2b00      	cmp	r3, #0
 8007746:	d022      	beq.n	800778e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8007748:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800774c:	d115      	bne.n	800777a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800774e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007752:	3308      	adds	r3, #8
 8007754:	2101      	movs	r1, #1
 8007756:	4618      	mov	r0, r3
 8007758:	f001 fa18 	bl	8008b8c <RCCEx_PLL2_Config>
 800775c:	4603      	mov	r3, r0
 800775e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007762:	e015      	b.n	8007790 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007764:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007768:	3328      	adds	r3, #40	@ 0x28
 800776a:	2101      	movs	r1, #1
 800776c:	4618      	mov	r0, r3
 800776e:	f001 fabf 	bl	8008cf0 <RCCEx_PLL3_Config>
 8007772:	4603      	mov	r3, r0
 8007774:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007778:	e00a      	b.n	8007790 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800777a:	2301      	movs	r3, #1
 800777c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007780:	e006      	b.n	8007790 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8007782:	bf00      	nop
 8007784:	e004      	b.n	8007790 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8007786:	bf00      	nop
 8007788:	e002      	b.n	8007790 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800778a:	bf00      	nop
 800778c:	e000      	b.n	8007790 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800778e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007790:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007794:	2b00      	cmp	r3, #0
 8007796:	d10a      	bne.n	80077ae <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007798:	4b3c      	ldr	r3, [pc, #240]	@ (800788c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800779a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800779c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80077a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80077a4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80077a6:	4a39      	ldr	r2, [pc, #228]	@ (800788c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80077a8:	430b      	orrs	r3, r1
 80077aa:	6513      	str	r3, [r2, #80]	@ 0x50
 80077ac:	e003      	b.n	80077b6 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077ae:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80077b2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80077b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80077ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077be:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80077c2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80077c6:	2300      	movs	r3, #0
 80077c8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80077cc:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80077d0:	460b      	mov	r3, r1
 80077d2:	4313      	orrs	r3, r2
 80077d4:	d060      	beq.n	8007898 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80077d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80077da:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80077de:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 80077e2:	d039      	beq.n	8007858 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 80077e4:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 80077e8:	d832      	bhi.n	8007850 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80077ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80077ee:	d035      	beq.n	800785c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80077f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80077f4:	d82c      	bhi.n	8007850 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80077f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80077fa:	d031      	beq.n	8007860 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80077fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007800:	d826      	bhi.n	8007850 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8007802:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007806:	d02d      	beq.n	8007864 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8007808:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800780c:	d820      	bhi.n	8007850 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800780e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007812:	d012      	beq.n	800783a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8007814:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007818:	d81a      	bhi.n	8007850 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800781a:	2b00      	cmp	r3, #0
 800781c:	d024      	beq.n	8007868 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800781e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007822:	d115      	bne.n	8007850 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007824:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007828:	3308      	adds	r3, #8
 800782a:	2101      	movs	r1, #1
 800782c:	4618      	mov	r0, r3
 800782e:	f001 f9ad 	bl	8008b8c <RCCEx_PLL2_Config>
 8007832:	4603      	mov	r3, r0
 8007834:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007838:	e017      	b.n	800786a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800783a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800783e:	3328      	adds	r3, #40	@ 0x28
 8007840:	2101      	movs	r1, #1
 8007842:	4618      	mov	r0, r3
 8007844:	f001 fa54 	bl	8008cf0 <RCCEx_PLL3_Config>
 8007848:	4603      	mov	r3, r0
 800784a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800784e:	e00c      	b.n	800786a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8007850:	2301      	movs	r3, #1
 8007852:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007856:	e008      	b.n	800786a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007858:	bf00      	nop
 800785a:	e006      	b.n	800786a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800785c:	bf00      	nop
 800785e:	e004      	b.n	800786a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007860:	bf00      	nop
 8007862:	e002      	b.n	800786a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007864:	bf00      	nop
 8007866:	e000      	b.n	800786a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007868:	bf00      	nop
    }

    if (ret == HAL_OK)
 800786a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800786e:	2b00      	cmp	r3, #0
 8007870:	d10e      	bne.n	8007890 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007872:	4b06      	ldr	r3, [pc, #24]	@ (800788c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007874:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007876:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800787a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800787e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007882:	4a02      	ldr	r2, [pc, #8]	@ (800788c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007884:	430b      	orrs	r3, r1
 8007886:	6593      	str	r3, [r2, #88]	@ 0x58
 8007888:	e006      	b.n	8007898 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800788a:	bf00      	nop
 800788c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007890:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007894:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007898:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800789c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078a0:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80078a4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80078a8:	2300      	movs	r3, #0
 80078aa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80078ae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80078b2:	460b      	mov	r3, r1
 80078b4:	4313      	orrs	r3, r2
 80078b6:	d037      	beq.n	8007928 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80078b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80078bc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80078be:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80078c2:	d00e      	beq.n	80078e2 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80078c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80078c8:	d816      	bhi.n	80078f8 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d018      	beq.n	8007900 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80078ce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80078d2:	d111      	bne.n	80078f8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80078d4:	4bc4      	ldr	r3, [pc, #784]	@ (8007be8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80078d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078d8:	4ac3      	ldr	r2, [pc, #780]	@ (8007be8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80078da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80078de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80078e0:	e00f      	b.n	8007902 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80078e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80078e6:	3308      	adds	r3, #8
 80078e8:	2101      	movs	r1, #1
 80078ea:	4618      	mov	r0, r3
 80078ec:	f001 f94e 	bl	8008b8c <RCCEx_PLL2_Config>
 80078f0:	4603      	mov	r3, r0
 80078f2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80078f6:	e004      	b.n	8007902 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80078f8:	2301      	movs	r3, #1
 80078fa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80078fe:	e000      	b.n	8007902 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8007900:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007902:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007906:	2b00      	cmp	r3, #0
 8007908:	d10a      	bne.n	8007920 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800790a:	4bb7      	ldr	r3, [pc, #732]	@ (8007be8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800790c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800790e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007912:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007916:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007918:	4ab3      	ldr	r2, [pc, #716]	@ (8007be8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800791a:	430b      	orrs	r3, r1
 800791c:	6513      	str	r3, [r2, #80]	@ 0x50
 800791e:	e003      	b.n	8007928 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007920:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007924:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007928:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800792c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007930:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8007934:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007938:	2300      	movs	r3, #0
 800793a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800793e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8007942:	460b      	mov	r3, r1
 8007944:	4313      	orrs	r3, r2
 8007946:	d039      	beq.n	80079bc <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8007948:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800794c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800794e:	2b03      	cmp	r3, #3
 8007950:	d81c      	bhi.n	800798c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8007952:	a201      	add	r2, pc, #4	@ (adr r2, 8007958 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8007954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007958:	08007995 	.word	0x08007995
 800795c:	08007969 	.word	0x08007969
 8007960:	08007977 	.word	0x08007977
 8007964:	08007995 	.word	0x08007995
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007968:	4b9f      	ldr	r3, [pc, #636]	@ (8007be8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800796a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800796c:	4a9e      	ldr	r2, [pc, #632]	@ (8007be8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800796e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007972:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007974:	e00f      	b.n	8007996 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007976:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800797a:	3308      	adds	r3, #8
 800797c:	2102      	movs	r1, #2
 800797e:	4618      	mov	r0, r3
 8007980:	f001 f904 	bl	8008b8c <RCCEx_PLL2_Config>
 8007984:	4603      	mov	r3, r0
 8007986:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 800798a:	e004      	b.n	8007996 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800798c:	2301      	movs	r3, #1
 800798e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007992:	e000      	b.n	8007996 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8007994:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007996:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800799a:	2b00      	cmp	r3, #0
 800799c:	d10a      	bne.n	80079b4 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800799e:	4b92      	ldr	r3, [pc, #584]	@ (8007be8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80079a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80079a2:	f023 0103 	bic.w	r1, r3, #3
 80079a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80079aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80079ac:	4a8e      	ldr	r2, [pc, #568]	@ (8007be8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80079ae:	430b      	orrs	r3, r1
 80079b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80079b2:	e003      	b.n	80079bc <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079b4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80079b8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80079bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80079c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079c4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80079c8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80079cc:	2300      	movs	r3, #0
 80079ce:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80079d2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80079d6:	460b      	mov	r3, r1
 80079d8:	4313      	orrs	r3, r2
 80079da:	f000 8099 	beq.w	8007b10 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80079de:	4b83      	ldr	r3, [pc, #524]	@ (8007bec <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	4a82      	ldr	r2, [pc, #520]	@ (8007bec <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80079e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80079e8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80079ea:	f7f9 fbbf 	bl	800116c <HAL_GetTick>
 80079ee:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80079f2:	e00b      	b.n	8007a0c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80079f4:	f7f9 fbba 	bl	800116c <HAL_GetTick>
 80079f8:	4602      	mov	r2, r0
 80079fa:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80079fe:	1ad3      	subs	r3, r2, r3
 8007a00:	2b64      	cmp	r3, #100	@ 0x64
 8007a02:	d903      	bls.n	8007a0c <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8007a04:	2303      	movs	r3, #3
 8007a06:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007a0a:	e005      	b.n	8007a18 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007a0c:	4b77      	ldr	r3, [pc, #476]	@ (8007bec <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d0ed      	beq.n	80079f4 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8007a18:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d173      	bne.n	8007b08 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007a20:	4b71      	ldr	r3, [pc, #452]	@ (8007be8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007a22:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007a24:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007a28:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007a2c:	4053      	eors	r3, r2
 8007a2e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d015      	beq.n	8007a62 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007a36:	4b6c      	ldr	r3, [pc, #432]	@ (8007be8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007a38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a3a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007a3e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007a42:	4b69      	ldr	r3, [pc, #420]	@ (8007be8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007a44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a46:	4a68      	ldr	r2, [pc, #416]	@ (8007be8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007a48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007a4c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007a4e:	4b66      	ldr	r3, [pc, #408]	@ (8007be8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007a50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a52:	4a65      	ldr	r2, [pc, #404]	@ (8007be8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007a54:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007a58:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007a5a:	4a63      	ldr	r2, [pc, #396]	@ (8007be8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007a5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a60:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007a62:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007a66:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007a6a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007a6e:	d118      	bne.n	8007aa2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a70:	f7f9 fb7c 	bl	800116c <HAL_GetTick>
 8007a74:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007a78:	e00d      	b.n	8007a96 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007a7a:	f7f9 fb77 	bl	800116c <HAL_GetTick>
 8007a7e:	4602      	mov	r2, r0
 8007a80:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8007a84:	1ad2      	subs	r2, r2, r3
 8007a86:	f241 3388 	movw	r3, #5000	@ 0x1388
 8007a8a:	429a      	cmp	r2, r3
 8007a8c:	d903      	bls.n	8007a96 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8007a8e:	2303      	movs	r3, #3
 8007a90:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 8007a94:	e005      	b.n	8007aa2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007a96:	4b54      	ldr	r3, [pc, #336]	@ (8007be8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007a98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a9a:	f003 0302 	and.w	r3, r3, #2
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d0eb      	beq.n	8007a7a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8007aa2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d129      	bne.n	8007afe <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007aaa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007aae:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007ab2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007ab6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007aba:	d10e      	bne.n	8007ada <HAL_RCCEx_PeriphCLKConfig+0x846>
 8007abc:	4b4a      	ldr	r3, [pc, #296]	@ (8007be8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007abe:	691b      	ldr	r3, [r3, #16]
 8007ac0:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8007ac4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007ac8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007acc:	091a      	lsrs	r2, r3, #4
 8007ace:	4b48      	ldr	r3, [pc, #288]	@ (8007bf0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8007ad0:	4013      	ands	r3, r2
 8007ad2:	4a45      	ldr	r2, [pc, #276]	@ (8007be8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007ad4:	430b      	orrs	r3, r1
 8007ad6:	6113      	str	r3, [r2, #16]
 8007ad8:	e005      	b.n	8007ae6 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8007ada:	4b43      	ldr	r3, [pc, #268]	@ (8007be8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007adc:	691b      	ldr	r3, [r3, #16]
 8007ade:	4a42      	ldr	r2, [pc, #264]	@ (8007be8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007ae0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007ae4:	6113      	str	r3, [r2, #16]
 8007ae6:	4b40      	ldr	r3, [pc, #256]	@ (8007be8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007ae8:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8007aea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007aee:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007af2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007af6:	4a3c      	ldr	r2, [pc, #240]	@ (8007be8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007af8:	430b      	orrs	r3, r1
 8007afa:	6713      	str	r3, [r2, #112]	@ 0x70
 8007afc:	e008      	b.n	8007b10 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007afe:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007b02:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 8007b06:	e003      	b.n	8007b10 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b08:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007b0c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007b10:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b18:	f002 0301 	and.w	r3, r2, #1
 8007b1c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007b20:	2300      	movs	r3, #0
 8007b22:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007b26:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007b2a:	460b      	mov	r3, r1
 8007b2c:	4313      	orrs	r3, r2
 8007b2e:	f000 8090 	beq.w	8007c52 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8007b32:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007b36:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007b3a:	2b28      	cmp	r3, #40	@ 0x28
 8007b3c:	d870      	bhi.n	8007c20 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8007b3e:	a201      	add	r2, pc, #4	@ (adr r2, 8007b44 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8007b40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b44:	08007c29 	.word	0x08007c29
 8007b48:	08007c21 	.word	0x08007c21
 8007b4c:	08007c21 	.word	0x08007c21
 8007b50:	08007c21 	.word	0x08007c21
 8007b54:	08007c21 	.word	0x08007c21
 8007b58:	08007c21 	.word	0x08007c21
 8007b5c:	08007c21 	.word	0x08007c21
 8007b60:	08007c21 	.word	0x08007c21
 8007b64:	08007bf5 	.word	0x08007bf5
 8007b68:	08007c21 	.word	0x08007c21
 8007b6c:	08007c21 	.word	0x08007c21
 8007b70:	08007c21 	.word	0x08007c21
 8007b74:	08007c21 	.word	0x08007c21
 8007b78:	08007c21 	.word	0x08007c21
 8007b7c:	08007c21 	.word	0x08007c21
 8007b80:	08007c21 	.word	0x08007c21
 8007b84:	08007c0b 	.word	0x08007c0b
 8007b88:	08007c21 	.word	0x08007c21
 8007b8c:	08007c21 	.word	0x08007c21
 8007b90:	08007c21 	.word	0x08007c21
 8007b94:	08007c21 	.word	0x08007c21
 8007b98:	08007c21 	.word	0x08007c21
 8007b9c:	08007c21 	.word	0x08007c21
 8007ba0:	08007c21 	.word	0x08007c21
 8007ba4:	08007c29 	.word	0x08007c29
 8007ba8:	08007c21 	.word	0x08007c21
 8007bac:	08007c21 	.word	0x08007c21
 8007bb0:	08007c21 	.word	0x08007c21
 8007bb4:	08007c21 	.word	0x08007c21
 8007bb8:	08007c21 	.word	0x08007c21
 8007bbc:	08007c21 	.word	0x08007c21
 8007bc0:	08007c21 	.word	0x08007c21
 8007bc4:	08007c29 	.word	0x08007c29
 8007bc8:	08007c21 	.word	0x08007c21
 8007bcc:	08007c21 	.word	0x08007c21
 8007bd0:	08007c21 	.word	0x08007c21
 8007bd4:	08007c21 	.word	0x08007c21
 8007bd8:	08007c21 	.word	0x08007c21
 8007bdc:	08007c21 	.word	0x08007c21
 8007be0:	08007c21 	.word	0x08007c21
 8007be4:	08007c29 	.word	0x08007c29
 8007be8:	58024400 	.word	0x58024400
 8007bec:	58024800 	.word	0x58024800
 8007bf0:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007bf4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007bf8:	3308      	adds	r3, #8
 8007bfa:	2101      	movs	r1, #1
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	f000 ffc5 	bl	8008b8c <RCCEx_PLL2_Config>
 8007c02:	4603      	mov	r3, r0
 8007c04:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007c08:	e00f      	b.n	8007c2a <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007c0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007c0e:	3328      	adds	r3, #40	@ 0x28
 8007c10:	2101      	movs	r1, #1
 8007c12:	4618      	mov	r0, r3
 8007c14:	f001 f86c 	bl	8008cf0 <RCCEx_PLL3_Config>
 8007c18:	4603      	mov	r3, r0
 8007c1a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007c1e:	e004      	b.n	8007c2a <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007c20:	2301      	movs	r3, #1
 8007c22:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007c26:	e000      	b.n	8007c2a <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8007c28:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c2a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d10b      	bne.n	8007c4a <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007c32:	4bc0      	ldr	r3, [pc, #768]	@ (8007f34 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007c34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c36:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8007c3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007c3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007c42:	4abc      	ldr	r2, [pc, #752]	@ (8007f34 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007c44:	430b      	orrs	r3, r1
 8007c46:	6553      	str	r3, [r2, #84]	@ 0x54
 8007c48:	e003      	b.n	8007c52 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c4a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007c4e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007c52:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c5a:	f002 0302 	and.w	r3, r2, #2
 8007c5e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007c62:	2300      	movs	r3, #0
 8007c64:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007c68:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8007c6c:	460b      	mov	r3, r1
 8007c6e:	4313      	orrs	r3, r2
 8007c70:	d043      	beq.n	8007cfa <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8007c72:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007c76:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007c7a:	2b05      	cmp	r3, #5
 8007c7c:	d824      	bhi.n	8007cc8 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8007c7e:	a201      	add	r2, pc, #4	@ (adr r2, 8007c84 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8007c80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c84:	08007cd1 	.word	0x08007cd1
 8007c88:	08007c9d 	.word	0x08007c9d
 8007c8c:	08007cb3 	.word	0x08007cb3
 8007c90:	08007cd1 	.word	0x08007cd1
 8007c94:	08007cd1 	.word	0x08007cd1
 8007c98:	08007cd1 	.word	0x08007cd1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007c9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007ca0:	3308      	adds	r3, #8
 8007ca2:	2101      	movs	r1, #1
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	f000 ff71 	bl	8008b8c <RCCEx_PLL2_Config>
 8007caa:	4603      	mov	r3, r0
 8007cac:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007cb0:	e00f      	b.n	8007cd2 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007cb2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007cb6:	3328      	adds	r3, #40	@ 0x28
 8007cb8:	2101      	movs	r1, #1
 8007cba:	4618      	mov	r0, r3
 8007cbc:	f001 f818 	bl	8008cf0 <RCCEx_PLL3_Config>
 8007cc0:	4603      	mov	r3, r0
 8007cc2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007cc6:	e004      	b.n	8007cd2 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007cc8:	2301      	movs	r3, #1
 8007cca:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007cce:	e000      	b.n	8007cd2 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8007cd0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007cd2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d10b      	bne.n	8007cf2 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007cda:	4b96      	ldr	r3, [pc, #600]	@ (8007f34 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007cdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007cde:	f023 0107 	bic.w	r1, r3, #7
 8007ce2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007ce6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007cea:	4a92      	ldr	r2, [pc, #584]	@ (8007f34 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007cec:	430b      	orrs	r3, r1
 8007cee:	6553      	str	r3, [r2, #84]	@ 0x54
 8007cf0:	e003      	b.n	8007cfa <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cf2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007cf6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007cfa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d02:	f002 0304 	and.w	r3, r2, #4
 8007d06:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007d10:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8007d14:	460b      	mov	r3, r1
 8007d16:	4313      	orrs	r3, r2
 8007d18:	d043      	beq.n	8007da2 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007d1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007d1e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007d22:	2b05      	cmp	r3, #5
 8007d24:	d824      	bhi.n	8007d70 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8007d26:	a201      	add	r2, pc, #4	@ (adr r2, 8007d2c <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8007d28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d2c:	08007d79 	.word	0x08007d79
 8007d30:	08007d45 	.word	0x08007d45
 8007d34:	08007d5b 	.word	0x08007d5b
 8007d38:	08007d79 	.word	0x08007d79
 8007d3c:	08007d79 	.word	0x08007d79
 8007d40:	08007d79 	.word	0x08007d79
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007d44:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007d48:	3308      	adds	r3, #8
 8007d4a:	2101      	movs	r1, #1
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	f000 ff1d 	bl	8008b8c <RCCEx_PLL2_Config>
 8007d52:	4603      	mov	r3, r0
 8007d54:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007d58:	e00f      	b.n	8007d7a <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007d5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007d5e:	3328      	adds	r3, #40	@ 0x28
 8007d60:	2101      	movs	r1, #1
 8007d62:	4618      	mov	r0, r3
 8007d64:	f000 ffc4 	bl	8008cf0 <RCCEx_PLL3_Config>
 8007d68:	4603      	mov	r3, r0
 8007d6a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007d6e:	e004      	b.n	8007d7a <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007d70:	2301      	movs	r3, #1
 8007d72:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007d76:	e000      	b.n	8007d7a <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8007d78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d7a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d10b      	bne.n	8007d9a <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007d82:	4b6c      	ldr	r3, [pc, #432]	@ (8007f34 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007d84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d86:	f023 0107 	bic.w	r1, r3, #7
 8007d8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007d8e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007d92:	4a68      	ldr	r2, [pc, #416]	@ (8007f34 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007d94:	430b      	orrs	r3, r1
 8007d96:	6593      	str	r3, [r2, #88]	@ 0x58
 8007d98:	e003      	b.n	8007da2 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d9a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007d9e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007da2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007daa:	f002 0320 	and.w	r3, r2, #32
 8007dae:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007db2:	2300      	movs	r3, #0
 8007db4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007db8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007dbc:	460b      	mov	r3, r1
 8007dbe:	4313      	orrs	r3, r2
 8007dc0:	d055      	beq.n	8007e6e <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8007dc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007dc6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007dca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007dce:	d033      	beq.n	8007e38 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8007dd0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007dd4:	d82c      	bhi.n	8007e30 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8007dd6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007dda:	d02f      	beq.n	8007e3c <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8007ddc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007de0:	d826      	bhi.n	8007e30 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8007de2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007de6:	d02b      	beq.n	8007e40 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8007de8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007dec:	d820      	bhi.n	8007e30 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8007dee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007df2:	d012      	beq.n	8007e1a <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8007df4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007df8:	d81a      	bhi.n	8007e30 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d022      	beq.n	8007e44 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8007dfe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007e02:	d115      	bne.n	8007e30 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007e04:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007e08:	3308      	adds	r3, #8
 8007e0a:	2100      	movs	r1, #0
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	f000 febd 	bl	8008b8c <RCCEx_PLL2_Config>
 8007e12:	4603      	mov	r3, r0
 8007e14:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007e18:	e015      	b.n	8007e46 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007e1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007e1e:	3328      	adds	r3, #40	@ 0x28
 8007e20:	2102      	movs	r1, #2
 8007e22:	4618      	mov	r0, r3
 8007e24:	f000 ff64 	bl	8008cf0 <RCCEx_PLL3_Config>
 8007e28:	4603      	mov	r3, r0
 8007e2a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007e2e:	e00a      	b.n	8007e46 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007e30:	2301      	movs	r3, #1
 8007e32:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007e36:	e006      	b.n	8007e46 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8007e38:	bf00      	nop
 8007e3a:	e004      	b.n	8007e46 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8007e3c:	bf00      	nop
 8007e3e:	e002      	b.n	8007e46 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8007e40:	bf00      	nop
 8007e42:	e000      	b.n	8007e46 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8007e44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e46:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d10b      	bne.n	8007e66 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007e4e:	4b39      	ldr	r3, [pc, #228]	@ (8007f34 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007e50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e52:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007e56:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007e5a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007e5e:	4a35      	ldr	r2, [pc, #212]	@ (8007f34 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007e60:	430b      	orrs	r3, r1
 8007e62:	6553      	str	r3, [r2, #84]	@ 0x54
 8007e64:	e003      	b.n	8007e6e <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e66:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007e6a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007e6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e76:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8007e7a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007e7e:	2300      	movs	r3, #0
 8007e80:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007e84:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8007e88:	460b      	mov	r3, r1
 8007e8a:	4313      	orrs	r3, r2
 8007e8c:	d058      	beq.n	8007f40 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8007e8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007e92:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007e96:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007e9a:	d033      	beq.n	8007f04 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8007e9c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007ea0:	d82c      	bhi.n	8007efc <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8007ea2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007ea6:	d02f      	beq.n	8007f08 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8007ea8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007eac:	d826      	bhi.n	8007efc <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8007eae:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007eb2:	d02b      	beq.n	8007f0c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8007eb4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007eb8:	d820      	bhi.n	8007efc <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8007eba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007ebe:	d012      	beq.n	8007ee6 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8007ec0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007ec4:	d81a      	bhi.n	8007efc <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d022      	beq.n	8007f10 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 8007eca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007ece:	d115      	bne.n	8007efc <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007ed0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007ed4:	3308      	adds	r3, #8
 8007ed6:	2100      	movs	r1, #0
 8007ed8:	4618      	mov	r0, r3
 8007eda:	f000 fe57 	bl	8008b8c <RCCEx_PLL2_Config>
 8007ede:	4603      	mov	r3, r0
 8007ee0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007ee4:	e015      	b.n	8007f12 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007ee6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007eea:	3328      	adds	r3, #40	@ 0x28
 8007eec:	2102      	movs	r1, #2
 8007eee:	4618      	mov	r0, r3
 8007ef0:	f000 fefe 	bl	8008cf0 <RCCEx_PLL3_Config>
 8007ef4:	4603      	mov	r3, r0
 8007ef6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007efa:	e00a      	b.n	8007f12 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007efc:	2301      	movs	r3, #1
 8007efe:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007f02:	e006      	b.n	8007f12 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8007f04:	bf00      	nop
 8007f06:	e004      	b.n	8007f12 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8007f08:	bf00      	nop
 8007f0a:	e002      	b.n	8007f12 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8007f0c:	bf00      	nop
 8007f0e:	e000      	b.n	8007f12 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8007f10:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f12:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d10e      	bne.n	8007f38 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007f1a:	4b06      	ldr	r3, [pc, #24]	@ (8007f34 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007f1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f1e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8007f22:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007f26:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007f2a:	4a02      	ldr	r2, [pc, #8]	@ (8007f34 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007f2c:	430b      	orrs	r3, r1
 8007f2e:	6593      	str	r3, [r2, #88]	@ 0x58
 8007f30:	e006      	b.n	8007f40 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 8007f32:	bf00      	nop
 8007f34:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f38:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007f3c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007f40:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f48:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8007f4c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007f50:	2300      	movs	r3, #0
 8007f52:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007f56:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8007f5a:	460b      	mov	r3, r1
 8007f5c:	4313      	orrs	r3, r2
 8007f5e:	d055      	beq.n	800800c <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8007f60:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007f64:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007f68:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007f6c:	d033      	beq.n	8007fd6 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8007f6e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007f72:	d82c      	bhi.n	8007fce <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8007f74:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007f78:	d02f      	beq.n	8007fda <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8007f7a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007f7e:	d826      	bhi.n	8007fce <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8007f80:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007f84:	d02b      	beq.n	8007fde <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8007f86:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007f8a:	d820      	bhi.n	8007fce <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8007f8c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007f90:	d012      	beq.n	8007fb8 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8007f92:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007f96:	d81a      	bhi.n	8007fce <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d022      	beq.n	8007fe2 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8007f9c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007fa0:	d115      	bne.n	8007fce <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007fa2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007fa6:	3308      	adds	r3, #8
 8007fa8:	2100      	movs	r1, #0
 8007faa:	4618      	mov	r0, r3
 8007fac:	f000 fdee 	bl	8008b8c <RCCEx_PLL2_Config>
 8007fb0:	4603      	mov	r3, r0
 8007fb2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007fb6:	e015      	b.n	8007fe4 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007fb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007fbc:	3328      	adds	r3, #40	@ 0x28
 8007fbe:	2102      	movs	r1, #2
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	f000 fe95 	bl	8008cf0 <RCCEx_PLL3_Config>
 8007fc6:	4603      	mov	r3, r0
 8007fc8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007fcc:	e00a      	b.n	8007fe4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007fce:	2301      	movs	r3, #1
 8007fd0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007fd4:	e006      	b.n	8007fe4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8007fd6:	bf00      	nop
 8007fd8:	e004      	b.n	8007fe4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8007fda:	bf00      	nop
 8007fdc:	e002      	b.n	8007fe4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8007fde:	bf00      	nop
 8007fe0:	e000      	b.n	8007fe4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8007fe2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007fe4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d10b      	bne.n	8008004 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007fec:	4ba1      	ldr	r3, [pc, #644]	@ (8008274 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007fee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ff0:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8007ff4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007ff8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007ffc:	4a9d      	ldr	r2, [pc, #628]	@ (8008274 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007ffe:	430b      	orrs	r3, r1
 8008000:	6593      	str	r3, [r2, #88]	@ 0x58
 8008002:	e003      	b.n	800800c <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008004:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008008:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800800c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008014:	f002 0308 	and.w	r3, r2, #8
 8008018:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800801c:	2300      	movs	r3, #0
 800801e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008022:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8008026:	460b      	mov	r3, r1
 8008028:	4313      	orrs	r3, r2
 800802a:	d01e      	beq.n	800806a <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800802c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008030:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008034:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008038:	d10c      	bne.n	8008054 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800803a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800803e:	3328      	adds	r3, #40	@ 0x28
 8008040:	2102      	movs	r1, #2
 8008042:	4618      	mov	r0, r3
 8008044:	f000 fe54 	bl	8008cf0 <RCCEx_PLL3_Config>
 8008048:	4603      	mov	r3, r0
 800804a:	2b00      	cmp	r3, #0
 800804c:	d002      	beq.n	8008054 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 800804e:	2301      	movs	r3, #1
 8008050:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008054:	4b87      	ldr	r3, [pc, #540]	@ (8008274 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008056:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008058:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800805c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008060:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008064:	4a83      	ldr	r2, [pc, #524]	@ (8008274 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008066:	430b      	orrs	r3, r1
 8008068:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800806a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800806e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008072:	f002 0310 	and.w	r3, r2, #16
 8008076:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800807a:	2300      	movs	r3, #0
 800807c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008080:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8008084:	460b      	mov	r3, r1
 8008086:	4313      	orrs	r3, r2
 8008088:	d01e      	beq.n	80080c8 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800808a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800808e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008092:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008096:	d10c      	bne.n	80080b2 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008098:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800809c:	3328      	adds	r3, #40	@ 0x28
 800809e:	2102      	movs	r1, #2
 80080a0:	4618      	mov	r0, r3
 80080a2:	f000 fe25 	bl	8008cf0 <RCCEx_PLL3_Config>
 80080a6:	4603      	mov	r3, r0
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d002      	beq.n	80080b2 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 80080ac:	2301      	movs	r3, #1
 80080ae:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80080b2:	4b70      	ldr	r3, [pc, #448]	@ (8008274 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80080b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80080b6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80080ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80080be:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80080c2:	4a6c      	ldr	r2, [pc, #432]	@ (8008274 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80080c4:	430b      	orrs	r3, r1
 80080c6:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80080c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80080cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080d0:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80080d4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80080d8:	2300      	movs	r3, #0
 80080da:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80080de:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80080e2:	460b      	mov	r3, r1
 80080e4:	4313      	orrs	r3, r2
 80080e6:	d03e      	beq.n	8008166 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80080e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80080ec:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80080f0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80080f4:	d022      	beq.n	800813c <HAL_RCCEx_PeriphCLKConfig+0xea8>
 80080f6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80080fa:	d81b      	bhi.n	8008134 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d003      	beq.n	8008108 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8008100:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008104:	d00b      	beq.n	800811e <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8008106:	e015      	b.n	8008134 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008108:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800810c:	3308      	adds	r3, #8
 800810e:	2100      	movs	r1, #0
 8008110:	4618      	mov	r0, r3
 8008112:	f000 fd3b 	bl	8008b8c <RCCEx_PLL2_Config>
 8008116:	4603      	mov	r3, r0
 8008118:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800811c:	e00f      	b.n	800813e <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800811e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008122:	3328      	adds	r3, #40	@ 0x28
 8008124:	2102      	movs	r1, #2
 8008126:	4618      	mov	r0, r3
 8008128:	f000 fde2 	bl	8008cf0 <RCCEx_PLL3_Config>
 800812c:	4603      	mov	r3, r0
 800812e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008132:	e004      	b.n	800813e <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008134:	2301      	movs	r3, #1
 8008136:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800813a:	e000      	b.n	800813e <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 800813c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800813e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008142:	2b00      	cmp	r3, #0
 8008144:	d10b      	bne.n	800815e <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008146:	4b4b      	ldr	r3, [pc, #300]	@ (8008274 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008148:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800814a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800814e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008152:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008156:	4a47      	ldr	r2, [pc, #284]	@ (8008274 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008158:	430b      	orrs	r3, r1
 800815a:	6593      	str	r3, [r2, #88]	@ 0x58
 800815c:	e003      	b.n	8008166 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800815e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008162:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008166:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800816a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800816e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8008172:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008174:	2300      	movs	r3, #0
 8008176:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008178:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800817c:	460b      	mov	r3, r1
 800817e:	4313      	orrs	r3, r2
 8008180:	d03b      	beq.n	80081fa <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8008182:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008186:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800818a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800818e:	d01f      	beq.n	80081d0 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8008190:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008194:	d818      	bhi.n	80081c8 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8008196:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800819a:	d003      	beq.n	80081a4 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 800819c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80081a0:	d007      	beq.n	80081b2 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 80081a2:	e011      	b.n	80081c8 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80081a4:	4b33      	ldr	r3, [pc, #204]	@ (8008274 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80081a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081a8:	4a32      	ldr	r2, [pc, #200]	@ (8008274 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80081aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80081ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80081b0:	e00f      	b.n	80081d2 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80081b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80081b6:	3328      	adds	r3, #40	@ 0x28
 80081b8:	2101      	movs	r1, #1
 80081ba:	4618      	mov	r0, r3
 80081bc:	f000 fd98 	bl	8008cf0 <RCCEx_PLL3_Config>
 80081c0:	4603      	mov	r3, r0
 80081c2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 80081c6:	e004      	b.n	80081d2 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80081c8:	2301      	movs	r3, #1
 80081ca:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80081ce:	e000      	b.n	80081d2 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 80081d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80081d2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d10b      	bne.n	80081f2 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80081da:	4b26      	ldr	r3, [pc, #152]	@ (8008274 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80081dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80081de:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80081e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80081e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80081ea:	4a22      	ldr	r2, [pc, #136]	@ (8008274 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80081ec:	430b      	orrs	r3, r1
 80081ee:	6553      	str	r3, [r2, #84]	@ 0x54
 80081f0:	e003      	b.n	80081fa <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081f2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80081f6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80081fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80081fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008202:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8008206:	673b      	str	r3, [r7, #112]	@ 0x70
 8008208:	2300      	movs	r3, #0
 800820a:	677b      	str	r3, [r7, #116]	@ 0x74
 800820c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8008210:	460b      	mov	r3, r1
 8008212:	4313      	orrs	r3, r2
 8008214:	d034      	beq.n	8008280 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8008216:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800821a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800821c:	2b00      	cmp	r3, #0
 800821e:	d003      	beq.n	8008228 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8008220:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008224:	d007      	beq.n	8008236 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8008226:	e011      	b.n	800824c <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008228:	4b12      	ldr	r3, [pc, #72]	@ (8008274 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800822a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800822c:	4a11      	ldr	r2, [pc, #68]	@ (8008274 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800822e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008232:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008234:	e00e      	b.n	8008254 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008236:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800823a:	3308      	adds	r3, #8
 800823c:	2102      	movs	r1, #2
 800823e:	4618      	mov	r0, r3
 8008240:	f000 fca4 	bl	8008b8c <RCCEx_PLL2_Config>
 8008244:	4603      	mov	r3, r0
 8008246:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800824a:	e003      	b.n	8008254 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 800824c:	2301      	movs	r3, #1
 800824e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008252:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008254:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008258:	2b00      	cmp	r3, #0
 800825a:	d10d      	bne.n	8008278 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800825c:	4b05      	ldr	r3, [pc, #20]	@ (8008274 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800825e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008260:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008264:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008268:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800826a:	4a02      	ldr	r2, [pc, #8]	@ (8008274 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800826c:	430b      	orrs	r3, r1
 800826e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008270:	e006      	b.n	8008280 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8008272:	bf00      	nop
 8008274:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008278:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800827c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008280:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008288:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800828c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800828e:	2300      	movs	r3, #0
 8008290:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008292:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8008296:	460b      	mov	r3, r1
 8008298:	4313      	orrs	r3, r2
 800829a:	d00c      	beq.n	80082b6 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800829c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80082a0:	3328      	adds	r3, #40	@ 0x28
 80082a2:	2102      	movs	r1, #2
 80082a4:	4618      	mov	r0, r3
 80082a6:	f000 fd23 	bl	8008cf0 <RCCEx_PLL3_Config>
 80082aa:	4603      	mov	r3, r0
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d002      	beq.n	80082b6 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 80082b0:	2301      	movs	r3, #1
 80082b2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80082b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80082ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082be:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80082c2:	663b      	str	r3, [r7, #96]	@ 0x60
 80082c4:	2300      	movs	r3, #0
 80082c6:	667b      	str	r3, [r7, #100]	@ 0x64
 80082c8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80082cc:	460b      	mov	r3, r1
 80082ce:	4313      	orrs	r3, r2
 80082d0:	d038      	beq.n	8008344 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 80082d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80082d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80082da:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80082de:	d018      	beq.n	8008312 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 80082e0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80082e4:	d811      	bhi.n	800830a <HAL_RCCEx_PeriphCLKConfig+0x1076>
 80082e6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80082ea:	d014      	beq.n	8008316 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 80082ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80082f0:	d80b      	bhi.n	800830a <HAL_RCCEx_PeriphCLKConfig+0x1076>
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d011      	beq.n	800831a <HAL_RCCEx_PeriphCLKConfig+0x1086>
 80082f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80082fa:	d106      	bne.n	800830a <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80082fc:	4bc3      	ldr	r3, [pc, #780]	@ (800860c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80082fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008300:	4ac2      	ldr	r2, [pc, #776]	@ (800860c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008302:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008306:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8008308:	e008      	b.n	800831c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800830a:	2301      	movs	r3, #1
 800830c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008310:	e004      	b.n	800831c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8008312:	bf00      	nop
 8008314:	e002      	b.n	800831c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8008316:	bf00      	nop
 8008318:	e000      	b.n	800831c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800831a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800831c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008320:	2b00      	cmp	r3, #0
 8008322:	d10b      	bne.n	800833c <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008324:	4bb9      	ldr	r3, [pc, #740]	@ (800860c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008326:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008328:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800832c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008330:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008334:	4ab5      	ldr	r2, [pc, #724]	@ (800860c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008336:	430b      	orrs	r3, r1
 8008338:	6553      	str	r3, [r2, #84]	@ 0x54
 800833a:	e003      	b.n	8008344 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800833c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008340:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008344:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800834c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8008350:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008352:	2300      	movs	r3, #0
 8008354:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008356:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800835a:	460b      	mov	r3, r1
 800835c:	4313      	orrs	r3, r2
 800835e:	d009      	beq.n	8008374 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008360:	4baa      	ldr	r3, [pc, #680]	@ (800860c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008362:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008364:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008368:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800836c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800836e:	4aa7      	ldr	r2, [pc, #668]	@ (800860c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008370:	430b      	orrs	r3, r1
 8008372:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008374:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800837c:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8008380:	653b      	str	r3, [r7, #80]	@ 0x50
 8008382:	2300      	movs	r3, #0
 8008384:	657b      	str	r3, [r7, #84]	@ 0x54
 8008386:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800838a:	460b      	mov	r3, r1
 800838c:	4313      	orrs	r3, r2
 800838e:	d009      	beq.n	80083a4 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008390:	4b9e      	ldr	r3, [pc, #632]	@ (800860c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008392:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008394:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8008398:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800839c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800839e:	4a9b      	ldr	r2, [pc, #620]	@ (800860c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80083a0:	430b      	orrs	r3, r1
 80083a2:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 80083a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80083a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083ac:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80083b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80083b2:	2300      	movs	r3, #0
 80083b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80083b6:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80083ba:	460b      	mov	r3, r1
 80083bc:	4313      	orrs	r3, r2
 80083be:	d009      	beq.n	80083d4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 80083c0:	4b92      	ldr	r3, [pc, #584]	@ (800860c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80083c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80083c4:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 80083c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80083cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80083ce:	4a8f      	ldr	r2, [pc, #572]	@ (800860c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80083d0:	430b      	orrs	r3, r1
 80083d2:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80083d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80083d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083dc:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80083e0:	643b      	str	r3, [r7, #64]	@ 0x40
 80083e2:	2300      	movs	r3, #0
 80083e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80083e6:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80083ea:	460b      	mov	r3, r1
 80083ec:	4313      	orrs	r3, r2
 80083ee:	d00e      	beq.n	800840e <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80083f0:	4b86      	ldr	r3, [pc, #536]	@ (800860c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80083f2:	691b      	ldr	r3, [r3, #16]
 80083f4:	4a85      	ldr	r2, [pc, #532]	@ (800860c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80083f6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80083fa:	6113      	str	r3, [r2, #16]
 80083fc:	4b83      	ldr	r3, [pc, #524]	@ (800860c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80083fe:	6919      	ldr	r1, [r3, #16]
 8008400:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008404:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8008408:	4a80      	ldr	r2, [pc, #512]	@ (800860c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800840a:	430b      	orrs	r3, r1
 800840c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800840e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008416:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800841a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800841c:	2300      	movs	r3, #0
 800841e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008420:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8008424:	460b      	mov	r3, r1
 8008426:	4313      	orrs	r3, r2
 8008428:	d009      	beq.n	800843e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800842a:	4b78      	ldr	r3, [pc, #480]	@ (800860c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800842c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800842e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8008432:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008436:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008438:	4a74      	ldr	r2, [pc, #464]	@ (800860c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800843a:	430b      	orrs	r3, r1
 800843c:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800843e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008446:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800844a:	633b      	str	r3, [r7, #48]	@ 0x30
 800844c:	2300      	movs	r3, #0
 800844e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008450:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8008454:	460b      	mov	r3, r1
 8008456:	4313      	orrs	r3, r2
 8008458:	d00a      	beq.n	8008470 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800845a:	4b6c      	ldr	r3, [pc, #432]	@ (800860c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800845c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800845e:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8008462:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008466:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800846a:	4a68      	ldr	r2, [pc, #416]	@ (800860c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800846c:	430b      	orrs	r3, r1
 800846e:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8008470:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008478:	2100      	movs	r1, #0
 800847a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800847c:	f003 0301 	and.w	r3, r3, #1
 8008480:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008482:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8008486:	460b      	mov	r3, r1
 8008488:	4313      	orrs	r3, r2
 800848a:	d011      	beq.n	80084b0 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800848c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008490:	3308      	adds	r3, #8
 8008492:	2100      	movs	r1, #0
 8008494:	4618      	mov	r0, r3
 8008496:	f000 fb79 	bl	8008b8c <RCCEx_PLL2_Config>
 800849a:	4603      	mov	r3, r0
 800849c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80084a0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d003      	beq.n	80084b0 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084a8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80084ac:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80084b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80084b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084b8:	2100      	movs	r1, #0
 80084ba:	6239      	str	r1, [r7, #32]
 80084bc:	f003 0302 	and.w	r3, r3, #2
 80084c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80084c2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80084c6:	460b      	mov	r3, r1
 80084c8:	4313      	orrs	r3, r2
 80084ca:	d011      	beq.n	80084f0 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80084cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80084d0:	3308      	adds	r3, #8
 80084d2:	2101      	movs	r1, #1
 80084d4:	4618      	mov	r0, r3
 80084d6:	f000 fb59 	bl	8008b8c <RCCEx_PLL2_Config>
 80084da:	4603      	mov	r3, r0
 80084dc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80084e0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d003      	beq.n	80084f0 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084e8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80084ec:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80084f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80084f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084f8:	2100      	movs	r1, #0
 80084fa:	61b9      	str	r1, [r7, #24]
 80084fc:	f003 0304 	and.w	r3, r3, #4
 8008500:	61fb      	str	r3, [r7, #28]
 8008502:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008506:	460b      	mov	r3, r1
 8008508:	4313      	orrs	r3, r2
 800850a:	d011      	beq.n	8008530 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800850c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008510:	3308      	adds	r3, #8
 8008512:	2102      	movs	r1, #2
 8008514:	4618      	mov	r0, r3
 8008516:	f000 fb39 	bl	8008b8c <RCCEx_PLL2_Config>
 800851a:	4603      	mov	r3, r0
 800851c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8008520:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008524:	2b00      	cmp	r3, #0
 8008526:	d003      	beq.n	8008530 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008528:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800852c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8008530:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008538:	2100      	movs	r1, #0
 800853a:	6139      	str	r1, [r7, #16]
 800853c:	f003 0308 	and.w	r3, r3, #8
 8008540:	617b      	str	r3, [r7, #20]
 8008542:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008546:	460b      	mov	r3, r1
 8008548:	4313      	orrs	r3, r2
 800854a:	d011      	beq.n	8008570 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800854c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008550:	3328      	adds	r3, #40	@ 0x28
 8008552:	2100      	movs	r1, #0
 8008554:	4618      	mov	r0, r3
 8008556:	f000 fbcb 	bl	8008cf0 <RCCEx_PLL3_Config>
 800855a:	4603      	mov	r3, r0
 800855c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 8008560:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008564:	2b00      	cmp	r3, #0
 8008566:	d003      	beq.n	8008570 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008568:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800856c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8008570:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008578:	2100      	movs	r1, #0
 800857a:	60b9      	str	r1, [r7, #8]
 800857c:	f003 0310 	and.w	r3, r3, #16
 8008580:	60fb      	str	r3, [r7, #12]
 8008582:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008586:	460b      	mov	r3, r1
 8008588:	4313      	orrs	r3, r2
 800858a:	d011      	beq.n	80085b0 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800858c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008590:	3328      	adds	r3, #40	@ 0x28
 8008592:	2101      	movs	r1, #1
 8008594:	4618      	mov	r0, r3
 8008596:	f000 fbab 	bl	8008cf0 <RCCEx_PLL3_Config>
 800859a:	4603      	mov	r3, r0
 800859c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80085a0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d003      	beq.n	80085b0 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085a8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80085ac:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80085b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80085b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085b8:	2100      	movs	r1, #0
 80085ba:	6039      	str	r1, [r7, #0]
 80085bc:	f003 0320 	and.w	r3, r3, #32
 80085c0:	607b      	str	r3, [r7, #4]
 80085c2:	e9d7 1200 	ldrd	r1, r2, [r7]
 80085c6:	460b      	mov	r3, r1
 80085c8:	4313      	orrs	r3, r2
 80085ca:	d011      	beq.n	80085f0 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80085cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80085d0:	3328      	adds	r3, #40	@ 0x28
 80085d2:	2102      	movs	r1, #2
 80085d4:	4618      	mov	r0, r3
 80085d6:	f000 fb8b 	bl	8008cf0 <RCCEx_PLL3_Config>
 80085da:	4603      	mov	r3, r0
 80085dc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80085e0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d003      	beq.n	80085f0 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085e8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80085ec:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 80085f0:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d101      	bne.n	80085fc <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 80085f8:	2300      	movs	r3, #0
 80085fa:	e000      	b.n	80085fe <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 80085fc:	2301      	movs	r3, #1
}
 80085fe:	4618      	mov	r0, r3
 8008600:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8008604:	46bd      	mov	sp, r7
 8008606:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800860a:	bf00      	nop
 800860c:	58024400 	.word	0x58024400

08008610 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008610:	b580      	push	{r7, lr}
 8008612:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8008614:	f7fe fda0 	bl	8007158 <HAL_RCC_GetHCLKFreq>
 8008618:	4602      	mov	r2, r0
 800861a:	4b06      	ldr	r3, [pc, #24]	@ (8008634 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800861c:	6a1b      	ldr	r3, [r3, #32]
 800861e:	091b      	lsrs	r3, r3, #4
 8008620:	f003 0307 	and.w	r3, r3, #7
 8008624:	4904      	ldr	r1, [pc, #16]	@ (8008638 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008626:	5ccb      	ldrb	r3, [r1, r3]
 8008628:	f003 031f 	and.w	r3, r3, #31
 800862c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8008630:	4618      	mov	r0, r3
 8008632:	bd80      	pop	{r7, pc}
 8008634:	58024400 	.word	0x58024400
 8008638:	0800be14 	.word	0x0800be14

0800863c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800863c:	b480      	push	{r7}
 800863e:	b089      	sub	sp, #36	@ 0x24
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008644:	4ba1      	ldr	r3, [pc, #644]	@ (80088cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008646:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008648:	f003 0303 	and.w	r3, r3, #3
 800864c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800864e:	4b9f      	ldr	r3, [pc, #636]	@ (80088cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008650:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008652:	0b1b      	lsrs	r3, r3, #12
 8008654:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008658:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800865a:	4b9c      	ldr	r3, [pc, #624]	@ (80088cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800865c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800865e:	091b      	lsrs	r3, r3, #4
 8008660:	f003 0301 	and.w	r3, r3, #1
 8008664:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8008666:	4b99      	ldr	r3, [pc, #612]	@ (80088cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008668:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800866a:	08db      	lsrs	r3, r3, #3
 800866c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008670:	693a      	ldr	r2, [r7, #16]
 8008672:	fb02 f303 	mul.w	r3, r2, r3
 8008676:	ee07 3a90 	vmov	s15, r3
 800867a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800867e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008682:	697b      	ldr	r3, [r7, #20]
 8008684:	2b00      	cmp	r3, #0
 8008686:	f000 8111 	beq.w	80088ac <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800868a:	69bb      	ldr	r3, [r7, #24]
 800868c:	2b02      	cmp	r3, #2
 800868e:	f000 8083 	beq.w	8008798 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8008692:	69bb      	ldr	r3, [r7, #24]
 8008694:	2b02      	cmp	r3, #2
 8008696:	f200 80a1 	bhi.w	80087dc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800869a:	69bb      	ldr	r3, [r7, #24]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d003      	beq.n	80086a8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80086a0:	69bb      	ldr	r3, [r7, #24]
 80086a2:	2b01      	cmp	r3, #1
 80086a4:	d056      	beq.n	8008754 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80086a6:	e099      	b.n	80087dc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80086a8:	4b88      	ldr	r3, [pc, #544]	@ (80088cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	f003 0320 	and.w	r3, r3, #32
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d02d      	beq.n	8008710 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80086b4:	4b85      	ldr	r3, [pc, #532]	@ (80088cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	08db      	lsrs	r3, r3, #3
 80086ba:	f003 0303 	and.w	r3, r3, #3
 80086be:	4a84      	ldr	r2, [pc, #528]	@ (80088d0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80086c0:	fa22 f303 	lsr.w	r3, r2, r3
 80086c4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80086c6:	68bb      	ldr	r3, [r7, #8]
 80086c8:	ee07 3a90 	vmov	s15, r3
 80086cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086d0:	697b      	ldr	r3, [r7, #20]
 80086d2:	ee07 3a90 	vmov	s15, r3
 80086d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80086de:	4b7b      	ldr	r3, [pc, #492]	@ (80088cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80086e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086e6:	ee07 3a90 	vmov	s15, r3
 80086ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80086f2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80088d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80086f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80086fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80086fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008702:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008706:	ee67 7a27 	vmul.f32	s15, s14, s15
 800870a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800870e:	e087      	b.n	8008820 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008710:	697b      	ldr	r3, [r7, #20]
 8008712:	ee07 3a90 	vmov	s15, r3
 8008716:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800871a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80088d8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800871e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008722:	4b6a      	ldr	r3, [pc, #424]	@ (80088cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008724:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008726:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800872a:	ee07 3a90 	vmov	s15, r3
 800872e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008732:	ed97 6a03 	vldr	s12, [r7, #12]
 8008736:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80088d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800873a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800873e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008742:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008746:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800874a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800874e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008752:	e065      	b.n	8008820 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008754:	697b      	ldr	r3, [r7, #20]
 8008756:	ee07 3a90 	vmov	s15, r3
 800875a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800875e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80088dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008762:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008766:	4b59      	ldr	r3, [pc, #356]	@ (80088cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008768:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800876a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800876e:	ee07 3a90 	vmov	s15, r3
 8008772:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008776:	ed97 6a03 	vldr	s12, [r7, #12]
 800877a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80088d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800877e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008782:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008786:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800878a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800878e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008792:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008796:	e043      	b.n	8008820 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008798:	697b      	ldr	r3, [r7, #20]
 800879a:	ee07 3a90 	vmov	s15, r3
 800879e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087a2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80088e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80087a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80087aa:	4b48      	ldr	r3, [pc, #288]	@ (80088cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80087ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087b2:	ee07 3a90 	vmov	s15, r3
 80087b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80087be:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80088d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80087c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80087c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80087ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80087ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80087d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80087da:	e021      	b.n	8008820 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80087dc:	697b      	ldr	r3, [r7, #20]
 80087de:	ee07 3a90 	vmov	s15, r3
 80087e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087e6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80088dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80087ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80087ee:	4b37      	ldr	r3, [pc, #220]	@ (80088cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80087f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087f6:	ee07 3a90 	vmov	s15, r3
 80087fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8008802:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80088d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008806:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800880a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800880e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008812:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008816:	ee67 7a27 	vmul.f32	s15, s14, s15
 800881a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800881e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8008820:	4b2a      	ldr	r3, [pc, #168]	@ (80088cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008822:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008824:	0a5b      	lsrs	r3, r3, #9
 8008826:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800882a:	ee07 3a90 	vmov	s15, r3
 800882e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008832:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008836:	ee37 7a87 	vadd.f32	s14, s15, s14
 800883a:	edd7 6a07 	vldr	s13, [r7, #28]
 800883e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008842:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008846:	ee17 2a90 	vmov	r2, s15
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800884e:	4b1f      	ldr	r3, [pc, #124]	@ (80088cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008850:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008852:	0c1b      	lsrs	r3, r3, #16
 8008854:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008858:	ee07 3a90 	vmov	s15, r3
 800885c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008860:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008864:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008868:	edd7 6a07 	vldr	s13, [r7, #28]
 800886c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008870:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008874:	ee17 2a90 	vmov	r2, s15
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800887c:	4b13      	ldr	r3, [pc, #76]	@ (80088cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800887e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008880:	0e1b      	lsrs	r3, r3, #24
 8008882:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008886:	ee07 3a90 	vmov	s15, r3
 800888a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800888e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008892:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008896:	edd7 6a07 	vldr	s13, [r7, #28]
 800889a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800889e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80088a2:	ee17 2a90 	vmov	r2, s15
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80088aa:	e008      	b.n	80088be <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	2200      	movs	r2, #0
 80088b0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	2200      	movs	r2, #0
 80088b6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	2200      	movs	r2, #0
 80088bc:	609a      	str	r2, [r3, #8]
}
 80088be:	bf00      	nop
 80088c0:	3724      	adds	r7, #36	@ 0x24
 80088c2:	46bd      	mov	sp, r7
 80088c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c8:	4770      	bx	lr
 80088ca:	bf00      	nop
 80088cc:	58024400 	.word	0x58024400
 80088d0:	03d09000 	.word	0x03d09000
 80088d4:	46000000 	.word	0x46000000
 80088d8:	4c742400 	.word	0x4c742400
 80088dc:	4a742400 	.word	0x4a742400
 80088e0:	4bb71b00 	.word	0x4bb71b00

080088e4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80088e4:	b480      	push	{r7}
 80088e6:	b089      	sub	sp, #36	@ 0x24
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80088ec:	4ba1      	ldr	r3, [pc, #644]	@ (8008b74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80088ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088f0:	f003 0303 	and.w	r3, r3, #3
 80088f4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80088f6:	4b9f      	ldr	r3, [pc, #636]	@ (8008b74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80088f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088fa:	0d1b      	lsrs	r3, r3, #20
 80088fc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008900:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008902:	4b9c      	ldr	r3, [pc, #624]	@ (8008b74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008904:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008906:	0a1b      	lsrs	r3, r3, #8
 8008908:	f003 0301 	and.w	r3, r3, #1
 800890c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800890e:	4b99      	ldr	r3, [pc, #612]	@ (8008b74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008910:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008912:	08db      	lsrs	r3, r3, #3
 8008914:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008918:	693a      	ldr	r2, [r7, #16]
 800891a:	fb02 f303 	mul.w	r3, r2, r3
 800891e:	ee07 3a90 	vmov	s15, r3
 8008922:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008926:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800892a:	697b      	ldr	r3, [r7, #20]
 800892c:	2b00      	cmp	r3, #0
 800892e:	f000 8111 	beq.w	8008b54 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008932:	69bb      	ldr	r3, [r7, #24]
 8008934:	2b02      	cmp	r3, #2
 8008936:	f000 8083 	beq.w	8008a40 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800893a:	69bb      	ldr	r3, [r7, #24]
 800893c:	2b02      	cmp	r3, #2
 800893e:	f200 80a1 	bhi.w	8008a84 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008942:	69bb      	ldr	r3, [r7, #24]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d003      	beq.n	8008950 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008948:	69bb      	ldr	r3, [r7, #24]
 800894a:	2b01      	cmp	r3, #1
 800894c:	d056      	beq.n	80089fc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800894e:	e099      	b.n	8008a84 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008950:	4b88      	ldr	r3, [pc, #544]	@ (8008b74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	f003 0320 	and.w	r3, r3, #32
 8008958:	2b00      	cmp	r3, #0
 800895a:	d02d      	beq.n	80089b8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800895c:	4b85      	ldr	r3, [pc, #532]	@ (8008b74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	08db      	lsrs	r3, r3, #3
 8008962:	f003 0303 	and.w	r3, r3, #3
 8008966:	4a84      	ldr	r2, [pc, #528]	@ (8008b78 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008968:	fa22 f303 	lsr.w	r3, r2, r3
 800896c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800896e:	68bb      	ldr	r3, [r7, #8]
 8008970:	ee07 3a90 	vmov	s15, r3
 8008974:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008978:	697b      	ldr	r3, [r7, #20]
 800897a:	ee07 3a90 	vmov	s15, r3
 800897e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008982:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008986:	4b7b      	ldr	r3, [pc, #492]	@ (8008b74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800898a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800898e:	ee07 3a90 	vmov	s15, r3
 8008992:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008996:	ed97 6a03 	vldr	s12, [r7, #12]
 800899a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008b7c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800899e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80089a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80089a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80089aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80089ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089b2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80089b6:	e087      	b.n	8008ac8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80089b8:	697b      	ldr	r3, [r7, #20]
 80089ba:	ee07 3a90 	vmov	s15, r3
 80089be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089c2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008b80 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80089c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80089ca:	4b6a      	ldr	r3, [pc, #424]	@ (8008b74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80089cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089d2:	ee07 3a90 	vmov	s15, r3
 80089d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089da:	ed97 6a03 	vldr	s12, [r7, #12]
 80089de:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008b7c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80089e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80089e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80089ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80089ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80089f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80089fa:	e065      	b.n	8008ac8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80089fc:	697b      	ldr	r3, [r7, #20]
 80089fe:	ee07 3a90 	vmov	s15, r3
 8008a02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a06:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008b84 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008a0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a0e:	4b59      	ldr	r3, [pc, #356]	@ (8008b74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a16:	ee07 3a90 	vmov	s15, r3
 8008a1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a22:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008b7c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008a26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008a32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008a3e:	e043      	b.n	8008ac8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008a40:	697b      	ldr	r3, [r7, #20]
 8008a42:	ee07 3a90 	vmov	s15, r3
 8008a46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a4a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008b88 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008a4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a52:	4b48      	ldr	r3, [pc, #288]	@ (8008b74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a5a:	ee07 3a90 	vmov	s15, r3
 8008a5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a62:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a66:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008b7c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008a6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008a76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a7e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008a82:	e021      	b.n	8008ac8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008a84:	697b      	ldr	r3, [r7, #20]
 8008a86:	ee07 3a90 	vmov	s15, r3
 8008a8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a8e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008b84 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008a92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a96:	4b37      	ldr	r3, [pc, #220]	@ (8008b74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a9e:	ee07 3a90 	vmov	s15, r3
 8008aa2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008aa6:	ed97 6a03 	vldr	s12, [r7, #12]
 8008aaa:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008b7c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008aae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ab2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ab6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008aba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008abe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ac2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008ac6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8008ac8:	4b2a      	ldr	r3, [pc, #168]	@ (8008b74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008aca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008acc:	0a5b      	lsrs	r3, r3, #9
 8008ace:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008ad2:	ee07 3a90 	vmov	s15, r3
 8008ad6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ada:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008ade:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008ae2:	edd7 6a07 	vldr	s13, [r7, #28]
 8008ae6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008aea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008aee:	ee17 2a90 	vmov	r2, s15
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8008af6:	4b1f      	ldr	r3, [pc, #124]	@ (8008b74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008afa:	0c1b      	lsrs	r3, r3, #16
 8008afc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008b00:	ee07 3a90 	vmov	s15, r3
 8008b04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b08:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008b0c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008b10:	edd7 6a07 	vldr	s13, [r7, #28]
 8008b14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008b18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008b1c:	ee17 2a90 	vmov	r2, s15
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8008b24:	4b13      	ldr	r3, [pc, #76]	@ (8008b74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b28:	0e1b      	lsrs	r3, r3, #24
 8008b2a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008b2e:	ee07 3a90 	vmov	s15, r3
 8008b32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b36:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008b3a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008b3e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008b42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008b46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008b4a:	ee17 2a90 	vmov	r2, s15
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008b52:	e008      	b.n	8008b66 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	2200      	movs	r2, #0
 8008b58:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	2200      	movs	r2, #0
 8008b5e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	2200      	movs	r2, #0
 8008b64:	609a      	str	r2, [r3, #8]
}
 8008b66:	bf00      	nop
 8008b68:	3724      	adds	r7, #36	@ 0x24
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b70:	4770      	bx	lr
 8008b72:	bf00      	nop
 8008b74:	58024400 	.word	0x58024400
 8008b78:	03d09000 	.word	0x03d09000
 8008b7c:	46000000 	.word	0x46000000
 8008b80:	4c742400 	.word	0x4c742400
 8008b84:	4a742400 	.word	0x4a742400
 8008b88:	4bb71b00 	.word	0x4bb71b00

08008b8c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b084      	sub	sp, #16
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]
 8008b94:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008b96:	2300      	movs	r3, #0
 8008b98:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008b9a:	4b53      	ldr	r3, [pc, #332]	@ (8008ce8 <RCCEx_PLL2_Config+0x15c>)
 8008b9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b9e:	f003 0303 	and.w	r3, r3, #3
 8008ba2:	2b03      	cmp	r3, #3
 8008ba4:	d101      	bne.n	8008baa <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008ba6:	2301      	movs	r3, #1
 8008ba8:	e099      	b.n	8008cde <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008baa:	4b4f      	ldr	r3, [pc, #316]	@ (8008ce8 <RCCEx_PLL2_Config+0x15c>)
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	4a4e      	ldr	r2, [pc, #312]	@ (8008ce8 <RCCEx_PLL2_Config+0x15c>)
 8008bb0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008bb4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008bb6:	f7f8 fad9 	bl	800116c <HAL_GetTick>
 8008bba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008bbc:	e008      	b.n	8008bd0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008bbe:	f7f8 fad5 	bl	800116c <HAL_GetTick>
 8008bc2:	4602      	mov	r2, r0
 8008bc4:	68bb      	ldr	r3, [r7, #8]
 8008bc6:	1ad3      	subs	r3, r2, r3
 8008bc8:	2b02      	cmp	r3, #2
 8008bca:	d901      	bls.n	8008bd0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008bcc:	2303      	movs	r3, #3
 8008bce:	e086      	b.n	8008cde <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008bd0:	4b45      	ldr	r3, [pc, #276]	@ (8008ce8 <RCCEx_PLL2_Config+0x15c>)
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d1f0      	bne.n	8008bbe <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008bdc:	4b42      	ldr	r3, [pc, #264]	@ (8008ce8 <RCCEx_PLL2_Config+0x15c>)
 8008bde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008be0:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	031b      	lsls	r3, r3, #12
 8008bea:	493f      	ldr	r1, [pc, #252]	@ (8008ce8 <RCCEx_PLL2_Config+0x15c>)
 8008bec:	4313      	orrs	r3, r2
 8008bee:	628b      	str	r3, [r1, #40]	@ 0x28
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	685b      	ldr	r3, [r3, #4]
 8008bf4:	3b01      	subs	r3, #1
 8008bf6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	689b      	ldr	r3, [r3, #8]
 8008bfe:	3b01      	subs	r3, #1
 8008c00:	025b      	lsls	r3, r3, #9
 8008c02:	b29b      	uxth	r3, r3
 8008c04:	431a      	orrs	r2, r3
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	68db      	ldr	r3, [r3, #12]
 8008c0a:	3b01      	subs	r3, #1
 8008c0c:	041b      	lsls	r3, r3, #16
 8008c0e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008c12:	431a      	orrs	r2, r3
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	691b      	ldr	r3, [r3, #16]
 8008c18:	3b01      	subs	r3, #1
 8008c1a:	061b      	lsls	r3, r3, #24
 8008c1c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008c20:	4931      	ldr	r1, [pc, #196]	@ (8008ce8 <RCCEx_PLL2_Config+0x15c>)
 8008c22:	4313      	orrs	r3, r2
 8008c24:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008c26:	4b30      	ldr	r3, [pc, #192]	@ (8008ce8 <RCCEx_PLL2_Config+0x15c>)
 8008c28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c2a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	695b      	ldr	r3, [r3, #20]
 8008c32:	492d      	ldr	r1, [pc, #180]	@ (8008ce8 <RCCEx_PLL2_Config+0x15c>)
 8008c34:	4313      	orrs	r3, r2
 8008c36:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008c38:	4b2b      	ldr	r3, [pc, #172]	@ (8008ce8 <RCCEx_PLL2_Config+0x15c>)
 8008c3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c3c:	f023 0220 	bic.w	r2, r3, #32
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	699b      	ldr	r3, [r3, #24]
 8008c44:	4928      	ldr	r1, [pc, #160]	@ (8008ce8 <RCCEx_PLL2_Config+0x15c>)
 8008c46:	4313      	orrs	r3, r2
 8008c48:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008c4a:	4b27      	ldr	r3, [pc, #156]	@ (8008ce8 <RCCEx_PLL2_Config+0x15c>)
 8008c4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c4e:	4a26      	ldr	r2, [pc, #152]	@ (8008ce8 <RCCEx_PLL2_Config+0x15c>)
 8008c50:	f023 0310 	bic.w	r3, r3, #16
 8008c54:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008c56:	4b24      	ldr	r3, [pc, #144]	@ (8008ce8 <RCCEx_PLL2_Config+0x15c>)
 8008c58:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008c5a:	4b24      	ldr	r3, [pc, #144]	@ (8008cec <RCCEx_PLL2_Config+0x160>)
 8008c5c:	4013      	ands	r3, r2
 8008c5e:	687a      	ldr	r2, [r7, #4]
 8008c60:	69d2      	ldr	r2, [r2, #28]
 8008c62:	00d2      	lsls	r2, r2, #3
 8008c64:	4920      	ldr	r1, [pc, #128]	@ (8008ce8 <RCCEx_PLL2_Config+0x15c>)
 8008c66:	4313      	orrs	r3, r2
 8008c68:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008c6a:	4b1f      	ldr	r3, [pc, #124]	@ (8008ce8 <RCCEx_PLL2_Config+0x15c>)
 8008c6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c6e:	4a1e      	ldr	r2, [pc, #120]	@ (8008ce8 <RCCEx_PLL2_Config+0x15c>)
 8008c70:	f043 0310 	orr.w	r3, r3, #16
 8008c74:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008c76:	683b      	ldr	r3, [r7, #0]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d106      	bne.n	8008c8a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008c7c:	4b1a      	ldr	r3, [pc, #104]	@ (8008ce8 <RCCEx_PLL2_Config+0x15c>)
 8008c7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c80:	4a19      	ldr	r2, [pc, #100]	@ (8008ce8 <RCCEx_PLL2_Config+0x15c>)
 8008c82:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008c86:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008c88:	e00f      	b.n	8008caa <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008c8a:	683b      	ldr	r3, [r7, #0]
 8008c8c:	2b01      	cmp	r3, #1
 8008c8e:	d106      	bne.n	8008c9e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008c90:	4b15      	ldr	r3, [pc, #84]	@ (8008ce8 <RCCEx_PLL2_Config+0x15c>)
 8008c92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c94:	4a14      	ldr	r2, [pc, #80]	@ (8008ce8 <RCCEx_PLL2_Config+0x15c>)
 8008c96:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008c9a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008c9c:	e005      	b.n	8008caa <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008c9e:	4b12      	ldr	r3, [pc, #72]	@ (8008ce8 <RCCEx_PLL2_Config+0x15c>)
 8008ca0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ca2:	4a11      	ldr	r2, [pc, #68]	@ (8008ce8 <RCCEx_PLL2_Config+0x15c>)
 8008ca4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008ca8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008caa:	4b0f      	ldr	r3, [pc, #60]	@ (8008ce8 <RCCEx_PLL2_Config+0x15c>)
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	4a0e      	ldr	r2, [pc, #56]	@ (8008ce8 <RCCEx_PLL2_Config+0x15c>)
 8008cb0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008cb4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008cb6:	f7f8 fa59 	bl	800116c <HAL_GetTick>
 8008cba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008cbc:	e008      	b.n	8008cd0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008cbe:	f7f8 fa55 	bl	800116c <HAL_GetTick>
 8008cc2:	4602      	mov	r2, r0
 8008cc4:	68bb      	ldr	r3, [r7, #8]
 8008cc6:	1ad3      	subs	r3, r2, r3
 8008cc8:	2b02      	cmp	r3, #2
 8008cca:	d901      	bls.n	8008cd0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008ccc:	2303      	movs	r3, #3
 8008cce:	e006      	b.n	8008cde <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008cd0:	4b05      	ldr	r3, [pc, #20]	@ (8008ce8 <RCCEx_PLL2_Config+0x15c>)
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d0f0      	beq.n	8008cbe <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008cdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cde:	4618      	mov	r0, r3
 8008ce0:	3710      	adds	r7, #16
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	bd80      	pop	{r7, pc}
 8008ce6:	bf00      	nop
 8008ce8:	58024400 	.word	0x58024400
 8008cec:	ffff0007 	.word	0xffff0007

08008cf0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b084      	sub	sp, #16
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
 8008cf8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008cfe:	4b53      	ldr	r3, [pc, #332]	@ (8008e4c <RCCEx_PLL3_Config+0x15c>)
 8008d00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d02:	f003 0303 	and.w	r3, r3, #3
 8008d06:	2b03      	cmp	r3, #3
 8008d08:	d101      	bne.n	8008d0e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008d0a:	2301      	movs	r3, #1
 8008d0c:	e099      	b.n	8008e42 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008d0e:	4b4f      	ldr	r3, [pc, #316]	@ (8008e4c <RCCEx_PLL3_Config+0x15c>)
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	4a4e      	ldr	r2, [pc, #312]	@ (8008e4c <RCCEx_PLL3_Config+0x15c>)
 8008d14:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008d18:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008d1a:	f7f8 fa27 	bl	800116c <HAL_GetTick>
 8008d1e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008d20:	e008      	b.n	8008d34 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008d22:	f7f8 fa23 	bl	800116c <HAL_GetTick>
 8008d26:	4602      	mov	r2, r0
 8008d28:	68bb      	ldr	r3, [r7, #8]
 8008d2a:	1ad3      	subs	r3, r2, r3
 8008d2c:	2b02      	cmp	r3, #2
 8008d2e:	d901      	bls.n	8008d34 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008d30:	2303      	movs	r3, #3
 8008d32:	e086      	b.n	8008e42 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008d34:	4b45      	ldr	r3, [pc, #276]	@ (8008e4c <RCCEx_PLL3_Config+0x15c>)
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d1f0      	bne.n	8008d22 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008d40:	4b42      	ldr	r3, [pc, #264]	@ (8008e4c <RCCEx_PLL3_Config+0x15c>)
 8008d42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d44:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	051b      	lsls	r3, r3, #20
 8008d4e:	493f      	ldr	r1, [pc, #252]	@ (8008e4c <RCCEx_PLL3_Config+0x15c>)
 8008d50:	4313      	orrs	r3, r2
 8008d52:	628b      	str	r3, [r1, #40]	@ 0x28
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	685b      	ldr	r3, [r3, #4]
 8008d58:	3b01      	subs	r3, #1
 8008d5a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	689b      	ldr	r3, [r3, #8]
 8008d62:	3b01      	subs	r3, #1
 8008d64:	025b      	lsls	r3, r3, #9
 8008d66:	b29b      	uxth	r3, r3
 8008d68:	431a      	orrs	r2, r3
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	68db      	ldr	r3, [r3, #12]
 8008d6e:	3b01      	subs	r3, #1
 8008d70:	041b      	lsls	r3, r3, #16
 8008d72:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008d76:	431a      	orrs	r2, r3
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	691b      	ldr	r3, [r3, #16]
 8008d7c:	3b01      	subs	r3, #1
 8008d7e:	061b      	lsls	r3, r3, #24
 8008d80:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008d84:	4931      	ldr	r1, [pc, #196]	@ (8008e4c <RCCEx_PLL3_Config+0x15c>)
 8008d86:	4313      	orrs	r3, r2
 8008d88:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008d8a:	4b30      	ldr	r3, [pc, #192]	@ (8008e4c <RCCEx_PLL3_Config+0x15c>)
 8008d8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d8e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	695b      	ldr	r3, [r3, #20]
 8008d96:	492d      	ldr	r1, [pc, #180]	@ (8008e4c <RCCEx_PLL3_Config+0x15c>)
 8008d98:	4313      	orrs	r3, r2
 8008d9a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008d9c:	4b2b      	ldr	r3, [pc, #172]	@ (8008e4c <RCCEx_PLL3_Config+0x15c>)
 8008d9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008da0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	699b      	ldr	r3, [r3, #24]
 8008da8:	4928      	ldr	r1, [pc, #160]	@ (8008e4c <RCCEx_PLL3_Config+0x15c>)
 8008daa:	4313      	orrs	r3, r2
 8008dac:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008dae:	4b27      	ldr	r3, [pc, #156]	@ (8008e4c <RCCEx_PLL3_Config+0x15c>)
 8008db0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008db2:	4a26      	ldr	r2, [pc, #152]	@ (8008e4c <RCCEx_PLL3_Config+0x15c>)
 8008db4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008db8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008dba:	4b24      	ldr	r3, [pc, #144]	@ (8008e4c <RCCEx_PLL3_Config+0x15c>)
 8008dbc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008dbe:	4b24      	ldr	r3, [pc, #144]	@ (8008e50 <RCCEx_PLL3_Config+0x160>)
 8008dc0:	4013      	ands	r3, r2
 8008dc2:	687a      	ldr	r2, [r7, #4]
 8008dc4:	69d2      	ldr	r2, [r2, #28]
 8008dc6:	00d2      	lsls	r2, r2, #3
 8008dc8:	4920      	ldr	r1, [pc, #128]	@ (8008e4c <RCCEx_PLL3_Config+0x15c>)
 8008dca:	4313      	orrs	r3, r2
 8008dcc:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008dce:	4b1f      	ldr	r3, [pc, #124]	@ (8008e4c <RCCEx_PLL3_Config+0x15c>)
 8008dd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008dd2:	4a1e      	ldr	r2, [pc, #120]	@ (8008e4c <RCCEx_PLL3_Config+0x15c>)
 8008dd4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008dd8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008dda:	683b      	ldr	r3, [r7, #0]
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d106      	bne.n	8008dee <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008de0:	4b1a      	ldr	r3, [pc, #104]	@ (8008e4c <RCCEx_PLL3_Config+0x15c>)
 8008de2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008de4:	4a19      	ldr	r2, [pc, #100]	@ (8008e4c <RCCEx_PLL3_Config+0x15c>)
 8008de6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8008dea:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008dec:	e00f      	b.n	8008e0e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008dee:	683b      	ldr	r3, [r7, #0]
 8008df0:	2b01      	cmp	r3, #1
 8008df2:	d106      	bne.n	8008e02 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008df4:	4b15      	ldr	r3, [pc, #84]	@ (8008e4c <RCCEx_PLL3_Config+0x15c>)
 8008df6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008df8:	4a14      	ldr	r2, [pc, #80]	@ (8008e4c <RCCEx_PLL3_Config+0x15c>)
 8008dfa:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008dfe:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008e00:	e005      	b.n	8008e0e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008e02:	4b12      	ldr	r3, [pc, #72]	@ (8008e4c <RCCEx_PLL3_Config+0x15c>)
 8008e04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e06:	4a11      	ldr	r2, [pc, #68]	@ (8008e4c <RCCEx_PLL3_Config+0x15c>)
 8008e08:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008e0c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008e0e:	4b0f      	ldr	r3, [pc, #60]	@ (8008e4c <RCCEx_PLL3_Config+0x15c>)
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	4a0e      	ldr	r2, [pc, #56]	@ (8008e4c <RCCEx_PLL3_Config+0x15c>)
 8008e14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008e18:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008e1a:	f7f8 f9a7 	bl	800116c <HAL_GetTick>
 8008e1e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008e20:	e008      	b.n	8008e34 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008e22:	f7f8 f9a3 	bl	800116c <HAL_GetTick>
 8008e26:	4602      	mov	r2, r0
 8008e28:	68bb      	ldr	r3, [r7, #8]
 8008e2a:	1ad3      	subs	r3, r2, r3
 8008e2c:	2b02      	cmp	r3, #2
 8008e2e:	d901      	bls.n	8008e34 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008e30:	2303      	movs	r3, #3
 8008e32:	e006      	b.n	8008e42 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008e34:	4b05      	ldr	r3, [pc, #20]	@ (8008e4c <RCCEx_PLL3_Config+0x15c>)
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d0f0      	beq.n	8008e22 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008e40:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e42:	4618      	mov	r0, r3
 8008e44:	3710      	adds	r7, #16
 8008e46:	46bd      	mov	sp, r7
 8008e48:	bd80      	pop	{r7, pc}
 8008e4a:	bf00      	nop
 8008e4c:	58024400 	.word	0x58024400
 8008e50:	ffff0007 	.word	0xffff0007

08008e54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b082      	sub	sp, #8
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d101      	bne.n	8008e66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008e62:	2301      	movs	r3, #1
 8008e64:	e049      	b.n	8008efa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008e6c:	b2db      	uxtb	r3, r3
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d106      	bne.n	8008e80 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	2200      	movs	r2, #0
 8008e76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008e7a:	6878      	ldr	r0, [r7, #4]
 8008e7c:	f000 f841 	bl	8008f02 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	2202      	movs	r2, #2
 8008e84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681a      	ldr	r2, [r3, #0]
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	3304      	adds	r3, #4
 8008e90:	4619      	mov	r1, r3
 8008e92:	4610      	mov	r0, r2
 8008e94:	f000 f9e8 	bl	8009268 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	2201      	movs	r2, #1
 8008e9c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	2201      	movs	r2, #1
 8008ea4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	2201      	movs	r2, #1
 8008eac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	2201      	movs	r2, #1
 8008eb4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	2201      	movs	r2, #1
 8008ebc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	2201      	movs	r2, #1
 8008ec4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	2201      	movs	r2, #1
 8008ecc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	2201      	movs	r2, #1
 8008ed4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	2201      	movs	r2, #1
 8008edc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	2201      	movs	r2, #1
 8008ee4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	2201      	movs	r2, #1
 8008eec:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	2201      	movs	r2, #1
 8008ef4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008ef8:	2300      	movs	r3, #0
}
 8008efa:	4618      	mov	r0, r3
 8008efc:	3708      	adds	r7, #8
 8008efe:	46bd      	mov	sp, r7
 8008f00:	bd80      	pop	{r7, pc}

08008f02 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8008f02:	b480      	push	{r7}
 8008f04:	b083      	sub	sp, #12
 8008f06:	af00      	add	r7, sp, #0
 8008f08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8008f0a:	bf00      	nop
 8008f0c:	370c      	adds	r7, #12
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f14:	4770      	bx	lr
	...

08008f18 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008f18:	b480      	push	{r7}
 8008f1a:	b085      	sub	sp, #20
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008f26:	b2db      	uxtb	r3, r3
 8008f28:	2b01      	cmp	r3, #1
 8008f2a:	d001      	beq.n	8008f30 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008f2c:	2301      	movs	r3, #1
 8008f2e:	e054      	b.n	8008fda <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	2202      	movs	r2, #2
 8008f34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	68da      	ldr	r2, [r3, #12]
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	f042 0201 	orr.w	r2, r2, #1
 8008f46:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	4a26      	ldr	r2, [pc, #152]	@ (8008fe8 <HAL_TIM_Base_Start_IT+0xd0>)
 8008f4e:	4293      	cmp	r3, r2
 8008f50:	d022      	beq.n	8008f98 <HAL_TIM_Base_Start_IT+0x80>
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008f5a:	d01d      	beq.n	8008f98 <HAL_TIM_Base_Start_IT+0x80>
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	4a22      	ldr	r2, [pc, #136]	@ (8008fec <HAL_TIM_Base_Start_IT+0xd4>)
 8008f62:	4293      	cmp	r3, r2
 8008f64:	d018      	beq.n	8008f98 <HAL_TIM_Base_Start_IT+0x80>
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	4a21      	ldr	r2, [pc, #132]	@ (8008ff0 <HAL_TIM_Base_Start_IT+0xd8>)
 8008f6c:	4293      	cmp	r3, r2
 8008f6e:	d013      	beq.n	8008f98 <HAL_TIM_Base_Start_IT+0x80>
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	4a1f      	ldr	r2, [pc, #124]	@ (8008ff4 <HAL_TIM_Base_Start_IT+0xdc>)
 8008f76:	4293      	cmp	r3, r2
 8008f78:	d00e      	beq.n	8008f98 <HAL_TIM_Base_Start_IT+0x80>
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	4a1e      	ldr	r2, [pc, #120]	@ (8008ff8 <HAL_TIM_Base_Start_IT+0xe0>)
 8008f80:	4293      	cmp	r3, r2
 8008f82:	d009      	beq.n	8008f98 <HAL_TIM_Base_Start_IT+0x80>
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	4a1c      	ldr	r2, [pc, #112]	@ (8008ffc <HAL_TIM_Base_Start_IT+0xe4>)
 8008f8a:	4293      	cmp	r3, r2
 8008f8c:	d004      	beq.n	8008f98 <HAL_TIM_Base_Start_IT+0x80>
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	4a1b      	ldr	r2, [pc, #108]	@ (8009000 <HAL_TIM_Base_Start_IT+0xe8>)
 8008f94:	4293      	cmp	r3, r2
 8008f96:	d115      	bne.n	8008fc4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	689a      	ldr	r2, [r3, #8]
 8008f9e:	4b19      	ldr	r3, [pc, #100]	@ (8009004 <HAL_TIM_Base_Start_IT+0xec>)
 8008fa0:	4013      	ands	r3, r2
 8008fa2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	2b06      	cmp	r3, #6
 8008fa8:	d015      	beq.n	8008fd6 <HAL_TIM_Base_Start_IT+0xbe>
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008fb0:	d011      	beq.n	8008fd6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	681a      	ldr	r2, [r3, #0]
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	f042 0201 	orr.w	r2, r2, #1
 8008fc0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008fc2:	e008      	b.n	8008fd6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	681a      	ldr	r2, [r3, #0]
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	f042 0201 	orr.w	r2, r2, #1
 8008fd2:	601a      	str	r2, [r3, #0]
 8008fd4:	e000      	b.n	8008fd8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008fd6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008fd8:	2300      	movs	r3, #0
}
 8008fda:	4618      	mov	r0, r3
 8008fdc:	3714      	adds	r7, #20
 8008fde:	46bd      	mov	sp, r7
 8008fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe4:	4770      	bx	lr
 8008fe6:	bf00      	nop
 8008fe8:	40010000 	.word	0x40010000
 8008fec:	40000400 	.word	0x40000400
 8008ff0:	40000800 	.word	0x40000800
 8008ff4:	40000c00 	.word	0x40000c00
 8008ff8:	40010400 	.word	0x40010400
 8008ffc:	40001800 	.word	0x40001800
 8009000:	40014000 	.word	0x40014000
 8009004:	00010007 	.word	0x00010007

08009008 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009008:	b580      	push	{r7, lr}
 800900a:	b084      	sub	sp, #16
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	68db      	ldr	r3, [r3, #12]
 8009016:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	691b      	ldr	r3, [r3, #16]
 800901e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009020:	68bb      	ldr	r3, [r7, #8]
 8009022:	f003 0302 	and.w	r3, r3, #2
 8009026:	2b00      	cmp	r3, #0
 8009028:	d020      	beq.n	800906c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	f003 0302 	and.w	r3, r3, #2
 8009030:	2b00      	cmp	r3, #0
 8009032:	d01b      	beq.n	800906c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	f06f 0202 	mvn.w	r2, #2
 800903c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	2201      	movs	r2, #1
 8009042:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	699b      	ldr	r3, [r3, #24]
 800904a:	f003 0303 	and.w	r3, r3, #3
 800904e:	2b00      	cmp	r3, #0
 8009050:	d003      	beq.n	800905a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009052:	6878      	ldr	r0, [r7, #4]
 8009054:	f000 f8e9 	bl	800922a <HAL_TIM_IC_CaptureCallback>
 8009058:	e005      	b.n	8009066 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800905a:	6878      	ldr	r0, [r7, #4]
 800905c:	f000 f8db 	bl	8009216 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009060:	6878      	ldr	r0, [r7, #4]
 8009062:	f000 f8ec 	bl	800923e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	2200      	movs	r2, #0
 800906a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800906c:	68bb      	ldr	r3, [r7, #8]
 800906e:	f003 0304 	and.w	r3, r3, #4
 8009072:	2b00      	cmp	r3, #0
 8009074:	d020      	beq.n	80090b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	f003 0304 	and.w	r3, r3, #4
 800907c:	2b00      	cmp	r3, #0
 800907e:	d01b      	beq.n	80090b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	f06f 0204 	mvn.w	r2, #4
 8009088:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	2202      	movs	r2, #2
 800908e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	699b      	ldr	r3, [r3, #24]
 8009096:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800909a:	2b00      	cmp	r3, #0
 800909c:	d003      	beq.n	80090a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800909e:	6878      	ldr	r0, [r7, #4]
 80090a0:	f000 f8c3 	bl	800922a <HAL_TIM_IC_CaptureCallback>
 80090a4:	e005      	b.n	80090b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80090a6:	6878      	ldr	r0, [r7, #4]
 80090a8:	f000 f8b5 	bl	8009216 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80090ac:	6878      	ldr	r0, [r7, #4]
 80090ae:	f000 f8c6 	bl	800923e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	2200      	movs	r2, #0
 80090b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80090b8:	68bb      	ldr	r3, [r7, #8]
 80090ba:	f003 0308 	and.w	r3, r3, #8
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d020      	beq.n	8009104 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	f003 0308 	and.w	r3, r3, #8
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d01b      	beq.n	8009104 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	f06f 0208 	mvn.w	r2, #8
 80090d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	2204      	movs	r2, #4
 80090da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	69db      	ldr	r3, [r3, #28]
 80090e2:	f003 0303 	and.w	r3, r3, #3
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d003      	beq.n	80090f2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80090ea:	6878      	ldr	r0, [r7, #4]
 80090ec:	f000 f89d 	bl	800922a <HAL_TIM_IC_CaptureCallback>
 80090f0:	e005      	b.n	80090fe <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80090f2:	6878      	ldr	r0, [r7, #4]
 80090f4:	f000 f88f 	bl	8009216 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80090f8:	6878      	ldr	r0, [r7, #4]
 80090fa:	f000 f8a0 	bl	800923e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	2200      	movs	r2, #0
 8009102:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009104:	68bb      	ldr	r3, [r7, #8]
 8009106:	f003 0310 	and.w	r3, r3, #16
 800910a:	2b00      	cmp	r3, #0
 800910c:	d020      	beq.n	8009150 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	f003 0310 	and.w	r3, r3, #16
 8009114:	2b00      	cmp	r3, #0
 8009116:	d01b      	beq.n	8009150 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	f06f 0210 	mvn.w	r2, #16
 8009120:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	2208      	movs	r2, #8
 8009126:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	69db      	ldr	r3, [r3, #28]
 800912e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009132:	2b00      	cmp	r3, #0
 8009134:	d003      	beq.n	800913e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009136:	6878      	ldr	r0, [r7, #4]
 8009138:	f000 f877 	bl	800922a <HAL_TIM_IC_CaptureCallback>
 800913c:	e005      	b.n	800914a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800913e:	6878      	ldr	r0, [r7, #4]
 8009140:	f000 f869 	bl	8009216 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009144:	6878      	ldr	r0, [r7, #4]
 8009146:	f000 f87a 	bl	800923e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	2200      	movs	r2, #0
 800914e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009150:	68bb      	ldr	r3, [r7, #8]
 8009152:	f003 0301 	and.w	r3, r3, #1
 8009156:	2b00      	cmp	r3, #0
 8009158:	d00c      	beq.n	8009174 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	f003 0301 	and.w	r3, r3, #1
 8009160:	2b00      	cmp	r3, #0
 8009162:	d007      	beq.n	8009174 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	f06f 0201 	mvn.w	r2, #1
 800916c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800916e:	6878      	ldr	r0, [r7, #4]
 8009170:	f7f7 fd28 	bl	8000bc4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009174:	68bb      	ldr	r3, [r7, #8]
 8009176:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800917a:	2b00      	cmp	r3, #0
 800917c:	d104      	bne.n	8009188 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800917e:	68bb      	ldr	r3, [r7, #8]
 8009180:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009184:	2b00      	cmp	r3, #0
 8009186:	d00c      	beq.n	80091a2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800918e:	2b00      	cmp	r3, #0
 8009190:	d007      	beq.n	80091a2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800919a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800919c:	6878      	ldr	r0, [r7, #4]
 800919e:	f000 f913 	bl	80093c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80091a2:	68bb      	ldr	r3, [r7, #8]
 80091a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d00c      	beq.n	80091c6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d007      	beq.n	80091c6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80091be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80091c0:	6878      	ldr	r0, [r7, #4]
 80091c2:	f000 f90b 	bl	80093dc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80091c6:	68bb      	ldr	r3, [r7, #8]
 80091c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d00c      	beq.n	80091ea <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d007      	beq.n	80091ea <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80091e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80091e4:	6878      	ldr	r0, [r7, #4]
 80091e6:	f000 f834 	bl	8009252 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80091ea:	68bb      	ldr	r3, [r7, #8]
 80091ec:	f003 0320 	and.w	r3, r3, #32
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d00c      	beq.n	800920e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	f003 0320 	and.w	r3, r3, #32
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d007      	beq.n	800920e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	f06f 0220 	mvn.w	r2, #32
 8009206:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009208:	6878      	ldr	r0, [r7, #4]
 800920a:	f000 f8d3 	bl	80093b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800920e:	bf00      	nop
 8009210:	3710      	adds	r7, #16
 8009212:	46bd      	mov	sp, r7
 8009214:	bd80      	pop	{r7, pc}

08009216 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009216:	b480      	push	{r7}
 8009218:	b083      	sub	sp, #12
 800921a:	af00      	add	r7, sp, #0
 800921c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800921e:	bf00      	nop
 8009220:	370c      	adds	r7, #12
 8009222:	46bd      	mov	sp, r7
 8009224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009228:	4770      	bx	lr

0800922a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800922a:	b480      	push	{r7}
 800922c:	b083      	sub	sp, #12
 800922e:	af00      	add	r7, sp, #0
 8009230:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009232:	bf00      	nop
 8009234:	370c      	adds	r7, #12
 8009236:	46bd      	mov	sp, r7
 8009238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923c:	4770      	bx	lr

0800923e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800923e:	b480      	push	{r7}
 8009240:	b083      	sub	sp, #12
 8009242:	af00      	add	r7, sp, #0
 8009244:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009246:	bf00      	nop
 8009248:	370c      	adds	r7, #12
 800924a:	46bd      	mov	sp, r7
 800924c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009250:	4770      	bx	lr

08009252 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009252:	b480      	push	{r7}
 8009254:	b083      	sub	sp, #12
 8009256:	af00      	add	r7, sp, #0
 8009258:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800925a:	bf00      	nop
 800925c:	370c      	adds	r7, #12
 800925e:	46bd      	mov	sp, r7
 8009260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009264:	4770      	bx	lr
	...

08009268 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009268:	b480      	push	{r7}
 800926a:	b085      	sub	sp, #20
 800926c:	af00      	add	r7, sp, #0
 800926e:	6078      	str	r0, [r7, #4]
 8009270:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	4a46      	ldr	r2, [pc, #280]	@ (8009394 <TIM_Base_SetConfig+0x12c>)
 800927c:	4293      	cmp	r3, r2
 800927e:	d013      	beq.n	80092a8 <TIM_Base_SetConfig+0x40>
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009286:	d00f      	beq.n	80092a8 <TIM_Base_SetConfig+0x40>
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	4a43      	ldr	r2, [pc, #268]	@ (8009398 <TIM_Base_SetConfig+0x130>)
 800928c:	4293      	cmp	r3, r2
 800928e:	d00b      	beq.n	80092a8 <TIM_Base_SetConfig+0x40>
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	4a42      	ldr	r2, [pc, #264]	@ (800939c <TIM_Base_SetConfig+0x134>)
 8009294:	4293      	cmp	r3, r2
 8009296:	d007      	beq.n	80092a8 <TIM_Base_SetConfig+0x40>
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	4a41      	ldr	r2, [pc, #260]	@ (80093a0 <TIM_Base_SetConfig+0x138>)
 800929c:	4293      	cmp	r3, r2
 800929e:	d003      	beq.n	80092a8 <TIM_Base_SetConfig+0x40>
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	4a40      	ldr	r2, [pc, #256]	@ (80093a4 <TIM_Base_SetConfig+0x13c>)
 80092a4:	4293      	cmp	r3, r2
 80092a6:	d108      	bne.n	80092ba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80092ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80092b0:	683b      	ldr	r3, [r7, #0]
 80092b2:	685b      	ldr	r3, [r3, #4]
 80092b4:	68fa      	ldr	r2, [r7, #12]
 80092b6:	4313      	orrs	r3, r2
 80092b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	4a35      	ldr	r2, [pc, #212]	@ (8009394 <TIM_Base_SetConfig+0x12c>)
 80092be:	4293      	cmp	r3, r2
 80092c0:	d01f      	beq.n	8009302 <TIM_Base_SetConfig+0x9a>
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80092c8:	d01b      	beq.n	8009302 <TIM_Base_SetConfig+0x9a>
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	4a32      	ldr	r2, [pc, #200]	@ (8009398 <TIM_Base_SetConfig+0x130>)
 80092ce:	4293      	cmp	r3, r2
 80092d0:	d017      	beq.n	8009302 <TIM_Base_SetConfig+0x9a>
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	4a31      	ldr	r2, [pc, #196]	@ (800939c <TIM_Base_SetConfig+0x134>)
 80092d6:	4293      	cmp	r3, r2
 80092d8:	d013      	beq.n	8009302 <TIM_Base_SetConfig+0x9a>
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	4a30      	ldr	r2, [pc, #192]	@ (80093a0 <TIM_Base_SetConfig+0x138>)
 80092de:	4293      	cmp	r3, r2
 80092e0:	d00f      	beq.n	8009302 <TIM_Base_SetConfig+0x9a>
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	4a2f      	ldr	r2, [pc, #188]	@ (80093a4 <TIM_Base_SetConfig+0x13c>)
 80092e6:	4293      	cmp	r3, r2
 80092e8:	d00b      	beq.n	8009302 <TIM_Base_SetConfig+0x9a>
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	4a2e      	ldr	r2, [pc, #184]	@ (80093a8 <TIM_Base_SetConfig+0x140>)
 80092ee:	4293      	cmp	r3, r2
 80092f0:	d007      	beq.n	8009302 <TIM_Base_SetConfig+0x9a>
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	4a2d      	ldr	r2, [pc, #180]	@ (80093ac <TIM_Base_SetConfig+0x144>)
 80092f6:	4293      	cmp	r3, r2
 80092f8:	d003      	beq.n	8009302 <TIM_Base_SetConfig+0x9a>
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	4a2c      	ldr	r2, [pc, #176]	@ (80093b0 <TIM_Base_SetConfig+0x148>)
 80092fe:	4293      	cmp	r3, r2
 8009300:	d108      	bne.n	8009314 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009308:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800930a:	683b      	ldr	r3, [r7, #0]
 800930c:	68db      	ldr	r3, [r3, #12]
 800930e:	68fa      	ldr	r2, [r7, #12]
 8009310:	4313      	orrs	r3, r2
 8009312:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800931a:	683b      	ldr	r3, [r7, #0]
 800931c:	695b      	ldr	r3, [r3, #20]
 800931e:	4313      	orrs	r3, r2
 8009320:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	68fa      	ldr	r2, [r7, #12]
 8009326:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009328:	683b      	ldr	r3, [r7, #0]
 800932a:	689a      	ldr	r2, [r3, #8]
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009330:	683b      	ldr	r3, [r7, #0]
 8009332:	681a      	ldr	r2, [r3, #0]
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	4a16      	ldr	r2, [pc, #88]	@ (8009394 <TIM_Base_SetConfig+0x12c>)
 800933c:	4293      	cmp	r3, r2
 800933e:	d00f      	beq.n	8009360 <TIM_Base_SetConfig+0xf8>
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	4a18      	ldr	r2, [pc, #96]	@ (80093a4 <TIM_Base_SetConfig+0x13c>)
 8009344:	4293      	cmp	r3, r2
 8009346:	d00b      	beq.n	8009360 <TIM_Base_SetConfig+0xf8>
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	4a17      	ldr	r2, [pc, #92]	@ (80093a8 <TIM_Base_SetConfig+0x140>)
 800934c:	4293      	cmp	r3, r2
 800934e:	d007      	beq.n	8009360 <TIM_Base_SetConfig+0xf8>
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	4a16      	ldr	r2, [pc, #88]	@ (80093ac <TIM_Base_SetConfig+0x144>)
 8009354:	4293      	cmp	r3, r2
 8009356:	d003      	beq.n	8009360 <TIM_Base_SetConfig+0xf8>
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	4a15      	ldr	r2, [pc, #84]	@ (80093b0 <TIM_Base_SetConfig+0x148>)
 800935c:	4293      	cmp	r3, r2
 800935e:	d103      	bne.n	8009368 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009360:	683b      	ldr	r3, [r7, #0]
 8009362:	691a      	ldr	r2, [r3, #16]
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	2201      	movs	r2, #1
 800936c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	691b      	ldr	r3, [r3, #16]
 8009372:	f003 0301 	and.w	r3, r3, #1
 8009376:	2b01      	cmp	r3, #1
 8009378:	d105      	bne.n	8009386 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	691b      	ldr	r3, [r3, #16]
 800937e:	f023 0201 	bic.w	r2, r3, #1
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	611a      	str	r2, [r3, #16]
  }
}
 8009386:	bf00      	nop
 8009388:	3714      	adds	r7, #20
 800938a:	46bd      	mov	sp, r7
 800938c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009390:	4770      	bx	lr
 8009392:	bf00      	nop
 8009394:	40010000 	.word	0x40010000
 8009398:	40000400 	.word	0x40000400
 800939c:	40000800 	.word	0x40000800
 80093a0:	40000c00 	.word	0x40000c00
 80093a4:	40010400 	.word	0x40010400
 80093a8:	40014000 	.word	0x40014000
 80093ac:	40014400 	.word	0x40014400
 80093b0:	40014800 	.word	0x40014800

080093b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80093b4:	b480      	push	{r7}
 80093b6:	b083      	sub	sp, #12
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80093bc:	bf00      	nop
 80093be:	370c      	adds	r7, #12
 80093c0:	46bd      	mov	sp, r7
 80093c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c6:	4770      	bx	lr

080093c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80093c8:	b480      	push	{r7}
 80093ca:	b083      	sub	sp, #12
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80093d0:	bf00      	nop
 80093d2:	370c      	adds	r7, #12
 80093d4:	46bd      	mov	sp, r7
 80093d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093da:	4770      	bx	lr

080093dc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80093dc:	b480      	push	{r7}
 80093de:	b083      	sub	sp, #12
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80093e4:	bf00      	nop
 80093e6:	370c      	adds	r7, #12
 80093e8:	46bd      	mov	sp, r7
 80093ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ee:	4770      	bx	lr

080093f0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80093f0:	b580      	push	{r7, lr}
 80093f2:	b082      	sub	sp, #8
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d101      	bne.n	8009402 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80093fe:	2301      	movs	r3, #1
 8009400:	e042      	b.n	8009488 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009408:	2b00      	cmp	r3, #0
 800940a:	d106      	bne.n	800941a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	2200      	movs	r2, #0
 8009410:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009414:	6878      	ldr	r0, [r7, #4]
 8009416:	f7f7 fdc5 	bl	8000fa4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	2224      	movs	r2, #36	@ 0x24
 800941e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	681a      	ldr	r2, [r3, #0]
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	f022 0201 	bic.w	r2, r2, #1
 8009430:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009436:	2b00      	cmp	r3, #0
 8009438:	d002      	beq.n	8009440 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800943a:	6878      	ldr	r0, [r7, #4]
 800943c:	f000 ff22 	bl	800a284 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009440:	6878      	ldr	r0, [r7, #4]
 8009442:	f000 f8b3 	bl	80095ac <UART_SetConfig>
 8009446:	4603      	mov	r3, r0
 8009448:	2b01      	cmp	r3, #1
 800944a:	d101      	bne.n	8009450 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800944c:	2301      	movs	r3, #1
 800944e:	e01b      	b.n	8009488 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	685a      	ldr	r2, [r3, #4]
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800945e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	689a      	ldr	r2, [r3, #8]
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800946e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	681a      	ldr	r2, [r3, #0]
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	f042 0201 	orr.w	r2, r2, #1
 800947e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009480:	6878      	ldr	r0, [r7, #4]
 8009482:	f000 ffa1 	bl	800a3c8 <UART_CheckIdleState>
 8009486:	4603      	mov	r3, r0
}
 8009488:	4618      	mov	r0, r3
 800948a:	3708      	adds	r7, #8
 800948c:	46bd      	mov	sp, r7
 800948e:	bd80      	pop	{r7, pc}

08009490 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009490:	b580      	push	{r7, lr}
 8009492:	b08a      	sub	sp, #40	@ 0x28
 8009494:	af02      	add	r7, sp, #8
 8009496:	60f8      	str	r0, [r7, #12]
 8009498:	60b9      	str	r1, [r7, #8]
 800949a:	603b      	str	r3, [r7, #0]
 800949c:	4613      	mov	r3, r2
 800949e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80094a6:	2b20      	cmp	r3, #32
 80094a8:	d17b      	bne.n	80095a2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80094aa:	68bb      	ldr	r3, [r7, #8]
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d002      	beq.n	80094b6 <HAL_UART_Transmit+0x26>
 80094b0:	88fb      	ldrh	r3, [r7, #6]
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d101      	bne.n	80094ba <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80094b6:	2301      	movs	r3, #1
 80094b8:	e074      	b.n	80095a4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	2200      	movs	r2, #0
 80094be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	2221      	movs	r2, #33	@ 0x21
 80094c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80094ca:	f7f7 fe4f 	bl	800116c <HAL_GetTick>
 80094ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	88fa      	ldrh	r2, [r7, #6]
 80094d4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	88fa      	ldrh	r2, [r7, #6]
 80094dc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	689b      	ldr	r3, [r3, #8]
 80094e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80094e8:	d108      	bne.n	80094fc <HAL_UART_Transmit+0x6c>
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	691b      	ldr	r3, [r3, #16]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d104      	bne.n	80094fc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80094f2:	2300      	movs	r3, #0
 80094f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80094f6:	68bb      	ldr	r3, [r7, #8]
 80094f8:	61bb      	str	r3, [r7, #24]
 80094fa:	e003      	b.n	8009504 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80094fc:	68bb      	ldr	r3, [r7, #8]
 80094fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009500:	2300      	movs	r3, #0
 8009502:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009504:	e030      	b.n	8009568 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009506:	683b      	ldr	r3, [r7, #0]
 8009508:	9300      	str	r3, [sp, #0]
 800950a:	697b      	ldr	r3, [r7, #20]
 800950c:	2200      	movs	r2, #0
 800950e:	2180      	movs	r1, #128	@ 0x80
 8009510:	68f8      	ldr	r0, [r7, #12]
 8009512:	f001 f803 	bl	800a51c <UART_WaitOnFlagUntilTimeout>
 8009516:	4603      	mov	r3, r0
 8009518:	2b00      	cmp	r3, #0
 800951a:	d005      	beq.n	8009528 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	2220      	movs	r2, #32
 8009520:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8009524:	2303      	movs	r3, #3
 8009526:	e03d      	b.n	80095a4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8009528:	69fb      	ldr	r3, [r7, #28]
 800952a:	2b00      	cmp	r3, #0
 800952c:	d10b      	bne.n	8009546 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800952e:	69bb      	ldr	r3, [r7, #24]
 8009530:	881b      	ldrh	r3, [r3, #0]
 8009532:	461a      	mov	r2, r3
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800953c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800953e:	69bb      	ldr	r3, [r7, #24]
 8009540:	3302      	adds	r3, #2
 8009542:	61bb      	str	r3, [r7, #24]
 8009544:	e007      	b.n	8009556 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009546:	69fb      	ldr	r3, [r7, #28]
 8009548:	781a      	ldrb	r2, [r3, #0]
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8009550:	69fb      	ldr	r3, [r7, #28]
 8009552:	3301      	adds	r3, #1
 8009554:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800955c:	b29b      	uxth	r3, r3
 800955e:	3b01      	subs	r3, #1
 8009560:	b29a      	uxth	r2, r3
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800956e:	b29b      	uxth	r3, r3
 8009570:	2b00      	cmp	r3, #0
 8009572:	d1c8      	bne.n	8009506 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009574:	683b      	ldr	r3, [r7, #0]
 8009576:	9300      	str	r3, [sp, #0]
 8009578:	697b      	ldr	r3, [r7, #20]
 800957a:	2200      	movs	r2, #0
 800957c:	2140      	movs	r1, #64	@ 0x40
 800957e:	68f8      	ldr	r0, [r7, #12]
 8009580:	f000 ffcc 	bl	800a51c <UART_WaitOnFlagUntilTimeout>
 8009584:	4603      	mov	r3, r0
 8009586:	2b00      	cmp	r3, #0
 8009588:	d005      	beq.n	8009596 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	2220      	movs	r2, #32
 800958e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8009592:	2303      	movs	r3, #3
 8009594:	e006      	b.n	80095a4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	2220      	movs	r2, #32
 800959a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800959e:	2300      	movs	r3, #0
 80095a0:	e000      	b.n	80095a4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80095a2:	2302      	movs	r3, #2
  }
}
 80095a4:	4618      	mov	r0, r3
 80095a6:	3720      	adds	r7, #32
 80095a8:	46bd      	mov	sp, r7
 80095aa:	bd80      	pop	{r7, pc}

080095ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80095ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80095b0:	b092      	sub	sp, #72	@ 0x48
 80095b2:	af00      	add	r7, sp, #0
 80095b4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80095b6:	2300      	movs	r3, #0
 80095b8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80095bc:	697b      	ldr	r3, [r7, #20]
 80095be:	689a      	ldr	r2, [r3, #8]
 80095c0:	697b      	ldr	r3, [r7, #20]
 80095c2:	691b      	ldr	r3, [r3, #16]
 80095c4:	431a      	orrs	r2, r3
 80095c6:	697b      	ldr	r3, [r7, #20]
 80095c8:	695b      	ldr	r3, [r3, #20]
 80095ca:	431a      	orrs	r2, r3
 80095cc:	697b      	ldr	r3, [r7, #20]
 80095ce:	69db      	ldr	r3, [r3, #28]
 80095d0:	4313      	orrs	r3, r2
 80095d2:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80095d4:	697b      	ldr	r3, [r7, #20]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	681a      	ldr	r2, [r3, #0]
 80095da:	4bbe      	ldr	r3, [pc, #760]	@ (80098d4 <UART_SetConfig+0x328>)
 80095dc:	4013      	ands	r3, r2
 80095de:	697a      	ldr	r2, [r7, #20]
 80095e0:	6812      	ldr	r2, [r2, #0]
 80095e2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80095e4:	430b      	orrs	r3, r1
 80095e6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80095e8:	697b      	ldr	r3, [r7, #20]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	685b      	ldr	r3, [r3, #4]
 80095ee:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80095f2:	697b      	ldr	r3, [r7, #20]
 80095f4:	68da      	ldr	r2, [r3, #12]
 80095f6:	697b      	ldr	r3, [r7, #20]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	430a      	orrs	r2, r1
 80095fc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80095fe:	697b      	ldr	r3, [r7, #20]
 8009600:	699b      	ldr	r3, [r3, #24]
 8009602:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009604:	697b      	ldr	r3, [r7, #20]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	4ab3      	ldr	r2, [pc, #716]	@ (80098d8 <UART_SetConfig+0x32c>)
 800960a:	4293      	cmp	r3, r2
 800960c:	d004      	beq.n	8009618 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800960e:	697b      	ldr	r3, [r7, #20]
 8009610:	6a1b      	ldr	r3, [r3, #32]
 8009612:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009614:	4313      	orrs	r3, r2
 8009616:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009618:	697b      	ldr	r3, [r7, #20]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	689a      	ldr	r2, [r3, #8]
 800961e:	4baf      	ldr	r3, [pc, #700]	@ (80098dc <UART_SetConfig+0x330>)
 8009620:	4013      	ands	r3, r2
 8009622:	697a      	ldr	r2, [r7, #20]
 8009624:	6812      	ldr	r2, [r2, #0]
 8009626:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009628:	430b      	orrs	r3, r1
 800962a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800962c:	697b      	ldr	r3, [r7, #20]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009632:	f023 010f 	bic.w	r1, r3, #15
 8009636:	697b      	ldr	r3, [r7, #20]
 8009638:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800963a:	697b      	ldr	r3, [r7, #20]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	430a      	orrs	r2, r1
 8009640:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009642:	697b      	ldr	r3, [r7, #20]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	4aa6      	ldr	r2, [pc, #664]	@ (80098e0 <UART_SetConfig+0x334>)
 8009648:	4293      	cmp	r3, r2
 800964a:	d177      	bne.n	800973c <UART_SetConfig+0x190>
 800964c:	4ba5      	ldr	r3, [pc, #660]	@ (80098e4 <UART_SetConfig+0x338>)
 800964e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009650:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009654:	2b28      	cmp	r3, #40	@ 0x28
 8009656:	d86d      	bhi.n	8009734 <UART_SetConfig+0x188>
 8009658:	a201      	add	r2, pc, #4	@ (adr r2, 8009660 <UART_SetConfig+0xb4>)
 800965a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800965e:	bf00      	nop
 8009660:	08009705 	.word	0x08009705
 8009664:	08009735 	.word	0x08009735
 8009668:	08009735 	.word	0x08009735
 800966c:	08009735 	.word	0x08009735
 8009670:	08009735 	.word	0x08009735
 8009674:	08009735 	.word	0x08009735
 8009678:	08009735 	.word	0x08009735
 800967c:	08009735 	.word	0x08009735
 8009680:	0800970d 	.word	0x0800970d
 8009684:	08009735 	.word	0x08009735
 8009688:	08009735 	.word	0x08009735
 800968c:	08009735 	.word	0x08009735
 8009690:	08009735 	.word	0x08009735
 8009694:	08009735 	.word	0x08009735
 8009698:	08009735 	.word	0x08009735
 800969c:	08009735 	.word	0x08009735
 80096a0:	08009715 	.word	0x08009715
 80096a4:	08009735 	.word	0x08009735
 80096a8:	08009735 	.word	0x08009735
 80096ac:	08009735 	.word	0x08009735
 80096b0:	08009735 	.word	0x08009735
 80096b4:	08009735 	.word	0x08009735
 80096b8:	08009735 	.word	0x08009735
 80096bc:	08009735 	.word	0x08009735
 80096c0:	0800971d 	.word	0x0800971d
 80096c4:	08009735 	.word	0x08009735
 80096c8:	08009735 	.word	0x08009735
 80096cc:	08009735 	.word	0x08009735
 80096d0:	08009735 	.word	0x08009735
 80096d4:	08009735 	.word	0x08009735
 80096d8:	08009735 	.word	0x08009735
 80096dc:	08009735 	.word	0x08009735
 80096e0:	08009725 	.word	0x08009725
 80096e4:	08009735 	.word	0x08009735
 80096e8:	08009735 	.word	0x08009735
 80096ec:	08009735 	.word	0x08009735
 80096f0:	08009735 	.word	0x08009735
 80096f4:	08009735 	.word	0x08009735
 80096f8:	08009735 	.word	0x08009735
 80096fc:	08009735 	.word	0x08009735
 8009700:	0800972d 	.word	0x0800972d
 8009704:	2301      	movs	r3, #1
 8009706:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800970a:	e326      	b.n	8009d5a <UART_SetConfig+0x7ae>
 800970c:	2304      	movs	r3, #4
 800970e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009712:	e322      	b.n	8009d5a <UART_SetConfig+0x7ae>
 8009714:	2308      	movs	r3, #8
 8009716:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800971a:	e31e      	b.n	8009d5a <UART_SetConfig+0x7ae>
 800971c:	2310      	movs	r3, #16
 800971e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009722:	e31a      	b.n	8009d5a <UART_SetConfig+0x7ae>
 8009724:	2320      	movs	r3, #32
 8009726:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800972a:	e316      	b.n	8009d5a <UART_SetConfig+0x7ae>
 800972c:	2340      	movs	r3, #64	@ 0x40
 800972e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009732:	e312      	b.n	8009d5a <UART_SetConfig+0x7ae>
 8009734:	2380      	movs	r3, #128	@ 0x80
 8009736:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800973a:	e30e      	b.n	8009d5a <UART_SetConfig+0x7ae>
 800973c:	697b      	ldr	r3, [r7, #20]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	4a69      	ldr	r2, [pc, #420]	@ (80098e8 <UART_SetConfig+0x33c>)
 8009742:	4293      	cmp	r3, r2
 8009744:	d130      	bne.n	80097a8 <UART_SetConfig+0x1fc>
 8009746:	4b67      	ldr	r3, [pc, #412]	@ (80098e4 <UART_SetConfig+0x338>)
 8009748:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800974a:	f003 0307 	and.w	r3, r3, #7
 800974e:	2b05      	cmp	r3, #5
 8009750:	d826      	bhi.n	80097a0 <UART_SetConfig+0x1f4>
 8009752:	a201      	add	r2, pc, #4	@ (adr r2, 8009758 <UART_SetConfig+0x1ac>)
 8009754:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009758:	08009771 	.word	0x08009771
 800975c:	08009779 	.word	0x08009779
 8009760:	08009781 	.word	0x08009781
 8009764:	08009789 	.word	0x08009789
 8009768:	08009791 	.word	0x08009791
 800976c:	08009799 	.word	0x08009799
 8009770:	2300      	movs	r3, #0
 8009772:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009776:	e2f0      	b.n	8009d5a <UART_SetConfig+0x7ae>
 8009778:	2304      	movs	r3, #4
 800977a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800977e:	e2ec      	b.n	8009d5a <UART_SetConfig+0x7ae>
 8009780:	2308      	movs	r3, #8
 8009782:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009786:	e2e8      	b.n	8009d5a <UART_SetConfig+0x7ae>
 8009788:	2310      	movs	r3, #16
 800978a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800978e:	e2e4      	b.n	8009d5a <UART_SetConfig+0x7ae>
 8009790:	2320      	movs	r3, #32
 8009792:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009796:	e2e0      	b.n	8009d5a <UART_SetConfig+0x7ae>
 8009798:	2340      	movs	r3, #64	@ 0x40
 800979a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800979e:	e2dc      	b.n	8009d5a <UART_SetConfig+0x7ae>
 80097a0:	2380      	movs	r3, #128	@ 0x80
 80097a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097a6:	e2d8      	b.n	8009d5a <UART_SetConfig+0x7ae>
 80097a8:	697b      	ldr	r3, [r7, #20]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	4a4f      	ldr	r2, [pc, #316]	@ (80098ec <UART_SetConfig+0x340>)
 80097ae:	4293      	cmp	r3, r2
 80097b0:	d130      	bne.n	8009814 <UART_SetConfig+0x268>
 80097b2:	4b4c      	ldr	r3, [pc, #304]	@ (80098e4 <UART_SetConfig+0x338>)
 80097b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80097b6:	f003 0307 	and.w	r3, r3, #7
 80097ba:	2b05      	cmp	r3, #5
 80097bc:	d826      	bhi.n	800980c <UART_SetConfig+0x260>
 80097be:	a201      	add	r2, pc, #4	@ (adr r2, 80097c4 <UART_SetConfig+0x218>)
 80097c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097c4:	080097dd 	.word	0x080097dd
 80097c8:	080097e5 	.word	0x080097e5
 80097cc:	080097ed 	.word	0x080097ed
 80097d0:	080097f5 	.word	0x080097f5
 80097d4:	080097fd 	.word	0x080097fd
 80097d8:	08009805 	.word	0x08009805
 80097dc:	2300      	movs	r3, #0
 80097de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097e2:	e2ba      	b.n	8009d5a <UART_SetConfig+0x7ae>
 80097e4:	2304      	movs	r3, #4
 80097e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097ea:	e2b6      	b.n	8009d5a <UART_SetConfig+0x7ae>
 80097ec:	2308      	movs	r3, #8
 80097ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097f2:	e2b2      	b.n	8009d5a <UART_SetConfig+0x7ae>
 80097f4:	2310      	movs	r3, #16
 80097f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097fa:	e2ae      	b.n	8009d5a <UART_SetConfig+0x7ae>
 80097fc:	2320      	movs	r3, #32
 80097fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009802:	e2aa      	b.n	8009d5a <UART_SetConfig+0x7ae>
 8009804:	2340      	movs	r3, #64	@ 0x40
 8009806:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800980a:	e2a6      	b.n	8009d5a <UART_SetConfig+0x7ae>
 800980c:	2380      	movs	r3, #128	@ 0x80
 800980e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009812:	e2a2      	b.n	8009d5a <UART_SetConfig+0x7ae>
 8009814:	697b      	ldr	r3, [r7, #20]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	4a35      	ldr	r2, [pc, #212]	@ (80098f0 <UART_SetConfig+0x344>)
 800981a:	4293      	cmp	r3, r2
 800981c:	d130      	bne.n	8009880 <UART_SetConfig+0x2d4>
 800981e:	4b31      	ldr	r3, [pc, #196]	@ (80098e4 <UART_SetConfig+0x338>)
 8009820:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009822:	f003 0307 	and.w	r3, r3, #7
 8009826:	2b05      	cmp	r3, #5
 8009828:	d826      	bhi.n	8009878 <UART_SetConfig+0x2cc>
 800982a:	a201      	add	r2, pc, #4	@ (adr r2, 8009830 <UART_SetConfig+0x284>)
 800982c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009830:	08009849 	.word	0x08009849
 8009834:	08009851 	.word	0x08009851
 8009838:	08009859 	.word	0x08009859
 800983c:	08009861 	.word	0x08009861
 8009840:	08009869 	.word	0x08009869
 8009844:	08009871 	.word	0x08009871
 8009848:	2300      	movs	r3, #0
 800984a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800984e:	e284      	b.n	8009d5a <UART_SetConfig+0x7ae>
 8009850:	2304      	movs	r3, #4
 8009852:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009856:	e280      	b.n	8009d5a <UART_SetConfig+0x7ae>
 8009858:	2308      	movs	r3, #8
 800985a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800985e:	e27c      	b.n	8009d5a <UART_SetConfig+0x7ae>
 8009860:	2310      	movs	r3, #16
 8009862:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009866:	e278      	b.n	8009d5a <UART_SetConfig+0x7ae>
 8009868:	2320      	movs	r3, #32
 800986a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800986e:	e274      	b.n	8009d5a <UART_SetConfig+0x7ae>
 8009870:	2340      	movs	r3, #64	@ 0x40
 8009872:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009876:	e270      	b.n	8009d5a <UART_SetConfig+0x7ae>
 8009878:	2380      	movs	r3, #128	@ 0x80
 800987a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800987e:	e26c      	b.n	8009d5a <UART_SetConfig+0x7ae>
 8009880:	697b      	ldr	r3, [r7, #20]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	4a1b      	ldr	r2, [pc, #108]	@ (80098f4 <UART_SetConfig+0x348>)
 8009886:	4293      	cmp	r3, r2
 8009888:	d142      	bne.n	8009910 <UART_SetConfig+0x364>
 800988a:	4b16      	ldr	r3, [pc, #88]	@ (80098e4 <UART_SetConfig+0x338>)
 800988c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800988e:	f003 0307 	and.w	r3, r3, #7
 8009892:	2b05      	cmp	r3, #5
 8009894:	d838      	bhi.n	8009908 <UART_SetConfig+0x35c>
 8009896:	a201      	add	r2, pc, #4	@ (adr r2, 800989c <UART_SetConfig+0x2f0>)
 8009898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800989c:	080098b5 	.word	0x080098b5
 80098a0:	080098bd 	.word	0x080098bd
 80098a4:	080098c5 	.word	0x080098c5
 80098a8:	080098cd 	.word	0x080098cd
 80098ac:	080098f9 	.word	0x080098f9
 80098b0:	08009901 	.word	0x08009901
 80098b4:	2300      	movs	r3, #0
 80098b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098ba:	e24e      	b.n	8009d5a <UART_SetConfig+0x7ae>
 80098bc:	2304      	movs	r3, #4
 80098be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098c2:	e24a      	b.n	8009d5a <UART_SetConfig+0x7ae>
 80098c4:	2308      	movs	r3, #8
 80098c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098ca:	e246      	b.n	8009d5a <UART_SetConfig+0x7ae>
 80098cc:	2310      	movs	r3, #16
 80098ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098d2:	e242      	b.n	8009d5a <UART_SetConfig+0x7ae>
 80098d4:	cfff69f3 	.word	0xcfff69f3
 80098d8:	58000c00 	.word	0x58000c00
 80098dc:	11fff4ff 	.word	0x11fff4ff
 80098e0:	40011000 	.word	0x40011000
 80098e4:	58024400 	.word	0x58024400
 80098e8:	40004400 	.word	0x40004400
 80098ec:	40004800 	.word	0x40004800
 80098f0:	40004c00 	.word	0x40004c00
 80098f4:	40005000 	.word	0x40005000
 80098f8:	2320      	movs	r3, #32
 80098fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098fe:	e22c      	b.n	8009d5a <UART_SetConfig+0x7ae>
 8009900:	2340      	movs	r3, #64	@ 0x40
 8009902:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009906:	e228      	b.n	8009d5a <UART_SetConfig+0x7ae>
 8009908:	2380      	movs	r3, #128	@ 0x80
 800990a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800990e:	e224      	b.n	8009d5a <UART_SetConfig+0x7ae>
 8009910:	697b      	ldr	r3, [r7, #20]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	4ab1      	ldr	r2, [pc, #708]	@ (8009bdc <UART_SetConfig+0x630>)
 8009916:	4293      	cmp	r3, r2
 8009918:	d176      	bne.n	8009a08 <UART_SetConfig+0x45c>
 800991a:	4bb1      	ldr	r3, [pc, #708]	@ (8009be0 <UART_SetConfig+0x634>)
 800991c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800991e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009922:	2b28      	cmp	r3, #40	@ 0x28
 8009924:	d86c      	bhi.n	8009a00 <UART_SetConfig+0x454>
 8009926:	a201      	add	r2, pc, #4	@ (adr r2, 800992c <UART_SetConfig+0x380>)
 8009928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800992c:	080099d1 	.word	0x080099d1
 8009930:	08009a01 	.word	0x08009a01
 8009934:	08009a01 	.word	0x08009a01
 8009938:	08009a01 	.word	0x08009a01
 800993c:	08009a01 	.word	0x08009a01
 8009940:	08009a01 	.word	0x08009a01
 8009944:	08009a01 	.word	0x08009a01
 8009948:	08009a01 	.word	0x08009a01
 800994c:	080099d9 	.word	0x080099d9
 8009950:	08009a01 	.word	0x08009a01
 8009954:	08009a01 	.word	0x08009a01
 8009958:	08009a01 	.word	0x08009a01
 800995c:	08009a01 	.word	0x08009a01
 8009960:	08009a01 	.word	0x08009a01
 8009964:	08009a01 	.word	0x08009a01
 8009968:	08009a01 	.word	0x08009a01
 800996c:	080099e1 	.word	0x080099e1
 8009970:	08009a01 	.word	0x08009a01
 8009974:	08009a01 	.word	0x08009a01
 8009978:	08009a01 	.word	0x08009a01
 800997c:	08009a01 	.word	0x08009a01
 8009980:	08009a01 	.word	0x08009a01
 8009984:	08009a01 	.word	0x08009a01
 8009988:	08009a01 	.word	0x08009a01
 800998c:	080099e9 	.word	0x080099e9
 8009990:	08009a01 	.word	0x08009a01
 8009994:	08009a01 	.word	0x08009a01
 8009998:	08009a01 	.word	0x08009a01
 800999c:	08009a01 	.word	0x08009a01
 80099a0:	08009a01 	.word	0x08009a01
 80099a4:	08009a01 	.word	0x08009a01
 80099a8:	08009a01 	.word	0x08009a01
 80099ac:	080099f1 	.word	0x080099f1
 80099b0:	08009a01 	.word	0x08009a01
 80099b4:	08009a01 	.word	0x08009a01
 80099b8:	08009a01 	.word	0x08009a01
 80099bc:	08009a01 	.word	0x08009a01
 80099c0:	08009a01 	.word	0x08009a01
 80099c4:	08009a01 	.word	0x08009a01
 80099c8:	08009a01 	.word	0x08009a01
 80099cc:	080099f9 	.word	0x080099f9
 80099d0:	2301      	movs	r3, #1
 80099d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099d6:	e1c0      	b.n	8009d5a <UART_SetConfig+0x7ae>
 80099d8:	2304      	movs	r3, #4
 80099da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099de:	e1bc      	b.n	8009d5a <UART_SetConfig+0x7ae>
 80099e0:	2308      	movs	r3, #8
 80099e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099e6:	e1b8      	b.n	8009d5a <UART_SetConfig+0x7ae>
 80099e8:	2310      	movs	r3, #16
 80099ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099ee:	e1b4      	b.n	8009d5a <UART_SetConfig+0x7ae>
 80099f0:	2320      	movs	r3, #32
 80099f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099f6:	e1b0      	b.n	8009d5a <UART_SetConfig+0x7ae>
 80099f8:	2340      	movs	r3, #64	@ 0x40
 80099fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099fe:	e1ac      	b.n	8009d5a <UART_SetConfig+0x7ae>
 8009a00:	2380      	movs	r3, #128	@ 0x80
 8009a02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a06:	e1a8      	b.n	8009d5a <UART_SetConfig+0x7ae>
 8009a08:	697b      	ldr	r3, [r7, #20]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	4a75      	ldr	r2, [pc, #468]	@ (8009be4 <UART_SetConfig+0x638>)
 8009a0e:	4293      	cmp	r3, r2
 8009a10:	d130      	bne.n	8009a74 <UART_SetConfig+0x4c8>
 8009a12:	4b73      	ldr	r3, [pc, #460]	@ (8009be0 <UART_SetConfig+0x634>)
 8009a14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a16:	f003 0307 	and.w	r3, r3, #7
 8009a1a:	2b05      	cmp	r3, #5
 8009a1c:	d826      	bhi.n	8009a6c <UART_SetConfig+0x4c0>
 8009a1e:	a201      	add	r2, pc, #4	@ (adr r2, 8009a24 <UART_SetConfig+0x478>)
 8009a20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a24:	08009a3d 	.word	0x08009a3d
 8009a28:	08009a45 	.word	0x08009a45
 8009a2c:	08009a4d 	.word	0x08009a4d
 8009a30:	08009a55 	.word	0x08009a55
 8009a34:	08009a5d 	.word	0x08009a5d
 8009a38:	08009a65 	.word	0x08009a65
 8009a3c:	2300      	movs	r3, #0
 8009a3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a42:	e18a      	b.n	8009d5a <UART_SetConfig+0x7ae>
 8009a44:	2304      	movs	r3, #4
 8009a46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a4a:	e186      	b.n	8009d5a <UART_SetConfig+0x7ae>
 8009a4c:	2308      	movs	r3, #8
 8009a4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a52:	e182      	b.n	8009d5a <UART_SetConfig+0x7ae>
 8009a54:	2310      	movs	r3, #16
 8009a56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a5a:	e17e      	b.n	8009d5a <UART_SetConfig+0x7ae>
 8009a5c:	2320      	movs	r3, #32
 8009a5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a62:	e17a      	b.n	8009d5a <UART_SetConfig+0x7ae>
 8009a64:	2340      	movs	r3, #64	@ 0x40
 8009a66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a6a:	e176      	b.n	8009d5a <UART_SetConfig+0x7ae>
 8009a6c:	2380      	movs	r3, #128	@ 0x80
 8009a6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a72:	e172      	b.n	8009d5a <UART_SetConfig+0x7ae>
 8009a74:	697b      	ldr	r3, [r7, #20]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	4a5b      	ldr	r2, [pc, #364]	@ (8009be8 <UART_SetConfig+0x63c>)
 8009a7a:	4293      	cmp	r3, r2
 8009a7c:	d130      	bne.n	8009ae0 <UART_SetConfig+0x534>
 8009a7e:	4b58      	ldr	r3, [pc, #352]	@ (8009be0 <UART_SetConfig+0x634>)
 8009a80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a82:	f003 0307 	and.w	r3, r3, #7
 8009a86:	2b05      	cmp	r3, #5
 8009a88:	d826      	bhi.n	8009ad8 <UART_SetConfig+0x52c>
 8009a8a:	a201      	add	r2, pc, #4	@ (adr r2, 8009a90 <UART_SetConfig+0x4e4>)
 8009a8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a90:	08009aa9 	.word	0x08009aa9
 8009a94:	08009ab1 	.word	0x08009ab1
 8009a98:	08009ab9 	.word	0x08009ab9
 8009a9c:	08009ac1 	.word	0x08009ac1
 8009aa0:	08009ac9 	.word	0x08009ac9
 8009aa4:	08009ad1 	.word	0x08009ad1
 8009aa8:	2300      	movs	r3, #0
 8009aaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009aae:	e154      	b.n	8009d5a <UART_SetConfig+0x7ae>
 8009ab0:	2304      	movs	r3, #4
 8009ab2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ab6:	e150      	b.n	8009d5a <UART_SetConfig+0x7ae>
 8009ab8:	2308      	movs	r3, #8
 8009aba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009abe:	e14c      	b.n	8009d5a <UART_SetConfig+0x7ae>
 8009ac0:	2310      	movs	r3, #16
 8009ac2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ac6:	e148      	b.n	8009d5a <UART_SetConfig+0x7ae>
 8009ac8:	2320      	movs	r3, #32
 8009aca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ace:	e144      	b.n	8009d5a <UART_SetConfig+0x7ae>
 8009ad0:	2340      	movs	r3, #64	@ 0x40
 8009ad2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ad6:	e140      	b.n	8009d5a <UART_SetConfig+0x7ae>
 8009ad8:	2380      	movs	r3, #128	@ 0x80
 8009ada:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ade:	e13c      	b.n	8009d5a <UART_SetConfig+0x7ae>
 8009ae0:	697b      	ldr	r3, [r7, #20]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	4a41      	ldr	r2, [pc, #260]	@ (8009bec <UART_SetConfig+0x640>)
 8009ae6:	4293      	cmp	r3, r2
 8009ae8:	f040 8082 	bne.w	8009bf0 <UART_SetConfig+0x644>
 8009aec:	4b3c      	ldr	r3, [pc, #240]	@ (8009be0 <UART_SetConfig+0x634>)
 8009aee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009af0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009af4:	2b28      	cmp	r3, #40	@ 0x28
 8009af6:	d86d      	bhi.n	8009bd4 <UART_SetConfig+0x628>
 8009af8:	a201      	add	r2, pc, #4	@ (adr r2, 8009b00 <UART_SetConfig+0x554>)
 8009afa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009afe:	bf00      	nop
 8009b00:	08009ba5 	.word	0x08009ba5
 8009b04:	08009bd5 	.word	0x08009bd5
 8009b08:	08009bd5 	.word	0x08009bd5
 8009b0c:	08009bd5 	.word	0x08009bd5
 8009b10:	08009bd5 	.word	0x08009bd5
 8009b14:	08009bd5 	.word	0x08009bd5
 8009b18:	08009bd5 	.word	0x08009bd5
 8009b1c:	08009bd5 	.word	0x08009bd5
 8009b20:	08009bad 	.word	0x08009bad
 8009b24:	08009bd5 	.word	0x08009bd5
 8009b28:	08009bd5 	.word	0x08009bd5
 8009b2c:	08009bd5 	.word	0x08009bd5
 8009b30:	08009bd5 	.word	0x08009bd5
 8009b34:	08009bd5 	.word	0x08009bd5
 8009b38:	08009bd5 	.word	0x08009bd5
 8009b3c:	08009bd5 	.word	0x08009bd5
 8009b40:	08009bb5 	.word	0x08009bb5
 8009b44:	08009bd5 	.word	0x08009bd5
 8009b48:	08009bd5 	.word	0x08009bd5
 8009b4c:	08009bd5 	.word	0x08009bd5
 8009b50:	08009bd5 	.word	0x08009bd5
 8009b54:	08009bd5 	.word	0x08009bd5
 8009b58:	08009bd5 	.word	0x08009bd5
 8009b5c:	08009bd5 	.word	0x08009bd5
 8009b60:	08009bbd 	.word	0x08009bbd
 8009b64:	08009bd5 	.word	0x08009bd5
 8009b68:	08009bd5 	.word	0x08009bd5
 8009b6c:	08009bd5 	.word	0x08009bd5
 8009b70:	08009bd5 	.word	0x08009bd5
 8009b74:	08009bd5 	.word	0x08009bd5
 8009b78:	08009bd5 	.word	0x08009bd5
 8009b7c:	08009bd5 	.word	0x08009bd5
 8009b80:	08009bc5 	.word	0x08009bc5
 8009b84:	08009bd5 	.word	0x08009bd5
 8009b88:	08009bd5 	.word	0x08009bd5
 8009b8c:	08009bd5 	.word	0x08009bd5
 8009b90:	08009bd5 	.word	0x08009bd5
 8009b94:	08009bd5 	.word	0x08009bd5
 8009b98:	08009bd5 	.word	0x08009bd5
 8009b9c:	08009bd5 	.word	0x08009bd5
 8009ba0:	08009bcd 	.word	0x08009bcd
 8009ba4:	2301      	movs	r3, #1
 8009ba6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009baa:	e0d6      	b.n	8009d5a <UART_SetConfig+0x7ae>
 8009bac:	2304      	movs	r3, #4
 8009bae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009bb2:	e0d2      	b.n	8009d5a <UART_SetConfig+0x7ae>
 8009bb4:	2308      	movs	r3, #8
 8009bb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009bba:	e0ce      	b.n	8009d5a <UART_SetConfig+0x7ae>
 8009bbc:	2310      	movs	r3, #16
 8009bbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009bc2:	e0ca      	b.n	8009d5a <UART_SetConfig+0x7ae>
 8009bc4:	2320      	movs	r3, #32
 8009bc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009bca:	e0c6      	b.n	8009d5a <UART_SetConfig+0x7ae>
 8009bcc:	2340      	movs	r3, #64	@ 0x40
 8009bce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009bd2:	e0c2      	b.n	8009d5a <UART_SetConfig+0x7ae>
 8009bd4:	2380      	movs	r3, #128	@ 0x80
 8009bd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009bda:	e0be      	b.n	8009d5a <UART_SetConfig+0x7ae>
 8009bdc:	40011400 	.word	0x40011400
 8009be0:	58024400 	.word	0x58024400
 8009be4:	40007800 	.word	0x40007800
 8009be8:	40007c00 	.word	0x40007c00
 8009bec:	40011800 	.word	0x40011800
 8009bf0:	697b      	ldr	r3, [r7, #20]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	4aad      	ldr	r2, [pc, #692]	@ (8009eac <UART_SetConfig+0x900>)
 8009bf6:	4293      	cmp	r3, r2
 8009bf8:	d176      	bne.n	8009ce8 <UART_SetConfig+0x73c>
 8009bfa:	4bad      	ldr	r3, [pc, #692]	@ (8009eb0 <UART_SetConfig+0x904>)
 8009bfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009bfe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009c02:	2b28      	cmp	r3, #40	@ 0x28
 8009c04:	d86c      	bhi.n	8009ce0 <UART_SetConfig+0x734>
 8009c06:	a201      	add	r2, pc, #4	@ (adr r2, 8009c0c <UART_SetConfig+0x660>)
 8009c08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c0c:	08009cb1 	.word	0x08009cb1
 8009c10:	08009ce1 	.word	0x08009ce1
 8009c14:	08009ce1 	.word	0x08009ce1
 8009c18:	08009ce1 	.word	0x08009ce1
 8009c1c:	08009ce1 	.word	0x08009ce1
 8009c20:	08009ce1 	.word	0x08009ce1
 8009c24:	08009ce1 	.word	0x08009ce1
 8009c28:	08009ce1 	.word	0x08009ce1
 8009c2c:	08009cb9 	.word	0x08009cb9
 8009c30:	08009ce1 	.word	0x08009ce1
 8009c34:	08009ce1 	.word	0x08009ce1
 8009c38:	08009ce1 	.word	0x08009ce1
 8009c3c:	08009ce1 	.word	0x08009ce1
 8009c40:	08009ce1 	.word	0x08009ce1
 8009c44:	08009ce1 	.word	0x08009ce1
 8009c48:	08009ce1 	.word	0x08009ce1
 8009c4c:	08009cc1 	.word	0x08009cc1
 8009c50:	08009ce1 	.word	0x08009ce1
 8009c54:	08009ce1 	.word	0x08009ce1
 8009c58:	08009ce1 	.word	0x08009ce1
 8009c5c:	08009ce1 	.word	0x08009ce1
 8009c60:	08009ce1 	.word	0x08009ce1
 8009c64:	08009ce1 	.word	0x08009ce1
 8009c68:	08009ce1 	.word	0x08009ce1
 8009c6c:	08009cc9 	.word	0x08009cc9
 8009c70:	08009ce1 	.word	0x08009ce1
 8009c74:	08009ce1 	.word	0x08009ce1
 8009c78:	08009ce1 	.word	0x08009ce1
 8009c7c:	08009ce1 	.word	0x08009ce1
 8009c80:	08009ce1 	.word	0x08009ce1
 8009c84:	08009ce1 	.word	0x08009ce1
 8009c88:	08009ce1 	.word	0x08009ce1
 8009c8c:	08009cd1 	.word	0x08009cd1
 8009c90:	08009ce1 	.word	0x08009ce1
 8009c94:	08009ce1 	.word	0x08009ce1
 8009c98:	08009ce1 	.word	0x08009ce1
 8009c9c:	08009ce1 	.word	0x08009ce1
 8009ca0:	08009ce1 	.word	0x08009ce1
 8009ca4:	08009ce1 	.word	0x08009ce1
 8009ca8:	08009ce1 	.word	0x08009ce1
 8009cac:	08009cd9 	.word	0x08009cd9
 8009cb0:	2301      	movs	r3, #1
 8009cb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009cb6:	e050      	b.n	8009d5a <UART_SetConfig+0x7ae>
 8009cb8:	2304      	movs	r3, #4
 8009cba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009cbe:	e04c      	b.n	8009d5a <UART_SetConfig+0x7ae>
 8009cc0:	2308      	movs	r3, #8
 8009cc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009cc6:	e048      	b.n	8009d5a <UART_SetConfig+0x7ae>
 8009cc8:	2310      	movs	r3, #16
 8009cca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009cce:	e044      	b.n	8009d5a <UART_SetConfig+0x7ae>
 8009cd0:	2320      	movs	r3, #32
 8009cd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009cd6:	e040      	b.n	8009d5a <UART_SetConfig+0x7ae>
 8009cd8:	2340      	movs	r3, #64	@ 0x40
 8009cda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009cde:	e03c      	b.n	8009d5a <UART_SetConfig+0x7ae>
 8009ce0:	2380      	movs	r3, #128	@ 0x80
 8009ce2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ce6:	e038      	b.n	8009d5a <UART_SetConfig+0x7ae>
 8009ce8:	697b      	ldr	r3, [r7, #20]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	4a71      	ldr	r2, [pc, #452]	@ (8009eb4 <UART_SetConfig+0x908>)
 8009cee:	4293      	cmp	r3, r2
 8009cf0:	d130      	bne.n	8009d54 <UART_SetConfig+0x7a8>
 8009cf2:	4b6f      	ldr	r3, [pc, #444]	@ (8009eb0 <UART_SetConfig+0x904>)
 8009cf4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009cf6:	f003 0307 	and.w	r3, r3, #7
 8009cfa:	2b05      	cmp	r3, #5
 8009cfc:	d826      	bhi.n	8009d4c <UART_SetConfig+0x7a0>
 8009cfe:	a201      	add	r2, pc, #4	@ (adr r2, 8009d04 <UART_SetConfig+0x758>)
 8009d00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d04:	08009d1d 	.word	0x08009d1d
 8009d08:	08009d25 	.word	0x08009d25
 8009d0c:	08009d2d 	.word	0x08009d2d
 8009d10:	08009d35 	.word	0x08009d35
 8009d14:	08009d3d 	.word	0x08009d3d
 8009d18:	08009d45 	.word	0x08009d45
 8009d1c:	2302      	movs	r3, #2
 8009d1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d22:	e01a      	b.n	8009d5a <UART_SetConfig+0x7ae>
 8009d24:	2304      	movs	r3, #4
 8009d26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d2a:	e016      	b.n	8009d5a <UART_SetConfig+0x7ae>
 8009d2c:	2308      	movs	r3, #8
 8009d2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d32:	e012      	b.n	8009d5a <UART_SetConfig+0x7ae>
 8009d34:	2310      	movs	r3, #16
 8009d36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d3a:	e00e      	b.n	8009d5a <UART_SetConfig+0x7ae>
 8009d3c:	2320      	movs	r3, #32
 8009d3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d42:	e00a      	b.n	8009d5a <UART_SetConfig+0x7ae>
 8009d44:	2340      	movs	r3, #64	@ 0x40
 8009d46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d4a:	e006      	b.n	8009d5a <UART_SetConfig+0x7ae>
 8009d4c:	2380      	movs	r3, #128	@ 0x80
 8009d4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d52:	e002      	b.n	8009d5a <UART_SetConfig+0x7ae>
 8009d54:	2380      	movs	r3, #128	@ 0x80
 8009d56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009d5a:	697b      	ldr	r3, [r7, #20]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	4a55      	ldr	r2, [pc, #340]	@ (8009eb4 <UART_SetConfig+0x908>)
 8009d60:	4293      	cmp	r3, r2
 8009d62:	f040 80f8 	bne.w	8009f56 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009d66:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009d6a:	2b20      	cmp	r3, #32
 8009d6c:	dc46      	bgt.n	8009dfc <UART_SetConfig+0x850>
 8009d6e:	2b02      	cmp	r3, #2
 8009d70:	db75      	blt.n	8009e5e <UART_SetConfig+0x8b2>
 8009d72:	3b02      	subs	r3, #2
 8009d74:	2b1e      	cmp	r3, #30
 8009d76:	d872      	bhi.n	8009e5e <UART_SetConfig+0x8b2>
 8009d78:	a201      	add	r2, pc, #4	@ (adr r2, 8009d80 <UART_SetConfig+0x7d4>)
 8009d7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d7e:	bf00      	nop
 8009d80:	08009e03 	.word	0x08009e03
 8009d84:	08009e5f 	.word	0x08009e5f
 8009d88:	08009e0b 	.word	0x08009e0b
 8009d8c:	08009e5f 	.word	0x08009e5f
 8009d90:	08009e5f 	.word	0x08009e5f
 8009d94:	08009e5f 	.word	0x08009e5f
 8009d98:	08009e1b 	.word	0x08009e1b
 8009d9c:	08009e5f 	.word	0x08009e5f
 8009da0:	08009e5f 	.word	0x08009e5f
 8009da4:	08009e5f 	.word	0x08009e5f
 8009da8:	08009e5f 	.word	0x08009e5f
 8009dac:	08009e5f 	.word	0x08009e5f
 8009db0:	08009e5f 	.word	0x08009e5f
 8009db4:	08009e5f 	.word	0x08009e5f
 8009db8:	08009e2b 	.word	0x08009e2b
 8009dbc:	08009e5f 	.word	0x08009e5f
 8009dc0:	08009e5f 	.word	0x08009e5f
 8009dc4:	08009e5f 	.word	0x08009e5f
 8009dc8:	08009e5f 	.word	0x08009e5f
 8009dcc:	08009e5f 	.word	0x08009e5f
 8009dd0:	08009e5f 	.word	0x08009e5f
 8009dd4:	08009e5f 	.word	0x08009e5f
 8009dd8:	08009e5f 	.word	0x08009e5f
 8009ddc:	08009e5f 	.word	0x08009e5f
 8009de0:	08009e5f 	.word	0x08009e5f
 8009de4:	08009e5f 	.word	0x08009e5f
 8009de8:	08009e5f 	.word	0x08009e5f
 8009dec:	08009e5f 	.word	0x08009e5f
 8009df0:	08009e5f 	.word	0x08009e5f
 8009df4:	08009e5f 	.word	0x08009e5f
 8009df8:	08009e51 	.word	0x08009e51
 8009dfc:	2b40      	cmp	r3, #64	@ 0x40
 8009dfe:	d02a      	beq.n	8009e56 <UART_SetConfig+0x8aa>
 8009e00:	e02d      	b.n	8009e5e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009e02:	f7fe fc05 	bl	8008610 <HAL_RCCEx_GetD3PCLK1Freq>
 8009e06:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009e08:	e02f      	b.n	8009e6a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009e0a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009e0e:	4618      	mov	r0, r3
 8009e10:	f7fe fc14 	bl	800863c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009e14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e18:	e027      	b.n	8009e6a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009e1a:	f107 0318 	add.w	r3, r7, #24
 8009e1e:	4618      	mov	r0, r3
 8009e20:	f7fe fd60 	bl	80088e4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009e24:	69fb      	ldr	r3, [r7, #28]
 8009e26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e28:	e01f      	b.n	8009e6a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009e2a:	4b21      	ldr	r3, [pc, #132]	@ (8009eb0 <UART_SetConfig+0x904>)
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	f003 0320 	and.w	r3, r3, #32
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d009      	beq.n	8009e4a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009e36:	4b1e      	ldr	r3, [pc, #120]	@ (8009eb0 <UART_SetConfig+0x904>)
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	08db      	lsrs	r3, r3, #3
 8009e3c:	f003 0303 	and.w	r3, r3, #3
 8009e40:	4a1d      	ldr	r2, [pc, #116]	@ (8009eb8 <UART_SetConfig+0x90c>)
 8009e42:	fa22 f303 	lsr.w	r3, r2, r3
 8009e46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009e48:	e00f      	b.n	8009e6a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8009e4a:	4b1b      	ldr	r3, [pc, #108]	@ (8009eb8 <UART_SetConfig+0x90c>)
 8009e4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e4e:	e00c      	b.n	8009e6a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009e50:	4b1a      	ldr	r3, [pc, #104]	@ (8009ebc <UART_SetConfig+0x910>)
 8009e52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e54:	e009      	b.n	8009e6a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009e56:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009e5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e5c:	e005      	b.n	8009e6a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8009e5e:	2300      	movs	r3, #0
 8009e60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009e62:	2301      	movs	r3, #1
 8009e64:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009e68:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009e6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	f000 81ee 	beq.w	800a24e <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009e72:	697b      	ldr	r3, [r7, #20]
 8009e74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e76:	4a12      	ldr	r2, [pc, #72]	@ (8009ec0 <UART_SetConfig+0x914>)
 8009e78:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009e7c:	461a      	mov	r2, r3
 8009e7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e80:	fbb3 f3f2 	udiv	r3, r3, r2
 8009e84:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009e86:	697b      	ldr	r3, [r7, #20]
 8009e88:	685a      	ldr	r2, [r3, #4]
 8009e8a:	4613      	mov	r3, r2
 8009e8c:	005b      	lsls	r3, r3, #1
 8009e8e:	4413      	add	r3, r2
 8009e90:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009e92:	429a      	cmp	r2, r3
 8009e94:	d305      	bcc.n	8009ea2 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009e96:	697b      	ldr	r3, [r7, #20]
 8009e98:	685b      	ldr	r3, [r3, #4]
 8009e9a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009e9c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009e9e:	429a      	cmp	r2, r3
 8009ea0:	d910      	bls.n	8009ec4 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8009ea2:	2301      	movs	r3, #1
 8009ea4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009ea8:	e1d1      	b.n	800a24e <UART_SetConfig+0xca2>
 8009eaa:	bf00      	nop
 8009eac:	40011c00 	.word	0x40011c00
 8009eb0:	58024400 	.word	0x58024400
 8009eb4:	58000c00 	.word	0x58000c00
 8009eb8:	03d09000 	.word	0x03d09000
 8009ebc:	003d0900 	.word	0x003d0900
 8009ec0:	0800be2c 	.word	0x0800be2c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009ec4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ec6:	2200      	movs	r2, #0
 8009ec8:	60bb      	str	r3, [r7, #8]
 8009eca:	60fa      	str	r2, [r7, #12]
 8009ecc:	697b      	ldr	r3, [r7, #20]
 8009ece:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ed0:	4ac0      	ldr	r2, [pc, #768]	@ (800a1d4 <UART_SetConfig+0xc28>)
 8009ed2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009ed6:	b29b      	uxth	r3, r3
 8009ed8:	2200      	movs	r2, #0
 8009eda:	603b      	str	r3, [r7, #0]
 8009edc:	607a      	str	r2, [r7, #4]
 8009ede:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009ee2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009ee6:	f7f6 fa53 	bl	8000390 <__aeabi_uldivmod>
 8009eea:	4602      	mov	r2, r0
 8009eec:	460b      	mov	r3, r1
 8009eee:	4610      	mov	r0, r2
 8009ef0:	4619      	mov	r1, r3
 8009ef2:	f04f 0200 	mov.w	r2, #0
 8009ef6:	f04f 0300 	mov.w	r3, #0
 8009efa:	020b      	lsls	r3, r1, #8
 8009efc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009f00:	0202      	lsls	r2, r0, #8
 8009f02:	6979      	ldr	r1, [r7, #20]
 8009f04:	6849      	ldr	r1, [r1, #4]
 8009f06:	0849      	lsrs	r1, r1, #1
 8009f08:	2000      	movs	r0, #0
 8009f0a:	460c      	mov	r4, r1
 8009f0c:	4605      	mov	r5, r0
 8009f0e:	eb12 0804 	adds.w	r8, r2, r4
 8009f12:	eb43 0905 	adc.w	r9, r3, r5
 8009f16:	697b      	ldr	r3, [r7, #20]
 8009f18:	685b      	ldr	r3, [r3, #4]
 8009f1a:	2200      	movs	r2, #0
 8009f1c:	469a      	mov	sl, r3
 8009f1e:	4693      	mov	fp, r2
 8009f20:	4652      	mov	r2, sl
 8009f22:	465b      	mov	r3, fp
 8009f24:	4640      	mov	r0, r8
 8009f26:	4649      	mov	r1, r9
 8009f28:	f7f6 fa32 	bl	8000390 <__aeabi_uldivmod>
 8009f2c:	4602      	mov	r2, r0
 8009f2e:	460b      	mov	r3, r1
 8009f30:	4613      	mov	r3, r2
 8009f32:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009f34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f36:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009f3a:	d308      	bcc.n	8009f4e <UART_SetConfig+0x9a2>
 8009f3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f3e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009f42:	d204      	bcs.n	8009f4e <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8009f44:	697b      	ldr	r3, [r7, #20]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009f4a:	60da      	str	r2, [r3, #12]
 8009f4c:	e17f      	b.n	800a24e <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8009f4e:	2301      	movs	r3, #1
 8009f50:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009f54:	e17b      	b.n	800a24e <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009f56:	697b      	ldr	r3, [r7, #20]
 8009f58:	69db      	ldr	r3, [r3, #28]
 8009f5a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009f5e:	f040 80bd 	bne.w	800a0dc <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8009f62:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009f66:	2b20      	cmp	r3, #32
 8009f68:	dc48      	bgt.n	8009ffc <UART_SetConfig+0xa50>
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	db7b      	blt.n	800a066 <UART_SetConfig+0xaba>
 8009f6e:	2b20      	cmp	r3, #32
 8009f70:	d879      	bhi.n	800a066 <UART_SetConfig+0xaba>
 8009f72:	a201      	add	r2, pc, #4	@ (adr r2, 8009f78 <UART_SetConfig+0x9cc>)
 8009f74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f78:	0800a003 	.word	0x0800a003
 8009f7c:	0800a00b 	.word	0x0800a00b
 8009f80:	0800a067 	.word	0x0800a067
 8009f84:	0800a067 	.word	0x0800a067
 8009f88:	0800a013 	.word	0x0800a013
 8009f8c:	0800a067 	.word	0x0800a067
 8009f90:	0800a067 	.word	0x0800a067
 8009f94:	0800a067 	.word	0x0800a067
 8009f98:	0800a023 	.word	0x0800a023
 8009f9c:	0800a067 	.word	0x0800a067
 8009fa0:	0800a067 	.word	0x0800a067
 8009fa4:	0800a067 	.word	0x0800a067
 8009fa8:	0800a067 	.word	0x0800a067
 8009fac:	0800a067 	.word	0x0800a067
 8009fb0:	0800a067 	.word	0x0800a067
 8009fb4:	0800a067 	.word	0x0800a067
 8009fb8:	0800a033 	.word	0x0800a033
 8009fbc:	0800a067 	.word	0x0800a067
 8009fc0:	0800a067 	.word	0x0800a067
 8009fc4:	0800a067 	.word	0x0800a067
 8009fc8:	0800a067 	.word	0x0800a067
 8009fcc:	0800a067 	.word	0x0800a067
 8009fd0:	0800a067 	.word	0x0800a067
 8009fd4:	0800a067 	.word	0x0800a067
 8009fd8:	0800a067 	.word	0x0800a067
 8009fdc:	0800a067 	.word	0x0800a067
 8009fe0:	0800a067 	.word	0x0800a067
 8009fe4:	0800a067 	.word	0x0800a067
 8009fe8:	0800a067 	.word	0x0800a067
 8009fec:	0800a067 	.word	0x0800a067
 8009ff0:	0800a067 	.word	0x0800a067
 8009ff4:	0800a067 	.word	0x0800a067
 8009ff8:	0800a059 	.word	0x0800a059
 8009ffc:	2b40      	cmp	r3, #64	@ 0x40
 8009ffe:	d02e      	beq.n	800a05e <UART_SetConfig+0xab2>
 800a000:	e031      	b.n	800a066 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a002:	f7fd f8d9 	bl	80071b8 <HAL_RCC_GetPCLK1Freq>
 800a006:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a008:	e033      	b.n	800a072 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a00a:	f7fd f8eb 	bl	80071e4 <HAL_RCC_GetPCLK2Freq>
 800a00e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a010:	e02f      	b.n	800a072 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a012:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a016:	4618      	mov	r0, r3
 800a018:	f7fe fb10 	bl	800863c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a01c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a01e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a020:	e027      	b.n	800a072 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a022:	f107 0318 	add.w	r3, r7, #24
 800a026:	4618      	mov	r0, r3
 800a028:	f7fe fc5c 	bl	80088e4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a02c:	69fb      	ldr	r3, [r7, #28]
 800a02e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a030:	e01f      	b.n	800a072 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a032:	4b69      	ldr	r3, [pc, #420]	@ (800a1d8 <UART_SetConfig+0xc2c>)
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	f003 0320 	and.w	r3, r3, #32
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d009      	beq.n	800a052 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a03e:	4b66      	ldr	r3, [pc, #408]	@ (800a1d8 <UART_SetConfig+0xc2c>)
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	08db      	lsrs	r3, r3, #3
 800a044:	f003 0303 	and.w	r3, r3, #3
 800a048:	4a64      	ldr	r2, [pc, #400]	@ (800a1dc <UART_SetConfig+0xc30>)
 800a04a:	fa22 f303 	lsr.w	r3, r2, r3
 800a04e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a050:	e00f      	b.n	800a072 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800a052:	4b62      	ldr	r3, [pc, #392]	@ (800a1dc <UART_SetConfig+0xc30>)
 800a054:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a056:	e00c      	b.n	800a072 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a058:	4b61      	ldr	r3, [pc, #388]	@ (800a1e0 <UART_SetConfig+0xc34>)
 800a05a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a05c:	e009      	b.n	800a072 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a05e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a062:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a064:	e005      	b.n	800a072 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800a066:	2300      	movs	r3, #0
 800a068:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a06a:	2301      	movs	r3, #1
 800a06c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a070:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a072:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a074:	2b00      	cmp	r3, #0
 800a076:	f000 80ea 	beq.w	800a24e <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a07a:	697b      	ldr	r3, [r7, #20]
 800a07c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a07e:	4a55      	ldr	r2, [pc, #340]	@ (800a1d4 <UART_SetConfig+0xc28>)
 800a080:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a084:	461a      	mov	r2, r3
 800a086:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a088:	fbb3 f3f2 	udiv	r3, r3, r2
 800a08c:	005a      	lsls	r2, r3, #1
 800a08e:	697b      	ldr	r3, [r7, #20]
 800a090:	685b      	ldr	r3, [r3, #4]
 800a092:	085b      	lsrs	r3, r3, #1
 800a094:	441a      	add	r2, r3
 800a096:	697b      	ldr	r3, [r7, #20]
 800a098:	685b      	ldr	r3, [r3, #4]
 800a09a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a09e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a0a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0a2:	2b0f      	cmp	r3, #15
 800a0a4:	d916      	bls.n	800a0d4 <UART_SetConfig+0xb28>
 800a0a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a0ac:	d212      	bcs.n	800a0d4 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a0ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0b0:	b29b      	uxth	r3, r3
 800a0b2:	f023 030f 	bic.w	r3, r3, #15
 800a0b6:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a0b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0ba:	085b      	lsrs	r3, r3, #1
 800a0bc:	b29b      	uxth	r3, r3
 800a0be:	f003 0307 	and.w	r3, r3, #7
 800a0c2:	b29a      	uxth	r2, r3
 800a0c4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a0c6:	4313      	orrs	r3, r2
 800a0c8:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800a0ca:	697b      	ldr	r3, [r7, #20]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800a0d0:	60da      	str	r2, [r3, #12]
 800a0d2:	e0bc      	b.n	800a24e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800a0d4:	2301      	movs	r3, #1
 800a0d6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a0da:	e0b8      	b.n	800a24e <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a0dc:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a0e0:	2b20      	cmp	r3, #32
 800a0e2:	dc4b      	bgt.n	800a17c <UART_SetConfig+0xbd0>
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	f2c0 8087 	blt.w	800a1f8 <UART_SetConfig+0xc4c>
 800a0ea:	2b20      	cmp	r3, #32
 800a0ec:	f200 8084 	bhi.w	800a1f8 <UART_SetConfig+0xc4c>
 800a0f0:	a201      	add	r2, pc, #4	@ (adr r2, 800a0f8 <UART_SetConfig+0xb4c>)
 800a0f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0f6:	bf00      	nop
 800a0f8:	0800a183 	.word	0x0800a183
 800a0fc:	0800a18b 	.word	0x0800a18b
 800a100:	0800a1f9 	.word	0x0800a1f9
 800a104:	0800a1f9 	.word	0x0800a1f9
 800a108:	0800a193 	.word	0x0800a193
 800a10c:	0800a1f9 	.word	0x0800a1f9
 800a110:	0800a1f9 	.word	0x0800a1f9
 800a114:	0800a1f9 	.word	0x0800a1f9
 800a118:	0800a1a3 	.word	0x0800a1a3
 800a11c:	0800a1f9 	.word	0x0800a1f9
 800a120:	0800a1f9 	.word	0x0800a1f9
 800a124:	0800a1f9 	.word	0x0800a1f9
 800a128:	0800a1f9 	.word	0x0800a1f9
 800a12c:	0800a1f9 	.word	0x0800a1f9
 800a130:	0800a1f9 	.word	0x0800a1f9
 800a134:	0800a1f9 	.word	0x0800a1f9
 800a138:	0800a1b3 	.word	0x0800a1b3
 800a13c:	0800a1f9 	.word	0x0800a1f9
 800a140:	0800a1f9 	.word	0x0800a1f9
 800a144:	0800a1f9 	.word	0x0800a1f9
 800a148:	0800a1f9 	.word	0x0800a1f9
 800a14c:	0800a1f9 	.word	0x0800a1f9
 800a150:	0800a1f9 	.word	0x0800a1f9
 800a154:	0800a1f9 	.word	0x0800a1f9
 800a158:	0800a1f9 	.word	0x0800a1f9
 800a15c:	0800a1f9 	.word	0x0800a1f9
 800a160:	0800a1f9 	.word	0x0800a1f9
 800a164:	0800a1f9 	.word	0x0800a1f9
 800a168:	0800a1f9 	.word	0x0800a1f9
 800a16c:	0800a1f9 	.word	0x0800a1f9
 800a170:	0800a1f9 	.word	0x0800a1f9
 800a174:	0800a1f9 	.word	0x0800a1f9
 800a178:	0800a1eb 	.word	0x0800a1eb
 800a17c:	2b40      	cmp	r3, #64	@ 0x40
 800a17e:	d037      	beq.n	800a1f0 <UART_SetConfig+0xc44>
 800a180:	e03a      	b.n	800a1f8 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a182:	f7fd f819 	bl	80071b8 <HAL_RCC_GetPCLK1Freq>
 800a186:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a188:	e03c      	b.n	800a204 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a18a:	f7fd f82b 	bl	80071e4 <HAL_RCC_GetPCLK2Freq>
 800a18e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a190:	e038      	b.n	800a204 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a192:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a196:	4618      	mov	r0, r3
 800a198:	f7fe fa50 	bl	800863c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a19c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a19e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a1a0:	e030      	b.n	800a204 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a1a2:	f107 0318 	add.w	r3, r7, #24
 800a1a6:	4618      	mov	r0, r3
 800a1a8:	f7fe fb9c 	bl	80088e4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a1ac:	69fb      	ldr	r3, [r7, #28]
 800a1ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a1b0:	e028      	b.n	800a204 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a1b2:	4b09      	ldr	r3, [pc, #36]	@ (800a1d8 <UART_SetConfig+0xc2c>)
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	f003 0320 	and.w	r3, r3, #32
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d012      	beq.n	800a1e4 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a1be:	4b06      	ldr	r3, [pc, #24]	@ (800a1d8 <UART_SetConfig+0xc2c>)
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	08db      	lsrs	r3, r3, #3
 800a1c4:	f003 0303 	and.w	r3, r3, #3
 800a1c8:	4a04      	ldr	r2, [pc, #16]	@ (800a1dc <UART_SetConfig+0xc30>)
 800a1ca:	fa22 f303 	lsr.w	r3, r2, r3
 800a1ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a1d0:	e018      	b.n	800a204 <UART_SetConfig+0xc58>
 800a1d2:	bf00      	nop
 800a1d4:	0800be2c 	.word	0x0800be2c
 800a1d8:	58024400 	.word	0x58024400
 800a1dc:	03d09000 	.word	0x03d09000
 800a1e0:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800a1e4:	4b24      	ldr	r3, [pc, #144]	@ (800a278 <UART_SetConfig+0xccc>)
 800a1e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a1e8:	e00c      	b.n	800a204 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a1ea:	4b24      	ldr	r3, [pc, #144]	@ (800a27c <UART_SetConfig+0xcd0>)
 800a1ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a1ee:	e009      	b.n	800a204 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a1f0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a1f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a1f6:	e005      	b.n	800a204 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800a1f8:	2300      	movs	r3, #0
 800a1fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a1fc:	2301      	movs	r3, #1
 800a1fe:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a202:	bf00      	nop
    }

    if (pclk != 0U)
 800a204:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a206:	2b00      	cmp	r3, #0
 800a208:	d021      	beq.n	800a24e <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a20a:	697b      	ldr	r3, [r7, #20]
 800a20c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a20e:	4a1c      	ldr	r2, [pc, #112]	@ (800a280 <UART_SetConfig+0xcd4>)
 800a210:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a214:	461a      	mov	r2, r3
 800a216:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a218:	fbb3 f2f2 	udiv	r2, r3, r2
 800a21c:	697b      	ldr	r3, [r7, #20]
 800a21e:	685b      	ldr	r3, [r3, #4]
 800a220:	085b      	lsrs	r3, r3, #1
 800a222:	441a      	add	r2, r3
 800a224:	697b      	ldr	r3, [r7, #20]
 800a226:	685b      	ldr	r3, [r3, #4]
 800a228:	fbb2 f3f3 	udiv	r3, r2, r3
 800a22c:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a22e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a230:	2b0f      	cmp	r3, #15
 800a232:	d909      	bls.n	800a248 <UART_SetConfig+0xc9c>
 800a234:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a236:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a23a:	d205      	bcs.n	800a248 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a23c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a23e:	b29a      	uxth	r2, r3
 800a240:	697b      	ldr	r3, [r7, #20]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	60da      	str	r2, [r3, #12]
 800a246:	e002      	b.n	800a24e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800a248:	2301      	movs	r3, #1
 800a24a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a24e:	697b      	ldr	r3, [r7, #20]
 800a250:	2201      	movs	r2, #1
 800a252:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800a256:	697b      	ldr	r3, [r7, #20]
 800a258:	2201      	movs	r2, #1
 800a25a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a25e:	697b      	ldr	r3, [r7, #20]
 800a260:	2200      	movs	r2, #0
 800a262:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a264:	697b      	ldr	r3, [r7, #20]
 800a266:	2200      	movs	r2, #0
 800a268:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a26a:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800a26e:	4618      	mov	r0, r3
 800a270:	3748      	adds	r7, #72	@ 0x48
 800a272:	46bd      	mov	sp, r7
 800a274:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a278:	03d09000 	.word	0x03d09000
 800a27c:	003d0900 	.word	0x003d0900
 800a280:	0800be2c 	.word	0x0800be2c

0800a284 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a284:	b480      	push	{r7}
 800a286:	b083      	sub	sp, #12
 800a288:	af00      	add	r7, sp, #0
 800a28a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a290:	f003 0308 	and.w	r3, r3, #8
 800a294:	2b00      	cmp	r3, #0
 800a296:	d00a      	beq.n	800a2ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	685b      	ldr	r3, [r3, #4]
 800a29e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	430a      	orrs	r2, r1
 800a2ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a2b2:	f003 0301 	and.w	r3, r3, #1
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d00a      	beq.n	800a2d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	685b      	ldr	r3, [r3, #4]
 800a2c0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	430a      	orrs	r2, r1
 800a2ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a2d4:	f003 0302 	and.w	r3, r3, #2
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d00a      	beq.n	800a2f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	685b      	ldr	r3, [r3, #4]
 800a2e2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	430a      	orrs	r2, r1
 800a2f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a2f6:	f003 0304 	and.w	r3, r3, #4
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d00a      	beq.n	800a314 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	685b      	ldr	r3, [r3, #4]
 800a304:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	430a      	orrs	r2, r1
 800a312:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a318:	f003 0310 	and.w	r3, r3, #16
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d00a      	beq.n	800a336 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	689b      	ldr	r3, [r3, #8]
 800a326:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	430a      	orrs	r2, r1
 800a334:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a33a:	f003 0320 	and.w	r3, r3, #32
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d00a      	beq.n	800a358 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	689b      	ldr	r3, [r3, #8]
 800a348:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	430a      	orrs	r2, r1
 800a356:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a35c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a360:	2b00      	cmp	r3, #0
 800a362:	d01a      	beq.n	800a39a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	685b      	ldr	r3, [r3, #4]
 800a36a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	430a      	orrs	r2, r1
 800a378:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a37e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a382:	d10a      	bne.n	800a39a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	685b      	ldr	r3, [r3, #4]
 800a38a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	430a      	orrs	r2, r1
 800a398:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a39e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d00a      	beq.n	800a3bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	685b      	ldr	r3, [r3, #4]
 800a3ac:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	430a      	orrs	r2, r1
 800a3ba:	605a      	str	r2, [r3, #4]
  }
}
 800a3bc:	bf00      	nop
 800a3be:	370c      	adds	r7, #12
 800a3c0:	46bd      	mov	sp, r7
 800a3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c6:	4770      	bx	lr

0800a3c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a3c8:	b580      	push	{r7, lr}
 800a3ca:	b098      	sub	sp, #96	@ 0x60
 800a3cc:	af02      	add	r7, sp, #8
 800a3ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	2200      	movs	r2, #0
 800a3d4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a3d8:	f7f6 fec8 	bl	800116c <HAL_GetTick>
 800a3dc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	f003 0308 	and.w	r3, r3, #8
 800a3e8:	2b08      	cmp	r3, #8
 800a3ea:	d12f      	bne.n	800a44c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a3ec:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a3f0:	9300      	str	r3, [sp, #0]
 800a3f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a3f4:	2200      	movs	r2, #0
 800a3f6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a3fa:	6878      	ldr	r0, [r7, #4]
 800a3fc:	f000 f88e 	bl	800a51c <UART_WaitOnFlagUntilTimeout>
 800a400:	4603      	mov	r3, r0
 800a402:	2b00      	cmp	r3, #0
 800a404:	d022      	beq.n	800a44c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a40c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a40e:	e853 3f00 	ldrex	r3, [r3]
 800a412:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a414:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a416:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a41a:	653b      	str	r3, [r7, #80]	@ 0x50
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	461a      	mov	r2, r3
 800a422:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a424:	647b      	str	r3, [r7, #68]	@ 0x44
 800a426:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a428:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a42a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a42c:	e841 2300 	strex	r3, r2, [r1]
 800a430:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a432:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a434:	2b00      	cmp	r3, #0
 800a436:	d1e6      	bne.n	800a406 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	2220      	movs	r2, #32
 800a43c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	2200      	movs	r2, #0
 800a444:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a448:	2303      	movs	r3, #3
 800a44a:	e063      	b.n	800a514 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	f003 0304 	and.w	r3, r3, #4
 800a456:	2b04      	cmp	r3, #4
 800a458:	d149      	bne.n	800a4ee <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a45a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a45e:	9300      	str	r3, [sp, #0]
 800a460:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a462:	2200      	movs	r2, #0
 800a464:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a468:	6878      	ldr	r0, [r7, #4]
 800a46a:	f000 f857 	bl	800a51c <UART_WaitOnFlagUntilTimeout>
 800a46e:	4603      	mov	r3, r0
 800a470:	2b00      	cmp	r3, #0
 800a472:	d03c      	beq.n	800a4ee <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a47a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a47c:	e853 3f00 	ldrex	r3, [r3]
 800a480:	623b      	str	r3, [r7, #32]
   return(result);
 800a482:	6a3b      	ldr	r3, [r7, #32]
 800a484:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a488:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	461a      	mov	r2, r3
 800a490:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a492:	633b      	str	r3, [r7, #48]	@ 0x30
 800a494:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a496:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a498:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a49a:	e841 2300 	strex	r3, r2, [r1]
 800a49e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a4a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d1e6      	bne.n	800a474 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	3308      	adds	r3, #8
 800a4ac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4ae:	693b      	ldr	r3, [r7, #16]
 800a4b0:	e853 3f00 	ldrex	r3, [r3]
 800a4b4:	60fb      	str	r3, [r7, #12]
   return(result);
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	f023 0301 	bic.w	r3, r3, #1
 800a4bc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	3308      	adds	r3, #8
 800a4c4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a4c6:	61fa      	str	r2, [r7, #28]
 800a4c8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4ca:	69b9      	ldr	r1, [r7, #24]
 800a4cc:	69fa      	ldr	r2, [r7, #28]
 800a4ce:	e841 2300 	strex	r3, r2, [r1]
 800a4d2:	617b      	str	r3, [r7, #20]
   return(result);
 800a4d4:	697b      	ldr	r3, [r7, #20]
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d1e5      	bne.n	800a4a6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	2220      	movs	r2, #32
 800a4de:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	2200      	movs	r2, #0
 800a4e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a4ea:	2303      	movs	r3, #3
 800a4ec:	e012      	b.n	800a514 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	2220      	movs	r2, #32
 800a4f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	2220      	movs	r2, #32
 800a4fa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	2200      	movs	r2, #0
 800a502:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	2200      	movs	r2, #0
 800a508:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	2200      	movs	r2, #0
 800a50e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a512:	2300      	movs	r3, #0
}
 800a514:	4618      	mov	r0, r3
 800a516:	3758      	adds	r7, #88	@ 0x58
 800a518:	46bd      	mov	sp, r7
 800a51a:	bd80      	pop	{r7, pc}

0800a51c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a51c:	b580      	push	{r7, lr}
 800a51e:	b084      	sub	sp, #16
 800a520:	af00      	add	r7, sp, #0
 800a522:	60f8      	str	r0, [r7, #12]
 800a524:	60b9      	str	r1, [r7, #8]
 800a526:	603b      	str	r3, [r7, #0]
 800a528:	4613      	mov	r3, r2
 800a52a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a52c:	e04f      	b.n	800a5ce <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a52e:	69bb      	ldr	r3, [r7, #24]
 800a530:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a534:	d04b      	beq.n	800a5ce <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a536:	f7f6 fe19 	bl	800116c <HAL_GetTick>
 800a53a:	4602      	mov	r2, r0
 800a53c:	683b      	ldr	r3, [r7, #0]
 800a53e:	1ad3      	subs	r3, r2, r3
 800a540:	69ba      	ldr	r2, [r7, #24]
 800a542:	429a      	cmp	r2, r3
 800a544:	d302      	bcc.n	800a54c <UART_WaitOnFlagUntilTimeout+0x30>
 800a546:	69bb      	ldr	r3, [r7, #24]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d101      	bne.n	800a550 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a54c:	2303      	movs	r3, #3
 800a54e:	e04e      	b.n	800a5ee <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	f003 0304 	and.w	r3, r3, #4
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d037      	beq.n	800a5ce <UART_WaitOnFlagUntilTimeout+0xb2>
 800a55e:	68bb      	ldr	r3, [r7, #8]
 800a560:	2b80      	cmp	r3, #128	@ 0x80
 800a562:	d034      	beq.n	800a5ce <UART_WaitOnFlagUntilTimeout+0xb2>
 800a564:	68bb      	ldr	r3, [r7, #8]
 800a566:	2b40      	cmp	r3, #64	@ 0x40
 800a568:	d031      	beq.n	800a5ce <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	69db      	ldr	r3, [r3, #28]
 800a570:	f003 0308 	and.w	r3, r3, #8
 800a574:	2b08      	cmp	r3, #8
 800a576:	d110      	bne.n	800a59a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	2208      	movs	r2, #8
 800a57e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a580:	68f8      	ldr	r0, [r7, #12]
 800a582:	f000 f839 	bl	800a5f8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	2208      	movs	r2, #8
 800a58a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	2200      	movs	r2, #0
 800a592:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a596:	2301      	movs	r3, #1
 800a598:	e029      	b.n	800a5ee <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	69db      	ldr	r3, [r3, #28]
 800a5a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a5a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a5a8:	d111      	bne.n	800a5ce <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a5b2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a5b4:	68f8      	ldr	r0, [r7, #12]
 800a5b6:	f000 f81f 	bl	800a5f8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	2220      	movs	r2, #32
 800a5be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	2200      	movs	r2, #0
 800a5c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a5ca:	2303      	movs	r3, #3
 800a5cc:	e00f      	b.n	800a5ee <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	69da      	ldr	r2, [r3, #28]
 800a5d4:	68bb      	ldr	r3, [r7, #8]
 800a5d6:	4013      	ands	r3, r2
 800a5d8:	68ba      	ldr	r2, [r7, #8]
 800a5da:	429a      	cmp	r2, r3
 800a5dc:	bf0c      	ite	eq
 800a5de:	2301      	moveq	r3, #1
 800a5e0:	2300      	movne	r3, #0
 800a5e2:	b2db      	uxtb	r3, r3
 800a5e4:	461a      	mov	r2, r3
 800a5e6:	79fb      	ldrb	r3, [r7, #7]
 800a5e8:	429a      	cmp	r2, r3
 800a5ea:	d0a0      	beq.n	800a52e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a5ec:	2300      	movs	r3, #0
}
 800a5ee:	4618      	mov	r0, r3
 800a5f0:	3710      	adds	r7, #16
 800a5f2:	46bd      	mov	sp, r7
 800a5f4:	bd80      	pop	{r7, pc}
	...

0800a5f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a5f8:	b480      	push	{r7}
 800a5fa:	b095      	sub	sp, #84	@ 0x54
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a606:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a608:	e853 3f00 	ldrex	r3, [r3]
 800a60c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a60e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a610:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a614:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	461a      	mov	r2, r3
 800a61c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a61e:	643b      	str	r3, [r7, #64]	@ 0x40
 800a620:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a622:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a624:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a626:	e841 2300 	strex	r3, r2, [r1]
 800a62a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a62c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d1e6      	bne.n	800a600 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	3308      	adds	r3, #8
 800a638:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a63a:	6a3b      	ldr	r3, [r7, #32]
 800a63c:	e853 3f00 	ldrex	r3, [r3]
 800a640:	61fb      	str	r3, [r7, #28]
   return(result);
 800a642:	69fa      	ldr	r2, [r7, #28]
 800a644:	4b1e      	ldr	r3, [pc, #120]	@ (800a6c0 <UART_EndRxTransfer+0xc8>)
 800a646:	4013      	ands	r3, r2
 800a648:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	3308      	adds	r3, #8
 800a650:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a652:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a654:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a656:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a658:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a65a:	e841 2300 	strex	r3, r2, [r1]
 800a65e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a662:	2b00      	cmp	r3, #0
 800a664:	d1e5      	bne.n	800a632 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a66a:	2b01      	cmp	r3, #1
 800a66c:	d118      	bne.n	800a6a0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	e853 3f00 	ldrex	r3, [r3]
 800a67a:	60bb      	str	r3, [r7, #8]
   return(result);
 800a67c:	68bb      	ldr	r3, [r7, #8]
 800a67e:	f023 0310 	bic.w	r3, r3, #16
 800a682:	647b      	str	r3, [r7, #68]	@ 0x44
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	461a      	mov	r2, r3
 800a68a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a68c:	61bb      	str	r3, [r7, #24]
 800a68e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a690:	6979      	ldr	r1, [r7, #20]
 800a692:	69ba      	ldr	r2, [r7, #24]
 800a694:	e841 2300 	strex	r3, r2, [r1]
 800a698:	613b      	str	r3, [r7, #16]
   return(result);
 800a69a:	693b      	ldr	r3, [r7, #16]
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d1e6      	bne.n	800a66e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	2220      	movs	r2, #32
 800a6a4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	2200      	movs	r2, #0
 800a6ac:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	2200      	movs	r2, #0
 800a6b2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a6b4:	bf00      	nop
 800a6b6:	3754      	adds	r7, #84	@ 0x54
 800a6b8:	46bd      	mov	sp, r7
 800a6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6be:	4770      	bx	lr
 800a6c0:	effffffe 	.word	0xeffffffe

0800a6c4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a6c4:	b480      	push	{r7}
 800a6c6:	b085      	sub	sp, #20
 800a6c8:	af00      	add	r7, sp, #0
 800a6ca:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a6d2:	2b01      	cmp	r3, #1
 800a6d4:	d101      	bne.n	800a6da <HAL_UARTEx_DisableFifoMode+0x16>
 800a6d6:	2302      	movs	r3, #2
 800a6d8:	e027      	b.n	800a72a <HAL_UARTEx_DisableFifoMode+0x66>
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	2201      	movs	r2, #1
 800a6de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	2224      	movs	r2, #36	@ 0x24
 800a6e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	681a      	ldr	r2, [r3, #0]
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	f022 0201 	bic.w	r2, r2, #1
 800a700:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a708:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	2200      	movs	r2, #0
 800a70e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	68fa      	ldr	r2, [r7, #12]
 800a716:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	2220      	movs	r2, #32
 800a71c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	2200      	movs	r2, #0
 800a724:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a728:	2300      	movs	r3, #0
}
 800a72a:	4618      	mov	r0, r3
 800a72c:	3714      	adds	r7, #20
 800a72e:	46bd      	mov	sp, r7
 800a730:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a734:	4770      	bx	lr

0800a736 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a736:	b580      	push	{r7, lr}
 800a738:	b084      	sub	sp, #16
 800a73a:	af00      	add	r7, sp, #0
 800a73c:	6078      	str	r0, [r7, #4]
 800a73e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a746:	2b01      	cmp	r3, #1
 800a748:	d101      	bne.n	800a74e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a74a:	2302      	movs	r3, #2
 800a74c:	e02d      	b.n	800a7aa <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	2201      	movs	r2, #1
 800a752:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	2224      	movs	r2, #36	@ 0x24
 800a75a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	681a      	ldr	r2, [r3, #0]
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	f022 0201 	bic.w	r2, r2, #1
 800a774:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	689b      	ldr	r3, [r3, #8]
 800a77c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	683a      	ldr	r2, [r7, #0]
 800a786:	430a      	orrs	r2, r1
 800a788:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a78a:	6878      	ldr	r0, [r7, #4]
 800a78c:	f000 f850 	bl	800a830 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	68fa      	ldr	r2, [r7, #12]
 800a796:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	2220      	movs	r2, #32
 800a79c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	2200      	movs	r2, #0
 800a7a4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a7a8:	2300      	movs	r3, #0
}
 800a7aa:	4618      	mov	r0, r3
 800a7ac:	3710      	adds	r7, #16
 800a7ae:	46bd      	mov	sp, r7
 800a7b0:	bd80      	pop	{r7, pc}

0800a7b2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a7b2:	b580      	push	{r7, lr}
 800a7b4:	b084      	sub	sp, #16
 800a7b6:	af00      	add	r7, sp, #0
 800a7b8:	6078      	str	r0, [r7, #4]
 800a7ba:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a7c2:	2b01      	cmp	r3, #1
 800a7c4:	d101      	bne.n	800a7ca <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a7c6:	2302      	movs	r3, #2
 800a7c8:	e02d      	b.n	800a826 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	2201      	movs	r2, #1
 800a7ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	2224      	movs	r2, #36	@ 0x24
 800a7d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	681a      	ldr	r2, [r3, #0]
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	f022 0201 	bic.w	r2, r2, #1
 800a7f0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	689b      	ldr	r3, [r3, #8]
 800a7f8:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	683a      	ldr	r2, [r7, #0]
 800a802:	430a      	orrs	r2, r1
 800a804:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a806:	6878      	ldr	r0, [r7, #4]
 800a808:	f000 f812 	bl	800a830 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	68fa      	ldr	r2, [r7, #12]
 800a812:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	2220      	movs	r2, #32
 800a818:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	2200      	movs	r2, #0
 800a820:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a824:	2300      	movs	r3, #0
}
 800a826:	4618      	mov	r0, r3
 800a828:	3710      	adds	r7, #16
 800a82a:	46bd      	mov	sp, r7
 800a82c:	bd80      	pop	{r7, pc}
	...

0800a830 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a830:	b480      	push	{r7}
 800a832:	b085      	sub	sp, #20
 800a834:	af00      	add	r7, sp, #0
 800a836:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d108      	bne.n	800a852 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	2201      	movs	r2, #1
 800a844:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	2201      	movs	r2, #1
 800a84c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a850:	e031      	b.n	800a8b6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a852:	2310      	movs	r3, #16
 800a854:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a856:	2310      	movs	r3, #16
 800a858:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	689b      	ldr	r3, [r3, #8]
 800a860:	0e5b      	lsrs	r3, r3, #25
 800a862:	b2db      	uxtb	r3, r3
 800a864:	f003 0307 	and.w	r3, r3, #7
 800a868:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	689b      	ldr	r3, [r3, #8]
 800a870:	0f5b      	lsrs	r3, r3, #29
 800a872:	b2db      	uxtb	r3, r3
 800a874:	f003 0307 	and.w	r3, r3, #7
 800a878:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a87a:	7bbb      	ldrb	r3, [r7, #14]
 800a87c:	7b3a      	ldrb	r2, [r7, #12]
 800a87e:	4911      	ldr	r1, [pc, #68]	@ (800a8c4 <UARTEx_SetNbDataToProcess+0x94>)
 800a880:	5c8a      	ldrb	r2, [r1, r2]
 800a882:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a886:	7b3a      	ldrb	r2, [r7, #12]
 800a888:	490f      	ldr	r1, [pc, #60]	@ (800a8c8 <UARTEx_SetNbDataToProcess+0x98>)
 800a88a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a88c:	fb93 f3f2 	sdiv	r3, r3, r2
 800a890:	b29a      	uxth	r2, r3
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a898:	7bfb      	ldrb	r3, [r7, #15]
 800a89a:	7b7a      	ldrb	r2, [r7, #13]
 800a89c:	4909      	ldr	r1, [pc, #36]	@ (800a8c4 <UARTEx_SetNbDataToProcess+0x94>)
 800a89e:	5c8a      	ldrb	r2, [r1, r2]
 800a8a0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a8a4:	7b7a      	ldrb	r2, [r7, #13]
 800a8a6:	4908      	ldr	r1, [pc, #32]	@ (800a8c8 <UARTEx_SetNbDataToProcess+0x98>)
 800a8a8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a8aa:	fb93 f3f2 	sdiv	r3, r3, r2
 800a8ae:	b29a      	uxth	r2, r3
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a8b6:	bf00      	nop
 800a8b8:	3714      	adds	r7, #20
 800a8ba:	46bd      	mov	sp, r7
 800a8bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c0:	4770      	bx	lr
 800a8c2:	bf00      	nop
 800a8c4:	0800be44 	.word	0x0800be44
 800a8c8:	0800be4c 	.word	0x0800be4c

0800a8cc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a8cc:	b480      	push	{r7}
 800a8ce:	b083      	sub	sp, #12
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	f103 0208 	add.w	r2, r3, #8
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	f04f 32ff 	mov.w	r2, #4294967295
 800a8e4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	f103 0208 	add.w	r2, r3, #8
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	f103 0208 	add.w	r2, r3, #8
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	2200      	movs	r2, #0
 800a8fe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a900:	bf00      	nop
 800a902:	370c      	adds	r7, #12
 800a904:	46bd      	mov	sp, r7
 800a906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a90a:	4770      	bx	lr

0800a90c <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a90c:	b480      	push	{r7}
 800a90e:	b085      	sub	sp, #20
 800a910:	af00      	add	r7, sp, #0
 800a912:	6078      	str	r0, [r7, #4]
 800a914:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	685b      	ldr	r3, [r3, #4]
 800a91a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a91c:	683b      	ldr	r3, [r7, #0]
 800a91e:	68fa      	ldr	r2, [r7, #12]
 800a920:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	689a      	ldr	r2, [r3, #8]
 800a926:	683b      	ldr	r3, [r7, #0]
 800a928:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	689b      	ldr	r3, [r3, #8]
 800a92e:	683a      	ldr	r2, [r7, #0]
 800a930:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	683a      	ldr	r2, [r7, #0]
 800a936:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a938:	683b      	ldr	r3, [r7, #0]
 800a93a:	687a      	ldr	r2, [r7, #4]
 800a93c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	1c5a      	adds	r2, r3, #1
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	601a      	str	r2, [r3, #0]
}
 800a948:	bf00      	nop
 800a94a:	3714      	adds	r7, #20
 800a94c:	46bd      	mov	sp, r7
 800a94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a952:	4770      	bx	lr

0800a954 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a954:	b480      	push	{r7}
 800a956:	b085      	sub	sp, #20
 800a958:	af00      	add	r7, sp, #0
 800a95a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	691b      	ldr	r3, [r3, #16]
 800a960:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	685b      	ldr	r3, [r3, #4]
 800a966:	687a      	ldr	r2, [r7, #4]
 800a968:	6892      	ldr	r2, [r2, #8]
 800a96a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	689b      	ldr	r3, [r3, #8]
 800a970:	687a      	ldr	r2, [r7, #4]
 800a972:	6852      	ldr	r2, [r2, #4]
 800a974:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	685b      	ldr	r3, [r3, #4]
 800a97a:	687a      	ldr	r2, [r7, #4]
 800a97c:	429a      	cmp	r2, r3
 800a97e:	d103      	bne.n	800a988 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	689a      	ldr	r2, [r3, #8]
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	2200      	movs	r2, #0
 800a98c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	1e5a      	subs	r2, r3, #1
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	681b      	ldr	r3, [r3, #0]
}
 800a99c:	4618      	mov	r0, r3
 800a99e:	3714      	adds	r7, #20
 800a9a0:	46bd      	mov	sp, r7
 800a9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a6:	4770      	bx	lr

0800a9a8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a9a8:	b580      	push	{r7, lr}
 800a9aa:	b084      	sub	sp, #16
 800a9ac:	af00      	add	r7, sp, #0
 800a9ae:	6078      	str	r0, [r7, #4]
 800a9b0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d10b      	bne.n	800a9d4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a9bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9c0:	f383 8811 	msr	BASEPRI, r3
 800a9c4:	f3bf 8f6f 	isb	sy
 800a9c8:	f3bf 8f4f 	dsb	sy
 800a9cc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a9ce:	bf00      	nop
 800a9d0:	bf00      	nop
 800a9d2:	e7fd      	b.n	800a9d0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a9d4:	f000 fb08 	bl	800afe8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	681a      	ldr	r2, [r3, #0]
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a9e0:	68f9      	ldr	r1, [r7, #12]
 800a9e2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a9e4:	fb01 f303 	mul.w	r3, r1, r3
 800a9e8:	441a      	add	r2, r3
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	2200      	movs	r2, #0
 800a9f2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	681a      	ldr	r2, [r3, #0]
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	681a      	ldr	r2, [r3, #0]
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aa04:	3b01      	subs	r3, #1
 800aa06:	68f9      	ldr	r1, [r7, #12]
 800aa08:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800aa0a:	fb01 f303 	mul.w	r3, r1, r3
 800aa0e:	441a      	add	r2, r3
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	22ff      	movs	r2, #255	@ 0xff
 800aa18:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	22ff      	movs	r2, #255	@ 0xff
 800aa20:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800aa24:	683b      	ldr	r3, [r7, #0]
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d114      	bne.n	800aa54 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	691b      	ldr	r3, [r3, #16]
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d01a      	beq.n	800aa68 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	3310      	adds	r3, #16
 800aa36:	4618      	mov	r0, r3
 800aa38:	f000 fa3c 	bl	800aeb4 <xTaskRemoveFromEventList>
 800aa3c:	4603      	mov	r3, r0
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d012      	beq.n	800aa68 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800aa42:	4b0d      	ldr	r3, [pc, #52]	@ (800aa78 <xQueueGenericReset+0xd0>)
 800aa44:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aa48:	601a      	str	r2, [r3, #0]
 800aa4a:	f3bf 8f4f 	dsb	sy
 800aa4e:	f3bf 8f6f 	isb	sy
 800aa52:	e009      	b.n	800aa68 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	3310      	adds	r3, #16
 800aa58:	4618      	mov	r0, r3
 800aa5a:	f7ff ff37 	bl	800a8cc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	3324      	adds	r3, #36	@ 0x24
 800aa62:	4618      	mov	r0, r3
 800aa64:	f7ff ff32 	bl	800a8cc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800aa68:	f000 faf0 	bl	800b04c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800aa6c:	2301      	movs	r3, #1
}
 800aa6e:	4618      	mov	r0, r3
 800aa70:	3710      	adds	r7, #16
 800aa72:	46bd      	mov	sp, r7
 800aa74:	bd80      	pop	{r7, pc}
 800aa76:	bf00      	nop
 800aa78:	e000ed04 	.word	0xe000ed04

0800aa7c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800aa7c:	b580      	push	{r7, lr}
 800aa7e:	b08a      	sub	sp, #40	@ 0x28
 800aa80:	af02      	add	r7, sp, #8
 800aa82:	60f8      	str	r0, [r7, #12]
 800aa84:	60b9      	str	r1, [r7, #8]
 800aa86:	4613      	mov	r3, r2
 800aa88:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d10b      	bne.n	800aaa8 <xQueueGenericCreate+0x2c>
	__asm volatile
 800aa90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa94:	f383 8811 	msr	BASEPRI, r3
 800aa98:	f3bf 8f6f 	isb	sy
 800aa9c:	f3bf 8f4f 	dsb	sy
 800aaa0:	613b      	str	r3, [r7, #16]
}
 800aaa2:	bf00      	nop
 800aaa4:	bf00      	nop
 800aaa6:	e7fd      	b.n	800aaa4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	68ba      	ldr	r2, [r7, #8]
 800aaac:	fb02 f303 	mul.w	r3, r2, r3
 800aab0:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800aab2:	69fb      	ldr	r3, [r7, #28]
 800aab4:	3348      	adds	r3, #72	@ 0x48
 800aab6:	4618      	mov	r0, r3
 800aab8:	f000 fb48 	bl	800b14c <pvPortMalloc>
 800aabc:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800aabe:	69bb      	ldr	r3, [r7, #24]
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d011      	beq.n	800aae8 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800aac4:	69bb      	ldr	r3, [r7, #24]
 800aac6:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800aac8:	697b      	ldr	r3, [r7, #20]
 800aaca:	3348      	adds	r3, #72	@ 0x48
 800aacc:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800aace:	69bb      	ldr	r3, [r7, #24]
 800aad0:	2200      	movs	r2, #0
 800aad2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800aad6:	79fa      	ldrb	r2, [r7, #7]
 800aad8:	69bb      	ldr	r3, [r7, #24]
 800aada:	9300      	str	r3, [sp, #0]
 800aadc:	4613      	mov	r3, r2
 800aade:	697a      	ldr	r2, [r7, #20]
 800aae0:	68b9      	ldr	r1, [r7, #8]
 800aae2:	68f8      	ldr	r0, [r7, #12]
 800aae4:	f000 f805 	bl	800aaf2 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800aae8:	69bb      	ldr	r3, [r7, #24]
	}
 800aaea:	4618      	mov	r0, r3
 800aaec:	3720      	adds	r7, #32
 800aaee:	46bd      	mov	sp, r7
 800aaf0:	bd80      	pop	{r7, pc}

0800aaf2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800aaf2:	b580      	push	{r7, lr}
 800aaf4:	b084      	sub	sp, #16
 800aaf6:	af00      	add	r7, sp, #0
 800aaf8:	60f8      	str	r0, [r7, #12]
 800aafa:	60b9      	str	r1, [r7, #8]
 800aafc:	607a      	str	r2, [r7, #4]
 800aafe:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ab00:	68bb      	ldr	r3, [r7, #8]
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d103      	bne.n	800ab0e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ab06:	69bb      	ldr	r3, [r7, #24]
 800ab08:	69ba      	ldr	r2, [r7, #24]
 800ab0a:	601a      	str	r2, [r3, #0]
 800ab0c:	e002      	b.n	800ab14 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ab0e:	69bb      	ldr	r3, [r7, #24]
 800ab10:	687a      	ldr	r2, [r7, #4]
 800ab12:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ab14:	69bb      	ldr	r3, [r7, #24]
 800ab16:	68fa      	ldr	r2, [r7, #12]
 800ab18:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ab1a:	69bb      	ldr	r3, [r7, #24]
 800ab1c:	68ba      	ldr	r2, [r7, #8]
 800ab1e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ab20:	2101      	movs	r1, #1
 800ab22:	69b8      	ldr	r0, [r7, #24]
 800ab24:	f7ff ff40 	bl	800a9a8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ab28:	bf00      	nop
 800ab2a:	3710      	adds	r7, #16
 800ab2c:	46bd      	mov	sp, r7
 800ab2e:	bd80      	pop	{r7, pc}

0800ab30 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ab30:	b480      	push	{r7}
 800ab32:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800ab34:	4b04      	ldr	r3, [pc, #16]	@ (800ab48 <vTaskSuspendAll+0x18>)
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	3301      	adds	r3, #1
 800ab3a:	4a03      	ldr	r2, [pc, #12]	@ (800ab48 <vTaskSuspendAll+0x18>)
 800ab3c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800ab3e:	bf00      	nop
 800ab40:	46bd      	mov	sp, r7
 800ab42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab46:	4770      	bx	lr
 800ab48:	24000378 	.word	0x24000378

0800ab4c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ab4c:	b580      	push	{r7, lr}
 800ab4e:	b084      	sub	sp, #16
 800ab50:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ab52:	2300      	movs	r3, #0
 800ab54:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ab56:	2300      	movs	r3, #0
 800ab58:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ab5a:	4b42      	ldr	r3, [pc, #264]	@ (800ac64 <xTaskResumeAll+0x118>)
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d10b      	bne.n	800ab7a <xTaskResumeAll+0x2e>
	__asm volatile
 800ab62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab66:	f383 8811 	msr	BASEPRI, r3
 800ab6a:	f3bf 8f6f 	isb	sy
 800ab6e:	f3bf 8f4f 	dsb	sy
 800ab72:	603b      	str	r3, [r7, #0]
}
 800ab74:	bf00      	nop
 800ab76:	bf00      	nop
 800ab78:	e7fd      	b.n	800ab76 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ab7a:	f000 fa35 	bl	800afe8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ab7e:	4b39      	ldr	r3, [pc, #228]	@ (800ac64 <xTaskResumeAll+0x118>)
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	3b01      	subs	r3, #1
 800ab84:	4a37      	ldr	r2, [pc, #220]	@ (800ac64 <xTaskResumeAll+0x118>)
 800ab86:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ab88:	4b36      	ldr	r3, [pc, #216]	@ (800ac64 <xTaskResumeAll+0x118>)
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d161      	bne.n	800ac54 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ab90:	4b35      	ldr	r3, [pc, #212]	@ (800ac68 <xTaskResumeAll+0x11c>)
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d05d      	beq.n	800ac54 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ab98:	e02e      	b.n	800abf8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ab9a:	4b34      	ldr	r3, [pc, #208]	@ (800ac6c <xTaskResumeAll+0x120>)
 800ab9c:	68db      	ldr	r3, [r3, #12]
 800ab9e:	68db      	ldr	r3, [r3, #12]
 800aba0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	3318      	adds	r3, #24
 800aba6:	4618      	mov	r0, r3
 800aba8:	f7ff fed4 	bl	800a954 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	3304      	adds	r3, #4
 800abb0:	4618      	mov	r0, r3
 800abb2:	f7ff fecf 	bl	800a954 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800abba:	2201      	movs	r2, #1
 800abbc:	409a      	lsls	r2, r3
 800abbe:	4b2c      	ldr	r3, [pc, #176]	@ (800ac70 <xTaskResumeAll+0x124>)
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	4313      	orrs	r3, r2
 800abc4:	4a2a      	ldr	r2, [pc, #168]	@ (800ac70 <xTaskResumeAll+0x124>)
 800abc6:	6013      	str	r3, [r2, #0]
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800abcc:	4613      	mov	r3, r2
 800abce:	009b      	lsls	r3, r3, #2
 800abd0:	4413      	add	r3, r2
 800abd2:	009b      	lsls	r3, r3, #2
 800abd4:	4a27      	ldr	r2, [pc, #156]	@ (800ac74 <xTaskResumeAll+0x128>)
 800abd6:	441a      	add	r2, r3
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	3304      	adds	r3, #4
 800abdc:	4619      	mov	r1, r3
 800abde:	4610      	mov	r0, r2
 800abe0:	f7ff fe94 	bl	800a90c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800abe8:	4b23      	ldr	r3, [pc, #140]	@ (800ac78 <xTaskResumeAll+0x12c>)
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800abee:	429a      	cmp	r2, r3
 800abf0:	d302      	bcc.n	800abf8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800abf2:	4b22      	ldr	r3, [pc, #136]	@ (800ac7c <xTaskResumeAll+0x130>)
 800abf4:	2201      	movs	r2, #1
 800abf6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800abf8:	4b1c      	ldr	r3, [pc, #112]	@ (800ac6c <xTaskResumeAll+0x120>)
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d1cc      	bne.n	800ab9a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d001      	beq.n	800ac0a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ac06:	f000 f9b9 	bl	800af7c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800ac0a:	4b1d      	ldr	r3, [pc, #116]	@ (800ac80 <xTaskResumeAll+0x134>)
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d010      	beq.n	800ac38 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ac16:	f000 f837 	bl	800ac88 <xTaskIncrementTick>
 800ac1a:	4603      	mov	r3, r0
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d002      	beq.n	800ac26 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800ac20:	4b16      	ldr	r3, [pc, #88]	@ (800ac7c <xTaskResumeAll+0x130>)
 800ac22:	2201      	movs	r2, #1
 800ac24:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	3b01      	subs	r3, #1
 800ac2a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d1f1      	bne.n	800ac16 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800ac32:	4b13      	ldr	r3, [pc, #76]	@ (800ac80 <xTaskResumeAll+0x134>)
 800ac34:	2200      	movs	r2, #0
 800ac36:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ac38:	4b10      	ldr	r3, [pc, #64]	@ (800ac7c <xTaskResumeAll+0x130>)
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d009      	beq.n	800ac54 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ac40:	2301      	movs	r3, #1
 800ac42:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ac44:	4b0f      	ldr	r3, [pc, #60]	@ (800ac84 <xTaskResumeAll+0x138>)
 800ac46:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ac4a:	601a      	str	r2, [r3, #0]
 800ac4c:	f3bf 8f4f 	dsb	sy
 800ac50:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ac54:	f000 f9fa 	bl	800b04c <vPortExitCritical>

	return xAlreadyYielded;
 800ac58:	68bb      	ldr	r3, [r7, #8]
}
 800ac5a:	4618      	mov	r0, r3
 800ac5c:	3710      	adds	r7, #16
 800ac5e:	46bd      	mov	sp, r7
 800ac60:	bd80      	pop	{r7, pc}
 800ac62:	bf00      	nop
 800ac64:	24000378 	.word	0x24000378
 800ac68:	2400035c 	.word	0x2400035c
 800ac6c:	24000348 	.word	0x24000348
 800ac70:	24000364 	.word	0x24000364
 800ac74:	240002b4 	.word	0x240002b4
 800ac78:	240002b0 	.word	0x240002b0
 800ac7c:	2400036c 	.word	0x2400036c
 800ac80:	24000368 	.word	0x24000368
 800ac84:	e000ed04 	.word	0xe000ed04

0800ac88 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ac88:	b580      	push	{r7, lr}
 800ac8a:	b086      	sub	sp, #24
 800ac8c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ac8e:	2300      	movs	r3, #0
 800ac90:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ac92:	4b4f      	ldr	r3, [pc, #316]	@ (800add0 <xTaskIncrementTick+0x148>)
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	f040 808f 	bne.w	800adba <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ac9c:	4b4d      	ldr	r3, [pc, #308]	@ (800add4 <xTaskIncrementTick+0x14c>)
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	3301      	adds	r3, #1
 800aca2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800aca4:	4a4b      	ldr	r2, [pc, #300]	@ (800add4 <xTaskIncrementTick+0x14c>)
 800aca6:	693b      	ldr	r3, [r7, #16]
 800aca8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800acaa:	693b      	ldr	r3, [r7, #16]
 800acac:	2b00      	cmp	r3, #0
 800acae:	d121      	bne.n	800acf4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800acb0:	4b49      	ldr	r3, [pc, #292]	@ (800add8 <xTaskIncrementTick+0x150>)
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d00b      	beq.n	800acd2 <xTaskIncrementTick+0x4a>
	__asm volatile
 800acba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acbe:	f383 8811 	msr	BASEPRI, r3
 800acc2:	f3bf 8f6f 	isb	sy
 800acc6:	f3bf 8f4f 	dsb	sy
 800acca:	603b      	str	r3, [r7, #0]
}
 800accc:	bf00      	nop
 800acce:	bf00      	nop
 800acd0:	e7fd      	b.n	800acce <xTaskIncrementTick+0x46>
 800acd2:	4b41      	ldr	r3, [pc, #260]	@ (800add8 <xTaskIncrementTick+0x150>)
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	60fb      	str	r3, [r7, #12]
 800acd8:	4b40      	ldr	r3, [pc, #256]	@ (800addc <xTaskIncrementTick+0x154>)
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	4a3e      	ldr	r2, [pc, #248]	@ (800add8 <xTaskIncrementTick+0x150>)
 800acde:	6013      	str	r3, [r2, #0]
 800ace0:	4a3e      	ldr	r2, [pc, #248]	@ (800addc <xTaskIncrementTick+0x154>)
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	6013      	str	r3, [r2, #0]
 800ace6:	4b3e      	ldr	r3, [pc, #248]	@ (800ade0 <xTaskIncrementTick+0x158>)
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	3301      	adds	r3, #1
 800acec:	4a3c      	ldr	r2, [pc, #240]	@ (800ade0 <xTaskIncrementTick+0x158>)
 800acee:	6013      	str	r3, [r2, #0]
 800acf0:	f000 f944 	bl	800af7c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800acf4:	4b3b      	ldr	r3, [pc, #236]	@ (800ade4 <xTaskIncrementTick+0x15c>)
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	693a      	ldr	r2, [r7, #16]
 800acfa:	429a      	cmp	r2, r3
 800acfc:	d348      	bcc.n	800ad90 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800acfe:	4b36      	ldr	r3, [pc, #216]	@ (800add8 <xTaskIncrementTick+0x150>)
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d104      	bne.n	800ad12 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ad08:	4b36      	ldr	r3, [pc, #216]	@ (800ade4 <xTaskIncrementTick+0x15c>)
 800ad0a:	f04f 32ff 	mov.w	r2, #4294967295
 800ad0e:	601a      	str	r2, [r3, #0]
					break;
 800ad10:	e03e      	b.n	800ad90 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ad12:	4b31      	ldr	r3, [pc, #196]	@ (800add8 <xTaskIncrementTick+0x150>)
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	68db      	ldr	r3, [r3, #12]
 800ad18:	68db      	ldr	r3, [r3, #12]
 800ad1a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ad1c:	68bb      	ldr	r3, [r7, #8]
 800ad1e:	685b      	ldr	r3, [r3, #4]
 800ad20:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ad22:	693a      	ldr	r2, [r7, #16]
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	429a      	cmp	r2, r3
 800ad28:	d203      	bcs.n	800ad32 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ad2a:	4a2e      	ldr	r2, [pc, #184]	@ (800ade4 <xTaskIncrementTick+0x15c>)
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ad30:	e02e      	b.n	800ad90 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ad32:	68bb      	ldr	r3, [r7, #8]
 800ad34:	3304      	adds	r3, #4
 800ad36:	4618      	mov	r0, r3
 800ad38:	f7ff fe0c 	bl	800a954 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ad3c:	68bb      	ldr	r3, [r7, #8]
 800ad3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d004      	beq.n	800ad4e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ad44:	68bb      	ldr	r3, [r7, #8]
 800ad46:	3318      	adds	r3, #24
 800ad48:	4618      	mov	r0, r3
 800ad4a:	f7ff fe03 	bl	800a954 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ad4e:	68bb      	ldr	r3, [r7, #8]
 800ad50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad52:	2201      	movs	r2, #1
 800ad54:	409a      	lsls	r2, r3
 800ad56:	4b24      	ldr	r3, [pc, #144]	@ (800ade8 <xTaskIncrementTick+0x160>)
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	4313      	orrs	r3, r2
 800ad5c:	4a22      	ldr	r2, [pc, #136]	@ (800ade8 <xTaskIncrementTick+0x160>)
 800ad5e:	6013      	str	r3, [r2, #0]
 800ad60:	68bb      	ldr	r3, [r7, #8]
 800ad62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ad64:	4613      	mov	r3, r2
 800ad66:	009b      	lsls	r3, r3, #2
 800ad68:	4413      	add	r3, r2
 800ad6a:	009b      	lsls	r3, r3, #2
 800ad6c:	4a1f      	ldr	r2, [pc, #124]	@ (800adec <xTaskIncrementTick+0x164>)
 800ad6e:	441a      	add	r2, r3
 800ad70:	68bb      	ldr	r3, [r7, #8]
 800ad72:	3304      	adds	r3, #4
 800ad74:	4619      	mov	r1, r3
 800ad76:	4610      	mov	r0, r2
 800ad78:	f7ff fdc8 	bl	800a90c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ad7c:	68bb      	ldr	r3, [r7, #8]
 800ad7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ad80:	4b1b      	ldr	r3, [pc, #108]	@ (800adf0 <xTaskIncrementTick+0x168>)
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad86:	429a      	cmp	r2, r3
 800ad88:	d3b9      	bcc.n	800acfe <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800ad8a:	2301      	movs	r3, #1
 800ad8c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ad8e:	e7b6      	b.n	800acfe <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ad90:	4b17      	ldr	r3, [pc, #92]	@ (800adf0 <xTaskIncrementTick+0x168>)
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ad96:	4915      	ldr	r1, [pc, #84]	@ (800adec <xTaskIncrementTick+0x164>)
 800ad98:	4613      	mov	r3, r2
 800ad9a:	009b      	lsls	r3, r3, #2
 800ad9c:	4413      	add	r3, r2
 800ad9e:	009b      	lsls	r3, r3, #2
 800ada0:	440b      	add	r3, r1
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	2b01      	cmp	r3, #1
 800ada6:	d901      	bls.n	800adac <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800ada8:	2301      	movs	r3, #1
 800adaa:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800adac:	4b11      	ldr	r3, [pc, #68]	@ (800adf4 <xTaskIncrementTick+0x16c>)
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d007      	beq.n	800adc4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800adb4:	2301      	movs	r3, #1
 800adb6:	617b      	str	r3, [r7, #20]
 800adb8:	e004      	b.n	800adc4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800adba:	4b0f      	ldr	r3, [pc, #60]	@ (800adf8 <xTaskIncrementTick+0x170>)
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	3301      	adds	r3, #1
 800adc0:	4a0d      	ldr	r2, [pc, #52]	@ (800adf8 <xTaskIncrementTick+0x170>)
 800adc2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800adc4:	697b      	ldr	r3, [r7, #20]
}
 800adc6:	4618      	mov	r0, r3
 800adc8:	3718      	adds	r7, #24
 800adca:	46bd      	mov	sp, r7
 800adcc:	bd80      	pop	{r7, pc}
 800adce:	bf00      	nop
 800add0:	24000378 	.word	0x24000378
 800add4:	24000360 	.word	0x24000360
 800add8:	24000340 	.word	0x24000340
 800addc:	24000344 	.word	0x24000344
 800ade0:	24000370 	.word	0x24000370
 800ade4:	24000374 	.word	0x24000374
 800ade8:	24000364 	.word	0x24000364
 800adec:	240002b4 	.word	0x240002b4
 800adf0:	240002b0 	.word	0x240002b0
 800adf4:	2400036c 	.word	0x2400036c
 800adf8:	24000368 	.word	0x24000368

0800adfc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800adfc:	b480      	push	{r7}
 800adfe:	b087      	sub	sp, #28
 800ae00:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ae02:	4b27      	ldr	r3, [pc, #156]	@ (800aea0 <vTaskSwitchContext+0xa4>)
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d003      	beq.n	800ae12 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ae0a:	4b26      	ldr	r3, [pc, #152]	@ (800aea4 <vTaskSwitchContext+0xa8>)
 800ae0c:	2201      	movs	r2, #1
 800ae0e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ae10:	e040      	b.n	800ae94 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800ae12:	4b24      	ldr	r3, [pc, #144]	@ (800aea4 <vTaskSwitchContext+0xa8>)
 800ae14:	2200      	movs	r2, #0
 800ae16:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ae18:	4b23      	ldr	r3, [pc, #140]	@ (800aea8 <vTaskSwitchContext+0xac>)
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	fab3 f383 	clz	r3, r3
 800ae24:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800ae26:	7afb      	ldrb	r3, [r7, #11]
 800ae28:	f1c3 031f 	rsb	r3, r3, #31
 800ae2c:	617b      	str	r3, [r7, #20]
 800ae2e:	491f      	ldr	r1, [pc, #124]	@ (800aeac <vTaskSwitchContext+0xb0>)
 800ae30:	697a      	ldr	r2, [r7, #20]
 800ae32:	4613      	mov	r3, r2
 800ae34:	009b      	lsls	r3, r3, #2
 800ae36:	4413      	add	r3, r2
 800ae38:	009b      	lsls	r3, r3, #2
 800ae3a:	440b      	add	r3, r1
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d10b      	bne.n	800ae5a <vTaskSwitchContext+0x5e>
	__asm volatile
 800ae42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae46:	f383 8811 	msr	BASEPRI, r3
 800ae4a:	f3bf 8f6f 	isb	sy
 800ae4e:	f3bf 8f4f 	dsb	sy
 800ae52:	607b      	str	r3, [r7, #4]
}
 800ae54:	bf00      	nop
 800ae56:	bf00      	nop
 800ae58:	e7fd      	b.n	800ae56 <vTaskSwitchContext+0x5a>
 800ae5a:	697a      	ldr	r2, [r7, #20]
 800ae5c:	4613      	mov	r3, r2
 800ae5e:	009b      	lsls	r3, r3, #2
 800ae60:	4413      	add	r3, r2
 800ae62:	009b      	lsls	r3, r3, #2
 800ae64:	4a11      	ldr	r2, [pc, #68]	@ (800aeac <vTaskSwitchContext+0xb0>)
 800ae66:	4413      	add	r3, r2
 800ae68:	613b      	str	r3, [r7, #16]
 800ae6a:	693b      	ldr	r3, [r7, #16]
 800ae6c:	685b      	ldr	r3, [r3, #4]
 800ae6e:	685a      	ldr	r2, [r3, #4]
 800ae70:	693b      	ldr	r3, [r7, #16]
 800ae72:	605a      	str	r2, [r3, #4]
 800ae74:	693b      	ldr	r3, [r7, #16]
 800ae76:	685a      	ldr	r2, [r3, #4]
 800ae78:	693b      	ldr	r3, [r7, #16]
 800ae7a:	3308      	adds	r3, #8
 800ae7c:	429a      	cmp	r2, r3
 800ae7e:	d104      	bne.n	800ae8a <vTaskSwitchContext+0x8e>
 800ae80:	693b      	ldr	r3, [r7, #16]
 800ae82:	685b      	ldr	r3, [r3, #4]
 800ae84:	685a      	ldr	r2, [r3, #4]
 800ae86:	693b      	ldr	r3, [r7, #16]
 800ae88:	605a      	str	r2, [r3, #4]
 800ae8a:	693b      	ldr	r3, [r7, #16]
 800ae8c:	685b      	ldr	r3, [r3, #4]
 800ae8e:	68db      	ldr	r3, [r3, #12]
 800ae90:	4a07      	ldr	r2, [pc, #28]	@ (800aeb0 <vTaskSwitchContext+0xb4>)
 800ae92:	6013      	str	r3, [r2, #0]
}
 800ae94:	bf00      	nop
 800ae96:	371c      	adds	r7, #28
 800ae98:	46bd      	mov	sp, r7
 800ae9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae9e:	4770      	bx	lr
 800aea0:	24000378 	.word	0x24000378
 800aea4:	2400036c 	.word	0x2400036c
 800aea8:	24000364 	.word	0x24000364
 800aeac:	240002b4 	.word	0x240002b4
 800aeb0:	240002b0 	.word	0x240002b0

0800aeb4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800aeb4:	b580      	push	{r7, lr}
 800aeb6:	b086      	sub	sp, #24
 800aeb8:	af00      	add	r7, sp, #0
 800aeba:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	68db      	ldr	r3, [r3, #12]
 800aec0:	68db      	ldr	r3, [r3, #12]
 800aec2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800aec4:	693b      	ldr	r3, [r7, #16]
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d10b      	bne.n	800aee2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800aeca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aece:	f383 8811 	msr	BASEPRI, r3
 800aed2:	f3bf 8f6f 	isb	sy
 800aed6:	f3bf 8f4f 	dsb	sy
 800aeda:	60fb      	str	r3, [r7, #12]
}
 800aedc:	bf00      	nop
 800aede:	bf00      	nop
 800aee0:	e7fd      	b.n	800aede <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800aee2:	693b      	ldr	r3, [r7, #16]
 800aee4:	3318      	adds	r3, #24
 800aee6:	4618      	mov	r0, r3
 800aee8:	f7ff fd34 	bl	800a954 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aeec:	4b1d      	ldr	r3, [pc, #116]	@ (800af64 <xTaskRemoveFromEventList+0xb0>)
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d11c      	bne.n	800af2e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800aef4:	693b      	ldr	r3, [r7, #16]
 800aef6:	3304      	adds	r3, #4
 800aef8:	4618      	mov	r0, r3
 800aefa:	f7ff fd2b 	bl	800a954 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800aefe:	693b      	ldr	r3, [r7, #16]
 800af00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af02:	2201      	movs	r2, #1
 800af04:	409a      	lsls	r2, r3
 800af06:	4b18      	ldr	r3, [pc, #96]	@ (800af68 <xTaskRemoveFromEventList+0xb4>)
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	4313      	orrs	r3, r2
 800af0c:	4a16      	ldr	r2, [pc, #88]	@ (800af68 <xTaskRemoveFromEventList+0xb4>)
 800af0e:	6013      	str	r3, [r2, #0]
 800af10:	693b      	ldr	r3, [r7, #16]
 800af12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800af14:	4613      	mov	r3, r2
 800af16:	009b      	lsls	r3, r3, #2
 800af18:	4413      	add	r3, r2
 800af1a:	009b      	lsls	r3, r3, #2
 800af1c:	4a13      	ldr	r2, [pc, #76]	@ (800af6c <xTaskRemoveFromEventList+0xb8>)
 800af1e:	441a      	add	r2, r3
 800af20:	693b      	ldr	r3, [r7, #16]
 800af22:	3304      	adds	r3, #4
 800af24:	4619      	mov	r1, r3
 800af26:	4610      	mov	r0, r2
 800af28:	f7ff fcf0 	bl	800a90c <vListInsertEnd>
 800af2c:	e005      	b.n	800af3a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800af2e:	693b      	ldr	r3, [r7, #16]
 800af30:	3318      	adds	r3, #24
 800af32:	4619      	mov	r1, r3
 800af34:	480e      	ldr	r0, [pc, #56]	@ (800af70 <xTaskRemoveFromEventList+0xbc>)
 800af36:	f7ff fce9 	bl	800a90c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800af3a:	693b      	ldr	r3, [r7, #16]
 800af3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800af3e:	4b0d      	ldr	r3, [pc, #52]	@ (800af74 <xTaskRemoveFromEventList+0xc0>)
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af44:	429a      	cmp	r2, r3
 800af46:	d905      	bls.n	800af54 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800af48:	2301      	movs	r3, #1
 800af4a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800af4c:	4b0a      	ldr	r3, [pc, #40]	@ (800af78 <xTaskRemoveFromEventList+0xc4>)
 800af4e:	2201      	movs	r2, #1
 800af50:	601a      	str	r2, [r3, #0]
 800af52:	e001      	b.n	800af58 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800af54:	2300      	movs	r3, #0
 800af56:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800af58:	697b      	ldr	r3, [r7, #20]
}
 800af5a:	4618      	mov	r0, r3
 800af5c:	3718      	adds	r7, #24
 800af5e:	46bd      	mov	sp, r7
 800af60:	bd80      	pop	{r7, pc}
 800af62:	bf00      	nop
 800af64:	24000378 	.word	0x24000378
 800af68:	24000364 	.word	0x24000364
 800af6c:	240002b4 	.word	0x240002b4
 800af70:	24000348 	.word	0x24000348
 800af74:	240002b0 	.word	0x240002b0
 800af78:	2400036c 	.word	0x2400036c

0800af7c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800af7c:	b480      	push	{r7}
 800af7e:	b083      	sub	sp, #12
 800af80:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800af82:	4b0c      	ldr	r3, [pc, #48]	@ (800afb4 <prvResetNextTaskUnblockTime+0x38>)
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d104      	bne.n	800af96 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800af8c:	4b0a      	ldr	r3, [pc, #40]	@ (800afb8 <prvResetNextTaskUnblockTime+0x3c>)
 800af8e:	f04f 32ff 	mov.w	r2, #4294967295
 800af92:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800af94:	e008      	b.n	800afa8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800af96:	4b07      	ldr	r3, [pc, #28]	@ (800afb4 <prvResetNextTaskUnblockTime+0x38>)
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	68db      	ldr	r3, [r3, #12]
 800af9c:	68db      	ldr	r3, [r3, #12]
 800af9e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	685b      	ldr	r3, [r3, #4]
 800afa4:	4a04      	ldr	r2, [pc, #16]	@ (800afb8 <prvResetNextTaskUnblockTime+0x3c>)
 800afa6:	6013      	str	r3, [r2, #0]
}
 800afa8:	bf00      	nop
 800afaa:	370c      	adds	r7, #12
 800afac:	46bd      	mov	sp, r7
 800afae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb2:	4770      	bx	lr
 800afb4:	24000340 	.word	0x24000340
 800afb8:	24000374 	.word	0x24000374
 800afbc:	00000000 	.word	0x00000000

0800afc0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800afc0:	4b07      	ldr	r3, [pc, #28]	@ (800afe0 <pxCurrentTCBConst2>)
 800afc2:	6819      	ldr	r1, [r3, #0]
 800afc4:	6808      	ldr	r0, [r1, #0]
 800afc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afca:	f380 8809 	msr	PSP, r0
 800afce:	f3bf 8f6f 	isb	sy
 800afd2:	f04f 0000 	mov.w	r0, #0
 800afd6:	f380 8811 	msr	BASEPRI, r0
 800afda:	4770      	bx	lr
 800afdc:	f3af 8000 	nop.w

0800afe0 <pxCurrentTCBConst2>:
 800afe0:	240002b0 	.word	0x240002b0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800afe4:	bf00      	nop
 800afe6:	bf00      	nop

0800afe8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800afe8:	b480      	push	{r7}
 800afea:	b083      	sub	sp, #12
 800afec:	af00      	add	r7, sp, #0
	__asm volatile
 800afee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aff2:	f383 8811 	msr	BASEPRI, r3
 800aff6:	f3bf 8f6f 	isb	sy
 800affa:	f3bf 8f4f 	dsb	sy
 800affe:	607b      	str	r3, [r7, #4]
}
 800b000:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b002:	4b10      	ldr	r3, [pc, #64]	@ (800b044 <vPortEnterCritical+0x5c>)
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	3301      	adds	r3, #1
 800b008:	4a0e      	ldr	r2, [pc, #56]	@ (800b044 <vPortEnterCritical+0x5c>)
 800b00a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b00c:	4b0d      	ldr	r3, [pc, #52]	@ (800b044 <vPortEnterCritical+0x5c>)
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	2b01      	cmp	r3, #1
 800b012:	d110      	bne.n	800b036 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b014:	4b0c      	ldr	r3, [pc, #48]	@ (800b048 <vPortEnterCritical+0x60>)
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	b2db      	uxtb	r3, r3
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d00b      	beq.n	800b036 <vPortEnterCritical+0x4e>
	__asm volatile
 800b01e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b022:	f383 8811 	msr	BASEPRI, r3
 800b026:	f3bf 8f6f 	isb	sy
 800b02a:	f3bf 8f4f 	dsb	sy
 800b02e:	603b      	str	r3, [r7, #0]
}
 800b030:	bf00      	nop
 800b032:	bf00      	nop
 800b034:	e7fd      	b.n	800b032 <vPortEnterCritical+0x4a>
	}
}
 800b036:	bf00      	nop
 800b038:	370c      	adds	r7, #12
 800b03a:	46bd      	mov	sp, r7
 800b03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b040:	4770      	bx	lr
 800b042:	bf00      	nop
 800b044:	24000010 	.word	0x24000010
 800b048:	e000ed04 	.word	0xe000ed04

0800b04c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b04c:	b480      	push	{r7}
 800b04e:	b083      	sub	sp, #12
 800b050:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b052:	4b12      	ldr	r3, [pc, #72]	@ (800b09c <vPortExitCritical+0x50>)
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	2b00      	cmp	r3, #0
 800b058:	d10b      	bne.n	800b072 <vPortExitCritical+0x26>
	__asm volatile
 800b05a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b05e:	f383 8811 	msr	BASEPRI, r3
 800b062:	f3bf 8f6f 	isb	sy
 800b066:	f3bf 8f4f 	dsb	sy
 800b06a:	607b      	str	r3, [r7, #4]
}
 800b06c:	bf00      	nop
 800b06e:	bf00      	nop
 800b070:	e7fd      	b.n	800b06e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b072:	4b0a      	ldr	r3, [pc, #40]	@ (800b09c <vPortExitCritical+0x50>)
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	3b01      	subs	r3, #1
 800b078:	4a08      	ldr	r2, [pc, #32]	@ (800b09c <vPortExitCritical+0x50>)
 800b07a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b07c:	4b07      	ldr	r3, [pc, #28]	@ (800b09c <vPortExitCritical+0x50>)
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	2b00      	cmp	r3, #0
 800b082:	d105      	bne.n	800b090 <vPortExitCritical+0x44>
 800b084:	2300      	movs	r3, #0
 800b086:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b088:	683b      	ldr	r3, [r7, #0]
 800b08a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b08e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b090:	bf00      	nop
 800b092:	370c      	adds	r7, #12
 800b094:	46bd      	mov	sp, r7
 800b096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b09a:	4770      	bx	lr
 800b09c:	24000010 	.word	0x24000010

0800b0a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b0a0:	f3ef 8009 	mrs	r0, PSP
 800b0a4:	f3bf 8f6f 	isb	sy
 800b0a8:	4b15      	ldr	r3, [pc, #84]	@ (800b100 <pxCurrentTCBConst>)
 800b0aa:	681a      	ldr	r2, [r3, #0]
 800b0ac:	f01e 0f10 	tst.w	lr, #16
 800b0b0:	bf08      	it	eq
 800b0b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b0b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0ba:	6010      	str	r0, [r2, #0]
 800b0bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b0c0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800b0c4:	f380 8811 	msr	BASEPRI, r0
 800b0c8:	f3bf 8f4f 	dsb	sy
 800b0cc:	f3bf 8f6f 	isb	sy
 800b0d0:	f7ff fe94 	bl	800adfc <vTaskSwitchContext>
 800b0d4:	f04f 0000 	mov.w	r0, #0
 800b0d8:	f380 8811 	msr	BASEPRI, r0
 800b0dc:	bc09      	pop	{r0, r3}
 800b0de:	6819      	ldr	r1, [r3, #0]
 800b0e0:	6808      	ldr	r0, [r1, #0]
 800b0e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0e6:	f01e 0f10 	tst.w	lr, #16
 800b0ea:	bf08      	it	eq
 800b0ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b0f0:	f380 8809 	msr	PSP, r0
 800b0f4:	f3bf 8f6f 	isb	sy
 800b0f8:	4770      	bx	lr
 800b0fa:	bf00      	nop
 800b0fc:	f3af 8000 	nop.w

0800b100 <pxCurrentTCBConst>:
 800b100:	240002b0 	.word	0x240002b0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b104:	bf00      	nop
 800b106:	bf00      	nop

0800b108 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b108:	b580      	push	{r7, lr}
 800b10a:	b082      	sub	sp, #8
 800b10c:	af00      	add	r7, sp, #0
	__asm volatile
 800b10e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b112:	f383 8811 	msr	BASEPRI, r3
 800b116:	f3bf 8f6f 	isb	sy
 800b11a:	f3bf 8f4f 	dsb	sy
 800b11e:	607b      	str	r3, [r7, #4]
}
 800b120:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b122:	f7ff fdb1 	bl	800ac88 <xTaskIncrementTick>
 800b126:	4603      	mov	r3, r0
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d003      	beq.n	800b134 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b12c:	4b06      	ldr	r3, [pc, #24]	@ (800b148 <SysTick_Handler+0x40>)
 800b12e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b132:	601a      	str	r2, [r3, #0]
 800b134:	2300      	movs	r3, #0
 800b136:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b138:	683b      	ldr	r3, [r7, #0]
 800b13a:	f383 8811 	msr	BASEPRI, r3
}
 800b13e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b140:	bf00      	nop
 800b142:	3708      	adds	r7, #8
 800b144:	46bd      	mov	sp, r7
 800b146:	bd80      	pop	{r7, pc}
 800b148:	e000ed04 	.word	0xe000ed04

0800b14c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b14c:	b580      	push	{r7, lr}
 800b14e:	b08a      	sub	sp, #40	@ 0x28
 800b150:	af00      	add	r7, sp, #0
 800b152:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b154:	2300      	movs	r3, #0
 800b156:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b158:	f7ff fcea 	bl	800ab30 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b15c:	4b5c      	ldr	r3, [pc, #368]	@ (800b2d0 <pvPortMalloc+0x184>)
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	2b00      	cmp	r3, #0
 800b162:	d101      	bne.n	800b168 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b164:	f000 f8c0 	bl	800b2e8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b168:	4b5a      	ldr	r3, [pc, #360]	@ (800b2d4 <pvPortMalloc+0x188>)
 800b16a:	681a      	ldr	r2, [r3, #0]
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	4013      	ands	r3, r2
 800b170:	2b00      	cmp	r3, #0
 800b172:	f040 8095 	bne.w	800b2a0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d01e      	beq.n	800b1ba <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800b17c:	2208      	movs	r2, #8
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	4413      	add	r3, r2
 800b182:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	f003 0307 	and.w	r3, r3, #7
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d015      	beq.n	800b1ba <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	f023 0307 	bic.w	r3, r3, #7
 800b194:	3308      	adds	r3, #8
 800b196:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	f003 0307 	and.w	r3, r3, #7
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d00b      	beq.n	800b1ba <pvPortMalloc+0x6e>
	__asm volatile
 800b1a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1a6:	f383 8811 	msr	BASEPRI, r3
 800b1aa:	f3bf 8f6f 	isb	sy
 800b1ae:	f3bf 8f4f 	dsb	sy
 800b1b2:	617b      	str	r3, [r7, #20]
}
 800b1b4:	bf00      	nop
 800b1b6:	bf00      	nop
 800b1b8:	e7fd      	b.n	800b1b6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d06f      	beq.n	800b2a0 <pvPortMalloc+0x154>
 800b1c0:	4b45      	ldr	r3, [pc, #276]	@ (800b2d8 <pvPortMalloc+0x18c>)
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	687a      	ldr	r2, [r7, #4]
 800b1c6:	429a      	cmp	r2, r3
 800b1c8:	d86a      	bhi.n	800b2a0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b1ca:	4b44      	ldr	r3, [pc, #272]	@ (800b2dc <pvPortMalloc+0x190>)
 800b1cc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b1ce:	4b43      	ldr	r3, [pc, #268]	@ (800b2dc <pvPortMalloc+0x190>)
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b1d4:	e004      	b.n	800b1e0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800b1d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1d8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b1da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b1e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1e2:	685b      	ldr	r3, [r3, #4]
 800b1e4:	687a      	ldr	r2, [r7, #4]
 800b1e6:	429a      	cmp	r2, r3
 800b1e8:	d903      	bls.n	800b1f2 <pvPortMalloc+0xa6>
 800b1ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d1f1      	bne.n	800b1d6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b1f2:	4b37      	ldr	r3, [pc, #220]	@ (800b2d0 <pvPortMalloc+0x184>)
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b1f8:	429a      	cmp	r2, r3
 800b1fa:	d051      	beq.n	800b2a0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b1fc:	6a3b      	ldr	r3, [r7, #32]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	2208      	movs	r2, #8
 800b202:	4413      	add	r3, r2
 800b204:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b208:	681a      	ldr	r2, [r3, #0]
 800b20a:	6a3b      	ldr	r3, [r7, #32]
 800b20c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b20e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b210:	685a      	ldr	r2, [r3, #4]
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	1ad2      	subs	r2, r2, r3
 800b216:	2308      	movs	r3, #8
 800b218:	005b      	lsls	r3, r3, #1
 800b21a:	429a      	cmp	r2, r3
 800b21c:	d920      	bls.n	800b260 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b21e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	4413      	add	r3, r2
 800b224:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b226:	69bb      	ldr	r3, [r7, #24]
 800b228:	f003 0307 	and.w	r3, r3, #7
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d00b      	beq.n	800b248 <pvPortMalloc+0xfc>
	__asm volatile
 800b230:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b234:	f383 8811 	msr	BASEPRI, r3
 800b238:	f3bf 8f6f 	isb	sy
 800b23c:	f3bf 8f4f 	dsb	sy
 800b240:	613b      	str	r3, [r7, #16]
}
 800b242:	bf00      	nop
 800b244:	bf00      	nop
 800b246:	e7fd      	b.n	800b244 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b24a:	685a      	ldr	r2, [r3, #4]
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	1ad2      	subs	r2, r2, r3
 800b250:	69bb      	ldr	r3, [r7, #24]
 800b252:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b256:	687a      	ldr	r2, [r7, #4]
 800b258:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b25a:	69b8      	ldr	r0, [r7, #24]
 800b25c:	f000 f8a6 	bl	800b3ac <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b260:	4b1d      	ldr	r3, [pc, #116]	@ (800b2d8 <pvPortMalloc+0x18c>)
 800b262:	681a      	ldr	r2, [r3, #0]
 800b264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b266:	685b      	ldr	r3, [r3, #4]
 800b268:	1ad3      	subs	r3, r2, r3
 800b26a:	4a1b      	ldr	r2, [pc, #108]	@ (800b2d8 <pvPortMalloc+0x18c>)
 800b26c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b26e:	4b1a      	ldr	r3, [pc, #104]	@ (800b2d8 <pvPortMalloc+0x18c>)
 800b270:	681a      	ldr	r2, [r3, #0]
 800b272:	4b1b      	ldr	r3, [pc, #108]	@ (800b2e0 <pvPortMalloc+0x194>)
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	429a      	cmp	r2, r3
 800b278:	d203      	bcs.n	800b282 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b27a:	4b17      	ldr	r3, [pc, #92]	@ (800b2d8 <pvPortMalloc+0x18c>)
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	4a18      	ldr	r2, [pc, #96]	@ (800b2e0 <pvPortMalloc+0x194>)
 800b280:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b284:	685a      	ldr	r2, [r3, #4]
 800b286:	4b13      	ldr	r3, [pc, #76]	@ (800b2d4 <pvPortMalloc+0x188>)
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	431a      	orrs	r2, r3
 800b28c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b28e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b292:	2200      	movs	r2, #0
 800b294:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b296:	4b13      	ldr	r3, [pc, #76]	@ (800b2e4 <pvPortMalloc+0x198>)
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	3301      	adds	r3, #1
 800b29c:	4a11      	ldr	r2, [pc, #68]	@ (800b2e4 <pvPortMalloc+0x198>)
 800b29e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b2a0:	f7ff fc54 	bl	800ab4c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b2a4:	69fb      	ldr	r3, [r7, #28]
 800b2a6:	f003 0307 	and.w	r3, r3, #7
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d00b      	beq.n	800b2c6 <pvPortMalloc+0x17a>
	__asm volatile
 800b2ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2b2:	f383 8811 	msr	BASEPRI, r3
 800b2b6:	f3bf 8f6f 	isb	sy
 800b2ba:	f3bf 8f4f 	dsb	sy
 800b2be:	60fb      	str	r3, [r7, #12]
}
 800b2c0:	bf00      	nop
 800b2c2:	bf00      	nop
 800b2c4:	e7fd      	b.n	800b2c2 <pvPortMalloc+0x176>
	return pvReturn;
 800b2c6:	69fb      	ldr	r3, [r7, #28]
}
 800b2c8:	4618      	mov	r0, r3
 800b2ca:	3728      	adds	r7, #40	@ 0x28
 800b2cc:	46bd      	mov	sp, r7
 800b2ce:	bd80      	pop	{r7, pc}
 800b2d0:	24003f84 	.word	0x24003f84
 800b2d4:	24003f94 	.word	0x24003f94
 800b2d8:	24003f88 	.word	0x24003f88
 800b2dc:	24003f7c 	.word	0x24003f7c
 800b2e0:	24003f8c 	.word	0x24003f8c
 800b2e4:	24003f90 	.word	0x24003f90

0800b2e8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b2e8:	b480      	push	{r7}
 800b2ea:	b085      	sub	sp, #20
 800b2ec:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b2ee:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800b2f2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b2f4:	4b27      	ldr	r3, [pc, #156]	@ (800b394 <prvHeapInit+0xac>)
 800b2f6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	f003 0307 	and.w	r3, r3, #7
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d00c      	beq.n	800b31c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	3307      	adds	r3, #7
 800b306:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	f023 0307 	bic.w	r3, r3, #7
 800b30e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b310:	68ba      	ldr	r2, [r7, #8]
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	1ad3      	subs	r3, r2, r3
 800b316:	4a1f      	ldr	r2, [pc, #124]	@ (800b394 <prvHeapInit+0xac>)
 800b318:	4413      	add	r3, r2
 800b31a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b320:	4a1d      	ldr	r2, [pc, #116]	@ (800b398 <prvHeapInit+0xb0>)
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b326:	4b1c      	ldr	r3, [pc, #112]	@ (800b398 <prvHeapInit+0xb0>)
 800b328:	2200      	movs	r2, #0
 800b32a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	68ba      	ldr	r2, [r7, #8]
 800b330:	4413      	add	r3, r2
 800b332:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b334:	2208      	movs	r2, #8
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	1a9b      	subs	r3, r3, r2
 800b33a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	f023 0307 	bic.w	r3, r3, #7
 800b342:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	4a15      	ldr	r2, [pc, #84]	@ (800b39c <prvHeapInit+0xb4>)
 800b348:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b34a:	4b14      	ldr	r3, [pc, #80]	@ (800b39c <prvHeapInit+0xb4>)
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	2200      	movs	r2, #0
 800b350:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b352:	4b12      	ldr	r3, [pc, #72]	@ (800b39c <prvHeapInit+0xb4>)
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	2200      	movs	r2, #0
 800b358:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b35e:	683b      	ldr	r3, [r7, #0]
 800b360:	68fa      	ldr	r2, [r7, #12]
 800b362:	1ad2      	subs	r2, r2, r3
 800b364:	683b      	ldr	r3, [r7, #0]
 800b366:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b368:	4b0c      	ldr	r3, [pc, #48]	@ (800b39c <prvHeapInit+0xb4>)
 800b36a:	681a      	ldr	r2, [r3, #0]
 800b36c:	683b      	ldr	r3, [r7, #0]
 800b36e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b370:	683b      	ldr	r3, [r7, #0]
 800b372:	685b      	ldr	r3, [r3, #4]
 800b374:	4a0a      	ldr	r2, [pc, #40]	@ (800b3a0 <prvHeapInit+0xb8>)
 800b376:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b378:	683b      	ldr	r3, [r7, #0]
 800b37a:	685b      	ldr	r3, [r3, #4]
 800b37c:	4a09      	ldr	r2, [pc, #36]	@ (800b3a4 <prvHeapInit+0xbc>)
 800b37e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b380:	4b09      	ldr	r3, [pc, #36]	@ (800b3a8 <prvHeapInit+0xc0>)
 800b382:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800b386:	601a      	str	r2, [r3, #0]
}
 800b388:	bf00      	nop
 800b38a:	3714      	adds	r7, #20
 800b38c:	46bd      	mov	sp, r7
 800b38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b392:	4770      	bx	lr
 800b394:	2400037c 	.word	0x2400037c
 800b398:	24003f7c 	.word	0x24003f7c
 800b39c:	24003f84 	.word	0x24003f84
 800b3a0:	24003f8c 	.word	0x24003f8c
 800b3a4:	24003f88 	.word	0x24003f88
 800b3a8:	24003f94 	.word	0x24003f94

0800b3ac <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b3ac:	b480      	push	{r7}
 800b3ae:	b085      	sub	sp, #20
 800b3b0:	af00      	add	r7, sp, #0
 800b3b2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b3b4:	4b28      	ldr	r3, [pc, #160]	@ (800b458 <prvInsertBlockIntoFreeList+0xac>)
 800b3b6:	60fb      	str	r3, [r7, #12]
 800b3b8:	e002      	b.n	800b3c0 <prvInsertBlockIntoFreeList+0x14>
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	60fb      	str	r3, [r7, #12]
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	687a      	ldr	r2, [r7, #4]
 800b3c6:	429a      	cmp	r2, r3
 800b3c8:	d8f7      	bhi.n	800b3ba <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	685b      	ldr	r3, [r3, #4]
 800b3d2:	68ba      	ldr	r2, [r7, #8]
 800b3d4:	4413      	add	r3, r2
 800b3d6:	687a      	ldr	r2, [r7, #4]
 800b3d8:	429a      	cmp	r2, r3
 800b3da:	d108      	bne.n	800b3ee <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	685a      	ldr	r2, [r3, #4]
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	685b      	ldr	r3, [r3, #4]
 800b3e4:	441a      	add	r2, r3
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	685b      	ldr	r3, [r3, #4]
 800b3f6:	68ba      	ldr	r2, [r7, #8]
 800b3f8:	441a      	add	r2, r3
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	429a      	cmp	r2, r3
 800b400:	d118      	bne.n	800b434 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	681a      	ldr	r2, [r3, #0]
 800b406:	4b15      	ldr	r3, [pc, #84]	@ (800b45c <prvInsertBlockIntoFreeList+0xb0>)
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	429a      	cmp	r2, r3
 800b40c:	d00d      	beq.n	800b42a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	685a      	ldr	r2, [r3, #4]
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	685b      	ldr	r3, [r3, #4]
 800b418:	441a      	add	r2, r3
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	681a      	ldr	r2, [r3, #0]
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	601a      	str	r2, [r3, #0]
 800b428:	e008      	b.n	800b43c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b42a:	4b0c      	ldr	r3, [pc, #48]	@ (800b45c <prvInsertBlockIntoFreeList+0xb0>)
 800b42c:	681a      	ldr	r2, [r3, #0]
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	601a      	str	r2, [r3, #0]
 800b432:	e003      	b.n	800b43c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	681a      	ldr	r2, [r3, #0]
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b43c:	68fa      	ldr	r2, [r7, #12]
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	429a      	cmp	r2, r3
 800b442:	d002      	beq.n	800b44a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	687a      	ldr	r2, [r7, #4]
 800b448:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b44a:	bf00      	nop
 800b44c:	3714      	adds	r7, #20
 800b44e:	46bd      	mov	sp, r7
 800b450:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b454:	4770      	bx	lr
 800b456:	bf00      	nop
 800b458:	24003f7c 	.word	0x24003f7c
 800b45c:	24003f84 	.word	0x24003f84

0800b460 <malloc>:
 800b460:	4b02      	ldr	r3, [pc, #8]	@ (800b46c <malloc+0xc>)
 800b462:	4601      	mov	r1, r0
 800b464:	6818      	ldr	r0, [r3, #0]
 800b466:	f000 b825 	b.w	800b4b4 <_malloc_r>
 800b46a:	bf00      	nop
 800b46c:	24000014 	.word	0x24000014

0800b470 <sbrk_aligned>:
 800b470:	b570      	push	{r4, r5, r6, lr}
 800b472:	4e0f      	ldr	r6, [pc, #60]	@ (800b4b0 <sbrk_aligned+0x40>)
 800b474:	460c      	mov	r4, r1
 800b476:	6831      	ldr	r1, [r6, #0]
 800b478:	4605      	mov	r5, r0
 800b47a:	b911      	cbnz	r1, 800b482 <sbrk_aligned+0x12>
 800b47c:	f000 f8e8 	bl	800b650 <_sbrk_r>
 800b480:	6030      	str	r0, [r6, #0]
 800b482:	4621      	mov	r1, r4
 800b484:	4628      	mov	r0, r5
 800b486:	f000 f8e3 	bl	800b650 <_sbrk_r>
 800b48a:	1c43      	adds	r3, r0, #1
 800b48c:	d103      	bne.n	800b496 <sbrk_aligned+0x26>
 800b48e:	f04f 34ff 	mov.w	r4, #4294967295
 800b492:	4620      	mov	r0, r4
 800b494:	bd70      	pop	{r4, r5, r6, pc}
 800b496:	1cc4      	adds	r4, r0, #3
 800b498:	f024 0403 	bic.w	r4, r4, #3
 800b49c:	42a0      	cmp	r0, r4
 800b49e:	d0f8      	beq.n	800b492 <sbrk_aligned+0x22>
 800b4a0:	1a21      	subs	r1, r4, r0
 800b4a2:	4628      	mov	r0, r5
 800b4a4:	f000 f8d4 	bl	800b650 <_sbrk_r>
 800b4a8:	3001      	adds	r0, #1
 800b4aa:	d1f2      	bne.n	800b492 <sbrk_aligned+0x22>
 800b4ac:	e7ef      	b.n	800b48e <sbrk_aligned+0x1e>
 800b4ae:	bf00      	nop
 800b4b0:	24003f98 	.word	0x24003f98

0800b4b4 <_malloc_r>:
 800b4b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b4b8:	1ccd      	adds	r5, r1, #3
 800b4ba:	f025 0503 	bic.w	r5, r5, #3
 800b4be:	3508      	adds	r5, #8
 800b4c0:	2d0c      	cmp	r5, #12
 800b4c2:	bf38      	it	cc
 800b4c4:	250c      	movcc	r5, #12
 800b4c6:	2d00      	cmp	r5, #0
 800b4c8:	4606      	mov	r6, r0
 800b4ca:	db01      	blt.n	800b4d0 <_malloc_r+0x1c>
 800b4cc:	42a9      	cmp	r1, r5
 800b4ce:	d904      	bls.n	800b4da <_malloc_r+0x26>
 800b4d0:	230c      	movs	r3, #12
 800b4d2:	6033      	str	r3, [r6, #0]
 800b4d4:	2000      	movs	r0, #0
 800b4d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b4da:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b5b0 <_malloc_r+0xfc>
 800b4de:	f000 f869 	bl	800b5b4 <__malloc_lock>
 800b4e2:	f8d8 3000 	ldr.w	r3, [r8]
 800b4e6:	461c      	mov	r4, r3
 800b4e8:	bb44      	cbnz	r4, 800b53c <_malloc_r+0x88>
 800b4ea:	4629      	mov	r1, r5
 800b4ec:	4630      	mov	r0, r6
 800b4ee:	f7ff ffbf 	bl	800b470 <sbrk_aligned>
 800b4f2:	1c43      	adds	r3, r0, #1
 800b4f4:	4604      	mov	r4, r0
 800b4f6:	d158      	bne.n	800b5aa <_malloc_r+0xf6>
 800b4f8:	f8d8 4000 	ldr.w	r4, [r8]
 800b4fc:	4627      	mov	r7, r4
 800b4fe:	2f00      	cmp	r7, #0
 800b500:	d143      	bne.n	800b58a <_malloc_r+0xd6>
 800b502:	2c00      	cmp	r4, #0
 800b504:	d04b      	beq.n	800b59e <_malloc_r+0xea>
 800b506:	6823      	ldr	r3, [r4, #0]
 800b508:	4639      	mov	r1, r7
 800b50a:	4630      	mov	r0, r6
 800b50c:	eb04 0903 	add.w	r9, r4, r3
 800b510:	f000 f89e 	bl	800b650 <_sbrk_r>
 800b514:	4581      	cmp	r9, r0
 800b516:	d142      	bne.n	800b59e <_malloc_r+0xea>
 800b518:	6821      	ldr	r1, [r4, #0]
 800b51a:	1a6d      	subs	r5, r5, r1
 800b51c:	4629      	mov	r1, r5
 800b51e:	4630      	mov	r0, r6
 800b520:	f7ff ffa6 	bl	800b470 <sbrk_aligned>
 800b524:	3001      	adds	r0, #1
 800b526:	d03a      	beq.n	800b59e <_malloc_r+0xea>
 800b528:	6823      	ldr	r3, [r4, #0]
 800b52a:	442b      	add	r3, r5
 800b52c:	6023      	str	r3, [r4, #0]
 800b52e:	f8d8 3000 	ldr.w	r3, [r8]
 800b532:	685a      	ldr	r2, [r3, #4]
 800b534:	bb62      	cbnz	r2, 800b590 <_malloc_r+0xdc>
 800b536:	f8c8 7000 	str.w	r7, [r8]
 800b53a:	e00f      	b.n	800b55c <_malloc_r+0xa8>
 800b53c:	6822      	ldr	r2, [r4, #0]
 800b53e:	1b52      	subs	r2, r2, r5
 800b540:	d420      	bmi.n	800b584 <_malloc_r+0xd0>
 800b542:	2a0b      	cmp	r2, #11
 800b544:	d917      	bls.n	800b576 <_malloc_r+0xc2>
 800b546:	1961      	adds	r1, r4, r5
 800b548:	42a3      	cmp	r3, r4
 800b54a:	6025      	str	r5, [r4, #0]
 800b54c:	bf18      	it	ne
 800b54e:	6059      	strne	r1, [r3, #4]
 800b550:	6863      	ldr	r3, [r4, #4]
 800b552:	bf08      	it	eq
 800b554:	f8c8 1000 	streq.w	r1, [r8]
 800b558:	5162      	str	r2, [r4, r5]
 800b55a:	604b      	str	r3, [r1, #4]
 800b55c:	4630      	mov	r0, r6
 800b55e:	f000 f82f 	bl	800b5c0 <__malloc_unlock>
 800b562:	f104 000b 	add.w	r0, r4, #11
 800b566:	1d23      	adds	r3, r4, #4
 800b568:	f020 0007 	bic.w	r0, r0, #7
 800b56c:	1ac2      	subs	r2, r0, r3
 800b56e:	bf1c      	itt	ne
 800b570:	1a1b      	subne	r3, r3, r0
 800b572:	50a3      	strne	r3, [r4, r2]
 800b574:	e7af      	b.n	800b4d6 <_malloc_r+0x22>
 800b576:	6862      	ldr	r2, [r4, #4]
 800b578:	42a3      	cmp	r3, r4
 800b57a:	bf0c      	ite	eq
 800b57c:	f8c8 2000 	streq.w	r2, [r8]
 800b580:	605a      	strne	r2, [r3, #4]
 800b582:	e7eb      	b.n	800b55c <_malloc_r+0xa8>
 800b584:	4623      	mov	r3, r4
 800b586:	6864      	ldr	r4, [r4, #4]
 800b588:	e7ae      	b.n	800b4e8 <_malloc_r+0x34>
 800b58a:	463c      	mov	r4, r7
 800b58c:	687f      	ldr	r7, [r7, #4]
 800b58e:	e7b6      	b.n	800b4fe <_malloc_r+0x4a>
 800b590:	461a      	mov	r2, r3
 800b592:	685b      	ldr	r3, [r3, #4]
 800b594:	42a3      	cmp	r3, r4
 800b596:	d1fb      	bne.n	800b590 <_malloc_r+0xdc>
 800b598:	2300      	movs	r3, #0
 800b59a:	6053      	str	r3, [r2, #4]
 800b59c:	e7de      	b.n	800b55c <_malloc_r+0xa8>
 800b59e:	230c      	movs	r3, #12
 800b5a0:	6033      	str	r3, [r6, #0]
 800b5a2:	4630      	mov	r0, r6
 800b5a4:	f000 f80c 	bl	800b5c0 <__malloc_unlock>
 800b5a8:	e794      	b.n	800b4d4 <_malloc_r+0x20>
 800b5aa:	6005      	str	r5, [r0, #0]
 800b5ac:	e7d6      	b.n	800b55c <_malloc_r+0xa8>
 800b5ae:	bf00      	nop
 800b5b0:	24003f9c 	.word	0x24003f9c

0800b5b4 <__malloc_lock>:
 800b5b4:	4801      	ldr	r0, [pc, #4]	@ (800b5bc <__malloc_lock+0x8>)
 800b5b6:	f000 b885 	b.w	800b6c4 <__retarget_lock_acquire_recursive>
 800b5ba:	bf00      	nop
 800b5bc:	240040dc 	.word	0x240040dc

0800b5c0 <__malloc_unlock>:
 800b5c0:	4801      	ldr	r0, [pc, #4]	@ (800b5c8 <__malloc_unlock+0x8>)
 800b5c2:	f000 b880 	b.w	800b6c6 <__retarget_lock_release_recursive>
 800b5c6:	bf00      	nop
 800b5c8:	240040dc 	.word	0x240040dc

0800b5cc <_vsniprintf_r>:
 800b5cc:	b530      	push	{r4, r5, lr}
 800b5ce:	4614      	mov	r4, r2
 800b5d0:	2c00      	cmp	r4, #0
 800b5d2:	b09b      	sub	sp, #108	@ 0x6c
 800b5d4:	4605      	mov	r5, r0
 800b5d6:	461a      	mov	r2, r3
 800b5d8:	da05      	bge.n	800b5e6 <_vsniprintf_r+0x1a>
 800b5da:	238b      	movs	r3, #139	@ 0x8b
 800b5dc:	6003      	str	r3, [r0, #0]
 800b5de:	f04f 30ff 	mov.w	r0, #4294967295
 800b5e2:	b01b      	add	sp, #108	@ 0x6c
 800b5e4:	bd30      	pop	{r4, r5, pc}
 800b5e6:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800b5ea:	f8ad 300c 	strh.w	r3, [sp, #12]
 800b5ee:	bf14      	ite	ne
 800b5f0:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b5f4:	4623      	moveq	r3, r4
 800b5f6:	9302      	str	r3, [sp, #8]
 800b5f8:	9305      	str	r3, [sp, #20]
 800b5fa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b5fe:	9100      	str	r1, [sp, #0]
 800b600:	9104      	str	r1, [sp, #16]
 800b602:	f8ad 300e 	strh.w	r3, [sp, #14]
 800b606:	4669      	mov	r1, sp
 800b608:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800b60a:	f000 f911 	bl	800b830 <_svfiprintf_r>
 800b60e:	1c43      	adds	r3, r0, #1
 800b610:	bfbc      	itt	lt
 800b612:	238b      	movlt	r3, #139	@ 0x8b
 800b614:	602b      	strlt	r3, [r5, #0]
 800b616:	2c00      	cmp	r4, #0
 800b618:	d0e3      	beq.n	800b5e2 <_vsniprintf_r+0x16>
 800b61a:	9b00      	ldr	r3, [sp, #0]
 800b61c:	2200      	movs	r2, #0
 800b61e:	701a      	strb	r2, [r3, #0]
 800b620:	e7df      	b.n	800b5e2 <_vsniprintf_r+0x16>
	...

0800b624 <vsniprintf>:
 800b624:	b507      	push	{r0, r1, r2, lr}
 800b626:	9300      	str	r3, [sp, #0]
 800b628:	4613      	mov	r3, r2
 800b62a:	460a      	mov	r2, r1
 800b62c:	4601      	mov	r1, r0
 800b62e:	4803      	ldr	r0, [pc, #12]	@ (800b63c <vsniprintf+0x18>)
 800b630:	6800      	ldr	r0, [r0, #0]
 800b632:	f7ff ffcb 	bl	800b5cc <_vsniprintf_r>
 800b636:	b003      	add	sp, #12
 800b638:	f85d fb04 	ldr.w	pc, [sp], #4
 800b63c:	24000014 	.word	0x24000014

0800b640 <memset>:
 800b640:	4402      	add	r2, r0
 800b642:	4603      	mov	r3, r0
 800b644:	4293      	cmp	r3, r2
 800b646:	d100      	bne.n	800b64a <memset+0xa>
 800b648:	4770      	bx	lr
 800b64a:	f803 1b01 	strb.w	r1, [r3], #1
 800b64e:	e7f9      	b.n	800b644 <memset+0x4>

0800b650 <_sbrk_r>:
 800b650:	b538      	push	{r3, r4, r5, lr}
 800b652:	4d06      	ldr	r5, [pc, #24]	@ (800b66c <_sbrk_r+0x1c>)
 800b654:	2300      	movs	r3, #0
 800b656:	4604      	mov	r4, r0
 800b658:	4608      	mov	r0, r1
 800b65a:	602b      	str	r3, [r5, #0]
 800b65c:	f7f5 fba8 	bl	8000db0 <_sbrk>
 800b660:	1c43      	adds	r3, r0, #1
 800b662:	d102      	bne.n	800b66a <_sbrk_r+0x1a>
 800b664:	682b      	ldr	r3, [r5, #0]
 800b666:	b103      	cbz	r3, 800b66a <_sbrk_r+0x1a>
 800b668:	6023      	str	r3, [r4, #0]
 800b66a:	bd38      	pop	{r3, r4, r5, pc}
 800b66c:	240040d8 	.word	0x240040d8

0800b670 <__errno>:
 800b670:	4b01      	ldr	r3, [pc, #4]	@ (800b678 <__errno+0x8>)
 800b672:	6818      	ldr	r0, [r3, #0]
 800b674:	4770      	bx	lr
 800b676:	bf00      	nop
 800b678:	24000014 	.word	0x24000014

0800b67c <__libc_init_array>:
 800b67c:	b570      	push	{r4, r5, r6, lr}
 800b67e:	4d0d      	ldr	r5, [pc, #52]	@ (800b6b4 <__libc_init_array+0x38>)
 800b680:	4c0d      	ldr	r4, [pc, #52]	@ (800b6b8 <__libc_init_array+0x3c>)
 800b682:	1b64      	subs	r4, r4, r5
 800b684:	10a4      	asrs	r4, r4, #2
 800b686:	2600      	movs	r6, #0
 800b688:	42a6      	cmp	r6, r4
 800b68a:	d109      	bne.n	800b6a0 <__libc_init_array+0x24>
 800b68c:	4d0b      	ldr	r5, [pc, #44]	@ (800b6bc <__libc_init_array+0x40>)
 800b68e:	4c0c      	ldr	r4, [pc, #48]	@ (800b6c0 <__libc_init_array+0x44>)
 800b690:	f000 fba8 	bl	800bde4 <_init>
 800b694:	1b64      	subs	r4, r4, r5
 800b696:	10a4      	asrs	r4, r4, #2
 800b698:	2600      	movs	r6, #0
 800b69a:	42a6      	cmp	r6, r4
 800b69c:	d105      	bne.n	800b6aa <__libc_init_array+0x2e>
 800b69e:	bd70      	pop	{r4, r5, r6, pc}
 800b6a0:	f855 3b04 	ldr.w	r3, [r5], #4
 800b6a4:	4798      	blx	r3
 800b6a6:	3601      	adds	r6, #1
 800b6a8:	e7ee      	b.n	800b688 <__libc_init_array+0xc>
 800b6aa:	f855 3b04 	ldr.w	r3, [r5], #4
 800b6ae:	4798      	blx	r3
 800b6b0:	3601      	adds	r6, #1
 800b6b2:	e7f2      	b.n	800b69a <__libc_init_array+0x1e>
 800b6b4:	0800be90 	.word	0x0800be90
 800b6b8:	0800be90 	.word	0x0800be90
 800b6bc:	0800be90 	.word	0x0800be90
 800b6c0:	0800be94 	.word	0x0800be94

0800b6c4 <__retarget_lock_acquire_recursive>:
 800b6c4:	4770      	bx	lr

0800b6c6 <__retarget_lock_release_recursive>:
 800b6c6:	4770      	bx	lr

0800b6c8 <memcpy>:
 800b6c8:	440a      	add	r2, r1
 800b6ca:	4291      	cmp	r1, r2
 800b6cc:	f100 33ff 	add.w	r3, r0, #4294967295
 800b6d0:	d100      	bne.n	800b6d4 <memcpy+0xc>
 800b6d2:	4770      	bx	lr
 800b6d4:	b510      	push	{r4, lr}
 800b6d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b6da:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b6de:	4291      	cmp	r1, r2
 800b6e0:	d1f9      	bne.n	800b6d6 <memcpy+0xe>
 800b6e2:	bd10      	pop	{r4, pc}

0800b6e4 <_free_r>:
 800b6e4:	b538      	push	{r3, r4, r5, lr}
 800b6e6:	4605      	mov	r5, r0
 800b6e8:	2900      	cmp	r1, #0
 800b6ea:	d041      	beq.n	800b770 <_free_r+0x8c>
 800b6ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b6f0:	1f0c      	subs	r4, r1, #4
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	bfb8      	it	lt
 800b6f6:	18e4      	addlt	r4, r4, r3
 800b6f8:	f7ff ff5c 	bl	800b5b4 <__malloc_lock>
 800b6fc:	4a1d      	ldr	r2, [pc, #116]	@ (800b774 <_free_r+0x90>)
 800b6fe:	6813      	ldr	r3, [r2, #0]
 800b700:	b933      	cbnz	r3, 800b710 <_free_r+0x2c>
 800b702:	6063      	str	r3, [r4, #4]
 800b704:	6014      	str	r4, [r2, #0]
 800b706:	4628      	mov	r0, r5
 800b708:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b70c:	f7ff bf58 	b.w	800b5c0 <__malloc_unlock>
 800b710:	42a3      	cmp	r3, r4
 800b712:	d908      	bls.n	800b726 <_free_r+0x42>
 800b714:	6820      	ldr	r0, [r4, #0]
 800b716:	1821      	adds	r1, r4, r0
 800b718:	428b      	cmp	r3, r1
 800b71a:	bf01      	itttt	eq
 800b71c:	6819      	ldreq	r1, [r3, #0]
 800b71e:	685b      	ldreq	r3, [r3, #4]
 800b720:	1809      	addeq	r1, r1, r0
 800b722:	6021      	streq	r1, [r4, #0]
 800b724:	e7ed      	b.n	800b702 <_free_r+0x1e>
 800b726:	461a      	mov	r2, r3
 800b728:	685b      	ldr	r3, [r3, #4]
 800b72a:	b10b      	cbz	r3, 800b730 <_free_r+0x4c>
 800b72c:	42a3      	cmp	r3, r4
 800b72e:	d9fa      	bls.n	800b726 <_free_r+0x42>
 800b730:	6811      	ldr	r1, [r2, #0]
 800b732:	1850      	adds	r0, r2, r1
 800b734:	42a0      	cmp	r0, r4
 800b736:	d10b      	bne.n	800b750 <_free_r+0x6c>
 800b738:	6820      	ldr	r0, [r4, #0]
 800b73a:	4401      	add	r1, r0
 800b73c:	1850      	adds	r0, r2, r1
 800b73e:	4283      	cmp	r3, r0
 800b740:	6011      	str	r1, [r2, #0]
 800b742:	d1e0      	bne.n	800b706 <_free_r+0x22>
 800b744:	6818      	ldr	r0, [r3, #0]
 800b746:	685b      	ldr	r3, [r3, #4]
 800b748:	6053      	str	r3, [r2, #4]
 800b74a:	4408      	add	r0, r1
 800b74c:	6010      	str	r0, [r2, #0]
 800b74e:	e7da      	b.n	800b706 <_free_r+0x22>
 800b750:	d902      	bls.n	800b758 <_free_r+0x74>
 800b752:	230c      	movs	r3, #12
 800b754:	602b      	str	r3, [r5, #0]
 800b756:	e7d6      	b.n	800b706 <_free_r+0x22>
 800b758:	6820      	ldr	r0, [r4, #0]
 800b75a:	1821      	adds	r1, r4, r0
 800b75c:	428b      	cmp	r3, r1
 800b75e:	bf04      	itt	eq
 800b760:	6819      	ldreq	r1, [r3, #0]
 800b762:	685b      	ldreq	r3, [r3, #4]
 800b764:	6063      	str	r3, [r4, #4]
 800b766:	bf04      	itt	eq
 800b768:	1809      	addeq	r1, r1, r0
 800b76a:	6021      	streq	r1, [r4, #0]
 800b76c:	6054      	str	r4, [r2, #4]
 800b76e:	e7ca      	b.n	800b706 <_free_r+0x22>
 800b770:	bd38      	pop	{r3, r4, r5, pc}
 800b772:	bf00      	nop
 800b774:	24003f9c 	.word	0x24003f9c

0800b778 <__ssputs_r>:
 800b778:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b77c:	688e      	ldr	r6, [r1, #8]
 800b77e:	461f      	mov	r7, r3
 800b780:	42be      	cmp	r6, r7
 800b782:	680b      	ldr	r3, [r1, #0]
 800b784:	4682      	mov	sl, r0
 800b786:	460c      	mov	r4, r1
 800b788:	4690      	mov	r8, r2
 800b78a:	d82d      	bhi.n	800b7e8 <__ssputs_r+0x70>
 800b78c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b790:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b794:	d026      	beq.n	800b7e4 <__ssputs_r+0x6c>
 800b796:	6965      	ldr	r5, [r4, #20]
 800b798:	6909      	ldr	r1, [r1, #16]
 800b79a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b79e:	eba3 0901 	sub.w	r9, r3, r1
 800b7a2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b7a6:	1c7b      	adds	r3, r7, #1
 800b7a8:	444b      	add	r3, r9
 800b7aa:	106d      	asrs	r5, r5, #1
 800b7ac:	429d      	cmp	r5, r3
 800b7ae:	bf38      	it	cc
 800b7b0:	461d      	movcc	r5, r3
 800b7b2:	0553      	lsls	r3, r2, #21
 800b7b4:	d527      	bpl.n	800b806 <__ssputs_r+0x8e>
 800b7b6:	4629      	mov	r1, r5
 800b7b8:	f7ff fe7c 	bl	800b4b4 <_malloc_r>
 800b7bc:	4606      	mov	r6, r0
 800b7be:	b360      	cbz	r0, 800b81a <__ssputs_r+0xa2>
 800b7c0:	6921      	ldr	r1, [r4, #16]
 800b7c2:	464a      	mov	r2, r9
 800b7c4:	f7ff ff80 	bl	800b6c8 <memcpy>
 800b7c8:	89a3      	ldrh	r3, [r4, #12]
 800b7ca:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b7ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b7d2:	81a3      	strh	r3, [r4, #12]
 800b7d4:	6126      	str	r6, [r4, #16]
 800b7d6:	6165      	str	r5, [r4, #20]
 800b7d8:	444e      	add	r6, r9
 800b7da:	eba5 0509 	sub.w	r5, r5, r9
 800b7de:	6026      	str	r6, [r4, #0]
 800b7e0:	60a5      	str	r5, [r4, #8]
 800b7e2:	463e      	mov	r6, r7
 800b7e4:	42be      	cmp	r6, r7
 800b7e6:	d900      	bls.n	800b7ea <__ssputs_r+0x72>
 800b7e8:	463e      	mov	r6, r7
 800b7ea:	6820      	ldr	r0, [r4, #0]
 800b7ec:	4632      	mov	r2, r6
 800b7ee:	4641      	mov	r1, r8
 800b7f0:	f000 faa8 	bl	800bd44 <memmove>
 800b7f4:	68a3      	ldr	r3, [r4, #8]
 800b7f6:	1b9b      	subs	r3, r3, r6
 800b7f8:	60a3      	str	r3, [r4, #8]
 800b7fa:	6823      	ldr	r3, [r4, #0]
 800b7fc:	4433      	add	r3, r6
 800b7fe:	6023      	str	r3, [r4, #0]
 800b800:	2000      	movs	r0, #0
 800b802:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b806:	462a      	mov	r2, r5
 800b808:	f000 fab6 	bl	800bd78 <_realloc_r>
 800b80c:	4606      	mov	r6, r0
 800b80e:	2800      	cmp	r0, #0
 800b810:	d1e0      	bne.n	800b7d4 <__ssputs_r+0x5c>
 800b812:	6921      	ldr	r1, [r4, #16]
 800b814:	4650      	mov	r0, sl
 800b816:	f7ff ff65 	bl	800b6e4 <_free_r>
 800b81a:	230c      	movs	r3, #12
 800b81c:	f8ca 3000 	str.w	r3, [sl]
 800b820:	89a3      	ldrh	r3, [r4, #12]
 800b822:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b826:	81a3      	strh	r3, [r4, #12]
 800b828:	f04f 30ff 	mov.w	r0, #4294967295
 800b82c:	e7e9      	b.n	800b802 <__ssputs_r+0x8a>
	...

0800b830 <_svfiprintf_r>:
 800b830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b834:	4698      	mov	r8, r3
 800b836:	898b      	ldrh	r3, [r1, #12]
 800b838:	061b      	lsls	r3, r3, #24
 800b83a:	b09d      	sub	sp, #116	@ 0x74
 800b83c:	4607      	mov	r7, r0
 800b83e:	460d      	mov	r5, r1
 800b840:	4614      	mov	r4, r2
 800b842:	d510      	bpl.n	800b866 <_svfiprintf_r+0x36>
 800b844:	690b      	ldr	r3, [r1, #16]
 800b846:	b973      	cbnz	r3, 800b866 <_svfiprintf_r+0x36>
 800b848:	2140      	movs	r1, #64	@ 0x40
 800b84a:	f7ff fe33 	bl	800b4b4 <_malloc_r>
 800b84e:	6028      	str	r0, [r5, #0]
 800b850:	6128      	str	r0, [r5, #16]
 800b852:	b930      	cbnz	r0, 800b862 <_svfiprintf_r+0x32>
 800b854:	230c      	movs	r3, #12
 800b856:	603b      	str	r3, [r7, #0]
 800b858:	f04f 30ff 	mov.w	r0, #4294967295
 800b85c:	b01d      	add	sp, #116	@ 0x74
 800b85e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b862:	2340      	movs	r3, #64	@ 0x40
 800b864:	616b      	str	r3, [r5, #20]
 800b866:	2300      	movs	r3, #0
 800b868:	9309      	str	r3, [sp, #36]	@ 0x24
 800b86a:	2320      	movs	r3, #32
 800b86c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b870:	f8cd 800c 	str.w	r8, [sp, #12]
 800b874:	2330      	movs	r3, #48	@ 0x30
 800b876:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800ba14 <_svfiprintf_r+0x1e4>
 800b87a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b87e:	f04f 0901 	mov.w	r9, #1
 800b882:	4623      	mov	r3, r4
 800b884:	469a      	mov	sl, r3
 800b886:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b88a:	b10a      	cbz	r2, 800b890 <_svfiprintf_r+0x60>
 800b88c:	2a25      	cmp	r2, #37	@ 0x25
 800b88e:	d1f9      	bne.n	800b884 <_svfiprintf_r+0x54>
 800b890:	ebba 0b04 	subs.w	fp, sl, r4
 800b894:	d00b      	beq.n	800b8ae <_svfiprintf_r+0x7e>
 800b896:	465b      	mov	r3, fp
 800b898:	4622      	mov	r2, r4
 800b89a:	4629      	mov	r1, r5
 800b89c:	4638      	mov	r0, r7
 800b89e:	f7ff ff6b 	bl	800b778 <__ssputs_r>
 800b8a2:	3001      	adds	r0, #1
 800b8a4:	f000 80a7 	beq.w	800b9f6 <_svfiprintf_r+0x1c6>
 800b8a8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b8aa:	445a      	add	r2, fp
 800b8ac:	9209      	str	r2, [sp, #36]	@ 0x24
 800b8ae:	f89a 3000 	ldrb.w	r3, [sl]
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	f000 809f 	beq.w	800b9f6 <_svfiprintf_r+0x1c6>
 800b8b8:	2300      	movs	r3, #0
 800b8ba:	f04f 32ff 	mov.w	r2, #4294967295
 800b8be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b8c2:	f10a 0a01 	add.w	sl, sl, #1
 800b8c6:	9304      	str	r3, [sp, #16]
 800b8c8:	9307      	str	r3, [sp, #28]
 800b8ca:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b8ce:	931a      	str	r3, [sp, #104]	@ 0x68
 800b8d0:	4654      	mov	r4, sl
 800b8d2:	2205      	movs	r2, #5
 800b8d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b8d8:	484e      	ldr	r0, [pc, #312]	@ (800ba14 <_svfiprintf_r+0x1e4>)
 800b8da:	f7f4 fd09 	bl	80002f0 <memchr>
 800b8de:	9a04      	ldr	r2, [sp, #16]
 800b8e0:	b9d8      	cbnz	r0, 800b91a <_svfiprintf_r+0xea>
 800b8e2:	06d0      	lsls	r0, r2, #27
 800b8e4:	bf44      	itt	mi
 800b8e6:	2320      	movmi	r3, #32
 800b8e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b8ec:	0711      	lsls	r1, r2, #28
 800b8ee:	bf44      	itt	mi
 800b8f0:	232b      	movmi	r3, #43	@ 0x2b
 800b8f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b8f6:	f89a 3000 	ldrb.w	r3, [sl]
 800b8fa:	2b2a      	cmp	r3, #42	@ 0x2a
 800b8fc:	d015      	beq.n	800b92a <_svfiprintf_r+0xfa>
 800b8fe:	9a07      	ldr	r2, [sp, #28]
 800b900:	4654      	mov	r4, sl
 800b902:	2000      	movs	r0, #0
 800b904:	f04f 0c0a 	mov.w	ip, #10
 800b908:	4621      	mov	r1, r4
 800b90a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b90e:	3b30      	subs	r3, #48	@ 0x30
 800b910:	2b09      	cmp	r3, #9
 800b912:	d94b      	bls.n	800b9ac <_svfiprintf_r+0x17c>
 800b914:	b1b0      	cbz	r0, 800b944 <_svfiprintf_r+0x114>
 800b916:	9207      	str	r2, [sp, #28]
 800b918:	e014      	b.n	800b944 <_svfiprintf_r+0x114>
 800b91a:	eba0 0308 	sub.w	r3, r0, r8
 800b91e:	fa09 f303 	lsl.w	r3, r9, r3
 800b922:	4313      	orrs	r3, r2
 800b924:	9304      	str	r3, [sp, #16]
 800b926:	46a2      	mov	sl, r4
 800b928:	e7d2      	b.n	800b8d0 <_svfiprintf_r+0xa0>
 800b92a:	9b03      	ldr	r3, [sp, #12]
 800b92c:	1d19      	adds	r1, r3, #4
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	9103      	str	r1, [sp, #12]
 800b932:	2b00      	cmp	r3, #0
 800b934:	bfbb      	ittet	lt
 800b936:	425b      	neglt	r3, r3
 800b938:	f042 0202 	orrlt.w	r2, r2, #2
 800b93c:	9307      	strge	r3, [sp, #28]
 800b93e:	9307      	strlt	r3, [sp, #28]
 800b940:	bfb8      	it	lt
 800b942:	9204      	strlt	r2, [sp, #16]
 800b944:	7823      	ldrb	r3, [r4, #0]
 800b946:	2b2e      	cmp	r3, #46	@ 0x2e
 800b948:	d10a      	bne.n	800b960 <_svfiprintf_r+0x130>
 800b94a:	7863      	ldrb	r3, [r4, #1]
 800b94c:	2b2a      	cmp	r3, #42	@ 0x2a
 800b94e:	d132      	bne.n	800b9b6 <_svfiprintf_r+0x186>
 800b950:	9b03      	ldr	r3, [sp, #12]
 800b952:	1d1a      	adds	r2, r3, #4
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	9203      	str	r2, [sp, #12]
 800b958:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b95c:	3402      	adds	r4, #2
 800b95e:	9305      	str	r3, [sp, #20]
 800b960:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800ba24 <_svfiprintf_r+0x1f4>
 800b964:	7821      	ldrb	r1, [r4, #0]
 800b966:	2203      	movs	r2, #3
 800b968:	4650      	mov	r0, sl
 800b96a:	f7f4 fcc1 	bl	80002f0 <memchr>
 800b96e:	b138      	cbz	r0, 800b980 <_svfiprintf_r+0x150>
 800b970:	9b04      	ldr	r3, [sp, #16]
 800b972:	eba0 000a 	sub.w	r0, r0, sl
 800b976:	2240      	movs	r2, #64	@ 0x40
 800b978:	4082      	lsls	r2, r0
 800b97a:	4313      	orrs	r3, r2
 800b97c:	3401      	adds	r4, #1
 800b97e:	9304      	str	r3, [sp, #16]
 800b980:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b984:	4824      	ldr	r0, [pc, #144]	@ (800ba18 <_svfiprintf_r+0x1e8>)
 800b986:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b98a:	2206      	movs	r2, #6
 800b98c:	f7f4 fcb0 	bl	80002f0 <memchr>
 800b990:	2800      	cmp	r0, #0
 800b992:	d036      	beq.n	800ba02 <_svfiprintf_r+0x1d2>
 800b994:	4b21      	ldr	r3, [pc, #132]	@ (800ba1c <_svfiprintf_r+0x1ec>)
 800b996:	bb1b      	cbnz	r3, 800b9e0 <_svfiprintf_r+0x1b0>
 800b998:	9b03      	ldr	r3, [sp, #12]
 800b99a:	3307      	adds	r3, #7
 800b99c:	f023 0307 	bic.w	r3, r3, #7
 800b9a0:	3308      	adds	r3, #8
 800b9a2:	9303      	str	r3, [sp, #12]
 800b9a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b9a6:	4433      	add	r3, r6
 800b9a8:	9309      	str	r3, [sp, #36]	@ 0x24
 800b9aa:	e76a      	b.n	800b882 <_svfiprintf_r+0x52>
 800b9ac:	fb0c 3202 	mla	r2, ip, r2, r3
 800b9b0:	460c      	mov	r4, r1
 800b9b2:	2001      	movs	r0, #1
 800b9b4:	e7a8      	b.n	800b908 <_svfiprintf_r+0xd8>
 800b9b6:	2300      	movs	r3, #0
 800b9b8:	3401      	adds	r4, #1
 800b9ba:	9305      	str	r3, [sp, #20]
 800b9bc:	4619      	mov	r1, r3
 800b9be:	f04f 0c0a 	mov.w	ip, #10
 800b9c2:	4620      	mov	r0, r4
 800b9c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b9c8:	3a30      	subs	r2, #48	@ 0x30
 800b9ca:	2a09      	cmp	r2, #9
 800b9cc:	d903      	bls.n	800b9d6 <_svfiprintf_r+0x1a6>
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d0c6      	beq.n	800b960 <_svfiprintf_r+0x130>
 800b9d2:	9105      	str	r1, [sp, #20]
 800b9d4:	e7c4      	b.n	800b960 <_svfiprintf_r+0x130>
 800b9d6:	fb0c 2101 	mla	r1, ip, r1, r2
 800b9da:	4604      	mov	r4, r0
 800b9dc:	2301      	movs	r3, #1
 800b9de:	e7f0      	b.n	800b9c2 <_svfiprintf_r+0x192>
 800b9e0:	ab03      	add	r3, sp, #12
 800b9e2:	9300      	str	r3, [sp, #0]
 800b9e4:	462a      	mov	r2, r5
 800b9e6:	4b0e      	ldr	r3, [pc, #56]	@ (800ba20 <_svfiprintf_r+0x1f0>)
 800b9e8:	a904      	add	r1, sp, #16
 800b9ea:	4638      	mov	r0, r7
 800b9ec:	f3af 8000 	nop.w
 800b9f0:	1c42      	adds	r2, r0, #1
 800b9f2:	4606      	mov	r6, r0
 800b9f4:	d1d6      	bne.n	800b9a4 <_svfiprintf_r+0x174>
 800b9f6:	89ab      	ldrh	r3, [r5, #12]
 800b9f8:	065b      	lsls	r3, r3, #25
 800b9fa:	f53f af2d 	bmi.w	800b858 <_svfiprintf_r+0x28>
 800b9fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ba00:	e72c      	b.n	800b85c <_svfiprintf_r+0x2c>
 800ba02:	ab03      	add	r3, sp, #12
 800ba04:	9300      	str	r3, [sp, #0]
 800ba06:	462a      	mov	r2, r5
 800ba08:	4b05      	ldr	r3, [pc, #20]	@ (800ba20 <_svfiprintf_r+0x1f0>)
 800ba0a:	a904      	add	r1, sp, #16
 800ba0c:	4638      	mov	r0, r7
 800ba0e:	f000 f879 	bl	800bb04 <_printf_i>
 800ba12:	e7ed      	b.n	800b9f0 <_svfiprintf_r+0x1c0>
 800ba14:	0800be54 	.word	0x0800be54
 800ba18:	0800be5e 	.word	0x0800be5e
 800ba1c:	00000000 	.word	0x00000000
 800ba20:	0800b779 	.word	0x0800b779
 800ba24:	0800be5a 	.word	0x0800be5a

0800ba28 <_printf_common>:
 800ba28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba2c:	4616      	mov	r6, r2
 800ba2e:	4698      	mov	r8, r3
 800ba30:	688a      	ldr	r2, [r1, #8]
 800ba32:	690b      	ldr	r3, [r1, #16]
 800ba34:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ba38:	4293      	cmp	r3, r2
 800ba3a:	bfb8      	it	lt
 800ba3c:	4613      	movlt	r3, r2
 800ba3e:	6033      	str	r3, [r6, #0]
 800ba40:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ba44:	4607      	mov	r7, r0
 800ba46:	460c      	mov	r4, r1
 800ba48:	b10a      	cbz	r2, 800ba4e <_printf_common+0x26>
 800ba4a:	3301      	adds	r3, #1
 800ba4c:	6033      	str	r3, [r6, #0]
 800ba4e:	6823      	ldr	r3, [r4, #0]
 800ba50:	0699      	lsls	r1, r3, #26
 800ba52:	bf42      	ittt	mi
 800ba54:	6833      	ldrmi	r3, [r6, #0]
 800ba56:	3302      	addmi	r3, #2
 800ba58:	6033      	strmi	r3, [r6, #0]
 800ba5a:	6825      	ldr	r5, [r4, #0]
 800ba5c:	f015 0506 	ands.w	r5, r5, #6
 800ba60:	d106      	bne.n	800ba70 <_printf_common+0x48>
 800ba62:	f104 0a19 	add.w	sl, r4, #25
 800ba66:	68e3      	ldr	r3, [r4, #12]
 800ba68:	6832      	ldr	r2, [r6, #0]
 800ba6a:	1a9b      	subs	r3, r3, r2
 800ba6c:	42ab      	cmp	r3, r5
 800ba6e:	dc26      	bgt.n	800babe <_printf_common+0x96>
 800ba70:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ba74:	6822      	ldr	r2, [r4, #0]
 800ba76:	3b00      	subs	r3, #0
 800ba78:	bf18      	it	ne
 800ba7a:	2301      	movne	r3, #1
 800ba7c:	0692      	lsls	r2, r2, #26
 800ba7e:	d42b      	bmi.n	800bad8 <_printf_common+0xb0>
 800ba80:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ba84:	4641      	mov	r1, r8
 800ba86:	4638      	mov	r0, r7
 800ba88:	47c8      	blx	r9
 800ba8a:	3001      	adds	r0, #1
 800ba8c:	d01e      	beq.n	800bacc <_printf_common+0xa4>
 800ba8e:	6823      	ldr	r3, [r4, #0]
 800ba90:	6922      	ldr	r2, [r4, #16]
 800ba92:	f003 0306 	and.w	r3, r3, #6
 800ba96:	2b04      	cmp	r3, #4
 800ba98:	bf02      	ittt	eq
 800ba9a:	68e5      	ldreq	r5, [r4, #12]
 800ba9c:	6833      	ldreq	r3, [r6, #0]
 800ba9e:	1aed      	subeq	r5, r5, r3
 800baa0:	68a3      	ldr	r3, [r4, #8]
 800baa2:	bf0c      	ite	eq
 800baa4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800baa8:	2500      	movne	r5, #0
 800baaa:	4293      	cmp	r3, r2
 800baac:	bfc4      	itt	gt
 800baae:	1a9b      	subgt	r3, r3, r2
 800bab0:	18ed      	addgt	r5, r5, r3
 800bab2:	2600      	movs	r6, #0
 800bab4:	341a      	adds	r4, #26
 800bab6:	42b5      	cmp	r5, r6
 800bab8:	d11a      	bne.n	800baf0 <_printf_common+0xc8>
 800baba:	2000      	movs	r0, #0
 800babc:	e008      	b.n	800bad0 <_printf_common+0xa8>
 800babe:	2301      	movs	r3, #1
 800bac0:	4652      	mov	r2, sl
 800bac2:	4641      	mov	r1, r8
 800bac4:	4638      	mov	r0, r7
 800bac6:	47c8      	blx	r9
 800bac8:	3001      	adds	r0, #1
 800baca:	d103      	bne.n	800bad4 <_printf_common+0xac>
 800bacc:	f04f 30ff 	mov.w	r0, #4294967295
 800bad0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bad4:	3501      	adds	r5, #1
 800bad6:	e7c6      	b.n	800ba66 <_printf_common+0x3e>
 800bad8:	18e1      	adds	r1, r4, r3
 800bada:	1c5a      	adds	r2, r3, #1
 800badc:	2030      	movs	r0, #48	@ 0x30
 800bade:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800bae2:	4422      	add	r2, r4
 800bae4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800bae8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800baec:	3302      	adds	r3, #2
 800baee:	e7c7      	b.n	800ba80 <_printf_common+0x58>
 800baf0:	2301      	movs	r3, #1
 800baf2:	4622      	mov	r2, r4
 800baf4:	4641      	mov	r1, r8
 800baf6:	4638      	mov	r0, r7
 800baf8:	47c8      	blx	r9
 800bafa:	3001      	adds	r0, #1
 800bafc:	d0e6      	beq.n	800bacc <_printf_common+0xa4>
 800bafe:	3601      	adds	r6, #1
 800bb00:	e7d9      	b.n	800bab6 <_printf_common+0x8e>
	...

0800bb04 <_printf_i>:
 800bb04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bb08:	7e0f      	ldrb	r7, [r1, #24]
 800bb0a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800bb0c:	2f78      	cmp	r7, #120	@ 0x78
 800bb0e:	4691      	mov	r9, r2
 800bb10:	4680      	mov	r8, r0
 800bb12:	460c      	mov	r4, r1
 800bb14:	469a      	mov	sl, r3
 800bb16:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800bb1a:	d807      	bhi.n	800bb2c <_printf_i+0x28>
 800bb1c:	2f62      	cmp	r7, #98	@ 0x62
 800bb1e:	d80a      	bhi.n	800bb36 <_printf_i+0x32>
 800bb20:	2f00      	cmp	r7, #0
 800bb22:	f000 80d2 	beq.w	800bcca <_printf_i+0x1c6>
 800bb26:	2f58      	cmp	r7, #88	@ 0x58
 800bb28:	f000 80b9 	beq.w	800bc9e <_printf_i+0x19a>
 800bb2c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bb30:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800bb34:	e03a      	b.n	800bbac <_printf_i+0xa8>
 800bb36:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800bb3a:	2b15      	cmp	r3, #21
 800bb3c:	d8f6      	bhi.n	800bb2c <_printf_i+0x28>
 800bb3e:	a101      	add	r1, pc, #4	@ (adr r1, 800bb44 <_printf_i+0x40>)
 800bb40:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bb44:	0800bb9d 	.word	0x0800bb9d
 800bb48:	0800bbb1 	.word	0x0800bbb1
 800bb4c:	0800bb2d 	.word	0x0800bb2d
 800bb50:	0800bb2d 	.word	0x0800bb2d
 800bb54:	0800bb2d 	.word	0x0800bb2d
 800bb58:	0800bb2d 	.word	0x0800bb2d
 800bb5c:	0800bbb1 	.word	0x0800bbb1
 800bb60:	0800bb2d 	.word	0x0800bb2d
 800bb64:	0800bb2d 	.word	0x0800bb2d
 800bb68:	0800bb2d 	.word	0x0800bb2d
 800bb6c:	0800bb2d 	.word	0x0800bb2d
 800bb70:	0800bcb1 	.word	0x0800bcb1
 800bb74:	0800bbdb 	.word	0x0800bbdb
 800bb78:	0800bc6b 	.word	0x0800bc6b
 800bb7c:	0800bb2d 	.word	0x0800bb2d
 800bb80:	0800bb2d 	.word	0x0800bb2d
 800bb84:	0800bcd3 	.word	0x0800bcd3
 800bb88:	0800bb2d 	.word	0x0800bb2d
 800bb8c:	0800bbdb 	.word	0x0800bbdb
 800bb90:	0800bb2d 	.word	0x0800bb2d
 800bb94:	0800bb2d 	.word	0x0800bb2d
 800bb98:	0800bc73 	.word	0x0800bc73
 800bb9c:	6833      	ldr	r3, [r6, #0]
 800bb9e:	1d1a      	adds	r2, r3, #4
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	6032      	str	r2, [r6, #0]
 800bba4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bba8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800bbac:	2301      	movs	r3, #1
 800bbae:	e09d      	b.n	800bcec <_printf_i+0x1e8>
 800bbb0:	6833      	ldr	r3, [r6, #0]
 800bbb2:	6820      	ldr	r0, [r4, #0]
 800bbb4:	1d19      	adds	r1, r3, #4
 800bbb6:	6031      	str	r1, [r6, #0]
 800bbb8:	0606      	lsls	r6, r0, #24
 800bbba:	d501      	bpl.n	800bbc0 <_printf_i+0xbc>
 800bbbc:	681d      	ldr	r5, [r3, #0]
 800bbbe:	e003      	b.n	800bbc8 <_printf_i+0xc4>
 800bbc0:	0645      	lsls	r5, r0, #25
 800bbc2:	d5fb      	bpl.n	800bbbc <_printf_i+0xb8>
 800bbc4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800bbc8:	2d00      	cmp	r5, #0
 800bbca:	da03      	bge.n	800bbd4 <_printf_i+0xd0>
 800bbcc:	232d      	movs	r3, #45	@ 0x2d
 800bbce:	426d      	negs	r5, r5
 800bbd0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bbd4:	4859      	ldr	r0, [pc, #356]	@ (800bd3c <_printf_i+0x238>)
 800bbd6:	230a      	movs	r3, #10
 800bbd8:	e011      	b.n	800bbfe <_printf_i+0xfa>
 800bbda:	6821      	ldr	r1, [r4, #0]
 800bbdc:	6833      	ldr	r3, [r6, #0]
 800bbde:	0608      	lsls	r0, r1, #24
 800bbe0:	f853 5b04 	ldr.w	r5, [r3], #4
 800bbe4:	d402      	bmi.n	800bbec <_printf_i+0xe8>
 800bbe6:	0649      	lsls	r1, r1, #25
 800bbe8:	bf48      	it	mi
 800bbea:	b2ad      	uxthmi	r5, r5
 800bbec:	2f6f      	cmp	r7, #111	@ 0x6f
 800bbee:	4853      	ldr	r0, [pc, #332]	@ (800bd3c <_printf_i+0x238>)
 800bbf0:	6033      	str	r3, [r6, #0]
 800bbf2:	bf14      	ite	ne
 800bbf4:	230a      	movne	r3, #10
 800bbf6:	2308      	moveq	r3, #8
 800bbf8:	2100      	movs	r1, #0
 800bbfa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800bbfe:	6866      	ldr	r6, [r4, #4]
 800bc00:	60a6      	str	r6, [r4, #8]
 800bc02:	2e00      	cmp	r6, #0
 800bc04:	bfa2      	ittt	ge
 800bc06:	6821      	ldrge	r1, [r4, #0]
 800bc08:	f021 0104 	bicge.w	r1, r1, #4
 800bc0c:	6021      	strge	r1, [r4, #0]
 800bc0e:	b90d      	cbnz	r5, 800bc14 <_printf_i+0x110>
 800bc10:	2e00      	cmp	r6, #0
 800bc12:	d04b      	beq.n	800bcac <_printf_i+0x1a8>
 800bc14:	4616      	mov	r6, r2
 800bc16:	fbb5 f1f3 	udiv	r1, r5, r3
 800bc1a:	fb03 5711 	mls	r7, r3, r1, r5
 800bc1e:	5dc7      	ldrb	r7, [r0, r7]
 800bc20:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800bc24:	462f      	mov	r7, r5
 800bc26:	42bb      	cmp	r3, r7
 800bc28:	460d      	mov	r5, r1
 800bc2a:	d9f4      	bls.n	800bc16 <_printf_i+0x112>
 800bc2c:	2b08      	cmp	r3, #8
 800bc2e:	d10b      	bne.n	800bc48 <_printf_i+0x144>
 800bc30:	6823      	ldr	r3, [r4, #0]
 800bc32:	07df      	lsls	r7, r3, #31
 800bc34:	d508      	bpl.n	800bc48 <_printf_i+0x144>
 800bc36:	6923      	ldr	r3, [r4, #16]
 800bc38:	6861      	ldr	r1, [r4, #4]
 800bc3a:	4299      	cmp	r1, r3
 800bc3c:	bfde      	ittt	le
 800bc3e:	2330      	movle	r3, #48	@ 0x30
 800bc40:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bc44:	f106 36ff 	addle.w	r6, r6, #4294967295
 800bc48:	1b92      	subs	r2, r2, r6
 800bc4a:	6122      	str	r2, [r4, #16]
 800bc4c:	f8cd a000 	str.w	sl, [sp]
 800bc50:	464b      	mov	r3, r9
 800bc52:	aa03      	add	r2, sp, #12
 800bc54:	4621      	mov	r1, r4
 800bc56:	4640      	mov	r0, r8
 800bc58:	f7ff fee6 	bl	800ba28 <_printf_common>
 800bc5c:	3001      	adds	r0, #1
 800bc5e:	d14a      	bne.n	800bcf6 <_printf_i+0x1f2>
 800bc60:	f04f 30ff 	mov.w	r0, #4294967295
 800bc64:	b004      	add	sp, #16
 800bc66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc6a:	6823      	ldr	r3, [r4, #0]
 800bc6c:	f043 0320 	orr.w	r3, r3, #32
 800bc70:	6023      	str	r3, [r4, #0]
 800bc72:	4833      	ldr	r0, [pc, #204]	@ (800bd40 <_printf_i+0x23c>)
 800bc74:	2778      	movs	r7, #120	@ 0x78
 800bc76:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800bc7a:	6823      	ldr	r3, [r4, #0]
 800bc7c:	6831      	ldr	r1, [r6, #0]
 800bc7e:	061f      	lsls	r7, r3, #24
 800bc80:	f851 5b04 	ldr.w	r5, [r1], #4
 800bc84:	d402      	bmi.n	800bc8c <_printf_i+0x188>
 800bc86:	065f      	lsls	r7, r3, #25
 800bc88:	bf48      	it	mi
 800bc8a:	b2ad      	uxthmi	r5, r5
 800bc8c:	6031      	str	r1, [r6, #0]
 800bc8e:	07d9      	lsls	r1, r3, #31
 800bc90:	bf44      	itt	mi
 800bc92:	f043 0320 	orrmi.w	r3, r3, #32
 800bc96:	6023      	strmi	r3, [r4, #0]
 800bc98:	b11d      	cbz	r5, 800bca2 <_printf_i+0x19e>
 800bc9a:	2310      	movs	r3, #16
 800bc9c:	e7ac      	b.n	800bbf8 <_printf_i+0xf4>
 800bc9e:	4827      	ldr	r0, [pc, #156]	@ (800bd3c <_printf_i+0x238>)
 800bca0:	e7e9      	b.n	800bc76 <_printf_i+0x172>
 800bca2:	6823      	ldr	r3, [r4, #0]
 800bca4:	f023 0320 	bic.w	r3, r3, #32
 800bca8:	6023      	str	r3, [r4, #0]
 800bcaa:	e7f6      	b.n	800bc9a <_printf_i+0x196>
 800bcac:	4616      	mov	r6, r2
 800bcae:	e7bd      	b.n	800bc2c <_printf_i+0x128>
 800bcb0:	6833      	ldr	r3, [r6, #0]
 800bcb2:	6825      	ldr	r5, [r4, #0]
 800bcb4:	6961      	ldr	r1, [r4, #20]
 800bcb6:	1d18      	adds	r0, r3, #4
 800bcb8:	6030      	str	r0, [r6, #0]
 800bcba:	062e      	lsls	r6, r5, #24
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	d501      	bpl.n	800bcc4 <_printf_i+0x1c0>
 800bcc0:	6019      	str	r1, [r3, #0]
 800bcc2:	e002      	b.n	800bcca <_printf_i+0x1c6>
 800bcc4:	0668      	lsls	r0, r5, #25
 800bcc6:	d5fb      	bpl.n	800bcc0 <_printf_i+0x1bc>
 800bcc8:	8019      	strh	r1, [r3, #0]
 800bcca:	2300      	movs	r3, #0
 800bccc:	6123      	str	r3, [r4, #16]
 800bcce:	4616      	mov	r6, r2
 800bcd0:	e7bc      	b.n	800bc4c <_printf_i+0x148>
 800bcd2:	6833      	ldr	r3, [r6, #0]
 800bcd4:	1d1a      	adds	r2, r3, #4
 800bcd6:	6032      	str	r2, [r6, #0]
 800bcd8:	681e      	ldr	r6, [r3, #0]
 800bcda:	6862      	ldr	r2, [r4, #4]
 800bcdc:	2100      	movs	r1, #0
 800bcde:	4630      	mov	r0, r6
 800bce0:	f7f4 fb06 	bl	80002f0 <memchr>
 800bce4:	b108      	cbz	r0, 800bcea <_printf_i+0x1e6>
 800bce6:	1b80      	subs	r0, r0, r6
 800bce8:	6060      	str	r0, [r4, #4]
 800bcea:	6863      	ldr	r3, [r4, #4]
 800bcec:	6123      	str	r3, [r4, #16]
 800bcee:	2300      	movs	r3, #0
 800bcf0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bcf4:	e7aa      	b.n	800bc4c <_printf_i+0x148>
 800bcf6:	6923      	ldr	r3, [r4, #16]
 800bcf8:	4632      	mov	r2, r6
 800bcfa:	4649      	mov	r1, r9
 800bcfc:	4640      	mov	r0, r8
 800bcfe:	47d0      	blx	sl
 800bd00:	3001      	adds	r0, #1
 800bd02:	d0ad      	beq.n	800bc60 <_printf_i+0x15c>
 800bd04:	6823      	ldr	r3, [r4, #0]
 800bd06:	079b      	lsls	r3, r3, #30
 800bd08:	d413      	bmi.n	800bd32 <_printf_i+0x22e>
 800bd0a:	68e0      	ldr	r0, [r4, #12]
 800bd0c:	9b03      	ldr	r3, [sp, #12]
 800bd0e:	4298      	cmp	r0, r3
 800bd10:	bfb8      	it	lt
 800bd12:	4618      	movlt	r0, r3
 800bd14:	e7a6      	b.n	800bc64 <_printf_i+0x160>
 800bd16:	2301      	movs	r3, #1
 800bd18:	4632      	mov	r2, r6
 800bd1a:	4649      	mov	r1, r9
 800bd1c:	4640      	mov	r0, r8
 800bd1e:	47d0      	blx	sl
 800bd20:	3001      	adds	r0, #1
 800bd22:	d09d      	beq.n	800bc60 <_printf_i+0x15c>
 800bd24:	3501      	adds	r5, #1
 800bd26:	68e3      	ldr	r3, [r4, #12]
 800bd28:	9903      	ldr	r1, [sp, #12]
 800bd2a:	1a5b      	subs	r3, r3, r1
 800bd2c:	42ab      	cmp	r3, r5
 800bd2e:	dcf2      	bgt.n	800bd16 <_printf_i+0x212>
 800bd30:	e7eb      	b.n	800bd0a <_printf_i+0x206>
 800bd32:	2500      	movs	r5, #0
 800bd34:	f104 0619 	add.w	r6, r4, #25
 800bd38:	e7f5      	b.n	800bd26 <_printf_i+0x222>
 800bd3a:	bf00      	nop
 800bd3c:	0800be65 	.word	0x0800be65
 800bd40:	0800be76 	.word	0x0800be76

0800bd44 <memmove>:
 800bd44:	4288      	cmp	r0, r1
 800bd46:	b510      	push	{r4, lr}
 800bd48:	eb01 0402 	add.w	r4, r1, r2
 800bd4c:	d902      	bls.n	800bd54 <memmove+0x10>
 800bd4e:	4284      	cmp	r4, r0
 800bd50:	4623      	mov	r3, r4
 800bd52:	d807      	bhi.n	800bd64 <memmove+0x20>
 800bd54:	1e43      	subs	r3, r0, #1
 800bd56:	42a1      	cmp	r1, r4
 800bd58:	d008      	beq.n	800bd6c <memmove+0x28>
 800bd5a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bd5e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bd62:	e7f8      	b.n	800bd56 <memmove+0x12>
 800bd64:	4402      	add	r2, r0
 800bd66:	4601      	mov	r1, r0
 800bd68:	428a      	cmp	r2, r1
 800bd6a:	d100      	bne.n	800bd6e <memmove+0x2a>
 800bd6c:	bd10      	pop	{r4, pc}
 800bd6e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bd72:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bd76:	e7f7      	b.n	800bd68 <memmove+0x24>

0800bd78 <_realloc_r>:
 800bd78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd7c:	4680      	mov	r8, r0
 800bd7e:	4615      	mov	r5, r2
 800bd80:	460c      	mov	r4, r1
 800bd82:	b921      	cbnz	r1, 800bd8e <_realloc_r+0x16>
 800bd84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bd88:	4611      	mov	r1, r2
 800bd8a:	f7ff bb93 	b.w	800b4b4 <_malloc_r>
 800bd8e:	b92a      	cbnz	r2, 800bd9c <_realloc_r+0x24>
 800bd90:	f7ff fca8 	bl	800b6e4 <_free_r>
 800bd94:	2400      	movs	r4, #0
 800bd96:	4620      	mov	r0, r4
 800bd98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd9c:	f000 f81a 	bl	800bdd4 <_malloc_usable_size_r>
 800bda0:	4285      	cmp	r5, r0
 800bda2:	4606      	mov	r6, r0
 800bda4:	d802      	bhi.n	800bdac <_realloc_r+0x34>
 800bda6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800bdaa:	d8f4      	bhi.n	800bd96 <_realloc_r+0x1e>
 800bdac:	4629      	mov	r1, r5
 800bdae:	4640      	mov	r0, r8
 800bdb0:	f7ff fb80 	bl	800b4b4 <_malloc_r>
 800bdb4:	4607      	mov	r7, r0
 800bdb6:	2800      	cmp	r0, #0
 800bdb8:	d0ec      	beq.n	800bd94 <_realloc_r+0x1c>
 800bdba:	42b5      	cmp	r5, r6
 800bdbc:	462a      	mov	r2, r5
 800bdbe:	4621      	mov	r1, r4
 800bdc0:	bf28      	it	cs
 800bdc2:	4632      	movcs	r2, r6
 800bdc4:	f7ff fc80 	bl	800b6c8 <memcpy>
 800bdc8:	4621      	mov	r1, r4
 800bdca:	4640      	mov	r0, r8
 800bdcc:	f7ff fc8a 	bl	800b6e4 <_free_r>
 800bdd0:	463c      	mov	r4, r7
 800bdd2:	e7e0      	b.n	800bd96 <_realloc_r+0x1e>

0800bdd4 <_malloc_usable_size_r>:
 800bdd4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bdd8:	1f18      	subs	r0, r3, #4
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	bfbc      	itt	lt
 800bdde:	580b      	ldrlt	r3, [r1, r0]
 800bde0:	18c0      	addlt	r0, r0, r3
 800bde2:	4770      	bx	lr

0800bde4 <_init>:
 800bde4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bde6:	bf00      	nop
 800bde8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bdea:	bc08      	pop	{r3}
 800bdec:	469e      	mov	lr, r3
 800bdee:	4770      	bx	lr

0800bdf0 <_fini>:
 800bdf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdf2:	bf00      	nop
 800bdf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bdf6:	bc08      	pop	{r3}
 800bdf8:	469e      	mov	lr, r3
 800bdfa:	4770      	bx	lr
