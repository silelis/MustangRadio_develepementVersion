
I2C_DMA_testes.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009bc8  080002b0  080002b0  000012b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08009e78  08009e78  0000ae78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009ec4  08009ec4  0000aec4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009ecc  08009ecc  0000aecc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08009ed0  08009ed0  0000aed0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000064  24000000  08009ed4  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004078  24000064  08009f38  0000b064  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240040dc  08009f38  0000b0dc  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000b064  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001f717  00000000  00000000  0000b092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003f21  00000000  00000000  0002a7a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001800  00000000  00000000  0002e6d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000012c2  00000000  00000000  0002fed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00032437  00000000  00000000  00031192  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00023245  00000000  00000000  000635c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00148b1f  00000000  00000000  0008680e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001cf32d  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000067c8  00000000  00000000  001cf370  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000008f  00000000  00000000  001d5b38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	@ (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	@ (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000064 	.word	0x24000064
 80002cc:	00000000 	.word	0x00000000
 80002d0:	08009e60 	.word	0x08009e60

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	@ (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	@ (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	@ (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000068 	.word	0x24000068
 80002ec:	08009e60 	.word	0x08009e60

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96a 	b.w	80005dc <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	460c      	mov	r4, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14e      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032c:	4694      	mov	ip, r2
 800032e:	458c      	cmp	ip, r1
 8000330:	4686      	mov	lr, r0
 8000332:	fab2 f282 	clz	r2, r2
 8000336:	d962      	bls.n	80003fe <__udivmoddi4+0xde>
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0320 	rsb	r3, r2, #32
 800033e:	4091      	lsls	r1, r2
 8000340:	fa20 f303 	lsr.w	r3, r0, r3
 8000344:	fa0c fc02 	lsl.w	ip, ip, r2
 8000348:	4319      	orrs	r1, r3
 800034a:	fa00 fe02 	lsl.w	lr, r0, r2
 800034e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000352:	fa1f f68c 	uxth.w	r6, ip
 8000356:	fbb1 f4f7 	udiv	r4, r1, r7
 800035a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035e:	fb07 1114 	mls	r1, r7, r4, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb04 f106 	mul.w	r1, r4, r6
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f104 30ff 	add.w	r0, r4, #4294967295
 8000376:	f080 8112 	bcs.w	800059e <__udivmoddi4+0x27e>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 810f 	bls.w	800059e <__udivmoddi4+0x27e>
 8000380:	3c02      	subs	r4, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a59      	subs	r1, r3, r1
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb1 f0f7 	udiv	r0, r1, r7
 800038e:	fb07 1110 	mls	r1, r7, r0, r1
 8000392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000396:	fb00 f606 	mul.w	r6, r0, r6
 800039a:	429e      	cmp	r6, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x94>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003a6:	f080 80fc 	bcs.w	80005a2 <__udivmoddi4+0x282>
 80003aa:	429e      	cmp	r6, r3
 80003ac:	f240 80f9 	bls.w	80005a2 <__udivmoddi4+0x282>
 80003b0:	4463      	add	r3, ip
 80003b2:	3802      	subs	r0, #2
 80003b4:	1b9b      	subs	r3, r3, r6
 80003b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ba:	2100      	movs	r1, #0
 80003bc:	b11d      	cbz	r5, 80003c6 <__udivmoddi4+0xa6>
 80003be:	40d3      	lsrs	r3, r2
 80003c0:	2200      	movs	r2, #0
 80003c2:	e9c5 3200 	strd	r3, r2, [r5]
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d905      	bls.n	80003da <__udivmoddi4+0xba>
 80003ce:	b10d      	cbz	r5, 80003d4 <__udivmoddi4+0xb4>
 80003d0:	e9c5 0100 	strd	r0, r1, [r5]
 80003d4:	2100      	movs	r1, #0
 80003d6:	4608      	mov	r0, r1
 80003d8:	e7f5      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003da:	fab3 f183 	clz	r1, r3
 80003de:	2900      	cmp	r1, #0
 80003e0:	d146      	bne.n	8000470 <__udivmoddi4+0x150>
 80003e2:	42a3      	cmp	r3, r4
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xcc>
 80003e6:	4290      	cmp	r0, r2
 80003e8:	f0c0 80f0 	bcc.w	80005cc <__udivmoddi4+0x2ac>
 80003ec:	1a86      	subs	r6, r0, r2
 80003ee:	eb64 0303 	sbc.w	r3, r4, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	2d00      	cmp	r5, #0
 80003f6:	d0e6      	beq.n	80003c6 <__udivmoddi4+0xa6>
 80003f8:	e9c5 6300 	strd	r6, r3, [r5]
 80003fc:	e7e3      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003fe:	2a00      	cmp	r2, #0
 8000400:	f040 8090 	bne.w	8000524 <__udivmoddi4+0x204>
 8000404:	eba1 040c 	sub.w	r4, r1, ip
 8000408:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800040c:	fa1f f78c 	uxth.w	r7, ip
 8000410:	2101      	movs	r1, #1
 8000412:	fbb4 f6f8 	udiv	r6, r4, r8
 8000416:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041a:	fb08 4416 	mls	r4, r8, r6, r4
 800041e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000422:	fb07 f006 	mul.w	r0, r7, r6
 8000426:	4298      	cmp	r0, r3
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x11c>
 800042a:	eb1c 0303 	adds.w	r3, ip, r3
 800042e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x11a>
 8000434:	4298      	cmp	r0, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 800043a:	4626      	mov	r6, r4
 800043c:	1a1c      	subs	r4, r3, r0
 800043e:	fa1f f38e 	uxth.w	r3, lr
 8000442:	fbb4 f0f8 	udiv	r0, r4, r8
 8000446:	fb08 4410 	mls	r4, r8, r0, r4
 800044a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044e:	fb00 f707 	mul.w	r7, r0, r7
 8000452:	429f      	cmp	r7, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x148>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 34ff 	add.w	r4, r0, #4294967295
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x146>
 8000460:	429f      	cmp	r7, r3
 8000462:	f200 80b0 	bhi.w	80005c6 <__udivmoddi4+0x2a6>
 8000466:	4620      	mov	r0, r4
 8000468:	1bdb      	subs	r3, r3, r7
 800046a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046e:	e7a5      	b.n	80003bc <__udivmoddi4+0x9c>
 8000470:	f1c1 0620 	rsb	r6, r1, #32
 8000474:	408b      	lsls	r3, r1
 8000476:	fa22 f706 	lsr.w	r7, r2, r6
 800047a:	431f      	orrs	r7, r3
 800047c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000480:	fa04 f301 	lsl.w	r3, r4, r1
 8000484:	ea43 030c 	orr.w	r3, r3, ip
 8000488:	40f4      	lsrs	r4, r6
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	0c38      	lsrs	r0, r7, #16
 8000490:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000494:	fbb4 fef0 	udiv	lr, r4, r0
 8000498:	fa1f fc87 	uxth.w	ip, r7
 800049c:	fb00 441e 	mls	r4, r0, lr, r4
 80004a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a4:	fb0e f90c 	mul.w	r9, lr, ip
 80004a8:	45a1      	cmp	r9, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	d90a      	bls.n	80004c6 <__udivmoddi4+0x1a6>
 80004b0:	193c      	adds	r4, r7, r4
 80004b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004b6:	f080 8084 	bcs.w	80005c2 <__udivmoddi4+0x2a2>
 80004ba:	45a1      	cmp	r9, r4
 80004bc:	f240 8081 	bls.w	80005c2 <__udivmoddi4+0x2a2>
 80004c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	eba4 0409 	sub.w	r4, r4, r9
 80004ca:	fa1f f983 	uxth.w	r9, r3
 80004ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80004d2:	fb00 4413 	mls	r4, r0, r3, r4
 80004d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004da:	fb03 fc0c 	mul.w	ip, r3, ip
 80004de:	45a4      	cmp	ip, r4
 80004e0:	d907      	bls.n	80004f2 <__udivmoddi4+0x1d2>
 80004e2:	193c      	adds	r4, r7, r4
 80004e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004e8:	d267      	bcs.n	80005ba <__udivmoddi4+0x29a>
 80004ea:	45a4      	cmp	ip, r4
 80004ec:	d965      	bls.n	80005ba <__udivmoddi4+0x29a>
 80004ee:	3b02      	subs	r3, #2
 80004f0:	443c      	add	r4, r7
 80004f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f6:	fba0 9302 	umull	r9, r3, r0, r2
 80004fa:	eba4 040c 	sub.w	r4, r4, ip
 80004fe:	429c      	cmp	r4, r3
 8000500:	46ce      	mov	lr, r9
 8000502:	469c      	mov	ip, r3
 8000504:	d351      	bcc.n	80005aa <__udivmoddi4+0x28a>
 8000506:	d04e      	beq.n	80005a6 <__udivmoddi4+0x286>
 8000508:	b155      	cbz	r5, 8000520 <__udivmoddi4+0x200>
 800050a:	ebb8 030e 	subs.w	r3, r8, lr
 800050e:	eb64 040c 	sbc.w	r4, r4, ip
 8000512:	fa04 f606 	lsl.w	r6, r4, r6
 8000516:	40cb      	lsrs	r3, r1
 8000518:	431e      	orrs	r6, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	e9c5 6400 	strd	r6, r4, [r5]
 8000520:	2100      	movs	r1, #0
 8000522:	e750      	b.n	80003c6 <__udivmoddi4+0xa6>
 8000524:	f1c2 0320 	rsb	r3, r2, #32
 8000528:	fa20 f103 	lsr.w	r1, r0, r3
 800052c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000530:	fa24 f303 	lsr.w	r3, r4, r3
 8000534:	4094      	lsls	r4, r2
 8000536:	430c      	orrs	r4, r1
 8000538:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800053c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000540:	fa1f f78c 	uxth.w	r7, ip
 8000544:	fbb3 f0f8 	udiv	r0, r3, r8
 8000548:	fb08 3110 	mls	r1, r8, r0, r3
 800054c:	0c23      	lsrs	r3, r4, #16
 800054e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000552:	fb00 f107 	mul.w	r1, r0, r7
 8000556:	4299      	cmp	r1, r3
 8000558:	d908      	bls.n	800056c <__udivmoddi4+0x24c>
 800055a:	eb1c 0303 	adds.w	r3, ip, r3
 800055e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000562:	d22c      	bcs.n	80005be <__udivmoddi4+0x29e>
 8000564:	4299      	cmp	r1, r3
 8000566:	d92a      	bls.n	80005be <__udivmoddi4+0x29e>
 8000568:	3802      	subs	r0, #2
 800056a:	4463      	add	r3, ip
 800056c:	1a5b      	subs	r3, r3, r1
 800056e:	b2a4      	uxth	r4, r4
 8000570:	fbb3 f1f8 	udiv	r1, r3, r8
 8000574:	fb08 3311 	mls	r3, r8, r1, r3
 8000578:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800057c:	fb01 f307 	mul.w	r3, r1, r7
 8000580:	42a3      	cmp	r3, r4
 8000582:	d908      	bls.n	8000596 <__udivmoddi4+0x276>
 8000584:	eb1c 0404 	adds.w	r4, ip, r4
 8000588:	f101 36ff 	add.w	r6, r1, #4294967295
 800058c:	d213      	bcs.n	80005b6 <__udivmoddi4+0x296>
 800058e:	42a3      	cmp	r3, r4
 8000590:	d911      	bls.n	80005b6 <__udivmoddi4+0x296>
 8000592:	3902      	subs	r1, #2
 8000594:	4464      	add	r4, ip
 8000596:	1ae4      	subs	r4, r4, r3
 8000598:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800059c:	e739      	b.n	8000412 <__udivmoddi4+0xf2>
 800059e:	4604      	mov	r4, r0
 80005a0:	e6f0      	b.n	8000384 <__udivmoddi4+0x64>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e706      	b.n	80003b4 <__udivmoddi4+0x94>
 80005a6:	45c8      	cmp	r8, r9
 80005a8:	d2ae      	bcs.n	8000508 <__udivmoddi4+0x1e8>
 80005aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80005b2:	3801      	subs	r0, #1
 80005b4:	e7a8      	b.n	8000508 <__udivmoddi4+0x1e8>
 80005b6:	4631      	mov	r1, r6
 80005b8:	e7ed      	b.n	8000596 <__udivmoddi4+0x276>
 80005ba:	4603      	mov	r3, r0
 80005bc:	e799      	b.n	80004f2 <__udivmoddi4+0x1d2>
 80005be:	4630      	mov	r0, r6
 80005c0:	e7d4      	b.n	800056c <__udivmoddi4+0x24c>
 80005c2:	46d6      	mov	lr, sl
 80005c4:	e77f      	b.n	80004c6 <__udivmoddi4+0x1a6>
 80005c6:	4463      	add	r3, ip
 80005c8:	3802      	subs	r0, #2
 80005ca:	e74d      	b.n	8000468 <__udivmoddi4+0x148>
 80005cc:	4606      	mov	r6, r0
 80005ce:	4623      	mov	r3, r4
 80005d0:	4608      	mov	r0, r1
 80005d2:	e70f      	b.n	80003f4 <__udivmoddi4+0xd4>
 80005d4:	3e02      	subs	r6, #2
 80005d6:	4463      	add	r3, ip
 80005d8:	e730      	b.n	800043c <__udivmoddi4+0x11c>
 80005da:	bf00      	nop

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005e6:	4b11      	ldr	r3, [pc, #68]	@ (800062c <MX_DMA_Init+0x4c>)
 80005e8:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 80005ec:	4a0f      	ldr	r2, [pc, #60]	@ (800062c <MX_DMA_Init+0x4c>)
 80005ee:	f043 0301 	orr.w	r3, r3, #1
 80005f2:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 80005f6:	4b0d      	ldr	r3, [pc, #52]	@ (800062c <MX_DMA_Init+0x4c>)
 80005f8:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 80005fc:	f003 0301 	and.w	r3, r3, #1
 8000600:	607b      	str	r3, [r7, #4]
 8000602:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 6, 0);
 8000604:	2200      	movs	r2, #0
 8000606:	2106      	movs	r1, #6
 8000608:	200b      	movs	r0, #11
 800060a:	f000 fdd3 	bl	80011b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800060e:	200b      	movs	r0, #11
 8000610:	f000 fdea 	bl	80011e8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 6, 0);
 8000614:	2200      	movs	r2, #0
 8000616:	2106      	movs	r1, #6
 8000618:	200c      	movs	r0, #12
 800061a:	f000 fdcb 	bl	80011b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800061e:	200c      	movs	r0, #12
 8000620:	f000 fde2 	bl	80011e8 <HAL_NVIC_EnableIRQ>

}
 8000624:	bf00      	nop
 8000626:	3708      	adds	r7, #8
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}
 800062c:	58024400 	.word	0x58024400

08000630 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b088      	sub	sp, #32
 8000634:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000636:	f107 030c 	add.w	r3, r7, #12
 800063a:	2200      	movs	r2, #0
 800063c:	601a      	str	r2, [r3, #0]
 800063e:	605a      	str	r2, [r3, #4]
 8000640:	609a      	str	r2, [r3, #8]
 8000642:	60da      	str	r2, [r3, #12]
 8000644:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000646:	4b1b      	ldr	r3, [pc, #108]	@ (80006b4 <MX_GPIO_Init+0x84>)
 8000648:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800064c:	4a19      	ldr	r2, [pc, #100]	@ (80006b4 <MX_GPIO_Init+0x84>)
 800064e:	f043 0302 	orr.w	r3, r3, #2
 8000652:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000656:	4b17      	ldr	r3, [pc, #92]	@ (80006b4 <MX_GPIO_Init+0x84>)
 8000658:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800065c:	f003 0302 	and.w	r3, r3, #2
 8000660:	60bb      	str	r3, [r7, #8]
 8000662:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000664:	4b13      	ldr	r3, [pc, #76]	@ (80006b4 <MX_GPIO_Init+0x84>)
 8000666:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800066a:	4a12      	ldr	r2, [pc, #72]	@ (80006b4 <MX_GPIO_Init+0x84>)
 800066c:	f043 0301 	orr.w	r3, r3, #1
 8000670:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000674:	4b0f      	ldr	r3, [pc, #60]	@ (80006b4 <MX_GPIO_Init+0x84>)
 8000676:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800067a:	f003 0301 	and.w	r3, r3, #1
 800067e:	607b      	str	r3, [r7, #4]
 8000680:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = esp32i2cInterruptReqest_Pin;
 8000682:	2320      	movs	r3, #32
 8000684:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000686:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800068a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068c:	2300      	movs	r3, #0
 800068e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(esp32i2cInterruptReqest_GPIO_Port, &GPIO_InitStruct);
 8000690:	f107 030c 	add.w	r3, r7, #12
 8000694:	4619      	mov	r1, r3
 8000696:	4808      	ldr	r0, [pc, #32]	@ (80006b8 <MX_GPIO_Init+0x88>)
 8000698:	f002 fd34 	bl	8003104 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 800069c:	2200      	movs	r2, #0
 800069e:	2105      	movs	r1, #5
 80006a0:	2017      	movs	r0, #23
 80006a2:	f000 fd87 	bl	80011b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80006a6:	2017      	movs	r0, #23
 80006a8:	f000 fd9e 	bl	80011e8 <HAL_NVIC_EnableIRQ>

}
 80006ac:	bf00      	nop
 80006ae:	3720      	adds	r7, #32
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	58024400 	.word	0x58024400
 80006b8:	58020400 	.word	0x58020400

080006bc <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006c0:	4b1b      	ldr	r3, [pc, #108]	@ (8000730 <MX_I2C1_Init+0x74>)
 80006c2:	4a1c      	ldr	r2, [pc, #112]	@ (8000734 <MX_I2C1_Init+0x78>)
 80006c4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20B0CCFF;
 80006c6:	4b1a      	ldr	r3, [pc, #104]	@ (8000730 <MX_I2C1_Init+0x74>)
 80006c8:	4a1b      	ldr	r2, [pc, #108]	@ (8000738 <MX_I2C1_Init+0x7c>)
 80006ca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80006cc:	4b18      	ldr	r3, [pc, #96]	@ (8000730 <MX_I2C1_Init+0x74>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006d2:	4b17      	ldr	r3, [pc, #92]	@ (8000730 <MX_I2C1_Init+0x74>)
 80006d4:	2201      	movs	r2, #1
 80006d6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006d8:	4b15      	ldr	r3, [pc, #84]	@ (8000730 <MX_I2C1_Init+0x74>)
 80006da:	2200      	movs	r2, #0
 80006dc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80006de:	4b14      	ldr	r3, [pc, #80]	@ (8000730 <MX_I2C1_Init+0x74>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006e4:	4b12      	ldr	r3, [pc, #72]	@ (8000730 <MX_I2C1_Init+0x74>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006ea:	4b11      	ldr	r3, [pc, #68]	@ (8000730 <MX_I2C1_Init+0x74>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 80006f0:	4b0f      	ldr	r3, [pc, #60]	@ (8000730 <MX_I2C1_Init+0x74>)
 80006f2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80006f6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006f8:	480d      	ldr	r0, [pc, #52]	@ (8000730 <MX_I2C1_Init+0x74>)
 80006fa:	f002 fed9 	bl	80034b0 <HAL_I2C_Init>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000704:	f000 f9d8 	bl	8000ab8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000708:	2100      	movs	r1, #0
 800070a:	4809      	ldr	r0, [pc, #36]	@ (8000730 <MX_I2C1_Init+0x74>)
 800070c:	f004 f974 	bl	80049f8 <HAL_I2CEx_ConfigAnalogFilter>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000716:	f000 f9cf 	bl	8000ab8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800071a:	2100      	movs	r1, #0
 800071c:	4804      	ldr	r0, [pc, #16]	@ (8000730 <MX_I2C1_Init+0x74>)
 800071e:	f004 f9b6 	bl	8004a8e <HAL_I2CEx_ConfigDigitalFilter>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000728:	f000 f9c6 	bl	8000ab8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800072c:	bf00      	nop
 800072e:	bd80      	pop	{r7, pc}
 8000730:	24000080 	.word	0x24000080
 8000734:	40005400 	.word	0x40005400
 8000738:	20b0ccff 	.word	0x20b0ccff

0800073c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b0ba      	sub	sp, #232	@ 0xe8
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000744:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000748:	2200      	movs	r2, #0
 800074a:	601a      	str	r2, [r3, #0]
 800074c:	605a      	str	r2, [r3, #4]
 800074e:	609a      	str	r2, [r3, #8]
 8000750:	60da      	str	r2, [r3, #12]
 8000752:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000754:	f107 0310 	add.w	r3, r7, #16
 8000758:	22c0      	movs	r2, #192	@ 0xc0
 800075a:	2100      	movs	r1, #0
 800075c:	4618      	mov	r0, r3
 800075e:	f009 fb2d 	bl	8009dbc <memset>
  if(i2cHandle->Instance==I2C1)
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	4a5c      	ldr	r2, [pc, #368]	@ (80008d8 <HAL_I2C_MspInit+0x19c>)
 8000768:	4293      	cmp	r3, r2
 800076a:	f040 80b1 	bne.w	80008d0 <HAL_I2C_MspInit+0x194>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800076e:	f04f 0208 	mov.w	r2, #8
 8000772:	f04f 0300 	mov.w	r3, #0
 8000776:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 800077a:	2300      	movs	r3, #0
 800077c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000780:	f107 0310 	add.w	r3, r7, #16
 8000784:	4618      	mov	r0, r3
 8000786:	f005 fa09 	bl	8005b9c <HAL_RCCEx_PeriphCLKConfig>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <HAL_I2C_MspInit+0x58>
    {
      Error_Handler();
 8000790:	f000 f992 	bl	8000ab8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000794:	4b51      	ldr	r3, [pc, #324]	@ (80008dc <HAL_I2C_MspInit+0x1a0>)
 8000796:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800079a:	4a50      	ldr	r2, [pc, #320]	@ (80008dc <HAL_I2C_MspInit+0x1a0>)
 800079c:	f043 0302 	orr.w	r3, r3, #2
 80007a0:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80007a4:	4b4d      	ldr	r3, [pc, #308]	@ (80008dc <HAL_I2C_MspInit+0x1a0>)
 80007a6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80007aa:	f003 0302 	and.w	r3, r3, #2
 80007ae:	60fb      	str	r3, [r7, #12]
 80007b0:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80007b2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80007b6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007ba:	2312      	movs	r3, #18
 80007bc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c0:	2300      	movs	r3, #0
 80007c2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c6:	2300      	movs	r3, #0
 80007c8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80007cc:	2304      	movs	r3, #4
 80007ce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007d2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80007d6:	4619      	mov	r1, r3
 80007d8:	4841      	ldr	r0, [pc, #260]	@ (80008e0 <HAL_I2C_MspInit+0x1a4>)
 80007da:	f002 fc93 	bl	8003104 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80007de:	4b3f      	ldr	r3, [pc, #252]	@ (80008dc <HAL_I2C_MspInit+0x1a0>)
 80007e0:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80007e4:	4a3d      	ldr	r2, [pc, #244]	@ (80008dc <HAL_I2C_MspInit+0x1a0>)
 80007e6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80007ea:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 80007ee:	4b3b      	ldr	r3, [pc, #236]	@ (80008dc <HAL_I2C_MspInit+0x1a0>)
 80007f0:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80007f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80007f8:	60bb      	str	r3, [r7, #8]
 80007fa:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 80007fc:	4b39      	ldr	r3, [pc, #228]	@ (80008e4 <HAL_I2C_MspInit+0x1a8>)
 80007fe:	4a3a      	ldr	r2, [pc, #232]	@ (80008e8 <HAL_I2C_MspInit+0x1ac>)
 8000800:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 8000802:	4b38      	ldr	r3, [pc, #224]	@ (80008e4 <HAL_I2C_MspInit+0x1a8>)
 8000804:	2221      	movs	r2, #33	@ 0x21
 8000806:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000808:	4b36      	ldr	r3, [pc, #216]	@ (80008e4 <HAL_I2C_MspInit+0x1a8>)
 800080a:	2200      	movs	r2, #0
 800080c:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800080e:	4b35      	ldr	r3, [pc, #212]	@ (80008e4 <HAL_I2C_MspInit+0x1a8>)
 8000810:	2200      	movs	r2, #0
 8000812:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000814:	4b33      	ldr	r3, [pc, #204]	@ (80008e4 <HAL_I2C_MspInit+0x1a8>)
 8000816:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800081a:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800081c:	4b31      	ldr	r3, [pc, #196]	@ (80008e4 <HAL_I2C_MspInit+0x1a8>)
 800081e:	2200      	movs	r2, #0
 8000820:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000822:	4b30      	ldr	r3, [pc, #192]	@ (80008e4 <HAL_I2C_MspInit+0x1a8>)
 8000824:	2200      	movs	r2, #0
 8000826:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8000828:	4b2e      	ldr	r3, [pc, #184]	@ (80008e4 <HAL_I2C_MspInit+0x1a8>)
 800082a:	2200      	movs	r2, #0
 800082c:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800082e:	4b2d      	ldr	r3, [pc, #180]	@ (80008e4 <HAL_I2C_MspInit+0x1a8>)
 8000830:	2200      	movs	r2, #0
 8000832:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000834:	4b2b      	ldr	r3, [pc, #172]	@ (80008e4 <HAL_I2C_MspInit+0x1a8>)
 8000836:	2200      	movs	r2, #0
 8000838:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800083a:	482a      	ldr	r0, [pc, #168]	@ (80008e4 <HAL_I2C_MspInit+0x1a8>)
 800083c:	f000 fce2 	bl	8001204 <HAL_DMA_Init>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <HAL_I2C_MspInit+0x10e>
    {
      Error_Handler();
 8000846:	f000 f937 	bl	8000ab8 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	4a25      	ldr	r2, [pc, #148]	@ (80008e4 <HAL_I2C_MspInit+0x1a8>)
 800084e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000850:	4a24      	ldr	r2, [pc, #144]	@ (80008e4 <HAL_I2C_MspInit+0x1a8>)
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream1;
 8000856:	4b25      	ldr	r3, [pc, #148]	@ (80008ec <HAL_I2C_MspInit+0x1b0>)
 8000858:	4a25      	ldr	r2, [pc, #148]	@ (80008f0 <HAL_I2C_MspInit+0x1b4>)
 800085a:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 800085c:	4b23      	ldr	r3, [pc, #140]	@ (80008ec <HAL_I2C_MspInit+0x1b0>)
 800085e:	2222      	movs	r2, #34	@ 0x22
 8000860:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000862:	4b22      	ldr	r3, [pc, #136]	@ (80008ec <HAL_I2C_MspInit+0x1b0>)
 8000864:	2240      	movs	r2, #64	@ 0x40
 8000866:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000868:	4b20      	ldr	r3, [pc, #128]	@ (80008ec <HAL_I2C_MspInit+0x1b0>)
 800086a:	2200      	movs	r2, #0
 800086c:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800086e:	4b1f      	ldr	r3, [pc, #124]	@ (80008ec <HAL_I2C_MspInit+0x1b0>)
 8000870:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000874:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000876:	4b1d      	ldr	r3, [pc, #116]	@ (80008ec <HAL_I2C_MspInit+0x1b0>)
 8000878:	2200      	movs	r2, #0
 800087a:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800087c:	4b1b      	ldr	r3, [pc, #108]	@ (80008ec <HAL_I2C_MspInit+0x1b0>)
 800087e:	2200      	movs	r2, #0
 8000880:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8000882:	4b1a      	ldr	r3, [pc, #104]	@ (80008ec <HAL_I2C_MspInit+0x1b0>)
 8000884:	2200      	movs	r2, #0
 8000886:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000888:	4b18      	ldr	r3, [pc, #96]	@ (80008ec <HAL_I2C_MspInit+0x1b0>)
 800088a:	2200      	movs	r2, #0
 800088c:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800088e:	4b17      	ldr	r3, [pc, #92]	@ (80008ec <HAL_I2C_MspInit+0x1b0>)
 8000890:	2200      	movs	r2, #0
 8000892:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8000894:	4815      	ldr	r0, [pc, #84]	@ (80008ec <HAL_I2C_MspInit+0x1b0>)
 8000896:	f000 fcb5 	bl	8001204 <HAL_DMA_Init>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <HAL_I2C_MspInit+0x168>
    {
      Error_Handler();
 80008a0:	f000 f90a 	bl	8000ab8 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	4a11      	ldr	r2, [pc, #68]	@ (80008ec <HAL_I2C_MspInit+0x1b0>)
 80008a8:	639a      	str	r2, [r3, #56]	@ 0x38
 80008aa:	4a10      	ldr	r2, [pc, #64]	@ (80008ec <HAL_I2C_MspInit+0x1b0>)
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 80008b0:	2200      	movs	r2, #0
 80008b2:	2105      	movs	r1, #5
 80008b4:	201f      	movs	r0, #31
 80008b6:	f000 fc7d 	bl	80011b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80008ba:	201f      	movs	r0, #31
 80008bc:	f000 fc94 	bl	80011e8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 80008c0:	2200      	movs	r2, #0
 80008c2:	2105      	movs	r1, #5
 80008c4:	2020      	movs	r0, #32
 80008c6:	f000 fc75 	bl	80011b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80008ca:	2020      	movs	r0, #32
 80008cc:	f000 fc8c 	bl	80011e8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80008d0:	bf00      	nop
 80008d2:	37e8      	adds	r7, #232	@ 0xe8
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	40005400 	.word	0x40005400
 80008dc:	58024400 	.word	0x58024400
 80008e0:	58020400 	.word	0x58020400
 80008e4:	240000d4 	.word	0x240000d4
 80008e8:	40020010 	.word	0x40020010
 80008ec:	2400014c 	.word	0x2400014c
 80008f0:	40020028 	.word	0x40020028

080008f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b08e      	sub	sp, #56	@ 0x38
 80008f8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008fa:	f000 fb47 	bl	8000f8c <HAL_Init>
  // Wyłączenie D-Cache (cache danych)
  //SCB_DisableDCache();
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008fe:	f000 f853 	bl	80009a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000902:	f7ff fe95 	bl	8000630 <MX_GPIO_Init>
  MX_DMA_Init();
 8000906:	f7ff fe6b 	bl	80005e0 <MX_DMA_Init>
  MX_USART1_UART_Init();
 800090a:	f000 fa5f 	bl	8000dcc <MX_USART1_UART_Init>
  MX_I2C1_Init();
 800090e:	f7ff fed5 	bl	80006bc <MX_I2C1_Init>



	void* testBuffer;

	QueueHandle_t handler_Queue = xQueueCreate(20, sizeof(uint8_t));
 8000912:	2200      	movs	r2, #0
 8000914:	2101      	movs	r1, #1
 8000916:	2014      	movs	r0, #20
 8000918:	f008 fca6 	bl	8009268 <xQueueGenericCreate>
 800091c:	62b8      	str	r0, [r7, #40]	@ 0x28

	char trash[] = "HelloABCDEF";
 800091e:	4a1f      	ldr	r2, [pc, #124]	@ (800099c <main+0xa8>)
 8000920:	f107 0310 	add.w	r3, r7, #16
 8000924:	ca07      	ldmia	r2, {r0, r1, r2}
 8000926:	e883 0007 	stmia.w	r3, {r0, r1, r2}


	i2cFrame_transmitQueue testTransm;

	testTransm.slaveDevice7bitAddress = 0x3C<<1;
 800092a:	2378      	movs	r3, #120	@ 0x78
 800092c:	713b      	strb	r3, [r7, #4]
	testTransm.dataSize =sizeof(trash);
 800092e:	230c      	movs	r3, #12
 8000930:	60bb      	str	r3, [r7, #8]
	testTransm.pData = &trash;
 8000932:	f107 0310 	add.w	r3, r7, #16
 8000936:	60fb      	str	r3, [r7, #12]


	size_t bufferLenght = sizeof(testTransm.dataSize)+testTransm.dataSize;
 8000938:	68bb      	ldr	r3, [r7, #8]
 800093a:	3304      	adds	r3, #4
 800093c:	627b      	str	r3, [r7, #36]	@ 0x24
	testBuffer = malloc(bufferLenght);
 800093e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000940:	f009 f986 	bl	8009c50 <malloc>
 8000944:	4603      	mov	r3, r0
 8000946:	623b      	str	r3, [r7, #32]

	memcpy(testBuffer,&testTransm.dataSize, sizeof(testTransm.dataSize));
 8000948:	68ba      	ldr	r2, [r7, #8]
 800094a:	6a3b      	ldr	r3, [r7, #32]
 800094c:	601a      	str	r2, [r3, #0]
	memcpy(testBuffer+sizeof(size_t), testTransm.pData, testTransm.dataSize);
 800094e:	6a3b      	ldr	r3, [r7, #32]
 8000950:	3304      	adds	r3, #4
 8000952:	68f9      	ldr	r1, [r7, #12]
 8000954:	68ba      	ldr	r2, [r7, #8]
 8000956:	4618      	mov	r0, r3
 8000958:	f009 fa74 	bl	8009e44 <memcpy>


	while(1){
		while(HAL_I2C_GetState(&hi2c1)!= HAL_I2C_STATE_READY){};
 800095c:	bf00      	nop
 800095e:	4810      	ldr	r0, [pc, #64]	@ (80009a0 <main+0xac>)
 8000960:	f003 f80f 	bl	8003982 <HAL_I2C_GetState>
 8000964:	4603      	mov	r3, r0
 8000966:	2b20      	cmp	r3, #32
 8000968:	d1f9      	bne.n	800095e <main+0x6a>

		//HAL_StatusTypeDef retVal =HAL_I2C_Master_Transmit_DMA(&hi2c1, I2C_SLAVE_ADDRESS_ESP32<<1, (uint8_t*) testBuffer, bufferLenght);
		HAL_StatusTypeDef retVal =HAL_I2C_Master_Transmit(&hi2c1, I2C_SLAVE_ADDRESS_ESP32<<1, (uint8_t*) testBuffer, bufferLenght+500, 200);
 800096a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800096c:	b29b      	uxth	r3, r3
 800096e:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8000972:	b29b      	uxth	r3, r3
 8000974:	22c8      	movs	r2, #200	@ 0xc8
 8000976:	9200      	str	r2, [sp, #0]
 8000978:	6a3a      	ldr	r2, [r7, #32]
 800097a:	2178      	movs	r1, #120	@ 0x78
 800097c:	4808      	ldr	r0, [pc, #32]	@ (80009a0 <main+0xac>)
 800097e:	f002 fe33 	bl	80035e8 <HAL_I2C_Master_Transmit>
 8000982:	4603      	mov	r3, r0
 8000984:	77fb      	strb	r3, [r7, #31]
		//pętla opóźniająca jest potrzebna między kolejnymi przesyłkami
		for(uint32_t i=0; i<0xfffff; i++){
 8000986:	2300      	movs	r3, #0
 8000988:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800098a:	e002      	b.n	8000992 <main+0x9e>
 800098c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800098e:	3301      	adds	r3, #1
 8000990:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000992:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000994:	4a03      	ldr	r2, [pc, #12]	@ (80009a4 <main+0xb0>)
 8000996:	4293      	cmp	r3, r2
 8000998:	d9f8      	bls.n	800098c <main+0x98>
	while(1){
 800099a:	e7df      	b.n	800095c <main+0x68>
 800099c:	08009e78 	.word	0x08009e78
 80009a0:	24000080 	.word	0x24000080
 80009a4:	000ffffe 	.word	0x000ffffe

080009a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b09c      	sub	sp, #112	@ 0x70
 80009ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009b2:	224c      	movs	r2, #76	@ 0x4c
 80009b4:	2100      	movs	r1, #0
 80009b6:	4618      	mov	r0, r3
 80009b8:	f009 fa00 	bl	8009dbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009bc:	1d3b      	adds	r3, r7, #4
 80009be:	2220      	movs	r2, #32
 80009c0:	2100      	movs	r1, #0
 80009c2:	4618      	mov	r0, r3
 80009c4:	f009 f9fa 	bl	8009dbc <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 80009c8:	4b30      	ldr	r3, [pc, #192]	@ (8000a8c <SystemClock_Config+0xe4>)
 80009ca:	f04f 32ff 	mov.w	r2, #4294967295
 80009ce:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80009d2:	2002      	movs	r0, #2
 80009d4:	f004 f8a8 	bl	8004b28 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80009d8:	2300      	movs	r3, #0
 80009da:	603b      	str	r3, [r7, #0]
 80009dc:	4b2c      	ldr	r3, [pc, #176]	@ (8000a90 <SystemClock_Config+0xe8>)
 80009de:	699b      	ldr	r3, [r3, #24]
 80009e0:	4a2b      	ldr	r2, [pc, #172]	@ (8000a90 <SystemClock_Config+0xe8>)
 80009e2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80009e6:	6193      	str	r3, [r2, #24]
 80009e8:	4b29      	ldr	r3, [pc, #164]	@ (8000a90 <SystemClock_Config+0xe8>)
 80009ea:	699b      	ldr	r3, [r3, #24]
 80009ec:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80009f0:	603b      	str	r3, [r7, #0]
 80009f2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80009f4:	bf00      	nop
 80009f6:	4b26      	ldr	r3, [pc, #152]	@ (8000a90 <SystemClock_Config+0xe8>)
 80009f8:	699b      	ldr	r3, [r3, #24]
 80009fa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80009fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000a02:	d1f8      	bne.n	80009f6 <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a04:	2302      	movs	r3, #2
 8000a06:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000a08:	2301      	movs	r3, #1
 8000a0a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8000a0c:	2340      	movs	r3, #64	@ 0x40
 8000a0e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a10:	2302      	movs	r3, #2
 8000a12:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a14:	2300      	movs	r3, #0
 8000a16:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a18:	2304      	movs	r3, #4
 8000a1a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 35;
 8000a1c:	2323      	movs	r3, #35	@ 0x23
 8000a1e:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000a20:	2302      	movs	r3, #2
 8000a22:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000a24:	2302      	movs	r3, #2
 8000a26:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a28:	2302      	movs	r3, #2
 8000a2a:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000a2c:	230c      	movs	r3, #12
 8000a2e:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000a30:	2300      	movs	r3, #0
 8000a32:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000a34:	2300      	movs	r3, #0
 8000a36:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a38:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f004 f8ad 	bl	8004b9c <HAL_RCC_OscConfig>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000a48:	f000 f836 	bl	8000ab8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a4c:	233f      	movs	r3, #63	@ 0x3f
 8000a4e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a50:	2303      	movs	r3, #3
 8000a52:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a54:	2300      	movs	r3, #0
 8000a56:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000a5c:	2340      	movs	r3, #64	@ 0x40
 8000a5e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000a60:	2340      	movs	r3, #64	@ 0x40
 8000a62:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000a64:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a68:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000a6a:	2340      	movs	r3, #64	@ 0x40
 8000a6c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000a6e:	1d3b      	adds	r3, r7, #4
 8000a70:	2106      	movs	r1, #6
 8000a72:	4618      	mov	r0, r3
 8000a74:	f004 fcc4 	bl	8005400 <HAL_RCC_ClockConfig>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <SystemClock_Config+0xda>
  {
    Error_Handler();
 8000a7e:	f000 f81b 	bl	8000ab8 <Error_Handler>
  }
}
 8000a82:	bf00      	nop
 8000a84:	3770      	adds	r7, #112	@ 0x70
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	58024400 	.word	0x58024400
 8000a90:	58024800 	.word	0x58024800

08000a94 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	4a04      	ldr	r2, [pc, #16]	@ (8000ab4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000aa2:	4293      	cmp	r3, r2
 8000aa4:	d101      	bne.n	8000aaa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000aa6:	f000 faad 	bl	8001004 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000aaa:	bf00      	nop
 8000aac:	3708      	adds	r7, #8
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	40010000 	.word	0x40010000

08000ab8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000abc:	b672      	cpsid	i
}
 8000abe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ac0:	bf00      	nop
 8000ac2:	e7fd      	b.n	8000ac0 <Error_Handler+0x8>

08000ac4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aca:	4b0c      	ldr	r3, [pc, #48]	@ (8000afc <HAL_MspInit+0x38>)
 8000acc:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000ad0:	4a0a      	ldr	r2, [pc, #40]	@ (8000afc <HAL_MspInit+0x38>)
 8000ad2:	f043 0302 	orr.w	r3, r3, #2
 8000ad6:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8000ada:	4b08      	ldr	r3, [pc, #32]	@ (8000afc <HAL_MspInit+0x38>)
 8000adc:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000ae0:	f003 0302 	and.w	r3, r3, #2
 8000ae4:	607b      	str	r3, [r7, #4]
 8000ae6:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ae8:	2200      	movs	r2, #0
 8000aea:	210f      	movs	r1, #15
 8000aec:	f06f 0001 	mvn.w	r0, #1
 8000af0:	f000 fb60 	bl	80011b4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000af4:	bf00      	nop
 8000af6:	3708      	adds	r7, #8
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	58024400 	.word	0x58024400

08000b00 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b08e      	sub	sp, #56	@ 0x38
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	2b0f      	cmp	r3, #15
 8000b0c:	d844      	bhi.n	8000b98 <HAL_InitTick+0x98>
  {
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0U);
 8000b0e:	2200      	movs	r2, #0
 8000b10:	6879      	ldr	r1, [r7, #4]
 8000b12:	2019      	movs	r0, #25
 8000b14:	f000 fb4e 	bl	80011b4 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000b18:	2019      	movs	r0, #25
 8000b1a:	f000 fb65 	bl	80011e8 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8000b1e:	4a24      	ldr	r2, [pc, #144]	@ (8000bb0 <HAL_InitTick+0xb0>)
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000b24:	4b23      	ldr	r3, [pc, #140]	@ (8000bb4 <HAL_InitTick+0xb4>)
 8000b26:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8000b2a:	4a22      	ldr	r2, [pc, #136]	@ (8000bb4 <HAL_InitTick+0xb4>)
 8000b2c:	f043 0301 	orr.w	r3, r3, #1
 8000b30:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 8000b34:	4b1f      	ldr	r3, [pc, #124]	@ (8000bb4 <HAL_InitTick+0xb4>)
 8000b36:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8000b3a:	f003 0301 	and.w	r3, r3, #1
 8000b3e:	60bb      	str	r3, [r7, #8]
 8000b40:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b42:	f107 020c 	add.w	r2, r7, #12
 8000b46:	f107 0310 	add.w	r3, r7, #16
 8000b4a:	4611      	mov	r1, r2
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f004 ffe3 	bl	8005b18 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000b52:	f004 ffcb 	bl	8005aec <HAL_RCC_GetPCLK2Freq>
 8000b56:	4603      	mov	r3, r0
 8000b58:	005b      	lsls	r3, r3, #1
 8000b5a:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000b5e:	4a16      	ldr	r2, [pc, #88]	@ (8000bb8 <HAL_InitTick+0xb8>)
 8000b60:	fba2 2303 	umull	r2, r3, r2, r3
 8000b64:	0c9b      	lsrs	r3, r3, #18
 8000b66:	3b01      	subs	r3, #1
 8000b68:	633b      	str	r3, [r7, #48]	@ 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000b6a:	4b14      	ldr	r3, [pc, #80]	@ (8000bbc <HAL_InitTick+0xbc>)
 8000b6c:	4a14      	ldr	r2, [pc, #80]	@ (8000bc0 <HAL_InitTick+0xc0>)
 8000b6e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000b70:	4b12      	ldr	r3, [pc, #72]	@ (8000bbc <HAL_InitTick+0xbc>)
 8000b72:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000b76:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000b78:	4a10      	ldr	r2, [pc, #64]	@ (8000bbc <HAL_InitTick+0xbc>)
 8000b7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000b7c:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000b7e:	4b0f      	ldr	r3, [pc, #60]	@ (8000bbc <HAL_InitTick+0xbc>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b84:	4b0d      	ldr	r3, [pc, #52]	@ (8000bbc <HAL_InitTick+0xbc>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000b8a:	480c      	ldr	r0, [pc, #48]	@ (8000bbc <HAL_InitTick+0xbc>)
 8000b8c:	f006 fde6 	bl	800775c <HAL_TIM_Base_Init>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d107      	bne.n	8000ba6 <HAL_InitTick+0xa6>
 8000b96:	e001      	b.n	8000b9c <HAL_InitTick+0x9c>
    return HAL_ERROR;
 8000b98:	2301      	movs	r3, #1
 8000b9a:	e005      	b.n	8000ba8 <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000b9c:	4807      	ldr	r0, [pc, #28]	@ (8000bbc <HAL_InitTick+0xbc>)
 8000b9e:	f006 fe3f 	bl	8007820 <HAL_TIM_Base_Start_IT>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	e000      	b.n	8000ba8 <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 8000ba6:	2301      	movs	r3, #1
}
 8000ba8:	4618      	mov	r0, r3
 8000baa:	3738      	adds	r7, #56	@ 0x38
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	24000008 	.word	0x24000008
 8000bb4:	58024400 	.word	0x58024400
 8000bb8:	431bde83 	.word	0x431bde83
 8000bbc:	240001c4 	.word	0x240001c4
 8000bc0:	40010000 	.word	0x40010000

08000bc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bc8:	bf00      	nop
 8000bca:	e7fd      	b.n	8000bc8 <NMI_Handler+0x4>

08000bcc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bd0:	bf00      	nop
 8000bd2:	e7fd      	b.n	8000bd0 <HardFault_Handler+0x4>

08000bd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bd8:	bf00      	nop
 8000bda:	e7fd      	b.n	8000bd8 <MemManage_Handler+0x4>

08000bdc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000be0:	bf00      	nop
 8000be2:	e7fd      	b.n	8000be0 <BusFault_Handler+0x4>

08000be4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000be8:	bf00      	nop
 8000bea:	e7fd      	b.n	8000be8 <UsageFault_Handler+0x4>

08000bec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bf0:	bf00      	nop
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr
	...

08000bfc <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8000c00:	4802      	ldr	r0, [pc, #8]	@ (8000c0c <DMA1_Stream0_IRQHandler+0x10>)
 8000c02:	f001 f8d3 	bl	8001dac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000c06:	bf00      	nop
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	240000d4 	.word	0x240000d4

08000c10 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8000c14:	4802      	ldr	r0, [pc, #8]	@ (8000c20 <DMA1_Stream1_IRQHandler+0x10>)
 8000c16:	f001 f8c9 	bl	8001dac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8000c1a:	bf00      	nop
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	2400014c 	.word	0x2400014c

08000c24 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(esp32i2cInterruptReqest_Pin);
 8000c28:	2020      	movs	r0, #32
 8000c2a:	f002 fc1b 	bl	8003464 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000c2e:	bf00      	nop
 8000c30:	bd80      	pop	{r7, pc}
	...

08000c34 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000c38:	4802      	ldr	r0, [pc, #8]	@ (8000c44 <TIM1_UP_IRQHandler+0x10>)
 8000c3a:	f006 fe69 	bl	8007910 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000c3e:	bf00      	nop
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	240001c4 	.word	0x240001c4

08000c48 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000c4c:	4802      	ldr	r0, [pc, #8]	@ (8000c58 <I2C1_EV_IRQHandler+0x10>)
 8000c4e:	f002 fde3 	bl	8003818 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000c52:	bf00      	nop
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	24000080 	.word	0x24000080

08000c5c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000c60:	4802      	ldr	r0, [pc, #8]	@ (8000c6c <I2C1_ER_IRQHandler+0x10>)
 8000c62:	f002 fdf3 	bl	800384c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000c66:	bf00      	nop
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	24000080 	.word	0x24000080

08000c70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b086      	sub	sp, #24
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c78:	4a14      	ldr	r2, [pc, #80]	@ (8000ccc <_sbrk+0x5c>)
 8000c7a:	4b15      	ldr	r3, [pc, #84]	@ (8000cd0 <_sbrk+0x60>)
 8000c7c:	1ad3      	subs	r3, r2, r3
 8000c7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c80:	697b      	ldr	r3, [r7, #20]
 8000c82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c84:	4b13      	ldr	r3, [pc, #76]	@ (8000cd4 <_sbrk+0x64>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d102      	bne.n	8000c92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c8c:	4b11      	ldr	r3, [pc, #68]	@ (8000cd4 <_sbrk+0x64>)
 8000c8e:	4a12      	ldr	r2, [pc, #72]	@ (8000cd8 <_sbrk+0x68>)
 8000c90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c92:	4b10      	ldr	r3, [pc, #64]	@ (8000cd4 <_sbrk+0x64>)
 8000c94:	681a      	ldr	r2, [r3, #0]
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	4413      	add	r3, r2
 8000c9a:	693a      	ldr	r2, [r7, #16]
 8000c9c:	429a      	cmp	r2, r3
 8000c9e:	d207      	bcs.n	8000cb0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ca0:	f009 f8a4 	bl	8009dec <__errno>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	220c      	movs	r2, #12
 8000ca8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000caa:	f04f 33ff 	mov.w	r3, #4294967295
 8000cae:	e009      	b.n	8000cc4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cb0:	4b08      	ldr	r3, [pc, #32]	@ (8000cd4 <_sbrk+0x64>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cb6:	4b07      	ldr	r3, [pc, #28]	@ (8000cd4 <_sbrk+0x64>)
 8000cb8:	681a      	ldr	r2, [r3, #0]
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	4413      	add	r3, r2
 8000cbe:	4a05      	ldr	r2, [pc, #20]	@ (8000cd4 <_sbrk+0x64>)
 8000cc0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cc2:	68fb      	ldr	r3, [r7, #12]
}
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	3718      	adds	r7, #24
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	24100000 	.word	0x24100000
 8000cd0:	00000400 	.word	0x00000400
 8000cd4:	24000210 	.word	0x24000210
 8000cd8:	240040e0 	.word	0x240040e0

08000cdc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000ce0:	4b32      	ldr	r3, [pc, #200]	@ (8000dac <SystemInit+0xd0>)
 8000ce2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ce6:	4a31      	ldr	r2, [pc, #196]	@ (8000dac <SystemInit+0xd0>)
 8000ce8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000cec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000cf0:	4b2f      	ldr	r3, [pc, #188]	@ (8000db0 <SystemInit+0xd4>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	f003 030f 	and.w	r3, r3, #15
 8000cf8:	2b02      	cmp	r3, #2
 8000cfa:	d807      	bhi.n	8000d0c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000cfc:	4b2c      	ldr	r3, [pc, #176]	@ (8000db0 <SystemInit+0xd4>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	f023 030f 	bic.w	r3, r3, #15
 8000d04:	4a2a      	ldr	r2, [pc, #168]	@ (8000db0 <SystemInit+0xd4>)
 8000d06:	f043 0303 	orr.w	r3, r3, #3
 8000d0a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000d0c:	4b29      	ldr	r3, [pc, #164]	@ (8000db4 <SystemInit+0xd8>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a28      	ldr	r2, [pc, #160]	@ (8000db4 <SystemInit+0xd8>)
 8000d12:	f043 0301 	orr.w	r3, r3, #1
 8000d16:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000d18:	4b26      	ldr	r3, [pc, #152]	@ (8000db4 <SystemInit+0xd8>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000d1e:	4b25      	ldr	r3, [pc, #148]	@ (8000db4 <SystemInit+0xd8>)
 8000d20:	681a      	ldr	r2, [r3, #0]
 8000d22:	4924      	ldr	r1, [pc, #144]	@ (8000db4 <SystemInit+0xd8>)
 8000d24:	4b24      	ldr	r3, [pc, #144]	@ (8000db8 <SystemInit+0xdc>)
 8000d26:	4013      	ands	r3, r2
 8000d28:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000d2a:	4b21      	ldr	r3, [pc, #132]	@ (8000db0 <SystemInit+0xd4>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	f003 030c 	and.w	r3, r3, #12
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d007      	beq.n	8000d46 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000d36:	4b1e      	ldr	r3, [pc, #120]	@ (8000db0 <SystemInit+0xd4>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	f023 030f 	bic.w	r3, r3, #15
 8000d3e:	4a1c      	ldr	r2, [pc, #112]	@ (8000db0 <SystemInit+0xd4>)
 8000d40:	f043 0303 	orr.w	r3, r3, #3
 8000d44:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8000d46:	4b1b      	ldr	r3, [pc, #108]	@ (8000db4 <SystemInit+0xd8>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8000d4c:	4b19      	ldr	r3, [pc, #100]	@ (8000db4 <SystemInit+0xd8>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8000d52:	4b18      	ldr	r3, [pc, #96]	@ (8000db4 <SystemInit+0xd8>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000d58:	4b16      	ldr	r3, [pc, #88]	@ (8000db4 <SystemInit+0xd8>)
 8000d5a:	4a18      	ldr	r2, [pc, #96]	@ (8000dbc <SystemInit+0xe0>)
 8000d5c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000d5e:	4b15      	ldr	r3, [pc, #84]	@ (8000db4 <SystemInit+0xd8>)
 8000d60:	4a17      	ldr	r2, [pc, #92]	@ (8000dc0 <SystemInit+0xe4>)
 8000d62:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000d64:	4b13      	ldr	r3, [pc, #76]	@ (8000db4 <SystemInit+0xd8>)
 8000d66:	4a17      	ldr	r2, [pc, #92]	@ (8000dc4 <SystemInit+0xe8>)
 8000d68:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000d6a:	4b12      	ldr	r3, [pc, #72]	@ (8000db4 <SystemInit+0xd8>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000d70:	4b10      	ldr	r3, [pc, #64]	@ (8000db4 <SystemInit+0xd8>)
 8000d72:	4a14      	ldr	r2, [pc, #80]	@ (8000dc4 <SystemInit+0xe8>)
 8000d74:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000d76:	4b0f      	ldr	r3, [pc, #60]	@ (8000db4 <SystemInit+0xd8>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000d7c:	4b0d      	ldr	r3, [pc, #52]	@ (8000db4 <SystemInit+0xd8>)
 8000d7e:	4a11      	ldr	r2, [pc, #68]	@ (8000dc4 <SystemInit+0xe8>)
 8000d80:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000d82:	4b0c      	ldr	r3, [pc, #48]	@ (8000db4 <SystemInit+0xd8>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000d88:	4b0a      	ldr	r3, [pc, #40]	@ (8000db4 <SystemInit+0xd8>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a09      	ldr	r2, [pc, #36]	@ (8000db4 <SystemInit+0xd8>)
 8000d8e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000d92:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000d94:	4b07      	ldr	r3, [pc, #28]	@ (8000db4 <SystemInit+0xd8>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000d9a:	4b0b      	ldr	r3, [pc, #44]	@ (8000dc8 <SystemInit+0xec>)
 8000d9c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000da0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000da2:	bf00      	nop
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr
 8000dac:	e000ed00 	.word	0xe000ed00
 8000db0:	52002000 	.word	0x52002000
 8000db4:	58024400 	.word	0x58024400
 8000db8:	eaf6ed7f 	.word	0xeaf6ed7f
 8000dbc:	02020200 	.word	0x02020200
 8000dc0:	01ff0000 	.word	0x01ff0000
 8000dc4:	01010280 	.word	0x01010280
 8000dc8:	52004000 	.word	0x52004000

08000dcc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000dd0:	4b22      	ldr	r3, [pc, #136]	@ (8000e5c <MX_USART1_UART_Init+0x90>)
 8000dd2:	4a23      	ldr	r2, [pc, #140]	@ (8000e60 <MX_USART1_UART_Init+0x94>)
 8000dd4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000dd6:	4b21      	ldr	r3, [pc, #132]	@ (8000e5c <MX_USART1_UART_Init+0x90>)
 8000dd8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ddc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000dde:	4b1f      	ldr	r3, [pc, #124]	@ (8000e5c <MX_USART1_UART_Init+0x90>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000de4:	4b1d      	ldr	r3, [pc, #116]	@ (8000e5c <MX_USART1_UART_Init+0x90>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000dea:	4b1c      	ldr	r3, [pc, #112]	@ (8000e5c <MX_USART1_UART_Init+0x90>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000df0:	4b1a      	ldr	r3, [pc, #104]	@ (8000e5c <MX_USART1_UART_Init+0x90>)
 8000df2:	220c      	movs	r2, #12
 8000df4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000df6:	4b19      	ldr	r3, [pc, #100]	@ (8000e5c <MX_USART1_UART_Init+0x90>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dfc:	4b17      	ldr	r3, [pc, #92]	@ (8000e5c <MX_USART1_UART_Init+0x90>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e02:	4b16      	ldr	r3, [pc, #88]	@ (8000e5c <MX_USART1_UART_Init+0x90>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e08:	4b14      	ldr	r3, [pc, #80]	@ (8000e5c <MX_USART1_UART_Init+0x90>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e0e:	4b13      	ldr	r3, [pc, #76]	@ (8000e5c <MX_USART1_UART_Init+0x90>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e14:	4811      	ldr	r0, [pc, #68]	@ (8000e5c <MX_USART1_UART_Init+0x90>)
 8000e16:	f006 ff6f 	bl	8007cf8 <HAL_UART_Init>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d001      	beq.n	8000e24 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000e20:	f7ff fe4a 	bl	8000ab8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e24:	2100      	movs	r1, #0
 8000e26:	480d      	ldr	r0, [pc, #52]	@ (8000e5c <MX_USART1_UART_Init+0x90>)
 8000e28:	f008 f87b 	bl	8008f22 <HAL_UARTEx_SetTxFifoThreshold>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000e32:	f7ff fe41 	bl	8000ab8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e36:	2100      	movs	r1, #0
 8000e38:	4808      	ldr	r0, [pc, #32]	@ (8000e5c <MX_USART1_UART_Init+0x90>)
 8000e3a:	f008 f8b0 	bl	8008f9e <HAL_UARTEx_SetRxFifoThreshold>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d001      	beq.n	8000e48 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000e44:	f7ff fe38 	bl	8000ab8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000e48:	4804      	ldr	r0, [pc, #16]	@ (8000e5c <MX_USART1_UART_Init+0x90>)
 8000e4a:	f008 f831 	bl	8008eb0 <HAL_UARTEx_DisableFifoMode>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d001      	beq.n	8000e58 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000e54:	f7ff fe30 	bl	8000ab8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e58:	bf00      	nop
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	24000214 	.word	0x24000214
 8000e60:	40011000 	.word	0x40011000

08000e64 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b0ba      	sub	sp, #232	@ 0xe8
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e6c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000e70:	2200      	movs	r2, #0
 8000e72:	601a      	str	r2, [r3, #0]
 8000e74:	605a      	str	r2, [r3, #4]
 8000e76:	609a      	str	r2, [r3, #8]
 8000e78:	60da      	str	r2, [r3, #12]
 8000e7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e7c:	f107 0310 	add.w	r3, r7, #16
 8000e80:	22c0      	movs	r2, #192	@ 0xc0
 8000e82:	2100      	movs	r1, #0
 8000e84:	4618      	mov	r0, r3
 8000e86:	f008 ff99 	bl	8009dbc <memset>
  if(uartHandle->Instance==USART1)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	4a27      	ldr	r2, [pc, #156]	@ (8000f2c <HAL_UART_MspInit+0xc8>)
 8000e90:	4293      	cmp	r3, r2
 8000e92:	d146      	bne.n	8000f22 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000e94:	f04f 0201 	mov.w	r2, #1
 8000e98:	f04f 0300 	mov.w	r3, #0
 8000e9c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ea6:	f107 0310 	add.w	r3, r7, #16
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f004 fe76 	bl	8005b9c <HAL_RCCEx_PeriphCLKConfig>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000eb6:	f7ff fdff 	bl	8000ab8 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000eba:	4b1d      	ldr	r3, [pc, #116]	@ (8000f30 <HAL_UART_MspInit+0xcc>)
 8000ebc:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8000ec0:	4a1b      	ldr	r2, [pc, #108]	@ (8000f30 <HAL_UART_MspInit+0xcc>)
 8000ec2:	f043 0310 	orr.w	r3, r3, #16
 8000ec6:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 8000eca:	4b19      	ldr	r3, [pc, #100]	@ (8000f30 <HAL_UART_MspInit+0xcc>)
 8000ecc:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8000ed0:	f003 0310 	and.w	r3, r3, #16
 8000ed4:	60fb      	str	r3, [r7, #12]
 8000ed6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ed8:	4b15      	ldr	r3, [pc, #84]	@ (8000f30 <HAL_UART_MspInit+0xcc>)
 8000eda:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000ede:	4a14      	ldr	r2, [pc, #80]	@ (8000f30 <HAL_UART_MspInit+0xcc>)
 8000ee0:	f043 0302 	orr.w	r3, r3, #2
 8000ee4:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000ee8:	4b11      	ldr	r3, [pc, #68]	@ (8000f30 <HAL_UART_MspInit+0xcc>)
 8000eea:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000eee:	f003 0302 	and.w	r3, r3, #2
 8000ef2:	60bb      	str	r3, [r7, #8]
 8000ef4:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = dbg_UART_TX_Pin|dbg_UART_RX_Pin;
 8000ef6:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000efa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000efe:	2302      	movs	r3, #2
 8000f00:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f04:	2300      	movs	r3, #0
 8000f06:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8000f10:	2304      	movs	r3, #4
 8000f12:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f16:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	4805      	ldr	r0, [pc, #20]	@ (8000f34 <HAL_UART_MspInit+0xd0>)
 8000f1e:	f002 f8f1 	bl	8003104 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000f22:	bf00      	nop
 8000f24:	37e8      	adds	r7, #232	@ 0xe8
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	40011000 	.word	0x40011000
 8000f30:	58024400 	.word	0x58024400
 8000f34:	58020400 	.word	0x58020400

08000f38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000f38:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f70 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f3c:	f7ff fece 	bl	8000cdc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f40:	480c      	ldr	r0, [pc, #48]	@ (8000f74 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f42:	490d      	ldr	r1, [pc, #52]	@ (8000f78 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f44:	4a0d      	ldr	r2, [pc, #52]	@ (8000f7c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f48:	e002      	b.n	8000f50 <LoopCopyDataInit>

08000f4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f4e:	3304      	adds	r3, #4

08000f50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f54:	d3f9      	bcc.n	8000f4a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f56:	4a0a      	ldr	r2, [pc, #40]	@ (8000f80 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f58:	4c0a      	ldr	r4, [pc, #40]	@ (8000f84 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f5c:	e001      	b.n	8000f62 <LoopFillZerobss>

08000f5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f60:	3204      	adds	r2, #4

08000f62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f64:	d3fb      	bcc.n	8000f5e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f66:	f008 ff47 	bl	8009df8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f6a:	f7ff fcc3 	bl	80008f4 <main>
  bx  lr
 8000f6e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f70:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8000f74:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000f78:	24000064 	.word	0x24000064
  ldr r2, =_sidata
 8000f7c:	08009ed4 	.word	0x08009ed4
  ldr r2, =_sbss
 8000f80:	24000064 	.word	0x24000064
  ldr r4, =_ebss
 8000f84:	240040dc 	.word	0x240040dc

08000f88 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f88:	e7fe      	b.n	8000f88 <ADC_IRQHandler>
	...

08000f8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f92:	2003      	movs	r0, #3
 8000f94:	f000 f903 	bl	800119e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8000f98:	f004 fbe8 	bl	800576c <HAL_RCC_GetSysClockFreq>
 8000f9c:	4602      	mov	r2, r0
 8000f9e:	4b15      	ldr	r3, [pc, #84]	@ (8000ff4 <HAL_Init+0x68>)
 8000fa0:	699b      	ldr	r3, [r3, #24]
 8000fa2:	0a1b      	lsrs	r3, r3, #8
 8000fa4:	f003 030f 	and.w	r3, r3, #15
 8000fa8:	4913      	ldr	r1, [pc, #76]	@ (8000ff8 <HAL_Init+0x6c>)
 8000faa:	5ccb      	ldrb	r3, [r1, r3]
 8000fac:	f003 031f 	and.w	r3, r3, #31
 8000fb0:	fa22 f303 	lsr.w	r3, r2, r3
 8000fb4:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8000fb6:	4b0f      	ldr	r3, [pc, #60]	@ (8000ff4 <HAL_Init+0x68>)
 8000fb8:	699b      	ldr	r3, [r3, #24]
 8000fba:	f003 030f 	and.w	r3, r3, #15
 8000fbe:	4a0e      	ldr	r2, [pc, #56]	@ (8000ff8 <HAL_Init+0x6c>)
 8000fc0:	5cd3      	ldrb	r3, [r2, r3]
 8000fc2:	f003 031f 	and.w	r3, r3, #31
 8000fc6:	687a      	ldr	r2, [r7, #4]
 8000fc8:	fa22 f303 	lsr.w	r3, r2, r3
 8000fcc:	4a0b      	ldr	r2, [pc, #44]	@ (8000ffc <HAL_Init+0x70>)
 8000fce:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000fd0:	4a0b      	ldr	r2, [pc, #44]	@ (8001000 <HAL_Init+0x74>)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fd6:	200f      	movs	r0, #15
 8000fd8:	f7ff fd92 	bl	8000b00 <HAL_InitTick>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	e002      	b.n	8000fec <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000fe6:	f7ff fd6d 	bl	8000ac4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fea:	2300      	movs	r3, #0
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	3708      	adds	r7, #8
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	58024400 	.word	0x58024400
 8000ff8:	08009e84 	.word	0x08009e84
 8000ffc:	24000004 	.word	0x24000004
 8001000:	24000000 	.word	0x24000000

08001004 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001008:	4b06      	ldr	r3, [pc, #24]	@ (8001024 <HAL_IncTick+0x20>)
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	461a      	mov	r2, r3
 800100e:	4b06      	ldr	r3, [pc, #24]	@ (8001028 <HAL_IncTick+0x24>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4413      	add	r3, r2
 8001014:	4a04      	ldr	r2, [pc, #16]	@ (8001028 <HAL_IncTick+0x24>)
 8001016:	6013      	str	r3, [r2, #0]
}
 8001018:	bf00      	nop
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	2400000c 	.word	0x2400000c
 8001028:	240002a8 	.word	0x240002a8

0800102c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  return uwTick;
 8001030:	4b03      	ldr	r3, [pc, #12]	@ (8001040 <HAL_GetTick+0x14>)
 8001032:	681b      	ldr	r3, [r3, #0]
}
 8001034:	4618      	mov	r0, r3
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	240002a8 	.word	0x240002a8

08001044 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001044:	b480      	push	{r7}
 8001046:	b085      	sub	sp, #20
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	f003 0307 	and.w	r3, r3, #7
 8001052:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001054:	4b0b      	ldr	r3, [pc, #44]	@ (8001084 <__NVIC_SetPriorityGrouping+0x40>)
 8001056:	68db      	ldr	r3, [r3, #12]
 8001058:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800105a:	68ba      	ldr	r2, [r7, #8]
 800105c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001060:	4013      	ands	r3, r2
 8001062:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800106c:	4b06      	ldr	r3, [pc, #24]	@ (8001088 <__NVIC_SetPriorityGrouping+0x44>)
 800106e:	4313      	orrs	r3, r2
 8001070:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001072:	4a04      	ldr	r2, [pc, #16]	@ (8001084 <__NVIC_SetPriorityGrouping+0x40>)
 8001074:	68bb      	ldr	r3, [r7, #8]
 8001076:	60d3      	str	r3, [r2, #12]
}
 8001078:	bf00      	nop
 800107a:	3714      	adds	r7, #20
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr
 8001084:	e000ed00 	.word	0xe000ed00
 8001088:	05fa0000 	.word	0x05fa0000

0800108c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001090:	4b04      	ldr	r3, [pc, #16]	@ (80010a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001092:	68db      	ldr	r3, [r3, #12]
 8001094:	0a1b      	lsrs	r3, r3, #8
 8001096:	f003 0307 	and.w	r3, r3, #7
}
 800109a:	4618      	mov	r0, r3
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr
 80010a4:	e000ed00 	.word	0xe000ed00

080010a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	4603      	mov	r3, r0
 80010b0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80010b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	db0b      	blt.n	80010d2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010ba:	88fb      	ldrh	r3, [r7, #6]
 80010bc:	f003 021f 	and.w	r2, r3, #31
 80010c0:	4907      	ldr	r1, [pc, #28]	@ (80010e0 <__NVIC_EnableIRQ+0x38>)
 80010c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010c6:	095b      	lsrs	r3, r3, #5
 80010c8:	2001      	movs	r0, #1
 80010ca:	fa00 f202 	lsl.w	r2, r0, r2
 80010ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80010d2:	bf00      	nop
 80010d4:	370c      	adds	r7, #12
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop
 80010e0:	e000e100 	.word	0xe000e100

080010e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	4603      	mov	r3, r0
 80010ec:	6039      	str	r1, [r7, #0]
 80010ee:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80010f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	db0a      	blt.n	800110e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	b2da      	uxtb	r2, r3
 80010fc:	490c      	ldr	r1, [pc, #48]	@ (8001130 <__NVIC_SetPriority+0x4c>)
 80010fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001102:	0112      	lsls	r2, r2, #4
 8001104:	b2d2      	uxtb	r2, r2
 8001106:	440b      	add	r3, r1
 8001108:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800110c:	e00a      	b.n	8001124 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	b2da      	uxtb	r2, r3
 8001112:	4908      	ldr	r1, [pc, #32]	@ (8001134 <__NVIC_SetPriority+0x50>)
 8001114:	88fb      	ldrh	r3, [r7, #6]
 8001116:	f003 030f 	and.w	r3, r3, #15
 800111a:	3b04      	subs	r3, #4
 800111c:	0112      	lsls	r2, r2, #4
 800111e:	b2d2      	uxtb	r2, r2
 8001120:	440b      	add	r3, r1
 8001122:	761a      	strb	r2, [r3, #24]
}
 8001124:	bf00      	nop
 8001126:	370c      	adds	r7, #12
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr
 8001130:	e000e100 	.word	0xe000e100
 8001134:	e000ed00 	.word	0xe000ed00

08001138 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001138:	b480      	push	{r7}
 800113a:	b089      	sub	sp, #36	@ 0x24
 800113c:	af00      	add	r7, sp, #0
 800113e:	60f8      	str	r0, [r7, #12]
 8001140:	60b9      	str	r1, [r7, #8]
 8001142:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	f003 0307 	and.w	r3, r3, #7
 800114a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800114c:	69fb      	ldr	r3, [r7, #28]
 800114e:	f1c3 0307 	rsb	r3, r3, #7
 8001152:	2b04      	cmp	r3, #4
 8001154:	bf28      	it	cs
 8001156:	2304      	movcs	r3, #4
 8001158:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800115a:	69fb      	ldr	r3, [r7, #28]
 800115c:	3304      	adds	r3, #4
 800115e:	2b06      	cmp	r3, #6
 8001160:	d902      	bls.n	8001168 <NVIC_EncodePriority+0x30>
 8001162:	69fb      	ldr	r3, [r7, #28]
 8001164:	3b03      	subs	r3, #3
 8001166:	e000      	b.n	800116a <NVIC_EncodePriority+0x32>
 8001168:	2300      	movs	r3, #0
 800116a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800116c:	f04f 32ff 	mov.w	r2, #4294967295
 8001170:	69bb      	ldr	r3, [r7, #24]
 8001172:	fa02 f303 	lsl.w	r3, r2, r3
 8001176:	43da      	mvns	r2, r3
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	401a      	ands	r2, r3
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001180:	f04f 31ff 	mov.w	r1, #4294967295
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	fa01 f303 	lsl.w	r3, r1, r3
 800118a:	43d9      	mvns	r1, r3
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001190:	4313      	orrs	r3, r2
         );
}
 8001192:	4618      	mov	r0, r3
 8001194:	3724      	adds	r7, #36	@ 0x24
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr

0800119e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800119e:	b580      	push	{r7, lr}
 80011a0:	b082      	sub	sp, #8
 80011a2:	af00      	add	r7, sp, #0
 80011a4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011a6:	6878      	ldr	r0, [r7, #4]
 80011a8:	f7ff ff4c 	bl	8001044 <__NVIC_SetPriorityGrouping>
}
 80011ac:	bf00      	nop
 80011ae:	3708      	adds	r7, #8
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}

080011b4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b086      	sub	sp, #24
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	4603      	mov	r3, r0
 80011bc:	60b9      	str	r1, [r7, #8]
 80011be:	607a      	str	r2, [r7, #4]
 80011c0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80011c2:	f7ff ff63 	bl	800108c <__NVIC_GetPriorityGrouping>
 80011c6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011c8:	687a      	ldr	r2, [r7, #4]
 80011ca:	68b9      	ldr	r1, [r7, #8]
 80011cc:	6978      	ldr	r0, [r7, #20]
 80011ce:	f7ff ffb3 	bl	8001138 <NVIC_EncodePriority>
 80011d2:	4602      	mov	r2, r0
 80011d4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80011d8:	4611      	mov	r1, r2
 80011da:	4618      	mov	r0, r3
 80011dc:	f7ff ff82 	bl	80010e4 <__NVIC_SetPriority>
}
 80011e0:	bf00      	nop
 80011e2:	3718      	adds	r7, #24
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}

080011e8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	4603      	mov	r3, r0
 80011f0:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011f6:	4618      	mov	r0, r3
 80011f8:	f7ff ff56 	bl	80010a8 <__NVIC_EnableIRQ>
}
 80011fc:	bf00      	nop
 80011fe:	3708      	adds	r7, #8
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}

08001204 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b086      	sub	sp, #24
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800120c:	f7ff ff0e 	bl	800102c <HAL_GetTick>
 8001210:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d101      	bne.n	800121c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001218:	2301      	movs	r3, #1
 800121a:	e37d      	b.n	8001918 <HAL_DMA_Init+0x714>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a66      	ldr	r2, [pc, #408]	@ (80013bc <HAL_DMA_Init+0x1b8>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d04a      	beq.n	80012bc <HAL_DMA_Init+0xb8>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4a65      	ldr	r2, [pc, #404]	@ (80013c0 <HAL_DMA_Init+0x1bc>)
 800122c:	4293      	cmp	r3, r2
 800122e:	d045      	beq.n	80012bc <HAL_DMA_Init+0xb8>
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a63      	ldr	r2, [pc, #396]	@ (80013c4 <HAL_DMA_Init+0x1c0>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d040      	beq.n	80012bc <HAL_DMA_Init+0xb8>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4a62      	ldr	r2, [pc, #392]	@ (80013c8 <HAL_DMA_Init+0x1c4>)
 8001240:	4293      	cmp	r3, r2
 8001242:	d03b      	beq.n	80012bc <HAL_DMA_Init+0xb8>
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a60      	ldr	r2, [pc, #384]	@ (80013cc <HAL_DMA_Init+0x1c8>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d036      	beq.n	80012bc <HAL_DMA_Init+0xb8>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4a5f      	ldr	r2, [pc, #380]	@ (80013d0 <HAL_DMA_Init+0x1cc>)
 8001254:	4293      	cmp	r3, r2
 8001256:	d031      	beq.n	80012bc <HAL_DMA_Init+0xb8>
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a5d      	ldr	r2, [pc, #372]	@ (80013d4 <HAL_DMA_Init+0x1d0>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d02c      	beq.n	80012bc <HAL_DMA_Init+0xb8>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4a5c      	ldr	r2, [pc, #368]	@ (80013d8 <HAL_DMA_Init+0x1d4>)
 8001268:	4293      	cmp	r3, r2
 800126a:	d027      	beq.n	80012bc <HAL_DMA_Init+0xb8>
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a5a      	ldr	r2, [pc, #360]	@ (80013dc <HAL_DMA_Init+0x1d8>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d022      	beq.n	80012bc <HAL_DMA_Init+0xb8>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4a59      	ldr	r2, [pc, #356]	@ (80013e0 <HAL_DMA_Init+0x1dc>)
 800127c:	4293      	cmp	r3, r2
 800127e:	d01d      	beq.n	80012bc <HAL_DMA_Init+0xb8>
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a57      	ldr	r2, [pc, #348]	@ (80013e4 <HAL_DMA_Init+0x1e0>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d018      	beq.n	80012bc <HAL_DMA_Init+0xb8>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4a56      	ldr	r2, [pc, #344]	@ (80013e8 <HAL_DMA_Init+0x1e4>)
 8001290:	4293      	cmp	r3, r2
 8001292:	d013      	beq.n	80012bc <HAL_DMA_Init+0xb8>
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a54      	ldr	r2, [pc, #336]	@ (80013ec <HAL_DMA_Init+0x1e8>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d00e      	beq.n	80012bc <HAL_DMA_Init+0xb8>
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4a53      	ldr	r2, [pc, #332]	@ (80013f0 <HAL_DMA_Init+0x1ec>)
 80012a4:	4293      	cmp	r3, r2
 80012a6:	d009      	beq.n	80012bc <HAL_DMA_Init+0xb8>
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a51      	ldr	r2, [pc, #324]	@ (80013f4 <HAL_DMA_Init+0x1f0>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d004      	beq.n	80012bc <HAL_DMA_Init+0xb8>
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4a50      	ldr	r2, [pc, #320]	@ (80013f8 <HAL_DMA_Init+0x1f4>)
 80012b8:	4293      	cmp	r3, r2
 80012ba:	d101      	bne.n	80012c0 <HAL_DMA_Init+0xbc>
 80012bc:	2301      	movs	r3, #1
 80012be:	e000      	b.n	80012c2 <HAL_DMA_Init+0xbe>
 80012c0:	2300      	movs	r3, #0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	f000 813c 	beq.w	8001540 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2202      	movs	r2, #2
 80012cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2200      	movs	r2, #0
 80012d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a37      	ldr	r2, [pc, #220]	@ (80013bc <HAL_DMA_Init+0x1b8>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d04a      	beq.n	8001378 <HAL_DMA_Init+0x174>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4a36      	ldr	r2, [pc, #216]	@ (80013c0 <HAL_DMA_Init+0x1bc>)
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d045      	beq.n	8001378 <HAL_DMA_Init+0x174>
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a34      	ldr	r2, [pc, #208]	@ (80013c4 <HAL_DMA_Init+0x1c0>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d040      	beq.n	8001378 <HAL_DMA_Init+0x174>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4a33      	ldr	r2, [pc, #204]	@ (80013c8 <HAL_DMA_Init+0x1c4>)
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d03b      	beq.n	8001378 <HAL_DMA_Init+0x174>
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a31      	ldr	r2, [pc, #196]	@ (80013cc <HAL_DMA_Init+0x1c8>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d036      	beq.n	8001378 <HAL_DMA_Init+0x174>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4a30      	ldr	r2, [pc, #192]	@ (80013d0 <HAL_DMA_Init+0x1cc>)
 8001310:	4293      	cmp	r3, r2
 8001312:	d031      	beq.n	8001378 <HAL_DMA_Init+0x174>
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a2e      	ldr	r2, [pc, #184]	@ (80013d4 <HAL_DMA_Init+0x1d0>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d02c      	beq.n	8001378 <HAL_DMA_Init+0x174>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4a2d      	ldr	r2, [pc, #180]	@ (80013d8 <HAL_DMA_Init+0x1d4>)
 8001324:	4293      	cmp	r3, r2
 8001326:	d027      	beq.n	8001378 <HAL_DMA_Init+0x174>
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a2b      	ldr	r2, [pc, #172]	@ (80013dc <HAL_DMA_Init+0x1d8>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d022      	beq.n	8001378 <HAL_DMA_Init+0x174>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4a2a      	ldr	r2, [pc, #168]	@ (80013e0 <HAL_DMA_Init+0x1dc>)
 8001338:	4293      	cmp	r3, r2
 800133a:	d01d      	beq.n	8001378 <HAL_DMA_Init+0x174>
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a28      	ldr	r2, [pc, #160]	@ (80013e4 <HAL_DMA_Init+0x1e0>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d018      	beq.n	8001378 <HAL_DMA_Init+0x174>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4a27      	ldr	r2, [pc, #156]	@ (80013e8 <HAL_DMA_Init+0x1e4>)
 800134c:	4293      	cmp	r3, r2
 800134e:	d013      	beq.n	8001378 <HAL_DMA_Init+0x174>
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a25      	ldr	r2, [pc, #148]	@ (80013ec <HAL_DMA_Init+0x1e8>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d00e      	beq.n	8001378 <HAL_DMA_Init+0x174>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4a24      	ldr	r2, [pc, #144]	@ (80013f0 <HAL_DMA_Init+0x1ec>)
 8001360:	4293      	cmp	r3, r2
 8001362:	d009      	beq.n	8001378 <HAL_DMA_Init+0x174>
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a22      	ldr	r2, [pc, #136]	@ (80013f4 <HAL_DMA_Init+0x1f0>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d004      	beq.n	8001378 <HAL_DMA_Init+0x174>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4a21      	ldr	r2, [pc, #132]	@ (80013f8 <HAL_DMA_Init+0x1f4>)
 8001374:	4293      	cmp	r3, r2
 8001376:	d108      	bne.n	800138a <HAL_DMA_Init+0x186>
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f022 0201 	bic.w	r2, r2, #1
 8001386:	601a      	str	r2, [r3, #0]
 8001388:	e007      	b.n	800139a <HAL_DMA_Init+0x196>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	681a      	ldr	r2, [r3, #0]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f022 0201 	bic.w	r2, r2, #1
 8001398:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800139a:	e02f      	b.n	80013fc <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800139c:	f7ff fe46 	bl	800102c <HAL_GetTick>
 80013a0:	4602      	mov	r2, r0
 80013a2:	693b      	ldr	r3, [r7, #16]
 80013a4:	1ad3      	subs	r3, r2, r3
 80013a6:	2b05      	cmp	r3, #5
 80013a8:	d928      	bls.n	80013fc <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2220      	movs	r2, #32
 80013ae:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2203      	movs	r2, #3
 80013b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 80013b8:	2301      	movs	r3, #1
 80013ba:	e2ad      	b.n	8001918 <HAL_DMA_Init+0x714>
 80013bc:	40020010 	.word	0x40020010
 80013c0:	40020028 	.word	0x40020028
 80013c4:	40020040 	.word	0x40020040
 80013c8:	40020058 	.word	0x40020058
 80013cc:	40020070 	.word	0x40020070
 80013d0:	40020088 	.word	0x40020088
 80013d4:	400200a0 	.word	0x400200a0
 80013d8:	400200b8 	.word	0x400200b8
 80013dc:	40020410 	.word	0x40020410
 80013e0:	40020428 	.word	0x40020428
 80013e4:	40020440 	.word	0x40020440
 80013e8:	40020458 	.word	0x40020458
 80013ec:	40020470 	.word	0x40020470
 80013f0:	40020488 	.word	0x40020488
 80013f4:	400204a0 	.word	0x400204a0
 80013f8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f003 0301 	and.w	r3, r3, #1
 8001406:	2b00      	cmp	r3, #0
 8001408:	d1c8      	bne.n	800139c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001412:	697a      	ldr	r2, [r7, #20]
 8001414:	4b73      	ldr	r3, [pc, #460]	@ (80015e4 <HAL_DMA_Init+0x3e0>)
 8001416:	4013      	ands	r3, r2
 8001418:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001422:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	691b      	ldr	r3, [r3, #16]
 8001428:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800142e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	699b      	ldr	r3, [r3, #24]
 8001434:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800143a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6a1b      	ldr	r3, [r3, #32]
 8001440:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001442:	697a      	ldr	r2, [r7, #20]
 8001444:	4313      	orrs	r3, r2
 8001446:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800144c:	2b04      	cmp	r3, #4
 800144e:	d107      	bne.n	8001460 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001458:	4313      	orrs	r3, r2
 800145a:	697a      	ldr	r2, [r7, #20]
 800145c:	4313      	orrs	r3, r2
 800145e:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	2b28      	cmp	r3, #40	@ 0x28
 8001466:	d903      	bls.n	8001470 <HAL_DMA_Init+0x26c>
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	2b2e      	cmp	r3, #46	@ 0x2e
 800146e:	d91f      	bls.n	80014b0 <HAL_DMA_Init+0x2ac>
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	2b3e      	cmp	r3, #62	@ 0x3e
 8001476:	d903      	bls.n	8001480 <HAL_DMA_Init+0x27c>
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	2b42      	cmp	r3, #66	@ 0x42
 800147e:	d917      	bls.n	80014b0 <HAL_DMA_Init+0x2ac>
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	2b46      	cmp	r3, #70	@ 0x46
 8001486:	d903      	bls.n	8001490 <HAL_DMA_Init+0x28c>
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	2b48      	cmp	r3, #72	@ 0x48
 800148e:	d90f      	bls.n	80014b0 <HAL_DMA_Init+0x2ac>
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	2b4e      	cmp	r3, #78	@ 0x4e
 8001496:	d903      	bls.n	80014a0 <HAL_DMA_Init+0x29c>
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	2b52      	cmp	r3, #82	@ 0x52
 800149e:	d907      	bls.n	80014b0 <HAL_DMA_Init+0x2ac>
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	2b73      	cmp	r3, #115	@ 0x73
 80014a6:	d905      	bls.n	80014b4 <HAL_DMA_Init+0x2b0>
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	2b77      	cmp	r3, #119	@ 0x77
 80014ae:	d801      	bhi.n	80014b4 <HAL_DMA_Init+0x2b0>
 80014b0:	2301      	movs	r3, #1
 80014b2:	e000      	b.n	80014b6 <HAL_DMA_Init+0x2b2>
 80014b4:	2300      	movs	r3, #0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d003      	beq.n	80014c2 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80014c0:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	697a      	ldr	r2, [r7, #20]
 80014c8:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	695b      	ldr	r3, [r3, #20]
 80014d0:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	f023 0307 	bic.w	r3, r3, #7
 80014d8:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014de:	697a      	ldr	r2, [r7, #20]
 80014e0:	4313      	orrs	r3, r2
 80014e2:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014e8:	2b04      	cmp	r3, #4
 80014ea:	d117      	bne.n	800151c <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014f0:	697a      	ldr	r2, [r7, #20]
 80014f2:	4313      	orrs	r3, r2
 80014f4:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d00e      	beq.n	800151c <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80014fe:	6878      	ldr	r0, [r7, #4]
 8001500:	f001 fc76 	bl	8002df0 <DMA_CheckFifoParam>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d008      	beq.n	800151c <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2240      	movs	r2, #64	@ 0x40
 800150e:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2201      	movs	r2, #1
 8001514:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8001518:	2301      	movs	r3, #1
 800151a:	e1fd      	b.n	8001918 <HAL_DMA_Init+0x714>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	697a      	ldr	r2, [r7, #20]
 8001522:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001524:	6878      	ldr	r0, [r7, #4]
 8001526:	f001 fbb1 	bl	8002c8c <DMA_CalcBaseAndBitshift>
 800152a:	4603      	mov	r3, r0
 800152c:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001532:	f003 031f 	and.w	r3, r3, #31
 8001536:	223f      	movs	r2, #63	@ 0x3f
 8001538:	409a      	lsls	r2, r3
 800153a:	68bb      	ldr	r3, [r7, #8]
 800153c:	609a      	str	r2, [r3, #8]
 800153e:	e0fd      	b.n	800173c <HAL_DMA_Init+0x538>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a28      	ldr	r2, [pc, #160]	@ (80015e8 <HAL_DMA_Init+0x3e4>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d04a      	beq.n	80015e0 <HAL_DMA_Init+0x3dc>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4a27      	ldr	r2, [pc, #156]	@ (80015ec <HAL_DMA_Init+0x3e8>)
 8001550:	4293      	cmp	r3, r2
 8001552:	d045      	beq.n	80015e0 <HAL_DMA_Init+0x3dc>
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a25      	ldr	r2, [pc, #148]	@ (80015f0 <HAL_DMA_Init+0x3ec>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d040      	beq.n	80015e0 <HAL_DMA_Init+0x3dc>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a24      	ldr	r2, [pc, #144]	@ (80015f4 <HAL_DMA_Init+0x3f0>)
 8001564:	4293      	cmp	r3, r2
 8001566:	d03b      	beq.n	80015e0 <HAL_DMA_Init+0x3dc>
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a22      	ldr	r2, [pc, #136]	@ (80015f8 <HAL_DMA_Init+0x3f4>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d036      	beq.n	80015e0 <HAL_DMA_Init+0x3dc>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4a21      	ldr	r2, [pc, #132]	@ (80015fc <HAL_DMA_Init+0x3f8>)
 8001578:	4293      	cmp	r3, r2
 800157a:	d031      	beq.n	80015e0 <HAL_DMA_Init+0x3dc>
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a1f      	ldr	r2, [pc, #124]	@ (8001600 <HAL_DMA_Init+0x3fc>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d02c      	beq.n	80015e0 <HAL_DMA_Init+0x3dc>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4a1e      	ldr	r2, [pc, #120]	@ (8001604 <HAL_DMA_Init+0x400>)
 800158c:	4293      	cmp	r3, r2
 800158e:	d027      	beq.n	80015e0 <HAL_DMA_Init+0x3dc>
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a1c      	ldr	r2, [pc, #112]	@ (8001608 <HAL_DMA_Init+0x404>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d022      	beq.n	80015e0 <HAL_DMA_Init+0x3dc>
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a1b      	ldr	r2, [pc, #108]	@ (800160c <HAL_DMA_Init+0x408>)
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d01d      	beq.n	80015e0 <HAL_DMA_Init+0x3dc>
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a19      	ldr	r2, [pc, #100]	@ (8001610 <HAL_DMA_Init+0x40c>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d018      	beq.n	80015e0 <HAL_DMA_Init+0x3dc>
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4a18      	ldr	r2, [pc, #96]	@ (8001614 <HAL_DMA_Init+0x410>)
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d013      	beq.n	80015e0 <HAL_DMA_Init+0x3dc>
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a16      	ldr	r2, [pc, #88]	@ (8001618 <HAL_DMA_Init+0x414>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d00e      	beq.n	80015e0 <HAL_DMA_Init+0x3dc>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4a15      	ldr	r2, [pc, #84]	@ (800161c <HAL_DMA_Init+0x418>)
 80015c8:	4293      	cmp	r3, r2
 80015ca:	d009      	beq.n	80015e0 <HAL_DMA_Init+0x3dc>
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a13      	ldr	r2, [pc, #76]	@ (8001620 <HAL_DMA_Init+0x41c>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d004      	beq.n	80015e0 <HAL_DMA_Init+0x3dc>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4a12      	ldr	r2, [pc, #72]	@ (8001624 <HAL_DMA_Init+0x420>)
 80015dc:	4293      	cmp	r3, r2
 80015de:	d123      	bne.n	8001628 <HAL_DMA_Init+0x424>
 80015e0:	2301      	movs	r3, #1
 80015e2:	e022      	b.n	800162a <HAL_DMA_Init+0x426>
 80015e4:	fe10803f 	.word	0xfe10803f
 80015e8:	48022c08 	.word	0x48022c08
 80015ec:	48022c1c 	.word	0x48022c1c
 80015f0:	48022c30 	.word	0x48022c30
 80015f4:	48022c44 	.word	0x48022c44
 80015f8:	48022c58 	.word	0x48022c58
 80015fc:	48022c6c 	.word	0x48022c6c
 8001600:	48022c80 	.word	0x48022c80
 8001604:	48022c94 	.word	0x48022c94
 8001608:	58025408 	.word	0x58025408
 800160c:	5802541c 	.word	0x5802541c
 8001610:	58025430 	.word	0x58025430
 8001614:	58025444 	.word	0x58025444
 8001618:	58025458 	.word	0x58025458
 800161c:	5802546c 	.word	0x5802546c
 8001620:	58025480 	.word	0x58025480
 8001624:	58025494 	.word	0x58025494
 8001628:	2300      	movs	r3, #0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d07d      	beq.n	800172a <HAL_DMA_Init+0x526>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4a7f      	ldr	r2, [pc, #508]	@ (8001830 <HAL_DMA_Init+0x62c>)
 8001634:	4293      	cmp	r3, r2
 8001636:	d021      	beq.n	800167c <HAL_DMA_Init+0x478>
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a7d      	ldr	r2, [pc, #500]	@ (8001834 <HAL_DMA_Init+0x630>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d01c      	beq.n	800167c <HAL_DMA_Init+0x478>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a7c      	ldr	r2, [pc, #496]	@ (8001838 <HAL_DMA_Init+0x634>)
 8001648:	4293      	cmp	r3, r2
 800164a:	d017      	beq.n	800167c <HAL_DMA_Init+0x478>
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a7a      	ldr	r2, [pc, #488]	@ (800183c <HAL_DMA_Init+0x638>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d012      	beq.n	800167c <HAL_DMA_Init+0x478>
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4a79      	ldr	r2, [pc, #484]	@ (8001840 <HAL_DMA_Init+0x63c>)
 800165c:	4293      	cmp	r3, r2
 800165e:	d00d      	beq.n	800167c <HAL_DMA_Init+0x478>
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a77      	ldr	r2, [pc, #476]	@ (8001844 <HAL_DMA_Init+0x640>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d008      	beq.n	800167c <HAL_DMA_Init+0x478>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4a76      	ldr	r2, [pc, #472]	@ (8001848 <HAL_DMA_Init+0x644>)
 8001670:	4293      	cmp	r3, r2
 8001672:	d003      	beq.n	800167c <HAL_DMA_Init+0x478>
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a74      	ldr	r2, [pc, #464]	@ (800184c <HAL_DMA_Init+0x648>)
 800167a:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2202      	movs	r2, #2
 8001680:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2200      	movs	r2, #0
 8001688:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001694:	697a      	ldr	r2, [r7, #20]
 8001696:	4b6e      	ldr	r3, [pc, #440]	@ (8001850 <HAL_DMA_Init+0x64c>)
 8001698:	4013      	ands	r3, r2
 800169a:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	689b      	ldr	r3, [r3, #8]
 80016a0:	2b40      	cmp	r3, #64	@ 0x40
 80016a2:	d008      	beq.n	80016b6 <HAL_DMA_Init+0x4b2>
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	689b      	ldr	r3, [r3, #8]
 80016a8:	2b80      	cmp	r3, #128	@ 0x80
 80016aa:	d102      	bne.n	80016b2 <HAL_DMA_Init+0x4ae>
 80016ac:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80016b0:	e002      	b.n	80016b8 <HAL_DMA_Init+0x4b4>
 80016b2:	2300      	movs	r3, #0
 80016b4:	e000      	b.n	80016b8 <HAL_DMA_Init+0x4b4>
 80016b6:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80016b8:	687a      	ldr	r2, [r7, #4]
 80016ba:	68d2      	ldr	r2, [r2, #12]
 80016bc:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80016be:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	691b      	ldr	r3, [r3, #16]
 80016c4:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80016c6:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	695b      	ldr	r3, [r3, #20]
 80016cc:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80016ce:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	699b      	ldr	r3, [r3, #24]
 80016d4:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80016d6:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	69db      	ldr	r3, [r3, #28]
 80016dc:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80016de:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6a1b      	ldr	r3, [r3, #32]
 80016e4:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80016e6:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80016e8:	697a      	ldr	r2, [r7, #20]
 80016ea:	4313      	orrs	r3, r2
 80016ec:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	697a      	ldr	r2, [r7, #20]
 80016f4:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	461a      	mov	r2, r3
 80016fc:	4b55      	ldr	r3, [pc, #340]	@ (8001854 <HAL_DMA_Init+0x650>)
 80016fe:	4413      	add	r3, r2
 8001700:	4a55      	ldr	r2, [pc, #340]	@ (8001858 <HAL_DMA_Init+0x654>)
 8001702:	fba2 2303 	umull	r2, r3, r2, r3
 8001706:	091b      	lsrs	r3, r3, #4
 8001708:	009a      	lsls	r2, r3, #2
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800170e:	6878      	ldr	r0, [r7, #4]
 8001710:	f001 fabc 	bl	8002c8c <DMA_CalcBaseAndBitshift>
 8001714:	4603      	mov	r3, r0
 8001716:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800171c:	f003 031f 	and.w	r3, r3, #31
 8001720:	2201      	movs	r2, #1
 8001722:	409a      	lsls	r2, r3
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	605a      	str	r2, [r3, #4]
 8001728:	e008      	b.n	800173c <HAL_DMA_Init+0x538>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2240      	movs	r2, #64	@ 0x40
 800172e:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2203      	movs	r2, #3
 8001734:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8001738:	2301      	movs	r3, #1
 800173a:	e0ed      	b.n	8001918 <HAL_DMA_Init+0x714>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a46      	ldr	r2, [pc, #280]	@ (800185c <HAL_DMA_Init+0x658>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d072      	beq.n	800182c <HAL_DMA_Init+0x628>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a45      	ldr	r2, [pc, #276]	@ (8001860 <HAL_DMA_Init+0x65c>)
 800174c:	4293      	cmp	r3, r2
 800174e:	d06d      	beq.n	800182c <HAL_DMA_Init+0x628>
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a43      	ldr	r2, [pc, #268]	@ (8001864 <HAL_DMA_Init+0x660>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d068      	beq.n	800182c <HAL_DMA_Init+0x628>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a42      	ldr	r2, [pc, #264]	@ (8001868 <HAL_DMA_Init+0x664>)
 8001760:	4293      	cmp	r3, r2
 8001762:	d063      	beq.n	800182c <HAL_DMA_Init+0x628>
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a40      	ldr	r2, [pc, #256]	@ (800186c <HAL_DMA_Init+0x668>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d05e      	beq.n	800182c <HAL_DMA_Init+0x628>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a3f      	ldr	r2, [pc, #252]	@ (8001870 <HAL_DMA_Init+0x66c>)
 8001774:	4293      	cmp	r3, r2
 8001776:	d059      	beq.n	800182c <HAL_DMA_Init+0x628>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a3d      	ldr	r2, [pc, #244]	@ (8001874 <HAL_DMA_Init+0x670>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d054      	beq.n	800182c <HAL_DMA_Init+0x628>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a3c      	ldr	r2, [pc, #240]	@ (8001878 <HAL_DMA_Init+0x674>)
 8001788:	4293      	cmp	r3, r2
 800178a:	d04f      	beq.n	800182c <HAL_DMA_Init+0x628>
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a3a      	ldr	r2, [pc, #232]	@ (800187c <HAL_DMA_Init+0x678>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d04a      	beq.n	800182c <HAL_DMA_Init+0x628>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4a39      	ldr	r2, [pc, #228]	@ (8001880 <HAL_DMA_Init+0x67c>)
 800179c:	4293      	cmp	r3, r2
 800179e:	d045      	beq.n	800182c <HAL_DMA_Init+0x628>
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a37      	ldr	r2, [pc, #220]	@ (8001884 <HAL_DMA_Init+0x680>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d040      	beq.n	800182c <HAL_DMA_Init+0x628>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a36      	ldr	r2, [pc, #216]	@ (8001888 <HAL_DMA_Init+0x684>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d03b      	beq.n	800182c <HAL_DMA_Init+0x628>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a34      	ldr	r2, [pc, #208]	@ (800188c <HAL_DMA_Init+0x688>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d036      	beq.n	800182c <HAL_DMA_Init+0x628>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a33      	ldr	r2, [pc, #204]	@ (8001890 <HAL_DMA_Init+0x68c>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d031      	beq.n	800182c <HAL_DMA_Init+0x628>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a31      	ldr	r2, [pc, #196]	@ (8001894 <HAL_DMA_Init+0x690>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d02c      	beq.n	800182c <HAL_DMA_Init+0x628>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a30      	ldr	r2, [pc, #192]	@ (8001898 <HAL_DMA_Init+0x694>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d027      	beq.n	800182c <HAL_DMA_Init+0x628>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a13      	ldr	r2, [pc, #76]	@ (8001830 <HAL_DMA_Init+0x62c>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d022      	beq.n	800182c <HAL_DMA_Init+0x628>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a12      	ldr	r2, [pc, #72]	@ (8001834 <HAL_DMA_Init+0x630>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d01d      	beq.n	800182c <HAL_DMA_Init+0x628>
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a10      	ldr	r2, [pc, #64]	@ (8001838 <HAL_DMA_Init+0x634>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d018      	beq.n	800182c <HAL_DMA_Init+0x628>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a0f      	ldr	r2, [pc, #60]	@ (800183c <HAL_DMA_Init+0x638>)
 8001800:	4293      	cmp	r3, r2
 8001802:	d013      	beq.n	800182c <HAL_DMA_Init+0x628>
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a0d      	ldr	r2, [pc, #52]	@ (8001840 <HAL_DMA_Init+0x63c>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d00e      	beq.n	800182c <HAL_DMA_Init+0x628>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4a0c      	ldr	r2, [pc, #48]	@ (8001844 <HAL_DMA_Init+0x640>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d009      	beq.n	800182c <HAL_DMA_Init+0x628>
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a0a      	ldr	r2, [pc, #40]	@ (8001848 <HAL_DMA_Init+0x644>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d004      	beq.n	800182c <HAL_DMA_Init+0x628>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4a09      	ldr	r2, [pc, #36]	@ (800184c <HAL_DMA_Init+0x648>)
 8001828:	4293      	cmp	r3, r2
 800182a:	d137      	bne.n	800189c <HAL_DMA_Init+0x698>
 800182c:	2301      	movs	r3, #1
 800182e:	e036      	b.n	800189e <HAL_DMA_Init+0x69a>
 8001830:	58025408 	.word	0x58025408
 8001834:	5802541c 	.word	0x5802541c
 8001838:	58025430 	.word	0x58025430
 800183c:	58025444 	.word	0x58025444
 8001840:	58025458 	.word	0x58025458
 8001844:	5802546c 	.word	0x5802546c
 8001848:	58025480 	.word	0x58025480
 800184c:	58025494 	.word	0x58025494
 8001850:	fffe000f 	.word	0xfffe000f
 8001854:	a7fdabf8 	.word	0xa7fdabf8
 8001858:	cccccccd 	.word	0xcccccccd
 800185c:	40020010 	.word	0x40020010
 8001860:	40020028 	.word	0x40020028
 8001864:	40020040 	.word	0x40020040
 8001868:	40020058 	.word	0x40020058
 800186c:	40020070 	.word	0x40020070
 8001870:	40020088 	.word	0x40020088
 8001874:	400200a0 	.word	0x400200a0
 8001878:	400200b8 	.word	0x400200b8
 800187c:	40020410 	.word	0x40020410
 8001880:	40020428 	.word	0x40020428
 8001884:	40020440 	.word	0x40020440
 8001888:	40020458 	.word	0x40020458
 800188c:	40020470 	.word	0x40020470
 8001890:	40020488 	.word	0x40020488
 8001894:	400204a0 	.word	0x400204a0
 8001898:	400204b8 	.word	0x400204b8
 800189c:	2300      	movs	r3, #0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d032      	beq.n	8001908 <HAL_DMA_Init+0x704>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80018a2:	6878      	ldr	r0, [r7, #4]
 80018a4:	f001 fb20 	bl	8002ee8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	2b80      	cmp	r3, #128	@ 0x80
 80018ae:	d102      	bne.n	80018b6 <HAL_DMA_Init+0x6b2>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2200      	movs	r2, #0
 80018b4:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	685a      	ldr	r2, [r3, #4]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018be:	b2d2      	uxtb	r2, r2
 80018c0:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80018c6:	687a      	ldr	r2, [r7, #4]
 80018c8:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80018ca:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d010      	beq.n	80018f6 <HAL_DMA_Init+0x6f2>
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	2b08      	cmp	r3, #8
 80018da:	d80c      	bhi.n	80018f6 <HAL_DMA_Init+0x6f2>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80018dc:	6878      	ldr	r0, [r7, #4]
 80018de:	f001 fb9d 	bl	800301c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80018e6:	2200      	movs	r2, #0
 80018e8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018ee:	687a      	ldr	r2, [r7, #4]
 80018f0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80018f2:	605a      	str	r2, [r3, #4]
 80018f4:	e008      	b.n	8001908 <HAL_DMA_Init+0x704>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2200      	movs	r2, #0
 80018fa:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2200      	movs	r2, #0
 8001900:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2200      	movs	r2, #0
 8001906:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2200      	movs	r2, #0
 800190c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2201      	movs	r2, #1
 8001912:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001916:	2300      	movs	r3, #0
}
 8001918:	4618      	mov	r0, r3
 800191a:	3718      	adds	r7, #24
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}

08001920 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b084      	sub	sp, #16
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d101      	bne.n	8001932 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	e237      	b.n	8001da2 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001938:	b2db      	uxtb	r3, r3
 800193a:	2b02      	cmp	r3, #2
 800193c:	d004      	beq.n	8001948 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2280      	movs	r2, #128	@ 0x80
 8001942:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001944:	2301      	movs	r3, #1
 8001946:	e22c      	b.n	8001da2 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a5c      	ldr	r2, [pc, #368]	@ (8001ac0 <HAL_DMA_Abort_IT+0x1a0>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d04a      	beq.n	80019e8 <HAL_DMA_Abort_IT+0xc8>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a5b      	ldr	r2, [pc, #364]	@ (8001ac4 <HAL_DMA_Abort_IT+0x1a4>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d045      	beq.n	80019e8 <HAL_DMA_Abort_IT+0xc8>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a59      	ldr	r2, [pc, #356]	@ (8001ac8 <HAL_DMA_Abort_IT+0x1a8>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d040      	beq.n	80019e8 <HAL_DMA_Abort_IT+0xc8>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a58      	ldr	r2, [pc, #352]	@ (8001acc <HAL_DMA_Abort_IT+0x1ac>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d03b      	beq.n	80019e8 <HAL_DMA_Abort_IT+0xc8>
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a56      	ldr	r2, [pc, #344]	@ (8001ad0 <HAL_DMA_Abort_IT+0x1b0>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d036      	beq.n	80019e8 <HAL_DMA_Abort_IT+0xc8>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a55      	ldr	r2, [pc, #340]	@ (8001ad4 <HAL_DMA_Abort_IT+0x1b4>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d031      	beq.n	80019e8 <HAL_DMA_Abort_IT+0xc8>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a53      	ldr	r2, [pc, #332]	@ (8001ad8 <HAL_DMA_Abort_IT+0x1b8>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d02c      	beq.n	80019e8 <HAL_DMA_Abort_IT+0xc8>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a52      	ldr	r2, [pc, #328]	@ (8001adc <HAL_DMA_Abort_IT+0x1bc>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d027      	beq.n	80019e8 <HAL_DMA_Abort_IT+0xc8>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a50      	ldr	r2, [pc, #320]	@ (8001ae0 <HAL_DMA_Abort_IT+0x1c0>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d022      	beq.n	80019e8 <HAL_DMA_Abort_IT+0xc8>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a4f      	ldr	r2, [pc, #316]	@ (8001ae4 <HAL_DMA_Abort_IT+0x1c4>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d01d      	beq.n	80019e8 <HAL_DMA_Abort_IT+0xc8>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a4d      	ldr	r2, [pc, #308]	@ (8001ae8 <HAL_DMA_Abort_IT+0x1c8>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d018      	beq.n	80019e8 <HAL_DMA_Abort_IT+0xc8>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a4c      	ldr	r2, [pc, #304]	@ (8001aec <HAL_DMA_Abort_IT+0x1cc>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d013      	beq.n	80019e8 <HAL_DMA_Abort_IT+0xc8>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a4a      	ldr	r2, [pc, #296]	@ (8001af0 <HAL_DMA_Abort_IT+0x1d0>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d00e      	beq.n	80019e8 <HAL_DMA_Abort_IT+0xc8>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a49      	ldr	r2, [pc, #292]	@ (8001af4 <HAL_DMA_Abort_IT+0x1d4>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d009      	beq.n	80019e8 <HAL_DMA_Abort_IT+0xc8>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a47      	ldr	r2, [pc, #284]	@ (8001af8 <HAL_DMA_Abort_IT+0x1d8>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d004      	beq.n	80019e8 <HAL_DMA_Abort_IT+0xc8>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a46      	ldr	r2, [pc, #280]	@ (8001afc <HAL_DMA_Abort_IT+0x1dc>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d101      	bne.n	80019ec <HAL_DMA_Abort_IT+0xcc>
 80019e8:	2301      	movs	r3, #1
 80019ea:	e000      	b.n	80019ee <HAL_DMA_Abort_IT+0xce>
 80019ec:	2300      	movs	r3, #0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	f000 8086 	beq.w	8001b00 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2204      	movs	r2, #4
 80019f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a2f      	ldr	r2, [pc, #188]	@ (8001ac0 <HAL_DMA_Abort_IT+0x1a0>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d04a      	beq.n	8001a9c <HAL_DMA_Abort_IT+0x17c>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a2e      	ldr	r2, [pc, #184]	@ (8001ac4 <HAL_DMA_Abort_IT+0x1a4>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d045      	beq.n	8001a9c <HAL_DMA_Abort_IT+0x17c>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a2c      	ldr	r2, [pc, #176]	@ (8001ac8 <HAL_DMA_Abort_IT+0x1a8>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d040      	beq.n	8001a9c <HAL_DMA_Abort_IT+0x17c>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a2b      	ldr	r2, [pc, #172]	@ (8001acc <HAL_DMA_Abort_IT+0x1ac>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d03b      	beq.n	8001a9c <HAL_DMA_Abort_IT+0x17c>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a29      	ldr	r2, [pc, #164]	@ (8001ad0 <HAL_DMA_Abort_IT+0x1b0>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d036      	beq.n	8001a9c <HAL_DMA_Abort_IT+0x17c>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a28      	ldr	r2, [pc, #160]	@ (8001ad4 <HAL_DMA_Abort_IT+0x1b4>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d031      	beq.n	8001a9c <HAL_DMA_Abort_IT+0x17c>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a26      	ldr	r2, [pc, #152]	@ (8001ad8 <HAL_DMA_Abort_IT+0x1b8>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d02c      	beq.n	8001a9c <HAL_DMA_Abort_IT+0x17c>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a25      	ldr	r2, [pc, #148]	@ (8001adc <HAL_DMA_Abort_IT+0x1bc>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d027      	beq.n	8001a9c <HAL_DMA_Abort_IT+0x17c>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a23      	ldr	r2, [pc, #140]	@ (8001ae0 <HAL_DMA_Abort_IT+0x1c0>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d022      	beq.n	8001a9c <HAL_DMA_Abort_IT+0x17c>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a22      	ldr	r2, [pc, #136]	@ (8001ae4 <HAL_DMA_Abort_IT+0x1c4>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d01d      	beq.n	8001a9c <HAL_DMA_Abort_IT+0x17c>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a20      	ldr	r2, [pc, #128]	@ (8001ae8 <HAL_DMA_Abort_IT+0x1c8>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d018      	beq.n	8001a9c <HAL_DMA_Abort_IT+0x17c>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a1f      	ldr	r2, [pc, #124]	@ (8001aec <HAL_DMA_Abort_IT+0x1cc>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d013      	beq.n	8001a9c <HAL_DMA_Abort_IT+0x17c>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a1d      	ldr	r2, [pc, #116]	@ (8001af0 <HAL_DMA_Abort_IT+0x1d0>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d00e      	beq.n	8001a9c <HAL_DMA_Abort_IT+0x17c>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a1c      	ldr	r2, [pc, #112]	@ (8001af4 <HAL_DMA_Abort_IT+0x1d4>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d009      	beq.n	8001a9c <HAL_DMA_Abort_IT+0x17c>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a1a      	ldr	r2, [pc, #104]	@ (8001af8 <HAL_DMA_Abort_IT+0x1d8>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d004      	beq.n	8001a9c <HAL_DMA_Abort_IT+0x17c>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a19      	ldr	r2, [pc, #100]	@ (8001afc <HAL_DMA_Abort_IT+0x1dc>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d108      	bne.n	8001aae <HAL_DMA_Abort_IT+0x18e>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f022 0201 	bic.w	r2, r2, #1
 8001aaa:	601a      	str	r2, [r3, #0]
 8001aac:	e178      	b.n	8001da0 <HAL_DMA_Abort_IT+0x480>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f022 0201 	bic.w	r2, r2, #1
 8001abc:	601a      	str	r2, [r3, #0]
 8001abe:	e16f      	b.n	8001da0 <HAL_DMA_Abort_IT+0x480>
 8001ac0:	40020010 	.word	0x40020010
 8001ac4:	40020028 	.word	0x40020028
 8001ac8:	40020040 	.word	0x40020040
 8001acc:	40020058 	.word	0x40020058
 8001ad0:	40020070 	.word	0x40020070
 8001ad4:	40020088 	.word	0x40020088
 8001ad8:	400200a0 	.word	0x400200a0
 8001adc:	400200b8 	.word	0x400200b8
 8001ae0:	40020410 	.word	0x40020410
 8001ae4:	40020428 	.word	0x40020428
 8001ae8:	40020440 	.word	0x40020440
 8001aec:	40020458 	.word	0x40020458
 8001af0:	40020470 	.word	0x40020470
 8001af4:	40020488 	.word	0x40020488
 8001af8:	400204a0 	.word	0x400204a0
 8001afc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f022 020e 	bic.w	r2, r2, #14
 8001b0e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a6c      	ldr	r2, [pc, #432]	@ (8001cc8 <HAL_DMA_Abort_IT+0x3a8>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d04a      	beq.n	8001bb0 <HAL_DMA_Abort_IT+0x290>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a6b      	ldr	r2, [pc, #428]	@ (8001ccc <HAL_DMA_Abort_IT+0x3ac>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d045      	beq.n	8001bb0 <HAL_DMA_Abort_IT+0x290>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a69      	ldr	r2, [pc, #420]	@ (8001cd0 <HAL_DMA_Abort_IT+0x3b0>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d040      	beq.n	8001bb0 <HAL_DMA_Abort_IT+0x290>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a68      	ldr	r2, [pc, #416]	@ (8001cd4 <HAL_DMA_Abort_IT+0x3b4>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d03b      	beq.n	8001bb0 <HAL_DMA_Abort_IT+0x290>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a66      	ldr	r2, [pc, #408]	@ (8001cd8 <HAL_DMA_Abort_IT+0x3b8>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d036      	beq.n	8001bb0 <HAL_DMA_Abort_IT+0x290>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a65      	ldr	r2, [pc, #404]	@ (8001cdc <HAL_DMA_Abort_IT+0x3bc>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d031      	beq.n	8001bb0 <HAL_DMA_Abort_IT+0x290>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a63      	ldr	r2, [pc, #396]	@ (8001ce0 <HAL_DMA_Abort_IT+0x3c0>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d02c      	beq.n	8001bb0 <HAL_DMA_Abort_IT+0x290>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a62      	ldr	r2, [pc, #392]	@ (8001ce4 <HAL_DMA_Abort_IT+0x3c4>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d027      	beq.n	8001bb0 <HAL_DMA_Abort_IT+0x290>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a60      	ldr	r2, [pc, #384]	@ (8001ce8 <HAL_DMA_Abort_IT+0x3c8>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d022      	beq.n	8001bb0 <HAL_DMA_Abort_IT+0x290>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a5f      	ldr	r2, [pc, #380]	@ (8001cec <HAL_DMA_Abort_IT+0x3cc>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d01d      	beq.n	8001bb0 <HAL_DMA_Abort_IT+0x290>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a5d      	ldr	r2, [pc, #372]	@ (8001cf0 <HAL_DMA_Abort_IT+0x3d0>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d018      	beq.n	8001bb0 <HAL_DMA_Abort_IT+0x290>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a5c      	ldr	r2, [pc, #368]	@ (8001cf4 <HAL_DMA_Abort_IT+0x3d4>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d013      	beq.n	8001bb0 <HAL_DMA_Abort_IT+0x290>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a5a      	ldr	r2, [pc, #360]	@ (8001cf8 <HAL_DMA_Abort_IT+0x3d8>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d00e      	beq.n	8001bb0 <HAL_DMA_Abort_IT+0x290>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a59      	ldr	r2, [pc, #356]	@ (8001cfc <HAL_DMA_Abort_IT+0x3dc>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d009      	beq.n	8001bb0 <HAL_DMA_Abort_IT+0x290>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a57      	ldr	r2, [pc, #348]	@ (8001d00 <HAL_DMA_Abort_IT+0x3e0>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d004      	beq.n	8001bb0 <HAL_DMA_Abort_IT+0x290>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a56      	ldr	r2, [pc, #344]	@ (8001d04 <HAL_DMA_Abort_IT+0x3e4>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d108      	bne.n	8001bc2 <HAL_DMA_Abort_IT+0x2a2>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f022 0201 	bic.w	r2, r2, #1
 8001bbe:	601a      	str	r2, [r3, #0]
 8001bc0:	e007      	b.n	8001bd2 <HAL_DMA_Abort_IT+0x2b2>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f022 0201 	bic.w	r2, r2, #1
 8001bd0:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a3c      	ldr	r2, [pc, #240]	@ (8001cc8 <HAL_DMA_Abort_IT+0x3a8>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d072      	beq.n	8001cc2 <HAL_DMA_Abort_IT+0x3a2>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a3a      	ldr	r2, [pc, #232]	@ (8001ccc <HAL_DMA_Abort_IT+0x3ac>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d06d      	beq.n	8001cc2 <HAL_DMA_Abort_IT+0x3a2>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a39      	ldr	r2, [pc, #228]	@ (8001cd0 <HAL_DMA_Abort_IT+0x3b0>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d068      	beq.n	8001cc2 <HAL_DMA_Abort_IT+0x3a2>
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a37      	ldr	r2, [pc, #220]	@ (8001cd4 <HAL_DMA_Abort_IT+0x3b4>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d063      	beq.n	8001cc2 <HAL_DMA_Abort_IT+0x3a2>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a36      	ldr	r2, [pc, #216]	@ (8001cd8 <HAL_DMA_Abort_IT+0x3b8>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d05e      	beq.n	8001cc2 <HAL_DMA_Abort_IT+0x3a2>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a34      	ldr	r2, [pc, #208]	@ (8001cdc <HAL_DMA_Abort_IT+0x3bc>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d059      	beq.n	8001cc2 <HAL_DMA_Abort_IT+0x3a2>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a33      	ldr	r2, [pc, #204]	@ (8001ce0 <HAL_DMA_Abort_IT+0x3c0>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d054      	beq.n	8001cc2 <HAL_DMA_Abort_IT+0x3a2>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a31      	ldr	r2, [pc, #196]	@ (8001ce4 <HAL_DMA_Abort_IT+0x3c4>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d04f      	beq.n	8001cc2 <HAL_DMA_Abort_IT+0x3a2>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a30      	ldr	r2, [pc, #192]	@ (8001ce8 <HAL_DMA_Abort_IT+0x3c8>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d04a      	beq.n	8001cc2 <HAL_DMA_Abort_IT+0x3a2>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a2e      	ldr	r2, [pc, #184]	@ (8001cec <HAL_DMA_Abort_IT+0x3cc>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d045      	beq.n	8001cc2 <HAL_DMA_Abort_IT+0x3a2>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a2d      	ldr	r2, [pc, #180]	@ (8001cf0 <HAL_DMA_Abort_IT+0x3d0>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d040      	beq.n	8001cc2 <HAL_DMA_Abort_IT+0x3a2>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a2b      	ldr	r2, [pc, #172]	@ (8001cf4 <HAL_DMA_Abort_IT+0x3d4>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d03b      	beq.n	8001cc2 <HAL_DMA_Abort_IT+0x3a2>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a2a      	ldr	r2, [pc, #168]	@ (8001cf8 <HAL_DMA_Abort_IT+0x3d8>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d036      	beq.n	8001cc2 <HAL_DMA_Abort_IT+0x3a2>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a28      	ldr	r2, [pc, #160]	@ (8001cfc <HAL_DMA_Abort_IT+0x3dc>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d031      	beq.n	8001cc2 <HAL_DMA_Abort_IT+0x3a2>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a27      	ldr	r2, [pc, #156]	@ (8001d00 <HAL_DMA_Abort_IT+0x3e0>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d02c      	beq.n	8001cc2 <HAL_DMA_Abort_IT+0x3a2>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a25      	ldr	r2, [pc, #148]	@ (8001d04 <HAL_DMA_Abort_IT+0x3e4>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d027      	beq.n	8001cc2 <HAL_DMA_Abort_IT+0x3a2>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a24      	ldr	r2, [pc, #144]	@ (8001d08 <HAL_DMA_Abort_IT+0x3e8>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d022      	beq.n	8001cc2 <HAL_DMA_Abort_IT+0x3a2>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a22      	ldr	r2, [pc, #136]	@ (8001d0c <HAL_DMA_Abort_IT+0x3ec>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d01d      	beq.n	8001cc2 <HAL_DMA_Abort_IT+0x3a2>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a21      	ldr	r2, [pc, #132]	@ (8001d10 <HAL_DMA_Abort_IT+0x3f0>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d018      	beq.n	8001cc2 <HAL_DMA_Abort_IT+0x3a2>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a1f      	ldr	r2, [pc, #124]	@ (8001d14 <HAL_DMA_Abort_IT+0x3f4>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d013      	beq.n	8001cc2 <HAL_DMA_Abort_IT+0x3a2>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a1e      	ldr	r2, [pc, #120]	@ (8001d18 <HAL_DMA_Abort_IT+0x3f8>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d00e      	beq.n	8001cc2 <HAL_DMA_Abort_IT+0x3a2>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a1c      	ldr	r2, [pc, #112]	@ (8001d1c <HAL_DMA_Abort_IT+0x3fc>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d009      	beq.n	8001cc2 <HAL_DMA_Abort_IT+0x3a2>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a1b      	ldr	r2, [pc, #108]	@ (8001d20 <HAL_DMA_Abort_IT+0x400>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d004      	beq.n	8001cc2 <HAL_DMA_Abort_IT+0x3a2>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a19      	ldr	r2, [pc, #100]	@ (8001d24 <HAL_DMA_Abort_IT+0x404>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d132      	bne.n	8001d28 <HAL_DMA_Abort_IT+0x408>
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e031      	b.n	8001d2a <HAL_DMA_Abort_IT+0x40a>
 8001cc6:	bf00      	nop
 8001cc8:	40020010 	.word	0x40020010
 8001ccc:	40020028 	.word	0x40020028
 8001cd0:	40020040 	.word	0x40020040
 8001cd4:	40020058 	.word	0x40020058
 8001cd8:	40020070 	.word	0x40020070
 8001cdc:	40020088 	.word	0x40020088
 8001ce0:	400200a0 	.word	0x400200a0
 8001ce4:	400200b8 	.word	0x400200b8
 8001ce8:	40020410 	.word	0x40020410
 8001cec:	40020428 	.word	0x40020428
 8001cf0:	40020440 	.word	0x40020440
 8001cf4:	40020458 	.word	0x40020458
 8001cf8:	40020470 	.word	0x40020470
 8001cfc:	40020488 	.word	0x40020488
 8001d00:	400204a0 	.word	0x400204a0
 8001d04:	400204b8 	.word	0x400204b8
 8001d08:	58025408 	.word	0x58025408
 8001d0c:	5802541c 	.word	0x5802541c
 8001d10:	58025430 	.word	0x58025430
 8001d14:	58025444 	.word	0x58025444
 8001d18:	58025458 	.word	0x58025458
 8001d1c:	5802546c 	.word	0x5802546c
 8001d20:	58025480 	.word	0x58025480
 8001d24:	58025494 	.word	0x58025494
 8001d28:	2300      	movs	r3, #0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d028      	beq.n	8001d80 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d38:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001d3c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d42:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d48:	f003 031f 	and.w	r3, r3, #31
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	409a      	lsls	r2, r3
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001d58:	687a      	ldr	r2, [r7, #4]
 8001d5a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001d5c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d00c      	beq.n	8001d80 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001d70:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001d74:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d7a:	687a      	ldr	r2, [r7, #4]
 8001d7c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8001d7e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2201      	movs	r2, #1
 8001d84:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d003      	beq.n	8001da0 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001d9c:	6878      	ldr	r0, [r7, #4]
 8001d9e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8001da0:	2300      	movs	r3, #0
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3710      	adds	r7, #16
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop

08001dac <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b08a      	sub	sp, #40	@ 0x28
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8001db4:	2300      	movs	r3, #0
 8001db6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001db8:	4b67      	ldr	r3, [pc, #412]	@ (8001f58 <HAL_DMA_IRQHandler+0x1ac>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a67      	ldr	r2, [pc, #412]	@ (8001f5c <HAL_DMA_IRQHandler+0x1b0>)
 8001dbe:	fba2 2303 	umull	r2, r3, r2, r3
 8001dc2:	0a9b      	lsrs	r3, r3, #10
 8001dc4:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dca:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dd0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8001dd2:	6a3b      	ldr	r3, [r7, #32]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8001dd8:	69fb      	ldr	r3, [r7, #28]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a5f      	ldr	r2, [pc, #380]	@ (8001f60 <HAL_DMA_IRQHandler+0x1b4>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d04a      	beq.n	8001e7e <HAL_DMA_IRQHandler+0xd2>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a5d      	ldr	r2, [pc, #372]	@ (8001f64 <HAL_DMA_IRQHandler+0x1b8>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d045      	beq.n	8001e7e <HAL_DMA_IRQHandler+0xd2>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a5c      	ldr	r2, [pc, #368]	@ (8001f68 <HAL_DMA_IRQHandler+0x1bc>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d040      	beq.n	8001e7e <HAL_DMA_IRQHandler+0xd2>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a5a      	ldr	r2, [pc, #360]	@ (8001f6c <HAL_DMA_IRQHandler+0x1c0>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d03b      	beq.n	8001e7e <HAL_DMA_IRQHandler+0xd2>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a59      	ldr	r2, [pc, #356]	@ (8001f70 <HAL_DMA_IRQHandler+0x1c4>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d036      	beq.n	8001e7e <HAL_DMA_IRQHandler+0xd2>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a57      	ldr	r2, [pc, #348]	@ (8001f74 <HAL_DMA_IRQHandler+0x1c8>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d031      	beq.n	8001e7e <HAL_DMA_IRQHandler+0xd2>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a56      	ldr	r2, [pc, #344]	@ (8001f78 <HAL_DMA_IRQHandler+0x1cc>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d02c      	beq.n	8001e7e <HAL_DMA_IRQHandler+0xd2>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a54      	ldr	r2, [pc, #336]	@ (8001f7c <HAL_DMA_IRQHandler+0x1d0>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d027      	beq.n	8001e7e <HAL_DMA_IRQHandler+0xd2>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a53      	ldr	r2, [pc, #332]	@ (8001f80 <HAL_DMA_IRQHandler+0x1d4>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d022      	beq.n	8001e7e <HAL_DMA_IRQHandler+0xd2>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a51      	ldr	r2, [pc, #324]	@ (8001f84 <HAL_DMA_IRQHandler+0x1d8>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d01d      	beq.n	8001e7e <HAL_DMA_IRQHandler+0xd2>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a50      	ldr	r2, [pc, #320]	@ (8001f88 <HAL_DMA_IRQHandler+0x1dc>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d018      	beq.n	8001e7e <HAL_DMA_IRQHandler+0xd2>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a4e      	ldr	r2, [pc, #312]	@ (8001f8c <HAL_DMA_IRQHandler+0x1e0>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d013      	beq.n	8001e7e <HAL_DMA_IRQHandler+0xd2>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a4d      	ldr	r2, [pc, #308]	@ (8001f90 <HAL_DMA_IRQHandler+0x1e4>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d00e      	beq.n	8001e7e <HAL_DMA_IRQHandler+0xd2>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a4b      	ldr	r2, [pc, #300]	@ (8001f94 <HAL_DMA_IRQHandler+0x1e8>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d009      	beq.n	8001e7e <HAL_DMA_IRQHandler+0xd2>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a4a      	ldr	r2, [pc, #296]	@ (8001f98 <HAL_DMA_IRQHandler+0x1ec>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d004      	beq.n	8001e7e <HAL_DMA_IRQHandler+0xd2>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a48      	ldr	r2, [pc, #288]	@ (8001f9c <HAL_DMA_IRQHandler+0x1f0>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d101      	bne.n	8001e82 <HAL_DMA_IRQHandler+0xd6>
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e000      	b.n	8001e84 <HAL_DMA_IRQHandler+0xd8>
 8001e82:	2300      	movs	r3, #0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	f000 842b 	beq.w	80026e0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e8e:	f003 031f 	and.w	r3, r3, #31
 8001e92:	2208      	movs	r2, #8
 8001e94:	409a      	lsls	r2, r3
 8001e96:	69bb      	ldr	r3, [r7, #24]
 8001e98:	4013      	ands	r3, r2
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	f000 80a2 	beq.w	8001fe4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a2e      	ldr	r2, [pc, #184]	@ (8001f60 <HAL_DMA_IRQHandler+0x1b4>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d04a      	beq.n	8001f40 <HAL_DMA_IRQHandler+0x194>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a2d      	ldr	r2, [pc, #180]	@ (8001f64 <HAL_DMA_IRQHandler+0x1b8>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d045      	beq.n	8001f40 <HAL_DMA_IRQHandler+0x194>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a2b      	ldr	r2, [pc, #172]	@ (8001f68 <HAL_DMA_IRQHandler+0x1bc>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d040      	beq.n	8001f40 <HAL_DMA_IRQHandler+0x194>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a2a      	ldr	r2, [pc, #168]	@ (8001f6c <HAL_DMA_IRQHandler+0x1c0>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d03b      	beq.n	8001f40 <HAL_DMA_IRQHandler+0x194>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a28      	ldr	r2, [pc, #160]	@ (8001f70 <HAL_DMA_IRQHandler+0x1c4>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d036      	beq.n	8001f40 <HAL_DMA_IRQHandler+0x194>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a27      	ldr	r2, [pc, #156]	@ (8001f74 <HAL_DMA_IRQHandler+0x1c8>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d031      	beq.n	8001f40 <HAL_DMA_IRQHandler+0x194>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a25      	ldr	r2, [pc, #148]	@ (8001f78 <HAL_DMA_IRQHandler+0x1cc>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d02c      	beq.n	8001f40 <HAL_DMA_IRQHandler+0x194>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a24      	ldr	r2, [pc, #144]	@ (8001f7c <HAL_DMA_IRQHandler+0x1d0>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d027      	beq.n	8001f40 <HAL_DMA_IRQHandler+0x194>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a22      	ldr	r2, [pc, #136]	@ (8001f80 <HAL_DMA_IRQHandler+0x1d4>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d022      	beq.n	8001f40 <HAL_DMA_IRQHandler+0x194>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a21      	ldr	r2, [pc, #132]	@ (8001f84 <HAL_DMA_IRQHandler+0x1d8>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d01d      	beq.n	8001f40 <HAL_DMA_IRQHandler+0x194>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a1f      	ldr	r2, [pc, #124]	@ (8001f88 <HAL_DMA_IRQHandler+0x1dc>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d018      	beq.n	8001f40 <HAL_DMA_IRQHandler+0x194>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a1e      	ldr	r2, [pc, #120]	@ (8001f8c <HAL_DMA_IRQHandler+0x1e0>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d013      	beq.n	8001f40 <HAL_DMA_IRQHandler+0x194>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a1c      	ldr	r2, [pc, #112]	@ (8001f90 <HAL_DMA_IRQHandler+0x1e4>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d00e      	beq.n	8001f40 <HAL_DMA_IRQHandler+0x194>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a1b      	ldr	r2, [pc, #108]	@ (8001f94 <HAL_DMA_IRQHandler+0x1e8>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d009      	beq.n	8001f40 <HAL_DMA_IRQHandler+0x194>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a19      	ldr	r2, [pc, #100]	@ (8001f98 <HAL_DMA_IRQHandler+0x1ec>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d004      	beq.n	8001f40 <HAL_DMA_IRQHandler+0x194>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a18      	ldr	r2, [pc, #96]	@ (8001f9c <HAL_DMA_IRQHandler+0x1f0>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d12f      	bne.n	8001fa0 <HAL_DMA_IRQHandler+0x1f4>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 0304 	and.w	r3, r3, #4
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	bf14      	ite	ne
 8001f4e:	2301      	movne	r3, #1
 8001f50:	2300      	moveq	r3, #0
 8001f52:	b2db      	uxtb	r3, r3
 8001f54:	e02e      	b.n	8001fb4 <HAL_DMA_IRQHandler+0x208>
 8001f56:	bf00      	nop
 8001f58:	24000000 	.word	0x24000000
 8001f5c:	1b4e81b5 	.word	0x1b4e81b5
 8001f60:	40020010 	.word	0x40020010
 8001f64:	40020028 	.word	0x40020028
 8001f68:	40020040 	.word	0x40020040
 8001f6c:	40020058 	.word	0x40020058
 8001f70:	40020070 	.word	0x40020070
 8001f74:	40020088 	.word	0x40020088
 8001f78:	400200a0 	.word	0x400200a0
 8001f7c:	400200b8 	.word	0x400200b8
 8001f80:	40020410 	.word	0x40020410
 8001f84:	40020428 	.word	0x40020428
 8001f88:	40020440 	.word	0x40020440
 8001f8c:	40020458 	.word	0x40020458
 8001f90:	40020470 	.word	0x40020470
 8001f94:	40020488 	.word	0x40020488
 8001f98:	400204a0 	.word	0x400204a0
 8001f9c:	400204b8 	.word	0x400204b8
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 0308 	and.w	r3, r3, #8
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	bf14      	ite	ne
 8001fae:	2301      	movne	r3, #1
 8001fb0:	2300      	moveq	r3, #0
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d015      	beq.n	8001fe4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f022 0204 	bic.w	r2, r2, #4
 8001fc6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fcc:	f003 031f 	and.w	r3, r3, #31
 8001fd0:	2208      	movs	r2, #8
 8001fd2:	409a      	lsls	r2, r3
 8001fd4:	6a3b      	ldr	r3, [r7, #32]
 8001fd6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fdc:	f043 0201 	orr.w	r2, r3, #1
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fe8:	f003 031f 	and.w	r3, r3, #31
 8001fec:	69ba      	ldr	r2, [r7, #24]
 8001fee:	fa22 f303 	lsr.w	r3, r2, r3
 8001ff2:	f003 0301 	and.w	r3, r3, #1
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d06e      	beq.n	80020d8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a69      	ldr	r2, [pc, #420]	@ (80021a4 <HAL_DMA_IRQHandler+0x3f8>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d04a      	beq.n	800209a <HAL_DMA_IRQHandler+0x2ee>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a67      	ldr	r2, [pc, #412]	@ (80021a8 <HAL_DMA_IRQHandler+0x3fc>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d045      	beq.n	800209a <HAL_DMA_IRQHandler+0x2ee>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a66      	ldr	r2, [pc, #408]	@ (80021ac <HAL_DMA_IRQHandler+0x400>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d040      	beq.n	800209a <HAL_DMA_IRQHandler+0x2ee>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a64      	ldr	r2, [pc, #400]	@ (80021b0 <HAL_DMA_IRQHandler+0x404>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d03b      	beq.n	800209a <HAL_DMA_IRQHandler+0x2ee>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a63      	ldr	r2, [pc, #396]	@ (80021b4 <HAL_DMA_IRQHandler+0x408>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d036      	beq.n	800209a <HAL_DMA_IRQHandler+0x2ee>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a61      	ldr	r2, [pc, #388]	@ (80021b8 <HAL_DMA_IRQHandler+0x40c>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d031      	beq.n	800209a <HAL_DMA_IRQHandler+0x2ee>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a60      	ldr	r2, [pc, #384]	@ (80021bc <HAL_DMA_IRQHandler+0x410>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d02c      	beq.n	800209a <HAL_DMA_IRQHandler+0x2ee>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a5e      	ldr	r2, [pc, #376]	@ (80021c0 <HAL_DMA_IRQHandler+0x414>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d027      	beq.n	800209a <HAL_DMA_IRQHandler+0x2ee>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a5d      	ldr	r2, [pc, #372]	@ (80021c4 <HAL_DMA_IRQHandler+0x418>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d022      	beq.n	800209a <HAL_DMA_IRQHandler+0x2ee>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a5b      	ldr	r2, [pc, #364]	@ (80021c8 <HAL_DMA_IRQHandler+0x41c>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d01d      	beq.n	800209a <HAL_DMA_IRQHandler+0x2ee>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a5a      	ldr	r2, [pc, #360]	@ (80021cc <HAL_DMA_IRQHandler+0x420>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d018      	beq.n	800209a <HAL_DMA_IRQHandler+0x2ee>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a58      	ldr	r2, [pc, #352]	@ (80021d0 <HAL_DMA_IRQHandler+0x424>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d013      	beq.n	800209a <HAL_DMA_IRQHandler+0x2ee>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a57      	ldr	r2, [pc, #348]	@ (80021d4 <HAL_DMA_IRQHandler+0x428>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d00e      	beq.n	800209a <HAL_DMA_IRQHandler+0x2ee>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a55      	ldr	r2, [pc, #340]	@ (80021d8 <HAL_DMA_IRQHandler+0x42c>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d009      	beq.n	800209a <HAL_DMA_IRQHandler+0x2ee>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a54      	ldr	r2, [pc, #336]	@ (80021dc <HAL_DMA_IRQHandler+0x430>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d004      	beq.n	800209a <HAL_DMA_IRQHandler+0x2ee>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a52      	ldr	r2, [pc, #328]	@ (80021e0 <HAL_DMA_IRQHandler+0x434>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d10a      	bne.n	80020b0 <HAL_DMA_IRQHandler+0x304>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	695b      	ldr	r3, [r3, #20]
 80020a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	bf14      	ite	ne
 80020a8:	2301      	movne	r3, #1
 80020aa:	2300      	moveq	r3, #0
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	e003      	b.n	80020b8 <HAL_DMA_IRQHandler+0x30c>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	2300      	movs	r3, #0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d00d      	beq.n	80020d8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020c0:	f003 031f 	and.w	r3, r3, #31
 80020c4:	2201      	movs	r2, #1
 80020c6:	409a      	lsls	r2, r3
 80020c8:	6a3b      	ldr	r3, [r7, #32]
 80020ca:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020d0:	f043 0202 	orr.w	r2, r3, #2
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020dc:	f003 031f 	and.w	r3, r3, #31
 80020e0:	2204      	movs	r2, #4
 80020e2:	409a      	lsls	r2, r3
 80020e4:	69bb      	ldr	r3, [r7, #24]
 80020e6:	4013      	ands	r3, r2
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	f000 808f 	beq.w	800220c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a2c      	ldr	r2, [pc, #176]	@ (80021a4 <HAL_DMA_IRQHandler+0x3f8>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d04a      	beq.n	800218e <HAL_DMA_IRQHandler+0x3e2>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a2a      	ldr	r2, [pc, #168]	@ (80021a8 <HAL_DMA_IRQHandler+0x3fc>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d045      	beq.n	800218e <HAL_DMA_IRQHandler+0x3e2>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a29      	ldr	r2, [pc, #164]	@ (80021ac <HAL_DMA_IRQHandler+0x400>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d040      	beq.n	800218e <HAL_DMA_IRQHandler+0x3e2>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a27      	ldr	r2, [pc, #156]	@ (80021b0 <HAL_DMA_IRQHandler+0x404>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d03b      	beq.n	800218e <HAL_DMA_IRQHandler+0x3e2>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a26      	ldr	r2, [pc, #152]	@ (80021b4 <HAL_DMA_IRQHandler+0x408>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d036      	beq.n	800218e <HAL_DMA_IRQHandler+0x3e2>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a24      	ldr	r2, [pc, #144]	@ (80021b8 <HAL_DMA_IRQHandler+0x40c>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d031      	beq.n	800218e <HAL_DMA_IRQHandler+0x3e2>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a23      	ldr	r2, [pc, #140]	@ (80021bc <HAL_DMA_IRQHandler+0x410>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d02c      	beq.n	800218e <HAL_DMA_IRQHandler+0x3e2>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a21      	ldr	r2, [pc, #132]	@ (80021c0 <HAL_DMA_IRQHandler+0x414>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d027      	beq.n	800218e <HAL_DMA_IRQHandler+0x3e2>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a20      	ldr	r2, [pc, #128]	@ (80021c4 <HAL_DMA_IRQHandler+0x418>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d022      	beq.n	800218e <HAL_DMA_IRQHandler+0x3e2>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a1e      	ldr	r2, [pc, #120]	@ (80021c8 <HAL_DMA_IRQHandler+0x41c>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d01d      	beq.n	800218e <HAL_DMA_IRQHandler+0x3e2>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a1d      	ldr	r2, [pc, #116]	@ (80021cc <HAL_DMA_IRQHandler+0x420>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d018      	beq.n	800218e <HAL_DMA_IRQHandler+0x3e2>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a1b      	ldr	r2, [pc, #108]	@ (80021d0 <HAL_DMA_IRQHandler+0x424>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d013      	beq.n	800218e <HAL_DMA_IRQHandler+0x3e2>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a1a      	ldr	r2, [pc, #104]	@ (80021d4 <HAL_DMA_IRQHandler+0x428>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d00e      	beq.n	800218e <HAL_DMA_IRQHandler+0x3e2>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a18      	ldr	r2, [pc, #96]	@ (80021d8 <HAL_DMA_IRQHandler+0x42c>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d009      	beq.n	800218e <HAL_DMA_IRQHandler+0x3e2>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a17      	ldr	r2, [pc, #92]	@ (80021dc <HAL_DMA_IRQHandler+0x430>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d004      	beq.n	800218e <HAL_DMA_IRQHandler+0x3e2>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a15      	ldr	r2, [pc, #84]	@ (80021e0 <HAL_DMA_IRQHandler+0x434>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d12a      	bne.n	80021e4 <HAL_DMA_IRQHandler+0x438>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 0302 	and.w	r3, r3, #2
 8002198:	2b00      	cmp	r3, #0
 800219a:	bf14      	ite	ne
 800219c:	2301      	movne	r3, #1
 800219e:	2300      	moveq	r3, #0
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	e023      	b.n	80021ec <HAL_DMA_IRQHandler+0x440>
 80021a4:	40020010 	.word	0x40020010
 80021a8:	40020028 	.word	0x40020028
 80021ac:	40020040 	.word	0x40020040
 80021b0:	40020058 	.word	0x40020058
 80021b4:	40020070 	.word	0x40020070
 80021b8:	40020088 	.word	0x40020088
 80021bc:	400200a0 	.word	0x400200a0
 80021c0:	400200b8 	.word	0x400200b8
 80021c4:	40020410 	.word	0x40020410
 80021c8:	40020428 	.word	0x40020428
 80021cc:	40020440 	.word	0x40020440
 80021d0:	40020458 	.word	0x40020458
 80021d4:	40020470 	.word	0x40020470
 80021d8:	40020488 	.word	0x40020488
 80021dc:	400204a0 	.word	0x400204a0
 80021e0:	400204b8 	.word	0x400204b8
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	2300      	movs	r3, #0
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d00d      	beq.n	800220c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021f4:	f003 031f 	and.w	r3, r3, #31
 80021f8:	2204      	movs	r2, #4
 80021fa:	409a      	lsls	r2, r3
 80021fc:	6a3b      	ldr	r3, [r7, #32]
 80021fe:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002204:	f043 0204 	orr.w	r2, r3, #4
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002210:	f003 031f 	and.w	r3, r3, #31
 8002214:	2210      	movs	r2, #16
 8002216:	409a      	lsls	r2, r3
 8002218:	69bb      	ldr	r3, [r7, #24]
 800221a:	4013      	ands	r3, r2
 800221c:	2b00      	cmp	r3, #0
 800221e:	f000 80a6 	beq.w	800236e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a85      	ldr	r2, [pc, #532]	@ (800243c <HAL_DMA_IRQHandler+0x690>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d04a      	beq.n	80022c2 <HAL_DMA_IRQHandler+0x516>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a83      	ldr	r2, [pc, #524]	@ (8002440 <HAL_DMA_IRQHandler+0x694>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d045      	beq.n	80022c2 <HAL_DMA_IRQHandler+0x516>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a82      	ldr	r2, [pc, #520]	@ (8002444 <HAL_DMA_IRQHandler+0x698>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d040      	beq.n	80022c2 <HAL_DMA_IRQHandler+0x516>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a80      	ldr	r2, [pc, #512]	@ (8002448 <HAL_DMA_IRQHandler+0x69c>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d03b      	beq.n	80022c2 <HAL_DMA_IRQHandler+0x516>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a7f      	ldr	r2, [pc, #508]	@ (800244c <HAL_DMA_IRQHandler+0x6a0>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d036      	beq.n	80022c2 <HAL_DMA_IRQHandler+0x516>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a7d      	ldr	r2, [pc, #500]	@ (8002450 <HAL_DMA_IRQHandler+0x6a4>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d031      	beq.n	80022c2 <HAL_DMA_IRQHandler+0x516>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a7c      	ldr	r2, [pc, #496]	@ (8002454 <HAL_DMA_IRQHandler+0x6a8>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d02c      	beq.n	80022c2 <HAL_DMA_IRQHandler+0x516>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a7a      	ldr	r2, [pc, #488]	@ (8002458 <HAL_DMA_IRQHandler+0x6ac>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d027      	beq.n	80022c2 <HAL_DMA_IRQHandler+0x516>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a79      	ldr	r2, [pc, #484]	@ (800245c <HAL_DMA_IRQHandler+0x6b0>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d022      	beq.n	80022c2 <HAL_DMA_IRQHandler+0x516>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a77      	ldr	r2, [pc, #476]	@ (8002460 <HAL_DMA_IRQHandler+0x6b4>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d01d      	beq.n	80022c2 <HAL_DMA_IRQHandler+0x516>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a76      	ldr	r2, [pc, #472]	@ (8002464 <HAL_DMA_IRQHandler+0x6b8>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d018      	beq.n	80022c2 <HAL_DMA_IRQHandler+0x516>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a74      	ldr	r2, [pc, #464]	@ (8002468 <HAL_DMA_IRQHandler+0x6bc>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d013      	beq.n	80022c2 <HAL_DMA_IRQHandler+0x516>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a73      	ldr	r2, [pc, #460]	@ (800246c <HAL_DMA_IRQHandler+0x6c0>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d00e      	beq.n	80022c2 <HAL_DMA_IRQHandler+0x516>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a71      	ldr	r2, [pc, #452]	@ (8002470 <HAL_DMA_IRQHandler+0x6c4>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d009      	beq.n	80022c2 <HAL_DMA_IRQHandler+0x516>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a70      	ldr	r2, [pc, #448]	@ (8002474 <HAL_DMA_IRQHandler+0x6c8>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d004      	beq.n	80022c2 <HAL_DMA_IRQHandler+0x516>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a6e      	ldr	r2, [pc, #440]	@ (8002478 <HAL_DMA_IRQHandler+0x6cc>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d10a      	bne.n	80022d8 <HAL_DMA_IRQHandler+0x52c>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f003 0308 	and.w	r3, r3, #8
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	bf14      	ite	ne
 80022d0:	2301      	movne	r3, #1
 80022d2:	2300      	moveq	r3, #0
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	e009      	b.n	80022ec <HAL_DMA_IRQHandler+0x540>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 0304 	and.w	r3, r3, #4
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	bf14      	ite	ne
 80022e6:	2301      	movne	r3, #1
 80022e8:	2300      	moveq	r3, #0
 80022ea:	b2db      	uxtb	r3, r3
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d03e      	beq.n	800236e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022f4:	f003 031f 	and.w	r3, r3, #31
 80022f8:	2210      	movs	r2, #16
 80022fa:	409a      	lsls	r2, r3
 80022fc:	6a3b      	ldr	r3, [r7, #32]
 80022fe:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800230a:	2b00      	cmp	r3, #0
 800230c:	d018      	beq.n	8002340 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002318:	2b00      	cmp	r3, #0
 800231a:	d108      	bne.n	800232e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002320:	2b00      	cmp	r3, #0
 8002322:	d024      	beq.n	800236e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002328:	6878      	ldr	r0, [r7, #4]
 800232a:	4798      	blx	r3
 800232c:	e01f      	b.n	800236e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002332:	2b00      	cmp	r3, #0
 8002334:	d01b      	beq.n	800236e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	4798      	blx	r3
 800233e:	e016      	b.n	800236e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800234a:	2b00      	cmp	r3, #0
 800234c:	d107      	bne.n	800235e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f022 0208 	bic.w	r2, r2, #8
 800235c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002362:	2b00      	cmp	r3, #0
 8002364:	d003      	beq.n	800236e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002372:	f003 031f 	and.w	r3, r3, #31
 8002376:	2220      	movs	r2, #32
 8002378:	409a      	lsls	r2, r3
 800237a:	69bb      	ldr	r3, [r7, #24]
 800237c:	4013      	ands	r3, r2
 800237e:	2b00      	cmp	r3, #0
 8002380:	f000 8110 	beq.w	80025a4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a2c      	ldr	r2, [pc, #176]	@ (800243c <HAL_DMA_IRQHandler+0x690>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d04a      	beq.n	8002424 <HAL_DMA_IRQHandler+0x678>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a2b      	ldr	r2, [pc, #172]	@ (8002440 <HAL_DMA_IRQHandler+0x694>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d045      	beq.n	8002424 <HAL_DMA_IRQHandler+0x678>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a29      	ldr	r2, [pc, #164]	@ (8002444 <HAL_DMA_IRQHandler+0x698>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d040      	beq.n	8002424 <HAL_DMA_IRQHandler+0x678>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a28      	ldr	r2, [pc, #160]	@ (8002448 <HAL_DMA_IRQHandler+0x69c>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d03b      	beq.n	8002424 <HAL_DMA_IRQHandler+0x678>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a26      	ldr	r2, [pc, #152]	@ (800244c <HAL_DMA_IRQHandler+0x6a0>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d036      	beq.n	8002424 <HAL_DMA_IRQHandler+0x678>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a25      	ldr	r2, [pc, #148]	@ (8002450 <HAL_DMA_IRQHandler+0x6a4>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d031      	beq.n	8002424 <HAL_DMA_IRQHandler+0x678>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a23      	ldr	r2, [pc, #140]	@ (8002454 <HAL_DMA_IRQHandler+0x6a8>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d02c      	beq.n	8002424 <HAL_DMA_IRQHandler+0x678>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a22      	ldr	r2, [pc, #136]	@ (8002458 <HAL_DMA_IRQHandler+0x6ac>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d027      	beq.n	8002424 <HAL_DMA_IRQHandler+0x678>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a20      	ldr	r2, [pc, #128]	@ (800245c <HAL_DMA_IRQHandler+0x6b0>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d022      	beq.n	8002424 <HAL_DMA_IRQHandler+0x678>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a1f      	ldr	r2, [pc, #124]	@ (8002460 <HAL_DMA_IRQHandler+0x6b4>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d01d      	beq.n	8002424 <HAL_DMA_IRQHandler+0x678>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a1d      	ldr	r2, [pc, #116]	@ (8002464 <HAL_DMA_IRQHandler+0x6b8>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d018      	beq.n	8002424 <HAL_DMA_IRQHandler+0x678>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a1c      	ldr	r2, [pc, #112]	@ (8002468 <HAL_DMA_IRQHandler+0x6bc>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d013      	beq.n	8002424 <HAL_DMA_IRQHandler+0x678>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a1a      	ldr	r2, [pc, #104]	@ (800246c <HAL_DMA_IRQHandler+0x6c0>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d00e      	beq.n	8002424 <HAL_DMA_IRQHandler+0x678>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a19      	ldr	r2, [pc, #100]	@ (8002470 <HAL_DMA_IRQHandler+0x6c4>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d009      	beq.n	8002424 <HAL_DMA_IRQHandler+0x678>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a17      	ldr	r2, [pc, #92]	@ (8002474 <HAL_DMA_IRQHandler+0x6c8>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d004      	beq.n	8002424 <HAL_DMA_IRQHandler+0x678>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a16      	ldr	r2, [pc, #88]	@ (8002478 <HAL_DMA_IRQHandler+0x6cc>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d12b      	bne.n	800247c <HAL_DMA_IRQHandler+0x6d0>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 0310 	and.w	r3, r3, #16
 800242e:	2b00      	cmp	r3, #0
 8002430:	bf14      	ite	ne
 8002432:	2301      	movne	r3, #1
 8002434:	2300      	moveq	r3, #0
 8002436:	b2db      	uxtb	r3, r3
 8002438:	e02a      	b.n	8002490 <HAL_DMA_IRQHandler+0x6e4>
 800243a:	bf00      	nop
 800243c:	40020010 	.word	0x40020010
 8002440:	40020028 	.word	0x40020028
 8002444:	40020040 	.word	0x40020040
 8002448:	40020058 	.word	0x40020058
 800244c:	40020070 	.word	0x40020070
 8002450:	40020088 	.word	0x40020088
 8002454:	400200a0 	.word	0x400200a0
 8002458:	400200b8 	.word	0x400200b8
 800245c:	40020410 	.word	0x40020410
 8002460:	40020428 	.word	0x40020428
 8002464:	40020440 	.word	0x40020440
 8002468:	40020458 	.word	0x40020458
 800246c:	40020470 	.word	0x40020470
 8002470:	40020488 	.word	0x40020488
 8002474:	400204a0 	.word	0x400204a0
 8002478:	400204b8 	.word	0x400204b8
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 0302 	and.w	r3, r3, #2
 8002486:	2b00      	cmp	r3, #0
 8002488:	bf14      	ite	ne
 800248a:	2301      	movne	r3, #1
 800248c:	2300      	moveq	r3, #0
 800248e:	b2db      	uxtb	r3, r3
 8002490:	2b00      	cmp	r3, #0
 8002492:	f000 8087 	beq.w	80025a4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800249a:	f003 031f 	and.w	r3, r3, #31
 800249e:	2220      	movs	r2, #32
 80024a0:	409a      	lsls	r2, r3
 80024a2:	6a3b      	ldr	r3, [r7, #32]
 80024a4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	2b04      	cmp	r3, #4
 80024b0:	d139      	bne.n	8002526 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f022 0216 	bic.w	r2, r2, #22
 80024c0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	695a      	ldr	r2, [r3, #20]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80024d0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d103      	bne.n	80024e2 <HAL_DMA_IRQHandler+0x736>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d007      	beq.n	80024f2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f022 0208 	bic.w	r2, r2, #8
 80024f0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024f6:	f003 031f 	and.w	r3, r3, #31
 80024fa:	223f      	movs	r2, #63	@ 0x3f
 80024fc:	409a      	lsls	r2, r3
 80024fe:	6a3b      	ldr	r3, [r7, #32]
 8002500:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2201      	movs	r2, #1
 8002506:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2200      	movs	r2, #0
 800250e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002516:	2b00      	cmp	r3, #0
 8002518:	f000 8382 	beq.w	8002c20 <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002520:	6878      	ldr	r0, [r7, #4]
 8002522:	4798      	blx	r3
          }
          return;
 8002524:	e37c      	b.n	8002c20 <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002530:	2b00      	cmp	r3, #0
 8002532:	d018      	beq.n	8002566 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d108      	bne.n	8002554 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002546:	2b00      	cmp	r3, #0
 8002548:	d02c      	beq.n	80025a4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	4798      	blx	r3
 8002552:	e027      	b.n	80025a4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002558:	2b00      	cmp	r3, #0
 800255a:	d023      	beq.n	80025a4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002560:	6878      	ldr	r0, [r7, #4]
 8002562:	4798      	blx	r3
 8002564:	e01e      	b.n	80025a4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002570:	2b00      	cmp	r3, #0
 8002572:	d10f      	bne.n	8002594 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f022 0210 	bic.w	r2, r2, #16
 8002582:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2201      	movs	r2, #1
 8002588:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2200      	movs	r2, #0
 8002590:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002598:	2b00      	cmp	r3, #0
 800259a:	d003      	beq.n	80025a4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025a0:	6878      	ldr	r0, [r7, #4]
 80025a2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	f000 833e 	beq.w	8002c2a <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025b2:	f003 0301 	and.w	r3, r3, #1
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	f000 8088 	beq.w	80026cc <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2204      	movs	r2, #4
 80025c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a89      	ldr	r2, [pc, #548]	@ (80027f0 <HAL_DMA_IRQHandler+0xa44>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d04a      	beq.n	8002664 <HAL_DMA_IRQHandler+0x8b8>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a88      	ldr	r2, [pc, #544]	@ (80027f4 <HAL_DMA_IRQHandler+0xa48>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d045      	beq.n	8002664 <HAL_DMA_IRQHandler+0x8b8>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a86      	ldr	r2, [pc, #536]	@ (80027f8 <HAL_DMA_IRQHandler+0xa4c>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d040      	beq.n	8002664 <HAL_DMA_IRQHandler+0x8b8>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a85      	ldr	r2, [pc, #532]	@ (80027fc <HAL_DMA_IRQHandler+0xa50>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d03b      	beq.n	8002664 <HAL_DMA_IRQHandler+0x8b8>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a83      	ldr	r2, [pc, #524]	@ (8002800 <HAL_DMA_IRQHandler+0xa54>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d036      	beq.n	8002664 <HAL_DMA_IRQHandler+0x8b8>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a82      	ldr	r2, [pc, #520]	@ (8002804 <HAL_DMA_IRQHandler+0xa58>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d031      	beq.n	8002664 <HAL_DMA_IRQHandler+0x8b8>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a80      	ldr	r2, [pc, #512]	@ (8002808 <HAL_DMA_IRQHandler+0xa5c>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d02c      	beq.n	8002664 <HAL_DMA_IRQHandler+0x8b8>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a7f      	ldr	r2, [pc, #508]	@ (800280c <HAL_DMA_IRQHandler+0xa60>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d027      	beq.n	8002664 <HAL_DMA_IRQHandler+0x8b8>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a7d      	ldr	r2, [pc, #500]	@ (8002810 <HAL_DMA_IRQHandler+0xa64>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d022      	beq.n	8002664 <HAL_DMA_IRQHandler+0x8b8>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a7c      	ldr	r2, [pc, #496]	@ (8002814 <HAL_DMA_IRQHandler+0xa68>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d01d      	beq.n	8002664 <HAL_DMA_IRQHandler+0x8b8>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a7a      	ldr	r2, [pc, #488]	@ (8002818 <HAL_DMA_IRQHandler+0xa6c>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d018      	beq.n	8002664 <HAL_DMA_IRQHandler+0x8b8>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a79      	ldr	r2, [pc, #484]	@ (800281c <HAL_DMA_IRQHandler+0xa70>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d013      	beq.n	8002664 <HAL_DMA_IRQHandler+0x8b8>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a77      	ldr	r2, [pc, #476]	@ (8002820 <HAL_DMA_IRQHandler+0xa74>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d00e      	beq.n	8002664 <HAL_DMA_IRQHandler+0x8b8>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a76      	ldr	r2, [pc, #472]	@ (8002824 <HAL_DMA_IRQHandler+0xa78>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d009      	beq.n	8002664 <HAL_DMA_IRQHandler+0x8b8>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a74      	ldr	r2, [pc, #464]	@ (8002828 <HAL_DMA_IRQHandler+0xa7c>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d004      	beq.n	8002664 <HAL_DMA_IRQHandler+0x8b8>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a73      	ldr	r2, [pc, #460]	@ (800282c <HAL_DMA_IRQHandler+0xa80>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d108      	bne.n	8002676 <HAL_DMA_IRQHandler+0x8ca>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f022 0201 	bic.w	r2, r2, #1
 8002672:	601a      	str	r2, [r3, #0]
 8002674:	e007      	b.n	8002686 <HAL_DMA_IRQHandler+0x8da>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f022 0201 	bic.w	r2, r2, #1
 8002684:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	3301      	adds	r3, #1
 800268a:	60fb      	str	r3, [r7, #12]
 800268c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800268e:	429a      	cmp	r2, r3
 8002690:	d307      	bcc.n	80026a2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 0301 	and.w	r3, r3, #1
 800269c:	2b00      	cmp	r3, #0
 800269e:	d1f2      	bne.n	8002686 <HAL_DMA_IRQHandler+0x8da>
 80026a0:	e000      	b.n	80026a4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80026a2:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 0301 	and.w	r3, r3, #1
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d004      	beq.n	80026bc <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2203      	movs	r2, #3
 80026b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 80026ba:	e003      	b.n	80026c4 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2201      	movs	r2, #1
 80026c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2200      	movs	r2, #0
 80026c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	f000 82aa 	beq.w	8002c2a <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	4798      	blx	r3
 80026de:	e2a4      	b.n	8002c2a <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a52      	ldr	r2, [pc, #328]	@ (8002830 <HAL_DMA_IRQHandler+0xa84>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d04a      	beq.n	8002780 <HAL_DMA_IRQHandler+0x9d4>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a51      	ldr	r2, [pc, #324]	@ (8002834 <HAL_DMA_IRQHandler+0xa88>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d045      	beq.n	8002780 <HAL_DMA_IRQHandler+0x9d4>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a4f      	ldr	r2, [pc, #316]	@ (8002838 <HAL_DMA_IRQHandler+0xa8c>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d040      	beq.n	8002780 <HAL_DMA_IRQHandler+0x9d4>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a4e      	ldr	r2, [pc, #312]	@ (800283c <HAL_DMA_IRQHandler+0xa90>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d03b      	beq.n	8002780 <HAL_DMA_IRQHandler+0x9d4>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a4c      	ldr	r2, [pc, #304]	@ (8002840 <HAL_DMA_IRQHandler+0xa94>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d036      	beq.n	8002780 <HAL_DMA_IRQHandler+0x9d4>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a4b      	ldr	r2, [pc, #300]	@ (8002844 <HAL_DMA_IRQHandler+0xa98>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d031      	beq.n	8002780 <HAL_DMA_IRQHandler+0x9d4>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a49      	ldr	r2, [pc, #292]	@ (8002848 <HAL_DMA_IRQHandler+0xa9c>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d02c      	beq.n	8002780 <HAL_DMA_IRQHandler+0x9d4>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a48      	ldr	r2, [pc, #288]	@ (800284c <HAL_DMA_IRQHandler+0xaa0>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d027      	beq.n	8002780 <HAL_DMA_IRQHandler+0x9d4>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a46      	ldr	r2, [pc, #280]	@ (8002850 <HAL_DMA_IRQHandler+0xaa4>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d022      	beq.n	8002780 <HAL_DMA_IRQHandler+0x9d4>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a45      	ldr	r2, [pc, #276]	@ (8002854 <HAL_DMA_IRQHandler+0xaa8>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d01d      	beq.n	8002780 <HAL_DMA_IRQHandler+0x9d4>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a43      	ldr	r2, [pc, #268]	@ (8002858 <HAL_DMA_IRQHandler+0xaac>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d018      	beq.n	8002780 <HAL_DMA_IRQHandler+0x9d4>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a42      	ldr	r2, [pc, #264]	@ (800285c <HAL_DMA_IRQHandler+0xab0>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d013      	beq.n	8002780 <HAL_DMA_IRQHandler+0x9d4>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a40      	ldr	r2, [pc, #256]	@ (8002860 <HAL_DMA_IRQHandler+0xab4>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d00e      	beq.n	8002780 <HAL_DMA_IRQHandler+0x9d4>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a3f      	ldr	r2, [pc, #252]	@ (8002864 <HAL_DMA_IRQHandler+0xab8>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d009      	beq.n	8002780 <HAL_DMA_IRQHandler+0x9d4>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a3d      	ldr	r2, [pc, #244]	@ (8002868 <HAL_DMA_IRQHandler+0xabc>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d004      	beq.n	8002780 <HAL_DMA_IRQHandler+0x9d4>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a3c      	ldr	r2, [pc, #240]	@ (800286c <HAL_DMA_IRQHandler+0xac0>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d101      	bne.n	8002784 <HAL_DMA_IRQHandler+0x9d8>
 8002780:	2301      	movs	r3, #1
 8002782:	e000      	b.n	8002786 <HAL_DMA_IRQHandler+0x9da>
 8002784:	2300      	movs	r3, #0
 8002786:	2b00      	cmp	r3, #0
 8002788:	f000 824f 	beq.w	8002c2a <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002798:	f003 031f 	and.w	r3, r3, #31
 800279c:	2204      	movs	r2, #4
 800279e:	409a      	lsls	r2, r3
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	4013      	ands	r3, r2
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	f000 80dd 	beq.w	8002964 <HAL_DMA_IRQHandler+0xbb8>
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	f003 0304 	and.w	r3, r3, #4
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	f000 80d7 	beq.w	8002964 <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027ba:	f003 031f 	and.w	r3, r3, #31
 80027be:	2204      	movs	r2, #4
 80027c0:	409a      	lsls	r2, r3
 80027c2:	69fb      	ldr	r3, [r7, #28]
 80027c4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d059      	beq.n	8002884 <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d14a      	bne.n	8002870 <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027de:	2b00      	cmp	r3, #0
 80027e0:	f000 8220 	beq.w	8002c24 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027e8:	6878      	ldr	r0, [r7, #4]
 80027ea:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80027ec:	e21a      	b.n	8002c24 <HAL_DMA_IRQHandler+0xe78>
 80027ee:	bf00      	nop
 80027f0:	40020010 	.word	0x40020010
 80027f4:	40020028 	.word	0x40020028
 80027f8:	40020040 	.word	0x40020040
 80027fc:	40020058 	.word	0x40020058
 8002800:	40020070 	.word	0x40020070
 8002804:	40020088 	.word	0x40020088
 8002808:	400200a0 	.word	0x400200a0
 800280c:	400200b8 	.word	0x400200b8
 8002810:	40020410 	.word	0x40020410
 8002814:	40020428 	.word	0x40020428
 8002818:	40020440 	.word	0x40020440
 800281c:	40020458 	.word	0x40020458
 8002820:	40020470 	.word	0x40020470
 8002824:	40020488 	.word	0x40020488
 8002828:	400204a0 	.word	0x400204a0
 800282c:	400204b8 	.word	0x400204b8
 8002830:	48022c08 	.word	0x48022c08
 8002834:	48022c1c 	.word	0x48022c1c
 8002838:	48022c30 	.word	0x48022c30
 800283c:	48022c44 	.word	0x48022c44
 8002840:	48022c58 	.word	0x48022c58
 8002844:	48022c6c 	.word	0x48022c6c
 8002848:	48022c80 	.word	0x48022c80
 800284c:	48022c94 	.word	0x48022c94
 8002850:	58025408 	.word	0x58025408
 8002854:	5802541c 	.word	0x5802541c
 8002858:	58025430 	.word	0x58025430
 800285c:	58025444 	.word	0x58025444
 8002860:	58025458 	.word	0x58025458
 8002864:	5802546c 	.word	0x5802546c
 8002868:	58025480 	.word	0x58025480
 800286c:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002874:	2b00      	cmp	r3, #0
 8002876:	f000 81d5 	beq.w	8002c24 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800287e:	6878      	ldr	r0, [r7, #4]
 8002880:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002882:	e1cf      	b.n	8002c24 <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	f003 0320 	and.w	r3, r3, #32
 800288a:	2b00      	cmp	r3, #0
 800288c:	d160      	bne.n	8002950 <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a7f      	ldr	r2, [pc, #508]	@ (8002a90 <HAL_DMA_IRQHandler+0xce4>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d04a      	beq.n	800292e <HAL_DMA_IRQHandler+0xb82>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a7d      	ldr	r2, [pc, #500]	@ (8002a94 <HAL_DMA_IRQHandler+0xce8>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d045      	beq.n	800292e <HAL_DMA_IRQHandler+0xb82>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a7c      	ldr	r2, [pc, #496]	@ (8002a98 <HAL_DMA_IRQHandler+0xcec>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d040      	beq.n	800292e <HAL_DMA_IRQHandler+0xb82>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a7a      	ldr	r2, [pc, #488]	@ (8002a9c <HAL_DMA_IRQHandler+0xcf0>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d03b      	beq.n	800292e <HAL_DMA_IRQHandler+0xb82>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a79      	ldr	r2, [pc, #484]	@ (8002aa0 <HAL_DMA_IRQHandler+0xcf4>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d036      	beq.n	800292e <HAL_DMA_IRQHandler+0xb82>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a77      	ldr	r2, [pc, #476]	@ (8002aa4 <HAL_DMA_IRQHandler+0xcf8>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d031      	beq.n	800292e <HAL_DMA_IRQHandler+0xb82>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a76      	ldr	r2, [pc, #472]	@ (8002aa8 <HAL_DMA_IRQHandler+0xcfc>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d02c      	beq.n	800292e <HAL_DMA_IRQHandler+0xb82>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a74      	ldr	r2, [pc, #464]	@ (8002aac <HAL_DMA_IRQHandler+0xd00>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d027      	beq.n	800292e <HAL_DMA_IRQHandler+0xb82>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a73      	ldr	r2, [pc, #460]	@ (8002ab0 <HAL_DMA_IRQHandler+0xd04>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d022      	beq.n	800292e <HAL_DMA_IRQHandler+0xb82>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a71      	ldr	r2, [pc, #452]	@ (8002ab4 <HAL_DMA_IRQHandler+0xd08>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d01d      	beq.n	800292e <HAL_DMA_IRQHandler+0xb82>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a70      	ldr	r2, [pc, #448]	@ (8002ab8 <HAL_DMA_IRQHandler+0xd0c>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d018      	beq.n	800292e <HAL_DMA_IRQHandler+0xb82>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a6e      	ldr	r2, [pc, #440]	@ (8002abc <HAL_DMA_IRQHandler+0xd10>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d013      	beq.n	800292e <HAL_DMA_IRQHandler+0xb82>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a6d      	ldr	r2, [pc, #436]	@ (8002ac0 <HAL_DMA_IRQHandler+0xd14>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d00e      	beq.n	800292e <HAL_DMA_IRQHandler+0xb82>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a6b      	ldr	r2, [pc, #428]	@ (8002ac4 <HAL_DMA_IRQHandler+0xd18>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d009      	beq.n	800292e <HAL_DMA_IRQHandler+0xb82>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a6a      	ldr	r2, [pc, #424]	@ (8002ac8 <HAL_DMA_IRQHandler+0xd1c>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d004      	beq.n	800292e <HAL_DMA_IRQHandler+0xb82>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a68      	ldr	r2, [pc, #416]	@ (8002acc <HAL_DMA_IRQHandler+0xd20>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d108      	bne.n	8002940 <HAL_DMA_IRQHandler+0xb94>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f022 0208 	bic.w	r2, r2, #8
 800293c:	601a      	str	r2, [r3, #0]
 800293e:	e007      	b.n	8002950 <HAL_DMA_IRQHandler+0xba4>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f022 0204 	bic.w	r2, r2, #4
 800294e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002954:	2b00      	cmp	r3, #0
 8002956:	f000 8165 	beq.w	8002c24 <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002962:	e15f      	b.n	8002c24 <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002968:	f003 031f 	and.w	r3, r3, #31
 800296c:	2202      	movs	r2, #2
 800296e:	409a      	lsls	r2, r3
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	4013      	ands	r3, r2
 8002974:	2b00      	cmp	r3, #0
 8002976:	f000 80c5 	beq.w	8002b04 <HAL_DMA_IRQHandler+0xd58>
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	f003 0302 	and.w	r3, r3, #2
 8002980:	2b00      	cmp	r3, #0
 8002982:	f000 80bf 	beq.w	8002b04 <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800298a:	f003 031f 	and.w	r3, r3, #31
 800298e:	2202      	movs	r2, #2
 8002990:	409a      	lsls	r2, r3
 8002992:	69fb      	ldr	r3, [r7, #28]
 8002994:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800299c:	2b00      	cmp	r3, #0
 800299e:	d018      	beq.n	80029d2 <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d109      	bne.n	80029be <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	f000 813a 	beq.w	8002c28 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029b8:	6878      	ldr	r0, [r7, #4]
 80029ba:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80029bc:	e134      	b.n	8002c28 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	f000 8130 	beq.w	8002c28 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029cc:	6878      	ldr	r0, [r7, #4]
 80029ce:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80029d0:	e12a      	b.n	8002c28 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	f003 0320 	and.w	r3, r3, #32
 80029d8:	2b00      	cmp	r3, #0
 80029da:	f040 8089 	bne.w	8002af0 <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a2b      	ldr	r2, [pc, #172]	@ (8002a90 <HAL_DMA_IRQHandler+0xce4>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d04a      	beq.n	8002a7e <HAL_DMA_IRQHandler+0xcd2>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a29      	ldr	r2, [pc, #164]	@ (8002a94 <HAL_DMA_IRQHandler+0xce8>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d045      	beq.n	8002a7e <HAL_DMA_IRQHandler+0xcd2>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a28      	ldr	r2, [pc, #160]	@ (8002a98 <HAL_DMA_IRQHandler+0xcec>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d040      	beq.n	8002a7e <HAL_DMA_IRQHandler+0xcd2>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a26      	ldr	r2, [pc, #152]	@ (8002a9c <HAL_DMA_IRQHandler+0xcf0>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d03b      	beq.n	8002a7e <HAL_DMA_IRQHandler+0xcd2>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a25      	ldr	r2, [pc, #148]	@ (8002aa0 <HAL_DMA_IRQHandler+0xcf4>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d036      	beq.n	8002a7e <HAL_DMA_IRQHandler+0xcd2>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a23      	ldr	r2, [pc, #140]	@ (8002aa4 <HAL_DMA_IRQHandler+0xcf8>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d031      	beq.n	8002a7e <HAL_DMA_IRQHandler+0xcd2>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a22      	ldr	r2, [pc, #136]	@ (8002aa8 <HAL_DMA_IRQHandler+0xcfc>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d02c      	beq.n	8002a7e <HAL_DMA_IRQHandler+0xcd2>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a20      	ldr	r2, [pc, #128]	@ (8002aac <HAL_DMA_IRQHandler+0xd00>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d027      	beq.n	8002a7e <HAL_DMA_IRQHandler+0xcd2>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a1f      	ldr	r2, [pc, #124]	@ (8002ab0 <HAL_DMA_IRQHandler+0xd04>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d022      	beq.n	8002a7e <HAL_DMA_IRQHandler+0xcd2>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a1d      	ldr	r2, [pc, #116]	@ (8002ab4 <HAL_DMA_IRQHandler+0xd08>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d01d      	beq.n	8002a7e <HAL_DMA_IRQHandler+0xcd2>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a1c      	ldr	r2, [pc, #112]	@ (8002ab8 <HAL_DMA_IRQHandler+0xd0c>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d018      	beq.n	8002a7e <HAL_DMA_IRQHandler+0xcd2>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a1a      	ldr	r2, [pc, #104]	@ (8002abc <HAL_DMA_IRQHandler+0xd10>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d013      	beq.n	8002a7e <HAL_DMA_IRQHandler+0xcd2>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a19      	ldr	r2, [pc, #100]	@ (8002ac0 <HAL_DMA_IRQHandler+0xd14>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d00e      	beq.n	8002a7e <HAL_DMA_IRQHandler+0xcd2>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a17      	ldr	r2, [pc, #92]	@ (8002ac4 <HAL_DMA_IRQHandler+0xd18>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d009      	beq.n	8002a7e <HAL_DMA_IRQHandler+0xcd2>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a16      	ldr	r2, [pc, #88]	@ (8002ac8 <HAL_DMA_IRQHandler+0xd1c>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d004      	beq.n	8002a7e <HAL_DMA_IRQHandler+0xcd2>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a14      	ldr	r2, [pc, #80]	@ (8002acc <HAL_DMA_IRQHandler+0xd20>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d128      	bne.n	8002ad0 <HAL_DMA_IRQHandler+0xd24>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f022 0214 	bic.w	r2, r2, #20
 8002a8c:	601a      	str	r2, [r3, #0]
 8002a8e:	e027      	b.n	8002ae0 <HAL_DMA_IRQHandler+0xd34>
 8002a90:	40020010 	.word	0x40020010
 8002a94:	40020028 	.word	0x40020028
 8002a98:	40020040 	.word	0x40020040
 8002a9c:	40020058 	.word	0x40020058
 8002aa0:	40020070 	.word	0x40020070
 8002aa4:	40020088 	.word	0x40020088
 8002aa8:	400200a0 	.word	0x400200a0
 8002aac:	400200b8 	.word	0x400200b8
 8002ab0:	40020410 	.word	0x40020410
 8002ab4:	40020428 	.word	0x40020428
 8002ab8:	40020440 	.word	0x40020440
 8002abc:	40020458 	.word	0x40020458
 8002ac0:	40020470 	.word	0x40020470
 8002ac4:	40020488 	.word	0x40020488
 8002ac8:	400204a0 	.word	0x400204a0
 8002acc:	400204b8 	.word	0x400204b8
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f022 020a 	bic.w	r2, r2, #10
 8002ade:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2200      	movs	r2, #0
 8002aec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	f000 8097 	beq.w	8002c28 <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002b02:	e091      	b.n	8002c28 <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b08:	f003 031f 	and.w	r3, r3, #31
 8002b0c:	2208      	movs	r2, #8
 8002b0e:	409a      	lsls	r2, r3
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	4013      	ands	r3, r2
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	f000 8088 	beq.w	8002c2a <HAL_DMA_IRQHandler+0xe7e>
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	f003 0308 	and.w	r3, r3, #8
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	f000 8082 	beq.w	8002c2a <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a41      	ldr	r2, [pc, #260]	@ (8002c30 <HAL_DMA_IRQHandler+0xe84>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d04a      	beq.n	8002bc6 <HAL_DMA_IRQHandler+0xe1a>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a3f      	ldr	r2, [pc, #252]	@ (8002c34 <HAL_DMA_IRQHandler+0xe88>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d045      	beq.n	8002bc6 <HAL_DMA_IRQHandler+0xe1a>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a3e      	ldr	r2, [pc, #248]	@ (8002c38 <HAL_DMA_IRQHandler+0xe8c>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d040      	beq.n	8002bc6 <HAL_DMA_IRQHandler+0xe1a>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a3c      	ldr	r2, [pc, #240]	@ (8002c3c <HAL_DMA_IRQHandler+0xe90>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d03b      	beq.n	8002bc6 <HAL_DMA_IRQHandler+0xe1a>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a3b      	ldr	r2, [pc, #236]	@ (8002c40 <HAL_DMA_IRQHandler+0xe94>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d036      	beq.n	8002bc6 <HAL_DMA_IRQHandler+0xe1a>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a39      	ldr	r2, [pc, #228]	@ (8002c44 <HAL_DMA_IRQHandler+0xe98>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d031      	beq.n	8002bc6 <HAL_DMA_IRQHandler+0xe1a>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a38      	ldr	r2, [pc, #224]	@ (8002c48 <HAL_DMA_IRQHandler+0xe9c>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d02c      	beq.n	8002bc6 <HAL_DMA_IRQHandler+0xe1a>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a36      	ldr	r2, [pc, #216]	@ (8002c4c <HAL_DMA_IRQHandler+0xea0>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d027      	beq.n	8002bc6 <HAL_DMA_IRQHandler+0xe1a>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a35      	ldr	r2, [pc, #212]	@ (8002c50 <HAL_DMA_IRQHandler+0xea4>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d022      	beq.n	8002bc6 <HAL_DMA_IRQHandler+0xe1a>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a33      	ldr	r2, [pc, #204]	@ (8002c54 <HAL_DMA_IRQHandler+0xea8>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d01d      	beq.n	8002bc6 <HAL_DMA_IRQHandler+0xe1a>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a32      	ldr	r2, [pc, #200]	@ (8002c58 <HAL_DMA_IRQHandler+0xeac>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d018      	beq.n	8002bc6 <HAL_DMA_IRQHandler+0xe1a>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a30      	ldr	r2, [pc, #192]	@ (8002c5c <HAL_DMA_IRQHandler+0xeb0>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d013      	beq.n	8002bc6 <HAL_DMA_IRQHandler+0xe1a>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a2f      	ldr	r2, [pc, #188]	@ (8002c60 <HAL_DMA_IRQHandler+0xeb4>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d00e      	beq.n	8002bc6 <HAL_DMA_IRQHandler+0xe1a>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a2d      	ldr	r2, [pc, #180]	@ (8002c64 <HAL_DMA_IRQHandler+0xeb8>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d009      	beq.n	8002bc6 <HAL_DMA_IRQHandler+0xe1a>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a2c      	ldr	r2, [pc, #176]	@ (8002c68 <HAL_DMA_IRQHandler+0xebc>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d004      	beq.n	8002bc6 <HAL_DMA_IRQHandler+0xe1a>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a2a      	ldr	r2, [pc, #168]	@ (8002c6c <HAL_DMA_IRQHandler+0xec0>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d108      	bne.n	8002bd8 <HAL_DMA_IRQHandler+0xe2c>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f022 021c 	bic.w	r2, r2, #28
 8002bd4:	601a      	str	r2, [r3, #0]
 8002bd6:	e007      	b.n	8002be8 <HAL_DMA_IRQHandler+0xe3c>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f022 020e 	bic.w	r2, r2, #14
 8002be6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bec:	f003 031f 	and.w	r3, r3, #31
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	409a      	lsls	r2, r3
 8002bf4:	69fb      	ldr	r3, [r7, #28]
 8002bf6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2201      	movs	r2, #1
 8002c02:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d009      	beq.n	8002c2a <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	4798      	blx	r3
 8002c1e:	e004      	b.n	8002c2a <HAL_DMA_IRQHandler+0xe7e>
          return;
 8002c20:	bf00      	nop
 8002c22:	e002      	b.n	8002c2a <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002c24:	bf00      	nop
 8002c26:	e000      	b.n	8002c2a <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002c28:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8002c2a:	3728      	adds	r7, #40	@ 0x28
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	40020010 	.word	0x40020010
 8002c34:	40020028 	.word	0x40020028
 8002c38:	40020040 	.word	0x40020040
 8002c3c:	40020058 	.word	0x40020058
 8002c40:	40020070 	.word	0x40020070
 8002c44:	40020088 	.word	0x40020088
 8002c48:	400200a0 	.word	0x400200a0
 8002c4c:	400200b8 	.word	0x400200b8
 8002c50:	40020410 	.word	0x40020410
 8002c54:	40020428 	.word	0x40020428
 8002c58:	40020440 	.word	0x40020440
 8002c5c:	40020458 	.word	0x40020458
 8002c60:	40020470 	.word	0x40020470
 8002c64:	40020488 	.word	0x40020488
 8002c68:	400204a0 	.word	0x400204a0
 8002c6c:	400204b8 	.word	0x400204b8

08002c70 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b083      	sub	sp, #12
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002c7e:	b2db      	uxtb	r3, r3
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	370c      	adds	r7, #12
 8002c84:	46bd      	mov	sp, r7
 8002c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8a:	4770      	bx	lr

08002c8c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b085      	sub	sp, #20
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a42      	ldr	r2, [pc, #264]	@ (8002da4 <DMA_CalcBaseAndBitshift+0x118>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d04a      	beq.n	8002d34 <DMA_CalcBaseAndBitshift+0xa8>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a41      	ldr	r2, [pc, #260]	@ (8002da8 <DMA_CalcBaseAndBitshift+0x11c>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d045      	beq.n	8002d34 <DMA_CalcBaseAndBitshift+0xa8>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a3f      	ldr	r2, [pc, #252]	@ (8002dac <DMA_CalcBaseAndBitshift+0x120>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d040      	beq.n	8002d34 <DMA_CalcBaseAndBitshift+0xa8>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a3e      	ldr	r2, [pc, #248]	@ (8002db0 <DMA_CalcBaseAndBitshift+0x124>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d03b      	beq.n	8002d34 <DMA_CalcBaseAndBitshift+0xa8>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a3c      	ldr	r2, [pc, #240]	@ (8002db4 <DMA_CalcBaseAndBitshift+0x128>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d036      	beq.n	8002d34 <DMA_CalcBaseAndBitshift+0xa8>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a3b      	ldr	r2, [pc, #236]	@ (8002db8 <DMA_CalcBaseAndBitshift+0x12c>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d031      	beq.n	8002d34 <DMA_CalcBaseAndBitshift+0xa8>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a39      	ldr	r2, [pc, #228]	@ (8002dbc <DMA_CalcBaseAndBitshift+0x130>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d02c      	beq.n	8002d34 <DMA_CalcBaseAndBitshift+0xa8>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a38      	ldr	r2, [pc, #224]	@ (8002dc0 <DMA_CalcBaseAndBitshift+0x134>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d027      	beq.n	8002d34 <DMA_CalcBaseAndBitshift+0xa8>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a36      	ldr	r2, [pc, #216]	@ (8002dc4 <DMA_CalcBaseAndBitshift+0x138>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d022      	beq.n	8002d34 <DMA_CalcBaseAndBitshift+0xa8>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a35      	ldr	r2, [pc, #212]	@ (8002dc8 <DMA_CalcBaseAndBitshift+0x13c>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d01d      	beq.n	8002d34 <DMA_CalcBaseAndBitshift+0xa8>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a33      	ldr	r2, [pc, #204]	@ (8002dcc <DMA_CalcBaseAndBitshift+0x140>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d018      	beq.n	8002d34 <DMA_CalcBaseAndBitshift+0xa8>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a32      	ldr	r2, [pc, #200]	@ (8002dd0 <DMA_CalcBaseAndBitshift+0x144>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d013      	beq.n	8002d34 <DMA_CalcBaseAndBitshift+0xa8>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a30      	ldr	r2, [pc, #192]	@ (8002dd4 <DMA_CalcBaseAndBitshift+0x148>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d00e      	beq.n	8002d34 <DMA_CalcBaseAndBitshift+0xa8>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a2f      	ldr	r2, [pc, #188]	@ (8002dd8 <DMA_CalcBaseAndBitshift+0x14c>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d009      	beq.n	8002d34 <DMA_CalcBaseAndBitshift+0xa8>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a2d      	ldr	r2, [pc, #180]	@ (8002ddc <DMA_CalcBaseAndBitshift+0x150>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d004      	beq.n	8002d34 <DMA_CalcBaseAndBitshift+0xa8>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a2c      	ldr	r2, [pc, #176]	@ (8002de0 <DMA_CalcBaseAndBitshift+0x154>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d101      	bne.n	8002d38 <DMA_CalcBaseAndBitshift+0xac>
 8002d34:	2301      	movs	r3, #1
 8002d36:	e000      	b.n	8002d3a <DMA_CalcBaseAndBitshift+0xae>
 8002d38:	2300      	movs	r3, #0
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d024      	beq.n	8002d88 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	3b10      	subs	r3, #16
 8002d46:	4a27      	ldr	r2, [pc, #156]	@ (8002de4 <DMA_CalcBaseAndBitshift+0x158>)
 8002d48:	fba2 2303 	umull	r2, r3, r2, r3
 8002d4c:	091b      	lsrs	r3, r3, #4
 8002d4e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	f003 0307 	and.w	r3, r3, #7
 8002d56:	4a24      	ldr	r2, [pc, #144]	@ (8002de8 <DMA_CalcBaseAndBitshift+0x15c>)
 8002d58:	5cd3      	ldrb	r3, [r2, r3]
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	2b03      	cmp	r3, #3
 8002d64:	d908      	bls.n	8002d78 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	461a      	mov	r2, r3
 8002d6c:	4b1f      	ldr	r3, [pc, #124]	@ (8002dec <DMA_CalcBaseAndBitshift+0x160>)
 8002d6e:	4013      	ands	r3, r2
 8002d70:	1d1a      	adds	r2, r3, #4
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	659a      	str	r2, [r3, #88]	@ 0x58
 8002d76:	e00d      	b.n	8002d94 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	461a      	mov	r2, r3
 8002d7e:	4b1b      	ldr	r3, [pc, #108]	@ (8002dec <DMA_CalcBaseAndBitshift+0x160>)
 8002d80:	4013      	ands	r3, r2
 8002d82:	687a      	ldr	r2, [r7, #4]
 8002d84:	6593      	str	r3, [r2, #88]	@ 0x58
 8002d86:	e005      	b.n	8002d94 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	3714      	adds	r7, #20
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da2:	4770      	bx	lr
 8002da4:	40020010 	.word	0x40020010
 8002da8:	40020028 	.word	0x40020028
 8002dac:	40020040 	.word	0x40020040
 8002db0:	40020058 	.word	0x40020058
 8002db4:	40020070 	.word	0x40020070
 8002db8:	40020088 	.word	0x40020088
 8002dbc:	400200a0 	.word	0x400200a0
 8002dc0:	400200b8 	.word	0x400200b8
 8002dc4:	40020410 	.word	0x40020410
 8002dc8:	40020428 	.word	0x40020428
 8002dcc:	40020440 	.word	0x40020440
 8002dd0:	40020458 	.word	0x40020458
 8002dd4:	40020470 	.word	0x40020470
 8002dd8:	40020488 	.word	0x40020488
 8002ddc:	400204a0 	.word	0x400204a0
 8002de0:	400204b8 	.word	0x400204b8
 8002de4:	aaaaaaab 	.word	0xaaaaaaab
 8002de8:	08009e94 	.word	0x08009e94
 8002dec:	fffffc00 	.word	0xfffffc00

08002df0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b085      	sub	sp, #20
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	699b      	ldr	r3, [r3, #24]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d120      	bne.n	8002e46 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e08:	2b03      	cmp	r3, #3
 8002e0a:	d858      	bhi.n	8002ebe <DMA_CheckFifoParam+0xce>
 8002e0c:	a201      	add	r2, pc, #4	@ (adr r2, 8002e14 <DMA_CheckFifoParam+0x24>)
 8002e0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e12:	bf00      	nop
 8002e14:	08002e25 	.word	0x08002e25
 8002e18:	08002e37 	.word	0x08002e37
 8002e1c:	08002e25 	.word	0x08002e25
 8002e20:	08002ebf 	.word	0x08002ebf
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e28:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d048      	beq.n	8002ec2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002e34:	e045      	b.n	8002ec2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e3a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002e3e:	d142      	bne.n	8002ec6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002e44:	e03f      	b.n	8002ec6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	699b      	ldr	r3, [r3, #24]
 8002e4a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002e4e:	d123      	bne.n	8002e98 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e54:	2b03      	cmp	r3, #3
 8002e56:	d838      	bhi.n	8002eca <DMA_CheckFifoParam+0xda>
 8002e58:	a201      	add	r2, pc, #4	@ (adr r2, 8002e60 <DMA_CheckFifoParam+0x70>)
 8002e5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e5e:	bf00      	nop
 8002e60:	08002e71 	.word	0x08002e71
 8002e64:	08002e77 	.word	0x08002e77
 8002e68:	08002e71 	.word	0x08002e71
 8002e6c:	08002e89 	.word	0x08002e89
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	73fb      	strb	r3, [r7, #15]
        break;
 8002e74:	e030      	b.n	8002ed8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e7a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d025      	beq.n	8002ece <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002e86:	e022      	b.n	8002ece <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e8c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002e90:	d11f      	bne.n	8002ed2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002e96:	e01c      	b.n	8002ed2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e9c:	2b02      	cmp	r3, #2
 8002e9e:	d902      	bls.n	8002ea6 <DMA_CheckFifoParam+0xb6>
 8002ea0:	2b03      	cmp	r3, #3
 8002ea2:	d003      	beq.n	8002eac <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8002ea4:	e018      	b.n	8002ed8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	73fb      	strb	r3, [r7, #15]
        break;
 8002eaa:	e015      	b.n	8002ed8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eb0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d00e      	beq.n	8002ed6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	73fb      	strb	r3, [r7, #15]
    break;
 8002ebc:	e00b      	b.n	8002ed6 <DMA_CheckFifoParam+0xe6>
        break;
 8002ebe:	bf00      	nop
 8002ec0:	e00a      	b.n	8002ed8 <DMA_CheckFifoParam+0xe8>
        break;
 8002ec2:	bf00      	nop
 8002ec4:	e008      	b.n	8002ed8 <DMA_CheckFifoParam+0xe8>
        break;
 8002ec6:	bf00      	nop
 8002ec8:	e006      	b.n	8002ed8 <DMA_CheckFifoParam+0xe8>
        break;
 8002eca:	bf00      	nop
 8002ecc:	e004      	b.n	8002ed8 <DMA_CheckFifoParam+0xe8>
        break;
 8002ece:	bf00      	nop
 8002ed0:	e002      	b.n	8002ed8 <DMA_CheckFifoParam+0xe8>
        break;
 8002ed2:	bf00      	nop
 8002ed4:	e000      	b.n	8002ed8 <DMA_CheckFifoParam+0xe8>
    break;
 8002ed6:	bf00      	nop
    }
  }

  return status;
 8002ed8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3714      	adds	r7, #20
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee4:	4770      	bx	lr
 8002ee6:	bf00      	nop

08002ee8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b085      	sub	sp, #20
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a38      	ldr	r2, [pc, #224]	@ (8002fdc <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d022      	beq.n	8002f46 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a36      	ldr	r2, [pc, #216]	@ (8002fe0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d01d      	beq.n	8002f46 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a35      	ldr	r2, [pc, #212]	@ (8002fe4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d018      	beq.n	8002f46 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a33      	ldr	r2, [pc, #204]	@ (8002fe8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d013      	beq.n	8002f46 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a32      	ldr	r2, [pc, #200]	@ (8002fec <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d00e      	beq.n	8002f46 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a30      	ldr	r2, [pc, #192]	@ (8002ff0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d009      	beq.n	8002f46 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a2f      	ldr	r2, [pc, #188]	@ (8002ff4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d004      	beq.n	8002f46 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a2d      	ldr	r2, [pc, #180]	@ (8002ff8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d101      	bne.n	8002f4a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8002f46:	2301      	movs	r3, #1
 8002f48:	e000      	b.n	8002f4c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d01a      	beq.n	8002f86 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	3b08      	subs	r3, #8
 8002f58:	4a28      	ldr	r2, [pc, #160]	@ (8002ffc <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8002f5a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f5e:	091b      	lsrs	r3, r3, #4
 8002f60:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8002f62:	68fa      	ldr	r2, [r7, #12]
 8002f64:	4b26      	ldr	r3, [pc, #152]	@ (8003000 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8002f66:	4413      	add	r3, r2
 8002f68:	009b      	lsls	r3, r3, #2
 8002f6a:	461a      	mov	r2, r3
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	4a24      	ldr	r2, [pc, #144]	@ (8003004 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8002f74:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	f003 031f 	and.w	r3, r3, #31
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	409a      	lsls	r2, r3
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8002f84:	e024      	b.n	8002fd0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	b2db      	uxtb	r3, r3
 8002f8c:	3b10      	subs	r3, #16
 8002f8e:	4a1e      	ldr	r2, [pc, #120]	@ (8003008 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8002f90:	fba2 2303 	umull	r2, r3, r2, r3
 8002f94:	091b      	lsrs	r3, r3, #4
 8002f96:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	4a1c      	ldr	r2, [pc, #112]	@ (800300c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d806      	bhi.n	8002fae <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	4a1b      	ldr	r2, [pc, #108]	@ (8003010 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d902      	bls.n	8002fae <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	3308      	adds	r3, #8
 8002fac:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8002fae:	68fa      	ldr	r2, [r7, #12]
 8002fb0:	4b18      	ldr	r3, [pc, #96]	@ (8003014 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8002fb2:	4413      	add	r3, r2
 8002fb4:	009b      	lsls	r3, r3, #2
 8002fb6:	461a      	mov	r2, r3
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	4a16      	ldr	r2, [pc, #88]	@ (8003018 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8002fc0:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	f003 031f 	and.w	r3, r3, #31
 8002fc8:	2201      	movs	r2, #1
 8002fca:	409a      	lsls	r2, r3
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8002fd0:	bf00      	nop
 8002fd2:	3714      	adds	r7, #20
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr
 8002fdc:	58025408 	.word	0x58025408
 8002fe0:	5802541c 	.word	0x5802541c
 8002fe4:	58025430 	.word	0x58025430
 8002fe8:	58025444 	.word	0x58025444
 8002fec:	58025458 	.word	0x58025458
 8002ff0:	5802546c 	.word	0x5802546c
 8002ff4:	58025480 	.word	0x58025480
 8002ff8:	58025494 	.word	0x58025494
 8002ffc:	cccccccd 	.word	0xcccccccd
 8003000:	16009600 	.word	0x16009600
 8003004:	58025880 	.word	0x58025880
 8003008:	aaaaaaab 	.word	0xaaaaaaab
 800300c:	400204b8 	.word	0x400204b8
 8003010:	4002040f 	.word	0x4002040f
 8003014:	10008200 	.word	0x10008200
 8003018:	40020880 	.word	0x40020880

0800301c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800301c:	b480      	push	{r7}
 800301e:	b085      	sub	sp, #20
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	b2db      	uxtb	r3, r3
 800302a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d04a      	beq.n	80030c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2b08      	cmp	r3, #8
 8003036:	d847      	bhi.n	80030c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a25      	ldr	r2, [pc, #148]	@ (80030d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d022      	beq.n	8003088 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a24      	ldr	r2, [pc, #144]	@ (80030d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d01d      	beq.n	8003088 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a22      	ldr	r2, [pc, #136]	@ (80030dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d018      	beq.n	8003088 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a21      	ldr	r2, [pc, #132]	@ (80030e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d013      	beq.n	8003088 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a1f      	ldr	r2, [pc, #124]	@ (80030e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d00e      	beq.n	8003088 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a1e      	ldr	r2, [pc, #120]	@ (80030e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d009      	beq.n	8003088 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a1c      	ldr	r2, [pc, #112]	@ (80030ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d004      	beq.n	8003088 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a1b      	ldr	r2, [pc, #108]	@ (80030f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d101      	bne.n	800308c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8003088:	2301      	movs	r3, #1
 800308a:	e000      	b.n	800308e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800308c:	2300      	movs	r3, #0
 800308e:	2b00      	cmp	r3, #0
 8003090:	d00a      	beq.n	80030a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8003092:	68fa      	ldr	r2, [r7, #12]
 8003094:	4b17      	ldr	r3, [pc, #92]	@ (80030f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8003096:	4413      	add	r3, r2
 8003098:	009b      	lsls	r3, r3, #2
 800309a:	461a      	mov	r2, r3
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	4a15      	ldr	r2, [pc, #84]	@ (80030f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80030a4:	671a      	str	r2, [r3, #112]	@ 0x70
 80030a6:	e009      	b.n	80030bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80030a8:	68fa      	ldr	r2, [r7, #12]
 80030aa:	4b14      	ldr	r3, [pc, #80]	@ (80030fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80030ac:	4413      	add	r3, r2
 80030ae:	009b      	lsls	r3, r3, #2
 80030b0:	461a      	mov	r2, r3
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	4a11      	ldr	r2, [pc, #68]	@ (8003100 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80030ba:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	3b01      	subs	r3, #1
 80030c0:	2201      	movs	r2, #1
 80030c2:	409a      	lsls	r2, r3
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 80030c8:	bf00      	nop
 80030ca:	3714      	adds	r7, #20
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr
 80030d4:	58025408 	.word	0x58025408
 80030d8:	5802541c 	.word	0x5802541c
 80030dc:	58025430 	.word	0x58025430
 80030e0:	58025444 	.word	0x58025444
 80030e4:	58025458 	.word	0x58025458
 80030e8:	5802546c 	.word	0x5802546c
 80030ec:	58025480 	.word	0x58025480
 80030f0:	58025494 	.word	0x58025494
 80030f4:	1600963f 	.word	0x1600963f
 80030f8:	58025940 	.word	0x58025940
 80030fc:	1000823f 	.word	0x1000823f
 8003100:	40020940 	.word	0x40020940

08003104 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003104:	b480      	push	{r7}
 8003106:	b089      	sub	sp, #36	@ 0x24
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
 800310c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800310e:	2300      	movs	r3, #0
 8003110:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003112:	4b89      	ldr	r3, [pc, #548]	@ (8003338 <HAL_GPIO_Init+0x234>)
 8003114:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003116:	e194      	b.n	8003442 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	2101      	movs	r1, #1
 800311e:	69fb      	ldr	r3, [r7, #28]
 8003120:	fa01 f303 	lsl.w	r3, r1, r3
 8003124:	4013      	ands	r3, r2
 8003126:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	2b00      	cmp	r3, #0
 800312c:	f000 8186 	beq.w	800343c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	f003 0303 	and.w	r3, r3, #3
 8003138:	2b01      	cmp	r3, #1
 800313a:	d005      	beq.n	8003148 <HAL_GPIO_Init+0x44>
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	f003 0303 	and.w	r3, r3, #3
 8003144:	2b02      	cmp	r3, #2
 8003146:	d130      	bne.n	80031aa <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800314e:	69fb      	ldr	r3, [r7, #28]
 8003150:	005b      	lsls	r3, r3, #1
 8003152:	2203      	movs	r2, #3
 8003154:	fa02 f303 	lsl.w	r3, r2, r3
 8003158:	43db      	mvns	r3, r3
 800315a:	69ba      	ldr	r2, [r7, #24]
 800315c:	4013      	ands	r3, r2
 800315e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	68da      	ldr	r2, [r3, #12]
 8003164:	69fb      	ldr	r3, [r7, #28]
 8003166:	005b      	lsls	r3, r3, #1
 8003168:	fa02 f303 	lsl.w	r3, r2, r3
 800316c:	69ba      	ldr	r2, [r7, #24]
 800316e:	4313      	orrs	r3, r2
 8003170:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	69ba      	ldr	r2, [r7, #24]
 8003176:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800317e:	2201      	movs	r2, #1
 8003180:	69fb      	ldr	r3, [r7, #28]
 8003182:	fa02 f303 	lsl.w	r3, r2, r3
 8003186:	43db      	mvns	r3, r3
 8003188:	69ba      	ldr	r2, [r7, #24]
 800318a:	4013      	ands	r3, r2
 800318c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	091b      	lsrs	r3, r3, #4
 8003194:	f003 0201 	and.w	r2, r3, #1
 8003198:	69fb      	ldr	r3, [r7, #28]
 800319a:	fa02 f303 	lsl.w	r3, r2, r3
 800319e:	69ba      	ldr	r2, [r7, #24]
 80031a0:	4313      	orrs	r3, r2
 80031a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	69ba      	ldr	r2, [r7, #24]
 80031a8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	f003 0303 	and.w	r3, r3, #3
 80031b2:	2b03      	cmp	r3, #3
 80031b4:	d017      	beq.n	80031e6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	68db      	ldr	r3, [r3, #12]
 80031ba:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80031bc:	69fb      	ldr	r3, [r7, #28]
 80031be:	005b      	lsls	r3, r3, #1
 80031c0:	2203      	movs	r2, #3
 80031c2:	fa02 f303 	lsl.w	r3, r2, r3
 80031c6:	43db      	mvns	r3, r3
 80031c8:	69ba      	ldr	r2, [r7, #24]
 80031ca:	4013      	ands	r3, r2
 80031cc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	689a      	ldr	r2, [r3, #8]
 80031d2:	69fb      	ldr	r3, [r7, #28]
 80031d4:	005b      	lsls	r3, r3, #1
 80031d6:	fa02 f303 	lsl.w	r3, r2, r3
 80031da:	69ba      	ldr	r2, [r7, #24]
 80031dc:	4313      	orrs	r3, r2
 80031de:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	69ba      	ldr	r2, [r7, #24]
 80031e4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	f003 0303 	and.w	r3, r3, #3
 80031ee:	2b02      	cmp	r3, #2
 80031f0:	d123      	bne.n	800323a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80031f2:	69fb      	ldr	r3, [r7, #28]
 80031f4:	08da      	lsrs	r2, r3, #3
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	3208      	adds	r2, #8
 80031fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003200:	69fb      	ldr	r3, [r7, #28]
 8003202:	f003 0307 	and.w	r3, r3, #7
 8003206:	009b      	lsls	r3, r3, #2
 8003208:	220f      	movs	r2, #15
 800320a:	fa02 f303 	lsl.w	r3, r2, r3
 800320e:	43db      	mvns	r3, r3
 8003210:	69ba      	ldr	r2, [r7, #24]
 8003212:	4013      	ands	r3, r2
 8003214:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	691a      	ldr	r2, [r3, #16]
 800321a:	69fb      	ldr	r3, [r7, #28]
 800321c:	f003 0307 	and.w	r3, r3, #7
 8003220:	009b      	lsls	r3, r3, #2
 8003222:	fa02 f303 	lsl.w	r3, r2, r3
 8003226:	69ba      	ldr	r2, [r7, #24]
 8003228:	4313      	orrs	r3, r2
 800322a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800322c:	69fb      	ldr	r3, [r7, #28]
 800322e:	08da      	lsrs	r2, r3, #3
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	3208      	adds	r2, #8
 8003234:	69b9      	ldr	r1, [r7, #24]
 8003236:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003240:	69fb      	ldr	r3, [r7, #28]
 8003242:	005b      	lsls	r3, r3, #1
 8003244:	2203      	movs	r2, #3
 8003246:	fa02 f303 	lsl.w	r3, r2, r3
 800324a:	43db      	mvns	r3, r3
 800324c:	69ba      	ldr	r2, [r7, #24]
 800324e:	4013      	ands	r3, r2
 8003250:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	f003 0203 	and.w	r2, r3, #3
 800325a:	69fb      	ldr	r3, [r7, #28]
 800325c:	005b      	lsls	r3, r3, #1
 800325e:	fa02 f303 	lsl.w	r3, r2, r3
 8003262:	69ba      	ldr	r2, [r7, #24]
 8003264:	4313      	orrs	r3, r2
 8003266:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	69ba      	ldr	r2, [r7, #24]
 800326c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003276:	2b00      	cmp	r3, #0
 8003278:	f000 80e0 	beq.w	800343c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800327c:	4b2f      	ldr	r3, [pc, #188]	@ (800333c <HAL_GPIO_Init+0x238>)
 800327e:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8003282:	4a2e      	ldr	r2, [pc, #184]	@ (800333c <HAL_GPIO_Init+0x238>)
 8003284:	f043 0302 	orr.w	r3, r3, #2
 8003288:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 800328c:	4b2b      	ldr	r3, [pc, #172]	@ (800333c <HAL_GPIO_Init+0x238>)
 800328e:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8003292:	f003 0302 	and.w	r3, r3, #2
 8003296:	60fb      	str	r3, [r7, #12]
 8003298:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800329a:	4a29      	ldr	r2, [pc, #164]	@ (8003340 <HAL_GPIO_Init+0x23c>)
 800329c:	69fb      	ldr	r3, [r7, #28]
 800329e:	089b      	lsrs	r3, r3, #2
 80032a0:	3302      	adds	r3, #2
 80032a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80032a8:	69fb      	ldr	r3, [r7, #28]
 80032aa:	f003 0303 	and.w	r3, r3, #3
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	220f      	movs	r2, #15
 80032b2:	fa02 f303 	lsl.w	r3, r2, r3
 80032b6:	43db      	mvns	r3, r3
 80032b8:	69ba      	ldr	r2, [r7, #24]
 80032ba:	4013      	ands	r3, r2
 80032bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	4a20      	ldr	r2, [pc, #128]	@ (8003344 <HAL_GPIO_Init+0x240>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d052      	beq.n	800336c <HAL_GPIO_Init+0x268>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	4a1f      	ldr	r2, [pc, #124]	@ (8003348 <HAL_GPIO_Init+0x244>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d031      	beq.n	8003332 <HAL_GPIO_Init+0x22e>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	4a1e      	ldr	r2, [pc, #120]	@ (800334c <HAL_GPIO_Init+0x248>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d02b      	beq.n	800332e <HAL_GPIO_Init+0x22a>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	4a1d      	ldr	r2, [pc, #116]	@ (8003350 <HAL_GPIO_Init+0x24c>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d025      	beq.n	800332a <HAL_GPIO_Init+0x226>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	4a1c      	ldr	r2, [pc, #112]	@ (8003354 <HAL_GPIO_Init+0x250>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d01f      	beq.n	8003326 <HAL_GPIO_Init+0x222>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	4a1b      	ldr	r2, [pc, #108]	@ (8003358 <HAL_GPIO_Init+0x254>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d019      	beq.n	8003322 <HAL_GPIO_Init+0x21e>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	4a1a      	ldr	r2, [pc, #104]	@ (800335c <HAL_GPIO_Init+0x258>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d013      	beq.n	800331e <HAL_GPIO_Init+0x21a>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	4a19      	ldr	r2, [pc, #100]	@ (8003360 <HAL_GPIO_Init+0x25c>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d00d      	beq.n	800331a <HAL_GPIO_Init+0x216>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	4a18      	ldr	r2, [pc, #96]	@ (8003364 <HAL_GPIO_Init+0x260>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d007      	beq.n	8003316 <HAL_GPIO_Init+0x212>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	4a17      	ldr	r2, [pc, #92]	@ (8003368 <HAL_GPIO_Init+0x264>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d101      	bne.n	8003312 <HAL_GPIO_Init+0x20e>
 800330e:	2309      	movs	r3, #9
 8003310:	e02d      	b.n	800336e <HAL_GPIO_Init+0x26a>
 8003312:	230a      	movs	r3, #10
 8003314:	e02b      	b.n	800336e <HAL_GPIO_Init+0x26a>
 8003316:	2308      	movs	r3, #8
 8003318:	e029      	b.n	800336e <HAL_GPIO_Init+0x26a>
 800331a:	2307      	movs	r3, #7
 800331c:	e027      	b.n	800336e <HAL_GPIO_Init+0x26a>
 800331e:	2306      	movs	r3, #6
 8003320:	e025      	b.n	800336e <HAL_GPIO_Init+0x26a>
 8003322:	2305      	movs	r3, #5
 8003324:	e023      	b.n	800336e <HAL_GPIO_Init+0x26a>
 8003326:	2304      	movs	r3, #4
 8003328:	e021      	b.n	800336e <HAL_GPIO_Init+0x26a>
 800332a:	2303      	movs	r3, #3
 800332c:	e01f      	b.n	800336e <HAL_GPIO_Init+0x26a>
 800332e:	2302      	movs	r3, #2
 8003330:	e01d      	b.n	800336e <HAL_GPIO_Init+0x26a>
 8003332:	2301      	movs	r3, #1
 8003334:	e01b      	b.n	800336e <HAL_GPIO_Init+0x26a>
 8003336:	bf00      	nop
 8003338:	58000080 	.word	0x58000080
 800333c:	58024400 	.word	0x58024400
 8003340:	58000400 	.word	0x58000400
 8003344:	58020000 	.word	0x58020000
 8003348:	58020400 	.word	0x58020400
 800334c:	58020800 	.word	0x58020800
 8003350:	58020c00 	.word	0x58020c00
 8003354:	58021000 	.word	0x58021000
 8003358:	58021400 	.word	0x58021400
 800335c:	58021800 	.word	0x58021800
 8003360:	58021c00 	.word	0x58021c00
 8003364:	58022000 	.word	0x58022000
 8003368:	58022400 	.word	0x58022400
 800336c:	2300      	movs	r3, #0
 800336e:	69fa      	ldr	r2, [r7, #28]
 8003370:	f002 0203 	and.w	r2, r2, #3
 8003374:	0092      	lsls	r2, r2, #2
 8003376:	4093      	lsls	r3, r2
 8003378:	69ba      	ldr	r2, [r7, #24]
 800337a:	4313      	orrs	r3, r2
 800337c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800337e:	4938      	ldr	r1, [pc, #224]	@ (8003460 <HAL_GPIO_Init+0x35c>)
 8003380:	69fb      	ldr	r3, [r7, #28]
 8003382:	089b      	lsrs	r3, r3, #2
 8003384:	3302      	adds	r3, #2
 8003386:	69ba      	ldr	r2, [r7, #24]
 8003388:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800338c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	43db      	mvns	r3, r3
 8003398:	69ba      	ldr	r2, [r7, #24]
 800339a:	4013      	ands	r3, r2
 800339c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d003      	beq.n	80033b2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80033aa:	69ba      	ldr	r2, [r7, #24]
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	4313      	orrs	r3, r2
 80033b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80033b2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80033b6:	69bb      	ldr	r3, [r7, #24]
 80033b8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80033ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	43db      	mvns	r3, r3
 80033c6:	69ba      	ldr	r2, [r7, #24]
 80033c8:	4013      	ands	r3, r2
 80033ca:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d003      	beq.n	80033e0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80033d8:	69ba      	ldr	r2, [r7, #24]
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	4313      	orrs	r3, r2
 80033de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80033e0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80033e4:	69bb      	ldr	r3, [r7, #24]
 80033e6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	43db      	mvns	r3, r3
 80033f2:	69ba      	ldr	r2, [r7, #24]
 80033f4:	4013      	ands	r3, r2
 80033f6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003400:	2b00      	cmp	r3, #0
 8003402:	d003      	beq.n	800340c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003404:	69ba      	ldr	r2, [r7, #24]
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	4313      	orrs	r3, r2
 800340a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	69ba      	ldr	r2, [r7, #24]
 8003410:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	43db      	mvns	r3, r3
 800341c:	69ba      	ldr	r2, [r7, #24]
 800341e:	4013      	ands	r3, r2
 8003420:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800342a:	2b00      	cmp	r3, #0
 800342c:	d003      	beq.n	8003436 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800342e:	69ba      	ldr	r2, [r7, #24]
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	4313      	orrs	r3, r2
 8003434:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	69ba      	ldr	r2, [r7, #24]
 800343a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800343c:	69fb      	ldr	r3, [r7, #28]
 800343e:	3301      	adds	r3, #1
 8003440:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	69fb      	ldr	r3, [r7, #28]
 8003448:	fa22 f303 	lsr.w	r3, r2, r3
 800344c:	2b00      	cmp	r3, #0
 800344e:	f47f ae63 	bne.w	8003118 <HAL_GPIO_Init+0x14>
  }
}
 8003452:	bf00      	nop
 8003454:	bf00      	nop
 8003456:	3724      	adds	r7, #36	@ 0x24
 8003458:	46bd      	mov	sp, r7
 800345a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345e:	4770      	bx	lr
 8003460:	58000400 	.word	0x58000400

08003464 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b082      	sub	sp, #8
 8003468:	af00      	add	r7, sp, #0
 800346a:	4603      	mov	r3, r0
 800346c:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 800346e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003472:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003476:	88fb      	ldrh	r3, [r7, #6]
 8003478:	4013      	ands	r3, r2
 800347a:	2b00      	cmp	r3, #0
 800347c:	d008      	beq.n	8003490 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800347e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003482:	88fb      	ldrh	r3, [r7, #6]
 8003484:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003488:	88fb      	ldrh	r3, [r7, #6]
 800348a:	4618      	mov	r0, r3
 800348c:	f000 f804 	bl	8003498 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8003490:	bf00      	nop
 8003492:	3708      	adds	r7, #8
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}

08003498 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003498:	b480      	push	{r7}
 800349a:	b083      	sub	sp, #12
 800349c:	af00      	add	r7, sp, #0
 800349e:	4603      	mov	r3, r0
 80034a0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80034a2:	bf00      	nop
 80034a4:	370c      	adds	r7, #12
 80034a6:	46bd      	mov	sp, r7
 80034a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ac:	4770      	bx	lr
	...

080034b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b082      	sub	sp, #8
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d101      	bne.n	80034c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e08b      	b.n	80035da <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d106      	bne.n	80034dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2200      	movs	r2, #0
 80034d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f7fd f930 	bl	800073c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2224      	movs	r2, #36	@ 0x24
 80034e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f022 0201 	bic.w	r2, r2, #1
 80034f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	685a      	ldr	r2, [r3, #4]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003500:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	689a      	ldr	r2, [r3, #8]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003510:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	68db      	ldr	r3, [r3, #12]
 8003516:	2b01      	cmp	r3, #1
 8003518:	d107      	bne.n	800352a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	689a      	ldr	r2, [r3, #8]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003526:	609a      	str	r2, [r3, #8]
 8003528:	e006      	b.n	8003538 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	689a      	ldr	r2, [r3, #8]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003536:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	68db      	ldr	r3, [r3, #12]
 800353c:	2b02      	cmp	r3, #2
 800353e:	d108      	bne.n	8003552 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	685a      	ldr	r2, [r3, #4]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800354e:	605a      	str	r2, [r3, #4]
 8003550:	e007      	b.n	8003562 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	685a      	ldr	r2, [r3, #4]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003560:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	6859      	ldr	r1, [r3, #4]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	4b1d      	ldr	r3, [pc, #116]	@ (80035e4 <HAL_I2C_Init+0x134>)
 800356e:	430b      	orrs	r3, r1
 8003570:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	68da      	ldr	r2, [r3, #12]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003580:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	691a      	ldr	r2, [r3, #16]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	695b      	ldr	r3, [r3, #20]
 800358a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	699b      	ldr	r3, [r3, #24]
 8003592:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	430a      	orrs	r2, r1
 800359a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	69d9      	ldr	r1, [r3, #28]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6a1a      	ldr	r2, [r3, #32]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	430a      	orrs	r2, r1
 80035aa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f042 0201 	orr.w	r2, r2, #1
 80035ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2200      	movs	r2, #0
 80035c0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2220      	movs	r2, #32
 80035c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2200      	movs	r2, #0
 80035ce:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2200      	movs	r2, #0
 80035d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80035d8:	2300      	movs	r3, #0
}
 80035da:	4618      	mov	r0, r3
 80035dc:	3708      	adds	r7, #8
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}
 80035e2:	bf00      	nop
 80035e4:	02008000 	.word	0x02008000

080035e8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b088      	sub	sp, #32
 80035ec:	af02      	add	r7, sp, #8
 80035ee:	60f8      	str	r0, [r7, #12]
 80035f0:	607a      	str	r2, [r7, #4]
 80035f2:	461a      	mov	r2, r3
 80035f4:	460b      	mov	r3, r1
 80035f6:	817b      	strh	r3, [r7, #10]
 80035f8:	4613      	mov	r3, r2
 80035fa:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003602:	b2db      	uxtb	r3, r3
 8003604:	2b20      	cmp	r3, #32
 8003606:	f040 80fd 	bne.w	8003804 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003610:	2b01      	cmp	r3, #1
 8003612:	d101      	bne.n	8003618 <HAL_I2C_Master_Transmit+0x30>
 8003614:	2302      	movs	r3, #2
 8003616:	e0f6      	b.n	8003806 <HAL_I2C_Master_Transmit+0x21e>
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2201      	movs	r2, #1
 800361c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003620:	f7fd fd04 	bl	800102c <HAL_GetTick>
 8003624:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	9300      	str	r3, [sp, #0]
 800362a:	2319      	movs	r3, #25
 800362c:	2201      	movs	r2, #1
 800362e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003632:	68f8      	ldr	r0, [r7, #12]
 8003634:	f000 ff8d 	bl	8004552 <I2C_WaitOnFlagUntilTimeout>
 8003638:	4603      	mov	r3, r0
 800363a:	2b00      	cmp	r3, #0
 800363c:	d001      	beq.n	8003642 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	e0e1      	b.n	8003806 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2221      	movs	r2, #33	@ 0x21
 8003646:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2210      	movs	r2, #16
 800364e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2200      	movs	r2, #0
 8003656:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	687a      	ldr	r2, [r7, #4]
 800365c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	893a      	ldrh	r2, [r7, #8]
 8003662:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2200      	movs	r2, #0
 8003668:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800366e:	b29b      	uxth	r3, r3
 8003670:	2bff      	cmp	r3, #255	@ 0xff
 8003672:	d906      	bls.n	8003682 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	22ff      	movs	r2, #255	@ 0xff
 8003678:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800367a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800367e:	617b      	str	r3, [r7, #20]
 8003680:	e007      	b.n	8003692 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003686:	b29a      	uxth	r2, r3
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800368c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003690:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003696:	2b00      	cmp	r3, #0
 8003698:	d024      	beq.n	80036e4 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800369e:	781a      	ldrb	r2, [r3, #0]
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036aa:	1c5a      	adds	r2, r3, #1
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036b4:	b29b      	uxth	r3, r3
 80036b6:	3b01      	subs	r3, #1
 80036b8:	b29a      	uxth	r2, r3
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036c2:	3b01      	subs	r3, #1
 80036c4:	b29a      	uxth	r2, r3
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036ce:	b2db      	uxtb	r3, r3
 80036d0:	3301      	adds	r3, #1
 80036d2:	b2da      	uxtb	r2, r3
 80036d4:	8979      	ldrh	r1, [r7, #10]
 80036d6:	4b4e      	ldr	r3, [pc, #312]	@ (8003810 <HAL_I2C_Master_Transmit+0x228>)
 80036d8:	9300      	str	r3, [sp, #0]
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	68f8      	ldr	r0, [r7, #12]
 80036de:	f001 f8fb 	bl	80048d8 <I2C_TransferConfig>
 80036e2:	e066      	b.n	80037b2 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036e8:	b2da      	uxtb	r2, r3
 80036ea:	8979      	ldrh	r1, [r7, #10]
 80036ec:	4b48      	ldr	r3, [pc, #288]	@ (8003810 <HAL_I2C_Master_Transmit+0x228>)
 80036ee:	9300      	str	r3, [sp, #0]
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	68f8      	ldr	r0, [r7, #12]
 80036f4:	f001 f8f0 	bl	80048d8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80036f8:	e05b      	b.n	80037b2 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036fa:	693a      	ldr	r2, [r7, #16]
 80036fc:	6a39      	ldr	r1, [r7, #32]
 80036fe:	68f8      	ldr	r0, [r7, #12]
 8003700:	f000 ff80 	bl	8004604 <I2C_WaitOnTXISFlagUntilTimeout>
 8003704:	4603      	mov	r3, r0
 8003706:	2b00      	cmp	r3, #0
 8003708:	d001      	beq.n	800370e <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	e07b      	b.n	8003806 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003712:	781a      	ldrb	r2, [r3, #0]
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800371e:	1c5a      	adds	r2, r3, #1
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003728:	b29b      	uxth	r3, r3
 800372a:	3b01      	subs	r3, #1
 800372c:	b29a      	uxth	r2, r3
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003736:	3b01      	subs	r3, #1
 8003738:	b29a      	uxth	r2, r3
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003742:	b29b      	uxth	r3, r3
 8003744:	2b00      	cmp	r3, #0
 8003746:	d034      	beq.n	80037b2 <HAL_I2C_Master_Transmit+0x1ca>
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800374c:	2b00      	cmp	r3, #0
 800374e:	d130      	bne.n	80037b2 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	9300      	str	r3, [sp, #0]
 8003754:	6a3b      	ldr	r3, [r7, #32]
 8003756:	2200      	movs	r2, #0
 8003758:	2180      	movs	r1, #128	@ 0x80
 800375a:	68f8      	ldr	r0, [r7, #12]
 800375c:	f000 fef9 	bl	8004552 <I2C_WaitOnFlagUntilTimeout>
 8003760:	4603      	mov	r3, r0
 8003762:	2b00      	cmp	r3, #0
 8003764:	d001      	beq.n	800376a <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	e04d      	b.n	8003806 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800376e:	b29b      	uxth	r3, r3
 8003770:	2bff      	cmp	r3, #255	@ 0xff
 8003772:	d90e      	bls.n	8003792 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	22ff      	movs	r2, #255	@ 0xff
 8003778:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800377e:	b2da      	uxtb	r2, r3
 8003780:	8979      	ldrh	r1, [r7, #10]
 8003782:	2300      	movs	r3, #0
 8003784:	9300      	str	r3, [sp, #0]
 8003786:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800378a:	68f8      	ldr	r0, [r7, #12]
 800378c:	f001 f8a4 	bl	80048d8 <I2C_TransferConfig>
 8003790:	e00f      	b.n	80037b2 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003796:	b29a      	uxth	r2, r3
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037a0:	b2da      	uxtb	r2, r3
 80037a2:	8979      	ldrh	r1, [r7, #10]
 80037a4:	2300      	movs	r3, #0
 80037a6:	9300      	str	r3, [sp, #0]
 80037a8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80037ac:	68f8      	ldr	r0, [r7, #12]
 80037ae:	f001 f893 	bl	80048d8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037b6:	b29b      	uxth	r3, r3
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d19e      	bne.n	80036fa <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037bc:	693a      	ldr	r2, [r7, #16]
 80037be:	6a39      	ldr	r1, [r7, #32]
 80037c0:	68f8      	ldr	r0, [r7, #12]
 80037c2:	f000 ff66 	bl	8004692 <I2C_WaitOnSTOPFlagUntilTimeout>
 80037c6:	4603      	mov	r3, r0
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d001      	beq.n	80037d0 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	e01a      	b.n	8003806 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	2220      	movs	r2, #32
 80037d6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	6859      	ldr	r1, [r3, #4]
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	4b0c      	ldr	r3, [pc, #48]	@ (8003814 <HAL_I2C_Master_Transmit+0x22c>)
 80037e4:	400b      	ands	r3, r1
 80037e6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2220      	movs	r2, #32
 80037ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2200      	movs	r2, #0
 80037f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2200      	movs	r2, #0
 80037fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003800:	2300      	movs	r3, #0
 8003802:	e000      	b.n	8003806 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8003804:	2302      	movs	r3, #2
  }
}
 8003806:	4618      	mov	r0, r3
 8003808:	3718      	adds	r7, #24
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}
 800380e:	bf00      	nop
 8003810:	80002000 	.word	0x80002000
 8003814:	fe00e800 	.word	0xfe00e800

08003818 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b084      	sub	sp, #16
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	699b      	ldr	r3, [r3, #24]
 8003826:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003834:	2b00      	cmp	r3, #0
 8003836:	d005      	beq.n	8003844 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800383c:	68ba      	ldr	r2, [r7, #8]
 800383e:	68f9      	ldr	r1, [r7, #12]
 8003840:	6878      	ldr	r0, [r7, #4]
 8003842:	4798      	blx	r3
  }
}
 8003844:	bf00      	nop
 8003846:	3710      	adds	r7, #16
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}

0800384c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b086      	sub	sp, #24
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	699b      	ldr	r3, [r3, #24]
 800385a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800386a:	2b00      	cmp	r3, #0
 800386c:	d00f      	beq.n	800388e <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003874:	2b00      	cmp	r3, #0
 8003876:	d00a      	beq.n	800388e <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800387c:	f043 0201 	orr.w	r2, r3, #1
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800388c:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003894:	2b00      	cmp	r3, #0
 8003896:	d00f      	beq.n	80038b8 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d00a      	beq.n	80038b8 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038a6:	f043 0208 	orr.w	r2, r3, #8
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80038b6:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d00f      	beq.n	80038e2 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d00a      	beq.n	80038e2 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038d0:	f043 0202 	orr.w	r2, r3, #2
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80038e0:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038e6:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	f003 030b 	and.w	r3, r3, #11
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d003      	beq.n	80038fa <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 80038f2:	68f9      	ldr	r1, [r7, #12]
 80038f4:	6878      	ldr	r0, [r7, #4]
 80038f6:	f000 fcd3 	bl	80042a0 <I2C_ITError>
  }
}
 80038fa:	bf00      	nop
 80038fc:	3718      	adds	r7, #24
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}

08003902 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003902:	b480      	push	{r7}
 8003904:	b083      	sub	sp, #12
 8003906:	af00      	add	r7, sp, #0
 8003908:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800390a:	bf00      	nop
 800390c:	370c      	adds	r7, #12
 800390e:	46bd      	mov	sp, r7
 8003910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003914:	4770      	bx	lr

08003916 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003916:	b480      	push	{r7}
 8003918:	b083      	sub	sp, #12
 800391a:	af00      	add	r7, sp, #0
 800391c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800391e:	bf00      	nop
 8003920:	370c      	adds	r7, #12
 8003922:	46bd      	mov	sp, r7
 8003924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003928:	4770      	bx	lr

0800392a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800392a:	b480      	push	{r7}
 800392c:	b083      	sub	sp, #12
 800392e:	af00      	add	r7, sp, #0
 8003930:	6078      	str	r0, [r7, #4]
 8003932:	460b      	mov	r3, r1
 8003934:	70fb      	strb	r3, [r7, #3]
 8003936:	4613      	mov	r3, r2
 8003938:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800393a:	bf00      	nop
 800393c:	370c      	adds	r7, #12
 800393e:	46bd      	mov	sp, r7
 8003940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003944:	4770      	bx	lr

08003946 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003946:	b480      	push	{r7}
 8003948:	b083      	sub	sp, #12
 800394a:	af00      	add	r7, sp, #0
 800394c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800394e:	bf00      	nop
 8003950:	370c      	adds	r7, #12
 8003952:	46bd      	mov	sp, r7
 8003954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003958:	4770      	bx	lr

0800395a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800395a:	b480      	push	{r7}
 800395c:	b083      	sub	sp, #12
 800395e:	af00      	add	r7, sp, #0
 8003960:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003962:	bf00      	nop
 8003964:	370c      	adds	r7, #12
 8003966:	46bd      	mov	sp, r7
 8003968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396c:	4770      	bx	lr

0800396e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800396e:	b480      	push	{r7}
 8003970:	b083      	sub	sp, #12
 8003972:	af00      	add	r7, sp, #0
 8003974:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003976:	bf00      	nop
 8003978:	370c      	adds	r7, #12
 800397a:	46bd      	mov	sp, r7
 800397c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003980:	4770      	bx	lr

08003982 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 8003982:	b480      	push	{r7}
 8003984:	b083      	sub	sp, #12
 8003986:	af00      	add	r7, sp, #0
 8003988:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003990:	b2db      	uxtb	r3, r3
}
 8003992:	4618      	mov	r0, r3
 8003994:	370c      	adds	r7, #12
 8003996:	46bd      	mov	sp, r7
 8003998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399c:	4770      	bx	lr

0800399e <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800399e:	b580      	push	{r7, lr}
 80039a0:	b086      	sub	sp, #24
 80039a2:	af00      	add	r7, sp, #0
 80039a4:	60f8      	str	r0, [r7, #12]
 80039a6:	60b9      	str	r1, [r7, #8]
 80039a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039ae:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80039ba:	2b01      	cmp	r3, #1
 80039bc:	d101      	bne.n	80039c2 <I2C_Slave_ISR_IT+0x24>
 80039be:	2302      	movs	r3, #2
 80039c0:	e0e2      	b.n	8003b88 <I2C_Slave_ISR_IT+0x1ea>
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	2201      	movs	r2, #1
 80039c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	f003 0320 	and.w	r3, r3, #32
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d009      	beq.n	80039e8 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d004      	beq.n	80039e8 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80039de:	6939      	ldr	r1, [r7, #16]
 80039e0:	68f8      	ldr	r0, [r7, #12]
 80039e2:	f000 f9b5 	bl	8003d50 <I2C_ITSlaveCplt>
 80039e6:	e0ca      	b.n	8003b7e <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	f003 0310 	and.w	r3, r3, #16
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d04b      	beq.n	8003a8a <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d046      	beq.n	8003a8a <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a00:	b29b      	uxth	r3, r3
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d128      	bne.n	8003a58 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	2b28      	cmp	r3, #40	@ 0x28
 8003a10:	d108      	bne.n	8003a24 <I2C_Slave_ISR_IT+0x86>
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003a18:	d104      	bne.n	8003a24 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003a1a:	6939      	ldr	r1, [r7, #16]
 8003a1c:	68f8      	ldr	r0, [r7, #12]
 8003a1e:	f000 fbeb 	bl	80041f8 <I2C_ITListenCplt>
 8003a22:	e031      	b.n	8003a88 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a2a:	b2db      	uxtb	r3, r3
 8003a2c:	2b29      	cmp	r3, #41	@ 0x29
 8003a2e:	d10e      	bne.n	8003a4e <I2C_Slave_ISR_IT+0xb0>
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003a36:	d00a      	beq.n	8003a4e <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	2210      	movs	r2, #16
 8003a3e:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003a40:	68f8      	ldr	r0, [r7, #12]
 8003a42:	f000 fd44 	bl	80044ce <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003a46:	68f8      	ldr	r0, [r7, #12]
 8003a48:	f000 f926 	bl	8003c98 <I2C_ITSlaveSeqCplt>
 8003a4c:	e01c      	b.n	8003a88 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	2210      	movs	r2, #16
 8003a54:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8003a56:	e08f      	b.n	8003b78 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	2210      	movs	r2, #16
 8003a5e:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a64:	f043 0204 	orr.w	r2, r3, #4
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d003      	beq.n	8003a7a <I2C_Slave_ISR_IT+0xdc>
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003a78:	d17e      	bne.n	8003b78 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a7e:	4619      	mov	r1, r3
 8003a80:	68f8      	ldr	r0, [r7, #12]
 8003a82:	f000 fc0d 	bl	80042a0 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003a86:	e077      	b.n	8003b78 <I2C_Slave_ISR_IT+0x1da>
 8003a88:	e076      	b.n	8003b78 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	f003 0304 	and.w	r3, r3, #4
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d02f      	beq.n	8003af4 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d02a      	beq.n	8003af4 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003aa2:	b29b      	uxth	r3, r3
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d018      	beq.n	8003ada <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ab2:	b2d2      	uxtb	r2, r2
 8003ab4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aba:	1c5a      	adds	r2, r3, #1
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ac4:	3b01      	subs	r3, #1
 8003ac6:	b29a      	uxth	r2, r3
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ad0:	b29b      	uxth	r3, r3
 8003ad2:	3b01      	subs	r3, #1
 8003ad4:	b29a      	uxth	r2, r3
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ade:	b29b      	uxth	r3, r3
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d14b      	bne.n	8003b7c <I2C_Slave_ISR_IT+0x1de>
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003aea:	d047      	beq.n	8003b7c <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8003aec:	68f8      	ldr	r0, [r7, #12]
 8003aee:	f000 f8d3 	bl	8003c98 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8003af2:	e043      	b.n	8003b7c <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	f003 0308 	and.w	r3, r3, #8
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d009      	beq.n	8003b12 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d004      	beq.n	8003b12 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8003b08:	6939      	ldr	r1, [r7, #16]
 8003b0a:	68f8      	ldr	r0, [r7, #12]
 8003b0c:	f000 f840 	bl	8003b90 <I2C_ITAddrCplt>
 8003b10:	e035      	b.n	8003b7e <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	f003 0302 	and.w	r3, r3, #2
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d030      	beq.n	8003b7e <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d02b      	beq.n	8003b7e <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b2a:	b29b      	uxth	r3, r3
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d018      	beq.n	8003b62 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b34:	781a      	ldrb	r2, [r3, #0]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b40:	1c5a      	adds	r2, r3, #1
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b4a:	b29b      	uxth	r3, r3
 8003b4c:	3b01      	subs	r3, #1
 8003b4e:	b29a      	uxth	r2, r3
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b58:	3b01      	subs	r3, #1
 8003b5a:	b29a      	uxth	r2, r3
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	851a      	strh	r2, [r3, #40]	@ 0x28
 8003b60:	e00d      	b.n	8003b7e <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003b68:	d002      	beq.n	8003b70 <I2C_Slave_ISR_IT+0x1d2>
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d106      	bne.n	8003b7e <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003b70:	68f8      	ldr	r0, [r7, #12]
 8003b72:	f000 f891 	bl	8003c98 <I2C_ITSlaveSeqCplt>
 8003b76:	e002      	b.n	8003b7e <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8003b78:	bf00      	nop
 8003b7a:	e000      	b.n	8003b7e <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 8003b7c:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2200      	movs	r2, #0
 8003b82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003b86:	2300      	movs	r3, #0
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	3718      	adds	r7, #24
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}

08003b90 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b084      	sub	sp, #16
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
 8003b98:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003ba6:	2b28      	cmp	r3, #40	@ 0x28
 8003ba8:	d16a      	bne.n	8003c80 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	699b      	ldr	r3, [r3, #24]
 8003bb0:	0c1b      	lsrs	r3, r3, #16
 8003bb2:	b2db      	uxtb	r3, r3
 8003bb4:	f003 0301 	and.w	r3, r3, #1
 8003bb8:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	699b      	ldr	r3, [r3, #24]
 8003bc0:	0c1b      	lsrs	r3, r3, #16
 8003bc2:	b29b      	uxth	r3, r3
 8003bc4:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8003bc8:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	b29b      	uxth	r3, r3
 8003bd2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003bd6:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	68db      	ldr	r3, [r3, #12]
 8003bde:	b29b      	uxth	r3, r3
 8003be0:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8003be4:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	68db      	ldr	r3, [r3, #12]
 8003bea:	2b02      	cmp	r3, #2
 8003bec:	d138      	bne.n	8003c60 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8003bee:	897b      	ldrh	r3, [r7, #10]
 8003bf0:	09db      	lsrs	r3, r3, #7
 8003bf2:	b29a      	uxth	r2, r3
 8003bf4:	89bb      	ldrh	r3, [r7, #12]
 8003bf6:	4053      	eors	r3, r2
 8003bf8:	b29b      	uxth	r3, r3
 8003bfa:	f003 0306 	and.w	r3, r3, #6
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d11c      	bne.n	8003c3c <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8003c02:	897b      	ldrh	r3, [r7, #10]
 8003c04:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c0a:	1c5a      	adds	r2, r3, #1
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c14:	2b02      	cmp	r3, #2
 8003c16:	d13b      	bne.n	8003c90 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	2208      	movs	r2, #8
 8003c24:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003c2e:	89ba      	ldrh	r2, [r7, #12]
 8003c30:	7bfb      	ldrb	r3, [r7, #15]
 8003c32:	4619      	mov	r1, r3
 8003c34:	6878      	ldr	r0, [r7, #4]
 8003c36:	f7ff fe78 	bl	800392a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003c3a:	e029      	b.n	8003c90 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8003c3c:	893b      	ldrh	r3, [r7, #8]
 8003c3e:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003c40:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003c44:	6878      	ldr	r0, [r7, #4]
 8003c46:	f000 fe79 	bl	800493c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003c52:	89ba      	ldrh	r2, [r7, #12]
 8003c54:	7bfb      	ldrb	r3, [r7, #15]
 8003c56:	4619      	mov	r1, r3
 8003c58:	6878      	ldr	r0, [r7, #4]
 8003c5a:	f7ff fe66 	bl	800392a <HAL_I2C_AddrCallback>
}
 8003c5e:	e017      	b.n	8003c90 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003c60:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003c64:	6878      	ldr	r0, [r7, #4]
 8003c66:	f000 fe69 	bl	800493c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003c72:	89ba      	ldrh	r2, [r7, #12]
 8003c74:	7bfb      	ldrb	r3, [r7, #15]
 8003c76:	4619      	mov	r1, r3
 8003c78:	6878      	ldr	r0, [r7, #4]
 8003c7a:	f7ff fe56 	bl	800392a <HAL_I2C_AddrCallback>
}
 8003c7e:	e007      	b.n	8003c90 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	2208      	movs	r2, #8
 8003c86:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8003c90:	bf00      	nop
 8003c92:	3710      	adds	r7, #16
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}

08003c98 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b084      	sub	sp, #16
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2200      	movs	r2, #0
 8003cac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d008      	beq.n	8003ccc <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003cc8:	601a      	str	r2, [r3, #0]
 8003cca:	e00c      	b.n	8003ce6 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d007      	beq.n	8003ce6 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003ce4:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	2b29      	cmp	r3, #41	@ 0x29
 8003cf0:	d112      	bne.n	8003d18 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2228      	movs	r2, #40	@ 0x28
 8003cf6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2221      	movs	r2, #33	@ 0x21
 8003cfe:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003d00:	2101      	movs	r1, #1
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	f000 fe1a 	bl	800493c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003d10:	6878      	ldr	r0, [r7, #4]
 8003d12:	f7ff fdf6 	bl	8003902 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003d16:	e017      	b.n	8003d48 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d1e:	b2db      	uxtb	r3, r3
 8003d20:	2b2a      	cmp	r3, #42	@ 0x2a
 8003d22:	d111      	bne.n	8003d48 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2228      	movs	r2, #40	@ 0x28
 8003d28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2222      	movs	r2, #34	@ 0x22
 8003d30:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003d32:	2102      	movs	r1, #2
 8003d34:	6878      	ldr	r0, [r7, #4]
 8003d36:	f000 fe01 	bl	800493c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	f7ff fde7 	bl	8003916 <HAL_I2C_SlaveRxCpltCallback>
}
 8003d48:	bf00      	nop
 8003d4a:	3710      	adds	r7, #16
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}

08003d50 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b086      	sub	sp, #24
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
 8003d58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d6a:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d72:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	2220      	movs	r2, #32
 8003d7a:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003d7c:	7afb      	ldrb	r3, [r7, #11]
 8003d7e:	2b21      	cmp	r3, #33	@ 0x21
 8003d80:	d002      	beq.n	8003d88 <I2C_ITSlaveCplt+0x38>
 8003d82:	7afb      	ldrb	r3, [r7, #11]
 8003d84:	2b29      	cmp	r3, #41	@ 0x29
 8003d86:	d108      	bne.n	8003d9a <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8003d88:	f248 0101 	movw	r1, #32769	@ 0x8001
 8003d8c:	6878      	ldr	r0, [r7, #4]
 8003d8e:	f000 fdd5 	bl	800493c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2221      	movs	r2, #33	@ 0x21
 8003d96:	631a      	str	r2, [r3, #48]	@ 0x30
 8003d98:	e019      	b.n	8003dce <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003d9a:	7afb      	ldrb	r3, [r7, #11]
 8003d9c:	2b22      	cmp	r3, #34	@ 0x22
 8003d9e:	d002      	beq.n	8003da6 <I2C_ITSlaveCplt+0x56>
 8003da0:	7afb      	ldrb	r3, [r7, #11]
 8003da2:	2b2a      	cmp	r3, #42	@ 0x2a
 8003da4:	d108      	bne.n	8003db8 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8003da6:	f248 0102 	movw	r1, #32770	@ 0x8002
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f000 fdc6 	bl	800493c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2222      	movs	r2, #34	@ 0x22
 8003db4:	631a      	str	r2, [r3, #48]	@ 0x30
 8003db6:	e00a      	b.n	8003dce <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8003db8:	7afb      	ldrb	r3, [r7, #11]
 8003dba:	2b28      	cmp	r3, #40	@ 0x28
 8003dbc:	d107      	bne.n	8003dce <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8003dbe:	f248 0103 	movw	r1, #32771	@ 0x8003
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	f000 fdba 	bl	800493c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	685a      	ldr	r2, [r3, #4]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003ddc:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	6859      	ldr	r1, [r3, #4]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	4b7f      	ldr	r3, [pc, #508]	@ (8003fe8 <I2C_ITSlaveCplt+0x298>)
 8003dea:	400b      	ands	r3, r1
 8003dec:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f000 fb6d 	bl	80044ce <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d07a      	beq.n	8003ef4 <I2C_ITSlaveCplt+0x1a4>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	681a      	ldr	r2, [r3, #0]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003e0c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	f000 8111 	beq.w	800403a <I2C_ITSlaveCplt+0x2ea>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a73      	ldr	r2, [pc, #460]	@ (8003fec <I2C_ITSlaveCplt+0x29c>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d059      	beq.n	8003ed8 <I2C_ITSlaveCplt+0x188>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a71      	ldr	r2, [pc, #452]	@ (8003ff0 <I2C_ITSlaveCplt+0x2a0>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d053      	beq.n	8003ed8 <I2C_ITSlaveCplt+0x188>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a6f      	ldr	r2, [pc, #444]	@ (8003ff4 <I2C_ITSlaveCplt+0x2a4>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d04d      	beq.n	8003ed8 <I2C_ITSlaveCplt+0x188>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a6d      	ldr	r2, [pc, #436]	@ (8003ff8 <I2C_ITSlaveCplt+0x2a8>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d047      	beq.n	8003ed8 <I2C_ITSlaveCplt+0x188>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a6b      	ldr	r2, [pc, #428]	@ (8003ffc <I2C_ITSlaveCplt+0x2ac>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d041      	beq.n	8003ed8 <I2C_ITSlaveCplt+0x188>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a69      	ldr	r2, [pc, #420]	@ (8004000 <I2C_ITSlaveCplt+0x2b0>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d03b      	beq.n	8003ed8 <I2C_ITSlaveCplt+0x188>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a67      	ldr	r2, [pc, #412]	@ (8004004 <I2C_ITSlaveCplt+0x2b4>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d035      	beq.n	8003ed8 <I2C_ITSlaveCplt+0x188>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a65      	ldr	r2, [pc, #404]	@ (8004008 <I2C_ITSlaveCplt+0x2b8>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d02f      	beq.n	8003ed8 <I2C_ITSlaveCplt+0x188>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a63      	ldr	r2, [pc, #396]	@ (800400c <I2C_ITSlaveCplt+0x2bc>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d029      	beq.n	8003ed8 <I2C_ITSlaveCplt+0x188>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a61      	ldr	r2, [pc, #388]	@ (8004010 <I2C_ITSlaveCplt+0x2c0>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d023      	beq.n	8003ed8 <I2C_ITSlaveCplt+0x188>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a5f      	ldr	r2, [pc, #380]	@ (8004014 <I2C_ITSlaveCplt+0x2c4>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d01d      	beq.n	8003ed8 <I2C_ITSlaveCplt+0x188>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a5d      	ldr	r2, [pc, #372]	@ (8004018 <I2C_ITSlaveCplt+0x2c8>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d017      	beq.n	8003ed8 <I2C_ITSlaveCplt+0x188>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a5b      	ldr	r2, [pc, #364]	@ (800401c <I2C_ITSlaveCplt+0x2cc>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d011      	beq.n	8003ed8 <I2C_ITSlaveCplt+0x188>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a59      	ldr	r2, [pc, #356]	@ (8004020 <I2C_ITSlaveCplt+0x2d0>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d00b      	beq.n	8003ed8 <I2C_ITSlaveCplt+0x188>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a57      	ldr	r2, [pc, #348]	@ (8004024 <I2C_ITSlaveCplt+0x2d4>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d005      	beq.n	8003ed8 <I2C_ITSlaveCplt+0x188>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a55      	ldr	r2, [pc, #340]	@ (8004028 <I2C_ITSlaveCplt+0x2d8>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d105      	bne.n	8003ee4 <I2C_ITSlaveCplt+0x194>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	b29b      	uxth	r3, r3
 8003ee2:	e004      	b.n	8003eee <I2C_ITSlaveCplt+0x19e>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	b29b      	uxth	r3, r3
 8003eee:	687a      	ldr	r2, [r7, #4]
 8003ef0:	8553      	strh	r3, [r2, #42]	@ 0x2a
 8003ef2:	e0a2      	b.n	800403a <I2C_ITSlaveCplt+0x2ea>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	f000 809d 	beq.w	800403a <I2C_ITSlaveCplt+0x2ea>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003f0e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	f000 8090 	beq.w	800403a <I2C_ITSlaveCplt+0x2ea>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a32      	ldr	r2, [pc, #200]	@ (8003fec <I2C_ITSlaveCplt+0x29c>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d059      	beq.n	8003fda <I2C_ITSlaveCplt+0x28a>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a30      	ldr	r2, [pc, #192]	@ (8003ff0 <I2C_ITSlaveCplt+0x2a0>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d053      	beq.n	8003fda <I2C_ITSlaveCplt+0x28a>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a2e      	ldr	r2, [pc, #184]	@ (8003ff4 <I2C_ITSlaveCplt+0x2a4>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d04d      	beq.n	8003fda <I2C_ITSlaveCplt+0x28a>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a2c      	ldr	r2, [pc, #176]	@ (8003ff8 <I2C_ITSlaveCplt+0x2a8>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d047      	beq.n	8003fda <I2C_ITSlaveCplt+0x28a>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a2a      	ldr	r2, [pc, #168]	@ (8003ffc <I2C_ITSlaveCplt+0x2ac>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d041      	beq.n	8003fda <I2C_ITSlaveCplt+0x28a>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a28      	ldr	r2, [pc, #160]	@ (8004000 <I2C_ITSlaveCplt+0x2b0>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d03b      	beq.n	8003fda <I2C_ITSlaveCplt+0x28a>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a26      	ldr	r2, [pc, #152]	@ (8004004 <I2C_ITSlaveCplt+0x2b4>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d035      	beq.n	8003fda <I2C_ITSlaveCplt+0x28a>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a24      	ldr	r2, [pc, #144]	@ (8004008 <I2C_ITSlaveCplt+0x2b8>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d02f      	beq.n	8003fda <I2C_ITSlaveCplt+0x28a>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a22      	ldr	r2, [pc, #136]	@ (800400c <I2C_ITSlaveCplt+0x2bc>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d029      	beq.n	8003fda <I2C_ITSlaveCplt+0x28a>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a20      	ldr	r2, [pc, #128]	@ (8004010 <I2C_ITSlaveCplt+0x2c0>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d023      	beq.n	8003fda <I2C_ITSlaveCplt+0x28a>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a1e      	ldr	r2, [pc, #120]	@ (8004014 <I2C_ITSlaveCplt+0x2c4>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d01d      	beq.n	8003fda <I2C_ITSlaveCplt+0x28a>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a1c      	ldr	r2, [pc, #112]	@ (8004018 <I2C_ITSlaveCplt+0x2c8>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d017      	beq.n	8003fda <I2C_ITSlaveCplt+0x28a>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a1a      	ldr	r2, [pc, #104]	@ (800401c <I2C_ITSlaveCplt+0x2cc>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d011      	beq.n	8003fda <I2C_ITSlaveCplt+0x28a>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a18      	ldr	r2, [pc, #96]	@ (8004020 <I2C_ITSlaveCplt+0x2d0>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d00b      	beq.n	8003fda <I2C_ITSlaveCplt+0x28a>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a16      	ldr	r2, [pc, #88]	@ (8004024 <I2C_ITSlaveCplt+0x2d4>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d005      	beq.n	8003fda <I2C_ITSlaveCplt+0x28a>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a14      	ldr	r2, [pc, #80]	@ (8004028 <I2C_ITSlaveCplt+0x2d8>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d128      	bne.n	800402c <I2C_ITSlaveCplt+0x2dc>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	b29b      	uxth	r3, r3
 8003fe4:	e027      	b.n	8004036 <I2C_ITSlaveCplt+0x2e6>
 8003fe6:	bf00      	nop
 8003fe8:	fe00e800 	.word	0xfe00e800
 8003fec:	40020010 	.word	0x40020010
 8003ff0:	40020028 	.word	0x40020028
 8003ff4:	40020040 	.word	0x40020040
 8003ff8:	40020058 	.word	0x40020058
 8003ffc:	40020070 	.word	0x40020070
 8004000:	40020088 	.word	0x40020088
 8004004:	400200a0 	.word	0x400200a0
 8004008:	400200b8 	.word	0x400200b8
 800400c:	40020410 	.word	0x40020410
 8004010:	40020428 	.word	0x40020428
 8004014:	40020440 	.word	0x40020440
 8004018:	40020458 	.word	0x40020458
 800401c:	40020470 	.word	0x40020470
 8004020:	40020488 	.word	0x40020488
 8004024:	400204a0 	.word	0x400204a0
 8004028:	400204b8 	.word	0x400204b8
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	b29b      	uxth	r3, r3
 8004036:	687a      	ldr	r2, [r7, #4]
 8004038:	8553      	strh	r3, [r2, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	f003 0304 	and.w	r3, r3, #4
 8004040:	2b00      	cmp	r3, #0
 8004042:	d020      	beq.n	8004086 <I2C_ITSlaveCplt+0x336>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	f023 0304 	bic.w	r3, r3, #4
 800404a:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004056:	b2d2      	uxtb	r2, r2
 8004058:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800405e:	1c5a      	adds	r2, r3, #1
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004068:	2b00      	cmp	r3, #0
 800406a:	d00c      	beq.n	8004086 <I2C_ITSlaveCplt+0x336>
    {
      hi2c->XferSize--;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004070:	3b01      	subs	r3, #1
 8004072:	b29a      	uxth	r2, r3
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800407c:	b29b      	uxth	r3, r3
 800407e:	3b01      	subs	r3, #1
 8004080:	b29a      	uxth	r2, r3
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800408a:	b29b      	uxth	r3, r3
 800408c:	2b00      	cmp	r3, #0
 800408e:	d005      	beq.n	800409c <I2C_ITSlaveCplt+0x34c>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004094:	f043 0204 	orr.w	r2, r3, #4
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	f003 0310 	and.w	r3, r3, #16
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d049      	beq.n	800413a <I2C_ITSlaveCplt+0x3ea>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d044      	beq.n	800413a <I2C_ITSlaveCplt+0x3ea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040b4:	b29b      	uxth	r3, r3
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d128      	bne.n	800410c <I2C_ITSlaveCplt+0x3bc>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80040c0:	b2db      	uxtb	r3, r3
 80040c2:	2b28      	cmp	r3, #40	@ 0x28
 80040c4:	d108      	bne.n	80040d8 <I2C_ITSlaveCplt+0x388>
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80040cc:	d104      	bne.n	80040d8 <I2C_ITSlaveCplt+0x388>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80040ce:	6979      	ldr	r1, [r7, #20]
 80040d0:	6878      	ldr	r0, [r7, #4]
 80040d2:	f000 f891 	bl	80041f8 <I2C_ITListenCplt>
 80040d6:	e030      	b.n	800413a <I2C_ITSlaveCplt+0x3ea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80040de:	b2db      	uxtb	r3, r3
 80040e0:	2b29      	cmp	r3, #41	@ 0x29
 80040e2:	d10e      	bne.n	8004102 <I2C_ITSlaveCplt+0x3b2>
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80040ea:	d00a      	beq.n	8004102 <I2C_ITSlaveCplt+0x3b2>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	2210      	movs	r2, #16
 80040f2:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80040f4:	6878      	ldr	r0, [r7, #4]
 80040f6:	f000 f9ea 	bl	80044ce <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f7ff fdcc 	bl	8003c98 <I2C_ITSlaveSeqCplt>
 8004100:	e01b      	b.n	800413a <I2C_ITSlaveCplt+0x3ea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	2210      	movs	r2, #16
 8004108:	61da      	str	r2, [r3, #28]
 800410a:	e016      	b.n	800413a <I2C_ITSlaveCplt+0x3ea>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	2210      	movs	r2, #16
 8004112:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004118:	f043 0204 	orr.w	r2, r3, #4
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d003      	beq.n	800412e <I2C_ITSlaveCplt+0x3de>
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800412c:	d105      	bne.n	800413a <I2C_ITSlaveCplt+0x3ea>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004132:	4619      	mov	r1, r3
 8004134:	6878      	ldr	r0, [r7, #4]
 8004136:	f000 f8b3 	bl	80042a0 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2200      	movs	r2, #0
 800413e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2200      	movs	r2, #0
 8004146:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800414c:	2b00      	cmp	r3, #0
 800414e:	d010      	beq.n	8004172 <I2C_ITSlaveCplt+0x422>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004154:	4619      	mov	r1, r3
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	f000 f8a2 	bl	80042a0 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004162:	b2db      	uxtb	r3, r3
 8004164:	2b28      	cmp	r3, #40	@ 0x28
 8004166:	d141      	bne.n	80041ec <I2C_ITSlaveCplt+0x49c>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8004168:	6979      	ldr	r1, [r7, #20]
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f000 f844 	bl	80041f8 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004170:	e03c      	b.n	80041ec <I2C_ITSlaveCplt+0x49c>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004176:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800417a:	d014      	beq.n	80041a6 <I2C_ITSlaveCplt+0x456>
    I2C_ITSlaveSeqCplt(hi2c);
 800417c:	6878      	ldr	r0, [r7, #4]
 800417e:	f7ff fd8b 	bl	8003c98 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	4a1b      	ldr	r2, [pc, #108]	@ (80041f4 <I2C_ITSlaveCplt+0x4a4>)
 8004186:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2220      	movs	r2, #32
 800418c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2200      	movs	r2, #0
 8004194:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2200      	movs	r2, #0
 800419a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800419e:	6878      	ldr	r0, [r7, #4]
 80041a0:	f7ff fbd1 	bl	8003946 <HAL_I2C_ListenCpltCallback>
}
 80041a4:	e022      	b.n	80041ec <I2C_ITSlaveCplt+0x49c>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80041ac:	b2db      	uxtb	r3, r3
 80041ae:	2b22      	cmp	r3, #34	@ 0x22
 80041b0:	d10e      	bne.n	80041d0 <I2C_ITSlaveCplt+0x480>
    hi2c->State = HAL_I2C_STATE_READY;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2220      	movs	r2, #32
 80041b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2200      	movs	r2, #0
 80041be:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2200      	movs	r2, #0
 80041c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80041c8:	6878      	ldr	r0, [r7, #4]
 80041ca:	f7ff fba4 	bl	8003916 <HAL_I2C_SlaveRxCpltCallback>
}
 80041ce:	e00d      	b.n	80041ec <I2C_ITSlaveCplt+0x49c>
    hi2c->State = HAL_I2C_STATE_READY;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2220      	movs	r2, #32
 80041d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2200      	movs	r2, #0
 80041dc:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2200      	movs	r2, #0
 80041e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	f7ff fb8b 	bl	8003902 <HAL_I2C_SlaveTxCpltCallback>
}
 80041ec:	bf00      	nop
 80041ee:	3718      	adds	r7, #24
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}
 80041f4:	ffff0000 	.word	0xffff0000

080041f8 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b082      	sub	sp, #8
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
 8004200:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	4a25      	ldr	r2, [pc, #148]	@ (800429c <I2C_ITListenCplt+0xa4>)
 8004206:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2200      	movs	r2, #0
 800420c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2220      	movs	r2, #32
 8004212:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2200      	movs	r2, #0
 800421a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2200      	movs	r2, #0
 8004222:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	f003 0304 	and.w	r3, r3, #4
 800422a:	2b00      	cmp	r3, #0
 800422c:	d022      	beq.n	8004274 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004238:	b2d2      	uxtb	r2, r2
 800423a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004240:	1c5a      	adds	r2, r3, #1
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800424a:	2b00      	cmp	r3, #0
 800424c:	d012      	beq.n	8004274 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004252:	3b01      	subs	r3, #1
 8004254:	b29a      	uxth	r2, r3
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800425e:	b29b      	uxth	r3, r3
 8004260:	3b01      	subs	r3, #1
 8004262:	b29a      	uxth	r2, r3
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800426c:	f043 0204 	orr.w	r2, r3, #4
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004274:	f248 0103 	movw	r1, #32771	@ 0x8003
 8004278:	6878      	ldr	r0, [r7, #4]
 800427a:	f000 fb5f 	bl	800493c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	2210      	movs	r2, #16
 8004284:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2200      	movs	r2, #0
 800428a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	f7ff fb59 	bl	8003946 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8004294:	bf00      	nop
 8004296:	3708      	adds	r7, #8
 8004298:	46bd      	mov	sp, r7
 800429a:	bd80      	pop	{r7, pc}
 800429c:	ffff0000 	.word	0xffff0000

080042a0 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b084      	sub	sp, #16
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
 80042a8:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80042b0:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2200      	movs	r2, #0
 80042b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	4a6d      	ldr	r2, [pc, #436]	@ (8004474 <I2C_ITError+0x1d4>)
 80042be:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2200      	movs	r2, #0
 80042c4:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	431a      	orrs	r2, r3
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80042d2:	7bfb      	ldrb	r3, [r7, #15]
 80042d4:	2b28      	cmp	r3, #40	@ 0x28
 80042d6:	d005      	beq.n	80042e4 <I2C_ITError+0x44>
 80042d8:	7bfb      	ldrb	r3, [r7, #15]
 80042da:	2b29      	cmp	r3, #41	@ 0x29
 80042dc:	d002      	beq.n	80042e4 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80042de:	7bfb      	ldrb	r3, [r7, #15]
 80042e0:	2b2a      	cmp	r3, #42	@ 0x2a
 80042e2:	d10b      	bne.n	80042fc <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80042e4:	2103      	movs	r1, #3
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	f000 fb28 	bl	800493c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2228      	movs	r2, #40	@ 0x28
 80042f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	4a60      	ldr	r2, [pc, #384]	@ (8004478 <I2C_ITError+0x1d8>)
 80042f8:	635a      	str	r2, [r3, #52]	@ 0x34
 80042fa:	e030      	b.n	800435e <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80042fc:	f248 0103 	movw	r1, #32771	@ 0x8003
 8004300:	6878      	ldr	r0, [r7, #4]
 8004302:	f000 fb1b 	bl	800493c <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f000 f8e1 	bl	80044ce <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004312:	b2db      	uxtb	r3, r3
 8004314:	2b60      	cmp	r3, #96	@ 0x60
 8004316:	d01f      	beq.n	8004358 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2220      	movs	r2, #32
 800431c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	699b      	ldr	r3, [r3, #24]
 8004326:	f003 0320 	and.w	r3, r3, #32
 800432a:	2b20      	cmp	r3, #32
 800432c:	d114      	bne.n	8004358 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	699b      	ldr	r3, [r3, #24]
 8004334:	f003 0310 	and.w	r3, r3, #16
 8004338:	2b10      	cmp	r3, #16
 800433a:	d109      	bne.n	8004350 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	2210      	movs	r2, #16
 8004342:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004348:	f043 0204 	orr.w	r2, r3, #4
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	2220      	movs	r2, #32
 8004356:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2200      	movs	r2, #0
 800435c:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004362:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004368:	2b00      	cmp	r3, #0
 800436a:	d039      	beq.n	80043e0 <I2C_ITError+0x140>
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	2b11      	cmp	r3, #17
 8004370:	d002      	beq.n	8004378 <I2C_ITError+0xd8>
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	2b21      	cmp	r3, #33	@ 0x21
 8004376:	d133      	bne.n	80043e0 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004382:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004386:	d107      	bne.n	8004398 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004396:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800439c:	4618      	mov	r0, r3
 800439e:	f7fe fc67 	bl	8002c70 <HAL_DMA_GetState>
 80043a2:	4603      	mov	r3, r0
 80043a4:	2b01      	cmp	r3, #1
 80043a6:	d017      	beq.n	80043d8 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043ac:	4a33      	ldr	r2, [pc, #204]	@ (800447c <I2C_ITError+0x1dc>)
 80043ae:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2200      	movs	r2, #0
 80043b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043bc:	4618      	mov	r0, r3
 80043be:	f7fd faaf 	bl	8001920 <HAL_DMA_Abort_IT>
 80043c2:	4603      	mov	r3, r0
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d04d      	beq.n	8004464 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043ce:	687a      	ldr	r2, [r7, #4]
 80043d0:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80043d2:	4610      	mov	r0, r2
 80043d4:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80043d6:	e045      	b.n	8004464 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80043d8:	6878      	ldr	r0, [r7, #4]
 80043da:	f000 f851 	bl	8004480 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80043de:	e041      	b.n	8004464 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d039      	beq.n	800445c <I2C_ITError+0x1bc>
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	2b12      	cmp	r3, #18
 80043ec:	d002      	beq.n	80043f4 <I2C_ITError+0x154>
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	2b22      	cmp	r3, #34	@ 0x22
 80043f2:	d133      	bne.n	800445c <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80043fe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004402:	d107      	bne.n	8004414 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	681a      	ldr	r2, [r3, #0]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004412:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004418:	4618      	mov	r0, r3
 800441a:	f7fe fc29 	bl	8002c70 <HAL_DMA_GetState>
 800441e:	4603      	mov	r3, r0
 8004420:	2b01      	cmp	r3, #1
 8004422:	d017      	beq.n	8004454 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004428:	4a14      	ldr	r2, [pc, #80]	@ (800447c <I2C_ITError+0x1dc>)
 800442a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2200      	movs	r2, #0
 8004430:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004438:	4618      	mov	r0, r3
 800443a:	f7fd fa71 	bl	8001920 <HAL_DMA_Abort_IT>
 800443e:	4603      	mov	r3, r0
 8004440:	2b00      	cmp	r3, #0
 8004442:	d011      	beq.n	8004468 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004448:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800444a:	687a      	ldr	r2, [r7, #4]
 800444c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800444e:	4610      	mov	r0, r2
 8004450:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004452:	e009      	b.n	8004468 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004454:	6878      	ldr	r0, [r7, #4]
 8004456:	f000 f813 	bl	8004480 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800445a:	e005      	b.n	8004468 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800445c:	6878      	ldr	r0, [r7, #4]
 800445e:	f000 f80f 	bl	8004480 <I2C_TreatErrorCallback>
  }
}
 8004462:	e002      	b.n	800446a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004464:	bf00      	nop
 8004466:	e000      	b.n	800446a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004468:	bf00      	nop
}
 800446a:	bf00      	nop
 800446c:	3710      	adds	r7, #16
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}
 8004472:	bf00      	nop
 8004474:	ffff0000 	.word	0xffff0000
 8004478:	0800399f 	.word	0x0800399f
 800447c:	08004517 	.word	0x08004517

08004480 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b082      	sub	sp, #8
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800448e:	b2db      	uxtb	r3, r3
 8004490:	2b60      	cmp	r3, #96	@ 0x60
 8004492:	d10e      	bne.n	80044b2 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2220      	movs	r2, #32
 8004498:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2200      	movs	r2, #0
 80044a0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2200      	movs	r2, #0
 80044a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80044aa:	6878      	ldr	r0, [r7, #4]
 80044ac:	f7ff fa5f 	bl	800396e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80044b0:	e009      	b.n	80044c6 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2200      	movs	r2, #0
 80044b6:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2200      	movs	r2, #0
 80044bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80044c0:	6878      	ldr	r0, [r7, #4]
 80044c2:	f7ff fa4a 	bl	800395a <HAL_I2C_ErrorCallback>
}
 80044c6:	bf00      	nop
 80044c8:	3708      	adds	r7, #8
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}

080044ce <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80044ce:	b480      	push	{r7}
 80044d0:	b083      	sub	sp, #12
 80044d2:	af00      	add	r7, sp, #0
 80044d4:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	699b      	ldr	r3, [r3, #24]
 80044dc:	f003 0302 	and.w	r3, r3, #2
 80044e0:	2b02      	cmp	r3, #2
 80044e2:	d103      	bne.n	80044ec <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	2200      	movs	r2, #0
 80044ea:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	699b      	ldr	r3, [r3, #24]
 80044f2:	f003 0301 	and.w	r3, r3, #1
 80044f6:	2b01      	cmp	r3, #1
 80044f8:	d007      	beq.n	800450a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	699a      	ldr	r2, [r3, #24]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f042 0201 	orr.w	r2, r2, #1
 8004508:	619a      	str	r2, [r3, #24]
  }
}
 800450a:	bf00      	nop
 800450c:	370c      	adds	r7, #12
 800450e:	46bd      	mov	sp, r7
 8004510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004514:	4770      	bx	lr

08004516 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004516:	b580      	push	{r7, lr}
 8004518:	b084      	sub	sp, #16
 800451a:	af00      	add	r7, sp, #0
 800451c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004522:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004528:	2b00      	cmp	r3, #0
 800452a:	d003      	beq.n	8004534 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004530:	2200      	movs	r2, #0
 8004532:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004538:	2b00      	cmp	r3, #0
 800453a:	d003      	beq.n	8004544 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004540:	2200      	movs	r2, #0
 8004542:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8004544:	68f8      	ldr	r0, [r7, #12]
 8004546:	f7ff ff9b 	bl	8004480 <I2C_TreatErrorCallback>
}
 800454a:	bf00      	nop
 800454c:	3710      	adds	r7, #16
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}

08004552 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004552:	b580      	push	{r7, lr}
 8004554:	b084      	sub	sp, #16
 8004556:	af00      	add	r7, sp, #0
 8004558:	60f8      	str	r0, [r7, #12]
 800455a:	60b9      	str	r1, [r7, #8]
 800455c:	603b      	str	r3, [r7, #0]
 800455e:	4613      	mov	r3, r2
 8004560:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004562:	e03b      	b.n	80045dc <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004564:	69ba      	ldr	r2, [r7, #24]
 8004566:	6839      	ldr	r1, [r7, #0]
 8004568:	68f8      	ldr	r0, [r7, #12]
 800456a:	f000 f8d5 	bl	8004718 <I2C_IsErrorOccurred>
 800456e:	4603      	mov	r3, r0
 8004570:	2b00      	cmp	r3, #0
 8004572:	d001      	beq.n	8004578 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8004574:	2301      	movs	r3, #1
 8004576:	e041      	b.n	80045fc <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800457e:	d02d      	beq.n	80045dc <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004580:	f7fc fd54 	bl	800102c <HAL_GetTick>
 8004584:	4602      	mov	r2, r0
 8004586:	69bb      	ldr	r3, [r7, #24]
 8004588:	1ad3      	subs	r3, r2, r3
 800458a:	683a      	ldr	r2, [r7, #0]
 800458c:	429a      	cmp	r2, r3
 800458e:	d302      	bcc.n	8004596 <I2C_WaitOnFlagUntilTimeout+0x44>
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d122      	bne.n	80045dc <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	699a      	ldr	r2, [r3, #24]
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	4013      	ands	r3, r2
 80045a0:	68ba      	ldr	r2, [r7, #8]
 80045a2:	429a      	cmp	r2, r3
 80045a4:	bf0c      	ite	eq
 80045a6:	2301      	moveq	r3, #1
 80045a8:	2300      	movne	r3, #0
 80045aa:	b2db      	uxtb	r3, r3
 80045ac:	461a      	mov	r2, r3
 80045ae:	79fb      	ldrb	r3, [r7, #7]
 80045b0:	429a      	cmp	r2, r3
 80045b2:	d113      	bne.n	80045dc <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045b8:	f043 0220 	orr.w	r2, r3, #32
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	2220      	movs	r2, #32
 80045c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2200      	movs	r2, #0
 80045cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2200      	movs	r2, #0
 80045d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80045d8:	2301      	movs	r3, #1
 80045da:	e00f      	b.n	80045fc <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	699a      	ldr	r2, [r3, #24]
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	4013      	ands	r3, r2
 80045e6:	68ba      	ldr	r2, [r7, #8]
 80045e8:	429a      	cmp	r2, r3
 80045ea:	bf0c      	ite	eq
 80045ec:	2301      	moveq	r3, #1
 80045ee:	2300      	movne	r3, #0
 80045f0:	b2db      	uxtb	r3, r3
 80045f2:	461a      	mov	r2, r3
 80045f4:	79fb      	ldrb	r3, [r7, #7]
 80045f6:	429a      	cmp	r2, r3
 80045f8:	d0b4      	beq.n	8004564 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80045fa:	2300      	movs	r3, #0
}
 80045fc:	4618      	mov	r0, r3
 80045fe:	3710      	adds	r7, #16
 8004600:	46bd      	mov	sp, r7
 8004602:	bd80      	pop	{r7, pc}

08004604 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b084      	sub	sp, #16
 8004608:	af00      	add	r7, sp, #0
 800460a:	60f8      	str	r0, [r7, #12]
 800460c:	60b9      	str	r1, [r7, #8]
 800460e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004610:	e033      	b.n	800467a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004612:	687a      	ldr	r2, [r7, #4]
 8004614:	68b9      	ldr	r1, [r7, #8]
 8004616:	68f8      	ldr	r0, [r7, #12]
 8004618:	f000 f87e 	bl	8004718 <I2C_IsErrorOccurred>
 800461c:	4603      	mov	r3, r0
 800461e:	2b00      	cmp	r3, #0
 8004620:	d001      	beq.n	8004626 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004622:	2301      	movs	r3, #1
 8004624:	e031      	b.n	800468a <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	f1b3 3fff 	cmp.w	r3, #4294967295
 800462c:	d025      	beq.n	800467a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800462e:	f7fc fcfd 	bl	800102c <HAL_GetTick>
 8004632:	4602      	mov	r2, r0
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	1ad3      	subs	r3, r2, r3
 8004638:	68ba      	ldr	r2, [r7, #8]
 800463a:	429a      	cmp	r2, r3
 800463c:	d302      	bcc.n	8004644 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d11a      	bne.n	800467a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	699b      	ldr	r3, [r3, #24]
 800464a:	f003 0302 	and.w	r3, r3, #2
 800464e:	2b02      	cmp	r3, #2
 8004650:	d013      	beq.n	800467a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004656:	f043 0220 	orr.w	r2, r3, #32
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2220      	movs	r2, #32
 8004662:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	2200      	movs	r2, #0
 800466a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	2200      	movs	r2, #0
 8004672:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004676:	2301      	movs	r3, #1
 8004678:	e007      	b.n	800468a <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	699b      	ldr	r3, [r3, #24]
 8004680:	f003 0302 	and.w	r3, r3, #2
 8004684:	2b02      	cmp	r3, #2
 8004686:	d1c4      	bne.n	8004612 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004688:	2300      	movs	r3, #0
}
 800468a:	4618      	mov	r0, r3
 800468c:	3710      	adds	r7, #16
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}

08004692 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004692:	b580      	push	{r7, lr}
 8004694:	b084      	sub	sp, #16
 8004696:	af00      	add	r7, sp, #0
 8004698:	60f8      	str	r0, [r7, #12]
 800469a:	60b9      	str	r1, [r7, #8]
 800469c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800469e:	e02f      	b.n	8004700 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80046a0:	687a      	ldr	r2, [r7, #4]
 80046a2:	68b9      	ldr	r1, [r7, #8]
 80046a4:	68f8      	ldr	r0, [r7, #12]
 80046a6:	f000 f837 	bl	8004718 <I2C_IsErrorOccurred>
 80046aa:	4603      	mov	r3, r0
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d001      	beq.n	80046b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	e02d      	b.n	8004710 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046b4:	f7fc fcba 	bl	800102c <HAL_GetTick>
 80046b8:	4602      	mov	r2, r0
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	1ad3      	subs	r3, r2, r3
 80046be:	68ba      	ldr	r2, [r7, #8]
 80046c0:	429a      	cmp	r2, r3
 80046c2:	d302      	bcc.n	80046ca <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d11a      	bne.n	8004700 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	699b      	ldr	r3, [r3, #24]
 80046d0:	f003 0320 	and.w	r3, r3, #32
 80046d4:	2b20      	cmp	r3, #32
 80046d6:	d013      	beq.n	8004700 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046dc:	f043 0220 	orr.w	r2, r3, #32
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	2220      	movs	r2, #32
 80046e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	2200      	movs	r2, #0
 80046f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	2200      	movs	r2, #0
 80046f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80046fc:	2301      	movs	r3, #1
 80046fe:	e007      	b.n	8004710 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	699b      	ldr	r3, [r3, #24]
 8004706:	f003 0320 	and.w	r3, r3, #32
 800470a:	2b20      	cmp	r3, #32
 800470c:	d1c8      	bne.n	80046a0 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800470e:	2300      	movs	r3, #0
}
 8004710:	4618      	mov	r0, r3
 8004712:	3710      	adds	r7, #16
 8004714:	46bd      	mov	sp, r7
 8004716:	bd80      	pop	{r7, pc}

08004718 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b08a      	sub	sp, #40	@ 0x28
 800471c:	af00      	add	r7, sp, #0
 800471e:	60f8      	str	r0, [r7, #12]
 8004720:	60b9      	str	r1, [r7, #8]
 8004722:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004724:	2300      	movs	r3, #0
 8004726:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	699b      	ldr	r3, [r3, #24]
 8004730:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004732:	2300      	movs	r3, #0
 8004734:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800473a:	69bb      	ldr	r3, [r7, #24]
 800473c:	f003 0310 	and.w	r3, r3, #16
 8004740:	2b00      	cmp	r3, #0
 8004742:	d068      	beq.n	8004816 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	2210      	movs	r2, #16
 800474a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800474c:	e049      	b.n	80047e2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004754:	d045      	beq.n	80047e2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004756:	f7fc fc69 	bl	800102c <HAL_GetTick>
 800475a:	4602      	mov	r2, r0
 800475c:	69fb      	ldr	r3, [r7, #28]
 800475e:	1ad3      	subs	r3, r2, r3
 8004760:	68ba      	ldr	r2, [r7, #8]
 8004762:	429a      	cmp	r2, r3
 8004764:	d302      	bcc.n	800476c <I2C_IsErrorOccurred+0x54>
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d13a      	bne.n	80047e2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004776:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800477e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	699b      	ldr	r3, [r3, #24]
 8004786:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800478a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800478e:	d121      	bne.n	80047d4 <I2C_IsErrorOccurred+0xbc>
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004796:	d01d      	beq.n	80047d4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004798:	7cfb      	ldrb	r3, [r7, #19]
 800479a:	2b20      	cmp	r3, #32
 800479c:	d01a      	beq.n	80047d4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	685a      	ldr	r2, [r3, #4]
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80047ac:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80047ae:	f7fc fc3d 	bl	800102c <HAL_GetTick>
 80047b2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80047b4:	e00e      	b.n	80047d4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80047b6:	f7fc fc39 	bl	800102c <HAL_GetTick>
 80047ba:	4602      	mov	r2, r0
 80047bc:	69fb      	ldr	r3, [r7, #28]
 80047be:	1ad3      	subs	r3, r2, r3
 80047c0:	2b19      	cmp	r3, #25
 80047c2:	d907      	bls.n	80047d4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80047c4:	6a3b      	ldr	r3, [r7, #32]
 80047c6:	f043 0320 	orr.w	r3, r3, #32
 80047ca:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80047cc:	2301      	movs	r3, #1
 80047ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80047d2:	e006      	b.n	80047e2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	699b      	ldr	r3, [r3, #24]
 80047da:	f003 0320 	and.w	r3, r3, #32
 80047de:	2b20      	cmp	r3, #32
 80047e0:	d1e9      	bne.n	80047b6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	699b      	ldr	r3, [r3, #24]
 80047e8:	f003 0320 	and.w	r3, r3, #32
 80047ec:	2b20      	cmp	r3, #32
 80047ee:	d003      	beq.n	80047f8 <I2C_IsErrorOccurred+0xe0>
 80047f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d0aa      	beq.n	800474e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80047f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d103      	bne.n	8004808 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	2220      	movs	r2, #32
 8004806:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004808:	6a3b      	ldr	r3, [r7, #32]
 800480a:	f043 0304 	orr.w	r3, r3, #4
 800480e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004810:	2301      	movs	r3, #1
 8004812:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	699b      	ldr	r3, [r3, #24]
 800481c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800481e:	69bb      	ldr	r3, [r7, #24]
 8004820:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004824:	2b00      	cmp	r3, #0
 8004826:	d00b      	beq.n	8004840 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004828:	6a3b      	ldr	r3, [r7, #32]
 800482a:	f043 0301 	orr.w	r3, r3, #1
 800482e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004838:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800483a:	2301      	movs	r3, #1
 800483c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004840:	69bb      	ldr	r3, [r7, #24]
 8004842:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004846:	2b00      	cmp	r3, #0
 8004848:	d00b      	beq.n	8004862 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800484a:	6a3b      	ldr	r3, [r7, #32]
 800484c:	f043 0308 	orr.w	r3, r3, #8
 8004850:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800485a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800485c:	2301      	movs	r3, #1
 800485e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004862:	69bb      	ldr	r3, [r7, #24]
 8004864:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004868:	2b00      	cmp	r3, #0
 800486a:	d00b      	beq.n	8004884 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800486c:	6a3b      	ldr	r3, [r7, #32]
 800486e:	f043 0302 	orr.w	r3, r3, #2
 8004872:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800487c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8004884:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004888:	2b00      	cmp	r3, #0
 800488a:	d01c      	beq.n	80048c6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800488c:	68f8      	ldr	r0, [r7, #12]
 800488e:	f7ff fe1e 	bl	80044ce <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	6859      	ldr	r1, [r3, #4]
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681a      	ldr	r2, [r3, #0]
 800489c:	4b0d      	ldr	r3, [pc, #52]	@ (80048d4 <I2C_IsErrorOccurred+0x1bc>)
 800489e:	400b      	ands	r3, r1
 80048a0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80048a6:	6a3b      	ldr	r3, [r7, #32]
 80048a8:	431a      	orrs	r2, r3
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	2220      	movs	r2, #32
 80048b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	2200      	movs	r2, #0
 80048ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	2200      	movs	r2, #0
 80048c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80048c6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80048ca:	4618      	mov	r0, r3
 80048cc:	3728      	adds	r7, #40	@ 0x28
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd80      	pop	{r7, pc}
 80048d2:	bf00      	nop
 80048d4:	fe00e800 	.word	0xfe00e800

080048d8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80048d8:	b480      	push	{r7}
 80048da:	b087      	sub	sp, #28
 80048dc:	af00      	add	r7, sp, #0
 80048de:	60f8      	str	r0, [r7, #12]
 80048e0:	607b      	str	r3, [r7, #4]
 80048e2:	460b      	mov	r3, r1
 80048e4:	817b      	strh	r3, [r7, #10]
 80048e6:	4613      	mov	r3, r2
 80048e8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80048ea:	897b      	ldrh	r3, [r7, #10]
 80048ec:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80048f0:	7a7b      	ldrb	r3, [r7, #9]
 80048f2:	041b      	lsls	r3, r3, #16
 80048f4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80048f8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80048fe:	6a3b      	ldr	r3, [r7, #32]
 8004900:	4313      	orrs	r3, r2
 8004902:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004906:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	685a      	ldr	r2, [r3, #4]
 800490e:	6a3b      	ldr	r3, [r7, #32]
 8004910:	0d5b      	lsrs	r3, r3, #21
 8004912:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8004916:	4b08      	ldr	r3, [pc, #32]	@ (8004938 <I2C_TransferConfig+0x60>)
 8004918:	430b      	orrs	r3, r1
 800491a:	43db      	mvns	r3, r3
 800491c:	ea02 0103 	and.w	r1, r2, r3
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	697a      	ldr	r2, [r7, #20]
 8004926:	430a      	orrs	r2, r1
 8004928:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800492a:	bf00      	nop
 800492c:	371c      	adds	r7, #28
 800492e:	46bd      	mov	sp, r7
 8004930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004934:	4770      	bx	lr
 8004936:	bf00      	nop
 8004938:	03ff63ff 	.word	0x03ff63ff

0800493c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800493c:	b480      	push	{r7}
 800493e:	b085      	sub	sp, #20
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
 8004944:	460b      	mov	r3, r1
 8004946:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8004948:	2300      	movs	r3, #0
 800494a:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800494c:	887b      	ldrh	r3, [r7, #2]
 800494e:	f003 0301 	and.w	r3, r3, #1
 8004952:	2b00      	cmp	r3, #0
 8004954:	d00f      	beq.n	8004976 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 800495c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004964:	b2db      	uxtb	r3, r3
 8004966:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800496a:	2b28      	cmp	r3, #40	@ 0x28
 800496c:	d003      	beq.n	8004976 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8004974:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004976:	887b      	ldrh	r3, [r7, #2]
 8004978:	f003 0302 	and.w	r3, r3, #2
 800497c:	2b00      	cmp	r3, #0
 800497e:	d00f      	beq.n	80049a0 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8004986:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800498e:	b2db      	uxtb	r3, r3
 8004990:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004994:	2b28      	cmp	r3, #40	@ 0x28
 8004996:	d003      	beq.n	80049a0 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800499e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80049a0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	da03      	bge.n	80049b0 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80049ae:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80049b0:	887b      	ldrh	r3, [r7, #2]
 80049b2:	2b10      	cmp	r3, #16
 80049b4:	d103      	bne.n	80049be <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80049bc:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80049be:	887b      	ldrh	r3, [r7, #2]
 80049c0:	2b20      	cmp	r3, #32
 80049c2:	d103      	bne.n	80049cc <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	f043 0320 	orr.w	r3, r3, #32
 80049ca:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80049cc:	887b      	ldrh	r3, [r7, #2]
 80049ce:	2b40      	cmp	r3, #64	@ 0x40
 80049d0:	d103      	bne.n	80049da <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80049d8:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	6819      	ldr	r1, [r3, #0]
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	43da      	mvns	r2, r3
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	400a      	ands	r2, r1
 80049ea:	601a      	str	r2, [r3, #0]
}
 80049ec:	bf00      	nop
 80049ee:	3714      	adds	r7, #20
 80049f0:	46bd      	mov	sp, r7
 80049f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f6:	4770      	bx	lr

080049f8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b083      	sub	sp, #12
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
 8004a00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a08:	b2db      	uxtb	r3, r3
 8004a0a:	2b20      	cmp	r3, #32
 8004a0c:	d138      	bne.n	8004a80 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004a14:	2b01      	cmp	r3, #1
 8004a16:	d101      	bne.n	8004a1c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004a18:	2302      	movs	r3, #2
 8004a1a:	e032      	b.n	8004a82 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2201      	movs	r2, #1
 8004a20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2224      	movs	r2, #36	@ 0x24
 8004a28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	681a      	ldr	r2, [r3, #0]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f022 0201 	bic.w	r2, r2, #1
 8004a3a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	681a      	ldr	r2, [r3, #0]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004a4a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	6819      	ldr	r1, [r3, #0]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	683a      	ldr	r2, [r7, #0]
 8004a58:	430a      	orrs	r2, r1
 8004a5a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	681a      	ldr	r2, [r3, #0]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f042 0201 	orr.w	r2, r2, #1
 8004a6a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2220      	movs	r2, #32
 8004a70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2200      	movs	r2, #0
 8004a78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	e000      	b.n	8004a82 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004a80:	2302      	movs	r3, #2
  }
}
 8004a82:	4618      	mov	r0, r3
 8004a84:	370c      	adds	r7, #12
 8004a86:	46bd      	mov	sp, r7
 8004a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8c:	4770      	bx	lr

08004a8e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004a8e:	b480      	push	{r7}
 8004a90:	b085      	sub	sp, #20
 8004a92:	af00      	add	r7, sp, #0
 8004a94:	6078      	str	r0, [r7, #4]
 8004a96:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a9e:	b2db      	uxtb	r3, r3
 8004aa0:	2b20      	cmp	r3, #32
 8004aa2:	d139      	bne.n	8004b18 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004aaa:	2b01      	cmp	r3, #1
 8004aac:	d101      	bne.n	8004ab2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004aae:	2302      	movs	r3, #2
 8004ab0:	e033      	b.n	8004b1a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2201      	movs	r2, #1
 8004ab6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2224      	movs	r2, #36	@ 0x24
 8004abe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	681a      	ldr	r2, [r3, #0]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f022 0201 	bic.w	r2, r2, #1
 8004ad0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004ae0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	021b      	lsls	r3, r3, #8
 8004ae6:	68fa      	ldr	r2, [r7, #12]
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	68fa      	ldr	r2, [r7, #12]
 8004af2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	681a      	ldr	r2, [r3, #0]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f042 0201 	orr.w	r2, r2, #1
 8004b02:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2220      	movs	r2, #32
 8004b08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004b14:	2300      	movs	r3, #0
 8004b16:	e000      	b.n	8004b1a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004b18:	2302      	movs	r3, #2
  }
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	3714      	adds	r7, #20
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b24:	4770      	bx	lr
	...

08004b28 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b084      	sub	sp, #16
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004b30:	4b19      	ldr	r3, [pc, #100]	@ (8004b98 <HAL_PWREx_ConfigSupply+0x70>)
 8004b32:	68db      	ldr	r3, [r3, #12]
 8004b34:	f003 0304 	and.w	r3, r3, #4
 8004b38:	2b04      	cmp	r3, #4
 8004b3a:	d00a      	beq.n	8004b52 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004b3c:	4b16      	ldr	r3, [pc, #88]	@ (8004b98 <HAL_PWREx_ConfigSupply+0x70>)
 8004b3e:	68db      	ldr	r3, [r3, #12]
 8004b40:	f003 0307 	and.w	r3, r3, #7
 8004b44:	687a      	ldr	r2, [r7, #4]
 8004b46:	429a      	cmp	r2, r3
 8004b48:	d001      	beq.n	8004b4e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	e01f      	b.n	8004b8e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	e01d      	b.n	8004b8e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004b52:	4b11      	ldr	r3, [pc, #68]	@ (8004b98 <HAL_PWREx_ConfigSupply+0x70>)
 8004b54:	68db      	ldr	r3, [r3, #12]
 8004b56:	f023 0207 	bic.w	r2, r3, #7
 8004b5a:	490f      	ldr	r1, [pc, #60]	@ (8004b98 <HAL_PWREx_ConfigSupply+0x70>)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004b62:	f7fc fa63 	bl	800102c <HAL_GetTick>
 8004b66:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004b68:	e009      	b.n	8004b7e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004b6a:	f7fc fa5f 	bl	800102c <HAL_GetTick>
 8004b6e:	4602      	mov	r2, r0
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	1ad3      	subs	r3, r2, r3
 8004b74:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004b78:	d901      	bls.n	8004b7e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	e007      	b.n	8004b8e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004b7e:	4b06      	ldr	r3, [pc, #24]	@ (8004b98 <HAL_PWREx_ConfigSupply+0x70>)
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004b86:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b8a:	d1ee      	bne.n	8004b6a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004b8c:	2300      	movs	r3, #0
}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	3710      	adds	r7, #16
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd80      	pop	{r7, pc}
 8004b96:	bf00      	nop
 8004b98:	58024800 	.word	0x58024800

08004b9c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b08c      	sub	sp, #48	@ 0x30
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d102      	bne.n	8004bb0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004baa:	2301      	movs	r3, #1
 8004bac:	f000 bc1f 	b.w	80053ee <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f003 0301 	and.w	r3, r3, #1
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	f000 80b3 	beq.w	8004d24 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004bbe:	4b95      	ldr	r3, [pc, #596]	@ (8004e14 <HAL_RCC_OscConfig+0x278>)
 8004bc0:	691b      	ldr	r3, [r3, #16]
 8004bc2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004bc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004bc8:	4b92      	ldr	r3, [pc, #584]	@ (8004e14 <HAL_RCC_OscConfig+0x278>)
 8004bca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bcc:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004bce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bd0:	2b10      	cmp	r3, #16
 8004bd2:	d007      	beq.n	8004be4 <HAL_RCC_OscConfig+0x48>
 8004bd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bd6:	2b18      	cmp	r3, #24
 8004bd8:	d112      	bne.n	8004c00 <HAL_RCC_OscConfig+0x64>
 8004bda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bdc:	f003 0303 	and.w	r3, r3, #3
 8004be0:	2b02      	cmp	r3, #2
 8004be2:	d10d      	bne.n	8004c00 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004be4:	4b8b      	ldr	r3, [pc, #556]	@ (8004e14 <HAL_RCC_OscConfig+0x278>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	f000 8098 	beq.w	8004d22 <HAL_RCC_OscConfig+0x186>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	f040 8093 	bne.w	8004d22 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	e3f6      	b.n	80053ee <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c08:	d106      	bne.n	8004c18 <HAL_RCC_OscConfig+0x7c>
 8004c0a:	4b82      	ldr	r3, [pc, #520]	@ (8004e14 <HAL_RCC_OscConfig+0x278>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a81      	ldr	r2, [pc, #516]	@ (8004e14 <HAL_RCC_OscConfig+0x278>)
 8004c10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c14:	6013      	str	r3, [r2, #0]
 8004c16:	e058      	b.n	8004cca <HAL_RCC_OscConfig+0x12e>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d112      	bne.n	8004c46 <HAL_RCC_OscConfig+0xaa>
 8004c20:	4b7c      	ldr	r3, [pc, #496]	@ (8004e14 <HAL_RCC_OscConfig+0x278>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a7b      	ldr	r2, [pc, #492]	@ (8004e14 <HAL_RCC_OscConfig+0x278>)
 8004c26:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c2a:	6013      	str	r3, [r2, #0]
 8004c2c:	4b79      	ldr	r3, [pc, #484]	@ (8004e14 <HAL_RCC_OscConfig+0x278>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a78      	ldr	r2, [pc, #480]	@ (8004e14 <HAL_RCC_OscConfig+0x278>)
 8004c32:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004c36:	6013      	str	r3, [r2, #0]
 8004c38:	4b76      	ldr	r3, [pc, #472]	@ (8004e14 <HAL_RCC_OscConfig+0x278>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a75      	ldr	r2, [pc, #468]	@ (8004e14 <HAL_RCC_OscConfig+0x278>)
 8004c3e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004c42:	6013      	str	r3, [r2, #0]
 8004c44:	e041      	b.n	8004cca <HAL_RCC_OscConfig+0x12e>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004c4e:	d112      	bne.n	8004c76 <HAL_RCC_OscConfig+0xda>
 8004c50:	4b70      	ldr	r3, [pc, #448]	@ (8004e14 <HAL_RCC_OscConfig+0x278>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a6f      	ldr	r2, [pc, #444]	@ (8004e14 <HAL_RCC_OscConfig+0x278>)
 8004c56:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004c5a:	6013      	str	r3, [r2, #0]
 8004c5c:	4b6d      	ldr	r3, [pc, #436]	@ (8004e14 <HAL_RCC_OscConfig+0x278>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a6c      	ldr	r2, [pc, #432]	@ (8004e14 <HAL_RCC_OscConfig+0x278>)
 8004c62:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004c66:	6013      	str	r3, [r2, #0]
 8004c68:	4b6a      	ldr	r3, [pc, #424]	@ (8004e14 <HAL_RCC_OscConfig+0x278>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a69      	ldr	r2, [pc, #420]	@ (8004e14 <HAL_RCC_OscConfig+0x278>)
 8004c6e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c72:	6013      	str	r3, [r2, #0]
 8004c74:	e029      	b.n	8004cca <HAL_RCC_OscConfig+0x12e>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8004c7e:	d112      	bne.n	8004ca6 <HAL_RCC_OscConfig+0x10a>
 8004c80:	4b64      	ldr	r3, [pc, #400]	@ (8004e14 <HAL_RCC_OscConfig+0x278>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a63      	ldr	r2, [pc, #396]	@ (8004e14 <HAL_RCC_OscConfig+0x278>)
 8004c86:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004c8a:	6013      	str	r3, [r2, #0]
 8004c8c:	4b61      	ldr	r3, [pc, #388]	@ (8004e14 <HAL_RCC_OscConfig+0x278>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a60      	ldr	r2, [pc, #384]	@ (8004e14 <HAL_RCC_OscConfig+0x278>)
 8004c92:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004c96:	6013      	str	r3, [r2, #0]
 8004c98:	4b5e      	ldr	r3, [pc, #376]	@ (8004e14 <HAL_RCC_OscConfig+0x278>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a5d      	ldr	r2, [pc, #372]	@ (8004e14 <HAL_RCC_OscConfig+0x278>)
 8004c9e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ca2:	6013      	str	r3, [r2, #0]
 8004ca4:	e011      	b.n	8004cca <HAL_RCC_OscConfig+0x12e>
 8004ca6:	4b5b      	ldr	r3, [pc, #364]	@ (8004e14 <HAL_RCC_OscConfig+0x278>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a5a      	ldr	r2, [pc, #360]	@ (8004e14 <HAL_RCC_OscConfig+0x278>)
 8004cac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004cb0:	6013      	str	r3, [r2, #0]
 8004cb2:	4b58      	ldr	r3, [pc, #352]	@ (8004e14 <HAL_RCC_OscConfig+0x278>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a57      	ldr	r2, [pc, #348]	@ (8004e14 <HAL_RCC_OscConfig+0x278>)
 8004cb8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004cbc:	6013      	str	r3, [r2, #0]
 8004cbe:	4b55      	ldr	r3, [pc, #340]	@ (8004e14 <HAL_RCC_OscConfig+0x278>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a54      	ldr	r2, [pc, #336]	@ (8004e14 <HAL_RCC_OscConfig+0x278>)
 8004cc4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004cc8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d013      	beq.n	8004cfa <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cd2:	f7fc f9ab 	bl	800102c <HAL_GetTick>
 8004cd6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004cd8:	e008      	b.n	8004cec <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004cda:	f7fc f9a7 	bl	800102c <HAL_GetTick>
 8004cde:	4602      	mov	r2, r0
 8004ce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ce2:	1ad3      	subs	r3, r2, r3
 8004ce4:	2b64      	cmp	r3, #100	@ 0x64
 8004ce6:	d901      	bls.n	8004cec <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8004ce8:	2303      	movs	r3, #3
 8004cea:	e380      	b.n	80053ee <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004cec:	4b49      	ldr	r3, [pc, #292]	@ (8004e14 <HAL_RCC_OscConfig+0x278>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d0f0      	beq.n	8004cda <HAL_RCC_OscConfig+0x13e>
 8004cf8:	e014      	b.n	8004d24 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cfa:	f7fc f997 	bl	800102c <HAL_GetTick>
 8004cfe:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004d00:	e008      	b.n	8004d14 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d02:	f7fc f993 	bl	800102c <HAL_GetTick>
 8004d06:	4602      	mov	r2, r0
 8004d08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d0a:	1ad3      	subs	r3, r2, r3
 8004d0c:	2b64      	cmp	r3, #100	@ 0x64
 8004d0e:	d901      	bls.n	8004d14 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8004d10:	2303      	movs	r3, #3
 8004d12:	e36c      	b.n	80053ee <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004d14:	4b3f      	ldr	r3, [pc, #252]	@ (8004e14 <HAL_RCC_OscConfig+0x278>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d1f0      	bne.n	8004d02 <HAL_RCC_OscConfig+0x166>
 8004d20:	e000      	b.n	8004d24 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d22:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f003 0302 	and.w	r3, r3, #2
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	f000 808c 	beq.w	8004e4a <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d32:	4b38      	ldr	r3, [pc, #224]	@ (8004e14 <HAL_RCC_OscConfig+0x278>)
 8004d34:	691b      	ldr	r3, [r3, #16]
 8004d36:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004d3a:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004d3c:	4b35      	ldr	r3, [pc, #212]	@ (8004e14 <HAL_RCC_OscConfig+0x278>)
 8004d3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d40:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004d42:	6a3b      	ldr	r3, [r7, #32]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d007      	beq.n	8004d58 <HAL_RCC_OscConfig+0x1bc>
 8004d48:	6a3b      	ldr	r3, [r7, #32]
 8004d4a:	2b18      	cmp	r3, #24
 8004d4c:	d137      	bne.n	8004dbe <HAL_RCC_OscConfig+0x222>
 8004d4e:	69fb      	ldr	r3, [r7, #28]
 8004d50:	f003 0303 	and.w	r3, r3, #3
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d132      	bne.n	8004dbe <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004d58:	4b2e      	ldr	r3, [pc, #184]	@ (8004e14 <HAL_RCC_OscConfig+0x278>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f003 0304 	and.w	r3, r3, #4
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d005      	beq.n	8004d70 <HAL_RCC_OscConfig+0x1d4>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	68db      	ldr	r3, [r3, #12]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d101      	bne.n	8004d70 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	e33e      	b.n	80053ee <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004d70:	4b28      	ldr	r3, [pc, #160]	@ (8004e14 <HAL_RCC_OscConfig+0x278>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f023 0219 	bic.w	r2, r3, #25
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	68db      	ldr	r3, [r3, #12]
 8004d7c:	4925      	ldr	r1, [pc, #148]	@ (8004e14 <HAL_RCC_OscConfig+0x278>)
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d82:	f7fc f953 	bl	800102c <HAL_GetTick>
 8004d86:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004d88:	e008      	b.n	8004d9c <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d8a:	f7fc f94f 	bl	800102c <HAL_GetTick>
 8004d8e:	4602      	mov	r2, r0
 8004d90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d92:	1ad3      	subs	r3, r2, r3
 8004d94:	2b02      	cmp	r3, #2
 8004d96:	d901      	bls.n	8004d9c <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8004d98:	2303      	movs	r3, #3
 8004d9a:	e328      	b.n	80053ee <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004d9c:	4b1d      	ldr	r3, [pc, #116]	@ (8004e14 <HAL_RCC_OscConfig+0x278>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f003 0304 	and.w	r3, r3, #4
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d0f0      	beq.n	8004d8a <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004da8:	4b1a      	ldr	r3, [pc, #104]	@ (8004e14 <HAL_RCC_OscConfig+0x278>)
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	691b      	ldr	r3, [r3, #16]
 8004db4:	061b      	lsls	r3, r3, #24
 8004db6:	4917      	ldr	r1, [pc, #92]	@ (8004e14 <HAL_RCC_OscConfig+0x278>)
 8004db8:	4313      	orrs	r3, r2
 8004dba:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004dbc:	e045      	b.n	8004e4a <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	68db      	ldr	r3, [r3, #12]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d028      	beq.n	8004e18 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004dc6:	4b13      	ldr	r3, [pc, #76]	@ (8004e14 <HAL_RCC_OscConfig+0x278>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f023 0219 	bic.w	r2, r3, #25
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	68db      	ldr	r3, [r3, #12]
 8004dd2:	4910      	ldr	r1, [pc, #64]	@ (8004e14 <HAL_RCC_OscConfig+0x278>)
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dd8:	f7fc f928 	bl	800102c <HAL_GetTick>
 8004ddc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004dde:	e008      	b.n	8004df2 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004de0:	f7fc f924 	bl	800102c <HAL_GetTick>
 8004de4:	4602      	mov	r2, r0
 8004de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004de8:	1ad3      	subs	r3, r2, r3
 8004dea:	2b02      	cmp	r3, #2
 8004dec:	d901      	bls.n	8004df2 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8004dee:	2303      	movs	r3, #3
 8004df0:	e2fd      	b.n	80053ee <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004df2:	4b08      	ldr	r3, [pc, #32]	@ (8004e14 <HAL_RCC_OscConfig+0x278>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f003 0304 	and.w	r3, r3, #4
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d0f0      	beq.n	8004de0 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dfe:	4b05      	ldr	r3, [pc, #20]	@ (8004e14 <HAL_RCC_OscConfig+0x278>)
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	691b      	ldr	r3, [r3, #16]
 8004e0a:	061b      	lsls	r3, r3, #24
 8004e0c:	4901      	ldr	r1, [pc, #4]	@ (8004e14 <HAL_RCC_OscConfig+0x278>)
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	604b      	str	r3, [r1, #4]
 8004e12:	e01a      	b.n	8004e4a <HAL_RCC_OscConfig+0x2ae>
 8004e14:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e18:	4b97      	ldr	r3, [pc, #604]	@ (8005078 <HAL_RCC_OscConfig+0x4dc>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a96      	ldr	r2, [pc, #600]	@ (8005078 <HAL_RCC_OscConfig+0x4dc>)
 8004e1e:	f023 0301 	bic.w	r3, r3, #1
 8004e22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e24:	f7fc f902 	bl	800102c <HAL_GetTick>
 8004e28:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004e2a:	e008      	b.n	8004e3e <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e2c:	f7fc f8fe 	bl	800102c <HAL_GetTick>
 8004e30:	4602      	mov	r2, r0
 8004e32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e34:	1ad3      	subs	r3, r2, r3
 8004e36:	2b02      	cmp	r3, #2
 8004e38:	d901      	bls.n	8004e3e <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8004e3a:	2303      	movs	r3, #3
 8004e3c:	e2d7      	b.n	80053ee <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004e3e:	4b8e      	ldr	r3, [pc, #568]	@ (8005078 <HAL_RCC_OscConfig+0x4dc>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f003 0304 	and.w	r3, r3, #4
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d1f0      	bne.n	8004e2c <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f003 0310 	and.w	r3, r3, #16
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d06a      	beq.n	8004f2c <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e56:	4b88      	ldr	r3, [pc, #544]	@ (8005078 <HAL_RCC_OscConfig+0x4dc>)
 8004e58:	691b      	ldr	r3, [r3, #16]
 8004e5a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004e5e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004e60:	4b85      	ldr	r3, [pc, #532]	@ (8005078 <HAL_RCC_OscConfig+0x4dc>)
 8004e62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e64:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004e66:	69bb      	ldr	r3, [r7, #24]
 8004e68:	2b08      	cmp	r3, #8
 8004e6a:	d007      	beq.n	8004e7c <HAL_RCC_OscConfig+0x2e0>
 8004e6c:	69bb      	ldr	r3, [r7, #24]
 8004e6e:	2b18      	cmp	r3, #24
 8004e70:	d11b      	bne.n	8004eaa <HAL_RCC_OscConfig+0x30e>
 8004e72:	697b      	ldr	r3, [r7, #20]
 8004e74:	f003 0303 	and.w	r3, r3, #3
 8004e78:	2b01      	cmp	r3, #1
 8004e7a:	d116      	bne.n	8004eaa <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004e7c:	4b7e      	ldr	r3, [pc, #504]	@ (8005078 <HAL_RCC_OscConfig+0x4dc>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d005      	beq.n	8004e94 <HAL_RCC_OscConfig+0x2f8>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	69db      	ldr	r3, [r3, #28]
 8004e8c:	2b80      	cmp	r3, #128	@ 0x80
 8004e8e:	d001      	beq.n	8004e94 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8004e90:	2301      	movs	r3, #1
 8004e92:	e2ac      	b.n	80053ee <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004e94:	4b78      	ldr	r3, [pc, #480]	@ (8005078 <HAL_RCC_OscConfig+0x4dc>)
 8004e96:	68db      	ldr	r3, [r3, #12]
 8004e98:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6a1b      	ldr	r3, [r3, #32]
 8004ea0:	061b      	lsls	r3, r3, #24
 8004ea2:	4975      	ldr	r1, [pc, #468]	@ (8005078 <HAL_RCC_OscConfig+0x4dc>)
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004ea8:	e040      	b.n	8004f2c <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	69db      	ldr	r3, [r3, #28]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d023      	beq.n	8004efa <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004eb2:	4b71      	ldr	r3, [pc, #452]	@ (8005078 <HAL_RCC_OscConfig+0x4dc>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4a70      	ldr	r2, [pc, #448]	@ (8005078 <HAL_RCC_OscConfig+0x4dc>)
 8004eb8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ebc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ebe:	f7fc f8b5 	bl	800102c <HAL_GetTick>
 8004ec2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004ec4:	e008      	b.n	8004ed8 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004ec6:	f7fc f8b1 	bl	800102c <HAL_GetTick>
 8004eca:	4602      	mov	r2, r0
 8004ecc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ece:	1ad3      	subs	r3, r2, r3
 8004ed0:	2b02      	cmp	r3, #2
 8004ed2:	d901      	bls.n	8004ed8 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8004ed4:	2303      	movs	r3, #3
 8004ed6:	e28a      	b.n	80053ee <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004ed8:	4b67      	ldr	r3, [pc, #412]	@ (8005078 <HAL_RCC_OscConfig+0x4dc>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d0f0      	beq.n	8004ec6 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004ee4:	4b64      	ldr	r3, [pc, #400]	@ (8005078 <HAL_RCC_OscConfig+0x4dc>)
 8004ee6:	68db      	ldr	r3, [r3, #12]
 8004ee8:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6a1b      	ldr	r3, [r3, #32]
 8004ef0:	061b      	lsls	r3, r3, #24
 8004ef2:	4961      	ldr	r1, [pc, #388]	@ (8005078 <HAL_RCC_OscConfig+0x4dc>)
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	60cb      	str	r3, [r1, #12]
 8004ef8:	e018      	b.n	8004f2c <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004efa:	4b5f      	ldr	r3, [pc, #380]	@ (8005078 <HAL_RCC_OscConfig+0x4dc>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4a5e      	ldr	r2, [pc, #376]	@ (8005078 <HAL_RCC_OscConfig+0x4dc>)
 8004f00:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004f04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f06:	f7fc f891 	bl	800102c <HAL_GetTick>
 8004f0a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004f0c:	e008      	b.n	8004f20 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004f0e:	f7fc f88d 	bl	800102c <HAL_GetTick>
 8004f12:	4602      	mov	r2, r0
 8004f14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f16:	1ad3      	subs	r3, r2, r3
 8004f18:	2b02      	cmp	r3, #2
 8004f1a:	d901      	bls.n	8004f20 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8004f1c:	2303      	movs	r3, #3
 8004f1e:	e266      	b.n	80053ee <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004f20:	4b55      	ldr	r3, [pc, #340]	@ (8005078 <HAL_RCC_OscConfig+0x4dc>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d1f0      	bne.n	8004f0e <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f003 0308 	and.w	r3, r3, #8
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d036      	beq.n	8004fa6 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	695b      	ldr	r3, [r3, #20]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d019      	beq.n	8004f74 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f40:	4b4d      	ldr	r3, [pc, #308]	@ (8005078 <HAL_RCC_OscConfig+0x4dc>)
 8004f42:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f44:	4a4c      	ldr	r2, [pc, #304]	@ (8005078 <HAL_RCC_OscConfig+0x4dc>)
 8004f46:	f043 0301 	orr.w	r3, r3, #1
 8004f4a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f4c:	f7fc f86e 	bl	800102c <HAL_GetTick>
 8004f50:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004f52:	e008      	b.n	8004f66 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f54:	f7fc f86a 	bl	800102c <HAL_GetTick>
 8004f58:	4602      	mov	r2, r0
 8004f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f5c:	1ad3      	subs	r3, r2, r3
 8004f5e:	2b02      	cmp	r3, #2
 8004f60:	d901      	bls.n	8004f66 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8004f62:	2303      	movs	r3, #3
 8004f64:	e243      	b.n	80053ee <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004f66:	4b44      	ldr	r3, [pc, #272]	@ (8005078 <HAL_RCC_OscConfig+0x4dc>)
 8004f68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f6a:	f003 0302 	and.w	r3, r3, #2
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d0f0      	beq.n	8004f54 <HAL_RCC_OscConfig+0x3b8>
 8004f72:	e018      	b.n	8004fa6 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f74:	4b40      	ldr	r3, [pc, #256]	@ (8005078 <HAL_RCC_OscConfig+0x4dc>)
 8004f76:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f78:	4a3f      	ldr	r2, [pc, #252]	@ (8005078 <HAL_RCC_OscConfig+0x4dc>)
 8004f7a:	f023 0301 	bic.w	r3, r3, #1
 8004f7e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f80:	f7fc f854 	bl	800102c <HAL_GetTick>
 8004f84:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004f86:	e008      	b.n	8004f9a <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f88:	f7fc f850 	bl	800102c <HAL_GetTick>
 8004f8c:	4602      	mov	r2, r0
 8004f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f90:	1ad3      	subs	r3, r2, r3
 8004f92:	2b02      	cmp	r3, #2
 8004f94:	d901      	bls.n	8004f9a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004f96:	2303      	movs	r3, #3
 8004f98:	e229      	b.n	80053ee <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004f9a:	4b37      	ldr	r3, [pc, #220]	@ (8005078 <HAL_RCC_OscConfig+0x4dc>)
 8004f9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f9e:	f003 0302 	and.w	r3, r3, #2
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d1f0      	bne.n	8004f88 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f003 0320 	and.w	r3, r3, #32
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d036      	beq.n	8005020 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	699b      	ldr	r3, [r3, #24]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d019      	beq.n	8004fee <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004fba:	4b2f      	ldr	r3, [pc, #188]	@ (8005078 <HAL_RCC_OscConfig+0x4dc>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4a2e      	ldr	r2, [pc, #184]	@ (8005078 <HAL_RCC_OscConfig+0x4dc>)
 8004fc0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004fc4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004fc6:	f7fc f831 	bl	800102c <HAL_GetTick>
 8004fca:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004fcc:	e008      	b.n	8004fe0 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004fce:	f7fc f82d 	bl	800102c <HAL_GetTick>
 8004fd2:	4602      	mov	r2, r0
 8004fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fd6:	1ad3      	subs	r3, r2, r3
 8004fd8:	2b02      	cmp	r3, #2
 8004fda:	d901      	bls.n	8004fe0 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8004fdc:	2303      	movs	r3, #3
 8004fde:	e206      	b.n	80053ee <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004fe0:	4b25      	ldr	r3, [pc, #148]	@ (8005078 <HAL_RCC_OscConfig+0x4dc>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d0f0      	beq.n	8004fce <HAL_RCC_OscConfig+0x432>
 8004fec:	e018      	b.n	8005020 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004fee:	4b22      	ldr	r3, [pc, #136]	@ (8005078 <HAL_RCC_OscConfig+0x4dc>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a21      	ldr	r2, [pc, #132]	@ (8005078 <HAL_RCC_OscConfig+0x4dc>)
 8004ff4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004ff8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004ffa:	f7fc f817 	bl	800102c <HAL_GetTick>
 8004ffe:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005000:	e008      	b.n	8005014 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005002:	f7fc f813 	bl	800102c <HAL_GetTick>
 8005006:	4602      	mov	r2, r0
 8005008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800500a:	1ad3      	subs	r3, r2, r3
 800500c:	2b02      	cmp	r3, #2
 800500e:	d901      	bls.n	8005014 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8005010:	2303      	movs	r3, #3
 8005012:	e1ec      	b.n	80053ee <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005014:	4b18      	ldr	r3, [pc, #96]	@ (8005078 <HAL_RCC_OscConfig+0x4dc>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800501c:	2b00      	cmp	r3, #0
 800501e:	d1f0      	bne.n	8005002 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f003 0304 	and.w	r3, r3, #4
 8005028:	2b00      	cmp	r3, #0
 800502a:	f000 80af 	beq.w	800518c <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800502e:	4b13      	ldr	r3, [pc, #76]	@ (800507c <HAL_RCC_OscConfig+0x4e0>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a12      	ldr	r2, [pc, #72]	@ (800507c <HAL_RCC_OscConfig+0x4e0>)
 8005034:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005038:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800503a:	f7fb fff7 	bl	800102c <HAL_GetTick>
 800503e:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005040:	e008      	b.n	8005054 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005042:	f7fb fff3 	bl	800102c <HAL_GetTick>
 8005046:	4602      	mov	r2, r0
 8005048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800504a:	1ad3      	subs	r3, r2, r3
 800504c:	2b64      	cmp	r3, #100	@ 0x64
 800504e:	d901      	bls.n	8005054 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8005050:	2303      	movs	r3, #3
 8005052:	e1cc      	b.n	80053ee <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005054:	4b09      	ldr	r3, [pc, #36]	@ (800507c <HAL_RCC_OscConfig+0x4e0>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800505c:	2b00      	cmp	r3, #0
 800505e:	d0f0      	beq.n	8005042 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	689b      	ldr	r3, [r3, #8]
 8005064:	2b01      	cmp	r3, #1
 8005066:	d10b      	bne.n	8005080 <HAL_RCC_OscConfig+0x4e4>
 8005068:	4b03      	ldr	r3, [pc, #12]	@ (8005078 <HAL_RCC_OscConfig+0x4dc>)
 800506a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800506c:	4a02      	ldr	r2, [pc, #8]	@ (8005078 <HAL_RCC_OscConfig+0x4dc>)
 800506e:	f043 0301 	orr.w	r3, r3, #1
 8005072:	6713      	str	r3, [r2, #112]	@ 0x70
 8005074:	e05b      	b.n	800512e <HAL_RCC_OscConfig+0x592>
 8005076:	bf00      	nop
 8005078:	58024400 	.word	0x58024400
 800507c:	58024800 	.word	0x58024800
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	689b      	ldr	r3, [r3, #8]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d112      	bne.n	80050ae <HAL_RCC_OscConfig+0x512>
 8005088:	4b9d      	ldr	r3, [pc, #628]	@ (8005300 <HAL_RCC_OscConfig+0x764>)
 800508a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800508c:	4a9c      	ldr	r2, [pc, #624]	@ (8005300 <HAL_RCC_OscConfig+0x764>)
 800508e:	f023 0301 	bic.w	r3, r3, #1
 8005092:	6713      	str	r3, [r2, #112]	@ 0x70
 8005094:	4b9a      	ldr	r3, [pc, #616]	@ (8005300 <HAL_RCC_OscConfig+0x764>)
 8005096:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005098:	4a99      	ldr	r2, [pc, #612]	@ (8005300 <HAL_RCC_OscConfig+0x764>)
 800509a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800509e:	6713      	str	r3, [r2, #112]	@ 0x70
 80050a0:	4b97      	ldr	r3, [pc, #604]	@ (8005300 <HAL_RCC_OscConfig+0x764>)
 80050a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050a4:	4a96      	ldr	r2, [pc, #600]	@ (8005300 <HAL_RCC_OscConfig+0x764>)
 80050a6:	f023 0304 	bic.w	r3, r3, #4
 80050aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80050ac:	e03f      	b.n	800512e <HAL_RCC_OscConfig+0x592>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	689b      	ldr	r3, [r3, #8]
 80050b2:	2b05      	cmp	r3, #5
 80050b4:	d112      	bne.n	80050dc <HAL_RCC_OscConfig+0x540>
 80050b6:	4b92      	ldr	r3, [pc, #584]	@ (8005300 <HAL_RCC_OscConfig+0x764>)
 80050b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050ba:	4a91      	ldr	r2, [pc, #580]	@ (8005300 <HAL_RCC_OscConfig+0x764>)
 80050bc:	f043 0304 	orr.w	r3, r3, #4
 80050c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80050c2:	4b8f      	ldr	r3, [pc, #572]	@ (8005300 <HAL_RCC_OscConfig+0x764>)
 80050c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050c6:	4a8e      	ldr	r2, [pc, #568]	@ (8005300 <HAL_RCC_OscConfig+0x764>)
 80050c8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80050cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80050ce:	4b8c      	ldr	r3, [pc, #560]	@ (8005300 <HAL_RCC_OscConfig+0x764>)
 80050d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050d2:	4a8b      	ldr	r2, [pc, #556]	@ (8005300 <HAL_RCC_OscConfig+0x764>)
 80050d4:	f043 0301 	orr.w	r3, r3, #1
 80050d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80050da:	e028      	b.n	800512e <HAL_RCC_OscConfig+0x592>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	689b      	ldr	r3, [r3, #8]
 80050e0:	2b85      	cmp	r3, #133	@ 0x85
 80050e2:	d112      	bne.n	800510a <HAL_RCC_OscConfig+0x56e>
 80050e4:	4b86      	ldr	r3, [pc, #536]	@ (8005300 <HAL_RCC_OscConfig+0x764>)
 80050e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050e8:	4a85      	ldr	r2, [pc, #532]	@ (8005300 <HAL_RCC_OscConfig+0x764>)
 80050ea:	f043 0304 	orr.w	r3, r3, #4
 80050ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80050f0:	4b83      	ldr	r3, [pc, #524]	@ (8005300 <HAL_RCC_OscConfig+0x764>)
 80050f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050f4:	4a82      	ldr	r2, [pc, #520]	@ (8005300 <HAL_RCC_OscConfig+0x764>)
 80050f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80050fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80050fc:	4b80      	ldr	r3, [pc, #512]	@ (8005300 <HAL_RCC_OscConfig+0x764>)
 80050fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005100:	4a7f      	ldr	r2, [pc, #508]	@ (8005300 <HAL_RCC_OscConfig+0x764>)
 8005102:	f043 0301 	orr.w	r3, r3, #1
 8005106:	6713      	str	r3, [r2, #112]	@ 0x70
 8005108:	e011      	b.n	800512e <HAL_RCC_OscConfig+0x592>
 800510a:	4b7d      	ldr	r3, [pc, #500]	@ (8005300 <HAL_RCC_OscConfig+0x764>)
 800510c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800510e:	4a7c      	ldr	r2, [pc, #496]	@ (8005300 <HAL_RCC_OscConfig+0x764>)
 8005110:	f023 0301 	bic.w	r3, r3, #1
 8005114:	6713      	str	r3, [r2, #112]	@ 0x70
 8005116:	4b7a      	ldr	r3, [pc, #488]	@ (8005300 <HAL_RCC_OscConfig+0x764>)
 8005118:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800511a:	4a79      	ldr	r2, [pc, #484]	@ (8005300 <HAL_RCC_OscConfig+0x764>)
 800511c:	f023 0304 	bic.w	r3, r3, #4
 8005120:	6713      	str	r3, [r2, #112]	@ 0x70
 8005122:	4b77      	ldr	r3, [pc, #476]	@ (8005300 <HAL_RCC_OscConfig+0x764>)
 8005124:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005126:	4a76      	ldr	r2, [pc, #472]	@ (8005300 <HAL_RCC_OscConfig+0x764>)
 8005128:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800512c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	689b      	ldr	r3, [r3, #8]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d015      	beq.n	8005162 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005136:	f7fb ff79 	bl	800102c <HAL_GetTick>
 800513a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800513c:	e00a      	b.n	8005154 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800513e:	f7fb ff75 	bl	800102c <HAL_GetTick>
 8005142:	4602      	mov	r2, r0
 8005144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005146:	1ad3      	subs	r3, r2, r3
 8005148:	f241 3288 	movw	r2, #5000	@ 0x1388
 800514c:	4293      	cmp	r3, r2
 800514e:	d901      	bls.n	8005154 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8005150:	2303      	movs	r3, #3
 8005152:	e14c      	b.n	80053ee <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005154:	4b6a      	ldr	r3, [pc, #424]	@ (8005300 <HAL_RCC_OscConfig+0x764>)
 8005156:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005158:	f003 0302 	and.w	r3, r3, #2
 800515c:	2b00      	cmp	r3, #0
 800515e:	d0ee      	beq.n	800513e <HAL_RCC_OscConfig+0x5a2>
 8005160:	e014      	b.n	800518c <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005162:	f7fb ff63 	bl	800102c <HAL_GetTick>
 8005166:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005168:	e00a      	b.n	8005180 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800516a:	f7fb ff5f 	bl	800102c <HAL_GetTick>
 800516e:	4602      	mov	r2, r0
 8005170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005172:	1ad3      	subs	r3, r2, r3
 8005174:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005178:	4293      	cmp	r3, r2
 800517a:	d901      	bls.n	8005180 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 800517c:	2303      	movs	r3, #3
 800517e:	e136      	b.n	80053ee <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005180:	4b5f      	ldr	r3, [pc, #380]	@ (8005300 <HAL_RCC_OscConfig+0x764>)
 8005182:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005184:	f003 0302 	and.w	r3, r3, #2
 8005188:	2b00      	cmp	r3, #0
 800518a:	d1ee      	bne.n	800516a <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005190:	2b00      	cmp	r3, #0
 8005192:	f000 812b 	beq.w	80053ec <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005196:	4b5a      	ldr	r3, [pc, #360]	@ (8005300 <HAL_RCC_OscConfig+0x764>)
 8005198:	691b      	ldr	r3, [r3, #16]
 800519a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800519e:	2b18      	cmp	r3, #24
 80051a0:	f000 80bb 	beq.w	800531a <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051a8:	2b02      	cmp	r3, #2
 80051aa:	f040 8095 	bne.w	80052d8 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051ae:	4b54      	ldr	r3, [pc, #336]	@ (8005300 <HAL_RCC_OscConfig+0x764>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4a53      	ldr	r2, [pc, #332]	@ (8005300 <HAL_RCC_OscConfig+0x764>)
 80051b4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80051b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051ba:	f7fb ff37 	bl	800102c <HAL_GetTick>
 80051be:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80051c0:	e008      	b.n	80051d4 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051c2:	f7fb ff33 	bl	800102c <HAL_GetTick>
 80051c6:	4602      	mov	r2, r0
 80051c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051ca:	1ad3      	subs	r3, r2, r3
 80051cc:	2b02      	cmp	r3, #2
 80051ce:	d901      	bls.n	80051d4 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 80051d0:	2303      	movs	r3, #3
 80051d2:	e10c      	b.n	80053ee <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80051d4:	4b4a      	ldr	r3, [pc, #296]	@ (8005300 <HAL_RCC_OscConfig+0x764>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d1f0      	bne.n	80051c2 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80051e0:	4b47      	ldr	r3, [pc, #284]	@ (8005300 <HAL_RCC_OscConfig+0x764>)
 80051e2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80051e4:	4b47      	ldr	r3, [pc, #284]	@ (8005304 <HAL_RCC_OscConfig+0x768>)
 80051e6:	4013      	ands	r3, r2
 80051e8:	687a      	ldr	r2, [r7, #4]
 80051ea:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80051ec:	687a      	ldr	r2, [r7, #4]
 80051ee:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80051f0:	0112      	lsls	r2, r2, #4
 80051f2:	430a      	orrs	r2, r1
 80051f4:	4942      	ldr	r1, [pc, #264]	@ (8005300 <HAL_RCC_OscConfig+0x764>)
 80051f6:	4313      	orrs	r3, r2
 80051f8:	628b      	str	r3, [r1, #40]	@ 0x28
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051fe:	3b01      	subs	r3, #1
 8005200:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005208:	3b01      	subs	r3, #1
 800520a:	025b      	lsls	r3, r3, #9
 800520c:	b29b      	uxth	r3, r3
 800520e:	431a      	orrs	r2, r3
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005214:	3b01      	subs	r3, #1
 8005216:	041b      	lsls	r3, r3, #16
 8005218:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800521c:	431a      	orrs	r2, r3
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005222:	3b01      	subs	r3, #1
 8005224:	061b      	lsls	r3, r3, #24
 8005226:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800522a:	4935      	ldr	r1, [pc, #212]	@ (8005300 <HAL_RCC_OscConfig+0x764>)
 800522c:	4313      	orrs	r3, r2
 800522e:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8005230:	4b33      	ldr	r3, [pc, #204]	@ (8005300 <HAL_RCC_OscConfig+0x764>)
 8005232:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005234:	4a32      	ldr	r2, [pc, #200]	@ (8005300 <HAL_RCC_OscConfig+0x764>)
 8005236:	f023 0301 	bic.w	r3, r3, #1
 800523a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800523c:	4b30      	ldr	r3, [pc, #192]	@ (8005300 <HAL_RCC_OscConfig+0x764>)
 800523e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005240:	4b31      	ldr	r3, [pc, #196]	@ (8005308 <HAL_RCC_OscConfig+0x76c>)
 8005242:	4013      	ands	r3, r2
 8005244:	687a      	ldr	r2, [r7, #4]
 8005246:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005248:	00d2      	lsls	r2, r2, #3
 800524a:	492d      	ldr	r1, [pc, #180]	@ (8005300 <HAL_RCC_OscConfig+0x764>)
 800524c:	4313      	orrs	r3, r2
 800524e:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005250:	4b2b      	ldr	r3, [pc, #172]	@ (8005300 <HAL_RCC_OscConfig+0x764>)
 8005252:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005254:	f023 020c 	bic.w	r2, r3, #12
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800525c:	4928      	ldr	r1, [pc, #160]	@ (8005300 <HAL_RCC_OscConfig+0x764>)
 800525e:	4313      	orrs	r3, r2
 8005260:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005262:	4b27      	ldr	r3, [pc, #156]	@ (8005300 <HAL_RCC_OscConfig+0x764>)
 8005264:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005266:	f023 0202 	bic.w	r2, r3, #2
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800526e:	4924      	ldr	r1, [pc, #144]	@ (8005300 <HAL_RCC_OscConfig+0x764>)
 8005270:	4313      	orrs	r3, r2
 8005272:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005274:	4b22      	ldr	r3, [pc, #136]	@ (8005300 <HAL_RCC_OscConfig+0x764>)
 8005276:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005278:	4a21      	ldr	r2, [pc, #132]	@ (8005300 <HAL_RCC_OscConfig+0x764>)
 800527a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800527e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005280:	4b1f      	ldr	r3, [pc, #124]	@ (8005300 <HAL_RCC_OscConfig+0x764>)
 8005282:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005284:	4a1e      	ldr	r2, [pc, #120]	@ (8005300 <HAL_RCC_OscConfig+0x764>)
 8005286:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800528a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800528c:	4b1c      	ldr	r3, [pc, #112]	@ (8005300 <HAL_RCC_OscConfig+0x764>)
 800528e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005290:	4a1b      	ldr	r2, [pc, #108]	@ (8005300 <HAL_RCC_OscConfig+0x764>)
 8005292:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005296:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8005298:	4b19      	ldr	r3, [pc, #100]	@ (8005300 <HAL_RCC_OscConfig+0x764>)
 800529a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800529c:	4a18      	ldr	r2, [pc, #96]	@ (8005300 <HAL_RCC_OscConfig+0x764>)
 800529e:	f043 0301 	orr.w	r3, r3, #1
 80052a2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80052a4:	4b16      	ldr	r3, [pc, #88]	@ (8005300 <HAL_RCC_OscConfig+0x764>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a15      	ldr	r2, [pc, #84]	@ (8005300 <HAL_RCC_OscConfig+0x764>)
 80052aa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80052ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052b0:	f7fb febc 	bl	800102c <HAL_GetTick>
 80052b4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80052b6:	e008      	b.n	80052ca <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052b8:	f7fb feb8 	bl	800102c <HAL_GetTick>
 80052bc:	4602      	mov	r2, r0
 80052be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052c0:	1ad3      	subs	r3, r2, r3
 80052c2:	2b02      	cmp	r3, #2
 80052c4:	d901      	bls.n	80052ca <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 80052c6:	2303      	movs	r3, #3
 80052c8:	e091      	b.n	80053ee <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80052ca:	4b0d      	ldr	r3, [pc, #52]	@ (8005300 <HAL_RCC_OscConfig+0x764>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d0f0      	beq.n	80052b8 <HAL_RCC_OscConfig+0x71c>
 80052d6:	e089      	b.n	80053ec <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052d8:	4b09      	ldr	r3, [pc, #36]	@ (8005300 <HAL_RCC_OscConfig+0x764>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a08      	ldr	r2, [pc, #32]	@ (8005300 <HAL_RCC_OscConfig+0x764>)
 80052de:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80052e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052e4:	f7fb fea2 	bl	800102c <HAL_GetTick>
 80052e8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80052ea:	e00f      	b.n	800530c <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052ec:	f7fb fe9e 	bl	800102c <HAL_GetTick>
 80052f0:	4602      	mov	r2, r0
 80052f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052f4:	1ad3      	subs	r3, r2, r3
 80052f6:	2b02      	cmp	r3, #2
 80052f8:	d908      	bls.n	800530c <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 80052fa:	2303      	movs	r3, #3
 80052fc:	e077      	b.n	80053ee <HAL_RCC_OscConfig+0x852>
 80052fe:	bf00      	nop
 8005300:	58024400 	.word	0x58024400
 8005304:	fffffc0c 	.word	0xfffffc0c
 8005308:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800530c:	4b3a      	ldr	r3, [pc, #232]	@ (80053f8 <HAL_RCC_OscConfig+0x85c>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005314:	2b00      	cmp	r3, #0
 8005316:	d1e9      	bne.n	80052ec <HAL_RCC_OscConfig+0x750>
 8005318:	e068      	b.n	80053ec <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800531a:	4b37      	ldr	r3, [pc, #220]	@ (80053f8 <HAL_RCC_OscConfig+0x85c>)
 800531c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800531e:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005320:	4b35      	ldr	r3, [pc, #212]	@ (80053f8 <HAL_RCC_OscConfig+0x85c>)
 8005322:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005324:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800532a:	2b01      	cmp	r3, #1
 800532c:	d031      	beq.n	8005392 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800532e:	693b      	ldr	r3, [r7, #16]
 8005330:	f003 0203 	and.w	r2, r3, #3
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005338:	429a      	cmp	r2, r3
 800533a:	d12a      	bne.n	8005392 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800533c:	693b      	ldr	r3, [r7, #16]
 800533e:	091b      	lsrs	r3, r3, #4
 8005340:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005348:	429a      	cmp	r2, r3
 800534a:	d122      	bne.n	8005392 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005356:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005358:	429a      	cmp	r2, r3
 800535a:	d11a      	bne.n	8005392 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	0a5b      	lsrs	r3, r3, #9
 8005360:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005368:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800536a:	429a      	cmp	r2, r3
 800536c:	d111      	bne.n	8005392 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	0c1b      	lsrs	r3, r3, #16
 8005372:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800537a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800537c:	429a      	cmp	r2, r3
 800537e:	d108      	bne.n	8005392 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	0e1b      	lsrs	r3, r3, #24
 8005384:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800538c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800538e:	429a      	cmp	r2, r3
 8005390:	d001      	beq.n	8005396 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8005392:	2301      	movs	r3, #1
 8005394:	e02b      	b.n	80053ee <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005396:	4b18      	ldr	r3, [pc, #96]	@ (80053f8 <HAL_RCC_OscConfig+0x85c>)
 8005398:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800539a:	08db      	lsrs	r3, r3, #3
 800539c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80053a0:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80053a6:	693a      	ldr	r2, [r7, #16]
 80053a8:	429a      	cmp	r2, r3
 80053aa:	d01f      	beq.n	80053ec <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80053ac:	4b12      	ldr	r3, [pc, #72]	@ (80053f8 <HAL_RCC_OscConfig+0x85c>)
 80053ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053b0:	4a11      	ldr	r2, [pc, #68]	@ (80053f8 <HAL_RCC_OscConfig+0x85c>)
 80053b2:	f023 0301 	bic.w	r3, r3, #1
 80053b6:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80053b8:	f7fb fe38 	bl	800102c <HAL_GetTick>
 80053bc:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80053be:	bf00      	nop
 80053c0:	f7fb fe34 	bl	800102c <HAL_GetTick>
 80053c4:	4602      	mov	r2, r0
 80053c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d0f9      	beq.n	80053c0 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80053cc:	4b0a      	ldr	r3, [pc, #40]	@ (80053f8 <HAL_RCC_OscConfig+0x85c>)
 80053ce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80053d0:	4b0a      	ldr	r3, [pc, #40]	@ (80053fc <HAL_RCC_OscConfig+0x860>)
 80053d2:	4013      	ands	r3, r2
 80053d4:	687a      	ldr	r2, [r7, #4]
 80053d6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80053d8:	00d2      	lsls	r2, r2, #3
 80053da:	4907      	ldr	r1, [pc, #28]	@ (80053f8 <HAL_RCC_OscConfig+0x85c>)
 80053dc:	4313      	orrs	r3, r2
 80053de:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80053e0:	4b05      	ldr	r3, [pc, #20]	@ (80053f8 <HAL_RCC_OscConfig+0x85c>)
 80053e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053e4:	4a04      	ldr	r2, [pc, #16]	@ (80053f8 <HAL_RCC_OscConfig+0x85c>)
 80053e6:	f043 0301 	orr.w	r3, r3, #1
 80053ea:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80053ec:	2300      	movs	r3, #0
}
 80053ee:	4618      	mov	r0, r3
 80053f0:	3730      	adds	r7, #48	@ 0x30
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bd80      	pop	{r7, pc}
 80053f6:	bf00      	nop
 80053f8:	58024400 	.word	0x58024400
 80053fc:	ffff0007 	.word	0xffff0007

08005400 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b086      	sub	sp, #24
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
 8005408:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d101      	bne.n	8005414 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005410:	2301      	movs	r3, #1
 8005412:	e19c      	b.n	800574e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005414:	4b8a      	ldr	r3, [pc, #552]	@ (8005640 <HAL_RCC_ClockConfig+0x240>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f003 030f 	and.w	r3, r3, #15
 800541c:	683a      	ldr	r2, [r7, #0]
 800541e:	429a      	cmp	r2, r3
 8005420:	d910      	bls.n	8005444 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005422:	4b87      	ldr	r3, [pc, #540]	@ (8005640 <HAL_RCC_ClockConfig+0x240>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f023 020f 	bic.w	r2, r3, #15
 800542a:	4985      	ldr	r1, [pc, #532]	@ (8005640 <HAL_RCC_ClockConfig+0x240>)
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	4313      	orrs	r3, r2
 8005430:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005432:	4b83      	ldr	r3, [pc, #524]	@ (8005640 <HAL_RCC_ClockConfig+0x240>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f003 030f 	and.w	r3, r3, #15
 800543a:	683a      	ldr	r2, [r7, #0]
 800543c:	429a      	cmp	r2, r3
 800543e:	d001      	beq.n	8005444 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005440:	2301      	movs	r3, #1
 8005442:	e184      	b.n	800574e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f003 0304 	and.w	r3, r3, #4
 800544c:	2b00      	cmp	r3, #0
 800544e:	d010      	beq.n	8005472 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	691a      	ldr	r2, [r3, #16]
 8005454:	4b7b      	ldr	r3, [pc, #492]	@ (8005644 <HAL_RCC_ClockConfig+0x244>)
 8005456:	699b      	ldr	r3, [r3, #24]
 8005458:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800545c:	429a      	cmp	r2, r3
 800545e:	d908      	bls.n	8005472 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005460:	4b78      	ldr	r3, [pc, #480]	@ (8005644 <HAL_RCC_ClockConfig+0x244>)
 8005462:	699b      	ldr	r3, [r3, #24]
 8005464:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	691b      	ldr	r3, [r3, #16]
 800546c:	4975      	ldr	r1, [pc, #468]	@ (8005644 <HAL_RCC_ClockConfig+0x244>)
 800546e:	4313      	orrs	r3, r2
 8005470:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f003 0308 	and.w	r3, r3, #8
 800547a:	2b00      	cmp	r3, #0
 800547c:	d010      	beq.n	80054a0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	695a      	ldr	r2, [r3, #20]
 8005482:	4b70      	ldr	r3, [pc, #448]	@ (8005644 <HAL_RCC_ClockConfig+0x244>)
 8005484:	69db      	ldr	r3, [r3, #28]
 8005486:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800548a:	429a      	cmp	r2, r3
 800548c:	d908      	bls.n	80054a0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800548e:	4b6d      	ldr	r3, [pc, #436]	@ (8005644 <HAL_RCC_ClockConfig+0x244>)
 8005490:	69db      	ldr	r3, [r3, #28]
 8005492:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	695b      	ldr	r3, [r3, #20]
 800549a:	496a      	ldr	r1, [pc, #424]	@ (8005644 <HAL_RCC_ClockConfig+0x244>)
 800549c:	4313      	orrs	r3, r2
 800549e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f003 0310 	and.w	r3, r3, #16
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d010      	beq.n	80054ce <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	699a      	ldr	r2, [r3, #24]
 80054b0:	4b64      	ldr	r3, [pc, #400]	@ (8005644 <HAL_RCC_ClockConfig+0x244>)
 80054b2:	69db      	ldr	r3, [r3, #28]
 80054b4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80054b8:	429a      	cmp	r2, r3
 80054ba:	d908      	bls.n	80054ce <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80054bc:	4b61      	ldr	r3, [pc, #388]	@ (8005644 <HAL_RCC_ClockConfig+0x244>)
 80054be:	69db      	ldr	r3, [r3, #28]
 80054c0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	699b      	ldr	r3, [r3, #24]
 80054c8:	495e      	ldr	r1, [pc, #376]	@ (8005644 <HAL_RCC_ClockConfig+0x244>)
 80054ca:	4313      	orrs	r3, r2
 80054cc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f003 0320 	and.w	r3, r3, #32
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d010      	beq.n	80054fc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	69da      	ldr	r2, [r3, #28]
 80054de:	4b59      	ldr	r3, [pc, #356]	@ (8005644 <HAL_RCC_ClockConfig+0x244>)
 80054e0:	6a1b      	ldr	r3, [r3, #32]
 80054e2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80054e6:	429a      	cmp	r2, r3
 80054e8:	d908      	bls.n	80054fc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80054ea:	4b56      	ldr	r3, [pc, #344]	@ (8005644 <HAL_RCC_ClockConfig+0x244>)
 80054ec:	6a1b      	ldr	r3, [r3, #32]
 80054ee:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	69db      	ldr	r3, [r3, #28]
 80054f6:	4953      	ldr	r1, [pc, #332]	@ (8005644 <HAL_RCC_ClockConfig+0x244>)
 80054f8:	4313      	orrs	r3, r2
 80054fa:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f003 0302 	and.w	r3, r3, #2
 8005504:	2b00      	cmp	r3, #0
 8005506:	d010      	beq.n	800552a <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	68da      	ldr	r2, [r3, #12]
 800550c:	4b4d      	ldr	r3, [pc, #308]	@ (8005644 <HAL_RCC_ClockConfig+0x244>)
 800550e:	699b      	ldr	r3, [r3, #24]
 8005510:	f003 030f 	and.w	r3, r3, #15
 8005514:	429a      	cmp	r2, r3
 8005516:	d908      	bls.n	800552a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005518:	4b4a      	ldr	r3, [pc, #296]	@ (8005644 <HAL_RCC_ClockConfig+0x244>)
 800551a:	699b      	ldr	r3, [r3, #24]
 800551c:	f023 020f 	bic.w	r2, r3, #15
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	68db      	ldr	r3, [r3, #12]
 8005524:	4947      	ldr	r1, [pc, #284]	@ (8005644 <HAL_RCC_ClockConfig+0x244>)
 8005526:	4313      	orrs	r3, r2
 8005528:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f003 0301 	and.w	r3, r3, #1
 8005532:	2b00      	cmp	r3, #0
 8005534:	d055      	beq.n	80055e2 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005536:	4b43      	ldr	r3, [pc, #268]	@ (8005644 <HAL_RCC_ClockConfig+0x244>)
 8005538:	699b      	ldr	r3, [r3, #24]
 800553a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	689b      	ldr	r3, [r3, #8]
 8005542:	4940      	ldr	r1, [pc, #256]	@ (8005644 <HAL_RCC_ClockConfig+0x244>)
 8005544:	4313      	orrs	r3, r2
 8005546:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	2b02      	cmp	r3, #2
 800554e:	d107      	bne.n	8005560 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005550:	4b3c      	ldr	r3, [pc, #240]	@ (8005644 <HAL_RCC_ClockConfig+0x244>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005558:	2b00      	cmp	r3, #0
 800555a:	d121      	bne.n	80055a0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800555c:	2301      	movs	r3, #1
 800555e:	e0f6      	b.n	800574e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	2b03      	cmp	r3, #3
 8005566:	d107      	bne.n	8005578 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005568:	4b36      	ldr	r3, [pc, #216]	@ (8005644 <HAL_RCC_ClockConfig+0x244>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005570:	2b00      	cmp	r3, #0
 8005572:	d115      	bne.n	80055a0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005574:	2301      	movs	r3, #1
 8005576:	e0ea      	b.n	800574e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	2b01      	cmp	r3, #1
 800557e:	d107      	bne.n	8005590 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005580:	4b30      	ldr	r3, [pc, #192]	@ (8005644 <HAL_RCC_ClockConfig+0x244>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005588:	2b00      	cmp	r3, #0
 800558a:	d109      	bne.n	80055a0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800558c:	2301      	movs	r3, #1
 800558e:	e0de      	b.n	800574e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005590:	4b2c      	ldr	r3, [pc, #176]	@ (8005644 <HAL_RCC_ClockConfig+0x244>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f003 0304 	and.w	r3, r3, #4
 8005598:	2b00      	cmp	r3, #0
 800559a:	d101      	bne.n	80055a0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800559c:	2301      	movs	r3, #1
 800559e:	e0d6      	b.n	800574e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80055a0:	4b28      	ldr	r3, [pc, #160]	@ (8005644 <HAL_RCC_ClockConfig+0x244>)
 80055a2:	691b      	ldr	r3, [r3, #16]
 80055a4:	f023 0207 	bic.w	r2, r3, #7
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	4925      	ldr	r1, [pc, #148]	@ (8005644 <HAL_RCC_ClockConfig+0x244>)
 80055ae:	4313      	orrs	r3, r2
 80055b0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055b2:	f7fb fd3b 	bl	800102c <HAL_GetTick>
 80055b6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055b8:	e00a      	b.n	80055d0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80055ba:	f7fb fd37 	bl	800102c <HAL_GetTick>
 80055be:	4602      	mov	r2, r0
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	1ad3      	subs	r3, r2, r3
 80055c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d901      	bls.n	80055d0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80055cc:	2303      	movs	r3, #3
 80055ce:	e0be      	b.n	800574e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055d0:	4b1c      	ldr	r3, [pc, #112]	@ (8005644 <HAL_RCC_ClockConfig+0x244>)
 80055d2:	691b      	ldr	r3, [r3, #16]
 80055d4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	00db      	lsls	r3, r3, #3
 80055de:	429a      	cmp	r2, r3
 80055e0:	d1eb      	bne.n	80055ba <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f003 0302 	and.w	r3, r3, #2
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d010      	beq.n	8005610 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	68da      	ldr	r2, [r3, #12]
 80055f2:	4b14      	ldr	r3, [pc, #80]	@ (8005644 <HAL_RCC_ClockConfig+0x244>)
 80055f4:	699b      	ldr	r3, [r3, #24]
 80055f6:	f003 030f 	and.w	r3, r3, #15
 80055fa:	429a      	cmp	r2, r3
 80055fc:	d208      	bcs.n	8005610 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80055fe:	4b11      	ldr	r3, [pc, #68]	@ (8005644 <HAL_RCC_ClockConfig+0x244>)
 8005600:	699b      	ldr	r3, [r3, #24]
 8005602:	f023 020f 	bic.w	r2, r3, #15
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	68db      	ldr	r3, [r3, #12]
 800560a:	490e      	ldr	r1, [pc, #56]	@ (8005644 <HAL_RCC_ClockConfig+0x244>)
 800560c:	4313      	orrs	r3, r2
 800560e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005610:	4b0b      	ldr	r3, [pc, #44]	@ (8005640 <HAL_RCC_ClockConfig+0x240>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f003 030f 	and.w	r3, r3, #15
 8005618:	683a      	ldr	r2, [r7, #0]
 800561a:	429a      	cmp	r2, r3
 800561c:	d214      	bcs.n	8005648 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800561e:	4b08      	ldr	r3, [pc, #32]	@ (8005640 <HAL_RCC_ClockConfig+0x240>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f023 020f 	bic.w	r2, r3, #15
 8005626:	4906      	ldr	r1, [pc, #24]	@ (8005640 <HAL_RCC_ClockConfig+0x240>)
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	4313      	orrs	r3, r2
 800562c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800562e:	4b04      	ldr	r3, [pc, #16]	@ (8005640 <HAL_RCC_ClockConfig+0x240>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f003 030f 	and.w	r3, r3, #15
 8005636:	683a      	ldr	r2, [r7, #0]
 8005638:	429a      	cmp	r2, r3
 800563a:	d005      	beq.n	8005648 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800563c:	2301      	movs	r3, #1
 800563e:	e086      	b.n	800574e <HAL_RCC_ClockConfig+0x34e>
 8005640:	52002000 	.word	0x52002000
 8005644:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f003 0304 	and.w	r3, r3, #4
 8005650:	2b00      	cmp	r3, #0
 8005652:	d010      	beq.n	8005676 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	691a      	ldr	r2, [r3, #16]
 8005658:	4b3f      	ldr	r3, [pc, #252]	@ (8005758 <HAL_RCC_ClockConfig+0x358>)
 800565a:	699b      	ldr	r3, [r3, #24]
 800565c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005660:	429a      	cmp	r2, r3
 8005662:	d208      	bcs.n	8005676 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005664:	4b3c      	ldr	r3, [pc, #240]	@ (8005758 <HAL_RCC_ClockConfig+0x358>)
 8005666:	699b      	ldr	r3, [r3, #24]
 8005668:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	691b      	ldr	r3, [r3, #16]
 8005670:	4939      	ldr	r1, [pc, #228]	@ (8005758 <HAL_RCC_ClockConfig+0x358>)
 8005672:	4313      	orrs	r3, r2
 8005674:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f003 0308 	and.w	r3, r3, #8
 800567e:	2b00      	cmp	r3, #0
 8005680:	d010      	beq.n	80056a4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	695a      	ldr	r2, [r3, #20]
 8005686:	4b34      	ldr	r3, [pc, #208]	@ (8005758 <HAL_RCC_ClockConfig+0x358>)
 8005688:	69db      	ldr	r3, [r3, #28]
 800568a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800568e:	429a      	cmp	r2, r3
 8005690:	d208      	bcs.n	80056a4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005692:	4b31      	ldr	r3, [pc, #196]	@ (8005758 <HAL_RCC_ClockConfig+0x358>)
 8005694:	69db      	ldr	r3, [r3, #28]
 8005696:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	695b      	ldr	r3, [r3, #20]
 800569e:	492e      	ldr	r1, [pc, #184]	@ (8005758 <HAL_RCC_ClockConfig+0x358>)
 80056a0:	4313      	orrs	r3, r2
 80056a2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f003 0310 	and.w	r3, r3, #16
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d010      	beq.n	80056d2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	699a      	ldr	r2, [r3, #24]
 80056b4:	4b28      	ldr	r3, [pc, #160]	@ (8005758 <HAL_RCC_ClockConfig+0x358>)
 80056b6:	69db      	ldr	r3, [r3, #28]
 80056b8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80056bc:	429a      	cmp	r2, r3
 80056be:	d208      	bcs.n	80056d2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80056c0:	4b25      	ldr	r3, [pc, #148]	@ (8005758 <HAL_RCC_ClockConfig+0x358>)
 80056c2:	69db      	ldr	r3, [r3, #28]
 80056c4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	699b      	ldr	r3, [r3, #24]
 80056cc:	4922      	ldr	r1, [pc, #136]	@ (8005758 <HAL_RCC_ClockConfig+0x358>)
 80056ce:	4313      	orrs	r3, r2
 80056d0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f003 0320 	and.w	r3, r3, #32
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d010      	beq.n	8005700 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	69da      	ldr	r2, [r3, #28]
 80056e2:	4b1d      	ldr	r3, [pc, #116]	@ (8005758 <HAL_RCC_ClockConfig+0x358>)
 80056e4:	6a1b      	ldr	r3, [r3, #32]
 80056e6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80056ea:	429a      	cmp	r2, r3
 80056ec:	d208      	bcs.n	8005700 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80056ee:	4b1a      	ldr	r3, [pc, #104]	@ (8005758 <HAL_RCC_ClockConfig+0x358>)
 80056f0:	6a1b      	ldr	r3, [r3, #32]
 80056f2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	69db      	ldr	r3, [r3, #28]
 80056fa:	4917      	ldr	r1, [pc, #92]	@ (8005758 <HAL_RCC_ClockConfig+0x358>)
 80056fc:	4313      	orrs	r3, r2
 80056fe:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8005700:	f000 f834 	bl	800576c <HAL_RCC_GetSysClockFreq>
 8005704:	4602      	mov	r2, r0
 8005706:	4b14      	ldr	r3, [pc, #80]	@ (8005758 <HAL_RCC_ClockConfig+0x358>)
 8005708:	699b      	ldr	r3, [r3, #24]
 800570a:	0a1b      	lsrs	r3, r3, #8
 800570c:	f003 030f 	and.w	r3, r3, #15
 8005710:	4912      	ldr	r1, [pc, #72]	@ (800575c <HAL_RCC_ClockConfig+0x35c>)
 8005712:	5ccb      	ldrb	r3, [r1, r3]
 8005714:	f003 031f 	and.w	r3, r3, #31
 8005718:	fa22 f303 	lsr.w	r3, r2, r3
 800571c:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800571e:	4b0e      	ldr	r3, [pc, #56]	@ (8005758 <HAL_RCC_ClockConfig+0x358>)
 8005720:	699b      	ldr	r3, [r3, #24]
 8005722:	f003 030f 	and.w	r3, r3, #15
 8005726:	4a0d      	ldr	r2, [pc, #52]	@ (800575c <HAL_RCC_ClockConfig+0x35c>)
 8005728:	5cd3      	ldrb	r3, [r2, r3]
 800572a:	f003 031f 	and.w	r3, r3, #31
 800572e:	693a      	ldr	r2, [r7, #16]
 8005730:	fa22 f303 	lsr.w	r3, r2, r3
 8005734:	4a0a      	ldr	r2, [pc, #40]	@ (8005760 <HAL_RCC_ClockConfig+0x360>)
 8005736:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005738:	4a0a      	ldr	r2, [pc, #40]	@ (8005764 <HAL_RCC_ClockConfig+0x364>)
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800573e:	4b0a      	ldr	r3, [pc, #40]	@ (8005768 <HAL_RCC_ClockConfig+0x368>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4618      	mov	r0, r3
 8005744:	f7fb f9dc 	bl	8000b00 <HAL_InitTick>
 8005748:	4603      	mov	r3, r0
 800574a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800574c:	7bfb      	ldrb	r3, [r7, #15]
}
 800574e:	4618      	mov	r0, r3
 8005750:	3718      	adds	r7, #24
 8005752:	46bd      	mov	sp, r7
 8005754:	bd80      	pop	{r7, pc}
 8005756:	bf00      	nop
 8005758:	58024400 	.word	0x58024400
 800575c:	08009e84 	.word	0x08009e84
 8005760:	24000004 	.word	0x24000004
 8005764:	24000000 	.word	0x24000000
 8005768:	24000008 	.word	0x24000008

0800576c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800576c:	b480      	push	{r7}
 800576e:	b089      	sub	sp, #36	@ 0x24
 8005770:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005772:	4bb3      	ldr	r3, [pc, #716]	@ (8005a40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005774:	691b      	ldr	r3, [r3, #16]
 8005776:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800577a:	2b18      	cmp	r3, #24
 800577c:	f200 8155 	bhi.w	8005a2a <HAL_RCC_GetSysClockFreq+0x2be>
 8005780:	a201      	add	r2, pc, #4	@ (adr r2, 8005788 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005782:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005786:	bf00      	nop
 8005788:	080057ed 	.word	0x080057ed
 800578c:	08005a2b 	.word	0x08005a2b
 8005790:	08005a2b 	.word	0x08005a2b
 8005794:	08005a2b 	.word	0x08005a2b
 8005798:	08005a2b 	.word	0x08005a2b
 800579c:	08005a2b 	.word	0x08005a2b
 80057a0:	08005a2b 	.word	0x08005a2b
 80057a4:	08005a2b 	.word	0x08005a2b
 80057a8:	08005813 	.word	0x08005813
 80057ac:	08005a2b 	.word	0x08005a2b
 80057b0:	08005a2b 	.word	0x08005a2b
 80057b4:	08005a2b 	.word	0x08005a2b
 80057b8:	08005a2b 	.word	0x08005a2b
 80057bc:	08005a2b 	.word	0x08005a2b
 80057c0:	08005a2b 	.word	0x08005a2b
 80057c4:	08005a2b 	.word	0x08005a2b
 80057c8:	08005819 	.word	0x08005819
 80057cc:	08005a2b 	.word	0x08005a2b
 80057d0:	08005a2b 	.word	0x08005a2b
 80057d4:	08005a2b 	.word	0x08005a2b
 80057d8:	08005a2b 	.word	0x08005a2b
 80057dc:	08005a2b 	.word	0x08005a2b
 80057e0:	08005a2b 	.word	0x08005a2b
 80057e4:	08005a2b 	.word	0x08005a2b
 80057e8:	0800581f 	.word	0x0800581f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80057ec:	4b94      	ldr	r3, [pc, #592]	@ (8005a40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f003 0320 	and.w	r3, r3, #32
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d009      	beq.n	800580c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80057f8:	4b91      	ldr	r3, [pc, #580]	@ (8005a40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	08db      	lsrs	r3, r3, #3
 80057fe:	f003 0303 	and.w	r3, r3, #3
 8005802:	4a90      	ldr	r2, [pc, #576]	@ (8005a44 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005804:	fa22 f303 	lsr.w	r3, r2, r3
 8005808:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800580a:	e111      	b.n	8005a30 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800580c:	4b8d      	ldr	r3, [pc, #564]	@ (8005a44 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800580e:	61bb      	str	r3, [r7, #24]
      break;
 8005810:	e10e      	b.n	8005a30 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005812:	4b8d      	ldr	r3, [pc, #564]	@ (8005a48 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005814:	61bb      	str	r3, [r7, #24]
      break;
 8005816:	e10b      	b.n	8005a30 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005818:	4b8c      	ldr	r3, [pc, #560]	@ (8005a4c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800581a:	61bb      	str	r3, [r7, #24]
      break;
 800581c:	e108      	b.n	8005a30 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800581e:	4b88      	ldr	r3, [pc, #544]	@ (8005a40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005820:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005822:	f003 0303 	and.w	r3, r3, #3
 8005826:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005828:	4b85      	ldr	r3, [pc, #532]	@ (8005a40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800582a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800582c:	091b      	lsrs	r3, r3, #4
 800582e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005832:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005834:	4b82      	ldr	r3, [pc, #520]	@ (8005a40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005836:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005838:	f003 0301 	and.w	r3, r3, #1
 800583c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800583e:	4b80      	ldr	r3, [pc, #512]	@ (8005a40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005840:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005842:	08db      	lsrs	r3, r3, #3
 8005844:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005848:	68fa      	ldr	r2, [r7, #12]
 800584a:	fb02 f303 	mul.w	r3, r2, r3
 800584e:	ee07 3a90 	vmov	s15, r3
 8005852:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005856:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	2b00      	cmp	r3, #0
 800585e:	f000 80e1 	beq.w	8005a24 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005862:	697b      	ldr	r3, [r7, #20]
 8005864:	2b02      	cmp	r3, #2
 8005866:	f000 8083 	beq.w	8005970 <HAL_RCC_GetSysClockFreq+0x204>
 800586a:	697b      	ldr	r3, [r7, #20]
 800586c:	2b02      	cmp	r3, #2
 800586e:	f200 80a1 	bhi.w	80059b4 <HAL_RCC_GetSysClockFreq+0x248>
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d003      	beq.n	8005880 <HAL_RCC_GetSysClockFreq+0x114>
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	2b01      	cmp	r3, #1
 800587c:	d056      	beq.n	800592c <HAL_RCC_GetSysClockFreq+0x1c0>
 800587e:	e099      	b.n	80059b4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005880:	4b6f      	ldr	r3, [pc, #444]	@ (8005a40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f003 0320 	and.w	r3, r3, #32
 8005888:	2b00      	cmp	r3, #0
 800588a:	d02d      	beq.n	80058e8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800588c:	4b6c      	ldr	r3, [pc, #432]	@ (8005a40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	08db      	lsrs	r3, r3, #3
 8005892:	f003 0303 	and.w	r3, r3, #3
 8005896:	4a6b      	ldr	r2, [pc, #428]	@ (8005a44 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005898:	fa22 f303 	lsr.w	r3, r2, r3
 800589c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	ee07 3a90 	vmov	s15, r3
 80058a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	ee07 3a90 	vmov	s15, r3
 80058ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058b6:	4b62      	ldr	r3, [pc, #392]	@ (8005a40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058be:	ee07 3a90 	vmov	s15, r3
 80058c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80058ca:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8005a50 <HAL_RCC_GetSysClockFreq+0x2e4>
 80058ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80058da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058e2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80058e6:	e087      	b.n	80059f8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80058e8:	693b      	ldr	r3, [r7, #16]
 80058ea:	ee07 3a90 	vmov	s15, r3
 80058ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058f2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8005a54 <HAL_RCC_GetSysClockFreq+0x2e8>
 80058f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058fa:	4b51      	ldr	r3, [pc, #324]	@ (8005a40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005902:	ee07 3a90 	vmov	s15, r3
 8005906:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800590a:	ed97 6a02 	vldr	s12, [r7, #8]
 800590e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8005a50 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005912:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005916:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800591a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800591e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005922:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005926:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800592a:	e065      	b.n	80059f8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800592c:	693b      	ldr	r3, [r7, #16]
 800592e:	ee07 3a90 	vmov	s15, r3
 8005932:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005936:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8005a58 <HAL_RCC_GetSysClockFreq+0x2ec>
 800593a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800593e:	4b40      	ldr	r3, [pc, #256]	@ (8005a40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005942:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005946:	ee07 3a90 	vmov	s15, r3
 800594a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800594e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005952:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8005a50 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005956:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800595a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800595e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005962:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005966:	ee67 7a27 	vmul.f32	s15, s14, s15
 800596a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800596e:	e043      	b.n	80059f8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	ee07 3a90 	vmov	s15, r3
 8005976:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800597a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8005a5c <HAL_RCC_GetSysClockFreq+0x2f0>
 800597e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005982:	4b2f      	ldr	r3, [pc, #188]	@ (8005a40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005986:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800598a:	ee07 3a90 	vmov	s15, r3
 800598e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005992:	ed97 6a02 	vldr	s12, [r7, #8]
 8005996:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8005a50 <HAL_RCC_GetSysClockFreq+0x2e4>
 800599a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800599e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80059a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059ae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80059b2:	e021      	b.n	80059f8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80059b4:	693b      	ldr	r3, [r7, #16]
 80059b6:	ee07 3a90 	vmov	s15, r3
 80059ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059be:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8005a58 <HAL_RCC_GetSysClockFreq+0x2ec>
 80059c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059c6:	4b1e      	ldr	r3, [pc, #120]	@ (8005a40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80059c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059ce:	ee07 3a90 	vmov	s15, r3
 80059d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80059da:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8005a50 <HAL_RCC_GetSysClockFreq+0x2e4>
 80059de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80059ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059f2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80059f6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80059f8:	4b11      	ldr	r3, [pc, #68]	@ (8005a40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80059fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059fc:	0a5b      	lsrs	r3, r3, #9
 80059fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005a02:	3301      	adds	r3, #1
 8005a04:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	ee07 3a90 	vmov	s15, r3
 8005a0c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005a10:	edd7 6a07 	vldr	s13, [r7, #28]
 8005a14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a1c:	ee17 3a90 	vmov	r3, s15
 8005a20:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005a22:	e005      	b.n	8005a30 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005a24:	2300      	movs	r3, #0
 8005a26:	61bb      	str	r3, [r7, #24]
      break;
 8005a28:	e002      	b.n	8005a30 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005a2a:	4b07      	ldr	r3, [pc, #28]	@ (8005a48 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005a2c:	61bb      	str	r3, [r7, #24]
      break;
 8005a2e:	bf00      	nop
  }

  return sysclockfreq;
 8005a30:	69bb      	ldr	r3, [r7, #24]
}
 8005a32:	4618      	mov	r0, r3
 8005a34:	3724      	adds	r7, #36	@ 0x24
 8005a36:	46bd      	mov	sp, r7
 8005a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3c:	4770      	bx	lr
 8005a3e:	bf00      	nop
 8005a40:	58024400 	.word	0x58024400
 8005a44:	03d09000 	.word	0x03d09000
 8005a48:	003d0900 	.word	0x003d0900
 8005a4c:	016e3600 	.word	0x016e3600
 8005a50:	46000000 	.word	0x46000000
 8005a54:	4c742400 	.word	0x4c742400
 8005a58:	4a742400 	.word	0x4a742400
 8005a5c:	4bb71b00 	.word	0x4bb71b00

08005a60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b082      	sub	sp, #8
 8005a64:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8005a66:	f7ff fe81 	bl	800576c <HAL_RCC_GetSysClockFreq>
 8005a6a:	4602      	mov	r2, r0
 8005a6c:	4b10      	ldr	r3, [pc, #64]	@ (8005ab0 <HAL_RCC_GetHCLKFreq+0x50>)
 8005a6e:	699b      	ldr	r3, [r3, #24]
 8005a70:	0a1b      	lsrs	r3, r3, #8
 8005a72:	f003 030f 	and.w	r3, r3, #15
 8005a76:	490f      	ldr	r1, [pc, #60]	@ (8005ab4 <HAL_RCC_GetHCLKFreq+0x54>)
 8005a78:	5ccb      	ldrb	r3, [r1, r3]
 8005a7a:	f003 031f 	and.w	r3, r3, #31
 8005a7e:	fa22 f303 	lsr.w	r3, r2, r3
 8005a82:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8005a84:	4b0a      	ldr	r3, [pc, #40]	@ (8005ab0 <HAL_RCC_GetHCLKFreq+0x50>)
 8005a86:	699b      	ldr	r3, [r3, #24]
 8005a88:	f003 030f 	and.w	r3, r3, #15
 8005a8c:	4a09      	ldr	r2, [pc, #36]	@ (8005ab4 <HAL_RCC_GetHCLKFreq+0x54>)
 8005a8e:	5cd3      	ldrb	r3, [r2, r3]
 8005a90:	f003 031f 	and.w	r3, r3, #31
 8005a94:	687a      	ldr	r2, [r7, #4]
 8005a96:	fa22 f303 	lsr.w	r3, r2, r3
 8005a9a:	4a07      	ldr	r2, [pc, #28]	@ (8005ab8 <HAL_RCC_GetHCLKFreq+0x58>)
 8005a9c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005a9e:	4a07      	ldr	r2, [pc, #28]	@ (8005abc <HAL_RCC_GetHCLKFreq+0x5c>)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005aa4:	4b04      	ldr	r3, [pc, #16]	@ (8005ab8 <HAL_RCC_GetHCLKFreq+0x58>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
}
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	3708      	adds	r7, #8
 8005aac:	46bd      	mov	sp, r7
 8005aae:	bd80      	pop	{r7, pc}
 8005ab0:	58024400 	.word	0x58024400
 8005ab4:	08009e84 	.word	0x08009e84
 8005ab8:	24000004 	.word	0x24000004
 8005abc:	24000000 	.word	0x24000000

08005ac0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8005ac4:	f7ff ffcc 	bl	8005a60 <HAL_RCC_GetHCLKFreq>
 8005ac8:	4602      	mov	r2, r0
 8005aca:	4b06      	ldr	r3, [pc, #24]	@ (8005ae4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005acc:	69db      	ldr	r3, [r3, #28]
 8005ace:	091b      	lsrs	r3, r3, #4
 8005ad0:	f003 0307 	and.w	r3, r3, #7
 8005ad4:	4904      	ldr	r1, [pc, #16]	@ (8005ae8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005ad6:	5ccb      	ldrb	r3, [r1, r3]
 8005ad8:	f003 031f 	and.w	r3, r3, #31
 8005adc:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	bd80      	pop	{r7, pc}
 8005ae4:	58024400 	.word	0x58024400
 8005ae8:	08009e84 	.word	0x08009e84

08005aec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8005af0:	f7ff ffb6 	bl	8005a60 <HAL_RCC_GetHCLKFreq>
 8005af4:	4602      	mov	r2, r0
 8005af6:	4b06      	ldr	r3, [pc, #24]	@ (8005b10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005af8:	69db      	ldr	r3, [r3, #28]
 8005afa:	0a1b      	lsrs	r3, r3, #8
 8005afc:	f003 0307 	and.w	r3, r3, #7
 8005b00:	4904      	ldr	r1, [pc, #16]	@ (8005b14 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005b02:	5ccb      	ldrb	r3, [r1, r3]
 8005b04:	f003 031f 	and.w	r3, r3, #31
 8005b08:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	bd80      	pop	{r7, pc}
 8005b10:	58024400 	.word	0x58024400
 8005b14:	08009e84 	.word	0x08009e84

08005b18 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b083      	sub	sp, #12
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
 8005b20:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	223f      	movs	r2, #63	@ 0x3f
 8005b26:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005b28:	4b1a      	ldr	r3, [pc, #104]	@ (8005b94 <HAL_RCC_GetClockConfig+0x7c>)
 8005b2a:	691b      	ldr	r3, [r3, #16]
 8005b2c:	f003 0207 	and.w	r2, r3, #7
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	605a      	str	r2, [r3, #4]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
#else
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE);
 8005b34:	4b17      	ldr	r3, [pc, #92]	@ (8005b94 <HAL_RCC_GetClockConfig+0x7c>)
 8005b36:	699b      	ldr	r3, [r3, #24]
 8005b38:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE);
 8005b40:	4b14      	ldr	r3, [pc, #80]	@ (8005b94 <HAL_RCC_GetClockConfig+0x7c>)
 8005b42:	699b      	ldr	r3, [r3, #24]
 8005b44:	f003 020f 	and.w	r2, r3, #15
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE);
 8005b4c:	4b11      	ldr	r3, [pc, #68]	@ (8005b94 <HAL_RCC_GetClockConfig+0x7c>)
 8005b4e:	699b      	ldr	r3, [r3, #24]
 8005b50:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1);
 8005b58:	4b0e      	ldr	r3, [pc, #56]	@ (8005b94 <HAL_RCC_GetClockConfig+0x7c>)
 8005b5a:	69db      	ldr	r3, [r3, #28]
 8005b5c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2);
 8005b64:	4b0b      	ldr	r3, [pc, #44]	@ (8005b94 <HAL_RCC_GetClockConfig+0x7c>)
 8005b66:	69db      	ldr	r3, [r3, #28]
 8005b68:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
 8005b70:	4b08      	ldr	r3, [pc, #32]	@ (8005b94 <HAL_RCC_GetClockConfig+0x7c>)
 8005b72:	6a1b      	ldr	r3, [r3, #32]
 8005b74:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	61da      	str	r2, [r3, #28]
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005b7c:	4b06      	ldr	r3, [pc, #24]	@ (8005b98 <HAL_RCC_GetClockConfig+0x80>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f003 020f 	and.w	r2, r3, #15
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	601a      	str	r2, [r3, #0]
}
 8005b88:	bf00      	nop
 8005b8a:	370c      	adds	r7, #12
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b92:	4770      	bx	lr
 8005b94:	58024400 	.word	0x58024400
 8005b98:	52002000 	.word	0x52002000

08005b9c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005b9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ba0:	b0c8      	sub	sp, #288	@ 0x120
 8005ba2:	af00      	add	r7, sp, #0
 8005ba4:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005ba8:	2300      	movs	r3, #0
 8005baa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005bae:	2300      	movs	r3, #0
 8005bb0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005bb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bbc:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8005bc0:	2500      	movs	r5, #0
 8005bc2:	ea54 0305 	orrs.w	r3, r4, r5
 8005bc6:	d049      	beq.n	8005c5c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005bc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005bcc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005bce:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005bd2:	d02f      	beq.n	8005c34 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005bd4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005bd8:	d828      	bhi.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005bda:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005bde:	d01a      	beq.n	8005c16 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005be0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005be4:	d822      	bhi.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d003      	beq.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005bea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005bee:	d007      	beq.n	8005c00 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005bf0:	e01c      	b.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005bf2:	4ba7      	ldr	r3, [pc, #668]	@ (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005bf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bf6:	4aa6      	ldr	r2, [pc, #664]	@ (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005bf8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005bfc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005bfe:	e01a      	b.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005c00:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005c04:	3308      	adds	r3, #8
 8005c06:	2102      	movs	r1, #2
 8005c08:	4618      	mov	r0, r3
 8005c0a:	f001 fc43 	bl	8007494 <RCCEx_PLL2_Config>
 8005c0e:	4603      	mov	r3, r0
 8005c10:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005c14:	e00f      	b.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005c16:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005c1a:	3328      	adds	r3, #40	@ 0x28
 8005c1c:	2102      	movs	r1, #2
 8005c1e:	4618      	mov	r0, r3
 8005c20:	f001 fcea 	bl	80075f8 <RCCEx_PLL3_Config>
 8005c24:	4603      	mov	r3, r0
 8005c26:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005c2a:	e004      	b.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005c32:	e000      	b.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005c34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c36:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d10a      	bne.n	8005c54 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005c3e:	4b94      	ldr	r3, [pc, #592]	@ (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005c40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c42:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005c46:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005c4a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005c4c:	4a90      	ldr	r2, [pc, #576]	@ (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005c4e:	430b      	orrs	r3, r1
 8005c50:	6513      	str	r3, [r2, #80]	@ 0x50
 8005c52:	e003      	b.n	8005c5c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c54:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005c58:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005c5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c64:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8005c68:	f04f 0900 	mov.w	r9, #0
 8005c6c:	ea58 0309 	orrs.w	r3, r8, r9
 8005c70:	d047      	beq.n	8005d02 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005c72:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005c76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c78:	2b04      	cmp	r3, #4
 8005c7a:	d82a      	bhi.n	8005cd2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005c7c:	a201      	add	r2, pc, #4	@ (adr r2, 8005c84 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005c7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c82:	bf00      	nop
 8005c84:	08005c99 	.word	0x08005c99
 8005c88:	08005ca7 	.word	0x08005ca7
 8005c8c:	08005cbd 	.word	0x08005cbd
 8005c90:	08005cdb 	.word	0x08005cdb
 8005c94:	08005cdb 	.word	0x08005cdb
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c98:	4b7d      	ldr	r3, [pc, #500]	@ (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005c9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c9c:	4a7c      	ldr	r2, [pc, #496]	@ (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005c9e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005ca2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005ca4:	e01a      	b.n	8005cdc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005ca6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005caa:	3308      	adds	r3, #8
 8005cac:	2100      	movs	r1, #0
 8005cae:	4618      	mov	r0, r3
 8005cb0:	f001 fbf0 	bl	8007494 <RCCEx_PLL2_Config>
 8005cb4:	4603      	mov	r3, r0
 8005cb6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005cba:	e00f      	b.n	8005cdc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005cbc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005cc0:	3328      	adds	r3, #40	@ 0x28
 8005cc2:	2100      	movs	r1, #0
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	f001 fc97 	bl	80075f8 <RCCEx_PLL3_Config>
 8005cca:	4603      	mov	r3, r0
 8005ccc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005cd0:	e004      	b.n	8005cdc <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005cd8:	e000      	b.n	8005cdc <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005cda:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005cdc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d10a      	bne.n	8005cfa <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005ce4:	4b6a      	ldr	r3, [pc, #424]	@ (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005ce6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ce8:	f023 0107 	bic.w	r1, r3, #7
 8005cec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005cf0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cf2:	4a67      	ldr	r2, [pc, #412]	@ (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005cf4:	430b      	orrs	r3, r1
 8005cf6:	6513      	str	r3, [r2, #80]	@ 0x50
 8005cf8:	e003      	b.n	8005d02 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cfa:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005cfe:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8005d02:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d0a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8005d0e:	f04f 0b00 	mov.w	fp, #0
 8005d12:	ea5a 030b 	orrs.w	r3, sl, fp
 8005d16:	d054      	beq.n	8005dc2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8005d18:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005d1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d1e:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8005d22:	d036      	beq.n	8005d92 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8005d24:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8005d28:	d82f      	bhi.n	8005d8a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005d2a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005d2e:	d032      	beq.n	8005d96 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005d30:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005d34:	d829      	bhi.n	8005d8a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005d36:	2bc0      	cmp	r3, #192	@ 0xc0
 8005d38:	d02f      	beq.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8005d3a:	2bc0      	cmp	r3, #192	@ 0xc0
 8005d3c:	d825      	bhi.n	8005d8a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005d3e:	2b80      	cmp	r3, #128	@ 0x80
 8005d40:	d018      	beq.n	8005d74 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8005d42:	2b80      	cmp	r3, #128	@ 0x80
 8005d44:	d821      	bhi.n	8005d8a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d002      	beq.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8005d4a:	2b40      	cmp	r3, #64	@ 0x40
 8005d4c:	d007      	beq.n	8005d5e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8005d4e:	e01c      	b.n	8005d8a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d50:	4b4f      	ldr	r3, [pc, #316]	@ (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005d52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d54:	4a4e      	ldr	r2, [pc, #312]	@ (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005d56:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d5a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8005d5c:	e01e      	b.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005d5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005d62:	3308      	adds	r3, #8
 8005d64:	2100      	movs	r1, #0
 8005d66:	4618      	mov	r0, r3
 8005d68:	f001 fb94 	bl	8007494 <RCCEx_PLL2_Config>
 8005d6c:	4603      	mov	r3, r0
 8005d6e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8005d72:	e013      	b.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005d74:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005d78:	3328      	adds	r3, #40	@ 0x28
 8005d7a:	2100      	movs	r1, #0
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	f001 fc3b 	bl	80075f8 <RCCEx_PLL3_Config>
 8005d82:	4603      	mov	r3, r0
 8005d84:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8005d88:	e008      	b.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d8a:	2301      	movs	r3, #1
 8005d8c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005d90:	e004      	b.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8005d92:	bf00      	nop
 8005d94:	e002      	b.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8005d96:	bf00      	nop
 8005d98:	e000      	b.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8005d9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d9c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d10a      	bne.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8005da4:	4b3a      	ldr	r3, [pc, #232]	@ (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005da6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005da8:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8005dac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005db0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005db2:	4a37      	ldr	r2, [pc, #220]	@ (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005db4:	430b      	orrs	r3, r1
 8005db6:	6513      	str	r3, [r2, #80]	@ 0x50
 8005db8:	e003      	b.n	8005dc2 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dba:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005dbe:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8005dc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dca:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8005dce:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005dd8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8005ddc:	460b      	mov	r3, r1
 8005dde:	4313      	orrs	r3, r2
 8005de0:	d05c      	beq.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 8005de2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005de6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005de8:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8005dec:	d03b      	beq.n	8005e66 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005dee:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8005df2:	d834      	bhi.n	8005e5e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8005df4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005df8:	d037      	beq.n	8005e6a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8005dfa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005dfe:	d82e      	bhi.n	8005e5e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8005e00:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005e04:	d033      	beq.n	8005e6e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005e06:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005e0a:	d828      	bhi.n	8005e5e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8005e0c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e10:	d01a      	beq.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8005e12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e16:	d822      	bhi.n	8005e5e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d003      	beq.n	8005e24 <HAL_RCCEx_PeriphCLKConfig+0x288>
 8005e1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005e20:	d007      	beq.n	8005e32 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8005e22:	e01c      	b.n	8005e5e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e24:	4b1a      	ldr	r3, [pc, #104]	@ (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005e26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e28:	4a19      	ldr	r2, [pc, #100]	@ (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005e2a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e2e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8005e30:	e01e      	b.n	8005e70 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005e32:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005e36:	3308      	adds	r3, #8
 8005e38:	2100      	movs	r1, #0
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	f001 fb2a 	bl	8007494 <RCCEx_PLL2_Config>
 8005e40:	4603      	mov	r3, r0
 8005e42:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8005e46:	e013      	b.n	8005e70 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005e48:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005e4c:	3328      	adds	r3, #40	@ 0x28
 8005e4e:	2100      	movs	r1, #0
 8005e50:	4618      	mov	r0, r3
 8005e52:	f001 fbd1 	bl	80075f8 <RCCEx_PLL3_Config>
 8005e56:	4603      	mov	r3, r0
 8005e58:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8005e5c:	e008      	b.n	8005e70 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e5e:	2301      	movs	r3, #1
 8005e60:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005e64:	e004      	b.n	8005e70 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8005e66:	bf00      	nop
 8005e68:	e002      	b.n	8005e70 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8005e6a:	bf00      	nop
 8005e6c:	e000      	b.n	8005e70 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8005e6e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e70:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d10d      	bne.n	8005e94 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8005e78:	4b05      	ldr	r3, [pc, #20]	@ (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005e7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e7c:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8005e80:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005e84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e86:	4a02      	ldr	r2, [pc, #8]	@ (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005e88:	430b      	orrs	r3, r1
 8005e8a:	6513      	str	r3, [r2, #80]	@ 0x50
 8005e8c:	e006      	b.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0x300>
 8005e8e:	bf00      	nop
 8005e90:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e94:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005e98:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005e9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ea4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005ea8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005eac:	2300      	movs	r3, #0
 8005eae:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005eb2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8005eb6:	460b      	mov	r3, r1
 8005eb8:	4313      	orrs	r3, r2
 8005eba:	d03a      	beq.n	8005f32 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8005ebc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005ec0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ec2:	2b30      	cmp	r3, #48	@ 0x30
 8005ec4:	d01f      	beq.n	8005f06 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8005ec6:	2b30      	cmp	r3, #48	@ 0x30
 8005ec8:	d819      	bhi.n	8005efe <HAL_RCCEx_PeriphCLKConfig+0x362>
 8005eca:	2b20      	cmp	r3, #32
 8005ecc:	d00c      	beq.n	8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8005ece:	2b20      	cmp	r3, #32
 8005ed0:	d815      	bhi.n	8005efe <HAL_RCCEx_PeriphCLKConfig+0x362>
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d019      	beq.n	8005f0a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8005ed6:	2b10      	cmp	r3, #16
 8005ed8:	d111      	bne.n	8005efe <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005eda:	4bae      	ldr	r3, [pc, #696]	@ (8006194 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005edc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ede:	4aad      	ldr	r2, [pc, #692]	@ (8006194 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005ee0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005ee4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8005ee6:	e011      	b.n	8005f0c <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005ee8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005eec:	3308      	adds	r3, #8
 8005eee:	2102      	movs	r1, #2
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	f001 facf 	bl	8007494 <RCCEx_PLL2_Config>
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8005efc:	e006      	b.n	8005f0c <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005efe:	2301      	movs	r3, #1
 8005f00:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005f04:	e002      	b.n	8005f0c <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8005f06:	bf00      	nop
 8005f08:	e000      	b.n	8005f0c <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8005f0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f0c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d10a      	bne.n	8005f2a <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005f14:	4b9f      	ldr	r3, [pc, #636]	@ (8006194 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005f16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f18:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005f1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005f20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f22:	4a9c      	ldr	r2, [pc, #624]	@ (8006194 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005f24:	430b      	orrs	r3, r1
 8005f26:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005f28:	e003      	b.n	8005f32 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f2a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005f2e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005f32:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f3a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8005f3e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005f42:	2300      	movs	r3, #0
 8005f44:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005f48:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8005f4c:	460b      	mov	r3, r1
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	d051      	beq.n	8005ff6 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005f52:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005f56:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005f58:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005f5c:	d035      	beq.n	8005fca <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8005f5e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005f62:	d82e      	bhi.n	8005fc2 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8005f64:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005f68:	d031      	beq.n	8005fce <HAL_RCCEx_PeriphCLKConfig+0x432>
 8005f6a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005f6e:	d828      	bhi.n	8005fc2 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8005f70:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f74:	d01a      	beq.n	8005fac <HAL_RCCEx_PeriphCLKConfig+0x410>
 8005f76:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f7a:	d822      	bhi.n	8005fc2 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d003      	beq.n	8005f88 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8005f80:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f84:	d007      	beq.n	8005f96 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8005f86:	e01c      	b.n	8005fc2 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f88:	4b82      	ldr	r3, [pc, #520]	@ (8006194 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005f8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f8c:	4a81      	ldr	r2, [pc, #516]	@ (8006194 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005f8e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005f92:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005f94:	e01c      	b.n	8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005f96:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005f9a:	3308      	adds	r3, #8
 8005f9c:	2100      	movs	r1, #0
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	f001 fa78 	bl	8007494 <RCCEx_PLL2_Config>
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005faa:	e011      	b.n	8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005fac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005fb0:	3328      	adds	r3, #40	@ 0x28
 8005fb2:	2100      	movs	r1, #0
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	f001 fb1f 	bl	80075f8 <RCCEx_PLL3_Config>
 8005fba:	4603      	mov	r3, r0
 8005fbc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005fc0:	e006      	b.n	8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005fc8:	e002      	b.n	8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8005fca:	bf00      	nop
 8005fcc:	e000      	b.n	8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8005fce:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005fd0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d10a      	bne.n	8005fee <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005fd8:	4b6e      	ldr	r3, [pc, #440]	@ (8006194 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005fda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005fdc:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005fe0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005fe4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005fe6:	4a6b      	ldr	r2, [pc, #428]	@ (8006194 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005fe8:	430b      	orrs	r3, r1
 8005fea:	6513      	str	r3, [r2, #80]	@ 0x50
 8005fec:	e003      	b.n	8005ff6 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fee:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005ff2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005ff6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ffe:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8006002:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006006:	2300      	movs	r3, #0
 8006008:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800600c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8006010:	460b      	mov	r3, r1
 8006012:	4313      	orrs	r3, r2
 8006014:	d053      	beq.n	80060be <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8006016:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800601a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800601c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006020:	d033      	beq.n	800608a <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8006022:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006026:	d82c      	bhi.n	8006082 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8006028:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800602c:	d02f      	beq.n	800608e <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 800602e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006032:	d826      	bhi.n	8006082 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8006034:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006038:	d02b      	beq.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800603a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800603e:	d820      	bhi.n	8006082 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8006040:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006044:	d012      	beq.n	800606c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8006046:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800604a:	d81a      	bhi.n	8006082 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800604c:	2b00      	cmp	r3, #0
 800604e:	d022      	beq.n	8006096 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8006050:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006054:	d115      	bne.n	8006082 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006056:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800605a:	3308      	adds	r3, #8
 800605c:	2101      	movs	r1, #1
 800605e:	4618      	mov	r0, r3
 8006060:	f001 fa18 	bl	8007494 <RCCEx_PLL2_Config>
 8006064:	4603      	mov	r3, r0
 8006066:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800606a:	e015      	b.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800606c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006070:	3328      	adds	r3, #40	@ 0x28
 8006072:	2101      	movs	r1, #1
 8006074:	4618      	mov	r0, r3
 8006076:	f001 fabf 	bl	80075f8 <RCCEx_PLL3_Config>
 800607a:	4603      	mov	r3, r0
 800607c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006080:	e00a      	b.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006082:	2301      	movs	r3, #1
 8006084:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006088:	e006      	b.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800608a:	bf00      	nop
 800608c:	e004      	b.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800608e:	bf00      	nop
 8006090:	e002      	b.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8006092:	bf00      	nop
 8006094:	e000      	b.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8006096:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006098:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800609c:	2b00      	cmp	r3, #0
 800609e:	d10a      	bne.n	80060b6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80060a0:	4b3c      	ldr	r3, [pc, #240]	@ (8006194 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80060a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060a4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80060a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80060ac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80060ae:	4a39      	ldr	r2, [pc, #228]	@ (8006194 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80060b0:	430b      	orrs	r3, r1
 80060b2:	6513      	str	r3, [r2, #80]	@ 0x50
 80060b4:	e003      	b.n	80060be <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060b6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80060ba:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80060be:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80060c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060c6:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80060ca:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80060ce:	2300      	movs	r3, #0
 80060d0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80060d4:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80060d8:	460b      	mov	r3, r1
 80060da:	4313      	orrs	r3, r2
 80060dc:	d060      	beq.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80060de:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80060e2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80060e6:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 80060ea:	d039      	beq.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 80060ec:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 80060f0:	d832      	bhi.n	8006158 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80060f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80060f6:	d035      	beq.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80060f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80060fc:	d82c      	bhi.n	8006158 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80060fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006102:	d031      	beq.n	8006168 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8006104:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006108:	d826      	bhi.n	8006158 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800610a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800610e:	d02d      	beq.n	800616c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8006110:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006114:	d820      	bhi.n	8006158 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8006116:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800611a:	d012      	beq.n	8006142 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800611c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006120:	d81a      	bhi.n	8006158 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8006122:	2b00      	cmp	r3, #0
 8006124:	d024      	beq.n	8006170 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8006126:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800612a:	d115      	bne.n	8006158 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800612c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006130:	3308      	adds	r3, #8
 8006132:	2101      	movs	r1, #1
 8006134:	4618      	mov	r0, r3
 8006136:	f001 f9ad 	bl	8007494 <RCCEx_PLL2_Config>
 800613a:	4603      	mov	r3, r0
 800613c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006140:	e017      	b.n	8006172 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006142:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006146:	3328      	adds	r3, #40	@ 0x28
 8006148:	2101      	movs	r1, #1
 800614a:	4618      	mov	r0, r3
 800614c:	f001 fa54 	bl	80075f8 <RCCEx_PLL3_Config>
 8006150:	4603      	mov	r3, r0
 8006152:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006156:	e00c      	b.n	8006172 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8006158:	2301      	movs	r3, #1
 800615a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800615e:	e008      	b.n	8006172 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006160:	bf00      	nop
 8006162:	e006      	b.n	8006172 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006164:	bf00      	nop
 8006166:	e004      	b.n	8006172 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006168:	bf00      	nop
 800616a:	e002      	b.n	8006172 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800616c:	bf00      	nop
 800616e:	e000      	b.n	8006172 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006170:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006172:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006176:	2b00      	cmp	r3, #0
 8006178:	d10e      	bne.n	8006198 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800617a:	4b06      	ldr	r3, [pc, #24]	@ (8006194 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800617c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800617e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006182:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006186:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800618a:	4a02      	ldr	r2, [pc, #8]	@ (8006194 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800618c:	430b      	orrs	r3, r1
 800618e:	6593      	str	r3, [r2, #88]	@ 0x58
 8006190:	e006      	b.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8006192:	bf00      	nop
 8006194:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006198:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800619c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80061a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80061a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061a8:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80061ac:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80061b0:	2300      	movs	r3, #0
 80061b2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80061b6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80061ba:	460b      	mov	r3, r1
 80061bc:	4313      	orrs	r3, r2
 80061be:	d037      	beq.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80061c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80061c4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80061c6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80061ca:	d00e      	beq.n	80061ea <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80061cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80061d0:	d816      	bhi.n	8006200 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d018      	beq.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80061d6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80061da:	d111      	bne.n	8006200 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80061dc:	4bc4      	ldr	r3, [pc, #784]	@ (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80061de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061e0:	4ac3      	ldr	r2, [pc, #780]	@ (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80061e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80061e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80061e8:	e00f      	b.n	800620a <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80061ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80061ee:	3308      	adds	r3, #8
 80061f0:	2101      	movs	r1, #1
 80061f2:	4618      	mov	r0, r3
 80061f4:	f001 f94e 	bl	8007494 <RCCEx_PLL2_Config>
 80061f8:	4603      	mov	r3, r0
 80061fa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80061fe:	e004      	b.n	800620a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006200:	2301      	movs	r3, #1
 8006202:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006206:	e000      	b.n	800620a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8006208:	bf00      	nop
    }

    if (ret == HAL_OK)
 800620a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800620e:	2b00      	cmp	r3, #0
 8006210:	d10a      	bne.n	8006228 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006212:	4bb7      	ldr	r3, [pc, #732]	@ (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006214:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006216:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800621a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800621e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006220:	4ab3      	ldr	r2, [pc, #716]	@ (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006222:	430b      	orrs	r3, r1
 8006224:	6513      	str	r3, [r2, #80]	@ 0x50
 8006226:	e003      	b.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006228:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800622c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006230:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006238:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800623c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006240:	2300      	movs	r3, #0
 8006242:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006246:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800624a:	460b      	mov	r3, r1
 800624c:	4313      	orrs	r3, r2
 800624e:	d039      	beq.n	80062c4 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006250:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006254:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006256:	2b03      	cmp	r3, #3
 8006258:	d81c      	bhi.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800625a:	a201      	add	r2, pc, #4	@ (adr r2, 8006260 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800625c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006260:	0800629d 	.word	0x0800629d
 8006264:	08006271 	.word	0x08006271
 8006268:	0800627f 	.word	0x0800627f
 800626c:	0800629d 	.word	0x0800629d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006270:	4b9f      	ldr	r3, [pc, #636]	@ (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006272:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006274:	4a9e      	ldr	r2, [pc, #632]	@ (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006276:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800627a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800627c:	e00f      	b.n	800629e <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800627e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006282:	3308      	adds	r3, #8
 8006284:	2102      	movs	r1, #2
 8006286:	4618      	mov	r0, r3
 8006288:	f001 f904 	bl	8007494 <RCCEx_PLL2_Config>
 800628c:	4603      	mov	r3, r0
 800628e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006292:	e004      	b.n	800629e <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006294:	2301      	movs	r3, #1
 8006296:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800629a:	e000      	b.n	800629e <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800629c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800629e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d10a      	bne.n	80062bc <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80062a6:	4b92      	ldr	r3, [pc, #584]	@ (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80062a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80062aa:	f023 0103 	bic.w	r1, r3, #3
 80062ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80062b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80062b4:	4a8e      	ldr	r2, [pc, #568]	@ (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80062b6:	430b      	orrs	r3, r1
 80062b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80062ba:	e003      	b.n	80062c4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062bc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80062c0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80062c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80062c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062cc:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80062d0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80062d4:	2300      	movs	r3, #0
 80062d6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80062da:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80062de:	460b      	mov	r3, r1
 80062e0:	4313      	orrs	r3, r2
 80062e2:	f000 8099 	beq.w	8006418 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80062e6:	4b83      	ldr	r3, [pc, #524]	@ (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	4a82      	ldr	r2, [pc, #520]	@ (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80062ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80062f0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80062f2:	f7fa fe9b 	bl	800102c <HAL_GetTick>
 80062f6:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80062fa:	e00b      	b.n	8006314 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80062fc:	f7fa fe96 	bl	800102c <HAL_GetTick>
 8006300:	4602      	mov	r2, r0
 8006302:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8006306:	1ad3      	subs	r3, r2, r3
 8006308:	2b64      	cmp	r3, #100	@ 0x64
 800630a:	d903      	bls.n	8006314 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800630c:	2303      	movs	r3, #3
 800630e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006312:	e005      	b.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006314:	4b77      	ldr	r3, [pc, #476]	@ (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800631c:	2b00      	cmp	r3, #0
 800631e:	d0ed      	beq.n	80062fc <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8006320:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006324:	2b00      	cmp	r3, #0
 8006326:	d173      	bne.n	8006410 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006328:	4b71      	ldr	r3, [pc, #452]	@ (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800632a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800632c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006330:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006334:	4053      	eors	r3, r2
 8006336:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800633a:	2b00      	cmp	r3, #0
 800633c:	d015      	beq.n	800636a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800633e:	4b6c      	ldr	r3, [pc, #432]	@ (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006340:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006342:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006346:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800634a:	4b69      	ldr	r3, [pc, #420]	@ (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800634c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800634e:	4a68      	ldr	r2, [pc, #416]	@ (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006350:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006354:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006356:	4b66      	ldr	r3, [pc, #408]	@ (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006358:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800635a:	4a65      	ldr	r2, [pc, #404]	@ (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800635c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006360:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006362:	4a63      	ldr	r2, [pc, #396]	@ (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006364:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006368:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800636a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800636e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006372:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006376:	d118      	bne.n	80063aa <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006378:	f7fa fe58 	bl	800102c <HAL_GetTick>
 800637c:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006380:	e00d      	b.n	800639e <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006382:	f7fa fe53 	bl	800102c <HAL_GetTick>
 8006386:	4602      	mov	r2, r0
 8006388:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800638c:	1ad2      	subs	r2, r2, r3
 800638e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8006392:	429a      	cmp	r2, r3
 8006394:	d903      	bls.n	800639e <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8006396:	2303      	movs	r3, #3
 8006398:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 800639c:	e005      	b.n	80063aa <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800639e:	4b54      	ldr	r3, [pc, #336]	@ (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80063a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063a2:	f003 0302 	and.w	r3, r3, #2
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d0eb      	beq.n	8006382 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80063aa:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d129      	bne.n	8006406 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80063b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80063b6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80063ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80063be:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80063c2:	d10e      	bne.n	80063e2 <HAL_RCCEx_PeriphCLKConfig+0x846>
 80063c4:	4b4a      	ldr	r3, [pc, #296]	@ (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80063c6:	691b      	ldr	r3, [r3, #16]
 80063c8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80063cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80063d0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80063d4:	091a      	lsrs	r2, r3, #4
 80063d6:	4b48      	ldr	r3, [pc, #288]	@ (80064f8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80063d8:	4013      	ands	r3, r2
 80063da:	4a45      	ldr	r2, [pc, #276]	@ (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80063dc:	430b      	orrs	r3, r1
 80063de:	6113      	str	r3, [r2, #16]
 80063e0:	e005      	b.n	80063ee <HAL_RCCEx_PeriphCLKConfig+0x852>
 80063e2:	4b43      	ldr	r3, [pc, #268]	@ (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80063e4:	691b      	ldr	r3, [r3, #16]
 80063e6:	4a42      	ldr	r2, [pc, #264]	@ (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80063e8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80063ec:	6113      	str	r3, [r2, #16]
 80063ee:	4b40      	ldr	r3, [pc, #256]	@ (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80063f0:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80063f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80063f6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80063fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80063fe:	4a3c      	ldr	r2, [pc, #240]	@ (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006400:	430b      	orrs	r3, r1
 8006402:	6713      	str	r3, [r2, #112]	@ 0x70
 8006404:	e008      	b.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006406:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800640a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 800640e:	e003      	b.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006410:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006414:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006418:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800641c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006420:	f002 0301 	and.w	r3, r2, #1
 8006424:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006428:	2300      	movs	r3, #0
 800642a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800642e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006432:	460b      	mov	r3, r1
 8006434:	4313      	orrs	r3, r2
 8006436:	f000 8090 	beq.w	800655a <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800643a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800643e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006442:	2b28      	cmp	r3, #40	@ 0x28
 8006444:	d870      	bhi.n	8006528 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8006446:	a201      	add	r2, pc, #4	@ (adr r2, 800644c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8006448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800644c:	08006531 	.word	0x08006531
 8006450:	08006529 	.word	0x08006529
 8006454:	08006529 	.word	0x08006529
 8006458:	08006529 	.word	0x08006529
 800645c:	08006529 	.word	0x08006529
 8006460:	08006529 	.word	0x08006529
 8006464:	08006529 	.word	0x08006529
 8006468:	08006529 	.word	0x08006529
 800646c:	080064fd 	.word	0x080064fd
 8006470:	08006529 	.word	0x08006529
 8006474:	08006529 	.word	0x08006529
 8006478:	08006529 	.word	0x08006529
 800647c:	08006529 	.word	0x08006529
 8006480:	08006529 	.word	0x08006529
 8006484:	08006529 	.word	0x08006529
 8006488:	08006529 	.word	0x08006529
 800648c:	08006513 	.word	0x08006513
 8006490:	08006529 	.word	0x08006529
 8006494:	08006529 	.word	0x08006529
 8006498:	08006529 	.word	0x08006529
 800649c:	08006529 	.word	0x08006529
 80064a0:	08006529 	.word	0x08006529
 80064a4:	08006529 	.word	0x08006529
 80064a8:	08006529 	.word	0x08006529
 80064ac:	08006531 	.word	0x08006531
 80064b0:	08006529 	.word	0x08006529
 80064b4:	08006529 	.word	0x08006529
 80064b8:	08006529 	.word	0x08006529
 80064bc:	08006529 	.word	0x08006529
 80064c0:	08006529 	.word	0x08006529
 80064c4:	08006529 	.word	0x08006529
 80064c8:	08006529 	.word	0x08006529
 80064cc:	08006531 	.word	0x08006531
 80064d0:	08006529 	.word	0x08006529
 80064d4:	08006529 	.word	0x08006529
 80064d8:	08006529 	.word	0x08006529
 80064dc:	08006529 	.word	0x08006529
 80064e0:	08006529 	.word	0x08006529
 80064e4:	08006529 	.word	0x08006529
 80064e8:	08006529 	.word	0x08006529
 80064ec:	08006531 	.word	0x08006531
 80064f0:	58024400 	.word	0x58024400
 80064f4:	58024800 	.word	0x58024800
 80064f8:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80064fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006500:	3308      	adds	r3, #8
 8006502:	2101      	movs	r1, #1
 8006504:	4618      	mov	r0, r3
 8006506:	f000 ffc5 	bl	8007494 <RCCEx_PLL2_Config>
 800650a:	4603      	mov	r3, r0
 800650c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006510:	e00f      	b.n	8006532 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006512:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006516:	3328      	adds	r3, #40	@ 0x28
 8006518:	2101      	movs	r1, #1
 800651a:	4618      	mov	r0, r3
 800651c:	f001 f86c 	bl	80075f8 <RCCEx_PLL3_Config>
 8006520:	4603      	mov	r3, r0
 8006522:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006526:	e004      	b.n	8006532 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006528:	2301      	movs	r3, #1
 800652a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800652e:	e000      	b.n	8006532 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8006530:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006532:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006536:	2b00      	cmp	r3, #0
 8006538:	d10b      	bne.n	8006552 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800653a:	4bc0      	ldr	r3, [pc, #768]	@ (800683c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800653c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800653e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8006542:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006546:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800654a:	4abc      	ldr	r2, [pc, #752]	@ (800683c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800654c:	430b      	orrs	r3, r1
 800654e:	6553      	str	r3, [r2, #84]	@ 0x54
 8006550:	e003      	b.n	800655a <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006552:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006556:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800655a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800655e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006562:	f002 0302 	and.w	r3, r2, #2
 8006566:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800656a:	2300      	movs	r3, #0
 800656c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006570:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8006574:	460b      	mov	r3, r1
 8006576:	4313      	orrs	r3, r2
 8006578:	d043      	beq.n	8006602 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800657a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800657e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006582:	2b05      	cmp	r3, #5
 8006584:	d824      	bhi.n	80065d0 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8006586:	a201      	add	r2, pc, #4	@ (adr r2, 800658c <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8006588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800658c:	080065d9 	.word	0x080065d9
 8006590:	080065a5 	.word	0x080065a5
 8006594:	080065bb 	.word	0x080065bb
 8006598:	080065d9 	.word	0x080065d9
 800659c:	080065d9 	.word	0x080065d9
 80065a0:	080065d9 	.word	0x080065d9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80065a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80065a8:	3308      	adds	r3, #8
 80065aa:	2101      	movs	r1, #1
 80065ac:	4618      	mov	r0, r3
 80065ae:	f000 ff71 	bl	8007494 <RCCEx_PLL2_Config>
 80065b2:	4603      	mov	r3, r0
 80065b4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80065b8:	e00f      	b.n	80065da <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80065ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80065be:	3328      	adds	r3, #40	@ 0x28
 80065c0:	2101      	movs	r1, #1
 80065c2:	4618      	mov	r0, r3
 80065c4:	f001 f818 	bl	80075f8 <RCCEx_PLL3_Config>
 80065c8:	4603      	mov	r3, r0
 80065ca:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80065ce:	e004      	b.n	80065da <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80065d0:	2301      	movs	r3, #1
 80065d2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80065d6:	e000      	b.n	80065da <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 80065d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80065da:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d10b      	bne.n	80065fa <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80065e2:	4b96      	ldr	r3, [pc, #600]	@ (800683c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80065e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065e6:	f023 0107 	bic.w	r1, r3, #7
 80065ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80065ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80065f2:	4a92      	ldr	r2, [pc, #584]	@ (800683c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80065f4:	430b      	orrs	r3, r1
 80065f6:	6553      	str	r3, [r2, #84]	@ 0x54
 80065f8:	e003      	b.n	8006602 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065fa:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80065fe:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006602:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800660a:	f002 0304 	and.w	r3, r2, #4
 800660e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006612:	2300      	movs	r3, #0
 8006614:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006618:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800661c:	460b      	mov	r3, r1
 800661e:	4313      	orrs	r3, r2
 8006620:	d043      	beq.n	80066aa <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006622:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006626:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800662a:	2b05      	cmp	r3, #5
 800662c:	d824      	bhi.n	8006678 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 800662e:	a201      	add	r2, pc, #4	@ (adr r2, 8006634 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8006630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006634:	08006681 	.word	0x08006681
 8006638:	0800664d 	.word	0x0800664d
 800663c:	08006663 	.word	0x08006663
 8006640:	08006681 	.word	0x08006681
 8006644:	08006681 	.word	0x08006681
 8006648:	08006681 	.word	0x08006681
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800664c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006650:	3308      	adds	r3, #8
 8006652:	2101      	movs	r1, #1
 8006654:	4618      	mov	r0, r3
 8006656:	f000 ff1d 	bl	8007494 <RCCEx_PLL2_Config>
 800665a:	4603      	mov	r3, r0
 800665c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006660:	e00f      	b.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006662:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006666:	3328      	adds	r3, #40	@ 0x28
 8006668:	2101      	movs	r1, #1
 800666a:	4618      	mov	r0, r3
 800666c:	f000 ffc4 	bl	80075f8 <RCCEx_PLL3_Config>
 8006670:	4603      	mov	r3, r0
 8006672:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006676:	e004      	b.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006678:	2301      	movs	r3, #1
 800667a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800667e:	e000      	b.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8006680:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006682:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006686:	2b00      	cmp	r3, #0
 8006688:	d10b      	bne.n	80066a2 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800668a:	4b6c      	ldr	r3, [pc, #432]	@ (800683c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800668c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800668e:	f023 0107 	bic.w	r1, r3, #7
 8006692:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006696:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800669a:	4a68      	ldr	r2, [pc, #416]	@ (800683c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800669c:	430b      	orrs	r3, r1
 800669e:	6593      	str	r3, [r2, #88]	@ 0x58
 80066a0:	e003      	b.n	80066aa <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066a2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80066a6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80066aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80066ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066b2:	f002 0320 	and.w	r3, r2, #32
 80066b6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80066ba:	2300      	movs	r3, #0
 80066bc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80066c0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80066c4:	460b      	mov	r3, r1
 80066c6:	4313      	orrs	r3, r2
 80066c8:	d055      	beq.n	8006776 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80066ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80066ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80066d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80066d6:	d033      	beq.n	8006740 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80066d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80066dc:	d82c      	bhi.n	8006738 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80066de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80066e2:	d02f      	beq.n	8006744 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80066e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80066e8:	d826      	bhi.n	8006738 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80066ea:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80066ee:	d02b      	beq.n	8006748 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80066f0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80066f4:	d820      	bhi.n	8006738 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80066f6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80066fa:	d012      	beq.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 80066fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006700:	d81a      	bhi.n	8006738 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8006702:	2b00      	cmp	r3, #0
 8006704:	d022      	beq.n	800674c <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8006706:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800670a:	d115      	bne.n	8006738 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800670c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006710:	3308      	adds	r3, #8
 8006712:	2100      	movs	r1, #0
 8006714:	4618      	mov	r0, r3
 8006716:	f000 febd 	bl	8007494 <RCCEx_PLL2_Config>
 800671a:	4603      	mov	r3, r0
 800671c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006720:	e015      	b.n	800674e <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006722:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006726:	3328      	adds	r3, #40	@ 0x28
 8006728:	2102      	movs	r1, #2
 800672a:	4618      	mov	r0, r3
 800672c:	f000 ff64 	bl	80075f8 <RCCEx_PLL3_Config>
 8006730:	4603      	mov	r3, r0
 8006732:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006736:	e00a      	b.n	800674e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006738:	2301      	movs	r3, #1
 800673a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800673e:	e006      	b.n	800674e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8006740:	bf00      	nop
 8006742:	e004      	b.n	800674e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8006744:	bf00      	nop
 8006746:	e002      	b.n	800674e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8006748:	bf00      	nop
 800674a:	e000      	b.n	800674e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800674c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800674e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006752:	2b00      	cmp	r3, #0
 8006754:	d10b      	bne.n	800676e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006756:	4b39      	ldr	r3, [pc, #228]	@ (800683c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006758:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800675a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800675e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006762:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006766:	4a35      	ldr	r2, [pc, #212]	@ (800683c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006768:	430b      	orrs	r3, r1
 800676a:	6553      	str	r3, [r2, #84]	@ 0x54
 800676c:	e003      	b.n	8006776 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800676e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006772:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006776:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800677a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800677e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8006782:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006786:	2300      	movs	r3, #0
 8006788:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800678c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8006790:	460b      	mov	r3, r1
 8006792:	4313      	orrs	r3, r2
 8006794:	d058      	beq.n	8006848 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006796:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800679a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800679e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80067a2:	d033      	beq.n	800680c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80067a4:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80067a8:	d82c      	bhi.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80067aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80067ae:	d02f      	beq.n	8006810 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80067b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80067b4:	d826      	bhi.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80067b6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80067ba:	d02b      	beq.n	8006814 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80067bc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80067c0:	d820      	bhi.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80067c2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80067c6:	d012      	beq.n	80067ee <HAL_RCCEx_PeriphCLKConfig+0xc52>
 80067c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80067cc:	d81a      	bhi.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d022      	beq.n	8006818 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 80067d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80067d6:	d115      	bne.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80067d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80067dc:	3308      	adds	r3, #8
 80067de:	2100      	movs	r1, #0
 80067e0:	4618      	mov	r0, r3
 80067e2:	f000 fe57 	bl	8007494 <RCCEx_PLL2_Config>
 80067e6:	4603      	mov	r3, r0
 80067e8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80067ec:	e015      	b.n	800681a <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80067ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80067f2:	3328      	adds	r3, #40	@ 0x28
 80067f4:	2102      	movs	r1, #2
 80067f6:	4618      	mov	r0, r3
 80067f8:	f000 fefe 	bl	80075f8 <RCCEx_PLL3_Config>
 80067fc:	4603      	mov	r3, r0
 80067fe:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006802:	e00a      	b.n	800681a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006804:	2301      	movs	r3, #1
 8006806:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800680a:	e006      	b.n	800681a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800680c:	bf00      	nop
 800680e:	e004      	b.n	800681a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8006810:	bf00      	nop
 8006812:	e002      	b.n	800681a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8006814:	bf00      	nop
 8006816:	e000      	b.n	800681a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8006818:	bf00      	nop
    }

    if (ret == HAL_OK)
 800681a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800681e:	2b00      	cmp	r3, #0
 8006820:	d10e      	bne.n	8006840 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006822:	4b06      	ldr	r3, [pc, #24]	@ (800683c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006824:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006826:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800682a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800682e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006832:	4a02      	ldr	r2, [pc, #8]	@ (800683c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006834:	430b      	orrs	r3, r1
 8006836:	6593      	str	r3, [r2, #88]	@ 0x58
 8006838:	e006      	b.n	8006848 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800683a:	bf00      	nop
 800683c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006840:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006844:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006848:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800684c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006850:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8006854:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006858:	2300      	movs	r3, #0
 800685a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800685e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8006862:	460b      	mov	r3, r1
 8006864:	4313      	orrs	r3, r2
 8006866:	d055      	beq.n	8006914 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006868:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800686c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006870:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006874:	d033      	beq.n	80068de <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8006876:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800687a:	d82c      	bhi.n	80068d6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800687c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006880:	d02f      	beq.n	80068e2 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8006882:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006886:	d826      	bhi.n	80068d6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8006888:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800688c:	d02b      	beq.n	80068e6 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800688e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006892:	d820      	bhi.n	80068d6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8006894:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006898:	d012      	beq.n	80068c0 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800689a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800689e:	d81a      	bhi.n	80068d6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d022      	beq.n	80068ea <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 80068a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80068a8:	d115      	bne.n	80068d6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80068aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80068ae:	3308      	adds	r3, #8
 80068b0:	2100      	movs	r1, #0
 80068b2:	4618      	mov	r0, r3
 80068b4:	f000 fdee 	bl	8007494 <RCCEx_PLL2_Config>
 80068b8:	4603      	mov	r3, r0
 80068ba:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80068be:	e015      	b.n	80068ec <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80068c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80068c4:	3328      	adds	r3, #40	@ 0x28
 80068c6:	2102      	movs	r1, #2
 80068c8:	4618      	mov	r0, r3
 80068ca:	f000 fe95 	bl	80075f8 <RCCEx_PLL3_Config>
 80068ce:	4603      	mov	r3, r0
 80068d0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80068d4:	e00a      	b.n	80068ec <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80068d6:	2301      	movs	r3, #1
 80068d8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80068dc:	e006      	b.n	80068ec <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80068de:	bf00      	nop
 80068e0:	e004      	b.n	80068ec <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80068e2:	bf00      	nop
 80068e4:	e002      	b.n	80068ec <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80068e6:	bf00      	nop
 80068e8:	e000      	b.n	80068ec <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80068ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068ec:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d10b      	bne.n	800690c <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80068f4:	4ba1      	ldr	r3, [pc, #644]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80068f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068f8:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80068fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006900:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006904:	4a9d      	ldr	r2, [pc, #628]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006906:	430b      	orrs	r3, r1
 8006908:	6593      	str	r3, [r2, #88]	@ 0x58
 800690a:	e003      	b.n	8006914 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800690c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006910:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006914:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800691c:	f002 0308 	and.w	r3, r2, #8
 8006920:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006924:	2300      	movs	r3, #0
 8006926:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800692a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800692e:	460b      	mov	r3, r1
 8006930:	4313      	orrs	r3, r2
 8006932:	d01e      	beq.n	8006972 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8006934:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006938:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800693c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006940:	d10c      	bne.n	800695c <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006942:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006946:	3328      	adds	r3, #40	@ 0x28
 8006948:	2102      	movs	r1, #2
 800694a:	4618      	mov	r0, r3
 800694c:	f000 fe54 	bl	80075f8 <RCCEx_PLL3_Config>
 8006950:	4603      	mov	r3, r0
 8006952:	2b00      	cmp	r3, #0
 8006954:	d002      	beq.n	800695c <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 8006956:	2301      	movs	r3, #1
 8006958:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800695c:	4b87      	ldr	r3, [pc, #540]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800695e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006960:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006964:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006968:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800696c:	4a83      	ldr	r2, [pc, #524]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800696e:	430b      	orrs	r3, r1
 8006970:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006972:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800697a:	f002 0310 	and.w	r3, r2, #16
 800697e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006982:	2300      	movs	r3, #0
 8006984:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006988:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800698c:	460b      	mov	r3, r1
 800698e:	4313      	orrs	r3, r2
 8006990:	d01e      	beq.n	80069d0 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006992:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006996:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800699a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800699e:	d10c      	bne.n	80069ba <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80069a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80069a4:	3328      	adds	r3, #40	@ 0x28
 80069a6:	2102      	movs	r1, #2
 80069a8:	4618      	mov	r0, r3
 80069aa:	f000 fe25 	bl	80075f8 <RCCEx_PLL3_Config>
 80069ae:	4603      	mov	r3, r0
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d002      	beq.n	80069ba <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 80069b4:	2301      	movs	r3, #1
 80069b6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80069ba:	4b70      	ldr	r3, [pc, #448]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80069bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069be:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80069c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80069c6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80069ca:	4a6c      	ldr	r2, [pc, #432]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80069cc:	430b      	orrs	r3, r1
 80069ce:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80069d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80069d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069d8:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80069dc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80069e0:	2300      	movs	r3, #0
 80069e2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80069e6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80069ea:	460b      	mov	r3, r1
 80069ec:	4313      	orrs	r3, r2
 80069ee:	d03e      	beq.n	8006a6e <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80069f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80069f4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80069f8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80069fc:	d022      	beq.n	8006a44 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 80069fe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006a02:	d81b      	bhi.n	8006a3c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d003      	beq.n	8006a10 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8006a08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a0c:	d00b      	beq.n	8006a26 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8006a0e:	e015      	b.n	8006a3c <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006a10:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006a14:	3308      	adds	r3, #8
 8006a16:	2100      	movs	r1, #0
 8006a18:	4618      	mov	r0, r3
 8006a1a:	f000 fd3b 	bl	8007494 <RCCEx_PLL2_Config>
 8006a1e:	4603      	mov	r3, r0
 8006a20:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006a24:	e00f      	b.n	8006a46 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006a26:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006a2a:	3328      	adds	r3, #40	@ 0x28
 8006a2c:	2102      	movs	r1, #2
 8006a2e:	4618      	mov	r0, r3
 8006a30:	f000 fde2 	bl	80075f8 <RCCEx_PLL3_Config>
 8006a34:	4603      	mov	r3, r0
 8006a36:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006a3a:	e004      	b.n	8006a46 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a3c:	2301      	movs	r3, #1
 8006a3e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006a42:	e000      	b.n	8006a46 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8006a44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a46:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d10b      	bne.n	8006a66 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006a4e:	4b4b      	ldr	r3, [pc, #300]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006a50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a52:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8006a56:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006a5a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006a5e:	4a47      	ldr	r2, [pc, #284]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006a60:	430b      	orrs	r3, r1
 8006a62:	6593      	str	r3, [r2, #88]	@ 0x58
 8006a64:	e003      	b.n	8006a6e <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a66:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006a6a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006a6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a76:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8006a7a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006a80:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8006a84:	460b      	mov	r3, r1
 8006a86:	4313      	orrs	r3, r2
 8006a88:	d03b      	beq.n	8006b02 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006a8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006a8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a92:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006a96:	d01f      	beq.n	8006ad8 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8006a98:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006a9c:	d818      	bhi.n	8006ad0 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8006a9e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006aa2:	d003      	beq.n	8006aac <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8006aa4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006aa8:	d007      	beq.n	8006aba <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 8006aaa:	e011      	b.n	8006ad0 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006aac:	4b33      	ldr	r3, [pc, #204]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006aae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ab0:	4a32      	ldr	r2, [pc, #200]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006ab2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006ab6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006ab8:	e00f      	b.n	8006ada <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006aba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006abe:	3328      	adds	r3, #40	@ 0x28
 8006ac0:	2101      	movs	r1, #1
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	f000 fd98 	bl	80075f8 <RCCEx_PLL3_Config>
 8006ac8:	4603      	mov	r3, r0
 8006aca:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 8006ace:	e004      	b.n	8006ada <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ad0:	2301      	movs	r3, #1
 8006ad2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006ad6:	e000      	b.n	8006ada <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8006ad8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ada:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d10b      	bne.n	8006afa <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006ae2:	4b26      	ldr	r3, [pc, #152]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006ae4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ae6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006aea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006aee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006af2:	4a22      	ldr	r2, [pc, #136]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006af4:	430b      	orrs	r3, r1
 8006af6:	6553      	str	r3, [r2, #84]	@ 0x54
 8006af8:	e003      	b.n	8006b02 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006afa:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006afe:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006b02:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b0a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8006b0e:	673b      	str	r3, [r7, #112]	@ 0x70
 8006b10:	2300      	movs	r3, #0
 8006b12:	677b      	str	r3, [r7, #116]	@ 0x74
 8006b14:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8006b18:	460b      	mov	r3, r1
 8006b1a:	4313      	orrs	r3, r2
 8006b1c:	d034      	beq.n	8006b88 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006b1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006b22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d003      	beq.n	8006b30 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8006b28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006b2c:	d007      	beq.n	8006b3e <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8006b2e:	e011      	b.n	8006b54 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b30:	4b12      	ldr	r3, [pc, #72]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006b32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b34:	4a11      	ldr	r2, [pc, #68]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006b36:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006b3a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006b3c:	e00e      	b.n	8006b5c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006b3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006b42:	3308      	adds	r3, #8
 8006b44:	2102      	movs	r1, #2
 8006b46:	4618      	mov	r0, r3
 8006b48:	f000 fca4 	bl	8007494 <RCCEx_PLL2_Config>
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006b52:	e003      	b.n	8006b5c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8006b54:	2301      	movs	r3, #1
 8006b56:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006b5a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b5c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d10d      	bne.n	8006b80 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006b64:	4b05      	ldr	r3, [pc, #20]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006b66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006b68:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006b6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006b70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b72:	4a02      	ldr	r2, [pc, #8]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006b74:	430b      	orrs	r3, r1
 8006b76:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006b78:	e006      	b.n	8006b88 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8006b7a:	bf00      	nop
 8006b7c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b80:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006b84:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006b88:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b90:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8006b94:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006b96:	2300      	movs	r3, #0
 8006b98:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006b9a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8006b9e:	460b      	mov	r3, r1
 8006ba0:	4313      	orrs	r3, r2
 8006ba2:	d00c      	beq.n	8006bbe <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006ba4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006ba8:	3328      	adds	r3, #40	@ 0x28
 8006baa:	2102      	movs	r1, #2
 8006bac:	4618      	mov	r0, r3
 8006bae:	f000 fd23 	bl	80075f8 <RCCEx_PLL3_Config>
 8006bb2:	4603      	mov	r3, r0
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d002      	beq.n	8006bbe <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8006bb8:	2301      	movs	r3, #1
 8006bba:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006bbe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bc6:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8006bca:	663b      	str	r3, [r7, #96]	@ 0x60
 8006bcc:	2300      	movs	r3, #0
 8006bce:	667b      	str	r3, [r7, #100]	@ 0x64
 8006bd0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006bd4:	460b      	mov	r3, r1
 8006bd6:	4313      	orrs	r3, r2
 8006bd8:	d038      	beq.n	8006c4c <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006bda:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006bde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006be2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006be6:	d018      	beq.n	8006c1a <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8006be8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006bec:	d811      	bhi.n	8006c12 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8006bee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006bf2:	d014      	beq.n	8006c1e <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8006bf4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006bf8:	d80b      	bhi.n	8006c12 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d011      	beq.n	8006c22 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8006bfe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006c02:	d106      	bne.n	8006c12 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c04:	4bc3      	ldr	r3, [pc, #780]	@ (8006f14 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006c06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c08:	4ac2      	ldr	r2, [pc, #776]	@ (8006f14 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006c0a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006c0e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006c10:	e008      	b.n	8006c24 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c12:	2301      	movs	r3, #1
 8006c14:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006c18:	e004      	b.n	8006c24 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8006c1a:	bf00      	nop
 8006c1c:	e002      	b.n	8006c24 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8006c1e:	bf00      	nop
 8006c20:	e000      	b.n	8006c24 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8006c22:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c24:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d10b      	bne.n	8006c44 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006c2c:	4bb9      	ldr	r3, [pc, #740]	@ (8006f14 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006c2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c30:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006c34:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006c38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c3c:	4ab5      	ldr	r2, [pc, #724]	@ (8006f14 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006c3e:	430b      	orrs	r3, r1
 8006c40:	6553      	str	r3, [r2, #84]	@ 0x54
 8006c42:	e003      	b.n	8006c4c <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c44:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006c48:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006c4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c54:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006c58:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006c5e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8006c62:	460b      	mov	r3, r1
 8006c64:	4313      	orrs	r3, r2
 8006c66:	d009      	beq.n	8006c7c <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006c68:	4baa      	ldr	r3, [pc, #680]	@ (8006f14 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006c6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c6c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006c70:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006c74:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006c76:	4aa7      	ldr	r2, [pc, #668]	@ (8006f14 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006c78:	430b      	orrs	r3, r1
 8006c7a:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006c7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c84:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006c88:	653b      	str	r3, [r7, #80]	@ 0x50
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	657b      	str	r3, [r7, #84]	@ 0x54
 8006c8e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8006c92:	460b      	mov	r3, r1
 8006c94:	4313      	orrs	r3, r2
 8006c96:	d009      	beq.n	8006cac <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006c98:	4b9e      	ldr	r3, [pc, #632]	@ (8006f14 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006c9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c9c:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8006ca0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006ca4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ca6:	4a9b      	ldr	r2, [pc, #620]	@ (8006f14 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006ca8:	430b      	orrs	r3, r1
 8006caa:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8006cac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cb4:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8006cb8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006cba:	2300      	movs	r3, #0
 8006cbc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006cbe:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006cc2:	460b      	mov	r3, r1
 8006cc4:	4313      	orrs	r3, r2
 8006cc6:	d009      	beq.n	8006cdc <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8006cc8:	4b92      	ldr	r3, [pc, #584]	@ (8006f14 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006cca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ccc:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 8006cd0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006cd4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006cd6:	4a8f      	ldr	r2, [pc, #572]	@ (8006f14 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006cd8:	430b      	orrs	r3, r1
 8006cda:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006cdc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ce4:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8006ce8:	643b      	str	r3, [r7, #64]	@ 0x40
 8006cea:	2300      	movs	r3, #0
 8006cec:	647b      	str	r3, [r7, #68]	@ 0x44
 8006cee:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006cf2:	460b      	mov	r3, r1
 8006cf4:	4313      	orrs	r3, r2
 8006cf6:	d00e      	beq.n	8006d16 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006cf8:	4b86      	ldr	r3, [pc, #536]	@ (8006f14 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006cfa:	691b      	ldr	r3, [r3, #16]
 8006cfc:	4a85      	ldr	r2, [pc, #532]	@ (8006f14 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006cfe:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006d02:	6113      	str	r3, [r2, #16]
 8006d04:	4b83      	ldr	r3, [pc, #524]	@ (8006f14 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006d06:	6919      	ldr	r1, [r3, #16]
 8006d08:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006d0c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006d10:	4a80      	ldr	r2, [pc, #512]	@ (8006f14 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006d12:	430b      	orrs	r3, r1
 8006d14:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006d16:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d1e:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8006d22:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006d24:	2300      	movs	r3, #0
 8006d26:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006d28:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006d2c:	460b      	mov	r3, r1
 8006d2e:	4313      	orrs	r3, r2
 8006d30:	d009      	beq.n	8006d46 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006d32:	4b78      	ldr	r3, [pc, #480]	@ (8006f14 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006d34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d36:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006d3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006d3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d40:	4a74      	ldr	r2, [pc, #464]	@ (8006f14 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006d42:	430b      	orrs	r3, r1
 8006d44:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006d46:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d4e:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006d52:	633b      	str	r3, [r7, #48]	@ 0x30
 8006d54:	2300      	movs	r3, #0
 8006d56:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d58:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006d5c:	460b      	mov	r3, r1
 8006d5e:	4313      	orrs	r3, r2
 8006d60:	d00a      	beq.n	8006d78 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006d62:	4b6c      	ldr	r3, [pc, #432]	@ (8006f14 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006d64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d66:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8006d6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006d6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006d72:	4a68      	ldr	r2, [pc, #416]	@ (8006f14 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006d74:	430b      	orrs	r3, r1
 8006d76:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006d78:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d80:	2100      	movs	r1, #0
 8006d82:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006d84:	f003 0301 	and.w	r3, r3, #1
 8006d88:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006d8a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006d8e:	460b      	mov	r3, r1
 8006d90:	4313      	orrs	r3, r2
 8006d92:	d011      	beq.n	8006db8 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006d94:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006d98:	3308      	adds	r3, #8
 8006d9a:	2100      	movs	r1, #0
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	f000 fb79 	bl	8007494 <RCCEx_PLL2_Config>
 8006da2:	4603      	mov	r3, r0
 8006da4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8006da8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d003      	beq.n	8006db8 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006db0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006db4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006db8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dc0:	2100      	movs	r1, #0
 8006dc2:	6239      	str	r1, [r7, #32]
 8006dc4:	f003 0302 	and.w	r3, r3, #2
 8006dc8:	627b      	str	r3, [r7, #36]	@ 0x24
 8006dca:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006dce:	460b      	mov	r3, r1
 8006dd0:	4313      	orrs	r3, r2
 8006dd2:	d011      	beq.n	8006df8 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006dd4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006dd8:	3308      	adds	r3, #8
 8006dda:	2101      	movs	r1, #1
 8006ddc:	4618      	mov	r0, r3
 8006dde:	f000 fb59 	bl	8007494 <RCCEx_PLL2_Config>
 8006de2:	4603      	mov	r3, r0
 8006de4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8006de8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d003      	beq.n	8006df8 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006df0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006df4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006df8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e00:	2100      	movs	r1, #0
 8006e02:	61b9      	str	r1, [r7, #24]
 8006e04:	f003 0304 	and.w	r3, r3, #4
 8006e08:	61fb      	str	r3, [r7, #28]
 8006e0a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006e0e:	460b      	mov	r3, r1
 8006e10:	4313      	orrs	r3, r2
 8006e12:	d011      	beq.n	8006e38 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006e14:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006e18:	3308      	adds	r3, #8
 8006e1a:	2102      	movs	r1, #2
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	f000 fb39 	bl	8007494 <RCCEx_PLL2_Config>
 8006e22:	4603      	mov	r3, r0
 8006e24:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8006e28:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d003      	beq.n	8006e38 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e30:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006e34:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006e38:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e40:	2100      	movs	r1, #0
 8006e42:	6139      	str	r1, [r7, #16]
 8006e44:	f003 0308 	and.w	r3, r3, #8
 8006e48:	617b      	str	r3, [r7, #20]
 8006e4a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006e4e:	460b      	mov	r3, r1
 8006e50:	4313      	orrs	r3, r2
 8006e52:	d011      	beq.n	8006e78 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006e54:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006e58:	3328      	adds	r3, #40	@ 0x28
 8006e5a:	2100      	movs	r1, #0
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	f000 fbcb 	bl	80075f8 <RCCEx_PLL3_Config>
 8006e62:	4603      	mov	r3, r0
 8006e64:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 8006e68:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d003      	beq.n	8006e78 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e70:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006e74:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006e78:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e80:	2100      	movs	r1, #0
 8006e82:	60b9      	str	r1, [r7, #8]
 8006e84:	f003 0310 	and.w	r3, r3, #16
 8006e88:	60fb      	str	r3, [r7, #12]
 8006e8a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006e8e:	460b      	mov	r3, r1
 8006e90:	4313      	orrs	r3, r2
 8006e92:	d011      	beq.n	8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006e94:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006e98:	3328      	adds	r3, #40	@ 0x28
 8006e9a:	2101      	movs	r1, #1
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	f000 fbab 	bl	80075f8 <RCCEx_PLL3_Config>
 8006ea2:	4603      	mov	r3, r0
 8006ea4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8006ea8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d003      	beq.n	8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006eb0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006eb4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006eb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ec0:	2100      	movs	r1, #0
 8006ec2:	6039      	str	r1, [r7, #0]
 8006ec4:	f003 0320 	and.w	r3, r3, #32
 8006ec8:	607b      	str	r3, [r7, #4]
 8006eca:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006ece:	460b      	mov	r3, r1
 8006ed0:	4313      	orrs	r3, r2
 8006ed2:	d011      	beq.n	8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006ed4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006ed8:	3328      	adds	r3, #40	@ 0x28
 8006eda:	2102      	movs	r1, #2
 8006edc:	4618      	mov	r0, r3
 8006ede:	f000 fb8b 	bl	80075f8 <RCCEx_PLL3_Config>
 8006ee2:	4603      	mov	r3, r0
 8006ee4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8006ee8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d003      	beq.n	8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ef0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006ef4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 8006ef8:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d101      	bne.n	8006f04 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8006f00:	2300      	movs	r3, #0
 8006f02:	e000      	b.n	8006f06 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8006f04:	2301      	movs	r3, #1
}
 8006f06:	4618      	mov	r0, r3
 8006f08:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006f12:	bf00      	nop
 8006f14:	58024400 	.word	0x58024400

08006f18 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8006f1c:	f7fe fda0 	bl	8005a60 <HAL_RCC_GetHCLKFreq>
 8006f20:	4602      	mov	r2, r0
 8006f22:	4b06      	ldr	r3, [pc, #24]	@ (8006f3c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006f24:	6a1b      	ldr	r3, [r3, #32]
 8006f26:	091b      	lsrs	r3, r3, #4
 8006f28:	f003 0307 	and.w	r3, r3, #7
 8006f2c:	4904      	ldr	r1, [pc, #16]	@ (8006f40 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006f2e:	5ccb      	ldrb	r3, [r1, r3]
 8006f30:	f003 031f 	and.w	r3, r3, #31
 8006f34:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8006f38:	4618      	mov	r0, r3
 8006f3a:	bd80      	pop	{r7, pc}
 8006f3c:	58024400 	.word	0x58024400
 8006f40:	08009e84 	.word	0x08009e84

08006f44 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006f44:	b480      	push	{r7}
 8006f46:	b089      	sub	sp, #36	@ 0x24
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006f4c:	4ba1      	ldr	r3, [pc, #644]	@ (80071d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f50:	f003 0303 	and.w	r3, r3, #3
 8006f54:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8006f56:	4b9f      	ldr	r3, [pc, #636]	@ (80071d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f5a:	0b1b      	lsrs	r3, r3, #12
 8006f5c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006f60:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006f62:	4b9c      	ldr	r3, [pc, #624]	@ (80071d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f66:	091b      	lsrs	r3, r3, #4
 8006f68:	f003 0301 	and.w	r3, r3, #1
 8006f6c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006f6e:	4b99      	ldr	r3, [pc, #612]	@ (80071d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f72:	08db      	lsrs	r3, r3, #3
 8006f74:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006f78:	693a      	ldr	r2, [r7, #16]
 8006f7a:	fb02 f303 	mul.w	r3, r2, r3
 8006f7e:	ee07 3a90 	vmov	s15, r3
 8006f82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f86:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006f8a:	697b      	ldr	r3, [r7, #20]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	f000 8111 	beq.w	80071b4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006f92:	69bb      	ldr	r3, [r7, #24]
 8006f94:	2b02      	cmp	r3, #2
 8006f96:	f000 8083 	beq.w	80070a0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006f9a:	69bb      	ldr	r3, [r7, #24]
 8006f9c:	2b02      	cmp	r3, #2
 8006f9e:	f200 80a1 	bhi.w	80070e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006fa2:	69bb      	ldr	r3, [r7, #24]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d003      	beq.n	8006fb0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006fa8:	69bb      	ldr	r3, [r7, #24]
 8006faa:	2b01      	cmp	r3, #1
 8006fac:	d056      	beq.n	800705c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006fae:	e099      	b.n	80070e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006fb0:	4b88      	ldr	r3, [pc, #544]	@ (80071d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f003 0320 	and.w	r3, r3, #32
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d02d      	beq.n	8007018 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006fbc:	4b85      	ldr	r3, [pc, #532]	@ (80071d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	08db      	lsrs	r3, r3, #3
 8006fc2:	f003 0303 	and.w	r3, r3, #3
 8006fc6:	4a84      	ldr	r2, [pc, #528]	@ (80071d8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006fc8:	fa22 f303 	lsr.w	r3, r2, r3
 8006fcc:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006fce:	68bb      	ldr	r3, [r7, #8]
 8006fd0:	ee07 3a90 	vmov	s15, r3
 8006fd4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fd8:	697b      	ldr	r3, [r7, #20]
 8006fda:	ee07 3a90 	vmov	s15, r3
 8006fde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fe2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006fe6:	4b7b      	ldr	r3, [pc, #492]	@ (80071d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006fe8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fee:	ee07 3a90 	vmov	s15, r3
 8006ff2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ff6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006ffa:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80071dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006ffe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007002:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007006:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800700a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800700e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007012:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007016:	e087      	b.n	8007128 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007018:	697b      	ldr	r3, [r7, #20]
 800701a:	ee07 3a90 	vmov	s15, r3
 800701e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007022:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80071e0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007026:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800702a:	4b6a      	ldr	r3, [pc, #424]	@ (80071d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800702c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800702e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007032:	ee07 3a90 	vmov	s15, r3
 8007036:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800703a:	ed97 6a03 	vldr	s12, [r7, #12]
 800703e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80071dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007042:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007046:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800704a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800704e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007052:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007056:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800705a:	e065      	b.n	8007128 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800705c:	697b      	ldr	r3, [r7, #20]
 800705e:	ee07 3a90 	vmov	s15, r3
 8007062:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007066:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80071e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800706a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800706e:	4b59      	ldr	r3, [pc, #356]	@ (80071d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007070:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007072:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007076:	ee07 3a90 	vmov	s15, r3
 800707a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800707e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007082:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80071dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007086:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800708a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800708e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007092:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007096:	ee67 7a27 	vmul.f32	s15, s14, s15
 800709a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800709e:	e043      	b.n	8007128 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80070a0:	697b      	ldr	r3, [r7, #20]
 80070a2:	ee07 3a90 	vmov	s15, r3
 80070a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070aa:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80071e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80070ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070b2:	4b48      	ldr	r3, [pc, #288]	@ (80071d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070ba:	ee07 3a90 	vmov	s15, r3
 80070be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80070c6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80071dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80070ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80070d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80070e2:	e021      	b.n	8007128 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80070e4:	697b      	ldr	r3, [r7, #20]
 80070e6:	ee07 3a90 	vmov	s15, r3
 80070ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070ee:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80071e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80070f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070f6:	4b37      	ldr	r3, [pc, #220]	@ (80071d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070fe:	ee07 3a90 	vmov	s15, r3
 8007102:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007106:	ed97 6a03 	vldr	s12, [r7, #12]
 800710a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80071dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800710e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007112:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007116:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800711a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800711e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007122:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007126:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007128:	4b2a      	ldr	r3, [pc, #168]	@ (80071d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800712a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800712c:	0a5b      	lsrs	r3, r3, #9
 800712e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007132:	ee07 3a90 	vmov	s15, r3
 8007136:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800713a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800713e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007142:	edd7 6a07 	vldr	s13, [r7, #28]
 8007146:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800714a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800714e:	ee17 2a90 	vmov	r2, s15
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8007156:	4b1f      	ldr	r3, [pc, #124]	@ (80071d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007158:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800715a:	0c1b      	lsrs	r3, r3, #16
 800715c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007160:	ee07 3a90 	vmov	s15, r3
 8007164:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007168:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800716c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007170:	edd7 6a07 	vldr	s13, [r7, #28]
 8007174:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007178:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800717c:	ee17 2a90 	vmov	r2, s15
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007184:	4b13      	ldr	r3, [pc, #76]	@ (80071d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007186:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007188:	0e1b      	lsrs	r3, r3, #24
 800718a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800718e:	ee07 3a90 	vmov	s15, r3
 8007192:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007196:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800719a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800719e:	edd7 6a07 	vldr	s13, [r7, #28]
 80071a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80071a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80071aa:	ee17 2a90 	vmov	r2, s15
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80071b2:	e008      	b.n	80071c6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2200      	movs	r2, #0
 80071b8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2200      	movs	r2, #0
 80071be:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2200      	movs	r2, #0
 80071c4:	609a      	str	r2, [r3, #8]
}
 80071c6:	bf00      	nop
 80071c8:	3724      	adds	r7, #36	@ 0x24
 80071ca:	46bd      	mov	sp, r7
 80071cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d0:	4770      	bx	lr
 80071d2:	bf00      	nop
 80071d4:	58024400 	.word	0x58024400
 80071d8:	03d09000 	.word	0x03d09000
 80071dc:	46000000 	.word	0x46000000
 80071e0:	4c742400 	.word	0x4c742400
 80071e4:	4a742400 	.word	0x4a742400
 80071e8:	4bb71b00 	.word	0x4bb71b00

080071ec <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80071ec:	b480      	push	{r7}
 80071ee:	b089      	sub	sp, #36	@ 0x24
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80071f4:	4ba1      	ldr	r3, [pc, #644]	@ (800747c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80071f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071f8:	f003 0303 	and.w	r3, r3, #3
 80071fc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80071fe:	4b9f      	ldr	r3, [pc, #636]	@ (800747c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007200:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007202:	0d1b      	lsrs	r3, r3, #20
 8007204:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007208:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800720a:	4b9c      	ldr	r3, [pc, #624]	@ (800747c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800720c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800720e:	0a1b      	lsrs	r3, r3, #8
 8007210:	f003 0301 	and.w	r3, r3, #1
 8007214:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8007216:	4b99      	ldr	r3, [pc, #612]	@ (800747c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007218:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800721a:	08db      	lsrs	r3, r3, #3
 800721c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007220:	693a      	ldr	r2, [r7, #16]
 8007222:	fb02 f303 	mul.w	r3, r2, r3
 8007226:	ee07 3a90 	vmov	s15, r3
 800722a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800722e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007232:	697b      	ldr	r3, [r7, #20]
 8007234:	2b00      	cmp	r3, #0
 8007236:	f000 8111 	beq.w	800745c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800723a:	69bb      	ldr	r3, [r7, #24]
 800723c:	2b02      	cmp	r3, #2
 800723e:	f000 8083 	beq.w	8007348 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007242:	69bb      	ldr	r3, [r7, #24]
 8007244:	2b02      	cmp	r3, #2
 8007246:	f200 80a1 	bhi.w	800738c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800724a:	69bb      	ldr	r3, [r7, #24]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d003      	beq.n	8007258 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007250:	69bb      	ldr	r3, [r7, #24]
 8007252:	2b01      	cmp	r3, #1
 8007254:	d056      	beq.n	8007304 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007256:	e099      	b.n	800738c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007258:	4b88      	ldr	r3, [pc, #544]	@ (800747c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f003 0320 	and.w	r3, r3, #32
 8007260:	2b00      	cmp	r3, #0
 8007262:	d02d      	beq.n	80072c0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007264:	4b85      	ldr	r3, [pc, #532]	@ (800747c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	08db      	lsrs	r3, r3, #3
 800726a:	f003 0303 	and.w	r3, r3, #3
 800726e:	4a84      	ldr	r2, [pc, #528]	@ (8007480 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007270:	fa22 f303 	lsr.w	r3, r2, r3
 8007274:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007276:	68bb      	ldr	r3, [r7, #8]
 8007278:	ee07 3a90 	vmov	s15, r3
 800727c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007280:	697b      	ldr	r3, [r7, #20]
 8007282:	ee07 3a90 	vmov	s15, r3
 8007286:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800728a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800728e:	4b7b      	ldr	r3, [pc, #492]	@ (800747c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007290:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007292:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007296:	ee07 3a90 	vmov	s15, r3
 800729a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800729e:	ed97 6a03 	vldr	s12, [r7, #12]
 80072a2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007484 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80072a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80072b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072ba:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80072be:	e087      	b.n	80073d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80072c0:	697b      	ldr	r3, [r7, #20]
 80072c2:	ee07 3a90 	vmov	s15, r3
 80072c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072ca:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007488 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80072ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072d2:	4b6a      	ldr	r3, [pc, #424]	@ (800747c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072da:	ee07 3a90 	vmov	s15, r3
 80072de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80072e6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007484 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80072ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80072f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007302:	e065      	b.n	80073d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007304:	697b      	ldr	r3, [r7, #20]
 8007306:	ee07 3a90 	vmov	s15, r3
 800730a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800730e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800748c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007312:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007316:	4b59      	ldr	r3, [pc, #356]	@ (800747c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800731a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800731e:	ee07 3a90 	vmov	s15, r3
 8007322:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007326:	ed97 6a03 	vldr	s12, [r7, #12]
 800732a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007484 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800732e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007332:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007336:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800733a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800733e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007342:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007346:	e043      	b.n	80073d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007348:	697b      	ldr	r3, [r7, #20]
 800734a:	ee07 3a90 	vmov	s15, r3
 800734e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007352:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007490 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007356:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800735a:	4b48      	ldr	r3, [pc, #288]	@ (800747c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800735c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800735e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007362:	ee07 3a90 	vmov	s15, r3
 8007366:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800736a:	ed97 6a03 	vldr	s12, [r7, #12]
 800736e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007484 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007372:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007376:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800737a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800737e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007382:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007386:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800738a:	e021      	b.n	80073d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800738c:	697b      	ldr	r3, [r7, #20]
 800738e:	ee07 3a90 	vmov	s15, r3
 8007392:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007396:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800748c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800739a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800739e:	4b37      	ldr	r3, [pc, #220]	@ (800747c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073a6:	ee07 3a90 	vmov	s15, r3
 80073aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80073b2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007484 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80073b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80073c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80073ce:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80073d0:	4b2a      	ldr	r3, [pc, #168]	@ (800747c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073d4:	0a5b      	lsrs	r3, r3, #9
 80073d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80073da:	ee07 3a90 	vmov	s15, r3
 80073de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073e2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80073e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80073ea:	edd7 6a07 	vldr	s13, [r7, #28]
 80073ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80073f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80073f6:	ee17 2a90 	vmov	r2, s15
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80073fe:	4b1f      	ldr	r3, [pc, #124]	@ (800747c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007400:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007402:	0c1b      	lsrs	r3, r3, #16
 8007404:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007408:	ee07 3a90 	vmov	s15, r3
 800740c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007410:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007414:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007418:	edd7 6a07 	vldr	s13, [r7, #28]
 800741c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007420:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007424:	ee17 2a90 	vmov	r2, s15
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800742c:	4b13      	ldr	r3, [pc, #76]	@ (800747c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800742e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007430:	0e1b      	lsrs	r3, r3, #24
 8007432:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007436:	ee07 3a90 	vmov	s15, r3
 800743a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800743e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007442:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007446:	edd7 6a07 	vldr	s13, [r7, #28]
 800744a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800744e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007452:	ee17 2a90 	vmov	r2, s15
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800745a:	e008      	b.n	800746e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2200      	movs	r2, #0
 8007460:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2200      	movs	r2, #0
 8007466:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2200      	movs	r2, #0
 800746c:	609a      	str	r2, [r3, #8]
}
 800746e:	bf00      	nop
 8007470:	3724      	adds	r7, #36	@ 0x24
 8007472:	46bd      	mov	sp, r7
 8007474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007478:	4770      	bx	lr
 800747a:	bf00      	nop
 800747c:	58024400 	.word	0x58024400
 8007480:	03d09000 	.word	0x03d09000
 8007484:	46000000 	.word	0x46000000
 8007488:	4c742400 	.word	0x4c742400
 800748c:	4a742400 	.word	0x4a742400
 8007490:	4bb71b00 	.word	0x4bb71b00

08007494 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b084      	sub	sp, #16
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
 800749c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800749e:	2300      	movs	r3, #0
 80074a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80074a2:	4b53      	ldr	r3, [pc, #332]	@ (80075f0 <RCCEx_PLL2_Config+0x15c>)
 80074a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074a6:	f003 0303 	and.w	r3, r3, #3
 80074aa:	2b03      	cmp	r3, #3
 80074ac:	d101      	bne.n	80074b2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80074ae:	2301      	movs	r3, #1
 80074b0:	e099      	b.n	80075e6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80074b2:	4b4f      	ldr	r3, [pc, #316]	@ (80075f0 <RCCEx_PLL2_Config+0x15c>)
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	4a4e      	ldr	r2, [pc, #312]	@ (80075f0 <RCCEx_PLL2_Config+0x15c>)
 80074b8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80074bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80074be:	f7f9 fdb5 	bl	800102c <HAL_GetTick>
 80074c2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80074c4:	e008      	b.n	80074d8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80074c6:	f7f9 fdb1 	bl	800102c <HAL_GetTick>
 80074ca:	4602      	mov	r2, r0
 80074cc:	68bb      	ldr	r3, [r7, #8]
 80074ce:	1ad3      	subs	r3, r2, r3
 80074d0:	2b02      	cmp	r3, #2
 80074d2:	d901      	bls.n	80074d8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80074d4:	2303      	movs	r3, #3
 80074d6:	e086      	b.n	80075e6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80074d8:	4b45      	ldr	r3, [pc, #276]	@ (80075f0 <RCCEx_PLL2_Config+0x15c>)
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d1f0      	bne.n	80074c6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80074e4:	4b42      	ldr	r3, [pc, #264]	@ (80075f0 <RCCEx_PLL2_Config+0x15c>)
 80074e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074e8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	031b      	lsls	r3, r3, #12
 80074f2:	493f      	ldr	r1, [pc, #252]	@ (80075f0 <RCCEx_PLL2_Config+0x15c>)
 80074f4:	4313      	orrs	r3, r2
 80074f6:	628b      	str	r3, [r1, #40]	@ 0x28
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	685b      	ldr	r3, [r3, #4]
 80074fc:	3b01      	subs	r3, #1
 80074fe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	689b      	ldr	r3, [r3, #8]
 8007506:	3b01      	subs	r3, #1
 8007508:	025b      	lsls	r3, r3, #9
 800750a:	b29b      	uxth	r3, r3
 800750c:	431a      	orrs	r2, r3
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	68db      	ldr	r3, [r3, #12]
 8007512:	3b01      	subs	r3, #1
 8007514:	041b      	lsls	r3, r3, #16
 8007516:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800751a:	431a      	orrs	r2, r3
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	691b      	ldr	r3, [r3, #16]
 8007520:	3b01      	subs	r3, #1
 8007522:	061b      	lsls	r3, r3, #24
 8007524:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007528:	4931      	ldr	r1, [pc, #196]	@ (80075f0 <RCCEx_PLL2_Config+0x15c>)
 800752a:	4313      	orrs	r3, r2
 800752c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800752e:	4b30      	ldr	r3, [pc, #192]	@ (80075f0 <RCCEx_PLL2_Config+0x15c>)
 8007530:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007532:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	695b      	ldr	r3, [r3, #20]
 800753a:	492d      	ldr	r1, [pc, #180]	@ (80075f0 <RCCEx_PLL2_Config+0x15c>)
 800753c:	4313      	orrs	r3, r2
 800753e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007540:	4b2b      	ldr	r3, [pc, #172]	@ (80075f0 <RCCEx_PLL2_Config+0x15c>)
 8007542:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007544:	f023 0220 	bic.w	r2, r3, #32
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	699b      	ldr	r3, [r3, #24]
 800754c:	4928      	ldr	r1, [pc, #160]	@ (80075f0 <RCCEx_PLL2_Config+0x15c>)
 800754e:	4313      	orrs	r3, r2
 8007550:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007552:	4b27      	ldr	r3, [pc, #156]	@ (80075f0 <RCCEx_PLL2_Config+0x15c>)
 8007554:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007556:	4a26      	ldr	r2, [pc, #152]	@ (80075f0 <RCCEx_PLL2_Config+0x15c>)
 8007558:	f023 0310 	bic.w	r3, r3, #16
 800755c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800755e:	4b24      	ldr	r3, [pc, #144]	@ (80075f0 <RCCEx_PLL2_Config+0x15c>)
 8007560:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007562:	4b24      	ldr	r3, [pc, #144]	@ (80075f4 <RCCEx_PLL2_Config+0x160>)
 8007564:	4013      	ands	r3, r2
 8007566:	687a      	ldr	r2, [r7, #4]
 8007568:	69d2      	ldr	r2, [r2, #28]
 800756a:	00d2      	lsls	r2, r2, #3
 800756c:	4920      	ldr	r1, [pc, #128]	@ (80075f0 <RCCEx_PLL2_Config+0x15c>)
 800756e:	4313      	orrs	r3, r2
 8007570:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007572:	4b1f      	ldr	r3, [pc, #124]	@ (80075f0 <RCCEx_PLL2_Config+0x15c>)
 8007574:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007576:	4a1e      	ldr	r2, [pc, #120]	@ (80075f0 <RCCEx_PLL2_Config+0x15c>)
 8007578:	f043 0310 	orr.w	r3, r3, #16
 800757c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800757e:	683b      	ldr	r3, [r7, #0]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d106      	bne.n	8007592 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007584:	4b1a      	ldr	r3, [pc, #104]	@ (80075f0 <RCCEx_PLL2_Config+0x15c>)
 8007586:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007588:	4a19      	ldr	r2, [pc, #100]	@ (80075f0 <RCCEx_PLL2_Config+0x15c>)
 800758a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800758e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007590:	e00f      	b.n	80075b2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	2b01      	cmp	r3, #1
 8007596:	d106      	bne.n	80075a6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007598:	4b15      	ldr	r3, [pc, #84]	@ (80075f0 <RCCEx_PLL2_Config+0x15c>)
 800759a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800759c:	4a14      	ldr	r2, [pc, #80]	@ (80075f0 <RCCEx_PLL2_Config+0x15c>)
 800759e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80075a2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80075a4:	e005      	b.n	80075b2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80075a6:	4b12      	ldr	r3, [pc, #72]	@ (80075f0 <RCCEx_PLL2_Config+0x15c>)
 80075a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075aa:	4a11      	ldr	r2, [pc, #68]	@ (80075f0 <RCCEx_PLL2_Config+0x15c>)
 80075ac:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80075b0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80075b2:	4b0f      	ldr	r3, [pc, #60]	@ (80075f0 <RCCEx_PLL2_Config+0x15c>)
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	4a0e      	ldr	r2, [pc, #56]	@ (80075f0 <RCCEx_PLL2_Config+0x15c>)
 80075b8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80075bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80075be:	f7f9 fd35 	bl	800102c <HAL_GetTick>
 80075c2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80075c4:	e008      	b.n	80075d8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80075c6:	f7f9 fd31 	bl	800102c <HAL_GetTick>
 80075ca:	4602      	mov	r2, r0
 80075cc:	68bb      	ldr	r3, [r7, #8]
 80075ce:	1ad3      	subs	r3, r2, r3
 80075d0:	2b02      	cmp	r3, #2
 80075d2:	d901      	bls.n	80075d8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80075d4:	2303      	movs	r3, #3
 80075d6:	e006      	b.n	80075e6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80075d8:	4b05      	ldr	r3, [pc, #20]	@ (80075f0 <RCCEx_PLL2_Config+0x15c>)
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d0f0      	beq.n	80075c6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80075e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80075e6:	4618      	mov	r0, r3
 80075e8:	3710      	adds	r7, #16
 80075ea:	46bd      	mov	sp, r7
 80075ec:	bd80      	pop	{r7, pc}
 80075ee:	bf00      	nop
 80075f0:	58024400 	.word	0x58024400
 80075f4:	ffff0007 	.word	0xffff0007

080075f8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b084      	sub	sp, #16
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
 8007600:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007602:	2300      	movs	r3, #0
 8007604:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007606:	4b53      	ldr	r3, [pc, #332]	@ (8007754 <RCCEx_PLL3_Config+0x15c>)
 8007608:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800760a:	f003 0303 	and.w	r3, r3, #3
 800760e:	2b03      	cmp	r3, #3
 8007610:	d101      	bne.n	8007616 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007612:	2301      	movs	r3, #1
 8007614:	e099      	b.n	800774a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007616:	4b4f      	ldr	r3, [pc, #316]	@ (8007754 <RCCEx_PLL3_Config+0x15c>)
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	4a4e      	ldr	r2, [pc, #312]	@ (8007754 <RCCEx_PLL3_Config+0x15c>)
 800761c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007620:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007622:	f7f9 fd03 	bl	800102c <HAL_GetTick>
 8007626:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007628:	e008      	b.n	800763c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800762a:	f7f9 fcff 	bl	800102c <HAL_GetTick>
 800762e:	4602      	mov	r2, r0
 8007630:	68bb      	ldr	r3, [r7, #8]
 8007632:	1ad3      	subs	r3, r2, r3
 8007634:	2b02      	cmp	r3, #2
 8007636:	d901      	bls.n	800763c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007638:	2303      	movs	r3, #3
 800763a:	e086      	b.n	800774a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800763c:	4b45      	ldr	r3, [pc, #276]	@ (8007754 <RCCEx_PLL3_Config+0x15c>)
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007644:	2b00      	cmp	r3, #0
 8007646:	d1f0      	bne.n	800762a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007648:	4b42      	ldr	r3, [pc, #264]	@ (8007754 <RCCEx_PLL3_Config+0x15c>)
 800764a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800764c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	051b      	lsls	r3, r3, #20
 8007656:	493f      	ldr	r1, [pc, #252]	@ (8007754 <RCCEx_PLL3_Config+0x15c>)
 8007658:	4313      	orrs	r3, r2
 800765a:	628b      	str	r3, [r1, #40]	@ 0x28
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	685b      	ldr	r3, [r3, #4]
 8007660:	3b01      	subs	r3, #1
 8007662:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	689b      	ldr	r3, [r3, #8]
 800766a:	3b01      	subs	r3, #1
 800766c:	025b      	lsls	r3, r3, #9
 800766e:	b29b      	uxth	r3, r3
 8007670:	431a      	orrs	r2, r3
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	68db      	ldr	r3, [r3, #12]
 8007676:	3b01      	subs	r3, #1
 8007678:	041b      	lsls	r3, r3, #16
 800767a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800767e:	431a      	orrs	r2, r3
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	691b      	ldr	r3, [r3, #16]
 8007684:	3b01      	subs	r3, #1
 8007686:	061b      	lsls	r3, r3, #24
 8007688:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800768c:	4931      	ldr	r1, [pc, #196]	@ (8007754 <RCCEx_PLL3_Config+0x15c>)
 800768e:	4313      	orrs	r3, r2
 8007690:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007692:	4b30      	ldr	r3, [pc, #192]	@ (8007754 <RCCEx_PLL3_Config+0x15c>)
 8007694:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007696:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	695b      	ldr	r3, [r3, #20]
 800769e:	492d      	ldr	r1, [pc, #180]	@ (8007754 <RCCEx_PLL3_Config+0x15c>)
 80076a0:	4313      	orrs	r3, r2
 80076a2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80076a4:	4b2b      	ldr	r3, [pc, #172]	@ (8007754 <RCCEx_PLL3_Config+0x15c>)
 80076a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076a8:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	699b      	ldr	r3, [r3, #24]
 80076b0:	4928      	ldr	r1, [pc, #160]	@ (8007754 <RCCEx_PLL3_Config+0x15c>)
 80076b2:	4313      	orrs	r3, r2
 80076b4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80076b6:	4b27      	ldr	r3, [pc, #156]	@ (8007754 <RCCEx_PLL3_Config+0x15c>)
 80076b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076ba:	4a26      	ldr	r2, [pc, #152]	@ (8007754 <RCCEx_PLL3_Config+0x15c>)
 80076bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80076c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80076c2:	4b24      	ldr	r3, [pc, #144]	@ (8007754 <RCCEx_PLL3_Config+0x15c>)
 80076c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80076c6:	4b24      	ldr	r3, [pc, #144]	@ (8007758 <RCCEx_PLL3_Config+0x160>)
 80076c8:	4013      	ands	r3, r2
 80076ca:	687a      	ldr	r2, [r7, #4]
 80076cc:	69d2      	ldr	r2, [r2, #28]
 80076ce:	00d2      	lsls	r2, r2, #3
 80076d0:	4920      	ldr	r1, [pc, #128]	@ (8007754 <RCCEx_PLL3_Config+0x15c>)
 80076d2:	4313      	orrs	r3, r2
 80076d4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80076d6:	4b1f      	ldr	r3, [pc, #124]	@ (8007754 <RCCEx_PLL3_Config+0x15c>)
 80076d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076da:	4a1e      	ldr	r2, [pc, #120]	@ (8007754 <RCCEx_PLL3_Config+0x15c>)
 80076dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80076e0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d106      	bne.n	80076f6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80076e8:	4b1a      	ldr	r3, [pc, #104]	@ (8007754 <RCCEx_PLL3_Config+0x15c>)
 80076ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076ec:	4a19      	ldr	r2, [pc, #100]	@ (8007754 <RCCEx_PLL3_Config+0x15c>)
 80076ee:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80076f2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80076f4:	e00f      	b.n	8007716 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	2b01      	cmp	r3, #1
 80076fa:	d106      	bne.n	800770a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80076fc:	4b15      	ldr	r3, [pc, #84]	@ (8007754 <RCCEx_PLL3_Config+0x15c>)
 80076fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007700:	4a14      	ldr	r2, [pc, #80]	@ (8007754 <RCCEx_PLL3_Config+0x15c>)
 8007702:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007706:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007708:	e005      	b.n	8007716 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800770a:	4b12      	ldr	r3, [pc, #72]	@ (8007754 <RCCEx_PLL3_Config+0x15c>)
 800770c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800770e:	4a11      	ldr	r2, [pc, #68]	@ (8007754 <RCCEx_PLL3_Config+0x15c>)
 8007710:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007714:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007716:	4b0f      	ldr	r3, [pc, #60]	@ (8007754 <RCCEx_PLL3_Config+0x15c>)
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	4a0e      	ldr	r2, [pc, #56]	@ (8007754 <RCCEx_PLL3_Config+0x15c>)
 800771c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007720:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007722:	f7f9 fc83 	bl	800102c <HAL_GetTick>
 8007726:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007728:	e008      	b.n	800773c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800772a:	f7f9 fc7f 	bl	800102c <HAL_GetTick>
 800772e:	4602      	mov	r2, r0
 8007730:	68bb      	ldr	r3, [r7, #8]
 8007732:	1ad3      	subs	r3, r2, r3
 8007734:	2b02      	cmp	r3, #2
 8007736:	d901      	bls.n	800773c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007738:	2303      	movs	r3, #3
 800773a:	e006      	b.n	800774a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800773c:	4b05      	ldr	r3, [pc, #20]	@ (8007754 <RCCEx_PLL3_Config+0x15c>)
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007744:	2b00      	cmp	r3, #0
 8007746:	d0f0      	beq.n	800772a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007748:	7bfb      	ldrb	r3, [r7, #15]
}
 800774a:	4618      	mov	r0, r3
 800774c:	3710      	adds	r7, #16
 800774e:	46bd      	mov	sp, r7
 8007750:	bd80      	pop	{r7, pc}
 8007752:	bf00      	nop
 8007754:	58024400 	.word	0x58024400
 8007758:	ffff0007 	.word	0xffff0007

0800775c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800775c:	b580      	push	{r7, lr}
 800775e:	b082      	sub	sp, #8
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d101      	bne.n	800776e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800776a:	2301      	movs	r3, #1
 800776c:	e049      	b.n	8007802 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007774:	b2db      	uxtb	r3, r3
 8007776:	2b00      	cmp	r3, #0
 8007778:	d106      	bne.n	8007788 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	2200      	movs	r2, #0
 800777e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007782:	6878      	ldr	r0, [r7, #4]
 8007784:	f000 f841 	bl	800780a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2202      	movs	r2, #2
 800778c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681a      	ldr	r2, [r3, #0]
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	3304      	adds	r3, #4
 8007798:	4619      	mov	r1, r3
 800779a:	4610      	mov	r0, r2
 800779c:	f000 f9e8 	bl	8007b70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2201      	movs	r2, #1
 80077a4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2201      	movs	r2, #1
 80077ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2201      	movs	r2, #1
 80077b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2201      	movs	r2, #1
 80077bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2201      	movs	r2, #1
 80077c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2201      	movs	r2, #1
 80077cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2201      	movs	r2, #1
 80077d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2201      	movs	r2, #1
 80077dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2201      	movs	r2, #1
 80077e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2201      	movs	r2, #1
 80077ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2201      	movs	r2, #1
 80077f4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2201      	movs	r2, #1
 80077fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007800:	2300      	movs	r3, #0
}
 8007802:	4618      	mov	r0, r3
 8007804:	3708      	adds	r7, #8
 8007806:	46bd      	mov	sp, r7
 8007808:	bd80      	pop	{r7, pc}

0800780a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800780a:	b480      	push	{r7}
 800780c:	b083      	sub	sp, #12
 800780e:	af00      	add	r7, sp, #0
 8007810:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8007812:	bf00      	nop
 8007814:	370c      	adds	r7, #12
 8007816:	46bd      	mov	sp, r7
 8007818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781c:	4770      	bx	lr
	...

08007820 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007820:	b480      	push	{r7}
 8007822:	b085      	sub	sp, #20
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800782e:	b2db      	uxtb	r3, r3
 8007830:	2b01      	cmp	r3, #1
 8007832:	d001      	beq.n	8007838 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007834:	2301      	movs	r3, #1
 8007836:	e054      	b.n	80078e2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2202      	movs	r2, #2
 800783c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	68da      	ldr	r2, [r3, #12]
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	f042 0201 	orr.w	r2, r2, #1
 800784e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	4a26      	ldr	r2, [pc, #152]	@ (80078f0 <HAL_TIM_Base_Start_IT+0xd0>)
 8007856:	4293      	cmp	r3, r2
 8007858:	d022      	beq.n	80078a0 <HAL_TIM_Base_Start_IT+0x80>
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007862:	d01d      	beq.n	80078a0 <HAL_TIM_Base_Start_IT+0x80>
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	4a22      	ldr	r2, [pc, #136]	@ (80078f4 <HAL_TIM_Base_Start_IT+0xd4>)
 800786a:	4293      	cmp	r3, r2
 800786c:	d018      	beq.n	80078a0 <HAL_TIM_Base_Start_IT+0x80>
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	4a21      	ldr	r2, [pc, #132]	@ (80078f8 <HAL_TIM_Base_Start_IT+0xd8>)
 8007874:	4293      	cmp	r3, r2
 8007876:	d013      	beq.n	80078a0 <HAL_TIM_Base_Start_IT+0x80>
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	4a1f      	ldr	r2, [pc, #124]	@ (80078fc <HAL_TIM_Base_Start_IT+0xdc>)
 800787e:	4293      	cmp	r3, r2
 8007880:	d00e      	beq.n	80078a0 <HAL_TIM_Base_Start_IT+0x80>
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	4a1e      	ldr	r2, [pc, #120]	@ (8007900 <HAL_TIM_Base_Start_IT+0xe0>)
 8007888:	4293      	cmp	r3, r2
 800788a:	d009      	beq.n	80078a0 <HAL_TIM_Base_Start_IT+0x80>
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	4a1c      	ldr	r2, [pc, #112]	@ (8007904 <HAL_TIM_Base_Start_IT+0xe4>)
 8007892:	4293      	cmp	r3, r2
 8007894:	d004      	beq.n	80078a0 <HAL_TIM_Base_Start_IT+0x80>
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	4a1b      	ldr	r2, [pc, #108]	@ (8007908 <HAL_TIM_Base_Start_IT+0xe8>)
 800789c:	4293      	cmp	r3, r2
 800789e:	d115      	bne.n	80078cc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	689a      	ldr	r2, [r3, #8]
 80078a6:	4b19      	ldr	r3, [pc, #100]	@ (800790c <HAL_TIM_Base_Start_IT+0xec>)
 80078a8:	4013      	ands	r3, r2
 80078aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	2b06      	cmp	r3, #6
 80078b0:	d015      	beq.n	80078de <HAL_TIM_Base_Start_IT+0xbe>
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80078b8:	d011      	beq.n	80078de <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	681a      	ldr	r2, [r3, #0]
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f042 0201 	orr.w	r2, r2, #1
 80078c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078ca:	e008      	b.n	80078de <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	681a      	ldr	r2, [r3, #0]
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f042 0201 	orr.w	r2, r2, #1
 80078da:	601a      	str	r2, [r3, #0]
 80078dc:	e000      	b.n	80078e0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078de:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80078e0:	2300      	movs	r3, #0
}
 80078e2:	4618      	mov	r0, r3
 80078e4:	3714      	adds	r7, #20
 80078e6:	46bd      	mov	sp, r7
 80078e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ec:	4770      	bx	lr
 80078ee:	bf00      	nop
 80078f0:	40010000 	.word	0x40010000
 80078f4:	40000400 	.word	0x40000400
 80078f8:	40000800 	.word	0x40000800
 80078fc:	40000c00 	.word	0x40000c00
 8007900:	40010400 	.word	0x40010400
 8007904:	40001800 	.word	0x40001800
 8007908:	40014000 	.word	0x40014000
 800790c:	00010007 	.word	0x00010007

08007910 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007910:	b580      	push	{r7, lr}
 8007912:	b084      	sub	sp, #16
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	68db      	ldr	r3, [r3, #12]
 800791e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	691b      	ldr	r3, [r3, #16]
 8007926:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007928:	68bb      	ldr	r3, [r7, #8]
 800792a:	f003 0302 	and.w	r3, r3, #2
 800792e:	2b00      	cmp	r3, #0
 8007930:	d020      	beq.n	8007974 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	f003 0302 	and.w	r3, r3, #2
 8007938:	2b00      	cmp	r3, #0
 800793a:	d01b      	beq.n	8007974 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f06f 0202 	mvn.w	r2, #2
 8007944:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	2201      	movs	r2, #1
 800794a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	699b      	ldr	r3, [r3, #24]
 8007952:	f003 0303 	and.w	r3, r3, #3
 8007956:	2b00      	cmp	r3, #0
 8007958:	d003      	beq.n	8007962 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800795a:	6878      	ldr	r0, [r7, #4]
 800795c:	f000 f8e9 	bl	8007b32 <HAL_TIM_IC_CaptureCallback>
 8007960:	e005      	b.n	800796e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007962:	6878      	ldr	r0, [r7, #4]
 8007964:	f000 f8db 	bl	8007b1e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007968:	6878      	ldr	r0, [r7, #4]
 800796a:	f000 f8ec 	bl	8007b46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	2200      	movs	r2, #0
 8007972:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007974:	68bb      	ldr	r3, [r7, #8]
 8007976:	f003 0304 	and.w	r3, r3, #4
 800797a:	2b00      	cmp	r3, #0
 800797c:	d020      	beq.n	80079c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	f003 0304 	and.w	r3, r3, #4
 8007984:	2b00      	cmp	r3, #0
 8007986:	d01b      	beq.n	80079c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f06f 0204 	mvn.w	r2, #4
 8007990:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2202      	movs	r2, #2
 8007996:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	699b      	ldr	r3, [r3, #24]
 800799e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d003      	beq.n	80079ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80079a6:	6878      	ldr	r0, [r7, #4]
 80079a8:	f000 f8c3 	bl	8007b32 <HAL_TIM_IC_CaptureCallback>
 80079ac:	e005      	b.n	80079ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80079ae:	6878      	ldr	r0, [r7, #4]
 80079b0:	f000 f8b5 	bl	8007b1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80079b4:	6878      	ldr	r0, [r7, #4]
 80079b6:	f000 f8c6 	bl	8007b46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2200      	movs	r2, #0
 80079be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80079c0:	68bb      	ldr	r3, [r7, #8]
 80079c2:	f003 0308 	and.w	r3, r3, #8
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d020      	beq.n	8007a0c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	f003 0308 	and.w	r3, r3, #8
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d01b      	beq.n	8007a0c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	f06f 0208 	mvn.w	r2, #8
 80079dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	2204      	movs	r2, #4
 80079e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	69db      	ldr	r3, [r3, #28]
 80079ea:	f003 0303 	and.w	r3, r3, #3
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d003      	beq.n	80079fa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80079f2:	6878      	ldr	r0, [r7, #4]
 80079f4:	f000 f89d 	bl	8007b32 <HAL_TIM_IC_CaptureCallback>
 80079f8:	e005      	b.n	8007a06 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80079fa:	6878      	ldr	r0, [r7, #4]
 80079fc:	f000 f88f 	bl	8007b1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a00:	6878      	ldr	r0, [r7, #4]
 8007a02:	f000 f8a0 	bl	8007b46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	2200      	movs	r2, #0
 8007a0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007a0c:	68bb      	ldr	r3, [r7, #8]
 8007a0e:	f003 0310 	and.w	r3, r3, #16
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d020      	beq.n	8007a58 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	f003 0310 	and.w	r3, r3, #16
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d01b      	beq.n	8007a58 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	f06f 0210 	mvn.w	r2, #16
 8007a28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	2208      	movs	r2, #8
 8007a2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	69db      	ldr	r3, [r3, #28]
 8007a36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d003      	beq.n	8007a46 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a3e:	6878      	ldr	r0, [r7, #4]
 8007a40:	f000 f877 	bl	8007b32 <HAL_TIM_IC_CaptureCallback>
 8007a44:	e005      	b.n	8007a52 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a46:	6878      	ldr	r0, [r7, #4]
 8007a48:	f000 f869 	bl	8007b1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a4c:	6878      	ldr	r0, [r7, #4]
 8007a4e:	f000 f87a 	bl	8007b46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	2200      	movs	r2, #0
 8007a56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007a58:	68bb      	ldr	r3, [r7, #8]
 8007a5a:	f003 0301 	and.w	r3, r3, #1
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d00c      	beq.n	8007a7c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	f003 0301 	and.w	r3, r3, #1
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d007      	beq.n	8007a7c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	f06f 0201 	mvn.w	r2, #1
 8007a74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007a76:	6878      	ldr	r0, [r7, #4]
 8007a78:	f7f9 f80c 	bl	8000a94 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007a7c:	68bb      	ldr	r3, [r7, #8]
 8007a7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d104      	bne.n	8007a90 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8007a86:	68bb      	ldr	r3, [r7, #8]
 8007a88:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d00c      	beq.n	8007aaa <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d007      	beq.n	8007aaa <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8007aa2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007aa4:	6878      	ldr	r0, [r7, #4]
 8007aa6:	f000 f913 	bl	8007cd0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007aaa:	68bb      	ldr	r3, [r7, #8]
 8007aac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d00c      	beq.n	8007ace <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d007      	beq.n	8007ace <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007ac6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007ac8:	6878      	ldr	r0, [r7, #4]
 8007aca:	f000 f90b 	bl	8007ce4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007ace:	68bb      	ldr	r3, [r7, #8]
 8007ad0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d00c      	beq.n	8007af2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d007      	beq.n	8007af2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007aea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007aec:	6878      	ldr	r0, [r7, #4]
 8007aee:	f000 f834 	bl	8007b5a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007af2:	68bb      	ldr	r3, [r7, #8]
 8007af4:	f003 0320 	and.w	r3, r3, #32
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d00c      	beq.n	8007b16 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	f003 0320 	and.w	r3, r3, #32
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d007      	beq.n	8007b16 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	f06f 0220 	mvn.w	r2, #32
 8007b0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007b10:	6878      	ldr	r0, [r7, #4]
 8007b12:	f000 f8d3 	bl	8007cbc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007b16:	bf00      	nop
 8007b18:	3710      	adds	r7, #16
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	bd80      	pop	{r7, pc}

08007b1e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007b1e:	b480      	push	{r7}
 8007b20:	b083      	sub	sp, #12
 8007b22:	af00      	add	r7, sp, #0
 8007b24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007b26:	bf00      	nop
 8007b28:	370c      	adds	r7, #12
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b30:	4770      	bx	lr

08007b32 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007b32:	b480      	push	{r7}
 8007b34:	b083      	sub	sp, #12
 8007b36:	af00      	add	r7, sp, #0
 8007b38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007b3a:	bf00      	nop
 8007b3c:	370c      	adds	r7, #12
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b44:	4770      	bx	lr

08007b46 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007b46:	b480      	push	{r7}
 8007b48:	b083      	sub	sp, #12
 8007b4a:	af00      	add	r7, sp, #0
 8007b4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007b4e:	bf00      	nop
 8007b50:	370c      	adds	r7, #12
 8007b52:	46bd      	mov	sp, r7
 8007b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b58:	4770      	bx	lr

08007b5a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007b5a:	b480      	push	{r7}
 8007b5c:	b083      	sub	sp, #12
 8007b5e:	af00      	add	r7, sp, #0
 8007b60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007b62:	bf00      	nop
 8007b64:	370c      	adds	r7, #12
 8007b66:	46bd      	mov	sp, r7
 8007b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6c:	4770      	bx	lr
	...

08007b70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007b70:	b480      	push	{r7}
 8007b72:	b085      	sub	sp, #20
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
 8007b78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	4a46      	ldr	r2, [pc, #280]	@ (8007c9c <TIM_Base_SetConfig+0x12c>)
 8007b84:	4293      	cmp	r3, r2
 8007b86:	d013      	beq.n	8007bb0 <TIM_Base_SetConfig+0x40>
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b8e:	d00f      	beq.n	8007bb0 <TIM_Base_SetConfig+0x40>
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	4a43      	ldr	r2, [pc, #268]	@ (8007ca0 <TIM_Base_SetConfig+0x130>)
 8007b94:	4293      	cmp	r3, r2
 8007b96:	d00b      	beq.n	8007bb0 <TIM_Base_SetConfig+0x40>
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	4a42      	ldr	r2, [pc, #264]	@ (8007ca4 <TIM_Base_SetConfig+0x134>)
 8007b9c:	4293      	cmp	r3, r2
 8007b9e:	d007      	beq.n	8007bb0 <TIM_Base_SetConfig+0x40>
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	4a41      	ldr	r2, [pc, #260]	@ (8007ca8 <TIM_Base_SetConfig+0x138>)
 8007ba4:	4293      	cmp	r3, r2
 8007ba6:	d003      	beq.n	8007bb0 <TIM_Base_SetConfig+0x40>
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	4a40      	ldr	r2, [pc, #256]	@ (8007cac <TIM_Base_SetConfig+0x13c>)
 8007bac:	4293      	cmp	r3, r2
 8007bae:	d108      	bne.n	8007bc2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007bb6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	685b      	ldr	r3, [r3, #4]
 8007bbc:	68fa      	ldr	r2, [r7, #12]
 8007bbe:	4313      	orrs	r3, r2
 8007bc0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	4a35      	ldr	r2, [pc, #212]	@ (8007c9c <TIM_Base_SetConfig+0x12c>)
 8007bc6:	4293      	cmp	r3, r2
 8007bc8:	d01f      	beq.n	8007c0a <TIM_Base_SetConfig+0x9a>
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007bd0:	d01b      	beq.n	8007c0a <TIM_Base_SetConfig+0x9a>
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	4a32      	ldr	r2, [pc, #200]	@ (8007ca0 <TIM_Base_SetConfig+0x130>)
 8007bd6:	4293      	cmp	r3, r2
 8007bd8:	d017      	beq.n	8007c0a <TIM_Base_SetConfig+0x9a>
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	4a31      	ldr	r2, [pc, #196]	@ (8007ca4 <TIM_Base_SetConfig+0x134>)
 8007bde:	4293      	cmp	r3, r2
 8007be0:	d013      	beq.n	8007c0a <TIM_Base_SetConfig+0x9a>
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	4a30      	ldr	r2, [pc, #192]	@ (8007ca8 <TIM_Base_SetConfig+0x138>)
 8007be6:	4293      	cmp	r3, r2
 8007be8:	d00f      	beq.n	8007c0a <TIM_Base_SetConfig+0x9a>
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	4a2f      	ldr	r2, [pc, #188]	@ (8007cac <TIM_Base_SetConfig+0x13c>)
 8007bee:	4293      	cmp	r3, r2
 8007bf0:	d00b      	beq.n	8007c0a <TIM_Base_SetConfig+0x9a>
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	4a2e      	ldr	r2, [pc, #184]	@ (8007cb0 <TIM_Base_SetConfig+0x140>)
 8007bf6:	4293      	cmp	r3, r2
 8007bf8:	d007      	beq.n	8007c0a <TIM_Base_SetConfig+0x9a>
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	4a2d      	ldr	r2, [pc, #180]	@ (8007cb4 <TIM_Base_SetConfig+0x144>)
 8007bfe:	4293      	cmp	r3, r2
 8007c00:	d003      	beq.n	8007c0a <TIM_Base_SetConfig+0x9a>
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	4a2c      	ldr	r2, [pc, #176]	@ (8007cb8 <TIM_Base_SetConfig+0x148>)
 8007c06:	4293      	cmp	r3, r2
 8007c08:	d108      	bne.n	8007c1c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007c10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	68db      	ldr	r3, [r3, #12]
 8007c16:	68fa      	ldr	r2, [r7, #12]
 8007c18:	4313      	orrs	r3, r2
 8007c1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	695b      	ldr	r3, [r3, #20]
 8007c26:	4313      	orrs	r3, r2
 8007c28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	68fa      	ldr	r2, [r7, #12]
 8007c2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	689a      	ldr	r2, [r3, #8]
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	681a      	ldr	r2, [r3, #0]
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	4a16      	ldr	r2, [pc, #88]	@ (8007c9c <TIM_Base_SetConfig+0x12c>)
 8007c44:	4293      	cmp	r3, r2
 8007c46:	d00f      	beq.n	8007c68 <TIM_Base_SetConfig+0xf8>
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	4a18      	ldr	r2, [pc, #96]	@ (8007cac <TIM_Base_SetConfig+0x13c>)
 8007c4c:	4293      	cmp	r3, r2
 8007c4e:	d00b      	beq.n	8007c68 <TIM_Base_SetConfig+0xf8>
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	4a17      	ldr	r2, [pc, #92]	@ (8007cb0 <TIM_Base_SetConfig+0x140>)
 8007c54:	4293      	cmp	r3, r2
 8007c56:	d007      	beq.n	8007c68 <TIM_Base_SetConfig+0xf8>
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	4a16      	ldr	r2, [pc, #88]	@ (8007cb4 <TIM_Base_SetConfig+0x144>)
 8007c5c:	4293      	cmp	r3, r2
 8007c5e:	d003      	beq.n	8007c68 <TIM_Base_SetConfig+0xf8>
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	4a15      	ldr	r2, [pc, #84]	@ (8007cb8 <TIM_Base_SetConfig+0x148>)
 8007c64:	4293      	cmp	r3, r2
 8007c66:	d103      	bne.n	8007c70 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	691a      	ldr	r2, [r3, #16]
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2201      	movs	r2, #1
 8007c74:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	691b      	ldr	r3, [r3, #16]
 8007c7a:	f003 0301 	and.w	r3, r3, #1
 8007c7e:	2b01      	cmp	r3, #1
 8007c80:	d105      	bne.n	8007c8e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	691b      	ldr	r3, [r3, #16]
 8007c86:	f023 0201 	bic.w	r2, r3, #1
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	611a      	str	r2, [r3, #16]
  }
}
 8007c8e:	bf00      	nop
 8007c90:	3714      	adds	r7, #20
 8007c92:	46bd      	mov	sp, r7
 8007c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c98:	4770      	bx	lr
 8007c9a:	bf00      	nop
 8007c9c:	40010000 	.word	0x40010000
 8007ca0:	40000400 	.word	0x40000400
 8007ca4:	40000800 	.word	0x40000800
 8007ca8:	40000c00 	.word	0x40000c00
 8007cac:	40010400 	.word	0x40010400
 8007cb0:	40014000 	.word	0x40014000
 8007cb4:	40014400 	.word	0x40014400
 8007cb8:	40014800 	.word	0x40014800

08007cbc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007cbc:	b480      	push	{r7}
 8007cbe:	b083      	sub	sp, #12
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007cc4:	bf00      	nop
 8007cc6:	370c      	adds	r7, #12
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cce:	4770      	bx	lr

08007cd0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007cd0:	b480      	push	{r7}
 8007cd2:	b083      	sub	sp, #12
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007cd8:	bf00      	nop
 8007cda:	370c      	adds	r7, #12
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce2:	4770      	bx	lr

08007ce4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007ce4:	b480      	push	{r7}
 8007ce6:	b083      	sub	sp, #12
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007cec:	bf00      	nop
 8007cee:	370c      	adds	r7, #12
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf6:	4770      	bx	lr

08007cf8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b082      	sub	sp, #8
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d101      	bne.n	8007d0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007d06:	2301      	movs	r3, #1
 8007d08:	e042      	b.n	8007d90 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d106      	bne.n	8007d22 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2200      	movs	r2, #0
 8007d18:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007d1c:	6878      	ldr	r0, [r7, #4]
 8007d1e:	f7f9 f8a1 	bl	8000e64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2224      	movs	r2, #36	@ 0x24
 8007d26:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	681a      	ldr	r2, [r3, #0]
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	f022 0201 	bic.w	r2, r2, #1
 8007d38:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d002      	beq.n	8007d48 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007d42:	6878      	ldr	r0, [r7, #4]
 8007d44:	f000 fe94 	bl	8008a70 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007d48:	6878      	ldr	r0, [r7, #4]
 8007d4a:	f000 f825 	bl	8007d98 <UART_SetConfig>
 8007d4e:	4603      	mov	r3, r0
 8007d50:	2b01      	cmp	r3, #1
 8007d52:	d101      	bne.n	8007d58 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007d54:	2301      	movs	r3, #1
 8007d56:	e01b      	b.n	8007d90 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	685a      	ldr	r2, [r3, #4]
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007d66:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	689a      	ldr	r2, [r3, #8]
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007d76:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	681a      	ldr	r2, [r3, #0]
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	f042 0201 	orr.w	r2, r2, #1
 8007d86:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007d88:	6878      	ldr	r0, [r7, #4]
 8007d8a:	f000 ff13 	bl	8008bb4 <UART_CheckIdleState>
 8007d8e:	4603      	mov	r3, r0
}
 8007d90:	4618      	mov	r0, r3
 8007d92:	3708      	adds	r7, #8
 8007d94:	46bd      	mov	sp, r7
 8007d96:	bd80      	pop	{r7, pc}

08007d98 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007d98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007d9c:	b092      	sub	sp, #72	@ 0x48
 8007d9e:	af00      	add	r7, sp, #0
 8007da0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007da2:	2300      	movs	r3, #0
 8007da4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007da8:	697b      	ldr	r3, [r7, #20]
 8007daa:	689a      	ldr	r2, [r3, #8]
 8007dac:	697b      	ldr	r3, [r7, #20]
 8007dae:	691b      	ldr	r3, [r3, #16]
 8007db0:	431a      	orrs	r2, r3
 8007db2:	697b      	ldr	r3, [r7, #20]
 8007db4:	695b      	ldr	r3, [r3, #20]
 8007db6:	431a      	orrs	r2, r3
 8007db8:	697b      	ldr	r3, [r7, #20]
 8007dba:	69db      	ldr	r3, [r3, #28]
 8007dbc:	4313      	orrs	r3, r2
 8007dbe:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007dc0:	697b      	ldr	r3, [r7, #20]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	681a      	ldr	r2, [r3, #0]
 8007dc6:	4bbe      	ldr	r3, [pc, #760]	@ (80080c0 <UART_SetConfig+0x328>)
 8007dc8:	4013      	ands	r3, r2
 8007dca:	697a      	ldr	r2, [r7, #20]
 8007dcc:	6812      	ldr	r2, [r2, #0]
 8007dce:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007dd0:	430b      	orrs	r3, r1
 8007dd2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007dd4:	697b      	ldr	r3, [r7, #20]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	685b      	ldr	r3, [r3, #4]
 8007dda:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007dde:	697b      	ldr	r3, [r7, #20]
 8007de0:	68da      	ldr	r2, [r3, #12]
 8007de2:	697b      	ldr	r3, [r7, #20]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	430a      	orrs	r2, r1
 8007de8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007dea:	697b      	ldr	r3, [r7, #20]
 8007dec:	699b      	ldr	r3, [r3, #24]
 8007dee:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007df0:	697b      	ldr	r3, [r7, #20]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	4ab3      	ldr	r2, [pc, #716]	@ (80080c4 <UART_SetConfig+0x32c>)
 8007df6:	4293      	cmp	r3, r2
 8007df8:	d004      	beq.n	8007e04 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007dfa:	697b      	ldr	r3, [r7, #20]
 8007dfc:	6a1b      	ldr	r3, [r3, #32]
 8007dfe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007e00:	4313      	orrs	r3, r2
 8007e02:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007e04:	697b      	ldr	r3, [r7, #20]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	689a      	ldr	r2, [r3, #8]
 8007e0a:	4baf      	ldr	r3, [pc, #700]	@ (80080c8 <UART_SetConfig+0x330>)
 8007e0c:	4013      	ands	r3, r2
 8007e0e:	697a      	ldr	r2, [r7, #20]
 8007e10:	6812      	ldr	r2, [r2, #0]
 8007e12:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007e14:	430b      	orrs	r3, r1
 8007e16:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007e18:	697b      	ldr	r3, [r7, #20]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e1e:	f023 010f 	bic.w	r1, r3, #15
 8007e22:	697b      	ldr	r3, [r7, #20]
 8007e24:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007e26:	697b      	ldr	r3, [r7, #20]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	430a      	orrs	r2, r1
 8007e2c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007e2e:	697b      	ldr	r3, [r7, #20]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	4aa6      	ldr	r2, [pc, #664]	@ (80080cc <UART_SetConfig+0x334>)
 8007e34:	4293      	cmp	r3, r2
 8007e36:	d177      	bne.n	8007f28 <UART_SetConfig+0x190>
 8007e38:	4ba5      	ldr	r3, [pc, #660]	@ (80080d0 <UART_SetConfig+0x338>)
 8007e3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e3c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007e40:	2b28      	cmp	r3, #40	@ 0x28
 8007e42:	d86d      	bhi.n	8007f20 <UART_SetConfig+0x188>
 8007e44:	a201      	add	r2, pc, #4	@ (adr r2, 8007e4c <UART_SetConfig+0xb4>)
 8007e46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e4a:	bf00      	nop
 8007e4c:	08007ef1 	.word	0x08007ef1
 8007e50:	08007f21 	.word	0x08007f21
 8007e54:	08007f21 	.word	0x08007f21
 8007e58:	08007f21 	.word	0x08007f21
 8007e5c:	08007f21 	.word	0x08007f21
 8007e60:	08007f21 	.word	0x08007f21
 8007e64:	08007f21 	.word	0x08007f21
 8007e68:	08007f21 	.word	0x08007f21
 8007e6c:	08007ef9 	.word	0x08007ef9
 8007e70:	08007f21 	.word	0x08007f21
 8007e74:	08007f21 	.word	0x08007f21
 8007e78:	08007f21 	.word	0x08007f21
 8007e7c:	08007f21 	.word	0x08007f21
 8007e80:	08007f21 	.word	0x08007f21
 8007e84:	08007f21 	.word	0x08007f21
 8007e88:	08007f21 	.word	0x08007f21
 8007e8c:	08007f01 	.word	0x08007f01
 8007e90:	08007f21 	.word	0x08007f21
 8007e94:	08007f21 	.word	0x08007f21
 8007e98:	08007f21 	.word	0x08007f21
 8007e9c:	08007f21 	.word	0x08007f21
 8007ea0:	08007f21 	.word	0x08007f21
 8007ea4:	08007f21 	.word	0x08007f21
 8007ea8:	08007f21 	.word	0x08007f21
 8007eac:	08007f09 	.word	0x08007f09
 8007eb0:	08007f21 	.word	0x08007f21
 8007eb4:	08007f21 	.word	0x08007f21
 8007eb8:	08007f21 	.word	0x08007f21
 8007ebc:	08007f21 	.word	0x08007f21
 8007ec0:	08007f21 	.word	0x08007f21
 8007ec4:	08007f21 	.word	0x08007f21
 8007ec8:	08007f21 	.word	0x08007f21
 8007ecc:	08007f11 	.word	0x08007f11
 8007ed0:	08007f21 	.word	0x08007f21
 8007ed4:	08007f21 	.word	0x08007f21
 8007ed8:	08007f21 	.word	0x08007f21
 8007edc:	08007f21 	.word	0x08007f21
 8007ee0:	08007f21 	.word	0x08007f21
 8007ee4:	08007f21 	.word	0x08007f21
 8007ee8:	08007f21 	.word	0x08007f21
 8007eec:	08007f19 	.word	0x08007f19
 8007ef0:	2301      	movs	r3, #1
 8007ef2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ef6:	e326      	b.n	8008546 <UART_SetConfig+0x7ae>
 8007ef8:	2304      	movs	r3, #4
 8007efa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007efe:	e322      	b.n	8008546 <UART_SetConfig+0x7ae>
 8007f00:	2308      	movs	r3, #8
 8007f02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f06:	e31e      	b.n	8008546 <UART_SetConfig+0x7ae>
 8007f08:	2310      	movs	r3, #16
 8007f0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f0e:	e31a      	b.n	8008546 <UART_SetConfig+0x7ae>
 8007f10:	2320      	movs	r3, #32
 8007f12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f16:	e316      	b.n	8008546 <UART_SetConfig+0x7ae>
 8007f18:	2340      	movs	r3, #64	@ 0x40
 8007f1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f1e:	e312      	b.n	8008546 <UART_SetConfig+0x7ae>
 8007f20:	2380      	movs	r3, #128	@ 0x80
 8007f22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f26:	e30e      	b.n	8008546 <UART_SetConfig+0x7ae>
 8007f28:	697b      	ldr	r3, [r7, #20]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	4a69      	ldr	r2, [pc, #420]	@ (80080d4 <UART_SetConfig+0x33c>)
 8007f2e:	4293      	cmp	r3, r2
 8007f30:	d130      	bne.n	8007f94 <UART_SetConfig+0x1fc>
 8007f32:	4b67      	ldr	r3, [pc, #412]	@ (80080d0 <UART_SetConfig+0x338>)
 8007f34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f36:	f003 0307 	and.w	r3, r3, #7
 8007f3a:	2b05      	cmp	r3, #5
 8007f3c:	d826      	bhi.n	8007f8c <UART_SetConfig+0x1f4>
 8007f3e:	a201      	add	r2, pc, #4	@ (adr r2, 8007f44 <UART_SetConfig+0x1ac>)
 8007f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f44:	08007f5d 	.word	0x08007f5d
 8007f48:	08007f65 	.word	0x08007f65
 8007f4c:	08007f6d 	.word	0x08007f6d
 8007f50:	08007f75 	.word	0x08007f75
 8007f54:	08007f7d 	.word	0x08007f7d
 8007f58:	08007f85 	.word	0x08007f85
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f62:	e2f0      	b.n	8008546 <UART_SetConfig+0x7ae>
 8007f64:	2304      	movs	r3, #4
 8007f66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f6a:	e2ec      	b.n	8008546 <UART_SetConfig+0x7ae>
 8007f6c:	2308      	movs	r3, #8
 8007f6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f72:	e2e8      	b.n	8008546 <UART_SetConfig+0x7ae>
 8007f74:	2310      	movs	r3, #16
 8007f76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f7a:	e2e4      	b.n	8008546 <UART_SetConfig+0x7ae>
 8007f7c:	2320      	movs	r3, #32
 8007f7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f82:	e2e0      	b.n	8008546 <UART_SetConfig+0x7ae>
 8007f84:	2340      	movs	r3, #64	@ 0x40
 8007f86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f8a:	e2dc      	b.n	8008546 <UART_SetConfig+0x7ae>
 8007f8c:	2380      	movs	r3, #128	@ 0x80
 8007f8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f92:	e2d8      	b.n	8008546 <UART_SetConfig+0x7ae>
 8007f94:	697b      	ldr	r3, [r7, #20]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	4a4f      	ldr	r2, [pc, #316]	@ (80080d8 <UART_SetConfig+0x340>)
 8007f9a:	4293      	cmp	r3, r2
 8007f9c:	d130      	bne.n	8008000 <UART_SetConfig+0x268>
 8007f9e:	4b4c      	ldr	r3, [pc, #304]	@ (80080d0 <UART_SetConfig+0x338>)
 8007fa0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007fa2:	f003 0307 	and.w	r3, r3, #7
 8007fa6:	2b05      	cmp	r3, #5
 8007fa8:	d826      	bhi.n	8007ff8 <UART_SetConfig+0x260>
 8007faa:	a201      	add	r2, pc, #4	@ (adr r2, 8007fb0 <UART_SetConfig+0x218>)
 8007fac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fb0:	08007fc9 	.word	0x08007fc9
 8007fb4:	08007fd1 	.word	0x08007fd1
 8007fb8:	08007fd9 	.word	0x08007fd9
 8007fbc:	08007fe1 	.word	0x08007fe1
 8007fc0:	08007fe9 	.word	0x08007fe9
 8007fc4:	08007ff1 	.word	0x08007ff1
 8007fc8:	2300      	movs	r3, #0
 8007fca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007fce:	e2ba      	b.n	8008546 <UART_SetConfig+0x7ae>
 8007fd0:	2304      	movs	r3, #4
 8007fd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007fd6:	e2b6      	b.n	8008546 <UART_SetConfig+0x7ae>
 8007fd8:	2308      	movs	r3, #8
 8007fda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007fde:	e2b2      	b.n	8008546 <UART_SetConfig+0x7ae>
 8007fe0:	2310      	movs	r3, #16
 8007fe2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007fe6:	e2ae      	b.n	8008546 <UART_SetConfig+0x7ae>
 8007fe8:	2320      	movs	r3, #32
 8007fea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007fee:	e2aa      	b.n	8008546 <UART_SetConfig+0x7ae>
 8007ff0:	2340      	movs	r3, #64	@ 0x40
 8007ff2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ff6:	e2a6      	b.n	8008546 <UART_SetConfig+0x7ae>
 8007ff8:	2380      	movs	r3, #128	@ 0x80
 8007ffa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ffe:	e2a2      	b.n	8008546 <UART_SetConfig+0x7ae>
 8008000:	697b      	ldr	r3, [r7, #20]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	4a35      	ldr	r2, [pc, #212]	@ (80080dc <UART_SetConfig+0x344>)
 8008006:	4293      	cmp	r3, r2
 8008008:	d130      	bne.n	800806c <UART_SetConfig+0x2d4>
 800800a:	4b31      	ldr	r3, [pc, #196]	@ (80080d0 <UART_SetConfig+0x338>)
 800800c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800800e:	f003 0307 	and.w	r3, r3, #7
 8008012:	2b05      	cmp	r3, #5
 8008014:	d826      	bhi.n	8008064 <UART_SetConfig+0x2cc>
 8008016:	a201      	add	r2, pc, #4	@ (adr r2, 800801c <UART_SetConfig+0x284>)
 8008018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800801c:	08008035 	.word	0x08008035
 8008020:	0800803d 	.word	0x0800803d
 8008024:	08008045 	.word	0x08008045
 8008028:	0800804d 	.word	0x0800804d
 800802c:	08008055 	.word	0x08008055
 8008030:	0800805d 	.word	0x0800805d
 8008034:	2300      	movs	r3, #0
 8008036:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800803a:	e284      	b.n	8008546 <UART_SetConfig+0x7ae>
 800803c:	2304      	movs	r3, #4
 800803e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008042:	e280      	b.n	8008546 <UART_SetConfig+0x7ae>
 8008044:	2308      	movs	r3, #8
 8008046:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800804a:	e27c      	b.n	8008546 <UART_SetConfig+0x7ae>
 800804c:	2310      	movs	r3, #16
 800804e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008052:	e278      	b.n	8008546 <UART_SetConfig+0x7ae>
 8008054:	2320      	movs	r3, #32
 8008056:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800805a:	e274      	b.n	8008546 <UART_SetConfig+0x7ae>
 800805c:	2340      	movs	r3, #64	@ 0x40
 800805e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008062:	e270      	b.n	8008546 <UART_SetConfig+0x7ae>
 8008064:	2380      	movs	r3, #128	@ 0x80
 8008066:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800806a:	e26c      	b.n	8008546 <UART_SetConfig+0x7ae>
 800806c:	697b      	ldr	r3, [r7, #20]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	4a1b      	ldr	r2, [pc, #108]	@ (80080e0 <UART_SetConfig+0x348>)
 8008072:	4293      	cmp	r3, r2
 8008074:	d142      	bne.n	80080fc <UART_SetConfig+0x364>
 8008076:	4b16      	ldr	r3, [pc, #88]	@ (80080d0 <UART_SetConfig+0x338>)
 8008078:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800807a:	f003 0307 	and.w	r3, r3, #7
 800807e:	2b05      	cmp	r3, #5
 8008080:	d838      	bhi.n	80080f4 <UART_SetConfig+0x35c>
 8008082:	a201      	add	r2, pc, #4	@ (adr r2, 8008088 <UART_SetConfig+0x2f0>)
 8008084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008088:	080080a1 	.word	0x080080a1
 800808c:	080080a9 	.word	0x080080a9
 8008090:	080080b1 	.word	0x080080b1
 8008094:	080080b9 	.word	0x080080b9
 8008098:	080080e5 	.word	0x080080e5
 800809c:	080080ed 	.word	0x080080ed
 80080a0:	2300      	movs	r3, #0
 80080a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080a6:	e24e      	b.n	8008546 <UART_SetConfig+0x7ae>
 80080a8:	2304      	movs	r3, #4
 80080aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080ae:	e24a      	b.n	8008546 <UART_SetConfig+0x7ae>
 80080b0:	2308      	movs	r3, #8
 80080b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080b6:	e246      	b.n	8008546 <UART_SetConfig+0x7ae>
 80080b8:	2310      	movs	r3, #16
 80080ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080be:	e242      	b.n	8008546 <UART_SetConfig+0x7ae>
 80080c0:	cfff69f3 	.word	0xcfff69f3
 80080c4:	58000c00 	.word	0x58000c00
 80080c8:	11fff4ff 	.word	0x11fff4ff
 80080cc:	40011000 	.word	0x40011000
 80080d0:	58024400 	.word	0x58024400
 80080d4:	40004400 	.word	0x40004400
 80080d8:	40004800 	.word	0x40004800
 80080dc:	40004c00 	.word	0x40004c00
 80080e0:	40005000 	.word	0x40005000
 80080e4:	2320      	movs	r3, #32
 80080e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080ea:	e22c      	b.n	8008546 <UART_SetConfig+0x7ae>
 80080ec:	2340      	movs	r3, #64	@ 0x40
 80080ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080f2:	e228      	b.n	8008546 <UART_SetConfig+0x7ae>
 80080f4:	2380      	movs	r3, #128	@ 0x80
 80080f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080fa:	e224      	b.n	8008546 <UART_SetConfig+0x7ae>
 80080fc:	697b      	ldr	r3, [r7, #20]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	4ab1      	ldr	r2, [pc, #708]	@ (80083c8 <UART_SetConfig+0x630>)
 8008102:	4293      	cmp	r3, r2
 8008104:	d176      	bne.n	80081f4 <UART_SetConfig+0x45c>
 8008106:	4bb1      	ldr	r3, [pc, #708]	@ (80083cc <UART_SetConfig+0x634>)
 8008108:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800810a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800810e:	2b28      	cmp	r3, #40	@ 0x28
 8008110:	d86c      	bhi.n	80081ec <UART_SetConfig+0x454>
 8008112:	a201      	add	r2, pc, #4	@ (adr r2, 8008118 <UART_SetConfig+0x380>)
 8008114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008118:	080081bd 	.word	0x080081bd
 800811c:	080081ed 	.word	0x080081ed
 8008120:	080081ed 	.word	0x080081ed
 8008124:	080081ed 	.word	0x080081ed
 8008128:	080081ed 	.word	0x080081ed
 800812c:	080081ed 	.word	0x080081ed
 8008130:	080081ed 	.word	0x080081ed
 8008134:	080081ed 	.word	0x080081ed
 8008138:	080081c5 	.word	0x080081c5
 800813c:	080081ed 	.word	0x080081ed
 8008140:	080081ed 	.word	0x080081ed
 8008144:	080081ed 	.word	0x080081ed
 8008148:	080081ed 	.word	0x080081ed
 800814c:	080081ed 	.word	0x080081ed
 8008150:	080081ed 	.word	0x080081ed
 8008154:	080081ed 	.word	0x080081ed
 8008158:	080081cd 	.word	0x080081cd
 800815c:	080081ed 	.word	0x080081ed
 8008160:	080081ed 	.word	0x080081ed
 8008164:	080081ed 	.word	0x080081ed
 8008168:	080081ed 	.word	0x080081ed
 800816c:	080081ed 	.word	0x080081ed
 8008170:	080081ed 	.word	0x080081ed
 8008174:	080081ed 	.word	0x080081ed
 8008178:	080081d5 	.word	0x080081d5
 800817c:	080081ed 	.word	0x080081ed
 8008180:	080081ed 	.word	0x080081ed
 8008184:	080081ed 	.word	0x080081ed
 8008188:	080081ed 	.word	0x080081ed
 800818c:	080081ed 	.word	0x080081ed
 8008190:	080081ed 	.word	0x080081ed
 8008194:	080081ed 	.word	0x080081ed
 8008198:	080081dd 	.word	0x080081dd
 800819c:	080081ed 	.word	0x080081ed
 80081a0:	080081ed 	.word	0x080081ed
 80081a4:	080081ed 	.word	0x080081ed
 80081a8:	080081ed 	.word	0x080081ed
 80081ac:	080081ed 	.word	0x080081ed
 80081b0:	080081ed 	.word	0x080081ed
 80081b4:	080081ed 	.word	0x080081ed
 80081b8:	080081e5 	.word	0x080081e5
 80081bc:	2301      	movs	r3, #1
 80081be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80081c2:	e1c0      	b.n	8008546 <UART_SetConfig+0x7ae>
 80081c4:	2304      	movs	r3, #4
 80081c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80081ca:	e1bc      	b.n	8008546 <UART_SetConfig+0x7ae>
 80081cc:	2308      	movs	r3, #8
 80081ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80081d2:	e1b8      	b.n	8008546 <UART_SetConfig+0x7ae>
 80081d4:	2310      	movs	r3, #16
 80081d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80081da:	e1b4      	b.n	8008546 <UART_SetConfig+0x7ae>
 80081dc:	2320      	movs	r3, #32
 80081de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80081e2:	e1b0      	b.n	8008546 <UART_SetConfig+0x7ae>
 80081e4:	2340      	movs	r3, #64	@ 0x40
 80081e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80081ea:	e1ac      	b.n	8008546 <UART_SetConfig+0x7ae>
 80081ec:	2380      	movs	r3, #128	@ 0x80
 80081ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80081f2:	e1a8      	b.n	8008546 <UART_SetConfig+0x7ae>
 80081f4:	697b      	ldr	r3, [r7, #20]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	4a75      	ldr	r2, [pc, #468]	@ (80083d0 <UART_SetConfig+0x638>)
 80081fa:	4293      	cmp	r3, r2
 80081fc:	d130      	bne.n	8008260 <UART_SetConfig+0x4c8>
 80081fe:	4b73      	ldr	r3, [pc, #460]	@ (80083cc <UART_SetConfig+0x634>)
 8008200:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008202:	f003 0307 	and.w	r3, r3, #7
 8008206:	2b05      	cmp	r3, #5
 8008208:	d826      	bhi.n	8008258 <UART_SetConfig+0x4c0>
 800820a:	a201      	add	r2, pc, #4	@ (adr r2, 8008210 <UART_SetConfig+0x478>)
 800820c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008210:	08008229 	.word	0x08008229
 8008214:	08008231 	.word	0x08008231
 8008218:	08008239 	.word	0x08008239
 800821c:	08008241 	.word	0x08008241
 8008220:	08008249 	.word	0x08008249
 8008224:	08008251 	.word	0x08008251
 8008228:	2300      	movs	r3, #0
 800822a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800822e:	e18a      	b.n	8008546 <UART_SetConfig+0x7ae>
 8008230:	2304      	movs	r3, #4
 8008232:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008236:	e186      	b.n	8008546 <UART_SetConfig+0x7ae>
 8008238:	2308      	movs	r3, #8
 800823a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800823e:	e182      	b.n	8008546 <UART_SetConfig+0x7ae>
 8008240:	2310      	movs	r3, #16
 8008242:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008246:	e17e      	b.n	8008546 <UART_SetConfig+0x7ae>
 8008248:	2320      	movs	r3, #32
 800824a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800824e:	e17a      	b.n	8008546 <UART_SetConfig+0x7ae>
 8008250:	2340      	movs	r3, #64	@ 0x40
 8008252:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008256:	e176      	b.n	8008546 <UART_SetConfig+0x7ae>
 8008258:	2380      	movs	r3, #128	@ 0x80
 800825a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800825e:	e172      	b.n	8008546 <UART_SetConfig+0x7ae>
 8008260:	697b      	ldr	r3, [r7, #20]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	4a5b      	ldr	r2, [pc, #364]	@ (80083d4 <UART_SetConfig+0x63c>)
 8008266:	4293      	cmp	r3, r2
 8008268:	d130      	bne.n	80082cc <UART_SetConfig+0x534>
 800826a:	4b58      	ldr	r3, [pc, #352]	@ (80083cc <UART_SetConfig+0x634>)
 800826c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800826e:	f003 0307 	and.w	r3, r3, #7
 8008272:	2b05      	cmp	r3, #5
 8008274:	d826      	bhi.n	80082c4 <UART_SetConfig+0x52c>
 8008276:	a201      	add	r2, pc, #4	@ (adr r2, 800827c <UART_SetConfig+0x4e4>)
 8008278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800827c:	08008295 	.word	0x08008295
 8008280:	0800829d 	.word	0x0800829d
 8008284:	080082a5 	.word	0x080082a5
 8008288:	080082ad 	.word	0x080082ad
 800828c:	080082b5 	.word	0x080082b5
 8008290:	080082bd 	.word	0x080082bd
 8008294:	2300      	movs	r3, #0
 8008296:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800829a:	e154      	b.n	8008546 <UART_SetConfig+0x7ae>
 800829c:	2304      	movs	r3, #4
 800829e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082a2:	e150      	b.n	8008546 <UART_SetConfig+0x7ae>
 80082a4:	2308      	movs	r3, #8
 80082a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082aa:	e14c      	b.n	8008546 <UART_SetConfig+0x7ae>
 80082ac:	2310      	movs	r3, #16
 80082ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082b2:	e148      	b.n	8008546 <UART_SetConfig+0x7ae>
 80082b4:	2320      	movs	r3, #32
 80082b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082ba:	e144      	b.n	8008546 <UART_SetConfig+0x7ae>
 80082bc:	2340      	movs	r3, #64	@ 0x40
 80082be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082c2:	e140      	b.n	8008546 <UART_SetConfig+0x7ae>
 80082c4:	2380      	movs	r3, #128	@ 0x80
 80082c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082ca:	e13c      	b.n	8008546 <UART_SetConfig+0x7ae>
 80082cc:	697b      	ldr	r3, [r7, #20]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	4a41      	ldr	r2, [pc, #260]	@ (80083d8 <UART_SetConfig+0x640>)
 80082d2:	4293      	cmp	r3, r2
 80082d4:	f040 8082 	bne.w	80083dc <UART_SetConfig+0x644>
 80082d8:	4b3c      	ldr	r3, [pc, #240]	@ (80083cc <UART_SetConfig+0x634>)
 80082da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80082dc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80082e0:	2b28      	cmp	r3, #40	@ 0x28
 80082e2:	d86d      	bhi.n	80083c0 <UART_SetConfig+0x628>
 80082e4:	a201      	add	r2, pc, #4	@ (adr r2, 80082ec <UART_SetConfig+0x554>)
 80082e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082ea:	bf00      	nop
 80082ec:	08008391 	.word	0x08008391
 80082f0:	080083c1 	.word	0x080083c1
 80082f4:	080083c1 	.word	0x080083c1
 80082f8:	080083c1 	.word	0x080083c1
 80082fc:	080083c1 	.word	0x080083c1
 8008300:	080083c1 	.word	0x080083c1
 8008304:	080083c1 	.word	0x080083c1
 8008308:	080083c1 	.word	0x080083c1
 800830c:	08008399 	.word	0x08008399
 8008310:	080083c1 	.word	0x080083c1
 8008314:	080083c1 	.word	0x080083c1
 8008318:	080083c1 	.word	0x080083c1
 800831c:	080083c1 	.word	0x080083c1
 8008320:	080083c1 	.word	0x080083c1
 8008324:	080083c1 	.word	0x080083c1
 8008328:	080083c1 	.word	0x080083c1
 800832c:	080083a1 	.word	0x080083a1
 8008330:	080083c1 	.word	0x080083c1
 8008334:	080083c1 	.word	0x080083c1
 8008338:	080083c1 	.word	0x080083c1
 800833c:	080083c1 	.word	0x080083c1
 8008340:	080083c1 	.word	0x080083c1
 8008344:	080083c1 	.word	0x080083c1
 8008348:	080083c1 	.word	0x080083c1
 800834c:	080083a9 	.word	0x080083a9
 8008350:	080083c1 	.word	0x080083c1
 8008354:	080083c1 	.word	0x080083c1
 8008358:	080083c1 	.word	0x080083c1
 800835c:	080083c1 	.word	0x080083c1
 8008360:	080083c1 	.word	0x080083c1
 8008364:	080083c1 	.word	0x080083c1
 8008368:	080083c1 	.word	0x080083c1
 800836c:	080083b1 	.word	0x080083b1
 8008370:	080083c1 	.word	0x080083c1
 8008374:	080083c1 	.word	0x080083c1
 8008378:	080083c1 	.word	0x080083c1
 800837c:	080083c1 	.word	0x080083c1
 8008380:	080083c1 	.word	0x080083c1
 8008384:	080083c1 	.word	0x080083c1
 8008388:	080083c1 	.word	0x080083c1
 800838c:	080083b9 	.word	0x080083b9
 8008390:	2301      	movs	r3, #1
 8008392:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008396:	e0d6      	b.n	8008546 <UART_SetConfig+0x7ae>
 8008398:	2304      	movs	r3, #4
 800839a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800839e:	e0d2      	b.n	8008546 <UART_SetConfig+0x7ae>
 80083a0:	2308      	movs	r3, #8
 80083a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80083a6:	e0ce      	b.n	8008546 <UART_SetConfig+0x7ae>
 80083a8:	2310      	movs	r3, #16
 80083aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80083ae:	e0ca      	b.n	8008546 <UART_SetConfig+0x7ae>
 80083b0:	2320      	movs	r3, #32
 80083b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80083b6:	e0c6      	b.n	8008546 <UART_SetConfig+0x7ae>
 80083b8:	2340      	movs	r3, #64	@ 0x40
 80083ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80083be:	e0c2      	b.n	8008546 <UART_SetConfig+0x7ae>
 80083c0:	2380      	movs	r3, #128	@ 0x80
 80083c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80083c6:	e0be      	b.n	8008546 <UART_SetConfig+0x7ae>
 80083c8:	40011400 	.word	0x40011400
 80083cc:	58024400 	.word	0x58024400
 80083d0:	40007800 	.word	0x40007800
 80083d4:	40007c00 	.word	0x40007c00
 80083d8:	40011800 	.word	0x40011800
 80083dc:	697b      	ldr	r3, [r7, #20]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	4aad      	ldr	r2, [pc, #692]	@ (8008698 <UART_SetConfig+0x900>)
 80083e2:	4293      	cmp	r3, r2
 80083e4:	d176      	bne.n	80084d4 <UART_SetConfig+0x73c>
 80083e6:	4bad      	ldr	r3, [pc, #692]	@ (800869c <UART_SetConfig+0x904>)
 80083e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80083ea:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80083ee:	2b28      	cmp	r3, #40	@ 0x28
 80083f0:	d86c      	bhi.n	80084cc <UART_SetConfig+0x734>
 80083f2:	a201      	add	r2, pc, #4	@ (adr r2, 80083f8 <UART_SetConfig+0x660>)
 80083f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083f8:	0800849d 	.word	0x0800849d
 80083fc:	080084cd 	.word	0x080084cd
 8008400:	080084cd 	.word	0x080084cd
 8008404:	080084cd 	.word	0x080084cd
 8008408:	080084cd 	.word	0x080084cd
 800840c:	080084cd 	.word	0x080084cd
 8008410:	080084cd 	.word	0x080084cd
 8008414:	080084cd 	.word	0x080084cd
 8008418:	080084a5 	.word	0x080084a5
 800841c:	080084cd 	.word	0x080084cd
 8008420:	080084cd 	.word	0x080084cd
 8008424:	080084cd 	.word	0x080084cd
 8008428:	080084cd 	.word	0x080084cd
 800842c:	080084cd 	.word	0x080084cd
 8008430:	080084cd 	.word	0x080084cd
 8008434:	080084cd 	.word	0x080084cd
 8008438:	080084ad 	.word	0x080084ad
 800843c:	080084cd 	.word	0x080084cd
 8008440:	080084cd 	.word	0x080084cd
 8008444:	080084cd 	.word	0x080084cd
 8008448:	080084cd 	.word	0x080084cd
 800844c:	080084cd 	.word	0x080084cd
 8008450:	080084cd 	.word	0x080084cd
 8008454:	080084cd 	.word	0x080084cd
 8008458:	080084b5 	.word	0x080084b5
 800845c:	080084cd 	.word	0x080084cd
 8008460:	080084cd 	.word	0x080084cd
 8008464:	080084cd 	.word	0x080084cd
 8008468:	080084cd 	.word	0x080084cd
 800846c:	080084cd 	.word	0x080084cd
 8008470:	080084cd 	.word	0x080084cd
 8008474:	080084cd 	.word	0x080084cd
 8008478:	080084bd 	.word	0x080084bd
 800847c:	080084cd 	.word	0x080084cd
 8008480:	080084cd 	.word	0x080084cd
 8008484:	080084cd 	.word	0x080084cd
 8008488:	080084cd 	.word	0x080084cd
 800848c:	080084cd 	.word	0x080084cd
 8008490:	080084cd 	.word	0x080084cd
 8008494:	080084cd 	.word	0x080084cd
 8008498:	080084c5 	.word	0x080084c5
 800849c:	2301      	movs	r3, #1
 800849e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084a2:	e050      	b.n	8008546 <UART_SetConfig+0x7ae>
 80084a4:	2304      	movs	r3, #4
 80084a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084aa:	e04c      	b.n	8008546 <UART_SetConfig+0x7ae>
 80084ac:	2308      	movs	r3, #8
 80084ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084b2:	e048      	b.n	8008546 <UART_SetConfig+0x7ae>
 80084b4:	2310      	movs	r3, #16
 80084b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084ba:	e044      	b.n	8008546 <UART_SetConfig+0x7ae>
 80084bc:	2320      	movs	r3, #32
 80084be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084c2:	e040      	b.n	8008546 <UART_SetConfig+0x7ae>
 80084c4:	2340      	movs	r3, #64	@ 0x40
 80084c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084ca:	e03c      	b.n	8008546 <UART_SetConfig+0x7ae>
 80084cc:	2380      	movs	r3, #128	@ 0x80
 80084ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084d2:	e038      	b.n	8008546 <UART_SetConfig+0x7ae>
 80084d4:	697b      	ldr	r3, [r7, #20]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	4a71      	ldr	r2, [pc, #452]	@ (80086a0 <UART_SetConfig+0x908>)
 80084da:	4293      	cmp	r3, r2
 80084dc:	d130      	bne.n	8008540 <UART_SetConfig+0x7a8>
 80084de:	4b6f      	ldr	r3, [pc, #444]	@ (800869c <UART_SetConfig+0x904>)
 80084e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80084e2:	f003 0307 	and.w	r3, r3, #7
 80084e6:	2b05      	cmp	r3, #5
 80084e8:	d826      	bhi.n	8008538 <UART_SetConfig+0x7a0>
 80084ea:	a201      	add	r2, pc, #4	@ (adr r2, 80084f0 <UART_SetConfig+0x758>)
 80084ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084f0:	08008509 	.word	0x08008509
 80084f4:	08008511 	.word	0x08008511
 80084f8:	08008519 	.word	0x08008519
 80084fc:	08008521 	.word	0x08008521
 8008500:	08008529 	.word	0x08008529
 8008504:	08008531 	.word	0x08008531
 8008508:	2302      	movs	r3, #2
 800850a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800850e:	e01a      	b.n	8008546 <UART_SetConfig+0x7ae>
 8008510:	2304      	movs	r3, #4
 8008512:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008516:	e016      	b.n	8008546 <UART_SetConfig+0x7ae>
 8008518:	2308      	movs	r3, #8
 800851a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800851e:	e012      	b.n	8008546 <UART_SetConfig+0x7ae>
 8008520:	2310      	movs	r3, #16
 8008522:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008526:	e00e      	b.n	8008546 <UART_SetConfig+0x7ae>
 8008528:	2320      	movs	r3, #32
 800852a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800852e:	e00a      	b.n	8008546 <UART_SetConfig+0x7ae>
 8008530:	2340      	movs	r3, #64	@ 0x40
 8008532:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008536:	e006      	b.n	8008546 <UART_SetConfig+0x7ae>
 8008538:	2380      	movs	r3, #128	@ 0x80
 800853a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800853e:	e002      	b.n	8008546 <UART_SetConfig+0x7ae>
 8008540:	2380      	movs	r3, #128	@ 0x80
 8008542:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008546:	697b      	ldr	r3, [r7, #20]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	4a55      	ldr	r2, [pc, #340]	@ (80086a0 <UART_SetConfig+0x908>)
 800854c:	4293      	cmp	r3, r2
 800854e:	f040 80f8 	bne.w	8008742 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008552:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008556:	2b20      	cmp	r3, #32
 8008558:	dc46      	bgt.n	80085e8 <UART_SetConfig+0x850>
 800855a:	2b02      	cmp	r3, #2
 800855c:	db75      	blt.n	800864a <UART_SetConfig+0x8b2>
 800855e:	3b02      	subs	r3, #2
 8008560:	2b1e      	cmp	r3, #30
 8008562:	d872      	bhi.n	800864a <UART_SetConfig+0x8b2>
 8008564:	a201      	add	r2, pc, #4	@ (adr r2, 800856c <UART_SetConfig+0x7d4>)
 8008566:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800856a:	bf00      	nop
 800856c:	080085ef 	.word	0x080085ef
 8008570:	0800864b 	.word	0x0800864b
 8008574:	080085f7 	.word	0x080085f7
 8008578:	0800864b 	.word	0x0800864b
 800857c:	0800864b 	.word	0x0800864b
 8008580:	0800864b 	.word	0x0800864b
 8008584:	08008607 	.word	0x08008607
 8008588:	0800864b 	.word	0x0800864b
 800858c:	0800864b 	.word	0x0800864b
 8008590:	0800864b 	.word	0x0800864b
 8008594:	0800864b 	.word	0x0800864b
 8008598:	0800864b 	.word	0x0800864b
 800859c:	0800864b 	.word	0x0800864b
 80085a0:	0800864b 	.word	0x0800864b
 80085a4:	08008617 	.word	0x08008617
 80085a8:	0800864b 	.word	0x0800864b
 80085ac:	0800864b 	.word	0x0800864b
 80085b0:	0800864b 	.word	0x0800864b
 80085b4:	0800864b 	.word	0x0800864b
 80085b8:	0800864b 	.word	0x0800864b
 80085bc:	0800864b 	.word	0x0800864b
 80085c0:	0800864b 	.word	0x0800864b
 80085c4:	0800864b 	.word	0x0800864b
 80085c8:	0800864b 	.word	0x0800864b
 80085cc:	0800864b 	.word	0x0800864b
 80085d0:	0800864b 	.word	0x0800864b
 80085d4:	0800864b 	.word	0x0800864b
 80085d8:	0800864b 	.word	0x0800864b
 80085dc:	0800864b 	.word	0x0800864b
 80085e0:	0800864b 	.word	0x0800864b
 80085e4:	0800863d 	.word	0x0800863d
 80085e8:	2b40      	cmp	r3, #64	@ 0x40
 80085ea:	d02a      	beq.n	8008642 <UART_SetConfig+0x8aa>
 80085ec:	e02d      	b.n	800864a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80085ee:	f7fe fc93 	bl	8006f18 <HAL_RCCEx_GetD3PCLK1Freq>
 80085f2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80085f4:	e02f      	b.n	8008656 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80085f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80085fa:	4618      	mov	r0, r3
 80085fc:	f7fe fca2 	bl	8006f44 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008600:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008602:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008604:	e027      	b.n	8008656 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008606:	f107 0318 	add.w	r3, r7, #24
 800860a:	4618      	mov	r0, r3
 800860c:	f7fe fdee 	bl	80071ec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008610:	69fb      	ldr	r3, [r7, #28]
 8008612:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008614:	e01f      	b.n	8008656 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008616:	4b21      	ldr	r3, [pc, #132]	@ (800869c <UART_SetConfig+0x904>)
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	f003 0320 	and.w	r3, r3, #32
 800861e:	2b00      	cmp	r3, #0
 8008620:	d009      	beq.n	8008636 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008622:	4b1e      	ldr	r3, [pc, #120]	@ (800869c <UART_SetConfig+0x904>)
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	08db      	lsrs	r3, r3, #3
 8008628:	f003 0303 	and.w	r3, r3, #3
 800862c:	4a1d      	ldr	r2, [pc, #116]	@ (80086a4 <UART_SetConfig+0x90c>)
 800862e:	fa22 f303 	lsr.w	r3, r2, r3
 8008632:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008634:	e00f      	b.n	8008656 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8008636:	4b1b      	ldr	r3, [pc, #108]	@ (80086a4 <UART_SetConfig+0x90c>)
 8008638:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800863a:	e00c      	b.n	8008656 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800863c:	4b1a      	ldr	r3, [pc, #104]	@ (80086a8 <UART_SetConfig+0x910>)
 800863e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008640:	e009      	b.n	8008656 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008642:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008646:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008648:	e005      	b.n	8008656 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800864a:	2300      	movs	r3, #0
 800864c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800864e:	2301      	movs	r3, #1
 8008650:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008654:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008656:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008658:	2b00      	cmp	r3, #0
 800865a:	f000 81ee 	beq.w	8008a3a <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800865e:	697b      	ldr	r3, [r7, #20]
 8008660:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008662:	4a12      	ldr	r2, [pc, #72]	@ (80086ac <UART_SetConfig+0x914>)
 8008664:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008668:	461a      	mov	r2, r3
 800866a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800866c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008670:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008672:	697b      	ldr	r3, [r7, #20]
 8008674:	685a      	ldr	r2, [r3, #4]
 8008676:	4613      	mov	r3, r2
 8008678:	005b      	lsls	r3, r3, #1
 800867a:	4413      	add	r3, r2
 800867c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800867e:	429a      	cmp	r2, r3
 8008680:	d305      	bcc.n	800868e <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008682:	697b      	ldr	r3, [r7, #20]
 8008684:	685b      	ldr	r3, [r3, #4]
 8008686:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008688:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800868a:	429a      	cmp	r2, r3
 800868c:	d910      	bls.n	80086b0 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800868e:	2301      	movs	r3, #1
 8008690:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008694:	e1d1      	b.n	8008a3a <UART_SetConfig+0xca2>
 8008696:	bf00      	nop
 8008698:	40011c00 	.word	0x40011c00
 800869c:	58024400 	.word	0x58024400
 80086a0:	58000c00 	.word	0x58000c00
 80086a4:	03d09000 	.word	0x03d09000
 80086a8:	003d0900 	.word	0x003d0900
 80086ac:	08009e9c 	.word	0x08009e9c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80086b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80086b2:	2200      	movs	r2, #0
 80086b4:	60bb      	str	r3, [r7, #8]
 80086b6:	60fa      	str	r2, [r7, #12]
 80086b8:	697b      	ldr	r3, [r7, #20]
 80086ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086bc:	4ac0      	ldr	r2, [pc, #768]	@ (80089c0 <UART_SetConfig+0xc28>)
 80086be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80086c2:	b29b      	uxth	r3, r3
 80086c4:	2200      	movs	r2, #0
 80086c6:	603b      	str	r3, [r7, #0]
 80086c8:	607a      	str	r2, [r7, #4]
 80086ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80086ce:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80086d2:	f7f7 fe0d 	bl	80002f0 <__aeabi_uldivmod>
 80086d6:	4602      	mov	r2, r0
 80086d8:	460b      	mov	r3, r1
 80086da:	4610      	mov	r0, r2
 80086dc:	4619      	mov	r1, r3
 80086de:	f04f 0200 	mov.w	r2, #0
 80086e2:	f04f 0300 	mov.w	r3, #0
 80086e6:	020b      	lsls	r3, r1, #8
 80086e8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80086ec:	0202      	lsls	r2, r0, #8
 80086ee:	6979      	ldr	r1, [r7, #20]
 80086f0:	6849      	ldr	r1, [r1, #4]
 80086f2:	0849      	lsrs	r1, r1, #1
 80086f4:	2000      	movs	r0, #0
 80086f6:	460c      	mov	r4, r1
 80086f8:	4605      	mov	r5, r0
 80086fa:	eb12 0804 	adds.w	r8, r2, r4
 80086fe:	eb43 0905 	adc.w	r9, r3, r5
 8008702:	697b      	ldr	r3, [r7, #20]
 8008704:	685b      	ldr	r3, [r3, #4]
 8008706:	2200      	movs	r2, #0
 8008708:	469a      	mov	sl, r3
 800870a:	4693      	mov	fp, r2
 800870c:	4652      	mov	r2, sl
 800870e:	465b      	mov	r3, fp
 8008710:	4640      	mov	r0, r8
 8008712:	4649      	mov	r1, r9
 8008714:	f7f7 fdec 	bl	80002f0 <__aeabi_uldivmod>
 8008718:	4602      	mov	r2, r0
 800871a:	460b      	mov	r3, r1
 800871c:	4613      	mov	r3, r2
 800871e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008720:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008722:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008726:	d308      	bcc.n	800873a <UART_SetConfig+0x9a2>
 8008728:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800872a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800872e:	d204      	bcs.n	800873a <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8008730:	697b      	ldr	r3, [r7, #20]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008736:	60da      	str	r2, [r3, #12]
 8008738:	e17f      	b.n	8008a3a <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800873a:	2301      	movs	r3, #1
 800873c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008740:	e17b      	b.n	8008a3a <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008742:	697b      	ldr	r3, [r7, #20]
 8008744:	69db      	ldr	r3, [r3, #28]
 8008746:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800874a:	f040 80bd 	bne.w	80088c8 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800874e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008752:	2b20      	cmp	r3, #32
 8008754:	dc48      	bgt.n	80087e8 <UART_SetConfig+0xa50>
 8008756:	2b00      	cmp	r3, #0
 8008758:	db7b      	blt.n	8008852 <UART_SetConfig+0xaba>
 800875a:	2b20      	cmp	r3, #32
 800875c:	d879      	bhi.n	8008852 <UART_SetConfig+0xaba>
 800875e:	a201      	add	r2, pc, #4	@ (adr r2, 8008764 <UART_SetConfig+0x9cc>)
 8008760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008764:	080087ef 	.word	0x080087ef
 8008768:	080087f7 	.word	0x080087f7
 800876c:	08008853 	.word	0x08008853
 8008770:	08008853 	.word	0x08008853
 8008774:	080087ff 	.word	0x080087ff
 8008778:	08008853 	.word	0x08008853
 800877c:	08008853 	.word	0x08008853
 8008780:	08008853 	.word	0x08008853
 8008784:	0800880f 	.word	0x0800880f
 8008788:	08008853 	.word	0x08008853
 800878c:	08008853 	.word	0x08008853
 8008790:	08008853 	.word	0x08008853
 8008794:	08008853 	.word	0x08008853
 8008798:	08008853 	.word	0x08008853
 800879c:	08008853 	.word	0x08008853
 80087a0:	08008853 	.word	0x08008853
 80087a4:	0800881f 	.word	0x0800881f
 80087a8:	08008853 	.word	0x08008853
 80087ac:	08008853 	.word	0x08008853
 80087b0:	08008853 	.word	0x08008853
 80087b4:	08008853 	.word	0x08008853
 80087b8:	08008853 	.word	0x08008853
 80087bc:	08008853 	.word	0x08008853
 80087c0:	08008853 	.word	0x08008853
 80087c4:	08008853 	.word	0x08008853
 80087c8:	08008853 	.word	0x08008853
 80087cc:	08008853 	.word	0x08008853
 80087d0:	08008853 	.word	0x08008853
 80087d4:	08008853 	.word	0x08008853
 80087d8:	08008853 	.word	0x08008853
 80087dc:	08008853 	.word	0x08008853
 80087e0:	08008853 	.word	0x08008853
 80087e4:	08008845 	.word	0x08008845
 80087e8:	2b40      	cmp	r3, #64	@ 0x40
 80087ea:	d02e      	beq.n	800884a <UART_SetConfig+0xab2>
 80087ec:	e031      	b.n	8008852 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80087ee:	f7fd f967 	bl	8005ac0 <HAL_RCC_GetPCLK1Freq>
 80087f2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80087f4:	e033      	b.n	800885e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80087f6:	f7fd f979 	bl	8005aec <HAL_RCC_GetPCLK2Freq>
 80087fa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80087fc:	e02f      	b.n	800885e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80087fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008802:	4618      	mov	r0, r3
 8008804:	f7fe fb9e 	bl	8006f44 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008808:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800880a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800880c:	e027      	b.n	800885e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800880e:	f107 0318 	add.w	r3, r7, #24
 8008812:	4618      	mov	r0, r3
 8008814:	f7fe fcea 	bl	80071ec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008818:	69fb      	ldr	r3, [r7, #28]
 800881a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800881c:	e01f      	b.n	800885e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800881e:	4b69      	ldr	r3, [pc, #420]	@ (80089c4 <UART_SetConfig+0xc2c>)
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	f003 0320 	and.w	r3, r3, #32
 8008826:	2b00      	cmp	r3, #0
 8008828:	d009      	beq.n	800883e <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800882a:	4b66      	ldr	r3, [pc, #408]	@ (80089c4 <UART_SetConfig+0xc2c>)
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	08db      	lsrs	r3, r3, #3
 8008830:	f003 0303 	and.w	r3, r3, #3
 8008834:	4a64      	ldr	r2, [pc, #400]	@ (80089c8 <UART_SetConfig+0xc30>)
 8008836:	fa22 f303 	lsr.w	r3, r2, r3
 800883a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800883c:	e00f      	b.n	800885e <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800883e:	4b62      	ldr	r3, [pc, #392]	@ (80089c8 <UART_SetConfig+0xc30>)
 8008840:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008842:	e00c      	b.n	800885e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008844:	4b61      	ldr	r3, [pc, #388]	@ (80089cc <UART_SetConfig+0xc34>)
 8008846:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008848:	e009      	b.n	800885e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800884a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800884e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008850:	e005      	b.n	800885e <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8008852:	2300      	movs	r3, #0
 8008854:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008856:	2301      	movs	r3, #1
 8008858:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800885c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800885e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008860:	2b00      	cmp	r3, #0
 8008862:	f000 80ea 	beq.w	8008a3a <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008866:	697b      	ldr	r3, [r7, #20]
 8008868:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800886a:	4a55      	ldr	r2, [pc, #340]	@ (80089c0 <UART_SetConfig+0xc28>)
 800886c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008870:	461a      	mov	r2, r3
 8008872:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008874:	fbb3 f3f2 	udiv	r3, r3, r2
 8008878:	005a      	lsls	r2, r3, #1
 800887a:	697b      	ldr	r3, [r7, #20]
 800887c:	685b      	ldr	r3, [r3, #4]
 800887e:	085b      	lsrs	r3, r3, #1
 8008880:	441a      	add	r2, r3
 8008882:	697b      	ldr	r3, [r7, #20]
 8008884:	685b      	ldr	r3, [r3, #4]
 8008886:	fbb2 f3f3 	udiv	r3, r2, r3
 800888a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800888c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800888e:	2b0f      	cmp	r3, #15
 8008890:	d916      	bls.n	80088c0 <UART_SetConfig+0xb28>
 8008892:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008894:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008898:	d212      	bcs.n	80088c0 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800889a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800889c:	b29b      	uxth	r3, r3
 800889e:	f023 030f 	bic.w	r3, r3, #15
 80088a2:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80088a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088a6:	085b      	lsrs	r3, r3, #1
 80088a8:	b29b      	uxth	r3, r3
 80088aa:	f003 0307 	and.w	r3, r3, #7
 80088ae:	b29a      	uxth	r2, r3
 80088b0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80088b2:	4313      	orrs	r3, r2
 80088b4:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80088b6:	697b      	ldr	r3, [r7, #20]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80088bc:	60da      	str	r2, [r3, #12]
 80088be:	e0bc      	b.n	8008a3a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80088c0:	2301      	movs	r3, #1
 80088c2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80088c6:	e0b8      	b.n	8008a3a <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80088c8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80088cc:	2b20      	cmp	r3, #32
 80088ce:	dc4b      	bgt.n	8008968 <UART_SetConfig+0xbd0>
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	f2c0 8087 	blt.w	80089e4 <UART_SetConfig+0xc4c>
 80088d6:	2b20      	cmp	r3, #32
 80088d8:	f200 8084 	bhi.w	80089e4 <UART_SetConfig+0xc4c>
 80088dc:	a201      	add	r2, pc, #4	@ (adr r2, 80088e4 <UART_SetConfig+0xb4c>)
 80088de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088e2:	bf00      	nop
 80088e4:	0800896f 	.word	0x0800896f
 80088e8:	08008977 	.word	0x08008977
 80088ec:	080089e5 	.word	0x080089e5
 80088f0:	080089e5 	.word	0x080089e5
 80088f4:	0800897f 	.word	0x0800897f
 80088f8:	080089e5 	.word	0x080089e5
 80088fc:	080089e5 	.word	0x080089e5
 8008900:	080089e5 	.word	0x080089e5
 8008904:	0800898f 	.word	0x0800898f
 8008908:	080089e5 	.word	0x080089e5
 800890c:	080089e5 	.word	0x080089e5
 8008910:	080089e5 	.word	0x080089e5
 8008914:	080089e5 	.word	0x080089e5
 8008918:	080089e5 	.word	0x080089e5
 800891c:	080089e5 	.word	0x080089e5
 8008920:	080089e5 	.word	0x080089e5
 8008924:	0800899f 	.word	0x0800899f
 8008928:	080089e5 	.word	0x080089e5
 800892c:	080089e5 	.word	0x080089e5
 8008930:	080089e5 	.word	0x080089e5
 8008934:	080089e5 	.word	0x080089e5
 8008938:	080089e5 	.word	0x080089e5
 800893c:	080089e5 	.word	0x080089e5
 8008940:	080089e5 	.word	0x080089e5
 8008944:	080089e5 	.word	0x080089e5
 8008948:	080089e5 	.word	0x080089e5
 800894c:	080089e5 	.word	0x080089e5
 8008950:	080089e5 	.word	0x080089e5
 8008954:	080089e5 	.word	0x080089e5
 8008958:	080089e5 	.word	0x080089e5
 800895c:	080089e5 	.word	0x080089e5
 8008960:	080089e5 	.word	0x080089e5
 8008964:	080089d7 	.word	0x080089d7
 8008968:	2b40      	cmp	r3, #64	@ 0x40
 800896a:	d037      	beq.n	80089dc <UART_SetConfig+0xc44>
 800896c:	e03a      	b.n	80089e4 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800896e:	f7fd f8a7 	bl	8005ac0 <HAL_RCC_GetPCLK1Freq>
 8008972:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008974:	e03c      	b.n	80089f0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008976:	f7fd f8b9 	bl	8005aec <HAL_RCC_GetPCLK2Freq>
 800897a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800897c:	e038      	b.n	80089f0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800897e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008982:	4618      	mov	r0, r3
 8008984:	f7fe fade 	bl	8006f44 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008988:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800898a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800898c:	e030      	b.n	80089f0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800898e:	f107 0318 	add.w	r3, r7, #24
 8008992:	4618      	mov	r0, r3
 8008994:	f7fe fc2a 	bl	80071ec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008998:	69fb      	ldr	r3, [r7, #28]
 800899a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800899c:	e028      	b.n	80089f0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800899e:	4b09      	ldr	r3, [pc, #36]	@ (80089c4 <UART_SetConfig+0xc2c>)
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	f003 0320 	and.w	r3, r3, #32
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d012      	beq.n	80089d0 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80089aa:	4b06      	ldr	r3, [pc, #24]	@ (80089c4 <UART_SetConfig+0xc2c>)
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	08db      	lsrs	r3, r3, #3
 80089b0:	f003 0303 	and.w	r3, r3, #3
 80089b4:	4a04      	ldr	r2, [pc, #16]	@ (80089c8 <UART_SetConfig+0xc30>)
 80089b6:	fa22 f303 	lsr.w	r3, r2, r3
 80089ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80089bc:	e018      	b.n	80089f0 <UART_SetConfig+0xc58>
 80089be:	bf00      	nop
 80089c0:	08009e9c 	.word	0x08009e9c
 80089c4:	58024400 	.word	0x58024400
 80089c8:	03d09000 	.word	0x03d09000
 80089cc:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 80089d0:	4b24      	ldr	r3, [pc, #144]	@ (8008a64 <UART_SetConfig+0xccc>)
 80089d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80089d4:	e00c      	b.n	80089f0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80089d6:	4b24      	ldr	r3, [pc, #144]	@ (8008a68 <UART_SetConfig+0xcd0>)
 80089d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80089da:	e009      	b.n	80089f0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80089dc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80089e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80089e2:	e005      	b.n	80089f0 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 80089e4:	2300      	movs	r3, #0
 80089e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80089e8:	2301      	movs	r3, #1
 80089ea:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80089ee:	bf00      	nop
    }

    if (pclk != 0U)
 80089f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d021      	beq.n	8008a3a <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80089f6:	697b      	ldr	r3, [r7, #20]
 80089f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089fa:	4a1c      	ldr	r2, [pc, #112]	@ (8008a6c <UART_SetConfig+0xcd4>)
 80089fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008a00:	461a      	mov	r2, r3
 8008a02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a04:	fbb3 f2f2 	udiv	r2, r3, r2
 8008a08:	697b      	ldr	r3, [r7, #20]
 8008a0a:	685b      	ldr	r3, [r3, #4]
 8008a0c:	085b      	lsrs	r3, r3, #1
 8008a0e:	441a      	add	r2, r3
 8008a10:	697b      	ldr	r3, [r7, #20]
 8008a12:	685b      	ldr	r3, [r3, #4]
 8008a14:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a18:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008a1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a1c:	2b0f      	cmp	r3, #15
 8008a1e:	d909      	bls.n	8008a34 <UART_SetConfig+0xc9c>
 8008a20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a22:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008a26:	d205      	bcs.n	8008a34 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008a28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a2a:	b29a      	uxth	r2, r3
 8008a2c:	697b      	ldr	r3, [r7, #20]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	60da      	str	r2, [r3, #12]
 8008a32:	e002      	b.n	8008a3a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8008a34:	2301      	movs	r3, #1
 8008a36:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008a3a:	697b      	ldr	r3, [r7, #20]
 8008a3c:	2201      	movs	r2, #1
 8008a3e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008a42:	697b      	ldr	r3, [r7, #20]
 8008a44:	2201      	movs	r2, #1
 8008a46:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008a4a:	697b      	ldr	r3, [r7, #20]
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008a50:	697b      	ldr	r3, [r7, #20]
 8008a52:	2200      	movs	r2, #0
 8008a54:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008a56:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	3748      	adds	r7, #72	@ 0x48
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008a64:	03d09000 	.word	0x03d09000
 8008a68:	003d0900 	.word	0x003d0900
 8008a6c:	08009e9c 	.word	0x08009e9c

08008a70 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008a70:	b480      	push	{r7}
 8008a72:	b083      	sub	sp, #12
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a7c:	f003 0308 	and.w	r3, r3, #8
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d00a      	beq.n	8008a9a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	685b      	ldr	r3, [r3, #4]
 8008a8a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	430a      	orrs	r2, r1
 8008a98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a9e:	f003 0301 	and.w	r3, r3, #1
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d00a      	beq.n	8008abc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	685b      	ldr	r3, [r3, #4]
 8008aac:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	430a      	orrs	r2, r1
 8008aba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ac0:	f003 0302 	and.w	r3, r3, #2
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d00a      	beq.n	8008ade <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	685b      	ldr	r3, [r3, #4]
 8008ace:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	430a      	orrs	r2, r1
 8008adc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ae2:	f003 0304 	and.w	r3, r3, #4
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d00a      	beq.n	8008b00 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	685b      	ldr	r3, [r3, #4]
 8008af0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	430a      	orrs	r2, r1
 8008afe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b04:	f003 0310 	and.w	r3, r3, #16
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d00a      	beq.n	8008b22 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	689b      	ldr	r3, [r3, #8]
 8008b12:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	430a      	orrs	r2, r1
 8008b20:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b26:	f003 0320 	and.w	r3, r3, #32
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d00a      	beq.n	8008b44 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	689b      	ldr	r3, [r3, #8]
 8008b34:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	430a      	orrs	r2, r1
 8008b42:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d01a      	beq.n	8008b86 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	685b      	ldr	r3, [r3, #4]
 8008b56:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	430a      	orrs	r2, r1
 8008b64:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b6a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008b6e:	d10a      	bne.n	8008b86 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	685b      	ldr	r3, [r3, #4]
 8008b76:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	430a      	orrs	r2, r1
 8008b84:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d00a      	beq.n	8008ba8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	685b      	ldr	r3, [r3, #4]
 8008b98:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	430a      	orrs	r2, r1
 8008ba6:	605a      	str	r2, [r3, #4]
  }
}
 8008ba8:	bf00      	nop
 8008baa:	370c      	adds	r7, #12
 8008bac:	46bd      	mov	sp, r7
 8008bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb2:	4770      	bx	lr

08008bb4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	b098      	sub	sp, #96	@ 0x60
 8008bb8:	af02      	add	r7, sp, #8
 8008bba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008bc4:	f7f8 fa32 	bl	800102c <HAL_GetTick>
 8008bc8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	f003 0308 	and.w	r3, r3, #8
 8008bd4:	2b08      	cmp	r3, #8
 8008bd6:	d12f      	bne.n	8008c38 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008bd8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008bdc:	9300      	str	r3, [sp, #0]
 8008bde:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008be0:	2200      	movs	r2, #0
 8008be2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008be6:	6878      	ldr	r0, [r7, #4]
 8008be8:	f000 f88e 	bl	8008d08 <UART_WaitOnFlagUntilTimeout>
 8008bec:	4603      	mov	r3, r0
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d022      	beq.n	8008c38 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bfa:	e853 3f00 	ldrex	r3, [r3]
 8008bfe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008c00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c02:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008c06:	653b      	str	r3, [r7, #80]	@ 0x50
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	461a      	mov	r2, r3
 8008c0e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008c10:	647b      	str	r3, [r7, #68]	@ 0x44
 8008c12:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c14:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008c16:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008c18:	e841 2300 	strex	r3, r2, [r1]
 8008c1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008c1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d1e6      	bne.n	8008bf2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	2220      	movs	r2, #32
 8008c28:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2200      	movs	r2, #0
 8008c30:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008c34:	2303      	movs	r3, #3
 8008c36:	e063      	b.n	8008d00 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	f003 0304 	and.w	r3, r3, #4
 8008c42:	2b04      	cmp	r3, #4
 8008c44:	d149      	bne.n	8008cda <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008c46:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008c4a:	9300      	str	r3, [sp, #0]
 8008c4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008c4e:	2200      	movs	r2, #0
 8008c50:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008c54:	6878      	ldr	r0, [r7, #4]
 8008c56:	f000 f857 	bl	8008d08 <UART_WaitOnFlagUntilTimeout>
 8008c5a:	4603      	mov	r3, r0
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d03c      	beq.n	8008cda <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c68:	e853 3f00 	ldrex	r3, [r3]
 8008c6c:	623b      	str	r3, [r7, #32]
   return(result);
 8008c6e:	6a3b      	ldr	r3, [r7, #32]
 8008c70:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008c74:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	461a      	mov	r2, r3
 8008c7c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008c7e:	633b      	str	r3, [r7, #48]	@ 0x30
 8008c80:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c82:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008c84:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008c86:	e841 2300 	strex	r3, r2, [r1]
 8008c8a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008c8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d1e6      	bne.n	8008c60 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	3308      	adds	r3, #8
 8008c98:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c9a:	693b      	ldr	r3, [r7, #16]
 8008c9c:	e853 3f00 	ldrex	r3, [r3]
 8008ca0:	60fb      	str	r3, [r7, #12]
   return(result);
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	f023 0301 	bic.w	r3, r3, #1
 8008ca8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	3308      	adds	r3, #8
 8008cb0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008cb2:	61fa      	str	r2, [r7, #28]
 8008cb4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cb6:	69b9      	ldr	r1, [r7, #24]
 8008cb8:	69fa      	ldr	r2, [r7, #28]
 8008cba:	e841 2300 	strex	r3, r2, [r1]
 8008cbe:	617b      	str	r3, [r7, #20]
   return(result);
 8008cc0:	697b      	ldr	r3, [r7, #20]
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d1e5      	bne.n	8008c92 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	2220      	movs	r2, #32
 8008cca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	2200      	movs	r2, #0
 8008cd2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008cd6:	2303      	movs	r3, #3
 8008cd8:	e012      	b.n	8008d00 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	2220      	movs	r2, #32
 8008cde:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	2220      	movs	r2, #32
 8008ce6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	2200      	movs	r2, #0
 8008cee:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	2200      	movs	r2, #0
 8008cfa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008cfe:	2300      	movs	r3, #0
}
 8008d00:	4618      	mov	r0, r3
 8008d02:	3758      	adds	r7, #88	@ 0x58
 8008d04:	46bd      	mov	sp, r7
 8008d06:	bd80      	pop	{r7, pc}

08008d08 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b084      	sub	sp, #16
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	60f8      	str	r0, [r7, #12]
 8008d10:	60b9      	str	r1, [r7, #8]
 8008d12:	603b      	str	r3, [r7, #0]
 8008d14:	4613      	mov	r3, r2
 8008d16:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008d18:	e04f      	b.n	8008dba <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008d1a:	69bb      	ldr	r3, [r7, #24]
 8008d1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d20:	d04b      	beq.n	8008dba <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008d22:	f7f8 f983 	bl	800102c <HAL_GetTick>
 8008d26:	4602      	mov	r2, r0
 8008d28:	683b      	ldr	r3, [r7, #0]
 8008d2a:	1ad3      	subs	r3, r2, r3
 8008d2c:	69ba      	ldr	r2, [r7, #24]
 8008d2e:	429a      	cmp	r2, r3
 8008d30:	d302      	bcc.n	8008d38 <UART_WaitOnFlagUntilTimeout+0x30>
 8008d32:	69bb      	ldr	r3, [r7, #24]
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d101      	bne.n	8008d3c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008d38:	2303      	movs	r3, #3
 8008d3a:	e04e      	b.n	8008dda <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	f003 0304 	and.w	r3, r3, #4
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d037      	beq.n	8008dba <UART_WaitOnFlagUntilTimeout+0xb2>
 8008d4a:	68bb      	ldr	r3, [r7, #8]
 8008d4c:	2b80      	cmp	r3, #128	@ 0x80
 8008d4e:	d034      	beq.n	8008dba <UART_WaitOnFlagUntilTimeout+0xb2>
 8008d50:	68bb      	ldr	r3, [r7, #8]
 8008d52:	2b40      	cmp	r3, #64	@ 0x40
 8008d54:	d031      	beq.n	8008dba <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	69db      	ldr	r3, [r3, #28]
 8008d5c:	f003 0308 	and.w	r3, r3, #8
 8008d60:	2b08      	cmp	r3, #8
 8008d62:	d110      	bne.n	8008d86 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	2208      	movs	r2, #8
 8008d6a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008d6c:	68f8      	ldr	r0, [r7, #12]
 8008d6e:	f000 f839 	bl	8008de4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	2208      	movs	r2, #8
 8008d76:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	2200      	movs	r2, #0
 8008d7e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008d82:	2301      	movs	r3, #1
 8008d84:	e029      	b.n	8008dda <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	69db      	ldr	r3, [r3, #28]
 8008d8c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008d90:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008d94:	d111      	bne.n	8008dba <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008d9e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008da0:	68f8      	ldr	r0, [r7, #12]
 8008da2:	f000 f81f 	bl	8008de4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	2220      	movs	r2, #32
 8008daa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	2200      	movs	r2, #0
 8008db2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008db6:	2303      	movs	r3, #3
 8008db8:	e00f      	b.n	8008dda <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	69da      	ldr	r2, [r3, #28]
 8008dc0:	68bb      	ldr	r3, [r7, #8]
 8008dc2:	4013      	ands	r3, r2
 8008dc4:	68ba      	ldr	r2, [r7, #8]
 8008dc6:	429a      	cmp	r2, r3
 8008dc8:	bf0c      	ite	eq
 8008dca:	2301      	moveq	r3, #1
 8008dcc:	2300      	movne	r3, #0
 8008dce:	b2db      	uxtb	r3, r3
 8008dd0:	461a      	mov	r2, r3
 8008dd2:	79fb      	ldrb	r3, [r7, #7]
 8008dd4:	429a      	cmp	r2, r3
 8008dd6:	d0a0      	beq.n	8008d1a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008dd8:	2300      	movs	r3, #0
}
 8008dda:	4618      	mov	r0, r3
 8008ddc:	3710      	adds	r7, #16
 8008dde:	46bd      	mov	sp, r7
 8008de0:	bd80      	pop	{r7, pc}
	...

08008de4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008de4:	b480      	push	{r7}
 8008de6:	b095      	sub	sp, #84	@ 0x54
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008df2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008df4:	e853 3f00 	ldrex	r3, [r3]
 8008df8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008dfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dfc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008e00:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	461a      	mov	r2, r3
 8008e08:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008e0a:	643b      	str	r3, [r7, #64]	@ 0x40
 8008e0c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e0e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008e10:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008e12:	e841 2300 	strex	r3, r2, [r1]
 8008e16:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008e18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d1e6      	bne.n	8008dec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	3308      	adds	r3, #8
 8008e24:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e26:	6a3b      	ldr	r3, [r7, #32]
 8008e28:	e853 3f00 	ldrex	r3, [r3]
 8008e2c:	61fb      	str	r3, [r7, #28]
   return(result);
 8008e2e:	69fa      	ldr	r2, [r7, #28]
 8008e30:	4b1e      	ldr	r3, [pc, #120]	@ (8008eac <UART_EndRxTransfer+0xc8>)
 8008e32:	4013      	ands	r3, r2
 8008e34:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	3308      	adds	r3, #8
 8008e3c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008e3e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008e40:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e42:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008e44:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008e46:	e841 2300 	strex	r3, r2, [r1]
 8008e4a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008e4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d1e5      	bne.n	8008e1e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008e56:	2b01      	cmp	r3, #1
 8008e58:	d118      	bne.n	8008e8c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	e853 3f00 	ldrex	r3, [r3]
 8008e66:	60bb      	str	r3, [r7, #8]
   return(result);
 8008e68:	68bb      	ldr	r3, [r7, #8]
 8008e6a:	f023 0310 	bic.w	r3, r3, #16
 8008e6e:	647b      	str	r3, [r7, #68]	@ 0x44
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	461a      	mov	r2, r3
 8008e76:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008e78:	61bb      	str	r3, [r7, #24]
 8008e7a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e7c:	6979      	ldr	r1, [r7, #20]
 8008e7e:	69ba      	ldr	r2, [r7, #24]
 8008e80:	e841 2300 	strex	r3, r2, [r1]
 8008e84:	613b      	str	r3, [r7, #16]
   return(result);
 8008e86:	693b      	ldr	r3, [r7, #16]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d1e6      	bne.n	8008e5a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	2220      	movs	r2, #32
 8008e90:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	2200      	movs	r2, #0
 8008e98:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	2200      	movs	r2, #0
 8008e9e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008ea0:	bf00      	nop
 8008ea2:	3754      	adds	r7, #84	@ 0x54
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eaa:	4770      	bx	lr
 8008eac:	effffffe 	.word	0xeffffffe

08008eb0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008eb0:	b480      	push	{r7}
 8008eb2:	b085      	sub	sp, #20
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008ebe:	2b01      	cmp	r3, #1
 8008ec0:	d101      	bne.n	8008ec6 <HAL_UARTEx_DisableFifoMode+0x16>
 8008ec2:	2302      	movs	r3, #2
 8008ec4:	e027      	b.n	8008f16 <HAL_UARTEx_DisableFifoMode+0x66>
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	2201      	movs	r2, #1
 8008eca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	2224      	movs	r2, #36	@ 0x24
 8008ed2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	681a      	ldr	r2, [r3, #0]
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	f022 0201 	bic.w	r2, r2, #1
 8008eec:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008ef4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	2200      	movs	r2, #0
 8008efa:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	68fa      	ldr	r2, [r7, #12]
 8008f02:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	2220      	movs	r2, #32
 8008f08:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	2200      	movs	r2, #0
 8008f10:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008f14:	2300      	movs	r3, #0
}
 8008f16:	4618      	mov	r0, r3
 8008f18:	3714      	adds	r7, #20
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f20:	4770      	bx	lr

08008f22 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008f22:	b580      	push	{r7, lr}
 8008f24:	b084      	sub	sp, #16
 8008f26:	af00      	add	r7, sp, #0
 8008f28:	6078      	str	r0, [r7, #4]
 8008f2a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008f32:	2b01      	cmp	r3, #1
 8008f34:	d101      	bne.n	8008f3a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008f36:	2302      	movs	r3, #2
 8008f38:	e02d      	b.n	8008f96 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	2201      	movs	r2, #1
 8008f3e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	2224      	movs	r2, #36	@ 0x24
 8008f46:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	681a      	ldr	r2, [r3, #0]
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	f022 0201 	bic.w	r2, r2, #1
 8008f60:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	689b      	ldr	r3, [r3, #8]
 8008f68:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	683a      	ldr	r2, [r7, #0]
 8008f72:	430a      	orrs	r2, r1
 8008f74:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008f76:	6878      	ldr	r0, [r7, #4]
 8008f78:	f000 f850 	bl	800901c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	68fa      	ldr	r2, [r7, #12]
 8008f82:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	2220      	movs	r2, #32
 8008f88:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	2200      	movs	r2, #0
 8008f90:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008f94:	2300      	movs	r3, #0
}
 8008f96:	4618      	mov	r0, r3
 8008f98:	3710      	adds	r7, #16
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	bd80      	pop	{r7, pc}

08008f9e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008f9e:	b580      	push	{r7, lr}
 8008fa0:	b084      	sub	sp, #16
 8008fa2:	af00      	add	r7, sp, #0
 8008fa4:	6078      	str	r0, [r7, #4]
 8008fa6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008fae:	2b01      	cmp	r3, #1
 8008fb0:	d101      	bne.n	8008fb6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008fb2:	2302      	movs	r3, #2
 8008fb4:	e02d      	b.n	8009012 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	2201      	movs	r2, #1
 8008fba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	2224      	movs	r2, #36	@ 0x24
 8008fc2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	681a      	ldr	r2, [r3, #0]
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	f022 0201 	bic.w	r2, r2, #1
 8008fdc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	689b      	ldr	r3, [r3, #8]
 8008fe4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	683a      	ldr	r2, [r7, #0]
 8008fee:	430a      	orrs	r2, r1
 8008ff0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008ff2:	6878      	ldr	r0, [r7, #4]
 8008ff4:	f000 f812 	bl	800901c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	68fa      	ldr	r2, [r7, #12]
 8008ffe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	2220      	movs	r2, #32
 8009004:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	2200      	movs	r2, #0
 800900c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009010:	2300      	movs	r3, #0
}
 8009012:	4618      	mov	r0, r3
 8009014:	3710      	adds	r7, #16
 8009016:	46bd      	mov	sp, r7
 8009018:	bd80      	pop	{r7, pc}
	...

0800901c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800901c:	b480      	push	{r7}
 800901e:	b085      	sub	sp, #20
 8009020:	af00      	add	r7, sp, #0
 8009022:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009028:	2b00      	cmp	r3, #0
 800902a:	d108      	bne.n	800903e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	2201      	movs	r2, #1
 8009030:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	2201      	movs	r2, #1
 8009038:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800903c:	e031      	b.n	80090a2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800903e:	2310      	movs	r3, #16
 8009040:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009042:	2310      	movs	r3, #16
 8009044:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	689b      	ldr	r3, [r3, #8]
 800904c:	0e5b      	lsrs	r3, r3, #25
 800904e:	b2db      	uxtb	r3, r3
 8009050:	f003 0307 	and.w	r3, r3, #7
 8009054:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	689b      	ldr	r3, [r3, #8]
 800905c:	0f5b      	lsrs	r3, r3, #29
 800905e:	b2db      	uxtb	r3, r3
 8009060:	f003 0307 	and.w	r3, r3, #7
 8009064:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009066:	7bbb      	ldrb	r3, [r7, #14]
 8009068:	7b3a      	ldrb	r2, [r7, #12]
 800906a:	4911      	ldr	r1, [pc, #68]	@ (80090b0 <UARTEx_SetNbDataToProcess+0x94>)
 800906c:	5c8a      	ldrb	r2, [r1, r2]
 800906e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009072:	7b3a      	ldrb	r2, [r7, #12]
 8009074:	490f      	ldr	r1, [pc, #60]	@ (80090b4 <UARTEx_SetNbDataToProcess+0x98>)
 8009076:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009078:	fb93 f3f2 	sdiv	r3, r3, r2
 800907c:	b29a      	uxth	r2, r3
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009084:	7bfb      	ldrb	r3, [r7, #15]
 8009086:	7b7a      	ldrb	r2, [r7, #13]
 8009088:	4909      	ldr	r1, [pc, #36]	@ (80090b0 <UARTEx_SetNbDataToProcess+0x94>)
 800908a:	5c8a      	ldrb	r2, [r1, r2]
 800908c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009090:	7b7a      	ldrb	r2, [r7, #13]
 8009092:	4908      	ldr	r1, [pc, #32]	@ (80090b4 <UARTEx_SetNbDataToProcess+0x98>)
 8009094:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009096:	fb93 f3f2 	sdiv	r3, r3, r2
 800909a:	b29a      	uxth	r2, r3
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80090a2:	bf00      	nop
 80090a4:	3714      	adds	r7, #20
 80090a6:	46bd      	mov	sp, r7
 80090a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ac:	4770      	bx	lr
 80090ae:	bf00      	nop
 80090b0:	08009eb4 	.word	0x08009eb4
 80090b4:	08009ebc 	.word	0x08009ebc

080090b8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80090b8:	b480      	push	{r7}
 80090ba:	b083      	sub	sp, #12
 80090bc:	af00      	add	r7, sp, #0
 80090be:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	f103 0208 	add.w	r2, r3, #8
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	f04f 32ff 	mov.w	r2, #4294967295
 80090d0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	f103 0208 	add.w	r2, r3, #8
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	f103 0208 	add.w	r2, r3, #8
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	2200      	movs	r2, #0
 80090ea:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80090ec:	bf00      	nop
 80090ee:	370c      	adds	r7, #12
 80090f0:	46bd      	mov	sp, r7
 80090f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f6:	4770      	bx	lr

080090f8 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80090f8:	b480      	push	{r7}
 80090fa:	b085      	sub	sp, #20
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
 8009100:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	685b      	ldr	r3, [r3, #4]
 8009106:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009108:	683b      	ldr	r3, [r7, #0]
 800910a:	68fa      	ldr	r2, [r7, #12]
 800910c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	689a      	ldr	r2, [r3, #8]
 8009112:	683b      	ldr	r3, [r7, #0]
 8009114:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	689b      	ldr	r3, [r3, #8]
 800911a:	683a      	ldr	r2, [r7, #0]
 800911c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	683a      	ldr	r2, [r7, #0]
 8009122:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009124:	683b      	ldr	r3, [r7, #0]
 8009126:	687a      	ldr	r2, [r7, #4]
 8009128:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	1c5a      	adds	r2, r3, #1
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	601a      	str	r2, [r3, #0]
}
 8009134:	bf00      	nop
 8009136:	3714      	adds	r7, #20
 8009138:	46bd      	mov	sp, r7
 800913a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913e:	4770      	bx	lr

08009140 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009140:	b480      	push	{r7}
 8009142:	b085      	sub	sp, #20
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	691b      	ldr	r3, [r3, #16]
 800914c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	685b      	ldr	r3, [r3, #4]
 8009152:	687a      	ldr	r2, [r7, #4]
 8009154:	6892      	ldr	r2, [r2, #8]
 8009156:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	689b      	ldr	r3, [r3, #8]
 800915c:	687a      	ldr	r2, [r7, #4]
 800915e:	6852      	ldr	r2, [r2, #4]
 8009160:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	685b      	ldr	r3, [r3, #4]
 8009166:	687a      	ldr	r2, [r7, #4]
 8009168:	429a      	cmp	r2, r3
 800916a:	d103      	bne.n	8009174 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	689a      	ldr	r2, [r3, #8]
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	2200      	movs	r2, #0
 8009178:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	1e5a      	subs	r2, r3, #1
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	681b      	ldr	r3, [r3, #0]
}
 8009188:	4618      	mov	r0, r3
 800918a:	3714      	adds	r7, #20
 800918c:	46bd      	mov	sp, r7
 800918e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009192:	4770      	bx	lr

08009194 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009194:	b580      	push	{r7, lr}
 8009196:	b084      	sub	sp, #16
 8009198:	af00      	add	r7, sp, #0
 800919a:	6078      	str	r0, [r7, #4]
 800919c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d10b      	bne.n	80091c0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80091a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091ac:	f383 8811 	msr	BASEPRI, r3
 80091b0:	f3bf 8f6f 	isb	sy
 80091b4:	f3bf 8f4f 	dsb	sy
 80091b8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80091ba:	bf00      	nop
 80091bc:	bf00      	nop
 80091be:	e7fd      	b.n	80091bc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80091c0:	f000 fb0a 	bl	80097d8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	681a      	ldr	r2, [r3, #0]
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80091cc:	68f9      	ldr	r1, [r7, #12]
 80091ce:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80091d0:	fb01 f303 	mul.w	r3, r1, r3
 80091d4:	441a      	add	r2, r3
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	2200      	movs	r2, #0
 80091de:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	681a      	ldr	r2, [r3, #0]
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	681a      	ldr	r2, [r3, #0]
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80091f0:	3b01      	subs	r3, #1
 80091f2:	68f9      	ldr	r1, [r7, #12]
 80091f4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80091f6:	fb01 f303 	mul.w	r3, r1, r3
 80091fa:	441a      	add	r2, r3
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	22ff      	movs	r2, #255	@ 0xff
 8009204:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	22ff      	movs	r2, #255	@ 0xff
 800920c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8009210:	683b      	ldr	r3, [r7, #0]
 8009212:	2b00      	cmp	r3, #0
 8009214:	d114      	bne.n	8009240 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	691b      	ldr	r3, [r3, #16]
 800921a:	2b00      	cmp	r3, #0
 800921c:	d01a      	beq.n	8009254 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	3310      	adds	r3, #16
 8009222:	4618      	mov	r0, r3
 8009224:	f000 fa3c 	bl	80096a0 <xTaskRemoveFromEventList>
 8009228:	4603      	mov	r3, r0
 800922a:	2b00      	cmp	r3, #0
 800922c:	d012      	beq.n	8009254 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800922e:	4b0d      	ldr	r3, [pc, #52]	@ (8009264 <xQueueGenericReset+0xd0>)
 8009230:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009234:	601a      	str	r2, [r3, #0]
 8009236:	f3bf 8f4f 	dsb	sy
 800923a:	f3bf 8f6f 	isb	sy
 800923e:	e009      	b.n	8009254 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	3310      	adds	r3, #16
 8009244:	4618      	mov	r0, r3
 8009246:	f7ff ff37 	bl	80090b8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	3324      	adds	r3, #36	@ 0x24
 800924e:	4618      	mov	r0, r3
 8009250:	f7ff ff32 	bl	80090b8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009254:	f000 faf2 	bl	800983c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009258:	2301      	movs	r3, #1
}
 800925a:	4618      	mov	r0, r3
 800925c:	3710      	adds	r7, #16
 800925e:	46bd      	mov	sp, r7
 8009260:	bd80      	pop	{r7, pc}
 8009262:	bf00      	nop
 8009264:	e000ed04 	.word	0xe000ed04

08009268 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009268:	b580      	push	{r7, lr}
 800926a:	b08a      	sub	sp, #40	@ 0x28
 800926c:	af02      	add	r7, sp, #8
 800926e:	60f8      	str	r0, [r7, #12]
 8009270:	60b9      	str	r1, [r7, #8]
 8009272:	4613      	mov	r3, r2
 8009274:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	2b00      	cmp	r3, #0
 800927a:	d10b      	bne.n	8009294 <xQueueGenericCreate+0x2c>
	__asm volatile
 800927c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009280:	f383 8811 	msr	BASEPRI, r3
 8009284:	f3bf 8f6f 	isb	sy
 8009288:	f3bf 8f4f 	dsb	sy
 800928c:	613b      	str	r3, [r7, #16]
}
 800928e:	bf00      	nop
 8009290:	bf00      	nop
 8009292:	e7fd      	b.n	8009290 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	68ba      	ldr	r2, [r7, #8]
 8009298:	fb02 f303 	mul.w	r3, r2, r3
 800929c:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800929e:	69fb      	ldr	r3, [r7, #28]
 80092a0:	3348      	adds	r3, #72	@ 0x48
 80092a2:	4618      	mov	r0, r3
 80092a4:	f000 fb4a 	bl	800993c <pvPortMalloc>
 80092a8:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80092aa:	69bb      	ldr	r3, [r7, #24]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d011      	beq.n	80092d4 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80092b0:	69bb      	ldr	r3, [r7, #24]
 80092b2:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80092b4:	697b      	ldr	r3, [r7, #20]
 80092b6:	3348      	adds	r3, #72	@ 0x48
 80092b8:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80092ba:	69bb      	ldr	r3, [r7, #24]
 80092bc:	2200      	movs	r2, #0
 80092be:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80092c2:	79fa      	ldrb	r2, [r7, #7]
 80092c4:	69bb      	ldr	r3, [r7, #24]
 80092c6:	9300      	str	r3, [sp, #0]
 80092c8:	4613      	mov	r3, r2
 80092ca:	697a      	ldr	r2, [r7, #20]
 80092cc:	68b9      	ldr	r1, [r7, #8]
 80092ce:	68f8      	ldr	r0, [r7, #12]
 80092d0:	f000 f805 	bl	80092de <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80092d4:	69bb      	ldr	r3, [r7, #24]
	}
 80092d6:	4618      	mov	r0, r3
 80092d8:	3720      	adds	r7, #32
 80092da:	46bd      	mov	sp, r7
 80092dc:	bd80      	pop	{r7, pc}

080092de <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80092de:	b580      	push	{r7, lr}
 80092e0:	b084      	sub	sp, #16
 80092e2:	af00      	add	r7, sp, #0
 80092e4:	60f8      	str	r0, [r7, #12]
 80092e6:	60b9      	str	r1, [r7, #8]
 80092e8:	607a      	str	r2, [r7, #4]
 80092ea:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80092ec:	68bb      	ldr	r3, [r7, #8]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d103      	bne.n	80092fa <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80092f2:	69bb      	ldr	r3, [r7, #24]
 80092f4:	69ba      	ldr	r2, [r7, #24]
 80092f6:	601a      	str	r2, [r3, #0]
 80092f8:	e002      	b.n	8009300 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80092fa:	69bb      	ldr	r3, [r7, #24]
 80092fc:	687a      	ldr	r2, [r7, #4]
 80092fe:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009300:	69bb      	ldr	r3, [r7, #24]
 8009302:	68fa      	ldr	r2, [r7, #12]
 8009304:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009306:	69bb      	ldr	r3, [r7, #24]
 8009308:	68ba      	ldr	r2, [r7, #8]
 800930a:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800930c:	2101      	movs	r1, #1
 800930e:	69b8      	ldr	r0, [r7, #24]
 8009310:	f7ff ff40 	bl	8009194 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009314:	bf00      	nop
 8009316:	3710      	adds	r7, #16
 8009318:	46bd      	mov	sp, r7
 800931a:	bd80      	pop	{r7, pc}

0800931c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800931c:	b480      	push	{r7}
 800931e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009320:	4b04      	ldr	r3, [pc, #16]	@ (8009334 <vTaskSuspendAll+0x18>)
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	3301      	adds	r3, #1
 8009326:	4a03      	ldr	r2, [pc, #12]	@ (8009334 <vTaskSuspendAll+0x18>)
 8009328:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800932a:	bf00      	nop
 800932c:	46bd      	mov	sp, r7
 800932e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009332:	4770      	bx	lr
 8009334:	24000374 	.word	0x24000374

08009338 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009338:	b580      	push	{r7, lr}
 800933a:	b084      	sub	sp, #16
 800933c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800933e:	2300      	movs	r3, #0
 8009340:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009342:	2300      	movs	r3, #0
 8009344:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009346:	4b42      	ldr	r3, [pc, #264]	@ (8009450 <xTaskResumeAll+0x118>)
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	2b00      	cmp	r3, #0
 800934c:	d10b      	bne.n	8009366 <xTaskResumeAll+0x2e>
	__asm volatile
 800934e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009352:	f383 8811 	msr	BASEPRI, r3
 8009356:	f3bf 8f6f 	isb	sy
 800935a:	f3bf 8f4f 	dsb	sy
 800935e:	603b      	str	r3, [r7, #0]
}
 8009360:	bf00      	nop
 8009362:	bf00      	nop
 8009364:	e7fd      	b.n	8009362 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009366:	f000 fa37 	bl	80097d8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800936a:	4b39      	ldr	r3, [pc, #228]	@ (8009450 <xTaskResumeAll+0x118>)
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	3b01      	subs	r3, #1
 8009370:	4a37      	ldr	r2, [pc, #220]	@ (8009450 <xTaskResumeAll+0x118>)
 8009372:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009374:	4b36      	ldr	r3, [pc, #216]	@ (8009450 <xTaskResumeAll+0x118>)
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	2b00      	cmp	r3, #0
 800937a:	d161      	bne.n	8009440 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800937c:	4b35      	ldr	r3, [pc, #212]	@ (8009454 <xTaskResumeAll+0x11c>)
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	2b00      	cmp	r3, #0
 8009382:	d05d      	beq.n	8009440 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009384:	e02e      	b.n	80093e4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009386:	4b34      	ldr	r3, [pc, #208]	@ (8009458 <xTaskResumeAll+0x120>)
 8009388:	68db      	ldr	r3, [r3, #12]
 800938a:	68db      	ldr	r3, [r3, #12]
 800938c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	3318      	adds	r3, #24
 8009392:	4618      	mov	r0, r3
 8009394:	f7ff fed4 	bl	8009140 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	3304      	adds	r3, #4
 800939c:	4618      	mov	r0, r3
 800939e:	f7ff fecf 	bl	8009140 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093a6:	2201      	movs	r2, #1
 80093a8:	409a      	lsls	r2, r3
 80093aa:	4b2c      	ldr	r3, [pc, #176]	@ (800945c <xTaskResumeAll+0x124>)
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	4313      	orrs	r3, r2
 80093b0:	4a2a      	ldr	r2, [pc, #168]	@ (800945c <xTaskResumeAll+0x124>)
 80093b2:	6013      	str	r3, [r2, #0]
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80093b8:	4613      	mov	r3, r2
 80093ba:	009b      	lsls	r3, r3, #2
 80093bc:	4413      	add	r3, r2
 80093be:	009b      	lsls	r3, r3, #2
 80093c0:	4a27      	ldr	r2, [pc, #156]	@ (8009460 <xTaskResumeAll+0x128>)
 80093c2:	441a      	add	r2, r3
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	3304      	adds	r3, #4
 80093c8:	4619      	mov	r1, r3
 80093ca:	4610      	mov	r0, r2
 80093cc:	f7ff fe94 	bl	80090f8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80093d4:	4b23      	ldr	r3, [pc, #140]	@ (8009464 <xTaskResumeAll+0x12c>)
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093da:	429a      	cmp	r2, r3
 80093dc:	d302      	bcc.n	80093e4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80093de:	4b22      	ldr	r3, [pc, #136]	@ (8009468 <xTaskResumeAll+0x130>)
 80093e0:	2201      	movs	r2, #1
 80093e2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80093e4:	4b1c      	ldr	r3, [pc, #112]	@ (8009458 <xTaskResumeAll+0x120>)
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d1cc      	bne.n	8009386 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d001      	beq.n	80093f6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80093f2:	f000 f9b9 	bl	8009768 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80093f6:	4b1d      	ldr	r3, [pc, #116]	@ (800946c <xTaskResumeAll+0x134>)
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d010      	beq.n	8009424 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009402:	f000 f837 	bl	8009474 <xTaskIncrementTick>
 8009406:	4603      	mov	r3, r0
 8009408:	2b00      	cmp	r3, #0
 800940a:	d002      	beq.n	8009412 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800940c:	4b16      	ldr	r3, [pc, #88]	@ (8009468 <xTaskResumeAll+0x130>)
 800940e:	2201      	movs	r2, #1
 8009410:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	3b01      	subs	r3, #1
 8009416:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	2b00      	cmp	r3, #0
 800941c:	d1f1      	bne.n	8009402 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800941e:	4b13      	ldr	r3, [pc, #76]	@ (800946c <xTaskResumeAll+0x134>)
 8009420:	2200      	movs	r2, #0
 8009422:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009424:	4b10      	ldr	r3, [pc, #64]	@ (8009468 <xTaskResumeAll+0x130>)
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	2b00      	cmp	r3, #0
 800942a:	d009      	beq.n	8009440 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800942c:	2301      	movs	r3, #1
 800942e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009430:	4b0f      	ldr	r3, [pc, #60]	@ (8009470 <xTaskResumeAll+0x138>)
 8009432:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009436:	601a      	str	r2, [r3, #0]
 8009438:	f3bf 8f4f 	dsb	sy
 800943c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009440:	f000 f9fc 	bl	800983c <vPortExitCritical>

	return xAlreadyYielded;
 8009444:	68bb      	ldr	r3, [r7, #8]
}
 8009446:	4618      	mov	r0, r3
 8009448:	3710      	adds	r7, #16
 800944a:	46bd      	mov	sp, r7
 800944c:	bd80      	pop	{r7, pc}
 800944e:	bf00      	nop
 8009450:	24000374 	.word	0x24000374
 8009454:	24000358 	.word	0x24000358
 8009458:	24000344 	.word	0x24000344
 800945c:	24000360 	.word	0x24000360
 8009460:	240002b0 	.word	0x240002b0
 8009464:	240002ac 	.word	0x240002ac
 8009468:	24000368 	.word	0x24000368
 800946c:	24000364 	.word	0x24000364
 8009470:	e000ed04 	.word	0xe000ed04

08009474 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009474:	b580      	push	{r7, lr}
 8009476:	b086      	sub	sp, #24
 8009478:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800947a:	2300      	movs	r3, #0
 800947c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800947e:	4b4f      	ldr	r3, [pc, #316]	@ (80095bc <xTaskIncrementTick+0x148>)
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	2b00      	cmp	r3, #0
 8009484:	f040 808f 	bne.w	80095a6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009488:	4b4d      	ldr	r3, [pc, #308]	@ (80095c0 <xTaskIncrementTick+0x14c>)
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	3301      	adds	r3, #1
 800948e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009490:	4a4b      	ldr	r2, [pc, #300]	@ (80095c0 <xTaskIncrementTick+0x14c>)
 8009492:	693b      	ldr	r3, [r7, #16]
 8009494:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009496:	693b      	ldr	r3, [r7, #16]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d121      	bne.n	80094e0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800949c:	4b49      	ldr	r3, [pc, #292]	@ (80095c4 <xTaskIncrementTick+0x150>)
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d00b      	beq.n	80094be <xTaskIncrementTick+0x4a>
	__asm volatile
 80094a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094aa:	f383 8811 	msr	BASEPRI, r3
 80094ae:	f3bf 8f6f 	isb	sy
 80094b2:	f3bf 8f4f 	dsb	sy
 80094b6:	603b      	str	r3, [r7, #0]
}
 80094b8:	bf00      	nop
 80094ba:	bf00      	nop
 80094bc:	e7fd      	b.n	80094ba <xTaskIncrementTick+0x46>
 80094be:	4b41      	ldr	r3, [pc, #260]	@ (80095c4 <xTaskIncrementTick+0x150>)
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	60fb      	str	r3, [r7, #12]
 80094c4:	4b40      	ldr	r3, [pc, #256]	@ (80095c8 <xTaskIncrementTick+0x154>)
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	4a3e      	ldr	r2, [pc, #248]	@ (80095c4 <xTaskIncrementTick+0x150>)
 80094ca:	6013      	str	r3, [r2, #0]
 80094cc:	4a3e      	ldr	r2, [pc, #248]	@ (80095c8 <xTaskIncrementTick+0x154>)
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	6013      	str	r3, [r2, #0]
 80094d2:	4b3e      	ldr	r3, [pc, #248]	@ (80095cc <xTaskIncrementTick+0x158>)
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	3301      	adds	r3, #1
 80094d8:	4a3c      	ldr	r2, [pc, #240]	@ (80095cc <xTaskIncrementTick+0x158>)
 80094da:	6013      	str	r3, [r2, #0]
 80094dc:	f000 f944 	bl	8009768 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80094e0:	4b3b      	ldr	r3, [pc, #236]	@ (80095d0 <xTaskIncrementTick+0x15c>)
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	693a      	ldr	r2, [r7, #16]
 80094e6:	429a      	cmp	r2, r3
 80094e8:	d348      	bcc.n	800957c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80094ea:	4b36      	ldr	r3, [pc, #216]	@ (80095c4 <xTaskIncrementTick+0x150>)
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d104      	bne.n	80094fe <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80094f4:	4b36      	ldr	r3, [pc, #216]	@ (80095d0 <xTaskIncrementTick+0x15c>)
 80094f6:	f04f 32ff 	mov.w	r2, #4294967295
 80094fa:	601a      	str	r2, [r3, #0]
					break;
 80094fc:	e03e      	b.n	800957c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80094fe:	4b31      	ldr	r3, [pc, #196]	@ (80095c4 <xTaskIncrementTick+0x150>)
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	68db      	ldr	r3, [r3, #12]
 8009504:	68db      	ldr	r3, [r3, #12]
 8009506:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009508:	68bb      	ldr	r3, [r7, #8]
 800950a:	685b      	ldr	r3, [r3, #4]
 800950c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800950e:	693a      	ldr	r2, [r7, #16]
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	429a      	cmp	r2, r3
 8009514:	d203      	bcs.n	800951e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009516:	4a2e      	ldr	r2, [pc, #184]	@ (80095d0 <xTaskIncrementTick+0x15c>)
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800951c:	e02e      	b.n	800957c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800951e:	68bb      	ldr	r3, [r7, #8]
 8009520:	3304      	adds	r3, #4
 8009522:	4618      	mov	r0, r3
 8009524:	f7ff fe0c 	bl	8009140 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009528:	68bb      	ldr	r3, [r7, #8]
 800952a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800952c:	2b00      	cmp	r3, #0
 800952e:	d004      	beq.n	800953a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009530:	68bb      	ldr	r3, [r7, #8]
 8009532:	3318      	adds	r3, #24
 8009534:	4618      	mov	r0, r3
 8009536:	f7ff fe03 	bl	8009140 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800953a:	68bb      	ldr	r3, [r7, #8]
 800953c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800953e:	2201      	movs	r2, #1
 8009540:	409a      	lsls	r2, r3
 8009542:	4b24      	ldr	r3, [pc, #144]	@ (80095d4 <xTaskIncrementTick+0x160>)
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	4313      	orrs	r3, r2
 8009548:	4a22      	ldr	r2, [pc, #136]	@ (80095d4 <xTaskIncrementTick+0x160>)
 800954a:	6013      	str	r3, [r2, #0]
 800954c:	68bb      	ldr	r3, [r7, #8]
 800954e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009550:	4613      	mov	r3, r2
 8009552:	009b      	lsls	r3, r3, #2
 8009554:	4413      	add	r3, r2
 8009556:	009b      	lsls	r3, r3, #2
 8009558:	4a1f      	ldr	r2, [pc, #124]	@ (80095d8 <xTaskIncrementTick+0x164>)
 800955a:	441a      	add	r2, r3
 800955c:	68bb      	ldr	r3, [r7, #8]
 800955e:	3304      	adds	r3, #4
 8009560:	4619      	mov	r1, r3
 8009562:	4610      	mov	r0, r2
 8009564:	f7ff fdc8 	bl	80090f8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009568:	68bb      	ldr	r3, [r7, #8]
 800956a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800956c:	4b1b      	ldr	r3, [pc, #108]	@ (80095dc <xTaskIncrementTick+0x168>)
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009572:	429a      	cmp	r2, r3
 8009574:	d3b9      	bcc.n	80094ea <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8009576:	2301      	movs	r3, #1
 8009578:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800957a:	e7b6      	b.n	80094ea <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800957c:	4b17      	ldr	r3, [pc, #92]	@ (80095dc <xTaskIncrementTick+0x168>)
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009582:	4915      	ldr	r1, [pc, #84]	@ (80095d8 <xTaskIncrementTick+0x164>)
 8009584:	4613      	mov	r3, r2
 8009586:	009b      	lsls	r3, r3, #2
 8009588:	4413      	add	r3, r2
 800958a:	009b      	lsls	r3, r3, #2
 800958c:	440b      	add	r3, r1
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	2b01      	cmp	r3, #1
 8009592:	d901      	bls.n	8009598 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009594:	2301      	movs	r3, #1
 8009596:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009598:	4b11      	ldr	r3, [pc, #68]	@ (80095e0 <xTaskIncrementTick+0x16c>)
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	2b00      	cmp	r3, #0
 800959e:	d007      	beq.n	80095b0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80095a0:	2301      	movs	r3, #1
 80095a2:	617b      	str	r3, [r7, #20]
 80095a4:	e004      	b.n	80095b0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80095a6:	4b0f      	ldr	r3, [pc, #60]	@ (80095e4 <xTaskIncrementTick+0x170>)
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	3301      	adds	r3, #1
 80095ac:	4a0d      	ldr	r2, [pc, #52]	@ (80095e4 <xTaskIncrementTick+0x170>)
 80095ae:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80095b0:	697b      	ldr	r3, [r7, #20]
}
 80095b2:	4618      	mov	r0, r3
 80095b4:	3718      	adds	r7, #24
 80095b6:	46bd      	mov	sp, r7
 80095b8:	bd80      	pop	{r7, pc}
 80095ba:	bf00      	nop
 80095bc:	24000374 	.word	0x24000374
 80095c0:	2400035c 	.word	0x2400035c
 80095c4:	2400033c 	.word	0x2400033c
 80095c8:	24000340 	.word	0x24000340
 80095cc:	2400036c 	.word	0x2400036c
 80095d0:	24000370 	.word	0x24000370
 80095d4:	24000360 	.word	0x24000360
 80095d8:	240002b0 	.word	0x240002b0
 80095dc:	240002ac 	.word	0x240002ac
 80095e0:	24000368 	.word	0x24000368
 80095e4:	24000364 	.word	0x24000364

080095e8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80095e8:	b480      	push	{r7}
 80095ea:	b087      	sub	sp, #28
 80095ec:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80095ee:	4b27      	ldr	r3, [pc, #156]	@ (800968c <vTaskSwitchContext+0xa4>)
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d003      	beq.n	80095fe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80095f6:	4b26      	ldr	r3, [pc, #152]	@ (8009690 <vTaskSwitchContext+0xa8>)
 80095f8:	2201      	movs	r2, #1
 80095fa:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80095fc:	e040      	b.n	8009680 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80095fe:	4b24      	ldr	r3, [pc, #144]	@ (8009690 <vTaskSwitchContext+0xa8>)
 8009600:	2200      	movs	r2, #0
 8009602:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009604:	4b23      	ldr	r3, [pc, #140]	@ (8009694 <vTaskSwitchContext+0xac>)
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	fab3 f383 	clz	r3, r3
 8009610:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8009612:	7afb      	ldrb	r3, [r7, #11]
 8009614:	f1c3 031f 	rsb	r3, r3, #31
 8009618:	617b      	str	r3, [r7, #20]
 800961a:	491f      	ldr	r1, [pc, #124]	@ (8009698 <vTaskSwitchContext+0xb0>)
 800961c:	697a      	ldr	r2, [r7, #20]
 800961e:	4613      	mov	r3, r2
 8009620:	009b      	lsls	r3, r3, #2
 8009622:	4413      	add	r3, r2
 8009624:	009b      	lsls	r3, r3, #2
 8009626:	440b      	add	r3, r1
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	2b00      	cmp	r3, #0
 800962c:	d10b      	bne.n	8009646 <vTaskSwitchContext+0x5e>
	__asm volatile
 800962e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009632:	f383 8811 	msr	BASEPRI, r3
 8009636:	f3bf 8f6f 	isb	sy
 800963a:	f3bf 8f4f 	dsb	sy
 800963e:	607b      	str	r3, [r7, #4]
}
 8009640:	bf00      	nop
 8009642:	bf00      	nop
 8009644:	e7fd      	b.n	8009642 <vTaskSwitchContext+0x5a>
 8009646:	697a      	ldr	r2, [r7, #20]
 8009648:	4613      	mov	r3, r2
 800964a:	009b      	lsls	r3, r3, #2
 800964c:	4413      	add	r3, r2
 800964e:	009b      	lsls	r3, r3, #2
 8009650:	4a11      	ldr	r2, [pc, #68]	@ (8009698 <vTaskSwitchContext+0xb0>)
 8009652:	4413      	add	r3, r2
 8009654:	613b      	str	r3, [r7, #16]
 8009656:	693b      	ldr	r3, [r7, #16]
 8009658:	685b      	ldr	r3, [r3, #4]
 800965a:	685a      	ldr	r2, [r3, #4]
 800965c:	693b      	ldr	r3, [r7, #16]
 800965e:	605a      	str	r2, [r3, #4]
 8009660:	693b      	ldr	r3, [r7, #16]
 8009662:	685a      	ldr	r2, [r3, #4]
 8009664:	693b      	ldr	r3, [r7, #16]
 8009666:	3308      	adds	r3, #8
 8009668:	429a      	cmp	r2, r3
 800966a:	d104      	bne.n	8009676 <vTaskSwitchContext+0x8e>
 800966c:	693b      	ldr	r3, [r7, #16]
 800966e:	685b      	ldr	r3, [r3, #4]
 8009670:	685a      	ldr	r2, [r3, #4]
 8009672:	693b      	ldr	r3, [r7, #16]
 8009674:	605a      	str	r2, [r3, #4]
 8009676:	693b      	ldr	r3, [r7, #16]
 8009678:	685b      	ldr	r3, [r3, #4]
 800967a:	68db      	ldr	r3, [r3, #12]
 800967c:	4a07      	ldr	r2, [pc, #28]	@ (800969c <vTaskSwitchContext+0xb4>)
 800967e:	6013      	str	r3, [r2, #0]
}
 8009680:	bf00      	nop
 8009682:	371c      	adds	r7, #28
 8009684:	46bd      	mov	sp, r7
 8009686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968a:	4770      	bx	lr
 800968c:	24000374 	.word	0x24000374
 8009690:	24000368 	.word	0x24000368
 8009694:	24000360 	.word	0x24000360
 8009698:	240002b0 	.word	0x240002b0
 800969c:	240002ac 	.word	0x240002ac

080096a0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80096a0:	b580      	push	{r7, lr}
 80096a2:	b086      	sub	sp, #24
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	68db      	ldr	r3, [r3, #12]
 80096ac:	68db      	ldr	r3, [r3, #12]
 80096ae:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80096b0:	693b      	ldr	r3, [r7, #16]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d10b      	bne.n	80096ce <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80096b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096ba:	f383 8811 	msr	BASEPRI, r3
 80096be:	f3bf 8f6f 	isb	sy
 80096c2:	f3bf 8f4f 	dsb	sy
 80096c6:	60fb      	str	r3, [r7, #12]
}
 80096c8:	bf00      	nop
 80096ca:	bf00      	nop
 80096cc:	e7fd      	b.n	80096ca <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80096ce:	693b      	ldr	r3, [r7, #16]
 80096d0:	3318      	adds	r3, #24
 80096d2:	4618      	mov	r0, r3
 80096d4:	f7ff fd34 	bl	8009140 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80096d8:	4b1d      	ldr	r3, [pc, #116]	@ (8009750 <xTaskRemoveFromEventList+0xb0>)
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d11c      	bne.n	800971a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80096e0:	693b      	ldr	r3, [r7, #16]
 80096e2:	3304      	adds	r3, #4
 80096e4:	4618      	mov	r0, r3
 80096e6:	f7ff fd2b 	bl	8009140 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80096ea:	693b      	ldr	r3, [r7, #16]
 80096ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096ee:	2201      	movs	r2, #1
 80096f0:	409a      	lsls	r2, r3
 80096f2:	4b18      	ldr	r3, [pc, #96]	@ (8009754 <xTaskRemoveFromEventList+0xb4>)
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	4313      	orrs	r3, r2
 80096f8:	4a16      	ldr	r2, [pc, #88]	@ (8009754 <xTaskRemoveFromEventList+0xb4>)
 80096fa:	6013      	str	r3, [r2, #0]
 80096fc:	693b      	ldr	r3, [r7, #16]
 80096fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009700:	4613      	mov	r3, r2
 8009702:	009b      	lsls	r3, r3, #2
 8009704:	4413      	add	r3, r2
 8009706:	009b      	lsls	r3, r3, #2
 8009708:	4a13      	ldr	r2, [pc, #76]	@ (8009758 <xTaskRemoveFromEventList+0xb8>)
 800970a:	441a      	add	r2, r3
 800970c:	693b      	ldr	r3, [r7, #16]
 800970e:	3304      	adds	r3, #4
 8009710:	4619      	mov	r1, r3
 8009712:	4610      	mov	r0, r2
 8009714:	f7ff fcf0 	bl	80090f8 <vListInsertEnd>
 8009718:	e005      	b.n	8009726 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800971a:	693b      	ldr	r3, [r7, #16]
 800971c:	3318      	adds	r3, #24
 800971e:	4619      	mov	r1, r3
 8009720:	480e      	ldr	r0, [pc, #56]	@ (800975c <xTaskRemoveFromEventList+0xbc>)
 8009722:	f7ff fce9 	bl	80090f8 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009726:	693b      	ldr	r3, [r7, #16]
 8009728:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800972a:	4b0d      	ldr	r3, [pc, #52]	@ (8009760 <xTaskRemoveFromEventList+0xc0>)
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009730:	429a      	cmp	r2, r3
 8009732:	d905      	bls.n	8009740 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009734:	2301      	movs	r3, #1
 8009736:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009738:	4b0a      	ldr	r3, [pc, #40]	@ (8009764 <xTaskRemoveFromEventList+0xc4>)
 800973a:	2201      	movs	r2, #1
 800973c:	601a      	str	r2, [r3, #0]
 800973e:	e001      	b.n	8009744 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009740:	2300      	movs	r3, #0
 8009742:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009744:	697b      	ldr	r3, [r7, #20]
}
 8009746:	4618      	mov	r0, r3
 8009748:	3718      	adds	r7, #24
 800974a:	46bd      	mov	sp, r7
 800974c:	bd80      	pop	{r7, pc}
 800974e:	bf00      	nop
 8009750:	24000374 	.word	0x24000374
 8009754:	24000360 	.word	0x24000360
 8009758:	240002b0 	.word	0x240002b0
 800975c:	24000344 	.word	0x24000344
 8009760:	240002ac 	.word	0x240002ac
 8009764:	24000368 	.word	0x24000368

08009768 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009768:	b480      	push	{r7}
 800976a:	b083      	sub	sp, #12
 800976c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800976e:	4b0c      	ldr	r3, [pc, #48]	@ (80097a0 <prvResetNextTaskUnblockTime+0x38>)
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	2b00      	cmp	r3, #0
 8009776:	d104      	bne.n	8009782 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009778:	4b0a      	ldr	r3, [pc, #40]	@ (80097a4 <prvResetNextTaskUnblockTime+0x3c>)
 800977a:	f04f 32ff 	mov.w	r2, #4294967295
 800977e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009780:	e008      	b.n	8009794 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009782:	4b07      	ldr	r3, [pc, #28]	@ (80097a0 <prvResetNextTaskUnblockTime+0x38>)
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	68db      	ldr	r3, [r3, #12]
 8009788:	68db      	ldr	r3, [r3, #12]
 800978a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	685b      	ldr	r3, [r3, #4]
 8009790:	4a04      	ldr	r2, [pc, #16]	@ (80097a4 <prvResetNextTaskUnblockTime+0x3c>)
 8009792:	6013      	str	r3, [r2, #0]
}
 8009794:	bf00      	nop
 8009796:	370c      	adds	r7, #12
 8009798:	46bd      	mov	sp, r7
 800979a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800979e:	4770      	bx	lr
 80097a0:	2400033c 	.word	0x2400033c
 80097a4:	24000370 	.word	0x24000370
	...

080097b0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80097b0:	4b07      	ldr	r3, [pc, #28]	@ (80097d0 <pxCurrentTCBConst2>)
 80097b2:	6819      	ldr	r1, [r3, #0]
 80097b4:	6808      	ldr	r0, [r1, #0]
 80097b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097ba:	f380 8809 	msr	PSP, r0
 80097be:	f3bf 8f6f 	isb	sy
 80097c2:	f04f 0000 	mov.w	r0, #0
 80097c6:	f380 8811 	msr	BASEPRI, r0
 80097ca:	4770      	bx	lr
 80097cc:	f3af 8000 	nop.w

080097d0 <pxCurrentTCBConst2>:
 80097d0:	240002ac 	.word	0x240002ac
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80097d4:	bf00      	nop
 80097d6:	bf00      	nop

080097d8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80097d8:	b480      	push	{r7}
 80097da:	b083      	sub	sp, #12
 80097dc:	af00      	add	r7, sp, #0
	__asm volatile
 80097de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097e2:	f383 8811 	msr	BASEPRI, r3
 80097e6:	f3bf 8f6f 	isb	sy
 80097ea:	f3bf 8f4f 	dsb	sy
 80097ee:	607b      	str	r3, [r7, #4]
}
 80097f0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80097f2:	4b10      	ldr	r3, [pc, #64]	@ (8009834 <vPortEnterCritical+0x5c>)
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	3301      	adds	r3, #1
 80097f8:	4a0e      	ldr	r2, [pc, #56]	@ (8009834 <vPortEnterCritical+0x5c>)
 80097fa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80097fc:	4b0d      	ldr	r3, [pc, #52]	@ (8009834 <vPortEnterCritical+0x5c>)
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	2b01      	cmp	r3, #1
 8009802:	d110      	bne.n	8009826 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009804:	4b0c      	ldr	r3, [pc, #48]	@ (8009838 <vPortEnterCritical+0x60>)
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	b2db      	uxtb	r3, r3
 800980a:	2b00      	cmp	r3, #0
 800980c:	d00b      	beq.n	8009826 <vPortEnterCritical+0x4e>
	__asm volatile
 800980e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009812:	f383 8811 	msr	BASEPRI, r3
 8009816:	f3bf 8f6f 	isb	sy
 800981a:	f3bf 8f4f 	dsb	sy
 800981e:	603b      	str	r3, [r7, #0]
}
 8009820:	bf00      	nop
 8009822:	bf00      	nop
 8009824:	e7fd      	b.n	8009822 <vPortEnterCritical+0x4a>
	}
}
 8009826:	bf00      	nop
 8009828:	370c      	adds	r7, #12
 800982a:	46bd      	mov	sp, r7
 800982c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009830:	4770      	bx	lr
 8009832:	bf00      	nop
 8009834:	24000010 	.word	0x24000010
 8009838:	e000ed04 	.word	0xe000ed04

0800983c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800983c:	b480      	push	{r7}
 800983e:	b083      	sub	sp, #12
 8009840:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009842:	4b12      	ldr	r3, [pc, #72]	@ (800988c <vPortExitCritical+0x50>)
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	2b00      	cmp	r3, #0
 8009848:	d10b      	bne.n	8009862 <vPortExitCritical+0x26>
	__asm volatile
 800984a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800984e:	f383 8811 	msr	BASEPRI, r3
 8009852:	f3bf 8f6f 	isb	sy
 8009856:	f3bf 8f4f 	dsb	sy
 800985a:	607b      	str	r3, [r7, #4]
}
 800985c:	bf00      	nop
 800985e:	bf00      	nop
 8009860:	e7fd      	b.n	800985e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009862:	4b0a      	ldr	r3, [pc, #40]	@ (800988c <vPortExitCritical+0x50>)
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	3b01      	subs	r3, #1
 8009868:	4a08      	ldr	r2, [pc, #32]	@ (800988c <vPortExitCritical+0x50>)
 800986a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800986c:	4b07      	ldr	r3, [pc, #28]	@ (800988c <vPortExitCritical+0x50>)
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	2b00      	cmp	r3, #0
 8009872:	d105      	bne.n	8009880 <vPortExitCritical+0x44>
 8009874:	2300      	movs	r3, #0
 8009876:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009878:	683b      	ldr	r3, [r7, #0]
 800987a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800987e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009880:	bf00      	nop
 8009882:	370c      	adds	r7, #12
 8009884:	46bd      	mov	sp, r7
 8009886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988a:	4770      	bx	lr
 800988c:	24000010 	.word	0x24000010

08009890 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009890:	f3ef 8009 	mrs	r0, PSP
 8009894:	f3bf 8f6f 	isb	sy
 8009898:	4b15      	ldr	r3, [pc, #84]	@ (80098f0 <pxCurrentTCBConst>)
 800989a:	681a      	ldr	r2, [r3, #0]
 800989c:	f01e 0f10 	tst.w	lr, #16
 80098a0:	bf08      	it	eq
 80098a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80098a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098aa:	6010      	str	r0, [r2, #0]
 80098ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80098b0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80098b4:	f380 8811 	msr	BASEPRI, r0
 80098b8:	f3bf 8f4f 	dsb	sy
 80098bc:	f3bf 8f6f 	isb	sy
 80098c0:	f7ff fe92 	bl	80095e8 <vTaskSwitchContext>
 80098c4:	f04f 0000 	mov.w	r0, #0
 80098c8:	f380 8811 	msr	BASEPRI, r0
 80098cc:	bc09      	pop	{r0, r3}
 80098ce:	6819      	ldr	r1, [r3, #0]
 80098d0:	6808      	ldr	r0, [r1, #0]
 80098d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098d6:	f01e 0f10 	tst.w	lr, #16
 80098da:	bf08      	it	eq
 80098dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80098e0:	f380 8809 	msr	PSP, r0
 80098e4:	f3bf 8f6f 	isb	sy
 80098e8:	4770      	bx	lr
 80098ea:	bf00      	nop
 80098ec:	f3af 8000 	nop.w

080098f0 <pxCurrentTCBConst>:
 80098f0:	240002ac 	.word	0x240002ac
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80098f4:	bf00      	nop
 80098f6:	bf00      	nop

080098f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80098f8:	b580      	push	{r7, lr}
 80098fa:	b082      	sub	sp, #8
 80098fc:	af00      	add	r7, sp, #0
	__asm volatile
 80098fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009902:	f383 8811 	msr	BASEPRI, r3
 8009906:	f3bf 8f6f 	isb	sy
 800990a:	f3bf 8f4f 	dsb	sy
 800990e:	607b      	str	r3, [r7, #4]
}
 8009910:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009912:	f7ff fdaf 	bl	8009474 <xTaskIncrementTick>
 8009916:	4603      	mov	r3, r0
 8009918:	2b00      	cmp	r3, #0
 800991a:	d003      	beq.n	8009924 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800991c:	4b06      	ldr	r3, [pc, #24]	@ (8009938 <SysTick_Handler+0x40>)
 800991e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009922:	601a      	str	r2, [r3, #0]
 8009924:	2300      	movs	r3, #0
 8009926:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009928:	683b      	ldr	r3, [r7, #0]
 800992a:	f383 8811 	msr	BASEPRI, r3
}
 800992e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009930:	bf00      	nop
 8009932:	3708      	adds	r7, #8
 8009934:	46bd      	mov	sp, r7
 8009936:	bd80      	pop	{r7, pc}
 8009938:	e000ed04 	.word	0xe000ed04

0800993c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800993c:	b580      	push	{r7, lr}
 800993e:	b08a      	sub	sp, #40	@ 0x28
 8009940:	af00      	add	r7, sp, #0
 8009942:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009944:	2300      	movs	r3, #0
 8009946:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009948:	f7ff fce8 	bl	800931c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800994c:	4b5c      	ldr	r3, [pc, #368]	@ (8009ac0 <pvPortMalloc+0x184>)
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	2b00      	cmp	r3, #0
 8009952:	d101      	bne.n	8009958 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009954:	f000 f8c0 	bl	8009ad8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009958:	4b5a      	ldr	r3, [pc, #360]	@ (8009ac4 <pvPortMalloc+0x188>)
 800995a:	681a      	ldr	r2, [r3, #0]
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	4013      	ands	r3, r2
 8009960:	2b00      	cmp	r3, #0
 8009962:	f040 8095 	bne.w	8009a90 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	2b00      	cmp	r3, #0
 800996a:	d01e      	beq.n	80099aa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800996c:	2208      	movs	r2, #8
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	4413      	add	r3, r2
 8009972:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	f003 0307 	and.w	r3, r3, #7
 800997a:	2b00      	cmp	r3, #0
 800997c:	d015      	beq.n	80099aa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	f023 0307 	bic.w	r3, r3, #7
 8009984:	3308      	adds	r3, #8
 8009986:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	f003 0307 	and.w	r3, r3, #7
 800998e:	2b00      	cmp	r3, #0
 8009990:	d00b      	beq.n	80099aa <pvPortMalloc+0x6e>
	__asm volatile
 8009992:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009996:	f383 8811 	msr	BASEPRI, r3
 800999a:	f3bf 8f6f 	isb	sy
 800999e:	f3bf 8f4f 	dsb	sy
 80099a2:	617b      	str	r3, [r7, #20]
}
 80099a4:	bf00      	nop
 80099a6:	bf00      	nop
 80099a8:	e7fd      	b.n	80099a6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d06f      	beq.n	8009a90 <pvPortMalloc+0x154>
 80099b0:	4b45      	ldr	r3, [pc, #276]	@ (8009ac8 <pvPortMalloc+0x18c>)
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	687a      	ldr	r2, [r7, #4]
 80099b6:	429a      	cmp	r2, r3
 80099b8:	d86a      	bhi.n	8009a90 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80099ba:	4b44      	ldr	r3, [pc, #272]	@ (8009acc <pvPortMalloc+0x190>)
 80099bc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80099be:	4b43      	ldr	r3, [pc, #268]	@ (8009acc <pvPortMalloc+0x190>)
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80099c4:	e004      	b.n	80099d0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80099c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099c8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80099ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80099d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099d2:	685b      	ldr	r3, [r3, #4]
 80099d4:	687a      	ldr	r2, [r7, #4]
 80099d6:	429a      	cmp	r2, r3
 80099d8:	d903      	bls.n	80099e2 <pvPortMalloc+0xa6>
 80099da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d1f1      	bne.n	80099c6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80099e2:	4b37      	ldr	r3, [pc, #220]	@ (8009ac0 <pvPortMalloc+0x184>)
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80099e8:	429a      	cmp	r2, r3
 80099ea:	d051      	beq.n	8009a90 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80099ec:	6a3b      	ldr	r3, [r7, #32]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	2208      	movs	r2, #8
 80099f2:	4413      	add	r3, r2
 80099f4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80099f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099f8:	681a      	ldr	r2, [r3, #0]
 80099fa:	6a3b      	ldr	r3, [r7, #32]
 80099fc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80099fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a00:	685a      	ldr	r2, [r3, #4]
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	1ad2      	subs	r2, r2, r3
 8009a06:	2308      	movs	r3, #8
 8009a08:	005b      	lsls	r3, r3, #1
 8009a0a:	429a      	cmp	r2, r3
 8009a0c:	d920      	bls.n	8009a50 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009a0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	4413      	add	r3, r2
 8009a14:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009a16:	69bb      	ldr	r3, [r7, #24]
 8009a18:	f003 0307 	and.w	r3, r3, #7
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d00b      	beq.n	8009a38 <pvPortMalloc+0xfc>
	__asm volatile
 8009a20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a24:	f383 8811 	msr	BASEPRI, r3
 8009a28:	f3bf 8f6f 	isb	sy
 8009a2c:	f3bf 8f4f 	dsb	sy
 8009a30:	613b      	str	r3, [r7, #16]
}
 8009a32:	bf00      	nop
 8009a34:	bf00      	nop
 8009a36:	e7fd      	b.n	8009a34 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009a38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a3a:	685a      	ldr	r2, [r3, #4]
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	1ad2      	subs	r2, r2, r3
 8009a40:	69bb      	ldr	r3, [r7, #24]
 8009a42:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009a44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a46:	687a      	ldr	r2, [r7, #4]
 8009a48:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009a4a:	69b8      	ldr	r0, [r7, #24]
 8009a4c:	f000 f8a6 	bl	8009b9c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009a50:	4b1d      	ldr	r3, [pc, #116]	@ (8009ac8 <pvPortMalloc+0x18c>)
 8009a52:	681a      	ldr	r2, [r3, #0]
 8009a54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a56:	685b      	ldr	r3, [r3, #4]
 8009a58:	1ad3      	subs	r3, r2, r3
 8009a5a:	4a1b      	ldr	r2, [pc, #108]	@ (8009ac8 <pvPortMalloc+0x18c>)
 8009a5c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009a5e:	4b1a      	ldr	r3, [pc, #104]	@ (8009ac8 <pvPortMalloc+0x18c>)
 8009a60:	681a      	ldr	r2, [r3, #0]
 8009a62:	4b1b      	ldr	r3, [pc, #108]	@ (8009ad0 <pvPortMalloc+0x194>)
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	429a      	cmp	r2, r3
 8009a68:	d203      	bcs.n	8009a72 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009a6a:	4b17      	ldr	r3, [pc, #92]	@ (8009ac8 <pvPortMalloc+0x18c>)
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	4a18      	ldr	r2, [pc, #96]	@ (8009ad0 <pvPortMalloc+0x194>)
 8009a70:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a74:	685a      	ldr	r2, [r3, #4]
 8009a76:	4b13      	ldr	r3, [pc, #76]	@ (8009ac4 <pvPortMalloc+0x188>)
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	431a      	orrs	r2, r3
 8009a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a7e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a82:	2200      	movs	r2, #0
 8009a84:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009a86:	4b13      	ldr	r3, [pc, #76]	@ (8009ad4 <pvPortMalloc+0x198>)
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	3301      	adds	r3, #1
 8009a8c:	4a11      	ldr	r2, [pc, #68]	@ (8009ad4 <pvPortMalloc+0x198>)
 8009a8e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009a90:	f7ff fc52 	bl	8009338 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009a94:	69fb      	ldr	r3, [r7, #28]
 8009a96:	f003 0307 	and.w	r3, r3, #7
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d00b      	beq.n	8009ab6 <pvPortMalloc+0x17a>
	__asm volatile
 8009a9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009aa2:	f383 8811 	msr	BASEPRI, r3
 8009aa6:	f3bf 8f6f 	isb	sy
 8009aaa:	f3bf 8f4f 	dsb	sy
 8009aae:	60fb      	str	r3, [r7, #12]
}
 8009ab0:	bf00      	nop
 8009ab2:	bf00      	nop
 8009ab4:	e7fd      	b.n	8009ab2 <pvPortMalloc+0x176>
	return pvReturn;
 8009ab6:	69fb      	ldr	r3, [r7, #28]
}
 8009ab8:	4618      	mov	r0, r3
 8009aba:	3728      	adds	r7, #40	@ 0x28
 8009abc:	46bd      	mov	sp, r7
 8009abe:	bd80      	pop	{r7, pc}
 8009ac0:	24003f80 	.word	0x24003f80
 8009ac4:	24003f90 	.word	0x24003f90
 8009ac8:	24003f84 	.word	0x24003f84
 8009acc:	24003f78 	.word	0x24003f78
 8009ad0:	24003f88 	.word	0x24003f88
 8009ad4:	24003f8c 	.word	0x24003f8c

08009ad8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009ad8:	b480      	push	{r7}
 8009ada:	b085      	sub	sp, #20
 8009adc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009ade:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8009ae2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009ae4:	4b27      	ldr	r3, [pc, #156]	@ (8009b84 <prvHeapInit+0xac>)
 8009ae6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	f003 0307 	and.w	r3, r3, #7
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d00c      	beq.n	8009b0c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	3307      	adds	r3, #7
 8009af6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	f023 0307 	bic.w	r3, r3, #7
 8009afe:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009b00:	68ba      	ldr	r2, [r7, #8]
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	1ad3      	subs	r3, r2, r3
 8009b06:	4a1f      	ldr	r2, [pc, #124]	@ (8009b84 <prvHeapInit+0xac>)
 8009b08:	4413      	add	r3, r2
 8009b0a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009b10:	4a1d      	ldr	r2, [pc, #116]	@ (8009b88 <prvHeapInit+0xb0>)
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009b16:	4b1c      	ldr	r3, [pc, #112]	@ (8009b88 <prvHeapInit+0xb0>)
 8009b18:	2200      	movs	r2, #0
 8009b1a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	68ba      	ldr	r2, [r7, #8]
 8009b20:	4413      	add	r3, r2
 8009b22:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009b24:	2208      	movs	r2, #8
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	1a9b      	subs	r3, r3, r2
 8009b2a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	f023 0307 	bic.w	r3, r3, #7
 8009b32:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	4a15      	ldr	r2, [pc, #84]	@ (8009b8c <prvHeapInit+0xb4>)
 8009b38:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009b3a:	4b14      	ldr	r3, [pc, #80]	@ (8009b8c <prvHeapInit+0xb4>)
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	2200      	movs	r2, #0
 8009b40:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009b42:	4b12      	ldr	r3, [pc, #72]	@ (8009b8c <prvHeapInit+0xb4>)
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	2200      	movs	r2, #0
 8009b48:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009b4e:	683b      	ldr	r3, [r7, #0]
 8009b50:	68fa      	ldr	r2, [r7, #12]
 8009b52:	1ad2      	subs	r2, r2, r3
 8009b54:	683b      	ldr	r3, [r7, #0]
 8009b56:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009b58:	4b0c      	ldr	r3, [pc, #48]	@ (8009b8c <prvHeapInit+0xb4>)
 8009b5a:	681a      	ldr	r2, [r3, #0]
 8009b5c:	683b      	ldr	r3, [r7, #0]
 8009b5e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009b60:	683b      	ldr	r3, [r7, #0]
 8009b62:	685b      	ldr	r3, [r3, #4]
 8009b64:	4a0a      	ldr	r2, [pc, #40]	@ (8009b90 <prvHeapInit+0xb8>)
 8009b66:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009b68:	683b      	ldr	r3, [r7, #0]
 8009b6a:	685b      	ldr	r3, [r3, #4]
 8009b6c:	4a09      	ldr	r2, [pc, #36]	@ (8009b94 <prvHeapInit+0xbc>)
 8009b6e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009b70:	4b09      	ldr	r3, [pc, #36]	@ (8009b98 <prvHeapInit+0xc0>)
 8009b72:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8009b76:	601a      	str	r2, [r3, #0]
}
 8009b78:	bf00      	nop
 8009b7a:	3714      	adds	r7, #20
 8009b7c:	46bd      	mov	sp, r7
 8009b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b82:	4770      	bx	lr
 8009b84:	24000378 	.word	0x24000378
 8009b88:	24003f78 	.word	0x24003f78
 8009b8c:	24003f80 	.word	0x24003f80
 8009b90:	24003f88 	.word	0x24003f88
 8009b94:	24003f84 	.word	0x24003f84
 8009b98:	24003f90 	.word	0x24003f90

08009b9c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009b9c:	b480      	push	{r7}
 8009b9e:	b085      	sub	sp, #20
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009ba4:	4b28      	ldr	r3, [pc, #160]	@ (8009c48 <prvInsertBlockIntoFreeList+0xac>)
 8009ba6:	60fb      	str	r3, [r7, #12]
 8009ba8:	e002      	b.n	8009bb0 <prvInsertBlockIntoFreeList+0x14>
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	60fb      	str	r3, [r7, #12]
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	687a      	ldr	r2, [r7, #4]
 8009bb6:	429a      	cmp	r2, r3
 8009bb8:	d8f7      	bhi.n	8009baa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	685b      	ldr	r3, [r3, #4]
 8009bc2:	68ba      	ldr	r2, [r7, #8]
 8009bc4:	4413      	add	r3, r2
 8009bc6:	687a      	ldr	r2, [r7, #4]
 8009bc8:	429a      	cmp	r2, r3
 8009bca:	d108      	bne.n	8009bde <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	685a      	ldr	r2, [r3, #4]
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	685b      	ldr	r3, [r3, #4]
 8009bd4:	441a      	add	r2, r3
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	685b      	ldr	r3, [r3, #4]
 8009be6:	68ba      	ldr	r2, [r7, #8]
 8009be8:	441a      	add	r2, r3
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	429a      	cmp	r2, r3
 8009bf0:	d118      	bne.n	8009c24 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	681a      	ldr	r2, [r3, #0]
 8009bf6:	4b15      	ldr	r3, [pc, #84]	@ (8009c4c <prvInsertBlockIntoFreeList+0xb0>)
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	429a      	cmp	r2, r3
 8009bfc:	d00d      	beq.n	8009c1a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	685a      	ldr	r2, [r3, #4]
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	685b      	ldr	r3, [r3, #4]
 8009c08:	441a      	add	r2, r3
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	681a      	ldr	r2, [r3, #0]
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	601a      	str	r2, [r3, #0]
 8009c18:	e008      	b.n	8009c2c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009c1a:	4b0c      	ldr	r3, [pc, #48]	@ (8009c4c <prvInsertBlockIntoFreeList+0xb0>)
 8009c1c:	681a      	ldr	r2, [r3, #0]
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	601a      	str	r2, [r3, #0]
 8009c22:	e003      	b.n	8009c2c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	681a      	ldr	r2, [r3, #0]
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009c2c:	68fa      	ldr	r2, [r7, #12]
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	429a      	cmp	r2, r3
 8009c32:	d002      	beq.n	8009c3a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	687a      	ldr	r2, [r7, #4]
 8009c38:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009c3a:	bf00      	nop
 8009c3c:	3714      	adds	r7, #20
 8009c3e:	46bd      	mov	sp, r7
 8009c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c44:	4770      	bx	lr
 8009c46:	bf00      	nop
 8009c48:	24003f78 	.word	0x24003f78
 8009c4c:	24003f80 	.word	0x24003f80

08009c50 <malloc>:
 8009c50:	4b02      	ldr	r3, [pc, #8]	@ (8009c5c <malloc+0xc>)
 8009c52:	4601      	mov	r1, r0
 8009c54:	6818      	ldr	r0, [r3, #0]
 8009c56:	f000 b825 	b.w	8009ca4 <_malloc_r>
 8009c5a:	bf00      	nop
 8009c5c:	24000014 	.word	0x24000014

08009c60 <sbrk_aligned>:
 8009c60:	b570      	push	{r4, r5, r6, lr}
 8009c62:	4e0f      	ldr	r6, [pc, #60]	@ (8009ca0 <sbrk_aligned+0x40>)
 8009c64:	460c      	mov	r4, r1
 8009c66:	6831      	ldr	r1, [r6, #0]
 8009c68:	4605      	mov	r5, r0
 8009c6a:	b911      	cbnz	r1, 8009c72 <sbrk_aligned+0x12>
 8009c6c:	f000 f8ae 	bl	8009dcc <_sbrk_r>
 8009c70:	6030      	str	r0, [r6, #0]
 8009c72:	4621      	mov	r1, r4
 8009c74:	4628      	mov	r0, r5
 8009c76:	f000 f8a9 	bl	8009dcc <_sbrk_r>
 8009c7a:	1c43      	adds	r3, r0, #1
 8009c7c:	d103      	bne.n	8009c86 <sbrk_aligned+0x26>
 8009c7e:	f04f 34ff 	mov.w	r4, #4294967295
 8009c82:	4620      	mov	r0, r4
 8009c84:	bd70      	pop	{r4, r5, r6, pc}
 8009c86:	1cc4      	adds	r4, r0, #3
 8009c88:	f024 0403 	bic.w	r4, r4, #3
 8009c8c:	42a0      	cmp	r0, r4
 8009c8e:	d0f8      	beq.n	8009c82 <sbrk_aligned+0x22>
 8009c90:	1a21      	subs	r1, r4, r0
 8009c92:	4628      	mov	r0, r5
 8009c94:	f000 f89a 	bl	8009dcc <_sbrk_r>
 8009c98:	3001      	adds	r0, #1
 8009c9a:	d1f2      	bne.n	8009c82 <sbrk_aligned+0x22>
 8009c9c:	e7ef      	b.n	8009c7e <sbrk_aligned+0x1e>
 8009c9e:	bf00      	nop
 8009ca0:	24003f94 	.word	0x24003f94

08009ca4 <_malloc_r>:
 8009ca4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ca8:	1ccd      	adds	r5, r1, #3
 8009caa:	f025 0503 	bic.w	r5, r5, #3
 8009cae:	3508      	adds	r5, #8
 8009cb0:	2d0c      	cmp	r5, #12
 8009cb2:	bf38      	it	cc
 8009cb4:	250c      	movcc	r5, #12
 8009cb6:	2d00      	cmp	r5, #0
 8009cb8:	4606      	mov	r6, r0
 8009cba:	db01      	blt.n	8009cc0 <_malloc_r+0x1c>
 8009cbc:	42a9      	cmp	r1, r5
 8009cbe:	d904      	bls.n	8009cca <_malloc_r+0x26>
 8009cc0:	230c      	movs	r3, #12
 8009cc2:	6033      	str	r3, [r6, #0]
 8009cc4:	2000      	movs	r0, #0
 8009cc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009cca:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009da0 <_malloc_r+0xfc>
 8009cce:	f000 f869 	bl	8009da4 <__malloc_lock>
 8009cd2:	f8d8 3000 	ldr.w	r3, [r8]
 8009cd6:	461c      	mov	r4, r3
 8009cd8:	bb44      	cbnz	r4, 8009d2c <_malloc_r+0x88>
 8009cda:	4629      	mov	r1, r5
 8009cdc:	4630      	mov	r0, r6
 8009cde:	f7ff ffbf 	bl	8009c60 <sbrk_aligned>
 8009ce2:	1c43      	adds	r3, r0, #1
 8009ce4:	4604      	mov	r4, r0
 8009ce6:	d158      	bne.n	8009d9a <_malloc_r+0xf6>
 8009ce8:	f8d8 4000 	ldr.w	r4, [r8]
 8009cec:	4627      	mov	r7, r4
 8009cee:	2f00      	cmp	r7, #0
 8009cf0:	d143      	bne.n	8009d7a <_malloc_r+0xd6>
 8009cf2:	2c00      	cmp	r4, #0
 8009cf4:	d04b      	beq.n	8009d8e <_malloc_r+0xea>
 8009cf6:	6823      	ldr	r3, [r4, #0]
 8009cf8:	4639      	mov	r1, r7
 8009cfa:	4630      	mov	r0, r6
 8009cfc:	eb04 0903 	add.w	r9, r4, r3
 8009d00:	f000 f864 	bl	8009dcc <_sbrk_r>
 8009d04:	4581      	cmp	r9, r0
 8009d06:	d142      	bne.n	8009d8e <_malloc_r+0xea>
 8009d08:	6821      	ldr	r1, [r4, #0]
 8009d0a:	1a6d      	subs	r5, r5, r1
 8009d0c:	4629      	mov	r1, r5
 8009d0e:	4630      	mov	r0, r6
 8009d10:	f7ff ffa6 	bl	8009c60 <sbrk_aligned>
 8009d14:	3001      	adds	r0, #1
 8009d16:	d03a      	beq.n	8009d8e <_malloc_r+0xea>
 8009d18:	6823      	ldr	r3, [r4, #0]
 8009d1a:	442b      	add	r3, r5
 8009d1c:	6023      	str	r3, [r4, #0]
 8009d1e:	f8d8 3000 	ldr.w	r3, [r8]
 8009d22:	685a      	ldr	r2, [r3, #4]
 8009d24:	bb62      	cbnz	r2, 8009d80 <_malloc_r+0xdc>
 8009d26:	f8c8 7000 	str.w	r7, [r8]
 8009d2a:	e00f      	b.n	8009d4c <_malloc_r+0xa8>
 8009d2c:	6822      	ldr	r2, [r4, #0]
 8009d2e:	1b52      	subs	r2, r2, r5
 8009d30:	d420      	bmi.n	8009d74 <_malloc_r+0xd0>
 8009d32:	2a0b      	cmp	r2, #11
 8009d34:	d917      	bls.n	8009d66 <_malloc_r+0xc2>
 8009d36:	1961      	adds	r1, r4, r5
 8009d38:	42a3      	cmp	r3, r4
 8009d3a:	6025      	str	r5, [r4, #0]
 8009d3c:	bf18      	it	ne
 8009d3e:	6059      	strne	r1, [r3, #4]
 8009d40:	6863      	ldr	r3, [r4, #4]
 8009d42:	bf08      	it	eq
 8009d44:	f8c8 1000 	streq.w	r1, [r8]
 8009d48:	5162      	str	r2, [r4, r5]
 8009d4a:	604b      	str	r3, [r1, #4]
 8009d4c:	4630      	mov	r0, r6
 8009d4e:	f000 f82f 	bl	8009db0 <__malloc_unlock>
 8009d52:	f104 000b 	add.w	r0, r4, #11
 8009d56:	1d23      	adds	r3, r4, #4
 8009d58:	f020 0007 	bic.w	r0, r0, #7
 8009d5c:	1ac2      	subs	r2, r0, r3
 8009d5e:	bf1c      	itt	ne
 8009d60:	1a1b      	subne	r3, r3, r0
 8009d62:	50a3      	strne	r3, [r4, r2]
 8009d64:	e7af      	b.n	8009cc6 <_malloc_r+0x22>
 8009d66:	6862      	ldr	r2, [r4, #4]
 8009d68:	42a3      	cmp	r3, r4
 8009d6a:	bf0c      	ite	eq
 8009d6c:	f8c8 2000 	streq.w	r2, [r8]
 8009d70:	605a      	strne	r2, [r3, #4]
 8009d72:	e7eb      	b.n	8009d4c <_malloc_r+0xa8>
 8009d74:	4623      	mov	r3, r4
 8009d76:	6864      	ldr	r4, [r4, #4]
 8009d78:	e7ae      	b.n	8009cd8 <_malloc_r+0x34>
 8009d7a:	463c      	mov	r4, r7
 8009d7c:	687f      	ldr	r7, [r7, #4]
 8009d7e:	e7b6      	b.n	8009cee <_malloc_r+0x4a>
 8009d80:	461a      	mov	r2, r3
 8009d82:	685b      	ldr	r3, [r3, #4]
 8009d84:	42a3      	cmp	r3, r4
 8009d86:	d1fb      	bne.n	8009d80 <_malloc_r+0xdc>
 8009d88:	2300      	movs	r3, #0
 8009d8a:	6053      	str	r3, [r2, #4]
 8009d8c:	e7de      	b.n	8009d4c <_malloc_r+0xa8>
 8009d8e:	230c      	movs	r3, #12
 8009d90:	6033      	str	r3, [r6, #0]
 8009d92:	4630      	mov	r0, r6
 8009d94:	f000 f80c 	bl	8009db0 <__malloc_unlock>
 8009d98:	e794      	b.n	8009cc4 <_malloc_r+0x20>
 8009d9a:	6005      	str	r5, [r0, #0]
 8009d9c:	e7d6      	b.n	8009d4c <_malloc_r+0xa8>
 8009d9e:	bf00      	nop
 8009da0:	24003f98 	.word	0x24003f98

08009da4 <__malloc_lock>:
 8009da4:	4801      	ldr	r0, [pc, #4]	@ (8009dac <__malloc_lock+0x8>)
 8009da6:	f000 b84b 	b.w	8009e40 <__retarget_lock_acquire_recursive>
 8009daa:	bf00      	nop
 8009dac:	240040d8 	.word	0x240040d8

08009db0 <__malloc_unlock>:
 8009db0:	4801      	ldr	r0, [pc, #4]	@ (8009db8 <__malloc_unlock+0x8>)
 8009db2:	f000 b846 	b.w	8009e42 <__retarget_lock_release_recursive>
 8009db6:	bf00      	nop
 8009db8:	240040d8 	.word	0x240040d8

08009dbc <memset>:
 8009dbc:	4402      	add	r2, r0
 8009dbe:	4603      	mov	r3, r0
 8009dc0:	4293      	cmp	r3, r2
 8009dc2:	d100      	bne.n	8009dc6 <memset+0xa>
 8009dc4:	4770      	bx	lr
 8009dc6:	f803 1b01 	strb.w	r1, [r3], #1
 8009dca:	e7f9      	b.n	8009dc0 <memset+0x4>

08009dcc <_sbrk_r>:
 8009dcc:	b538      	push	{r3, r4, r5, lr}
 8009dce:	4d06      	ldr	r5, [pc, #24]	@ (8009de8 <_sbrk_r+0x1c>)
 8009dd0:	2300      	movs	r3, #0
 8009dd2:	4604      	mov	r4, r0
 8009dd4:	4608      	mov	r0, r1
 8009dd6:	602b      	str	r3, [r5, #0]
 8009dd8:	f7f6 ff4a 	bl	8000c70 <_sbrk>
 8009ddc:	1c43      	adds	r3, r0, #1
 8009dde:	d102      	bne.n	8009de6 <_sbrk_r+0x1a>
 8009de0:	682b      	ldr	r3, [r5, #0]
 8009de2:	b103      	cbz	r3, 8009de6 <_sbrk_r+0x1a>
 8009de4:	6023      	str	r3, [r4, #0]
 8009de6:	bd38      	pop	{r3, r4, r5, pc}
 8009de8:	240040d4 	.word	0x240040d4

08009dec <__errno>:
 8009dec:	4b01      	ldr	r3, [pc, #4]	@ (8009df4 <__errno+0x8>)
 8009dee:	6818      	ldr	r0, [r3, #0]
 8009df0:	4770      	bx	lr
 8009df2:	bf00      	nop
 8009df4:	24000014 	.word	0x24000014

08009df8 <__libc_init_array>:
 8009df8:	b570      	push	{r4, r5, r6, lr}
 8009dfa:	4d0d      	ldr	r5, [pc, #52]	@ (8009e30 <__libc_init_array+0x38>)
 8009dfc:	4c0d      	ldr	r4, [pc, #52]	@ (8009e34 <__libc_init_array+0x3c>)
 8009dfe:	1b64      	subs	r4, r4, r5
 8009e00:	10a4      	asrs	r4, r4, #2
 8009e02:	2600      	movs	r6, #0
 8009e04:	42a6      	cmp	r6, r4
 8009e06:	d109      	bne.n	8009e1c <__libc_init_array+0x24>
 8009e08:	4d0b      	ldr	r5, [pc, #44]	@ (8009e38 <__libc_init_array+0x40>)
 8009e0a:	4c0c      	ldr	r4, [pc, #48]	@ (8009e3c <__libc_init_array+0x44>)
 8009e0c:	f000 f828 	bl	8009e60 <_init>
 8009e10:	1b64      	subs	r4, r4, r5
 8009e12:	10a4      	asrs	r4, r4, #2
 8009e14:	2600      	movs	r6, #0
 8009e16:	42a6      	cmp	r6, r4
 8009e18:	d105      	bne.n	8009e26 <__libc_init_array+0x2e>
 8009e1a:	bd70      	pop	{r4, r5, r6, pc}
 8009e1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e20:	4798      	blx	r3
 8009e22:	3601      	adds	r6, #1
 8009e24:	e7ee      	b.n	8009e04 <__libc_init_array+0xc>
 8009e26:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e2a:	4798      	blx	r3
 8009e2c:	3601      	adds	r6, #1
 8009e2e:	e7f2      	b.n	8009e16 <__libc_init_array+0x1e>
 8009e30:	08009ecc 	.word	0x08009ecc
 8009e34:	08009ecc 	.word	0x08009ecc
 8009e38:	08009ecc 	.word	0x08009ecc
 8009e3c:	08009ed0 	.word	0x08009ed0

08009e40 <__retarget_lock_acquire_recursive>:
 8009e40:	4770      	bx	lr

08009e42 <__retarget_lock_release_recursive>:
 8009e42:	4770      	bx	lr

08009e44 <memcpy>:
 8009e44:	440a      	add	r2, r1
 8009e46:	4291      	cmp	r1, r2
 8009e48:	f100 33ff 	add.w	r3, r0, #4294967295
 8009e4c:	d100      	bne.n	8009e50 <memcpy+0xc>
 8009e4e:	4770      	bx	lr
 8009e50:	b510      	push	{r4, lr}
 8009e52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009e56:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009e5a:	4291      	cmp	r1, r2
 8009e5c:	d1f9      	bne.n	8009e52 <memcpy+0xe>
 8009e5e:	bd10      	pop	{r4, pc}

08009e60 <_init>:
 8009e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e62:	bf00      	nop
 8009e64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e66:	bc08      	pop	{r3}
 8009e68:	469e      	mov	lr, r3
 8009e6a:	4770      	bx	lr

08009e6c <_fini>:
 8009e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e6e:	bf00      	nop
 8009e70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e72:	bc08      	pop	{r3}
 8009e74:	469e      	mov	lr, r3
 8009e76:	4770      	bx	lr
