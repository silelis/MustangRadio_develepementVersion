
I2C_DMA_testes.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bd7c  080002b0  080002b0  000012b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  0800c02c  0800c02c  0000d02c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800c0a8  0800c0a8  0000d0a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800c0b0  0800c0b0  0000d0b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800c0b4  0800c0b4  0000d0b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000064  24000000  0800c0b8  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000433c  24000064  0800c11c  0000e064  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240043a0  0800c11c  0000e3a0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000e064  2**0
                  CONTENTS, READONLY
 10 .debug_info   00021ac7  00000000  00000000  0000e092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004496  00000000  00000000  0002fb59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001a08  00000000  00000000  00033ff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000144b  00000000  00000000  000359f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00033726  00000000  00000000  00036e43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00024f47  00000000  00000000  0006a569  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00149410  00000000  00000000  0008f4b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001d88c0  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000704c  00000000  00000000  001d8904  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000008f  00000000  00000000  001df950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	@ (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	@ (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000064 	.word	0x24000064
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0800c014 	.word	0x0800c014

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	@ (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	@ (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	@ (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000068 	.word	0x24000068
 80002ec:	0800c014 	.word	0x0800c014

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96a 	b.w	80005dc <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	460c      	mov	r4, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14e      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032c:	4694      	mov	ip, r2
 800032e:	458c      	cmp	ip, r1
 8000330:	4686      	mov	lr, r0
 8000332:	fab2 f282 	clz	r2, r2
 8000336:	d962      	bls.n	80003fe <__udivmoddi4+0xde>
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0320 	rsb	r3, r2, #32
 800033e:	4091      	lsls	r1, r2
 8000340:	fa20 f303 	lsr.w	r3, r0, r3
 8000344:	fa0c fc02 	lsl.w	ip, ip, r2
 8000348:	4319      	orrs	r1, r3
 800034a:	fa00 fe02 	lsl.w	lr, r0, r2
 800034e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000352:	fa1f f68c 	uxth.w	r6, ip
 8000356:	fbb1 f4f7 	udiv	r4, r1, r7
 800035a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035e:	fb07 1114 	mls	r1, r7, r4, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb04 f106 	mul.w	r1, r4, r6
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f104 30ff 	add.w	r0, r4, #4294967295
 8000376:	f080 8112 	bcs.w	800059e <__udivmoddi4+0x27e>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 810f 	bls.w	800059e <__udivmoddi4+0x27e>
 8000380:	3c02      	subs	r4, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a59      	subs	r1, r3, r1
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb1 f0f7 	udiv	r0, r1, r7
 800038e:	fb07 1110 	mls	r1, r7, r0, r1
 8000392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000396:	fb00 f606 	mul.w	r6, r0, r6
 800039a:	429e      	cmp	r6, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x94>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003a6:	f080 80fc 	bcs.w	80005a2 <__udivmoddi4+0x282>
 80003aa:	429e      	cmp	r6, r3
 80003ac:	f240 80f9 	bls.w	80005a2 <__udivmoddi4+0x282>
 80003b0:	4463      	add	r3, ip
 80003b2:	3802      	subs	r0, #2
 80003b4:	1b9b      	subs	r3, r3, r6
 80003b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ba:	2100      	movs	r1, #0
 80003bc:	b11d      	cbz	r5, 80003c6 <__udivmoddi4+0xa6>
 80003be:	40d3      	lsrs	r3, r2
 80003c0:	2200      	movs	r2, #0
 80003c2:	e9c5 3200 	strd	r3, r2, [r5]
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d905      	bls.n	80003da <__udivmoddi4+0xba>
 80003ce:	b10d      	cbz	r5, 80003d4 <__udivmoddi4+0xb4>
 80003d0:	e9c5 0100 	strd	r0, r1, [r5]
 80003d4:	2100      	movs	r1, #0
 80003d6:	4608      	mov	r0, r1
 80003d8:	e7f5      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003da:	fab3 f183 	clz	r1, r3
 80003de:	2900      	cmp	r1, #0
 80003e0:	d146      	bne.n	8000470 <__udivmoddi4+0x150>
 80003e2:	42a3      	cmp	r3, r4
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xcc>
 80003e6:	4290      	cmp	r0, r2
 80003e8:	f0c0 80f0 	bcc.w	80005cc <__udivmoddi4+0x2ac>
 80003ec:	1a86      	subs	r6, r0, r2
 80003ee:	eb64 0303 	sbc.w	r3, r4, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	2d00      	cmp	r5, #0
 80003f6:	d0e6      	beq.n	80003c6 <__udivmoddi4+0xa6>
 80003f8:	e9c5 6300 	strd	r6, r3, [r5]
 80003fc:	e7e3      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003fe:	2a00      	cmp	r2, #0
 8000400:	f040 8090 	bne.w	8000524 <__udivmoddi4+0x204>
 8000404:	eba1 040c 	sub.w	r4, r1, ip
 8000408:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800040c:	fa1f f78c 	uxth.w	r7, ip
 8000410:	2101      	movs	r1, #1
 8000412:	fbb4 f6f8 	udiv	r6, r4, r8
 8000416:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041a:	fb08 4416 	mls	r4, r8, r6, r4
 800041e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000422:	fb07 f006 	mul.w	r0, r7, r6
 8000426:	4298      	cmp	r0, r3
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x11c>
 800042a:	eb1c 0303 	adds.w	r3, ip, r3
 800042e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x11a>
 8000434:	4298      	cmp	r0, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 800043a:	4626      	mov	r6, r4
 800043c:	1a1c      	subs	r4, r3, r0
 800043e:	fa1f f38e 	uxth.w	r3, lr
 8000442:	fbb4 f0f8 	udiv	r0, r4, r8
 8000446:	fb08 4410 	mls	r4, r8, r0, r4
 800044a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044e:	fb00 f707 	mul.w	r7, r0, r7
 8000452:	429f      	cmp	r7, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x148>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 34ff 	add.w	r4, r0, #4294967295
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x146>
 8000460:	429f      	cmp	r7, r3
 8000462:	f200 80b0 	bhi.w	80005c6 <__udivmoddi4+0x2a6>
 8000466:	4620      	mov	r0, r4
 8000468:	1bdb      	subs	r3, r3, r7
 800046a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046e:	e7a5      	b.n	80003bc <__udivmoddi4+0x9c>
 8000470:	f1c1 0620 	rsb	r6, r1, #32
 8000474:	408b      	lsls	r3, r1
 8000476:	fa22 f706 	lsr.w	r7, r2, r6
 800047a:	431f      	orrs	r7, r3
 800047c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000480:	fa04 f301 	lsl.w	r3, r4, r1
 8000484:	ea43 030c 	orr.w	r3, r3, ip
 8000488:	40f4      	lsrs	r4, r6
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	0c38      	lsrs	r0, r7, #16
 8000490:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000494:	fbb4 fef0 	udiv	lr, r4, r0
 8000498:	fa1f fc87 	uxth.w	ip, r7
 800049c:	fb00 441e 	mls	r4, r0, lr, r4
 80004a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a4:	fb0e f90c 	mul.w	r9, lr, ip
 80004a8:	45a1      	cmp	r9, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	d90a      	bls.n	80004c6 <__udivmoddi4+0x1a6>
 80004b0:	193c      	adds	r4, r7, r4
 80004b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004b6:	f080 8084 	bcs.w	80005c2 <__udivmoddi4+0x2a2>
 80004ba:	45a1      	cmp	r9, r4
 80004bc:	f240 8081 	bls.w	80005c2 <__udivmoddi4+0x2a2>
 80004c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	eba4 0409 	sub.w	r4, r4, r9
 80004ca:	fa1f f983 	uxth.w	r9, r3
 80004ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80004d2:	fb00 4413 	mls	r4, r0, r3, r4
 80004d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004da:	fb03 fc0c 	mul.w	ip, r3, ip
 80004de:	45a4      	cmp	ip, r4
 80004e0:	d907      	bls.n	80004f2 <__udivmoddi4+0x1d2>
 80004e2:	193c      	adds	r4, r7, r4
 80004e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004e8:	d267      	bcs.n	80005ba <__udivmoddi4+0x29a>
 80004ea:	45a4      	cmp	ip, r4
 80004ec:	d965      	bls.n	80005ba <__udivmoddi4+0x29a>
 80004ee:	3b02      	subs	r3, #2
 80004f0:	443c      	add	r4, r7
 80004f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f6:	fba0 9302 	umull	r9, r3, r0, r2
 80004fa:	eba4 040c 	sub.w	r4, r4, ip
 80004fe:	429c      	cmp	r4, r3
 8000500:	46ce      	mov	lr, r9
 8000502:	469c      	mov	ip, r3
 8000504:	d351      	bcc.n	80005aa <__udivmoddi4+0x28a>
 8000506:	d04e      	beq.n	80005a6 <__udivmoddi4+0x286>
 8000508:	b155      	cbz	r5, 8000520 <__udivmoddi4+0x200>
 800050a:	ebb8 030e 	subs.w	r3, r8, lr
 800050e:	eb64 040c 	sbc.w	r4, r4, ip
 8000512:	fa04 f606 	lsl.w	r6, r4, r6
 8000516:	40cb      	lsrs	r3, r1
 8000518:	431e      	orrs	r6, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	e9c5 6400 	strd	r6, r4, [r5]
 8000520:	2100      	movs	r1, #0
 8000522:	e750      	b.n	80003c6 <__udivmoddi4+0xa6>
 8000524:	f1c2 0320 	rsb	r3, r2, #32
 8000528:	fa20 f103 	lsr.w	r1, r0, r3
 800052c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000530:	fa24 f303 	lsr.w	r3, r4, r3
 8000534:	4094      	lsls	r4, r2
 8000536:	430c      	orrs	r4, r1
 8000538:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800053c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000540:	fa1f f78c 	uxth.w	r7, ip
 8000544:	fbb3 f0f8 	udiv	r0, r3, r8
 8000548:	fb08 3110 	mls	r1, r8, r0, r3
 800054c:	0c23      	lsrs	r3, r4, #16
 800054e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000552:	fb00 f107 	mul.w	r1, r0, r7
 8000556:	4299      	cmp	r1, r3
 8000558:	d908      	bls.n	800056c <__udivmoddi4+0x24c>
 800055a:	eb1c 0303 	adds.w	r3, ip, r3
 800055e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000562:	d22c      	bcs.n	80005be <__udivmoddi4+0x29e>
 8000564:	4299      	cmp	r1, r3
 8000566:	d92a      	bls.n	80005be <__udivmoddi4+0x29e>
 8000568:	3802      	subs	r0, #2
 800056a:	4463      	add	r3, ip
 800056c:	1a5b      	subs	r3, r3, r1
 800056e:	b2a4      	uxth	r4, r4
 8000570:	fbb3 f1f8 	udiv	r1, r3, r8
 8000574:	fb08 3311 	mls	r3, r8, r1, r3
 8000578:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800057c:	fb01 f307 	mul.w	r3, r1, r7
 8000580:	42a3      	cmp	r3, r4
 8000582:	d908      	bls.n	8000596 <__udivmoddi4+0x276>
 8000584:	eb1c 0404 	adds.w	r4, ip, r4
 8000588:	f101 36ff 	add.w	r6, r1, #4294967295
 800058c:	d213      	bcs.n	80005b6 <__udivmoddi4+0x296>
 800058e:	42a3      	cmp	r3, r4
 8000590:	d911      	bls.n	80005b6 <__udivmoddi4+0x296>
 8000592:	3902      	subs	r1, #2
 8000594:	4464      	add	r4, ip
 8000596:	1ae4      	subs	r4, r4, r3
 8000598:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800059c:	e739      	b.n	8000412 <__udivmoddi4+0xf2>
 800059e:	4604      	mov	r4, r0
 80005a0:	e6f0      	b.n	8000384 <__udivmoddi4+0x64>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e706      	b.n	80003b4 <__udivmoddi4+0x94>
 80005a6:	45c8      	cmp	r8, r9
 80005a8:	d2ae      	bcs.n	8000508 <__udivmoddi4+0x1e8>
 80005aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80005b2:	3801      	subs	r0, #1
 80005b4:	e7a8      	b.n	8000508 <__udivmoddi4+0x1e8>
 80005b6:	4631      	mov	r1, r6
 80005b8:	e7ed      	b.n	8000596 <__udivmoddi4+0x276>
 80005ba:	4603      	mov	r3, r0
 80005bc:	e799      	b.n	80004f2 <__udivmoddi4+0x1d2>
 80005be:	4630      	mov	r0, r6
 80005c0:	e7d4      	b.n	800056c <__udivmoddi4+0x24c>
 80005c2:	46d6      	mov	lr, sl
 80005c4:	e77f      	b.n	80004c6 <__udivmoddi4+0x1a6>
 80005c6:	4463      	add	r3, ip
 80005c8:	3802      	subs	r0, #2
 80005ca:	e74d      	b.n	8000468 <__udivmoddi4+0x148>
 80005cc:	4606      	mov	r6, r0
 80005ce:	4623      	mov	r3, r4
 80005d0:	4608      	mov	r0, r1
 80005d2:	e70f      	b.n	80003f4 <__udivmoddi4+0xd4>
 80005d4:	3e02      	subs	r6, #2
 80005d6:	4463      	add	r3, ip
 80005d8:	e730      	b.n	800043c <__udivmoddi4+0x11c>
 80005da:	bf00      	nop

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005e6:	4b11      	ldr	r3, [pc, #68]	@ (800062c <MX_DMA_Init+0x4c>)
 80005e8:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 80005ec:	4a0f      	ldr	r2, [pc, #60]	@ (800062c <MX_DMA_Init+0x4c>)
 80005ee:	f043 0301 	orr.w	r3, r3, #1
 80005f2:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 80005f6:	4b0d      	ldr	r3, [pc, #52]	@ (800062c <MX_DMA_Init+0x4c>)
 80005f8:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 80005fc:	f003 0301 	and.w	r3, r3, #1
 8000600:	607b      	str	r3, [r7, #4]
 8000602:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 1, 0);
 8000604:	2200      	movs	r2, #0
 8000606:	2101      	movs	r1, #1
 8000608:	200b      	movs	r0, #11
 800060a:	f000 fe11 	bl	8001230 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800060e:	200b      	movs	r0, #11
 8000610:	f000 fe28 	bl	8001264 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 1, 0);
 8000614:	2200      	movs	r2, #0
 8000616:	2101      	movs	r1, #1
 8000618:	200c      	movs	r0, #12
 800061a:	f000 fe09 	bl	8001230 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800061e:	200c      	movs	r0, #12
 8000620:	f000 fe20 	bl	8001264 <HAL_NVIC_EnableIRQ>

}
 8000624:	bf00      	nop
 8000626:	3708      	adds	r7, #8
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}
 800062c:	58024400 	.word	0x58024400

08000630 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000630:	b480      	push	{r7}
 8000632:	b085      	sub	sp, #20
 8000634:	af00      	add	r7, sp, #0
 8000636:	60f8      	str	r0, [r7, #12]
 8000638:	60b9      	str	r1, [r7, #8]
 800063a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	4a07      	ldr	r2, [pc, #28]	@ (800065c <vApplicationGetIdleTaskMemory+0x2c>)
 8000640:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000642:	68bb      	ldr	r3, [r7, #8]
 8000644:	4a06      	ldr	r2, [pc, #24]	@ (8000660 <vApplicationGetIdleTaskMemory+0x30>)
 8000646:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	2280      	movs	r2, #128	@ 0x80
 800064c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800064e:	bf00      	nop
 8000650:	3714      	adds	r7, #20
 8000652:	46bd      	mov	sp, r7
 8000654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000658:	4770      	bx	lr
 800065a:	bf00      	nop
 800065c:	24000084 	.word	0x24000084
 8000660:	240000d8 	.word	0x240000d8

08000664 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000664:	b5b0      	push	{r4, r5, r7, lr}
 8000666:	b092      	sub	sp, #72	@ 0x48
 8000668:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800066a:	4b2a      	ldr	r3, [pc, #168]	@ (8000714 <MX_FREERTOS_Init+0xb0>)
 800066c:	f107 0418 	add.w	r4, r7, #24
 8000670:	461d      	mov	r5, r3
 8000672:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000674:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000676:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800067a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800067e:	f107 0318 	add.w	r3, r7, #24
 8000682:	2100      	movs	r1, #0
 8000684:	4618      	mov	r0, r3
 8000686:	f00a f850 	bl	800a72a <osThreadCreate>
 800068a:	4603      	mov	r3, r0
 800068c:	4a22      	ldr	r2, [pc, #136]	@ (8000718 <MX_FREERTOS_Init+0xb4>)
 800068e:	6013      	str	r3, [r2, #0]
  /* add threads, ... */


  void* testBuffer;

  	QueueHandle_t handler_Queue = xQueueCreate(20, sizeof(uint8_t));
 8000690:	2200      	movs	r2, #0
 8000692:	2101      	movs	r1, #1
 8000694:	2014      	movs	r0, #20
 8000696:	f00a f9c7 	bl	800aa28 <xQueueGenericCreate>
 800069a:	6438      	str	r0, [r7, #64]	@ 0x40

  	char trash[] = "HelloABCDEF";
 800069c:	4a1f      	ldr	r2, [pc, #124]	@ (800071c <MX_FREERTOS_Init+0xb8>)
 800069e:	f107 030c 	add.w	r3, r7, #12
 80006a2:	ca07      	ldmia	r2, {r0, r1, r2}
 80006a4:	e883 0007 	stmia.w	r3, {r0, r1, r2}


  	i2cFrame_transmitQueue testTransm;

  	testTransm.slaveDevice7bitAddress = 0x3C<<1;
 80006a8:	2378      	movs	r3, #120	@ 0x78
 80006aa:	703b      	strb	r3, [r7, #0]
  	testTransm.dataSize =sizeof(trash);
 80006ac:	230c      	movs	r3, #12
 80006ae:	607b      	str	r3, [r7, #4]
  	testTransm.pData = &trash;
 80006b0:	f107 030c 	add.w	r3, r7, #12
 80006b4:	60bb      	str	r3, [r7, #8]


  	size_t bufferLenght = sizeof(testTransm.dataSize)+testTransm.dataSize;
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	3304      	adds	r3, #4
 80006ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  	testBuffer = malloc(bufferLenght);
 80006bc:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80006be:	f00b fba1 	bl	800be04 <malloc>
 80006c2:	4603      	mov	r3, r0
 80006c4:	63bb      	str	r3, [r7, #56]	@ 0x38

  	memcpy(testBuffer,&testTransm.dataSize, sizeof(testTransm.dataSize));
 80006c6:	687a      	ldr	r2, [r7, #4]
 80006c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80006ca:	601a      	str	r2, [r3, #0]
  	memcpy(testBuffer+sizeof(size_t), testTransm.pData, testTransm.dataSize);
 80006cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80006ce:	3304      	adds	r3, #4
 80006d0:	68b9      	ldr	r1, [r7, #8]
 80006d2:	687a      	ldr	r2, [r7, #4]
 80006d4:	4618      	mov	r0, r3
 80006d6:	f00b fc8f 	bl	800bff8 <memcpy>


  	while(1){
  		while(HAL_I2C_GetState(&hi2c1)!= HAL_I2C_STATE_READY){};
 80006da:	bf00      	nop
 80006dc:	4810      	ldr	r0, [pc, #64]	@ (8000720 <MX_FREERTOS_Init+0xbc>)
 80006de:	f003 fe0c 	bl	80042fa <HAL_I2C_GetState>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b20      	cmp	r3, #32
 80006e6:	d1f9      	bne.n	80006dc <MX_FREERTOS_Init+0x78>

  		HAL_StatusTypeDef retVal =HAL_I2C_Master_Transmit_DMA(&hi2c1, I2C_SLAVE_ADDRESS_ESP32<<1, (uint8_t*) testBuffer, bufferLenght);
 80006e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80006ea:	b29b      	uxth	r3, r3
 80006ec:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80006ee:	2178      	movs	r1, #120	@ 0x78
 80006f0:	480b      	ldr	r0, [pc, #44]	@ (8000720 <MX_FREERTOS_Init+0xbc>)
 80006f2:	f003 fc11 	bl	8003f18 <HAL_I2C_Master_Transmit_DMA>
 80006f6:	4603      	mov	r3, r0
 80006f8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

  		//pętla opóźniająca jest potrzebna między kolejnymi przesyłkami
  		for(uint32_t i=0; i<0xfffff; i++){
 80006fc:	2300      	movs	r3, #0
 80006fe:	647b      	str	r3, [r7, #68]	@ 0x44
 8000700:	e002      	b.n	8000708 <MX_FREERTOS_Init+0xa4>
 8000702:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000704:	3301      	adds	r3, #1
 8000706:	647b      	str	r3, [r7, #68]	@ 0x44
 8000708:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800070a:	4a06      	ldr	r2, [pc, #24]	@ (8000724 <MX_FREERTOS_Init+0xc0>)
 800070c:	4293      	cmp	r3, r2
 800070e:	d9f8      	bls.n	8000702 <MX_FREERTOS_Init+0x9e>
  	while(1){
 8000710:	e7e3      	b.n	80006da <MX_FREERTOS_Init+0x76>
 8000712:	bf00      	nop
 8000714:	0800c038 	.word	0x0800c038
 8000718:	24000080 	.word	0x24000080
 800071c:	0800c054 	.word	0x0800c054
 8000720:	240002d8 	.word	0x240002d8
 8000724:	000ffffe 	.word	0x000ffffe

08000728 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000730:	2001      	movs	r0, #1
 8000732:	f00a f846 	bl	800a7c2 <osDelay>
 8000736:	e7fb      	b.n	8000730 <StartDefaultTask+0x8>

08000738 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b088      	sub	sp, #32
 800073c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800073e:	f107 030c 	add.w	r3, r7, #12
 8000742:	2200      	movs	r2, #0
 8000744:	601a      	str	r2, [r3, #0]
 8000746:	605a      	str	r2, [r3, #4]
 8000748:	609a      	str	r2, [r3, #8]
 800074a:	60da      	str	r2, [r3, #12]
 800074c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800074e:	4b1b      	ldr	r3, [pc, #108]	@ (80007bc <MX_GPIO_Init+0x84>)
 8000750:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000754:	4a19      	ldr	r2, [pc, #100]	@ (80007bc <MX_GPIO_Init+0x84>)
 8000756:	f043 0302 	orr.w	r3, r3, #2
 800075a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800075e:	4b17      	ldr	r3, [pc, #92]	@ (80007bc <MX_GPIO_Init+0x84>)
 8000760:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000764:	f003 0302 	and.w	r3, r3, #2
 8000768:	60bb      	str	r3, [r7, #8]
 800076a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800076c:	4b13      	ldr	r3, [pc, #76]	@ (80007bc <MX_GPIO_Init+0x84>)
 800076e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000772:	4a12      	ldr	r2, [pc, #72]	@ (80007bc <MX_GPIO_Init+0x84>)
 8000774:	f043 0301 	orr.w	r3, r3, #1
 8000778:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800077c:	4b0f      	ldr	r3, [pc, #60]	@ (80007bc <MX_GPIO_Init+0x84>)
 800077e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000782:	f003 0301 	and.w	r3, r3, #1
 8000786:	607b      	str	r3, [r7, #4]
 8000788:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = esp32i2cInterruptReqest_Pin;
 800078a:	2320      	movs	r3, #32
 800078c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800078e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000792:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000794:	2300      	movs	r3, #0
 8000796:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(esp32i2cInterruptReqest_GPIO_Port, &GPIO_InitStruct);
 8000798:	f107 030c 	add.w	r3, r7, #12
 800079c:	4619      	mov	r1, r3
 800079e:	4808      	ldr	r0, [pc, #32]	@ (80007c0 <MX_GPIO_Init+0x88>)
 80007a0:	f003 f948 	bl	8003a34 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80007a4:	2200      	movs	r2, #0
 80007a6:	2100      	movs	r1, #0
 80007a8:	2017      	movs	r0, #23
 80007aa:	f000 fd41 	bl	8001230 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80007ae:	2017      	movs	r0, #23
 80007b0:	f000 fd58 	bl	8001264 <HAL_NVIC_EnableIRQ>

}
 80007b4:	bf00      	nop
 80007b6:	3720      	adds	r7, #32
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	58024400 	.word	0x58024400
 80007c0:	58020400 	.word	0x58020400

080007c4 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007c8:	4b1b      	ldr	r3, [pc, #108]	@ (8000838 <MX_I2C1_Init+0x74>)
 80007ca:	4a1c      	ldr	r2, [pc, #112]	@ (800083c <MX_I2C1_Init+0x78>)
 80007cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20B0CCFF;
 80007ce:	4b1a      	ldr	r3, [pc, #104]	@ (8000838 <MX_I2C1_Init+0x74>)
 80007d0:	4a1b      	ldr	r2, [pc, #108]	@ (8000840 <MX_I2C1_Init+0x7c>)
 80007d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80007d4:	4b18      	ldr	r3, [pc, #96]	@ (8000838 <MX_I2C1_Init+0x74>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007da:	4b17      	ldr	r3, [pc, #92]	@ (8000838 <MX_I2C1_Init+0x74>)
 80007dc:	2201      	movs	r2, #1
 80007de:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007e0:	4b15      	ldr	r3, [pc, #84]	@ (8000838 <MX_I2C1_Init+0x74>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80007e6:	4b14      	ldr	r3, [pc, #80]	@ (8000838 <MX_I2C1_Init+0x74>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007ec:	4b12      	ldr	r3, [pc, #72]	@ (8000838 <MX_I2C1_Init+0x74>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007f2:	4b11      	ldr	r3, [pc, #68]	@ (8000838 <MX_I2C1_Init+0x74>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 80007f8:	4b0f      	ldr	r3, [pc, #60]	@ (8000838 <MX_I2C1_Init+0x74>)
 80007fa:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80007fe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000800:	480d      	ldr	r0, [pc, #52]	@ (8000838 <MX_I2C1_Init+0x74>)
 8000802:	f003 faed 	bl	8003de0 <HAL_I2C_Init>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800080c:	f000 f992 	bl	8000b34 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000810:	2100      	movs	r1, #0
 8000812:	4809      	ldr	r0, [pc, #36]	@ (8000838 <MX_I2C1_Init+0x74>)
 8000814:	f005 fc0a 	bl	800602c <HAL_I2CEx_ConfigAnalogFilter>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800081e:	f000 f989 	bl	8000b34 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000822:	2100      	movs	r1, #0
 8000824:	4804      	ldr	r0, [pc, #16]	@ (8000838 <MX_I2C1_Init+0x74>)
 8000826:	f005 fc4c 	bl	80060c2 <HAL_I2CEx_ConfigDigitalFilter>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000830:	f000 f980 	bl	8000b34 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000834:	bf00      	nop
 8000836:	bd80      	pop	{r7, pc}
 8000838:	240002d8 	.word	0x240002d8
 800083c:	40005400 	.word	0x40005400
 8000840:	20b0ccff 	.word	0x20b0ccff

08000844 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b0ba      	sub	sp, #232	@ 0xe8
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800084c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000850:	2200      	movs	r2, #0
 8000852:	601a      	str	r2, [r3, #0]
 8000854:	605a      	str	r2, [r3, #4]
 8000856:	609a      	str	r2, [r3, #8]
 8000858:	60da      	str	r2, [r3, #12]
 800085a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800085c:	f107 0310 	add.w	r3, r7, #16
 8000860:	22c0      	movs	r2, #192	@ 0xc0
 8000862:	2100      	movs	r1, #0
 8000864:	4618      	mov	r0, r3
 8000866:	f00b fb83 	bl	800bf70 <memset>
  if(i2cHandle->Instance==I2C1)
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	4a5c      	ldr	r2, [pc, #368]	@ (80009e0 <HAL_I2C_MspInit+0x19c>)
 8000870:	4293      	cmp	r3, r2
 8000872:	f040 80b1 	bne.w	80009d8 <HAL_I2C_MspInit+0x194>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000876:	f04f 0208 	mov.w	r2, #8
 800087a:	f04f 0300 	mov.w	r3, #0
 800087e:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000882:	2300      	movs	r3, #0
 8000884:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000888:	f107 0310 	add.w	r3, r7, #16
 800088c:	4618      	mov	r0, r3
 800088e:	f006 fc9f 	bl	80071d0 <HAL_RCCEx_PeriphCLKConfig>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <HAL_I2C_MspInit+0x58>
    {
      Error_Handler();
 8000898:	f000 f94c 	bl	8000b34 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800089c:	4b51      	ldr	r3, [pc, #324]	@ (80009e4 <HAL_I2C_MspInit+0x1a0>)
 800089e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80008a2:	4a50      	ldr	r2, [pc, #320]	@ (80009e4 <HAL_I2C_MspInit+0x1a0>)
 80008a4:	f043 0302 	orr.w	r3, r3, #2
 80008a8:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80008ac:	4b4d      	ldr	r3, [pc, #308]	@ (80009e4 <HAL_I2C_MspInit+0x1a0>)
 80008ae:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80008b2:	f003 0302 	and.w	r3, r3, #2
 80008b6:	60fb      	str	r3, [r7, #12]
 80008b8:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80008ba:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80008be:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008c2:	2312      	movs	r3, #18
 80008c4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c8:	2300      	movs	r3, #0
 80008ca:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ce:	2300      	movs	r3, #0
 80008d0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80008d4:	2304      	movs	r3, #4
 80008d6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008da:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80008de:	4619      	mov	r1, r3
 80008e0:	4841      	ldr	r0, [pc, #260]	@ (80009e8 <HAL_I2C_MspInit+0x1a4>)
 80008e2:	f003 f8a7 	bl	8003a34 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80008e6:	4b3f      	ldr	r3, [pc, #252]	@ (80009e4 <HAL_I2C_MspInit+0x1a0>)
 80008e8:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80008ec:	4a3d      	ldr	r2, [pc, #244]	@ (80009e4 <HAL_I2C_MspInit+0x1a0>)
 80008ee:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80008f2:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 80008f6:	4b3b      	ldr	r3, [pc, #236]	@ (80009e4 <HAL_I2C_MspInit+0x1a0>)
 80008f8:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80008fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000900:	60bb      	str	r3, [r7, #8]
 8000902:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8000904:	4b39      	ldr	r3, [pc, #228]	@ (80009ec <HAL_I2C_MspInit+0x1a8>)
 8000906:	4a3a      	ldr	r2, [pc, #232]	@ (80009f0 <HAL_I2C_MspInit+0x1ac>)
 8000908:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 800090a:	4b38      	ldr	r3, [pc, #224]	@ (80009ec <HAL_I2C_MspInit+0x1a8>)
 800090c:	2221      	movs	r2, #33	@ 0x21
 800090e:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000910:	4b36      	ldr	r3, [pc, #216]	@ (80009ec <HAL_I2C_MspInit+0x1a8>)
 8000912:	2200      	movs	r2, #0
 8000914:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000916:	4b35      	ldr	r3, [pc, #212]	@ (80009ec <HAL_I2C_MspInit+0x1a8>)
 8000918:	2200      	movs	r2, #0
 800091a:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800091c:	4b33      	ldr	r3, [pc, #204]	@ (80009ec <HAL_I2C_MspInit+0x1a8>)
 800091e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000922:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000924:	4b31      	ldr	r3, [pc, #196]	@ (80009ec <HAL_I2C_MspInit+0x1a8>)
 8000926:	2200      	movs	r2, #0
 8000928:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800092a:	4b30      	ldr	r3, [pc, #192]	@ (80009ec <HAL_I2C_MspInit+0x1a8>)
 800092c:	2200      	movs	r2, #0
 800092e:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8000930:	4b2e      	ldr	r3, [pc, #184]	@ (80009ec <HAL_I2C_MspInit+0x1a8>)
 8000932:	2200      	movs	r2, #0
 8000934:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000936:	4b2d      	ldr	r3, [pc, #180]	@ (80009ec <HAL_I2C_MspInit+0x1a8>)
 8000938:	2200      	movs	r2, #0
 800093a:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800093c:	4b2b      	ldr	r3, [pc, #172]	@ (80009ec <HAL_I2C_MspInit+0x1a8>)
 800093e:	2200      	movs	r2, #0
 8000940:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8000942:	482a      	ldr	r0, [pc, #168]	@ (80009ec <HAL_I2C_MspInit+0x1a8>)
 8000944:	f000 fc9c 	bl	8001280 <HAL_DMA_Init>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <HAL_I2C_MspInit+0x10e>
    {
      Error_Handler();
 800094e:	f000 f8f1 	bl	8000b34 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	4a25      	ldr	r2, [pc, #148]	@ (80009ec <HAL_I2C_MspInit+0x1a8>)
 8000956:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000958:	4a24      	ldr	r2, [pc, #144]	@ (80009ec <HAL_I2C_MspInit+0x1a8>)
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream1;
 800095e:	4b25      	ldr	r3, [pc, #148]	@ (80009f4 <HAL_I2C_MspInit+0x1b0>)
 8000960:	4a25      	ldr	r2, [pc, #148]	@ (80009f8 <HAL_I2C_MspInit+0x1b4>)
 8000962:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 8000964:	4b23      	ldr	r3, [pc, #140]	@ (80009f4 <HAL_I2C_MspInit+0x1b0>)
 8000966:	2222      	movs	r2, #34	@ 0x22
 8000968:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800096a:	4b22      	ldr	r3, [pc, #136]	@ (80009f4 <HAL_I2C_MspInit+0x1b0>)
 800096c:	2240      	movs	r2, #64	@ 0x40
 800096e:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000970:	4b20      	ldr	r3, [pc, #128]	@ (80009f4 <HAL_I2C_MspInit+0x1b0>)
 8000972:	2200      	movs	r2, #0
 8000974:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000976:	4b1f      	ldr	r3, [pc, #124]	@ (80009f4 <HAL_I2C_MspInit+0x1b0>)
 8000978:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800097c:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800097e:	4b1d      	ldr	r3, [pc, #116]	@ (80009f4 <HAL_I2C_MspInit+0x1b0>)
 8000980:	2200      	movs	r2, #0
 8000982:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000984:	4b1b      	ldr	r3, [pc, #108]	@ (80009f4 <HAL_I2C_MspInit+0x1b0>)
 8000986:	2200      	movs	r2, #0
 8000988:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800098a:	4b1a      	ldr	r3, [pc, #104]	@ (80009f4 <HAL_I2C_MspInit+0x1b0>)
 800098c:	2200      	movs	r2, #0
 800098e:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000990:	4b18      	ldr	r3, [pc, #96]	@ (80009f4 <HAL_I2C_MspInit+0x1b0>)
 8000992:	2200      	movs	r2, #0
 8000994:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000996:	4b17      	ldr	r3, [pc, #92]	@ (80009f4 <HAL_I2C_MspInit+0x1b0>)
 8000998:	2200      	movs	r2, #0
 800099a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800099c:	4815      	ldr	r0, [pc, #84]	@ (80009f4 <HAL_I2C_MspInit+0x1b0>)
 800099e:	f000 fc6f 	bl	8001280 <HAL_DMA_Init>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <HAL_I2C_MspInit+0x168>
    {
      Error_Handler();
 80009a8:	f000 f8c4 	bl	8000b34 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	4a11      	ldr	r2, [pc, #68]	@ (80009f4 <HAL_I2C_MspInit+0x1b0>)
 80009b0:	639a      	str	r2, [r3, #56]	@ 0x38
 80009b2:	4a10      	ldr	r2, [pc, #64]	@ (80009f4 <HAL_I2C_MspInit+0x1b0>)
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 1, 0);
 80009b8:	2200      	movs	r2, #0
 80009ba:	2101      	movs	r1, #1
 80009bc:	201f      	movs	r0, #31
 80009be:	f000 fc37 	bl	8001230 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80009c2:	201f      	movs	r0, #31
 80009c4:	f000 fc4e 	bl	8001264 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 1, 0);
 80009c8:	2200      	movs	r2, #0
 80009ca:	2101      	movs	r1, #1
 80009cc:	2020      	movs	r0, #32
 80009ce:	f000 fc2f 	bl	8001230 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80009d2:	2020      	movs	r0, #32
 80009d4:	f000 fc46 	bl	8001264 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80009d8:	bf00      	nop
 80009da:	37e8      	adds	r7, #232	@ 0xe8
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	40005400 	.word	0x40005400
 80009e4:	58024400 	.word	0x58024400
 80009e8:	58020400 	.word	0x58020400
 80009ec:	2400032c 	.word	0x2400032c
 80009f0:	40020010 	.word	0x40020010
 80009f4:	240003a4 	.word	0x240003a4
 80009f8:	40020028 	.word	0x40020028

080009fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a00:	f000 fb02 	bl	8001008 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a04:	f000 f80e 	bl	8000a24 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a08:	f7ff fe96 	bl	8000738 <MX_GPIO_Init>
  MX_DMA_Init();
 8000a0c:	f7ff fde8 	bl	80005e0 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000a10:	f000 fa1a 	bl	8000e48 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8000a14:	f7ff fed6 	bl	80007c4 <MX_I2C1_Init>


  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000a18:	f7ff fe24 	bl	8000664 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000a1c:	f009 fe7e 	bl	800a71c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a20:	bf00      	nop
 8000a22:	e7fd      	b.n	8000a20 <main+0x24>

08000a24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b09c      	sub	sp, #112	@ 0x70
 8000a28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a2a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a2e:	224c      	movs	r2, #76	@ 0x4c
 8000a30:	2100      	movs	r1, #0
 8000a32:	4618      	mov	r0, r3
 8000a34:	f00b fa9c 	bl	800bf70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a38:	1d3b      	adds	r3, r7, #4
 8000a3a:	2220      	movs	r2, #32
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f00b fa96 	bl	800bf70 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000a44:	4b30      	ldr	r3, [pc, #192]	@ (8000b08 <SystemClock_Config+0xe4>)
 8000a46:	f04f 32ff 	mov.w	r2, #4294967295
 8000a4a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000a4e:	2002      	movs	r0, #2
 8000a50:	f005 fb84 	bl	800615c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000a54:	2300      	movs	r3, #0
 8000a56:	603b      	str	r3, [r7, #0]
 8000a58:	4b2c      	ldr	r3, [pc, #176]	@ (8000b0c <SystemClock_Config+0xe8>)
 8000a5a:	699b      	ldr	r3, [r3, #24]
 8000a5c:	4a2b      	ldr	r2, [pc, #172]	@ (8000b0c <SystemClock_Config+0xe8>)
 8000a5e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000a62:	6193      	str	r3, [r2, #24]
 8000a64:	4b29      	ldr	r3, [pc, #164]	@ (8000b0c <SystemClock_Config+0xe8>)
 8000a66:	699b      	ldr	r3, [r3, #24]
 8000a68:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a6c:	603b      	str	r3, [r7, #0]
 8000a6e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a70:	bf00      	nop
 8000a72:	4b26      	ldr	r3, [pc, #152]	@ (8000b0c <SystemClock_Config+0xe8>)
 8000a74:	699b      	ldr	r3, [r3, #24]
 8000a76:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000a7a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000a7e:	d1f8      	bne.n	8000a72 <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a80:	2302      	movs	r3, #2
 8000a82:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000a84:	2301      	movs	r3, #1
 8000a86:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8000a88:	2340      	movs	r3, #64	@ 0x40
 8000a8a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a8c:	2302      	movs	r3, #2
 8000a8e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a90:	2300      	movs	r3, #0
 8000a92:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a94:	2304      	movs	r3, #4
 8000a96:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 35;
 8000a98:	2323      	movs	r3, #35	@ 0x23
 8000a9a:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000a9c:	2302      	movs	r3, #2
 8000a9e:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000aa0:	2302      	movs	r3, #2
 8000aa2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000aa4:	2302      	movs	r3, #2
 8000aa6:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000aa8:	230c      	movs	r3, #12
 8000aaa:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000aac:	2300      	movs	r3, #0
 8000aae:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ab4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f005 fb89 	bl	80061d0 <HAL_RCC_OscConfig>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000ac4:	f000 f836 	bl	8000b34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ac8:	233f      	movs	r3, #63	@ 0x3f
 8000aca:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000acc:	2303      	movs	r3, #3
 8000ace:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000ad8:	2340      	movs	r3, #64	@ 0x40
 8000ada:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000adc:	2340      	movs	r3, #64	@ 0x40
 8000ade:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000ae0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ae4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000ae6:	2340      	movs	r3, #64	@ 0x40
 8000ae8:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000aea:	1d3b      	adds	r3, r7, #4
 8000aec:	2106      	movs	r1, #6
 8000aee:	4618      	mov	r0, r3
 8000af0:	f005 ffa0 	bl	8006a34 <HAL_RCC_ClockConfig>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <SystemClock_Config+0xda>
  {
    Error_Handler();
 8000afa:	f000 f81b 	bl	8000b34 <Error_Handler>
  }
}
 8000afe:	bf00      	nop
 8000b00:	3770      	adds	r7, #112	@ 0x70
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	58024400 	.word	0x58024400
 8000b0c:	58024800 	.word	0x58024800

08000b10 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a04      	ldr	r2, [pc, #16]	@ (8000b30 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b1e:	4293      	cmp	r3, r2
 8000b20:	d101      	bne.n	8000b26 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b22:	f000 faad 	bl	8001080 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b26:	bf00      	nop
 8000b28:	3708      	adds	r7, #8
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	40010000 	.word	0x40010000

08000b34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b38:	b672      	cpsid	i
}
 8000b3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b3c:	bf00      	nop
 8000b3e:	e7fd      	b.n	8000b3c <Error_Handler+0x8>

08000b40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b46:	4b0c      	ldr	r3, [pc, #48]	@ (8000b78 <HAL_MspInit+0x38>)
 8000b48:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000b4c:	4a0a      	ldr	r2, [pc, #40]	@ (8000b78 <HAL_MspInit+0x38>)
 8000b4e:	f043 0302 	orr.w	r3, r3, #2
 8000b52:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8000b56:	4b08      	ldr	r3, [pc, #32]	@ (8000b78 <HAL_MspInit+0x38>)
 8000b58:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000b5c:	f003 0302 	and.w	r3, r3, #2
 8000b60:	607b      	str	r3, [r7, #4]
 8000b62:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b64:	2200      	movs	r2, #0
 8000b66:	210f      	movs	r1, #15
 8000b68:	f06f 0001 	mvn.w	r0, #1
 8000b6c:	f000 fb60 	bl	8001230 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b70:	bf00      	nop
 8000b72:	3708      	adds	r7, #8
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	58024400 	.word	0x58024400

08000b7c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b08e      	sub	sp, #56	@ 0x38
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	2b0f      	cmp	r3, #15
 8000b88:	d844      	bhi.n	8000c14 <HAL_InitTick+0x98>
  {
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0U);
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	6879      	ldr	r1, [r7, #4]
 8000b8e:	2019      	movs	r0, #25
 8000b90:	f000 fb4e 	bl	8001230 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000b94:	2019      	movs	r0, #25
 8000b96:	f000 fb65 	bl	8001264 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8000b9a:	4a24      	ldr	r2, [pc, #144]	@ (8000c2c <HAL_InitTick+0xb0>)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000ba0:	4b23      	ldr	r3, [pc, #140]	@ (8000c30 <HAL_InitTick+0xb4>)
 8000ba2:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8000ba6:	4a22      	ldr	r2, [pc, #136]	@ (8000c30 <HAL_InitTick+0xb4>)
 8000ba8:	f043 0301 	orr.w	r3, r3, #1
 8000bac:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 8000bb0:	4b1f      	ldr	r3, [pc, #124]	@ (8000c30 <HAL_InitTick+0xb4>)
 8000bb2:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8000bb6:	f003 0301 	and.w	r3, r3, #1
 8000bba:	60bb      	str	r3, [r7, #8]
 8000bbc:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000bbe:	f107 020c 	add.w	r2, r7, #12
 8000bc2:	f107 0310 	add.w	r3, r7, #16
 8000bc6:	4611      	mov	r1, r2
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f006 fabf 	bl	800714c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000bce:	f006 faa7 	bl	8007120 <HAL_RCC_GetPCLK2Freq>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	005b      	lsls	r3, r3, #1
 8000bd6:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000bd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000bda:	4a16      	ldr	r2, [pc, #88]	@ (8000c34 <HAL_InitTick+0xb8>)
 8000bdc:	fba2 2303 	umull	r2, r3, r2, r3
 8000be0:	0c9b      	lsrs	r3, r3, #18
 8000be2:	3b01      	subs	r3, #1
 8000be4:	633b      	str	r3, [r7, #48]	@ 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000be6:	4b14      	ldr	r3, [pc, #80]	@ (8000c38 <HAL_InitTick+0xbc>)
 8000be8:	4a14      	ldr	r2, [pc, #80]	@ (8000c3c <HAL_InitTick+0xc0>)
 8000bea:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000bec:	4b12      	ldr	r3, [pc, #72]	@ (8000c38 <HAL_InitTick+0xbc>)
 8000bee:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000bf2:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000bf4:	4a10      	ldr	r2, [pc, #64]	@ (8000c38 <HAL_InitTick+0xbc>)
 8000bf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000bf8:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000bfa:	4b0f      	ldr	r3, [pc, #60]	@ (8000c38 <HAL_InitTick+0xbc>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c00:	4b0d      	ldr	r3, [pc, #52]	@ (8000c38 <HAL_InitTick+0xbc>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000c06:	480c      	ldr	r0, [pc, #48]	@ (8000c38 <HAL_InitTick+0xbc>)
 8000c08:	f008 f8c2 	bl	8008d90 <HAL_TIM_Base_Init>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d107      	bne.n	8000c22 <HAL_InitTick+0xa6>
 8000c12:	e001      	b.n	8000c18 <HAL_InitTick+0x9c>
    return HAL_ERROR;
 8000c14:	2301      	movs	r3, #1
 8000c16:	e005      	b.n	8000c24 <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000c18:	4807      	ldr	r0, [pc, #28]	@ (8000c38 <HAL_InitTick+0xbc>)
 8000c1a:	f008 f91b 	bl	8008e54 <HAL_TIM_Base_Start_IT>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	e000      	b.n	8000c24 <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 8000c22:	2301      	movs	r3, #1
}
 8000c24:	4618      	mov	r0, r3
 8000c26:	3738      	adds	r7, #56	@ 0x38
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	24000008 	.word	0x24000008
 8000c30:	58024400 	.word	0x58024400
 8000c34:	431bde83 	.word	0x431bde83
 8000c38:	2400041c 	.word	0x2400041c
 8000c3c:	40010000 	.word	0x40010000

08000c40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c44:	bf00      	nop
 8000c46:	e7fd      	b.n	8000c44 <NMI_Handler+0x4>

08000c48 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c4c:	bf00      	nop
 8000c4e:	e7fd      	b.n	8000c4c <HardFault_Handler+0x4>

08000c50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c54:	bf00      	nop
 8000c56:	e7fd      	b.n	8000c54 <MemManage_Handler+0x4>

08000c58 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c5c:	bf00      	nop
 8000c5e:	e7fd      	b.n	8000c5c <BusFault_Handler+0x4>

08000c60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c64:	bf00      	nop
 8000c66:	e7fd      	b.n	8000c64 <UsageFault_Handler+0x4>

08000c68 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c6c:	bf00      	nop
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr
	...

08000c78 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8000c7c:	4802      	ldr	r0, [pc, #8]	@ (8000c88 <DMA1_Stream0_IRQHandler+0x10>)
 8000c7e:	f001 fb3d 	bl	80022fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000c82:	bf00      	nop
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	2400032c 	.word	0x2400032c

08000c8c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8000c90:	4802      	ldr	r0, [pc, #8]	@ (8000c9c <DMA1_Stream1_IRQHandler+0x10>)
 8000c92:	f001 fb33 	bl	80022fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8000c96:	bf00      	nop
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	240003a4 	.word	0x240003a4

08000ca0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(esp32i2cInterruptReqest_Pin);
 8000ca4:	2020      	movs	r0, #32
 8000ca6:	f003 f875 	bl	8003d94 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000caa:	bf00      	nop
 8000cac:	bd80      	pop	{r7, pc}
	...

08000cb0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000cb4:	4802      	ldr	r0, [pc, #8]	@ (8000cc0 <TIM1_UP_IRQHandler+0x10>)
 8000cb6:	f008 f945 	bl	8008f44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000cba:	bf00      	nop
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	2400041c 	.word	0x2400041c

08000cc4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000cc8:	4802      	ldr	r0, [pc, #8]	@ (8000cd4 <I2C1_EV_IRQHandler+0x10>)
 8000cca:	f003 fa39 	bl	8004140 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000cce:	bf00      	nop
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	240002d8 	.word	0x240002d8

08000cd8 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000cdc:	4802      	ldr	r0, [pc, #8]	@ (8000ce8 <I2C1_ER_IRQHandler+0x10>)
 8000cde:	f003 fa49 	bl	8004174 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000ce2:	bf00      	nop
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	240002d8 	.word	0x240002d8

08000cec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b086      	sub	sp, #24
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cf4:	4a14      	ldr	r2, [pc, #80]	@ (8000d48 <_sbrk+0x5c>)
 8000cf6:	4b15      	ldr	r3, [pc, #84]	@ (8000d4c <_sbrk+0x60>)
 8000cf8:	1ad3      	subs	r3, r2, r3
 8000cfa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d00:	4b13      	ldr	r3, [pc, #76]	@ (8000d50 <_sbrk+0x64>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d102      	bne.n	8000d0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d08:	4b11      	ldr	r3, [pc, #68]	@ (8000d50 <_sbrk+0x64>)
 8000d0a:	4a12      	ldr	r2, [pc, #72]	@ (8000d54 <_sbrk+0x68>)
 8000d0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d0e:	4b10      	ldr	r3, [pc, #64]	@ (8000d50 <_sbrk+0x64>)
 8000d10:	681a      	ldr	r2, [r3, #0]
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	4413      	add	r3, r2
 8000d16:	693a      	ldr	r2, [r7, #16]
 8000d18:	429a      	cmp	r2, r3
 8000d1a:	d207      	bcs.n	8000d2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d1c:	f00b f940 	bl	800bfa0 <__errno>
 8000d20:	4603      	mov	r3, r0
 8000d22:	220c      	movs	r2, #12
 8000d24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d26:	f04f 33ff 	mov.w	r3, #4294967295
 8000d2a:	e009      	b.n	8000d40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d2c:	4b08      	ldr	r3, [pc, #32]	@ (8000d50 <_sbrk+0x64>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d32:	4b07      	ldr	r3, [pc, #28]	@ (8000d50 <_sbrk+0x64>)
 8000d34:	681a      	ldr	r2, [r3, #0]
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	4413      	add	r3, r2
 8000d3a:	4a05      	ldr	r2, [pc, #20]	@ (8000d50 <_sbrk+0x64>)
 8000d3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d3e:	68fb      	ldr	r3, [r7, #12]
}
 8000d40:	4618      	mov	r0, r3
 8000d42:	3718      	adds	r7, #24
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	24100000 	.word	0x24100000
 8000d4c:	00000400 	.word	0x00000400
 8000d50:	24000468 	.word	0x24000468
 8000d54:	240043a0 	.word	0x240043a0

08000d58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000d5c:	4b32      	ldr	r3, [pc, #200]	@ (8000e28 <SystemInit+0xd0>)
 8000d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d62:	4a31      	ldr	r2, [pc, #196]	@ (8000e28 <SystemInit+0xd0>)
 8000d64:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d68:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000d6c:	4b2f      	ldr	r3, [pc, #188]	@ (8000e2c <SystemInit+0xd4>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	f003 030f 	and.w	r3, r3, #15
 8000d74:	2b02      	cmp	r3, #2
 8000d76:	d807      	bhi.n	8000d88 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000d78:	4b2c      	ldr	r3, [pc, #176]	@ (8000e2c <SystemInit+0xd4>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	f023 030f 	bic.w	r3, r3, #15
 8000d80:	4a2a      	ldr	r2, [pc, #168]	@ (8000e2c <SystemInit+0xd4>)
 8000d82:	f043 0303 	orr.w	r3, r3, #3
 8000d86:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000d88:	4b29      	ldr	r3, [pc, #164]	@ (8000e30 <SystemInit+0xd8>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a28      	ldr	r2, [pc, #160]	@ (8000e30 <SystemInit+0xd8>)
 8000d8e:	f043 0301 	orr.w	r3, r3, #1
 8000d92:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000d94:	4b26      	ldr	r3, [pc, #152]	@ (8000e30 <SystemInit+0xd8>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000d9a:	4b25      	ldr	r3, [pc, #148]	@ (8000e30 <SystemInit+0xd8>)
 8000d9c:	681a      	ldr	r2, [r3, #0]
 8000d9e:	4924      	ldr	r1, [pc, #144]	@ (8000e30 <SystemInit+0xd8>)
 8000da0:	4b24      	ldr	r3, [pc, #144]	@ (8000e34 <SystemInit+0xdc>)
 8000da2:	4013      	ands	r3, r2
 8000da4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000da6:	4b21      	ldr	r3, [pc, #132]	@ (8000e2c <SystemInit+0xd4>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	f003 030c 	and.w	r3, r3, #12
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d007      	beq.n	8000dc2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000db2:	4b1e      	ldr	r3, [pc, #120]	@ (8000e2c <SystemInit+0xd4>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	f023 030f 	bic.w	r3, r3, #15
 8000dba:	4a1c      	ldr	r2, [pc, #112]	@ (8000e2c <SystemInit+0xd4>)
 8000dbc:	f043 0303 	orr.w	r3, r3, #3
 8000dc0:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8000dc2:	4b1b      	ldr	r3, [pc, #108]	@ (8000e30 <SystemInit+0xd8>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8000dc8:	4b19      	ldr	r3, [pc, #100]	@ (8000e30 <SystemInit+0xd8>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8000dce:	4b18      	ldr	r3, [pc, #96]	@ (8000e30 <SystemInit+0xd8>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000dd4:	4b16      	ldr	r3, [pc, #88]	@ (8000e30 <SystemInit+0xd8>)
 8000dd6:	4a18      	ldr	r2, [pc, #96]	@ (8000e38 <SystemInit+0xe0>)
 8000dd8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000dda:	4b15      	ldr	r3, [pc, #84]	@ (8000e30 <SystemInit+0xd8>)
 8000ddc:	4a17      	ldr	r2, [pc, #92]	@ (8000e3c <SystemInit+0xe4>)
 8000dde:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000de0:	4b13      	ldr	r3, [pc, #76]	@ (8000e30 <SystemInit+0xd8>)
 8000de2:	4a17      	ldr	r2, [pc, #92]	@ (8000e40 <SystemInit+0xe8>)
 8000de4:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000de6:	4b12      	ldr	r3, [pc, #72]	@ (8000e30 <SystemInit+0xd8>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000dec:	4b10      	ldr	r3, [pc, #64]	@ (8000e30 <SystemInit+0xd8>)
 8000dee:	4a14      	ldr	r2, [pc, #80]	@ (8000e40 <SystemInit+0xe8>)
 8000df0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000df2:	4b0f      	ldr	r3, [pc, #60]	@ (8000e30 <SystemInit+0xd8>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000df8:	4b0d      	ldr	r3, [pc, #52]	@ (8000e30 <SystemInit+0xd8>)
 8000dfa:	4a11      	ldr	r2, [pc, #68]	@ (8000e40 <SystemInit+0xe8>)
 8000dfc:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000dfe:	4b0c      	ldr	r3, [pc, #48]	@ (8000e30 <SystemInit+0xd8>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000e04:	4b0a      	ldr	r3, [pc, #40]	@ (8000e30 <SystemInit+0xd8>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a09      	ldr	r2, [pc, #36]	@ (8000e30 <SystemInit+0xd8>)
 8000e0a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000e0e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000e10:	4b07      	ldr	r3, [pc, #28]	@ (8000e30 <SystemInit+0xd8>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000e16:	4b0b      	ldr	r3, [pc, #44]	@ (8000e44 <SystemInit+0xec>)
 8000e18:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000e1c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000e1e:	bf00      	nop
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr
 8000e28:	e000ed00 	.word	0xe000ed00
 8000e2c:	52002000 	.word	0x52002000
 8000e30:	58024400 	.word	0x58024400
 8000e34:	eaf6ed7f 	.word	0xeaf6ed7f
 8000e38:	02020200 	.word	0x02020200
 8000e3c:	01ff0000 	.word	0x01ff0000
 8000e40:	01010280 	.word	0x01010280
 8000e44:	52004000 	.word	0x52004000

08000e48 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e4c:	4b22      	ldr	r3, [pc, #136]	@ (8000ed8 <MX_USART1_UART_Init+0x90>)
 8000e4e:	4a23      	ldr	r2, [pc, #140]	@ (8000edc <MX_USART1_UART_Init+0x94>)
 8000e50:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000e52:	4b21      	ldr	r3, [pc, #132]	@ (8000ed8 <MX_USART1_UART_Init+0x90>)
 8000e54:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e58:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e5a:	4b1f      	ldr	r3, [pc, #124]	@ (8000ed8 <MX_USART1_UART_Init+0x90>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e60:	4b1d      	ldr	r3, [pc, #116]	@ (8000ed8 <MX_USART1_UART_Init+0x90>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e66:	4b1c      	ldr	r3, [pc, #112]	@ (8000ed8 <MX_USART1_UART_Init+0x90>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e6c:	4b1a      	ldr	r3, [pc, #104]	@ (8000ed8 <MX_USART1_UART_Init+0x90>)
 8000e6e:	220c      	movs	r2, #12
 8000e70:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e72:	4b19      	ldr	r3, [pc, #100]	@ (8000ed8 <MX_USART1_UART_Init+0x90>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e78:	4b17      	ldr	r3, [pc, #92]	@ (8000ed8 <MX_USART1_UART_Init+0x90>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e7e:	4b16      	ldr	r3, [pc, #88]	@ (8000ed8 <MX_USART1_UART_Init+0x90>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e84:	4b14      	ldr	r3, [pc, #80]	@ (8000ed8 <MX_USART1_UART_Init+0x90>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e8a:	4b13      	ldr	r3, [pc, #76]	@ (8000ed8 <MX_USART1_UART_Init+0x90>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e90:	4811      	ldr	r0, [pc, #68]	@ (8000ed8 <MX_USART1_UART_Init+0x90>)
 8000e92:	f008 fa4b 	bl	800932c <HAL_UART_Init>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d001      	beq.n	8000ea0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000e9c:	f7ff fe4a 	bl	8000b34 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ea0:	2100      	movs	r1, #0
 8000ea2:	480d      	ldr	r0, [pc, #52]	@ (8000ed8 <MX_USART1_UART_Init+0x90>)
 8000ea4:	f009 fb57 	bl	800a556 <HAL_UARTEx_SetTxFifoThreshold>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000eae:	f7ff fe41 	bl	8000b34 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	4808      	ldr	r0, [pc, #32]	@ (8000ed8 <MX_USART1_UART_Init+0x90>)
 8000eb6:	f009 fb8c 	bl	800a5d2 <HAL_UARTEx_SetRxFifoThreshold>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000ec0:	f7ff fe38 	bl	8000b34 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000ec4:	4804      	ldr	r0, [pc, #16]	@ (8000ed8 <MX_USART1_UART_Init+0x90>)
 8000ec6:	f009 fb0d 	bl	800a4e4 <HAL_UARTEx_DisableFifoMode>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000ed0:	f7ff fe30 	bl	8000b34 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ed4:	bf00      	nop
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	2400046c 	.word	0x2400046c
 8000edc:	40011000 	.word	0x40011000

08000ee0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b0ba      	sub	sp, #232	@ 0xe8
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000eec:	2200      	movs	r2, #0
 8000eee:	601a      	str	r2, [r3, #0]
 8000ef0:	605a      	str	r2, [r3, #4]
 8000ef2:	609a      	str	r2, [r3, #8]
 8000ef4:	60da      	str	r2, [r3, #12]
 8000ef6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ef8:	f107 0310 	add.w	r3, r7, #16
 8000efc:	22c0      	movs	r2, #192	@ 0xc0
 8000efe:	2100      	movs	r1, #0
 8000f00:	4618      	mov	r0, r3
 8000f02:	f00b f835 	bl	800bf70 <memset>
  if(uartHandle->Instance==USART1)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	4a27      	ldr	r2, [pc, #156]	@ (8000fa8 <HAL_UART_MspInit+0xc8>)
 8000f0c:	4293      	cmp	r3, r2
 8000f0e:	d146      	bne.n	8000f9e <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000f10:	f04f 0201 	mov.w	r2, #1
 8000f14:	f04f 0300 	mov.w	r3, #0
 8000f18:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f22:	f107 0310 	add.w	r3, r7, #16
 8000f26:	4618      	mov	r0, r3
 8000f28:	f006 f952 	bl	80071d0 <HAL_RCCEx_PeriphCLKConfig>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000f32:	f7ff fdff 	bl	8000b34 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f36:	4b1d      	ldr	r3, [pc, #116]	@ (8000fac <HAL_UART_MspInit+0xcc>)
 8000f38:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8000f3c:	4a1b      	ldr	r2, [pc, #108]	@ (8000fac <HAL_UART_MspInit+0xcc>)
 8000f3e:	f043 0310 	orr.w	r3, r3, #16
 8000f42:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 8000f46:	4b19      	ldr	r3, [pc, #100]	@ (8000fac <HAL_UART_MspInit+0xcc>)
 8000f48:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8000f4c:	f003 0310 	and.w	r3, r3, #16
 8000f50:	60fb      	str	r3, [r7, #12]
 8000f52:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f54:	4b15      	ldr	r3, [pc, #84]	@ (8000fac <HAL_UART_MspInit+0xcc>)
 8000f56:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f5a:	4a14      	ldr	r2, [pc, #80]	@ (8000fac <HAL_UART_MspInit+0xcc>)
 8000f5c:	f043 0302 	orr.w	r3, r3, #2
 8000f60:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000f64:	4b11      	ldr	r3, [pc, #68]	@ (8000fac <HAL_UART_MspInit+0xcc>)
 8000f66:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f6a:	f003 0302 	and.w	r3, r3, #2
 8000f6e:	60bb      	str	r3, [r7, #8]
 8000f70:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = dbg_UART_TX_Pin|dbg_UART_RX_Pin;
 8000f72:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000f76:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f7a:	2302      	movs	r3, #2
 8000f7c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f80:	2300      	movs	r3, #0
 8000f82:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f86:	2300      	movs	r3, #0
 8000f88:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8000f8c:	2304      	movs	r3, #4
 8000f8e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f92:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000f96:	4619      	mov	r1, r3
 8000f98:	4805      	ldr	r0, [pc, #20]	@ (8000fb0 <HAL_UART_MspInit+0xd0>)
 8000f9a:	f002 fd4b 	bl	8003a34 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000f9e:	bf00      	nop
 8000fa0:	37e8      	adds	r7, #232	@ 0xe8
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	40011000 	.word	0x40011000
 8000fac:	58024400 	.word	0x58024400
 8000fb0:	58020400 	.word	0x58020400

08000fb4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000fb4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000fec <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000fb8:	f7ff fece 	bl	8000d58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fbc:	480c      	ldr	r0, [pc, #48]	@ (8000ff0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000fbe:	490d      	ldr	r1, [pc, #52]	@ (8000ff4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000fc0:	4a0d      	ldr	r2, [pc, #52]	@ (8000ff8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000fc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fc4:	e002      	b.n	8000fcc <LoopCopyDataInit>

08000fc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fca:	3304      	adds	r3, #4

08000fcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fd0:	d3f9      	bcc.n	8000fc6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fd2:	4a0a      	ldr	r2, [pc, #40]	@ (8000ffc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000fd4:	4c0a      	ldr	r4, [pc, #40]	@ (8001000 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000fd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fd8:	e001      	b.n	8000fde <LoopFillZerobss>

08000fda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fdc:	3204      	adds	r2, #4

08000fde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fe0:	d3fb      	bcc.n	8000fda <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fe2:	f00a ffe3 	bl	800bfac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fe6:	f7ff fd09 	bl	80009fc <main>
  bx  lr
 8000fea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000fec:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8000ff0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000ff4:	24000064 	.word	0x24000064
  ldr r2, =_sidata
 8000ff8:	0800c0b8 	.word	0x0800c0b8
  ldr r2, =_sbss
 8000ffc:	24000064 	.word	0x24000064
  ldr r4, =_ebss
 8001000:	240043a0 	.word	0x240043a0

08001004 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001004:	e7fe      	b.n	8001004 <ADC_IRQHandler>
	...

08001008 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800100e:	2003      	movs	r0, #3
 8001010:	f000 f903 	bl	800121a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001014:	f005 fec4 	bl	8006da0 <HAL_RCC_GetSysClockFreq>
 8001018:	4602      	mov	r2, r0
 800101a:	4b15      	ldr	r3, [pc, #84]	@ (8001070 <HAL_Init+0x68>)
 800101c:	699b      	ldr	r3, [r3, #24]
 800101e:	0a1b      	lsrs	r3, r3, #8
 8001020:	f003 030f 	and.w	r3, r3, #15
 8001024:	4913      	ldr	r1, [pc, #76]	@ (8001074 <HAL_Init+0x6c>)
 8001026:	5ccb      	ldrb	r3, [r1, r3]
 8001028:	f003 031f 	and.w	r3, r3, #31
 800102c:	fa22 f303 	lsr.w	r3, r2, r3
 8001030:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001032:	4b0f      	ldr	r3, [pc, #60]	@ (8001070 <HAL_Init+0x68>)
 8001034:	699b      	ldr	r3, [r3, #24]
 8001036:	f003 030f 	and.w	r3, r3, #15
 800103a:	4a0e      	ldr	r2, [pc, #56]	@ (8001074 <HAL_Init+0x6c>)
 800103c:	5cd3      	ldrb	r3, [r2, r3]
 800103e:	f003 031f 	and.w	r3, r3, #31
 8001042:	687a      	ldr	r2, [r7, #4]
 8001044:	fa22 f303 	lsr.w	r3, r2, r3
 8001048:	4a0b      	ldr	r2, [pc, #44]	@ (8001078 <HAL_Init+0x70>)
 800104a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800104c:	4a0b      	ldr	r2, [pc, #44]	@ (800107c <HAL_Init+0x74>)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001052:	200f      	movs	r0, #15
 8001054:	f7ff fd92 	bl	8000b7c <HAL_InitTick>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800105e:	2301      	movs	r3, #1
 8001060:	e002      	b.n	8001068 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001062:	f7ff fd6d 	bl	8000b40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001066:	2300      	movs	r3, #0
}
 8001068:	4618      	mov	r0, r3
 800106a:	3708      	adds	r7, #8
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	58024400 	.word	0x58024400
 8001074:	0800c068 	.word	0x0800c068
 8001078:	24000004 	.word	0x24000004
 800107c:	24000000 	.word	0x24000000

08001080 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001084:	4b06      	ldr	r3, [pc, #24]	@ (80010a0 <HAL_IncTick+0x20>)
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	461a      	mov	r2, r3
 800108a:	4b06      	ldr	r3, [pc, #24]	@ (80010a4 <HAL_IncTick+0x24>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4413      	add	r3, r2
 8001090:	4a04      	ldr	r2, [pc, #16]	@ (80010a4 <HAL_IncTick+0x24>)
 8001092:	6013      	str	r3, [r2, #0]
}
 8001094:	bf00      	nop
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop
 80010a0:	2400000c 	.word	0x2400000c
 80010a4:	24000500 	.word	0x24000500

080010a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  return uwTick;
 80010ac:	4b03      	ldr	r3, [pc, #12]	@ (80010bc <HAL_GetTick+0x14>)
 80010ae:	681b      	ldr	r3, [r3, #0]
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	24000500 	.word	0x24000500

080010c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b085      	sub	sp, #20
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	f003 0307 	and.w	r3, r3, #7
 80010ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010d0:	4b0b      	ldr	r3, [pc, #44]	@ (8001100 <__NVIC_SetPriorityGrouping+0x40>)
 80010d2:	68db      	ldr	r3, [r3, #12]
 80010d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010d6:	68ba      	ldr	r2, [r7, #8]
 80010d8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80010dc:	4013      	ands	r3, r2
 80010de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80010e8:	4b06      	ldr	r3, [pc, #24]	@ (8001104 <__NVIC_SetPriorityGrouping+0x44>)
 80010ea:	4313      	orrs	r3, r2
 80010ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010ee:	4a04      	ldr	r2, [pc, #16]	@ (8001100 <__NVIC_SetPriorityGrouping+0x40>)
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	60d3      	str	r3, [r2, #12]
}
 80010f4:	bf00      	nop
 80010f6:	3714      	adds	r7, #20
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr
 8001100:	e000ed00 	.word	0xe000ed00
 8001104:	05fa0000 	.word	0x05fa0000

08001108 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800110c:	4b04      	ldr	r3, [pc, #16]	@ (8001120 <__NVIC_GetPriorityGrouping+0x18>)
 800110e:	68db      	ldr	r3, [r3, #12]
 8001110:	0a1b      	lsrs	r3, r3, #8
 8001112:	f003 0307 	and.w	r3, r3, #7
}
 8001116:	4618      	mov	r0, r3
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr
 8001120:	e000ed00 	.word	0xe000ed00

08001124 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	4603      	mov	r3, r0
 800112c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800112e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001132:	2b00      	cmp	r3, #0
 8001134:	db0b      	blt.n	800114e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001136:	88fb      	ldrh	r3, [r7, #6]
 8001138:	f003 021f 	and.w	r2, r3, #31
 800113c:	4907      	ldr	r1, [pc, #28]	@ (800115c <__NVIC_EnableIRQ+0x38>)
 800113e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001142:	095b      	lsrs	r3, r3, #5
 8001144:	2001      	movs	r0, #1
 8001146:	fa00 f202 	lsl.w	r2, r0, r2
 800114a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800114e:	bf00      	nop
 8001150:	370c      	adds	r7, #12
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	e000e100 	.word	0xe000e100

08001160 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
 8001166:	4603      	mov	r3, r0
 8001168:	6039      	str	r1, [r7, #0]
 800116a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800116c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001170:	2b00      	cmp	r3, #0
 8001172:	db0a      	blt.n	800118a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	b2da      	uxtb	r2, r3
 8001178:	490c      	ldr	r1, [pc, #48]	@ (80011ac <__NVIC_SetPriority+0x4c>)
 800117a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800117e:	0112      	lsls	r2, r2, #4
 8001180:	b2d2      	uxtb	r2, r2
 8001182:	440b      	add	r3, r1
 8001184:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001188:	e00a      	b.n	80011a0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	b2da      	uxtb	r2, r3
 800118e:	4908      	ldr	r1, [pc, #32]	@ (80011b0 <__NVIC_SetPriority+0x50>)
 8001190:	88fb      	ldrh	r3, [r7, #6]
 8001192:	f003 030f 	and.w	r3, r3, #15
 8001196:	3b04      	subs	r3, #4
 8001198:	0112      	lsls	r2, r2, #4
 800119a:	b2d2      	uxtb	r2, r2
 800119c:	440b      	add	r3, r1
 800119e:	761a      	strb	r2, [r3, #24]
}
 80011a0:	bf00      	nop
 80011a2:	370c      	adds	r7, #12
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr
 80011ac:	e000e100 	.word	0xe000e100
 80011b0:	e000ed00 	.word	0xe000ed00

080011b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b089      	sub	sp, #36	@ 0x24
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	60f8      	str	r0, [r7, #12]
 80011bc:	60b9      	str	r1, [r7, #8]
 80011be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	f003 0307 	and.w	r3, r3, #7
 80011c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011c8:	69fb      	ldr	r3, [r7, #28]
 80011ca:	f1c3 0307 	rsb	r3, r3, #7
 80011ce:	2b04      	cmp	r3, #4
 80011d0:	bf28      	it	cs
 80011d2:	2304      	movcs	r3, #4
 80011d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011d6:	69fb      	ldr	r3, [r7, #28]
 80011d8:	3304      	adds	r3, #4
 80011da:	2b06      	cmp	r3, #6
 80011dc:	d902      	bls.n	80011e4 <NVIC_EncodePriority+0x30>
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	3b03      	subs	r3, #3
 80011e2:	e000      	b.n	80011e6 <NVIC_EncodePriority+0x32>
 80011e4:	2300      	movs	r3, #0
 80011e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011e8:	f04f 32ff 	mov.w	r2, #4294967295
 80011ec:	69bb      	ldr	r3, [r7, #24]
 80011ee:	fa02 f303 	lsl.w	r3, r2, r3
 80011f2:	43da      	mvns	r2, r3
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	401a      	ands	r2, r3
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	fa01 f303 	lsl.w	r3, r1, r3
 8001206:	43d9      	mvns	r1, r3
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800120c:	4313      	orrs	r3, r2
         );
}
 800120e:	4618      	mov	r0, r3
 8001210:	3724      	adds	r7, #36	@ 0x24
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr

0800121a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800121a:	b580      	push	{r7, lr}
 800121c:	b082      	sub	sp, #8
 800121e:	af00      	add	r7, sp, #0
 8001220:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001222:	6878      	ldr	r0, [r7, #4]
 8001224:	f7ff ff4c 	bl	80010c0 <__NVIC_SetPriorityGrouping>
}
 8001228:	bf00      	nop
 800122a:	3708      	adds	r7, #8
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}

08001230 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b086      	sub	sp, #24
 8001234:	af00      	add	r7, sp, #0
 8001236:	4603      	mov	r3, r0
 8001238:	60b9      	str	r1, [r7, #8]
 800123a:	607a      	str	r2, [r7, #4]
 800123c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800123e:	f7ff ff63 	bl	8001108 <__NVIC_GetPriorityGrouping>
 8001242:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001244:	687a      	ldr	r2, [r7, #4]
 8001246:	68b9      	ldr	r1, [r7, #8]
 8001248:	6978      	ldr	r0, [r7, #20]
 800124a:	f7ff ffb3 	bl	80011b4 <NVIC_EncodePriority>
 800124e:	4602      	mov	r2, r0
 8001250:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001254:	4611      	mov	r1, r2
 8001256:	4618      	mov	r0, r3
 8001258:	f7ff ff82 	bl	8001160 <__NVIC_SetPriority>
}
 800125c:	bf00      	nop
 800125e:	3718      	adds	r7, #24
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}

08001264 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	4603      	mov	r3, r0
 800126c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800126e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001272:	4618      	mov	r0, r3
 8001274:	f7ff ff56 	bl	8001124 <__NVIC_EnableIRQ>
}
 8001278:	bf00      	nop
 800127a:	3708      	adds	r7, #8
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}

08001280 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b086      	sub	sp, #24
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001288:	f7ff ff0e 	bl	80010a8 <HAL_GetTick>
 800128c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d101      	bne.n	8001298 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001294:	2301      	movs	r3, #1
 8001296:	e37d      	b.n	8001994 <HAL_DMA_Init+0x714>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a66      	ldr	r2, [pc, #408]	@ (8001438 <HAL_DMA_Init+0x1b8>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d04a      	beq.n	8001338 <HAL_DMA_Init+0xb8>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4a65      	ldr	r2, [pc, #404]	@ (800143c <HAL_DMA_Init+0x1bc>)
 80012a8:	4293      	cmp	r3, r2
 80012aa:	d045      	beq.n	8001338 <HAL_DMA_Init+0xb8>
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a63      	ldr	r2, [pc, #396]	@ (8001440 <HAL_DMA_Init+0x1c0>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d040      	beq.n	8001338 <HAL_DMA_Init+0xb8>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4a62      	ldr	r2, [pc, #392]	@ (8001444 <HAL_DMA_Init+0x1c4>)
 80012bc:	4293      	cmp	r3, r2
 80012be:	d03b      	beq.n	8001338 <HAL_DMA_Init+0xb8>
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a60      	ldr	r2, [pc, #384]	@ (8001448 <HAL_DMA_Init+0x1c8>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d036      	beq.n	8001338 <HAL_DMA_Init+0xb8>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4a5f      	ldr	r2, [pc, #380]	@ (800144c <HAL_DMA_Init+0x1cc>)
 80012d0:	4293      	cmp	r3, r2
 80012d2:	d031      	beq.n	8001338 <HAL_DMA_Init+0xb8>
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a5d      	ldr	r2, [pc, #372]	@ (8001450 <HAL_DMA_Init+0x1d0>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d02c      	beq.n	8001338 <HAL_DMA_Init+0xb8>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4a5c      	ldr	r2, [pc, #368]	@ (8001454 <HAL_DMA_Init+0x1d4>)
 80012e4:	4293      	cmp	r3, r2
 80012e6:	d027      	beq.n	8001338 <HAL_DMA_Init+0xb8>
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a5a      	ldr	r2, [pc, #360]	@ (8001458 <HAL_DMA_Init+0x1d8>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d022      	beq.n	8001338 <HAL_DMA_Init+0xb8>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4a59      	ldr	r2, [pc, #356]	@ (800145c <HAL_DMA_Init+0x1dc>)
 80012f8:	4293      	cmp	r3, r2
 80012fa:	d01d      	beq.n	8001338 <HAL_DMA_Init+0xb8>
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a57      	ldr	r2, [pc, #348]	@ (8001460 <HAL_DMA_Init+0x1e0>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d018      	beq.n	8001338 <HAL_DMA_Init+0xb8>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4a56      	ldr	r2, [pc, #344]	@ (8001464 <HAL_DMA_Init+0x1e4>)
 800130c:	4293      	cmp	r3, r2
 800130e:	d013      	beq.n	8001338 <HAL_DMA_Init+0xb8>
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a54      	ldr	r2, [pc, #336]	@ (8001468 <HAL_DMA_Init+0x1e8>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d00e      	beq.n	8001338 <HAL_DMA_Init+0xb8>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4a53      	ldr	r2, [pc, #332]	@ (800146c <HAL_DMA_Init+0x1ec>)
 8001320:	4293      	cmp	r3, r2
 8001322:	d009      	beq.n	8001338 <HAL_DMA_Init+0xb8>
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a51      	ldr	r2, [pc, #324]	@ (8001470 <HAL_DMA_Init+0x1f0>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d004      	beq.n	8001338 <HAL_DMA_Init+0xb8>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4a50      	ldr	r2, [pc, #320]	@ (8001474 <HAL_DMA_Init+0x1f4>)
 8001334:	4293      	cmp	r3, r2
 8001336:	d101      	bne.n	800133c <HAL_DMA_Init+0xbc>
 8001338:	2301      	movs	r3, #1
 800133a:	e000      	b.n	800133e <HAL_DMA_Init+0xbe>
 800133c:	2300      	movs	r3, #0
 800133e:	2b00      	cmp	r3, #0
 8001340:	f000 813c 	beq.w	80015bc <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2202      	movs	r2, #2
 8001348:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2200      	movs	r2, #0
 8001350:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a37      	ldr	r2, [pc, #220]	@ (8001438 <HAL_DMA_Init+0x1b8>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d04a      	beq.n	80013f4 <HAL_DMA_Init+0x174>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4a36      	ldr	r2, [pc, #216]	@ (800143c <HAL_DMA_Init+0x1bc>)
 8001364:	4293      	cmp	r3, r2
 8001366:	d045      	beq.n	80013f4 <HAL_DMA_Init+0x174>
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a34      	ldr	r2, [pc, #208]	@ (8001440 <HAL_DMA_Init+0x1c0>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d040      	beq.n	80013f4 <HAL_DMA_Init+0x174>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a33      	ldr	r2, [pc, #204]	@ (8001444 <HAL_DMA_Init+0x1c4>)
 8001378:	4293      	cmp	r3, r2
 800137a:	d03b      	beq.n	80013f4 <HAL_DMA_Init+0x174>
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a31      	ldr	r2, [pc, #196]	@ (8001448 <HAL_DMA_Init+0x1c8>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d036      	beq.n	80013f4 <HAL_DMA_Init+0x174>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4a30      	ldr	r2, [pc, #192]	@ (800144c <HAL_DMA_Init+0x1cc>)
 800138c:	4293      	cmp	r3, r2
 800138e:	d031      	beq.n	80013f4 <HAL_DMA_Init+0x174>
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a2e      	ldr	r2, [pc, #184]	@ (8001450 <HAL_DMA_Init+0x1d0>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d02c      	beq.n	80013f4 <HAL_DMA_Init+0x174>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4a2d      	ldr	r2, [pc, #180]	@ (8001454 <HAL_DMA_Init+0x1d4>)
 80013a0:	4293      	cmp	r3, r2
 80013a2:	d027      	beq.n	80013f4 <HAL_DMA_Init+0x174>
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a2b      	ldr	r2, [pc, #172]	@ (8001458 <HAL_DMA_Init+0x1d8>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d022      	beq.n	80013f4 <HAL_DMA_Init+0x174>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4a2a      	ldr	r2, [pc, #168]	@ (800145c <HAL_DMA_Init+0x1dc>)
 80013b4:	4293      	cmp	r3, r2
 80013b6:	d01d      	beq.n	80013f4 <HAL_DMA_Init+0x174>
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a28      	ldr	r2, [pc, #160]	@ (8001460 <HAL_DMA_Init+0x1e0>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d018      	beq.n	80013f4 <HAL_DMA_Init+0x174>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4a27      	ldr	r2, [pc, #156]	@ (8001464 <HAL_DMA_Init+0x1e4>)
 80013c8:	4293      	cmp	r3, r2
 80013ca:	d013      	beq.n	80013f4 <HAL_DMA_Init+0x174>
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a25      	ldr	r2, [pc, #148]	@ (8001468 <HAL_DMA_Init+0x1e8>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d00e      	beq.n	80013f4 <HAL_DMA_Init+0x174>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4a24      	ldr	r2, [pc, #144]	@ (800146c <HAL_DMA_Init+0x1ec>)
 80013dc:	4293      	cmp	r3, r2
 80013de:	d009      	beq.n	80013f4 <HAL_DMA_Init+0x174>
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a22      	ldr	r2, [pc, #136]	@ (8001470 <HAL_DMA_Init+0x1f0>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d004      	beq.n	80013f4 <HAL_DMA_Init+0x174>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4a21      	ldr	r2, [pc, #132]	@ (8001474 <HAL_DMA_Init+0x1f4>)
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d108      	bne.n	8001406 <HAL_DMA_Init+0x186>
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	681a      	ldr	r2, [r3, #0]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f022 0201 	bic.w	r2, r2, #1
 8001402:	601a      	str	r2, [r3, #0]
 8001404:	e007      	b.n	8001416 <HAL_DMA_Init+0x196>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	681a      	ldr	r2, [r3, #0]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f022 0201 	bic.w	r2, r2, #1
 8001414:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001416:	e02f      	b.n	8001478 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001418:	f7ff fe46 	bl	80010a8 <HAL_GetTick>
 800141c:	4602      	mov	r2, r0
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	1ad3      	subs	r3, r2, r3
 8001422:	2b05      	cmp	r3, #5
 8001424:	d928      	bls.n	8001478 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2220      	movs	r2, #32
 800142a:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2203      	movs	r2, #3
 8001430:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8001434:	2301      	movs	r3, #1
 8001436:	e2ad      	b.n	8001994 <HAL_DMA_Init+0x714>
 8001438:	40020010 	.word	0x40020010
 800143c:	40020028 	.word	0x40020028
 8001440:	40020040 	.word	0x40020040
 8001444:	40020058 	.word	0x40020058
 8001448:	40020070 	.word	0x40020070
 800144c:	40020088 	.word	0x40020088
 8001450:	400200a0 	.word	0x400200a0
 8001454:	400200b8 	.word	0x400200b8
 8001458:	40020410 	.word	0x40020410
 800145c:	40020428 	.word	0x40020428
 8001460:	40020440 	.word	0x40020440
 8001464:	40020458 	.word	0x40020458
 8001468:	40020470 	.word	0x40020470
 800146c:	40020488 	.word	0x40020488
 8001470:	400204a0 	.word	0x400204a0
 8001474:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f003 0301 	and.w	r3, r3, #1
 8001482:	2b00      	cmp	r3, #0
 8001484:	d1c8      	bne.n	8001418 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800148e:	697a      	ldr	r2, [r7, #20]
 8001490:	4b73      	ldr	r3, [pc, #460]	@ (8001660 <HAL_DMA_Init+0x3e0>)
 8001492:	4013      	ands	r3, r2
 8001494:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800149e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	691b      	ldr	r3, [r3, #16]
 80014a4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014aa:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	699b      	ldr	r3, [r3, #24]
 80014b0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014b6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6a1b      	ldr	r3, [r3, #32]
 80014bc:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80014be:	697a      	ldr	r2, [r7, #20]
 80014c0:	4313      	orrs	r3, r2
 80014c2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014c8:	2b04      	cmp	r3, #4
 80014ca:	d107      	bne.n	80014dc <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014d4:	4313      	orrs	r3, r2
 80014d6:	697a      	ldr	r2, [r7, #20]
 80014d8:	4313      	orrs	r3, r2
 80014da:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	2b28      	cmp	r3, #40	@ 0x28
 80014e2:	d903      	bls.n	80014ec <HAL_DMA_Init+0x26c>
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	2b2e      	cmp	r3, #46	@ 0x2e
 80014ea:	d91f      	bls.n	800152c <HAL_DMA_Init+0x2ac>
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	2b3e      	cmp	r3, #62	@ 0x3e
 80014f2:	d903      	bls.n	80014fc <HAL_DMA_Init+0x27c>
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	2b42      	cmp	r3, #66	@ 0x42
 80014fa:	d917      	bls.n	800152c <HAL_DMA_Init+0x2ac>
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	2b46      	cmp	r3, #70	@ 0x46
 8001502:	d903      	bls.n	800150c <HAL_DMA_Init+0x28c>
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	2b48      	cmp	r3, #72	@ 0x48
 800150a:	d90f      	bls.n	800152c <HAL_DMA_Init+0x2ac>
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	2b4e      	cmp	r3, #78	@ 0x4e
 8001512:	d903      	bls.n	800151c <HAL_DMA_Init+0x29c>
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	2b52      	cmp	r3, #82	@ 0x52
 800151a:	d907      	bls.n	800152c <HAL_DMA_Init+0x2ac>
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	2b73      	cmp	r3, #115	@ 0x73
 8001522:	d905      	bls.n	8001530 <HAL_DMA_Init+0x2b0>
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	2b77      	cmp	r3, #119	@ 0x77
 800152a:	d801      	bhi.n	8001530 <HAL_DMA_Init+0x2b0>
 800152c:	2301      	movs	r3, #1
 800152e:	e000      	b.n	8001532 <HAL_DMA_Init+0x2b2>
 8001530:	2300      	movs	r3, #0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d003      	beq.n	800153e <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800153c:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	697a      	ldr	r2, [r7, #20]
 8001544:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	695b      	ldr	r3, [r3, #20]
 800154c:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	f023 0307 	bic.w	r3, r3, #7
 8001554:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800155a:	697a      	ldr	r2, [r7, #20]
 800155c:	4313      	orrs	r3, r2
 800155e:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001564:	2b04      	cmp	r3, #4
 8001566:	d117      	bne.n	8001598 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800156c:	697a      	ldr	r2, [r7, #20]
 800156e:	4313      	orrs	r3, r2
 8001570:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001576:	2b00      	cmp	r3, #0
 8001578:	d00e      	beq.n	8001598 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800157a:	6878      	ldr	r0, [r7, #4]
 800157c:	f002 f8d0 	bl	8003720 <DMA_CheckFifoParam>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d008      	beq.n	8001598 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2240      	movs	r2, #64	@ 0x40
 800158a:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2201      	movs	r2, #1
 8001590:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8001594:	2301      	movs	r3, #1
 8001596:	e1fd      	b.n	8001994 <HAL_DMA_Init+0x714>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	697a      	ldr	r2, [r7, #20]
 800159e:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80015a0:	6878      	ldr	r0, [r7, #4]
 80015a2:	f002 f80b 	bl	80035bc <DMA_CalcBaseAndBitshift>
 80015a6:	4603      	mov	r3, r0
 80015a8:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015ae:	f003 031f 	and.w	r3, r3, #31
 80015b2:	223f      	movs	r2, #63	@ 0x3f
 80015b4:	409a      	lsls	r2, r3
 80015b6:	68bb      	ldr	r3, [r7, #8]
 80015b8:	609a      	str	r2, [r3, #8]
 80015ba:	e0fd      	b.n	80017b8 <HAL_DMA_Init+0x538>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a28      	ldr	r2, [pc, #160]	@ (8001664 <HAL_DMA_Init+0x3e4>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d04a      	beq.n	800165c <HAL_DMA_Init+0x3dc>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4a27      	ldr	r2, [pc, #156]	@ (8001668 <HAL_DMA_Init+0x3e8>)
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d045      	beq.n	800165c <HAL_DMA_Init+0x3dc>
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a25      	ldr	r2, [pc, #148]	@ (800166c <HAL_DMA_Init+0x3ec>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d040      	beq.n	800165c <HAL_DMA_Init+0x3dc>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4a24      	ldr	r2, [pc, #144]	@ (8001670 <HAL_DMA_Init+0x3f0>)
 80015e0:	4293      	cmp	r3, r2
 80015e2:	d03b      	beq.n	800165c <HAL_DMA_Init+0x3dc>
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a22      	ldr	r2, [pc, #136]	@ (8001674 <HAL_DMA_Init+0x3f4>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d036      	beq.n	800165c <HAL_DMA_Init+0x3dc>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4a21      	ldr	r2, [pc, #132]	@ (8001678 <HAL_DMA_Init+0x3f8>)
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d031      	beq.n	800165c <HAL_DMA_Init+0x3dc>
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a1f      	ldr	r2, [pc, #124]	@ (800167c <HAL_DMA_Init+0x3fc>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d02c      	beq.n	800165c <HAL_DMA_Init+0x3dc>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4a1e      	ldr	r2, [pc, #120]	@ (8001680 <HAL_DMA_Init+0x400>)
 8001608:	4293      	cmp	r3, r2
 800160a:	d027      	beq.n	800165c <HAL_DMA_Init+0x3dc>
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a1c      	ldr	r2, [pc, #112]	@ (8001684 <HAL_DMA_Init+0x404>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d022      	beq.n	800165c <HAL_DMA_Init+0x3dc>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a1b      	ldr	r2, [pc, #108]	@ (8001688 <HAL_DMA_Init+0x408>)
 800161c:	4293      	cmp	r3, r2
 800161e:	d01d      	beq.n	800165c <HAL_DMA_Init+0x3dc>
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a19      	ldr	r2, [pc, #100]	@ (800168c <HAL_DMA_Init+0x40c>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d018      	beq.n	800165c <HAL_DMA_Init+0x3dc>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a18      	ldr	r2, [pc, #96]	@ (8001690 <HAL_DMA_Init+0x410>)
 8001630:	4293      	cmp	r3, r2
 8001632:	d013      	beq.n	800165c <HAL_DMA_Init+0x3dc>
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a16      	ldr	r2, [pc, #88]	@ (8001694 <HAL_DMA_Init+0x414>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d00e      	beq.n	800165c <HAL_DMA_Init+0x3dc>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a15      	ldr	r2, [pc, #84]	@ (8001698 <HAL_DMA_Init+0x418>)
 8001644:	4293      	cmp	r3, r2
 8001646:	d009      	beq.n	800165c <HAL_DMA_Init+0x3dc>
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a13      	ldr	r2, [pc, #76]	@ (800169c <HAL_DMA_Init+0x41c>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d004      	beq.n	800165c <HAL_DMA_Init+0x3dc>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a12      	ldr	r2, [pc, #72]	@ (80016a0 <HAL_DMA_Init+0x420>)
 8001658:	4293      	cmp	r3, r2
 800165a:	d123      	bne.n	80016a4 <HAL_DMA_Init+0x424>
 800165c:	2301      	movs	r3, #1
 800165e:	e022      	b.n	80016a6 <HAL_DMA_Init+0x426>
 8001660:	fe10803f 	.word	0xfe10803f
 8001664:	48022c08 	.word	0x48022c08
 8001668:	48022c1c 	.word	0x48022c1c
 800166c:	48022c30 	.word	0x48022c30
 8001670:	48022c44 	.word	0x48022c44
 8001674:	48022c58 	.word	0x48022c58
 8001678:	48022c6c 	.word	0x48022c6c
 800167c:	48022c80 	.word	0x48022c80
 8001680:	48022c94 	.word	0x48022c94
 8001684:	58025408 	.word	0x58025408
 8001688:	5802541c 	.word	0x5802541c
 800168c:	58025430 	.word	0x58025430
 8001690:	58025444 	.word	0x58025444
 8001694:	58025458 	.word	0x58025458
 8001698:	5802546c 	.word	0x5802546c
 800169c:	58025480 	.word	0x58025480
 80016a0:	58025494 	.word	0x58025494
 80016a4:	2300      	movs	r3, #0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d07d      	beq.n	80017a6 <HAL_DMA_Init+0x526>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4a7f      	ldr	r2, [pc, #508]	@ (80018ac <HAL_DMA_Init+0x62c>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d021      	beq.n	80016f8 <HAL_DMA_Init+0x478>
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a7d      	ldr	r2, [pc, #500]	@ (80018b0 <HAL_DMA_Init+0x630>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d01c      	beq.n	80016f8 <HAL_DMA_Init+0x478>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a7c      	ldr	r2, [pc, #496]	@ (80018b4 <HAL_DMA_Init+0x634>)
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d017      	beq.n	80016f8 <HAL_DMA_Init+0x478>
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a7a      	ldr	r2, [pc, #488]	@ (80018b8 <HAL_DMA_Init+0x638>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d012      	beq.n	80016f8 <HAL_DMA_Init+0x478>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a79      	ldr	r2, [pc, #484]	@ (80018bc <HAL_DMA_Init+0x63c>)
 80016d8:	4293      	cmp	r3, r2
 80016da:	d00d      	beq.n	80016f8 <HAL_DMA_Init+0x478>
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a77      	ldr	r2, [pc, #476]	@ (80018c0 <HAL_DMA_Init+0x640>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d008      	beq.n	80016f8 <HAL_DMA_Init+0x478>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4a76      	ldr	r2, [pc, #472]	@ (80018c4 <HAL_DMA_Init+0x644>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d003      	beq.n	80016f8 <HAL_DMA_Init+0x478>
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a74      	ldr	r2, [pc, #464]	@ (80018c8 <HAL_DMA_Init+0x648>)
 80016f6:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2202      	movs	r2, #2
 80016fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2200      	movs	r2, #0
 8001704:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001710:	697a      	ldr	r2, [r7, #20]
 8001712:	4b6e      	ldr	r3, [pc, #440]	@ (80018cc <HAL_DMA_Init+0x64c>)
 8001714:	4013      	ands	r3, r2
 8001716:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	689b      	ldr	r3, [r3, #8]
 800171c:	2b40      	cmp	r3, #64	@ 0x40
 800171e:	d008      	beq.n	8001732 <HAL_DMA_Init+0x4b2>
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	689b      	ldr	r3, [r3, #8]
 8001724:	2b80      	cmp	r3, #128	@ 0x80
 8001726:	d102      	bne.n	800172e <HAL_DMA_Init+0x4ae>
 8001728:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800172c:	e002      	b.n	8001734 <HAL_DMA_Init+0x4b4>
 800172e:	2300      	movs	r3, #0
 8001730:	e000      	b.n	8001734 <HAL_DMA_Init+0x4b4>
 8001732:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001734:	687a      	ldr	r2, [r7, #4]
 8001736:	68d2      	ldr	r2, [r2, #12]
 8001738:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800173a:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	691b      	ldr	r3, [r3, #16]
 8001740:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001742:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	695b      	ldr	r3, [r3, #20]
 8001748:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800174a:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	699b      	ldr	r3, [r3, #24]
 8001750:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001752:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	69db      	ldr	r3, [r3, #28]
 8001758:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800175a:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6a1b      	ldr	r3, [r3, #32]
 8001760:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001762:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001764:	697a      	ldr	r2, [r7, #20]
 8001766:	4313      	orrs	r3, r2
 8001768:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	697a      	ldr	r2, [r7, #20]
 8001770:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	461a      	mov	r2, r3
 8001778:	4b55      	ldr	r3, [pc, #340]	@ (80018d0 <HAL_DMA_Init+0x650>)
 800177a:	4413      	add	r3, r2
 800177c:	4a55      	ldr	r2, [pc, #340]	@ (80018d4 <HAL_DMA_Init+0x654>)
 800177e:	fba2 2303 	umull	r2, r3, r2, r3
 8001782:	091b      	lsrs	r3, r3, #4
 8001784:	009a      	lsls	r2, r3, #2
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800178a:	6878      	ldr	r0, [r7, #4]
 800178c:	f001 ff16 	bl	80035bc <DMA_CalcBaseAndBitshift>
 8001790:	4603      	mov	r3, r0
 8001792:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001798:	f003 031f 	and.w	r3, r3, #31
 800179c:	2201      	movs	r2, #1
 800179e:	409a      	lsls	r2, r3
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	605a      	str	r2, [r3, #4]
 80017a4:	e008      	b.n	80017b8 <HAL_DMA_Init+0x538>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2240      	movs	r2, #64	@ 0x40
 80017aa:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2203      	movs	r2, #3
 80017b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 80017b4:	2301      	movs	r3, #1
 80017b6:	e0ed      	b.n	8001994 <HAL_DMA_Init+0x714>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a46      	ldr	r2, [pc, #280]	@ (80018d8 <HAL_DMA_Init+0x658>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d072      	beq.n	80018a8 <HAL_DMA_Init+0x628>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a45      	ldr	r2, [pc, #276]	@ (80018dc <HAL_DMA_Init+0x65c>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d06d      	beq.n	80018a8 <HAL_DMA_Init+0x628>
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a43      	ldr	r2, [pc, #268]	@ (80018e0 <HAL_DMA_Init+0x660>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d068      	beq.n	80018a8 <HAL_DMA_Init+0x628>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4a42      	ldr	r2, [pc, #264]	@ (80018e4 <HAL_DMA_Init+0x664>)
 80017dc:	4293      	cmp	r3, r2
 80017de:	d063      	beq.n	80018a8 <HAL_DMA_Init+0x628>
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a40      	ldr	r2, [pc, #256]	@ (80018e8 <HAL_DMA_Init+0x668>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d05e      	beq.n	80018a8 <HAL_DMA_Init+0x628>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4a3f      	ldr	r2, [pc, #252]	@ (80018ec <HAL_DMA_Init+0x66c>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d059      	beq.n	80018a8 <HAL_DMA_Init+0x628>
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a3d      	ldr	r2, [pc, #244]	@ (80018f0 <HAL_DMA_Init+0x670>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d054      	beq.n	80018a8 <HAL_DMA_Init+0x628>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a3c      	ldr	r2, [pc, #240]	@ (80018f4 <HAL_DMA_Init+0x674>)
 8001804:	4293      	cmp	r3, r2
 8001806:	d04f      	beq.n	80018a8 <HAL_DMA_Init+0x628>
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a3a      	ldr	r2, [pc, #232]	@ (80018f8 <HAL_DMA_Init+0x678>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d04a      	beq.n	80018a8 <HAL_DMA_Init+0x628>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a39      	ldr	r2, [pc, #228]	@ (80018fc <HAL_DMA_Init+0x67c>)
 8001818:	4293      	cmp	r3, r2
 800181a:	d045      	beq.n	80018a8 <HAL_DMA_Init+0x628>
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a37      	ldr	r2, [pc, #220]	@ (8001900 <HAL_DMA_Init+0x680>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d040      	beq.n	80018a8 <HAL_DMA_Init+0x628>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a36      	ldr	r2, [pc, #216]	@ (8001904 <HAL_DMA_Init+0x684>)
 800182c:	4293      	cmp	r3, r2
 800182e:	d03b      	beq.n	80018a8 <HAL_DMA_Init+0x628>
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a34      	ldr	r2, [pc, #208]	@ (8001908 <HAL_DMA_Init+0x688>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d036      	beq.n	80018a8 <HAL_DMA_Init+0x628>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a33      	ldr	r2, [pc, #204]	@ (800190c <HAL_DMA_Init+0x68c>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d031      	beq.n	80018a8 <HAL_DMA_Init+0x628>
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a31      	ldr	r2, [pc, #196]	@ (8001910 <HAL_DMA_Init+0x690>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d02c      	beq.n	80018a8 <HAL_DMA_Init+0x628>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4a30      	ldr	r2, [pc, #192]	@ (8001914 <HAL_DMA_Init+0x694>)
 8001854:	4293      	cmp	r3, r2
 8001856:	d027      	beq.n	80018a8 <HAL_DMA_Init+0x628>
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a13      	ldr	r2, [pc, #76]	@ (80018ac <HAL_DMA_Init+0x62c>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d022      	beq.n	80018a8 <HAL_DMA_Init+0x628>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a12      	ldr	r2, [pc, #72]	@ (80018b0 <HAL_DMA_Init+0x630>)
 8001868:	4293      	cmp	r3, r2
 800186a:	d01d      	beq.n	80018a8 <HAL_DMA_Init+0x628>
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a10      	ldr	r2, [pc, #64]	@ (80018b4 <HAL_DMA_Init+0x634>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d018      	beq.n	80018a8 <HAL_DMA_Init+0x628>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a0f      	ldr	r2, [pc, #60]	@ (80018b8 <HAL_DMA_Init+0x638>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d013      	beq.n	80018a8 <HAL_DMA_Init+0x628>
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a0d      	ldr	r2, [pc, #52]	@ (80018bc <HAL_DMA_Init+0x63c>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d00e      	beq.n	80018a8 <HAL_DMA_Init+0x628>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a0c      	ldr	r2, [pc, #48]	@ (80018c0 <HAL_DMA_Init+0x640>)
 8001890:	4293      	cmp	r3, r2
 8001892:	d009      	beq.n	80018a8 <HAL_DMA_Init+0x628>
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a0a      	ldr	r2, [pc, #40]	@ (80018c4 <HAL_DMA_Init+0x644>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d004      	beq.n	80018a8 <HAL_DMA_Init+0x628>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a09      	ldr	r2, [pc, #36]	@ (80018c8 <HAL_DMA_Init+0x648>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d137      	bne.n	8001918 <HAL_DMA_Init+0x698>
 80018a8:	2301      	movs	r3, #1
 80018aa:	e036      	b.n	800191a <HAL_DMA_Init+0x69a>
 80018ac:	58025408 	.word	0x58025408
 80018b0:	5802541c 	.word	0x5802541c
 80018b4:	58025430 	.word	0x58025430
 80018b8:	58025444 	.word	0x58025444
 80018bc:	58025458 	.word	0x58025458
 80018c0:	5802546c 	.word	0x5802546c
 80018c4:	58025480 	.word	0x58025480
 80018c8:	58025494 	.word	0x58025494
 80018cc:	fffe000f 	.word	0xfffe000f
 80018d0:	a7fdabf8 	.word	0xa7fdabf8
 80018d4:	cccccccd 	.word	0xcccccccd
 80018d8:	40020010 	.word	0x40020010
 80018dc:	40020028 	.word	0x40020028
 80018e0:	40020040 	.word	0x40020040
 80018e4:	40020058 	.word	0x40020058
 80018e8:	40020070 	.word	0x40020070
 80018ec:	40020088 	.word	0x40020088
 80018f0:	400200a0 	.word	0x400200a0
 80018f4:	400200b8 	.word	0x400200b8
 80018f8:	40020410 	.word	0x40020410
 80018fc:	40020428 	.word	0x40020428
 8001900:	40020440 	.word	0x40020440
 8001904:	40020458 	.word	0x40020458
 8001908:	40020470 	.word	0x40020470
 800190c:	40020488 	.word	0x40020488
 8001910:	400204a0 	.word	0x400204a0
 8001914:	400204b8 	.word	0x400204b8
 8001918:	2300      	movs	r3, #0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d032      	beq.n	8001984 <HAL_DMA_Init+0x704>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800191e:	6878      	ldr	r0, [r7, #4]
 8001920:	f001 ff7a 	bl	8003818 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	2b80      	cmp	r3, #128	@ 0x80
 800192a:	d102      	bne.n	8001932 <HAL_DMA_Init+0x6b2>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2200      	movs	r2, #0
 8001930:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	685a      	ldr	r2, [r3, #4]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800193a:	b2d2      	uxtb	r2, r2
 800193c:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001942:	687a      	ldr	r2, [r7, #4]
 8001944:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001946:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d010      	beq.n	8001972 <HAL_DMA_Init+0x6f2>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	2b08      	cmp	r3, #8
 8001956:	d80c      	bhi.n	8001972 <HAL_DMA_Init+0x6f2>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001958:	6878      	ldr	r0, [r7, #4]
 800195a:	f001 fff7 	bl	800394c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001962:	2200      	movs	r2, #0
 8001964:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800196a:	687a      	ldr	r2, [r7, #4]
 800196c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800196e:	605a      	str	r2, [r3, #4]
 8001970:	e008      	b.n	8001984 <HAL_DMA_Init+0x704>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2200      	movs	r2, #0
 8001976:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2200      	movs	r2, #0
 800197c:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2200      	movs	r2, #0
 8001982:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2200      	movs	r2, #0
 8001988:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2201      	movs	r2, #1
 800198e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001992:	2300      	movs	r3, #0
}
 8001994:	4618      	mov	r0, r3
 8001996:	3718      	adds	r7, #24
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}

0800199c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b086      	sub	sp, #24
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	60f8      	str	r0, [r7, #12]
 80019a4:	60b9      	str	r1, [r7, #8]
 80019a6:	607a      	str	r2, [r7, #4]
 80019a8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80019aa:	2300      	movs	r3, #0
 80019ac:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d101      	bne.n	80019b8 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80019b4:	2301      	movs	r3, #1
 80019b6:	e226      	b.n	8001e06 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80019be:	2b01      	cmp	r3, #1
 80019c0:	d101      	bne.n	80019c6 <HAL_DMA_Start_IT+0x2a>
 80019c2:	2302      	movs	r3, #2
 80019c4:	e21f      	b.n	8001e06 <HAL_DMA_Start_IT+0x46a>
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	2201      	movs	r2, #1
 80019ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80019d4:	b2db      	uxtb	r3, r3
 80019d6:	2b01      	cmp	r3, #1
 80019d8:	f040 820a 	bne.w	8001df0 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	2202      	movs	r2, #2
 80019e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	2200      	movs	r2, #0
 80019e8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a68      	ldr	r2, [pc, #416]	@ (8001b90 <HAL_DMA_Start_IT+0x1f4>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d04a      	beq.n	8001a8a <HAL_DMA_Start_IT+0xee>
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a66      	ldr	r2, [pc, #408]	@ (8001b94 <HAL_DMA_Start_IT+0x1f8>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d045      	beq.n	8001a8a <HAL_DMA_Start_IT+0xee>
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a65      	ldr	r2, [pc, #404]	@ (8001b98 <HAL_DMA_Start_IT+0x1fc>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d040      	beq.n	8001a8a <HAL_DMA_Start_IT+0xee>
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a63      	ldr	r2, [pc, #396]	@ (8001b9c <HAL_DMA_Start_IT+0x200>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d03b      	beq.n	8001a8a <HAL_DMA_Start_IT+0xee>
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a62      	ldr	r2, [pc, #392]	@ (8001ba0 <HAL_DMA_Start_IT+0x204>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d036      	beq.n	8001a8a <HAL_DMA_Start_IT+0xee>
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a60      	ldr	r2, [pc, #384]	@ (8001ba4 <HAL_DMA_Start_IT+0x208>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d031      	beq.n	8001a8a <HAL_DMA_Start_IT+0xee>
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4a5f      	ldr	r2, [pc, #380]	@ (8001ba8 <HAL_DMA_Start_IT+0x20c>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d02c      	beq.n	8001a8a <HAL_DMA_Start_IT+0xee>
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a5d      	ldr	r2, [pc, #372]	@ (8001bac <HAL_DMA_Start_IT+0x210>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d027      	beq.n	8001a8a <HAL_DMA_Start_IT+0xee>
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a5c      	ldr	r2, [pc, #368]	@ (8001bb0 <HAL_DMA_Start_IT+0x214>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d022      	beq.n	8001a8a <HAL_DMA_Start_IT+0xee>
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a5a      	ldr	r2, [pc, #360]	@ (8001bb4 <HAL_DMA_Start_IT+0x218>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d01d      	beq.n	8001a8a <HAL_DMA_Start_IT+0xee>
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a59      	ldr	r2, [pc, #356]	@ (8001bb8 <HAL_DMA_Start_IT+0x21c>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d018      	beq.n	8001a8a <HAL_DMA_Start_IT+0xee>
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a57      	ldr	r2, [pc, #348]	@ (8001bbc <HAL_DMA_Start_IT+0x220>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d013      	beq.n	8001a8a <HAL_DMA_Start_IT+0xee>
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a56      	ldr	r2, [pc, #344]	@ (8001bc0 <HAL_DMA_Start_IT+0x224>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d00e      	beq.n	8001a8a <HAL_DMA_Start_IT+0xee>
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a54      	ldr	r2, [pc, #336]	@ (8001bc4 <HAL_DMA_Start_IT+0x228>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d009      	beq.n	8001a8a <HAL_DMA_Start_IT+0xee>
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a53      	ldr	r2, [pc, #332]	@ (8001bc8 <HAL_DMA_Start_IT+0x22c>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d004      	beq.n	8001a8a <HAL_DMA_Start_IT+0xee>
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a51      	ldr	r2, [pc, #324]	@ (8001bcc <HAL_DMA_Start_IT+0x230>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d108      	bne.n	8001a9c <HAL_DMA_Start_IT+0x100>
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f022 0201 	bic.w	r2, r2, #1
 8001a98:	601a      	str	r2, [r3, #0]
 8001a9a:	e007      	b.n	8001aac <HAL_DMA_Start_IT+0x110>
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f022 0201 	bic.w	r2, r2, #1
 8001aaa:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	687a      	ldr	r2, [r7, #4]
 8001ab0:	68b9      	ldr	r1, [r7, #8]
 8001ab2:	68f8      	ldr	r0, [r7, #12]
 8001ab4:	f001 fb9e 	bl	80031f4 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a34      	ldr	r2, [pc, #208]	@ (8001b90 <HAL_DMA_Start_IT+0x1f4>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d04a      	beq.n	8001b58 <HAL_DMA_Start_IT+0x1bc>
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a33      	ldr	r2, [pc, #204]	@ (8001b94 <HAL_DMA_Start_IT+0x1f8>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d045      	beq.n	8001b58 <HAL_DMA_Start_IT+0x1bc>
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a31      	ldr	r2, [pc, #196]	@ (8001b98 <HAL_DMA_Start_IT+0x1fc>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d040      	beq.n	8001b58 <HAL_DMA_Start_IT+0x1bc>
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a30      	ldr	r2, [pc, #192]	@ (8001b9c <HAL_DMA_Start_IT+0x200>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d03b      	beq.n	8001b58 <HAL_DMA_Start_IT+0x1bc>
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a2e      	ldr	r2, [pc, #184]	@ (8001ba0 <HAL_DMA_Start_IT+0x204>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d036      	beq.n	8001b58 <HAL_DMA_Start_IT+0x1bc>
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a2d      	ldr	r2, [pc, #180]	@ (8001ba4 <HAL_DMA_Start_IT+0x208>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d031      	beq.n	8001b58 <HAL_DMA_Start_IT+0x1bc>
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a2b      	ldr	r2, [pc, #172]	@ (8001ba8 <HAL_DMA_Start_IT+0x20c>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d02c      	beq.n	8001b58 <HAL_DMA_Start_IT+0x1bc>
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a2a      	ldr	r2, [pc, #168]	@ (8001bac <HAL_DMA_Start_IT+0x210>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d027      	beq.n	8001b58 <HAL_DMA_Start_IT+0x1bc>
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a28      	ldr	r2, [pc, #160]	@ (8001bb0 <HAL_DMA_Start_IT+0x214>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d022      	beq.n	8001b58 <HAL_DMA_Start_IT+0x1bc>
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a27      	ldr	r2, [pc, #156]	@ (8001bb4 <HAL_DMA_Start_IT+0x218>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d01d      	beq.n	8001b58 <HAL_DMA_Start_IT+0x1bc>
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a25      	ldr	r2, [pc, #148]	@ (8001bb8 <HAL_DMA_Start_IT+0x21c>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d018      	beq.n	8001b58 <HAL_DMA_Start_IT+0x1bc>
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a24      	ldr	r2, [pc, #144]	@ (8001bbc <HAL_DMA_Start_IT+0x220>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d013      	beq.n	8001b58 <HAL_DMA_Start_IT+0x1bc>
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a22      	ldr	r2, [pc, #136]	@ (8001bc0 <HAL_DMA_Start_IT+0x224>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d00e      	beq.n	8001b58 <HAL_DMA_Start_IT+0x1bc>
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a21      	ldr	r2, [pc, #132]	@ (8001bc4 <HAL_DMA_Start_IT+0x228>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d009      	beq.n	8001b58 <HAL_DMA_Start_IT+0x1bc>
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a1f      	ldr	r2, [pc, #124]	@ (8001bc8 <HAL_DMA_Start_IT+0x22c>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d004      	beq.n	8001b58 <HAL_DMA_Start_IT+0x1bc>
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a1e      	ldr	r2, [pc, #120]	@ (8001bcc <HAL_DMA_Start_IT+0x230>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d101      	bne.n	8001b5c <HAL_DMA_Start_IT+0x1c0>
 8001b58:	2301      	movs	r3, #1
 8001b5a:	e000      	b.n	8001b5e <HAL_DMA_Start_IT+0x1c2>
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d036      	beq.n	8001bd0 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f023 021e 	bic.w	r2, r3, #30
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f042 0216 	orr.w	r2, r2, #22
 8001b74:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d03e      	beq.n	8001bfc <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f042 0208 	orr.w	r2, r2, #8
 8001b8c:	601a      	str	r2, [r3, #0]
 8001b8e:	e035      	b.n	8001bfc <HAL_DMA_Start_IT+0x260>
 8001b90:	40020010 	.word	0x40020010
 8001b94:	40020028 	.word	0x40020028
 8001b98:	40020040 	.word	0x40020040
 8001b9c:	40020058 	.word	0x40020058
 8001ba0:	40020070 	.word	0x40020070
 8001ba4:	40020088 	.word	0x40020088
 8001ba8:	400200a0 	.word	0x400200a0
 8001bac:	400200b8 	.word	0x400200b8
 8001bb0:	40020410 	.word	0x40020410
 8001bb4:	40020428 	.word	0x40020428
 8001bb8:	40020440 	.word	0x40020440
 8001bbc:	40020458 	.word	0x40020458
 8001bc0:	40020470 	.word	0x40020470
 8001bc4:	40020488 	.word	0x40020488
 8001bc8:	400204a0 	.word	0x400204a0
 8001bcc:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f023 020e 	bic.w	r2, r3, #14
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f042 020a 	orr.w	r2, r2, #10
 8001be2:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d007      	beq.n	8001bfc <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f042 0204 	orr.w	r2, r2, #4
 8001bfa:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a83      	ldr	r2, [pc, #524]	@ (8001e10 <HAL_DMA_Start_IT+0x474>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d072      	beq.n	8001cec <HAL_DMA_Start_IT+0x350>
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a82      	ldr	r2, [pc, #520]	@ (8001e14 <HAL_DMA_Start_IT+0x478>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d06d      	beq.n	8001cec <HAL_DMA_Start_IT+0x350>
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a80      	ldr	r2, [pc, #512]	@ (8001e18 <HAL_DMA_Start_IT+0x47c>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d068      	beq.n	8001cec <HAL_DMA_Start_IT+0x350>
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a7f      	ldr	r2, [pc, #508]	@ (8001e1c <HAL_DMA_Start_IT+0x480>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d063      	beq.n	8001cec <HAL_DMA_Start_IT+0x350>
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a7d      	ldr	r2, [pc, #500]	@ (8001e20 <HAL_DMA_Start_IT+0x484>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d05e      	beq.n	8001cec <HAL_DMA_Start_IT+0x350>
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a7c      	ldr	r2, [pc, #496]	@ (8001e24 <HAL_DMA_Start_IT+0x488>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d059      	beq.n	8001cec <HAL_DMA_Start_IT+0x350>
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a7a      	ldr	r2, [pc, #488]	@ (8001e28 <HAL_DMA_Start_IT+0x48c>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d054      	beq.n	8001cec <HAL_DMA_Start_IT+0x350>
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a79      	ldr	r2, [pc, #484]	@ (8001e2c <HAL_DMA_Start_IT+0x490>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d04f      	beq.n	8001cec <HAL_DMA_Start_IT+0x350>
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a77      	ldr	r2, [pc, #476]	@ (8001e30 <HAL_DMA_Start_IT+0x494>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d04a      	beq.n	8001cec <HAL_DMA_Start_IT+0x350>
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a76      	ldr	r2, [pc, #472]	@ (8001e34 <HAL_DMA_Start_IT+0x498>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d045      	beq.n	8001cec <HAL_DMA_Start_IT+0x350>
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a74      	ldr	r2, [pc, #464]	@ (8001e38 <HAL_DMA_Start_IT+0x49c>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d040      	beq.n	8001cec <HAL_DMA_Start_IT+0x350>
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a73      	ldr	r2, [pc, #460]	@ (8001e3c <HAL_DMA_Start_IT+0x4a0>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d03b      	beq.n	8001cec <HAL_DMA_Start_IT+0x350>
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a71      	ldr	r2, [pc, #452]	@ (8001e40 <HAL_DMA_Start_IT+0x4a4>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d036      	beq.n	8001cec <HAL_DMA_Start_IT+0x350>
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a70      	ldr	r2, [pc, #448]	@ (8001e44 <HAL_DMA_Start_IT+0x4a8>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d031      	beq.n	8001cec <HAL_DMA_Start_IT+0x350>
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a6e      	ldr	r2, [pc, #440]	@ (8001e48 <HAL_DMA_Start_IT+0x4ac>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d02c      	beq.n	8001cec <HAL_DMA_Start_IT+0x350>
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a6d      	ldr	r2, [pc, #436]	@ (8001e4c <HAL_DMA_Start_IT+0x4b0>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d027      	beq.n	8001cec <HAL_DMA_Start_IT+0x350>
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a6b      	ldr	r2, [pc, #428]	@ (8001e50 <HAL_DMA_Start_IT+0x4b4>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d022      	beq.n	8001cec <HAL_DMA_Start_IT+0x350>
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a6a      	ldr	r2, [pc, #424]	@ (8001e54 <HAL_DMA_Start_IT+0x4b8>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d01d      	beq.n	8001cec <HAL_DMA_Start_IT+0x350>
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a68      	ldr	r2, [pc, #416]	@ (8001e58 <HAL_DMA_Start_IT+0x4bc>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d018      	beq.n	8001cec <HAL_DMA_Start_IT+0x350>
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a67      	ldr	r2, [pc, #412]	@ (8001e5c <HAL_DMA_Start_IT+0x4c0>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d013      	beq.n	8001cec <HAL_DMA_Start_IT+0x350>
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a65      	ldr	r2, [pc, #404]	@ (8001e60 <HAL_DMA_Start_IT+0x4c4>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d00e      	beq.n	8001cec <HAL_DMA_Start_IT+0x350>
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a64      	ldr	r2, [pc, #400]	@ (8001e64 <HAL_DMA_Start_IT+0x4c8>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d009      	beq.n	8001cec <HAL_DMA_Start_IT+0x350>
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a62      	ldr	r2, [pc, #392]	@ (8001e68 <HAL_DMA_Start_IT+0x4cc>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d004      	beq.n	8001cec <HAL_DMA_Start_IT+0x350>
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a61      	ldr	r2, [pc, #388]	@ (8001e6c <HAL_DMA_Start_IT+0x4d0>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d101      	bne.n	8001cf0 <HAL_DMA_Start_IT+0x354>
 8001cec:	2301      	movs	r3, #1
 8001cee:	e000      	b.n	8001cf2 <HAL_DMA_Start_IT+0x356>
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d01a      	beq.n	8001d2c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d007      	beq.n	8001d14 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d0e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001d12:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d007      	beq.n	8001d2c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001d26:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001d2a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a37      	ldr	r2, [pc, #220]	@ (8001e10 <HAL_DMA_Start_IT+0x474>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d04a      	beq.n	8001dcc <HAL_DMA_Start_IT+0x430>
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a36      	ldr	r2, [pc, #216]	@ (8001e14 <HAL_DMA_Start_IT+0x478>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d045      	beq.n	8001dcc <HAL_DMA_Start_IT+0x430>
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a34      	ldr	r2, [pc, #208]	@ (8001e18 <HAL_DMA_Start_IT+0x47c>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d040      	beq.n	8001dcc <HAL_DMA_Start_IT+0x430>
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a33      	ldr	r2, [pc, #204]	@ (8001e1c <HAL_DMA_Start_IT+0x480>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d03b      	beq.n	8001dcc <HAL_DMA_Start_IT+0x430>
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a31      	ldr	r2, [pc, #196]	@ (8001e20 <HAL_DMA_Start_IT+0x484>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d036      	beq.n	8001dcc <HAL_DMA_Start_IT+0x430>
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a30      	ldr	r2, [pc, #192]	@ (8001e24 <HAL_DMA_Start_IT+0x488>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d031      	beq.n	8001dcc <HAL_DMA_Start_IT+0x430>
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a2e      	ldr	r2, [pc, #184]	@ (8001e28 <HAL_DMA_Start_IT+0x48c>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d02c      	beq.n	8001dcc <HAL_DMA_Start_IT+0x430>
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a2d      	ldr	r2, [pc, #180]	@ (8001e2c <HAL_DMA_Start_IT+0x490>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d027      	beq.n	8001dcc <HAL_DMA_Start_IT+0x430>
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a2b      	ldr	r2, [pc, #172]	@ (8001e30 <HAL_DMA_Start_IT+0x494>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d022      	beq.n	8001dcc <HAL_DMA_Start_IT+0x430>
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a2a      	ldr	r2, [pc, #168]	@ (8001e34 <HAL_DMA_Start_IT+0x498>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d01d      	beq.n	8001dcc <HAL_DMA_Start_IT+0x430>
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a28      	ldr	r2, [pc, #160]	@ (8001e38 <HAL_DMA_Start_IT+0x49c>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d018      	beq.n	8001dcc <HAL_DMA_Start_IT+0x430>
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a27      	ldr	r2, [pc, #156]	@ (8001e3c <HAL_DMA_Start_IT+0x4a0>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d013      	beq.n	8001dcc <HAL_DMA_Start_IT+0x430>
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a25      	ldr	r2, [pc, #148]	@ (8001e40 <HAL_DMA_Start_IT+0x4a4>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d00e      	beq.n	8001dcc <HAL_DMA_Start_IT+0x430>
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a24      	ldr	r2, [pc, #144]	@ (8001e44 <HAL_DMA_Start_IT+0x4a8>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d009      	beq.n	8001dcc <HAL_DMA_Start_IT+0x430>
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a22      	ldr	r2, [pc, #136]	@ (8001e48 <HAL_DMA_Start_IT+0x4ac>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d004      	beq.n	8001dcc <HAL_DMA_Start_IT+0x430>
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a21      	ldr	r2, [pc, #132]	@ (8001e4c <HAL_DMA_Start_IT+0x4b0>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d108      	bne.n	8001dde <HAL_DMA_Start_IT+0x442>
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f042 0201 	orr.w	r2, r2, #1
 8001dda:	601a      	str	r2, [r3, #0]
 8001ddc:	e012      	b.n	8001e04 <HAL_DMA_Start_IT+0x468>
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f042 0201 	orr.w	r2, r2, #1
 8001dec:	601a      	str	r2, [r3, #0]
 8001dee:	e009      	b.n	8001e04 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001df6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8001e04:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3718      	adds	r7, #24
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	40020010 	.word	0x40020010
 8001e14:	40020028 	.word	0x40020028
 8001e18:	40020040 	.word	0x40020040
 8001e1c:	40020058 	.word	0x40020058
 8001e20:	40020070 	.word	0x40020070
 8001e24:	40020088 	.word	0x40020088
 8001e28:	400200a0 	.word	0x400200a0
 8001e2c:	400200b8 	.word	0x400200b8
 8001e30:	40020410 	.word	0x40020410
 8001e34:	40020428 	.word	0x40020428
 8001e38:	40020440 	.word	0x40020440
 8001e3c:	40020458 	.word	0x40020458
 8001e40:	40020470 	.word	0x40020470
 8001e44:	40020488 	.word	0x40020488
 8001e48:	400204a0 	.word	0x400204a0
 8001e4c:	400204b8 	.word	0x400204b8
 8001e50:	58025408 	.word	0x58025408
 8001e54:	5802541c 	.word	0x5802541c
 8001e58:	58025430 	.word	0x58025430
 8001e5c:	58025444 	.word	0x58025444
 8001e60:	58025458 	.word	0x58025458
 8001e64:	5802546c 	.word	0x5802546c
 8001e68:	58025480 	.word	0x58025480
 8001e6c:	58025494 	.word	0x58025494

08001e70 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b084      	sub	sp, #16
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d101      	bne.n	8001e82 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e237      	b.n	80022f2 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	2b02      	cmp	r3, #2
 8001e8c:	d004      	beq.n	8001e98 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2280      	movs	r2, #128	@ 0x80
 8001e92:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001e94:	2301      	movs	r3, #1
 8001e96:	e22c      	b.n	80022f2 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a5c      	ldr	r2, [pc, #368]	@ (8002010 <HAL_DMA_Abort_IT+0x1a0>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d04a      	beq.n	8001f38 <HAL_DMA_Abort_IT+0xc8>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a5b      	ldr	r2, [pc, #364]	@ (8002014 <HAL_DMA_Abort_IT+0x1a4>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d045      	beq.n	8001f38 <HAL_DMA_Abort_IT+0xc8>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a59      	ldr	r2, [pc, #356]	@ (8002018 <HAL_DMA_Abort_IT+0x1a8>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d040      	beq.n	8001f38 <HAL_DMA_Abort_IT+0xc8>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a58      	ldr	r2, [pc, #352]	@ (800201c <HAL_DMA_Abort_IT+0x1ac>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d03b      	beq.n	8001f38 <HAL_DMA_Abort_IT+0xc8>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a56      	ldr	r2, [pc, #344]	@ (8002020 <HAL_DMA_Abort_IT+0x1b0>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d036      	beq.n	8001f38 <HAL_DMA_Abort_IT+0xc8>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a55      	ldr	r2, [pc, #340]	@ (8002024 <HAL_DMA_Abort_IT+0x1b4>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d031      	beq.n	8001f38 <HAL_DMA_Abort_IT+0xc8>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a53      	ldr	r2, [pc, #332]	@ (8002028 <HAL_DMA_Abort_IT+0x1b8>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d02c      	beq.n	8001f38 <HAL_DMA_Abort_IT+0xc8>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a52      	ldr	r2, [pc, #328]	@ (800202c <HAL_DMA_Abort_IT+0x1bc>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d027      	beq.n	8001f38 <HAL_DMA_Abort_IT+0xc8>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a50      	ldr	r2, [pc, #320]	@ (8002030 <HAL_DMA_Abort_IT+0x1c0>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d022      	beq.n	8001f38 <HAL_DMA_Abort_IT+0xc8>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a4f      	ldr	r2, [pc, #316]	@ (8002034 <HAL_DMA_Abort_IT+0x1c4>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d01d      	beq.n	8001f38 <HAL_DMA_Abort_IT+0xc8>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a4d      	ldr	r2, [pc, #308]	@ (8002038 <HAL_DMA_Abort_IT+0x1c8>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d018      	beq.n	8001f38 <HAL_DMA_Abort_IT+0xc8>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a4c      	ldr	r2, [pc, #304]	@ (800203c <HAL_DMA_Abort_IT+0x1cc>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d013      	beq.n	8001f38 <HAL_DMA_Abort_IT+0xc8>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a4a      	ldr	r2, [pc, #296]	@ (8002040 <HAL_DMA_Abort_IT+0x1d0>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d00e      	beq.n	8001f38 <HAL_DMA_Abort_IT+0xc8>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a49      	ldr	r2, [pc, #292]	@ (8002044 <HAL_DMA_Abort_IT+0x1d4>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d009      	beq.n	8001f38 <HAL_DMA_Abort_IT+0xc8>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a47      	ldr	r2, [pc, #284]	@ (8002048 <HAL_DMA_Abort_IT+0x1d8>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d004      	beq.n	8001f38 <HAL_DMA_Abort_IT+0xc8>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a46      	ldr	r2, [pc, #280]	@ (800204c <HAL_DMA_Abort_IT+0x1dc>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d101      	bne.n	8001f3c <HAL_DMA_Abort_IT+0xcc>
 8001f38:	2301      	movs	r3, #1
 8001f3a:	e000      	b.n	8001f3e <HAL_DMA_Abort_IT+0xce>
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	f000 8086 	beq.w	8002050 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2204      	movs	r2, #4
 8001f48:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a2f      	ldr	r2, [pc, #188]	@ (8002010 <HAL_DMA_Abort_IT+0x1a0>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d04a      	beq.n	8001fec <HAL_DMA_Abort_IT+0x17c>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a2e      	ldr	r2, [pc, #184]	@ (8002014 <HAL_DMA_Abort_IT+0x1a4>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d045      	beq.n	8001fec <HAL_DMA_Abort_IT+0x17c>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a2c      	ldr	r2, [pc, #176]	@ (8002018 <HAL_DMA_Abort_IT+0x1a8>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d040      	beq.n	8001fec <HAL_DMA_Abort_IT+0x17c>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a2b      	ldr	r2, [pc, #172]	@ (800201c <HAL_DMA_Abort_IT+0x1ac>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d03b      	beq.n	8001fec <HAL_DMA_Abort_IT+0x17c>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a29      	ldr	r2, [pc, #164]	@ (8002020 <HAL_DMA_Abort_IT+0x1b0>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d036      	beq.n	8001fec <HAL_DMA_Abort_IT+0x17c>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a28      	ldr	r2, [pc, #160]	@ (8002024 <HAL_DMA_Abort_IT+0x1b4>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d031      	beq.n	8001fec <HAL_DMA_Abort_IT+0x17c>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a26      	ldr	r2, [pc, #152]	@ (8002028 <HAL_DMA_Abort_IT+0x1b8>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d02c      	beq.n	8001fec <HAL_DMA_Abort_IT+0x17c>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a25      	ldr	r2, [pc, #148]	@ (800202c <HAL_DMA_Abort_IT+0x1bc>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d027      	beq.n	8001fec <HAL_DMA_Abort_IT+0x17c>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a23      	ldr	r2, [pc, #140]	@ (8002030 <HAL_DMA_Abort_IT+0x1c0>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d022      	beq.n	8001fec <HAL_DMA_Abort_IT+0x17c>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a22      	ldr	r2, [pc, #136]	@ (8002034 <HAL_DMA_Abort_IT+0x1c4>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d01d      	beq.n	8001fec <HAL_DMA_Abort_IT+0x17c>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a20      	ldr	r2, [pc, #128]	@ (8002038 <HAL_DMA_Abort_IT+0x1c8>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d018      	beq.n	8001fec <HAL_DMA_Abort_IT+0x17c>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a1f      	ldr	r2, [pc, #124]	@ (800203c <HAL_DMA_Abort_IT+0x1cc>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d013      	beq.n	8001fec <HAL_DMA_Abort_IT+0x17c>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a1d      	ldr	r2, [pc, #116]	@ (8002040 <HAL_DMA_Abort_IT+0x1d0>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d00e      	beq.n	8001fec <HAL_DMA_Abort_IT+0x17c>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a1c      	ldr	r2, [pc, #112]	@ (8002044 <HAL_DMA_Abort_IT+0x1d4>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d009      	beq.n	8001fec <HAL_DMA_Abort_IT+0x17c>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a1a      	ldr	r2, [pc, #104]	@ (8002048 <HAL_DMA_Abort_IT+0x1d8>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d004      	beq.n	8001fec <HAL_DMA_Abort_IT+0x17c>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a19      	ldr	r2, [pc, #100]	@ (800204c <HAL_DMA_Abort_IT+0x1dc>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d108      	bne.n	8001ffe <HAL_DMA_Abort_IT+0x18e>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f022 0201 	bic.w	r2, r2, #1
 8001ffa:	601a      	str	r2, [r3, #0]
 8001ffc:	e178      	b.n	80022f0 <HAL_DMA_Abort_IT+0x480>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f022 0201 	bic.w	r2, r2, #1
 800200c:	601a      	str	r2, [r3, #0]
 800200e:	e16f      	b.n	80022f0 <HAL_DMA_Abort_IT+0x480>
 8002010:	40020010 	.word	0x40020010
 8002014:	40020028 	.word	0x40020028
 8002018:	40020040 	.word	0x40020040
 800201c:	40020058 	.word	0x40020058
 8002020:	40020070 	.word	0x40020070
 8002024:	40020088 	.word	0x40020088
 8002028:	400200a0 	.word	0x400200a0
 800202c:	400200b8 	.word	0x400200b8
 8002030:	40020410 	.word	0x40020410
 8002034:	40020428 	.word	0x40020428
 8002038:	40020440 	.word	0x40020440
 800203c:	40020458 	.word	0x40020458
 8002040:	40020470 	.word	0x40020470
 8002044:	40020488 	.word	0x40020488
 8002048:	400204a0 	.word	0x400204a0
 800204c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f022 020e 	bic.w	r2, r2, #14
 800205e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a6c      	ldr	r2, [pc, #432]	@ (8002218 <HAL_DMA_Abort_IT+0x3a8>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d04a      	beq.n	8002100 <HAL_DMA_Abort_IT+0x290>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a6b      	ldr	r2, [pc, #428]	@ (800221c <HAL_DMA_Abort_IT+0x3ac>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d045      	beq.n	8002100 <HAL_DMA_Abort_IT+0x290>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a69      	ldr	r2, [pc, #420]	@ (8002220 <HAL_DMA_Abort_IT+0x3b0>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d040      	beq.n	8002100 <HAL_DMA_Abort_IT+0x290>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a68      	ldr	r2, [pc, #416]	@ (8002224 <HAL_DMA_Abort_IT+0x3b4>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d03b      	beq.n	8002100 <HAL_DMA_Abort_IT+0x290>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a66      	ldr	r2, [pc, #408]	@ (8002228 <HAL_DMA_Abort_IT+0x3b8>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d036      	beq.n	8002100 <HAL_DMA_Abort_IT+0x290>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a65      	ldr	r2, [pc, #404]	@ (800222c <HAL_DMA_Abort_IT+0x3bc>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d031      	beq.n	8002100 <HAL_DMA_Abort_IT+0x290>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a63      	ldr	r2, [pc, #396]	@ (8002230 <HAL_DMA_Abort_IT+0x3c0>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d02c      	beq.n	8002100 <HAL_DMA_Abort_IT+0x290>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a62      	ldr	r2, [pc, #392]	@ (8002234 <HAL_DMA_Abort_IT+0x3c4>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d027      	beq.n	8002100 <HAL_DMA_Abort_IT+0x290>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a60      	ldr	r2, [pc, #384]	@ (8002238 <HAL_DMA_Abort_IT+0x3c8>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d022      	beq.n	8002100 <HAL_DMA_Abort_IT+0x290>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a5f      	ldr	r2, [pc, #380]	@ (800223c <HAL_DMA_Abort_IT+0x3cc>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d01d      	beq.n	8002100 <HAL_DMA_Abort_IT+0x290>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a5d      	ldr	r2, [pc, #372]	@ (8002240 <HAL_DMA_Abort_IT+0x3d0>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d018      	beq.n	8002100 <HAL_DMA_Abort_IT+0x290>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a5c      	ldr	r2, [pc, #368]	@ (8002244 <HAL_DMA_Abort_IT+0x3d4>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d013      	beq.n	8002100 <HAL_DMA_Abort_IT+0x290>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a5a      	ldr	r2, [pc, #360]	@ (8002248 <HAL_DMA_Abort_IT+0x3d8>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d00e      	beq.n	8002100 <HAL_DMA_Abort_IT+0x290>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a59      	ldr	r2, [pc, #356]	@ (800224c <HAL_DMA_Abort_IT+0x3dc>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d009      	beq.n	8002100 <HAL_DMA_Abort_IT+0x290>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a57      	ldr	r2, [pc, #348]	@ (8002250 <HAL_DMA_Abort_IT+0x3e0>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d004      	beq.n	8002100 <HAL_DMA_Abort_IT+0x290>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a56      	ldr	r2, [pc, #344]	@ (8002254 <HAL_DMA_Abort_IT+0x3e4>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d108      	bne.n	8002112 <HAL_DMA_Abort_IT+0x2a2>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f022 0201 	bic.w	r2, r2, #1
 800210e:	601a      	str	r2, [r3, #0]
 8002110:	e007      	b.n	8002122 <HAL_DMA_Abort_IT+0x2b2>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f022 0201 	bic.w	r2, r2, #1
 8002120:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a3c      	ldr	r2, [pc, #240]	@ (8002218 <HAL_DMA_Abort_IT+0x3a8>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d072      	beq.n	8002212 <HAL_DMA_Abort_IT+0x3a2>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a3a      	ldr	r2, [pc, #232]	@ (800221c <HAL_DMA_Abort_IT+0x3ac>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d06d      	beq.n	8002212 <HAL_DMA_Abort_IT+0x3a2>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a39      	ldr	r2, [pc, #228]	@ (8002220 <HAL_DMA_Abort_IT+0x3b0>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d068      	beq.n	8002212 <HAL_DMA_Abort_IT+0x3a2>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a37      	ldr	r2, [pc, #220]	@ (8002224 <HAL_DMA_Abort_IT+0x3b4>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d063      	beq.n	8002212 <HAL_DMA_Abort_IT+0x3a2>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a36      	ldr	r2, [pc, #216]	@ (8002228 <HAL_DMA_Abort_IT+0x3b8>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d05e      	beq.n	8002212 <HAL_DMA_Abort_IT+0x3a2>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a34      	ldr	r2, [pc, #208]	@ (800222c <HAL_DMA_Abort_IT+0x3bc>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d059      	beq.n	8002212 <HAL_DMA_Abort_IT+0x3a2>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a33      	ldr	r2, [pc, #204]	@ (8002230 <HAL_DMA_Abort_IT+0x3c0>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d054      	beq.n	8002212 <HAL_DMA_Abort_IT+0x3a2>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a31      	ldr	r2, [pc, #196]	@ (8002234 <HAL_DMA_Abort_IT+0x3c4>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d04f      	beq.n	8002212 <HAL_DMA_Abort_IT+0x3a2>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a30      	ldr	r2, [pc, #192]	@ (8002238 <HAL_DMA_Abort_IT+0x3c8>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d04a      	beq.n	8002212 <HAL_DMA_Abort_IT+0x3a2>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a2e      	ldr	r2, [pc, #184]	@ (800223c <HAL_DMA_Abort_IT+0x3cc>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d045      	beq.n	8002212 <HAL_DMA_Abort_IT+0x3a2>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a2d      	ldr	r2, [pc, #180]	@ (8002240 <HAL_DMA_Abort_IT+0x3d0>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d040      	beq.n	8002212 <HAL_DMA_Abort_IT+0x3a2>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a2b      	ldr	r2, [pc, #172]	@ (8002244 <HAL_DMA_Abort_IT+0x3d4>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d03b      	beq.n	8002212 <HAL_DMA_Abort_IT+0x3a2>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a2a      	ldr	r2, [pc, #168]	@ (8002248 <HAL_DMA_Abort_IT+0x3d8>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d036      	beq.n	8002212 <HAL_DMA_Abort_IT+0x3a2>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a28      	ldr	r2, [pc, #160]	@ (800224c <HAL_DMA_Abort_IT+0x3dc>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d031      	beq.n	8002212 <HAL_DMA_Abort_IT+0x3a2>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a27      	ldr	r2, [pc, #156]	@ (8002250 <HAL_DMA_Abort_IT+0x3e0>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d02c      	beq.n	8002212 <HAL_DMA_Abort_IT+0x3a2>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a25      	ldr	r2, [pc, #148]	@ (8002254 <HAL_DMA_Abort_IT+0x3e4>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d027      	beq.n	8002212 <HAL_DMA_Abort_IT+0x3a2>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a24      	ldr	r2, [pc, #144]	@ (8002258 <HAL_DMA_Abort_IT+0x3e8>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d022      	beq.n	8002212 <HAL_DMA_Abort_IT+0x3a2>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a22      	ldr	r2, [pc, #136]	@ (800225c <HAL_DMA_Abort_IT+0x3ec>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d01d      	beq.n	8002212 <HAL_DMA_Abort_IT+0x3a2>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a21      	ldr	r2, [pc, #132]	@ (8002260 <HAL_DMA_Abort_IT+0x3f0>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d018      	beq.n	8002212 <HAL_DMA_Abort_IT+0x3a2>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a1f      	ldr	r2, [pc, #124]	@ (8002264 <HAL_DMA_Abort_IT+0x3f4>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d013      	beq.n	8002212 <HAL_DMA_Abort_IT+0x3a2>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a1e      	ldr	r2, [pc, #120]	@ (8002268 <HAL_DMA_Abort_IT+0x3f8>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d00e      	beq.n	8002212 <HAL_DMA_Abort_IT+0x3a2>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a1c      	ldr	r2, [pc, #112]	@ (800226c <HAL_DMA_Abort_IT+0x3fc>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d009      	beq.n	8002212 <HAL_DMA_Abort_IT+0x3a2>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a1b      	ldr	r2, [pc, #108]	@ (8002270 <HAL_DMA_Abort_IT+0x400>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d004      	beq.n	8002212 <HAL_DMA_Abort_IT+0x3a2>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a19      	ldr	r2, [pc, #100]	@ (8002274 <HAL_DMA_Abort_IT+0x404>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d132      	bne.n	8002278 <HAL_DMA_Abort_IT+0x408>
 8002212:	2301      	movs	r3, #1
 8002214:	e031      	b.n	800227a <HAL_DMA_Abort_IT+0x40a>
 8002216:	bf00      	nop
 8002218:	40020010 	.word	0x40020010
 800221c:	40020028 	.word	0x40020028
 8002220:	40020040 	.word	0x40020040
 8002224:	40020058 	.word	0x40020058
 8002228:	40020070 	.word	0x40020070
 800222c:	40020088 	.word	0x40020088
 8002230:	400200a0 	.word	0x400200a0
 8002234:	400200b8 	.word	0x400200b8
 8002238:	40020410 	.word	0x40020410
 800223c:	40020428 	.word	0x40020428
 8002240:	40020440 	.word	0x40020440
 8002244:	40020458 	.word	0x40020458
 8002248:	40020470 	.word	0x40020470
 800224c:	40020488 	.word	0x40020488
 8002250:	400204a0 	.word	0x400204a0
 8002254:	400204b8 	.word	0x400204b8
 8002258:	58025408 	.word	0x58025408
 800225c:	5802541c 	.word	0x5802541c
 8002260:	58025430 	.word	0x58025430
 8002264:	58025444 	.word	0x58025444
 8002268:	58025458 	.word	0x58025458
 800226c:	5802546c 	.word	0x5802546c
 8002270:	58025480 	.word	0x58025480
 8002274:	58025494 	.word	0x58025494
 8002278:	2300      	movs	r3, #0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d028      	beq.n	80022d0 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002288:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800228c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002292:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002298:	f003 031f 	and.w	r3, r3, #31
 800229c:	2201      	movs	r2, #1
 800229e:	409a      	lsls	r2, r3
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80022a8:	687a      	ldr	r2, [r7, #4]
 80022aa:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80022ac:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d00c      	beq.n	80022d0 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80022c0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80022c4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022ca:	687a      	ldr	r2, [r7, #4]
 80022cc:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80022ce:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2201      	movs	r2, #1
 80022d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2200      	movs	r2, #0
 80022dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d003      	beq.n	80022f0 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80022ec:	6878      	ldr	r0, [r7, #4]
 80022ee:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80022f0:	2300      	movs	r3, #0
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	3710      	adds	r7, #16
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop

080022fc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b08a      	sub	sp, #40	@ 0x28
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002304:	2300      	movs	r3, #0
 8002306:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002308:	4b67      	ldr	r3, [pc, #412]	@ (80024a8 <HAL_DMA_IRQHandler+0x1ac>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a67      	ldr	r2, [pc, #412]	@ (80024ac <HAL_DMA_IRQHandler+0x1b0>)
 800230e:	fba2 2303 	umull	r2, r3, r2, r3
 8002312:	0a9b      	lsrs	r3, r3, #10
 8002314:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800231a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002320:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8002322:	6a3b      	ldr	r3, [r7, #32]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002328:	69fb      	ldr	r3, [r7, #28]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a5f      	ldr	r2, [pc, #380]	@ (80024b0 <HAL_DMA_IRQHandler+0x1b4>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d04a      	beq.n	80023ce <HAL_DMA_IRQHandler+0xd2>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a5d      	ldr	r2, [pc, #372]	@ (80024b4 <HAL_DMA_IRQHandler+0x1b8>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d045      	beq.n	80023ce <HAL_DMA_IRQHandler+0xd2>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a5c      	ldr	r2, [pc, #368]	@ (80024b8 <HAL_DMA_IRQHandler+0x1bc>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d040      	beq.n	80023ce <HAL_DMA_IRQHandler+0xd2>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a5a      	ldr	r2, [pc, #360]	@ (80024bc <HAL_DMA_IRQHandler+0x1c0>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d03b      	beq.n	80023ce <HAL_DMA_IRQHandler+0xd2>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a59      	ldr	r2, [pc, #356]	@ (80024c0 <HAL_DMA_IRQHandler+0x1c4>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d036      	beq.n	80023ce <HAL_DMA_IRQHandler+0xd2>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a57      	ldr	r2, [pc, #348]	@ (80024c4 <HAL_DMA_IRQHandler+0x1c8>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d031      	beq.n	80023ce <HAL_DMA_IRQHandler+0xd2>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a56      	ldr	r2, [pc, #344]	@ (80024c8 <HAL_DMA_IRQHandler+0x1cc>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d02c      	beq.n	80023ce <HAL_DMA_IRQHandler+0xd2>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a54      	ldr	r2, [pc, #336]	@ (80024cc <HAL_DMA_IRQHandler+0x1d0>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d027      	beq.n	80023ce <HAL_DMA_IRQHandler+0xd2>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a53      	ldr	r2, [pc, #332]	@ (80024d0 <HAL_DMA_IRQHandler+0x1d4>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d022      	beq.n	80023ce <HAL_DMA_IRQHandler+0xd2>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a51      	ldr	r2, [pc, #324]	@ (80024d4 <HAL_DMA_IRQHandler+0x1d8>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d01d      	beq.n	80023ce <HAL_DMA_IRQHandler+0xd2>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a50      	ldr	r2, [pc, #320]	@ (80024d8 <HAL_DMA_IRQHandler+0x1dc>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d018      	beq.n	80023ce <HAL_DMA_IRQHandler+0xd2>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a4e      	ldr	r2, [pc, #312]	@ (80024dc <HAL_DMA_IRQHandler+0x1e0>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d013      	beq.n	80023ce <HAL_DMA_IRQHandler+0xd2>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a4d      	ldr	r2, [pc, #308]	@ (80024e0 <HAL_DMA_IRQHandler+0x1e4>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d00e      	beq.n	80023ce <HAL_DMA_IRQHandler+0xd2>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a4b      	ldr	r2, [pc, #300]	@ (80024e4 <HAL_DMA_IRQHandler+0x1e8>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d009      	beq.n	80023ce <HAL_DMA_IRQHandler+0xd2>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a4a      	ldr	r2, [pc, #296]	@ (80024e8 <HAL_DMA_IRQHandler+0x1ec>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d004      	beq.n	80023ce <HAL_DMA_IRQHandler+0xd2>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a48      	ldr	r2, [pc, #288]	@ (80024ec <HAL_DMA_IRQHandler+0x1f0>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d101      	bne.n	80023d2 <HAL_DMA_IRQHandler+0xd6>
 80023ce:	2301      	movs	r3, #1
 80023d0:	e000      	b.n	80023d4 <HAL_DMA_IRQHandler+0xd8>
 80023d2:	2300      	movs	r3, #0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	f000 842b 	beq.w	8002c30 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023de:	f003 031f 	and.w	r3, r3, #31
 80023e2:	2208      	movs	r2, #8
 80023e4:	409a      	lsls	r2, r3
 80023e6:	69bb      	ldr	r3, [r7, #24]
 80023e8:	4013      	ands	r3, r2
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	f000 80a2 	beq.w	8002534 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a2e      	ldr	r2, [pc, #184]	@ (80024b0 <HAL_DMA_IRQHandler+0x1b4>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d04a      	beq.n	8002490 <HAL_DMA_IRQHandler+0x194>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a2d      	ldr	r2, [pc, #180]	@ (80024b4 <HAL_DMA_IRQHandler+0x1b8>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d045      	beq.n	8002490 <HAL_DMA_IRQHandler+0x194>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a2b      	ldr	r2, [pc, #172]	@ (80024b8 <HAL_DMA_IRQHandler+0x1bc>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d040      	beq.n	8002490 <HAL_DMA_IRQHandler+0x194>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a2a      	ldr	r2, [pc, #168]	@ (80024bc <HAL_DMA_IRQHandler+0x1c0>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d03b      	beq.n	8002490 <HAL_DMA_IRQHandler+0x194>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a28      	ldr	r2, [pc, #160]	@ (80024c0 <HAL_DMA_IRQHandler+0x1c4>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d036      	beq.n	8002490 <HAL_DMA_IRQHandler+0x194>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a27      	ldr	r2, [pc, #156]	@ (80024c4 <HAL_DMA_IRQHandler+0x1c8>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d031      	beq.n	8002490 <HAL_DMA_IRQHandler+0x194>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a25      	ldr	r2, [pc, #148]	@ (80024c8 <HAL_DMA_IRQHandler+0x1cc>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d02c      	beq.n	8002490 <HAL_DMA_IRQHandler+0x194>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a24      	ldr	r2, [pc, #144]	@ (80024cc <HAL_DMA_IRQHandler+0x1d0>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d027      	beq.n	8002490 <HAL_DMA_IRQHandler+0x194>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a22      	ldr	r2, [pc, #136]	@ (80024d0 <HAL_DMA_IRQHandler+0x1d4>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d022      	beq.n	8002490 <HAL_DMA_IRQHandler+0x194>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a21      	ldr	r2, [pc, #132]	@ (80024d4 <HAL_DMA_IRQHandler+0x1d8>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d01d      	beq.n	8002490 <HAL_DMA_IRQHandler+0x194>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a1f      	ldr	r2, [pc, #124]	@ (80024d8 <HAL_DMA_IRQHandler+0x1dc>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d018      	beq.n	8002490 <HAL_DMA_IRQHandler+0x194>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a1e      	ldr	r2, [pc, #120]	@ (80024dc <HAL_DMA_IRQHandler+0x1e0>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d013      	beq.n	8002490 <HAL_DMA_IRQHandler+0x194>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a1c      	ldr	r2, [pc, #112]	@ (80024e0 <HAL_DMA_IRQHandler+0x1e4>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d00e      	beq.n	8002490 <HAL_DMA_IRQHandler+0x194>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a1b      	ldr	r2, [pc, #108]	@ (80024e4 <HAL_DMA_IRQHandler+0x1e8>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d009      	beq.n	8002490 <HAL_DMA_IRQHandler+0x194>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a19      	ldr	r2, [pc, #100]	@ (80024e8 <HAL_DMA_IRQHandler+0x1ec>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d004      	beq.n	8002490 <HAL_DMA_IRQHandler+0x194>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a18      	ldr	r2, [pc, #96]	@ (80024ec <HAL_DMA_IRQHandler+0x1f0>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d12f      	bne.n	80024f0 <HAL_DMA_IRQHandler+0x1f4>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 0304 	and.w	r3, r3, #4
 800249a:	2b00      	cmp	r3, #0
 800249c:	bf14      	ite	ne
 800249e:	2301      	movne	r3, #1
 80024a0:	2300      	moveq	r3, #0
 80024a2:	b2db      	uxtb	r3, r3
 80024a4:	e02e      	b.n	8002504 <HAL_DMA_IRQHandler+0x208>
 80024a6:	bf00      	nop
 80024a8:	24000000 	.word	0x24000000
 80024ac:	1b4e81b5 	.word	0x1b4e81b5
 80024b0:	40020010 	.word	0x40020010
 80024b4:	40020028 	.word	0x40020028
 80024b8:	40020040 	.word	0x40020040
 80024bc:	40020058 	.word	0x40020058
 80024c0:	40020070 	.word	0x40020070
 80024c4:	40020088 	.word	0x40020088
 80024c8:	400200a0 	.word	0x400200a0
 80024cc:	400200b8 	.word	0x400200b8
 80024d0:	40020410 	.word	0x40020410
 80024d4:	40020428 	.word	0x40020428
 80024d8:	40020440 	.word	0x40020440
 80024dc:	40020458 	.word	0x40020458
 80024e0:	40020470 	.word	0x40020470
 80024e4:	40020488 	.word	0x40020488
 80024e8:	400204a0 	.word	0x400204a0
 80024ec:	400204b8 	.word	0x400204b8
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 0308 	and.w	r3, r3, #8
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	bf14      	ite	ne
 80024fe:	2301      	movne	r3, #1
 8002500:	2300      	moveq	r3, #0
 8002502:	b2db      	uxtb	r3, r3
 8002504:	2b00      	cmp	r3, #0
 8002506:	d015      	beq.n	8002534 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f022 0204 	bic.w	r2, r2, #4
 8002516:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800251c:	f003 031f 	and.w	r3, r3, #31
 8002520:	2208      	movs	r2, #8
 8002522:	409a      	lsls	r2, r3
 8002524:	6a3b      	ldr	r3, [r7, #32]
 8002526:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800252c:	f043 0201 	orr.w	r2, r3, #1
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002538:	f003 031f 	and.w	r3, r3, #31
 800253c:	69ba      	ldr	r2, [r7, #24]
 800253e:	fa22 f303 	lsr.w	r3, r2, r3
 8002542:	f003 0301 	and.w	r3, r3, #1
 8002546:	2b00      	cmp	r3, #0
 8002548:	d06e      	beq.n	8002628 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a69      	ldr	r2, [pc, #420]	@ (80026f4 <HAL_DMA_IRQHandler+0x3f8>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d04a      	beq.n	80025ea <HAL_DMA_IRQHandler+0x2ee>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a67      	ldr	r2, [pc, #412]	@ (80026f8 <HAL_DMA_IRQHandler+0x3fc>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d045      	beq.n	80025ea <HAL_DMA_IRQHandler+0x2ee>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a66      	ldr	r2, [pc, #408]	@ (80026fc <HAL_DMA_IRQHandler+0x400>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d040      	beq.n	80025ea <HAL_DMA_IRQHandler+0x2ee>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a64      	ldr	r2, [pc, #400]	@ (8002700 <HAL_DMA_IRQHandler+0x404>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d03b      	beq.n	80025ea <HAL_DMA_IRQHandler+0x2ee>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a63      	ldr	r2, [pc, #396]	@ (8002704 <HAL_DMA_IRQHandler+0x408>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d036      	beq.n	80025ea <HAL_DMA_IRQHandler+0x2ee>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a61      	ldr	r2, [pc, #388]	@ (8002708 <HAL_DMA_IRQHandler+0x40c>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d031      	beq.n	80025ea <HAL_DMA_IRQHandler+0x2ee>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a60      	ldr	r2, [pc, #384]	@ (800270c <HAL_DMA_IRQHandler+0x410>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d02c      	beq.n	80025ea <HAL_DMA_IRQHandler+0x2ee>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a5e      	ldr	r2, [pc, #376]	@ (8002710 <HAL_DMA_IRQHandler+0x414>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d027      	beq.n	80025ea <HAL_DMA_IRQHandler+0x2ee>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a5d      	ldr	r2, [pc, #372]	@ (8002714 <HAL_DMA_IRQHandler+0x418>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d022      	beq.n	80025ea <HAL_DMA_IRQHandler+0x2ee>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a5b      	ldr	r2, [pc, #364]	@ (8002718 <HAL_DMA_IRQHandler+0x41c>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d01d      	beq.n	80025ea <HAL_DMA_IRQHandler+0x2ee>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a5a      	ldr	r2, [pc, #360]	@ (800271c <HAL_DMA_IRQHandler+0x420>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d018      	beq.n	80025ea <HAL_DMA_IRQHandler+0x2ee>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a58      	ldr	r2, [pc, #352]	@ (8002720 <HAL_DMA_IRQHandler+0x424>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d013      	beq.n	80025ea <HAL_DMA_IRQHandler+0x2ee>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a57      	ldr	r2, [pc, #348]	@ (8002724 <HAL_DMA_IRQHandler+0x428>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d00e      	beq.n	80025ea <HAL_DMA_IRQHandler+0x2ee>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a55      	ldr	r2, [pc, #340]	@ (8002728 <HAL_DMA_IRQHandler+0x42c>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d009      	beq.n	80025ea <HAL_DMA_IRQHandler+0x2ee>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a54      	ldr	r2, [pc, #336]	@ (800272c <HAL_DMA_IRQHandler+0x430>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d004      	beq.n	80025ea <HAL_DMA_IRQHandler+0x2ee>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a52      	ldr	r2, [pc, #328]	@ (8002730 <HAL_DMA_IRQHandler+0x434>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d10a      	bne.n	8002600 <HAL_DMA_IRQHandler+0x304>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	695b      	ldr	r3, [r3, #20]
 80025f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	bf14      	ite	ne
 80025f8:	2301      	movne	r3, #1
 80025fa:	2300      	moveq	r3, #0
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	e003      	b.n	8002608 <HAL_DMA_IRQHandler+0x30c>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	2300      	movs	r3, #0
 8002608:	2b00      	cmp	r3, #0
 800260a:	d00d      	beq.n	8002628 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002610:	f003 031f 	and.w	r3, r3, #31
 8002614:	2201      	movs	r2, #1
 8002616:	409a      	lsls	r2, r3
 8002618:	6a3b      	ldr	r3, [r7, #32]
 800261a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002620:	f043 0202 	orr.w	r2, r3, #2
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800262c:	f003 031f 	and.w	r3, r3, #31
 8002630:	2204      	movs	r2, #4
 8002632:	409a      	lsls	r2, r3
 8002634:	69bb      	ldr	r3, [r7, #24]
 8002636:	4013      	ands	r3, r2
 8002638:	2b00      	cmp	r3, #0
 800263a:	f000 808f 	beq.w	800275c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a2c      	ldr	r2, [pc, #176]	@ (80026f4 <HAL_DMA_IRQHandler+0x3f8>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d04a      	beq.n	80026de <HAL_DMA_IRQHandler+0x3e2>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a2a      	ldr	r2, [pc, #168]	@ (80026f8 <HAL_DMA_IRQHandler+0x3fc>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d045      	beq.n	80026de <HAL_DMA_IRQHandler+0x3e2>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a29      	ldr	r2, [pc, #164]	@ (80026fc <HAL_DMA_IRQHandler+0x400>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d040      	beq.n	80026de <HAL_DMA_IRQHandler+0x3e2>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a27      	ldr	r2, [pc, #156]	@ (8002700 <HAL_DMA_IRQHandler+0x404>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d03b      	beq.n	80026de <HAL_DMA_IRQHandler+0x3e2>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a26      	ldr	r2, [pc, #152]	@ (8002704 <HAL_DMA_IRQHandler+0x408>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d036      	beq.n	80026de <HAL_DMA_IRQHandler+0x3e2>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a24      	ldr	r2, [pc, #144]	@ (8002708 <HAL_DMA_IRQHandler+0x40c>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d031      	beq.n	80026de <HAL_DMA_IRQHandler+0x3e2>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a23      	ldr	r2, [pc, #140]	@ (800270c <HAL_DMA_IRQHandler+0x410>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d02c      	beq.n	80026de <HAL_DMA_IRQHandler+0x3e2>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a21      	ldr	r2, [pc, #132]	@ (8002710 <HAL_DMA_IRQHandler+0x414>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d027      	beq.n	80026de <HAL_DMA_IRQHandler+0x3e2>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a20      	ldr	r2, [pc, #128]	@ (8002714 <HAL_DMA_IRQHandler+0x418>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d022      	beq.n	80026de <HAL_DMA_IRQHandler+0x3e2>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a1e      	ldr	r2, [pc, #120]	@ (8002718 <HAL_DMA_IRQHandler+0x41c>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d01d      	beq.n	80026de <HAL_DMA_IRQHandler+0x3e2>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a1d      	ldr	r2, [pc, #116]	@ (800271c <HAL_DMA_IRQHandler+0x420>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d018      	beq.n	80026de <HAL_DMA_IRQHandler+0x3e2>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a1b      	ldr	r2, [pc, #108]	@ (8002720 <HAL_DMA_IRQHandler+0x424>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d013      	beq.n	80026de <HAL_DMA_IRQHandler+0x3e2>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a1a      	ldr	r2, [pc, #104]	@ (8002724 <HAL_DMA_IRQHandler+0x428>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d00e      	beq.n	80026de <HAL_DMA_IRQHandler+0x3e2>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a18      	ldr	r2, [pc, #96]	@ (8002728 <HAL_DMA_IRQHandler+0x42c>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d009      	beq.n	80026de <HAL_DMA_IRQHandler+0x3e2>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a17      	ldr	r2, [pc, #92]	@ (800272c <HAL_DMA_IRQHandler+0x430>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d004      	beq.n	80026de <HAL_DMA_IRQHandler+0x3e2>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a15      	ldr	r2, [pc, #84]	@ (8002730 <HAL_DMA_IRQHandler+0x434>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d12a      	bne.n	8002734 <HAL_DMA_IRQHandler+0x438>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 0302 	and.w	r3, r3, #2
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	bf14      	ite	ne
 80026ec:	2301      	movne	r3, #1
 80026ee:	2300      	moveq	r3, #0
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	e023      	b.n	800273c <HAL_DMA_IRQHandler+0x440>
 80026f4:	40020010 	.word	0x40020010
 80026f8:	40020028 	.word	0x40020028
 80026fc:	40020040 	.word	0x40020040
 8002700:	40020058 	.word	0x40020058
 8002704:	40020070 	.word	0x40020070
 8002708:	40020088 	.word	0x40020088
 800270c:	400200a0 	.word	0x400200a0
 8002710:	400200b8 	.word	0x400200b8
 8002714:	40020410 	.word	0x40020410
 8002718:	40020428 	.word	0x40020428
 800271c:	40020440 	.word	0x40020440
 8002720:	40020458 	.word	0x40020458
 8002724:	40020470 	.word	0x40020470
 8002728:	40020488 	.word	0x40020488
 800272c:	400204a0 	.word	0x400204a0
 8002730:	400204b8 	.word	0x400204b8
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	2300      	movs	r3, #0
 800273c:	2b00      	cmp	r3, #0
 800273e:	d00d      	beq.n	800275c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002744:	f003 031f 	and.w	r3, r3, #31
 8002748:	2204      	movs	r2, #4
 800274a:	409a      	lsls	r2, r3
 800274c:	6a3b      	ldr	r3, [r7, #32]
 800274e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002754:	f043 0204 	orr.w	r2, r3, #4
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002760:	f003 031f 	and.w	r3, r3, #31
 8002764:	2210      	movs	r2, #16
 8002766:	409a      	lsls	r2, r3
 8002768:	69bb      	ldr	r3, [r7, #24]
 800276a:	4013      	ands	r3, r2
 800276c:	2b00      	cmp	r3, #0
 800276e:	f000 80a6 	beq.w	80028be <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a85      	ldr	r2, [pc, #532]	@ (800298c <HAL_DMA_IRQHandler+0x690>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d04a      	beq.n	8002812 <HAL_DMA_IRQHandler+0x516>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a83      	ldr	r2, [pc, #524]	@ (8002990 <HAL_DMA_IRQHandler+0x694>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d045      	beq.n	8002812 <HAL_DMA_IRQHandler+0x516>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a82      	ldr	r2, [pc, #520]	@ (8002994 <HAL_DMA_IRQHandler+0x698>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d040      	beq.n	8002812 <HAL_DMA_IRQHandler+0x516>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a80      	ldr	r2, [pc, #512]	@ (8002998 <HAL_DMA_IRQHandler+0x69c>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d03b      	beq.n	8002812 <HAL_DMA_IRQHandler+0x516>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a7f      	ldr	r2, [pc, #508]	@ (800299c <HAL_DMA_IRQHandler+0x6a0>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d036      	beq.n	8002812 <HAL_DMA_IRQHandler+0x516>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a7d      	ldr	r2, [pc, #500]	@ (80029a0 <HAL_DMA_IRQHandler+0x6a4>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d031      	beq.n	8002812 <HAL_DMA_IRQHandler+0x516>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a7c      	ldr	r2, [pc, #496]	@ (80029a4 <HAL_DMA_IRQHandler+0x6a8>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d02c      	beq.n	8002812 <HAL_DMA_IRQHandler+0x516>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a7a      	ldr	r2, [pc, #488]	@ (80029a8 <HAL_DMA_IRQHandler+0x6ac>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d027      	beq.n	8002812 <HAL_DMA_IRQHandler+0x516>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a79      	ldr	r2, [pc, #484]	@ (80029ac <HAL_DMA_IRQHandler+0x6b0>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d022      	beq.n	8002812 <HAL_DMA_IRQHandler+0x516>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a77      	ldr	r2, [pc, #476]	@ (80029b0 <HAL_DMA_IRQHandler+0x6b4>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d01d      	beq.n	8002812 <HAL_DMA_IRQHandler+0x516>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a76      	ldr	r2, [pc, #472]	@ (80029b4 <HAL_DMA_IRQHandler+0x6b8>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d018      	beq.n	8002812 <HAL_DMA_IRQHandler+0x516>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a74      	ldr	r2, [pc, #464]	@ (80029b8 <HAL_DMA_IRQHandler+0x6bc>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d013      	beq.n	8002812 <HAL_DMA_IRQHandler+0x516>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a73      	ldr	r2, [pc, #460]	@ (80029bc <HAL_DMA_IRQHandler+0x6c0>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d00e      	beq.n	8002812 <HAL_DMA_IRQHandler+0x516>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a71      	ldr	r2, [pc, #452]	@ (80029c0 <HAL_DMA_IRQHandler+0x6c4>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d009      	beq.n	8002812 <HAL_DMA_IRQHandler+0x516>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a70      	ldr	r2, [pc, #448]	@ (80029c4 <HAL_DMA_IRQHandler+0x6c8>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d004      	beq.n	8002812 <HAL_DMA_IRQHandler+0x516>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a6e      	ldr	r2, [pc, #440]	@ (80029c8 <HAL_DMA_IRQHandler+0x6cc>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d10a      	bne.n	8002828 <HAL_DMA_IRQHandler+0x52c>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f003 0308 	and.w	r3, r3, #8
 800281c:	2b00      	cmp	r3, #0
 800281e:	bf14      	ite	ne
 8002820:	2301      	movne	r3, #1
 8002822:	2300      	moveq	r3, #0
 8002824:	b2db      	uxtb	r3, r3
 8002826:	e009      	b.n	800283c <HAL_DMA_IRQHandler+0x540>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 0304 	and.w	r3, r3, #4
 8002832:	2b00      	cmp	r3, #0
 8002834:	bf14      	ite	ne
 8002836:	2301      	movne	r3, #1
 8002838:	2300      	moveq	r3, #0
 800283a:	b2db      	uxtb	r3, r3
 800283c:	2b00      	cmp	r3, #0
 800283e:	d03e      	beq.n	80028be <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002844:	f003 031f 	and.w	r3, r3, #31
 8002848:	2210      	movs	r2, #16
 800284a:	409a      	lsls	r2, r3
 800284c:	6a3b      	ldr	r3, [r7, #32]
 800284e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800285a:	2b00      	cmp	r3, #0
 800285c:	d018      	beq.n	8002890 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002868:	2b00      	cmp	r3, #0
 800286a:	d108      	bne.n	800287e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002870:	2b00      	cmp	r3, #0
 8002872:	d024      	beq.n	80028be <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002878:	6878      	ldr	r0, [r7, #4]
 800287a:	4798      	blx	r3
 800287c:	e01f      	b.n	80028be <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002882:	2b00      	cmp	r3, #0
 8002884:	d01b      	beq.n	80028be <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800288a:	6878      	ldr	r0, [r7, #4]
 800288c:	4798      	blx	r3
 800288e:	e016      	b.n	80028be <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800289a:	2b00      	cmp	r3, #0
 800289c:	d107      	bne.n	80028ae <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f022 0208 	bic.w	r2, r2, #8
 80028ac:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d003      	beq.n	80028be <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ba:	6878      	ldr	r0, [r7, #4]
 80028bc:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028c2:	f003 031f 	and.w	r3, r3, #31
 80028c6:	2220      	movs	r2, #32
 80028c8:	409a      	lsls	r2, r3
 80028ca:	69bb      	ldr	r3, [r7, #24]
 80028cc:	4013      	ands	r3, r2
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	f000 8110 	beq.w	8002af4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a2c      	ldr	r2, [pc, #176]	@ (800298c <HAL_DMA_IRQHandler+0x690>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d04a      	beq.n	8002974 <HAL_DMA_IRQHandler+0x678>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a2b      	ldr	r2, [pc, #172]	@ (8002990 <HAL_DMA_IRQHandler+0x694>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d045      	beq.n	8002974 <HAL_DMA_IRQHandler+0x678>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a29      	ldr	r2, [pc, #164]	@ (8002994 <HAL_DMA_IRQHandler+0x698>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d040      	beq.n	8002974 <HAL_DMA_IRQHandler+0x678>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a28      	ldr	r2, [pc, #160]	@ (8002998 <HAL_DMA_IRQHandler+0x69c>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d03b      	beq.n	8002974 <HAL_DMA_IRQHandler+0x678>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a26      	ldr	r2, [pc, #152]	@ (800299c <HAL_DMA_IRQHandler+0x6a0>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d036      	beq.n	8002974 <HAL_DMA_IRQHandler+0x678>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a25      	ldr	r2, [pc, #148]	@ (80029a0 <HAL_DMA_IRQHandler+0x6a4>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d031      	beq.n	8002974 <HAL_DMA_IRQHandler+0x678>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a23      	ldr	r2, [pc, #140]	@ (80029a4 <HAL_DMA_IRQHandler+0x6a8>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d02c      	beq.n	8002974 <HAL_DMA_IRQHandler+0x678>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a22      	ldr	r2, [pc, #136]	@ (80029a8 <HAL_DMA_IRQHandler+0x6ac>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d027      	beq.n	8002974 <HAL_DMA_IRQHandler+0x678>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a20      	ldr	r2, [pc, #128]	@ (80029ac <HAL_DMA_IRQHandler+0x6b0>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d022      	beq.n	8002974 <HAL_DMA_IRQHandler+0x678>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a1f      	ldr	r2, [pc, #124]	@ (80029b0 <HAL_DMA_IRQHandler+0x6b4>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d01d      	beq.n	8002974 <HAL_DMA_IRQHandler+0x678>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a1d      	ldr	r2, [pc, #116]	@ (80029b4 <HAL_DMA_IRQHandler+0x6b8>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d018      	beq.n	8002974 <HAL_DMA_IRQHandler+0x678>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a1c      	ldr	r2, [pc, #112]	@ (80029b8 <HAL_DMA_IRQHandler+0x6bc>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d013      	beq.n	8002974 <HAL_DMA_IRQHandler+0x678>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a1a      	ldr	r2, [pc, #104]	@ (80029bc <HAL_DMA_IRQHandler+0x6c0>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d00e      	beq.n	8002974 <HAL_DMA_IRQHandler+0x678>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a19      	ldr	r2, [pc, #100]	@ (80029c0 <HAL_DMA_IRQHandler+0x6c4>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d009      	beq.n	8002974 <HAL_DMA_IRQHandler+0x678>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a17      	ldr	r2, [pc, #92]	@ (80029c4 <HAL_DMA_IRQHandler+0x6c8>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d004      	beq.n	8002974 <HAL_DMA_IRQHandler+0x678>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a16      	ldr	r2, [pc, #88]	@ (80029c8 <HAL_DMA_IRQHandler+0x6cc>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d12b      	bne.n	80029cc <HAL_DMA_IRQHandler+0x6d0>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f003 0310 	and.w	r3, r3, #16
 800297e:	2b00      	cmp	r3, #0
 8002980:	bf14      	ite	ne
 8002982:	2301      	movne	r3, #1
 8002984:	2300      	moveq	r3, #0
 8002986:	b2db      	uxtb	r3, r3
 8002988:	e02a      	b.n	80029e0 <HAL_DMA_IRQHandler+0x6e4>
 800298a:	bf00      	nop
 800298c:	40020010 	.word	0x40020010
 8002990:	40020028 	.word	0x40020028
 8002994:	40020040 	.word	0x40020040
 8002998:	40020058 	.word	0x40020058
 800299c:	40020070 	.word	0x40020070
 80029a0:	40020088 	.word	0x40020088
 80029a4:	400200a0 	.word	0x400200a0
 80029a8:	400200b8 	.word	0x400200b8
 80029ac:	40020410 	.word	0x40020410
 80029b0:	40020428 	.word	0x40020428
 80029b4:	40020440 	.word	0x40020440
 80029b8:	40020458 	.word	0x40020458
 80029bc:	40020470 	.word	0x40020470
 80029c0:	40020488 	.word	0x40020488
 80029c4:	400204a0 	.word	0x400204a0
 80029c8:	400204b8 	.word	0x400204b8
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 0302 	and.w	r3, r3, #2
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	bf14      	ite	ne
 80029da:	2301      	movne	r3, #1
 80029dc:	2300      	moveq	r3, #0
 80029de:	b2db      	uxtb	r3, r3
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	f000 8087 	beq.w	8002af4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029ea:	f003 031f 	and.w	r3, r3, #31
 80029ee:	2220      	movs	r2, #32
 80029f0:	409a      	lsls	r2, r3
 80029f2:	6a3b      	ldr	r3, [r7, #32]
 80029f4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	2b04      	cmp	r3, #4
 8002a00:	d139      	bne.n	8002a76 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f022 0216 	bic.w	r2, r2, #22
 8002a10:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	695a      	ldr	r2, [r3, #20]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002a20:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d103      	bne.n	8002a32 <HAL_DMA_IRQHandler+0x736>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d007      	beq.n	8002a42 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f022 0208 	bic.w	r2, r2, #8
 8002a40:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a46:	f003 031f 	and.w	r3, r3, #31
 8002a4a:	223f      	movs	r2, #63	@ 0x3f
 8002a4c:	409a      	lsls	r2, r3
 8002a4e:	6a3b      	ldr	r3, [r7, #32]
 8002a50:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2201      	movs	r2, #1
 8002a56:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	f000 8382 	beq.w	8003170 <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a70:	6878      	ldr	r0, [r7, #4]
 8002a72:	4798      	blx	r3
          }
          return;
 8002a74:	e37c      	b.n	8003170 <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d018      	beq.n	8002ab6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d108      	bne.n	8002aa4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d02c      	beq.n	8002af4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	4798      	blx	r3
 8002aa2:	e027      	b.n	8002af4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d023      	beq.n	8002af4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ab0:	6878      	ldr	r0, [r7, #4]
 8002ab2:	4798      	blx	r3
 8002ab4:	e01e      	b.n	8002af4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d10f      	bne.n	8002ae4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f022 0210 	bic.w	r2, r2, #16
 8002ad2:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d003      	beq.n	8002af4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002af0:	6878      	ldr	r0, [r7, #4]
 8002af2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	f000 833e 	beq.w	800317a <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b02:	f003 0301 	and.w	r3, r3, #1
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	f000 8088 	beq.w	8002c1c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2204      	movs	r2, #4
 8002b10:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a89      	ldr	r2, [pc, #548]	@ (8002d40 <HAL_DMA_IRQHandler+0xa44>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d04a      	beq.n	8002bb4 <HAL_DMA_IRQHandler+0x8b8>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a88      	ldr	r2, [pc, #544]	@ (8002d44 <HAL_DMA_IRQHandler+0xa48>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d045      	beq.n	8002bb4 <HAL_DMA_IRQHandler+0x8b8>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a86      	ldr	r2, [pc, #536]	@ (8002d48 <HAL_DMA_IRQHandler+0xa4c>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d040      	beq.n	8002bb4 <HAL_DMA_IRQHandler+0x8b8>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a85      	ldr	r2, [pc, #532]	@ (8002d4c <HAL_DMA_IRQHandler+0xa50>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d03b      	beq.n	8002bb4 <HAL_DMA_IRQHandler+0x8b8>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a83      	ldr	r2, [pc, #524]	@ (8002d50 <HAL_DMA_IRQHandler+0xa54>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d036      	beq.n	8002bb4 <HAL_DMA_IRQHandler+0x8b8>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a82      	ldr	r2, [pc, #520]	@ (8002d54 <HAL_DMA_IRQHandler+0xa58>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d031      	beq.n	8002bb4 <HAL_DMA_IRQHandler+0x8b8>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a80      	ldr	r2, [pc, #512]	@ (8002d58 <HAL_DMA_IRQHandler+0xa5c>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d02c      	beq.n	8002bb4 <HAL_DMA_IRQHandler+0x8b8>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a7f      	ldr	r2, [pc, #508]	@ (8002d5c <HAL_DMA_IRQHandler+0xa60>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d027      	beq.n	8002bb4 <HAL_DMA_IRQHandler+0x8b8>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a7d      	ldr	r2, [pc, #500]	@ (8002d60 <HAL_DMA_IRQHandler+0xa64>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d022      	beq.n	8002bb4 <HAL_DMA_IRQHandler+0x8b8>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a7c      	ldr	r2, [pc, #496]	@ (8002d64 <HAL_DMA_IRQHandler+0xa68>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d01d      	beq.n	8002bb4 <HAL_DMA_IRQHandler+0x8b8>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a7a      	ldr	r2, [pc, #488]	@ (8002d68 <HAL_DMA_IRQHandler+0xa6c>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d018      	beq.n	8002bb4 <HAL_DMA_IRQHandler+0x8b8>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a79      	ldr	r2, [pc, #484]	@ (8002d6c <HAL_DMA_IRQHandler+0xa70>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d013      	beq.n	8002bb4 <HAL_DMA_IRQHandler+0x8b8>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a77      	ldr	r2, [pc, #476]	@ (8002d70 <HAL_DMA_IRQHandler+0xa74>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d00e      	beq.n	8002bb4 <HAL_DMA_IRQHandler+0x8b8>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a76      	ldr	r2, [pc, #472]	@ (8002d74 <HAL_DMA_IRQHandler+0xa78>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d009      	beq.n	8002bb4 <HAL_DMA_IRQHandler+0x8b8>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a74      	ldr	r2, [pc, #464]	@ (8002d78 <HAL_DMA_IRQHandler+0xa7c>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d004      	beq.n	8002bb4 <HAL_DMA_IRQHandler+0x8b8>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a73      	ldr	r2, [pc, #460]	@ (8002d7c <HAL_DMA_IRQHandler+0xa80>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d108      	bne.n	8002bc6 <HAL_DMA_IRQHandler+0x8ca>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f022 0201 	bic.w	r2, r2, #1
 8002bc2:	601a      	str	r2, [r3, #0]
 8002bc4:	e007      	b.n	8002bd6 <HAL_DMA_IRQHandler+0x8da>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f022 0201 	bic.w	r2, r2, #1
 8002bd4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	3301      	adds	r3, #1
 8002bda:	60fb      	str	r3, [r7, #12]
 8002bdc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bde:	429a      	cmp	r2, r3
 8002be0:	d307      	bcc.n	8002bf2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f003 0301 	and.w	r3, r3, #1
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d1f2      	bne.n	8002bd6 <HAL_DMA_IRQHandler+0x8da>
 8002bf0:	e000      	b.n	8002bf4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8002bf2:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 0301 	and.w	r3, r3, #1
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d004      	beq.n	8002c0c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2203      	movs	r2, #3
 8002c06:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8002c0a:	e003      	b.n	8002c14 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2201      	movs	r2, #1
 8002c10:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2200      	movs	r2, #0
 8002c18:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	f000 82aa 	beq.w	800317a <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c2a:	6878      	ldr	r0, [r7, #4]
 8002c2c:	4798      	blx	r3
 8002c2e:	e2a4      	b.n	800317a <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a52      	ldr	r2, [pc, #328]	@ (8002d80 <HAL_DMA_IRQHandler+0xa84>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d04a      	beq.n	8002cd0 <HAL_DMA_IRQHandler+0x9d4>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a51      	ldr	r2, [pc, #324]	@ (8002d84 <HAL_DMA_IRQHandler+0xa88>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d045      	beq.n	8002cd0 <HAL_DMA_IRQHandler+0x9d4>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a4f      	ldr	r2, [pc, #316]	@ (8002d88 <HAL_DMA_IRQHandler+0xa8c>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d040      	beq.n	8002cd0 <HAL_DMA_IRQHandler+0x9d4>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a4e      	ldr	r2, [pc, #312]	@ (8002d8c <HAL_DMA_IRQHandler+0xa90>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d03b      	beq.n	8002cd0 <HAL_DMA_IRQHandler+0x9d4>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a4c      	ldr	r2, [pc, #304]	@ (8002d90 <HAL_DMA_IRQHandler+0xa94>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d036      	beq.n	8002cd0 <HAL_DMA_IRQHandler+0x9d4>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a4b      	ldr	r2, [pc, #300]	@ (8002d94 <HAL_DMA_IRQHandler+0xa98>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d031      	beq.n	8002cd0 <HAL_DMA_IRQHandler+0x9d4>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a49      	ldr	r2, [pc, #292]	@ (8002d98 <HAL_DMA_IRQHandler+0xa9c>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d02c      	beq.n	8002cd0 <HAL_DMA_IRQHandler+0x9d4>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a48      	ldr	r2, [pc, #288]	@ (8002d9c <HAL_DMA_IRQHandler+0xaa0>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d027      	beq.n	8002cd0 <HAL_DMA_IRQHandler+0x9d4>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a46      	ldr	r2, [pc, #280]	@ (8002da0 <HAL_DMA_IRQHandler+0xaa4>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d022      	beq.n	8002cd0 <HAL_DMA_IRQHandler+0x9d4>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a45      	ldr	r2, [pc, #276]	@ (8002da4 <HAL_DMA_IRQHandler+0xaa8>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d01d      	beq.n	8002cd0 <HAL_DMA_IRQHandler+0x9d4>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a43      	ldr	r2, [pc, #268]	@ (8002da8 <HAL_DMA_IRQHandler+0xaac>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d018      	beq.n	8002cd0 <HAL_DMA_IRQHandler+0x9d4>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a42      	ldr	r2, [pc, #264]	@ (8002dac <HAL_DMA_IRQHandler+0xab0>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d013      	beq.n	8002cd0 <HAL_DMA_IRQHandler+0x9d4>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a40      	ldr	r2, [pc, #256]	@ (8002db0 <HAL_DMA_IRQHandler+0xab4>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d00e      	beq.n	8002cd0 <HAL_DMA_IRQHandler+0x9d4>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a3f      	ldr	r2, [pc, #252]	@ (8002db4 <HAL_DMA_IRQHandler+0xab8>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d009      	beq.n	8002cd0 <HAL_DMA_IRQHandler+0x9d4>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a3d      	ldr	r2, [pc, #244]	@ (8002db8 <HAL_DMA_IRQHandler+0xabc>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d004      	beq.n	8002cd0 <HAL_DMA_IRQHandler+0x9d4>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a3c      	ldr	r2, [pc, #240]	@ (8002dbc <HAL_DMA_IRQHandler+0xac0>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d101      	bne.n	8002cd4 <HAL_DMA_IRQHandler+0x9d8>
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	e000      	b.n	8002cd6 <HAL_DMA_IRQHandler+0x9da>
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	f000 824f 	beq.w	800317a <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ce8:	f003 031f 	and.w	r3, r3, #31
 8002cec:	2204      	movs	r2, #4
 8002cee:	409a      	lsls	r2, r3
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	f000 80dd 	beq.w	8002eb4 <HAL_DMA_IRQHandler+0xbb8>
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	f003 0304 	and.w	r3, r3, #4
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	f000 80d7 	beq.w	8002eb4 <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d0a:	f003 031f 	and.w	r3, r3, #31
 8002d0e:	2204      	movs	r2, #4
 8002d10:	409a      	lsls	r2, r3
 8002d12:	69fb      	ldr	r3, [r7, #28]
 8002d14:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d059      	beq.n	8002dd4 <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d14a      	bne.n	8002dc0 <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	f000 8220 	beq.w	8003174 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d38:	6878      	ldr	r0, [r7, #4]
 8002d3a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002d3c:	e21a      	b.n	8003174 <HAL_DMA_IRQHandler+0xe78>
 8002d3e:	bf00      	nop
 8002d40:	40020010 	.word	0x40020010
 8002d44:	40020028 	.word	0x40020028
 8002d48:	40020040 	.word	0x40020040
 8002d4c:	40020058 	.word	0x40020058
 8002d50:	40020070 	.word	0x40020070
 8002d54:	40020088 	.word	0x40020088
 8002d58:	400200a0 	.word	0x400200a0
 8002d5c:	400200b8 	.word	0x400200b8
 8002d60:	40020410 	.word	0x40020410
 8002d64:	40020428 	.word	0x40020428
 8002d68:	40020440 	.word	0x40020440
 8002d6c:	40020458 	.word	0x40020458
 8002d70:	40020470 	.word	0x40020470
 8002d74:	40020488 	.word	0x40020488
 8002d78:	400204a0 	.word	0x400204a0
 8002d7c:	400204b8 	.word	0x400204b8
 8002d80:	48022c08 	.word	0x48022c08
 8002d84:	48022c1c 	.word	0x48022c1c
 8002d88:	48022c30 	.word	0x48022c30
 8002d8c:	48022c44 	.word	0x48022c44
 8002d90:	48022c58 	.word	0x48022c58
 8002d94:	48022c6c 	.word	0x48022c6c
 8002d98:	48022c80 	.word	0x48022c80
 8002d9c:	48022c94 	.word	0x48022c94
 8002da0:	58025408 	.word	0x58025408
 8002da4:	5802541c 	.word	0x5802541c
 8002da8:	58025430 	.word	0x58025430
 8002dac:	58025444 	.word	0x58025444
 8002db0:	58025458 	.word	0x58025458
 8002db4:	5802546c 	.word	0x5802546c
 8002db8:	58025480 	.word	0x58025480
 8002dbc:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	f000 81d5 	beq.w	8003174 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002dd2:	e1cf      	b.n	8003174 <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	f003 0320 	and.w	r3, r3, #32
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d160      	bne.n	8002ea0 <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a7f      	ldr	r2, [pc, #508]	@ (8002fe0 <HAL_DMA_IRQHandler+0xce4>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d04a      	beq.n	8002e7e <HAL_DMA_IRQHandler+0xb82>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a7d      	ldr	r2, [pc, #500]	@ (8002fe4 <HAL_DMA_IRQHandler+0xce8>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d045      	beq.n	8002e7e <HAL_DMA_IRQHandler+0xb82>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a7c      	ldr	r2, [pc, #496]	@ (8002fe8 <HAL_DMA_IRQHandler+0xcec>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d040      	beq.n	8002e7e <HAL_DMA_IRQHandler+0xb82>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a7a      	ldr	r2, [pc, #488]	@ (8002fec <HAL_DMA_IRQHandler+0xcf0>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d03b      	beq.n	8002e7e <HAL_DMA_IRQHandler+0xb82>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a79      	ldr	r2, [pc, #484]	@ (8002ff0 <HAL_DMA_IRQHandler+0xcf4>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d036      	beq.n	8002e7e <HAL_DMA_IRQHandler+0xb82>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a77      	ldr	r2, [pc, #476]	@ (8002ff4 <HAL_DMA_IRQHandler+0xcf8>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d031      	beq.n	8002e7e <HAL_DMA_IRQHandler+0xb82>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a76      	ldr	r2, [pc, #472]	@ (8002ff8 <HAL_DMA_IRQHandler+0xcfc>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d02c      	beq.n	8002e7e <HAL_DMA_IRQHandler+0xb82>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a74      	ldr	r2, [pc, #464]	@ (8002ffc <HAL_DMA_IRQHandler+0xd00>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d027      	beq.n	8002e7e <HAL_DMA_IRQHandler+0xb82>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a73      	ldr	r2, [pc, #460]	@ (8003000 <HAL_DMA_IRQHandler+0xd04>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d022      	beq.n	8002e7e <HAL_DMA_IRQHandler+0xb82>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a71      	ldr	r2, [pc, #452]	@ (8003004 <HAL_DMA_IRQHandler+0xd08>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d01d      	beq.n	8002e7e <HAL_DMA_IRQHandler+0xb82>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a70      	ldr	r2, [pc, #448]	@ (8003008 <HAL_DMA_IRQHandler+0xd0c>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d018      	beq.n	8002e7e <HAL_DMA_IRQHandler+0xb82>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a6e      	ldr	r2, [pc, #440]	@ (800300c <HAL_DMA_IRQHandler+0xd10>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d013      	beq.n	8002e7e <HAL_DMA_IRQHandler+0xb82>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a6d      	ldr	r2, [pc, #436]	@ (8003010 <HAL_DMA_IRQHandler+0xd14>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d00e      	beq.n	8002e7e <HAL_DMA_IRQHandler+0xb82>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a6b      	ldr	r2, [pc, #428]	@ (8003014 <HAL_DMA_IRQHandler+0xd18>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d009      	beq.n	8002e7e <HAL_DMA_IRQHandler+0xb82>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a6a      	ldr	r2, [pc, #424]	@ (8003018 <HAL_DMA_IRQHandler+0xd1c>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d004      	beq.n	8002e7e <HAL_DMA_IRQHandler+0xb82>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a68      	ldr	r2, [pc, #416]	@ (800301c <HAL_DMA_IRQHandler+0xd20>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d108      	bne.n	8002e90 <HAL_DMA_IRQHandler+0xb94>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f022 0208 	bic.w	r2, r2, #8
 8002e8c:	601a      	str	r2, [r3, #0]
 8002e8e:	e007      	b.n	8002ea0 <HAL_DMA_IRQHandler+0xba4>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f022 0204 	bic.w	r2, r2, #4
 8002e9e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	f000 8165 	beq.w	8003174 <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002eb2:	e15f      	b.n	8003174 <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002eb8:	f003 031f 	and.w	r3, r3, #31
 8002ebc:	2202      	movs	r2, #2
 8002ebe:	409a      	lsls	r2, r3
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	f000 80c5 	beq.w	8003054 <HAL_DMA_IRQHandler+0xd58>
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	f003 0302 	and.w	r3, r3, #2
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	f000 80bf 	beq.w	8003054 <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002eda:	f003 031f 	and.w	r3, r3, #31
 8002ede:	2202      	movs	r2, #2
 8002ee0:	409a      	lsls	r2, r3
 8002ee2:	69fb      	ldr	r3, [r7, #28]
 8002ee4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d018      	beq.n	8002f22 <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d109      	bne.n	8002f0e <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	f000 813a 	beq.w	8003178 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f08:	6878      	ldr	r0, [r7, #4]
 8002f0a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002f0c:	e134      	b.n	8003178 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	f000 8130 	beq.w	8003178 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f1c:	6878      	ldr	r0, [r7, #4]
 8002f1e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002f20:	e12a      	b.n	8003178 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	f003 0320 	and.w	r3, r3, #32
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	f040 8089 	bne.w	8003040 <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a2b      	ldr	r2, [pc, #172]	@ (8002fe0 <HAL_DMA_IRQHandler+0xce4>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d04a      	beq.n	8002fce <HAL_DMA_IRQHandler+0xcd2>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a29      	ldr	r2, [pc, #164]	@ (8002fe4 <HAL_DMA_IRQHandler+0xce8>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d045      	beq.n	8002fce <HAL_DMA_IRQHandler+0xcd2>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a28      	ldr	r2, [pc, #160]	@ (8002fe8 <HAL_DMA_IRQHandler+0xcec>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d040      	beq.n	8002fce <HAL_DMA_IRQHandler+0xcd2>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a26      	ldr	r2, [pc, #152]	@ (8002fec <HAL_DMA_IRQHandler+0xcf0>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d03b      	beq.n	8002fce <HAL_DMA_IRQHandler+0xcd2>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a25      	ldr	r2, [pc, #148]	@ (8002ff0 <HAL_DMA_IRQHandler+0xcf4>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d036      	beq.n	8002fce <HAL_DMA_IRQHandler+0xcd2>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a23      	ldr	r2, [pc, #140]	@ (8002ff4 <HAL_DMA_IRQHandler+0xcf8>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d031      	beq.n	8002fce <HAL_DMA_IRQHandler+0xcd2>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a22      	ldr	r2, [pc, #136]	@ (8002ff8 <HAL_DMA_IRQHandler+0xcfc>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d02c      	beq.n	8002fce <HAL_DMA_IRQHandler+0xcd2>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a20      	ldr	r2, [pc, #128]	@ (8002ffc <HAL_DMA_IRQHandler+0xd00>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d027      	beq.n	8002fce <HAL_DMA_IRQHandler+0xcd2>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a1f      	ldr	r2, [pc, #124]	@ (8003000 <HAL_DMA_IRQHandler+0xd04>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d022      	beq.n	8002fce <HAL_DMA_IRQHandler+0xcd2>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a1d      	ldr	r2, [pc, #116]	@ (8003004 <HAL_DMA_IRQHandler+0xd08>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d01d      	beq.n	8002fce <HAL_DMA_IRQHandler+0xcd2>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a1c      	ldr	r2, [pc, #112]	@ (8003008 <HAL_DMA_IRQHandler+0xd0c>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d018      	beq.n	8002fce <HAL_DMA_IRQHandler+0xcd2>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a1a      	ldr	r2, [pc, #104]	@ (800300c <HAL_DMA_IRQHandler+0xd10>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d013      	beq.n	8002fce <HAL_DMA_IRQHandler+0xcd2>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a19      	ldr	r2, [pc, #100]	@ (8003010 <HAL_DMA_IRQHandler+0xd14>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d00e      	beq.n	8002fce <HAL_DMA_IRQHandler+0xcd2>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a17      	ldr	r2, [pc, #92]	@ (8003014 <HAL_DMA_IRQHandler+0xd18>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d009      	beq.n	8002fce <HAL_DMA_IRQHandler+0xcd2>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a16      	ldr	r2, [pc, #88]	@ (8003018 <HAL_DMA_IRQHandler+0xd1c>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d004      	beq.n	8002fce <HAL_DMA_IRQHandler+0xcd2>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a14      	ldr	r2, [pc, #80]	@ (800301c <HAL_DMA_IRQHandler+0xd20>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d128      	bne.n	8003020 <HAL_DMA_IRQHandler+0xd24>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	681a      	ldr	r2, [r3, #0]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f022 0214 	bic.w	r2, r2, #20
 8002fdc:	601a      	str	r2, [r3, #0]
 8002fde:	e027      	b.n	8003030 <HAL_DMA_IRQHandler+0xd34>
 8002fe0:	40020010 	.word	0x40020010
 8002fe4:	40020028 	.word	0x40020028
 8002fe8:	40020040 	.word	0x40020040
 8002fec:	40020058 	.word	0x40020058
 8002ff0:	40020070 	.word	0x40020070
 8002ff4:	40020088 	.word	0x40020088
 8002ff8:	400200a0 	.word	0x400200a0
 8002ffc:	400200b8 	.word	0x400200b8
 8003000:	40020410 	.word	0x40020410
 8003004:	40020428 	.word	0x40020428
 8003008:	40020440 	.word	0x40020440
 800300c:	40020458 	.word	0x40020458
 8003010:	40020470 	.word	0x40020470
 8003014:	40020488 	.word	0x40020488
 8003018:	400204a0 	.word	0x400204a0
 800301c:	400204b8 	.word	0x400204b8
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f022 020a 	bic.w	r2, r2, #10
 800302e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2201      	movs	r2, #1
 8003034:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2200      	movs	r2, #0
 800303c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003044:	2b00      	cmp	r3, #0
 8003046:	f000 8097 	beq.w	8003178 <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003052:	e091      	b.n	8003178 <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003058:	f003 031f 	and.w	r3, r3, #31
 800305c:	2208      	movs	r2, #8
 800305e:	409a      	lsls	r2, r3
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	4013      	ands	r3, r2
 8003064:	2b00      	cmp	r3, #0
 8003066:	f000 8088 	beq.w	800317a <HAL_DMA_IRQHandler+0xe7e>
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	f003 0308 	and.w	r3, r3, #8
 8003070:	2b00      	cmp	r3, #0
 8003072:	f000 8082 	beq.w	800317a <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a41      	ldr	r2, [pc, #260]	@ (8003180 <HAL_DMA_IRQHandler+0xe84>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d04a      	beq.n	8003116 <HAL_DMA_IRQHandler+0xe1a>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a3f      	ldr	r2, [pc, #252]	@ (8003184 <HAL_DMA_IRQHandler+0xe88>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d045      	beq.n	8003116 <HAL_DMA_IRQHandler+0xe1a>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a3e      	ldr	r2, [pc, #248]	@ (8003188 <HAL_DMA_IRQHandler+0xe8c>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d040      	beq.n	8003116 <HAL_DMA_IRQHandler+0xe1a>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a3c      	ldr	r2, [pc, #240]	@ (800318c <HAL_DMA_IRQHandler+0xe90>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d03b      	beq.n	8003116 <HAL_DMA_IRQHandler+0xe1a>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a3b      	ldr	r2, [pc, #236]	@ (8003190 <HAL_DMA_IRQHandler+0xe94>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d036      	beq.n	8003116 <HAL_DMA_IRQHandler+0xe1a>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a39      	ldr	r2, [pc, #228]	@ (8003194 <HAL_DMA_IRQHandler+0xe98>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d031      	beq.n	8003116 <HAL_DMA_IRQHandler+0xe1a>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a38      	ldr	r2, [pc, #224]	@ (8003198 <HAL_DMA_IRQHandler+0xe9c>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d02c      	beq.n	8003116 <HAL_DMA_IRQHandler+0xe1a>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a36      	ldr	r2, [pc, #216]	@ (800319c <HAL_DMA_IRQHandler+0xea0>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d027      	beq.n	8003116 <HAL_DMA_IRQHandler+0xe1a>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a35      	ldr	r2, [pc, #212]	@ (80031a0 <HAL_DMA_IRQHandler+0xea4>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d022      	beq.n	8003116 <HAL_DMA_IRQHandler+0xe1a>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a33      	ldr	r2, [pc, #204]	@ (80031a4 <HAL_DMA_IRQHandler+0xea8>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d01d      	beq.n	8003116 <HAL_DMA_IRQHandler+0xe1a>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a32      	ldr	r2, [pc, #200]	@ (80031a8 <HAL_DMA_IRQHandler+0xeac>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d018      	beq.n	8003116 <HAL_DMA_IRQHandler+0xe1a>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a30      	ldr	r2, [pc, #192]	@ (80031ac <HAL_DMA_IRQHandler+0xeb0>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d013      	beq.n	8003116 <HAL_DMA_IRQHandler+0xe1a>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a2f      	ldr	r2, [pc, #188]	@ (80031b0 <HAL_DMA_IRQHandler+0xeb4>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d00e      	beq.n	8003116 <HAL_DMA_IRQHandler+0xe1a>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a2d      	ldr	r2, [pc, #180]	@ (80031b4 <HAL_DMA_IRQHandler+0xeb8>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d009      	beq.n	8003116 <HAL_DMA_IRQHandler+0xe1a>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a2c      	ldr	r2, [pc, #176]	@ (80031b8 <HAL_DMA_IRQHandler+0xebc>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d004      	beq.n	8003116 <HAL_DMA_IRQHandler+0xe1a>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a2a      	ldr	r2, [pc, #168]	@ (80031bc <HAL_DMA_IRQHandler+0xec0>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d108      	bne.n	8003128 <HAL_DMA_IRQHandler+0xe2c>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f022 021c 	bic.w	r2, r2, #28
 8003124:	601a      	str	r2, [r3, #0]
 8003126:	e007      	b.n	8003138 <HAL_DMA_IRQHandler+0xe3c>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f022 020e 	bic.w	r2, r2, #14
 8003136:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800313c:	f003 031f 	and.w	r3, r3, #31
 8003140:	2201      	movs	r2, #1
 8003142:	409a      	lsls	r2, r3
 8003144:	69fb      	ldr	r3, [r7, #28]
 8003146:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2201      	movs	r2, #1
 800314c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2201      	movs	r2, #1
 8003152:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2200      	movs	r2, #0
 800315a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003162:	2b00      	cmp	r3, #0
 8003164:	d009      	beq.n	800317a <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	4798      	blx	r3
 800316e:	e004      	b.n	800317a <HAL_DMA_IRQHandler+0xe7e>
          return;
 8003170:	bf00      	nop
 8003172:	e002      	b.n	800317a <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003174:	bf00      	nop
 8003176:	e000      	b.n	800317a <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003178:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800317a:	3728      	adds	r7, #40	@ 0x28
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}
 8003180:	40020010 	.word	0x40020010
 8003184:	40020028 	.word	0x40020028
 8003188:	40020040 	.word	0x40020040
 800318c:	40020058 	.word	0x40020058
 8003190:	40020070 	.word	0x40020070
 8003194:	40020088 	.word	0x40020088
 8003198:	400200a0 	.word	0x400200a0
 800319c:	400200b8 	.word	0x400200b8
 80031a0:	40020410 	.word	0x40020410
 80031a4:	40020428 	.word	0x40020428
 80031a8:	40020440 	.word	0x40020440
 80031ac:	40020458 	.word	0x40020458
 80031b0:	40020470 	.word	0x40020470
 80031b4:	40020488 	.word	0x40020488
 80031b8:	400204a0 	.word	0x400204a0
 80031bc:	400204b8 	.word	0x400204b8

080031c0 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b083      	sub	sp, #12
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80031ce:	b2db      	uxtb	r3, r3
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	370c      	adds	r7, #12
 80031d4:	46bd      	mov	sp, r7
 80031d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031da:	4770      	bx	lr

080031dc <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80031dc:	b480      	push	{r7}
 80031de:	b083      	sub	sp, #12
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	370c      	adds	r7, #12
 80031ec:	46bd      	mov	sp, r7
 80031ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f2:	4770      	bx	lr

080031f4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b087      	sub	sp, #28
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	60f8      	str	r0, [r7, #12]
 80031fc:	60b9      	str	r1, [r7, #8]
 80031fe:	607a      	str	r2, [r7, #4]
 8003200:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003206:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800320c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a7f      	ldr	r2, [pc, #508]	@ (8003410 <DMA_SetConfig+0x21c>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d072      	beq.n	80032fe <DMA_SetConfig+0x10a>
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a7d      	ldr	r2, [pc, #500]	@ (8003414 <DMA_SetConfig+0x220>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d06d      	beq.n	80032fe <DMA_SetConfig+0x10a>
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a7c      	ldr	r2, [pc, #496]	@ (8003418 <DMA_SetConfig+0x224>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d068      	beq.n	80032fe <DMA_SetConfig+0x10a>
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a7a      	ldr	r2, [pc, #488]	@ (800341c <DMA_SetConfig+0x228>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d063      	beq.n	80032fe <DMA_SetConfig+0x10a>
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a79      	ldr	r2, [pc, #484]	@ (8003420 <DMA_SetConfig+0x22c>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d05e      	beq.n	80032fe <DMA_SetConfig+0x10a>
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a77      	ldr	r2, [pc, #476]	@ (8003424 <DMA_SetConfig+0x230>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d059      	beq.n	80032fe <DMA_SetConfig+0x10a>
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a76      	ldr	r2, [pc, #472]	@ (8003428 <DMA_SetConfig+0x234>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d054      	beq.n	80032fe <DMA_SetConfig+0x10a>
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a74      	ldr	r2, [pc, #464]	@ (800342c <DMA_SetConfig+0x238>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d04f      	beq.n	80032fe <DMA_SetConfig+0x10a>
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a73      	ldr	r2, [pc, #460]	@ (8003430 <DMA_SetConfig+0x23c>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d04a      	beq.n	80032fe <DMA_SetConfig+0x10a>
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a71      	ldr	r2, [pc, #452]	@ (8003434 <DMA_SetConfig+0x240>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d045      	beq.n	80032fe <DMA_SetConfig+0x10a>
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a70      	ldr	r2, [pc, #448]	@ (8003438 <DMA_SetConfig+0x244>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d040      	beq.n	80032fe <DMA_SetConfig+0x10a>
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a6e      	ldr	r2, [pc, #440]	@ (800343c <DMA_SetConfig+0x248>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d03b      	beq.n	80032fe <DMA_SetConfig+0x10a>
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a6d      	ldr	r2, [pc, #436]	@ (8003440 <DMA_SetConfig+0x24c>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d036      	beq.n	80032fe <DMA_SetConfig+0x10a>
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a6b      	ldr	r2, [pc, #428]	@ (8003444 <DMA_SetConfig+0x250>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d031      	beq.n	80032fe <DMA_SetConfig+0x10a>
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a6a      	ldr	r2, [pc, #424]	@ (8003448 <DMA_SetConfig+0x254>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d02c      	beq.n	80032fe <DMA_SetConfig+0x10a>
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a68      	ldr	r2, [pc, #416]	@ (800344c <DMA_SetConfig+0x258>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d027      	beq.n	80032fe <DMA_SetConfig+0x10a>
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a67      	ldr	r2, [pc, #412]	@ (8003450 <DMA_SetConfig+0x25c>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d022      	beq.n	80032fe <DMA_SetConfig+0x10a>
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a65      	ldr	r2, [pc, #404]	@ (8003454 <DMA_SetConfig+0x260>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d01d      	beq.n	80032fe <DMA_SetConfig+0x10a>
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a64      	ldr	r2, [pc, #400]	@ (8003458 <DMA_SetConfig+0x264>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d018      	beq.n	80032fe <DMA_SetConfig+0x10a>
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a62      	ldr	r2, [pc, #392]	@ (800345c <DMA_SetConfig+0x268>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d013      	beq.n	80032fe <DMA_SetConfig+0x10a>
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a61      	ldr	r2, [pc, #388]	@ (8003460 <DMA_SetConfig+0x26c>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d00e      	beq.n	80032fe <DMA_SetConfig+0x10a>
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a5f      	ldr	r2, [pc, #380]	@ (8003464 <DMA_SetConfig+0x270>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d009      	beq.n	80032fe <DMA_SetConfig+0x10a>
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a5e      	ldr	r2, [pc, #376]	@ (8003468 <DMA_SetConfig+0x274>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d004      	beq.n	80032fe <DMA_SetConfig+0x10a>
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a5c      	ldr	r2, [pc, #368]	@ (800346c <DMA_SetConfig+0x278>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d101      	bne.n	8003302 <DMA_SetConfig+0x10e>
 80032fe:	2301      	movs	r3, #1
 8003300:	e000      	b.n	8003304 <DMA_SetConfig+0x110>
 8003302:	2300      	movs	r3, #0
 8003304:	2b00      	cmp	r3, #0
 8003306:	d00d      	beq.n	8003324 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800330c:	68fa      	ldr	r2, [r7, #12]
 800330e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003310:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003316:	2b00      	cmp	r3, #0
 8003318:	d004      	beq.n	8003324 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800331e:	68fa      	ldr	r2, [r7, #12]
 8003320:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003322:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a39      	ldr	r2, [pc, #228]	@ (8003410 <DMA_SetConfig+0x21c>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d04a      	beq.n	80033c4 <DMA_SetConfig+0x1d0>
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a38      	ldr	r2, [pc, #224]	@ (8003414 <DMA_SetConfig+0x220>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d045      	beq.n	80033c4 <DMA_SetConfig+0x1d0>
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a36      	ldr	r2, [pc, #216]	@ (8003418 <DMA_SetConfig+0x224>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d040      	beq.n	80033c4 <DMA_SetConfig+0x1d0>
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a35      	ldr	r2, [pc, #212]	@ (800341c <DMA_SetConfig+0x228>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d03b      	beq.n	80033c4 <DMA_SetConfig+0x1d0>
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a33      	ldr	r2, [pc, #204]	@ (8003420 <DMA_SetConfig+0x22c>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d036      	beq.n	80033c4 <DMA_SetConfig+0x1d0>
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a32      	ldr	r2, [pc, #200]	@ (8003424 <DMA_SetConfig+0x230>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d031      	beq.n	80033c4 <DMA_SetConfig+0x1d0>
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a30      	ldr	r2, [pc, #192]	@ (8003428 <DMA_SetConfig+0x234>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d02c      	beq.n	80033c4 <DMA_SetConfig+0x1d0>
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a2f      	ldr	r2, [pc, #188]	@ (800342c <DMA_SetConfig+0x238>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d027      	beq.n	80033c4 <DMA_SetConfig+0x1d0>
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a2d      	ldr	r2, [pc, #180]	@ (8003430 <DMA_SetConfig+0x23c>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d022      	beq.n	80033c4 <DMA_SetConfig+0x1d0>
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a2c      	ldr	r2, [pc, #176]	@ (8003434 <DMA_SetConfig+0x240>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d01d      	beq.n	80033c4 <DMA_SetConfig+0x1d0>
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a2a      	ldr	r2, [pc, #168]	@ (8003438 <DMA_SetConfig+0x244>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d018      	beq.n	80033c4 <DMA_SetConfig+0x1d0>
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a29      	ldr	r2, [pc, #164]	@ (800343c <DMA_SetConfig+0x248>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d013      	beq.n	80033c4 <DMA_SetConfig+0x1d0>
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a27      	ldr	r2, [pc, #156]	@ (8003440 <DMA_SetConfig+0x24c>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d00e      	beq.n	80033c4 <DMA_SetConfig+0x1d0>
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a26      	ldr	r2, [pc, #152]	@ (8003444 <DMA_SetConfig+0x250>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d009      	beq.n	80033c4 <DMA_SetConfig+0x1d0>
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a24      	ldr	r2, [pc, #144]	@ (8003448 <DMA_SetConfig+0x254>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d004      	beq.n	80033c4 <DMA_SetConfig+0x1d0>
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a23      	ldr	r2, [pc, #140]	@ (800344c <DMA_SetConfig+0x258>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d101      	bne.n	80033c8 <DMA_SetConfig+0x1d4>
 80033c4:	2301      	movs	r3, #1
 80033c6:	e000      	b.n	80033ca <DMA_SetConfig+0x1d6>
 80033c8:	2300      	movs	r3, #0
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d059      	beq.n	8003482 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033d2:	f003 031f 	and.w	r3, r3, #31
 80033d6:	223f      	movs	r2, #63	@ 0x3f
 80033d8:	409a      	lsls	r2, r3
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80033ec:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	683a      	ldr	r2, [r7, #0]
 80033f4:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	2b40      	cmp	r3, #64	@ 0x40
 80033fc:	d138      	bne.n	8003470 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	687a      	ldr	r2, [r7, #4]
 8003404:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	68ba      	ldr	r2, [r7, #8]
 800340c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800340e:	e0ae      	b.n	800356e <DMA_SetConfig+0x37a>
 8003410:	40020010 	.word	0x40020010
 8003414:	40020028 	.word	0x40020028
 8003418:	40020040 	.word	0x40020040
 800341c:	40020058 	.word	0x40020058
 8003420:	40020070 	.word	0x40020070
 8003424:	40020088 	.word	0x40020088
 8003428:	400200a0 	.word	0x400200a0
 800342c:	400200b8 	.word	0x400200b8
 8003430:	40020410 	.word	0x40020410
 8003434:	40020428 	.word	0x40020428
 8003438:	40020440 	.word	0x40020440
 800343c:	40020458 	.word	0x40020458
 8003440:	40020470 	.word	0x40020470
 8003444:	40020488 	.word	0x40020488
 8003448:	400204a0 	.word	0x400204a0
 800344c:	400204b8 	.word	0x400204b8
 8003450:	58025408 	.word	0x58025408
 8003454:	5802541c 	.word	0x5802541c
 8003458:	58025430 	.word	0x58025430
 800345c:	58025444 	.word	0x58025444
 8003460:	58025458 	.word	0x58025458
 8003464:	5802546c 	.word	0x5802546c
 8003468:	58025480 	.word	0x58025480
 800346c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	68ba      	ldr	r2, [r7, #8]
 8003476:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	687a      	ldr	r2, [r7, #4]
 800347e:	60da      	str	r2, [r3, #12]
}
 8003480:	e075      	b.n	800356e <DMA_SetConfig+0x37a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a3d      	ldr	r2, [pc, #244]	@ (800357c <DMA_SetConfig+0x388>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d04a      	beq.n	8003522 <DMA_SetConfig+0x32e>
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a3b      	ldr	r2, [pc, #236]	@ (8003580 <DMA_SetConfig+0x38c>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d045      	beq.n	8003522 <DMA_SetConfig+0x32e>
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a3a      	ldr	r2, [pc, #232]	@ (8003584 <DMA_SetConfig+0x390>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d040      	beq.n	8003522 <DMA_SetConfig+0x32e>
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a38      	ldr	r2, [pc, #224]	@ (8003588 <DMA_SetConfig+0x394>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d03b      	beq.n	8003522 <DMA_SetConfig+0x32e>
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a37      	ldr	r2, [pc, #220]	@ (800358c <DMA_SetConfig+0x398>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d036      	beq.n	8003522 <DMA_SetConfig+0x32e>
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a35      	ldr	r2, [pc, #212]	@ (8003590 <DMA_SetConfig+0x39c>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d031      	beq.n	8003522 <DMA_SetConfig+0x32e>
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a34      	ldr	r2, [pc, #208]	@ (8003594 <DMA_SetConfig+0x3a0>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d02c      	beq.n	8003522 <DMA_SetConfig+0x32e>
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a32      	ldr	r2, [pc, #200]	@ (8003598 <DMA_SetConfig+0x3a4>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d027      	beq.n	8003522 <DMA_SetConfig+0x32e>
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a31      	ldr	r2, [pc, #196]	@ (800359c <DMA_SetConfig+0x3a8>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d022      	beq.n	8003522 <DMA_SetConfig+0x32e>
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a2f      	ldr	r2, [pc, #188]	@ (80035a0 <DMA_SetConfig+0x3ac>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d01d      	beq.n	8003522 <DMA_SetConfig+0x32e>
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a2e      	ldr	r2, [pc, #184]	@ (80035a4 <DMA_SetConfig+0x3b0>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d018      	beq.n	8003522 <DMA_SetConfig+0x32e>
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a2c      	ldr	r2, [pc, #176]	@ (80035a8 <DMA_SetConfig+0x3b4>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d013      	beq.n	8003522 <DMA_SetConfig+0x32e>
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a2b      	ldr	r2, [pc, #172]	@ (80035ac <DMA_SetConfig+0x3b8>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d00e      	beq.n	8003522 <DMA_SetConfig+0x32e>
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a29      	ldr	r2, [pc, #164]	@ (80035b0 <DMA_SetConfig+0x3bc>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d009      	beq.n	8003522 <DMA_SetConfig+0x32e>
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a28      	ldr	r2, [pc, #160]	@ (80035b4 <DMA_SetConfig+0x3c0>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d004      	beq.n	8003522 <DMA_SetConfig+0x32e>
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a26      	ldr	r2, [pc, #152]	@ (80035b8 <DMA_SetConfig+0x3c4>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d101      	bne.n	8003526 <DMA_SetConfig+0x332>
 8003522:	2301      	movs	r3, #1
 8003524:	e000      	b.n	8003528 <DMA_SetConfig+0x334>
 8003526:	2300      	movs	r3, #0
 8003528:	2b00      	cmp	r3, #0
 800352a:	d020      	beq.n	800356e <DMA_SetConfig+0x37a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003530:	f003 031f 	and.w	r3, r3, #31
 8003534:	2201      	movs	r2, #1
 8003536:	409a      	lsls	r2, r3
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	683a      	ldr	r2, [r7, #0]
 8003542:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	2b40      	cmp	r3, #64	@ 0x40
 800354a:	d108      	bne.n	800355e <DMA_SetConfig+0x36a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	687a      	ldr	r2, [r7, #4]
 8003552:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	68ba      	ldr	r2, [r7, #8]
 800355a:	60da      	str	r2, [r3, #12]
}
 800355c:	e007      	b.n	800356e <DMA_SetConfig+0x37a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	68ba      	ldr	r2, [r7, #8]
 8003564:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	687a      	ldr	r2, [r7, #4]
 800356c:	60da      	str	r2, [r3, #12]
}
 800356e:	bf00      	nop
 8003570:	371c      	adds	r7, #28
 8003572:	46bd      	mov	sp, r7
 8003574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003578:	4770      	bx	lr
 800357a:	bf00      	nop
 800357c:	48022c08 	.word	0x48022c08
 8003580:	48022c1c 	.word	0x48022c1c
 8003584:	48022c30 	.word	0x48022c30
 8003588:	48022c44 	.word	0x48022c44
 800358c:	48022c58 	.word	0x48022c58
 8003590:	48022c6c 	.word	0x48022c6c
 8003594:	48022c80 	.word	0x48022c80
 8003598:	48022c94 	.word	0x48022c94
 800359c:	58025408 	.word	0x58025408
 80035a0:	5802541c 	.word	0x5802541c
 80035a4:	58025430 	.word	0x58025430
 80035a8:	58025444 	.word	0x58025444
 80035ac:	58025458 	.word	0x58025458
 80035b0:	5802546c 	.word	0x5802546c
 80035b4:	58025480 	.word	0x58025480
 80035b8:	58025494 	.word	0x58025494

080035bc <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80035bc:	b480      	push	{r7}
 80035be:	b085      	sub	sp, #20
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a42      	ldr	r2, [pc, #264]	@ (80036d4 <DMA_CalcBaseAndBitshift+0x118>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d04a      	beq.n	8003664 <DMA_CalcBaseAndBitshift+0xa8>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a41      	ldr	r2, [pc, #260]	@ (80036d8 <DMA_CalcBaseAndBitshift+0x11c>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d045      	beq.n	8003664 <DMA_CalcBaseAndBitshift+0xa8>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a3f      	ldr	r2, [pc, #252]	@ (80036dc <DMA_CalcBaseAndBitshift+0x120>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d040      	beq.n	8003664 <DMA_CalcBaseAndBitshift+0xa8>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a3e      	ldr	r2, [pc, #248]	@ (80036e0 <DMA_CalcBaseAndBitshift+0x124>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d03b      	beq.n	8003664 <DMA_CalcBaseAndBitshift+0xa8>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a3c      	ldr	r2, [pc, #240]	@ (80036e4 <DMA_CalcBaseAndBitshift+0x128>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d036      	beq.n	8003664 <DMA_CalcBaseAndBitshift+0xa8>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a3b      	ldr	r2, [pc, #236]	@ (80036e8 <DMA_CalcBaseAndBitshift+0x12c>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d031      	beq.n	8003664 <DMA_CalcBaseAndBitshift+0xa8>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a39      	ldr	r2, [pc, #228]	@ (80036ec <DMA_CalcBaseAndBitshift+0x130>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d02c      	beq.n	8003664 <DMA_CalcBaseAndBitshift+0xa8>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a38      	ldr	r2, [pc, #224]	@ (80036f0 <DMA_CalcBaseAndBitshift+0x134>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d027      	beq.n	8003664 <DMA_CalcBaseAndBitshift+0xa8>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a36      	ldr	r2, [pc, #216]	@ (80036f4 <DMA_CalcBaseAndBitshift+0x138>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d022      	beq.n	8003664 <DMA_CalcBaseAndBitshift+0xa8>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a35      	ldr	r2, [pc, #212]	@ (80036f8 <DMA_CalcBaseAndBitshift+0x13c>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d01d      	beq.n	8003664 <DMA_CalcBaseAndBitshift+0xa8>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a33      	ldr	r2, [pc, #204]	@ (80036fc <DMA_CalcBaseAndBitshift+0x140>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d018      	beq.n	8003664 <DMA_CalcBaseAndBitshift+0xa8>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a32      	ldr	r2, [pc, #200]	@ (8003700 <DMA_CalcBaseAndBitshift+0x144>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d013      	beq.n	8003664 <DMA_CalcBaseAndBitshift+0xa8>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a30      	ldr	r2, [pc, #192]	@ (8003704 <DMA_CalcBaseAndBitshift+0x148>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d00e      	beq.n	8003664 <DMA_CalcBaseAndBitshift+0xa8>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a2f      	ldr	r2, [pc, #188]	@ (8003708 <DMA_CalcBaseAndBitshift+0x14c>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d009      	beq.n	8003664 <DMA_CalcBaseAndBitshift+0xa8>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a2d      	ldr	r2, [pc, #180]	@ (800370c <DMA_CalcBaseAndBitshift+0x150>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d004      	beq.n	8003664 <DMA_CalcBaseAndBitshift+0xa8>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a2c      	ldr	r2, [pc, #176]	@ (8003710 <DMA_CalcBaseAndBitshift+0x154>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d101      	bne.n	8003668 <DMA_CalcBaseAndBitshift+0xac>
 8003664:	2301      	movs	r3, #1
 8003666:	e000      	b.n	800366a <DMA_CalcBaseAndBitshift+0xae>
 8003668:	2300      	movs	r3, #0
 800366a:	2b00      	cmp	r3, #0
 800366c:	d024      	beq.n	80036b8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	b2db      	uxtb	r3, r3
 8003674:	3b10      	subs	r3, #16
 8003676:	4a27      	ldr	r2, [pc, #156]	@ (8003714 <DMA_CalcBaseAndBitshift+0x158>)
 8003678:	fba2 2303 	umull	r2, r3, r2, r3
 800367c:	091b      	lsrs	r3, r3, #4
 800367e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	f003 0307 	and.w	r3, r3, #7
 8003686:	4a24      	ldr	r2, [pc, #144]	@ (8003718 <DMA_CalcBaseAndBitshift+0x15c>)
 8003688:	5cd3      	ldrb	r3, [r2, r3]
 800368a:	461a      	mov	r2, r3
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2b03      	cmp	r3, #3
 8003694:	d908      	bls.n	80036a8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	461a      	mov	r2, r3
 800369c:	4b1f      	ldr	r3, [pc, #124]	@ (800371c <DMA_CalcBaseAndBitshift+0x160>)
 800369e:	4013      	ands	r3, r2
 80036a0:	1d1a      	adds	r2, r3, #4
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	659a      	str	r2, [r3, #88]	@ 0x58
 80036a6:	e00d      	b.n	80036c4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	461a      	mov	r2, r3
 80036ae:	4b1b      	ldr	r3, [pc, #108]	@ (800371c <DMA_CalcBaseAndBitshift+0x160>)
 80036b0:	4013      	ands	r3, r2
 80036b2:	687a      	ldr	r2, [r7, #4]
 80036b4:	6593      	str	r3, [r2, #88]	@ 0x58
 80036b6:	e005      	b.n	80036c4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	3714      	adds	r7, #20
 80036cc:	46bd      	mov	sp, r7
 80036ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d2:	4770      	bx	lr
 80036d4:	40020010 	.word	0x40020010
 80036d8:	40020028 	.word	0x40020028
 80036dc:	40020040 	.word	0x40020040
 80036e0:	40020058 	.word	0x40020058
 80036e4:	40020070 	.word	0x40020070
 80036e8:	40020088 	.word	0x40020088
 80036ec:	400200a0 	.word	0x400200a0
 80036f0:	400200b8 	.word	0x400200b8
 80036f4:	40020410 	.word	0x40020410
 80036f8:	40020428 	.word	0x40020428
 80036fc:	40020440 	.word	0x40020440
 8003700:	40020458 	.word	0x40020458
 8003704:	40020470 	.word	0x40020470
 8003708:	40020488 	.word	0x40020488
 800370c:	400204a0 	.word	0x400204a0
 8003710:	400204b8 	.word	0x400204b8
 8003714:	aaaaaaab 	.word	0xaaaaaaab
 8003718:	0800c078 	.word	0x0800c078
 800371c:	fffffc00 	.word	0xfffffc00

08003720 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003720:	b480      	push	{r7}
 8003722:	b085      	sub	sp, #20
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003728:	2300      	movs	r3, #0
 800372a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	699b      	ldr	r3, [r3, #24]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d120      	bne.n	8003776 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003738:	2b03      	cmp	r3, #3
 800373a:	d858      	bhi.n	80037ee <DMA_CheckFifoParam+0xce>
 800373c:	a201      	add	r2, pc, #4	@ (adr r2, 8003744 <DMA_CheckFifoParam+0x24>)
 800373e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003742:	bf00      	nop
 8003744:	08003755 	.word	0x08003755
 8003748:	08003767 	.word	0x08003767
 800374c:	08003755 	.word	0x08003755
 8003750:	080037ef 	.word	0x080037ef
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003758:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800375c:	2b00      	cmp	r3, #0
 800375e:	d048      	beq.n	80037f2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003764:	e045      	b.n	80037f2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800376a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800376e:	d142      	bne.n	80037f6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003774:	e03f      	b.n	80037f6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	699b      	ldr	r3, [r3, #24]
 800377a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800377e:	d123      	bne.n	80037c8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003784:	2b03      	cmp	r3, #3
 8003786:	d838      	bhi.n	80037fa <DMA_CheckFifoParam+0xda>
 8003788:	a201      	add	r2, pc, #4	@ (adr r2, 8003790 <DMA_CheckFifoParam+0x70>)
 800378a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800378e:	bf00      	nop
 8003790:	080037a1 	.word	0x080037a1
 8003794:	080037a7 	.word	0x080037a7
 8003798:	080037a1 	.word	0x080037a1
 800379c:	080037b9 	.word	0x080037b9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	73fb      	strb	r3, [r7, #15]
        break;
 80037a4:	e030      	b.n	8003808 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037aa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d025      	beq.n	80037fe <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80037b6:	e022      	b.n	80037fe <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037bc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80037c0:	d11f      	bne.n	8003802 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80037c6:	e01c      	b.n	8003802 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037cc:	2b02      	cmp	r3, #2
 80037ce:	d902      	bls.n	80037d6 <DMA_CheckFifoParam+0xb6>
 80037d0:	2b03      	cmp	r3, #3
 80037d2:	d003      	beq.n	80037dc <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80037d4:	e018      	b.n	8003808 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	73fb      	strb	r3, [r7, #15]
        break;
 80037da:	e015      	b.n	8003808 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037e0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d00e      	beq.n	8003806 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	73fb      	strb	r3, [r7, #15]
    break;
 80037ec:	e00b      	b.n	8003806 <DMA_CheckFifoParam+0xe6>
        break;
 80037ee:	bf00      	nop
 80037f0:	e00a      	b.n	8003808 <DMA_CheckFifoParam+0xe8>
        break;
 80037f2:	bf00      	nop
 80037f4:	e008      	b.n	8003808 <DMA_CheckFifoParam+0xe8>
        break;
 80037f6:	bf00      	nop
 80037f8:	e006      	b.n	8003808 <DMA_CheckFifoParam+0xe8>
        break;
 80037fa:	bf00      	nop
 80037fc:	e004      	b.n	8003808 <DMA_CheckFifoParam+0xe8>
        break;
 80037fe:	bf00      	nop
 8003800:	e002      	b.n	8003808 <DMA_CheckFifoParam+0xe8>
        break;
 8003802:	bf00      	nop
 8003804:	e000      	b.n	8003808 <DMA_CheckFifoParam+0xe8>
    break;
 8003806:	bf00      	nop
    }
  }

  return status;
 8003808:	7bfb      	ldrb	r3, [r7, #15]
}
 800380a:	4618      	mov	r0, r3
 800380c:	3714      	adds	r7, #20
 800380e:	46bd      	mov	sp, r7
 8003810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003814:	4770      	bx	lr
 8003816:	bf00      	nop

08003818 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003818:	b480      	push	{r7}
 800381a:	b085      	sub	sp, #20
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a38      	ldr	r2, [pc, #224]	@ (800390c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d022      	beq.n	8003876 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a36      	ldr	r2, [pc, #216]	@ (8003910 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d01d      	beq.n	8003876 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a35      	ldr	r2, [pc, #212]	@ (8003914 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d018      	beq.n	8003876 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a33      	ldr	r2, [pc, #204]	@ (8003918 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d013      	beq.n	8003876 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a32      	ldr	r2, [pc, #200]	@ (800391c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d00e      	beq.n	8003876 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a30      	ldr	r2, [pc, #192]	@ (8003920 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d009      	beq.n	8003876 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a2f      	ldr	r2, [pc, #188]	@ (8003924 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d004      	beq.n	8003876 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a2d      	ldr	r2, [pc, #180]	@ (8003928 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d101      	bne.n	800387a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8003876:	2301      	movs	r3, #1
 8003878:	e000      	b.n	800387c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800387a:	2300      	movs	r3, #0
 800387c:	2b00      	cmp	r3, #0
 800387e:	d01a      	beq.n	80038b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	b2db      	uxtb	r3, r3
 8003886:	3b08      	subs	r3, #8
 8003888:	4a28      	ldr	r2, [pc, #160]	@ (800392c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800388a:	fba2 2303 	umull	r2, r3, r2, r3
 800388e:	091b      	lsrs	r3, r3, #4
 8003890:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003892:	68fa      	ldr	r2, [r7, #12]
 8003894:	4b26      	ldr	r3, [pc, #152]	@ (8003930 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8003896:	4413      	add	r3, r2
 8003898:	009b      	lsls	r3, r3, #2
 800389a:	461a      	mov	r2, r3
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	4a24      	ldr	r2, [pc, #144]	@ (8003934 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80038a4:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	f003 031f 	and.w	r3, r3, #31
 80038ac:	2201      	movs	r2, #1
 80038ae:	409a      	lsls	r2, r3
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80038b4:	e024      	b.n	8003900 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	b2db      	uxtb	r3, r3
 80038bc:	3b10      	subs	r3, #16
 80038be:	4a1e      	ldr	r2, [pc, #120]	@ (8003938 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80038c0:	fba2 2303 	umull	r2, r3, r2, r3
 80038c4:	091b      	lsrs	r3, r3, #4
 80038c6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	4a1c      	ldr	r2, [pc, #112]	@ (800393c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d806      	bhi.n	80038de <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	4a1b      	ldr	r2, [pc, #108]	@ (8003940 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d902      	bls.n	80038de <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	3308      	adds	r3, #8
 80038dc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80038de:	68fa      	ldr	r2, [r7, #12]
 80038e0:	4b18      	ldr	r3, [pc, #96]	@ (8003944 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80038e2:	4413      	add	r3, r2
 80038e4:	009b      	lsls	r3, r3, #2
 80038e6:	461a      	mov	r2, r3
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	4a16      	ldr	r2, [pc, #88]	@ (8003948 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80038f0:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	f003 031f 	and.w	r3, r3, #31
 80038f8:	2201      	movs	r2, #1
 80038fa:	409a      	lsls	r2, r3
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003900:	bf00      	nop
 8003902:	3714      	adds	r7, #20
 8003904:	46bd      	mov	sp, r7
 8003906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390a:	4770      	bx	lr
 800390c:	58025408 	.word	0x58025408
 8003910:	5802541c 	.word	0x5802541c
 8003914:	58025430 	.word	0x58025430
 8003918:	58025444 	.word	0x58025444
 800391c:	58025458 	.word	0x58025458
 8003920:	5802546c 	.word	0x5802546c
 8003924:	58025480 	.word	0x58025480
 8003928:	58025494 	.word	0x58025494
 800392c:	cccccccd 	.word	0xcccccccd
 8003930:	16009600 	.word	0x16009600
 8003934:	58025880 	.word	0x58025880
 8003938:	aaaaaaab 	.word	0xaaaaaaab
 800393c:	400204b8 	.word	0x400204b8
 8003940:	4002040f 	.word	0x4002040f
 8003944:	10008200 	.word	0x10008200
 8003948:	40020880 	.word	0x40020880

0800394c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800394c:	b480      	push	{r7}
 800394e:	b085      	sub	sp, #20
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	b2db      	uxtb	r3, r3
 800395a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d04a      	beq.n	80039f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2b08      	cmp	r3, #8
 8003966:	d847      	bhi.n	80039f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a25      	ldr	r2, [pc, #148]	@ (8003a04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d022      	beq.n	80039b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a24      	ldr	r2, [pc, #144]	@ (8003a08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d01d      	beq.n	80039b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a22      	ldr	r2, [pc, #136]	@ (8003a0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d018      	beq.n	80039b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a21      	ldr	r2, [pc, #132]	@ (8003a10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d013      	beq.n	80039b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a1f      	ldr	r2, [pc, #124]	@ (8003a14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d00e      	beq.n	80039b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a1e      	ldr	r2, [pc, #120]	@ (8003a18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d009      	beq.n	80039b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a1c      	ldr	r2, [pc, #112]	@ (8003a1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d004      	beq.n	80039b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a1b      	ldr	r2, [pc, #108]	@ (8003a20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d101      	bne.n	80039bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80039b8:	2301      	movs	r3, #1
 80039ba:	e000      	b.n	80039be <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80039bc:	2300      	movs	r3, #0
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d00a      	beq.n	80039d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80039c2:	68fa      	ldr	r2, [r7, #12]
 80039c4:	4b17      	ldr	r3, [pc, #92]	@ (8003a24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80039c6:	4413      	add	r3, r2
 80039c8:	009b      	lsls	r3, r3, #2
 80039ca:	461a      	mov	r2, r3
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	4a15      	ldr	r2, [pc, #84]	@ (8003a28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80039d4:	671a      	str	r2, [r3, #112]	@ 0x70
 80039d6:	e009      	b.n	80039ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80039d8:	68fa      	ldr	r2, [r7, #12]
 80039da:	4b14      	ldr	r3, [pc, #80]	@ (8003a2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80039dc:	4413      	add	r3, r2
 80039de:	009b      	lsls	r3, r3, #2
 80039e0:	461a      	mov	r2, r3
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	4a11      	ldr	r2, [pc, #68]	@ (8003a30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80039ea:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	3b01      	subs	r3, #1
 80039f0:	2201      	movs	r2, #1
 80039f2:	409a      	lsls	r2, r3
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 80039f8:	bf00      	nop
 80039fa:	3714      	adds	r7, #20
 80039fc:	46bd      	mov	sp, r7
 80039fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a02:	4770      	bx	lr
 8003a04:	58025408 	.word	0x58025408
 8003a08:	5802541c 	.word	0x5802541c
 8003a0c:	58025430 	.word	0x58025430
 8003a10:	58025444 	.word	0x58025444
 8003a14:	58025458 	.word	0x58025458
 8003a18:	5802546c 	.word	0x5802546c
 8003a1c:	58025480 	.word	0x58025480
 8003a20:	58025494 	.word	0x58025494
 8003a24:	1600963f 	.word	0x1600963f
 8003a28:	58025940 	.word	0x58025940
 8003a2c:	1000823f 	.word	0x1000823f
 8003a30:	40020940 	.word	0x40020940

08003a34 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b089      	sub	sp, #36	@ 0x24
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
 8003a3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003a42:	4b89      	ldr	r3, [pc, #548]	@ (8003c68 <HAL_GPIO_Init+0x234>)
 8003a44:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003a46:	e194      	b.n	8003d72 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	2101      	movs	r1, #1
 8003a4e:	69fb      	ldr	r3, [r7, #28]
 8003a50:	fa01 f303 	lsl.w	r3, r1, r3
 8003a54:	4013      	ands	r3, r2
 8003a56:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	f000 8186 	beq.w	8003d6c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	f003 0303 	and.w	r3, r3, #3
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d005      	beq.n	8003a78 <HAL_GPIO_Init+0x44>
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	f003 0303 	and.w	r3, r3, #3
 8003a74:	2b02      	cmp	r3, #2
 8003a76:	d130      	bne.n	8003ada <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003a7e:	69fb      	ldr	r3, [r7, #28]
 8003a80:	005b      	lsls	r3, r3, #1
 8003a82:	2203      	movs	r2, #3
 8003a84:	fa02 f303 	lsl.w	r3, r2, r3
 8003a88:	43db      	mvns	r3, r3
 8003a8a:	69ba      	ldr	r2, [r7, #24]
 8003a8c:	4013      	ands	r3, r2
 8003a8e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	68da      	ldr	r2, [r3, #12]
 8003a94:	69fb      	ldr	r3, [r7, #28]
 8003a96:	005b      	lsls	r3, r3, #1
 8003a98:	fa02 f303 	lsl.w	r3, r2, r3
 8003a9c:	69ba      	ldr	r2, [r7, #24]
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	69ba      	ldr	r2, [r7, #24]
 8003aa6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003aae:	2201      	movs	r2, #1
 8003ab0:	69fb      	ldr	r3, [r7, #28]
 8003ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab6:	43db      	mvns	r3, r3
 8003ab8:	69ba      	ldr	r2, [r7, #24]
 8003aba:	4013      	ands	r3, r2
 8003abc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	091b      	lsrs	r3, r3, #4
 8003ac4:	f003 0201 	and.w	r2, r3, #1
 8003ac8:	69fb      	ldr	r3, [r7, #28]
 8003aca:	fa02 f303 	lsl.w	r3, r2, r3
 8003ace:	69ba      	ldr	r2, [r7, #24]
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	69ba      	ldr	r2, [r7, #24]
 8003ad8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	f003 0303 	and.w	r3, r3, #3
 8003ae2:	2b03      	cmp	r3, #3
 8003ae4:	d017      	beq.n	8003b16 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	68db      	ldr	r3, [r3, #12]
 8003aea:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003aec:	69fb      	ldr	r3, [r7, #28]
 8003aee:	005b      	lsls	r3, r3, #1
 8003af0:	2203      	movs	r2, #3
 8003af2:	fa02 f303 	lsl.w	r3, r2, r3
 8003af6:	43db      	mvns	r3, r3
 8003af8:	69ba      	ldr	r2, [r7, #24]
 8003afa:	4013      	ands	r3, r2
 8003afc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	689a      	ldr	r2, [r3, #8]
 8003b02:	69fb      	ldr	r3, [r7, #28]
 8003b04:	005b      	lsls	r3, r3, #1
 8003b06:	fa02 f303 	lsl.w	r3, r2, r3
 8003b0a:	69ba      	ldr	r2, [r7, #24]
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	69ba      	ldr	r2, [r7, #24]
 8003b14:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	f003 0303 	and.w	r3, r3, #3
 8003b1e:	2b02      	cmp	r3, #2
 8003b20:	d123      	bne.n	8003b6a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003b22:	69fb      	ldr	r3, [r7, #28]
 8003b24:	08da      	lsrs	r2, r3, #3
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	3208      	adds	r2, #8
 8003b2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003b30:	69fb      	ldr	r3, [r7, #28]
 8003b32:	f003 0307 	and.w	r3, r3, #7
 8003b36:	009b      	lsls	r3, r3, #2
 8003b38:	220f      	movs	r2, #15
 8003b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b3e:	43db      	mvns	r3, r3
 8003b40:	69ba      	ldr	r2, [r7, #24]
 8003b42:	4013      	ands	r3, r2
 8003b44:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	691a      	ldr	r2, [r3, #16]
 8003b4a:	69fb      	ldr	r3, [r7, #28]
 8003b4c:	f003 0307 	and.w	r3, r3, #7
 8003b50:	009b      	lsls	r3, r3, #2
 8003b52:	fa02 f303 	lsl.w	r3, r2, r3
 8003b56:	69ba      	ldr	r2, [r7, #24]
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003b5c:	69fb      	ldr	r3, [r7, #28]
 8003b5e:	08da      	lsrs	r2, r3, #3
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	3208      	adds	r2, #8
 8003b64:	69b9      	ldr	r1, [r7, #24]
 8003b66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003b70:	69fb      	ldr	r3, [r7, #28]
 8003b72:	005b      	lsls	r3, r3, #1
 8003b74:	2203      	movs	r2, #3
 8003b76:	fa02 f303 	lsl.w	r3, r2, r3
 8003b7a:	43db      	mvns	r3, r3
 8003b7c:	69ba      	ldr	r2, [r7, #24]
 8003b7e:	4013      	ands	r3, r2
 8003b80:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	f003 0203 	and.w	r2, r3, #3
 8003b8a:	69fb      	ldr	r3, [r7, #28]
 8003b8c:	005b      	lsls	r3, r3, #1
 8003b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b92:	69ba      	ldr	r2, [r7, #24]
 8003b94:	4313      	orrs	r3, r2
 8003b96:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	69ba      	ldr	r2, [r7, #24]
 8003b9c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	f000 80e0 	beq.w	8003d6c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bac:	4b2f      	ldr	r3, [pc, #188]	@ (8003c6c <HAL_GPIO_Init+0x238>)
 8003bae:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8003bb2:	4a2e      	ldr	r2, [pc, #184]	@ (8003c6c <HAL_GPIO_Init+0x238>)
 8003bb4:	f043 0302 	orr.w	r3, r3, #2
 8003bb8:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8003bbc:	4b2b      	ldr	r3, [pc, #172]	@ (8003c6c <HAL_GPIO_Init+0x238>)
 8003bbe:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8003bc2:	f003 0302 	and.w	r3, r3, #2
 8003bc6:	60fb      	str	r3, [r7, #12]
 8003bc8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003bca:	4a29      	ldr	r2, [pc, #164]	@ (8003c70 <HAL_GPIO_Init+0x23c>)
 8003bcc:	69fb      	ldr	r3, [r7, #28]
 8003bce:	089b      	lsrs	r3, r3, #2
 8003bd0:	3302      	adds	r3, #2
 8003bd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003bd8:	69fb      	ldr	r3, [r7, #28]
 8003bda:	f003 0303 	and.w	r3, r3, #3
 8003bde:	009b      	lsls	r3, r3, #2
 8003be0:	220f      	movs	r2, #15
 8003be2:	fa02 f303 	lsl.w	r3, r2, r3
 8003be6:	43db      	mvns	r3, r3
 8003be8:	69ba      	ldr	r2, [r7, #24]
 8003bea:	4013      	ands	r3, r2
 8003bec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	4a20      	ldr	r2, [pc, #128]	@ (8003c74 <HAL_GPIO_Init+0x240>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d052      	beq.n	8003c9c <HAL_GPIO_Init+0x268>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	4a1f      	ldr	r2, [pc, #124]	@ (8003c78 <HAL_GPIO_Init+0x244>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d031      	beq.n	8003c62 <HAL_GPIO_Init+0x22e>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	4a1e      	ldr	r2, [pc, #120]	@ (8003c7c <HAL_GPIO_Init+0x248>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d02b      	beq.n	8003c5e <HAL_GPIO_Init+0x22a>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	4a1d      	ldr	r2, [pc, #116]	@ (8003c80 <HAL_GPIO_Init+0x24c>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d025      	beq.n	8003c5a <HAL_GPIO_Init+0x226>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	4a1c      	ldr	r2, [pc, #112]	@ (8003c84 <HAL_GPIO_Init+0x250>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d01f      	beq.n	8003c56 <HAL_GPIO_Init+0x222>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	4a1b      	ldr	r2, [pc, #108]	@ (8003c88 <HAL_GPIO_Init+0x254>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d019      	beq.n	8003c52 <HAL_GPIO_Init+0x21e>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	4a1a      	ldr	r2, [pc, #104]	@ (8003c8c <HAL_GPIO_Init+0x258>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d013      	beq.n	8003c4e <HAL_GPIO_Init+0x21a>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	4a19      	ldr	r2, [pc, #100]	@ (8003c90 <HAL_GPIO_Init+0x25c>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d00d      	beq.n	8003c4a <HAL_GPIO_Init+0x216>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	4a18      	ldr	r2, [pc, #96]	@ (8003c94 <HAL_GPIO_Init+0x260>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d007      	beq.n	8003c46 <HAL_GPIO_Init+0x212>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	4a17      	ldr	r2, [pc, #92]	@ (8003c98 <HAL_GPIO_Init+0x264>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d101      	bne.n	8003c42 <HAL_GPIO_Init+0x20e>
 8003c3e:	2309      	movs	r3, #9
 8003c40:	e02d      	b.n	8003c9e <HAL_GPIO_Init+0x26a>
 8003c42:	230a      	movs	r3, #10
 8003c44:	e02b      	b.n	8003c9e <HAL_GPIO_Init+0x26a>
 8003c46:	2308      	movs	r3, #8
 8003c48:	e029      	b.n	8003c9e <HAL_GPIO_Init+0x26a>
 8003c4a:	2307      	movs	r3, #7
 8003c4c:	e027      	b.n	8003c9e <HAL_GPIO_Init+0x26a>
 8003c4e:	2306      	movs	r3, #6
 8003c50:	e025      	b.n	8003c9e <HAL_GPIO_Init+0x26a>
 8003c52:	2305      	movs	r3, #5
 8003c54:	e023      	b.n	8003c9e <HAL_GPIO_Init+0x26a>
 8003c56:	2304      	movs	r3, #4
 8003c58:	e021      	b.n	8003c9e <HAL_GPIO_Init+0x26a>
 8003c5a:	2303      	movs	r3, #3
 8003c5c:	e01f      	b.n	8003c9e <HAL_GPIO_Init+0x26a>
 8003c5e:	2302      	movs	r3, #2
 8003c60:	e01d      	b.n	8003c9e <HAL_GPIO_Init+0x26a>
 8003c62:	2301      	movs	r3, #1
 8003c64:	e01b      	b.n	8003c9e <HAL_GPIO_Init+0x26a>
 8003c66:	bf00      	nop
 8003c68:	58000080 	.word	0x58000080
 8003c6c:	58024400 	.word	0x58024400
 8003c70:	58000400 	.word	0x58000400
 8003c74:	58020000 	.word	0x58020000
 8003c78:	58020400 	.word	0x58020400
 8003c7c:	58020800 	.word	0x58020800
 8003c80:	58020c00 	.word	0x58020c00
 8003c84:	58021000 	.word	0x58021000
 8003c88:	58021400 	.word	0x58021400
 8003c8c:	58021800 	.word	0x58021800
 8003c90:	58021c00 	.word	0x58021c00
 8003c94:	58022000 	.word	0x58022000
 8003c98:	58022400 	.word	0x58022400
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	69fa      	ldr	r2, [r7, #28]
 8003ca0:	f002 0203 	and.w	r2, r2, #3
 8003ca4:	0092      	lsls	r2, r2, #2
 8003ca6:	4093      	lsls	r3, r2
 8003ca8:	69ba      	ldr	r2, [r7, #24]
 8003caa:	4313      	orrs	r3, r2
 8003cac:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003cae:	4938      	ldr	r1, [pc, #224]	@ (8003d90 <HAL_GPIO_Init+0x35c>)
 8003cb0:	69fb      	ldr	r3, [r7, #28]
 8003cb2:	089b      	lsrs	r3, r3, #2
 8003cb4:	3302      	adds	r3, #2
 8003cb6:	69ba      	ldr	r2, [r7, #24]
 8003cb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003cbc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	43db      	mvns	r3, r3
 8003cc8:	69ba      	ldr	r2, [r7, #24]
 8003cca:	4013      	ands	r3, r2
 8003ccc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d003      	beq.n	8003ce2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003cda:	69ba      	ldr	r2, [r7, #24]
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003ce2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003ce6:	69bb      	ldr	r3, [r7, #24]
 8003ce8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003cea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	43db      	mvns	r3, r3
 8003cf6:	69ba      	ldr	r2, [r7, #24]
 8003cf8:	4013      	ands	r3, r2
 8003cfa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d003      	beq.n	8003d10 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003d08:	69ba      	ldr	r2, [r7, #24]
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003d10:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003d14:	69bb      	ldr	r3, [r7, #24]
 8003d16:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	43db      	mvns	r3, r3
 8003d22:	69ba      	ldr	r2, [r7, #24]
 8003d24:	4013      	ands	r3, r2
 8003d26:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d003      	beq.n	8003d3c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003d34:	69ba      	ldr	r2, [r7, #24]
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	69ba      	ldr	r2, [r7, #24]
 8003d40:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	43db      	mvns	r3, r3
 8003d4c:	69ba      	ldr	r2, [r7, #24]
 8003d4e:	4013      	ands	r3, r2
 8003d50:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d003      	beq.n	8003d66 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8003d5e:	69ba      	ldr	r2, [r7, #24]
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	4313      	orrs	r3, r2
 8003d64:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	69ba      	ldr	r2, [r7, #24]
 8003d6a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003d6c:	69fb      	ldr	r3, [r7, #28]
 8003d6e:	3301      	adds	r3, #1
 8003d70:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	681a      	ldr	r2, [r3, #0]
 8003d76:	69fb      	ldr	r3, [r7, #28]
 8003d78:	fa22 f303 	lsr.w	r3, r2, r3
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	f47f ae63 	bne.w	8003a48 <HAL_GPIO_Init+0x14>
  }
}
 8003d82:	bf00      	nop
 8003d84:	bf00      	nop
 8003d86:	3724      	adds	r7, #36	@ 0x24
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8e:	4770      	bx	lr
 8003d90:	58000400 	.word	0x58000400

08003d94 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b082      	sub	sp, #8
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8003d9e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003da2:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003da6:	88fb      	ldrh	r3, [r7, #6]
 8003da8:	4013      	ands	r3, r2
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d008      	beq.n	8003dc0 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003dae:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003db2:	88fb      	ldrh	r3, [r7, #6]
 8003db4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003db8:	88fb      	ldrh	r3, [r7, #6]
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f000 f804 	bl	8003dc8 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8003dc0:	bf00      	nop
 8003dc2:	3708      	adds	r7, #8
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}

08003dc8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b083      	sub	sp, #12
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	4603      	mov	r3, r0
 8003dd0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003dd2:	bf00      	nop
 8003dd4:	370c      	adds	r7, #12
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ddc:	4770      	bx	lr
	...

08003de0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b082      	sub	sp, #8
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d101      	bne.n	8003df2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	e08b      	b.n	8003f0a <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003df8:	b2db      	uxtb	r3, r3
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d106      	bne.n	8003e0c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2200      	movs	r2, #0
 8003e02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003e06:	6878      	ldr	r0, [r7, #4]
 8003e08:	f7fc fd1c 	bl	8000844 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2224      	movs	r2, #36	@ 0x24
 8003e10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f022 0201 	bic.w	r2, r2, #1
 8003e22:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	685a      	ldr	r2, [r3, #4]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003e30:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	689a      	ldr	r2, [r3, #8]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003e40:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	68db      	ldr	r3, [r3, #12]
 8003e46:	2b01      	cmp	r3, #1
 8003e48:	d107      	bne.n	8003e5a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	689a      	ldr	r2, [r3, #8]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003e56:	609a      	str	r2, [r3, #8]
 8003e58:	e006      	b.n	8003e68 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	689a      	ldr	r2, [r3, #8]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003e66:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	68db      	ldr	r3, [r3, #12]
 8003e6c:	2b02      	cmp	r3, #2
 8003e6e:	d108      	bne.n	8003e82 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	685a      	ldr	r2, [r3, #4]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003e7e:	605a      	str	r2, [r3, #4]
 8003e80:	e007      	b.n	8003e92 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	685a      	ldr	r2, [r3, #4]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003e90:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	6859      	ldr	r1, [r3, #4]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	4b1d      	ldr	r3, [pc, #116]	@ (8003f14 <HAL_I2C_Init+0x134>)
 8003e9e:	430b      	orrs	r3, r1
 8003ea0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	68da      	ldr	r2, [r3, #12]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003eb0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	691a      	ldr	r2, [r3, #16]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	695b      	ldr	r3, [r3, #20]
 8003eba:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	699b      	ldr	r3, [r3, #24]
 8003ec2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	430a      	orrs	r2, r1
 8003eca:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	69d9      	ldr	r1, [r3, #28]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6a1a      	ldr	r2, [r3, #32]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	430a      	orrs	r2, r1
 8003eda:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f042 0201 	orr.w	r2, r2, #1
 8003eea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2220      	movs	r2, #32
 8003ef6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2200      	movs	r2, #0
 8003efe:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2200      	movs	r2, #0
 8003f04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003f08:	2300      	movs	r3, #0
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	3708      	adds	r7, #8
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}
 8003f12:	bf00      	nop
 8003f14:	02008000 	.word	0x02008000

08003f18 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b08a      	sub	sp, #40	@ 0x28
 8003f1c:	af02      	add	r7, sp, #8
 8003f1e:	60f8      	str	r0, [r7, #12]
 8003f20:	607a      	str	r2, [r7, #4]
 8003f22:	461a      	mov	r2, r3
 8003f24:	460b      	mov	r3, r1
 8003f26:	817b      	strh	r3, [r7, #10]
 8003f28:	4613      	mov	r3, r2
 8003f2a:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;
  uint32_t sizetoxfer = 0U;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	61bb      	str	r3, [r7, #24]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f36:	b2db      	uxtb	r3, r3
 8003f38:	2b20      	cmp	r3, #32
 8003f3a:	f040 80ef 	bne.w	800411c <HAL_I2C_Master_Transmit_DMA+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	699b      	ldr	r3, [r3, #24]
 8003f44:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003f48:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f4c:	d101      	bne.n	8003f52 <HAL_I2C_Master_Transmit_DMA+0x3a>
    {
      return HAL_BUSY;
 8003f4e:	2302      	movs	r3, #2
 8003f50:	e0e5      	b.n	800411e <HAL_I2C_Master_Transmit_DMA+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003f58:	2b01      	cmp	r3, #1
 8003f5a:	d101      	bne.n	8003f60 <HAL_I2C_Master_Transmit_DMA+0x48>
 8003f5c:	2302      	movs	r3, #2
 8003f5e:	e0de      	b.n	800411e <HAL_I2C_Master_Transmit_DMA+0x206>
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	2201      	movs	r2, #1
 8003f64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2221      	movs	r2, #33	@ 0x21
 8003f6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	2210      	movs	r2, #16
 8003f74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	687a      	ldr	r2, [r7, #4]
 8003f82:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	893a      	ldrh	r2, [r7, #8]
 8003f88:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	4a66      	ldr	r2, [pc, #408]	@ (8004128 <HAL_I2C_Master_Transmit_DMA+0x210>)
 8003f8e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	4a66      	ldr	r2, [pc, #408]	@ (800412c <HAL_I2C_Master_Transmit_DMA+0x214>)
 8003f94:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f9a:	b29b      	uxth	r3, r3
 8003f9c:	2bff      	cmp	r3, #255	@ 0xff
 8003f9e:	d906      	bls.n	8003fae <HAL_I2C_Master_Transmit_DMA+0x96>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	22ff      	movs	r2, #255	@ 0xff
 8003fa4:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8003fa6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003faa:	61fb      	str	r3, [r7, #28]
 8003fac:	e007      	b.n	8003fbe <HAL_I2C_Master_Transmit_DMA+0xa6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fb2:	b29a      	uxth	r2, r3
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003fb8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003fbc:	61fb      	str	r3, [r7, #28]
    }

    if (hi2c->XferSize > 0U)
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d01a      	beq.n	8003ffc <HAL_I2C_Master_Transmit_DMA+0xe4>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fca:	781a      	ldrb	r2, [r3, #0]
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fd6:	1c5a      	adds	r2, r3, #1
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	625a      	str	r2, [r3, #36]	@ 0x24

      sizetoxfer = hi2c->XferSize;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fe0:	61bb      	str	r3, [r7, #24]
      hi2c->XferCount--;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fe6:	b29b      	uxth	r3, r3
 8003fe8:	3b01      	subs	r3, #1
 8003fea:	b29a      	uxth	r2, r3
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ff4:	3b01      	subs	r3, #1
 8003ff6:	b29a      	uxth	r2, r3
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    if (hi2c->XferSize > 0U)
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004000:	2b00      	cmp	r3, #0
 8004002:	d074      	beq.n	80040ee <HAL_I2C_Master_Transmit_DMA+0x1d6>
    {
      if (hi2c->hdmatx != NULL)
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004008:	2b00      	cmp	r3, #0
 800400a:	d022      	beq.n	8004052 <HAL_I2C_Master_Transmit_DMA+0x13a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004010:	4a47      	ldr	r2, [pc, #284]	@ (8004130 <HAL_I2C_Master_Transmit_DMA+0x218>)
 8004012:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004018:	4a46      	ldr	r2, [pc, #280]	@ (8004134 <HAL_I2C_Master_Transmit_DMA+0x21c>)
 800401a:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004020:	2200      	movs	r2, #0
 8004022:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmatx->XferAbortCallback = NULL;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004028:	2200      	movs	r2, #0
 800402a:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream or channel depends on Instance */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004034:	4619      	mov	r1, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	3328      	adds	r3, #40	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 800403c:	461a      	mov	r2, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8004042:	f7fd fcab 	bl	800199c <HAL_DMA_Start_IT>
 8004046:	4603      	mov	r3, r0
 8004048:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800404a:	7dfb      	ldrb	r3, [r7, #23]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d13a      	bne.n	80040c6 <HAL_I2C_Master_Transmit_DMA+0x1ae>
 8004050:	e013      	b.n	800407a <HAL_I2C_Master_Transmit_DMA+0x162>
        hi2c->State     = HAL_I2C_STATE_READY;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	2220      	movs	r2, #32
 8004056:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	2200      	movs	r2, #0
 800405e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004066:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	2200      	movs	r2, #0
 8004072:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8004076:	2301      	movs	r3, #1
 8004078:	e051      	b.n	800411e <HAL_I2C_Master_Transmit_DMA+0x206>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U),
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800407e:	b2db      	uxtb	r3, r3
 8004080:	3301      	adds	r3, #1
 8004082:	b2da      	uxtb	r2, r3
 8004084:	8979      	ldrh	r1, [r7, #10]
 8004086:	4b2c      	ldr	r3, [pc, #176]	@ (8004138 <HAL_I2C_Master_Transmit_DMA+0x220>)
 8004088:	9300      	str	r3, [sp, #0]
 800408a:	69fb      	ldr	r3, [r7, #28]
 800408c:	68f8      	ldr	r0, [r7, #12]
 800408e:	f001 feb9 	bl	8005e04 <I2C_TransferConfig>
                           xfermode, I2C_GENERATE_START_WRITE);

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004096:	b29a      	uxth	r2, r3
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800409c:	1ad3      	subs	r3, r2, r3
 800409e:	b29a      	uxth	r2, r3
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2200      	movs	r2, #0
 80040a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80040ac:	2110      	movs	r1, #16
 80040ae:	68f8      	ldr	r0, [r7, #12]
 80040b0:	f001 feda 	bl	8005e68 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80040c2:	601a      	str	r2, [r3, #0]
 80040c4:	e028      	b.n	8004118 <HAL_I2C_Master_Transmit_DMA+0x200>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2220      	movs	r2, #32
 80040ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2200      	movs	r2, #0
 80040d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040da:	f043 0210 	orr.w	r2, r3, #16
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	2200      	movs	r2, #0
 80040e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80040ea:	2301      	movs	r3, #1
 80040ec:	e017      	b.n	800411e <HAL_I2C_Master_Transmit_DMA+0x206>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	4a12      	ldr	r2, [pc, #72]	@ (800413c <HAL_I2C_Master_Transmit_DMA+0x224>)
 80040f2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)sizetoxfer, I2C_AUTOEND_MODE,
 80040f4:	69bb      	ldr	r3, [r7, #24]
 80040f6:	b2da      	uxtb	r2, r3
 80040f8:	8979      	ldrh	r1, [r7, #10]
 80040fa:	4b0f      	ldr	r3, [pc, #60]	@ (8004138 <HAL_I2C_Master_Transmit_DMA+0x220>)
 80040fc:	9300      	str	r3, [sp, #0]
 80040fe:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004102:	68f8      	ldr	r0, [r7, #12]
 8004104:	f001 fe7e 	bl	8005e04 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	2200      	movs	r2, #0
 800410c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004110:	2101      	movs	r1, #1
 8004112:	68f8      	ldr	r0, [r7, #12]
 8004114:	f001 fea8 	bl	8005e68 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8004118:	2300      	movs	r3, #0
 800411a:	e000      	b.n	800411e <HAL_I2C_Master_Transmit_DMA+0x206>
  }
  else
  {
    return HAL_BUSY;
 800411c:	2302      	movs	r3, #2
  }
}
 800411e:	4618      	mov	r0, r3
 8004120:	3720      	adds	r7, #32
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}
 8004126:	bf00      	nop
 8004128:	ffff0000 	.word	0xffff0000
 800412c:	08004757 	.word	0x08004757
 8004130:	08005abf 	.word	0x08005abf
 8004134:	08005b55 	.word	0x08005b55
 8004138:	80002000 	.word	0x80002000
 800413c:	08004317 	.word	0x08004317

08004140 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b084      	sub	sp, #16
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	699b      	ldr	r3, [r3, #24]
 800414e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800415c:	2b00      	cmp	r3, #0
 800415e:	d005      	beq.n	800416c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004164:	68ba      	ldr	r2, [r7, #8]
 8004166:	68f9      	ldr	r1, [r7, #12]
 8004168:	6878      	ldr	r0, [r7, #4]
 800416a:	4798      	blx	r3
  }
}
 800416c:	bf00      	nop
 800416e:	3710      	adds	r7, #16
 8004170:	46bd      	mov	sp, r7
 8004172:	bd80      	pop	{r7, pc}

08004174 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b086      	sub	sp, #24
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	699b      	ldr	r3, [r3, #24]
 8004182:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004192:	2b00      	cmp	r3, #0
 8004194:	d00f      	beq.n	80041b6 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800419c:	2b00      	cmp	r3, #0
 800419e:	d00a      	beq.n	80041b6 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041a4:	f043 0201 	orr.w	r2, r3, #1
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80041b4:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d00f      	beq.n	80041e0 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d00a      	beq.n	80041e0 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041ce:	f043 0208 	orr.w	r2, r3, #8
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80041de:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d00f      	beq.n	800420a <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d00a      	beq.n	800420a <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041f8:	f043 0202 	orr.w	r2, r3, #2
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004208:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800420e:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	f003 030b 	and.w	r3, r3, #11
 8004216:	2b00      	cmp	r3, #0
 8004218:	d003      	beq.n	8004222 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 800421a:	68f9      	ldr	r1, [r7, #12]
 800421c:	6878      	ldr	r0, [r7, #4]
 800421e:	f001 fb13 	bl	8005848 <I2C_ITError>
  }
}
 8004222:	bf00      	nop
 8004224:	3718      	adds	r7, #24
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}

0800422a <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800422a:	b480      	push	{r7}
 800422c:	b083      	sub	sp, #12
 800422e:	af00      	add	r7, sp, #0
 8004230:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004232:	bf00      	nop
 8004234:	370c      	adds	r7, #12
 8004236:	46bd      	mov	sp, r7
 8004238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423c:	4770      	bx	lr

0800423e <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800423e:	b480      	push	{r7}
 8004240:	b083      	sub	sp, #12
 8004242:	af00      	add	r7, sp, #0
 8004244:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004246:	bf00      	nop
 8004248:	370c      	adds	r7, #12
 800424a:	46bd      	mov	sp, r7
 800424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004250:	4770      	bx	lr

08004252 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004252:	b480      	push	{r7}
 8004254:	b083      	sub	sp, #12
 8004256:	af00      	add	r7, sp, #0
 8004258:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800425a:	bf00      	nop
 800425c:	370c      	adds	r7, #12
 800425e:	46bd      	mov	sp, r7
 8004260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004264:	4770      	bx	lr

08004266 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004266:	b480      	push	{r7}
 8004268:	b083      	sub	sp, #12
 800426a:	af00      	add	r7, sp, #0
 800426c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800426e:	bf00      	nop
 8004270:	370c      	adds	r7, #12
 8004272:	46bd      	mov	sp, r7
 8004274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004278:	4770      	bx	lr

0800427a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800427a:	b480      	push	{r7}
 800427c:	b083      	sub	sp, #12
 800427e:	af00      	add	r7, sp, #0
 8004280:	6078      	str	r0, [r7, #4]
 8004282:	460b      	mov	r3, r1
 8004284:	70fb      	strb	r3, [r7, #3]
 8004286:	4613      	mov	r3, r2
 8004288:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800428a:	bf00      	nop
 800428c:	370c      	adds	r7, #12
 800428e:	46bd      	mov	sp, r7
 8004290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004294:	4770      	bx	lr

08004296 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004296:	b480      	push	{r7}
 8004298:	b083      	sub	sp, #12
 800429a:	af00      	add	r7, sp, #0
 800429c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800429e:	bf00      	nop
 80042a0:	370c      	adds	r7, #12
 80042a2:	46bd      	mov	sp, r7
 80042a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a8:	4770      	bx	lr

080042aa <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80042aa:	b480      	push	{r7}
 80042ac:	b083      	sub	sp, #12
 80042ae:	af00      	add	r7, sp, #0
 80042b0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80042b2:	bf00      	nop
 80042b4:	370c      	adds	r7, #12
 80042b6:	46bd      	mov	sp, r7
 80042b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042bc:	4770      	bx	lr

080042be <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80042be:	b480      	push	{r7}
 80042c0:	b083      	sub	sp, #12
 80042c2:	af00      	add	r7, sp, #0
 80042c4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80042c6:	bf00      	nop
 80042c8:	370c      	adds	r7, #12
 80042ca:	46bd      	mov	sp, r7
 80042cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d0:	4770      	bx	lr

080042d2 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80042d2:	b480      	push	{r7}
 80042d4:	b083      	sub	sp, #12
 80042d6:	af00      	add	r7, sp, #0
 80042d8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80042da:	bf00      	nop
 80042dc:	370c      	adds	r7, #12
 80042de:	46bd      	mov	sp, r7
 80042e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e4:	4770      	bx	lr

080042e6 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80042e6:	b480      	push	{r7}
 80042e8:	b083      	sub	sp, #12
 80042ea:	af00      	add	r7, sp, #0
 80042ec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80042ee:	bf00      	nop
 80042f0:	370c      	adds	r7, #12
 80042f2:	46bd      	mov	sp, r7
 80042f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f8:	4770      	bx	lr

080042fa <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 80042fa:	b480      	push	{r7}
 80042fc:	b083      	sub	sp, #12
 80042fe:	af00      	add	r7, sp, #0
 8004300:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004308:	b2db      	uxtb	r3, r3
}
 800430a:	4618      	mov	r0, r3
 800430c:	370c      	adds	r7, #12
 800430e:	46bd      	mov	sp, r7
 8004310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004314:	4770      	bx	lr

08004316 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8004316:	b580      	push	{r7, lr}
 8004318:	b088      	sub	sp, #32
 800431a:	af02      	add	r7, sp, #8
 800431c:	60f8      	str	r0, [r7, #12]
 800431e:	60b9      	str	r1, [r7, #8]
 8004320:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800432c:	2b01      	cmp	r3, #1
 800432e:	d101      	bne.n	8004334 <I2C_Master_ISR_IT+0x1e>
 8004330:	2302      	movs	r3, #2
 8004332:	e113      	b.n	800455c <I2C_Master_ISR_IT+0x246>
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2201      	movs	r2, #1
 8004338:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	f003 0310 	and.w	r3, r3, #16
 8004342:	2b00      	cmp	r3, #0
 8004344:	d012      	beq.n	800436c <I2C_Master_ISR_IT+0x56>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800434c:	2b00      	cmp	r3, #0
 800434e:	d00d      	beq.n	800436c <I2C_Master_ISR_IT+0x56>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	2210      	movs	r2, #16
 8004356:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800435c:	f043 0204 	orr.w	r2, r3, #4
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004364:	68f8      	ldr	r0, [r7, #12]
 8004366:	f001 fb86 	bl	8005a76 <I2C_Flush_TXDR>
 800436a:	e0e4      	b.n	8004536 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	f003 0304 	and.w	r3, r3, #4
 8004372:	2b00      	cmp	r3, #0
 8004374:	d022      	beq.n	80043bc <I2C_Master_ISR_IT+0xa6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800437c:	2b00      	cmp	r3, #0
 800437e:	d01d      	beq.n	80043bc <I2C_Master_ISR_IT+0xa6>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8004380:	697b      	ldr	r3, [r7, #20]
 8004382:	f023 0304 	bic.w	r3, r3, #4
 8004386:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004392:	b2d2      	uxtb	r2, r2
 8004394:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800439a:	1c5a      	adds	r2, r3, #1
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043a4:	3b01      	subs	r3, #1
 80043a6:	b29a      	uxth	r2, r3
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043b0:	b29b      	uxth	r3, r3
 80043b2:	3b01      	subs	r3, #1
 80043b4:	b29a      	uxth	r2, r3
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80043ba:	e0bc      	b.n	8004536 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d128      	bne.n	8004418 <I2C_Master_ISR_IT+0x102>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d023      	beq.n	8004418 <I2C_Master_ISR_IT+0x102>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	f003 0302 	and.w	r3, r3, #2
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d01e      	beq.n	8004418 <I2C_Master_ISR_IT+0x102>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043de:	b29b      	uxth	r3, r3
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	f000 80a8 	beq.w	8004536 <I2C_Master_ISR_IT+0x220>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043ea:	781a      	ldrb	r2, [r3, #0]
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043f6:	1c5a      	adds	r2, r3, #1
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004400:	3b01      	subs	r3, #1
 8004402:	b29a      	uxth	r2, r3
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800440c:	b29b      	uxth	r3, r3
 800440e:	3b01      	subs	r3, #1
 8004410:	b29a      	uxth	r2, r3
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->XferCount != 0U)
 8004416:	e08e      	b.n	8004536 <I2C_Master_ISR_IT+0x220>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8004418:	697b      	ldr	r3, [r7, #20]
 800441a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800441e:	2b00      	cmp	r3, #0
 8004420:	d05c      	beq.n	80044dc <I2C_Master_ISR_IT+0x1c6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8004428:	2b00      	cmp	r3, #0
 800442a:	d057      	beq.n	80044dc <I2C_Master_ISR_IT+0x1c6>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004430:	b29b      	uxth	r3, r3
 8004432:	2b00      	cmp	r3, #0
 8004434:	d040      	beq.n	80044b8 <I2C_Master_ISR_IT+0x1a2>
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800443a:	2b00      	cmp	r3, #0
 800443c:	d13c      	bne.n	80044b8 <I2C_Master_ISR_IT+0x1a2>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	b29b      	uxth	r3, r3
 8004446:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800444a:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004450:	b29b      	uxth	r3, r3
 8004452:	2bff      	cmp	r3, #255	@ 0xff
 8004454:	d90e      	bls.n	8004474 <I2C_Master_ISR_IT+0x15e>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	22ff      	movs	r2, #255	@ 0xff
 800445a:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004460:	b2da      	uxtb	r2, r3
 8004462:	8a79      	ldrh	r1, [r7, #18]
 8004464:	2300      	movs	r3, #0
 8004466:	9300      	str	r3, [sp, #0]
 8004468:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800446c:	68f8      	ldr	r0, [r7, #12]
 800446e:	f001 fcc9 	bl	8005e04 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004472:	e032      	b.n	80044da <I2C_Master_ISR_IT+0x1c4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004478:	b29a      	uxth	r2, r3
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004482:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004486:	d00b      	beq.n	80044a0 <I2C_Master_ISR_IT+0x18a>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800448c:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8004492:	8a79      	ldrh	r1, [r7, #18]
 8004494:	2000      	movs	r0, #0
 8004496:	9000      	str	r0, [sp, #0]
 8004498:	68f8      	ldr	r0, [r7, #12]
 800449a:	f001 fcb3 	bl	8005e04 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800449e:	e01c      	b.n	80044da <I2C_Master_ISR_IT+0x1c4>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044a4:	b2da      	uxtb	r2, r3
 80044a6:	8a79      	ldrh	r1, [r7, #18]
 80044a8:	2300      	movs	r3, #0
 80044aa:	9300      	str	r3, [sp, #0]
 80044ac:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80044b0:	68f8      	ldr	r0, [r7, #12]
 80044b2:	f001 fca7 	bl	8005e04 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80044b6:	e010      	b.n	80044da <I2C_Master_ISR_IT+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044c2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80044c6:	d003      	beq.n	80044d0 <I2C_Master_ISR_IT+0x1ba>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80044c8:	68f8      	ldr	r0, [r7, #12]
 80044ca:	f000 fdb3 	bl	8005034 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80044ce:	e032      	b.n	8004536 <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80044d0:	2140      	movs	r1, #64	@ 0x40
 80044d2:	68f8      	ldr	r0, [r7, #12]
 80044d4:	f001 f9b8 	bl	8005848 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80044d8:	e02d      	b.n	8004536 <I2C_Master_ISR_IT+0x220>
 80044da:	e02c      	b.n	8004536 <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d027      	beq.n	8004536 <I2C_Master_ISR_IT+0x220>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d022      	beq.n	8004536 <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044f4:	b29b      	uxth	r3, r3
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d119      	bne.n	800452e <I2C_Master_ISR_IT+0x218>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004504:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004508:	d015      	beq.n	8004536 <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800450e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004512:	d108      	bne.n	8004526 <I2C_Master_ISR_IT+0x210>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	685a      	ldr	r2, [r3, #4]
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004522:	605a      	str	r2, [r3, #4]
 8004524:	e007      	b.n	8004536 <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8004526:	68f8      	ldr	r0, [r7, #12]
 8004528:	f000 fd84 	bl	8005034 <I2C_ITMasterSeqCplt>
 800452c:	e003      	b.n	8004536 <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800452e:	2140      	movs	r1, #64	@ 0x40
 8004530:	68f8      	ldr	r0, [r7, #12]
 8004532:	f001 f989 	bl	8005848 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	f003 0320 	and.w	r3, r3, #32
 800453c:	2b00      	cmp	r3, #0
 800453e:	d008      	beq.n	8004552 <I2C_Master_ISR_IT+0x23c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004546:	2b00      	cmp	r3, #0
 8004548:	d003      	beq.n	8004552 <I2C_Master_ISR_IT+0x23c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 800454a:	6979      	ldr	r1, [r7, #20]
 800454c:	68f8      	ldr	r0, [r7, #12]
 800454e:	f000 fe0b 	bl	8005168 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	2200      	movs	r2, #0
 8004556:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800455a:	2300      	movs	r3, #0
}
 800455c:	4618      	mov	r0, r3
 800455e:	3718      	adds	r7, #24
 8004560:	46bd      	mov	sp, r7
 8004562:	bd80      	pop	{r7, pc}

08004564 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b086      	sub	sp, #24
 8004568:	af00      	add	r7, sp, #0
 800456a:	60f8      	str	r0, [r7, #12]
 800456c:	60b9      	str	r1, [r7, #8]
 800456e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004574:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004580:	2b01      	cmp	r3, #1
 8004582:	d101      	bne.n	8004588 <I2C_Slave_ISR_IT+0x24>
 8004584:	2302      	movs	r3, #2
 8004586:	e0e2      	b.n	800474e <I2C_Slave_ISR_IT+0x1ea>
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2201      	movs	r2, #1
 800458c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	f003 0320 	and.w	r3, r3, #32
 8004596:	2b00      	cmp	r3, #0
 8004598:	d009      	beq.n	80045ae <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d004      	beq.n	80045ae <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80045a4:	6939      	ldr	r1, [r7, #16]
 80045a6:	68f8      	ldr	r0, [r7, #12]
 80045a8:	f000 fea6 	bl	80052f8 <I2C_ITSlaveCplt>
 80045ac:	e0ca      	b.n	8004744 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	f003 0310 	and.w	r3, r3, #16
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d04b      	beq.n	8004650 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d046      	beq.n	8004650 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045c6:	b29b      	uxth	r3, r3
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d128      	bne.n	800461e <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80045d2:	b2db      	uxtb	r3, r3
 80045d4:	2b28      	cmp	r3, #40	@ 0x28
 80045d6:	d108      	bne.n	80045ea <I2C_Slave_ISR_IT+0x86>
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80045de:	d104      	bne.n	80045ea <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80045e0:	6939      	ldr	r1, [r7, #16]
 80045e2:	68f8      	ldr	r0, [r7, #12]
 80045e4:	f001 f8dc 	bl	80057a0 <I2C_ITListenCplt>
 80045e8:	e031      	b.n	800464e <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80045f0:	b2db      	uxtb	r3, r3
 80045f2:	2b29      	cmp	r3, #41	@ 0x29
 80045f4:	d10e      	bne.n	8004614 <I2C_Slave_ISR_IT+0xb0>
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80045fc:	d00a      	beq.n	8004614 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	2210      	movs	r2, #16
 8004604:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8004606:	68f8      	ldr	r0, [r7, #12]
 8004608:	f001 fa35 	bl	8005a76 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800460c:	68f8      	ldr	r0, [r7, #12]
 800460e:	f000 fd4e 	bl	80050ae <I2C_ITSlaveSeqCplt>
 8004612:	e01c      	b.n	800464e <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	2210      	movs	r2, #16
 800461a:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800461c:	e08f      	b.n	800473e <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	2210      	movs	r2, #16
 8004624:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800462a:	f043 0204 	orr.w	r2, r3, #4
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d003      	beq.n	8004640 <I2C_Slave_ISR_IT+0xdc>
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800463e:	d17e      	bne.n	800473e <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004644:	4619      	mov	r1, r3
 8004646:	68f8      	ldr	r0, [r7, #12]
 8004648:	f001 f8fe 	bl	8005848 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800464c:	e077      	b.n	800473e <I2C_Slave_ISR_IT+0x1da>
 800464e:	e076      	b.n	800473e <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	f003 0304 	and.w	r3, r3, #4
 8004656:	2b00      	cmp	r3, #0
 8004658:	d02f      	beq.n	80046ba <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004660:	2b00      	cmp	r3, #0
 8004662:	d02a      	beq.n	80046ba <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004668:	b29b      	uxth	r3, r3
 800466a:	2b00      	cmp	r3, #0
 800466c:	d018      	beq.n	80046a0 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004678:	b2d2      	uxtb	r2, r2
 800467a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004680:	1c5a      	adds	r2, r3, #1
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800468a:	3b01      	subs	r3, #1
 800468c:	b29a      	uxth	r2, r3
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004696:	b29b      	uxth	r3, r3
 8004698:	3b01      	subs	r3, #1
 800469a:	b29a      	uxth	r2, r3
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046a4:	b29b      	uxth	r3, r3
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d14b      	bne.n	8004742 <I2C_Slave_ISR_IT+0x1de>
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80046b0:	d047      	beq.n	8004742 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80046b2:	68f8      	ldr	r0, [r7, #12]
 80046b4:	f000 fcfb 	bl	80050ae <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80046b8:	e043      	b.n	8004742 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	f003 0308 	and.w	r3, r3, #8
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d009      	beq.n	80046d8 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d004      	beq.n	80046d8 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80046ce:	6939      	ldr	r1, [r7, #16]
 80046d0:	68f8      	ldr	r0, [r7, #12]
 80046d2:	f000 fc2b 	bl	8004f2c <I2C_ITAddrCplt>
 80046d6:	e035      	b.n	8004744 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	f003 0302 	and.w	r3, r3, #2
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d030      	beq.n	8004744 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d02b      	beq.n	8004744 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046f0:	b29b      	uxth	r3, r3
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d018      	beq.n	8004728 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046fa:	781a      	ldrb	r2, [r3, #0]
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004706:	1c5a      	adds	r2, r3, #1
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004710:	b29b      	uxth	r3, r3
 8004712:	3b01      	subs	r3, #1
 8004714:	b29a      	uxth	r2, r3
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800471e:	3b01      	subs	r3, #1
 8004720:	b29a      	uxth	r2, r3
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	851a      	strh	r2, [r3, #40]	@ 0x28
 8004726:	e00d      	b.n	8004744 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800472e:	d002      	beq.n	8004736 <I2C_Slave_ISR_IT+0x1d2>
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d106      	bne.n	8004744 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004736:	68f8      	ldr	r0, [r7, #12]
 8004738:	f000 fcb9 	bl	80050ae <I2C_ITSlaveSeqCplt>
 800473c:	e002      	b.n	8004744 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 800473e:	bf00      	nop
 8004740:	e000      	b.n	8004744 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 8004742:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	2200      	movs	r2, #0
 8004748:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800474c:	2300      	movs	r3, #0
}
 800474e:	4618      	mov	r0, r3
 8004750:	3718      	adds	r7, #24
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}

08004756 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8004756:	b580      	push	{r7, lr}
 8004758:	b088      	sub	sp, #32
 800475a:	af02      	add	r7, sp, #8
 800475c:	60f8      	str	r0, [r7, #12]
 800475e:	60b9      	str	r1, [r7, #8]
 8004760:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004768:	2b01      	cmp	r3, #1
 800476a:	d101      	bne.n	8004770 <I2C_Master_ISR_DMA+0x1a>
 800476c:	2302      	movs	r3, #2
 800476e:	e0d9      	b.n	8004924 <I2C_Master_ISR_DMA+0x1ce>
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2201      	movs	r2, #1
 8004774:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	f003 0310 	and.w	r3, r3, #16
 800477e:	2b00      	cmp	r3, #0
 8004780:	d016      	beq.n	80047b0 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004788:	2b00      	cmp	r3, #0
 800478a:	d011      	beq.n	80047b0 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	2210      	movs	r2, #16
 8004792:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004798:	f043 0204 	orr.w	r2, r3, #4
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80047a0:	2120      	movs	r1, #32
 80047a2:	68f8      	ldr	r0, [r7, #12]
 80047a4:	f001 fb60 	bl	8005e68 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80047a8:	68f8      	ldr	r0, [r7, #12]
 80047aa:	f001 f964 	bl	8005a76 <I2C_Flush_TXDR>
 80047ae:	e0b4      	b.n	800491a <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d071      	beq.n	800489e <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d06c      	beq.n	800489e <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	681a      	ldr	r2, [r3, #0]
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80047d2:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047d8:	b29b      	uxth	r3, r3
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d04e      	beq.n	800487c <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	b29b      	uxth	r3, r3
 80047e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80047ea:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047f0:	b29b      	uxth	r3, r3
 80047f2:	2bff      	cmp	r3, #255	@ 0xff
 80047f4:	d906      	bls.n	8004804 <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	22ff      	movs	r2, #255	@ 0xff
 80047fa:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 80047fc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004800:	617b      	str	r3, [r7, #20]
 8004802:	e010      	b.n	8004826 <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004808:	b29a      	uxth	r2, r3
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004812:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004816:	d003      	beq.n	8004820 <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800481c:	617b      	str	r3, [r7, #20]
 800481e:	e002      	b.n	8004826 <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8004820:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004824:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800482a:	b2da      	uxtb	r2, r3
 800482c:	8a79      	ldrh	r1, [r7, #18]
 800482e:	2300      	movs	r3, #0
 8004830:	9300      	str	r3, [sp, #0]
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	68f8      	ldr	r0, [r7, #12]
 8004836:	f001 fae5 	bl	8005e04 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800483e:	b29a      	uxth	r2, r3
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004844:	1ad3      	subs	r3, r2, r3
 8004846:	b29a      	uxth	r2, r3
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004852:	b2db      	uxtb	r3, r3
 8004854:	2b22      	cmp	r3, #34	@ 0x22
 8004856:	d108      	bne.n	800486a <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	681a      	ldr	r2, [r3, #0]
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004866:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8004868:	e057      	b.n	800491a <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	681a      	ldr	r2, [r3, #0]
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004878:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800487a:	e04e      	b.n	800491a <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004886:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800488a:	d003      	beq.n	8004894 <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800488c:	68f8      	ldr	r0, [r7, #12]
 800488e:	f000 fbd1 	bl	8005034 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8004892:	e042      	b.n	800491a <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8004894:	2140      	movs	r1, #64	@ 0x40
 8004896:	68f8      	ldr	r0, [r7, #12]
 8004898:	f000 ffd6 	bl	8005848 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800489c:	e03d      	b.n	800491a <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d028      	beq.n	80048fa <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d023      	beq.n	80048fa <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048b6:	b29b      	uxth	r3, r3
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d119      	bne.n	80048f0 <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048c6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80048ca:	d025      	beq.n	8004918 <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048d0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80048d4:	d108      	bne.n	80048e8 <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	685a      	ldr	r2, [r3, #4]
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80048e4:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 80048e6:	e017      	b.n	8004918 <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80048e8:	68f8      	ldr	r0, [r7, #12]
 80048ea:	f000 fba3 	bl	8005034 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 80048ee:	e013      	b.n	8004918 <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80048f0:	2140      	movs	r1, #64	@ 0x40
 80048f2:	68f8      	ldr	r0, [r7, #12]
 80048f4:	f000 ffa8 	bl	8005848 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80048f8:	e00e      	b.n	8004918 <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	f003 0320 	and.w	r3, r3, #32
 8004900:	2b00      	cmp	r3, #0
 8004902:	d00a      	beq.n	800491a <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800490a:	2b00      	cmp	r3, #0
 800490c:	d005      	beq.n	800491a <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800490e:	68b9      	ldr	r1, [r7, #8]
 8004910:	68f8      	ldr	r0, [r7, #12]
 8004912:	f000 fc29 	bl	8005168 <I2C_ITMasterCplt>
 8004916:	e000      	b.n	800491a <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 8004918:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	2200      	movs	r2, #0
 800491e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004922:	2300      	movs	r3, #0
}
 8004924:	4618      	mov	r0, r3
 8004926:	3718      	adds	r7, #24
 8004928:	46bd      	mov	sp, r7
 800492a:	bd80      	pop	{r7, pc}

0800492c <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b088      	sub	sp, #32
 8004930:	af02      	add	r7, sp, #8
 8004932:	60f8      	str	r0, [r7, #12]
 8004934:	60b9      	str	r1, [r7, #8]
 8004936:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8004938:	4b8d      	ldr	r3, [pc, #564]	@ (8004b70 <I2C_Mem_ISR_DMA+0x244>)
 800493a:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004942:	2b01      	cmp	r3, #1
 8004944:	d101      	bne.n	800494a <I2C_Mem_ISR_DMA+0x1e>
 8004946:	2302      	movs	r3, #2
 8004948:	e10e      	b.n	8004b68 <I2C_Mem_ISR_DMA+0x23c>
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	2201      	movs	r2, #1
 800494e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	f003 0310 	and.w	r3, r3, #16
 8004958:	2b00      	cmp	r3, #0
 800495a:	d016      	beq.n	800498a <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004962:	2b00      	cmp	r3, #0
 8004964:	d011      	beq.n	800498a <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	2210      	movs	r2, #16
 800496c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004972:	f043 0204 	orr.w	r2, r3, #4
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800497a:	2120      	movs	r1, #32
 800497c:	68f8      	ldr	r0, [r7, #12]
 800497e:	f001 fa73 	bl	8005e68 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004982:	68f8      	ldr	r0, [r7, #12]
 8004984:	f001 f877 	bl	8005a76 <I2C_Flush_TXDR>
 8004988:	e0e9      	b.n	8004b5e <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	f003 0302 	and.w	r3, r3, #2
 8004990:	2b00      	cmp	r3, #0
 8004992:	d00e      	beq.n	80049b2 <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800499a:	2b00      	cmp	r3, #0
 800499c:	d009      	beq.n	80049b2 <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	68fa      	ldr	r2, [r7, #12]
 80049a4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80049a6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	f04f 32ff 	mov.w	r2, #4294967295
 80049ae:	651a      	str	r2, [r3, #80]	@ 0x50
 80049b0:	e0d5      	b.n	8004b5e <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d05f      	beq.n	8004a7c <I2C_Mem_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d05a      	beq.n	8004a7c <I2C_Mem_ISR_DMA+0x150>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80049c6:	2101      	movs	r1, #1
 80049c8:	68f8      	ldr	r0, [r7, #12]
 80049ca:	f001 fad1 	bl	8005f70 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80049ce:	2110      	movs	r1, #16
 80049d0:	68f8      	ldr	r0, [r7, #12]
 80049d2:	f001 fa49 	bl	8005e68 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049da:	b29b      	uxth	r3, r3
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d048      	beq.n	8004a72 <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049e4:	b29b      	uxth	r3, r3
 80049e6:	2bff      	cmp	r3, #255	@ 0xff
 80049e8:	d910      	bls.n	8004a0c <I2C_Mem_ISR_DMA+0xe0>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	22ff      	movs	r2, #255	@ 0xff
 80049ee:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049f4:	b299      	uxth	r1, r3
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049fa:	b2da      	uxtb	r2, r3
 80049fc:	2300      	movs	r3, #0
 80049fe:	9300      	str	r3, [sp, #0]
 8004a00:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004a04:	68f8      	ldr	r0, [r7, #12]
 8004a06:	f001 f9fd 	bl	8005e04 <I2C_TransferConfig>
 8004a0a:	e011      	b.n	8004a30 <I2C_Mem_ISR_DMA+0x104>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a10:	b29a      	uxth	r2, r3
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a1a:	b299      	uxth	r1, r3
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a20:	b2da      	uxtb	r2, r3
 8004a22:	2300      	movs	r3, #0
 8004a24:	9300      	str	r3, [sp, #0]
 8004a26:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004a2a:	68f8      	ldr	r0, [r7, #12]
 8004a2c:	f001 f9ea 	bl	8005e04 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a34:	b29a      	uxth	r2, r3
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a3a:	1ad3      	subs	r3, r2, r3
 8004a3c:	b29a      	uxth	r2, r3
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a48:	b2db      	uxtb	r3, r3
 8004a4a:	2b22      	cmp	r3, #34	@ 0x22
 8004a4c:	d108      	bne.n	8004a60 <I2C_Mem_ISR_DMA+0x134>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	681a      	ldr	r2, [r3, #0]
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004a5c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8004a5e:	e07e      	b.n	8004b5e <I2C_Mem_ISR_DMA+0x232>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	681a      	ldr	r2, [r3, #0]
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004a6e:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8004a70:	e075      	b.n	8004b5e <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8004a72:	2140      	movs	r1, #64	@ 0x40
 8004a74:	68f8      	ldr	r0, [r7, #12]
 8004a76:	f000 fee7 	bl	8005848 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8004a7a:	e070      	b.n	8004b5e <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d05d      	beq.n	8004b42 <I2C_Mem_ISR_DMA+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d058      	beq.n	8004b42 <I2C_Mem_ISR_DMA+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004a90:	2101      	movs	r1, #1
 8004a92:	68f8      	ldr	r0, [r7, #12]
 8004a94:	f001 fa6c 	bl	8005f70 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8004a98:	2110      	movs	r1, #16
 8004a9a:	68f8      	ldr	r0, [r7, #12]
 8004a9c:	f001 f9e4 	bl	8005e68 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004aa6:	b2db      	uxtb	r3, r3
 8004aa8:	2b22      	cmp	r3, #34	@ 0x22
 8004aaa:	d101      	bne.n	8004ab0 <I2C_Mem_ISR_DMA+0x184>
    {
      direction = I2C_GENERATE_START_READ;
 8004aac:	4b31      	ldr	r3, [pc, #196]	@ (8004b74 <I2C_Mem_ISR_DMA+0x248>)
 8004aae:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ab4:	b29b      	uxth	r3, r3
 8004ab6:	2bff      	cmp	r3, #255	@ 0xff
 8004ab8:	d910      	bls.n	8004adc <I2C_Mem_ISR_DMA+0x1b0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	22ff      	movs	r2, #255	@ 0xff
 8004abe:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ac4:	b299      	uxth	r1, r3
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004aca:	b2da      	uxtb	r2, r3
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	9300      	str	r3, [sp, #0]
 8004ad0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004ad4:	68f8      	ldr	r0, [r7, #12]
 8004ad6:	f001 f995 	bl	8005e04 <I2C_TransferConfig>
 8004ada:	e011      	b.n	8004b00 <I2C_Mem_ISR_DMA+0x1d4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ae0:	b29a      	uxth	r2, r3
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004aea:	b299      	uxth	r1, r3
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004af0:	b2da      	uxtb	r2, r3
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	9300      	str	r3, [sp, #0]
 8004af6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004afa:	68f8      	ldr	r0, [r7, #12]
 8004afc:	f001 f982 	bl	8005e04 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b04:	b29a      	uxth	r2, r3
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b0a:	1ad3      	subs	r3, r2, r3
 8004b0c:	b29a      	uxth	r2, r3
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b18:	b2db      	uxtb	r3, r3
 8004b1a:	2b22      	cmp	r3, #34	@ 0x22
 8004b1c:	d108      	bne.n	8004b30 <I2C_Mem_ISR_DMA+0x204>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	681a      	ldr	r2, [r3, #0]
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004b2c:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004b2e:	e016      	b.n	8004b5e <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	681a      	ldr	r2, [r3, #0]
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004b3e:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004b40:	e00d      	b.n	8004b5e <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	f003 0320 	and.w	r3, r3, #32
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d008      	beq.n	8004b5e <I2C_Mem_ISR_DMA+0x232>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d003      	beq.n	8004b5e <I2C_Mem_ISR_DMA+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8004b56:	68b9      	ldr	r1, [r7, #8]
 8004b58:	68f8      	ldr	r0, [r7, #12]
 8004b5a:	f000 fb05 	bl	8005168 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	2200      	movs	r2, #0
 8004b62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004b66:	2300      	movs	r3, #0
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	3718      	adds	r7, #24
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd80      	pop	{r7, pc}
 8004b70:	80002000 	.word	0x80002000
 8004b74:	80002400 	.word	0x80002400

08004b78 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b088      	sub	sp, #32
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	60f8      	str	r0, [r7, #12]
 8004b80:	60b9      	str	r1, [r7, #8]
 8004b82:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b88:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004b94:	2b01      	cmp	r3, #1
 8004b96:	d101      	bne.n	8004b9c <I2C_Slave_ISR_DMA+0x24>
 8004b98:	2302      	movs	r3, #2
 8004b9a:	e1c2      	b.n	8004f22 <I2C_Slave_ISR_DMA+0x3aa>
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	f003 0320 	and.w	r3, r3, #32
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d009      	beq.n	8004bc2 <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d004      	beq.n	8004bc2 <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8004bb8:	68b9      	ldr	r1, [r7, #8]
 8004bba:	68f8      	ldr	r0, [r7, #12]
 8004bbc:	f000 fb9c 	bl	80052f8 <I2C_ITSlaveCplt>
 8004bc0:	e1aa      	b.n	8004f18 <I2C_Slave_ISR_DMA+0x3a0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	f003 0310 	and.w	r3, r3, #16
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	f000 8197 	beq.w	8004efc <I2C_Slave_ISR_DMA+0x384>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	f000 8191 	beq.w	8004efc <I2C_Slave_ISR_DMA+0x384>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d105      	bne.n	8004bf0 <I2C_Slave_ISR_DMA+0x78>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	f000 817f 	beq.w	8004eee <I2C_Slave_ISR_DMA+0x376>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d07b      	beq.n	8004cf0 <I2C_Slave_ISR_DMA+0x178>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d076      	beq.n	8004cf0 <I2C_Slave_ISR_DMA+0x178>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a74      	ldr	r2, [pc, #464]	@ (8004ddc <I2C_Slave_ISR_DMA+0x264>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d059      	beq.n	8004cc2 <I2C_Slave_ISR_DMA+0x14a>
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a72      	ldr	r2, [pc, #456]	@ (8004de0 <I2C_Slave_ISR_DMA+0x268>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d053      	beq.n	8004cc2 <I2C_Slave_ISR_DMA+0x14a>
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a70      	ldr	r2, [pc, #448]	@ (8004de4 <I2C_Slave_ISR_DMA+0x26c>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d04d      	beq.n	8004cc2 <I2C_Slave_ISR_DMA+0x14a>
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a6e      	ldr	r2, [pc, #440]	@ (8004de8 <I2C_Slave_ISR_DMA+0x270>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d047      	beq.n	8004cc2 <I2C_Slave_ISR_DMA+0x14a>
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a6c      	ldr	r2, [pc, #432]	@ (8004dec <I2C_Slave_ISR_DMA+0x274>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d041      	beq.n	8004cc2 <I2C_Slave_ISR_DMA+0x14a>
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a6a      	ldr	r2, [pc, #424]	@ (8004df0 <I2C_Slave_ISR_DMA+0x278>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d03b      	beq.n	8004cc2 <I2C_Slave_ISR_DMA+0x14a>
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a68      	ldr	r2, [pc, #416]	@ (8004df4 <I2C_Slave_ISR_DMA+0x27c>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d035      	beq.n	8004cc2 <I2C_Slave_ISR_DMA+0x14a>
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a66      	ldr	r2, [pc, #408]	@ (8004df8 <I2C_Slave_ISR_DMA+0x280>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d02f      	beq.n	8004cc2 <I2C_Slave_ISR_DMA+0x14a>
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a64      	ldr	r2, [pc, #400]	@ (8004dfc <I2C_Slave_ISR_DMA+0x284>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d029      	beq.n	8004cc2 <I2C_Slave_ISR_DMA+0x14a>
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a62      	ldr	r2, [pc, #392]	@ (8004e00 <I2C_Slave_ISR_DMA+0x288>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d023      	beq.n	8004cc2 <I2C_Slave_ISR_DMA+0x14a>
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a60      	ldr	r2, [pc, #384]	@ (8004e04 <I2C_Slave_ISR_DMA+0x28c>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d01d      	beq.n	8004cc2 <I2C_Slave_ISR_DMA+0x14a>
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a5e      	ldr	r2, [pc, #376]	@ (8004e08 <I2C_Slave_ISR_DMA+0x290>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d017      	beq.n	8004cc2 <I2C_Slave_ISR_DMA+0x14a>
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a5c      	ldr	r2, [pc, #368]	@ (8004e0c <I2C_Slave_ISR_DMA+0x294>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d011      	beq.n	8004cc2 <I2C_Slave_ISR_DMA+0x14a>
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a5a      	ldr	r2, [pc, #360]	@ (8004e10 <I2C_Slave_ISR_DMA+0x298>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d00b      	beq.n	8004cc2 <I2C_Slave_ISR_DMA+0x14a>
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a58      	ldr	r2, [pc, #352]	@ (8004e14 <I2C_Slave_ISR_DMA+0x29c>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d005      	beq.n	8004cc2 <I2C_Slave_ISR_DMA+0x14a>
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a56      	ldr	r2, [pc, #344]	@ (8004e18 <I2C_Slave_ISR_DMA+0x2a0>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d109      	bne.n	8004cd6 <I2C_Slave_ISR_DMA+0x15e>
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	bf0c      	ite	eq
 8004cce:	2301      	moveq	r3, #1
 8004cd0:	2300      	movne	r3, #0
 8004cd2:	b2db      	uxtb	r3, r3
 8004cd4:	e008      	b.n	8004ce8 <I2C_Slave_ISR_DMA+0x170>
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	bf0c      	ite	eq
 8004ce2:	2301      	moveq	r3, #1
 8004ce4:	2300      	movne	r3, #0
 8004ce6:	b2db      	uxtb	r3, r3
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d001      	beq.n	8004cf0 <I2C_Slave_ISR_DMA+0x178>
          {
            treatdmanack = 1U;
 8004cec:	2301      	movs	r3, #1
 8004cee:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	f000 809e 	beq.w	8004e36 <I2C_Slave_ISR_DMA+0x2be>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	f000 8098 	beq.w	8004e36 <I2C_Slave_ISR_DMA+0x2be>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a33      	ldr	r2, [pc, #204]	@ (8004ddc <I2C_Slave_ISR_DMA+0x264>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d059      	beq.n	8004dc6 <I2C_Slave_ISR_DMA+0x24e>
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a31      	ldr	r2, [pc, #196]	@ (8004de0 <I2C_Slave_ISR_DMA+0x268>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d053      	beq.n	8004dc6 <I2C_Slave_ISR_DMA+0x24e>
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a2f      	ldr	r2, [pc, #188]	@ (8004de4 <I2C_Slave_ISR_DMA+0x26c>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d04d      	beq.n	8004dc6 <I2C_Slave_ISR_DMA+0x24e>
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a2d      	ldr	r2, [pc, #180]	@ (8004de8 <I2C_Slave_ISR_DMA+0x270>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d047      	beq.n	8004dc6 <I2C_Slave_ISR_DMA+0x24e>
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a2b      	ldr	r2, [pc, #172]	@ (8004dec <I2C_Slave_ISR_DMA+0x274>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d041      	beq.n	8004dc6 <I2C_Slave_ISR_DMA+0x24e>
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4a29      	ldr	r2, [pc, #164]	@ (8004df0 <I2C_Slave_ISR_DMA+0x278>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d03b      	beq.n	8004dc6 <I2C_Slave_ISR_DMA+0x24e>
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a27      	ldr	r2, [pc, #156]	@ (8004df4 <I2C_Slave_ISR_DMA+0x27c>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d035      	beq.n	8004dc6 <I2C_Slave_ISR_DMA+0x24e>
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a25      	ldr	r2, [pc, #148]	@ (8004df8 <I2C_Slave_ISR_DMA+0x280>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d02f      	beq.n	8004dc6 <I2C_Slave_ISR_DMA+0x24e>
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a23      	ldr	r2, [pc, #140]	@ (8004dfc <I2C_Slave_ISR_DMA+0x284>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d029      	beq.n	8004dc6 <I2C_Slave_ISR_DMA+0x24e>
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a21      	ldr	r2, [pc, #132]	@ (8004e00 <I2C_Slave_ISR_DMA+0x288>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d023      	beq.n	8004dc6 <I2C_Slave_ISR_DMA+0x24e>
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a1f      	ldr	r2, [pc, #124]	@ (8004e04 <I2C_Slave_ISR_DMA+0x28c>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d01d      	beq.n	8004dc6 <I2C_Slave_ISR_DMA+0x24e>
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a1d      	ldr	r2, [pc, #116]	@ (8004e08 <I2C_Slave_ISR_DMA+0x290>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d017      	beq.n	8004dc6 <I2C_Slave_ISR_DMA+0x24e>
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a1b      	ldr	r2, [pc, #108]	@ (8004e0c <I2C_Slave_ISR_DMA+0x294>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d011      	beq.n	8004dc6 <I2C_Slave_ISR_DMA+0x24e>
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a19      	ldr	r2, [pc, #100]	@ (8004e10 <I2C_Slave_ISR_DMA+0x298>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d00b      	beq.n	8004dc6 <I2C_Slave_ISR_DMA+0x24e>
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a17      	ldr	r2, [pc, #92]	@ (8004e14 <I2C_Slave_ISR_DMA+0x29c>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d005      	beq.n	8004dc6 <I2C_Slave_ISR_DMA+0x24e>
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a15      	ldr	r2, [pc, #84]	@ (8004e18 <I2C_Slave_ISR_DMA+0x2a0>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d12a      	bne.n	8004e1c <I2C_Slave_ISR_DMA+0x2a4>
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	bf0c      	ite	eq
 8004dd2:	2301      	moveq	r3, #1
 8004dd4:	2300      	movne	r3, #0
 8004dd6:	b2db      	uxtb	r3, r3
 8004dd8:	e029      	b.n	8004e2e <I2C_Slave_ISR_DMA+0x2b6>
 8004dda:	bf00      	nop
 8004ddc:	40020010 	.word	0x40020010
 8004de0:	40020028 	.word	0x40020028
 8004de4:	40020040 	.word	0x40020040
 8004de8:	40020058 	.word	0x40020058
 8004dec:	40020070 	.word	0x40020070
 8004df0:	40020088 	.word	0x40020088
 8004df4:	400200a0 	.word	0x400200a0
 8004df8:	400200b8 	.word	0x400200b8
 8004dfc:	40020410 	.word	0x40020410
 8004e00:	40020428 	.word	0x40020428
 8004e04:	40020440 	.word	0x40020440
 8004e08:	40020458 	.word	0x40020458
 8004e0c:	40020470 	.word	0x40020470
 8004e10:	40020488 	.word	0x40020488
 8004e14:	400204a0 	.word	0x400204a0
 8004e18:	400204b8 	.word	0x400204b8
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	bf0c      	ite	eq
 8004e28:	2301      	moveq	r3, #1
 8004e2a:	2300      	movne	r3, #0
 8004e2c:	b2db      	uxtb	r3, r3
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d001      	beq.n	8004e36 <I2C_Slave_ISR_DMA+0x2be>
          {
            treatdmanack = 1U;
 8004e32:	2301      	movs	r3, #1
 8004e34:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8004e36:	69fb      	ldr	r3, [r7, #28]
 8004e38:	2b01      	cmp	r3, #1
 8004e3a:	d128      	bne.n	8004e8e <I2C_Slave_ISR_DMA+0x316>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e42:	b2db      	uxtb	r3, r3
 8004e44:	2b28      	cmp	r3, #40	@ 0x28
 8004e46:	d108      	bne.n	8004e5a <I2C_Slave_ISR_DMA+0x2e2>
 8004e48:	69bb      	ldr	r3, [r7, #24]
 8004e4a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004e4e:	d104      	bne.n	8004e5a <I2C_Slave_ISR_DMA+0x2e2>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8004e50:	68b9      	ldr	r1, [r7, #8]
 8004e52:	68f8      	ldr	r0, [r7, #12]
 8004e54:	f000 fca4 	bl	80057a0 <I2C_ITListenCplt>
 8004e58:	e048      	b.n	8004eec <I2C_Slave_ISR_DMA+0x374>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e60:	b2db      	uxtb	r3, r3
 8004e62:	2b29      	cmp	r3, #41	@ 0x29
 8004e64:	d10e      	bne.n	8004e84 <I2C_Slave_ISR_DMA+0x30c>
 8004e66:	69bb      	ldr	r3, [r7, #24]
 8004e68:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004e6c:	d00a      	beq.n	8004e84 <I2C_Slave_ISR_DMA+0x30c>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	2210      	movs	r2, #16
 8004e74:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8004e76:	68f8      	ldr	r0, [r7, #12]
 8004e78:	f000 fdfd 	bl	8005a76 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8004e7c:	68f8      	ldr	r0, [r7, #12]
 8004e7e:	f000 f916 	bl	80050ae <I2C_ITSlaveSeqCplt>
 8004e82:	e033      	b.n	8004eec <I2C_Slave_ISR_DMA+0x374>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	2210      	movs	r2, #16
 8004e8a:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8004e8c:	e034      	b.n	8004ef8 <I2C_Slave_ISR_DMA+0x380>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	2210      	movs	r2, #16
 8004e94:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e9a:	f043 0204 	orr.w	r2, r3, #4
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ea8:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004eaa:	69bb      	ldr	r3, [r7, #24]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d003      	beq.n	8004eb8 <I2C_Slave_ISR_DMA+0x340>
 8004eb0:	69bb      	ldr	r3, [r7, #24]
 8004eb2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004eb6:	d11f      	bne.n	8004ef8 <I2C_Slave_ISR_DMA+0x380>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004eb8:	7dfb      	ldrb	r3, [r7, #23]
 8004eba:	2b21      	cmp	r3, #33	@ 0x21
 8004ebc:	d002      	beq.n	8004ec4 <I2C_Slave_ISR_DMA+0x34c>
 8004ebe:	7dfb      	ldrb	r3, [r7, #23]
 8004ec0:	2b29      	cmp	r3, #41	@ 0x29
 8004ec2:	d103      	bne.n	8004ecc <I2C_Slave_ISR_DMA+0x354>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	2221      	movs	r2, #33	@ 0x21
 8004ec8:	631a      	str	r2, [r3, #48]	@ 0x30
 8004eca:	e008      	b.n	8004ede <I2C_Slave_ISR_DMA+0x366>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004ecc:	7dfb      	ldrb	r3, [r7, #23]
 8004ece:	2b22      	cmp	r3, #34	@ 0x22
 8004ed0:	d002      	beq.n	8004ed8 <I2C_Slave_ISR_DMA+0x360>
 8004ed2:	7dfb      	ldrb	r3, [r7, #23]
 8004ed4:	2b2a      	cmp	r3, #42	@ 0x2a
 8004ed6:	d102      	bne.n	8004ede <I2C_Slave_ISR_DMA+0x366>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2222      	movs	r2, #34	@ 0x22
 8004edc:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ee2:	4619      	mov	r1, r3
 8004ee4:	68f8      	ldr	r0, [r7, #12]
 8004ee6:	f000 fcaf 	bl	8005848 <I2C_ITError>
      if (treatdmanack == 1U)
 8004eea:	e005      	b.n	8004ef8 <I2C_Slave_ISR_DMA+0x380>
 8004eec:	e004      	b.n	8004ef8 <I2C_Slave_ISR_DMA+0x380>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	2210      	movs	r2, #16
 8004ef4:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004ef6:	e00f      	b.n	8004f18 <I2C_Slave_ISR_DMA+0x3a0>
      if (treatdmanack == 1U)
 8004ef8:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004efa:	e00d      	b.n	8004f18 <I2C_Slave_ISR_DMA+0x3a0>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	f003 0308 	and.w	r3, r3, #8
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d008      	beq.n	8004f18 <I2C_Slave_ISR_DMA+0x3a0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d003      	beq.n	8004f18 <I2C_Slave_ISR_DMA+0x3a0>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8004f10:	68b9      	ldr	r1, [r7, #8]
 8004f12:	68f8      	ldr	r0, [r7, #12]
 8004f14:	f000 f80a 	bl	8004f2c <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004f20:	2300      	movs	r3, #0
}
 8004f22:	4618      	mov	r0, r3
 8004f24:	3720      	adds	r7, #32
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bd80      	pop	{r7, pc}
 8004f2a:	bf00      	nop

08004f2c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b084      	sub	sp, #16
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
 8004f34:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f3c:	b2db      	uxtb	r3, r3
 8004f3e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004f42:	2b28      	cmp	r3, #40	@ 0x28
 8004f44:	d16a      	bne.n	800501c <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	699b      	ldr	r3, [r3, #24]
 8004f4c:	0c1b      	lsrs	r3, r3, #16
 8004f4e:	b2db      	uxtb	r3, r3
 8004f50:	f003 0301 	and.w	r3, r3, #1
 8004f54:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	699b      	ldr	r3, [r3, #24]
 8004f5c:	0c1b      	lsrs	r3, r3, #16
 8004f5e:	b29b      	uxth	r3, r3
 8004f60:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8004f64:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	689b      	ldr	r3, [r3, #8]
 8004f6c:	b29b      	uxth	r3, r3
 8004f6e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004f72:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	68db      	ldr	r3, [r3, #12]
 8004f7a:	b29b      	uxth	r3, r3
 8004f7c:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8004f80:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	68db      	ldr	r3, [r3, #12]
 8004f86:	2b02      	cmp	r3, #2
 8004f88:	d138      	bne.n	8004ffc <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8004f8a:	897b      	ldrh	r3, [r7, #10]
 8004f8c:	09db      	lsrs	r3, r3, #7
 8004f8e:	b29a      	uxth	r2, r3
 8004f90:	89bb      	ldrh	r3, [r7, #12]
 8004f92:	4053      	eors	r3, r2
 8004f94:	b29b      	uxth	r3, r3
 8004f96:	f003 0306 	and.w	r3, r3, #6
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d11c      	bne.n	8004fd8 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8004f9e:	897b      	ldrh	r3, [r7, #10]
 8004fa0:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fa6:	1c5a      	adds	r2, r3, #1
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fb0:	2b02      	cmp	r3, #2
 8004fb2:	d13b      	bne.n	800502c <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	2208      	movs	r2, #8
 8004fc0:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004fca:	89ba      	ldrh	r2, [r7, #12]
 8004fcc:	7bfb      	ldrb	r3, [r7, #15]
 8004fce:	4619      	mov	r1, r3
 8004fd0:	6878      	ldr	r0, [r7, #4]
 8004fd2:	f7ff f952 	bl	800427a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004fd6:	e029      	b.n	800502c <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8004fd8:	893b      	ldrh	r3, [r7, #8]
 8004fda:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004fdc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004fe0:	6878      	ldr	r0, [r7, #4]
 8004fe2:	f000 ffc5 	bl	8005f70 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004fee:	89ba      	ldrh	r2, [r7, #12]
 8004ff0:	7bfb      	ldrb	r3, [r7, #15]
 8004ff2:	4619      	mov	r1, r3
 8004ff4:	6878      	ldr	r0, [r7, #4]
 8004ff6:	f7ff f940 	bl	800427a <HAL_I2C_AddrCallback>
}
 8004ffa:	e017      	b.n	800502c <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004ffc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005000:	6878      	ldr	r0, [r7, #4]
 8005002:	f000 ffb5 	bl	8005f70 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2200      	movs	r2, #0
 800500a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800500e:	89ba      	ldrh	r2, [r7, #12]
 8005010:	7bfb      	ldrb	r3, [r7, #15]
 8005012:	4619      	mov	r1, r3
 8005014:	6878      	ldr	r0, [r7, #4]
 8005016:	f7ff f930 	bl	800427a <HAL_I2C_AddrCallback>
}
 800501a:	e007      	b.n	800502c <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	2208      	movs	r2, #8
 8005022:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2200      	movs	r2, #0
 8005028:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 800502c:	bf00      	nop
 800502e:	3710      	adds	r7, #16
 8005030:	46bd      	mov	sp, r7
 8005032:	bd80      	pop	{r7, pc}

08005034 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b082      	sub	sp, #8
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2200      	movs	r2, #0
 8005040:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800504a:	b2db      	uxtb	r3, r3
 800504c:	2b21      	cmp	r3, #33	@ 0x21
 800504e:	d115      	bne.n	800507c <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2220      	movs	r2, #32
 8005054:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2211      	movs	r2, #17
 800505c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2200      	movs	r2, #0
 8005062:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005064:	2101      	movs	r1, #1
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	f000 ff82 	bl	8005f70 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2200      	movs	r2, #0
 8005070:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8005074:	6878      	ldr	r0, [r7, #4]
 8005076:	f7ff f8d8 	bl	800422a <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800507a:	e014      	b.n	80050a6 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2220      	movs	r2, #32
 8005080:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2212      	movs	r2, #18
 8005088:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2200      	movs	r2, #0
 800508e:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005090:	2102      	movs	r1, #2
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	f000 ff6c 	bl	8005f70 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2200      	movs	r2, #0
 800509c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 80050a0:	6878      	ldr	r0, [r7, #4]
 80050a2:	f7ff f8cc 	bl	800423e <HAL_I2C_MasterRxCpltCallback>
}
 80050a6:	bf00      	nop
 80050a8:	3708      	adds	r7, #8
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bd80      	pop	{r7, pc}

080050ae <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80050ae:	b580      	push	{r7, lr}
 80050b0:	b084      	sub	sp, #16
 80050b2:	af00      	add	r7, sp, #0
 80050b4:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2200      	movs	r2, #0
 80050c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d008      	beq.n	80050e2 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	681a      	ldr	r2, [r3, #0]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80050de:	601a      	str	r2, [r3, #0]
 80050e0:	e00c      	b.n	80050fc <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d007      	beq.n	80050fc <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	681a      	ldr	r2, [r3, #0]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80050fa:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005102:	b2db      	uxtb	r3, r3
 8005104:	2b29      	cmp	r3, #41	@ 0x29
 8005106:	d112      	bne.n	800512e <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2228      	movs	r2, #40	@ 0x28
 800510c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2221      	movs	r2, #33	@ 0x21
 8005114:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005116:	2101      	movs	r1, #1
 8005118:	6878      	ldr	r0, [r7, #4]
 800511a:	f000 ff29 	bl	8005f70 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2200      	movs	r2, #0
 8005122:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005126:	6878      	ldr	r0, [r7, #4]
 8005128:	f7ff f893 	bl	8004252 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800512c:	e017      	b.n	800515e <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005134:	b2db      	uxtb	r3, r3
 8005136:	2b2a      	cmp	r3, #42	@ 0x2a
 8005138:	d111      	bne.n	800515e <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2228      	movs	r2, #40	@ 0x28
 800513e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2222      	movs	r2, #34	@ 0x22
 8005146:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005148:	2102      	movs	r1, #2
 800514a:	6878      	ldr	r0, [r7, #4]
 800514c:	f000 ff10 	bl	8005f70 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2200      	movs	r2, #0
 8005154:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005158:	6878      	ldr	r0, [r7, #4]
 800515a:	f7ff f884 	bl	8004266 <HAL_I2C_SlaveRxCpltCallback>
}
 800515e:	bf00      	nop
 8005160:	3710      	adds	r7, #16
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}
	...

08005168 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b086      	sub	sp, #24
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
 8005170:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	2220      	movs	r2, #32
 800517c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005184:	b2db      	uxtb	r3, r3
 8005186:	2b21      	cmp	r3, #33	@ 0x21
 8005188:	d107      	bne.n	800519a <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800518a:	2101      	movs	r1, #1
 800518c:	6878      	ldr	r0, [r7, #4]
 800518e:	f000 feef 	bl	8005f70 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2211      	movs	r2, #17
 8005196:	631a      	str	r2, [r3, #48]	@ 0x30
 8005198:	e00c      	b.n	80051b4 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80051a0:	b2db      	uxtb	r3, r3
 80051a2:	2b22      	cmp	r3, #34	@ 0x22
 80051a4:	d106      	bne.n	80051b4 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80051a6:	2102      	movs	r1, #2
 80051a8:	6878      	ldr	r0, [r7, #4]
 80051aa:	f000 fee1 	bl	8005f70 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2212      	movs	r2, #18
 80051b2:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	6859      	ldr	r1, [r3, #4]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681a      	ldr	r2, [r3, #0]
 80051be:	4b4c      	ldr	r3, [pc, #304]	@ (80052f0 <I2C_ITMasterCplt+0x188>)
 80051c0:	400b      	ands	r3, r1
 80051c2:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2200      	movs	r2, #0
 80051c8:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	4a49      	ldr	r2, [pc, #292]	@ (80052f4 <I2C_ITMasterCplt+0x18c>)
 80051ce:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 80051d0:	697b      	ldr	r3, [r7, #20]
 80051d2:	f003 0310 	and.w	r3, r3, #16
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d009      	beq.n	80051ee <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	2210      	movs	r2, #16
 80051e0:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051e6:	f043 0204 	orr.w	r2, r3, #4
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80051f4:	b2db      	uxtb	r3, r3
 80051f6:	2b60      	cmp	r3, #96	@ 0x60
 80051f8:	d10a      	bne.n	8005210 <I2C_ITMasterCplt+0xa8>
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	f003 0304 	and.w	r3, r3, #4
 8005200:	2b00      	cmp	r3, #0
 8005202:	d005      	beq.n	8005210 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800520a:	b2db      	uxtb	r3, r3
 800520c:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800520e:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8005210:	6878      	ldr	r0, [r7, #4]
 8005212:	f000 fc30 	bl	8005a76 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800521a:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005222:	b2db      	uxtb	r3, r3
 8005224:	2b60      	cmp	r3, #96	@ 0x60
 8005226:	d002      	beq.n	800522e <I2C_ITMasterCplt+0xc6>
 8005228:	693b      	ldr	r3, [r7, #16]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d006      	beq.n	800523c <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005232:	4619      	mov	r1, r3
 8005234:	6878      	ldr	r0, [r7, #4]
 8005236:	f000 fb07 	bl	8005848 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800523a:	e054      	b.n	80052e6 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005242:	b2db      	uxtb	r3, r3
 8005244:	2b21      	cmp	r3, #33	@ 0x21
 8005246:	d124      	bne.n	8005292 <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2220      	movs	r2, #32
 800524c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2200      	movs	r2, #0
 8005254:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800525c:	b2db      	uxtb	r3, r3
 800525e:	2b40      	cmp	r3, #64	@ 0x40
 8005260:	d10b      	bne.n	800527a <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2200      	movs	r2, #0
 8005266:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2200      	movs	r2, #0
 800526e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8005272:	6878      	ldr	r0, [r7, #4]
 8005274:	f7ff f819 	bl	80042aa <HAL_I2C_MemTxCpltCallback>
}
 8005278:	e035      	b.n	80052e6 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2200      	movs	r2, #0
 800527e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2200      	movs	r2, #0
 8005286:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800528a:	6878      	ldr	r0, [r7, #4]
 800528c:	f7fe ffcd 	bl	800422a <HAL_I2C_MasterTxCpltCallback>
}
 8005290:	e029      	b.n	80052e6 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005298:	b2db      	uxtb	r3, r3
 800529a:	2b22      	cmp	r3, #34	@ 0x22
 800529c:	d123      	bne.n	80052e6 <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2220      	movs	r2, #32
 80052a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2200      	movs	r2, #0
 80052aa:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80052b2:	b2db      	uxtb	r3, r3
 80052b4:	2b40      	cmp	r3, #64	@ 0x40
 80052b6:	d10b      	bne.n	80052d0 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2200      	movs	r2, #0
 80052bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2200      	movs	r2, #0
 80052c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 80052c8:	6878      	ldr	r0, [r7, #4]
 80052ca:	f7fe fff8 	bl	80042be <HAL_I2C_MemRxCpltCallback>
}
 80052ce:	e00a      	b.n	80052e6 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2200      	movs	r2, #0
 80052d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2200      	movs	r2, #0
 80052dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80052e0:	6878      	ldr	r0, [r7, #4]
 80052e2:	f7fe ffac 	bl	800423e <HAL_I2C_MasterRxCpltCallback>
}
 80052e6:	bf00      	nop
 80052e8:	3718      	adds	r7, #24
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}
 80052ee:	bf00      	nop
 80052f0:	fe00e800 	.word	0xfe00e800
 80052f4:	ffff0000 	.word	0xffff0000

080052f8 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b086      	sub	sp, #24
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
 8005300:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005312:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800531a:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	2220      	movs	r2, #32
 8005322:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005324:	7afb      	ldrb	r3, [r7, #11]
 8005326:	2b21      	cmp	r3, #33	@ 0x21
 8005328:	d002      	beq.n	8005330 <I2C_ITSlaveCplt+0x38>
 800532a:	7afb      	ldrb	r3, [r7, #11]
 800532c:	2b29      	cmp	r3, #41	@ 0x29
 800532e:	d108      	bne.n	8005342 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8005330:	f248 0101 	movw	r1, #32769	@ 0x8001
 8005334:	6878      	ldr	r0, [r7, #4]
 8005336:	f000 fe1b 	bl	8005f70 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2221      	movs	r2, #33	@ 0x21
 800533e:	631a      	str	r2, [r3, #48]	@ 0x30
 8005340:	e019      	b.n	8005376 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005342:	7afb      	ldrb	r3, [r7, #11]
 8005344:	2b22      	cmp	r3, #34	@ 0x22
 8005346:	d002      	beq.n	800534e <I2C_ITSlaveCplt+0x56>
 8005348:	7afb      	ldrb	r3, [r7, #11]
 800534a:	2b2a      	cmp	r3, #42	@ 0x2a
 800534c:	d108      	bne.n	8005360 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800534e:	f248 0102 	movw	r1, #32770	@ 0x8002
 8005352:	6878      	ldr	r0, [r7, #4]
 8005354:	f000 fe0c 	bl	8005f70 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2222      	movs	r2, #34	@ 0x22
 800535c:	631a      	str	r2, [r3, #48]	@ 0x30
 800535e:	e00a      	b.n	8005376 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8005360:	7afb      	ldrb	r3, [r7, #11]
 8005362:	2b28      	cmp	r3, #40	@ 0x28
 8005364:	d107      	bne.n	8005376 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8005366:	f248 0103 	movw	r1, #32771	@ 0x8003
 800536a:	6878      	ldr	r0, [r7, #4]
 800536c:	f000 fe00 	bl	8005f70 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2200      	movs	r2, #0
 8005374:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	685a      	ldr	r2, [r3, #4]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005384:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	6859      	ldr	r1, [r3, #4]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681a      	ldr	r2, [r3, #0]
 8005390:	4b7f      	ldr	r3, [pc, #508]	@ (8005590 <I2C_ITSlaveCplt+0x298>)
 8005392:	400b      	ands	r3, r1
 8005394:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8005396:	6878      	ldr	r0, [r7, #4]
 8005398:	f000 fb6d 	bl	8005a76 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800539c:	693b      	ldr	r3, [r7, #16]
 800539e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d07a      	beq.n	800549c <I2C_ITSlaveCplt+0x1a4>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	681a      	ldr	r2, [r3, #0]
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80053b4:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	f000 8111 	beq.w	80055e2 <I2C_ITSlaveCplt+0x2ea>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4a73      	ldr	r2, [pc, #460]	@ (8005594 <I2C_ITSlaveCplt+0x29c>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d059      	beq.n	8005480 <I2C_ITSlaveCplt+0x188>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a71      	ldr	r2, [pc, #452]	@ (8005598 <I2C_ITSlaveCplt+0x2a0>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d053      	beq.n	8005480 <I2C_ITSlaveCplt+0x188>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4a6f      	ldr	r2, [pc, #444]	@ (800559c <I2C_ITSlaveCplt+0x2a4>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d04d      	beq.n	8005480 <I2C_ITSlaveCplt+0x188>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a6d      	ldr	r2, [pc, #436]	@ (80055a0 <I2C_ITSlaveCplt+0x2a8>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d047      	beq.n	8005480 <I2C_ITSlaveCplt+0x188>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4a6b      	ldr	r2, [pc, #428]	@ (80055a4 <I2C_ITSlaveCplt+0x2ac>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d041      	beq.n	8005480 <I2C_ITSlaveCplt+0x188>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4a69      	ldr	r2, [pc, #420]	@ (80055a8 <I2C_ITSlaveCplt+0x2b0>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d03b      	beq.n	8005480 <I2C_ITSlaveCplt+0x188>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a67      	ldr	r2, [pc, #412]	@ (80055ac <I2C_ITSlaveCplt+0x2b4>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d035      	beq.n	8005480 <I2C_ITSlaveCplt+0x188>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a65      	ldr	r2, [pc, #404]	@ (80055b0 <I2C_ITSlaveCplt+0x2b8>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d02f      	beq.n	8005480 <I2C_ITSlaveCplt+0x188>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4a63      	ldr	r2, [pc, #396]	@ (80055b4 <I2C_ITSlaveCplt+0x2bc>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d029      	beq.n	8005480 <I2C_ITSlaveCplt+0x188>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4a61      	ldr	r2, [pc, #388]	@ (80055b8 <I2C_ITSlaveCplt+0x2c0>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d023      	beq.n	8005480 <I2C_ITSlaveCplt+0x188>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a5f      	ldr	r2, [pc, #380]	@ (80055bc <I2C_ITSlaveCplt+0x2c4>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d01d      	beq.n	8005480 <I2C_ITSlaveCplt+0x188>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a5d      	ldr	r2, [pc, #372]	@ (80055c0 <I2C_ITSlaveCplt+0x2c8>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d017      	beq.n	8005480 <I2C_ITSlaveCplt+0x188>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4a5b      	ldr	r2, [pc, #364]	@ (80055c4 <I2C_ITSlaveCplt+0x2cc>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d011      	beq.n	8005480 <I2C_ITSlaveCplt+0x188>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4a59      	ldr	r2, [pc, #356]	@ (80055c8 <I2C_ITSlaveCplt+0x2d0>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d00b      	beq.n	8005480 <I2C_ITSlaveCplt+0x188>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a57      	ldr	r2, [pc, #348]	@ (80055cc <I2C_ITSlaveCplt+0x2d4>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d005      	beq.n	8005480 <I2C_ITSlaveCplt+0x188>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a55      	ldr	r2, [pc, #340]	@ (80055d0 <I2C_ITSlaveCplt+0x2d8>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d105      	bne.n	800548c <I2C_ITSlaveCplt+0x194>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	b29b      	uxth	r3, r3
 800548a:	e004      	b.n	8005496 <I2C_ITSlaveCplt+0x19e>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	b29b      	uxth	r3, r3
 8005496:	687a      	ldr	r2, [r7, #4]
 8005498:	8553      	strh	r3, [r2, #42]	@ 0x2a
 800549a:	e0a2      	b.n	80055e2 <I2C_ITSlaveCplt+0x2ea>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800549c:	693b      	ldr	r3, [r7, #16]
 800549e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	f000 809d 	beq.w	80055e2 <I2C_ITSlaveCplt+0x2ea>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	681a      	ldr	r2, [r3, #0]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80054b6:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054bc:	2b00      	cmp	r3, #0
 80054be:	f000 8090 	beq.w	80055e2 <I2C_ITSlaveCplt+0x2ea>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a32      	ldr	r2, [pc, #200]	@ (8005594 <I2C_ITSlaveCplt+0x29c>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d059      	beq.n	8005582 <I2C_ITSlaveCplt+0x28a>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a30      	ldr	r2, [pc, #192]	@ (8005598 <I2C_ITSlaveCplt+0x2a0>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d053      	beq.n	8005582 <I2C_ITSlaveCplt+0x28a>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a2e      	ldr	r2, [pc, #184]	@ (800559c <I2C_ITSlaveCplt+0x2a4>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d04d      	beq.n	8005582 <I2C_ITSlaveCplt+0x28a>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a2c      	ldr	r2, [pc, #176]	@ (80055a0 <I2C_ITSlaveCplt+0x2a8>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d047      	beq.n	8005582 <I2C_ITSlaveCplt+0x28a>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a2a      	ldr	r2, [pc, #168]	@ (80055a4 <I2C_ITSlaveCplt+0x2ac>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d041      	beq.n	8005582 <I2C_ITSlaveCplt+0x28a>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a28      	ldr	r2, [pc, #160]	@ (80055a8 <I2C_ITSlaveCplt+0x2b0>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d03b      	beq.n	8005582 <I2C_ITSlaveCplt+0x28a>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a26      	ldr	r2, [pc, #152]	@ (80055ac <I2C_ITSlaveCplt+0x2b4>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d035      	beq.n	8005582 <I2C_ITSlaveCplt+0x28a>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a24      	ldr	r2, [pc, #144]	@ (80055b0 <I2C_ITSlaveCplt+0x2b8>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d02f      	beq.n	8005582 <I2C_ITSlaveCplt+0x28a>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a22      	ldr	r2, [pc, #136]	@ (80055b4 <I2C_ITSlaveCplt+0x2bc>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d029      	beq.n	8005582 <I2C_ITSlaveCplt+0x28a>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a20      	ldr	r2, [pc, #128]	@ (80055b8 <I2C_ITSlaveCplt+0x2c0>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d023      	beq.n	8005582 <I2C_ITSlaveCplt+0x28a>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a1e      	ldr	r2, [pc, #120]	@ (80055bc <I2C_ITSlaveCplt+0x2c4>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d01d      	beq.n	8005582 <I2C_ITSlaveCplt+0x28a>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a1c      	ldr	r2, [pc, #112]	@ (80055c0 <I2C_ITSlaveCplt+0x2c8>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d017      	beq.n	8005582 <I2C_ITSlaveCplt+0x28a>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a1a      	ldr	r2, [pc, #104]	@ (80055c4 <I2C_ITSlaveCplt+0x2cc>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d011      	beq.n	8005582 <I2C_ITSlaveCplt+0x28a>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4a18      	ldr	r2, [pc, #96]	@ (80055c8 <I2C_ITSlaveCplt+0x2d0>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d00b      	beq.n	8005582 <I2C_ITSlaveCplt+0x28a>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a16      	ldr	r2, [pc, #88]	@ (80055cc <I2C_ITSlaveCplt+0x2d4>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d005      	beq.n	8005582 <I2C_ITSlaveCplt+0x28a>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a14      	ldr	r2, [pc, #80]	@ (80055d0 <I2C_ITSlaveCplt+0x2d8>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d128      	bne.n	80055d4 <I2C_ITSlaveCplt+0x2dc>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	685b      	ldr	r3, [r3, #4]
 800558a:	b29b      	uxth	r3, r3
 800558c:	e027      	b.n	80055de <I2C_ITSlaveCplt+0x2e6>
 800558e:	bf00      	nop
 8005590:	fe00e800 	.word	0xfe00e800
 8005594:	40020010 	.word	0x40020010
 8005598:	40020028 	.word	0x40020028
 800559c:	40020040 	.word	0x40020040
 80055a0:	40020058 	.word	0x40020058
 80055a4:	40020070 	.word	0x40020070
 80055a8:	40020088 	.word	0x40020088
 80055ac:	400200a0 	.word	0x400200a0
 80055b0:	400200b8 	.word	0x400200b8
 80055b4:	40020410 	.word	0x40020410
 80055b8:	40020428 	.word	0x40020428
 80055bc:	40020440 	.word	0x40020440
 80055c0:	40020458 	.word	0x40020458
 80055c4:	40020470 	.word	0x40020470
 80055c8:	40020488 	.word	0x40020488
 80055cc:	400204a0 	.word	0x400204a0
 80055d0:	400204b8 	.word	0x400204b8
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	b29b      	uxth	r3, r3
 80055de:	687a      	ldr	r2, [r7, #4]
 80055e0:	8553      	strh	r3, [r2, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80055e2:	697b      	ldr	r3, [r7, #20]
 80055e4:	f003 0304 	and.w	r3, r3, #4
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d020      	beq.n	800562e <I2C_ITSlaveCplt+0x336>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80055ec:	697b      	ldr	r3, [r7, #20]
 80055ee:	f023 0304 	bic.w	r3, r3, #4
 80055f2:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055fe:	b2d2      	uxtb	r2, r2
 8005600:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005606:	1c5a      	adds	r2, r3, #1
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005610:	2b00      	cmp	r3, #0
 8005612:	d00c      	beq.n	800562e <I2C_ITSlaveCplt+0x336>
    {
      hi2c->XferSize--;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005618:	3b01      	subs	r3, #1
 800561a:	b29a      	uxth	r2, r3
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005624:	b29b      	uxth	r3, r3
 8005626:	3b01      	subs	r3, #1
 8005628:	b29a      	uxth	r2, r3
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005632:	b29b      	uxth	r3, r3
 8005634:	2b00      	cmp	r3, #0
 8005636:	d005      	beq.n	8005644 <I2C_ITSlaveCplt+0x34c>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800563c:	f043 0204 	orr.w	r2, r3, #4
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005644:	697b      	ldr	r3, [r7, #20]
 8005646:	f003 0310 	and.w	r3, r3, #16
 800564a:	2b00      	cmp	r3, #0
 800564c:	d049      	beq.n	80056e2 <I2C_ITSlaveCplt+0x3ea>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 800564e:	693b      	ldr	r3, [r7, #16]
 8005650:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005654:	2b00      	cmp	r3, #0
 8005656:	d044      	beq.n	80056e2 <I2C_ITSlaveCplt+0x3ea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800565c:	b29b      	uxth	r3, r3
 800565e:	2b00      	cmp	r3, #0
 8005660:	d128      	bne.n	80056b4 <I2C_ITSlaveCplt+0x3bc>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005668:	b2db      	uxtb	r3, r3
 800566a:	2b28      	cmp	r3, #40	@ 0x28
 800566c:	d108      	bne.n	8005680 <I2C_ITSlaveCplt+0x388>
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005674:	d104      	bne.n	8005680 <I2C_ITSlaveCplt+0x388>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8005676:	6979      	ldr	r1, [r7, #20]
 8005678:	6878      	ldr	r0, [r7, #4]
 800567a:	f000 f891 	bl	80057a0 <I2C_ITListenCplt>
 800567e:	e030      	b.n	80056e2 <I2C_ITSlaveCplt+0x3ea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005686:	b2db      	uxtb	r3, r3
 8005688:	2b29      	cmp	r3, #41	@ 0x29
 800568a:	d10e      	bne.n	80056aa <I2C_ITSlaveCplt+0x3b2>
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005692:	d00a      	beq.n	80056aa <I2C_ITSlaveCplt+0x3b2>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	2210      	movs	r2, #16
 800569a:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800569c:	6878      	ldr	r0, [r7, #4]
 800569e:	f000 f9ea 	bl	8005a76 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	f7ff fd03 	bl	80050ae <I2C_ITSlaveSeqCplt>
 80056a8:	e01b      	b.n	80056e2 <I2C_ITSlaveCplt+0x3ea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	2210      	movs	r2, #16
 80056b0:	61da      	str	r2, [r3, #28]
 80056b2:	e016      	b.n	80056e2 <I2C_ITSlaveCplt+0x3ea>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	2210      	movs	r2, #16
 80056ba:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056c0:	f043 0204 	orr.w	r2, r3, #4
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d003      	beq.n	80056d6 <I2C_ITSlaveCplt+0x3de>
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80056d4:	d105      	bne.n	80056e2 <I2C_ITSlaveCplt+0x3ea>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056da:	4619      	mov	r1, r3
 80056dc:	6878      	ldr	r0, [r7, #4]
 80056de:	f000 f8b3 	bl	8005848 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2200      	movs	r2, #0
 80056e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2200      	movs	r2, #0
 80056ee:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d010      	beq.n	800571a <I2C_ITSlaveCplt+0x422>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056fc:	4619      	mov	r1, r3
 80056fe:	6878      	ldr	r0, [r7, #4]
 8005700:	f000 f8a2 	bl	8005848 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800570a:	b2db      	uxtb	r3, r3
 800570c:	2b28      	cmp	r3, #40	@ 0x28
 800570e:	d141      	bne.n	8005794 <I2C_ITSlaveCplt+0x49c>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8005710:	6979      	ldr	r1, [r7, #20]
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	f000 f844 	bl	80057a0 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005718:	e03c      	b.n	8005794 <I2C_ITSlaveCplt+0x49c>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800571e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005722:	d014      	beq.n	800574e <I2C_ITSlaveCplt+0x456>
    I2C_ITSlaveSeqCplt(hi2c);
 8005724:	6878      	ldr	r0, [r7, #4]
 8005726:	f7ff fcc2 	bl	80050ae <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	4a1b      	ldr	r2, [pc, #108]	@ (800579c <I2C_ITSlaveCplt+0x4a4>)
 800572e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2220      	movs	r2, #32
 8005734:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2200      	movs	r2, #0
 800573c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2200      	movs	r2, #0
 8005742:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8005746:	6878      	ldr	r0, [r7, #4]
 8005748:	f7fe fda5 	bl	8004296 <HAL_I2C_ListenCpltCallback>
}
 800574c:	e022      	b.n	8005794 <I2C_ITSlaveCplt+0x49c>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005754:	b2db      	uxtb	r3, r3
 8005756:	2b22      	cmp	r3, #34	@ 0x22
 8005758:	d10e      	bne.n	8005778 <I2C_ITSlaveCplt+0x480>
    hi2c->State = HAL_I2C_STATE_READY;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2220      	movs	r2, #32
 800575e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2200      	movs	r2, #0
 8005766:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2200      	movs	r2, #0
 800576c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005770:	6878      	ldr	r0, [r7, #4]
 8005772:	f7fe fd78 	bl	8004266 <HAL_I2C_SlaveRxCpltCallback>
}
 8005776:	e00d      	b.n	8005794 <I2C_ITSlaveCplt+0x49c>
    hi2c->State = HAL_I2C_STATE_READY;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2220      	movs	r2, #32
 800577c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2200      	movs	r2, #0
 8005784:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2200      	movs	r2, #0
 800578a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	f7fe fd5f 	bl	8004252 <HAL_I2C_SlaveTxCpltCallback>
}
 8005794:	bf00      	nop
 8005796:	3718      	adds	r7, #24
 8005798:	46bd      	mov	sp, r7
 800579a:	bd80      	pop	{r7, pc}
 800579c:	ffff0000 	.word	0xffff0000

080057a0 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b082      	sub	sp, #8
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
 80057a8:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	4a25      	ldr	r2, [pc, #148]	@ (8005844 <I2C_ITListenCplt+0xa4>)
 80057ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2200      	movs	r2, #0
 80057b4:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2220      	movs	r2, #32
 80057ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2200      	movs	r2, #0
 80057c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2200      	movs	r2, #0
 80057ca:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	f003 0304 	and.w	r3, r3, #4
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d022      	beq.n	800581c <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057e0:	b2d2      	uxtb	r2, r2
 80057e2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057e8:	1c5a      	adds	r2, r3, #1
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d012      	beq.n	800581c <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057fa:	3b01      	subs	r3, #1
 80057fc:	b29a      	uxth	r2, r3
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005806:	b29b      	uxth	r3, r3
 8005808:	3b01      	subs	r3, #1
 800580a:	b29a      	uxth	r2, r3
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005814:	f043 0204 	orr.w	r2, r3, #4
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800581c:	f248 0103 	movw	r1, #32771	@ 0x8003
 8005820:	6878      	ldr	r0, [r7, #4]
 8005822:	f000 fba5 	bl	8005f70 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	2210      	movs	r2, #16
 800582c:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2200      	movs	r2, #0
 8005832:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8005836:	6878      	ldr	r0, [r7, #4]
 8005838:	f7fe fd2d 	bl	8004296 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800583c:	bf00      	nop
 800583e:	3708      	adds	r7, #8
 8005840:	46bd      	mov	sp, r7
 8005842:	bd80      	pop	{r7, pc}
 8005844:	ffff0000 	.word	0xffff0000

08005848 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b084      	sub	sp, #16
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
 8005850:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005858:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2200      	movs	r2, #0
 800585e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	4a6d      	ldr	r2, [pc, #436]	@ (8005a1c <I2C_ITError+0x1d4>)
 8005866:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2200      	movs	r2, #0
 800586c:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	431a      	orrs	r2, r3
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800587a:	7bfb      	ldrb	r3, [r7, #15]
 800587c:	2b28      	cmp	r3, #40	@ 0x28
 800587e:	d005      	beq.n	800588c <I2C_ITError+0x44>
 8005880:	7bfb      	ldrb	r3, [r7, #15]
 8005882:	2b29      	cmp	r3, #41	@ 0x29
 8005884:	d002      	beq.n	800588c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8005886:	7bfb      	ldrb	r3, [r7, #15]
 8005888:	2b2a      	cmp	r3, #42	@ 0x2a
 800588a:	d10b      	bne.n	80058a4 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800588c:	2103      	movs	r1, #3
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f000 fb6e 	bl	8005f70 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2228      	movs	r2, #40	@ 0x28
 8005898:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	4a60      	ldr	r2, [pc, #384]	@ (8005a20 <I2C_ITError+0x1d8>)
 80058a0:	635a      	str	r2, [r3, #52]	@ 0x34
 80058a2:	e030      	b.n	8005906 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80058a4:	f248 0103 	movw	r1, #32771	@ 0x8003
 80058a8:	6878      	ldr	r0, [r7, #4]
 80058aa:	f000 fb61 	bl	8005f70 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	f000 f8e1 	bl	8005a76 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80058ba:	b2db      	uxtb	r3, r3
 80058bc:	2b60      	cmp	r3, #96	@ 0x60
 80058be:	d01f      	beq.n	8005900 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2220      	movs	r2, #32
 80058c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	699b      	ldr	r3, [r3, #24]
 80058ce:	f003 0320 	and.w	r3, r3, #32
 80058d2:	2b20      	cmp	r3, #32
 80058d4:	d114      	bne.n	8005900 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	699b      	ldr	r3, [r3, #24]
 80058dc:	f003 0310 	and.w	r3, r3, #16
 80058e0:	2b10      	cmp	r3, #16
 80058e2:	d109      	bne.n	80058f8 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	2210      	movs	r2, #16
 80058ea:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058f0:	f043 0204 	orr.w	r2, r3, #4
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	2220      	movs	r2, #32
 80058fe:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2200      	movs	r2, #0
 8005904:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800590a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005910:	2b00      	cmp	r3, #0
 8005912:	d039      	beq.n	8005988 <I2C_ITError+0x140>
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	2b11      	cmp	r3, #17
 8005918:	d002      	beq.n	8005920 <I2C_ITError+0xd8>
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	2b21      	cmp	r3, #33	@ 0x21
 800591e:	d133      	bne.n	8005988 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800592a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800592e:	d107      	bne.n	8005940 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	681a      	ldr	r2, [r3, #0]
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800593e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005944:	4618      	mov	r0, r3
 8005946:	f7fd fc3b 	bl	80031c0 <HAL_DMA_GetState>
 800594a:	4603      	mov	r3, r0
 800594c:	2b01      	cmp	r3, #1
 800594e:	d017      	beq.n	8005980 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005954:	4a33      	ldr	r2, [pc, #204]	@ (8005a24 <I2C_ITError+0x1dc>)
 8005956:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2200      	movs	r2, #0
 800595c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005964:	4618      	mov	r0, r3
 8005966:	f7fc fa83 	bl	8001e70 <HAL_DMA_Abort_IT>
 800596a:	4603      	mov	r3, r0
 800596c:	2b00      	cmp	r3, #0
 800596e:	d04d      	beq.n	8005a0c <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005974:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005976:	687a      	ldr	r2, [r7, #4]
 8005978:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800597a:	4610      	mov	r0, r2
 800597c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800597e:	e045      	b.n	8005a0c <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8005980:	6878      	ldr	r0, [r7, #4]
 8005982:	f000 f851 	bl	8005a28 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005986:	e041      	b.n	8005a0c <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800598c:	2b00      	cmp	r3, #0
 800598e:	d039      	beq.n	8005a04 <I2C_ITError+0x1bc>
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	2b12      	cmp	r3, #18
 8005994:	d002      	beq.n	800599c <I2C_ITError+0x154>
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	2b22      	cmp	r3, #34	@ 0x22
 800599a:	d133      	bne.n	8005a04 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80059a6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80059aa:	d107      	bne.n	80059bc <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	681a      	ldr	r2, [r3, #0]
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80059ba:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059c0:	4618      	mov	r0, r3
 80059c2:	f7fd fbfd 	bl	80031c0 <HAL_DMA_GetState>
 80059c6:	4603      	mov	r3, r0
 80059c8:	2b01      	cmp	r3, #1
 80059ca:	d017      	beq.n	80059fc <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059d0:	4a14      	ldr	r2, [pc, #80]	@ (8005a24 <I2C_ITError+0x1dc>)
 80059d2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2200      	movs	r2, #0
 80059d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059e0:	4618      	mov	r0, r3
 80059e2:	f7fc fa45 	bl	8001e70 <HAL_DMA_Abort_IT>
 80059e6:	4603      	mov	r3, r0
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d011      	beq.n	8005a10 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059f2:	687a      	ldr	r2, [r7, #4]
 80059f4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80059f6:	4610      	mov	r0, r2
 80059f8:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80059fa:	e009      	b.n	8005a10 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80059fc:	6878      	ldr	r0, [r7, #4]
 80059fe:	f000 f813 	bl	8005a28 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005a02:	e005      	b.n	8005a10 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8005a04:	6878      	ldr	r0, [r7, #4]
 8005a06:	f000 f80f 	bl	8005a28 <I2C_TreatErrorCallback>
  }
}
 8005a0a:	e002      	b.n	8005a12 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005a0c:	bf00      	nop
 8005a0e:	e000      	b.n	8005a12 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005a10:	bf00      	nop
}
 8005a12:	bf00      	nop
 8005a14:	3710      	adds	r7, #16
 8005a16:	46bd      	mov	sp, r7
 8005a18:	bd80      	pop	{r7, pc}
 8005a1a:	bf00      	nop
 8005a1c:	ffff0000 	.word	0xffff0000
 8005a20:	08004565 	.word	0x08004565
 8005a24:	08005dc9 	.word	0x08005dc9

08005a28 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b082      	sub	sp, #8
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a36:	b2db      	uxtb	r3, r3
 8005a38:	2b60      	cmp	r3, #96	@ 0x60
 8005a3a:	d10e      	bne.n	8005a5a <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2220      	movs	r2, #32
 8005a40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2200      	movs	r2, #0
 8005a48:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f7fe fc47 	bl	80042e6 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005a58:	e009      	b.n	8005a6e <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2200      	movs	r2, #0
 8005a64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8005a68:	6878      	ldr	r0, [r7, #4]
 8005a6a:	f7fe fc32 	bl	80042d2 <HAL_I2C_ErrorCallback>
}
 8005a6e:	bf00      	nop
 8005a70:	3708      	adds	r7, #8
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bd80      	pop	{r7, pc}

08005a76 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005a76:	b480      	push	{r7}
 8005a78:	b083      	sub	sp, #12
 8005a7a:	af00      	add	r7, sp, #0
 8005a7c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	699b      	ldr	r3, [r3, #24]
 8005a84:	f003 0302 	and.w	r3, r3, #2
 8005a88:	2b02      	cmp	r3, #2
 8005a8a:	d103      	bne.n	8005a94 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	2200      	movs	r2, #0
 8005a92:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	699b      	ldr	r3, [r3, #24]
 8005a9a:	f003 0301 	and.w	r3, r3, #1
 8005a9e:	2b01      	cmp	r3, #1
 8005aa0:	d007      	beq.n	8005ab2 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	699a      	ldr	r2, [r3, #24]
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f042 0201 	orr.w	r2, r2, #1
 8005ab0:	619a      	str	r2, [r3, #24]
  }
}
 8005ab2:	bf00      	nop
 8005ab4:	370c      	adds	r7, #12
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abc:	4770      	bx	lr

08005abe <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005abe:	b580      	push	{r7, lr}
 8005ac0:	b084      	sub	sp, #16
 8005ac2:	af00      	add	r7, sp, #0
 8005ac4:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005aca:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	681a      	ldr	r2, [r3, #0]
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005ada:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ae0:	b29b      	uxth	r3, r3
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d104      	bne.n	8005af0 <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8005ae6:	2120      	movs	r1, #32
 8005ae8:	68f8      	ldr	r0, [r7, #12]
 8005aea:	f000 f9bd 	bl	8005e68 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8005aee:	e02d      	b.n	8005b4c <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005af4:	68fa      	ldr	r2, [r7, #12]
 8005af6:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8005af8:	441a      	add	r2, r3
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b02:	b29b      	uxth	r3, r3
 8005b04:	2bff      	cmp	r3, #255	@ 0xff
 8005b06:	d903      	bls.n	8005b10 <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	22ff      	movs	r2, #255	@ 0xff
 8005b0c:	851a      	strh	r2, [r3, #40]	@ 0x28
 8005b0e:	e004      	b.n	8005b1a <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b14:	b29a      	uxth	r2, r3
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b22:	4619      	mov	r1, r3
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	3328      	adds	r3, #40	@ 0x28
 8005b2a:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8005b30:	f7fb ff34 	bl	800199c <HAL_DMA_Start_IT>
 8005b34:	4603      	mov	r3, r0
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d004      	beq.n	8005b44 <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8005b3a:	2110      	movs	r1, #16
 8005b3c:	68f8      	ldr	r0, [r7, #12]
 8005b3e:	f7ff fe83 	bl	8005848 <I2C_ITError>
}
 8005b42:	e003      	b.n	8005b4c <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8005b44:	2140      	movs	r1, #64	@ 0x40
 8005b46:	68f8      	ldr	r0, [r7, #12]
 8005b48:	f000 f98e 	bl	8005e68 <I2C_Enable_IRQ>
}
 8005b4c:	bf00      	nop
 8005b4e:	3710      	adds	r7, #16
 8005b50:	46bd      	mov	sp, r7
 8005b52:	bd80      	pop	{r7, pc}

08005b54 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b084      	sub	sp, #16
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
  uint32_t treatdmaerror = 0U;
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	60fb      	str	r3, [r7, #12]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b64:	60bb      	str	r3, [r7, #8]

  if (hi2c->hdmatx != NULL)
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d076      	beq.n	8005c5c <I2C_DMAError+0x108>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4a71      	ldr	r2, [pc, #452]	@ (8005d3c <I2C_DMAError+0x1e8>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d059      	beq.n	8005c2e <I2C_DMAError+0xda>
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a6f      	ldr	r2, [pc, #444]	@ (8005d40 <I2C_DMAError+0x1ec>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d053      	beq.n	8005c2e <I2C_DMAError+0xda>
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4a6d      	ldr	r2, [pc, #436]	@ (8005d44 <I2C_DMAError+0x1f0>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d04d      	beq.n	8005c2e <I2C_DMAError+0xda>
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4a6b      	ldr	r2, [pc, #428]	@ (8005d48 <I2C_DMAError+0x1f4>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d047      	beq.n	8005c2e <I2C_DMAError+0xda>
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a69      	ldr	r2, [pc, #420]	@ (8005d4c <I2C_DMAError+0x1f8>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d041      	beq.n	8005c2e <I2C_DMAError+0xda>
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	4a67      	ldr	r2, [pc, #412]	@ (8005d50 <I2C_DMAError+0x1fc>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d03b      	beq.n	8005c2e <I2C_DMAError+0xda>
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4a65      	ldr	r2, [pc, #404]	@ (8005d54 <I2C_DMAError+0x200>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d035      	beq.n	8005c2e <I2C_DMAError+0xda>
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a63      	ldr	r2, [pc, #396]	@ (8005d58 <I2C_DMAError+0x204>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d02f      	beq.n	8005c2e <I2C_DMAError+0xda>
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4a61      	ldr	r2, [pc, #388]	@ (8005d5c <I2C_DMAError+0x208>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d029      	beq.n	8005c2e <I2C_DMAError+0xda>
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4a5f      	ldr	r2, [pc, #380]	@ (8005d60 <I2C_DMAError+0x20c>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d023      	beq.n	8005c2e <I2C_DMAError+0xda>
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	4a5d      	ldr	r2, [pc, #372]	@ (8005d64 <I2C_DMAError+0x210>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d01d      	beq.n	8005c2e <I2C_DMAError+0xda>
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	4a5b      	ldr	r2, [pc, #364]	@ (8005d68 <I2C_DMAError+0x214>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d017      	beq.n	8005c2e <I2C_DMAError+0xda>
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4a59      	ldr	r2, [pc, #356]	@ (8005d6c <I2C_DMAError+0x218>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d011      	beq.n	8005c2e <I2C_DMAError+0xda>
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	4a57      	ldr	r2, [pc, #348]	@ (8005d70 <I2C_DMAError+0x21c>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d00b      	beq.n	8005c2e <I2C_DMAError+0xda>
 8005c16:	68bb      	ldr	r3, [r7, #8]
 8005c18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a55      	ldr	r2, [pc, #340]	@ (8005d74 <I2C_DMAError+0x220>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d005      	beq.n	8005c2e <I2C_DMAError+0xda>
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	4a53      	ldr	r2, [pc, #332]	@ (8005d78 <I2C_DMAError+0x224>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d109      	bne.n	8005c42 <I2C_DMAError+0xee>
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	685b      	ldr	r3, [r3, #4]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	bf0c      	ite	eq
 8005c3a:	2301      	moveq	r3, #1
 8005c3c:	2300      	movne	r3, #0
 8005c3e:	b2db      	uxtb	r3, r3
 8005c40:	e008      	b.n	8005c54 <I2C_DMAError+0x100>
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	685b      	ldr	r3, [r3, #4]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	bf0c      	ite	eq
 8005c4e:	2301      	moveq	r3, #1
 8005c50:	2300      	movne	r3, #0
 8005c52:	b2db      	uxtb	r3, r3
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d001      	beq.n	8005c5c <I2C_DMAError+0x108>
    {
      treatdmaerror = 1U;
 8005c58:	2301      	movs	r3, #1
 8005c5a:	60fb      	str	r3, [r7, #12]
    }
  }

  if (hi2c->hdmarx != NULL)
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	f000 8098 	beq.w	8005d96 <I2C_DMAError+0x242>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4a33      	ldr	r2, [pc, #204]	@ (8005d3c <I2C_DMAError+0x1e8>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d059      	beq.n	8005d26 <I2C_DMAError+0x1d2>
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4a31      	ldr	r2, [pc, #196]	@ (8005d40 <I2C_DMAError+0x1ec>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d053      	beq.n	8005d26 <I2C_DMAError+0x1d2>
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4a2f      	ldr	r2, [pc, #188]	@ (8005d44 <I2C_DMAError+0x1f0>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d04d      	beq.n	8005d26 <I2C_DMAError+0x1d2>
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4a2d      	ldr	r2, [pc, #180]	@ (8005d48 <I2C_DMAError+0x1f4>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d047      	beq.n	8005d26 <I2C_DMAError+0x1d2>
 8005c96:	68bb      	ldr	r3, [r7, #8]
 8005c98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4a2b      	ldr	r2, [pc, #172]	@ (8005d4c <I2C_DMAError+0x1f8>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d041      	beq.n	8005d26 <I2C_DMAError+0x1d2>
 8005ca2:	68bb      	ldr	r3, [r7, #8]
 8005ca4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4a29      	ldr	r2, [pc, #164]	@ (8005d50 <I2C_DMAError+0x1fc>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d03b      	beq.n	8005d26 <I2C_DMAError+0x1d2>
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4a27      	ldr	r2, [pc, #156]	@ (8005d54 <I2C_DMAError+0x200>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d035      	beq.n	8005d26 <I2C_DMAError+0x1d2>
 8005cba:	68bb      	ldr	r3, [r7, #8]
 8005cbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a25      	ldr	r2, [pc, #148]	@ (8005d58 <I2C_DMAError+0x204>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d02f      	beq.n	8005d26 <I2C_DMAError+0x1d2>
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	4a23      	ldr	r2, [pc, #140]	@ (8005d5c <I2C_DMAError+0x208>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d029      	beq.n	8005d26 <I2C_DMAError+0x1d2>
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4a21      	ldr	r2, [pc, #132]	@ (8005d60 <I2C_DMAError+0x20c>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d023      	beq.n	8005d26 <I2C_DMAError+0x1d2>
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4a1f      	ldr	r2, [pc, #124]	@ (8005d64 <I2C_DMAError+0x210>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d01d      	beq.n	8005d26 <I2C_DMAError+0x1d2>
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4a1d      	ldr	r2, [pc, #116]	@ (8005d68 <I2C_DMAError+0x214>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d017      	beq.n	8005d26 <I2C_DMAError+0x1d2>
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4a1b      	ldr	r2, [pc, #108]	@ (8005d6c <I2C_DMAError+0x218>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d011      	beq.n	8005d26 <I2C_DMAError+0x1d2>
 8005d02:	68bb      	ldr	r3, [r7, #8]
 8005d04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4a19      	ldr	r2, [pc, #100]	@ (8005d70 <I2C_DMAError+0x21c>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d00b      	beq.n	8005d26 <I2C_DMAError+0x1d2>
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4a17      	ldr	r2, [pc, #92]	@ (8005d74 <I2C_DMAError+0x220>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d005      	beq.n	8005d26 <I2C_DMAError+0x1d2>
 8005d1a:	68bb      	ldr	r3, [r7, #8]
 8005d1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4a15      	ldr	r2, [pc, #84]	@ (8005d78 <I2C_DMAError+0x224>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d12a      	bne.n	8005d7c <I2C_DMAError+0x228>
 8005d26:	68bb      	ldr	r3, [r7, #8]
 8005d28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	685b      	ldr	r3, [r3, #4]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	bf0c      	ite	eq
 8005d32:	2301      	moveq	r3, #1
 8005d34:	2300      	movne	r3, #0
 8005d36:	b2db      	uxtb	r3, r3
 8005d38:	e029      	b.n	8005d8e <I2C_DMAError+0x23a>
 8005d3a:	bf00      	nop
 8005d3c:	40020010 	.word	0x40020010
 8005d40:	40020028 	.word	0x40020028
 8005d44:	40020040 	.word	0x40020040
 8005d48:	40020058 	.word	0x40020058
 8005d4c:	40020070 	.word	0x40020070
 8005d50:	40020088 	.word	0x40020088
 8005d54:	400200a0 	.word	0x400200a0
 8005d58:	400200b8 	.word	0x400200b8
 8005d5c:	40020410 	.word	0x40020410
 8005d60:	40020428 	.word	0x40020428
 8005d64:	40020440 	.word	0x40020440
 8005d68:	40020458 	.word	0x40020458
 8005d6c:	40020470 	.word	0x40020470
 8005d70:	40020488 	.word	0x40020488
 8005d74:	400204a0 	.word	0x400204a0
 8005d78:	400204b8 	.word	0x400204b8
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	685b      	ldr	r3, [r3, #4]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	bf0c      	ite	eq
 8005d88:	2301      	moveq	r3, #1
 8005d8a:	2300      	movne	r3, #0
 8005d8c:	b2db      	uxtb	r3, r3
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d001      	beq.n	8005d96 <I2C_DMAError+0x242>
    {
      treatdmaerror = 1U;
 8005d92:	2301      	movs	r3, #1
 8005d94:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Check if a FIFO error is detected, if true normal use case, so no specific action to perform */
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 8005d96:	6878      	ldr	r0, [r7, #4]
 8005d98:	f7fd fa20 	bl	80031dc <HAL_DMA_GetError>
 8005d9c:	4603      	mov	r3, r0
 8005d9e:	2b02      	cmp	r3, #2
 8005da0:	d00e      	beq.n	8005dc0 <I2C_DMAError+0x26c>
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d00b      	beq.n	8005dc0 <I2C_DMAError+0x26c>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	685a      	ldr	r2, [r3, #4]
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005db6:	605a      	str	r2, [r3, #4]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8005db8:	2110      	movs	r1, #16
 8005dba:	68b8      	ldr	r0, [r7, #8]
 8005dbc:	f7ff fd44 	bl	8005848 <I2C_ITError>
  }
}
 8005dc0:	bf00      	nop
 8005dc2:	3710      	adds	r7, #16
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bd80      	pop	{r7, pc}

08005dc8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b084      	sub	sp, #16
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dd4:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d003      	beq.n	8005de6 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005de2:	2200      	movs	r2, #0
 8005de4:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d003      	beq.n	8005df6 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005df2:	2200      	movs	r2, #0
 8005df4:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8005df6:	68f8      	ldr	r0, [r7, #12]
 8005df8:	f7ff fe16 	bl	8005a28 <I2C_TreatErrorCallback>
}
 8005dfc:	bf00      	nop
 8005dfe:	3710      	adds	r7, #16
 8005e00:	46bd      	mov	sp, r7
 8005e02:	bd80      	pop	{r7, pc}

08005e04 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005e04:	b480      	push	{r7}
 8005e06:	b087      	sub	sp, #28
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	60f8      	str	r0, [r7, #12]
 8005e0c:	607b      	str	r3, [r7, #4]
 8005e0e:	460b      	mov	r3, r1
 8005e10:	817b      	strh	r3, [r7, #10]
 8005e12:	4613      	mov	r3, r2
 8005e14:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005e16:	897b      	ldrh	r3, [r7, #10]
 8005e18:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005e1c:	7a7b      	ldrb	r3, [r7, #9]
 8005e1e:	041b      	lsls	r3, r3, #16
 8005e20:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005e24:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005e2a:	6a3b      	ldr	r3, [r7, #32]
 8005e2c:	4313      	orrs	r3, r2
 8005e2e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005e32:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	685a      	ldr	r2, [r3, #4]
 8005e3a:	6a3b      	ldr	r3, [r7, #32]
 8005e3c:	0d5b      	lsrs	r3, r3, #21
 8005e3e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8005e42:	4b08      	ldr	r3, [pc, #32]	@ (8005e64 <I2C_TransferConfig+0x60>)
 8005e44:	430b      	orrs	r3, r1
 8005e46:	43db      	mvns	r3, r3
 8005e48:	ea02 0103 	and.w	r1, r2, r3
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	697a      	ldr	r2, [r7, #20]
 8005e52:	430a      	orrs	r2, r1
 8005e54:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005e56:	bf00      	nop
 8005e58:	371c      	adds	r7, #28
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e60:	4770      	bx	lr
 8005e62:	bf00      	nop
 8005e64:	03ff63ff 	.word	0x03ff63ff

08005e68 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b085      	sub	sp, #20
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
 8005e70:	460b      	mov	r3, r1
 8005e72:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8005e74:	2300      	movs	r3, #0
 8005e76:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e7c:	4a39      	ldr	r2, [pc, #228]	@ (8005f64 <I2C_Enable_IRQ+0xfc>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d032      	beq.n	8005ee8 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8005e86:	4a38      	ldr	r2, [pc, #224]	@ (8005f68 <I2C_Enable_IRQ+0x100>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d02d      	beq.n	8005ee8 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8005e90:	4a36      	ldr	r2, [pc, #216]	@ (8005f6c <I2C_Enable_IRQ+0x104>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d028      	beq.n	8005ee8 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005e96:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	da03      	bge.n	8005ea6 <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8005ea4:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005ea6:	887b      	ldrh	r3, [r7, #2]
 8005ea8:	f003 0301 	and.w	r3, r3, #1
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d003      	beq.n	8005eb8 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8005eb6:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005eb8:	887b      	ldrh	r3, [r7, #2]
 8005eba:	f003 0302 	and.w	r3, r3, #2
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d003      	beq.n	8005eca <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8005ec8:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005eca:	887b      	ldrh	r3, [r7, #2]
 8005ecc:	2b10      	cmp	r3, #16
 8005ece:	d103      	bne.n	8005ed8 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8005ed6:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005ed8:	887b      	ldrh	r3, [r7, #2]
 8005eda:	2b20      	cmp	r3, #32
 8005edc:	d133      	bne.n	8005f46 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	f043 0320 	orr.w	r3, r3, #32
 8005ee4:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005ee6:	e02e      	b.n	8005f46 <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005ee8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	da03      	bge.n	8005ef8 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8005ef6:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005ef8:	887b      	ldrh	r3, [r7, #2]
 8005efa:	f003 0301 	and.w	r3, r3, #1
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d003      	beq.n	8005f0a <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8005f08:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005f0a:	887b      	ldrh	r3, [r7, #2]
 8005f0c:	f003 0302 	and.w	r3, r3, #2
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d003      	beq.n	8005f1c <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8005f1a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005f1c:	887b      	ldrh	r3, [r7, #2]
 8005f1e:	2b10      	cmp	r3, #16
 8005f20:	d103      	bne.n	8005f2a <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8005f28:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005f2a:	887b      	ldrh	r3, [r7, #2]
 8005f2c:	2b20      	cmp	r3, #32
 8005f2e:	d103      	bne.n	8005f38 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8005f36:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8005f38:	887b      	ldrh	r3, [r7, #2]
 8005f3a:	2b40      	cmp	r3, #64	@ 0x40
 8005f3c:	d103      	bne.n	8005f46 <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005f44:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	6819      	ldr	r1, [r3, #0]
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	68fa      	ldr	r2, [r7, #12]
 8005f52:	430a      	orrs	r2, r1
 8005f54:	601a      	str	r2, [r3, #0]
}
 8005f56:	bf00      	nop
 8005f58:	3714      	adds	r7, #20
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f60:	4770      	bx	lr
 8005f62:	bf00      	nop
 8005f64:	08004757 	.word	0x08004757
 8005f68:	08004b79 	.word	0x08004b79
 8005f6c:	0800492d 	.word	0x0800492d

08005f70 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8005f70:	b480      	push	{r7}
 8005f72:	b085      	sub	sp, #20
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
 8005f78:	460b      	mov	r3, r1
 8005f7a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005f80:	887b      	ldrh	r3, [r7, #2]
 8005f82:	f003 0301 	and.w	r3, r3, #1
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d00f      	beq.n	8005faa <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8005f90:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005f98:	b2db      	uxtb	r3, r3
 8005f9a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005f9e:	2b28      	cmp	r3, #40	@ 0x28
 8005fa0:	d003      	beq.n	8005faa <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8005fa8:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005faa:	887b      	ldrh	r3, [r7, #2]
 8005fac:	f003 0302 	and.w	r3, r3, #2
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d00f      	beq.n	8005fd4 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8005fba:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005fc2:	b2db      	uxtb	r3, r3
 8005fc4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005fc8:	2b28      	cmp	r3, #40	@ 0x28
 8005fca:	d003      	beq.n	8005fd4 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8005fd2:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005fd4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	da03      	bge.n	8005fe4 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8005fe2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005fe4:	887b      	ldrh	r3, [r7, #2]
 8005fe6:	2b10      	cmp	r3, #16
 8005fe8:	d103      	bne.n	8005ff2 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8005ff0:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005ff2:	887b      	ldrh	r3, [r7, #2]
 8005ff4:	2b20      	cmp	r3, #32
 8005ff6:	d103      	bne.n	8006000 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	f043 0320 	orr.w	r3, r3, #32
 8005ffe:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8006000:	887b      	ldrh	r3, [r7, #2]
 8006002:	2b40      	cmp	r3, #64	@ 0x40
 8006004:	d103      	bne.n	800600e <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800600c:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	6819      	ldr	r1, [r3, #0]
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	43da      	mvns	r2, r3
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	400a      	ands	r2, r1
 800601e:	601a      	str	r2, [r3, #0]
}
 8006020:	bf00      	nop
 8006022:	3714      	adds	r7, #20
 8006024:	46bd      	mov	sp, r7
 8006026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602a:	4770      	bx	lr

0800602c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800602c:	b480      	push	{r7}
 800602e:	b083      	sub	sp, #12
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
 8006034:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800603c:	b2db      	uxtb	r3, r3
 800603e:	2b20      	cmp	r3, #32
 8006040:	d138      	bne.n	80060b4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006048:	2b01      	cmp	r3, #1
 800604a:	d101      	bne.n	8006050 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800604c:	2302      	movs	r3, #2
 800604e:	e032      	b.n	80060b6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2201      	movs	r2, #1
 8006054:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2224      	movs	r2, #36	@ 0x24
 800605c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	681a      	ldr	r2, [r3, #0]
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f022 0201 	bic.w	r2, r2, #1
 800606e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	681a      	ldr	r2, [r3, #0]
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800607e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	6819      	ldr	r1, [r3, #0]
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	683a      	ldr	r2, [r7, #0]
 800608c:	430a      	orrs	r2, r1
 800608e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	681a      	ldr	r2, [r3, #0]
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f042 0201 	orr.w	r2, r2, #1
 800609e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2220      	movs	r2, #32
 80060a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2200      	movs	r2, #0
 80060ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80060b0:	2300      	movs	r3, #0
 80060b2:	e000      	b.n	80060b6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80060b4:	2302      	movs	r3, #2
  }
}
 80060b6:	4618      	mov	r0, r3
 80060b8:	370c      	adds	r7, #12
 80060ba:	46bd      	mov	sp, r7
 80060bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c0:	4770      	bx	lr

080060c2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80060c2:	b480      	push	{r7}
 80060c4:	b085      	sub	sp, #20
 80060c6:	af00      	add	r7, sp, #0
 80060c8:	6078      	str	r0, [r7, #4]
 80060ca:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80060d2:	b2db      	uxtb	r3, r3
 80060d4:	2b20      	cmp	r3, #32
 80060d6:	d139      	bne.n	800614c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80060de:	2b01      	cmp	r3, #1
 80060e0:	d101      	bne.n	80060e6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80060e2:	2302      	movs	r3, #2
 80060e4:	e033      	b.n	800614e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2201      	movs	r2, #1
 80060ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2224      	movs	r2, #36	@ 0x24
 80060f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	681a      	ldr	r2, [r3, #0]
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f022 0201 	bic.w	r2, r2, #1
 8006104:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006114:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	021b      	lsls	r3, r3, #8
 800611a:	68fa      	ldr	r2, [r7, #12]
 800611c:	4313      	orrs	r3, r2
 800611e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	68fa      	ldr	r2, [r7, #12]
 8006126:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	681a      	ldr	r2, [r3, #0]
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f042 0201 	orr.w	r2, r2, #1
 8006136:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2220      	movs	r2, #32
 800613c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2200      	movs	r2, #0
 8006144:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006148:	2300      	movs	r3, #0
 800614a:	e000      	b.n	800614e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800614c:	2302      	movs	r3, #2
  }
}
 800614e:	4618      	mov	r0, r3
 8006150:	3714      	adds	r7, #20
 8006152:	46bd      	mov	sp, r7
 8006154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006158:	4770      	bx	lr
	...

0800615c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b084      	sub	sp, #16
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006164:	4b19      	ldr	r3, [pc, #100]	@ (80061cc <HAL_PWREx_ConfigSupply+0x70>)
 8006166:	68db      	ldr	r3, [r3, #12]
 8006168:	f003 0304 	and.w	r3, r3, #4
 800616c:	2b04      	cmp	r3, #4
 800616e:	d00a      	beq.n	8006186 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006170:	4b16      	ldr	r3, [pc, #88]	@ (80061cc <HAL_PWREx_ConfigSupply+0x70>)
 8006172:	68db      	ldr	r3, [r3, #12]
 8006174:	f003 0307 	and.w	r3, r3, #7
 8006178:	687a      	ldr	r2, [r7, #4]
 800617a:	429a      	cmp	r2, r3
 800617c:	d001      	beq.n	8006182 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800617e:	2301      	movs	r3, #1
 8006180:	e01f      	b.n	80061c2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006182:	2300      	movs	r3, #0
 8006184:	e01d      	b.n	80061c2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006186:	4b11      	ldr	r3, [pc, #68]	@ (80061cc <HAL_PWREx_ConfigSupply+0x70>)
 8006188:	68db      	ldr	r3, [r3, #12]
 800618a:	f023 0207 	bic.w	r2, r3, #7
 800618e:	490f      	ldr	r1, [pc, #60]	@ (80061cc <HAL_PWREx_ConfigSupply+0x70>)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	4313      	orrs	r3, r2
 8006194:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006196:	f7fa ff87 	bl	80010a8 <HAL_GetTick>
 800619a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800619c:	e009      	b.n	80061b2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800619e:	f7fa ff83 	bl	80010a8 <HAL_GetTick>
 80061a2:	4602      	mov	r2, r0
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	1ad3      	subs	r3, r2, r3
 80061a8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80061ac:	d901      	bls.n	80061b2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80061ae:	2301      	movs	r3, #1
 80061b0:	e007      	b.n	80061c2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80061b2:	4b06      	ldr	r3, [pc, #24]	@ (80061cc <HAL_PWREx_ConfigSupply+0x70>)
 80061b4:	685b      	ldr	r3, [r3, #4]
 80061b6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80061ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80061be:	d1ee      	bne.n	800619e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80061c0:	2300      	movs	r3, #0
}
 80061c2:	4618      	mov	r0, r3
 80061c4:	3710      	adds	r7, #16
 80061c6:	46bd      	mov	sp, r7
 80061c8:	bd80      	pop	{r7, pc}
 80061ca:	bf00      	nop
 80061cc:	58024800 	.word	0x58024800

080061d0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b08c      	sub	sp, #48	@ 0x30
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d102      	bne.n	80061e4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80061de:	2301      	movs	r3, #1
 80061e0:	f000 bc1f 	b.w	8006a22 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f003 0301 	and.w	r3, r3, #1
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	f000 80b3 	beq.w	8006358 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80061f2:	4b95      	ldr	r3, [pc, #596]	@ (8006448 <HAL_RCC_OscConfig+0x278>)
 80061f4:	691b      	ldr	r3, [r3, #16]
 80061f6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80061fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80061fc:	4b92      	ldr	r3, [pc, #584]	@ (8006448 <HAL_RCC_OscConfig+0x278>)
 80061fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006200:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006202:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006204:	2b10      	cmp	r3, #16
 8006206:	d007      	beq.n	8006218 <HAL_RCC_OscConfig+0x48>
 8006208:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800620a:	2b18      	cmp	r3, #24
 800620c:	d112      	bne.n	8006234 <HAL_RCC_OscConfig+0x64>
 800620e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006210:	f003 0303 	and.w	r3, r3, #3
 8006214:	2b02      	cmp	r3, #2
 8006216:	d10d      	bne.n	8006234 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006218:	4b8b      	ldr	r3, [pc, #556]	@ (8006448 <HAL_RCC_OscConfig+0x278>)
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006220:	2b00      	cmp	r3, #0
 8006222:	f000 8098 	beq.w	8006356 <HAL_RCC_OscConfig+0x186>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	685b      	ldr	r3, [r3, #4]
 800622a:	2b00      	cmp	r3, #0
 800622c:	f040 8093 	bne.w	8006356 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8006230:	2301      	movs	r3, #1
 8006232:	e3f6      	b.n	8006a22 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	685b      	ldr	r3, [r3, #4]
 8006238:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800623c:	d106      	bne.n	800624c <HAL_RCC_OscConfig+0x7c>
 800623e:	4b82      	ldr	r3, [pc, #520]	@ (8006448 <HAL_RCC_OscConfig+0x278>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4a81      	ldr	r2, [pc, #516]	@ (8006448 <HAL_RCC_OscConfig+0x278>)
 8006244:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006248:	6013      	str	r3, [r2, #0]
 800624a:	e058      	b.n	80062fe <HAL_RCC_OscConfig+0x12e>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	685b      	ldr	r3, [r3, #4]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d112      	bne.n	800627a <HAL_RCC_OscConfig+0xaa>
 8006254:	4b7c      	ldr	r3, [pc, #496]	@ (8006448 <HAL_RCC_OscConfig+0x278>)
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	4a7b      	ldr	r2, [pc, #492]	@ (8006448 <HAL_RCC_OscConfig+0x278>)
 800625a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800625e:	6013      	str	r3, [r2, #0]
 8006260:	4b79      	ldr	r3, [pc, #484]	@ (8006448 <HAL_RCC_OscConfig+0x278>)
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4a78      	ldr	r2, [pc, #480]	@ (8006448 <HAL_RCC_OscConfig+0x278>)
 8006266:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800626a:	6013      	str	r3, [r2, #0]
 800626c:	4b76      	ldr	r3, [pc, #472]	@ (8006448 <HAL_RCC_OscConfig+0x278>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a75      	ldr	r2, [pc, #468]	@ (8006448 <HAL_RCC_OscConfig+0x278>)
 8006272:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006276:	6013      	str	r3, [r2, #0]
 8006278:	e041      	b.n	80062fe <HAL_RCC_OscConfig+0x12e>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	685b      	ldr	r3, [r3, #4]
 800627e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006282:	d112      	bne.n	80062aa <HAL_RCC_OscConfig+0xda>
 8006284:	4b70      	ldr	r3, [pc, #448]	@ (8006448 <HAL_RCC_OscConfig+0x278>)
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4a6f      	ldr	r2, [pc, #444]	@ (8006448 <HAL_RCC_OscConfig+0x278>)
 800628a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800628e:	6013      	str	r3, [r2, #0]
 8006290:	4b6d      	ldr	r3, [pc, #436]	@ (8006448 <HAL_RCC_OscConfig+0x278>)
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4a6c      	ldr	r2, [pc, #432]	@ (8006448 <HAL_RCC_OscConfig+0x278>)
 8006296:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800629a:	6013      	str	r3, [r2, #0]
 800629c:	4b6a      	ldr	r3, [pc, #424]	@ (8006448 <HAL_RCC_OscConfig+0x278>)
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4a69      	ldr	r2, [pc, #420]	@ (8006448 <HAL_RCC_OscConfig+0x278>)
 80062a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80062a6:	6013      	str	r3, [r2, #0]
 80062a8:	e029      	b.n	80062fe <HAL_RCC_OscConfig+0x12e>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	685b      	ldr	r3, [r3, #4]
 80062ae:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 80062b2:	d112      	bne.n	80062da <HAL_RCC_OscConfig+0x10a>
 80062b4:	4b64      	ldr	r3, [pc, #400]	@ (8006448 <HAL_RCC_OscConfig+0x278>)
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4a63      	ldr	r2, [pc, #396]	@ (8006448 <HAL_RCC_OscConfig+0x278>)
 80062ba:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80062be:	6013      	str	r3, [r2, #0]
 80062c0:	4b61      	ldr	r3, [pc, #388]	@ (8006448 <HAL_RCC_OscConfig+0x278>)
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	4a60      	ldr	r2, [pc, #384]	@ (8006448 <HAL_RCC_OscConfig+0x278>)
 80062c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80062ca:	6013      	str	r3, [r2, #0]
 80062cc:	4b5e      	ldr	r3, [pc, #376]	@ (8006448 <HAL_RCC_OscConfig+0x278>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4a5d      	ldr	r2, [pc, #372]	@ (8006448 <HAL_RCC_OscConfig+0x278>)
 80062d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80062d6:	6013      	str	r3, [r2, #0]
 80062d8:	e011      	b.n	80062fe <HAL_RCC_OscConfig+0x12e>
 80062da:	4b5b      	ldr	r3, [pc, #364]	@ (8006448 <HAL_RCC_OscConfig+0x278>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4a5a      	ldr	r2, [pc, #360]	@ (8006448 <HAL_RCC_OscConfig+0x278>)
 80062e0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80062e4:	6013      	str	r3, [r2, #0]
 80062e6:	4b58      	ldr	r3, [pc, #352]	@ (8006448 <HAL_RCC_OscConfig+0x278>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	4a57      	ldr	r2, [pc, #348]	@ (8006448 <HAL_RCC_OscConfig+0x278>)
 80062ec:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80062f0:	6013      	str	r3, [r2, #0]
 80062f2:	4b55      	ldr	r3, [pc, #340]	@ (8006448 <HAL_RCC_OscConfig+0x278>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4a54      	ldr	r2, [pc, #336]	@ (8006448 <HAL_RCC_OscConfig+0x278>)
 80062f8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80062fc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	685b      	ldr	r3, [r3, #4]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d013      	beq.n	800632e <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006306:	f7fa fecf 	bl	80010a8 <HAL_GetTick>
 800630a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800630c:	e008      	b.n	8006320 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800630e:	f7fa fecb 	bl	80010a8 <HAL_GetTick>
 8006312:	4602      	mov	r2, r0
 8006314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006316:	1ad3      	subs	r3, r2, r3
 8006318:	2b64      	cmp	r3, #100	@ 0x64
 800631a:	d901      	bls.n	8006320 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 800631c:	2303      	movs	r3, #3
 800631e:	e380      	b.n	8006a22 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006320:	4b49      	ldr	r3, [pc, #292]	@ (8006448 <HAL_RCC_OscConfig+0x278>)
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006328:	2b00      	cmp	r3, #0
 800632a:	d0f0      	beq.n	800630e <HAL_RCC_OscConfig+0x13e>
 800632c:	e014      	b.n	8006358 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800632e:	f7fa febb 	bl	80010a8 <HAL_GetTick>
 8006332:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006334:	e008      	b.n	8006348 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006336:	f7fa feb7 	bl	80010a8 <HAL_GetTick>
 800633a:	4602      	mov	r2, r0
 800633c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800633e:	1ad3      	subs	r3, r2, r3
 8006340:	2b64      	cmp	r3, #100	@ 0x64
 8006342:	d901      	bls.n	8006348 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8006344:	2303      	movs	r3, #3
 8006346:	e36c      	b.n	8006a22 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006348:	4b3f      	ldr	r3, [pc, #252]	@ (8006448 <HAL_RCC_OscConfig+0x278>)
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006350:	2b00      	cmp	r3, #0
 8006352:	d1f0      	bne.n	8006336 <HAL_RCC_OscConfig+0x166>
 8006354:	e000      	b.n	8006358 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006356:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f003 0302 	and.w	r3, r3, #2
 8006360:	2b00      	cmp	r3, #0
 8006362:	f000 808c 	beq.w	800647e <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006366:	4b38      	ldr	r3, [pc, #224]	@ (8006448 <HAL_RCC_OscConfig+0x278>)
 8006368:	691b      	ldr	r3, [r3, #16]
 800636a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800636e:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006370:	4b35      	ldr	r3, [pc, #212]	@ (8006448 <HAL_RCC_OscConfig+0x278>)
 8006372:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006374:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006376:	6a3b      	ldr	r3, [r7, #32]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d007      	beq.n	800638c <HAL_RCC_OscConfig+0x1bc>
 800637c:	6a3b      	ldr	r3, [r7, #32]
 800637e:	2b18      	cmp	r3, #24
 8006380:	d137      	bne.n	80063f2 <HAL_RCC_OscConfig+0x222>
 8006382:	69fb      	ldr	r3, [r7, #28]
 8006384:	f003 0303 	and.w	r3, r3, #3
 8006388:	2b00      	cmp	r3, #0
 800638a:	d132      	bne.n	80063f2 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800638c:	4b2e      	ldr	r3, [pc, #184]	@ (8006448 <HAL_RCC_OscConfig+0x278>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f003 0304 	and.w	r3, r3, #4
 8006394:	2b00      	cmp	r3, #0
 8006396:	d005      	beq.n	80063a4 <HAL_RCC_OscConfig+0x1d4>
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	68db      	ldr	r3, [r3, #12]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d101      	bne.n	80063a4 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 80063a0:	2301      	movs	r3, #1
 80063a2:	e33e      	b.n	8006a22 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80063a4:	4b28      	ldr	r3, [pc, #160]	@ (8006448 <HAL_RCC_OscConfig+0x278>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f023 0219 	bic.w	r2, r3, #25
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	68db      	ldr	r3, [r3, #12]
 80063b0:	4925      	ldr	r1, [pc, #148]	@ (8006448 <HAL_RCC_OscConfig+0x278>)
 80063b2:	4313      	orrs	r3, r2
 80063b4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063b6:	f7fa fe77 	bl	80010a8 <HAL_GetTick>
 80063ba:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80063bc:	e008      	b.n	80063d0 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80063be:	f7fa fe73 	bl	80010a8 <HAL_GetTick>
 80063c2:	4602      	mov	r2, r0
 80063c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063c6:	1ad3      	subs	r3, r2, r3
 80063c8:	2b02      	cmp	r3, #2
 80063ca:	d901      	bls.n	80063d0 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80063cc:	2303      	movs	r3, #3
 80063ce:	e328      	b.n	8006a22 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80063d0:	4b1d      	ldr	r3, [pc, #116]	@ (8006448 <HAL_RCC_OscConfig+0x278>)
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f003 0304 	and.w	r3, r3, #4
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d0f0      	beq.n	80063be <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063dc:	4b1a      	ldr	r3, [pc, #104]	@ (8006448 <HAL_RCC_OscConfig+0x278>)
 80063de:	685b      	ldr	r3, [r3, #4]
 80063e0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	691b      	ldr	r3, [r3, #16]
 80063e8:	061b      	lsls	r3, r3, #24
 80063ea:	4917      	ldr	r1, [pc, #92]	@ (8006448 <HAL_RCC_OscConfig+0x278>)
 80063ec:	4313      	orrs	r3, r2
 80063ee:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80063f0:	e045      	b.n	800647e <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	68db      	ldr	r3, [r3, #12]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d028      	beq.n	800644c <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80063fa:	4b13      	ldr	r3, [pc, #76]	@ (8006448 <HAL_RCC_OscConfig+0x278>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f023 0219 	bic.w	r2, r3, #25
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	68db      	ldr	r3, [r3, #12]
 8006406:	4910      	ldr	r1, [pc, #64]	@ (8006448 <HAL_RCC_OscConfig+0x278>)
 8006408:	4313      	orrs	r3, r2
 800640a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800640c:	f7fa fe4c 	bl	80010a8 <HAL_GetTick>
 8006410:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006412:	e008      	b.n	8006426 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006414:	f7fa fe48 	bl	80010a8 <HAL_GetTick>
 8006418:	4602      	mov	r2, r0
 800641a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800641c:	1ad3      	subs	r3, r2, r3
 800641e:	2b02      	cmp	r3, #2
 8006420:	d901      	bls.n	8006426 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8006422:	2303      	movs	r3, #3
 8006424:	e2fd      	b.n	8006a22 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006426:	4b08      	ldr	r3, [pc, #32]	@ (8006448 <HAL_RCC_OscConfig+0x278>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f003 0304 	and.w	r3, r3, #4
 800642e:	2b00      	cmp	r3, #0
 8006430:	d0f0      	beq.n	8006414 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006432:	4b05      	ldr	r3, [pc, #20]	@ (8006448 <HAL_RCC_OscConfig+0x278>)
 8006434:	685b      	ldr	r3, [r3, #4]
 8006436:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	691b      	ldr	r3, [r3, #16]
 800643e:	061b      	lsls	r3, r3, #24
 8006440:	4901      	ldr	r1, [pc, #4]	@ (8006448 <HAL_RCC_OscConfig+0x278>)
 8006442:	4313      	orrs	r3, r2
 8006444:	604b      	str	r3, [r1, #4]
 8006446:	e01a      	b.n	800647e <HAL_RCC_OscConfig+0x2ae>
 8006448:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800644c:	4b97      	ldr	r3, [pc, #604]	@ (80066ac <HAL_RCC_OscConfig+0x4dc>)
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	4a96      	ldr	r2, [pc, #600]	@ (80066ac <HAL_RCC_OscConfig+0x4dc>)
 8006452:	f023 0301 	bic.w	r3, r3, #1
 8006456:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006458:	f7fa fe26 	bl	80010a8 <HAL_GetTick>
 800645c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800645e:	e008      	b.n	8006472 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006460:	f7fa fe22 	bl	80010a8 <HAL_GetTick>
 8006464:	4602      	mov	r2, r0
 8006466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006468:	1ad3      	subs	r3, r2, r3
 800646a:	2b02      	cmp	r3, #2
 800646c:	d901      	bls.n	8006472 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 800646e:	2303      	movs	r3, #3
 8006470:	e2d7      	b.n	8006a22 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006472:	4b8e      	ldr	r3, [pc, #568]	@ (80066ac <HAL_RCC_OscConfig+0x4dc>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f003 0304 	and.w	r3, r3, #4
 800647a:	2b00      	cmp	r3, #0
 800647c:	d1f0      	bne.n	8006460 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f003 0310 	and.w	r3, r3, #16
 8006486:	2b00      	cmp	r3, #0
 8006488:	d06a      	beq.n	8006560 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800648a:	4b88      	ldr	r3, [pc, #544]	@ (80066ac <HAL_RCC_OscConfig+0x4dc>)
 800648c:	691b      	ldr	r3, [r3, #16]
 800648e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006492:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006494:	4b85      	ldr	r3, [pc, #532]	@ (80066ac <HAL_RCC_OscConfig+0x4dc>)
 8006496:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006498:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800649a:	69bb      	ldr	r3, [r7, #24]
 800649c:	2b08      	cmp	r3, #8
 800649e:	d007      	beq.n	80064b0 <HAL_RCC_OscConfig+0x2e0>
 80064a0:	69bb      	ldr	r3, [r7, #24]
 80064a2:	2b18      	cmp	r3, #24
 80064a4:	d11b      	bne.n	80064de <HAL_RCC_OscConfig+0x30e>
 80064a6:	697b      	ldr	r3, [r7, #20]
 80064a8:	f003 0303 	and.w	r3, r3, #3
 80064ac:	2b01      	cmp	r3, #1
 80064ae:	d116      	bne.n	80064de <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80064b0:	4b7e      	ldr	r3, [pc, #504]	@ (80066ac <HAL_RCC_OscConfig+0x4dc>)
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d005      	beq.n	80064c8 <HAL_RCC_OscConfig+0x2f8>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	69db      	ldr	r3, [r3, #28]
 80064c0:	2b80      	cmp	r3, #128	@ 0x80
 80064c2:	d001      	beq.n	80064c8 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 80064c4:	2301      	movs	r3, #1
 80064c6:	e2ac      	b.n	8006a22 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80064c8:	4b78      	ldr	r3, [pc, #480]	@ (80066ac <HAL_RCC_OscConfig+0x4dc>)
 80064ca:	68db      	ldr	r3, [r3, #12]
 80064cc:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6a1b      	ldr	r3, [r3, #32]
 80064d4:	061b      	lsls	r3, r3, #24
 80064d6:	4975      	ldr	r1, [pc, #468]	@ (80066ac <HAL_RCC_OscConfig+0x4dc>)
 80064d8:	4313      	orrs	r3, r2
 80064da:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80064dc:	e040      	b.n	8006560 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	69db      	ldr	r3, [r3, #28]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d023      	beq.n	800652e <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80064e6:	4b71      	ldr	r3, [pc, #452]	@ (80066ac <HAL_RCC_OscConfig+0x4dc>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a70      	ldr	r2, [pc, #448]	@ (80066ac <HAL_RCC_OscConfig+0x4dc>)
 80064ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80064f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064f2:	f7fa fdd9 	bl	80010a8 <HAL_GetTick>
 80064f6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80064f8:	e008      	b.n	800650c <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80064fa:	f7fa fdd5 	bl	80010a8 <HAL_GetTick>
 80064fe:	4602      	mov	r2, r0
 8006500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006502:	1ad3      	subs	r3, r2, r3
 8006504:	2b02      	cmp	r3, #2
 8006506:	d901      	bls.n	800650c <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8006508:	2303      	movs	r3, #3
 800650a:	e28a      	b.n	8006a22 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800650c:	4b67      	ldr	r3, [pc, #412]	@ (80066ac <HAL_RCC_OscConfig+0x4dc>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006514:	2b00      	cmp	r3, #0
 8006516:	d0f0      	beq.n	80064fa <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006518:	4b64      	ldr	r3, [pc, #400]	@ (80066ac <HAL_RCC_OscConfig+0x4dc>)
 800651a:	68db      	ldr	r3, [r3, #12]
 800651c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6a1b      	ldr	r3, [r3, #32]
 8006524:	061b      	lsls	r3, r3, #24
 8006526:	4961      	ldr	r1, [pc, #388]	@ (80066ac <HAL_RCC_OscConfig+0x4dc>)
 8006528:	4313      	orrs	r3, r2
 800652a:	60cb      	str	r3, [r1, #12]
 800652c:	e018      	b.n	8006560 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800652e:	4b5f      	ldr	r3, [pc, #380]	@ (80066ac <HAL_RCC_OscConfig+0x4dc>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	4a5e      	ldr	r2, [pc, #376]	@ (80066ac <HAL_RCC_OscConfig+0x4dc>)
 8006534:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006538:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800653a:	f7fa fdb5 	bl	80010a8 <HAL_GetTick>
 800653e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006540:	e008      	b.n	8006554 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006542:	f7fa fdb1 	bl	80010a8 <HAL_GetTick>
 8006546:	4602      	mov	r2, r0
 8006548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800654a:	1ad3      	subs	r3, r2, r3
 800654c:	2b02      	cmp	r3, #2
 800654e:	d901      	bls.n	8006554 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8006550:	2303      	movs	r3, #3
 8006552:	e266      	b.n	8006a22 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006554:	4b55      	ldr	r3, [pc, #340]	@ (80066ac <HAL_RCC_OscConfig+0x4dc>)
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800655c:	2b00      	cmp	r3, #0
 800655e:	d1f0      	bne.n	8006542 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f003 0308 	and.w	r3, r3, #8
 8006568:	2b00      	cmp	r3, #0
 800656a:	d036      	beq.n	80065da <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	695b      	ldr	r3, [r3, #20]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d019      	beq.n	80065a8 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006574:	4b4d      	ldr	r3, [pc, #308]	@ (80066ac <HAL_RCC_OscConfig+0x4dc>)
 8006576:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006578:	4a4c      	ldr	r2, [pc, #304]	@ (80066ac <HAL_RCC_OscConfig+0x4dc>)
 800657a:	f043 0301 	orr.w	r3, r3, #1
 800657e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006580:	f7fa fd92 	bl	80010a8 <HAL_GetTick>
 8006584:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006586:	e008      	b.n	800659a <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006588:	f7fa fd8e 	bl	80010a8 <HAL_GetTick>
 800658c:	4602      	mov	r2, r0
 800658e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006590:	1ad3      	subs	r3, r2, r3
 8006592:	2b02      	cmp	r3, #2
 8006594:	d901      	bls.n	800659a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8006596:	2303      	movs	r3, #3
 8006598:	e243      	b.n	8006a22 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800659a:	4b44      	ldr	r3, [pc, #272]	@ (80066ac <HAL_RCC_OscConfig+0x4dc>)
 800659c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800659e:	f003 0302 	and.w	r3, r3, #2
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d0f0      	beq.n	8006588 <HAL_RCC_OscConfig+0x3b8>
 80065a6:	e018      	b.n	80065da <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80065a8:	4b40      	ldr	r3, [pc, #256]	@ (80066ac <HAL_RCC_OscConfig+0x4dc>)
 80065aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80065ac:	4a3f      	ldr	r2, [pc, #252]	@ (80066ac <HAL_RCC_OscConfig+0x4dc>)
 80065ae:	f023 0301 	bic.w	r3, r3, #1
 80065b2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065b4:	f7fa fd78 	bl	80010a8 <HAL_GetTick>
 80065b8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80065ba:	e008      	b.n	80065ce <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80065bc:	f7fa fd74 	bl	80010a8 <HAL_GetTick>
 80065c0:	4602      	mov	r2, r0
 80065c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065c4:	1ad3      	subs	r3, r2, r3
 80065c6:	2b02      	cmp	r3, #2
 80065c8:	d901      	bls.n	80065ce <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80065ca:	2303      	movs	r3, #3
 80065cc:	e229      	b.n	8006a22 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80065ce:	4b37      	ldr	r3, [pc, #220]	@ (80066ac <HAL_RCC_OscConfig+0x4dc>)
 80065d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80065d2:	f003 0302 	and.w	r3, r3, #2
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d1f0      	bne.n	80065bc <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f003 0320 	and.w	r3, r3, #32
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d036      	beq.n	8006654 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	699b      	ldr	r3, [r3, #24]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d019      	beq.n	8006622 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80065ee:	4b2f      	ldr	r3, [pc, #188]	@ (80066ac <HAL_RCC_OscConfig+0x4dc>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	4a2e      	ldr	r2, [pc, #184]	@ (80066ac <HAL_RCC_OscConfig+0x4dc>)
 80065f4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80065f8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80065fa:	f7fa fd55 	bl	80010a8 <HAL_GetTick>
 80065fe:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006600:	e008      	b.n	8006614 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006602:	f7fa fd51 	bl	80010a8 <HAL_GetTick>
 8006606:	4602      	mov	r2, r0
 8006608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800660a:	1ad3      	subs	r3, r2, r3
 800660c:	2b02      	cmp	r3, #2
 800660e:	d901      	bls.n	8006614 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8006610:	2303      	movs	r3, #3
 8006612:	e206      	b.n	8006a22 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006614:	4b25      	ldr	r3, [pc, #148]	@ (80066ac <HAL_RCC_OscConfig+0x4dc>)
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800661c:	2b00      	cmp	r3, #0
 800661e:	d0f0      	beq.n	8006602 <HAL_RCC_OscConfig+0x432>
 8006620:	e018      	b.n	8006654 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006622:	4b22      	ldr	r3, [pc, #136]	@ (80066ac <HAL_RCC_OscConfig+0x4dc>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	4a21      	ldr	r2, [pc, #132]	@ (80066ac <HAL_RCC_OscConfig+0x4dc>)
 8006628:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800662c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800662e:	f7fa fd3b 	bl	80010a8 <HAL_GetTick>
 8006632:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006634:	e008      	b.n	8006648 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006636:	f7fa fd37 	bl	80010a8 <HAL_GetTick>
 800663a:	4602      	mov	r2, r0
 800663c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800663e:	1ad3      	subs	r3, r2, r3
 8006640:	2b02      	cmp	r3, #2
 8006642:	d901      	bls.n	8006648 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8006644:	2303      	movs	r3, #3
 8006646:	e1ec      	b.n	8006a22 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006648:	4b18      	ldr	r3, [pc, #96]	@ (80066ac <HAL_RCC_OscConfig+0x4dc>)
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006650:	2b00      	cmp	r3, #0
 8006652:	d1f0      	bne.n	8006636 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f003 0304 	and.w	r3, r3, #4
 800665c:	2b00      	cmp	r3, #0
 800665e:	f000 80af 	beq.w	80067c0 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006662:	4b13      	ldr	r3, [pc, #76]	@ (80066b0 <HAL_RCC_OscConfig+0x4e0>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	4a12      	ldr	r2, [pc, #72]	@ (80066b0 <HAL_RCC_OscConfig+0x4e0>)
 8006668:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800666c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800666e:	f7fa fd1b 	bl	80010a8 <HAL_GetTick>
 8006672:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006674:	e008      	b.n	8006688 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006676:	f7fa fd17 	bl	80010a8 <HAL_GetTick>
 800667a:	4602      	mov	r2, r0
 800667c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800667e:	1ad3      	subs	r3, r2, r3
 8006680:	2b64      	cmp	r3, #100	@ 0x64
 8006682:	d901      	bls.n	8006688 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8006684:	2303      	movs	r3, #3
 8006686:	e1cc      	b.n	8006a22 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006688:	4b09      	ldr	r3, [pc, #36]	@ (80066b0 <HAL_RCC_OscConfig+0x4e0>)
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006690:	2b00      	cmp	r3, #0
 8006692:	d0f0      	beq.n	8006676 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	689b      	ldr	r3, [r3, #8]
 8006698:	2b01      	cmp	r3, #1
 800669a:	d10b      	bne.n	80066b4 <HAL_RCC_OscConfig+0x4e4>
 800669c:	4b03      	ldr	r3, [pc, #12]	@ (80066ac <HAL_RCC_OscConfig+0x4dc>)
 800669e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066a0:	4a02      	ldr	r2, [pc, #8]	@ (80066ac <HAL_RCC_OscConfig+0x4dc>)
 80066a2:	f043 0301 	orr.w	r3, r3, #1
 80066a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80066a8:	e05b      	b.n	8006762 <HAL_RCC_OscConfig+0x592>
 80066aa:	bf00      	nop
 80066ac:	58024400 	.word	0x58024400
 80066b0:	58024800 	.word	0x58024800
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	689b      	ldr	r3, [r3, #8]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d112      	bne.n	80066e2 <HAL_RCC_OscConfig+0x512>
 80066bc:	4b9d      	ldr	r3, [pc, #628]	@ (8006934 <HAL_RCC_OscConfig+0x764>)
 80066be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066c0:	4a9c      	ldr	r2, [pc, #624]	@ (8006934 <HAL_RCC_OscConfig+0x764>)
 80066c2:	f023 0301 	bic.w	r3, r3, #1
 80066c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80066c8:	4b9a      	ldr	r3, [pc, #616]	@ (8006934 <HAL_RCC_OscConfig+0x764>)
 80066ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066cc:	4a99      	ldr	r2, [pc, #612]	@ (8006934 <HAL_RCC_OscConfig+0x764>)
 80066ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80066d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80066d4:	4b97      	ldr	r3, [pc, #604]	@ (8006934 <HAL_RCC_OscConfig+0x764>)
 80066d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066d8:	4a96      	ldr	r2, [pc, #600]	@ (8006934 <HAL_RCC_OscConfig+0x764>)
 80066da:	f023 0304 	bic.w	r3, r3, #4
 80066de:	6713      	str	r3, [r2, #112]	@ 0x70
 80066e0:	e03f      	b.n	8006762 <HAL_RCC_OscConfig+0x592>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	689b      	ldr	r3, [r3, #8]
 80066e6:	2b05      	cmp	r3, #5
 80066e8:	d112      	bne.n	8006710 <HAL_RCC_OscConfig+0x540>
 80066ea:	4b92      	ldr	r3, [pc, #584]	@ (8006934 <HAL_RCC_OscConfig+0x764>)
 80066ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066ee:	4a91      	ldr	r2, [pc, #580]	@ (8006934 <HAL_RCC_OscConfig+0x764>)
 80066f0:	f043 0304 	orr.w	r3, r3, #4
 80066f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80066f6:	4b8f      	ldr	r3, [pc, #572]	@ (8006934 <HAL_RCC_OscConfig+0x764>)
 80066f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066fa:	4a8e      	ldr	r2, [pc, #568]	@ (8006934 <HAL_RCC_OscConfig+0x764>)
 80066fc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006700:	6713      	str	r3, [r2, #112]	@ 0x70
 8006702:	4b8c      	ldr	r3, [pc, #560]	@ (8006934 <HAL_RCC_OscConfig+0x764>)
 8006704:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006706:	4a8b      	ldr	r2, [pc, #556]	@ (8006934 <HAL_RCC_OscConfig+0x764>)
 8006708:	f043 0301 	orr.w	r3, r3, #1
 800670c:	6713      	str	r3, [r2, #112]	@ 0x70
 800670e:	e028      	b.n	8006762 <HAL_RCC_OscConfig+0x592>
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	689b      	ldr	r3, [r3, #8]
 8006714:	2b85      	cmp	r3, #133	@ 0x85
 8006716:	d112      	bne.n	800673e <HAL_RCC_OscConfig+0x56e>
 8006718:	4b86      	ldr	r3, [pc, #536]	@ (8006934 <HAL_RCC_OscConfig+0x764>)
 800671a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800671c:	4a85      	ldr	r2, [pc, #532]	@ (8006934 <HAL_RCC_OscConfig+0x764>)
 800671e:	f043 0304 	orr.w	r3, r3, #4
 8006722:	6713      	str	r3, [r2, #112]	@ 0x70
 8006724:	4b83      	ldr	r3, [pc, #524]	@ (8006934 <HAL_RCC_OscConfig+0x764>)
 8006726:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006728:	4a82      	ldr	r2, [pc, #520]	@ (8006934 <HAL_RCC_OscConfig+0x764>)
 800672a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800672e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006730:	4b80      	ldr	r3, [pc, #512]	@ (8006934 <HAL_RCC_OscConfig+0x764>)
 8006732:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006734:	4a7f      	ldr	r2, [pc, #508]	@ (8006934 <HAL_RCC_OscConfig+0x764>)
 8006736:	f043 0301 	orr.w	r3, r3, #1
 800673a:	6713      	str	r3, [r2, #112]	@ 0x70
 800673c:	e011      	b.n	8006762 <HAL_RCC_OscConfig+0x592>
 800673e:	4b7d      	ldr	r3, [pc, #500]	@ (8006934 <HAL_RCC_OscConfig+0x764>)
 8006740:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006742:	4a7c      	ldr	r2, [pc, #496]	@ (8006934 <HAL_RCC_OscConfig+0x764>)
 8006744:	f023 0301 	bic.w	r3, r3, #1
 8006748:	6713      	str	r3, [r2, #112]	@ 0x70
 800674a:	4b7a      	ldr	r3, [pc, #488]	@ (8006934 <HAL_RCC_OscConfig+0x764>)
 800674c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800674e:	4a79      	ldr	r2, [pc, #484]	@ (8006934 <HAL_RCC_OscConfig+0x764>)
 8006750:	f023 0304 	bic.w	r3, r3, #4
 8006754:	6713      	str	r3, [r2, #112]	@ 0x70
 8006756:	4b77      	ldr	r3, [pc, #476]	@ (8006934 <HAL_RCC_OscConfig+0x764>)
 8006758:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800675a:	4a76      	ldr	r2, [pc, #472]	@ (8006934 <HAL_RCC_OscConfig+0x764>)
 800675c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006760:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	689b      	ldr	r3, [r3, #8]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d015      	beq.n	8006796 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800676a:	f7fa fc9d 	bl	80010a8 <HAL_GetTick>
 800676e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006770:	e00a      	b.n	8006788 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006772:	f7fa fc99 	bl	80010a8 <HAL_GetTick>
 8006776:	4602      	mov	r2, r0
 8006778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800677a:	1ad3      	subs	r3, r2, r3
 800677c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006780:	4293      	cmp	r3, r2
 8006782:	d901      	bls.n	8006788 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8006784:	2303      	movs	r3, #3
 8006786:	e14c      	b.n	8006a22 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006788:	4b6a      	ldr	r3, [pc, #424]	@ (8006934 <HAL_RCC_OscConfig+0x764>)
 800678a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800678c:	f003 0302 	and.w	r3, r3, #2
 8006790:	2b00      	cmp	r3, #0
 8006792:	d0ee      	beq.n	8006772 <HAL_RCC_OscConfig+0x5a2>
 8006794:	e014      	b.n	80067c0 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006796:	f7fa fc87 	bl	80010a8 <HAL_GetTick>
 800679a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800679c:	e00a      	b.n	80067b4 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800679e:	f7fa fc83 	bl	80010a8 <HAL_GetTick>
 80067a2:	4602      	mov	r2, r0
 80067a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067a6:	1ad3      	subs	r3, r2, r3
 80067a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d901      	bls.n	80067b4 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 80067b0:	2303      	movs	r3, #3
 80067b2:	e136      	b.n	8006a22 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80067b4:	4b5f      	ldr	r3, [pc, #380]	@ (8006934 <HAL_RCC_OscConfig+0x764>)
 80067b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067b8:	f003 0302 	and.w	r3, r3, #2
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d1ee      	bne.n	800679e <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	f000 812b 	beq.w	8006a20 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80067ca:	4b5a      	ldr	r3, [pc, #360]	@ (8006934 <HAL_RCC_OscConfig+0x764>)
 80067cc:	691b      	ldr	r3, [r3, #16]
 80067ce:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80067d2:	2b18      	cmp	r3, #24
 80067d4:	f000 80bb 	beq.w	800694e <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067dc:	2b02      	cmp	r3, #2
 80067de:	f040 8095 	bne.w	800690c <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80067e2:	4b54      	ldr	r3, [pc, #336]	@ (8006934 <HAL_RCC_OscConfig+0x764>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	4a53      	ldr	r2, [pc, #332]	@ (8006934 <HAL_RCC_OscConfig+0x764>)
 80067e8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80067ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067ee:	f7fa fc5b 	bl	80010a8 <HAL_GetTick>
 80067f2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80067f4:	e008      	b.n	8006808 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80067f6:	f7fa fc57 	bl	80010a8 <HAL_GetTick>
 80067fa:	4602      	mov	r2, r0
 80067fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067fe:	1ad3      	subs	r3, r2, r3
 8006800:	2b02      	cmp	r3, #2
 8006802:	d901      	bls.n	8006808 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8006804:	2303      	movs	r3, #3
 8006806:	e10c      	b.n	8006a22 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006808:	4b4a      	ldr	r3, [pc, #296]	@ (8006934 <HAL_RCC_OscConfig+0x764>)
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006810:	2b00      	cmp	r3, #0
 8006812:	d1f0      	bne.n	80067f6 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006814:	4b47      	ldr	r3, [pc, #284]	@ (8006934 <HAL_RCC_OscConfig+0x764>)
 8006816:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006818:	4b47      	ldr	r3, [pc, #284]	@ (8006938 <HAL_RCC_OscConfig+0x768>)
 800681a:	4013      	ands	r3, r2
 800681c:	687a      	ldr	r2, [r7, #4]
 800681e:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8006820:	687a      	ldr	r2, [r7, #4]
 8006822:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006824:	0112      	lsls	r2, r2, #4
 8006826:	430a      	orrs	r2, r1
 8006828:	4942      	ldr	r1, [pc, #264]	@ (8006934 <HAL_RCC_OscConfig+0x764>)
 800682a:	4313      	orrs	r3, r2
 800682c:	628b      	str	r3, [r1, #40]	@ 0x28
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006832:	3b01      	subs	r3, #1
 8006834:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800683c:	3b01      	subs	r3, #1
 800683e:	025b      	lsls	r3, r3, #9
 8006840:	b29b      	uxth	r3, r3
 8006842:	431a      	orrs	r2, r3
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006848:	3b01      	subs	r3, #1
 800684a:	041b      	lsls	r3, r3, #16
 800684c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006850:	431a      	orrs	r2, r3
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006856:	3b01      	subs	r3, #1
 8006858:	061b      	lsls	r3, r3, #24
 800685a:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800685e:	4935      	ldr	r1, [pc, #212]	@ (8006934 <HAL_RCC_OscConfig+0x764>)
 8006860:	4313      	orrs	r3, r2
 8006862:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8006864:	4b33      	ldr	r3, [pc, #204]	@ (8006934 <HAL_RCC_OscConfig+0x764>)
 8006866:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006868:	4a32      	ldr	r2, [pc, #200]	@ (8006934 <HAL_RCC_OscConfig+0x764>)
 800686a:	f023 0301 	bic.w	r3, r3, #1
 800686e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006870:	4b30      	ldr	r3, [pc, #192]	@ (8006934 <HAL_RCC_OscConfig+0x764>)
 8006872:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006874:	4b31      	ldr	r3, [pc, #196]	@ (800693c <HAL_RCC_OscConfig+0x76c>)
 8006876:	4013      	ands	r3, r2
 8006878:	687a      	ldr	r2, [r7, #4]
 800687a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800687c:	00d2      	lsls	r2, r2, #3
 800687e:	492d      	ldr	r1, [pc, #180]	@ (8006934 <HAL_RCC_OscConfig+0x764>)
 8006880:	4313      	orrs	r3, r2
 8006882:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006884:	4b2b      	ldr	r3, [pc, #172]	@ (8006934 <HAL_RCC_OscConfig+0x764>)
 8006886:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006888:	f023 020c 	bic.w	r2, r3, #12
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006890:	4928      	ldr	r1, [pc, #160]	@ (8006934 <HAL_RCC_OscConfig+0x764>)
 8006892:	4313      	orrs	r3, r2
 8006894:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006896:	4b27      	ldr	r3, [pc, #156]	@ (8006934 <HAL_RCC_OscConfig+0x764>)
 8006898:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800689a:	f023 0202 	bic.w	r2, r3, #2
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068a2:	4924      	ldr	r1, [pc, #144]	@ (8006934 <HAL_RCC_OscConfig+0x764>)
 80068a4:	4313      	orrs	r3, r2
 80068a6:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80068a8:	4b22      	ldr	r3, [pc, #136]	@ (8006934 <HAL_RCC_OscConfig+0x764>)
 80068aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068ac:	4a21      	ldr	r2, [pc, #132]	@ (8006934 <HAL_RCC_OscConfig+0x764>)
 80068ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80068b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80068b4:	4b1f      	ldr	r3, [pc, #124]	@ (8006934 <HAL_RCC_OscConfig+0x764>)
 80068b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068b8:	4a1e      	ldr	r2, [pc, #120]	@ (8006934 <HAL_RCC_OscConfig+0x764>)
 80068ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80068be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80068c0:	4b1c      	ldr	r3, [pc, #112]	@ (8006934 <HAL_RCC_OscConfig+0x764>)
 80068c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068c4:	4a1b      	ldr	r2, [pc, #108]	@ (8006934 <HAL_RCC_OscConfig+0x764>)
 80068c6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80068ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80068cc:	4b19      	ldr	r3, [pc, #100]	@ (8006934 <HAL_RCC_OscConfig+0x764>)
 80068ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068d0:	4a18      	ldr	r2, [pc, #96]	@ (8006934 <HAL_RCC_OscConfig+0x764>)
 80068d2:	f043 0301 	orr.w	r3, r3, #1
 80068d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80068d8:	4b16      	ldr	r3, [pc, #88]	@ (8006934 <HAL_RCC_OscConfig+0x764>)
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4a15      	ldr	r2, [pc, #84]	@ (8006934 <HAL_RCC_OscConfig+0x764>)
 80068de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80068e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068e4:	f7fa fbe0 	bl	80010a8 <HAL_GetTick>
 80068e8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80068ea:	e008      	b.n	80068fe <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80068ec:	f7fa fbdc 	bl	80010a8 <HAL_GetTick>
 80068f0:	4602      	mov	r2, r0
 80068f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068f4:	1ad3      	subs	r3, r2, r3
 80068f6:	2b02      	cmp	r3, #2
 80068f8:	d901      	bls.n	80068fe <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 80068fa:	2303      	movs	r3, #3
 80068fc:	e091      	b.n	8006a22 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80068fe:	4b0d      	ldr	r3, [pc, #52]	@ (8006934 <HAL_RCC_OscConfig+0x764>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006906:	2b00      	cmp	r3, #0
 8006908:	d0f0      	beq.n	80068ec <HAL_RCC_OscConfig+0x71c>
 800690a:	e089      	b.n	8006a20 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800690c:	4b09      	ldr	r3, [pc, #36]	@ (8006934 <HAL_RCC_OscConfig+0x764>)
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	4a08      	ldr	r2, [pc, #32]	@ (8006934 <HAL_RCC_OscConfig+0x764>)
 8006912:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006916:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006918:	f7fa fbc6 	bl	80010a8 <HAL_GetTick>
 800691c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800691e:	e00f      	b.n	8006940 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006920:	f7fa fbc2 	bl	80010a8 <HAL_GetTick>
 8006924:	4602      	mov	r2, r0
 8006926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006928:	1ad3      	subs	r3, r2, r3
 800692a:	2b02      	cmp	r3, #2
 800692c:	d908      	bls.n	8006940 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 800692e:	2303      	movs	r3, #3
 8006930:	e077      	b.n	8006a22 <HAL_RCC_OscConfig+0x852>
 8006932:	bf00      	nop
 8006934:	58024400 	.word	0x58024400
 8006938:	fffffc0c 	.word	0xfffffc0c
 800693c:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006940:	4b3a      	ldr	r3, [pc, #232]	@ (8006a2c <HAL_RCC_OscConfig+0x85c>)
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006948:	2b00      	cmp	r3, #0
 800694a:	d1e9      	bne.n	8006920 <HAL_RCC_OscConfig+0x750>
 800694c:	e068      	b.n	8006a20 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800694e:	4b37      	ldr	r3, [pc, #220]	@ (8006a2c <HAL_RCC_OscConfig+0x85c>)
 8006950:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006952:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006954:	4b35      	ldr	r3, [pc, #212]	@ (8006a2c <HAL_RCC_OscConfig+0x85c>)
 8006956:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006958:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800695e:	2b01      	cmp	r3, #1
 8006960:	d031      	beq.n	80069c6 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006962:	693b      	ldr	r3, [r7, #16]
 8006964:	f003 0203 	and.w	r2, r3, #3
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800696c:	429a      	cmp	r2, r3
 800696e:	d12a      	bne.n	80069c6 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006970:	693b      	ldr	r3, [r7, #16]
 8006972:	091b      	lsrs	r3, r3, #4
 8006974:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800697c:	429a      	cmp	r2, r3
 800697e:	d122      	bne.n	80069c6 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800698a:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800698c:	429a      	cmp	r2, r3
 800698e:	d11a      	bne.n	80069c6 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	0a5b      	lsrs	r3, r3, #9
 8006994:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800699c:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800699e:	429a      	cmp	r2, r3
 80069a0:	d111      	bne.n	80069c6 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	0c1b      	lsrs	r3, r3, #16
 80069a6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069ae:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80069b0:	429a      	cmp	r2, r3
 80069b2:	d108      	bne.n	80069c6 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	0e1b      	lsrs	r3, r3, #24
 80069b8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069c0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80069c2:	429a      	cmp	r2, r3
 80069c4:	d001      	beq.n	80069ca <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 80069c6:	2301      	movs	r3, #1
 80069c8:	e02b      	b.n	8006a22 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80069ca:	4b18      	ldr	r3, [pc, #96]	@ (8006a2c <HAL_RCC_OscConfig+0x85c>)
 80069cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80069ce:	08db      	lsrs	r3, r3, #3
 80069d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80069d4:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80069da:	693a      	ldr	r2, [r7, #16]
 80069dc:	429a      	cmp	r2, r3
 80069de:	d01f      	beq.n	8006a20 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80069e0:	4b12      	ldr	r3, [pc, #72]	@ (8006a2c <HAL_RCC_OscConfig+0x85c>)
 80069e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069e4:	4a11      	ldr	r2, [pc, #68]	@ (8006a2c <HAL_RCC_OscConfig+0x85c>)
 80069e6:	f023 0301 	bic.w	r3, r3, #1
 80069ea:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80069ec:	f7fa fb5c 	bl	80010a8 <HAL_GetTick>
 80069f0:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80069f2:	bf00      	nop
 80069f4:	f7fa fb58 	bl	80010a8 <HAL_GetTick>
 80069f8:	4602      	mov	r2, r0
 80069fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d0f9      	beq.n	80069f4 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006a00:	4b0a      	ldr	r3, [pc, #40]	@ (8006a2c <HAL_RCC_OscConfig+0x85c>)
 8006a02:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006a04:	4b0a      	ldr	r3, [pc, #40]	@ (8006a30 <HAL_RCC_OscConfig+0x860>)
 8006a06:	4013      	ands	r3, r2
 8006a08:	687a      	ldr	r2, [r7, #4]
 8006a0a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006a0c:	00d2      	lsls	r2, r2, #3
 8006a0e:	4907      	ldr	r1, [pc, #28]	@ (8006a2c <HAL_RCC_OscConfig+0x85c>)
 8006a10:	4313      	orrs	r3, r2
 8006a12:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8006a14:	4b05      	ldr	r3, [pc, #20]	@ (8006a2c <HAL_RCC_OscConfig+0x85c>)
 8006a16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a18:	4a04      	ldr	r2, [pc, #16]	@ (8006a2c <HAL_RCC_OscConfig+0x85c>)
 8006a1a:	f043 0301 	orr.w	r3, r3, #1
 8006a1e:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8006a20:	2300      	movs	r3, #0
}
 8006a22:	4618      	mov	r0, r3
 8006a24:	3730      	adds	r7, #48	@ 0x30
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bd80      	pop	{r7, pc}
 8006a2a:	bf00      	nop
 8006a2c:	58024400 	.word	0x58024400
 8006a30:	ffff0007 	.word	0xffff0007

08006a34 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b086      	sub	sp, #24
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
 8006a3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d101      	bne.n	8006a48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006a44:	2301      	movs	r3, #1
 8006a46:	e19c      	b.n	8006d82 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006a48:	4b8a      	ldr	r3, [pc, #552]	@ (8006c74 <HAL_RCC_ClockConfig+0x240>)
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f003 030f 	and.w	r3, r3, #15
 8006a50:	683a      	ldr	r2, [r7, #0]
 8006a52:	429a      	cmp	r2, r3
 8006a54:	d910      	bls.n	8006a78 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a56:	4b87      	ldr	r3, [pc, #540]	@ (8006c74 <HAL_RCC_ClockConfig+0x240>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f023 020f 	bic.w	r2, r3, #15
 8006a5e:	4985      	ldr	r1, [pc, #532]	@ (8006c74 <HAL_RCC_ClockConfig+0x240>)
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	4313      	orrs	r3, r2
 8006a64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a66:	4b83      	ldr	r3, [pc, #524]	@ (8006c74 <HAL_RCC_ClockConfig+0x240>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f003 030f 	and.w	r3, r3, #15
 8006a6e:	683a      	ldr	r2, [r7, #0]
 8006a70:	429a      	cmp	r2, r3
 8006a72:	d001      	beq.n	8006a78 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006a74:	2301      	movs	r3, #1
 8006a76:	e184      	b.n	8006d82 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f003 0304 	and.w	r3, r3, #4
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d010      	beq.n	8006aa6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	691a      	ldr	r2, [r3, #16]
 8006a88:	4b7b      	ldr	r3, [pc, #492]	@ (8006c78 <HAL_RCC_ClockConfig+0x244>)
 8006a8a:	699b      	ldr	r3, [r3, #24]
 8006a8c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006a90:	429a      	cmp	r2, r3
 8006a92:	d908      	bls.n	8006aa6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006a94:	4b78      	ldr	r3, [pc, #480]	@ (8006c78 <HAL_RCC_ClockConfig+0x244>)
 8006a96:	699b      	ldr	r3, [r3, #24]
 8006a98:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	691b      	ldr	r3, [r3, #16]
 8006aa0:	4975      	ldr	r1, [pc, #468]	@ (8006c78 <HAL_RCC_ClockConfig+0x244>)
 8006aa2:	4313      	orrs	r3, r2
 8006aa4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f003 0308 	and.w	r3, r3, #8
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d010      	beq.n	8006ad4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	695a      	ldr	r2, [r3, #20]
 8006ab6:	4b70      	ldr	r3, [pc, #448]	@ (8006c78 <HAL_RCC_ClockConfig+0x244>)
 8006ab8:	69db      	ldr	r3, [r3, #28]
 8006aba:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006abe:	429a      	cmp	r2, r3
 8006ac0:	d908      	bls.n	8006ad4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006ac2:	4b6d      	ldr	r3, [pc, #436]	@ (8006c78 <HAL_RCC_ClockConfig+0x244>)
 8006ac4:	69db      	ldr	r3, [r3, #28]
 8006ac6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	695b      	ldr	r3, [r3, #20]
 8006ace:	496a      	ldr	r1, [pc, #424]	@ (8006c78 <HAL_RCC_ClockConfig+0x244>)
 8006ad0:	4313      	orrs	r3, r2
 8006ad2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f003 0310 	and.w	r3, r3, #16
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d010      	beq.n	8006b02 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	699a      	ldr	r2, [r3, #24]
 8006ae4:	4b64      	ldr	r3, [pc, #400]	@ (8006c78 <HAL_RCC_ClockConfig+0x244>)
 8006ae6:	69db      	ldr	r3, [r3, #28]
 8006ae8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006aec:	429a      	cmp	r2, r3
 8006aee:	d908      	bls.n	8006b02 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006af0:	4b61      	ldr	r3, [pc, #388]	@ (8006c78 <HAL_RCC_ClockConfig+0x244>)
 8006af2:	69db      	ldr	r3, [r3, #28]
 8006af4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	699b      	ldr	r3, [r3, #24]
 8006afc:	495e      	ldr	r1, [pc, #376]	@ (8006c78 <HAL_RCC_ClockConfig+0x244>)
 8006afe:	4313      	orrs	r3, r2
 8006b00:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f003 0320 	and.w	r3, r3, #32
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d010      	beq.n	8006b30 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	69da      	ldr	r2, [r3, #28]
 8006b12:	4b59      	ldr	r3, [pc, #356]	@ (8006c78 <HAL_RCC_ClockConfig+0x244>)
 8006b14:	6a1b      	ldr	r3, [r3, #32]
 8006b16:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006b1a:	429a      	cmp	r2, r3
 8006b1c:	d908      	bls.n	8006b30 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006b1e:	4b56      	ldr	r3, [pc, #344]	@ (8006c78 <HAL_RCC_ClockConfig+0x244>)
 8006b20:	6a1b      	ldr	r3, [r3, #32]
 8006b22:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	69db      	ldr	r3, [r3, #28]
 8006b2a:	4953      	ldr	r1, [pc, #332]	@ (8006c78 <HAL_RCC_ClockConfig+0x244>)
 8006b2c:	4313      	orrs	r3, r2
 8006b2e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f003 0302 	and.w	r3, r3, #2
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d010      	beq.n	8006b5e <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	68da      	ldr	r2, [r3, #12]
 8006b40:	4b4d      	ldr	r3, [pc, #308]	@ (8006c78 <HAL_RCC_ClockConfig+0x244>)
 8006b42:	699b      	ldr	r3, [r3, #24]
 8006b44:	f003 030f 	and.w	r3, r3, #15
 8006b48:	429a      	cmp	r2, r3
 8006b4a:	d908      	bls.n	8006b5e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006b4c:	4b4a      	ldr	r3, [pc, #296]	@ (8006c78 <HAL_RCC_ClockConfig+0x244>)
 8006b4e:	699b      	ldr	r3, [r3, #24]
 8006b50:	f023 020f 	bic.w	r2, r3, #15
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	68db      	ldr	r3, [r3, #12]
 8006b58:	4947      	ldr	r1, [pc, #284]	@ (8006c78 <HAL_RCC_ClockConfig+0x244>)
 8006b5a:	4313      	orrs	r3, r2
 8006b5c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f003 0301 	and.w	r3, r3, #1
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d055      	beq.n	8006c16 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006b6a:	4b43      	ldr	r3, [pc, #268]	@ (8006c78 <HAL_RCC_ClockConfig+0x244>)
 8006b6c:	699b      	ldr	r3, [r3, #24]
 8006b6e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	689b      	ldr	r3, [r3, #8]
 8006b76:	4940      	ldr	r1, [pc, #256]	@ (8006c78 <HAL_RCC_ClockConfig+0x244>)
 8006b78:	4313      	orrs	r3, r2
 8006b7a:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	685b      	ldr	r3, [r3, #4]
 8006b80:	2b02      	cmp	r3, #2
 8006b82:	d107      	bne.n	8006b94 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006b84:	4b3c      	ldr	r3, [pc, #240]	@ (8006c78 <HAL_RCC_ClockConfig+0x244>)
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d121      	bne.n	8006bd4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006b90:	2301      	movs	r3, #1
 8006b92:	e0f6      	b.n	8006d82 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	685b      	ldr	r3, [r3, #4]
 8006b98:	2b03      	cmp	r3, #3
 8006b9a:	d107      	bne.n	8006bac <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006b9c:	4b36      	ldr	r3, [pc, #216]	@ (8006c78 <HAL_RCC_ClockConfig+0x244>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d115      	bne.n	8006bd4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006ba8:	2301      	movs	r3, #1
 8006baa:	e0ea      	b.n	8006d82 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	685b      	ldr	r3, [r3, #4]
 8006bb0:	2b01      	cmp	r3, #1
 8006bb2:	d107      	bne.n	8006bc4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006bb4:	4b30      	ldr	r3, [pc, #192]	@ (8006c78 <HAL_RCC_ClockConfig+0x244>)
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d109      	bne.n	8006bd4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	e0de      	b.n	8006d82 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006bc4:	4b2c      	ldr	r3, [pc, #176]	@ (8006c78 <HAL_RCC_ClockConfig+0x244>)
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f003 0304 	and.w	r3, r3, #4
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d101      	bne.n	8006bd4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006bd0:	2301      	movs	r3, #1
 8006bd2:	e0d6      	b.n	8006d82 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006bd4:	4b28      	ldr	r3, [pc, #160]	@ (8006c78 <HAL_RCC_ClockConfig+0x244>)
 8006bd6:	691b      	ldr	r3, [r3, #16]
 8006bd8:	f023 0207 	bic.w	r2, r3, #7
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	685b      	ldr	r3, [r3, #4]
 8006be0:	4925      	ldr	r1, [pc, #148]	@ (8006c78 <HAL_RCC_ClockConfig+0x244>)
 8006be2:	4313      	orrs	r3, r2
 8006be4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006be6:	f7fa fa5f 	bl	80010a8 <HAL_GetTick>
 8006bea:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006bec:	e00a      	b.n	8006c04 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006bee:	f7fa fa5b 	bl	80010a8 <HAL_GetTick>
 8006bf2:	4602      	mov	r2, r0
 8006bf4:	697b      	ldr	r3, [r7, #20]
 8006bf6:	1ad3      	subs	r3, r2, r3
 8006bf8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d901      	bls.n	8006c04 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8006c00:	2303      	movs	r3, #3
 8006c02:	e0be      	b.n	8006d82 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c04:	4b1c      	ldr	r3, [pc, #112]	@ (8006c78 <HAL_RCC_ClockConfig+0x244>)
 8006c06:	691b      	ldr	r3, [r3, #16]
 8006c08:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	685b      	ldr	r3, [r3, #4]
 8006c10:	00db      	lsls	r3, r3, #3
 8006c12:	429a      	cmp	r2, r3
 8006c14:	d1eb      	bne.n	8006bee <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f003 0302 	and.w	r3, r3, #2
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d010      	beq.n	8006c44 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	68da      	ldr	r2, [r3, #12]
 8006c26:	4b14      	ldr	r3, [pc, #80]	@ (8006c78 <HAL_RCC_ClockConfig+0x244>)
 8006c28:	699b      	ldr	r3, [r3, #24]
 8006c2a:	f003 030f 	and.w	r3, r3, #15
 8006c2e:	429a      	cmp	r2, r3
 8006c30:	d208      	bcs.n	8006c44 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006c32:	4b11      	ldr	r3, [pc, #68]	@ (8006c78 <HAL_RCC_ClockConfig+0x244>)
 8006c34:	699b      	ldr	r3, [r3, #24]
 8006c36:	f023 020f 	bic.w	r2, r3, #15
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	68db      	ldr	r3, [r3, #12]
 8006c3e:	490e      	ldr	r1, [pc, #56]	@ (8006c78 <HAL_RCC_ClockConfig+0x244>)
 8006c40:	4313      	orrs	r3, r2
 8006c42:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006c44:	4b0b      	ldr	r3, [pc, #44]	@ (8006c74 <HAL_RCC_ClockConfig+0x240>)
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f003 030f 	and.w	r3, r3, #15
 8006c4c:	683a      	ldr	r2, [r7, #0]
 8006c4e:	429a      	cmp	r2, r3
 8006c50:	d214      	bcs.n	8006c7c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c52:	4b08      	ldr	r3, [pc, #32]	@ (8006c74 <HAL_RCC_ClockConfig+0x240>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f023 020f 	bic.w	r2, r3, #15
 8006c5a:	4906      	ldr	r1, [pc, #24]	@ (8006c74 <HAL_RCC_ClockConfig+0x240>)
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	4313      	orrs	r3, r2
 8006c60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c62:	4b04      	ldr	r3, [pc, #16]	@ (8006c74 <HAL_RCC_ClockConfig+0x240>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f003 030f 	and.w	r3, r3, #15
 8006c6a:	683a      	ldr	r2, [r7, #0]
 8006c6c:	429a      	cmp	r2, r3
 8006c6e:	d005      	beq.n	8006c7c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006c70:	2301      	movs	r3, #1
 8006c72:	e086      	b.n	8006d82 <HAL_RCC_ClockConfig+0x34e>
 8006c74:	52002000 	.word	0x52002000
 8006c78:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f003 0304 	and.w	r3, r3, #4
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d010      	beq.n	8006caa <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	691a      	ldr	r2, [r3, #16]
 8006c8c:	4b3f      	ldr	r3, [pc, #252]	@ (8006d8c <HAL_RCC_ClockConfig+0x358>)
 8006c8e:	699b      	ldr	r3, [r3, #24]
 8006c90:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006c94:	429a      	cmp	r2, r3
 8006c96:	d208      	bcs.n	8006caa <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006c98:	4b3c      	ldr	r3, [pc, #240]	@ (8006d8c <HAL_RCC_ClockConfig+0x358>)
 8006c9a:	699b      	ldr	r3, [r3, #24]
 8006c9c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	691b      	ldr	r3, [r3, #16]
 8006ca4:	4939      	ldr	r1, [pc, #228]	@ (8006d8c <HAL_RCC_ClockConfig+0x358>)
 8006ca6:	4313      	orrs	r3, r2
 8006ca8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f003 0308 	and.w	r3, r3, #8
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d010      	beq.n	8006cd8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	695a      	ldr	r2, [r3, #20]
 8006cba:	4b34      	ldr	r3, [pc, #208]	@ (8006d8c <HAL_RCC_ClockConfig+0x358>)
 8006cbc:	69db      	ldr	r3, [r3, #28]
 8006cbe:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006cc2:	429a      	cmp	r2, r3
 8006cc4:	d208      	bcs.n	8006cd8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006cc6:	4b31      	ldr	r3, [pc, #196]	@ (8006d8c <HAL_RCC_ClockConfig+0x358>)
 8006cc8:	69db      	ldr	r3, [r3, #28]
 8006cca:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	695b      	ldr	r3, [r3, #20]
 8006cd2:	492e      	ldr	r1, [pc, #184]	@ (8006d8c <HAL_RCC_ClockConfig+0x358>)
 8006cd4:	4313      	orrs	r3, r2
 8006cd6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f003 0310 	and.w	r3, r3, #16
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d010      	beq.n	8006d06 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	699a      	ldr	r2, [r3, #24]
 8006ce8:	4b28      	ldr	r3, [pc, #160]	@ (8006d8c <HAL_RCC_ClockConfig+0x358>)
 8006cea:	69db      	ldr	r3, [r3, #28]
 8006cec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006cf0:	429a      	cmp	r2, r3
 8006cf2:	d208      	bcs.n	8006d06 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006cf4:	4b25      	ldr	r3, [pc, #148]	@ (8006d8c <HAL_RCC_ClockConfig+0x358>)
 8006cf6:	69db      	ldr	r3, [r3, #28]
 8006cf8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	699b      	ldr	r3, [r3, #24]
 8006d00:	4922      	ldr	r1, [pc, #136]	@ (8006d8c <HAL_RCC_ClockConfig+0x358>)
 8006d02:	4313      	orrs	r3, r2
 8006d04:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f003 0320 	and.w	r3, r3, #32
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d010      	beq.n	8006d34 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	69da      	ldr	r2, [r3, #28]
 8006d16:	4b1d      	ldr	r3, [pc, #116]	@ (8006d8c <HAL_RCC_ClockConfig+0x358>)
 8006d18:	6a1b      	ldr	r3, [r3, #32]
 8006d1a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006d1e:	429a      	cmp	r2, r3
 8006d20:	d208      	bcs.n	8006d34 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006d22:	4b1a      	ldr	r3, [pc, #104]	@ (8006d8c <HAL_RCC_ClockConfig+0x358>)
 8006d24:	6a1b      	ldr	r3, [r3, #32]
 8006d26:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	69db      	ldr	r3, [r3, #28]
 8006d2e:	4917      	ldr	r1, [pc, #92]	@ (8006d8c <HAL_RCC_ClockConfig+0x358>)
 8006d30:	4313      	orrs	r3, r2
 8006d32:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8006d34:	f000 f834 	bl	8006da0 <HAL_RCC_GetSysClockFreq>
 8006d38:	4602      	mov	r2, r0
 8006d3a:	4b14      	ldr	r3, [pc, #80]	@ (8006d8c <HAL_RCC_ClockConfig+0x358>)
 8006d3c:	699b      	ldr	r3, [r3, #24]
 8006d3e:	0a1b      	lsrs	r3, r3, #8
 8006d40:	f003 030f 	and.w	r3, r3, #15
 8006d44:	4912      	ldr	r1, [pc, #72]	@ (8006d90 <HAL_RCC_ClockConfig+0x35c>)
 8006d46:	5ccb      	ldrb	r3, [r1, r3]
 8006d48:	f003 031f 	and.w	r3, r3, #31
 8006d4c:	fa22 f303 	lsr.w	r3, r2, r3
 8006d50:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8006d52:	4b0e      	ldr	r3, [pc, #56]	@ (8006d8c <HAL_RCC_ClockConfig+0x358>)
 8006d54:	699b      	ldr	r3, [r3, #24]
 8006d56:	f003 030f 	and.w	r3, r3, #15
 8006d5a:	4a0d      	ldr	r2, [pc, #52]	@ (8006d90 <HAL_RCC_ClockConfig+0x35c>)
 8006d5c:	5cd3      	ldrb	r3, [r2, r3]
 8006d5e:	f003 031f 	and.w	r3, r3, #31
 8006d62:	693a      	ldr	r2, [r7, #16]
 8006d64:	fa22 f303 	lsr.w	r3, r2, r3
 8006d68:	4a0a      	ldr	r2, [pc, #40]	@ (8006d94 <HAL_RCC_ClockConfig+0x360>)
 8006d6a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006d6c:	4a0a      	ldr	r2, [pc, #40]	@ (8006d98 <HAL_RCC_ClockConfig+0x364>)
 8006d6e:	693b      	ldr	r3, [r7, #16]
 8006d70:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8006d72:	4b0a      	ldr	r3, [pc, #40]	@ (8006d9c <HAL_RCC_ClockConfig+0x368>)
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	4618      	mov	r0, r3
 8006d78:	f7f9 ff00 	bl	8000b7c <HAL_InitTick>
 8006d7c:	4603      	mov	r3, r0
 8006d7e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006d80:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d82:	4618      	mov	r0, r3
 8006d84:	3718      	adds	r7, #24
 8006d86:	46bd      	mov	sp, r7
 8006d88:	bd80      	pop	{r7, pc}
 8006d8a:	bf00      	nop
 8006d8c:	58024400 	.word	0x58024400
 8006d90:	0800c068 	.word	0x0800c068
 8006d94:	24000004 	.word	0x24000004
 8006d98:	24000000 	.word	0x24000000
 8006d9c:	24000008 	.word	0x24000008

08006da0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006da0:	b480      	push	{r7}
 8006da2:	b089      	sub	sp, #36	@ 0x24
 8006da4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006da6:	4bb3      	ldr	r3, [pc, #716]	@ (8007074 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006da8:	691b      	ldr	r3, [r3, #16]
 8006daa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006dae:	2b18      	cmp	r3, #24
 8006db0:	f200 8155 	bhi.w	800705e <HAL_RCC_GetSysClockFreq+0x2be>
 8006db4:	a201      	add	r2, pc, #4	@ (adr r2, 8006dbc <HAL_RCC_GetSysClockFreq+0x1c>)
 8006db6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dba:	bf00      	nop
 8006dbc:	08006e21 	.word	0x08006e21
 8006dc0:	0800705f 	.word	0x0800705f
 8006dc4:	0800705f 	.word	0x0800705f
 8006dc8:	0800705f 	.word	0x0800705f
 8006dcc:	0800705f 	.word	0x0800705f
 8006dd0:	0800705f 	.word	0x0800705f
 8006dd4:	0800705f 	.word	0x0800705f
 8006dd8:	0800705f 	.word	0x0800705f
 8006ddc:	08006e47 	.word	0x08006e47
 8006de0:	0800705f 	.word	0x0800705f
 8006de4:	0800705f 	.word	0x0800705f
 8006de8:	0800705f 	.word	0x0800705f
 8006dec:	0800705f 	.word	0x0800705f
 8006df0:	0800705f 	.word	0x0800705f
 8006df4:	0800705f 	.word	0x0800705f
 8006df8:	0800705f 	.word	0x0800705f
 8006dfc:	08006e4d 	.word	0x08006e4d
 8006e00:	0800705f 	.word	0x0800705f
 8006e04:	0800705f 	.word	0x0800705f
 8006e08:	0800705f 	.word	0x0800705f
 8006e0c:	0800705f 	.word	0x0800705f
 8006e10:	0800705f 	.word	0x0800705f
 8006e14:	0800705f 	.word	0x0800705f
 8006e18:	0800705f 	.word	0x0800705f
 8006e1c:	08006e53 	.word	0x08006e53
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006e20:	4b94      	ldr	r3, [pc, #592]	@ (8007074 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f003 0320 	and.w	r3, r3, #32
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d009      	beq.n	8006e40 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006e2c:	4b91      	ldr	r3, [pc, #580]	@ (8007074 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	08db      	lsrs	r3, r3, #3
 8006e32:	f003 0303 	and.w	r3, r3, #3
 8006e36:	4a90      	ldr	r2, [pc, #576]	@ (8007078 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006e38:	fa22 f303 	lsr.w	r3, r2, r3
 8006e3c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8006e3e:	e111      	b.n	8007064 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006e40:	4b8d      	ldr	r3, [pc, #564]	@ (8007078 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006e42:	61bb      	str	r3, [r7, #24]
      break;
 8006e44:	e10e      	b.n	8007064 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8006e46:	4b8d      	ldr	r3, [pc, #564]	@ (800707c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006e48:	61bb      	str	r3, [r7, #24]
      break;
 8006e4a:	e10b      	b.n	8007064 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8006e4c:	4b8c      	ldr	r3, [pc, #560]	@ (8007080 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006e4e:	61bb      	str	r3, [r7, #24]
      break;
 8006e50:	e108      	b.n	8007064 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006e52:	4b88      	ldr	r3, [pc, #544]	@ (8007074 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e56:	f003 0303 	and.w	r3, r3, #3
 8006e5a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006e5c:	4b85      	ldr	r3, [pc, #532]	@ (8007074 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e60:	091b      	lsrs	r3, r3, #4
 8006e62:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006e66:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006e68:	4b82      	ldr	r3, [pc, #520]	@ (8007074 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e6c:	f003 0301 	and.w	r3, r3, #1
 8006e70:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006e72:	4b80      	ldr	r3, [pc, #512]	@ (8007074 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e76:	08db      	lsrs	r3, r3, #3
 8006e78:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006e7c:	68fa      	ldr	r2, [r7, #12]
 8006e7e:	fb02 f303 	mul.w	r3, r2, r3
 8006e82:	ee07 3a90 	vmov	s15, r3
 8006e86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e8a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8006e8e:	693b      	ldr	r3, [r7, #16]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	f000 80e1 	beq.w	8007058 <HAL_RCC_GetSysClockFreq+0x2b8>
 8006e96:	697b      	ldr	r3, [r7, #20]
 8006e98:	2b02      	cmp	r3, #2
 8006e9a:	f000 8083 	beq.w	8006fa4 <HAL_RCC_GetSysClockFreq+0x204>
 8006e9e:	697b      	ldr	r3, [r7, #20]
 8006ea0:	2b02      	cmp	r3, #2
 8006ea2:	f200 80a1 	bhi.w	8006fe8 <HAL_RCC_GetSysClockFreq+0x248>
 8006ea6:	697b      	ldr	r3, [r7, #20]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d003      	beq.n	8006eb4 <HAL_RCC_GetSysClockFreq+0x114>
 8006eac:	697b      	ldr	r3, [r7, #20]
 8006eae:	2b01      	cmp	r3, #1
 8006eb0:	d056      	beq.n	8006f60 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006eb2:	e099      	b.n	8006fe8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006eb4:	4b6f      	ldr	r3, [pc, #444]	@ (8007074 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f003 0320 	and.w	r3, r3, #32
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d02d      	beq.n	8006f1c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006ec0:	4b6c      	ldr	r3, [pc, #432]	@ (8007074 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	08db      	lsrs	r3, r3, #3
 8006ec6:	f003 0303 	and.w	r3, r3, #3
 8006eca:	4a6b      	ldr	r2, [pc, #428]	@ (8007078 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006ecc:	fa22 f303 	lsr.w	r3, r2, r3
 8006ed0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	ee07 3a90 	vmov	s15, r3
 8006ed8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006edc:	693b      	ldr	r3, [r7, #16]
 8006ede:	ee07 3a90 	vmov	s15, r3
 8006ee2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ee6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006eea:	4b62      	ldr	r3, [pc, #392]	@ (8007074 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006eec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006eee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ef2:	ee07 3a90 	vmov	s15, r3
 8006ef6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006efa:	ed97 6a02 	vldr	s12, [r7, #8]
 8006efe:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8007084 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006f02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f16:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8006f1a:	e087      	b.n	800702c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006f1c:	693b      	ldr	r3, [r7, #16]
 8006f1e:	ee07 3a90 	vmov	s15, r3
 8006f22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f26:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8007088 <HAL_RCC_GetSysClockFreq+0x2e8>
 8006f2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f2e:	4b51      	ldr	r3, [pc, #324]	@ (8007074 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f36:	ee07 3a90 	vmov	s15, r3
 8006f3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f3e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006f42:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8007084 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006f46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f4e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f5a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006f5e:	e065      	b.n	800702c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006f60:	693b      	ldr	r3, [r7, #16]
 8006f62:	ee07 3a90 	vmov	s15, r3
 8006f66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f6a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800708c <HAL_RCC_GetSysClockFreq+0x2ec>
 8006f6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f72:	4b40      	ldr	r3, [pc, #256]	@ (8007074 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f7a:	ee07 3a90 	vmov	s15, r3
 8006f7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f82:	ed97 6a02 	vldr	s12, [r7, #8]
 8006f86:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8007084 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006f8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f92:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f9e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006fa2:	e043      	b.n	800702c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006fa4:	693b      	ldr	r3, [r7, #16]
 8006fa6:	ee07 3a90 	vmov	s15, r3
 8006faa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fae:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8007090 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006fb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006fb6:	4b2f      	ldr	r3, [pc, #188]	@ (8007074 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006fb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fbe:	ee07 3a90 	vmov	s15, r3
 8006fc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fc6:	ed97 6a02 	vldr	s12, [r7, #8]
 8006fca:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8007084 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006fce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006fd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006fd6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006fda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006fde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fe2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006fe6:	e021      	b.n	800702c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006fe8:	693b      	ldr	r3, [r7, #16]
 8006fea:	ee07 3a90 	vmov	s15, r3
 8006fee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ff2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800708c <HAL_RCC_GetSysClockFreq+0x2ec>
 8006ff6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ffa:	4b1e      	ldr	r3, [pc, #120]	@ (8007074 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ffc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ffe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007002:	ee07 3a90 	vmov	s15, r3
 8007006:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800700a:	ed97 6a02 	vldr	s12, [r7, #8]
 800700e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8007084 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007012:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007016:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800701a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800701e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007022:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007026:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800702a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800702c:	4b11      	ldr	r3, [pc, #68]	@ (8007074 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800702e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007030:	0a5b      	lsrs	r3, r3, #9
 8007032:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007036:	3301      	adds	r3, #1
 8007038:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	ee07 3a90 	vmov	s15, r3
 8007040:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007044:	edd7 6a07 	vldr	s13, [r7, #28]
 8007048:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800704c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007050:	ee17 3a90 	vmov	r3, s15
 8007054:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8007056:	e005      	b.n	8007064 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8007058:	2300      	movs	r3, #0
 800705a:	61bb      	str	r3, [r7, #24]
      break;
 800705c:	e002      	b.n	8007064 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800705e:	4b07      	ldr	r3, [pc, #28]	@ (800707c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007060:	61bb      	str	r3, [r7, #24]
      break;
 8007062:	bf00      	nop
  }

  return sysclockfreq;
 8007064:	69bb      	ldr	r3, [r7, #24]
}
 8007066:	4618      	mov	r0, r3
 8007068:	3724      	adds	r7, #36	@ 0x24
 800706a:	46bd      	mov	sp, r7
 800706c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007070:	4770      	bx	lr
 8007072:	bf00      	nop
 8007074:	58024400 	.word	0x58024400
 8007078:	03d09000 	.word	0x03d09000
 800707c:	003d0900 	.word	0x003d0900
 8007080:	016e3600 	.word	0x016e3600
 8007084:	46000000 	.word	0x46000000
 8007088:	4c742400 	.word	0x4c742400
 800708c:	4a742400 	.word	0x4a742400
 8007090:	4bb71b00 	.word	0x4bb71b00

08007094 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b082      	sub	sp, #8
 8007098:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800709a:	f7ff fe81 	bl	8006da0 <HAL_RCC_GetSysClockFreq>
 800709e:	4602      	mov	r2, r0
 80070a0:	4b10      	ldr	r3, [pc, #64]	@ (80070e4 <HAL_RCC_GetHCLKFreq+0x50>)
 80070a2:	699b      	ldr	r3, [r3, #24]
 80070a4:	0a1b      	lsrs	r3, r3, #8
 80070a6:	f003 030f 	and.w	r3, r3, #15
 80070aa:	490f      	ldr	r1, [pc, #60]	@ (80070e8 <HAL_RCC_GetHCLKFreq+0x54>)
 80070ac:	5ccb      	ldrb	r3, [r1, r3]
 80070ae:	f003 031f 	and.w	r3, r3, #31
 80070b2:	fa22 f303 	lsr.w	r3, r2, r3
 80070b6:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80070b8:	4b0a      	ldr	r3, [pc, #40]	@ (80070e4 <HAL_RCC_GetHCLKFreq+0x50>)
 80070ba:	699b      	ldr	r3, [r3, #24]
 80070bc:	f003 030f 	and.w	r3, r3, #15
 80070c0:	4a09      	ldr	r2, [pc, #36]	@ (80070e8 <HAL_RCC_GetHCLKFreq+0x54>)
 80070c2:	5cd3      	ldrb	r3, [r2, r3]
 80070c4:	f003 031f 	and.w	r3, r3, #31
 80070c8:	687a      	ldr	r2, [r7, #4]
 80070ca:	fa22 f303 	lsr.w	r3, r2, r3
 80070ce:	4a07      	ldr	r2, [pc, #28]	@ (80070ec <HAL_RCC_GetHCLKFreq+0x58>)
 80070d0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80070d2:	4a07      	ldr	r2, [pc, #28]	@ (80070f0 <HAL_RCC_GetHCLKFreq+0x5c>)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80070d8:	4b04      	ldr	r3, [pc, #16]	@ (80070ec <HAL_RCC_GetHCLKFreq+0x58>)
 80070da:	681b      	ldr	r3, [r3, #0]
}
 80070dc:	4618      	mov	r0, r3
 80070de:	3708      	adds	r7, #8
 80070e0:	46bd      	mov	sp, r7
 80070e2:	bd80      	pop	{r7, pc}
 80070e4:	58024400 	.word	0x58024400
 80070e8:	0800c068 	.word	0x0800c068
 80070ec:	24000004 	.word	0x24000004
 80070f0:	24000000 	.word	0x24000000

080070f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 80070f8:	f7ff ffcc 	bl	8007094 <HAL_RCC_GetHCLKFreq>
 80070fc:	4602      	mov	r2, r0
 80070fe:	4b06      	ldr	r3, [pc, #24]	@ (8007118 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007100:	69db      	ldr	r3, [r3, #28]
 8007102:	091b      	lsrs	r3, r3, #4
 8007104:	f003 0307 	and.w	r3, r3, #7
 8007108:	4904      	ldr	r1, [pc, #16]	@ (800711c <HAL_RCC_GetPCLK1Freq+0x28>)
 800710a:	5ccb      	ldrb	r3, [r1, r3]
 800710c:	f003 031f 	and.w	r3, r3, #31
 8007110:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8007114:	4618      	mov	r0, r3
 8007116:	bd80      	pop	{r7, pc}
 8007118:	58024400 	.word	0x58024400
 800711c:	0800c068 	.word	0x0800c068

08007120 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007120:	b580      	push	{r7, lr}
 8007122:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8007124:	f7ff ffb6 	bl	8007094 <HAL_RCC_GetHCLKFreq>
 8007128:	4602      	mov	r2, r0
 800712a:	4b06      	ldr	r3, [pc, #24]	@ (8007144 <HAL_RCC_GetPCLK2Freq+0x24>)
 800712c:	69db      	ldr	r3, [r3, #28]
 800712e:	0a1b      	lsrs	r3, r3, #8
 8007130:	f003 0307 	and.w	r3, r3, #7
 8007134:	4904      	ldr	r1, [pc, #16]	@ (8007148 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007136:	5ccb      	ldrb	r3, [r1, r3]
 8007138:	f003 031f 	and.w	r3, r3, #31
 800713c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8007140:	4618      	mov	r0, r3
 8007142:	bd80      	pop	{r7, pc}
 8007144:	58024400 	.word	0x58024400
 8007148:	0800c068 	.word	0x0800c068

0800714c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800714c:	b480      	push	{r7}
 800714e:	b083      	sub	sp, #12
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
 8007154:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	223f      	movs	r2, #63	@ 0x3f
 800715a:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800715c:	4b1a      	ldr	r3, [pc, #104]	@ (80071c8 <HAL_RCC_GetClockConfig+0x7c>)
 800715e:	691b      	ldr	r3, [r3, #16]
 8007160:	f003 0207 	and.w	r2, r3, #7
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	605a      	str	r2, [r3, #4]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
#else
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE);
 8007168:	4b17      	ldr	r3, [pc, #92]	@ (80071c8 <HAL_RCC_GetClockConfig+0x7c>)
 800716a:	699b      	ldr	r3, [r3, #24]
 800716c:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE);
 8007174:	4b14      	ldr	r3, [pc, #80]	@ (80071c8 <HAL_RCC_GetClockConfig+0x7c>)
 8007176:	699b      	ldr	r3, [r3, #24]
 8007178:	f003 020f 	and.w	r2, r3, #15
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE);
 8007180:	4b11      	ldr	r3, [pc, #68]	@ (80071c8 <HAL_RCC_GetClockConfig+0x7c>)
 8007182:	699b      	ldr	r3, [r3, #24]
 8007184:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1);
 800718c:	4b0e      	ldr	r3, [pc, #56]	@ (80071c8 <HAL_RCC_GetClockConfig+0x7c>)
 800718e:	69db      	ldr	r3, [r3, #28]
 8007190:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2);
 8007198:	4b0b      	ldr	r3, [pc, #44]	@ (80071c8 <HAL_RCC_GetClockConfig+0x7c>)
 800719a:	69db      	ldr	r3, [r3, #28]
 800719c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
 80071a4:	4b08      	ldr	r3, [pc, #32]	@ (80071c8 <HAL_RCC_GetClockConfig+0x7c>)
 80071a6:	6a1b      	ldr	r3, [r3, #32]
 80071a8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	61da      	str	r2, [r3, #28]
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80071b0:	4b06      	ldr	r3, [pc, #24]	@ (80071cc <HAL_RCC_GetClockConfig+0x80>)
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f003 020f 	and.w	r2, r3, #15
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	601a      	str	r2, [r3, #0]
}
 80071bc:	bf00      	nop
 80071be:	370c      	adds	r7, #12
 80071c0:	46bd      	mov	sp, r7
 80071c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c6:	4770      	bx	lr
 80071c8:	58024400 	.word	0x58024400
 80071cc:	52002000 	.word	0x52002000

080071d0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80071d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80071d4:	b0c8      	sub	sp, #288	@ 0x120
 80071d6:	af00      	add	r7, sp, #0
 80071d8:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80071dc:	2300      	movs	r3, #0
 80071de:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80071e2:	2300      	movs	r3, #0
 80071e4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80071e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80071ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071f0:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80071f4:	2500      	movs	r5, #0
 80071f6:	ea54 0305 	orrs.w	r3, r4, r5
 80071fa:	d049      	beq.n	8007290 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80071fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007200:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007202:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007206:	d02f      	beq.n	8007268 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8007208:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800720c:	d828      	bhi.n	8007260 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800720e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007212:	d01a      	beq.n	800724a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007214:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007218:	d822      	bhi.n	8007260 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800721a:	2b00      	cmp	r3, #0
 800721c:	d003      	beq.n	8007226 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800721e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007222:	d007      	beq.n	8007234 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007224:	e01c      	b.n	8007260 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007226:	4ba7      	ldr	r3, [pc, #668]	@ (80074c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007228:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800722a:	4aa6      	ldr	r2, [pc, #664]	@ (80074c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800722c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007230:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007232:	e01a      	b.n	800726a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007234:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007238:	3308      	adds	r3, #8
 800723a:	2102      	movs	r1, #2
 800723c:	4618      	mov	r0, r3
 800723e:	f001 fc43 	bl	8008ac8 <RCCEx_PLL2_Config>
 8007242:	4603      	mov	r3, r0
 8007244:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007248:	e00f      	b.n	800726a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800724a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800724e:	3328      	adds	r3, #40	@ 0x28
 8007250:	2102      	movs	r1, #2
 8007252:	4618      	mov	r0, r3
 8007254:	f001 fcea 	bl	8008c2c <RCCEx_PLL3_Config>
 8007258:	4603      	mov	r3, r0
 800725a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800725e:	e004      	b.n	800726a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007260:	2301      	movs	r3, #1
 8007262:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007266:	e000      	b.n	800726a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8007268:	bf00      	nop
    }

    if (ret == HAL_OK)
 800726a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800726e:	2b00      	cmp	r3, #0
 8007270:	d10a      	bne.n	8007288 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007272:	4b94      	ldr	r3, [pc, #592]	@ (80074c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007274:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007276:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800727a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800727e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007280:	4a90      	ldr	r2, [pc, #576]	@ (80074c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007282:	430b      	orrs	r3, r1
 8007284:	6513      	str	r3, [r2, #80]	@ 0x50
 8007286:	e003      	b.n	8007290 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007288:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800728c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007290:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007298:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800729c:	f04f 0900 	mov.w	r9, #0
 80072a0:	ea58 0309 	orrs.w	r3, r8, r9
 80072a4:	d047      	beq.n	8007336 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80072a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80072aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80072ac:	2b04      	cmp	r3, #4
 80072ae:	d82a      	bhi.n	8007306 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80072b0:	a201      	add	r2, pc, #4	@ (adr r2, 80072b8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80072b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072b6:	bf00      	nop
 80072b8:	080072cd 	.word	0x080072cd
 80072bc:	080072db 	.word	0x080072db
 80072c0:	080072f1 	.word	0x080072f1
 80072c4:	0800730f 	.word	0x0800730f
 80072c8:	0800730f 	.word	0x0800730f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80072cc:	4b7d      	ldr	r3, [pc, #500]	@ (80074c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80072ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072d0:	4a7c      	ldr	r2, [pc, #496]	@ (80074c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80072d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80072d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80072d8:	e01a      	b.n	8007310 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80072da:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80072de:	3308      	adds	r3, #8
 80072e0:	2100      	movs	r1, #0
 80072e2:	4618      	mov	r0, r3
 80072e4:	f001 fbf0 	bl	8008ac8 <RCCEx_PLL2_Config>
 80072e8:	4603      	mov	r3, r0
 80072ea:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80072ee:	e00f      	b.n	8007310 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80072f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80072f4:	3328      	adds	r3, #40	@ 0x28
 80072f6:	2100      	movs	r1, #0
 80072f8:	4618      	mov	r0, r3
 80072fa:	f001 fc97 	bl	8008c2c <RCCEx_PLL3_Config>
 80072fe:	4603      	mov	r3, r0
 8007300:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007304:	e004      	b.n	8007310 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007306:	2301      	movs	r3, #1
 8007308:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800730c:	e000      	b.n	8007310 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800730e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007310:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007314:	2b00      	cmp	r3, #0
 8007316:	d10a      	bne.n	800732e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007318:	4b6a      	ldr	r3, [pc, #424]	@ (80074c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800731a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800731c:	f023 0107 	bic.w	r1, r3, #7
 8007320:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007324:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007326:	4a67      	ldr	r2, [pc, #412]	@ (80074c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007328:	430b      	orrs	r3, r1
 800732a:	6513      	str	r3, [r2, #80]	@ 0x50
 800732c:	e003      	b.n	8007336 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800732e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007332:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8007336:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800733a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800733e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8007342:	f04f 0b00 	mov.w	fp, #0
 8007346:	ea5a 030b 	orrs.w	r3, sl, fp
 800734a:	d054      	beq.n	80073f6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 800734c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007350:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007352:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8007356:	d036      	beq.n	80073c6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8007358:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800735c:	d82f      	bhi.n	80073be <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800735e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007362:	d032      	beq.n	80073ca <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8007364:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007368:	d829      	bhi.n	80073be <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800736a:	2bc0      	cmp	r3, #192	@ 0xc0
 800736c:	d02f      	beq.n	80073ce <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 800736e:	2bc0      	cmp	r3, #192	@ 0xc0
 8007370:	d825      	bhi.n	80073be <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8007372:	2b80      	cmp	r3, #128	@ 0x80
 8007374:	d018      	beq.n	80073a8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8007376:	2b80      	cmp	r3, #128	@ 0x80
 8007378:	d821      	bhi.n	80073be <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800737a:	2b00      	cmp	r3, #0
 800737c:	d002      	beq.n	8007384 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800737e:	2b40      	cmp	r3, #64	@ 0x40
 8007380:	d007      	beq.n	8007392 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8007382:	e01c      	b.n	80073be <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007384:	4b4f      	ldr	r3, [pc, #316]	@ (80074c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007386:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007388:	4a4e      	ldr	r2, [pc, #312]	@ (80074c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800738a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800738e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8007390:	e01e      	b.n	80073d0 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007392:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007396:	3308      	adds	r3, #8
 8007398:	2100      	movs	r1, #0
 800739a:	4618      	mov	r0, r3
 800739c:	f001 fb94 	bl	8008ac8 <RCCEx_PLL2_Config>
 80073a0:	4603      	mov	r3, r0
 80073a2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80073a6:	e013      	b.n	80073d0 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80073a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80073ac:	3328      	adds	r3, #40	@ 0x28
 80073ae:	2100      	movs	r1, #0
 80073b0:	4618      	mov	r0, r3
 80073b2:	f001 fc3b 	bl	8008c2c <RCCEx_PLL3_Config>
 80073b6:	4603      	mov	r3, r0
 80073b8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80073bc:	e008      	b.n	80073d0 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80073be:	2301      	movs	r3, #1
 80073c0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80073c4:	e004      	b.n	80073d0 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80073c6:	bf00      	nop
 80073c8:	e002      	b.n	80073d0 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80073ca:	bf00      	nop
 80073cc:	e000      	b.n	80073d0 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80073ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80073d0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d10a      	bne.n	80073ee <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 80073d8:	4b3a      	ldr	r3, [pc, #232]	@ (80074c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80073da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80073dc:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80073e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80073e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80073e6:	4a37      	ldr	r2, [pc, #220]	@ (80074c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80073e8:	430b      	orrs	r3, r1
 80073ea:	6513      	str	r3, [r2, #80]	@ 0x50
 80073ec:	e003      	b.n	80073f6 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073ee:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80073f2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 80073f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80073fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073fe:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8007402:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007406:	2300      	movs	r3, #0
 8007408:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800740c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8007410:	460b      	mov	r3, r1
 8007412:	4313      	orrs	r3, r2
 8007414:	d05c      	beq.n	80074d0 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 8007416:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800741a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800741c:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8007420:	d03b      	beq.n	800749a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007422:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8007426:	d834      	bhi.n	8007492 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8007428:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800742c:	d037      	beq.n	800749e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 800742e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007432:	d82e      	bhi.n	8007492 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8007434:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007438:	d033      	beq.n	80074a2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800743a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800743e:	d828      	bhi.n	8007492 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8007440:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007444:	d01a      	beq.n	800747c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8007446:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800744a:	d822      	bhi.n	8007492 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800744c:	2b00      	cmp	r3, #0
 800744e:	d003      	beq.n	8007458 <HAL_RCCEx_PeriphCLKConfig+0x288>
 8007450:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007454:	d007      	beq.n	8007466 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8007456:	e01c      	b.n	8007492 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007458:	4b1a      	ldr	r3, [pc, #104]	@ (80074c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800745a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800745c:	4a19      	ldr	r2, [pc, #100]	@ (80074c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800745e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007462:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8007464:	e01e      	b.n	80074a4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007466:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800746a:	3308      	adds	r3, #8
 800746c:	2100      	movs	r1, #0
 800746e:	4618      	mov	r0, r3
 8007470:	f001 fb2a 	bl	8008ac8 <RCCEx_PLL2_Config>
 8007474:	4603      	mov	r3, r0
 8007476:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800747a:	e013      	b.n	80074a4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800747c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007480:	3328      	adds	r3, #40	@ 0x28
 8007482:	2100      	movs	r1, #0
 8007484:	4618      	mov	r0, r3
 8007486:	f001 fbd1 	bl	8008c2c <RCCEx_PLL3_Config>
 800748a:	4603      	mov	r3, r0
 800748c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8007490:	e008      	b.n	80074a4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007492:	2301      	movs	r3, #1
 8007494:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007498:	e004      	b.n	80074a4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800749a:	bf00      	nop
 800749c:	e002      	b.n	80074a4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800749e:	bf00      	nop
 80074a0:	e000      	b.n	80074a4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80074a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80074a4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d10d      	bne.n	80074c8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 80074ac:	4b05      	ldr	r3, [pc, #20]	@ (80074c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80074ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80074b0:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 80074b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80074b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80074ba:	4a02      	ldr	r2, [pc, #8]	@ (80074c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80074bc:	430b      	orrs	r3, r1
 80074be:	6513      	str	r3, [r2, #80]	@ 0x50
 80074c0:	e006      	b.n	80074d0 <HAL_RCCEx_PeriphCLKConfig+0x300>
 80074c2:	bf00      	nop
 80074c4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074c8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80074cc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80074d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80074d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074d8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80074dc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80074e0:	2300      	movs	r3, #0
 80074e2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80074e6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80074ea:	460b      	mov	r3, r1
 80074ec:	4313      	orrs	r3, r2
 80074ee:	d03a      	beq.n	8007566 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80074f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80074f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80074f6:	2b30      	cmp	r3, #48	@ 0x30
 80074f8:	d01f      	beq.n	800753a <HAL_RCCEx_PeriphCLKConfig+0x36a>
 80074fa:	2b30      	cmp	r3, #48	@ 0x30
 80074fc:	d819      	bhi.n	8007532 <HAL_RCCEx_PeriphCLKConfig+0x362>
 80074fe:	2b20      	cmp	r3, #32
 8007500:	d00c      	beq.n	800751c <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8007502:	2b20      	cmp	r3, #32
 8007504:	d815      	bhi.n	8007532 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8007506:	2b00      	cmp	r3, #0
 8007508:	d019      	beq.n	800753e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800750a:	2b10      	cmp	r3, #16
 800750c:	d111      	bne.n	8007532 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800750e:	4bae      	ldr	r3, [pc, #696]	@ (80077c8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007510:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007512:	4aad      	ldr	r2, [pc, #692]	@ (80077c8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007514:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007518:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800751a:	e011      	b.n	8007540 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800751c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007520:	3308      	adds	r3, #8
 8007522:	2102      	movs	r1, #2
 8007524:	4618      	mov	r0, r3
 8007526:	f001 facf 	bl	8008ac8 <RCCEx_PLL2_Config>
 800752a:	4603      	mov	r3, r0
 800752c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8007530:	e006      	b.n	8007540 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007532:	2301      	movs	r3, #1
 8007534:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007538:	e002      	b.n	8007540 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800753a:	bf00      	nop
 800753c:	e000      	b.n	8007540 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800753e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007540:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007544:	2b00      	cmp	r3, #0
 8007546:	d10a      	bne.n	800755e <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8007548:	4b9f      	ldr	r3, [pc, #636]	@ (80077c8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800754a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800754c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8007550:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007554:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007556:	4a9c      	ldr	r2, [pc, #624]	@ (80077c8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007558:	430b      	orrs	r3, r1
 800755a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800755c:	e003      	b.n	8007566 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800755e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007562:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007566:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800756a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800756e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8007572:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007576:	2300      	movs	r3, #0
 8007578:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800757c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8007580:	460b      	mov	r3, r1
 8007582:	4313      	orrs	r3, r2
 8007584:	d051      	beq.n	800762a <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8007586:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800758a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800758c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007590:	d035      	beq.n	80075fe <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8007592:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007596:	d82e      	bhi.n	80075f6 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8007598:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800759c:	d031      	beq.n	8007602 <HAL_RCCEx_PeriphCLKConfig+0x432>
 800759e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80075a2:	d828      	bhi.n	80075f6 <HAL_RCCEx_PeriphCLKConfig+0x426>
 80075a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80075a8:	d01a      	beq.n	80075e0 <HAL_RCCEx_PeriphCLKConfig+0x410>
 80075aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80075ae:	d822      	bhi.n	80075f6 <HAL_RCCEx_PeriphCLKConfig+0x426>
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d003      	beq.n	80075bc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 80075b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80075b8:	d007      	beq.n	80075ca <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 80075ba:	e01c      	b.n	80075f6 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80075bc:	4b82      	ldr	r3, [pc, #520]	@ (80077c8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80075be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075c0:	4a81      	ldr	r2, [pc, #516]	@ (80077c8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80075c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80075c6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80075c8:	e01c      	b.n	8007604 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80075ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80075ce:	3308      	adds	r3, #8
 80075d0:	2100      	movs	r1, #0
 80075d2:	4618      	mov	r0, r3
 80075d4:	f001 fa78 	bl	8008ac8 <RCCEx_PLL2_Config>
 80075d8:	4603      	mov	r3, r0
 80075da:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80075de:	e011      	b.n	8007604 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80075e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80075e4:	3328      	adds	r3, #40	@ 0x28
 80075e6:	2100      	movs	r1, #0
 80075e8:	4618      	mov	r0, r3
 80075ea:	f001 fb1f 	bl	8008c2c <RCCEx_PLL3_Config>
 80075ee:	4603      	mov	r3, r0
 80075f0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80075f4:	e006      	b.n	8007604 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80075f6:	2301      	movs	r3, #1
 80075f8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80075fc:	e002      	b.n	8007604 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 80075fe:	bf00      	nop
 8007600:	e000      	b.n	8007604 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8007602:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007604:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007608:	2b00      	cmp	r3, #0
 800760a:	d10a      	bne.n	8007622 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800760c:	4b6e      	ldr	r3, [pc, #440]	@ (80077c8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800760e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007610:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8007614:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007618:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800761a:	4a6b      	ldr	r2, [pc, #428]	@ (80077c8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800761c:	430b      	orrs	r3, r1
 800761e:	6513      	str	r3, [r2, #80]	@ 0x50
 8007620:	e003      	b.n	800762a <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007622:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007626:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800762a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800762e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007632:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8007636:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800763a:	2300      	movs	r3, #0
 800763c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007640:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8007644:	460b      	mov	r3, r1
 8007646:	4313      	orrs	r3, r2
 8007648:	d053      	beq.n	80076f2 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800764a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800764e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007650:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007654:	d033      	beq.n	80076be <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8007656:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800765a:	d82c      	bhi.n	80076b6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800765c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007660:	d02f      	beq.n	80076c2 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8007662:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007666:	d826      	bhi.n	80076b6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8007668:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800766c:	d02b      	beq.n	80076c6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800766e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007672:	d820      	bhi.n	80076b6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8007674:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007678:	d012      	beq.n	80076a0 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800767a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800767e:	d81a      	bhi.n	80076b6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8007680:	2b00      	cmp	r3, #0
 8007682:	d022      	beq.n	80076ca <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8007684:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007688:	d115      	bne.n	80076b6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800768a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800768e:	3308      	adds	r3, #8
 8007690:	2101      	movs	r1, #1
 8007692:	4618      	mov	r0, r3
 8007694:	f001 fa18 	bl	8008ac8 <RCCEx_PLL2_Config>
 8007698:	4603      	mov	r3, r0
 800769a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800769e:	e015      	b.n	80076cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80076a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80076a4:	3328      	adds	r3, #40	@ 0x28
 80076a6:	2101      	movs	r1, #1
 80076a8:	4618      	mov	r0, r3
 80076aa:	f001 fabf 	bl	8008c2c <RCCEx_PLL3_Config>
 80076ae:	4603      	mov	r3, r0
 80076b0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80076b4:	e00a      	b.n	80076cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80076b6:	2301      	movs	r3, #1
 80076b8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80076bc:	e006      	b.n	80076cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80076be:	bf00      	nop
 80076c0:	e004      	b.n	80076cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80076c2:	bf00      	nop
 80076c4:	e002      	b.n	80076cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80076c6:	bf00      	nop
 80076c8:	e000      	b.n	80076cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80076ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80076cc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d10a      	bne.n	80076ea <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80076d4:	4b3c      	ldr	r3, [pc, #240]	@ (80077c8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80076d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80076d8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80076dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80076e0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80076e2:	4a39      	ldr	r2, [pc, #228]	@ (80077c8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80076e4:	430b      	orrs	r3, r1
 80076e6:	6513      	str	r3, [r2, #80]	@ 0x50
 80076e8:	e003      	b.n	80076f2 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076ea:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80076ee:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80076f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80076f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076fa:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80076fe:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007702:	2300      	movs	r3, #0
 8007704:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007708:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800770c:	460b      	mov	r3, r1
 800770e:	4313      	orrs	r3, r2
 8007710:	d060      	beq.n	80077d4 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8007712:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007716:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800771a:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 800771e:	d039      	beq.n	8007794 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8007720:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8007724:	d832      	bhi.n	800778c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8007726:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800772a:	d035      	beq.n	8007798 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800772c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007730:	d82c      	bhi.n	800778c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8007732:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007736:	d031      	beq.n	800779c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8007738:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800773c:	d826      	bhi.n	800778c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800773e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007742:	d02d      	beq.n	80077a0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8007744:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007748:	d820      	bhi.n	800778c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800774a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800774e:	d012      	beq.n	8007776 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8007750:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007754:	d81a      	bhi.n	800778c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8007756:	2b00      	cmp	r3, #0
 8007758:	d024      	beq.n	80077a4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800775a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800775e:	d115      	bne.n	800778c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007760:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007764:	3308      	adds	r3, #8
 8007766:	2101      	movs	r1, #1
 8007768:	4618      	mov	r0, r3
 800776a:	f001 f9ad 	bl	8008ac8 <RCCEx_PLL2_Config>
 800776e:	4603      	mov	r3, r0
 8007770:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007774:	e017      	b.n	80077a6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007776:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800777a:	3328      	adds	r3, #40	@ 0x28
 800777c:	2101      	movs	r1, #1
 800777e:	4618      	mov	r0, r3
 8007780:	f001 fa54 	bl	8008c2c <RCCEx_PLL3_Config>
 8007784:	4603      	mov	r3, r0
 8007786:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800778a:	e00c      	b.n	80077a6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800778c:	2301      	movs	r3, #1
 800778e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007792:	e008      	b.n	80077a6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007794:	bf00      	nop
 8007796:	e006      	b.n	80077a6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007798:	bf00      	nop
 800779a:	e004      	b.n	80077a6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800779c:	bf00      	nop
 800779e:	e002      	b.n	80077a6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80077a0:	bf00      	nop
 80077a2:	e000      	b.n	80077a6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80077a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80077a6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d10e      	bne.n	80077cc <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80077ae:	4b06      	ldr	r3, [pc, #24]	@ (80077c8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80077b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80077b2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80077b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80077ba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80077be:	4a02      	ldr	r2, [pc, #8]	@ (80077c8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80077c0:	430b      	orrs	r3, r1
 80077c2:	6593      	str	r3, [r2, #88]	@ 0x58
 80077c4:	e006      	b.n	80077d4 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80077c6:	bf00      	nop
 80077c8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077cc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80077d0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80077d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80077d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077dc:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80077e0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80077e4:	2300      	movs	r3, #0
 80077e6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80077ea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80077ee:	460b      	mov	r3, r1
 80077f0:	4313      	orrs	r3, r2
 80077f2:	d037      	beq.n	8007864 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80077f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80077f8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80077fa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80077fe:	d00e      	beq.n	800781e <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8007800:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007804:	d816      	bhi.n	8007834 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8007806:	2b00      	cmp	r3, #0
 8007808:	d018      	beq.n	800783c <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800780a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800780e:	d111      	bne.n	8007834 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007810:	4bc4      	ldr	r3, [pc, #784]	@ (8007b24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007812:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007814:	4ac3      	ldr	r2, [pc, #780]	@ (8007b24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007816:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800781a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800781c:	e00f      	b.n	800783e <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800781e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007822:	3308      	adds	r3, #8
 8007824:	2101      	movs	r1, #1
 8007826:	4618      	mov	r0, r3
 8007828:	f001 f94e 	bl	8008ac8 <RCCEx_PLL2_Config>
 800782c:	4603      	mov	r3, r0
 800782e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007832:	e004      	b.n	800783e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007834:	2301      	movs	r3, #1
 8007836:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800783a:	e000      	b.n	800783e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800783c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800783e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007842:	2b00      	cmp	r3, #0
 8007844:	d10a      	bne.n	800785c <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007846:	4bb7      	ldr	r3, [pc, #732]	@ (8007b24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007848:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800784a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800784e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007852:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007854:	4ab3      	ldr	r2, [pc, #716]	@ (8007b24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007856:	430b      	orrs	r3, r1
 8007858:	6513      	str	r3, [r2, #80]	@ 0x50
 800785a:	e003      	b.n	8007864 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800785c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007860:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007864:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800786c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8007870:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007874:	2300      	movs	r3, #0
 8007876:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800787a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800787e:	460b      	mov	r3, r1
 8007880:	4313      	orrs	r3, r2
 8007882:	d039      	beq.n	80078f8 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8007884:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007888:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800788a:	2b03      	cmp	r3, #3
 800788c:	d81c      	bhi.n	80078c8 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800788e:	a201      	add	r2, pc, #4	@ (adr r2, 8007894 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8007890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007894:	080078d1 	.word	0x080078d1
 8007898:	080078a5 	.word	0x080078a5
 800789c:	080078b3 	.word	0x080078b3
 80078a0:	080078d1 	.word	0x080078d1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80078a4:	4b9f      	ldr	r3, [pc, #636]	@ (8007b24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80078a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078a8:	4a9e      	ldr	r2, [pc, #632]	@ (8007b24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80078aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80078ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80078b0:	e00f      	b.n	80078d2 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80078b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80078b6:	3308      	adds	r3, #8
 80078b8:	2102      	movs	r1, #2
 80078ba:	4618      	mov	r0, r3
 80078bc:	f001 f904 	bl	8008ac8 <RCCEx_PLL2_Config>
 80078c0:	4603      	mov	r3, r0
 80078c2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 80078c6:	e004      	b.n	80078d2 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80078c8:	2301      	movs	r3, #1
 80078ca:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80078ce:	e000      	b.n	80078d2 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80078d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80078d2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d10a      	bne.n	80078f0 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80078da:	4b92      	ldr	r3, [pc, #584]	@ (8007b24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80078dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80078de:	f023 0103 	bic.w	r1, r3, #3
 80078e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80078e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80078e8:	4a8e      	ldr	r2, [pc, #568]	@ (8007b24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80078ea:	430b      	orrs	r3, r1
 80078ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80078ee:	e003      	b.n	80078f8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078f0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80078f4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80078f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80078fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007900:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8007904:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007908:	2300      	movs	r3, #0
 800790a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800790e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8007912:	460b      	mov	r3, r1
 8007914:	4313      	orrs	r3, r2
 8007916:	f000 8099 	beq.w	8007a4c <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800791a:	4b83      	ldr	r3, [pc, #524]	@ (8007b28 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	4a82      	ldr	r2, [pc, #520]	@ (8007b28 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007920:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007924:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007926:	f7f9 fbbf 	bl	80010a8 <HAL_GetTick>
 800792a:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800792e:	e00b      	b.n	8007948 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007930:	f7f9 fbba 	bl	80010a8 <HAL_GetTick>
 8007934:	4602      	mov	r2, r0
 8007936:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800793a:	1ad3      	subs	r3, r2, r3
 800793c:	2b64      	cmp	r3, #100	@ 0x64
 800793e:	d903      	bls.n	8007948 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8007940:	2303      	movs	r3, #3
 8007942:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007946:	e005      	b.n	8007954 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007948:	4b77      	ldr	r3, [pc, #476]	@ (8007b28 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007950:	2b00      	cmp	r3, #0
 8007952:	d0ed      	beq.n	8007930 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8007954:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007958:	2b00      	cmp	r3, #0
 800795a:	d173      	bne.n	8007a44 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800795c:	4b71      	ldr	r3, [pc, #452]	@ (8007b24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800795e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007960:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007964:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007968:	4053      	eors	r3, r2
 800796a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800796e:	2b00      	cmp	r3, #0
 8007970:	d015      	beq.n	800799e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007972:	4b6c      	ldr	r3, [pc, #432]	@ (8007b24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007974:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007976:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800797a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800797e:	4b69      	ldr	r3, [pc, #420]	@ (8007b24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007980:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007982:	4a68      	ldr	r2, [pc, #416]	@ (8007b24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007984:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007988:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800798a:	4b66      	ldr	r3, [pc, #408]	@ (8007b24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800798c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800798e:	4a65      	ldr	r2, [pc, #404]	@ (8007b24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007990:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007994:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007996:	4a63      	ldr	r2, [pc, #396]	@ (8007b24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007998:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800799c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800799e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80079a2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80079a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80079aa:	d118      	bne.n	80079de <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079ac:	f7f9 fb7c 	bl	80010a8 <HAL_GetTick>
 80079b0:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80079b4:	e00d      	b.n	80079d2 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80079b6:	f7f9 fb77 	bl	80010a8 <HAL_GetTick>
 80079ba:	4602      	mov	r2, r0
 80079bc:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80079c0:	1ad2      	subs	r2, r2, r3
 80079c2:	f241 3388 	movw	r3, #5000	@ 0x1388
 80079c6:	429a      	cmp	r2, r3
 80079c8:	d903      	bls.n	80079d2 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80079ca:	2303      	movs	r3, #3
 80079cc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 80079d0:	e005      	b.n	80079de <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80079d2:	4b54      	ldr	r3, [pc, #336]	@ (8007b24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80079d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80079d6:	f003 0302 	and.w	r3, r3, #2
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d0eb      	beq.n	80079b6 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80079de:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d129      	bne.n	8007a3a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80079e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80079ea:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80079ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80079f2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80079f6:	d10e      	bne.n	8007a16 <HAL_RCCEx_PeriphCLKConfig+0x846>
 80079f8:	4b4a      	ldr	r3, [pc, #296]	@ (8007b24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80079fa:	691b      	ldr	r3, [r3, #16]
 80079fc:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8007a00:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007a04:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007a08:	091a      	lsrs	r2, r3, #4
 8007a0a:	4b48      	ldr	r3, [pc, #288]	@ (8007b2c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8007a0c:	4013      	ands	r3, r2
 8007a0e:	4a45      	ldr	r2, [pc, #276]	@ (8007b24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007a10:	430b      	orrs	r3, r1
 8007a12:	6113      	str	r3, [r2, #16]
 8007a14:	e005      	b.n	8007a22 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8007a16:	4b43      	ldr	r3, [pc, #268]	@ (8007b24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007a18:	691b      	ldr	r3, [r3, #16]
 8007a1a:	4a42      	ldr	r2, [pc, #264]	@ (8007b24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007a1c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007a20:	6113      	str	r3, [r2, #16]
 8007a22:	4b40      	ldr	r3, [pc, #256]	@ (8007b24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007a24:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8007a26:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007a2a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007a2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007a32:	4a3c      	ldr	r2, [pc, #240]	@ (8007b24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007a34:	430b      	orrs	r3, r1
 8007a36:	6713      	str	r3, [r2, #112]	@ 0x70
 8007a38:	e008      	b.n	8007a4c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007a3a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007a3e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 8007a42:	e003      	b.n	8007a4c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a44:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007a48:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007a4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a54:	f002 0301 	and.w	r3, r2, #1
 8007a58:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007a62:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007a66:	460b      	mov	r3, r1
 8007a68:	4313      	orrs	r3, r2
 8007a6a:	f000 8090 	beq.w	8007b8e <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8007a6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007a72:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007a76:	2b28      	cmp	r3, #40	@ 0x28
 8007a78:	d870      	bhi.n	8007b5c <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8007a7a:	a201      	add	r2, pc, #4	@ (adr r2, 8007a80 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8007a7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a80:	08007b65 	.word	0x08007b65
 8007a84:	08007b5d 	.word	0x08007b5d
 8007a88:	08007b5d 	.word	0x08007b5d
 8007a8c:	08007b5d 	.word	0x08007b5d
 8007a90:	08007b5d 	.word	0x08007b5d
 8007a94:	08007b5d 	.word	0x08007b5d
 8007a98:	08007b5d 	.word	0x08007b5d
 8007a9c:	08007b5d 	.word	0x08007b5d
 8007aa0:	08007b31 	.word	0x08007b31
 8007aa4:	08007b5d 	.word	0x08007b5d
 8007aa8:	08007b5d 	.word	0x08007b5d
 8007aac:	08007b5d 	.word	0x08007b5d
 8007ab0:	08007b5d 	.word	0x08007b5d
 8007ab4:	08007b5d 	.word	0x08007b5d
 8007ab8:	08007b5d 	.word	0x08007b5d
 8007abc:	08007b5d 	.word	0x08007b5d
 8007ac0:	08007b47 	.word	0x08007b47
 8007ac4:	08007b5d 	.word	0x08007b5d
 8007ac8:	08007b5d 	.word	0x08007b5d
 8007acc:	08007b5d 	.word	0x08007b5d
 8007ad0:	08007b5d 	.word	0x08007b5d
 8007ad4:	08007b5d 	.word	0x08007b5d
 8007ad8:	08007b5d 	.word	0x08007b5d
 8007adc:	08007b5d 	.word	0x08007b5d
 8007ae0:	08007b65 	.word	0x08007b65
 8007ae4:	08007b5d 	.word	0x08007b5d
 8007ae8:	08007b5d 	.word	0x08007b5d
 8007aec:	08007b5d 	.word	0x08007b5d
 8007af0:	08007b5d 	.word	0x08007b5d
 8007af4:	08007b5d 	.word	0x08007b5d
 8007af8:	08007b5d 	.word	0x08007b5d
 8007afc:	08007b5d 	.word	0x08007b5d
 8007b00:	08007b65 	.word	0x08007b65
 8007b04:	08007b5d 	.word	0x08007b5d
 8007b08:	08007b5d 	.word	0x08007b5d
 8007b0c:	08007b5d 	.word	0x08007b5d
 8007b10:	08007b5d 	.word	0x08007b5d
 8007b14:	08007b5d 	.word	0x08007b5d
 8007b18:	08007b5d 	.word	0x08007b5d
 8007b1c:	08007b5d 	.word	0x08007b5d
 8007b20:	08007b65 	.word	0x08007b65
 8007b24:	58024400 	.word	0x58024400
 8007b28:	58024800 	.word	0x58024800
 8007b2c:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007b30:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007b34:	3308      	adds	r3, #8
 8007b36:	2101      	movs	r1, #1
 8007b38:	4618      	mov	r0, r3
 8007b3a:	f000 ffc5 	bl	8008ac8 <RCCEx_PLL2_Config>
 8007b3e:	4603      	mov	r3, r0
 8007b40:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007b44:	e00f      	b.n	8007b66 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007b46:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007b4a:	3328      	adds	r3, #40	@ 0x28
 8007b4c:	2101      	movs	r1, #1
 8007b4e:	4618      	mov	r0, r3
 8007b50:	f001 f86c 	bl	8008c2c <RCCEx_PLL3_Config>
 8007b54:	4603      	mov	r3, r0
 8007b56:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007b5a:	e004      	b.n	8007b66 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007b5c:	2301      	movs	r3, #1
 8007b5e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007b62:	e000      	b.n	8007b66 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8007b64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b66:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d10b      	bne.n	8007b86 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007b6e:	4bc0      	ldr	r3, [pc, #768]	@ (8007e70 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007b70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b72:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8007b76:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007b7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007b7e:	4abc      	ldr	r2, [pc, #752]	@ (8007e70 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007b80:	430b      	orrs	r3, r1
 8007b82:	6553      	str	r3, [r2, #84]	@ 0x54
 8007b84:	e003      	b.n	8007b8e <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b86:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007b8a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007b8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b96:	f002 0302 	and.w	r3, r2, #2
 8007b9a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007ba4:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8007ba8:	460b      	mov	r3, r1
 8007baa:	4313      	orrs	r3, r2
 8007bac:	d043      	beq.n	8007c36 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8007bae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007bb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007bb6:	2b05      	cmp	r3, #5
 8007bb8:	d824      	bhi.n	8007c04 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8007bba:	a201      	add	r2, pc, #4	@ (adr r2, 8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8007bbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bc0:	08007c0d 	.word	0x08007c0d
 8007bc4:	08007bd9 	.word	0x08007bd9
 8007bc8:	08007bef 	.word	0x08007bef
 8007bcc:	08007c0d 	.word	0x08007c0d
 8007bd0:	08007c0d 	.word	0x08007c0d
 8007bd4:	08007c0d 	.word	0x08007c0d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007bd8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007bdc:	3308      	adds	r3, #8
 8007bde:	2101      	movs	r1, #1
 8007be0:	4618      	mov	r0, r3
 8007be2:	f000 ff71 	bl	8008ac8 <RCCEx_PLL2_Config>
 8007be6:	4603      	mov	r3, r0
 8007be8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007bec:	e00f      	b.n	8007c0e <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007bee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007bf2:	3328      	adds	r3, #40	@ 0x28
 8007bf4:	2101      	movs	r1, #1
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	f001 f818 	bl	8008c2c <RCCEx_PLL3_Config>
 8007bfc:	4603      	mov	r3, r0
 8007bfe:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007c02:	e004      	b.n	8007c0e <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007c04:	2301      	movs	r3, #1
 8007c06:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007c0a:	e000      	b.n	8007c0e <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8007c0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c0e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d10b      	bne.n	8007c2e <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007c16:	4b96      	ldr	r3, [pc, #600]	@ (8007e70 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007c18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c1a:	f023 0107 	bic.w	r1, r3, #7
 8007c1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007c22:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007c26:	4a92      	ldr	r2, [pc, #584]	@ (8007e70 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007c28:	430b      	orrs	r3, r1
 8007c2a:	6553      	str	r3, [r2, #84]	@ 0x54
 8007c2c:	e003      	b.n	8007c36 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c2e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007c32:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007c36:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c3e:	f002 0304 	and.w	r3, r2, #4
 8007c42:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007c46:	2300      	movs	r3, #0
 8007c48:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007c4c:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8007c50:	460b      	mov	r3, r1
 8007c52:	4313      	orrs	r3, r2
 8007c54:	d043      	beq.n	8007cde <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007c56:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007c5a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007c5e:	2b05      	cmp	r3, #5
 8007c60:	d824      	bhi.n	8007cac <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8007c62:	a201      	add	r2, pc, #4	@ (adr r2, 8007c68 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8007c64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c68:	08007cb5 	.word	0x08007cb5
 8007c6c:	08007c81 	.word	0x08007c81
 8007c70:	08007c97 	.word	0x08007c97
 8007c74:	08007cb5 	.word	0x08007cb5
 8007c78:	08007cb5 	.word	0x08007cb5
 8007c7c:	08007cb5 	.word	0x08007cb5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007c80:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007c84:	3308      	adds	r3, #8
 8007c86:	2101      	movs	r1, #1
 8007c88:	4618      	mov	r0, r3
 8007c8a:	f000 ff1d 	bl	8008ac8 <RCCEx_PLL2_Config>
 8007c8e:	4603      	mov	r3, r0
 8007c90:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007c94:	e00f      	b.n	8007cb6 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007c96:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007c9a:	3328      	adds	r3, #40	@ 0x28
 8007c9c:	2101      	movs	r1, #1
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	f000 ffc4 	bl	8008c2c <RCCEx_PLL3_Config>
 8007ca4:	4603      	mov	r3, r0
 8007ca6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007caa:	e004      	b.n	8007cb6 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007cac:	2301      	movs	r3, #1
 8007cae:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007cb2:	e000      	b.n	8007cb6 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8007cb4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007cb6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d10b      	bne.n	8007cd6 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007cbe:	4b6c      	ldr	r3, [pc, #432]	@ (8007e70 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007cc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007cc2:	f023 0107 	bic.w	r1, r3, #7
 8007cc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007cca:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007cce:	4a68      	ldr	r2, [pc, #416]	@ (8007e70 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007cd0:	430b      	orrs	r3, r1
 8007cd2:	6593      	str	r3, [r2, #88]	@ 0x58
 8007cd4:	e003      	b.n	8007cde <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cd6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007cda:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007cde:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ce6:	f002 0320 	and.w	r3, r2, #32
 8007cea:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007cee:	2300      	movs	r3, #0
 8007cf0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007cf4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007cf8:	460b      	mov	r3, r1
 8007cfa:	4313      	orrs	r3, r2
 8007cfc:	d055      	beq.n	8007daa <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8007cfe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007d02:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007d06:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007d0a:	d033      	beq.n	8007d74 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8007d0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007d10:	d82c      	bhi.n	8007d6c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8007d12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d16:	d02f      	beq.n	8007d78 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8007d18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d1c:	d826      	bhi.n	8007d6c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8007d1e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007d22:	d02b      	beq.n	8007d7c <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8007d24:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007d28:	d820      	bhi.n	8007d6c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8007d2a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007d2e:	d012      	beq.n	8007d56 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8007d30:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007d34:	d81a      	bhi.n	8007d6c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d022      	beq.n	8007d80 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8007d3a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007d3e:	d115      	bne.n	8007d6c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007d40:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007d44:	3308      	adds	r3, #8
 8007d46:	2100      	movs	r1, #0
 8007d48:	4618      	mov	r0, r3
 8007d4a:	f000 febd 	bl	8008ac8 <RCCEx_PLL2_Config>
 8007d4e:	4603      	mov	r3, r0
 8007d50:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007d54:	e015      	b.n	8007d82 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007d56:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007d5a:	3328      	adds	r3, #40	@ 0x28
 8007d5c:	2102      	movs	r1, #2
 8007d5e:	4618      	mov	r0, r3
 8007d60:	f000 ff64 	bl	8008c2c <RCCEx_PLL3_Config>
 8007d64:	4603      	mov	r3, r0
 8007d66:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007d6a:	e00a      	b.n	8007d82 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007d6c:	2301      	movs	r3, #1
 8007d6e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007d72:	e006      	b.n	8007d82 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8007d74:	bf00      	nop
 8007d76:	e004      	b.n	8007d82 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8007d78:	bf00      	nop
 8007d7a:	e002      	b.n	8007d82 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8007d7c:	bf00      	nop
 8007d7e:	e000      	b.n	8007d82 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8007d80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d82:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d10b      	bne.n	8007da2 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007d8a:	4b39      	ldr	r3, [pc, #228]	@ (8007e70 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007d8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d8e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007d92:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007d96:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007d9a:	4a35      	ldr	r2, [pc, #212]	@ (8007e70 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007d9c:	430b      	orrs	r3, r1
 8007d9e:	6553      	str	r3, [r2, #84]	@ 0x54
 8007da0:	e003      	b.n	8007daa <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007da2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007da6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007daa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007db2:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8007db6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007dba:	2300      	movs	r3, #0
 8007dbc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007dc0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8007dc4:	460b      	mov	r3, r1
 8007dc6:	4313      	orrs	r3, r2
 8007dc8:	d058      	beq.n	8007e7c <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8007dca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007dce:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007dd2:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007dd6:	d033      	beq.n	8007e40 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8007dd8:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007ddc:	d82c      	bhi.n	8007e38 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8007dde:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007de2:	d02f      	beq.n	8007e44 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8007de4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007de8:	d826      	bhi.n	8007e38 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8007dea:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007dee:	d02b      	beq.n	8007e48 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8007df0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007df4:	d820      	bhi.n	8007e38 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8007df6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007dfa:	d012      	beq.n	8007e22 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8007dfc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007e00:	d81a      	bhi.n	8007e38 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d022      	beq.n	8007e4c <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 8007e06:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007e0a:	d115      	bne.n	8007e38 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007e0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007e10:	3308      	adds	r3, #8
 8007e12:	2100      	movs	r1, #0
 8007e14:	4618      	mov	r0, r3
 8007e16:	f000 fe57 	bl	8008ac8 <RCCEx_PLL2_Config>
 8007e1a:	4603      	mov	r3, r0
 8007e1c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007e20:	e015      	b.n	8007e4e <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007e22:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007e26:	3328      	adds	r3, #40	@ 0x28
 8007e28:	2102      	movs	r1, #2
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	f000 fefe 	bl	8008c2c <RCCEx_PLL3_Config>
 8007e30:	4603      	mov	r3, r0
 8007e32:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007e36:	e00a      	b.n	8007e4e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007e38:	2301      	movs	r3, #1
 8007e3a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007e3e:	e006      	b.n	8007e4e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8007e40:	bf00      	nop
 8007e42:	e004      	b.n	8007e4e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8007e44:	bf00      	nop
 8007e46:	e002      	b.n	8007e4e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8007e48:	bf00      	nop
 8007e4a:	e000      	b.n	8007e4e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8007e4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e4e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d10e      	bne.n	8007e74 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007e56:	4b06      	ldr	r3, [pc, #24]	@ (8007e70 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007e58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e5a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8007e5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007e62:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007e66:	4a02      	ldr	r2, [pc, #8]	@ (8007e70 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007e68:	430b      	orrs	r3, r1
 8007e6a:	6593      	str	r3, [r2, #88]	@ 0x58
 8007e6c:	e006      	b.n	8007e7c <HAL_RCCEx_PeriphCLKConfig+0xcac>
 8007e6e:	bf00      	nop
 8007e70:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e74:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007e78:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007e7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e84:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8007e88:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007e92:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8007e96:	460b      	mov	r3, r1
 8007e98:	4313      	orrs	r3, r2
 8007e9a:	d055      	beq.n	8007f48 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8007e9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007ea0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007ea4:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007ea8:	d033      	beq.n	8007f12 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8007eaa:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007eae:	d82c      	bhi.n	8007f0a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8007eb0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007eb4:	d02f      	beq.n	8007f16 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8007eb6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007eba:	d826      	bhi.n	8007f0a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8007ebc:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007ec0:	d02b      	beq.n	8007f1a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8007ec2:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007ec6:	d820      	bhi.n	8007f0a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8007ec8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007ecc:	d012      	beq.n	8007ef4 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8007ece:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007ed2:	d81a      	bhi.n	8007f0a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d022      	beq.n	8007f1e <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8007ed8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007edc:	d115      	bne.n	8007f0a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007ede:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007ee2:	3308      	adds	r3, #8
 8007ee4:	2100      	movs	r1, #0
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	f000 fdee 	bl	8008ac8 <RCCEx_PLL2_Config>
 8007eec:	4603      	mov	r3, r0
 8007eee:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007ef2:	e015      	b.n	8007f20 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007ef4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007ef8:	3328      	adds	r3, #40	@ 0x28
 8007efa:	2102      	movs	r1, #2
 8007efc:	4618      	mov	r0, r3
 8007efe:	f000 fe95 	bl	8008c2c <RCCEx_PLL3_Config>
 8007f02:	4603      	mov	r3, r0
 8007f04:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007f08:	e00a      	b.n	8007f20 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007f0a:	2301      	movs	r3, #1
 8007f0c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007f10:	e006      	b.n	8007f20 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8007f12:	bf00      	nop
 8007f14:	e004      	b.n	8007f20 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8007f16:	bf00      	nop
 8007f18:	e002      	b.n	8007f20 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8007f1a:	bf00      	nop
 8007f1c:	e000      	b.n	8007f20 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8007f1e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f20:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d10b      	bne.n	8007f40 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007f28:	4ba1      	ldr	r3, [pc, #644]	@ (80081b0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007f2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f2c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8007f30:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007f34:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007f38:	4a9d      	ldr	r2, [pc, #628]	@ (80081b0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007f3a:	430b      	orrs	r3, r1
 8007f3c:	6593      	str	r3, [r2, #88]	@ 0x58
 8007f3e:	e003      	b.n	8007f48 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f40:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007f44:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007f48:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f50:	f002 0308 	and.w	r3, r2, #8
 8007f54:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007f58:	2300      	movs	r3, #0
 8007f5a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007f5e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8007f62:	460b      	mov	r3, r1
 8007f64:	4313      	orrs	r3, r2
 8007f66:	d01e      	beq.n	8007fa6 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8007f68:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007f6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007f70:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007f74:	d10c      	bne.n	8007f90 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007f76:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007f7a:	3328      	adds	r3, #40	@ 0x28
 8007f7c:	2102      	movs	r1, #2
 8007f7e:	4618      	mov	r0, r3
 8007f80:	f000 fe54 	bl	8008c2c <RCCEx_PLL3_Config>
 8007f84:	4603      	mov	r3, r0
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d002      	beq.n	8007f90 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 8007f8a:	2301      	movs	r3, #1
 8007f8c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007f90:	4b87      	ldr	r3, [pc, #540]	@ (80081b0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007f92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f94:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007f98:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007f9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007fa0:	4a83      	ldr	r2, [pc, #524]	@ (80081b0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007fa2:	430b      	orrs	r3, r1
 8007fa4:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007fa6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fae:	f002 0310 	and.w	r3, r2, #16
 8007fb2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007fbc:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8007fc0:	460b      	mov	r3, r1
 8007fc2:	4313      	orrs	r3, r2
 8007fc4:	d01e      	beq.n	8008004 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8007fc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007fca:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007fce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007fd2:	d10c      	bne.n	8007fee <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007fd4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007fd8:	3328      	adds	r3, #40	@ 0x28
 8007fda:	2102      	movs	r1, #2
 8007fdc:	4618      	mov	r0, r3
 8007fde:	f000 fe25 	bl	8008c2c <RCCEx_PLL3_Config>
 8007fe2:	4603      	mov	r3, r0
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d002      	beq.n	8007fee <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8007fe8:	2301      	movs	r3, #1
 8007fea:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007fee:	4b70      	ldr	r3, [pc, #448]	@ (80081b0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007ff0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ff2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007ff6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007ffa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007ffe:	4a6c      	ldr	r2, [pc, #432]	@ (80081b0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008000:	430b      	orrs	r3, r1
 8008002:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008004:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800800c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8008010:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008014:	2300      	movs	r3, #0
 8008016:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800801a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800801e:	460b      	mov	r3, r1
 8008020:	4313      	orrs	r3, r2
 8008022:	d03e      	beq.n	80080a2 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8008024:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008028:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800802c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008030:	d022      	beq.n	8008078 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 8008032:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008036:	d81b      	bhi.n	8008070 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8008038:	2b00      	cmp	r3, #0
 800803a:	d003      	beq.n	8008044 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 800803c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008040:	d00b      	beq.n	800805a <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8008042:	e015      	b.n	8008070 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008044:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008048:	3308      	adds	r3, #8
 800804a:	2100      	movs	r1, #0
 800804c:	4618      	mov	r0, r3
 800804e:	f000 fd3b 	bl	8008ac8 <RCCEx_PLL2_Config>
 8008052:	4603      	mov	r3, r0
 8008054:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008058:	e00f      	b.n	800807a <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800805a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800805e:	3328      	adds	r3, #40	@ 0x28
 8008060:	2102      	movs	r1, #2
 8008062:	4618      	mov	r0, r3
 8008064:	f000 fde2 	bl	8008c2c <RCCEx_PLL3_Config>
 8008068:	4603      	mov	r3, r0
 800806a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800806e:	e004      	b.n	800807a <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008070:	2301      	movs	r3, #1
 8008072:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008076:	e000      	b.n	800807a <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8008078:	bf00      	nop
    }

    if (ret == HAL_OK)
 800807a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800807e:	2b00      	cmp	r3, #0
 8008080:	d10b      	bne.n	800809a <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008082:	4b4b      	ldr	r3, [pc, #300]	@ (80081b0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008084:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008086:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800808a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800808e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008092:	4a47      	ldr	r2, [pc, #284]	@ (80081b0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008094:	430b      	orrs	r3, r1
 8008096:	6593      	str	r3, [r2, #88]	@ 0x58
 8008098:	e003      	b.n	80080a2 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800809a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800809e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80080a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80080a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080aa:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80080ae:	67bb      	str	r3, [r7, #120]	@ 0x78
 80080b0:	2300      	movs	r3, #0
 80080b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80080b4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80080b8:	460b      	mov	r3, r1
 80080ba:	4313      	orrs	r3, r2
 80080bc:	d03b      	beq.n	8008136 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80080be:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80080c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80080c6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80080ca:	d01f      	beq.n	800810c <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 80080cc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80080d0:	d818      	bhi.n	8008104 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80080d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80080d6:	d003      	beq.n	80080e0 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 80080d8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80080dc:	d007      	beq.n	80080ee <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 80080de:	e011      	b.n	8008104 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80080e0:	4b33      	ldr	r3, [pc, #204]	@ (80081b0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80080e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080e4:	4a32      	ldr	r2, [pc, #200]	@ (80081b0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80080e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80080ea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80080ec:	e00f      	b.n	800810e <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80080ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80080f2:	3328      	adds	r3, #40	@ 0x28
 80080f4:	2101      	movs	r1, #1
 80080f6:	4618      	mov	r0, r3
 80080f8:	f000 fd98 	bl	8008c2c <RCCEx_PLL3_Config>
 80080fc:	4603      	mov	r3, r0
 80080fe:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 8008102:	e004      	b.n	800810e <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008104:	2301      	movs	r3, #1
 8008106:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800810a:	e000      	b.n	800810e <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 800810c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800810e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008112:	2b00      	cmp	r3, #0
 8008114:	d10b      	bne.n	800812e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008116:	4b26      	ldr	r3, [pc, #152]	@ (80081b0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008118:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800811a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800811e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008122:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008126:	4a22      	ldr	r2, [pc, #136]	@ (80081b0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008128:	430b      	orrs	r3, r1
 800812a:	6553      	str	r3, [r2, #84]	@ 0x54
 800812c:	e003      	b.n	8008136 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800812e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008132:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008136:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800813a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800813e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8008142:	673b      	str	r3, [r7, #112]	@ 0x70
 8008144:	2300      	movs	r3, #0
 8008146:	677b      	str	r3, [r7, #116]	@ 0x74
 8008148:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800814c:	460b      	mov	r3, r1
 800814e:	4313      	orrs	r3, r2
 8008150:	d034      	beq.n	80081bc <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8008152:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008156:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008158:	2b00      	cmp	r3, #0
 800815a:	d003      	beq.n	8008164 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 800815c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008160:	d007      	beq.n	8008172 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8008162:	e011      	b.n	8008188 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008164:	4b12      	ldr	r3, [pc, #72]	@ (80081b0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008166:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008168:	4a11      	ldr	r2, [pc, #68]	@ (80081b0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800816a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800816e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008170:	e00e      	b.n	8008190 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008172:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008176:	3308      	adds	r3, #8
 8008178:	2102      	movs	r1, #2
 800817a:	4618      	mov	r0, r3
 800817c:	f000 fca4 	bl	8008ac8 <RCCEx_PLL2_Config>
 8008180:	4603      	mov	r3, r0
 8008182:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008186:	e003      	b.n	8008190 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8008188:	2301      	movs	r3, #1
 800818a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800818e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008190:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008194:	2b00      	cmp	r3, #0
 8008196:	d10d      	bne.n	80081b4 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008198:	4b05      	ldr	r3, [pc, #20]	@ (80081b0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800819a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800819c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80081a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80081a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80081a6:	4a02      	ldr	r2, [pc, #8]	@ (80081b0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80081a8:	430b      	orrs	r3, r1
 80081aa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80081ac:	e006      	b.n	80081bc <HAL_RCCEx_PeriphCLKConfig+0xfec>
 80081ae:	bf00      	nop
 80081b0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081b4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80081b8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80081bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80081c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081c4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80081c8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80081ca:	2300      	movs	r3, #0
 80081cc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80081ce:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80081d2:	460b      	mov	r3, r1
 80081d4:	4313      	orrs	r3, r2
 80081d6:	d00c      	beq.n	80081f2 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80081d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80081dc:	3328      	adds	r3, #40	@ 0x28
 80081de:	2102      	movs	r1, #2
 80081e0:	4618      	mov	r0, r3
 80081e2:	f000 fd23 	bl	8008c2c <RCCEx_PLL3_Config>
 80081e6:	4603      	mov	r3, r0
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d002      	beq.n	80081f2 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 80081ec:	2301      	movs	r3, #1
 80081ee:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80081f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80081f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081fa:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80081fe:	663b      	str	r3, [r7, #96]	@ 0x60
 8008200:	2300      	movs	r3, #0
 8008202:	667b      	str	r3, [r7, #100]	@ 0x64
 8008204:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8008208:	460b      	mov	r3, r1
 800820a:	4313      	orrs	r3, r2
 800820c:	d038      	beq.n	8008280 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 800820e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008212:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008216:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800821a:	d018      	beq.n	800824e <HAL_RCCEx_PeriphCLKConfig+0x107e>
 800821c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008220:	d811      	bhi.n	8008246 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8008222:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008226:	d014      	beq.n	8008252 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8008228:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800822c:	d80b      	bhi.n	8008246 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800822e:	2b00      	cmp	r3, #0
 8008230:	d011      	beq.n	8008256 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8008232:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008236:	d106      	bne.n	8008246 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008238:	4bc3      	ldr	r3, [pc, #780]	@ (8008548 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800823a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800823c:	4ac2      	ldr	r2, [pc, #776]	@ (8008548 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800823e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008242:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8008244:	e008      	b.n	8008258 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008246:	2301      	movs	r3, #1
 8008248:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800824c:	e004      	b.n	8008258 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800824e:	bf00      	nop
 8008250:	e002      	b.n	8008258 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8008252:	bf00      	nop
 8008254:	e000      	b.n	8008258 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8008256:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008258:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800825c:	2b00      	cmp	r3, #0
 800825e:	d10b      	bne.n	8008278 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008260:	4bb9      	ldr	r3, [pc, #740]	@ (8008548 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008262:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008264:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008268:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800826c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008270:	4ab5      	ldr	r2, [pc, #724]	@ (8008548 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008272:	430b      	orrs	r3, r1
 8008274:	6553      	str	r3, [r2, #84]	@ 0x54
 8008276:	e003      	b.n	8008280 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008278:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800827c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008280:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008288:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800828c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800828e:	2300      	movs	r3, #0
 8008290:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008292:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8008296:	460b      	mov	r3, r1
 8008298:	4313      	orrs	r3, r2
 800829a:	d009      	beq.n	80082b0 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800829c:	4baa      	ldr	r3, [pc, #680]	@ (8008548 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800829e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80082a0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80082a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80082a8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80082aa:	4aa7      	ldr	r2, [pc, #668]	@ (8008548 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80082ac:	430b      	orrs	r3, r1
 80082ae:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80082b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80082b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082b8:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80082bc:	653b      	str	r3, [r7, #80]	@ 0x50
 80082be:	2300      	movs	r3, #0
 80082c0:	657b      	str	r3, [r7, #84]	@ 0x54
 80082c2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80082c6:	460b      	mov	r3, r1
 80082c8:	4313      	orrs	r3, r2
 80082ca:	d009      	beq.n	80082e0 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80082cc:	4b9e      	ldr	r3, [pc, #632]	@ (8008548 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80082ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80082d0:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80082d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80082d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80082da:	4a9b      	ldr	r2, [pc, #620]	@ (8008548 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80082dc:	430b      	orrs	r3, r1
 80082de:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 80082e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80082e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082e8:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80082ec:	64bb      	str	r3, [r7, #72]	@ 0x48
 80082ee:	2300      	movs	r3, #0
 80082f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80082f2:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80082f6:	460b      	mov	r3, r1
 80082f8:	4313      	orrs	r3, r2
 80082fa:	d009      	beq.n	8008310 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 80082fc:	4b92      	ldr	r3, [pc, #584]	@ (8008548 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80082fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008300:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 8008304:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008308:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800830a:	4a8f      	ldr	r2, [pc, #572]	@ (8008548 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800830c:	430b      	orrs	r3, r1
 800830e:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008310:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008318:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800831c:	643b      	str	r3, [r7, #64]	@ 0x40
 800831e:	2300      	movs	r3, #0
 8008320:	647b      	str	r3, [r7, #68]	@ 0x44
 8008322:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8008326:	460b      	mov	r3, r1
 8008328:	4313      	orrs	r3, r2
 800832a:	d00e      	beq.n	800834a <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800832c:	4b86      	ldr	r3, [pc, #536]	@ (8008548 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800832e:	691b      	ldr	r3, [r3, #16]
 8008330:	4a85      	ldr	r2, [pc, #532]	@ (8008548 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008332:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008336:	6113      	str	r3, [r2, #16]
 8008338:	4b83      	ldr	r3, [pc, #524]	@ (8008548 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800833a:	6919      	ldr	r1, [r3, #16]
 800833c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008340:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8008344:	4a80      	ldr	r2, [pc, #512]	@ (8008548 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008346:	430b      	orrs	r3, r1
 8008348:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800834a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800834e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008352:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8008356:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008358:	2300      	movs	r3, #0
 800835a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800835c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8008360:	460b      	mov	r3, r1
 8008362:	4313      	orrs	r3, r2
 8008364:	d009      	beq.n	800837a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008366:	4b78      	ldr	r3, [pc, #480]	@ (8008548 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008368:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800836a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800836e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008372:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008374:	4a74      	ldr	r2, [pc, #464]	@ (8008548 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008376:	430b      	orrs	r3, r1
 8008378:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800837a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800837e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008382:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8008386:	633b      	str	r3, [r7, #48]	@ 0x30
 8008388:	2300      	movs	r3, #0
 800838a:	637b      	str	r3, [r7, #52]	@ 0x34
 800838c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8008390:	460b      	mov	r3, r1
 8008392:	4313      	orrs	r3, r2
 8008394:	d00a      	beq.n	80083ac <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008396:	4b6c      	ldr	r3, [pc, #432]	@ (8008548 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008398:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800839a:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800839e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80083a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80083a6:	4a68      	ldr	r2, [pc, #416]	@ (8008548 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80083a8:	430b      	orrs	r3, r1
 80083aa:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80083ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80083b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083b4:	2100      	movs	r1, #0
 80083b6:	62b9      	str	r1, [r7, #40]	@ 0x28
 80083b8:	f003 0301 	and.w	r3, r3, #1
 80083bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80083be:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80083c2:	460b      	mov	r3, r1
 80083c4:	4313      	orrs	r3, r2
 80083c6:	d011      	beq.n	80083ec <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80083c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80083cc:	3308      	adds	r3, #8
 80083ce:	2100      	movs	r1, #0
 80083d0:	4618      	mov	r0, r3
 80083d2:	f000 fb79 	bl	8008ac8 <RCCEx_PLL2_Config>
 80083d6:	4603      	mov	r3, r0
 80083d8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80083dc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d003      	beq.n	80083ec <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083e4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80083e8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80083ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80083f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083f4:	2100      	movs	r1, #0
 80083f6:	6239      	str	r1, [r7, #32]
 80083f8:	f003 0302 	and.w	r3, r3, #2
 80083fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80083fe:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8008402:	460b      	mov	r3, r1
 8008404:	4313      	orrs	r3, r2
 8008406:	d011      	beq.n	800842c <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008408:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800840c:	3308      	adds	r3, #8
 800840e:	2101      	movs	r1, #1
 8008410:	4618      	mov	r0, r3
 8008412:	f000 fb59 	bl	8008ac8 <RCCEx_PLL2_Config>
 8008416:	4603      	mov	r3, r0
 8008418:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800841c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008420:	2b00      	cmp	r3, #0
 8008422:	d003      	beq.n	800842c <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008424:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008428:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800842c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008434:	2100      	movs	r1, #0
 8008436:	61b9      	str	r1, [r7, #24]
 8008438:	f003 0304 	and.w	r3, r3, #4
 800843c:	61fb      	str	r3, [r7, #28]
 800843e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008442:	460b      	mov	r3, r1
 8008444:	4313      	orrs	r3, r2
 8008446:	d011      	beq.n	800846c <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008448:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800844c:	3308      	adds	r3, #8
 800844e:	2102      	movs	r1, #2
 8008450:	4618      	mov	r0, r3
 8008452:	f000 fb39 	bl	8008ac8 <RCCEx_PLL2_Config>
 8008456:	4603      	mov	r3, r0
 8008458:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800845c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008460:	2b00      	cmp	r3, #0
 8008462:	d003      	beq.n	800846c <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008464:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008468:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800846c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008474:	2100      	movs	r1, #0
 8008476:	6139      	str	r1, [r7, #16]
 8008478:	f003 0308 	and.w	r3, r3, #8
 800847c:	617b      	str	r3, [r7, #20]
 800847e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008482:	460b      	mov	r3, r1
 8008484:	4313      	orrs	r3, r2
 8008486:	d011      	beq.n	80084ac <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008488:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800848c:	3328      	adds	r3, #40	@ 0x28
 800848e:	2100      	movs	r1, #0
 8008490:	4618      	mov	r0, r3
 8008492:	f000 fbcb 	bl	8008c2c <RCCEx_PLL3_Config>
 8008496:	4603      	mov	r3, r0
 8008498:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 800849c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d003      	beq.n	80084ac <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084a4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80084a8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80084ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80084b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084b4:	2100      	movs	r1, #0
 80084b6:	60b9      	str	r1, [r7, #8]
 80084b8:	f003 0310 	and.w	r3, r3, #16
 80084bc:	60fb      	str	r3, [r7, #12]
 80084be:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80084c2:	460b      	mov	r3, r1
 80084c4:	4313      	orrs	r3, r2
 80084c6:	d011      	beq.n	80084ec <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80084c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80084cc:	3328      	adds	r3, #40	@ 0x28
 80084ce:	2101      	movs	r1, #1
 80084d0:	4618      	mov	r0, r3
 80084d2:	f000 fbab 	bl	8008c2c <RCCEx_PLL3_Config>
 80084d6:	4603      	mov	r3, r0
 80084d8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80084dc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d003      	beq.n	80084ec <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084e4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80084e8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80084ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80084f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084f4:	2100      	movs	r1, #0
 80084f6:	6039      	str	r1, [r7, #0]
 80084f8:	f003 0320 	and.w	r3, r3, #32
 80084fc:	607b      	str	r3, [r7, #4]
 80084fe:	e9d7 1200 	ldrd	r1, r2, [r7]
 8008502:	460b      	mov	r3, r1
 8008504:	4313      	orrs	r3, r2
 8008506:	d011      	beq.n	800852c <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008508:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800850c:	3328      	adds	r3, #40	@ 0x28
 800850e:	2102      	movs	r1, #2
 8008510:	4618      	mov	r0, r3
 8008512:	f000 fb8b 	bl	8008c2c <RCCEx_PLL3_Config>
 8008516:	4603      	mov	r3, r0
 8008518:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800851c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008520:	2b00      	cmp	r3, #0
 8008522:	d003      	beq.n	800852c <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008524:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008528:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 800852c:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8008530:	2b00      	cmp	r3, #0
 8008532:	d101      	bne.n	8008538 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8008534:	2300      	movs	r3, #0
 8008536:	e000      	b.n	800853a <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8008538:	2301      	movs	r3, #1
}
 800853a:	4618      	mov	r0, r3
 800853c:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8008540:	46bd      	mov	sp, r7
 8008542:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008546:	bf00      	nop
 8008548:	58024400 	.word	0x58024400

0800854c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800854c:	b580      	push	{r7, lr}
 800854e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8008550:	f7fe fda0 	bl	8007094 <HAL_RCC_GetHCLKFreq>
 8008554:	4602      	mov	r2, r0
 8008556:	4b06      	ldr	r3, [pc, #24]	@ (8008570 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008558:	6a1b      	ldr	r3, [r3, #32]
 800855a:	091b      	lsrs	r3, r3, #4
 800855c:	f003 0307 	and.w	r3, r3, #7
 8008560:	4904      	ldr	r1, [pc, #16]	@ (8008574 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008562:	5ccb      	ldrb	r3, [r1, r3]
 8008564:	f003 031f 	and.w	r3, r3, #31
 8008568:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800856c:	4618      	mov	r0, r3
 800856e:	bd80      	pop	{r7, pc}
 8008570:	58024400 	.word	0x58024400
 8008574:	0800c068 	.word	0x0800c068

08008578 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8008578:	b480      	push	{r7}
 800857a:	b089      	sub	sp, #36	@ 0x24
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008580:	4ba1      	ldr	r3, [pc, #644]	@ (8008808 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008582:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008584:	f003 0303 	and.w	r3, r3, #3
 8008588:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800858a:	4b9f      	ldr	r3, [pc, #636]	@ (8008808 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800858c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800858e:	0b1b      	lsrs	r3, r3, #12
 8008590:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008594:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008596:	4b9c      	ldr	r3, [pc, #624]	@ (8008808 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008598:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800859a:	091b      	lsrs	r3, r3, #4
 800859c:	f003 0301 	and.w	r3, r3, #1
 80085a0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80085a2:	4b99      	ldr	r3, [pc, #612]	@ (8008808 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80085a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085a6:	08db      	lsrs	r3, r3, #3
 80085a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80085ac:	693a      	ldr	r2, [r7, #16]
 80085ae:	fb02 f303 	mul.w	r3, r2, r3
 80085b2:	ee07 3a90 	vmov	s15, r3
 80085b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085ba:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80085be:	697b      	ldr	r3, [r7, #20]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	f000 8111 	beq.w	80087e8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80085c6:	69bb      	ldr	r3, [r7, #24]
 80085c8:	2b02      	cmp	r3, #2
 80085ca:	f000 8083 	beq.w	80086d4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80085ce:	69bb      	ldr	r3, [r7, #24]
 80085d0:	2b02      	cmp	r3, #2
 80085d2:	f200 80a1 	bhi.w	8008718 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80085d6:	69bb      	ldr	r3, [r7, #24]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d003      	beq.n	80085e4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80085dc:	69bb      	ldr	r3, [r7, #24]
 80085de:	2b01      	cmp	r3, #1
 80085e0:	d056      	beq.n	8008690 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80085e2:	e099      	b.n	8008718 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80085e4:	4b88      	ldr	r3, [pc, #544]	@ (8008808 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	f003 0320 	and.w	r3, r3, #32
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d02d      	beq.n	800864c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80085f0:	4b85      	ldr	r3, [pc, #532]	@ (8008808 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	08db      	lsrs	r3, r3, #3
 80085f6:	f003 0303 	and.w	r3, r3, #3
 80085fa:	4a84      	ldr	r2, [pc, #528]	@ (800880c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80085fc:	fa22 f303 	lsr.w	r3, r2, r3
 8008600:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008602:	68bb      	ldr	r3, [r7, #8]
 8008604:	ee07 3a90 	vmov	s15, r3
 8008608:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800860c:	697b      	ldr	r3, [r7, #20]
 800860e:	ee07 3a90 	vmov	s15, r3
 8008612:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008616:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800861a:	4b7b      	ldr	r3, [pc, #492]	@ (8008808 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800861c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800861e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008622:	ee07 3a90 	vmov	s15, r3
 8008626:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800862a:	ed97 6a03 	vldr	s12, [r7, #12]
 800862e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008810 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008632:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008636:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800863a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800863e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008642:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008646:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800864a:	e087      	b.n	800875c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800864c:	697b      	ldr	r3, [r7, #20]
 800864e:	ee07 3a90 	vmov	s15, r3
 8008652:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008656:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008814 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800865a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800865e:	4b6a      	ldr	r3, [pc, #424]	@ (8008808 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008660:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008662:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008666:	ee07 3a90 	vmov	s15, r3
 800866a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800866e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008672:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008810 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008676:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800867a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800867e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008682:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008686:	ee67 7a27 	vmul.f32	s15, s14, s15
 800868a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800868e:	e065      	b.n	800875c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008690:	697b      	ldr	r3, [r7, #20]
 8008692:	ee07 3a90 	vmov	s15, r3
 8008696:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800869a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008818 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800869e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80086a2:	4b59      	ldr	r3, [pc, #356]	@ (8008808 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80086a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086aa:	ee07 3a90 	vmov	s15, r3
 80086ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80086b6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008810 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80086ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80086be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80086c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80086c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80086ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80086d2:	e043      	b.n	800875c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80086d4:	697b      	ldr	r3, [r7, #20]
 80086d6:	ee07 3a90 	vmov	s15, r3
 80086da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086de:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800881c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80086e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80086e6:	4b48      	ldr	r3, [pc, #288]	@ (8008808 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80086e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086ee:	ee07 3a90 	vmov	s15, r3
 80086f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80086fa:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008810 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80086fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008702:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008706:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800870a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800870e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008712:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008716:	e021      	b.n	800875c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008718:	697b      	ldr	r3, [r7, #20]
 800871a:	ee07 3a90 	vmov	s15, r3
 800871e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008722:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008818 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008726:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800872a:	4b37      	ldr	r3, [pc, #220]	@ (8008808 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800872c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800872e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008732:	ee07 3a90 	vmov	s15, r3
 8008736:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800873a:	ed97 6a03 	vldr	s12, [r7, #12]
 800873e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008810 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008742:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008746:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800874a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800874e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008752:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008756:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800875a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800875c:	4b2a      	ldr	r3, [pc, #168]	@ (8008808 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800875e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008760:	0a5b      	lsrs	r3, r3, #9
 8008762:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008766:	ee07 3a90 	vmov	s15, r3
 800876a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800876e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008772:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008776:	edd7 6a07 	vldr	s13, [r7, #28]
 800877a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800877e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008782:	ee17 2a90 	vmov	r2, s15
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800878a:	4b1f      	ldr	r3, [pc, #124]	@ (8008808 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800878c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800878e:	0c1b      	lsrs	r3, r3, #16
 8008790:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008794:	ee07 3a90 	vmov	s15, r3
 8008798:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800879c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80087a0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80087a4:	edd7 6a07 	vldr	s13, [r7, #28]
 80087a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80087ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80087b0:	ee17 2a90 	vmov	r2, s15
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80087b8:	4b13      	ldr	r3, [pc, #76]	@ (8008808 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80087ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087bc:	0e1b      	lsrs	r3, r3, #24
 80087be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80087c2:	ee07 3a90 	vmov	s15, r3
 80087c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087ca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80087ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 80087d2:	edd7 6a07 	vldr	s13, [r7, #28]
 80087d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80087da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80087de:	ee17 2a90 	vmov	r2, s15
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80087e6:	e008      	b.n	80087fa <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	2200      	movs	r2, #0
 80087ec:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	2200      	movs	r2, #0
 80087f2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	2200      	movs	r2, #0
 80087f8:	609a      	str	r2, [r3, #8]
}
 80087fa:	bf00      	nop
 80087fc:	3724      	adds	r7, #36	@ 0x24
 80087fe:	46bd      	mov	sp, r7
 8008800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008804:	4770      	bx	lr
 8008806:	bf00      	nop
 8008808:	58024400 	.word	0x58024400
 800880c:	03d09000 	.word	0x03d09000
 8008810:	46000000 	.word	0x46000000
 8008814:	4c742400 	.word	0x4c742400
 8008818:	4a742400 	.word	0x4a742400
 800881c:	4bb71b00 	.word	0x4bb71b00

08008820 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8008820:	b480      	push	{r7}
 8008822:	b089      	sub	sp, #36	@ 0x24
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008828:	4ba1      	ldr	r3, [pc, #644]	@ (8008ab0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800882a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800882c:	f003 0303 	and.w	r3, r3, #3
 8008830:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8008832:	4b9f      	ldr	r3, [pc, #636]	@ (8008ab0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008834:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008836:	0d1b      	lsrs	r3, r3, #20
 8008838:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800883c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800883e:	4b9c      	ldr	r3, [pc, #624]	@ (8008ab0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008840:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008842:	0a1b      	lsrs	r3, r3, #8
 8008844:	f003 0301 	and.w	r3, r3, #1
 8008848:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800884a:	4b99      	ldr	r3, [pc, #612]	@ (8008ab0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800884c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800884e:	08db      	lsrs	r3, r3, #3
 8008850:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008854:	693a      	ldr	r2, [r7, #16]
 8008856:	fb02 f303 	mul.w	r3, r2, r3
 800885a:	ee07 3a90 	vmov	s15, r3
 800885e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008862:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008866:	697b      	ldr	r3, [r7, #20]
 8008868:	2b00      	cmp	r3, #0
 800886a:	f000 8111 	beq.w	8008a90 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800886e:	69bb      	ldr	r3, [r7, #24]
 8008870:	2b02      	cmp	r3, #2
 8008872:	f000 8083 	beq.w	800897c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008876:	69bb      	ldr	r3, [r7, #24]
 8008878:	2b02      	cmp	r3, #2
 800887a:	f200 80a1 	bhi.w	80089c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800887e:	69bb      	ldr	r3, [r7, #24]
 8008880:	2b00      	cmp	r3, #0
 8008882:	d003      	beq.n	800888c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008884:	69bb      	ldr	r3, [r7, #24]
 8008886:	2b01      	cmp	r3, #1
 8008888:	d056      	beq.n	8008938 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800888a:	e099      	b.n	80089c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800888c:	4b88      	ldr	r3, [pc, #544]	@ (8008ab0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	f003 0320 	and.w	r3, r3, #32
 8008894:	2b00      	cmp	r3, #0
 8008896:	d02d      	beq.n	80088f4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008898:	4b85      	ldr	r3, [pc, #532]	@ (8008ab0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	08db      	lsrs	r3, r3, #3
 800889e:	f003 0303 	and.w	r3, r3, #3
 80088a2:	4a84      	ldr	r2, [pc, #528]	@ (8008ab4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80088a4:	fa22 f303 	lsr.w	r3, r2, r3
 80088a8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80088aa:	68bb      	ldr	r3, [r7, #8]
 80088ac:	ee07 3a90 	vmov	s15, r3
 80088b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088b4:	697b      	ldr	r3, [r7, #20]
 80088b6:	ee07 3a90 	vmov	s15, r3
 80088ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088c2:	4b7b      	ldr	r3, [pc, #492]	@ (8008ab0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80088c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088ca:	ee07 3a90 	vmov	s15, r3
 80088ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80088d6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008ab8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80088da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80088de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80088e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80088e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088ee:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80088f2:	e087      	b.n	8008a04 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80088f4:	697b      	ldr	r3, [r7, #20]
 80088f6:	ee07 3a90 	vmov	s15, r3
 80088fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088fe:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008abc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008902:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008906:	4b6a      	ldr	r3, [pc, #424]	@ (8008ab0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008908:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800890a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800890e:	ee07 3a90 	vmov	s15, r3
 8008912:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008916:	ed97 6a03 	vldr	s12, [r7, #12]
 800891a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008ab8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800891e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008922:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008926:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800892a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800892e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008932:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008936:	e065      	b.n	8008a04 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008938:	697b      	ldr	r3, [r7, #20]
 800893a:	ee07 3a90 	vmov	s15, r3
 800893e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008942:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008ac0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008946:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800894a:	4b59      	ldr	r3, [pc, #356]	@ (8008ab0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800894c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800894e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008952:	ee07 3a90 	vmov	s15, r3
 8008956:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800895a:	ed97 6a03 	vldr	s12, [r7, #12]
 800895e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008ab8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008962:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008966:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800896a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800896e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008972:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008976:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800897a:	e043      	b.n	8008a04 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800897c:	697b      	ldr	r3, [r7, #20]
 800897e:	ee07 3a90 	vmov	s15, r3
 8008982:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008986:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008ac4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800898a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800898e:	4b48      	ldr	r3, [pc, #288]	@ (8008ab0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008990:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008992:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008996:	ee07 3a90 	vmov	s15, r3
 800899a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800899e:	ed97 6a03 	vldr	s12, [r7, #12]
 80089a2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008ab8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80089a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80089aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80089ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80089b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80089b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80089be:	e021      	b.n	8008a04 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80089c0:	697b      	ldr	r3, [r7, #20]
 80089c2:	ee07 3a90 	vmov	s15, r3
 80089c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089ca:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008ac0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80089ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80089d2:	4b37      	ldr	r3, [pc, #220]	@ (8008ab0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80089d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089da:	ee07 3a90 	vmov	s15, r3
 80089de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80089e6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008ab8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80089ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80089ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80089f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80089f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80089fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008a02:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8008a04:	4b2a      	ldr	r3, [pc, #168]	@ (8008ab0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a08:	0a5b      	lsrs	r3, r3, #9
 8008a0a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008a0e:	ee07 3a90 	vmov	s15, r3
 8008a12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a16:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008a1a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008a1e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008a22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008a26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008a2a:	ee17 2a90 	vmov	r2, s15
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8008a32:	4b1f      	ldr	r3, [pc, #124]	@ (8008ab0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a36:	0c1b      	lsrs	r3, r3, #16
 8008a38:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008a3c:	ee07 3a90 	vmov	s15, r3
 8008a40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a44:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008a48:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008a4c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008a50:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008a54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008a58:	ee17 2a90 	vmov	r2, s15
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8008a60:	4b13      	ldr	r3, [pc, #76]	@ (8008ab0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a64:	0e1b      	lsrs	r3, r3, #24
 8008a66:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008a6a:	ee07 3a90 	vmov	s15, r3
 8008a6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a72:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008a76:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008a7a:	edd7 6a07 	vldr	s13, [r7, #28]
 8008a7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008a82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008a86:	ee17 2a90 	vmov	r2, s15
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008a8e:	e008      	b.n	8008aa2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	2200      	movs	r2, #0
 8008a94:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	2200      	movs	r2, #0
 8008a9a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	2200      	movs	r2, #0
 8008aa0:	609a      	str	r2, [r3, #8]
}
 8008aa2:	bf00      	nop
 8008aa4:	3724      	adds	r7, #36	@ 0x24
 8008aa6:	46bd      	mov	sp, r7
 8008aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aac:	4770      	bx	lr
 8008aae:	bf00      	nop
 8008ab0:	58024400 	.word	0x58024400
 8008ab4:	03d09000 	.word	0x03d09000
 8008ab8:	46000000 	.word	0x46000000
 8008abc:	4c742400 	.word	0x4c742400
 8008ac0:	4a742400 	.word	0x4a742400
 8008ac4:	4bb71b00 	.word	0x4bb71b00

08008ac8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b084      	sub	sp, #16
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
 8008ad0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008ad6:	4b53      	ldr	r3, [pc, #332]	@ (8008c24 <RCCEx_PLL2_Config+0x15c>)
 8008ad8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ada:	f003 0303 	and.w	r3, r3, #3
 8008ade:	2b03      	cmp	r3, #3
 8008ae0:	d101      	bne.n	8008ae6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008ae2:	2301      	movs	r3, #1
 8008ae4:	e099      	b.n	8008c1a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008ae6:	4b4f      	ldr	r3, [pc, #316]	@ (8008c24 <RCCEx_PLL2_Config+0x15c>)
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	4a4e      	ldr	r2, [pc, #312]	@ (8008c24 <RCCEx_PLL2_Config+0x15c>)
 8008aec:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008af0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008af2:	f7f8 fad9 	bl	80010a8 <HAL_GetTick>
 8008af6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008af8:	e008      	b.n	8008b0c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008afa:	f7f8 fad5 	bl	80010a8 <HAL_GetTick>
 8008afe:	4602      	mov	r2, r0
 8008b00:	68bb      	ldr	r3, [r7, #8]
 8008b02:	1ad3      	subs	r3, r2, r3
 8008b04:	2b02      	cmp	r3, #2
 8008b06:	d901      	bls.n	8008b0c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008b08:	2303      	movs	r3, #3
 8008b0a:	e086      	b.n	8008c1a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008b0c:	4b45      	ldr	r3, [pc, #276]	@ (8008c24 <RCCEx_PLL2_Config+0x15c>)
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d1f0      	bne.n	8008afa <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008b18:	4b42      	ldr	r3, [pc, #264]	@ (8008c24 <RCCEx_PLL2_Config+0x15c>)
 8008b1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b1c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	031b      	lsls	r3, r3, #12
 8008b26:	493f      	ldr	r1, [pc, #252]	@ (8008c24 <RCCEx_PLL2_Config+0x15c>)
 8008b28:	4313      	orrs	r3, r2
 8008b2a:	628b      	str	r3, [r1, #40]	@ 0x28
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	685b      	ldr	r3, [r3, #4]
 8008b30:	3b01      	subs	r3, #1
 8008b32:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	689b      	ldr	r3, [r3, #8]
 8008b3a:	3b01      	subs	r3, #1
 8008b3c:	025b      	lsls	r3, r3, #9
 8008b3e:	b29b      	uxth	r3, r3
 8008b40:	431a      	orrs	r2, r3
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	68db      	ldr	r3, [r3, #12]
 8008b46:	3b01      	subs	r3, #1
 8008b48:	041b      	lsls	r3, r3, #16
 8008b4a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008b4e:	431a      	orrs	r2, r3
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	691b      	ldr	r3, [r3, #16]
 8008b54:	3b01      	subs	r3, #1
 8008b56:	061b      	lsls	r3, r3, #24
 8008b58:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008b5c:	4931      	ldr	r1, [pc, #196]	@ (8008c24 <RCCEx_PLL2_Config+0x15c>)
 8008b5e:	4313      	orrs	r3, r2
 8008b60:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008b62:	4b30      	ldr	r3, [pc, #192]	@ (8008c24 <RCCEx_PLL2_Config+0x15c>)
 8008b64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b66:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	695b      	ldr	r3, [r3, #20]
 8008b6e:	492d      	ldr	r1, [pc, #180]	@ (8008c24 <RCCEx_PLL2_Config+0x15c>)
 8008b70:	4313      	orrs	r3, r2
 8008b72:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008b74:	4b2b      	ldr	r3, [pc, #172]	@ (8008c24 <RCCEx_PLL2_Config+0x15c>)
 8008b76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b78:	f023 0220 	bic.w	r2, r3, #32
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	699b      	ldr	r3, [r3, #24]
 8008b80:	4928      	ldr	r1, [pc, #160]	@ (8008c24 <RCCEx_PLL2_Config+0x15c>)
 8008b82:	4313      	orrs	r3, r2
 8008b84:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008b86:	4b27      	ldr	r3, [pc, #156]	@ (8008c24 <RCCEx_PLL2_Config+0x15c>)
 8008b88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b8a:	4a26      	ldr	r2, [pc, #152]	@ (8008c24 <RCCEx_PLL2_Config+0x15c>)
 8008b8c:	f023 0310 	bic.w	r3, r3, #16
 8008b90:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008b92:	4b24      	ldr	r3, [pc, #144]	@ (8008c24 <RCCEx_PLL2_Config+0x15c>)
 8008b94:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008b96:	4b24      	ldr	r3, [pc, #144]	@ (8008c28 <RCCEx_PLL2_Config+0x160>)
 8008b98:	4013      	ands	r3, r2
 8008b9a:	687a      	ldr	r2, [r7, #4]
 8008b9c:	69d2      	ldr	r2, [r2, #28]
 8008b9e:	00d2      	lsls	r2, r2, #3
 8008ba0:	4920      	ldr	r1, [pc, #128]	@ (8008c24 <RCCEx_PLL2_Config+0x15c>)
 8008ba2:	4313      	orrs	r3, r2
 8008ba4:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008ba6:	4b1f      	ldr	r3, [pc, #124]	@ (8008c24 <RCCEx_PLL2_Config+0x15c>)
 8008ba8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008baa:	4a1e      	ldr	r2, [pc, #120]	@ (8008c24 <RCCEx_PLL2_Config+0x15c>)
 8008bac:	f043 0310 	orr.w	r3, r3, #16
 8008bb0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008bb2:	683b      	ldr	r3, [r7, #0]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d106      	bne.n	8008bc6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008bb8:	4b1a      	ldr	r3, [pc, #104]	@ (8008c24 <RCCEx_PLL2_Config+0x15c>)
 8008bba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bbc:	4a19      	ldr	r2, [pc, #100]	@ (8008c24 <RCCEx_PLL2_Config+0x15c>)
 8008bbe:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008bc2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008bc4:	e00f      	b.n	8008be6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	2b01      	cmp	r3, #1
 8008bca:	d106      	bne.n	8008bda <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008bcc:	4b15      	ldr	r3, [pc, #84]	@ (8008c24 <RCCEx_PLL2_Config+0x15c>)
 8008bce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bd0:	4a14      	ldr	r2, [pc, #80]	@ (8008c24 <RCCEx_PLL2_Config+0x15c>)
 8008bd2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008bd6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008bd8:	e005      	b.n	8008be6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008bda:	4b12      	ldr	r3, [pc, #72]	@ (8008c24 <RCCEx_PLL2_Config+0x15c>)
 8008bdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bde:	4a11      	ldr	r2, [pc, #68]	@ (8008c24 <RCCEx_PLL2_Config+0x15c>)
 8008be0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008be4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008be6:	4b0f      	ldr	r3, [pc, #60]	@ (8008c24 <RCCEx_PLL2_Config+0x15c>)
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	4a0e      	ldr	r2, [pc, #56]	@ (8008c24 <RCCEx_PLL2_Config+0x15c>)
 8008bec:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008bf0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008bf2:	f7f8 fa59 	bl	80010a8 <HAL_GetTick>
 8008bf6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008bf8:	e008      	b.n	8008c0c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008bfa:	f7f8 fa55 	bl	80010a8 <HAL_GetTick>
 8008bfe:	4602      	mov	r2, r0
 8008c00:	68bb      	ldr	r3, [r7, #8]
 8008c02:	1ad3      	subs	r3, r2, r3
 8008c04:	2b02      	cmp	r3, #2
 8008c06:	d901      	bls.n	8008c0c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008c08:	2303      	movs	r3, #3
 8008c0a:	e006      	b.n	8008c1a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008c0c:	4b05      	ldr	r3, [pc, #20]	@ (8008c24 <RCCEx_PLL2_Config+0x15c>)
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d0f0      	beq.n	8008bfa <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008c18:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	3710      	adds	r7, #16
 8008c1e:	46bd      	mov	sp, r7
 8008c20:	bd80      	pop	{r7, pc}
 8008c22:	bf00      	nop
 8008c24:	58024400 	.word	0x58024400
 8008c28:	ffff0007 	.word	0xffff0007

08008c2c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008c2c:	b580      	push	{r7, lr}
 8008c2e:	b084      	sub	sp, #16
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
 8008c34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008c36:	2300      	movs	r3, #0
 8008c38:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008c3a:	4b53      	ldr	r3, [pc, #332]	@ (8008d88 <RCCEx_PLL3_Config+0x15c>)
 8008c3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c3e:	f003 0303 	and.w	r3, r3, #3
 8008c42:	2b03      	cmp	r3, #3
 8008c44:	d101      	bne.n	8008c4a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008c46:	2301      	movs	r3, #1
 8008c48:	e099      	b.n	8008d7e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008c4a:	4b4f      	ldr	r3, [pc, #316]	@ (8008d88 <RCCEx_PLL3_Config+0x15c>)
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	4a4e      	ldr	r2, [pc, #312]	@ (8008d88 <RCCEx_PLL3_Config+0x15c>)
 8008c50:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008c54:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008c56:	f7f8 fa27 	bl	80010a8 <HAL_GetTick>
 8008c5a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008c5c:	e008      	b.n	8008c70 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008c5e:	f7f8 fa23 	bl	80010a8 <HAL_GetTick>
 8008c62:	4602      	mov	r2, r0
 8008c64:	68bb      	ldr	r3, [r7, #8]
 8008c66:	1ad3      	subs	r3, r2, r3
 8008c68:	2b02      	cmp	r3, #2
 8008c6a:	d901      	bls.n	8008c70 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008c6c:	2303      	movs	r3, #3
 8008c6e:	e086      	b.n	8008d7e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008c70:	4b45      	ldr	r3, [pc, #276]	@ (8008d88 <RCCEx_PLL3_Config+0x15c>)
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d1f0      	bne.n	8008c5e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008c7c:	4b42      	ldr	r3, [pc, #264]	@ (8008d88 <RCCEx_PLL3_Config+0x15c>)
 8008c7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c80:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	051b      	lsls	r3, r3, #20
 8008c8a:	493f      	ldr	r1, [pc, #252]	@ (8008d88 <RCCEx_PLL3_Config+0x15c>)
 8008c8c:	4313      	orrs	r3, r2
 8008c8e:	628b      	str	r3, [r1, #40]	@ 0x28
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	685b      	ldr	r3, [r3, #4]
 8008c94:	3b01      	subs	r3, #1
 8008c96:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	689b      	ldr	r3, [r3, #8]
 8008c9e:	3b01      	subs	r3, #1
 8008ca0:	025b      	lsls	r3, r3, #9
 8008ca2:	b29b      	uxth	r3, r3
 8008ca4:	431a      	orrs	r2, r3
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	68db      	ldr	r3, [r3, #12]
 8008caa:	3b01      	subs	r3, #1
 8008cac:	041b      	lsls	r3, r3, #16
 8008cae:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008cb2:	431a      	orrs	r2, r3
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	691b      	ldr	r3, [r3, #16]
 8008cb8:	3b01      	subs	r3, #1
 8008cba:	061b      	lsls	r3, r3, #24
 8008cbc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008cc0:	4931      	ldr	r1, [pc, #196]	@ (8008d88 <RCCEx_PLL3_Config+0x15c>)
 8008cc2:	4313      	orrs	r3, r2
 8008cc4:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008cc6:	4b30      	ldr	r3, [pc, #192]	@ (8008d88 <RCCEx_PLL3_Config+0x15c>)
 8008cc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cca:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	695b      	ldr	r3, [r3, #20]
 8008cd2:	492d      	ldr	r1, [pc, #180]	@ (8008d88 <RCCEx_PLL3_Config+0x15c>)
 8008cd4:	4313      	orrs	r3, r2
 8008cd6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008cd8:	4b2b      	ldr	r3, [pc, #172]	@ (8008d88 <RCCEx_PLL3_Config+0x15c>)
 8008cda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cdc:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	699b      	ldr	r3, [r3, #24]
 8008ce4:	4928      	ldr	r1, [pc, #160]	@ (8008d88 <RCCEx_PLL3_Config+0x15c>)
 8008ce6:	4313      	orrs	r3, r2
 8008ce8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008cea:	4b27      	ldr	r3, [pc, #156]	@ (8008d88 <RCCEx_PLL3_Config+0x15c>)
 8008cec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cee:	4a26      	ldr	r2, [pc, #152]	@ (8008d88 <RCCEx_PLL3_Config+0x15c>)
 8008cf0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008cf4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008cf6:	4b24      	ldr	r3, [pc, #144]	@ (8008d88 <RCCEx_PLL3_Config+0x15c>)
 8008cf8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008cfa:	4b24      	ldr	r3, [pc, #144]	@ (8008d8c <RCCEx_PLL3_Config+0x160>)
 8008cfc:	4013      	ands	r3, r2
 8008cfe:	687a      	ldr	r2, [r7, #4]
 8008d00:	69d2      	ldr	r2, [r2, #28]
 8008d02:	00d2      	lsls	r2, r2, #3
 8008d04:	4920      	ldr	r1, [pc, #128]	@ (8008d88 <RCCEx_PLL3_Config+0x15c>)
 8008d06:	4313      	orrs	r3, r2
 8008d08:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008d0a:	4b1f      	ldr	r3, [pc, #124]	@ (8008d88 <RCCEx_PLL3_Config+0x15c>)
 8008d0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d0e:	4a1e      	ldr	r2, [pc, #120]	@ (8008d88 <RCCEx_PLL3_Config+0x15c>)
 8008d10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008d14:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008d16:	683b      	ldr	r3, [r7, #0]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d106      	bne.n	8008d2a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008d1c:	4b1a      	ldr	r3, [pc, #104]	@ (8008d88 <RCCEx_PLL3_Config+0x15c>)
 8008d1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d20:	4a19      	ldr	r2, [pc, #100]	@ (8008d88 <RCCEx_PLL3_Config+0x15c>)
 8008d22:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8008d26:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008d28:	e00f      	b.n	8008d4a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008d2a:	683b      	ldr	r3, [r7, #0]
 8008d2c:	2b01      	cmp	r3, #1
 8008d2e:	d106      	bne.n	8008d3e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008d30:	4b15      	ldr	r3, [pc, #84]	@ (8008d88 <RCCEx_PLL3_Config+0x15c>)
 8008d32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d34:	4a14      	ldr	r2, [pc, #80]	@ (8008d88 <RCCEx_PLL3_Config+0x15c>)
 8008d36:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008d3a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008d3c:	e005      	b.n	8008d4a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008d3e:	4b12      	ldr	r3, [pc, #72]	@ (8008d88 <RCCEx_PLL3_Config+0x15c>)
 8008d40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d42:	4a11      	ldr	r2, [pc, #68]	@ (8008d88 <RCCEx_PLL3_Config+0x15c>)
 8008d44:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008d48:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008d4a:	4b0f      	ldr	r3, [pc, #60]	@ (8008d88 <RCCEx_PLL3_Config+0x15c>)
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	4a0e      	ldr	r2, [pc, #56]	@ (8008d88 <RCCEx_PLL3_Config+0x15c>)
 8008d50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008d54:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008d56:	f7f8 f9a7 	bl	80010a8 <HAL_GetTick>
 8008d5a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008d5c:	e008      	b.n	8008d70 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008d5e:	f7f8 f9a3 	bl	80010a8 <HAL_GetTick>
 8008d62:	4602      	mov	r2, r0
 8008d64:	68bb      	ldr	r3, [r7, #8]
 8008d66:	1ad3      	subs	r3, r2, r3
 8008d68:	2b02      	cmp	r3, #2
 8008d6a:	d901      	bls.n	8008d70 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008d6c:	2303      	movs	r3, #3
 8008d6e:	e006      	b.n	8008d7e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008d70:	4b05      	ldr	r3, [pc, #20]	@ (8008d88 <RCCEx_PLL3_Config+0x15c>)
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d0f0      	beq.n	8008d5e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008d7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d7e:	4618      	mov	r0, r3
 8008d80:	3710      	adds	r7, #16
 8008d82:	46bd      	mov	sp, r7
 8008d84:	bd80      	pop	{r7, pc}
 8008d86:	bf00      	nop
 8008d88:	58024400 	.word	0x58024400
 8008d8c:	ffff0007 	.word	0xffff0007

08008d90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008d90:	b580      	push	{r7, lr}
 8008d92:	b082      	sub	sp, #8
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d101      	bne.n	8008da2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008d9e:	2301      	movs	r3, #1
 8008da0:	e049      	b.n	8008e36 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008da8:	b2db      	uxtb	r3, r3
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d106      	bne.n	8008dbc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	2200      	movs	r2, #0
 8008db2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008db6:	6878      	ldr	r0, [r7, #4]
 8008db8:	f000 f841 	bl	8008e3e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	2202      	movs	r2, #2
 8008dc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681a      	ldr	r2, [r3, #0]
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	3304      	adds	r3, #4
 8008dcc:	4619      	mov	r1, r3
 8008dce:	4610      	mov	r0, r2
 8008dd0:	f000 f9e8 	bl	80091a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	2201      	movs	r2, #1
 8008dd8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	2201      	movs	r2, #1
 8008de0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	2201      	movs	r2, #1
 8008de8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	2201      	movs	r2, #1
 8008df0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	2201      	movs	r2, #1
 8008df8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	2201      	movs	r2, #1
 8008e00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2201      	movs	r2, #1
 8008e08:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	2201      	movs	r2, #1
 8008e10:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	2201      	movs	r2, #1
 8008e18:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	2201      	movs	r2, #1
 8008e20:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2201      	movs	r2, #1
 8008e28:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	2201      	movs	r2, #1
 8008e30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008e34:	2300      	movs	r3, #0
}
 8008e36:	4618      	mov	r0, r3
 8008e38:	3708      	adds	r7, #8
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	bd80      	pop	{r7, pc}

08008e3e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8008e3e:	b480      	push	{r7}
 8008e40:	b083      	sub	sp, #12
 8008e42:	af00      	add	r7, sp, #0
 8008e44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8008e46:	bf00      	nop
 8008e48:	370c      	adds	r7, #12
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e50:	4770      	bx	lr
	...

08008e54 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008e54:	b480      	push	{r7}
 8008e56:	b085      	sub	sp, #20
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008e62:	b2db      	uxtb	r3, r3
 8008e64:	2b01      	cmp	r3, #1
 8008e66:	d001      	beq.n	8008e6c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008e68:	2301      	movs	r3, #1
 8008e6a:	e054      	b.n	8008f16 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	2202      	movs	r2, #2
 8008e70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	68da      	ldr	r2, [r3, #12]
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	f042 0201 	orr.w	r2, r2, #1
 8008e82:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	4a26      	ldr	r2, [pc, #152]	@ (8008f24 <HAL_TIM_Base_Start_IT+0xd0>)
 8008e8a:	4293      	cmp	r3, r2
 8008e8c:	d022      	beq.n	8008ed4 <HAL_TIM_Base_Start_IT+0x80>
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008e96:	d01d      	beq.n	8008ed4 <HAL_TIM_Base_Start_IT+0x80>
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	4a22      	ldr	r2, [pc, #136]	@ (8008f28 <HAL_TIM_Base_Start_IT+0xd4>)
 8008e9e:	4293      	cmp	r3, r2
 8008ea0:	d018      	beq.n	8008ed4 <HAL_TIM_Base_Start_IT+0x80>
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	4a21      	ldr	r2, [pc, #132]	@ (8008f2c <HAL_TIM_Base_Start_IT+0xd8>)
 8008ea8:	4293      	cmp	r3, r2
 8008eaa:	d013      	beq.n	8008ed4 <HAL_TIM_Base_Start_IT+0x80>
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	4a1f      	ldr	r2, [pc, #124]	@ (8008f30 <HAL_TIM_Base_Start_IT+0xdc>)
 8008eb2:	4293      	cmp	r3, r2
 8008eb4:	d00e      	beq.n	8008ed4 <HAL_TIM_Base_Start_IT+0x80>
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	4a1e      	ldr	r2, [pc, #120]	@ (8008f34 <HAL_TIM_Base_Start_IT+0xe0>)
 8008ebc:	4293      	cmp	r3, r2
 8008ebe:	d009      	beq.n	8008ed4 <HAL_TIM_Base_Start_IT+0x80>
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	4a1c      	ldr	r2, [pc, #112]	@ (8008f38 <HAL_TIM_Base_Start_IT+0xe4>)
 8008ec6:	4293      	cmp	r3, r2
 8008ec8:	d004      	beq.n	8008ed4 <HAL_TIM_Base_Start_IT+0x80>
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	4a1b      	ldr	r2, [pc, #108]	@ (8008f3c <HAL_TIM_Base_Start_IT+0xe8>)
 8008ed0:	4293      	cmp	r3, r2
 8008ed2:	d115      	bne.n	8008f00 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	689a      	ldr	r2, [r3, #8]
 8008eda:	4b19      	ldr	r3, [pc, #100]	@ (8008f40 <HAL_TIM_Base_Start_IT+0xec>)
 8008edc:	4013      	ands	r3, r2
 8008ede:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	2b06      	cmp	r3, #6
 8008ee4:	d015      	beq.n	8008f12 <HAL_TIM_Base_Start_IT+0xbe>
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008eec:	d011      	beq.n	8008f12 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	681a      	ldr	r2, [r3, #0]
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	f042 0201 	orr.w	r2, r2, #1
 8008efc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008efe:	e008      	b.n	8008f12 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	681a      	ldr	r2, [r3, #0]
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	f042 0201 	orr.w	r2, r2, #1
 8008f0e:	601a      	str	r2, [r3, #0]
 8008f10:	e000      	b.n	8008f14 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f12:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008f14:	2300      	movs	r3, #0
}
 8008f16:	4618      	mov	r0, r3
 8008f18:	3714      	adds	r7, #20
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f20:	4770      	bx	lr
 8008f22:	bf00      	nop
 8008f24:	40010000 	.word	0x40010000
 8008f28:	40000400 	.word	0x40000400
 8008f2c:	40000800 	.word	0x40000800
 8008f30:	40000c00 	.word	0x40000c00
 8008f34:	40010400 	.word	0x40010400
 8008f38:	40001800 	.word	0x40001800
 8008f3c:	40014000 	.word	0x40014000
 8008f40:	00010007 	.word	0x00010007

08008f44 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008f44:	b580      	push	{r7, lr}
 8008f46:	b084      	sub	sp, #16
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	68db      	ldr	r3, [r3, #12]
 8008f52:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	691b      	ldr	r3, [r3, #16]
 8008f5a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008f5c:	68bb      	ldr	r3, [r7, #8]
 8008f5e:	f003 0302 	and.w	r3, r3, #2
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d020      	beq.n	8008fa8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	f003 0302 	and.w	r3, r3, #2
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d01b      	beq.n	8008fa8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	f06f 0202 	mvn.w	r2, #2
 8008f78:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	2201      	movs	r2, #1
 8008f7e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	699b      	ldr	r3, [r3, #24]
 8008f86:	f003 0303 	and.w	r3, r3, #3
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d003      	beq.n	8008f96 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008f8e:	6878      	ldr	r0, [r7, #4]
 8008f90:	f000 f8e9 	bl	8009166 <HAL_TIM_IC_CaptureCallback>
 8008f94:	e005      	b.n	8008fa2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f96:	6878      	ldr	r0, [r7, #4]
 8008f98:	f000 f8db 	bl	8009152 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f9c:	6878      	ldr	r0, [r7, #4]
 8008f9e:	f000 f8ec 	bl	800917a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008fa8:	68bb      	ldr	r3, [r7, #8]
 8008faa:	f003 0304 	and.w	r3, r3, #4
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d020      	beq.n	8008ff4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	f003 0304 	and.w	r3, r3, #4
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d01b      	beq.n	8008ff4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	f06f 0204 	mvn.w	r2, #4
 8008fc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	2202      	movs	r2, #2
 8008fca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	699b      	ldr	r3, [r3, #24]
 8008fd2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d003      	beq.n	8008fe2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008fda:	6878      	ldr	r0, [r7, #4]
 8008fdc:	f000 f8c3 	bl	8009166 <HAL_TIM_IC_CaptureCallback>
 8008fe0:	e005      	b.n	8008fee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008fe2:	6878      	ldr	r0, [r7, #4]
 8008fe4:	f000 f8b5 	bl	8009152 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008fe8:	6878      	ldr	r0, [r7, #4]
 8008fea:	f000 f8c6 	bl	800917a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	2200      	movs	r2, #0
 8008ff2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008ff4:	68bb      	ldr	r3, [r7, #8]
 8008ff6:	f003 0308 	and.w	r3, r3, #8
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d020      	beq.n	8009040 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	f003 0308 	and.w	r3, r3, #8
 8009004:	2b00      	cmp	r3, #0
 8009006:	d01b      	beq.n	8009040 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	f06f 0208 	mvn.w	r2, #8
 8009010:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	2204      	movs	r2, #4
 8009016:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	69db      	ldr	r3, [r3, #28]
 800901e:	f003 0303 	and.w	r3, r3, #3
 8009022:	2b00      	cmp	r3, #0
 8009024:	d003      	beq.n	800902e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009026:	6878      	ldr	r0, [r7, #4]
 8009028:	f000 f89d 	bl	8009166 <HAL_TIM_IC_CaptureCallback>
 800902c:	e005      	b.n	800903a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800902e:	6878      	ldr	r0, [r7, #4]
 8009030:	f000 f88f 	bl	8009152 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009034:	6878      	ldr	r0, [r7, #4]
 8009036:	f000 f8a0 	bl	800917a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	2200      	movs	r2, #0
 800903e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009040:	68bb      	ldr	r3, [r7, #8]
 8009042:	f003 0310 	and.w	r3, r3, #16
 8009046:	2b00      	cmp	r3, #0
 8009048:	d020      	beq.n	800908c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	f003 0310 	and.w	r3, r3, #16
 8009050:	2b00      	cmp	r3, #0
 8009052:	d01b      	beq.n	800908c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	f06f 0210 	mvn.w	r2, #16
 800905c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	2208      	movs	r2, #8
 8009062:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	69db      	ldr	r3, [r3, #28]
 800906a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800906e:	2b00      	cmp	r3, #0
 8009070:	d003      	beq.n	800907a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009072:	6878      	ldr	r0, [r7, #4]
 8009074:	f000 f877 	bl	8009166 <HAL_TIM_IC_CaptureCallback>
 8009078:	e005      	b.n	8009086 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800907a:	6878      	ldr	r0, [r7, #4]
 800907c:	f000 f869 	bl	8009152 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009080:	6878      	ldr	r0, [r7, #4]
 8009082:	f000 f87a 	bl	800917a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	2200      	movs	r2, #0
 800908a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800908c:	68bb      	ldr	r3, [r7, #8]
 800908e:	f003 0301 	and.w	r3, r3, #1
 8009092:	2b00      	cmp	r3, #0
 8009094:	d00c      	beq.n	80090b0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	f003 0301 	and.w	r3, r3, #1
 800909c:	2b00      	cmp	r3, #0
 800909e:	d007      	beq.n	80090b0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	f06f 0201 	mvn.w	r2, #1
 80090a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80090aa:	6878      	ldr	r0, [r7, #4]
 80090ac:	f7f7 fd30 	bl	8000b10 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80090b0:	68bb      	ldr	r3, [r7, #8]
 80090b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d104      	bne.n	80090c4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80090ba:	68bb      	ldr	r3, [r7, #8]
 80090bc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d00c      	beq.n	80090de <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d007      	beq.n	80090de <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80090d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80090d8:	6878      	ldr	r0, [r7, #4]
 80090da:	f000 f913 	bl	8009304 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80090de:	68bb      	ldr	r3, [r7, #8]
 80090e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d00c      	beq.n	8009102 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d007      	beq.n	8009102 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80090fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80090fc:	6878      	ldr	r0, [r7, #4]
 80090fe:	f000 f90b 	bl	8009318 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009102:	68bb      	ldr	r3, [r7, #8]
 8009104:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009108:	2b00      	cmp	r3, #0
 800910a:	d00c      	beq.n	8009126 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009112:	2b00      	cmp	r3, #0
 8009114:	d007      	beq.n	8009126 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800911e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009120:	6878      	ldr	r0, [r7, #4]
 8009122:	f000 f834 	bl	800918e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009126:	68bb      	ldr	r3, [r7, #8]
 8009128:	f003 0320 	and.w	r3, r3, #32
 800912c:	2b00      	cmp	r3, #0
 800912e:	d00c      	beq.n	800914a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	f003 0320 	and.w	r3, r3, #32
 8009136:	2b00      	cmp	r3, #0
 8009138:	d007      	beq.n	800914a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	f06f 0220 	mvn.w	r2, #32
 8009142:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009144:	6878      	ldr	r0, [r7, #4]
 8009146:	f000 f8d3 	bl	80092f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800914a:	bf00      	nop
 800914c:	3710      	adds	r7, #16
 800914e:	46bd      	mov	sp, r7
 8009150:	bd80      	pop	{r7, pc}

08009152 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009152:	b480      	push	{r7}
 8009154:	b083      	sub	sp, #12
 8009156:	af00      	add	r7, sp, #0
 8009158:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800915a:	bf00      	nop
 800915c:	370c      	adds	r7, #12
 800915e:	46bd      	mov	sp, r7
 8009160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009164:	4770      	bx	lr

08009166 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009166:	b480      	push	{r7}
 8009168:	b083      	sub	sp, #12
 800916a:	af00      	add	r7, sp, #0
 800916c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800916e:	bf00      	nop
 8009170:	370c      	adds	r7, #12
 8009172:	46bd      	mov	sp, r7
 8009174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009178:	4770      	bx	lr

0800917a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800917a:	b480      	push	{r7}
 800917c:	b083      	sub	sp, #12
 800917e:	af00      	add	r7, sp, #0
 8009180:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009182:	bf00      	nop
 8009184:	370c      	adds	r7, #12
 8009186:	46bd      	mov	sp, r7
 8009188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918c:	4770      	bx	lr

0800918e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800918e:	b480      	push	{r7}
 8009190:	b083      	sub	sp, #12
 8009192:	af00      	add	r7, sp, #0
 8009194:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009196:	bf00      	nop
 8009198:	370c      	adds	r7, #12
 800919a:	46bd      	mov	sp, r7
 800919c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a0:	4770      	bx	lr
	...

080091a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80091a4:	b480      	push	{r7}
 80091a6:	b085      	sub	sp, #20
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	6078      	str	r0, [r7, #4]
 80091ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	4a46      	ldr	r2, [pc, #280]	@ (80092d0 <TIM_Base_SetConfig+0x12c>)
 80091b8:	4293      	cmp	r3, r2
 80091ba:	d013      	beq.n	80091e4 <TIM_Base_SetConfig+0x40>
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80091c2:	d00f      	beq.n	80091e4 <TIM_Base_SetConfig+0x40>
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	4a43      	ldr	r2, [pc, #268]	@ (80092d4 <TIM_Base_SetConfig+0x130>)
 80091c8:	4293      	cmp	r3, r2
 80091ca:	d00b      	beq.n	80091e4 <TIM_Base_SetConfig+0x40>
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	4a42      	ldr	r2, [pc, #264]	@ (80092d8 <TIM_Base_SetConfig+0x134>)
 80091d0:	4293      	cmp	r3, r2
 80091d2:	d007      	beq.n	80091e4 <TIM_Base_SetConfig+0x40>
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	4a41      	ldr	r2, [pc, #260]	@ (80092dc <TIM_Base_SetConfig+0x138>)
 80091d8:	4293      	cmp	r3, r2
 80091da:	d003      	beq.n	80091e4 <TIM_Base_SetConfig+0x40>
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	4a40      	ldr	r2, [pc, #256]	@ (80092e0 <TIM_Base_SetConfig+0x13c>)
 80091e0:	4293      	cmp	r3, r2
 80091e2:	d108      	bne.n	80091f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80091ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80091ec:	683b      	ldr	r3, [r7, #0]
 80091ee:	685b      	ldr	r3, [r3, #4]
 80091f0:	68fa      	ldr	r2, [r7, #12]
 80091f2:	4313      	orrs	r3, r2
 80091f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	4a35      	ldr	r2, [pc, #212]	@ (80092d0 <TIM_Base_SetConfig+0x12c>)
 80091fa:	4293      	cmp	r3, r2
 80091fc:	d01f      	beq.n	800923e <TIM_Base_SetConfig+0x9a>
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009204:	d01b      	beq.n	800923e <TIM_Base_SetConfig+0x9a>
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	4a32      	ldr	r2, [pc, #200]	@ (80092d4 <TIM_Base_SetConfig+0x130>)
 800920a:	4293      	cmp	r3, r2
 800920c:	d017      	beq.n	800923e <TIM_Base_SetConfig+0x9a>
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	4a31      	ldr	r2, [pc, #196]	@ (80092d8 <TIM_Base_SetConfig+0x134>)
 8009212:	4293      	cmp	r3, r2
 8009214:	d013      	beq.n	800923e <TIM_Base_SetConfig+0x9a>
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	4a30      	ldr	r2, [pc, #192]	@ (80092dc <TIM_Base_SetConfig+0x138>)
 800921a:	4293      	cmp	r3, r2
 800921c:	d00f      	beq.n	800923e <TIM_Base_SetConfig+0x9a>
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	4a2f      	ldr	r2, [pc, #188]	@ (80092e0 <TIM_Base_SetConfig+0x13c>)
 8009222:	4293      	cmp	r3, r2
 8009224:	d00b      	beq.n	800923e <TIM_Base_SetConfig+0x9a>
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	4a2e      	ldr	r2, [pc, #184]	@ (80092e4 <TIM_Base_SetConfig+0x140>)
 800922a:	4293      	cmp	r3, r2
 800922c:	d007      	beq.n	800923e <TIM_Base_SetConfig+0x9a>
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	4a2d      	ldr	r2, [pc, #180]	@ (80092e8 <TIM_Base_SetConfig+0x144>)
 8009232:	4293      	cmp	r3, r2
 8009234:	d003      	beq.n	800923e <TIM_Base_SetConfig+0x9a>
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	4a2c      	ldr	r2, [pc, #176]	@ (80092ec <TIM_Base_SetConfig+0x148>)
 800923a:	4293      	cmp	r3, r2
 800923c:	d108      	bne.n	8009250 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009244:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009246:	683b      	ldr	r3, [r7, #0]
 8009248:	68db      	ldr	r3, [r3, #12]
 800924a:	68fa      	ldr	r2, [r7, #12]
 800924c:	4313      	orrs	r3, r2
 800924e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009256:	683b      	ldr	r3, [r7, #0]
 8009258:	695b      	ldr	r3, [r3, #20]
 800925a:	4313      	orrs	r3, r2
 800925c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	68fa      	ldr	r2, [r7, #12]
 8009262:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009264:	683b      	ldr	r3, [r7, #0]
 8009266:	689a      	ldr	r2, [r3, #8]
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800926c:	683b      	ldr	r3, [r7, #0]
 800926e:	681a      	ldr	r2, [r3, #0]
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	4a16      	ldr	r2, [pc, #88]	@ (80092d0 <TIM_Base_SetConfig+0x12c>)
 8009278:	4293      	cmp	r3, r2
 800927a:	d00f      	beq.n	800929c <TIM_Base_SetConfig+0xf8>
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	4a18      	ldr	r2, [pc, #96]	@ (80092e0 <TIM_Base_SetConfig+0x13c>)
 8009280:	4293      	cmp	r3, r2
 8009282:	d00b      	beq.n	800929c <TIM_Base_SetConfig+0xf8>
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	4a17      	ldr	r2, [pc, #92]	@ (80092e4 <TIM_Base_SetConfig+0x140>)
 8009288:	4293      	cmp	r3, r2
 800928a:	d007      	beq.n	800929c <TIM_Base_SetConfig+0xf8>
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	4a16      	ldr	r2, [pc, #88]	@ (80092e8 <TIM_Base_SetConfig+0x144>)
 8009290:	4293      	cmp	r3, r2
 8009292:	d003      	beq.n	800929c <TIM_Base_SetConfig+0xf8>
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	4a15      	ldr	r2, [pc, #84]	@ (80092ec <TIM_Base_SetConfig+0x148>)
 8009298:	4293      	cmp	r3, r2
 800929a:	d103      	bne.n	80092a4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800929c:	683b      	ldr	r3, [r7, #0]
 800929e:	691a      	ldr	r2, [r3, #16]
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	2201      	movs	r2, #1
 80092a8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	691b      	ldr	r3, [r3, #16]
 80092ae:	f003 0301 	and.w	r3, r3, #1
 80092b2:	2b01      	cmp	r3, #1
 80092b4:	d105      	bne.n	80092c2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	691b      	ldr	r3, [r3, #16]
 80092ba:	f023 0201 	bic.w	r2, r3, #1
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	611a      	str	r2, [r3, #16]
  }
}
 80092c2:	bf00      	nop
 80092c4:	3714      	adds	r7, #20
 80092c6:	46bd      	mov	sp, r7
 80092c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092cc:	4770      	bx	lr
 80092ce:	bf00      	nop
 80092d0:	40010000 	.word	0x40010000
 80092d4:	40000400 	.word	0x40000400
 80092d8:	40000800 	.word	0x40000800
 80092dc:	40000c00 	.word	0x40000c00
 80092e0:	40010400 	.word	0x40010400
 80092e4:	40014000 	.word	0x40014000
 80092e8:	40014400 	.word	0x40014400
 80092ec:	40014800 	.word	0x40014800

080092f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80092f0:	b480      	push	{r7}
 80092f2:	b083      	sub	sp, #12
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80092f8:	bf00      	nop
 80092fa:	370c      	adds	r7, #12
 80092fc:	46bd      	mov	sp, r7
 80092fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009302:	4770      	bx	lr

08009304 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009304:	b480      	push	{r7}
 8009306:	b083      	sub	sp, #12
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800930c:	bf00      	nop
 800930e:	370c      	adds	r7, #12
 8009310:	46bd      	mov	sp, r7
 8009312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009316:	4770      	bx	lr

08009318 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009318:	b480      	push	{r7}
 800931a:	b083      	sub	sp, #12
 800931c:	af00      	add	r7, sp, #0
 800931e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009320:	bf00      	nop
 8009322:	370c      	adds	r7, #12
 8009324:	46bd      	mov	sp, r7
 8009326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932a:	4770      	bx	lr

0800932c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800932c:	b580      	push	{r7, lr}
 800932e:	b082      	sub	sp, #8
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	2b00      	cmp	r3, #0
 8009338:	d101      	bne.n	800933e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800933a:	2301      	movs	r3, #1
 800933c:	e042      	b.n	80093c4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009344:	2b00      	cmp	r3, #0
 8009346:	d106      	bne.n	8009356 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	2200      	movs	r2, #0
 800934c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009350:	6878      	ldr	r0, [r7, #4]
 8009352:	f7f7 fdc5 	bl	8000ee0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	2224      	movs	r2, #36	@ 0x24
 800935a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	681a      	ldr	r2, [r3, #0]
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	f022 0201 	bic.w	r2, r2, #1
 800936c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009372:	2b00      	cmp	r3, #0
 8009374:	d002      	beq.n	800937c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8009376:	6878      	ldr	r0, [r7, #4]
 8009378:	f000 fe94 	bl	800a0a4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800937c:	6878      	ldr	r0, [r7, #4]
 800937e:	f000 f825 	bl	80093cc <UART_SetConfig>
 8009382:	4603      	mov	r3, r0
 8009384:	2b01      	cmp	r3, #1
 8009386:	d101      	bne.n	800938c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8009388:	2301      	movs	r3, #1
 800938a:	e01b      	b.n	80093c4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	685a      	ldr	r2, [r3, #4]
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800939a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	689a      	ldr	r2, [r3, #8]
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80093aa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	681a      	ldr	r2, [r3, #0]
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	f042 0201 	orr.w	r2, r2, #1
 80093ba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80093bc:	6878      	ldr	r0, [r7, #4]
 80093be:	f000 ff13 	bl	800a1e8 <UART_CheckIdleState>
 80093c2:	4603      	mov	r3, r0
}
 80093c4:	4618      	mov	r0, r3
 80093c6:	3708      	adds	r7, #8
 80093c8:	46bd      	mov	sp, r7
 80093ca:	bd80      	pop	{r7, pc}

080093cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80093cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80093d0:	b092      	sub	sp, #72	@ 0x48
 80093d2:	af00      	add	r7, sp, #0
 80093d4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80093d6:	2300      	movs	r3, #0
 80093d8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80093dc:	697b      	ldr	r3, [r7, #20]
 80093de:	689a      	ldr	r2, [r3, #8]
 80093e0:	697b      	ldr	r3, [r7, #20]
 80093e2:	691b      	ldr	r3, [r3, #16]
 80093e4:	431a      	orrs	r2, r3
 80093e6:	697b      	ldr	r3, [r7, #20]
 80093e8:	695b      	ldr	r3, [r3, #20]
 80093ea:	431a      	orrs	r2, r3
 80093ec:	697b      	ldr	r3, [r7, #20]
 80093ee:	69db      	ldr	r3, [r3, #28]
 80093f0:	4313      	orrs	r3, r2
 80093f2:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80093f4:	697b      	ldr	r3, [r7, #20]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	681a      	ldr	r2, [r3, #0]
 80093fa:	4bbe      	ldr	r3, [pc, #760]	@ (80096f4 <UART_SetConfig+0x328>)
 80093fc:	4013      	ands	r3, r2
 80093fe:	697a      	ldr	r2, [r7, #20]
 8009400:	6812      	ldr	r2, [r2, #0]
 8009402:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009404:	430b      	orrs	r3, r1
 8009406:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009408:	697b      	ldr	r3, [r7, #20]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	685b      	ldr	r3, [r3, #4]
 800940e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009412:	697b      	ldr	r3, [r7, #20]
 8009414:	68da      	ldr	r2, [r3, #12]
 8009416:	697b      	ldr	r3, [r7, #20]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	430a      	orrs	r2, r1
 800941c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800941e:	697b      	ldr	r3, [r7, #20]
 8009420:	699b      	ldr	r3, [r3, #24]
 8009422:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009424:	697b      	ldr	r3, [r7, #20]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	4ab3      	ldr	r2, [pc, #716]	@ (80096f8 <UART_SetConfig+0x32c>)
 800942a:	4293      	cmp	r3, r2
 800942c:	d004      	beq.n	8009438 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800942e:	697b      	ldr	r3, [r7, #20]
 8009430:	6a1b      	ldr	r3, [r3, #32]
 8009432:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009434:	4313      	orrs	r3, r2
 8009436:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009438:	697b      	ldr	r3, [r7, #20]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	689a      	ldr	r2, [r3, #8]
 800943e:	4baf      	ldr	r3, [pc, #700]	@ (80096fc <UART_SetConfig+0x330>)
 8009440:	4013      	ands	r3, r2
 8009442:	697a      	ldr	r2, [r7, #20]
 8009444:	6812      	ldr	r2, [r2, #0]
 8009446:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009448:	430b      	orrs	r3, r1
 800944a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800944c:	697b      	ldr	r3, [r7, #20]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009452:	f023 010f 	bic.w	r1, r3, #15
 8009456:	697b      	ldr	r3, [r7, #20]
 8009458:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800945a:	697b      	ldr	r3, [r7, #20]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	430a      	orrs	r2, r1
 8009460:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009462:	697b      	ldr	r3, [r7, #20]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	4aa6      	ldr	r2, [pc, #664]	@ (8009700 <UART_SetConfig+0x334>)
 8009468:	4293      	cmp	r3, r2
 800946a:	d177      	bne.n	800955c <UART_SetConfig+0x190>
 800946c:	4ba5      	ldr	r3, [pc, #660]	@ (8009704 <UART_SetConfig+0x338>)
 800946e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009470:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009474:	2b28      	cmp	r3, #40	@ 0x28
 8009476:	d86d      	bhi.n	8009554 <UART_SetConfig+0x188>
 8009478:	a201      	add	r2, pc, #4	@ (adr r2, 8009480 <UART_SetConfig+0xb4>)
 800947a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800947e:	bf00      	nop
 8009480:	08009525 	.word	0x08009525
 8009484:	08009555 	.word	0x08009555
 8009488:	08009555 	.word	0x08009555
 800948c:	08009555 	.word	0x08009555
 8009490:	08009555 	.word	0x08009555
 8009494:	08009555 	.word	0x08009555
 8009498:	08009555 	.word	0x08009555
 800949c:	08009555 	.word	0x08009555
 80094a0:	0800952d 	.word	0x0800952d
 80094a4:	08009555 	.word	0x08009555
 80094a8:	08009555 	.word	0x08009555
 80094ac:	08009555 	.word	0x08009555
 80094b0:	08009555 	.word	0x08009555
 80094b4:	08009555 	.word	0x08009555
 80094b8:	08009555 	.word	0x08009555
 80094bc:	08009555 	.word	0x08009555
 80094c0:	08009535 	.word	0x08009535
 80094c4:	08009555 	.word	0x08009555
 80094c8:	08009555 	.word	0x08009555
 80094cc:	08009555 	.word	0x08009555
 80094d0:	08009555 	.word	0x08009555
 80094d4:	08009555 	.word	0x08009555
 80094d8:	08009555 	.word	0x08009555
 80094dc:	08009555 	.word	0x08009555
 80094e0:	0800953d 	.word	0x0800953d
 80094e4:	08009555 	.word	0x08009555
 80094e8:	08009555 	.word	0x08009555
 80094ec:	08009555 	.word	0x08009555
 80094f0:	08009555 	.word	0x08009555
 80094f4:	08009555 	.word	0x08009555
 80094f8:	08009555 	.word	0x08009555
 80094fc:	08009555 	.word	0x08009555
 8009500:	08009545 	.word	0x08009545
 8009504:	08009555 	.word	0x08009555
 8009508:	08009555 	.word	0x08009555
 800950c:	08009555 	.word	0x08009555
 8009510:	08009555 	.word	0x08009555
 8009514:	08009555 	.word	0x08009555
 8009518:	08009555 	.word	0x08009555
 800951c:	08009555 	.word	0x08009555
 8009520:	0800954d 	.word	0x0800954d
 8009524:	2301      	movs	r3, #1
 8009526:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800952a:	e326      	b.n	8009b7a <UART_SetConfig+0x7ae>
 800952c:	2304      	movs	r3, #4
 800952e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009532:	e322      	b.n	8009b7a <UART_SetConfig+0x7ae>
 8009534:	2308      	movs	r3, #8
 8009536:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800953a:	e31e      	b.n	8009b7a <UART_SetConfig+0x7ae>
 800953c:	2310      	movs	r3, #16
 800953e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009542:	e31a      	b.n	8009b7a <UART_SetConfig+0x7ae>
 8009544:	2320      	movs	r3, #32
 8009546:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800954a:	e316      	b.n	8009b7a <UART_SetConfig+0x7ae>
 800954c:	2340      	movs	r3, #64	@ 0x40
 800954e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009552:	e312      	b.n	8009b7a <UART_SetConfig+0x7ae>
 8009554:	2380      	movs	r3, #128	@ 0x80
 8009556:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800955a:	e30e      	b.n	8009b7a <UART_SetConfig+0x7ae>
 800955c:	697b      	ldr	r3, [r7, #20]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	4a69      	ldr	r2, [pc, #420]	@ (8009708 <UART_SetConfig+0x33c>)
 8009562:	4293      	cmp	r3, r2
 8009564:	d130      	bne.n	80095c8 <UART_SetConfig+0x1fc>
 8009566:	4b67      	ldr	r3, [pc, #412]	@ (8009704 <UART_SetConfig+0x338>)
 8009568:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800956a:	f003 0307 	and.w	r3, r3, #7
 800956e:	2b05      	cmp	r3, #5
 8009570:	d826      	bhi.n	80095c0 <UART_SetConfig+0x1f4>
 8009572:	a201      	add	r2, pc, #4	@ (adr r2, 8009578 <UART_SetConfig+0x1ac>)
 8009574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009578:	08009591 	.word	0x08009591
 800957c:	08009599 	.word	0x08009599
 8009580:	080095a1 	.word	0x080095a1
 8009584:	080095a9 	.word	0x080095a9
 8009588:	080095b1 	.word	0x080095b1
 800958c:	080095b9 	.word	0x080095b9
 8009590:	2300      	movs	r3, #0
 8009592:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009596:	e2f0      	b.n	8009b7a <UART_SetConfig+0x7ae>
 8009598:	2304      	movs	r3, #4
 800959a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800959e:	e2ec      	b.n	8009b7a <UART_SetConfig+0x7ae>
 80095a0:	2308      	movs	r3, #8
 80095a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095a6:	e2e8      	b.n	8009b7a <UART_SetConfig+0x7ae>
 80095a8:	2310      	movs	r3, #16
 80095aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095ae:	e2e4      	b.n	8009b7a <UART_SetConfig+0x7ae>
 80095b0:	2320      	movs	r3, #32
 80095b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095b6:	e2e0      	b.n	8009b7a <UART_SetConfig+0x7ae>
 80095b8:	2340      	movs	r3, #64	@ 0x40
 80095ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095be:	e2dc      	b.n	8009b7a <UART_SetConfig+0x7ae>
 80095c0:	2380      	movs	r3, #128	@ 0x80
 80095c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095c6:	e2d8      	b.n	8009b7a <UART_SetConfig+0x7ae>
 80095c8:	697b      	ldr	r3, [r7, #20]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	4a4f      	ldr	r2, [pc, #316]	@ (800970c <UART_SetConfig+0x340>)
 80095ce:	4293      	cmp	r3, r2
 80095d0:	d130      	bne.n	8009634 <UART_SetConfig+0x268>
 80095d2:	4b4c      	ldr	r3, [pc, #304]	@ (8009704 <UART_SetConfig+0x338>)
 80095d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80095d6:	f003 0307 	and.w	r3, r3, #7
 80095da:	2b05      	cmp	r3, #5
 80095dc:	d826      	bhi.n	800962c <UART_SetConfig+0x260>
 80095de:	a201      	add	r2, pc, #4	@ (adr r2, 80095e4 <UART_SetConfig+0x218>)
 80095e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095e4:	080095fd 	.word	0x080095fd
 80095e8:	08009605 	.word	0x08009605
 80095ec:	0800960d 	.word	0x0800960d
 80095f0:	08009615 	.word	0x08009615
 80095f4:	0800961d 	.word	0x0800961d
 80095f8:	08009625 	.word	0x08009625
 80095fc:	2300      	movs	r3, #0
 80095fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009602:	e2ba      	b.n	8009b7a <UART_SetConfig+0x7ae>
 8009604:	2304      	movs	r3, #4
 8009606:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800960a:	e2b6      	b.n	8009b7a <UART_SetConfig+0x7ae>
 800960c:	2308      	movs	r3, #8
 800960e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009612:	e2b2      	b.n	8009b7a <UART_SetConfig+0x7ae>
 8009614:	2310      	movs	r3, #16
 8009616:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800961a:	e2ae      	b.n	8009b7a <UART_SetConfig+0x7ae>
 800961c:	2320      	movs	r3, #32
 800961e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009622:	e2aa      	b.n	8009b7a <UART_SetConfig+0x7ae>
 8009624:	2340      	movs	r3, #64	@ 0x40
 8009626:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800962a:	e2a6      	b.n	8009b7a <UART_SetConfig+0x7ae>
 800962c:	2380      	movs	r3, #128	@ 0x80
 800962e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009632:	e2a2      	b.n	8009b7a <UART_SetConfig+0x7ae>
 8009634:	697b      	ldr	r3, [r7, #20]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	4a35      	ldr	r2, [pc, #212]	@ (8009710 <UART_SetConfig+0x344>)
 800963a:	4293      	cmp	r3, r2
 800963c:	d130      	bne.n	80096a0 <UART_SetConfig+0x2d4>
 800963e:	4b31      	ldr	r3, [pc, #196]	@ (8009704 <UART_SetConfig+0x338>)
 8009640:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009642:	f003 0307 	and.w	r3, r3, #7
 8009646:	2b05      	cmp	r3, #5
 8009648:	d826      	bhi.n	8009698 <UART_SetConfig+0x2cc>
 800964a:	a201      	add	r2, pc, #4	@ (adr r2, 8009650 <UART_SetConfig+0x284>)
 800964c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009650:	08009669 	.word	0x08009669
 8009654:	08009671 	.word	0x08009671
 8009658:	08009679 	.word	0x08009679
 800965c:	08009681 	.word	0x08009681
 8009660:	08009689 	.word	0x08009689
 8009664:	08009691 	.word	0x08009691
 8009668:	2300      	movs	r3, #0
 800966a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800966e:	e284      	b.n	8009b7a <UART_SetConfig+0x7ae>
 8009670:	2304      	movs	r3, #4
 8009672:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009676:	e280      	b.n	8009b7a <UART_SetConfig+0x7ae>
 8009678:	2308      	movs	r3, #8
 800967a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800967e:	e27c      	b.n	8009b7a <UART_SetConfig+0x7ae>
 8009680:	2310      	movs	r3, #16
 8009682:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009686:	e278      	b.n	8009b7a <UART_SetConfig+0x7ae>
 8009688:	2320      	movs	r3, #32
 800968a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800968e:	e274      	b.n	8009b7a <UART_SetConfig+0x7ae>
 8009690:	2340      	movs	r3, #64	@ 0x40
 8009692:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009696:	e270      	b.n	8009b7a <UART_SetConfig+0x7ae>
 8009698:	2380      	movs	r3, #128	@ 0x80
 800969a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800969e:	e26c      	b.n	8009b7a <UART_SetConfig+0x7ae>
 80096a0:	697b      	ldr	r3, [r7, #20]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	4a1b      	ldr	r2, [pc, #108]	@ (8009714 <UART_SetConfig+0x348>)
 80096a6:	4293      	cmp	r3, r2
 80096a8:	d142      	bne.n	8009730 <UART_SetConfig+0x364>
 80096aa:	4b16      	ldr	r3, [pc, #88]	@ (8009704 <UART_SetConfig+0x338>)
 80096ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80096ae:	f003 0307 	and.w	r3, r3, #7
 80096b2:	2b05      	cmp	r3, #5
 80096b4:	d838      	bhi.n	8009728 <UART_SetConfig+0x35c>
 80096b6:	a201      	add	r2, pc, #4	@ (adr r2, 80096bc <UART_SetConfig+0x2f0>)
 80096b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096bc:	080096d5 	.word	0x080096d5
 80096c0:	080096dd 	.word	0x080096dd
 80096c4:	080096e5 	.word	0x080096e5
 80096c8:	080096ed 	.word	0x080096ed
 80096cc:	08009719 	.word	0x08009719
 80096d0:	08009721 	.word	0x08009721
 80096d4:	2300      	movs	r3, #0
 80096d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096da:	e24e      	b.n	8009b7a <UART_SetConfig+0x7ae>
 80096dc:	2304      	movs	r3, #4
 80096de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096e2:	e24a      	b.n	8009b7a <UART_SetConfig+0x7ae>
 80096e4:	2308      	movs	r3, #8
 80096e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096ea:	e246      	b.n	8009b7a <UART_SetConfig+0x7ae>
 80096ec:	2310      	movs	r3, #16
 80096ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096f2:	e242      	b.n	8009b7a <UART_SetConfig+0x7ae>
 80096f4:	cfff69f3 	.word	0xcfff69f3
 80096f8:	58000c00 	.word	0x58000c00
 80096fc:	11fff4ff 	.word	0x11fff4ff
 8009700:	40011000 	.word	0x40011000
 8009704:	58024400 	.word	0x58024400
 8009708:	40004400 	.word	0x40004400
 800970c:	40004800 	.word	0x40004800
 8009710:	40004c00 	.word	0x40004c00
 8009714:	40005000 	.word	0x40005000
 8009718:	2320      	movs	r3, #32
 800971a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800971e:	e22c      	b.n	8009b7a <UART_SetConfig+0x7ae>
 8009720:	2340      	movs	r3, #64	@ 0x40
 8009722:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009726:	e228      	b.n	8009b7a <UART_SetConfig+0x7ae>
 8009728:	2380      	movs	r3, #128	@ 0x80
 800972a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800972e:	e224      	b.n	8009b7a <UART_SetConfig+0x7ae>
 8009730:	697b      	ldr	r3, [r7, #20]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	4ab1      	ldr	r2, [pc, #708]	@ (80099fc <UART_SetConfig+0x630>)
 8009736:	4293      	cmp	r3, r2
 8009738:	d176      	bne.n	8009828 <UART_SetConfig+0x45c>
 800973a:	4bb1      	ldr	r3, [pc, #708]	@ (8009a00 <UART_SetConfig+0x634>)
 800973c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800973e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009742:	2b28      	cmp	r3, #40	@ 0x28
 8009744:	d86c      	bhi.n	8009820 <UART_SetConfig+0x454>
 8009746:	a201      	add	r2, pc, #4	@ (adr r2, 800974c <UART_SetConfig+0x380>)
 8009748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800974c:	080097f1 	.word	0x080097f1
 8009750:	08009821 	.word	0x08009821
 8009754:	08009821 	.word	0x08009821
 8009758:	08009821 	.word	0x08009821
 800975c:	08009821 	.word	0x08009821
 8009760:	08009821 	.word	0x08009821
 8009764:	08009821 	.word	0x08009821
 8009768:	08009821 	.word	0x08009821
 800976c:	080097f9 	.word	0x080097f9
 8009770:	08009821 	.word	0x08009821
 8009774:	08009821 	.word	0x08009821
 8009778:	08009821 	.word	0x08009821
 800977c:	08009821 	.word	0x08009821
 8009780:	08009821 	.word	0x08009821
 8009784:	08009821 	.word	0x08009821
 8009788:	08009821 	.word	0x08009821
 800978c:	08009801 	.word	0x08009801
 8009790:	08009821 	.word	0x08009821
 8009794:	08009821 	.word	0x08009821
 8009798:	08009821 	.word	0x08009821
 800979c:	08009821 	.word	0x08009821
 80097a0:	08009821 	.word	0x08009821
 80097a4:	08009821 	.word	0x08009821
 80097a8:	08009821 	.word	0x08009821
 80097ac:	08009809 	.word	0x08009809
 80097b0:	08009821 	.word	0x08009821
 80097b4:	08009821 	.word	0x08009821
 80097b8:	08009821 	.word	0x08009821
 80097bc:	08009821 	.word	0x08009821
 80097c0:	08009821 	.word	0x08009821
 80097c4:	08009821 	.word	0x08009821
 80097c8:	08009821 	.word	0x08009821
 80097cc:	08009811 	.word	0x08009811
 80097d0:	08009821 	.word	0x08009821
 80097d4:	08009821 	.word	0x08009821
 80097d8:	08009821 	.word	0x08009821
 80097dc:	08009821 	.word	0x08009821
 80097e0:	08009821 	.word	0x08009821
 80097e4:	08009821 	.word	0x08009821
 80097e8:	08009821 	.word	0x08009821
 80097ec:	08009819 	.word	0x08009819
 80097f0:	2301      	movs	r3, #1
 80097f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097f6:	e1c0      	b.n	8009b7a <UART_SetConfig+0x7ae>
 80097f8:	2304      	movs	r3, #4
 80097fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097fe:	e1bc      	b.n	8009b7a <UART_SetConfig+0x7ae>
 8009800:	2308      	movs	r3, #8
 8009802:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009806:	e1b8      	b.n	8009b7a <UART_SetConfig+0x7ae>
 8009808:	2310      	movs	r3, #16
 800980a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800980e:	e1b4      	b.n	8009b7a <UART_SetConfig+0x7ae>
 8009810:	2320      	movs	r3, #32
 8009812:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009816:	e1b0      	b.n	8009b7a <UART_SetConfig+0x7ae>
 8009818:	2340      	movs	r3, #64	@ 0x40
 800981a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800981e:	e1ac      	b.n	8009b7a <UART_SetConfig+0x7ae>
 8009820:	2380      	movs	r3, #128	@ 0x80
 8009822:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009826:	e1a8      	b.n	8009b7a <UART_SetConfig+0x7ae>
 8009828:	697b      	ldr	r3, [r7, #20]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	4a75      	ldr	r2, [pc, #468]	@ (8009a04 <UART_SetConfig+0x638>)
 800982e:	4293      	cmp	r3, r2
 8009830:	d130      	bne.n	8009894 <UART_SetConfig+0x4c8>
 8009832:	4b73      	ldr	r3, [pc, #460]	@ (8009a00 <UART_SetConfig+0x634>)
 8009834:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009836:	f003 0307 	and.w	r3, r3, #7
 800983a:	2b05      	cmp	r3, #5
 800983c:	d826      	bhi.n	800988c <UART_SetConfig+0x4c0>
 800983e:	a201      	add	r2, pc, #4	@ (adr r2, 8009844 <UART_SetConfig+0x478>)
 8009840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009844:	0800985d 	.word	0x0800985d
 8009848:	08009865 	.word	0x08009865
 800984c:	0800986d 	.word	0x0800986d
 8009850:	08009875 	.word	0x08009875
 8009854:	0800987d 	.word	0x0800987d
 8009858:	08009885 	.word	0x08009885
 800985c:	2300      	movs	r3, #0
 800985e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009862:	e18a      	b.n	8009b7a <UART_SetConfig+0x7ae>
 8009864:	2304      	movs	r3, #4
 8009866:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800986a:	e186      	b.n	8009b7a <UART_SetConfig+0x7ae>
 800986c:	2308      	movs	r3, #8
 800986e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009872:	e182      	b.n	8009b7a <UART_SetConfig+0x7ae>
 8009874:	2310      	movs	r3, #16
 8009876:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800987a:	e17e      	b.n	8009b7a <UART_SetConfig+0x7ae>
 800987c:	2320      	movs	r3, #32
 800987e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009882:	e17a      	b.n	8009b7a <UART_SetConfig+0x7ae>
 8009884:	2340      	movs	r3, #64	@ 0x40
 8009886:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800988a:	e176      	b.n	8009b7a <UART_SetConfig+0x7ae>
 800988c:	2380      	movs	r3, #128	@ 0x80
 800988e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009892:	e172      	b.n	8009b7a <UART_SetConfig+0x7ae>
 8009894:	697b      	ldr	r3, [r7, #20]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	4a5b      	ldr	r2, [pc, #364]	@ (8009a08 <UART_SetConfig+0x63c>)
 800989a:	4293      	cmp	r3, r2
 800989c:	d130      	bne.n	8009900 <UART_SetConfig+0x534>
 800989e:	4b58      	ldr	r3, [pc, #352]	@ (8009a00 <UART_SetConfig+0x634>)
 80098a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80098a2:	f003 0307 	and.w	r3, r3, #7
 80098a6:	2b05      	cmp	r3, #5
 80098a8:	d826      	bhi.n	80098f8 <UART_SetConfig+0x52c>
 80098aa:	a201      	add	r2, pc, #4	@ (adr r2, 80098b0 <UART_SetConfig+0x4e4>)
 80098ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098b0:	080098c9 	.word	0x080098c9
 80098b4:	080098d1 	.word	0x080098d1
 80098b8:	080098d9 	.word	0x080098d9
 80098bc:	080098e1 	.word	0x080098e1
 80098c0:	080098e9 	.word	0x080098e9
 80098c4:	080098f1 	.word	0x080098f1
 80098c8:	2300      	movs	r3, #0
 80098ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098ce:	e154      	b.n	8009b7a <UART_SetConfig+0x7ae>
 80098d0:	2304      	movs	r3, #4
 80098d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098d6:	e150      	b.n	8009b7a <UART_SetConfig+0x7ae>
 80098d8:	2308      	movs	r3, #8
 80098da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098de:	e14c      	b.n	8009b7a <UART_SetConfig+0x7ae>
 80098e0:	2310      	movs	r3, #16
 80098e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098e6:	e148      	b.n	8009b7a <UART_SetConfig+0x7ae>
 80098e8:	2320      	movs	r3, #32
 80098ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098ee:	e144      	b.n	8009b7a <UART_SetConfig+0x7ae>
 80098f0:	2340      	movs	r3, #64	@ 0x40
 80098f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098f6:	e140      	b.n	8009b7a <UART_SetConfig+0x7ae>
 80098f8:	2380      	movs	r3, #128	@ 0x80
 80098fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098fe:	e13c      	b.n	8009b7a <UART_SetConfig+0x7ae>
 8009900:	697b      	ldr	r3, [r7, #20]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	4a41      	ldr	r2, [pc, #260]	@ (8009a0c <UART_SetConfig+0x640>)
 8009906:	4293      	cmp	r3, r2
 8009908:	f040 8082 	bne.w	8009a10 <UART_SetConfig+0x644>
 800990c:	4b3c      	ldr	r3, [pc, #240]	@ (8009a00 <UART_SetConfig+0x634>)
 800990e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009910:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009914:	2b28      	cmp	r3, #40	@ 0x28
 8009916:	d86d      	bhi.n	80099f4 <UART_SetConfig+0x628>
 8009918:	a201      	add	r2, pc, #4	@ (adr r2, 8009920 <UART_SetConfig+0x554>)
 800991a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800991e:	bf00      	nop
 8009920:	080099c5 	.word	0x080099c5
 8009924:	080099f5 	.word	0x080099f5
 8009928:	080099f5 	.word	0x080099f5
 800992c:	080099f5 	.word	0x080099f5
 8009930:	080099f5 	.word	0x080099f5
 8009934:	080099f5 	.word	0x080099f5
 8009938:	080099f5 	.word	0x080099f5
 800993c:	080099f5 	.word	0x080099f5
 8009940:	080099cd 	.word	0x080099cd
 8009944:	080099f5 	.word	0x080099f5
 8009948:	080099f5 	.word	0x080099f5
 800994c:	080099f5 	.word	0x080099f5
 8009950:	080099f5 	.word	0x080099f5
 8009954:	080099f5 	.word	0x080099f5
 8009958:	080099f5 	.word	0x080099f5
 800995c:	080099f5 	.word	0x080099f5
 8009960:	080099d5 	.word	0x080099d5
 8009964:	080099f5 	.word	0x080099f5
 8009968:	080099f5 	.word	0x080099f5
 800996c:	080099f5 	.word	0x080099f5
 8009970:	080099f5 	.word	0x080099f5
 8009974:	080099f5 	.word	0x080099f5
 8009978:	080099f5 	.word	0x080099f5
 800997c:	080099f5 	.word	0x080099f5
 8009980:	080099dd 	.word	0x080099dd
 8009984:	080099f5 	.word	0x080099f5
 8009988:	080099f5 	.word	0x080099f5
 800998c:	080099f5 	.word	0x080099f5
 8009990:	080099f5 	.word	0x080099f5
 8009994:	080099f5 	.word	0x080099f5
 8009998:	080099f5 	.word	0x080099f5
 800999c:	080099f5 	.word	0x080099f5
 80099a0:	080099e5 	.word	0x080099e5
 80099a4:	080099f5 	.word	0x080099f5
 80099a8:	080099f5 	.word	0x080099f5
 80099ac:	080099f5 	.word	0x080099f5
 80099b0:	080099f5 	.word	0x080099f5
 80099b4:	080099f5 	.word	0x080099f5
 80099b8:	080099f5 	.word	0x080099f5
 80099bc:	080099f5 	.word	0x080099f5
 80099c0:	080099ed 	.word	0x080099ed
 80099c4:	2301      	movs	r3, #1
 80099c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099ca:	e0d6      	b.n	8009b7a <UART_SetConfig+0x7ae>
 80099cc:	2304      	movs	r3, #4
 80099ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099d2:	e0d2      	b.n	8009b7a <UART_SetConfig+0x7ae>
 80099d4:	2308      	movs	r3, #8
 80099d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099da:	e0ce      	b.n	8009b7a <UART_SetConfig+0x7ae>
 80099dc:	2310      	movs	r3, #16
 80099de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099e2:	e0ca      	b.n	8009b7a <UART_SetConfig+0x7ae>
 80099e4:	2320      	movs	r3, #32
 80099e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099ea:	e0c6      	b.n	8009b7a <UART_SetConfig+0x7ae>
 80099ec:	2340      	movs	r3, #64	@ 0x40
 80099ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099f2:	e0c2      	b.n	8009b7a <UART_SetConfig+0x7ae>
 80099f4:	2380      	movs	r3, #128	@ 0x80
 80099f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099fa:	e0be      	b.n	8009b7a <UART_SetConfig+0x7ae>
 80099fc:	40011400 	.word	0x40011400
 8009a00:	58024400 	.word	0x58024400
 8009a04:	40007800 	.word	0x40007800
 8009a08:	40007c00 	.word	0x40007c00
 8009a0c:	40011800 	.word	0x40011800
 8009a10:	697b      	ldr	r3, [r7, #20]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	4aad      	ldr	r2, [pc, #692]	@ (8009ccc <UART_SetConfig+0x900>)
 8009a16:	4293      	cmp	r3, r2
 8009a18:	d176      	bne.n	8009b08 <UART_SetConfig+0x73c>
 8009a1a:	4bad      	ldr	r3, [pc, #692]	@ (8009cd0 <UART_SetConfig+0x904>)
 8009a1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a1e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009a22:	2b28      	cmp	r3, #40	@ 0x28
 8009a24:	d86c      	bhi.n	8009b00 <UART_SetConfig+0x734>
 8009a26:	a201      	add	r2, pc, #4	@ (adr r2, 8009a2c <UART_SetConfig+0x660>)
 8009a28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a2c:	08009ad1 	.word	0x08009ad1
 8009a30:	08009b01 	.word	0x08009b01
 8009a34:	08009b01 	.word	0x08009b01
 8009a38:	08009b01 	.word	0x08009b01
 8009a3c:	08009b01 	.word	0x08009b01
 8009a40:	08009b01 	.word	0x08009b01
 8009a44:	08009b01 	.word	0x08009b01
 8009a48:	08009b01 	.word	0x08009b01
 8009a4c:	08009ad9 	.word	0x08009ad9
 8009a50:	08009b01 	.word	0x08009b01
 8009a54:	08009b01 	.word	0x08009b01
 8009a58:	08009b01 	.word	0x08009b01
 8009a5c:	08009b01 	.word	0x08009b01
 8009a60:	08009b01 	.word	0x08009b01
 8009a64:	08009b01 	.word	0x08009b01
 8009a68:	08009b01 	.word	0x08009b01
 8009a6c:	08009ae1 	.word	0x08009ae1
 8009a70:	08009b01 	.word	0x08009b01
 8009a74:	08009b01 	.word	0x08009b01
 8009a78:	08009b01 	.word	0x08009b01
 8009a7c:	08009b01 	.word	0x08009b01
 8009a80:	08009b01 	.word	0x08009b01
 8009a84:	08009b01 	.word	0x08009b01
 8009a88:	08009b01 	.word	0x08009b01
 8009a8c:	08009ae9 	.word	0x08009ae9
 8009a90:	08009b01 	.word	0x08009b01
 8009a94:	08009b01 	.word	0x08009b01
 8009a98:	08009b01 	.word	0x08009b01
 8009a9c:	08009b01 	.word	0x08009b01
 8009aa0:	08009b01 	.word	0x08009b01
 8009aa4:	08009b01 	.word	0x08009b01
 8009aa8:	08009b01 	.word	0x08009b01
 8009aac:	08009af1 	.word	0x08009af1
 8009ab0:	08009b01 	.word	0x08009b01
 8009ab4:	08009b01 	.word	0x08009b01
 8009ab8:	08009b01 	.word	0x08009b01
 8009abc:	08009b01 	.word	0x08009b01
 8009ac0:	08009b01 	.word	0x08009b01
 8009ac4:	08009b01 	.word	0x08009b01
 8009ac8:	08009b01 	.word	0x08009b01
 8009acc:	08009af9 	.word	0x08009af9
 8009ad0:	2301      	movs	r3, #1
 8009ad2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ad6:	e050      	b.n	8009b7a <UART_SetConfig+0x7ae>
 8009ad8:	2304      	movs	r3, #4
 8009ada:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ade:	e04c      	b.n	8009b7a <UART_SetConfig+0x7ae>
 8009ae0:	2308      	movs	r3, #8
 8009ae2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ae6:	e048      	b.n	8009b7a <UART_SetConfig+0x7ae>
 8009ae8:	2310      	movs	r3, #16
 8009aea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009aee:	e044      	b.n	8009b7a <UART_SetConfig+0x7ae>
 8009af0:	2320      	movs	r3, #32
 8009af2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009af6:	e040      	b.n	8009b7a <UART_SetConfig+0x7ae>
 8009af8:	2340      	movs	r3, #64	@ 0x40
 8009afa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009afe:	e03c      	b.n	8009b7a <UART_SetConfig+0x7ae>
 8009b00:	2380      	movs	r3, #128	@ 0x80
 8009b02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b06:	e038      	b.n	8009b7a <UART_SetConfig+0x7ae>
 8009b08:	697b      	ldr	r3, [r7, #20]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	4a71      	ldr	r2, [pc, #452]	@ (8009cd4 <UART_SetConfig+0x908>)
 8009b0e:	4293      	cmp	r3, r2
 8009b10:	d130      	bne.n	8009b74 <UART_SetConfig+0x7a8>
 8009b12:	4b6f      	ldr	r3, [pc, #444]	@ (8009cd0 <UART_SetConfig+0x904>)
 8009b14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009b16:	f003 0307 	and.w	r3, r3, #7
 8009b1a:	2b05      	cmp	r3, #5
 8009b1c:	d826      	bhi.n	8009b6c <UART_SetConfig+0x7a0>
 8009b1e:	a201      	add	r2, pc, #4	@ (adr r2, 8009b24 <UART_SetConfig+0x758>)
 8009b20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b24:	08009b3d 	.word	0x08009b3d
 8009b28:	08009b45 	.word	0x08009b45
 8009b2c:	08009b4d 	.word	0x08009b4d
 8009b30:	08009b55 	.word	0x08009b55
 8009b34:	08009b5d 	.word	0x08009b5d
 8009b38:	08009b65 	.word	0x08009b65
 8009b3c:	2302      	movs	r3, #2
 8009b3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b42:	e01a      	b.n	8009b7a <UART_SetConfig+0x7ae>
 8009b44:	2304      	movs	r3, #4
 8009b46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b4a:	e016      	b.n	8009b7a <UART_SetConfig+0x7ae>
 8009b4c:	2308      	movs	r3, #8
 8009b4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b52:	e012      	b.n	8009b7a <UART_SetConfig+0x7ae>
 8009b54:	2310      	movs	r3, #16
 8009b56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b5a:	e00e      	b.n	8009b7a <UART_SetConfig+0x7ae>
 8009b5c:	2320      	movs	r3, #32
 8009b5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b62:	e00a      	b.n	8009b7a <UART_SetConfig+0x7ae>
 8009b64:	2340      	movs	r3, #64	@ 0x40
 8009b66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b6a:	e006      	b.n	8009b7a <UART_SetConfig+0x7ae>
 8009b6c:	2380      	movs	r3, #128	@ 0x80
 8009b6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b72:	e002      	b.n	8009b7a <UART_SetConfig+0x7ae>
 8009b74:	2380      	movs	r3, #128	@ 0x80
 8009b76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009b7a:	697b      	ldr	r3, [r7, #20]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	4a55      	ldr	r2, [pc, #340]	@ (8009cd4 <UART_SetConfig+0x908>)
 8009b80:	4293      	cmp	r3, r2
 8009b82:	f040 80f8 	bne.w	8009d76 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009b86:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009b8a:	2b20      	cmp	r3, #32
 8009b8c:	dc46      	bgt.n	8009c1c <UART_SetConfig+0x850>
 8009b8e:	2b02      	cmp	r3, #2
 8009b90:	db75      	blt.n	8009c7e <UART_SetConfig+0x8b2>
 8009b92:	3b02      	subs	r3, #2
 8009b94:	2b1e      	cmp	r3, #30
 8009b96:	d872      	bhi.n	8009c7e <UART_SetConfig+0x8b2>
 8009b98:	a201      	add	r2, pc, #4	@ (adr r2, 8009ba0 <UART_SetConfig+0x7d4>)
 8009b9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b9e:	bf00      	nop
 8009ba0:	08009c23 	.word	0x08009c23
 8009ba4:	08009c7f 	.word	0x08009c7f
 8009ba8:	08009c2b 	.word	0x08009c2b
 8009bac:	08009c7f 	.word	0x08009c7f
 8009bb0:	08009c7f 	.word	0x08009c7f
 8009bb4:	08009c7f 	.word	0x08009c7f
 8009bb8:	08009c3b 	.word	0x08009c3b
 8009bbc:	08009c7f 	.word	0x08009c7f
 8009bc0:	08009c7f 	.word	0x08009c7f
 8009bc4:	08009c7f 	.word	0x08009c7f
 8009bc8:	08009c7f 	.word	0x08009c7f
 8009bcc:	08009c7f 	.word	0x08009c7f
 8009bd0:	08009c7f 	.word	0x08009c7f
 8009bd4:	08009c7f 	.word	0x08009c7f
 8009bd8:	08009c4b 	.word	0x08009c4b
 8009bdc:	08009c7f 	.word	0x08009c7f
 8009be0:	08009c7f 	.word	0x08009c7f
 8009be4:	08009c7f 	.word	0x08009c7f
 8009be8:	08009c7f 	.word	0x08009c7f
 8009bec:	08009c7f 	.word	0x08009c7f
 8009bf0:	08009c7f 	.word	0x08009c7f
 8009bf4:	08009c7f 	.word	0x08009c7f
 8009bf8:	08009c7f 	.word	0x08009c7f
 8009bfc:	08009c7f 	.word	0x08009c7f
 8009c00:	08009c7f 	.word	0x08009c7f
 8009c04:	08009c7f 	.word	0x08009c7f
 8009c08:	08009c7f 	.word	0x08009c7f
 8009c0c:	08009c7f 	.word	0x08009c7f
 8009c10:	08009c7f 	.word	0x08009c7f
 8009c14:	08009c7f 	.word	0x08009c7f
 8009c18:	08009c71 	.word	0x08009c71
 8009c1c:	2b40      	cmp	r3, #64	@ 0x40
 8009c1e:	d02a      	beq.n	8009c76 <UART_SetConfig+0x8aa>
 8009c20:	e02d      	b.n	8009c7e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009c22:	f7fe fc93 	bl	800854c <HAL_RCCEx_GetD3PCLK1Freq>
 8009c26:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009c28:	e02f      	b.n	8009c8a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009c2a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009c2e:	4618      	mov	r0, r3
 8009c30:	f7fe fca2 	bl	8008578 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009c34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009c38:	e027      	b.n	8009c8a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009c3a:	f107 0318 	add.w	r3, r7, #24
 8009c3e:	4618      	mov	r0, r3
 8009c40:	f7fe fdee 	bl	8008820 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009c44:	69fb      	ldr	r3, [r7, #28]
 8009c46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009c48:	e01f      	b.n	8009c8a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009c4a:	4b21      	ldr	r3, [pc, #132]	@ (8009cd0 <UART_SetConfig+0x904>)
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	f003 0320 	and.w	r3, r3, #32
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d009      	beq.n	8009c6a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009c56:	4b1e      	ldr	r3, [pc, #120]	@ (8009cd0 <UART_SetConfig+0x904>)
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	08db      	lsrs	r3, r3, #3
 8009c5c:	f003 0303 	and.w	r3, r3, #3
 8009c60:	4a1d      	ldr	r2, [pc, #116]	@ (8009cd8 <UART_SetConfig+0x90c>)
 8009c62:	fa22 f303 	lsr.w	r3, r2, r3
 8009c66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009c68:	e00f      	b.n	8009c8a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8009c6a:	4b1b      	ldr	r3, [pc, #108]	@ (8009cd8 <UART_SetConfig+0x90c>)
 8009c6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009c6e:	e00c      	b.n	8009c8a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009c70:	4b1a      	ldr	r3, [pc, #104]	@ (8009cdc <UART_SetConfig+0x910>)
 8009c72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009c74:	e009      	b.n	8009c8a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009c76:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009c7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009c7c:	e005      	b.n	8009c8a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8009c7e:	2300      	movs	r3, #0
 8009c80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009c82:	2301      	movs	r3, #1
 8009c84:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009c88:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009c8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	f000 81ee 	beq.w	800a06e <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009c92:	697b      	ldr	r3, [r7, #20]
 8009c94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c96:	4a12      	ldr	r2, [pc, #72]	@ (8009ce0 <UART_SetConfig+0x914>)
 8009c98:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009c9c:	461a      	mov	r2, r3
 8009c9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ca0:	fbb3 f3f2 	udiv	r3, r3, r2
 8009ca4:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009ca6:	697b      	ldr	r3, [r7, #20]
 8009ca8:	685a      	ldr	r2, [r3, #4]
 8009caa:	4613      	mov	r3, r2
 8009cac:	005b      	lsls	r3, r3, #1
 8009cae:	4413      	add	r3, r2
 8009cb0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009cb2:	429a      	cmp	r2, r3
 8009cb4:	d305      	bcc.n	8009cc2 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009cb6:	697b      	ldr	r3, [r7, #20]
 8009cb8:	685b      	ldr	r3, [r3, #4]
 8009cba:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009cbc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009cbe:	429a      	cmp	r2, r3
 8009cc0:	d910      	bls.n	8009ce4 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8009cc2:	2301      	movs	r3, #1
 8009cc4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009cc8:	e1d1      	b.n	800a06e <UART_SetConfig+0xca2>
 8009cca:	bf00      	nop
 8009ccc:	40011c00 	.word	0x40011c00
 8009cd0:	58024400 	.word	0x58024400
 8009cd4:	58000c00 	.word	0x58000c00
 8009cd8:	03d09000 	.word	0x03d09000
 8009cdc:	003d0900 	.word	0x003d0900
 8009ce0:	0800c080 	.word	0x0800c080
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009ce4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ce6:	2200      	movs	r2, #0
 8009ce8:	60bb      	str	r3, [r7, #8]
 8009cea:	60fa      	str	r2, [r7, #12]
 8009cec:	697b      	ldr	r3, [r7, #20]
 8009cee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009cf0:	4ac0      	ldr	r2, [pc, #768]	@ (8009ff4 <UART_SetConfig+0xc28>)
 8009cf2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009cf6:	b29b      	uxth	r3, r3
 8009cf8:	2200      	movs	r2, #0
 8009cfa:	603b      	str	r3, [r7, #0]
 8009cfc:	607a      	str	r2, [r7, #4]
 8009cfe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009d02:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009d06:	f7f6 faf3 	bl	80002f0 <__aeabi_uldivmod>
 8009d0a:	4602      	mov	r2, r0
 8009d0c:	460b      	mov	r3, r1
 8009d0e:	4610      	mov	r0, r2
 8009d10:	4619      	mov	r1, r3
 8009d12:	f04f 0200 	mov.w	r2, #0
 8009d16:	f04f 0300 	mov.w	r3, #0
 8009d1a:	020b      	lsls	r3, r1, #8
 8009d1c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009d20:	0202      	lsls	r2, r0, #8
 8009d22:	6979      	ldr	r1, [r7, #20]
 8009d24:	6849      	ldr	r1, [r1, #4]
 8009d26:	0849      	lsrs	r1, r1, #1
 8009d28:	2000      	movs	r0, #0
 8009d2a:	460c      	mov	r4, r1
 8009d2c:	4605      	mov	r5, r0
 8009d2e:	eb12 0804 	adds.w	r8, r2, r4
 8009d32:	eb43 0905 	adc.w	r9, r3, r5
 8009d36:	697b      	ldr	r3, [r7, #20]
 8009d38:	685b      	ldr	r3, [r3, #4]
 8009d3a:	2200      	movs	r2, #0
 8009d3c:	469a      	mov	sl, r3
 8009d3e:	4693      	mov	fp, r2
 8009d40:	4652      	mov	r2, sl
 8009d42:	465b      	mov	r3, fp
 8009d44:	4640      	mov	r0, r8
 8009d46:	4649      	mov	r1, r9
 8009d48:	f7f6 fad2 	bl	80002f0 <__aeabi_uldivmod>
 8009d4c:	4602      	mov	r2, r0
 8009d4e:	460b      	mov	r3, r1
 8009d50:	4613      	mov	r3, r2
 8009d52:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009d54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d56:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009d5a:	d308      	bcc.n	8009d6e <UART_SetConfig+0x9a2>
 8009d5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d5e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009d62:	d204      	bcs.n	8009d6e <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8009d64:	697b      	ldr	r3, [r7, #20]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009d6a:	60da      	str	r2, [r3, #12]
 8009d6c:	e17f      	b.n	800a06e <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8009d6e:	2301      	movs	r3, #1
 8009d70:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009d74:	e17b      	b.n	800a06e <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009d76:	697b      	ldr	r3, [r7, #20]
 8009d78:	69db      	ldr	r3, [r3, #28]
 8009d7a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009d7e:	f040 80bd 	bne.w	8009efc <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8009d82:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009d86:	2b20      	cmp	r3, #32
 8009d88:	dc48      	bgt.n	8009e1c <UART_SetConfig+0xa50>
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	db7b      	blt.n	8009e86 <UART_SetConfig+0xaba>
 8009d8e:	2b20      	cmp	r3, #32
 8009d90:	d879      	bhi.n	8009e86 <UART_SetConfig+0xaba>
 8009d92:	a201      	add	r2, pc, #4	@ (adr r2, 8009d98 <UART_SetConfig+0x9cc>)
 8009d94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d98:	08009e23 	.word	0x08009e23
 8009d9c:	08009e2b 	.word	0x08009e2b
 8009da0:	08009e87 	.word	0x08009e87
 8009da4:	08009e87 	.word	0x08009e87
 8009da8:	08009e33 	.word	0x08009e33
 8009dac:	08009e87 	.word	0x08009e87
 8009db0:	08009e87 	.word	0x08009e87
 8009db4:	08009e87 	.word	0x08009e87
 8009db8:	08009e43 	.word	0x08009e43
 8009dbc:	08009e87 	.word	0x08009e87
 8009dc0:	08009e87 	.word	0x08009e87
 8009dc4:	08009e87 	.word	0x08009e87
 8009dc8:	08009e87 	.word	0x08009e87
 8009dcc:	08009e87 	.word	0x08009e87
 8009dd0:	08009e87 	.word	0x08009e87
 8009dd4:	08009e87 	.word	0x08009e87
 8009dd8:	08009e53 	.word	0x08009e53
 8009ddc:	08009e87 	.word	0x08009e87
 8009de0:	08009e87 	.word	0x08009e87
 8009de4:	08009e87 	.word	0x08009e87
 8009de8:	08009e87 	.word	0x08009e87
 8009dec:	08009e87 	.word	0x08009e87
 8009df0:	08009e87 	.word	0x08009e87
 8009df4:	08009e87 	.word	0x08009e87
 8009df8:	08009e87 	.word	0x08009e87
 8009dfc:	08009e87 	.word	0x08009e87
 8009e00:	08009e87 	.word	0x08009e87
 8009e04:	08009e87 	.word	0x08009e87
 8009e08:	08009e87 	.word	0x08009e87
 8009e0c:	08009e87 	.word	0x08009e87
 8009e10:	08009e87 	.word	0x08009e87
 8009e14:	08009e87 	.word	0x08009e87
 8009e18:	08009e79 	.word	0x08009e79
 8009e1c:	2b40      	cmp	r3, #64	@ 0x40
 8009e1e:	d02e      	beq.n	8009e7e <UART_SetConfig+0xab2>
 8009e20:	e031      	b.n	8009e86 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009e22:	f7fd f967 	bl	80070f4 <HAL_RCC_GetPCLK1Freq>
 8009e26:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009e28:	e033      	b.n	8009e92 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009e2a:	f7fd f979 	bl	8007120 <HAL_RCC_GetPCLK2Freq>
 8009e2e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009e30:	e02f      	b.n	8009e92 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009e32:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009e36:	4618      	mov	r0, r3
 8009e38:	f7fe fb9e 	bl	8008578 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009e3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e40:	e027      	b.n	8009e92 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009e42:	f107 0318 	add.w	r3, r7, #24
 8009e46:	4618      	mov	r0, r3
 8009e48:	f7fe fcea 	bl	8008820 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009e4c:	69fb      	ldr	r3, [r7, #28]
 8009e4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e50:	e01f      	b.n	8009e92 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009e52:	4b69      	ldr	r3, [pc, #420]	@ (8009ff8 <UART_SetConfig+0xc2c>)
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	f003 0320 	and.w	r3, r3, #32
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d009      	beq.n	8009e72 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009e5e:	4b66      	ldr	r3, [pc, #408]	@ (8009ff8 <UART_SetConfig+0xc2c>)
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	08db      	lsrs	r3, r3, #3
 8009e64:	f003 0303 	and.w	r3, r3, #3
 8009e68:	4a64      	ldr	r2, [pc, #400]	@ (8009ffc <UART_SetConfig+0xc30>)
 8009e6a:	fa22 f303 	lsr.w	r3, r2, r3
 8009e6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009e70:	e00f      	b.n	8009e92 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8009e72:	4b62      	ldr	r3, [pc, #392]	@ (8009ffc <UART_SetConfig+0xc30>)
 8009e74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e76:	e00c      	b.n	8009e92 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009e78:	4b61      	ldr	r3, [pc, #388]	@ (800a000 <UART_SetConfig+0xc34>)
 8009e7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e7c:	e009      	b.n	8009e92 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009e7e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009e82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e84:	e005      	b.n	8009e92 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8009e86:	2300      	movs	r3, #0
 8009e88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009e8a:	2301      	movs	r3, #1
 8009e8c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009e90:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009e92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	f000 80ea 	beq.w	800a06e <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009e9a:	697b      	ldr	r3, [r7, #20]
 8009e9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e9e:	4a55      	ldr	r2, [pc, #340]	@ (8009ff4 <UART_SetConfig+0xc28>)
 8009ea0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009ea4:	461a      	mov	r2, r3
 8009ea6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ea8:	fbb3 f3f2 	udiv	r3, r3, r2
 8009eac:	005a      	lsls	r2, r3, #1
 8009eae:	697b      	ldr	r3, [r7, #20]
 8009eb0:	685b      	ldr	r3, [r3, #4]
 8009eb2:	085b      	lsrs	r3, r3, #1
 8009eb4:	441a      	add	r2, r3
 8009eb6:	697b      	ldr	r3, [r7, #20]
 8009eb8:	685b      	ldr	r3, [r3, #4]
 8009eba:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ebe:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009ec0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ec2:	2b0f      	cmp	r3, #15
 8009ec4:	d916      	bls.n	8009ef4 <UART_SetConfig+0xb28>
 8009ec6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ec8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009ecc:	d212      	bcs.n	8009ef4 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009ece:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ed0:	b29b      	uxth	r3, r3
 8009ed2:	f023 030f 	bic.w	r3, r3, #15
 8009ed6:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009ed8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009eda:	085b      	lsrs	r3, r3, #1
 8009edc:	b29b      	uxth	r3, r3
 8009ede:	f003 0307 	and.w	r3, r3, #7
 8009ee2:	b29a      	uxth	r2, r3
 8009ee4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009ee6:	4313      	orrs	r3, r2
 8009ee8:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8009eea:	697b      	ldr	r3, [r7, #20]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8009ef0:	60da      	str	r2, [r3, #12]
 8009ef2:	e0bc      	b.n	800a06e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8009ef4:	2301      	movs	r3, #1
 8009ef6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009efa:	e0b8      	b.n	800a06e <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009efc:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009f00:	2b20      	cmp	r3, #32
 8009f02:	dc4b      	bgt.n	8009f9c <UART_SetConfig+0xbd0>
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	f2c0 8087 	blt.w	800a018 <UART_SetConfig+0xc4c>
 8009f0a:	2b20      	cmp	r3, #32
 8009f0c:	f200 8084 	bhi.w	800a018 <UART_SetConfig+0xc4c>
 8009f10:	a201      	add	r2, pc, #4	@ (adr r2, 8009f18 <UART_SetConfig+0xb4c>)
 8009f12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f16:	bf00      	nop
 8009f18:	08009fa3 	.word	0x08009fa3
 8009f1c:	08009fab 	.word	0x08009fab
 8009f20:	0800a019 	.word	0x0800a019
 8009f24:	0800a019 	.word	0x0800a019
 8009f28:	08009fb3 	.word	0x08009fb3
 8009f2c:	0800a019 	.word	0x0800a019
 8009f30:	0800a019 	.word	0x0800a019
 8009f34:	0800a019 	.word	0x0800a019
 8009f38:	08009fc3 	.word	0x08009fc3
 8009f3c:	0800a019 	.word	0x0800a019
 8009f40:	0800a019 	.word	0x0800a019
 8009f44:	0800a019 	.word	0x0800a019
 8009f48:	0800a019 	.word	0x0800a019
 8009f4c:	0800a019 	.word	0x0800a019
 8009f50:	0800a019 	.word	0x0800a019
 8009f54:	0800a019 	.word	0x0800a019
 8009f58:	08009fd3 	.word	0x08009fd3
 8009f5c:	0800a019 	.word	0x0800a019
 8009f60:	0800a019 	.word	0x0800a019
 8009f64:	0800a019 	.word	0x0800a019
 8009f68:	0800a019 	.word	0x0800a019
 8009f6c:	0800a019 	.word	0x0800a019
 8009f70:	0800a019 	.word	0x0800a019
 8009f74:	0800a019 	.word	0x0800a019
 8009f78:	0800a019 	.word	0x0800a019
 8009f7c:	0800a019 	.word	0x0800a019
 8009f80:	0800a019 	.word	0x0800a019
 8009f84:	0800a019 	.word	0x0800a019
 8009f88:	0800a019 	.word	0x0800a019
 8009f8c:	0800a019 	.word	0x0800a019
 8009f90:	0800a019 	.word	0x0800a019
 8009f94:	0800a019 	.word	0x0800a019
 8009f98:	0800a00b 	.word	0x0800a00b
 8009f9c:	2b40      	cmp	r3, #64	@ 0x40
 8009f9e:	d037      	beq.n	800a010 <UART_SetConfig+0xc44>
 8009fa0:	e03a      	b.n	800a018 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009fa2:	f7fd f8a7 	bl	80070f4 <HAL_RCC_GetPCLK1Freq>
 8009fa6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009fa8:	e03c      	b.n	800a024 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009faa:	f7fd f8b9 	bl	8007120 <HAL_RCC_GetPCLK2Freq>
 8009fae:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009fb0:	e038      	b.n	800a024 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009fb2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	f7fe fade 	bl	8008578 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009fbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009fc0:	e030      	b.n	800a024 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009fc2:	f107 0318 	add.w	r3, r7, #24
 8009fc6:	4618      	mov	r0, r3
 8009fc8:	f7fe fc2a 	bl	8008820 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009fcc:	69fb      	ldr	r3, [r7, #28]
 8009fce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009fd0:	e028      	b.n	800a024 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009fd2:	4b09      	ldr	r3, [pc, #36]	@ (8009ff8 <UART_SetConfig+0xc2c>)
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	f003 0320 	and.w	r3, r3, #32
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d012      	beq.n	800a004 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009fde:	4b06      	ldr	r3, [pc, #24]	@ (8009ff8 <UART_SetConfig+0xc2c>)
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	08db      	lsrs	r3, r3, #3
 8009fe4:	f003 0303 	and.w	r3, r3, #3
 8009fe8:	4a04      	ldr	r2, [pc, #16]	@ (8009ffc <UART_SetConfig+0xc30>)
 8009fea:	fa22 f303 	lsr.w	r3, r2, r3
 8009fee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009ff0:	e018      	b.n	800a024 <UART_SetConfig+0xc58>
 8009ff2:	bf00      	nop
 8009ff4:	0800c080 	.word	0x0800c080
 8009ff8:	58024400 	.word	0x58024400
 8009ffc:	03d09000 	.word	0x03d09000
 800a000:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800a004:	4b24      	ldr	r3, [pc, #144]	@ (800a098 <UART_SetConfig+0xccc>)
 800a006:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a008:	e00c      	b.n	800a024 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a00a:	4b24      	ldr	r3, [pc, #144]	@ (800a09c <UART_SetConfig+0xcd0>)
 800a00c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a00e:	e009      	b.n	800a024 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a010:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a014:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a016:	e005      	b.n	800a024 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800a018:	2300      	movs	r3, #0
 800a01a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a01c:	2301      	movs	r3, #1
 800a01e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a022:	bf00      	nop
    }

    if (pclk != 0U)
 800a024:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a026:	2b00      	cmp	r3, #0
 800a028:	d021      	beq.n	800a06e <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a02a:	697b      	ldr	r3, [r7, #20]
 800a02c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a02e:	4a1c      	ldr	r2, [pc, #112]	@ (800a0a0 <UART_SetConfig+0xcd4>)
 800a030:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a034:	461a      	mov	r2, r3
 800a036:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a038:	fbb3 f2f2 	udiv	r2, r3, r2
 800a03c:	697b      	ldr	r3, [r7, #20]
 800a03e:	685b      	ldr	r3, [r3, #4]
 800a040:	085b      	lsrs	r3, r3, #1
 800a042:	441a      	add	r2, r3
 800a044:	697b      	ldr	r3, [r7, #20]
 800a046:	685b      	ldr	r3, [r3, #4]
 800a048:	fbb2 f3f3 	udiv	r3, r2, r3
 800a04c:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a04e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a050:	2b0f      	cmp	r3, #15
 800a052:	d909      	bls.n	800a068 <UART_SetConfig+0xc9c>
 800a054:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a056:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a05a:	d205      	bcs.n	800a068 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a05c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a05e:	b29a      	uxth	r2, r3
 800a060:	697b      	ldr	r3, [r7, #20]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	60da      	str	r2, [r3, #12]
 800a066:	e002      	b.n	800a06e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800a068:	2301      	movs	r3, #1
 800a06a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a06e:	697b      	ldr	r3, [r7, #20]
 800a070:	2201      	movs	r2, #1
 800a072:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800a076:	697b      	ldr	r3, [r7, #20]
 800a078:	2201      	movs	r2, #1
 800a07a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a07e:	697b      	ldr	r3, [r7, #20]
 800a080:	2200      	movs	r2, #0
 800a082:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a084:	697b      	ldr	r3, [r7, #20]
 800a086:	2200      	movs	r2, #0
 800a088:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a08a:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800a08e:	4618      	mov	r0, r3
 800a090:	3748      	adds	r7, #72	@ 0x48
 800a092:	46bd      	mov	sp, r7
 800a094:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a098:	03d09000 	.word	0x03d09000
 800a09c:	003d0900 	.word	0x003d0900
 800a0a0:	0800c080 	.word	0x0800c080

0800a0a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a0a4:	b480      	push	{r7}
 800a0a6:	b083      	sub	sp, #12
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0b0:	f003 0308 	and.w	r3, r3, #8
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d00a      	beq.n	800a0ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	685b      	ldr	r3, [r3, #4]
 800a0be:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	430a      	orrs	r2, r1
 800a0cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0d2:	f003 0301 	and.w	r3, r3, #1
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d00a      	beq.n	800a0f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	685b      	ldr	r3, [r3, #4]
 800a0e0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	430a      	orrs	r2, r1
 800a0ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0f4:	f003 0302 	and.w	r3, r3, #2
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d00a      	beq.n	800a112 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	685b      	ldr	r3, [r3, #4]
 800a102:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	430a      	orrs	r2, r1
 800a110:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a116:	f003 0304 	and.w	r3, r3, #4
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d00a      	beq.n	800a134 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	685b      	ldr	r3, [r3, #4]
 800a124:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	430a      	orrs	r2, r1
 800a132:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a138:	f003 0310 	and.w	r3, r3, #16
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d00a      	beq.n	800a156 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	689b      	ldr	r3, [r3, #8]
 800a146:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	430a      	orrs	r2, r1
 800a154:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a15a:	f003 0320 	and.w	r3, r3, #32
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d00a      	beq.n	800a178 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	689b      	ldr	r3, [r3, #8]
 800a168:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	430a      	orrs	r2, r1
 800a176:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a17c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a180:	2b00      	cmp	r3, #0
 800a182:	d01a      	beq.n	800a1ba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	685b      	ldr	r3, [r3, #4]
 800a18a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	430a      	orrs	r2, r1
 800a198:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a19e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a1a2:	d10a      	bne.n	800a1ba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	685b      	ldr	r3, [r3, #4]
 800a1aa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	430a      	orrs	r2, r1
 800a1b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d00a      	beq.n	800a1dc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	685b      	ldr	r3, [r3, #4]
 800a1cc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	430a      	orrs	r2, r1
 800a1da:	605a      	str	r2, [r3, #4]
  }
}
 800a1dc:	bf00      	nop
 800a1de:	370c      	adds	r7, #12
 800a1e0:	46bd      	mov	sp, r7
 800a1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e6:	4770      	bx	lr

0800a1e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a1e8:	b580      	push	{r7, lr}
 800a1ea:	b098      	sub	sp, #96	@ 0x60
 800a1ec:	af02      	add	r7, sp, #8
 800a1ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	2200      	movs	r2, #0
 800a1f4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a1f8:	f7f6 ff56 	bl	80010a8 <HAL_GetTick>
 800a1fc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	f003 0308 	and.w	r3, r3, #8
 800a208:	2b08      	cmp	r3, #8
 800a20a:	d12f      	bne.n	800a26c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a20c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a210:	9300      	str	r3, [sp, #0]
 800a212:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a214:	2200      	movs	r2, #0
 800a216:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a21a:	6878      	ldr	r0, [r7, #4]
 800a21c:	f000 f88e 	bl	800a33c <UART_WaitOnFlagUntilTimeout>
 800a220:	4603      	mov	r3, r0
 800a222:	2b00      	cmp	r3, #0
 800a224:	d022      	beq.n	800a26c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a22c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a22e:	e853 3f00 	ldrex	r3, [r3]
 800a232:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a234:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a236:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a23a:	653b      	str	r3, [r7, #80]	@ 0x50
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	461a      	mov	r2, r3
 800a242:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a244:	647b      	str	r3, [r7, #68]	@ 0x44
 800a246:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a248:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a24a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a24c:	e841 2300 	strex	r3, r2, [r1]
 800a250:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a252:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a254:	2b00      	cmp	r3, #0
 800a256:	d1e6      	bne.n	800a226 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	2220      	movs	r2, #32
 800a25c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	2200      	movs	r2, #0
 800a264:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a268:	2303      	movs	r3, #3
 800a26a:	e063      	b.n	800a334 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	f003 0304 	and.w	r3, r3, #4
 800a276:	2b04      	cmp	r3, #4
 800a278:	d149      	bne.n	800a30e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a27a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a27e:	9300      	str	r3, [sp, #0]
 800a280:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a282:	2200      	movs	r2, #0
 800a284:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a288:	6878      	ldr	r0, [r7, #4]
 800a28a:	f000 f857 	bl	800a33c <UART_WaitOnFlagUntilTimeout>
 800a28e:	4603      	mov	r3, r0
 800a290:	2b00      	cmp	r3, #0
 800a292:	d03c      	beq.n	800a30e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a29a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a29c:	e853 3f00 	ldrex	r3, [r3]
 800a2a0:	623b      	str	r3, [r7, #32]
   return(result);
 800a2a2:	6a3b      	ldr	r3, [r7, #32]
 800a2a4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a2a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	461a      	mov	r2, r3
 800a2b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a2b2:	633b      	str	r3, [r7, #48]	@ 0x30
 800a2b4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2b6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a2b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a2ba:	e841 2300 	strex	r3, r2, [r1]
 800a2be:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a2c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d1e6      	bne.n	800a294 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	3308      	adds	r3, #8
 800a2cc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2ce:	693b      	ldr	r3, [r7, #16]
 800a2d0:	e853 3f00 	ldrex	r3, [r3]
 800a2d4:	60fb      	str	r3, [r7, #12]
   return(result);
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	f023 0301 	bic.w	r3, r3, #1
 800a2dc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	3308      	adds	r3, #8
 800a2e4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a2e6:	61fa      	str	r2, [r7, #28]
 800a2e8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2ea:	69b9      	ldr	r1, [r7, #24]
 800a2ec:	69fa      	ldr	r2, [r7, #28]
 800a2ee:	e841 2300 	strex	r3, r2, [r1]
 800a2f2:	617b      	str	r3, [r7, #20]
   return(result);
 800a2f4:	697b      	ldr	r3, [r7, #20]
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d1e5      	bne.n	800a2c6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	2220      	movs	r2, #32
 800a2fe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	2200      	movs	r2, #0
 800a306:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a30a:	2303      	movs	r3, #3
 800a30c:	e012      	b.n	800a334 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	2220      	movs	r2, #32
 800a312:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	2220      	movs	r2, #32
 800a31a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	2200      	movs	r2, #0
 800a322:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	2200      	movs	r2, #0
 800a328:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	2200      	movs	r2, #0
 800a32e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a332:	2300      	movs	r3, #0
}
 800a334:	4618      	mov	r0, r3
 800a336:	3758      	adds	r7, #88	@ 0x58
 800a338:	46bd      	mov	sp, r7
 800a33a:	bd80      	pop	{r7, pc}

0800a33c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a33c:	b580      	push	{r7, lr}
 800a33e:	b084      	sub	sp, #16
 800a340:	af00      	add	r7, sp, #0
 800a342:	60f8      	str	r0, [r7, #12]
 800a344:	60b9      	str	r1, [r7, #8]
 800a346:	603b      	str	r3, [r7, #0]
 800a348:	4613      	mov	r3, r2
 800a34a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a34c:	e04f      	b.n	800a3ee <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a34e:	69bb      	ldr	r3, [r7, #24]
 800a350:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a354:	d04b      	beq.n	800a3ee <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a356:	f7f6 fea7 	bl	80010a8 <HAL_GetTick>
 800a35a:	4602      	mov	r2, r0
 800a35c:	683b      	ldr	r3, [r7, #0]
 800a35e:	1ad3      	subs	r3, r2, r3
 800a360:	69ba      	ldr	r2, [r7, #24]
 800a362:	429a      	cmp	r2, r3
 800a364:	d302      	bcc.n	800a36c <UART_WaitOnFlagUntilTimeout+0x30>
 800a366:	69bb      	ldr	r3, [r7, #24]
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d101      	bne.n	800a370 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a36c:	2303      	movs	r3, #3
 800a36e:	e04e      	b.n	800a40e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	f003 0304 	and.w	r3, r3, #4
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d037      	beq.n	800a3ee <UART_WaitOnFlagUntilTimeout+0xb2>
 800a37e:	68bb      	ldr	r3, [r7, #8]
 800a380:	2b80      	cmp	r3, #128	@ 0x80
 800a382:	d034      	beq.n	800a3ee <UART_WaitOnFlagUntilTimeout+0xb2>
 800a384:	68bb      	ldr	r3, [r7, #8]
 800a386:	2b40      	cmp	r3, #64	@ 0x40
 800a388:	d031      	beq.n	800a3ee <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	69db      	ldr	r3, [r3, #28]
 800a390:	f003 0308 	and.w	r3, r3, #8
 800a394:	2b08      	cmp	r3, #8
 800a396:	d110      	bne.n	800a3ba <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	2208      	movs	r2, #8
 800a39e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a3a0:	68f8      	ldr	r0, [r7, #12]
 800a3a2:	f000 f839 	bl	800a418 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	2208      	movs	r2, #8
 800a3aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	2200      	movs	r2, #0
 800a3b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a3b6:	2301      	movs	r3, #1
 800a3b8:	e029      	b.n	800a40e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	69db      	ldr	r3, [r3, #28]
 800a3c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a3c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a3c8:	d111      	bne.n	800a3ee <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a3d2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a3d4:	68f8      	ldr	r0, [r7, #12]
 800a3d6:	f000 f81f 	bl	800a418 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	2220      	movs	r2, #32
 800a3de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	2200      	movs	r2, #0
 800a3e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a3ea:	2303      	movs	r3, #3
 800a3ec:	e00f      	b.n	800a40e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	69da      	ldr	r2, [r3, #28]
 800a3f4:	68bb      	ldr	r3, [r7, #8]
 800a3f6:	4013      	ands	r3, r2
 800a3f8:	68ba      	ldr	r2, [r7, #8]
 800a3fa:	429a      	cmp	r2, r3
 800a3fc:	bf0c      	ite	eq
 800a3fe:	2301      	moveq	r3, #1
 800a400:	2300      	movne	r3, #0
 800a402:	b2db      	uxtb	r3, r3
 800a404:	461a      	mov	r2, r3
 800a406:	79fb      	ldrb	r3, [r7, #7]
 800a408:	429a      	cmp	r2, r3
 800a40a:	d0a0      	beq.n	800a34e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a40c:	2300      	movs	r3, #0
}
 800a40e:	4618      	mov	r0, r3
 800a410:	3710      	adds	r7, #16
 800a412:	46bd      	mov	sp, r7
 800a414:	bd80      	pop	{r7, pc}
	...

0800a418 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a418:	b480      	push	{r7}
 800a41a:	b095      	sub	sp, #84	@ 0x54
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a426:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a428:	e853 3f00 	ldrex	r3, [r3]
 800a42c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a42e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a430:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a434:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	461a      	mov	r2, r3
 800a43c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a43e:	643b      	str	r3, [r7, #64]	@ 0x40
 800a440:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a442:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a444:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a446:	e841 2300 	strex	r3, r2, [r1]
 800a44a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a44c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d1e6      	bne.n	800a420 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	3308      	adds	r3, #8
 800a458:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a45a:	6a3b      	ldr	r3, [r7, #32]
 800a45c:	e853 3f00 	ldrex	r3, [r3]
 800a460:	61fb      	str	r3, [r7, #28]
   return(result);
 800a462:	69fa      	ldr	r2, [r7, #28]
 800a464:	4b1e      	ldr	r3, [pc, #120]	@ (800a4e0 <UART_EndRxTransfer+0xc8>)
 800a466:	4013      	ands	r3, r2
 800a468:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	3308      	adds	r3, #8
 800a470:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a472:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a474:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a476:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a478:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a47a:	e841 2300 	strex	r3, r2, [r1]
 800a47e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a482:	2b00      	cmp	r3, #0
 800a484:	d1e5      	bne.n	800a452 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a48a:	2b01      	cmp	r3, #1
 800a48c:	d118      	bne.n	800a4c0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	e853 3f00 	ldrex	r3, [r3]
 800a49a:	60bb      	str	r3, [r7, #8]
   return(result);
 800a49c:	68bb      	ldr	r3, [r7, #8]
 800a49e:	f023 0310 	bic.w	r3, r3, #16
 800a4a2:	647b      	str	r3, [r7, #68]	@ 0x44
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	461a      	mov	r2, r3
 800a4aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a4ac:	61bb      	str	r3, [r7, #24]
 800a4ae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4b0:	6979      	ldr	r1, [r7, #20]
 800a4b2:	69ba      	ldr	r2, [r7, #24]
 800a4b4:	e841 2300 	strex	r3, r2, [r1]
 800a4b8:	613b      	str	r3, [r7, #16]
   return(result);
 800a4ba:	693b      	ldr	r3, [r7, #16]
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d1e6      	bne.n	800a48e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	2220      	movs	r2, #32
 800a4c4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	2200      	movs	r2, #0
 800a4cc:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	2200      	movs	r2, #0
 800a4d2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a4d4:	bf00      	nop
 800a4d6:	3754      	adds	r7, #84	@ 0x54
 800a4d8:	46bd      	mov	sp, r7
 800a4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4de:	4770      	bx	lr
 800a4e0:	effffffe 	.word	0xeffffffe

0800a4e4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a4e4:	b480      	push	{r7}
 800a4e6:	b085      	sub	sp, #20
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a4f2:	2b01      	cmp	r3, #1
 800a4f4:	d101      	bne.n	800a4fa <HAL_UARTEx_DisableFifoMode+0x16>
 800a4f6:	2302      	movs	r3, #2
 800a4f8:	e027      	b.n	800a54a <HAL_UARTEx_DisableFifoMode+0x66>
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	2201      	movs	r2, #1
 800a4fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	2224      	movs	r2, #36	@ 0x24
 800a506:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	681a      	ldr	r2, [r3, #0]
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	f022 0201 	bic.w	r2, r2, #1
 800a520:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a528:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	2200      	movs	r2, #0
 800a52e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	68fa      	ldr	r2, [r7, #12]
 800a536:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	2220      	movs	r2, #32
 800a53c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	2200      	movs	r2, #0
 800a544:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a548:	2300      	movs	r3, #0
}
 800a54a:	4618      	mov	r0, r3
 800a54c:	3714      	adds	r7, #20
 800a54e:	46bd      	mov	sp, r7
 800a550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a554:	4770      	bx	lr

0800a556 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a556:	b580      	push	{r7, lr}
 800a558:	b084      	sub	sp, #16
 800a55a:	af00      	add	r7, sp, #0
 800a55c:	6078      	str	r0, [r7, #4]
 800a55e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a566:	2b01      	cmp	r3, #1
 800a568:	d101      	bne.n	800a56e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a56a:	2302      	movs	r3, #2
 800a56c:	e02d      	b.n	800a5ca <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	2201      	movs	r2, #1
 800a572:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	2224      	movs	r2, #36	@ 0x24
 800a57a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	681a      	ldr	r2, [r3, #0]
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	f022 0201 	bic.w	r2, r2, #1
 800a594:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	689b      	ldr	r3, [r3, #8]
 800a59c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	683a      	ldr	r2, [r7, #0]
 800a5a6:	430a      	orrs	r2, r1
 800a5a8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a5aa:	6878      	ldr	r0, [r7, #4]
 800a5ac:	f000 f850 	bl	800a650 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	68fa      	ldr	r2, [r7, #12]
 800a5b6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	2220      	movs	r2, #32
 800a5bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	2200      	movs	r2, #0
 800a5c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a5c8:	2300      	movs	r3, #0
}
 800a5ca:	4618      	mov	r0, r3
 800a5cc:	3710      	adds	r7, #16
 800a5ce:	46bd      	mov	sp, r7
 800a5d0:	bd80      	pop	{r7, pc}

0800a5d2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a5d2:	b580      	push	{r7, lr}
 800a5d4:	b084      	sub	sp, #16
 800a5d6:	af00      	add	r7, sp, #0
 800a5d8:	6078      	str	r0, [r7, #4]
 800a5da:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a5e2:	2b01      	cmp	r3, #1
 800a5e4:	d101      	bne.n	800a5ea <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a5e6:	2302      	movs	r3, #2
 800a5e8:	e02d      	b.n	800a646 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	2201      	movs	r2, #1
 800a5ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	2224      	movs	r2, #36	@ 0x24
 800a5f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	681a      	ldr	r2, [r3, #0]
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	f022 0201 	bic.w	r2, r2, #1
 800a610:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	689b      	ldr	r3, [r3, #8]
 800a618:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	683a      	ldr	r2, [r7, #0]
 800a622:	430a      	orrs	r2, r1
 800a624:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a626:	6878      	ldr	r0, [r7, #4]
 800a628:	f000 f812 	bl	800a650 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	68fa      	ldr	r2, [r7, #12]
 800a632:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	2220      	movs	r2, #32
 800a638:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	2200      	movs	r2, #0
 800a640:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a644:	2300      	movs	r3, #0
}
 800a646:	4618      	mov	r0, r3
 800a648:	3710      	adds	r7, #16
 800a64a:	46bd      	mov	sp, r7
 800a64c:	bd80      	pop	{r7, pc}
	...

0800a650 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a650:	b480      	push	{r7}
 800a652:	b085      	sub	sp, #20
 800a654:	af00      	add	r7, sp, #0
 800a656:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d108      	bne.n	800a672 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	2201      	movs	r2, #1
 800a664:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	2201      	movs	r2, #1
 800a66c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a670:	e031      	b.n	800a6d6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a672:	2310      	movs	r3, #16
 800a674:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a676:	2310      	movs	r3, #16
 800a678:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	689b      	ldr	r3, [r3, #8]
 800a680:	0e5b      	lsrs	r3, r3, #25
 800a682:	b2db      	uxtb	r3, r3
 800a684:	f003 0307 	and.w	r3, r3, #7
 800a688:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	689b      	ldr	r3, [r3, #8]
 800a690:	0f5b      	lsrs	r3, r3, #29
 800a692:	b2db      	uxtb	r3, r3
 800a694:	f003 0307 	and.w	r3, r3, #7
 800a698:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a69a:	7bbb      	ldrb	r3, [r7, #14]
 800a69c:	7b3a      	ldrb	r2, [r7, #12]
 800a69e:	4911      	ldr	r1, [pc, #68]	@ (800a6e4 <UARTEx_SetNbDataToProcess+0x94>)
 800a6a0:	5c8a      	ldrb	r2, [r1, r2]
 800a6a2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a6a6:	7b3a      	ldrb	r2, [r7, #12]
 800a6a8:	490f      	ldr	r1, [pc, #60]	@ (800a6e8 <UARTEx_SetNbDataToProcess+0x98>)
 800a6aa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a6ac:	fb93 f3f2 	sdiv	r3, r3, r2
 800a6b0:	b29a      	uxth	r2, r3
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a6b8:	7bfb      	ldrb	r3, [r7, #15]
 800a6ba:	7b7a      	ldrb	r2, [r7, #13]
 800a6bc:	4909      	ldr	r1, [pc, #36]	@ (800a6e4 <UARTEx_SetNbDataToProcess+0x94>)
 800a6be:	5c8a      	ldrb	r2, [r1, r2]
 800a6c0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a6c4:	7b7a      	ldrb	r2, [r7, #13]
 800a6c6:	4908      	ldr	r1, [pc, #32]	@ (800a6e8 <UARTEx_SetNbDataToProcess+0x98>)
 800a6c8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a6ca:	fb93 f3f2 	sdiv	r3, r3, r2
 800a6ce:	b29a      	uxth	r2, r3
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a6d6:	bf00      	nop
 800a6d8:	3714      	adds	r7, #20
 800a6da:	46bd      	mov	sp, r7
 800a6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e0:	4770      	bx	lr
 800a6e2:	bf00      	nop
 800a6e4:	0800c098 	.word	0x0800c098
 800a6e8:	0800c0a0 	.word	0x0800c0a0

0800a6ec <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800a6ec:	b480      	push	{r7}
 800a6ee:	b085      	sub	sp, #20
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	4603      	mov	r3, r0
 800a6f4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800a6f6:	2300      	movs	r3, #0
 800a6f8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800a6fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a6fe:	2b84      	cmp	r3, #132	@ 0x84
 800a700:	d005      	beq.n	800a70e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800a702:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	4413      	add	r3, r2
 800a70a:	3303      	adds	r3, #3
 800a70c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800a70e:	68fb      	ldr	r3, [r7, #12]
}
 800a710:	4618      	mov	r0, r3
 800a712:	3714      	adds	r7, #20
 800a714:	46bd      	mov	sp, r7
 800a716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a71a:	4770      	bx	lr

0800a71c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800a71c:	b580      	push	{r7, lr}
 800a71e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800a720:	f000 fbaa 	bl	800ae78 <vTaskStartScheduler>
  
  return osOK;
 800a724:	2300      	movs	r3, #0
}
 800a726:	4618      	mov	r0, r3
 800a728:	bd80      	pop	{r7, pc}

0800a72a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800a72a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a72c:	b089      	sub	sp, #36	@ 0x24
 800a72e:	af04      	add	r7, sp, #16
 800a730:	6078      	str	r0, [r7, #4]
 800a732:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	695b      	ldr	r3, [r3, #20]
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d020      	beq.n	800a77e <osThreadCreate+0x54>
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	699b      	ldr	r3, [r3, #24]
 800a740:	2b00      	cmp	r3, #0
 800a742:	d01c      	beq.n	800a77e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	685c      	ldr	r4, [r3, #4]
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	691e      	ldr	r6, [r3, #16]
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a756:	4618      	mov	r0, r3
 800a758:	f7ff ffc8 	bl	800a6ec <makeFreeRtosPriority>
 800a75c:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	695b      	ldr	r3, [r3, #20]
 800a762:	687a      	ldr	r2, [r7, #4]
 800a764:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a766:	9202      	str	r2, [sp, #8]
 800a768:	9301      	str	r3, [sp, #4]
 800a76a:	9100      	str	r1, [sp, #0]
 800a76c:	683b      	ldr	r3, [r7, #0]
 800a76e:	4632      	mov	r2, r6
 800a770:	4629      	mov	r1, r5
 800a772:	4620      	mov	r0, r4
 800a774:	f000 f9b2 	bl	800aadc <xTaskCreateStatic>
 800a778:	4603      	mov	r3, r0
 800a77a:	60fb      	str	r3, [r7, #12]
 800a77c:	e01c      	b.n	800a7b8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	685c      	ldr	r4, [r3, #4]
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a78a:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a792:	4618      	mov	r0, r3
 800a794:	f7ff ffaa 	bl	800a6ec <makeFreeRtosPriority>
 800a798:	4602      	mov	r2, r0
 800a79a:	f107 030c 	add.w	r3, r7, #12
 800a79e:	9301      	str	r3, [sp, #4]
 800a7a0:	9200      	str	r2, [sp, #0]
 800a7a2:	683b      	ldr	r3, [r7, #0]
 800a7a4:	4632      	mov	r2, r6
 800a7a6:	4629      	mov	r1, r5
 800a7a8:	4620      	mov	r0, r4
 800a7aa:	f000 f9f7 	bl	800ab9c <xTaskCreate>
 800a7ae:	4603      	mov	r3, r0
 800a7b0:	2b01      	cmp	r3, #1
 800a7b2:	d001      	beq.n	800a7b8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800a7b4:	2300      	movs	r3, #0
 800a7b6:	e000      	b.n	800a7ba <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800a7b8:	68fb      	ldr	r3, [r7, #12]
}
 800a7ba:	4618      	mov	r0, r3
 800a7bc:	3714      	adds	r7, #20
 800a7be:	46bd      	mov	sp, r7
 800a7c0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a7c2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800a7c2:	b580      	push	{r7, lr}
 800a7c4:	b084      	sub	sp, #16
 800a7c6:	af00      	add	r7, sp, #0
 800a7c8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d001      	beq.n	800a7d8 <osDelay+0x16>
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	e000      	b.n	800a7da <osDelay+0x18>
 800a7d8:	2301      	movs	r3, #1
 800a7da:	4618      	mov	r0, r3
 800a7dc:	f000 fb16 	bl	800ae0c <vTaskDelay>
  
  return osOK;
 800a7e0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	3710      	adds	r7, #16
 800a7e6:	46bd      	mov	sp, r7
 800a7e8:	bd80      	pop	{r7, pc}

0800a7ea <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a7ea:	b480      	push	{r7}
 800a7ec:	b083      	sub	sp, #12
 800a7ee:	af00      	add	r7, sp, #0
 800a7f0:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	f103 0208 	add.w	r2, r3, #8
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	f04f 32ff 	mov.w	r2, #4294967295
 800a802:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	f103 0208 	add.w	r2, r3, #8
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	f103 0208 	add.w	r2, r3, #8
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	2200      	movs	r2, #0
 800a81c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a81e:	bf00      	nop
 800a820:	370c      	adds	r7, #12
 800a822:	46bd      	mov	sp, r7
 800a824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a828:	4770      	bx	lr

0800a82a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a82a:	b480      	push	{r7}
 800a82c:	b083      	sub	sp, #12
 800a82e:	af00      	add	r7, sp, #0
 800a830:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	2200      	movs	r2, #0
 800a836:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a838:	bf00      	nop
 800a83a:	370c      	adds	r7, #12
 800a83c:	46bd      	mov	sp, r7
 800a83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a842:	4770      	bx	lr

0800a844 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a844:	b480      	push	{r7}
 800a846:	b085      	sub	sp, #20
 800a848:	af00      	add	r7, sp, #0
 800a84a:	6078      	str	r0, [r7, #4]
 800a84c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	685b      	ldr	r3, [r3, #4]
 800a852:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a854:	683b      	ldr	r3, [r7, #0]
 800a856:	68fa      	ldr	r2, [r7, #12]
 800a858:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	689a      	ldr	r2, [r3, #8]
 800a85e:	683b      	ldr	r3, [r7, #0]
 800a860:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	689b      	ldr	r3, [r3, #8]
 800a866:	683a      	ldr	r2, [r7, #0]
 800a868:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	683a      	ldr	r2, [r7, #0]
 800a86e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a870:	683b      	ldr	r3, [r7, #0]
 800a872:	687a      	ldr	r2, [r7, #4]
 800a874:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	1c5a      	adds	r2, r3, #1
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	601a      	str	r2, [r3, #0]
}
 800a880:	bf00      	nop
 800a882:	3714      	adds	r7, #20
 800a884:	46bd      	mov	sp, r7
 800a886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a88a:	4770      	bx	lr

0800a88c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a88c:	b480      	push	{r7}
 800a88e:	b085      	sub	sp, #20
 800a890:	af00      	add	r7, sp, #0
 800a892:	6078      	str	r0, [r7, #4]
 800a894:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a896:	683b      	ldr	r3, [r7, #0]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a89c:	68bb      	ldr	r3, [r7, #8]
 800a89e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8a2:	d103      	bne.n	800a8ac <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	691b      	ldr	r3, [r3, #16]
 800a8a8:	60fb      	str	r3, [r7, #12]
 800a8aa:	e00c      	b.n	800a8c6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	3308      	adds	r3, #8
 800a8b0:	60fb      	str	r3, [r7, #12]
 800a8b2:	e002      	b.n	800a8ba <vListInsert+0x2e>
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	685b      	ldr	r3, [r3, #4]
 800a8b8:	60fb      	str	r3, [r7, #12]
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	685b      	ldr	r3, [r3, #4]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	68ba      	ldr	r2, [r7, #8]
 800a8c2:	429a      	cmp	r2, r3
 800a8c4:	d2f6      	bcs.n	800a8b4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	685a      	ldr	r2, [r3, #4]
 800a8ca:	683b      	ldr	r3, [r7, #0]
 800a8cc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a8ce:	683b      	ldr	r3, [r7, #0]
 800a8d0:	685b      	ldr	r3, [r3, #4]
 800a8d2:	683a      	ldr	r2, [r7, #0]
 800a8d4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a8d6:	683b      	ldr	r3, [r7, #0]
 800a8d8:	68fa      	ldr	r2, [r7, #12]
 800a8da:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	683a      	ldr	r2, [r7, #0]
 800a8e0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a8e2:	683b      	ldr	r3, [r7, #0]
 800a8e4:	687a      	ldr	r2, [r7, #4]
 800a8e6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	1c5a      	adds	r2, r3, #1
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	601a      	str	r2, [r3, #0]
}
 800a8f2:	bf00      	nop
 800a8f4:	3714      	adds	r7, #20
 800a8f6:	46bd      	mov	sp, r7
 800a8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8fc:	4770      	bx	lr

0800a8fe <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a8fe:	b480      	push	{r7}
 800a900:	b085      	sub	sp, #20
 800a902:	af00      	add	r7, sp, #0
 800a904:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	691b      	ldr	r3, [r3, #16]
 800a90a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	685b      	ldr	r3, [r3, #4]
 800a910:	687a      	ldr	r2, [r7, #4]
 800a912:	6892      	ldr	r2, [r2, #8]
 800a914:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	689b      	ldr	r3, [r3, #8]
 800a91a:	687a      	ldr	r2, [r7, #4]
 800a91c:	6852      	ldr	r2, [r2, #4]
 800a91e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	685b      	ldr	r3, [r3, #4]
 800a924:	687a      	ldr	r2, [r7, #4]
 800a926:	429a      	cmp	r2, r3
 800a928:	d103      	bne.n	800a932 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	689a      	ldr	r2, [r3, #8]
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	2200      	movs	r2, #0
 800a936:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	1e5a      	subs	r2, r3, #1
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	681b      	ldr	r3, [r3, #0]
}
 800a946:	4618      	mov	r0, r3
 800a948:	3714      	adds	r7, #20
 800a94a:	46bd      	mov	sp, r7
 800a94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a950:	4770      	bx	lr
	...

0800a954 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a954:	b580      	push	{r7, lr}
 800a956:	b084      	sub	sp, #16
 800a958:	af00      	add	r7, sp, #0
 800a95a:	6078      	str	r0, [r7, #4]
 800a95c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	2b00      	cmp	r3, #0
 800a966:	d10b      	bne.n	800a980 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a968:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a96c:	f383 8811 	msr	BASEPRI, r3
 800a970:	f3bf 8f6f 	isb	sy
 800a974:	f3bf 8f4f 	dsb	sy
 800a978:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a97a:	bf00      	nop
 800a97c:	bf00      	nop
 800a97e:	e7fd      	b.n	800a97c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a980:	f000 ff72 	bl	800b868 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	681a      	ldr	r2, [r3, #0]
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a98c:	68f9      	ldr	r1, [r7, #12]
 800a98e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a990:	fb01 f303 	mul.w	r3, r1, r3
 800a994:	441a      	add	r2, r3
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	2200      	movs	r2, #0
 800a99e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	681a      	ldr	r2, [r3, #0]
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	681a      	ldr	r2, [r3, #0]
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a9b0:	3b01      	subs	r3, #1
 800a9b2:	68f9      	ldr	r1, [r7, #12]
 800a9b4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a9b6:	fb01 f303 	mul.w	r3, r1, r3
 800a9ba:	441a      	add	r2, r3
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	22ff      	movs	r2, #255	@ 0xff
 800a9c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	22ff      	movs	r2, #255	@ 0xff
 800a9cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800a9d0:	683b      	ldr	r3, [r7, #0]
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d114      	bne.n	800aa00 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	691b      	ldr	r3, [r3, #16]
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d01a      	beq.n	800aa14 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	3310      	adds	r3, #16
 800a9e2:	4618      	mov	r0, r3
 800a9e4:	f000 fc6c 	bl	800b2c0 <xTaskRemoveFromEventList>
 800a9e8:	4603      	mov	r3, r0
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d012      	beq.n	800aa14 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a9ee:	4b0d      	ldr	r3, [pc, #52]	@ (800aa24 <xQueueGenericReset+0xd0>)
 800a9f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a9f4:	601a      	str	r2, [r3, #0]
 800a9f6:	f3bf 8f4f 	dsb	sy
 800a9fa:	f3bf 8f6f 	isb	sy
 800a9fe:	e009      	b.n	800aa14 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	3310      	adds	r3, #16
 800aa04:	4618      	mov	r0, r3
 800aa06:	f7ff fef0 	bl	800a7ea <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	3324      	adds	r3, #36	@ 0x24
 800aa0e:	4618      	mov	r0, r3
 800aa10:	f7ff feeb 	bl	800a7ea <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800aa14:	f000 ff5a 	bl	800b8cc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800aa18:	2301      	movs	r3, #1
}
 800aa1a:	4618      	mov	r0, r3
 800aa1c:	3710      	adds	r7, #16
 800aa1e:	46bd      	mov	sp, r7
 800aa20:	bd80      	pop	{r7, pc}
 800aa22:	bf00      	nop
 800aa24:	e000ed04 	.word	0xe000ed04

0800aa28 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800aa28:	b580      	push	{r7, lr}
 800aa2a:	b08a      	sub	sp, #40	@ 0x28
 800aa2c:	af02      	add	r7, sp, #8
 800aa2e:	60f8      	str	r0, [r7, #12]
 800aa30:	60b9      	str	r1, [r7, #8]
 800aa32:	4613      	mov	r3, r2
 800aa34:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d10b      	bne.n	800aa54 <xQueueGenericCreate+0x2c>
	__asm volatile
 800aa3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa40:	f383 8811 	msr	BASEPRI, r3
 800aa44:	f3bf 8f6f 	isb	sy
 800aa48:	f3bf 8f4f 	dsb	sy
 800aa4c:	613b      	str	r3, [r7, #16]
}
 800aa4e:	bf00      	nop
 800aa50:	bf00      	nop
 800aa52:	e7fd      	b.n	800aa50 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	68ba      	ldr	r2, [r7, #8]
 800aa58:	fb02 f303 	mul.w	r3, r2, r3
 800aa5c:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800aa5e:	69fb      	ldr	r3, [r7, #28]
 800aa60:	3348      	adds	r3, #72	@ 0x48
 800aa62:	4618      	mov	r0, r3
 800aa64:	f000 ffe0 	bl	800ba28 <pvPortMalloc>
 800aa68:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800aa6a:	69bb      	ldr	r3, [r7, #24]
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d011      	beq.n	800aa94 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800aa70:	69bb      	ldr	r3, [r7, #24]
 800aa72:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800aa74:	697b      	ldr	r3, [r7, #20]
 800aa76:	3348      	adds	r3, #72	@ 0x48
 800aa78:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800aa7a:	69bb      	ldr	r3, [r7, #24]
 800aa7c:	2200      	movs	r2, #0
 800aa7e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800aa82:	79fa      	ldrb	r2, [r7, #7]
 800aa84:	69bb      	ldr	r3, [r7, #24]
 800aa86:	9300      	str	r3, [sp, #0]
 800aa88:	4613      	mov	r3, r2
 800aa8a:	697a      	ldr	r2, [r7, #20]
 800aa8c:	68b9      	ldr	r1, [r7, #8]
 800aa8e:	68f8      	ldr	r0, [r7, #12]
 800aa90:	f000 f805 	bl	800aa9e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800aa94:	69bb      	ldr	r3, [r7, #24]
	}
 800aa96:	4618      	mov	r0, r3
 800aa98:	3720      	adds	r7, #32
 800aa9a:	46bd      	mov	sp, r7
 800aa9c:	bd80      	pop	{r7, pc}

0800aa9e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800aa9e:	b580      	push	{r7, lr}
 800aaa0:	b084      	sub	sp, #16
 800aaa2:	af00      	add	r7, sp, #0
 800aaa4:	60f8      	str	r0, [r7, #12]
 800aaa6:	60b9      	str	r1, [r7, #8]
 800aaa8:	607a      	str	r2, [r7, #4]
 800aaaa:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800aaac:	68bb      	ldr	r3, [r7, #8]
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d103      	bne.n	800aaba <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800aab2:	69bb      	ldr	r3, [r7, #24]
 800aab4:	69ba      	ldr	r2, [r7, #24]
 800aab6:	601a      	str	r2, [r3, #0]
 800aab8:	e002      	b.n	800aac0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800aaba:	69bb      	ldr	r3, [r7, #24]
 800aabc:	687a      	ldr	r2, [r7, #4]
 800aabe:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800aac0:	69bb      	ldr	r3, [r7, #24]
 800aac2:	68fa      	ldr	r2, [r7, #12]
 800aac4:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800aac6:	69bb      	ldr	r3, [r7, #24]
 800aac8:	68ba      	ldr	r2, [r7, #8]
 800aaca:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800aacc:	2101      	movs	r1, #1
 800aace:	69b8      	ldr	r0, [r7, #24]
 800aad0:	f7ff ff40 	bl	800a954 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800aad4:	bf00      	nop
 800aad6:	3710      	adds	r7, #16
 800aad8:	46bd      	mov	sp, r7
 800aada:	bd80      	pop	{r7, pc}

0800aadc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800aadc:	b580      	push	{r7, lr}
 800aade:	b08e      	sub	sp, #56	@ 0x38
 800aae0:	af04      	add	r7, sp, #16
 800aae2:	60f8      	str	r0, [r7, #12]
 800aae4:	60b9      	str	r1, [r7, #8]
 800aae6:	607a      	str	r2, [r7, #4]
 800aae8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800aaea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d10b      	bne.n	800ab08 <xTaskCreateStatic+0x2c>
	__asm volatile
 800aaf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aaf4:	f383 8811 	msr	BASEPRI, r3
 800aaf8:	f3bf 8f6f 	isb	sy
 800aafc:	f3bf 8f4f 	dsb	sy
 800ab00:	623b      	str	r3, [r7, #32]
}
 800ab02:	bf00      	nop
 800ab04:	bf00      	nop
 800ab06:	e7fd      	b.n	800ab04 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800ab08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d10b      	bne.n	800ab26 <xTaskCreateStatic+0x4a>
	__asm volatile
 800ab0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab12:	f383 8811 	msr	BASEPRI, r3
 800ab16:	f3bf 8f6f 	isb	sy
 800ab1a:	f3bf 8f4f 	dsb	sy
 800ab1e:	61fb      	str	r3, [r7, #28]
}
 800ab20:	bf00      	nop
 800ab22:	bf00      	nop
 800ab24:	e7fd      	b.n	800ab22 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ab26:	2354      	movs	r3, #84	@ 0x54
 800ab28:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ab2a:	693b      	ldr	r3, [r7, #16]
 800ab2c:	2b54      	cmp	r3, #84	@ 0x54
 800ab2e:	d00b      	beq.n	800ab48 <xTaskCreateStatic+0x6c>
	__asm volatile
 800ab30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab34:	f383 8811 	msr	BASEPRI, r3
 800ab38:	f3bf 8f6f 	isb	sy
 800ab3c:	f3bf 8f4f 	dsb	sy
 800ab40:	61bb      	str	r3, [r7, #24]
}
 800ab42:	bf00      	nop
 800ab44:	bf00      	nop
 800ab46:	e7fd      	b.n	800ab44 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ab48:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ab4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d01e      	beq.n	800ab8e <xTaskCreateStatic+0xb2>
 800ab50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d01b      	beq.n	800ab8e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ab56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab58:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ab5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab5c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ab5e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ab60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab62:	2202      	movs	r2, #2
 800ab64:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ab68:	2300      	movs	r3, #0
 800ab6a:	9303      	str	r3, [sp, #12]
 800ab6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab6e:	9302      	str	r3, [sp, #8]
 800ab70:	f107 0314 	add.w	r3, r7, #20
 800ab74:	9301      	str	r3, [sp, #4]
 800ab76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab78:	9300      	str	r3, [sp, #0]
 800ab7a:	683b      	ldr	r3, [r7, #0]
 800ab7c:	687a      	ldr	r2, [r7, #4]
 800ab7e:	68b9      	ldr	r1, [r7, #8]
 800ab80:	68f8      	ldr	r0, [r7, #12]
 800ab82:	f000 f850 	bl	800ac26 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ab86:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ab88:	f000 f8d6 	bl	800ad38 <prvAddNewTaskToReadyList>
 800ab8c:	e001      	b.n	800ab92 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800ab8e:	2300      	movs	r3, #0
 800ab90:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ab92:	697b      	ldr	r3, [r7, #20]
	}
 800ab94:	4618      	mov	r0, r3
 800ab96:	3728      	adds	r7, #40	@ 0x28
 800ab98:	46bd      	mov	sp, r7
 800ab9a:	bd80      	pop	{r7, pc}

0800ab9c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ab9c:	b580      	push	{r7, lr}
 800ab9e:	b08c      	sub	sp, #48	@ 0x30
 800aba0:	af04      	add	r7, sp, #16
 800aba2:	60f8      	str	r0, [r7, #12]
 800aba4:	60b9      	str	r1, [r7, #8]
 800aba6:	603b      	str	r3, [r7, #0]
 800aba8:	4613      	mov	r3, r2
 800abaa:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800abac:	88fb      	ldrh	r3, [r7, #6]
 800abae:	009b      	lsls	r3, r3, #2
 800abb0:	4618      	mov	r0, r3
 800abb2:	f000 ff39 	bl	800ba28 <pvPortMalloc>
 800abb6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800abb8:	697b      	ldr	r3, [r7, #20]
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d00e      	beq.n	800abdc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800abbe:	2054      	movs	r0, #84	@ 0x54
 800abc0:	f000 ff32 	bl	800ba28 <pvPortMalloc>
 800abc4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800abc6:	69fb      	ldr	r3, [r7, #28]
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d003      	beq.n	800abd4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800abcc:	69fb      	ldr	r3, [r7, #28]
 800abce:	697a      	ldr	r2, [r7, #20]
 800abd0:	631a      	str	r2, [r3, #48]	@ 0x30
 800abd2:	e005      	b.n	800abe0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800abd4:	6978      	ldr	r0, [r7, #20]
 800abd6:	f000 fff5 	bl	800bbc4 <vPortFree>
 800abda:	e001      	b.n	800abe0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800abdc:	2300      	movs	r3, #0
 800abde:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800abe0:	69fb      	ldr	r3, [r7, #28]
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d017      	beq.n	800ac16 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800abe6:	69fb      	ldr	r3, [r7, #28]
 800abe8:	2200      	movs	r2, #0
 800abea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800abee:	88fa      	ldrh	r2, [r7, #6]
 800abf0:	2300      	movs	r3, #0
 800abf2:	9303      	str	r3, [sp, #12]
 800abf4:	69fb      	ldr	r3, [r7, #28]
 800abf6:	9302      	str	r3, [sp, #8]
 800abf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800abfa:	9301      	str	r3, [sp, #4]
 800abfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abfe:	9300      	str	r3, [sp, #0]
 800ac00:	683b      	ldr	r3, [r7, #0]
 800ac02:	68b9      	ldr	r1, [r7, #8]
 800ac04:	68f8      	ldr	r0, [r7, #12]
 800ac06:	f000 f80e 	bl	800ac26 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ac0a:	69f8      	ldr	r0, [r7, #28]
 800ac0c:	f000 f894 	bl	800ad38 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ac10:	2301      	movs	r3, #1
 800ac12:	61bb      	str	r3, [r7, #24]
 800ac14:	e002      	b.n	800ac1c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ac16:	f04f 33ff 	mov.w	r3, #4294967295
 800ac1a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ac1c:	69bb      	ldr	r3, [r7, #24]
	}
 800ac1e:	4618      	mov	r0, r3
 800ac20:	3720      	adds	r7, #32
 800ac22:	46bd      	mov	sp, r7
 800ac24:	bd80      	pop	{r7, pc}

0800ac26 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ac26:	b580      	push	{r7, lr}
 800ac28:	b088      	sub	sp, #32
 800ac2a:	af00      	add	r7, sp, #0
 800ac2c:	60f8      	str	r0, [r7, #12]
 800ac2e:	60b9      	str	r1, [r7, #8]
 800ac30:	607a      	str	r2, [r7, #4]
 800ac32:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ac34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac36:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ac38:	6879      	ldr	r1, [r7, #4]
 800ac3a:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800ac3e:	440b      	add	r3, r1
 800ac40:	009b      	lsls	r3, r3, #2
 800ac42:	4413      	add	r3, r2
 800ac44:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ac46:	69bb      	ldr	r3, [r7, #24]
 800ac48:	f023 0307 	bic.w	r3, r3, #7
 800ac4c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ac4e:	69bb      	ldr	r3, [r7, #24]
 800ac50:	f003 0307 	and.w	r3, r3, #7
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d00b      	beq.n	800ac70 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800ac58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac5c:	f383 8811 	msr	BASEPRI, r3
 800ac60:	f3bf 8f6f 	isb	sy
 800ac64:	f3bf 8f4f 	dsb	sy
 800ac68:	617b      	str	r3, [r7, #20]
}
 800ac6a:	bf00      	nop
 800ac6c:	bf00      	nop
 800ac6e:	e7fd      	b.n	800ac6c <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ac70:	68bb      	ldr	r3, [r7, #8]
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d01f      	beq.n	800acb6 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ac76:	2300      	movs	r3, #0
 800ac78:	61fb      	str	r3, [r7, #28]
 800ac7a:	e012      	b.n	800aca2 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ac7c:	68ba      	ldr	r2, [r7, #8]
 800ac7e:	69fb      	ldr	r3, [r7, #28]
 800ac80:	4413      	add	r3, r2
 800ac82:	7819      	ldrb	r1, [r3, #0]
 800ac84:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ac86:	69fb      	ldr	r3, [r7, #28]
 800ac88:	4413      	add	r3, r2
 800ac8a:	3334      	adds	r3, #52	@ 0x34
 800ac8c:	460a      	mov	r2, r1
 800ac8e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ac90:	68ba      	ldr	r2, [r7, #8]
 800ac92:	69fb      	ldr	r3, [r7, #28]
 800ac94:	4413      	add	r3, r2
 800ac96:	781b      	ldrb	r3, [r3, #0]
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d006      	beq.n	800acaa <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ac9c:	69fb      	ldr	r3, [r7, #28]
 800ac9e:	3301      	adds	r3, #1
 800aca0:	61fb      	str	r3, [r7, #28]
 800aca2:	69fb      	ldr	r3, [r7, #28]
 800aca4:	2b0f      	cmp	r3, #15
 800aca6:	d9e9      	bls.n	800ac7c <prvInitialiseNewTask+0x56>
 800aca8:	e000      	b.n	800acac <prvInitialiseNewTask+0x86>
			{
				break;
 800acaa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800acac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acae:	2200      	movs	r2, #0
 800acb0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800acb4:	e003      	b.n	800acbe <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800acb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acb8:	2200      	movs	r2, #0
 800acba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800acbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acc0:	2b06      	cmp	r3, #6
 800acc2:	d901      	bls.n	800acc8 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800acc4:	2306      	movs	r3, #6
 800acc6:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800acc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800accc:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800acce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acd0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800acd2:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800acd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acd6:	2200      	movs	r2, #0
 800acd8:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800acda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acdc:	3304      	adds	r3, #4
 800acde:	4618      	mov	r0, r3
 800ace0:	f7ff fda3 	bl	800a82a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ace4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ace6:	3318      	adds	r3, #24
 800ace8:	4618      	mov	r0, r3
 800acea:	f7ff fd9e 	bl	800a82a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800acee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acf0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800acf2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800acf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acf6:	f1c3 0207 	rsb	r2, r3, #7
 800acfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acfc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800acfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad00:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ad02:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ad04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad06:	2200      	movs	r2, #0
 800ad08:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ad0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad0c:	2200      	movs	r2, #0
 800ad0e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ad12:	683a      	ldr	r2, [r7, #0]
 800ad14:	68f9      	ldr	r1, [r7, #12]
 800ad16:	69b8      	ldr	r0, [r7, #24]
 800ad18:	f000 fc72 	bl	800b600 <pxPortInitialiseStack>
 800ad1c:	4602      	mov	r2, r0
 800ad1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad20:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ad22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d002      	beq.n	800ad2e <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ad28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ad2c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ad2e:	bf00      	nop
 800ad30:	3720      	adds	r7, #32
 800ad32:	46bd      	mov	sp, r7
 800ad34:	bd80      	pop	{r7, pc}
	...

0800ad38 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ad38:	b580      	push	{r7, lr}
 800ad3a:	b082      	sub	sp, #8
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ad40:	f000 fd92 	bl	800b868 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ad44:	4b2a      	ldr	r3, [pc, #168]	@ (800adf0 <prvAddNewTaskToReadyList+0xb8>)
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	3301      	adds	r3, #1
 800ad4a:	4a29      	ldr	r2, [pc, #164]	@ (800adf0 <prvAddNewTaskToReadyList+0xb8>)
 800ad4c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ad4e:	4b29      	ldr	r3, [pc, #164]	@ (800adf4 <prvAddNewTaskToReadyList+0xbc>)
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d109      	bne.n	800ad6a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ad56:	4a27      	ldr	r2, [pc, #156]	@ (800adf4 <prvAddNewTaskToReadyList+0xbc>)
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ad5c:	4b24      	ldr	r3, [pc, #144]	@ (800adf0 <prvAddNewTaskToReadyList+0xb8>)
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	2b01      	cmp	r3, #1
 800ad62:	d110      	bne.n	800ad86 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ad64:	f000 fb28 	bl	800b3b8 <prvInitialiseTaskLists>
 800ad68:	e00d      	b.n	800ad86 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ad6a:	4b23      	ldr	r3, [pc, #140]	@ (800adf8 <prvAddNewTaskToReadyList+0xc0>)
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d109      	bne.n	800ad86 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ad72:	4b20      	ldr	r3, [pc, #128]	@ (800adf4 <prvAddNewTaskToReadyList+0xbc>)
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad7c:	429a      	cmp	r2, r3
 800ad7e:	d802      	bhi.n	800ad86 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ad80:	4a1c      	ldr	r2, [pc, #112]	@ (800adf4 <prvAddNewTaskToReadyList+0xbc>)
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ad86:	4b1d      	ldr	r3, [pc, #116]	@ (800adfc <prvAddNewTaskToReadyList+0xc4>)
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	3301      	adds	r3, #1
 800ad8c:	4a1b      	ldr	r2, [pc, #108]	@ (800adfc <prvAddNewTaskToReadyList+0xc4>)
 800ad8e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad94:	2201      	movs	r2, #1
 800ad96:	409a      	lsls	r2, r3
 800ad98:	4b19      	ldr	r3, [pc, #100]	@ (800ae00 <prvAddNewTaskToReadyList+0xc8>)
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	4313      	orrs	r3, r2
 800ad9e:	4a18      	ldr	r2, [pc, #96]	@ (800ae00 <prvAddNewTaskToReadyList+0xc8>)
 800ada0:	6013      	str	r3, [r2, #0]
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ada6:	4613      	mov	r3, r2
 800ada8:	009b      	lsls	r3, r3, #2
 800adaa:	4413      	add	r3, r2
 800adac:	009b      	lsls	r3, r3, #2
 800adae:	4a15      	ldr	r2, [pc, #84]	@ (800ae04 <prvAddNewTaskToReadyList+0xcc>)
 800adb0:	441a      	add	r2, r3
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	3304      	adds	r3, #4
 800adb6:	4619      	mov	r1, r3
 800adb8:	4610      	mov	r0, r2
 800adba:	f7ff fd43 	bl	800a844 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800adbe:	f000 fd85 	bl	800b8cc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800adc2:	4b0d      	ldr	r3, [pc, #52]	@ (800adf8 <prvAddNewTaskToReadyList+0xc0>)
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d00e      	beq.n	800ade8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800adca:	4b0a      	ldr	r3, [pc, #40]	@ (800adf4 <prvAddNewTaskToReadyList+0xbc>)
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800add4:	429a      	cmp	r2, r3
 800add6:	d207      	bcs.n	800ade8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800add8:	4b0b      	ldr	r3, [pc, #44]	@ (800ae08 <prvAddNewTaskToReadyList+0xd0>)
 800adda:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800adde:	601a      	str	r2, [r3, #0]
 800ade0:	f3bf 8f4f 	dsb	sy
 800ade4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ade8:	bf00      	nop
 800adea:	3708      	adds	r7, #8
 800adec:	46bd      	mov	sp, r7
 800adee:	bd80      	pop	{r7, pc}
 800adf0:	24000604 	.word	0x24000604
 800adf4:	24000504 	.word	0x24000504
 800adf8:	24000610 	.word	0x24000610
 800adfc:	24000620 	.word	0x24000620
 800ae00:	2400060c 	.word	0x2400060c
 800ae04:	24000508 	.word	0x24000508
 800ae08:	e000ed04 	.word	0xe000ed04

0800ae0c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ae0c:	b580      	push	{r7, lr}
 800ae0e:	b084      	sub	sp, #16
 800ae10:	af00      	add	r7, sp, #0
 800ae12:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ae14:	2300      	movs	r3, #0
 800ae16:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d018      	beq.n	800ae50 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ae1e:	4b14      	ldr	r3, [pc, #80]	@ (800ae70 <vTaskDelay+0x64>)
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d00b      	beq.n	800ae3e <vTaskDelay+0x32>
	__asm volatile
 800ae26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae2a:	f383 8811 	msr	BASEPRI, r3
 800ae2e:	f3bf 8f6f 	isb	sy
 800ae32:	f3bf 8f4f 	dsb	sy
 800ae36:	60bb      	str	r3, [r7, #8]
}
 800ae38:	bf00      	nop
 800ae3a:	bf00      	nop
 800ae3c:	e7fd      	b.n	800ae3a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800ae3e:	f000 f87d 	bl	800af3c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ae42:	2100      	movs	r1, #0
 800ae44:	6878      	ldr	r0, [r7, #4]
 800ae46:	f000 fb75 	bl	800b534 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ae4a:	f000 f885 	bl	800af58 <xTaskResumeAll>
 800ae4e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d107      	bne.n	800ae66 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800ae56:	4b07      	ldr	r3, [pc, #28]	@ (800ae74 <vTaskDelay+0x68>)
 800ae58:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ae5c:	601a      	str	r2, [r3, #0]
 800ae5e:	f3bf 8f4f 	dsb	sy
 800ae62:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ae66:	bf00      	nop
 800ae68:	3710      	adds	r7, #16
 800ae6a:	46bd      	mov	sp, r7
 800ae6c:	bd80      	pop	{r7, pc}
 800ae6e:	bf00      	nop
 800ae70:	2400062c 	.word	0x2400062c
 800ae74:	e000ed04 	.word	0xe000ed04

0800ae78 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ae78:	b580      	push	{r7, lr}
 800ae7a:	b08a      	sub	sp, #40	@ 0x28
 800ae7c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ae7e:	2300      	movs	r3, #0
 800ae80:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ae82:	2300      	movs	r3, #0
 800ae84:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ae86:	463a      	mov	r2, r7
 800ae88:	1d39      	adds	r1, r7, #4
 800ae8a:	f107 0308 	add.w	r3, r7, #8
 800ae8e:	4618      	mov	r0, r3
 800ae90:	f7f5 fbce 	bl	8000630 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ae94:	6839      	ldr	r1, [r7, #0]
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	68ba      	ldr	r2, [r7, #8]
 800ae9a:	9202      	str	r2, [sp, #8]
 800ae9c:	9301      	str	r3, [sp, #4]
 800ae9e:	2300      	movs	r3, #0
 800aea0:	9300      	str	r3, [sp, #0]
 800aea2:	2300      	movs	r3, #0
 800aea4:	460a      	mov	r2, r1
 800aea6:	491f      	ldr	r1, [pc, #124]	@ (800af24 <vTaskStartScheduler+0xac>)
 800aea8:	481f      	ldr	r0, [pc, #124]	@ (800af28 <vTaskStartScheduler+0xb0>)
 800aeaa:	f7ff fe17 	bl	800aadc <xTaskCreateStatic>
 800aeae:	4603      	mov	r3, r0
 800aeb0:	4a1e      	ldr	r2, [pc, #120]	@ (800af2c <vTaskStartScheduler+0xb4>)
 800aeb2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800aeb4:	4b1d      	ldr	r3, [pc, #116]	@ (800af2c <vTaskStartScheduler+0xb4>)
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d002      	beq.n	800aec2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800aebc:	2301      	movs	r3, #1
 800aebe:	617b      	str	r3, [r7, #20]
 800aec0:	e001      	b.n	800aec6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800aec2:	2300      	movs	r3, #0
 800aec4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800aec6:	697b      	ldr	r3, [r7, #20]
 800aec8:	2b01      	cmp	r3, #1
 800aeca:	d116      	bne.n	800aefa <vTaskStartScheduler+0x82>
	__asm volatile
 800aecc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aed0:	f383 8811 	msr	BASEPRI, r3
 800aed4:	f3bf 8f6f 	isb	sy
 800aed8:	f3bf 8f4f 	dsb	sy
 800aedc:	613b      	str	r3, [r7, #16]
}
 800aede:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800aee0:	4b13      	ldr	r3, [pc, #76]	@ (800af30 <vTaskStartScheduler+0xb8>)
 800aee2:	f04f 32ff 	mov.w	r2, #4294967295
 800aee6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800aee8:	4b12      	ldr	r3, [pc, #72]	@ (800af34 <vTaskStartScheduler+0xbc>)
 800aeea:	2201      	movs	r2, #1
 800aeec:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800aeee:	4b12      	ldr	r3, [pc, #72]	@ (800af38 <vTaskStartScheduler+0xc0>)
 800aef0:	2200      	movs	r2, #0
 800aef2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800aef4:	f000 fc14 	bl	800b720 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800aef8:	e00f      	b.n	800af1a <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800aefa:	697b      	ldr	r3, [r7, #20]
 800aefc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af00:	d10b      	bne.n	800af1a <vTaskStartScheduler+0xa2>
	__asm volatile
 800af02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af06:	f383 8811 	msr	BASEPRI, r3
 800af0a:	f3bf 8f6f 	isb	sy
 800af0e:	f3bf 8f4f 	dsb	sy
 800af12:	60fb      	str	r3, [r7, #12]
}
 800af14:	bf00      	nop
 800af16:	bf00      	nop
 800af18:	e7fd      	b.n	800af16 <vTaskStartScheduler+0x9e>
}
 800af1a:	bf00      	nop
 800af1c:	3718      	adds	r7, #24
 800af1e:	46bd      	mov	sp, r7
 800af20:	bd80      	pop	{r7, pc}
 800af22:	bf00      	nop
 800af24:	0800c060 	.word	0x0800c060
 800af28:	0800b389 	.word	0x0800b389
 800af2c:	24000628 	.word	0x24000628
 800af30:	24000624 	.word	0x24000624
 800af34:	24000610 	.word	0x24000610
 800af38:	24000608 	.word	0x24000608

0800af3c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800af3c:	b480      	push	{r7}
 800af3e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800af40:	4b04      	ldr	r3, [pc, #16]	@ (800af54 <vTaskSuspendAll+0x18>)
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	3301      	adds	r3, #1
 800af46:	4a03      	ldr	r2, [pc, #12]	@ (800af54 <vTaskSuspendAll+0x18>)
 800af48:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800af4a:	bf00      	nop
 800af4c:	46bd      	mov	sp, r7
 800af4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af52:	4770      	bx	lr
 800af54:	2400062c 	.word	0x2400062c

0800af58 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800af58:	b580      	push	{r7, lr}
 800af5a:	b084      	sub	sp, #16
 800af5c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800af5e:	2300      	movs	r3, #0
 800af60:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800af62:	2300      	movs	r3, #0
 800af64:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800af66:	4b42      	ldr	r3, [pc, #264]	@ (800b070 <xTaskResumeAll+0x118>)
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d10b      	bne.n	800af86 <xTaskResumeAll+0x2e>
	__asm volatile
 800af6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af72:	f383 8811 	msr	BASEPRI, r3
 800af76:	f3bf 8f6f 	isb	sy
 800af7a:	f3bf 8f4f 	dsb	sy
 800af7e:	603b      	str	r3, [r7, #0]
}
 800af80:	bf00      	nop
 800af82:	bf00      	nop
 800af84:	e7fd      	b.n	800af82 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800af86:	f000 fc6f 	bl	800b868 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800af8a:	4b39      	ldr	r3, [pc, #228]	@ (800b070 <xTaskResumeAll+0x118>)
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	3b01      	subs	r3, #1
 800af90:	4a37      	ldr	r2, [pc, #220]	@ (800b070 <xTaskResumeAll+0x118>)
 800af92:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800af94:	4b36      	ldr	r3, [pc, #216]	@ (800b070 <xTaskResumeAll+0x118>)
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d161      	bne.n	800b060 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800af9c:	4b35      	ldr	r3, [pc, #212]	@ (800b074 <xTaskResumeAll+0x11c>)
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d05d      	beq.n	800b060 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800afa4:	e02e      	b.n	800b004 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800afa6:	4b34      	ldr	r3, [pc, #208]	@ (800b078 <xTaskResumeAll+0x120>)
 800afa8:	68db      	ldr	r3, [r3, #12]
 800afaa:	68db      	ldr	r3, [r3, #12]
 800afac:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	3318      	adds	r3, #24
 800afb2:	4618      	mov	r0, r3
 800afb4:	f7ff fca3 	bl	800a8fe <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	3304      	adds	r3, #4
 800afbc:	4618      	mov	r0, r3
 800afbe:	f7ff fc9e 	bl	800a8fe <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800afc6:	2201      	movs	r2, #1
 800afc8:	409a      	lsls	r2, r3
 800afca:	4b2c      	ldr	r3, [pc, #176]	@ (800b07c <xTaskResumeAll+0x124>)
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	4313      	orrs	r3, r2
 800afd0:	4a2a      	ldr	r2, [pc, #168]	@ (800b07c <xTaskResumeAll+0x124>)
 800afd2:	6013      	str	r3, [r2, #0]
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800afd8:	4613      	mov	r3, r2
 800afda:	009b      	lsls	r3, r3, #2
 800afdc:	4413      	add	r3, r2
 800afde:	009b      	lsls	r3, r3, #2
 800afe0:	4a27      	ldr	r2, [pc, #156]	@ (800b080 <xTaskResumeAll+0x128>)
 800afe2:	441a      	add	r2, r3
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	3304      	adds	r3, #4
 800afe8:	4619      	mov	r1, r3
 800afea:	4610      	mov	r0, r2
 800afec:	f7ff fc2a 	bl	800a844 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aff4:	4b23      	ldr	r3, [pc, #140]	@ (800b084 <xTaskResumeAll+0x12c>)
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800affa:	429a      	cmp	r2, r3
 800affc:	d302      	bcc.n	800b004 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800affe:	4b22      	ldr	r3, [pc, #136]	@ (800b088 <xTaskResumeAll+0x130>)
 800b000:	2201      	movs	r2, #1
 800b002:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b004:	4b1c      	ldr	r3, [pc, #112]	@ (800b078 <xTaskResumeAll+0x120>)
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d1cc      	bne.n	800afa6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d001      	beq.n	800b016 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b012:	f000 fa6f 	bl	800b4f4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b016:	4b1d      	ldr	r3, [pc, #116]	@ (800b08c <xTaskResumeAll+0x134>)
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d010      	beq.n	800b044 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b022:	f000 f837 	bl	800b094 <xTaskIncrementTick>
 800b026:	4603      	mov	r3, r0
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d002      	beq.n	800b032 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800b02c:	4b16      	ldr	r3, [pc, #88]	@ (800b088 <xTaskResumeAll+0x130>)
 800b02e:	2201      	movs	r2, #1
 800b030:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	3b01      	subs	r3, #1
 800b036:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d1f1      	bne.n	800b022 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800b03e:	4b13      	ldr	r3, [pc, #76]	@ (800b08c <xTaskResumeAll+0x134>)
 800b040:	2200      	movs	r2, #0
 800b042:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b044:	4b10      	ldr	r3, [pc, #64]	@ (800b088 <xTaskResumeAll+0x130>)
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d009      	beq.n	800b060 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b04c:	2301      	movs	r3, #1
 800b04e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b050:	4b0f      	ldr	r3, [pc, #60]	@ (800b090 <xTaskResumeAll+0x138>)
 800b052:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b056:	601a      	str	r2, [r3, #0]
 800b058:	f3bf 8f4f 	dsb	sy
 800b05c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b060:	f000 fc34 	bl	800b8cc <vPortExitCritical>

	return xAlreadyYielded;
 800b064:	68bb      	ldr	r3, [r7, #8]
}
 800b066:	4618      	mov	r0, r3
 800b068:	3710      	adds	r7, #16
 800b06a:	46bd      	mov	sp, r7
 800b06c:	bd80      	pop	{r7, pc}
 800b06e:	bf00      	nop
 800b070:	2400062c 	.word	0x2400062c
 800b074:	24000604 	.word	0x24000604
 800b078:	240005c4 	.word	0x240005c4
 800b07c:	2400060c 	.word	0x2400060c
 800b080:	24000508 	.word	0x24000508
 800b084:	24000504 	.word	0x24000504
 800b088:	24000618 	.word	0x24000618
 800b08c:	24000614 	.word	0x24000614
 800b090:	e000ed04 	.word	0xe000ed04

0800b094 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b094:	b580      	push	{r7, lr}
 800b096:	b086      	sub	sp, #24
 800b098:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b09a:	2300      	movs	r3, #0
 800b09c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b09e:	4b4f      	ldr	r3, [pc, #316]	@ (800b1dc <xTaskIncrementTick+0x148>)
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	f040 808f 	bne.w	800b1c6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b0a8:	4b4d      	ldr	r3, [pc, #308]	@ (800b1e0 <xTaskIncrementTick+0x14c>)
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	3301      	adds	r3, #1
 800b0ae:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b0b0:	4a4b      	ldr	r2, [pc, #300]	@ (800b1e0 <xTaskIncrementTick+0x14c>)
 800b0b2:	693b      	ldr	r3, [r7, #16]
 800b0b4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b0b6:	693b      	ldr	r3, [r7, #16]
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d121      	bne.n	800b100 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800b0bc:	4b49      	ldr	r3, [pc, #292]	@ (800b1e4 <xTaskIncrementTick+0x150>)
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d00b      	beq.n	800b0de <xTaskIncrementTick+0x4a>
	__asm volatile
 800b0c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0ca:	f383 8811 	msr	BASEPRI, r3
 800b0ce:	f3bf 8f6f 	isb	sy
 800b0d2:	f3bf 8f4f 	dsb	sy
 800b0d6:	603b      	str	r3, [r7, #0]
}
 800b0d8:	bf00      	nop
 800b0da:	bf00      	nop
 800b0dc:	e7fd      	b.n	800b0da <xTaskIncrementTick+0x46>
 800b0de:	4b41      	ldr	r3, [pc, #260]	@ (800b1e4 <xTaskIncrementTick+0x150>)
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	60fb      	str	r3, [r7, #12]
 800b0e4:	4b40      	ldr	r3, [pc, #256]	@ (800b1e8 <xTaskIncrementTick+0x154>)
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	4a3e      	ldr	r2, [pc, #248]	@ (800b1e4 <xTaskIncrementTick+0x150>)
 800b0ea:	6013      	str	r3, [r2, #0]
 800b0ec:	4a3e      	ldr	r2, [pc, #248]	@ (800b1e8 <xTaskIncrementTick+0x154>)
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	6013      	str	r3, [r2, #0]
 800b0f2:	4b3e      	ldr	r3, [pc, #248]	@ (800b1ec <xTaskIncrementTick+0x158>)
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	3301      	adds	r3, #1
 800b0f8:	4a3c      	ldr	r2, [pc, #240]	@ (800b1ec <xTaskIncrementTick+0x158>)
 800b0fa:	6013      	str	r3, [r2, #0]
 800b0fc:	f000 f9fa 	bl	800b4f4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b100:	4b3b      	ldr	r3, [pc, #236]	@ (800b1f0 <xTaskIncrementTick+0x15c>)
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	693a      	ldr	r2, [r7, #16]
 800b106:	429a      	cmp	r2, r3
 800b108:	d348      	bcc.n	800b19c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b10a:	4b36      	ldr	r3, [pc, #216]	@ (800b1e4 <xTaskIncrementTick+0x150>)
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	2b00      	cmp	r3, #0
 800b112:	d104      	bne.n	800b11e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b114:	4b36      	ldr	r3, [pc, #216]	@ (800b1f0 <xTaskIncrementTick+0x15c>)
 800b116:	f04f 32ff 	mov.w	r2, #4294967295
 800b11a:	601a      	str	r2, [r3, #0]
					break;
 800b11c:	e03e      	b.n	800b19c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b11e:	4b31      	ldr	r3, [pc, #196]	@ (800b1e4 <xTaskIncrementTick+0x150>)
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	68db      	ldr	r3, [r3, #12]
 800b124:	68db      	ldr	r3, [r3, #12]
 800b126:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b128:	68bb      	ldr	r3, [r7, #8]
 800b12a:	685b      	ldr	r3, [r3, #4]
 800b12c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b12e:	693a      	ldr	r2, [r7, #16]
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	429a      	cmp	r2, r3
 800b134:	d203      	bcs.n	800b13e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b136:	4a2e      	ldr	r2, [pc, #184]	@ (800b1f0 <xTaskIncrementTick+0x15c>)
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b13c:	e02e      	b.n	800b19c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b13e:	68bb      	ldr	r3, [r7, #8]
 800b140:	3304      	adds	r3, #4
 800b142:	4618      	mov	r0, r3
 800b144:	f7ff fbdb 	bl	800a8fe <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b148:	68bb      	ldr	r3, [r7, #8]
 800b14a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d004      	beq.n	800b15a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b150:	68bb      	ldr	r3, [r7, #8]
 800b152:	3318      	adds	r3, #24
 800b154:	4618      	mov	r0, r3
 800b156:	f7ff fbd2 	bl	800a8fe <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b15a:	68bb      	ldr	r3, [r7, #8]
 800b15c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b15e:	2201      	movs	r2, #1
 800b160:	409a      	lsls	r2, r3
 800b162:	4b24      	ldr	r3, [pc, #144]	@ (800b1f4 <xTaskIncrementTick+0x160>)
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	4313      	orrs	r3, r2
 800b168:	4a22      	ldr	r2, [pc, #136]	@ (800b1f4 <xTaskIncrementTick+0x160>)
 800b16a:	6013      	str	r3, [r2, #0]
 800b16c:	68bb      	ldr	r3, [r7, #8]
 800b16e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b170:	4613      	mov	r3, r2
 800b172:	009b      	lsls	r3, r3, #2
 800b174:	4413      	add	r3, r2
 800b176:	009b      	lsls	r3, r3, #2
 800b178:	4a1f      	ldr	r2, [pc, #124]	@ (800b1f8 <xTaskIncrementTick+0x164>)
 800b17a:	441a      	add	r2, r3
 800b17c:	68bb      	ldr	r3, [r7, #8]
 800b17e:	3304      	adds	r3, #4
 800b180:	4619      	mov	r1, r3
 800b182:	4610      	mov	r0, r2
 800b184:	f7ff fb5e 	bl	800a844 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b188:	68bb      	ldr	r3, [r7, #8]
 800b18a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b18c:	4b1b      	ldr	r3, [pc, #108]	@ (800b1fc <xTaskIncrementTick+0x168>)
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b192:	429a      	cmp	r2, r3
 800b194:	d3b9      	bcc.n	800b10a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800b196:	2301      	movs	r3, #1
 800b198:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b19a:	e7b6      	b.n	800b10a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b19c:	4b17      	ldr	r3, [pc, #92]	@ (800b1fc <xTaskIncrementTick+0x168>)
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b1a2:	4915      	ldr	r1, [pc, #84]	@ (800b1f8 <xTaskIncrementTick+0x164>)
 800b1a4:	4613      	mov	r3, r2
 800b1a6:	009b      	lsls	r3, r3, #2
 800b1a8:	4413      	add	r3, r2
 800b1aa:	009b      	lsls	r3, r3, #2
 800b1ac:	440b      	add	r3, r1
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	2b01      	cmp	r3, #1
 800b1b2:	d901      	bls.n	800b1b8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800b1b4:	2301      	movs	r3, #1
 800b1b6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b1b8:	4b11      	ldr	r3, [pc, #68]	@ (800b200 <xTaskIncrementTick+0x16c>)
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d007      	beq.n	800b1d0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800b1c0:	2301      	movs	r3, #1
 800b1c2:	617b      	str	r3, [r7, #20]
 800b1c4:	e004      	b.n	800b1d0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b1c6:	4b0f      	ldr	r3, [pc, #60]	@ (800b204 <xTaskIncrementTick+0x170>)
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	3301      	adds	r3, #1
 800b1cc:	4a0d      	ldr	r2, [pc, #52]	@ (800b204 <xTaskIncrementTick+0x170>)
 800b1ce:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b1d0:	697b      	ldr	r3, [r7, #20]
}
 800b1d2:	4618      	mov	r0, r3
 800b1d4:	3718      	adds	r7, #24
 800b1d6:	46bd      	mov	sp, r7
 800b1d8:	bd80      	pop	{r7, pc}
 800b1da:	bf00      	nop
 800b1dc:	2400062c 	.word	0x2400062c
 800b1e0:	24000608 	.word	0x24000608
 800b1e4:	240005bc 	.word	0x240005bc
 800b1e8:	240005c0 	.word	0x240005c0
 800b1ec:	2400061c 	.word	0x2400061c
 800b1f0:	24000624 	.word	0x24000624
 800b1f4:	2400060c 	.word	0x2400060c
 800b1f8:	24000508 	.word	0x24000508
 800b1fc:	24000504 	.word	0x24000504
 800b200:	24000618 	.word	0x24000618
 800b204:	24000614 	.word	0x24000614

0800b208 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b208:	b480      	push	{r7}
 800b20a:	b087      	sub	sp, #28
 800b20c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b20e:	4b27      	ldr	r3, [pc, #156]	@ (800b2ac <vTaskSwitchContext+0xa4>)
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	2b00      	cmp	r3, #0
 800b214:	d003      	beq.n	800b21e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b216:	4b26      	ldr	r3, [pc, #152]	@ (800b2b0 <vTaskSwitchContext+0xa8>)
 800b218:	2201      	movs	r2, #1
 800b21a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b21c:	e040      	b.n	800b2a0 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800b21e:	4b24      	ldr	r3, [pc, #144]	@ (800b2b0 <vTaskSwitchContext+0xa8>)
 800b220:	2200      	movs	r2, #0
 800b222:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b224:	4b23      	ldr	r3, [pc, #140]	@ (800b2b4 <vTaskSwitchContext+0xac>)
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	fab3 f383 	clz	r3, r3
 800b230:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800b232:	7afb      	ldrb	r3, [r7, #11]
 800b234:	f1c3 031f 	rsb	r3, r3, #31
 800b238:	617b      	str	r3, [r7, #20]
 800b23a:	491f      	ldr	r1, [pc, #124]	@ (800b2b8 <vTaskSwitchContext+0xb0>)
 800b23c:	697a      	ldr	r2, [r7, #20]
 800b23e:	4613      	mov	r3, r2
 800b240:	009b      	lsls	r3, r3, #2
 800b242:	4413      	add	r3, r2
 800b244:	009b      	lsls	r3, r3, #2
 800b246:	440b      	add	r3, r1
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d10b      	bne.n	800b266 <vTaskSwitchContext+0x5e>
	__asm volatile
 800b24e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b252:	f383 8811 	msr	BASEPRI, r3
 800b256:	f3bf 8f6f 	isb	sy
 800b25a:	f3bf 8f4f 	dsb	sy
 800b25e:	607b      	str	r3, [r7, #4]
}
 800b260:	bf00      	nop
 800b262:	bf00      	nop
 800b264:	e7fd      	b.n	800b262 <vTaskSwitchContext+0x5a>
 800b266:	697a      	ldr	r2, [r7, #20]
 800b268:	4613      	mov	r3, r2
 800b26a:	009b      	lsls	r3, r3, #2
 800b26c:	4413      	add	r3, r2
 800b26e:	009b      	lsls	r3, r3, #2
 800b270:	4a11      	ldr	r2, [pc, #68]	@ (800b2b8 <vTaskSwitchContext+0xb0>)
 800b272:	4413      	add	r3, r2
 800b274:	613b      	str	r3, [r7, #16]
 800b276:	693b      	ldr	r3, [r7, #16]
 800b278:	685b      	ldr	r3, [r3, #4]
 800b27a:	685a      	ldr	r2, [r3, #4]
 800b27c:	693b      	ldr	r3, [r7, #16]
 800b27e:	605a      	str	r2, [r3, #4]
 800b280:	693b      	ldr	r3, [r7, #16]
 800b282:	685a      	ldr	r2, [r3, #4]
 800b284:	693b      	ldr	r3, [r7, #16]
 800b286:	3308      	adds	r3, #8
 800b288:	429a      	cmp	r2, r3
 800b28a:	d104      	bne.n	800b296 <vTaskSwitchContext+0x8e>
 800b28c:	693b      	ldr	r3, [r7, #16]
 800b28e:	685b      	ldr	r3, [r3, #4]
 800b290:	685a      	ldr	r2, [r3, #4]
 800b292:	693b      	ldr	r3, [r7, #16]
 800b294:	605a      	str	r2, [r3, #4]
 800b296:	693b      	ldr	r3, [r7, #16]
 800b298:	685b      	ldr	r3, [r3, #4]
 800b29a:	68db      	ldr	r3, [r3, #12]
 800b29c:	4a07      	ldr	r2, [pc, #28]	@ (800b2bc <vTaskSwitchContext+0xb4>)
 800b29e:	6013      	str	r3, [r2, #0]
}
 800b2a0:	bf00      	nop
 800b2a2:	371c      	adds	r7, #28
 800b2a4:	46bd      	mov	sp, r7
 800b2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2aa:	4770      	bx	lr
 800b2ac:	2400062c 	.word	0x2400062c
 800b2b0:	24000618 	.word	0x24000618
 800b2b4:	2400060c 	.word	0x2400060c
 800b2b8:	24000508 	.word	0x24000508
 800b2bc:	24000504 	.word	0x24000504

0800b2c0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b2c0:	b580      	push	{r7, lr}
 800b2c2:	b086      	sub	sp, #24
 800b2c4:	af00      	add	r7, sp, #0
 800b2c6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	68db      	ldr	r3, [r3, #12]
 800b2cc:	68db      	ldr	r3, [r3, #12]
 800b2ce:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b2d0:	693b      	ldr	r3, [r7, #16]
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d10b      	bne.n	800b2ee <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800b2d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2da:	f383 8811 	msr	BASEPRI, r3
 800b2de:	f3bf 8f6f 	isb	sy
 800b2e2:	f3bf 8f4f 	dsb	sy
 800b2e6:	60fb      	str	r3, [r7, #12]
}
 800b2e8:	bf00      	nop
 800b2ea:	bf00      	nop
 800b2ec:	e7fd      	b.n	800b2ea <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b2ee:	693b      	ldr	r3, [r7, #16]
 800b2f0:	3318      	adds	r3, #24
 800b2f2:	4618      	mov	r0, r3
 800b2f4:	f7ff fb03 	bl	800a8fe <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b2f8:	4b1d      	ldr	r3, [pc, #116]	@ (800b370 <xTaskRemoveFromEventList+0xb0>)
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d11c      	bne.n	800b33a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b300:	693b      	ldr	r3, [r7, #16]
 800b302:	3304      	adds	r3, #4
 800b304:	4618      	mov	r0, r3
 800b306:	f7ff fafa 	bl	800a8fe <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b30a:	693b      	ldr	r3, [r7, #16]
 800b30c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b30e:	2201      	movs	r2, #1
 800b310:	409a      	lsls	r2, r3
 800b312:	4b18      	ldr	r3, [pc, #96]	@ (800b374 <xTaskRemoveFromEventList+0xb4>)
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	4313      	orrs	r3, r2
 800b318:	4a16      	ldr	r2, [pc, #88]	@ (800b374 <xTaskRemoveFromEventList+0xb4>)
 800b31a:	6013      	str	r3, [r2, #0]
 800b31c:	693b      	ldr	r3, [r7, #16]
 800b31e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b320:	4613      	mov	r3, r2
 800b322:	009b      	lsls	r3, r3, #2
 800b324:	4413      	add	r3, r2
 800b326:	009b      	lsls	r3, r3, #2
 800b328:	4a13      	ldr	r2, [pc, #76]	@ (800b378 <xTaskRemoveFromEventList+0xb8>)
 800b32a:	441a      	add	r2, r3
 800b32c:	693b      	ldr	r3, [r7, #16]
 800b32e:	3304      	adds	r3, #4
 800b330:	4619      	mov	r1, r3
 800b332:	4610      	mov	r0, r2
 800b334:	f7ff fa86 	bl	800a844 <vListInsertEnd>
 800b338:	e005      	b.n	800b346 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b33a:	693b      	ldr	r3, [r7, #16]
 800b33c:	3318      	adds	r3, #24
 800b33e:	4619      	mov	r1, r3
 800b340:	480e      	ldr	r0, [pc, #56]	@ (800b37c <xTaskRemoveFromEventList+0xbc>)
 800b342:	f7ff fa7f 	bl	800a844 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b346:	693b      	ldr	r3, [r7, #16]
 800b348:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b34a:	4b0d      	ldr	r3, [pc, #52]	@ (800b380 <xTaskRemoveFromEventList+0xc0>)
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b350:	429a      	cmp	r2, r3
 800b352:	d905      	bls.n	800b360 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b354:	2301      	movs	r3, #1
 800b356:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b358:	4b0a      	ldr	r3, [pc, #40]	@ (800b384 <xTaskRemoveFromEventList+0xc4>)
 800b35a:	2201      	movs	r2, #1
 800b35c:	601a      	str	r2, [r3, #0]
 800b35e:	e001      	b.n	800b364 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800b360:	2300      	movs	r3, #0
 800b362:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b364:	697b      	ldr	r3, [r7, #20]
}
 800b366:	4618      	mov	r0, r3
 800b368:	3718      	adds	r7, #24
 800b36a:	46bd      	mov	sp, r7
 800b36c:	bd80      	pop	{r7, pc}
 800b36e:	bf00      	nop
 800b370:	2400062c 	.word	0x2400062c
 800b374:	2400060c 	.word	0x2400060c
 800b378:	24000508 	.word	0x24000508
 800b37c:	240005c4 	.word	0x240005c4
 800b380:	24000504 	.word	0x24000504
 800b384:	24000618 	.word	0x24000618

0800b388 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b388:	b580      	push	{r7, lr}
 800b38a:	b082      	sub	sp, #8
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b390:	f000 f852 	bl	800b438 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b394:	4b06      	ldr	r3, [pc, #24]	@ (800b3b0 <prvIdleTask+0x28>)
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	2b01      	cmp	r3, #1
 800b39a:	d9f9      	bls.n	800b390 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b39c:	4b05      	ldr	r3, [pc, #20]	@ (800b3b4 <prvIdleTask+0x2c>)
 800b39e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b3a2:	601a      	str	r2, [r3, #0]
 800b3a4:	f3bf 8f4f 	dsb	sy
 800b3a8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b3ac:	e7f0      	b.n	800b390 <prvIdleTask+0x8>
 800b3ae:	bf00      	nop
 800b3b0:	24000508 	.word	0x24000508
 800b3b4:	e000ed04 	.word	0xe000ed04

0800b3b8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b3b8:	b580      	push	{r7, lr}
 800b3ba:	b082      	sub	sp, #8
 800b3bc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b3be:	2300      	movs	r3, #0
 800b3c0:	607b      	str	r3, [r7, #4]
 800b3c2:	e00c      	b.n	800b3de <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b3c4:	687a      	ldr	r2, [r7, #4]
 800b3c6:	4613      	mov	r3, r2
 800b3c8:	009b      	lsls	r3, r3, #2
 800b3ca:	4413      	add	r3, r2
 800b3cc:	009b      	lsls	r3, r3, #2
 800b3ce:	4a12      	ldr	r2, [pc, #72]	@ (800b418 <prvInitialiseTaskLists+0x60>)
 800b3d0:	4413      	add	r3, r2
 800b3d2:	4618      	mov	r0, r3
 800b3d4:	f7ff fa09 	bl	800a7ea <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	3301      	adds	r3, #1
 800b3dc:	607b      	str	r3, [r7, #4]
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	2b06      	cmp	r3, #6
 800b3e2:	d9ef      	bls.n	800b3c4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b3e4:	480d      	ldr	r0, [pc, #52]	@ (800b41c <prvInitialiseTaskLists+0x64>)
 800b3e6:	f7ff fa00 	bl	800a7ea <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b3ea:	480d      	ldr	r0, [pc, #52]	@ (800b420 <prvInitialiseTaskLists+0x68>)
 800b3ec:	f7ff f9fd 	bl	800a7ea <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b3f0:	480c      	ldr	r0, [pc, #48]	@ (800b424 <prvInitialiseTaskLists+0x6c>)
 800b3f2:	f7ff f9fa 	bl	800a7ea <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b3f6:	480c      	ldr	r0, [pc, #48]	@ (800b428 <prvInitialiseTaskLists+0x70>)
 800b3f8:	f7ff f9f7 	bl	800a7ea <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b3fc:	480b      	ldr	r0, [pc, #44]	@ (800b42c <prvInitialiseTaskLists+0x74>)
 800b3fe:	f7ff f9f4 	bl	800a7ea <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b402:	4b0b      	ldr	r3, [pc, #44]	@ (800b430 <prvInitialiseTaskLists+0x78>)
 800b404:	4a05      	ldr	r2, [pc, #20]	@ (800b41c <prvInitialiseTaskLists+0x64>)
 800b406:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b408:	4b0a      	ldr	r3, [pc, #40]	@ (800b434 <prvInitialiseTaskLists+0x7c>)
 800b40a:	4a05      	ldr	r2, [pc, #20]	@ (800b420 <prvInitialiseTaskLists+0x68>)
 800b40c:	601a      	str	r2, [r3, #0]
}
 800b40e:	bf00      	nop
 800b410:	3708      	adds	r7, #8
 800b412:	46bd      	mov	sp, r7
 800b414:	bd80      	pop	{r7, pc}
 800b416:	bf00      	nop
 800b418:	24000508 	.word	0x24000508
 800b41c:	24000594 	.word	0x24000594
 800b420:	240005a8 	.word	0x240005a8
 800b424:	240005c4 	.word	0x240005c4
 800b428:	240005d8 	.word	0x240005d8
 800b42c:	240005f0 	.word	0x240005f0
 800b430:	240005bc 	.word	0x240005bc
 800b434:	240005c0 	.word	0x240005c0

0800b438 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b438:	b580      	push	{r7, lr}
 800b43a:	b082      	sub	sp, #8
 800b43c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b43e:	e019      	b.n	800b474 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b440:	f000 fa12 	bl	800b868 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b444:	4b10      	ldr	r3, [pc, #64]	@ (800b488 <prvCheckTasksWaitingTermination+0x50>)
 800b446:	68db      	ldr	r3, [r3, #12]
 800b448:	68db      	ldr	r3, [r3, #12]
 800b44a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	3304      	adds	r3, #4
 800b450:	4618      	mov	r0, r3
 800b452:	f7ff fa54 	bl	800a8fe <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b456:	4b0d      	ldr	r3, [pc, #52]	@ (800b48c <prvCheckTasksWaitingTermination+0x54>)
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	3b01      	subs	r3, #1
 800b45c:	4a0b      	ldr	r2, [pc, #44]	@ (800b48c <prvCheckTasksWaitingTermination+0x54>)
 800b45e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b460:	4b0b      	ldr	r3, [pc, #44]	@ (800b490 <prvCheckTasksWaitingTermination+0x58>)
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	3b01      	subs	r3, #1
 800b466:	4a0a      	ldr	r2, [pc, #40]	@ (800b490 <prvCheckTasksWaitingTermination+0x58>)
 800b468:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b46a:	f000 fa2f 	bl	800b8cc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b46e:	6878      	ldr	r0, [r7, #4]
 800b470:	f000 f810 	bl	800b494 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b474:	4b06      	ldr	r3, [pc, #24]	@ (800b490 <prvCheckTasksWaitingTermination+0x58>)
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d1e1      	bne.n	800b440 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b47c:	bf00      	nop
 800b47e:	bf00      	nop
 800b480:	3708      	adds	r7, #8
 800b482:	46bd      	mov	sp, r7
 800b484:	bd80      	pop	{r7, pc}
 800b486:	bf00      	nop
 800b488:	240005d8 	.word	0x240005d8
 800b48c:	24000604 	.word	0x24000604
 800b490:	240005ec 	.word	0x240005ec

0800b494 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b494:	b580      	push	{r7, lr}
 800b496:	b084      	sub	sp, #16
 800b498:	af00      	add	r7, sp, #0
 800b49a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d108      	bne.n	800b4b8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b4aa:	4618      	mov	r0, r3
 800b4ac:	f000 fb8a 	bl	800bbc4 <vPortFree>
				vPortFree( pxTCB );
 800b4b0:	6878      	ldr	r0, [r7, #4]
 800b4b2:	f000 fb87 	bl	800bbc4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b4b6:	e019      	b.n	800b4ec <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800b4be:	2b01      	cmp	r3, #1
 800b4c0:	d103      	bne.n	800b4ca <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800b4c2:	6878      	ldr	r0, [r7, #4]
 800b4c4:	f000 fb7e 	bl	800bbc4 <vPortFree>
	}
 800b4c8:	e010      	b.n	800b4ec <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800b4d0:	2b02      	cmp	r3, #2
 800b4d2:	d00b      	beq.n	800b4ec <prvDeleteTCB+0x58>
	__asm volatile
 800b4d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4d8:	f383 8811 	msr	BASEPRI, r3
 800b4dc:	f3bf 8f6f 	isb	sy
 800b4e0:	f3bf 8f4f 	dsb	sy
 800b4e4:	60fb      	str	r3, [r7, #12]
}
 800b4e6:	bf00      	nop
 800b4e8:	bf00      	nop
 800b4ea:	e7fd      	b.n	800b4e8 <prvDeleteTCB+0x54>
	}
 800b4ec:	bf00      	nop
 800b4ee:	3710      	adds	r7, #16
 800b4f0:	46bd      	mov	sp, r7
 800b4f2:	bd80      	pop	{r7, pc}

0800b4f4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b4f4:	b480      	push	{r7}
 800b4f6:	b083      	sub	sp, #12
 800b4f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b4fa:	4b0c      	ldr	r3, [pc, #48]	@ (800b52c <prvResetNextTaskUnblockTime+0x38>)
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	2b00      	cmp	r3, #0
 800b502:	d104      	bne.n	800b50e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b504:	4b0a      	ldr	r3, [pc, #40]	@ (800b530 <prvResetNextTaskUnblockTime+0x3c>)
 800b506:	f04f 32ff 	mov.w	r2, #4294967295
 800b50a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b50c:	e008      	b.n	800b520 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b50e:	4b07      	ldr	r3, [pc, #28]	@ (800b52c <prvResetNextTaskUnblockTime+0x38>)
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	68db      	ldr	r3, [r3, #12]
 800b514:	68db      	ldr	r3, [r3, #12]
 800b516:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	685b      	ldr	r3, [r3, #4]
 800b51c:	4a04      	ldr	r2, [pc, #16]	@ (800b530 <prvResetNextTaskUnblockTime+0x3c>)
 800b51e:	6013      	str	r3, [r2, #0]
}
 800b520:	bf00      	nop
 800b522:	370c      	adds	r7, #12
 800b524:	46bd      	mov	sp, r7
 800b526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b52a:	4770      	bx	lr
 800b52c:	240005bc 	.word	0x240005bc
 800b530:	24000624 	.word	0x24000624

0800b534 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b534:	b580      	push	{r7, lr}
 800b536:	b084      	sub	sp, #16
 800b538:	af00      	add	r7, sp, #0
 800b53a:	6078      	str	r0, [r7, #4]
 800b53c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b53e:	4b29      	ldr	r3, [pc, #164]	@ (800b5e4 <prvAddCurrentTaskToDelayedList+0xb0>)
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b544:	4b28      	ldr	r3, [pc, #160]	@ (800b5e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	3304      	adds	r3, #4
 800b54a:	4618      	mov	r0, r3
 800b54c:	f7ff f9d7 	bl	800a8fe <uxListRemove>
 800b550:	4603      	mov	r3, r0
 800b552:	2b00      	cmp	r3, #0
 800b554:	d10b      	bne.n	800b56e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800b556:	4b24      	ldr	r3, [pc, #144]	@ (800b5e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b55c:	2201      	movs	r2, #1
 800b55e:	fa02 f303 	lsl.w	r3, r2, r3
 800b562:	43da      	mvns	r2, r3
 800b564:	4b21      	ldr	r3, [pc, #132]	@ (800b5ec <prvAddCurrentTaskToDelayedList+0xb8>)
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	4013      	ands	r3, r2
 800b56a:	4a20      	ldr	r2, [pc, #128]	@ (800b5ec <prvAddCurrentTaskToDelayedList+0xb8>)
 800b56c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b574:	d10a      	bne.n	800b58c <prvAddCurrentTaskToDelayedList+0x58>
 800b576:	683b      	ldr	r3, [r7, #0]
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d007      	beq.n	800b58c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b57c:	4b1a      	ldr	r3, [pc, #104]	@ (800b5e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	3304      	adds	r3, #4
 800b582:	4619      	mov	r1, r3
 800b584:	481a      	ldr	r0, [pc, #104]	@ (800b5f0 <prvAddCurrentTaskToDelayedList+0xbc>)
 800b586:	f7ff f95d 	bl	800a844 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b58a:	e026      	b.n	800b5da <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b58c:	68fa      	ldr	r2, [r7, #12]
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	4413      	add	r3, r2
 800b592:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b594:	4b14      	ldr	r3, [pc, #80]	@ (800b5e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	68ba      	ldr	r2, [r7, #8]
 800b59a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b59c:	68ba      	ldr	r2, [r7, #8]
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	429a      	cmp	r2, r3
 800b5a2:	d209      	bcs.n	800b5b8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b5a4:	4b13      	ldr	r3, [pc, #76]	@ (800b5f4 <prvAddCurrentTaskToDelayedList+0xc0>)
 800b5a6:	681a      	ldr	r2, [r3, #0]
 800b5a8:	4b0f      	ldr	r3, [pc, #60]	@ (800b5e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	3304      	adds	r3, #4
 800b5ae:	4619      	mov	r1, r3
 800b5b0:	4610      	mov	r0, r2
 800b5b2:	f7ff f96b 	bl	800a88c <vListInsert>
}
 800b5b6:	e010      	b.n	800b5da <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b5b8:	4b0f      	ldr	r3, [pc, #60]	@ (800b5f8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800b5ba:	681a      	ldr	r2, [r3, #0]
 800b5bc:	4b0a      	ldr	r3, [pc, #40]	@ (800b5e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	3304      	adds	r3, #4
 800b5c2:	4619      	mov	r1, r3
 800b5c4:	4610      	mov	r0, r2
 800b5c6:	f7ff f961 	bl	800a88c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b5ca:	4b0c      	ldr	r3, [pc, #48]	@ (800b5fc <prvAddCurrentTaskToDelayedList+0xc8>)
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	68ba      	ldr	r2, [r7, #8]
 800b5d0:	429a      	cmp	r2, r3
 800b5d2:	d202      	bcs.n	800b5da <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800b5d4:	4a09      	ldr	r2, [pc, #36]	@ (800b5fc <prvAddCurrentTaskToDelayedList+0xc8>)
 800b5d6:	68bb      	ldr	r3, [r7, #8]
 800b5d8:	6013      	str	r3, [r2, #0]
}
 800b5da:	bf00      	nop
 800b5dc:	3710      	adds	r7, #16
 800b5de:	46bd      	mov	sp, r7
 800b5e0:	bd80      	pop	{r7, pc}
 800b5e2:	bf00      	nop
 800b5e4:	24000608 	.word	0x24000608
 800b5e8:	24000504 	.word	0x24000504
 800b5ec:	2400060c 	.word	0x2400060c
 800b5f0:	240005f0 	.word	0x240005f0
 800b5f4:	240005c0 	.word	0x240005c0
 800b5f8:	240005bc 	.word	0x240005bc
 800b5fc:	24000624 	.word	0x24000624

0800b600 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b600:	b480      	push	{r7}
 800b602:	b085      	sub	sp, #20
 800b604:	af00      	add	r7, sp, #0
 800b606:	60f8      	str	r0, [r7, #12]
 800b608:	60b9      	str	r1, [r7, #8]
 800b60a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	3b04      	subs	r3, #4
 800b610:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800b618:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	3b04      	subs	r3, #4
 800b61e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b620:	68bb      	ldr	r3, [r7, #8]
 800b622:	f023 0201 	bic.w	r2, r3, #1
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	3b04      	subs	r3, #4
 800b62e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b630:	4a0c      	ldr	r2, [pc, #48]	@ (800b664 <pxPortInitialiseStack+0x64>)
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	3b14      	subs	r3, #20
 800b63a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b63c:	687a      	ldr	r2, [r7, #4]
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	3b04      	subs	r3, #4
 800b646:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	f06f 0202 	mvn.w	r2, #2
 800b64e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	3b20      	subs	r3, #32
 800b654:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b656:	68fb      	ldr	r3, [r7, #12]
}
 800b658:	4618      	mov	r0, r3
 800b65a:	3714      	adds	r7, #20
 800b65c:	46bd      	mov	sp, r7
 800b65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b662:	4770      	bx	lr
 800b664:	0800b669 	.word	0x0800b669

0800b668 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b668:	b480      	push	{r7}
 800b66a:	b085      	sub	sp, #20
 800b66c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b66e:	2300      	movs	r3, #0
 800b670:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b672:	4b13      	ldr	r3, [pc, #76]	@ (800b6c0 <prvTaskExitError+0x58>)
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b67a:	d00b      	beq.n	800b694 <prvTaskExitError+0x2c>
	__asm volatile
 800b67c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b680:	f383 8811 	msr	BASEPRI, r3
 800b684:	f3bf 8f6f 	isb	sy
 800b688:	f3bf 8f4f 	dsb	sy
 800b68c:	60fb      	str	r3, [r7, #12]
}
 800b68e:	bf00      	nop
 800b690:	bf00      	nop
 800b692:	e7fd      	b.n	800b690 <prvTaskExitError+0x28>
	__asm volatile
 800b694:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b698:	f383 8811 	msr	BASEPRI, r3
 800b69c:	f3bf 8f6f 	isb	sy
 800b6a0:	f3bf 8f4f 	dsb	sy
 800b6a4:	60bb      	str	r3, [r7, #8]
}
 800b6a6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b6a8:	bf00      	nop
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d0fc      	beq.n	800b6aa <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b6b0:	bf00      	nop
 800b6b2:	bf00      	nop
 800b6b4:	3714      	adds	r7, #20
 800b6b6:	46bd      	mov	sp, r7
 800b6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6bc:	4770      	bx	lr
 800b6be:	bf00      	nop
 800b6c0:	24000010 	.word	0x24000010
	...

0800b6d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b6d0:	4b07      	ldr	r3, [pc, #28]	@ (800b6f0 <pxCurrentTCBConst2>)
 800b6d2:	6819      	ldr	r1, [r3, #0]
 800b6d4:	6808      	ldr	r0, [r1, #0]
 800b6d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6da:	f380 8809 	msr	PSP, r0
 800b6de:	f3bf 8f6f 	isb	sy
 800b6e2:	f04f 0000 	mov.w	r0, #0
 800b6e6:	f380 8811 	msr	BASEPRI, r0
 800b6ea:	4770      	bx	lr
 800b6ec:	f3af 8000 	nop.w

0800b6f0 <pxCurrentTCBConst2>:
 800b6f0:	24000504 	.word	0x24000504
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b6f4:	bf00      	nop
 800b6f6:	bf00      	nop

0800b6f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b6f8:	4808      	ldr	r0, [pc, #32]	@ (800b71c <prvPortStartFirstTask+0x24>)
 800b6fa:	6800      	ldr	r0, [r0, #0]
 800b6fc:	6800      	ldr	r0, [r0, #0]
 800b6fe:	f380 8808 	msr	MSP, r0
 800b702:	f04f 0000 	mov.w	r0, #0
 800b706:	f380 8814 	msr	CONTROL, r0
 800b70a:	b662      	cpsie	i
 800b70c:	b661      	cpsie	f
 800b70e:	f3bf 8f4f 	dsb	sy
 800b712:	f3bf 8f6f 	isb	sy
 800b716:	df00      	svc	0
 800b718:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b71a:	bf00      	nop
 800b71c:	e000ed08 	.word	0xe000ed08

0800b720 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b720:	b580      	push	{r7, lr}
 800b722:	b086      	sub	sp, #24
 800b724:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b726:	4b47      	ldr	r3, [pc, #284]	@ (800b844 <xPortStartScheduler+0x124>)
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	4a47      	ldr	r2, [pc, #284]	@ (800b848 <xPortStartScheduler+0x128>)
 800b72c:	4293      	cmp	r3, r2
 800b72e:	d10b      	bne.n	800b748 <xPortStartScheduler+0x28>
	__asm volatile
 800b730:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b734:	f383 8811 	msr	BASEPRI, r3
 800b738:	f3bf 8f6f 	isb	sy
 800b73c:	f3bf 8f4f 	dsb	sy
 800b740:	613b      	str	r3, [r7, #16]
}
 800b742:	bf00      	nop
 800b744:	bf00      	nop
 800b746:	e7fd      	b.n	800b744 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b748:	4b3e      	ldr	r3, [pc, #248]	@ (800b844 <xPortStartScheduler+0x124>)
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	4a3f      	ldr	r2, [pc, #252]	@ (800b84c <xPortStartScheduler+0x12c>)
 800b74e:	4293      	cmp	r3, r2
 800b750:	d10b      	bne.n	800b76a <xPortStartScheduler+0x4a>
	__asm volatile
 800b752:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b756:	f383 8811 	msr	BASEPRI, r3
 800b75a:	f3bf 8f6f 	isb	sy
 800b75e:	f3bf 8f4f 	dsb	sy
 800b762:	60fb      	str	r3, [r7, #12]
}
 800b764:	bf00      	nop
 800b766:	bf00      	nop
 800b768:	e7fd      	b.n	800b766 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b76a:	4b39      	ldr	r3, [pc, #228]	@ (800b850 <xPortStartScheduler+0x130>)
 800b76c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b76e:	697b      	ldr	r3, [r7, #20]
 800b770:	781b      	ldrb	r3, [r3, #0]
 800b772:	b2db      	uxtb	r3, r3
 800b774:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b776:	697b      	ldr	r3, [r7, #20]
 800b778:	22ff      	movs	r2, #255	@ 0xff
 800b77a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b77c:	697b      	ldr	r3, [r7, #20]
 800b77e:	781b      	ldrb	r3, [r3, #0]
 800b780:	b2db      	uxtb	r3, r3
 800b782:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b784:	78fb      	ldrb	r3, [r7, #3]
 800b786:	b2db      	uxtb	r3, r3
 800b788:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800b78c:	b2da      	uxtb	r2, r3
 800b78e:	4b31      	ldr	r3, [pc, #196]	@ (800b854 <xPortStartScheduler+0x134>)
 800b790:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b792:	4b31      	ldr	r3, [pc, #196]	@ (800b858 <xPortStartScheduler+0x138>)
 800b794:	2207      	movs	r2, #7
 800b796:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b798:	e009      	b.n	800b7ae <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800b79a:	4b2f      	ldr	r3, [pc, #188]	@ (800b858 <xPortStartScheduler+0x138>)
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	3b01      	subs	r3, #1
 800b7a0:	4a2d      	ldr	r2, [pc, #180]	@ (800b858 <xPortStartScheduler+0x138>)
 800b7a2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b7a4:	78fb      	ldrb	r3, [r7, #3]
 800b7a6:	b2db      	uxtb	r3, r3
 800b7a8:	005b      	lsls	r3, r3, #1
 800b7aa:	b2db      	uxtb	r3, r3
 800b7ac:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b7ae:	78fb      	ldrb	r3, [r7, #3]
 800b7b0:	b2db      	uxtb	r3, r3
 800b7b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b7b6:	2b80      	cmp	r3, #128	@ 0x80
 800b7b8:	d0ef      	beq.n	800b79a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b7ba:	4b27      	ldr	r3, [pc, #156]	@ (800b858 <xPortStartScheduler+0x138>)
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	f1c3 0307 	rsb	r3, r3, #7
 800b7c2:	2b04      	cmp	r3, #4
 800b7c4:	d00b      	beq.n	800b7de <xPortStartScheduler+0xbe>
	__asm volatile
 800b7c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7ca:	f383 8811 	msr	BASEPRI, r3
 800b7ce:	f3bf 8f6f 	isb	sy
 800b7d2:	f3bf 8f4f 	dsb	sy
 800b7d6:	60bb      	str	r3, [r7, #8]
}
 800b7d8:	bf00      	nop
 800b7da:	bf00      	nop
 800b7dc:	e7fd      	b.n	800b7da <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b7de:	4b1e      	ldr	r3, [pc, #120]	@ (800b858 <xPortStartScheduler+0x138>)
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	021b      	lsls	r3, r3, #8
 800b7e4:	4a1c      	ldr	r2, [pc, #112]	@ (800b858 <xPortStartScheduler+0x138>)
 800b7e6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b7e8:	4b1b      	ldr	r3, [pc, #108]	@ (800b858 <xPortStartScheduler+0x138>)
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b7f0:	4a19      	ldr	r2, [pc, #100]	@ (800b858 <xPortStartScheduler+0x138>)
 800b7f2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	b2da      	uxtb	r2, r3
 800b7f8:	697b      	ldr	r3, [r7, #20]
 800b7fa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b7fc:	4b17      	ldr	r3, [pc, #92]	@ (800b85c <xPortStartScheduler+0x13c>)
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	4a16      	ldr	r2, [pc, #88]	@ (800b85c <xPortStartScheduler+0x13c>)
 800b802:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800b806:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b808:	4b14      	ldr	r3, [pc, #80]	@ (800b85c <xPortStartScheduler+0x13c>)
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	4a13      	ldr	r2, [pc, #76]	@ (800b85c <xPortStartScheduler+0x13c>)
 800b80e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800b812:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b814:	f000 f8da 	bl	800b9cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b818:	4b11      	ldr	r3, [pc, #68]	@ (800b860 <xPortStartScheduler+0x140>)
 800b81a:	2200      	movs	r2, #0
 800b81c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b81e:	f000 f8f9 	bl	800ba14 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b822:	4b10      	ldr	r3, [pc, #64]	@ (800b864 <xPortStartScheduler+0x144>)
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	4a0f      	ldr	r2, [pc, #60]	@ (800b864 <xPortStartScheduler+0x144>)
 800b828:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800b82c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b82e:	f7ff ff63 	bl	800b6f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b832:	f7ff fce9 	bl	800b208 <vTaskSwitchContext>
	prvTaskExitError();
 800b836:	f7ff ff17 	bl	800b668 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b83a:	2300      	movs	r3, #0
}
 800b83c:	4618      	mov	r0, r3
 800b83e:	3718      	adds	r7, #24
 800b840:	46bd      	mov	sp, r7
 800b842:	bd80      	pop	{r7, pc}
 800b844:	e000ed00 	.word	0xe000ed00
 800b848:	410fc271 	.word	0x410fc271
 800b84c:	410fc270 	.word	0x410fc270
 800b850:	e000e400 	.word	0xe000e400
 800b854:	24000630 	.word	0x24000630
 800b858:	24000634 	.word	0x24000634
 800b85c:	e000ed20 	.word	0xe000ed20
 800b860:	24000010 	.word	0x24000010
 800b864:	e000ef34 	.word	0xe000ef34

0800b868 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b868:	b480      	push	{r7}
 800b86a:	b083      	sub	sp, #12
 800b86c:	af00      	add	r7, sp, #0
	__asm volatile
 800b86e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b872:	f383 8811 	msr	BASEPRI, r3
 800b876:	f3bf 8f6f 	isb	sy
 800b87a:	f3bf 8f4f 	dsb	sy
 800b87e:	607b      	str	r3, [r7, #4]
}
 800b880:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b882:	4b10      	ldr	r3, [pc, #64]	@ (800b8c4 <vPortEnterCritical+0x5c>)
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	3301      	adds	r3, #1
 800b888:	4a0e      	ldr	r2, [pc, #56]	@ (800b8c4 <vPortEnterCritical+0x5c>)
 800b88a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b88c:	4b0d      	ldr	r3, [pc, #52]	@ (800b8c4 <vPortEnterCritical+0x5c>)
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	2b01      	cmp	r3, #1
 800b892:	d110      	bne.n	800b8b6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b894:	4b0c      	ldr	r3, [pc, #48]	@ (800b8c8 <vPortEnterCritical+0x60>)
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	b2db      	uxtb	r3, r3
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d00b      	beq.n	800b8b6 <vPortEnterCritical+0x4e>
	__asm volatile
 800b89e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8a2:	f383 8811 	msr	BASEPRI, r3
 800b8a6:	f3bf 8f6f 	isb	sy
 800b8aa:	f3bf 8f4f 	dsb	sy
 800b8ae:	603b      	str	r3, [r7, #0]
}
 800b8b0:	bf00      	nop
 800b8b2:	bf00      	nop
 800b8b4:	e7fd      	b.n	800b8b2 <vPortEnterCritical+0x4a>
	}
}
 800b8b6:	bf00      	nop
 800b8b8:	370c      	adds	r7, #12
 800b8ba:	46bd      	mov	sp, r7
 800b8bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c0:	4770      	bx	lr
 800b8c2:	bf00      	nop
 800b8c4:	24000010 	.word	0x24000010
 800b8c8:	e000ed04 	.word	0xe000ed04

0800b8cc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b8cc:	b480      	push	{r7}
 800b8ce:	b083      	sub	sp, #12
 800b8d0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b8d2:	4b12      	ldr	r3, [pc, #72]	@ (800b91c <vPortExitCritical+0x50>)
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d10b      	bne.n	800b8f2 <vPortExitCritical+0x26>
	__asm volatile
 800b8da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8de:	f383 8811 	msr	BASEPRI, r3
 800b8e2:	f3bf 8f6f 	isb	sy
 800b8e6:	f3bf 8f4f 	dsb	sy
 800b8ea:	607b      	str	r3, [r7, #4]
}
 800b8ec:	bf00      	nop
 800b8ee:	bf00      	nop
 800b8f0:	e7fd      	b.n	800b8ee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b8f2:	4b0a      	ldr	r3, [pc, #40]	@ (800b91c <vPortExitCritical+0x50>)
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	3b01      	subs	r3, #1
 800b8f8:	4a08      	ldr	r2, [pc, #32]	@ (800b91c <vPortExitCritical+0x50>)
 800b8fa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b8fc:	4b07      	ldr	r3, [pc, #28]	@ (800b91c <vPortExitCritical+0x50>)
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	2b00      	cmp	r3, #0
 800b902:	d105      	bne.n	800b910 <vPortExitCritical+0x44>
 800b904:	2300      	movs	r3, #0
 800b906:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b908:	683b      	ldr	r3, [r7, #0]
 800b90a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b90e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b910:	bf00      	nop
 800b912:	370c      	adds	r7, #12
 800b914:	46bd      	mov	sp, r7
 800b916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b91a:	4770      	bx	lr
 800b91c:	24000010 	.word	0x24000010

0800b920 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b920:	f3ef 8009 	mrs	r0, PSP
 800b924:	f3bf 8f6f 	isb	sy
 800b928:	4b15      	ldr	r3, [pc, #84]	@ (800b980 <pxCurrentTCBConst>)
 800b92a:	681a      	ldr	r2, [r3, #0]
 800b92c:	f01e 0f10 	tst.w	lr, #16
 800b930:	bf08      	it	eq
 800b932:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b936:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b93a:	6010      	str	r0, [r2, #0]
 800b93c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b940:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800b944:	f380 8811 	msr	BASEPRI, r0
 800b948:	f3bf 8f4f 	dsb	sy
 800b94c:	f3bf 8f6f 	isb	sy
 800b950:	f7ff fc5a 	bl	800b208 <vTaskSwitchContext>
 800b954:	f04f 0000 	mov.w	r0, #0
 800b958:	f380 8811 	msr	BASEPRI, r0
 800b95c:	bc09      	pop	{r0, r3}
 800b95e:	6819      	ldr	r1, [r3, #0]
 800b960:	6808      	ldr	r0, [r1, #0]
 800b962:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b966:	f01e 0f10 	tst.w	lr, #16
 800b96a:	bf08      	it	eq
 800b96c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b970:	f380 8809 	msr	PSP, r0
 800b974:	f3bf 8f6f 	isb	sy
 800b978:	4770      	bx	lr
 800b97a:	bf00      	nop
 800b97c:	f3af 8000 	nop.w

0800b980 <pxCurrentTCBConst>:
 800b980:	24000504 	.word	0x24000504
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b984:	bf00      	nop
 800b986:	bf00      	nop

0800b988 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b988:	b580      	push	{r7, lr}
 800b98a:	b082      	sub	sp, #8
 800b98c:	af00      	add	r7, sp, #0
	__asm volatile
 800b98e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b992:	f383 8811 	msr	BASEPRI, r3
 800b996:	f3bf 8f6f 	isb	sy
 800b99a:	f3bf 8f4f 	dsb	sy
 800b99e:	607b      	str	r3, [r7, #4]
}
 800b9a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b9a2:	f7ff fb77 	bl	800b094 <xTaskIncrementTick>
 800b9a6:	4603      	mov	r3, r0
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d003      	beq.n	800b9b4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b9ac:	4b06      	ldr	r3, [pc, #24]	@ (800b9c8 <SysTick_Handler+0x40>)
 800b9ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b9b2:	601a      	str	r2, [r3, #0]
 800b9b4:	2300      	movs	r3, #0
 800b9b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b9b8:	683b      	ldr	r3, [r7, #0]
 800b9ba:	f383 8811 	msr	BASEPRI, r3
}
 800b9be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b9c0:	bf00      	nop
 800b9c2:	3708      	adds	r7, #8
 800b9c4:	46bd      	mov	sp, r7
 800b9c6:	bd80      	pop	{r7, pc}
 800b9c8:	e000ed04 	.word	0xe000ed04

0800b9cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b9cc:	b480      	push	{r7}
 800b9ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b9d0:	4b0b      	ldr	r3, [pc, #44]	@ (800ba00 <vPortSetupTimerInterrupt+0x34>)
 800b9d2:	2200      	movs	r2, #0
 800b9d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b9d6:	4b0b      	ldr	r3, [pc, #44]	@ (800ba04 <vPortSetupTimerInterrupt+0x38>)
 800b9d8:	2200      	movs	r2, #0
 800b9da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b9dc:	4b0a      	ldr	r3, [pc, #40]	@ (800ba08 <vPortSetupTimerInterrupt+0x3c>)
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	4a0a      	ldr	r2, [pc, #40]	@ (800ba0c <vPortSetupTimerInterrupt+0x40>)
 800b9e2:	fba2 2303 	umull	r2, r3, r2, r3
 800b9e6:	099b      	lsrs	r3, r3, #6
 800b9e8:	4a09      	ldr	r2, [pc, #36]	@ (800ba10 <vPortSetupTimerInterrupt+0x44>)
 800b9ea:	3b01      	subs	r3, #1
 800b9ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b9ee:	4b04      	ldr	r3, [pc, #16]	@ (800ba00 <vPortSetupTimerInterrupt+0x34>)
 800b9f0:	2207      	movs	r2, #7
 800b9f2:	601a      	str	r2, [r3, #0]
}
 800b9f4:	bf00      	nop
 800b9f6:	46bd      	mov	sp, r7
 800b9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9fc:	4770      	bx	lr
 800b9fe:	bf00      	nop
 800ba00:	e000e010 	.word	0xe000e010
 800ba04:	e000e018 	.word	0xe000e018
 800ba08:	24000000 	.word	0x24000000
 800ba0c:	10624dd3 	.word	0x10624dd3
 800ba10:	e000e014 	.word	0xe000e014

0800ba14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ba14:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800ba24 <vPortEnableVFP+0x10>
 800ba18:	6801      	ldr	r1, [r0, #0]
 800ba1a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800ba1e:	6001      	str	r1, [r0, #0]
 800ba20:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ba22:	bf00      	nop
 800ba24:	e000ed88 	.word	0xe000ed88

0800ba28 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ba28:	b580      	push	{r7, lr}
 800ba2a:	b08a      	sub	sp, #40	@ 0x28
 800ba2c:	af00      	add	r7, sp, #0
 800ba2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ba30:	2300      	movs	r3, #0
 800ba32:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ba34:	f7ff fa82 	bl	800af3c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ba38:	4b5c      	ldr	r3, [pc, #368]	@ (800bbac <pvPortMalloc+0x184>)
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d101      	bne.n	800ba44 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ba40:	f000 f924 	bl	800bc8c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ba44:	4b5a      	ldr	r3, [pc, #360]	@ (800bbb0 <pvPortMalloc+0x188>)
 800ba46:	681a      	ldr	r2, [r3, #0]
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	4013      	ands	r3, r2
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	f040 8095 	bne.w	800bb7c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d01e      	beq.n	800ba96 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800ba58:	2208      	movs	r2, #8
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	4413      	add	r3, r2
 800ba5e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	f003 0307 	and.w	r3, r3, #7
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d015      	beq.n	800ba96 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	f023 0307 	bic.w	r3, r3, #7
 800ba70:	3308      	adds	r3, #8
 800ba72:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	f003 0307 	and.w	r3, r3, #7
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d00b      	beq.n	800ba96 <pvPortMalloc+0x6e>
	__asm volatile
 800ba7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba82:	f383 8811 	msr	BASEPRI, r3
 800ba86:	f3bf 8f6f 	isb	sy
 800ba8a:	f3bf 8f4f 	dsb	sy
 800ba8e:	617b      	str	r3, [r7, #20]
}
 800ba90:	bf00      	nop
 800ba92:	bf00      	nop
 800ba94:	e7fd      	b.n	800ba92 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d06f      	beq.n	800bb7c <pvPortMalloc+0x154>
 800ba9c:	4b45      	ldr	r3, [pc, #276]	@ (800bbb4 <pvPortMalloc+0x18c>)
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	687a      	ldr	r2, [r7, #4]
 800baa2:	429a      	cmp	r2, r3
 800baa4:	d86a      	bhi.n	800bb7c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800baa6:	4b44      	ldr	r3, [pc, #272]	@ (800bbb8 <pvPortMalloc+0x190>)
 800baa8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800baaa:	4b43      	ldr	r3, [pc, #268]	@ (800bbb8 <pvPortMalloc+0x190>)
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bab0:	e004      	b.n	800babc <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800bab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bab4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800bab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800babc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800babe:	685b      	ldr	r3, [r3, #4]
 800bac0:	687a      	ldr	r2, [r7, #4]
 800bac2:	429a      	cmp	r2, r3
 800bac4:	d903      	bls.n	800bace <pvPortMalloc+0xa6>
 800bac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d1f1      	bne.n	800bab2 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800bace:	4b37      	ldr	r3, [pc, #220]	@ (800bbac <pvPortMalloc+0x184>)
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bad4:	429a      	cmp	r2, r3
 800bad6:	d051      	beq.n	800bb7c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800bad8:	6a3b      	ldr	r3, [r7, #32]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	2208      	movs	r2, #8
 800bade:	4413      	add	r3, r2
 800bae0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800bae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bae4:	681a      	ldr	r2, [r3, #0]
 800bae6:	6a3b      	ldr	r3, [r7, #32]
 800bae8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800baea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800baec:	685a      	ldr	r2, [r3, #4]
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	1ad2      	subs	r2, r2, r3
 800baf2:	2308      	movs	r3, #8
 800baf4:	005b      	lsls	r3, r3, #1
 800baf6:	429a      	cmp	r2, r3
 800baf8:	d920      	bls.n	800bb3c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800bafa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	4413      	add	r3, r2
 800bb00:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bb02:	69bb      	ldr	r3, [r7, #24]
 800bb04:	f003 0307 	and.w	r3, r3, #7
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d00b      	beq.n	800bb24 <pvPortMalloc+0xfc>
	__asm volatile
 800bb0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb10:	f383 8811 	msr	BASEPRI, r3
 800bb14:	f3bf 8f6f 	isb	sy
 800bb18:	f3bf 8f4f 	dsb	sy
 800bb1c:	613b      	str	r3, [r7, #16]
}
 800bb1e:	bf00      	nop
 800bb20:	bf00      	nop
 800bb22:	e7fd      	b.n	800bb20 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800bb24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb26:	685a      	ldr	r2, [r3, #4]
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	1ad2      	subs	r2, r2, r3
 800bb2c:	69bb      	ldr	r3, [r7, #24]
 800bb2e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800bb30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb32:	687a      	ldr	r2, [r7, #4]
 800bb34:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800bb36:	69b8      	ldr	r0, [r7, #24]
 800bb38:	f000 f90a 	bl	800bd50 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800bb3c:	4b1d      	ldr	r3, [pc, #116]	@ (800bbb4 <pvPortMalloc+0x18c>)
 800bb3e:	681a      	ldr	r2, [r3, #0]
 800bb40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb42:	685b      	ldr	r3, [r3, #4]
 800bb44:	1ad3      	subs	r3, r2, r3
 800bb46:	4a1b      	ldr	r2, [pc, #108]	@ (800bbb4 <pvPortMalloc+0x18c>)
 800bb48:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800bb4a:	4b1a      	ldr	r3, [pc, #104]	@ (800bbb4 <pvPortMalloc+0x18c>)
 800bb4c:	681a      	ldr	r2, [r3, #0]
 800bb4e:	4b1b      	ldr	r3, [pc, #108]	@ (800bbbc <pvPortMalloc+0x194>)
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	429a      	cmp	r2, r3
 800bb54:	d203      	bcs.n	800bb5e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800bb56:	4b17      	ldr	r3, [pc, #92]	@ (800bbb4 <pvPortMalloc+0x18c>)
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	4a18      	ldr	r2, [pc, #96]	@ (800bbbc <pvPortMalloc+0x194>)
 800bb5c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800bb5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb60:	685a      	ldr	r2, [r3, #4]
 800bb62:	4b13      	ldr	r3, [pc, #76]	@ (800bbb0 <pvPortMalloc+0x188>)
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	431a      	orrs	r2, r3
 800bb68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb6a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800bb6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb6e:	2200      	movs	r2, #0
 800bb70:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800bb72:	4b13      	ldr	r3, [pc, #76]	@ (800bbc0 <pvPortMalloc+0x198>)
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	3301      	adds	r3, #1
 800bb78:	4a11      	ldr	r2, [pc, #68]	@ (800bbc0 <pvPortMalloc+0x198>)
 800bb7a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800bb7c:	f7ff f9ec 	bl	800af58 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800bb80:	69fb      	ldr	r3, [r7, #28]
 800bb82:	f003 0307 	and.w	r3, r3, #7
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d00b      	beq.n	800bba2 <pvPortMalloc+0x17a>
	__asm volatile
 800bb8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb8e:	f383 8811 	msr	BASEPRI, r3
 800bb92:	f3bf 8f6f 	isb	sy
 800bb96:	f3bf 8f4f 	dsb	sy
 800bb9a:	60fb      	str	r3, [r7, #12]
}
 800bb9c:	bf00      	nop
 800bb9e:	bf00      	nop
 800bba0:	e7fd      	b.n	800bb9e <pvPortMalloc+0x176>
	return pvReturn;
 800bba2:	69fb      	ldr	r3, [r7, #28]
}
 800bba4:	4618      	mov	r0, r3
 800bba6:	3728      	adds	r7, #40	@ 0x28
 800bba8:	46bd      	mov	sp, r7
 800bbaa:	bd80      	pop	{r7, pc}
 800bbac:	24004240 	.word	0x24004240
 800bbb0:	24004254 	.word	0x24004254
 800bbb4:	24004244 	.word	0x24004244
 800bbb8:	24004238 	.word	0x24004238
 800bbbc:	24004248 	.word	0x24004248
 800bbc0:	2400424c 	.word	0x2400424c

0800bbc4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800bbc4:	b580      	push	{r7, lr}
 800bbc6:	b086      	sub	sp, #24
 800bbc8:	af00      	add	r7, sp, #0
 800bbca:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d04f      	beq.n	800bc76 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800bbd6:	2308      	movs	r3, #8
 800bbd8:	425b      	negs	r3, r3
 800bbda:	697a      	ldr	r2, [r7, #20]
 800bbdc:	4413      	add	r3, r2
 800bbde:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800bbe0:	697b      	ldr	r3, [r7, #20]
 800bbe2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800bbe4:	693b      	ldr	r3, [r7, #16]
 800bbe6:	685a      	ldr	r2, [r3, #4]
 800bbe8:	4b25      	ldr	r3, [pc, #148]	@ (800bc80 <vPortFree+0xbc>)
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	4013      	ands	r3, r2
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d10b      	bne.n	800bc0a <vPortFree+0x46>
	__asm volatile
 800bbf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbf6:	f383 8811 	msr	BASEPRI, r3
 800bbfa:	f3bf 8f6f 	isb	sy
 800bbfe:	f3bf 8f4f 	dsb	sy
 800bc02:	60fb      	str	r3, [r7, #12]
}
 800bc04:	bf00      	nop
 800bc06:	bf00      	nop
 800bc08:	e7fd      	b.n	800bc06 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800bc0a:	693b      	ldr	r3, [r7, #16]
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d00b      	beq.n	800bc2a <vPortFree+0x66>
	__asm volatile
 800bc12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc16:	f383 8811 	msr	BASEPRI, r3
 800bc1a:	f3bf 8f6f 	isb	sy
 800bc1e:	f3bf 8f4f 	dsb	sy
 800bc22:	60bb      	str	r3, [r7, #8]
}
 800bc24:	bf00      	nop
 800bc26:	bf00      	nop
 800bc28:	e7fd      	b.n	800bc26 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800bc2a:	693b      	ldr	r3, [r7, #16]
 800bc2c:	685a      	ldr	r2, [r3, #4]
 800bc2e:	4b14      	ldr	r3, [pc, #80]	@ (800bc80 <vPortFree+0xbc>)
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	4013      	ands	r3, r2
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d01e      	beq.n	800bc76 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800bc38:	693b      	ldr	r3, [r7, #16]
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d11a      	bne.n	800bc76 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800bc40:	693b      	ldr	r3, [r7, #16]
 800bc42:	685a      	ldr	r2, [r3, #4]
 800bc44:	4b0e      	ldr	r3, [pc, #56]	@ (800bc80 <vPortFree+0xbc>)
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	43db      	mvns	r3, r3
 800bc4a:	401a      	ands	r2, r3
 800bc4c:	693b      	ldr	r3, [r7, #16]
 800bc4e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800bc50:	f7ff f974 	bl	800af3c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800bc54:	693b      	ldr	r3, [r7, #16]
 800bc56:	685a      	ldr	r2, [r3, #4]
 800bc58:	4b0a      	ldr	r3, [pc, #40]	@ (800bc84 <vPortFree+0xc0>)
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	4413      	add	r3, r2
 800bc5e:	4a09      	ldr	r2, [pc, #36]	@ (800bc84 <vPortFree+0xc0>)
 800bc60:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800bc62:	6938      	ldr	r0, [r7, #16]
 800bc64:	f000 f874 	bl	800bd50 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800bc68:	4b07      	ldr	r3, [pc, #28]	@ (800bc88 <vPortFree+0xc4>)
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	3301      	adds	r3, #1
 800bc6e:	4a06      	ldr	r2, [pc, #24]	@ (800bc88 <vPortFree+0xc4>)
 800bc70:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800bc72:	f7ff f971 	bl	800af58 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800bc76:	bf00      	nop
 800bc78:	3718      	adds	r7, #24
 800bc7a:	46bd      	mov	sp, r7
 800bc7c:	bd80      	pop	{r7, pc}
 800bc7e:	bf00      	nop
 800bc80:	24004254 	.word	0x24004254
 800bc84:	24004244 	.word	0x24004244
 800bc88:	24004250 	.word	0x24004250

0800bc8c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800bc8c:	b480      	push	{r7}
 800bc8e:	b085      	sub	sp, #20
 800bc90:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800bc92:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800bc96:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800bc98:	4b27      	ldr	r3, [pc, #156]	@ (800bd38 <prvHeapInit+0xac>)
 800bc9a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	f003 0307 	and.w	r3, r3, #7
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d00c      	beq.n	800bcc0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	3307      	adds	r3, #7
 800bcaa:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	f023 0307 	bic.w	r3, r3, #7
 800bcb2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800bcb4:	68ba      	ldr	r2, [r7, #8]
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	1ad3      	subs	r3, r2, r3
 800bcba:	4a1f      	ldr	r2, [pc, #124]	@ (800bd38 <prvHeapInit+0xac>)
 800bcbc:	4413      	add	r3, r2
 800bcbe:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800bcc4:	4a1d      	ldr	r2, [pc, #116]	@ (800bd3c <prvHeapInit+0xb0>)
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800bcca:	4b1c      	ldr	r3, [pc, #112]	@ (800bd3c <prvHeapInit+0xb0>)
 800bccc:	2200      	movs	r2, #0
 800bcce:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	68ba      	ldr	r2, [r7, #8]
 800bcd4:	4413      	add	r3, r2
 800bcd6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800bcd8:	2208      	movs	r2, #8
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	1a9b      	subs	r3, r3, r2
 800bcde:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	f023 0307 	bic.w	r3, r3, #7
 800bce6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	4a15      	ldr	r2, [pc, #84]	@ (800bd40 <prvHeapInit+0xb4>)
 800bcec:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800bcee:	4b14      	ldr	r3, [pc, #80]	@ (800bd40 <prvHeapInit+0xb4>)
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	2200      	movs	r2, #0
 800bcf4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800bcf6:	4b12      	ldr	r3, [pc, #72]	@ (800bd40 <prvHeapInit+0xb4>)
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	2200      	movs	r2, #0
 800bcfc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800bd02:	683b      	ldr	r3, [r7, #0]
 800bd04:	68fa      	ldr	r2, [r7, #12]
 800bd06:	1ad2      	subs	r2, r2, r3
 800bd08:	683b      	ldr	r3, [r7, #0]
 800bd0a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800bd0c:	4b0c      	ldr	r3, [pc, #48]	@ (800bd40 <prvHeapInit+0xb4>)
 800bd0e:	681a      	ldr	r2, [r3, #0]
 800bd10:	683b      	ldr	r3, [r7, #0]
 800bd12:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bd14:	683b      	ldr	r3, [r7, #0]
 800bd16:	685b      	ldr	r3, [r3, #4]
 800bd18:	4a0a      	ldr	r2, [pc, #40]	@ (800bd44 <prvHeapInit+0xb8>)
 800bd1a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bd1c:	683b      	ldr	r3, [r7, #0]
 800bd1e:	685b      	ldr	r3, [r3, #4]
 800bd20:	4a09      	ldr	r2, [pc, #36]	@ (800bd48 <prvHeapInit+0xbc>)
 800bd22:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800bd24:	4b09      	ldr	r3, [pc, #36]	@ (800bd4c <prvHeapInit+0xc0>)
 800bd26:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800bd2a:	601a      	str	r2, [r3, #0]
}
 800bd2c:	bf00      	nop
 800bd2e:	3714      	adds	r7, #20
 800bd30:	46bd      	mov	sp, r7
 800bd32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd36:	4770      	bx	lr
 800bd38:	24000638 	.word	0x24000638
 800bd3c:	24004238 	.word	0x24004238
 800bd40:	24004240 	.word	0x24004240
 800bd44:	24004248 	.word	0x24004248
 800bd48:	24004244 	.word	0x24004244
 800bd4c:	24004254 	.word	0x24004254

0800bd50 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800bd50:	b480      	push	{r7}
 800bd52:	b085      	sub	sp, #20
 800bd54:	af00      	add	r7, sp, #0
 800bd56:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800bd58:	4b28      	ldr	r3, [pc, #160]	@ (800bdfc <prvInsertBlockIntoFreeList+0xac>)
 800bd5a:	60fb      	str	r3, [r7, #12]
 800bd5c:	e002      	b.n	800bd64 <prvInsertBlockIntoFreeList+0x14>
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	60fb      	str	r3, [r7, #12]
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	687a      	ldr	r2, [r7, #4]
 800bd6a:	429a      	cmp	r2, r3
 800bd6c:	d8f7      	bhi.n	800bd5e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	685b      	ldr	r3, [r3, #4]
 800bd76:	68ba      	ldr	r2, [r7, #8]
 800bd78:	4413      	add	r3, r2
 800bd7a:	687a      	ldr	r2, [r7, #4]
 800bd7c:	429a      	cmp	r2, r3
 800bd7e:	d108      	bne.n	800bd92 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	685a      	ldr	r2, [r3, #4]
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	685b      	ldr	r3, [r3, #4]
 800bd88:	441a      	add	r2, r3
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	685b      	ldr	r3, [r3, #4]
 800bd9a:	68ba      	ldr	r2, [r7, #8]
 800bd9c:	441a      	add	r2, r3
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	429a      	cmp	r2, r3
 800bda4:	d118      	bne.n	800bdd8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	681a      	ldr	r2, [r3, #0]
 800bdaa:	4b15      	ldr	r3, [pc, #84]	@ (800be00 <prvInsertBlockIntoFreeList+0xb0>)
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	429a      	cmp	r2, r3
 800bdb0:	d00d      	beq.n	800bdce <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	685a      	ldr	r2, [r3, #4]
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	685b      	ldr	r3, [r3, #4]
 800bdbc:	441a      	add	r2, r3
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	681a      	ldr	r2, [r3, #0]
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	601a      	str	r2, [r3, #0]
 800bdcc:	e008      	b.n	800bde0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800bdce:	4b0c      	ldr	r3, [pc, #48]	@ (800be00 <prvInsertBlockIntoFreeList+0xb0>)
 800bdd0:	681a      	ldr	r2, [r3, #0]
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	601a      	str	r2, [r3, #0]
 800bdd6:	e003      	b.n	800bde0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	681a      	ldr	r2, [r3, #0]
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800bde0:	68fa      	ldr	r2, [r7, #12]
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	429a      	cmp	r2, r3
 800bde6:	d002      	beq.n	800bdee <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	687a      	ldr	r2, [r7, #4]
 800bdec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bdee:	bf00      	nop
 800bdf0:	3714      	adds	r7, #20
 800bdf2:	46bd      	mov	sp, r7
 800bdf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf8:	4770      	bx	lr
 800bdfa:	bf00      	nop
 800bdfc:	24004238 	.word	0x24004238
 800be00:	24004240 	.word	0x24004240

0800be04 <malloc>:
 800be04:	4b02      	ldr	r3, [pc, #8]	@ (800be10 <malloc+0xc>)
 800be06:	4601      	mov	r1, r0
 800be08:	6818      	ldr	r0, [r3, #0]
 800be0a:	f000 b825 	b.w	800be58 <_malloc_r>
 800be0e:	bf00      	nop
 800be10:	24000014 	.word	0x24000014

0800be14 <sbrk_aligned>:
 800be14:	b570      	push	{r4, r5, r6, lr}
 800be16:	4e0f      	ldr	r6, [pc, #60]	@ (800be54 <sbrk_aligned+0x40>)
 800be18:	460c      	mov	r4, r1
 800be1a:	6831      	ldr	r1, [r6, #0]
 800be1c:	4605      	mov	r5, r0
 800be1e:	b911      	cbnz	r1, 800be26 <sbrk_aligned+0x12>
 800be20:	f000 f8ae 	bl	800bf80 <_sbrk_r>
 800be24:	6030      	str	r0, [r6, #0]
 800be26:	4621      	mov	r1, r4
 800be28:	4628      	mov	r0, r5
 800be2a:	f000 f8a9 	bl	800bf80 <_sbrk_r>
 800be2e:	1c43      	adds	r3, r0, #1
 800be30:	d103      	bne.n	800be3a <sbrk_aligned+0x26>
 800be32:	f04f 34ff 	mov.w	r4, #4294967295
 800be36:	4620      	mov	r0, r4
 800be38:	bd70      	pop	{r4, r5, r6, pc}
 800be3a:	1cc4      	adds	r4, r0, #3
 800be3c:	f024 0403 	bic.w	r4, r4, #3
 800be40:	42a0      	cmp	r0, r4
 800be42:	d0f8      	beq.n	800be36 <sbrk_aligned+0x22>
 800be44:	1a21      	subs	r1, r4, r0
 800be46:	4628      	mov	r0, r5
 800be48:	f000 f89a 	bl	800bf80 <_sbrk_r>
 800be4c:	3001      	adds	r0, #1
 800be4e:	d1f2      	bne.n	800be36 <sbrk_aligned+0x22>
 800be50:	e7ef      	b.n	800be32 <sbrk_aligned+0x1e>
 800be52:	bf00      	nop
 800be54:	24004258 	.word	0x24004258

0800be58 <_malloc_r>:
 800be58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be5c:	1ccd      	adds	r5, r1, #3
 800be5e:	f025 0503 	bic.w	r5, r5, #3
 800be62:	3508      	adds	r5, #8
 800be64:	2d0c      	cmp	r5, #12
 800be66:	bf38      	it	cc
 800be68:	250c      	movcc	r5, #12
 800be6a:	2d00      	cmp	r5, #0
 800be6c:	4606      	mov	r6, r0
 800be6e:	db01      	blt.n	800be74 <_malloc_r+0x1c>
 800be70:	42a9      	cmp	r1, r5
 800be72:	d904      	bls.n	800be7e <_malloc_r+0x26>
 800be74:	230c      	movs	r3, #12
 800be76:	6033      	str	r3, [r6, #0]
 800be78:	2000      	movs	r0, #0
 800be7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be7e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800bf54 <_malloc_r+0xfc>
 800be82:	f000 f869 	bl	800bf58 <__malloc_lock>
 800be86:	f8d8 3000 	ldr.w	r3, [r8]
 800be8a:	461c      	mov	r4, r3
 800be8c:	bb44      	cbnz	r4, 800bee0 <_malloc_r+0x88>
 800be8e:	4629      	mov	r1, r5
 800be90:	4630      	mov	r0, r6
 800be92:	f7ff ffbf 	bl	800be14 <sbrk_aligned>
 800be96:	1c43      	adds	r3, r0, #1
 800be98:	4604      	mov	r4, r0
 800be9a:	d158      	bne.n	800bf4e <_malloc_r+0xf6>
 800be9c:	f8d8 4000 	ldr.w	r4, [r8]
 800bea0:	4627      	mov	r7, r4
 800bea2:	2f00      	cmp	r7, #0
 800bea4:	d143      	bne.n	800bf2e <_malloc_r+0xd6>
 800bea6:	2c00      	cmp	r4, #0
 800bea8:	d04b      	beq.n	800bf42 <_malloc_r+0xea>
 800beaa:	6823      	ldr	r3, [r4, #0]
 800beac:	4639      	mov	r1, r7
 800beae:	4630      	mov	r0, r6
 800beb0:	eb04 0903 	add.w	r9, r4, r3
 800beb4:	f000 f864 	bl	800bf80 <_sbrk_r>
 800beb8:	4581      	cmp	r9, r0
 800beba:	d142      	bne.n	800bf42 <_malloc_r+0xea>
 800bebc:	6821      	ldr	r1, [r4, #0]
 800bebe:	1a6d      	subs	r5, r5, r1
 800bec0:	4629      	mov	r1, r5
 800bec2:	4630      	mov	r0, r6
 800bec4:	f7ff ffa6 	bl	800be14 <sbrk_aligned>
 800bec8:	3001      	adds	r0, #1
 800beca:	d03a      	beq.n	800bf42 <_malloc_r+0xea>
 800becc:	6823      	ldr	r3, [r4, #0]
 800bece:	442b      	add	r3, r5
 800bed0:	6023      	str	r3, [r4, #0]
 800bed2:	f8d8 3000 	ldr.w	r3, [r8]
 800bed6:	685a      	ldr	r2, [r3, #4]
 800bed8:	bb62      	cbnz	r2, 800bf34 <_malloc_r+0xdc>
 800beda:	f8c8 7000 	str.w	r7, [r8]
 800bede:	e00f      	b.n	800bf00 <_malloc_r+0xa8>
 800bee0:	6822      	ldr	r2, [r4, #0]
 800bee2:	1b52      	subs	r2, r2, r5
 800bee4:	d420      	bmi.n	800bf28 <_malloc_r+0xd0>
 800bee6:	2a0b      	cmp	r2, #11
 800bee8:	d917      	bls.n	800bf1a <_malloc_r+0xc2>
 800beea:	1961      	adds	r1, r4, r5
 800beec:	42a3      	cmp	r3, r4
 800beee:	6025      	str	r5, [r4, #0]
 800bef0:	bf18      	it	ne
 800bef2:	6059      	strne	r1, [r3, #4]
 800bef4:	6863      	ldr	r3, [r4, #4]
 800bef6:	bf08      	it	eq
 800bef8:	f8c8 1000 	streq.w	r1, [r8]
 800befc:	5162      	str	r2, [r4, r5]
 800befe:	604b      	str	r3, [r1, #4]
 800bf00:	4630      	mov	r0, r6
 800bf02:	f000 f82f 	bl	800bf64 <__malloc_unlock>
 800bf06:	f104 000b 	add.w	r0, r4, #11
 800bf0a:	1d23      	adds	r3, r4, #4
 800bf0c:	f020 0007 	bic.w	r0, r0, #7
 800bf10:	1ac2      	subs	r2, r0, r3
 800bf12:	bf1c      	itt	ne
 800bf14:	1a1b      	subne	r3, r3, r0
 800bf16:	50a3      	strne	r3, [r4, r2]
 800bf18:	e7af      	b.n	800be7a <_malloc_r+0x22>
 800bf1a:	6862      	ldr	r2, [r4, #4]
 800bf1c:	42a3      	cmp	r3, r4
 800bf1e:	bf0c      	ite	eq
 800bf20:	f8c8 2000 	streq.w	r2, [r8]
 800bf24:	605a      	strne	r2, [r3, #4]
 800bf26:	e7eb      	b.n	800bf00 <_malloc_r+0xa8>
 800bf28:	4623      	mov	r3, r4
 800bf2a:	6864      	ldr	r4, [r4, #4]
 800bf2c:	e7ae      	b.n	800be8c <_malloc_r+0x34>
 800bf2e:	463c      	mov	r4, r7
 800bf30:	687f      	ldr	r7, [r7, #4]
 800bf32:	e7b6      	b.n	800bea2 <_malloc_r+0x4a>
 800bf34:	461a      	mov	r2, r3
 800bf36:	685b      	ldr	r3, [r3, #4]
 800bf38:	42a3      	cmp	r3, r4
 800bf3a:	d1fb      	bne.n	800bf34 <_malloc_r+0xdc>
 800bf3c:	2300      	movs	r3, #0
 800bf3e:	6053      	str	r3, [r2, #4]
 800bf40:	e7de      	b.n	800bf00 <_malloc_r+0xa8>
 800bf42:	230c      	movs	r3, #12
 800bf44:	6033      	str	r3, [r6, #0]
 800bf46:	4630      	mov	r0, r6
 800bf48:	f000 f80c 	bl	800bf64 <__malloc_unlock>
 800bf4c:	e794      	b.n	800be78 <_malloc_r+0x20>
 800bf4e:	6005      	str	r5, [r0, #0]
 800bf50:	e7d6      	b.n	800bf00 <_malloc_r+0xa8>
 800bf52:	bf00      	nop
 800bf54:	2400425c 	.word	0x2400425c

0800bf58 <__malloc_lock>:
 800bf58:	4801      	ldr	r0, [pc, #4]	@ (800bf60 <__malloc_lock+0x8>)
 800bf5a:	f000 b84b 	b.w	800bff4 <__retarget_lock_acquire_recursive>
 800bf5e:	bf00      	nop
 800bf60:	2400439c 	.word	0x2400439c

0800bf64 <__malloc_unlock>:
 800bf64:	4801      	ldr	r0, [pc, #4]	@ (800bf6c <__malloc_unlock+0x8>)
 800bf66:	f000 b846 	b.w	800bff6 <__retarget_lock_release_recursive>
 800bf6a:	bf00      	nop
 800bf6c:	2400439c 	.word	0x2400439c

0800bf70 <memset>:
 800bf70:	4402      	add	r2, r0
 800bf72:	4603      	mov	r3, r0
 800bf74:	4293      	cmp	r3, r2
 800bf76:	d100      	bne.n	800bf7a <memset+0xa>
 800bf78:	4770      	bx	lr
 800bf7a:	f803 1b01 	strb.w	r1, [r3], #1
 800bf7e:	e7f9      	b.n	800bf74 <memset+0x4>

0800bf80 <_sbrk_r>:
 800bf80:	b538      	push	{r3, r4, r5, lr}
 800bf82:	4d06      	ldr	r5, [pc, #24]	@ (800bf9c <_sbrk_r+0x1c>)
 800bf84:	2300      	movs	r3, #0
 800bf86:	4604      	mov	r4, r0
 800bf88:	4608      	mov	r0, r1
 800bf8a:	602b      	str	r3, [r5, #0]
 800bf8c:	f7f4 feae 	bl	8000cec <_sbrk>
 800bf90:	1c43      	adds	r3, r0, #1
 800bf92:	d102      	bne.n	800bf9a <_sbrk_r+0x1a>
 800bf94:	682b      	ldr	r3, [r5, #0]
 800bf96:	b103      	cbz	r3, 800bf9a <_sbrk_r+0x1a>
 800bf98:	6023      	str	r3, [r4, #0]
 800bf9a:	bd38      	pop	{r3, r4, r5, pc}
 800bf9c:	24004398 	.word	0x24004398

0800bfa0 <__errno>:
 800bfa0:	4b01      	ldr	r3, [pc, #4]	@ (800bfa8 <__errno+0x8>)
 800bfa2:	6818      	ldr	r0, [r3, #0]
 800bfa4:	4770      	bx	lr
 800bfa6:	bf00      	nop
 800bfa8:	24000014 	.word	0x24000014

0800bfac <__libc_init_array>:
 800bfac:	b570      	push	{r4, r5, r6, lr}
 800bfae:	4d0d      	ldr	r5, [pc, #52]	@ (800bfe4 <__libc_init_array+0x38>)
 800bfb0:	4c0d      	ldr	r4, [pc, #52]	@ (800bfe8 <__libc_init_array+0x3c>)
 800bfb2:	1b64      	subs	r4, r4, r5
 800bfb4:	10a4      	asrs	r4, r4, #2
 800bfb6:	2600      	movs	r6, #0
 800bfb8:	42a6      	cmp	r6, r4
 800bfba:	d109      	bne.n	800bfd0 <__libc_init_array+0x24>
 800bfbc:	4d0b      	ldr	r5, [pc, #44]	@ (800bfec <__libc_init_array+0x40>)
 800bfbe:	4c0c      	ldr	r4, [pc, #48]	@ (800bff0 <__libc_init_array+0x44>)
 800bfc0:	f000 f828 	bl	800c014 <_init>
 800bfc4:	1b64      	subs	r4, r4, r5
 800bfc6:	10a4      	asrs	r4, r4, #2
 800bfc8:	2600      	movs	r6, #0
 800bfca:	42a6      	cmp	r6, r4
 800bfcc:	d105      	bne.n	800bfda <__libc_init_array+0x2e>
 800bfce:	bd70      	pop	{r4, r5, r6, pc}
 800bfd0:	f855 3b04 	ldr.w	r3, [r5], #4
 800bfd4:	4798      	blx	r3
 800bfd6:	3601      	adds	r6, #1
 800bfd8:	e7ee      	b.n	800bfb8 <__libc_init_array+0xc>
 800bfda:	f855 3b04 	ldr.w	r3, [r5], #4
 800bfde:	4798      	blx	r3
 800bfe0:	3601      	adds	r6, #1
 800bfe2:	e7f2      	b.n	800bfca <__libc_init_array+0x1e>
 800bfe4:	0800c0b0 	.word	0x0800c0b0
 800bfe8:	0800c0b0 	.word	0x0800c0b0
 800bfec:	0800c0b0 	.word	0x0800c0b0
 800bff0:	0800c0b4 	.word	0x0800c0b4

0800bff4 <__retarget_lock_acquire_recursive>:
 800bff4:	4770      	bx	lr

0800bff6 <__retarget_lock_release_recursive>:
 800bff6:	4770      	bx	lr

0800bff8 <memcpy>:
 800bff8:	440a      	add	r2, r1
 800bffa:	4291      	cmp	r1, r2
 800bffc:	f100 33ff 	add.w	r3, r0, #4294967295
 800c000:	d100      	bne.n	800c004 <memcpy+0xc>
 800c002:	4770      	bx	lr
 800c004:	b510      	push	{r4, lr}
 800c006:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c00a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c00e:	4291      	cmp	r1, r2
 800c010:	d1f9      	bne.n	800c006 <memcpy+0xe>
 800c012:	bd10      	pop	{r4, pc}

0800c014 <_init>:
 800c014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c016:	bf00      	nop
 800c018:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c01a:	bc08      	pop	{r3}
 800c01c:	469e      	mov	lr, r3
 800c01e:	4770      	bx	lr

0800c020 <_fini>:
 800c020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c022:	bf00      	nop
 800c024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c026:	bc08      	pop	{r3}
 800c028:	469e      	mov	lr, r3
 800c02a:	4770      	bx	lr
