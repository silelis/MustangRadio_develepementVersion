
I2C_DMA_testes.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008760  080002ac  080002ac  000012ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08008a0c  08008a0c  00009a0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008a4c  08008a4c  00009a4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008a54  08008a54  00009a54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08008a58  08008a58  00009a58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000010  24000000  08008a5c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000244  24000010  08008a6c  0000a010  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000254  08008a6c  0000a254  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000a010  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001acb2  00000000  00000000  0000a03e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003167  00000000  00000000  00024cf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001420  00000000  00000000  00027e58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000fca  00000000  00000000  00029278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00031558  00000000  00000000  0002a242  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001e2ca  00000000  00000000  0005b79a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0013fe34  00000000  00000000  00079a64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001b9898  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005510  00000000  00000000  001b98dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000008f  00000000  00000000  001bedec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002ac <__do_global_dtors_aux>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	4c05      	ldr	r4, [pc, #20]	@ (80002c4 <__do_global_dtors_aux+0x18>)
 80002b0:	7823      	ldrb	r3, [r4, #0]
 80002b2:	b933      	cbnz	r3, 80002c2 <__do_global_dtors_aux+0x16>
 80002b4:	4b04      	ldr	r3, [pc, #16]	@ (80002c8 <__do_global_dtors_aux+0x1c>)
 80002b6:	b113      	cbz	r3, 80002be <__do_global_dtors_aux+0x12>
 80002b8:	4804      	ldr	r0, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x20>)
 80002ba:	f3af 8000 	nop.w
 80002be:	2301      	movs	r3, #1
 80002c0:	7023      	strb	r3, [r4, #0]
 80002c2:	bd10      	pop	{r4, pc}
 80002c4:	24000010 	.word	0x24000010
 80002c8:	00000000 	.word	0x00000000
 80002cc:	080089f4 	.word	0x080089f4

080002d0 <frame_dummy>:
 80002d0:	b508      	push	{r3, lr}
 80002d2:	4b03      	ldr	r3, [pc, #12]	@ (80002e0 <frame_dummy+0x10>)
 80002d4:	b11b      	cbz	r3, 80002de <frame_dummy+0xe>
 80002d6:	4903      	ldr	r1, [pc, #12]	@ (80002e4 <frame_dummy+0x14>)
 80002d8:	4803      	ldr	r0, [pc, #12]	@ (80002e8 <frame_dummy+0x18>)
 80002da:	f3af 8000 	nop.w
 80002de:	bd08      	pop	{r3, pc}
 80002e0:	00000000 	.word	0x00000000
 80002e4:	24000014 	.word	0x24000014
 80002e8:	080089f4 	.word	0x080089f4

080002ec <__aeabi_uldivmod>:
 80002ec:	b953      	cbnz	r3, 8000304 <__aeabi_uldivmod+0x18>
 80002ee:	b94a      	cbnz	r2, 8000304 <__aeabi_uldivmod+0x18>
 80002f0:	2900      	cmp	r1, #0
 80002f2:	bf08      	it	eq
 80002f4:	2800      	cmpeq	r0, #0
 80002f6:	bf1c      	itt	ne
 80002f8:	f04f 31ff 	movne.w	r1, #4294967295
 80002fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000300:	f000 b96a 	b.w	80005d8 <__aeabi_idiv0>
 8000304:	f1ad 0c08 	sub.w	ip, sp, #8
 8000308:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800030c:	f000 f806 	bl	800031c <__udivmoddi4>
 8000310:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000314:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000318:	b004      	add	sp, #16
 800031a:	4770      	bx	lr

0800031c <__udivmoddi4>:
 800031c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000320:	9d08      	ldr	r5, [sp, #32]
 8000322:	460c      	mov	r4, r1
 8000324:	2b00      	cmp	r3, #0
 8000326:	d14e      	bne.n	80003c6 <__udivmoddi4+0xaa>
 8000328:	4694      	mov	ip, r2
 800032a:	458c      	cmp	ip, r1
 800032c:	4686      	mov	lr, r0
 800032e:	fab2 f282 	clz	r2, r2
 8000332:	d962      	bls.n	80003fa <__udivmoddi4+0xde>
 8000334:	b14a      	cbz	r2, 800034a <__udivmoddi4+0x2e>
 8000336:	f1c2 0320 	rsb	r3, r2, #32
 800033a:	4091      	lsls	r1, r2
 800033c:	fa20 f303 	lsr.w	r3, r0, r3
 8000340:	fa0c fc02 	lsl.w	ip, ip, r2
 8000344:	4319      	orrs	r1, r3
 8000346:	fa00 fe02 	lsl.w	lr, r0, r2
 800034a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800034e:	fa1f f68c 	uxth.w	r6, ip
 8000352:	fbb1 f4f7 	udiv	r4, r1, r7
 8000356:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035a:	fb07 1114 	mls	r1, r7, r4, r1
 800035e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000362:	fb04 f106 	mul.w	r1, r4, r6
 8000366:	4299      	cmp	r1, r3
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x64>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000372:	f080 8112 	bcs.w	800059a <__udivmoddi4+0x27e>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 810f 	bls.w	800059a <__udivmoddi4+0x27e>
 800037c:	3c02      	subs	r4, #2
 800037e:	4463      	add	r3, ip
 8000380:	1a59      	subs	r1, r3, r1
 8000382:	fa1f f38e 	uxth.w	r3, lr
 8000386:	fbb1 f0f7 	udiv	r0, r1, r7
 800038a:	fb07 1110 	mls	r1, r7, r0, r1
 800038e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000392:	fb00 f606 	mul.w	r6, r0, r6
 8000396:	429e      	cmp	r6, r3
 8000398:	d90a      	bls.n	80003b0 <__udivmoddi4+0x94>
 800039a:	eb1c 0303 	adds.w	r3, ip, r3
 800039e:	f100 31ff 	add.w	r1, r0, #4294967295
 80003a2:	f080 80fc 	bcs.w	800059e <__udivmoddi4+0x282>
 80003a6:	429e      	cmp	r6, r3
 80003a8:	f240 80f9 	bls.w	800059e <__udivmoddi4+0x282>
 80003ac:	4463      	add	r3, ip
 80003ae:	3802      	subs	r0, #2
 80003b0:	1b9b      	subs	r3, r3, r6
 80003b2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11d      	cbz	r5, 80003c2 <__udivmoddi4+0xa6>
 80003ba:	40d3      	lsrs	r3, r2
 80003bc:	2200      	movs	r2, #0
 80003be:	e9c5 3200 	strd	r3, r2, [r5]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d905      	bls.n	80003d6 <__udivmoddi4+0xba>
 80003ca:	b10d      	cbz	r5, 80003d0 <__udivmoddi4+0xb4>
 80003cc:	e9c5 0100 	strd	r0, r1, [r5]
 80003d0:	2100      	movs	r1, #0
 80003d2:	4608      	mov	r0, r1
 80003d4:	e7f5      	b.n	80003c2 <__udivmoddi4+0xa6>
 80003d6:	fab3 f183 	clz	r1, r3
 80003da:	2900      	cmp	r1, #0
 80003dc:	d146      	bne.n	800046c <__udivmoddi4+0x150>
 80003de:	42a3      	cmp	r3, r4
 80003e0:	d302      	bcc.n	80003e8 <__udivmoddi4+0xcc>
 80003e2:	4290      	cmp	r0, r2
 80003e4:	f0c0 80f0 	bcc.w	80005c8 <__udivmoddi4+0x2ac>
 80003e8:	1a86      	subs	r6, r0, r2
 80003ea:	eb64 0303 	sbc.w	r3, r4, r3
 80003ee:	2001      	movs	r0, #1
 80003f0:	2d00      	cmp	r5, #0
 80003f2:	d0e6      	beq.n	80003c2 <__udivmoddi4+0xa6>
 80003f4:	e9c5 6300 	strd	r6, r3, [r5]
 80003f8:	e7e3      	b.n	80003c2 <__udivmoddi4+0xa6>
 80003fa:	2a00      	cmp	r2, #0
 80003fc:	f040 8090 	bne.w	8000520 <__udivmoddi4+0x204>
 8000400:	eba1 040c 	sub.w	r4, r1, ip
 8000404:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000408:	fa1f f78c 	uxth.w	r7, ip
 800040c:	2101      	movs	r1, #1
 800040e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000412:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000416:	fb08 4416 	mls	r4, r8, r6, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb07 f006 	mul.w	r0, r7, r6
 8000422:	4298      	cmp	r0, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x11c>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f106 34ff 	add.w	r4, r6, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x11a>
 8000430:	4298      	cmp	r0, r3
 8000432:	f200 80cd 	bhi.w	80005d0 <__udivmoddi4+0x2b4>
 8000436:	4626      	mov	r6, r4
 8000438:	1a1c      	subs	r4, r3, r0
 800043a:	fa1f f38e 	uxth.w	r3, lr
 800043e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000442:	fb08 4410 	mls	r4, r8, r0, r4
 8000446:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044a:	fb00 f707 	mul.w	r7, r0, r7
 800044e:	429f      	cmp	r7, r3
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x148>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 34ff 	add.w	r4, r0, #4294967295
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x146>
 800045c:	429f      	cmp	r7, r3
 800045e:	f200 80b0 	bhi.w	80005c2 <__udivmoddi4+0x2a6>
 8000462:	4620      	mov	r0, r4
 8000464:	1bdb      	subs	r3, r3, r7
 8000466:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046a:	e7a5      	b.n	80003b8 <__udivmoddi4+0x9c>
 800046c:	f1c1 0620 	rsb	r6, r1, #32
 8000470:	408b      	lsls	r3, r1
 8000472:	fa22 f706 	lsr.w	r7, r2, r6
 8000476:	431f      	orrs	r7, r3
 8000478:	fa20 fc06 	lsr.w	ip, r0, r6
 800047c:	fa04 f301 	lsl.w	r3, r4, r1
 8000480:	ea43 030c 	orr.w	r3, r3, ip
 8000484:	40f4      	lsrs	r4, r6
 8000486:	fa00 f801 	lsl.w	r8, r0, r1
 800048a:	0c38      	lsrs	r0, r7, #16
 800048c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000490:	fbb4 fef0 	udiv	lr, r4, r0
 8000494:	fa1f fc87 	uxth.w	ip, r7
 8000498:	fb00 441e 	mls	r4, r0, lr, r4
 800049c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a0:	fb0e f90c 	mul.w	r9, lr, ip
 80004a4:	45a1      	cmp	r9, r4
 80004a6:	fa02 f201 	lsl.w	r2, r2, r1
 80004aa:	d90a      	bls.n	80004c2 <__udivmoddi4+0x1a6>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004b2:	f080 8084 	bcs.w	80005be <__udivmoddi4+0x2a2>
 80004b6:	45a1      	cmp	r9, r4
 80004b8:	f240 8081 	bls.w	80005be <__udivmoddi4+0x2a2>
 80004bc:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	eba4 0409 	sub.w	r4, r4, r9
 80004c6:	fa1f f983 	uxth.w	r9, r3
 80004ca:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ce:	fb00 4413 	mls	r4, r0, r3, r4
 80004d2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004d6:	fb03 fc0c 	mul.w	ip, r3, ip
 80004da:	45a4      	cmp	ip, r4
 80004dc:	d907      	bls.n	80004ee <__udivmoddi4+0x1d2>
 80004de:	193c      	adds	r4, r7, r4
 80004e0:	f103 30ff 	add.w	r0, r3, #4294967295
 80004e4:	d267      	bcs.n	80005b6 <__udivmoddi4+0x29a>
 80004e6:	45a4      	cmp	ip, r4
 80004e8:	d965      	bls.n	80005b6 <__udivmoddi4+0x29a>
 80004ea:	3b02      	subs	r3, #2
 80004ec:	443c      	add	r4, r7
 80004ee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f2:	fba0 9302 	umull	r9, r3, r0, r2
 80004f6:	eba4 040c 	sub.w	r4, r4, ip
 80004fa:	429c      	cmp	r4, r3
 80004fc:	46ce      	mov	lr, r9
 80004fe:	469c      	mov	ip, r3
 8000500:	d351      	bcc.n	80005a6 <__udivmoddi4+0x28a>
 8000502:	d04e      	beq.n	80005a2 <__udivmoddi4+0x286>
 8000504:	b155      	cbz	r5, 800051c <__udivmoddi4+0x200>
 8000506:	ebb8 030e 	subs.w	r3, r8, lr
 800050a:	eb64 040c 	sbc.w	r4, r4, ip
 800050e:	fa04 f606 	lsl.w	r6, r4, r6
 8000512:	40cb      	lsrs	r3, r1
 8000514:	431e      	orrs	r6, r3
 8000516:	40cc      	lsrs	r4, r1
 8000518:	e9c5 6400 	strd	r6, r4, [r5]
 800051c:	2100      	movs	r1, #0
 800051e:	e750      	b.n	80003c2 <__udivmoddi4+0xa6>
 8000520:	f1c2 0320 	rsb	r3, r2, #32
 8000524:	fa20 f103 	lsr.w	r1, r0, r3
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	fa24 f303 	lsr.w	r3, r4, r3
 8000530:	4094      	lsls	r4, r2
 8000532:	430c      	orrs	r4, r1
 8000534:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000538:	fa00 fe02 	lsl.w	lr, r0, r2
 800053c:	fa1f f78c 	uxth.w	r7, ip
 8000540:	fbb3 f0f8 	udiv	r0, r3, r8
 8000544:	fb08 3110 	mls	r1, r8, r0, r3
 8000548:	0c23      	lsrs	r3, r4, #16
 800054a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800054e:	fb00 f107 	mul.w	r1, r0, r7
 8000552:	4299      	cmp	r1, r3
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x24c>
 8000556:	eb1c 0303 	adds.w	r3, ip, r3
 800055a:	f100 36ff 	add.w	r6, r0, #4294967295
 800055e:	d22c      	bcs.n	80005ba <__udivmoddi4+0x29e>
 8000560:	4299      	cmp	r1, r3
 8000562:	d92a      	bls.n	80005ba <__udivmoddi4+0x29e>
 8000564:	3802      	subs	r0, #2
 8000566:	4463      	add	r3, ip
 8000568:	1a5b      	subs	r3, r3, r1
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000570:	fb08 3311 	mls	r3, r8, r1, r3
 8000574:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000578:	fb01 f307 	mul.w	r3, r1, r7
 800057c:	42a3      	cmp	r3, r4
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x276>
 8000580:	eb1c 0404 	adds.w	r4, ip, r4
 8000584:	f101 36ff 	add.w	r6, r1, #4294967295
 8000588:	d213      	bcs.n	80005b2 <__udivmoddi4+0x296>
 800058a:	42a3      	cmp	r3, r4
 800058c:	d911      	bls.n	80005b2 <__udivmoddi4+0x296>
 800058e:	3902      	subs	r1, #2
 8000590:	4464      	add	r4, ip
 8000592:	1ae4      	subs	r4, r4, r3
 8000594:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000598:	e739      	b.n	800040e <__udivmoddi4+0xf2>
 800059a:	4604      	mov	r4, r0
 800059c:	e6f0      	b.n	8000380 <__udivmoddi4+0x64>
 800059e:	4608      	mov	r0, r1
 80005a0:	e706      	b.n	80003b0 <__udivmoddi4+0x94>
 80005a2:	45c8      	cmp	r8, r9
 80005a4:	d2ae      	bcs.n	8000504 <__udivmoddi4+0x1e8>
 80005a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80005aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80005ae:	3801      	subs	r0, #1
 80005b0:	e7a8      	b.n	8000504 <__udivmoddi4+0x1e8>
 80005b2:	4631      	mov	r1, r6
 80005b4:	e7ed      	b.n	8000592 <__udivmoddi4+0x276>
 80005b6:	4603      	mov	r3, r0
 80005b8:	e799      	b.n	80004ee <__udivmoddi4+0x1d2>
 80005ba:	4630      	mov	r0, r6
 80005bc:	e7d4      	b.n	8000568 <__udivmoddi4+0x24c>
 80005be:	46d6      	mov	lr, sl
 80005c0:	e77f      	b.n	80004c2 <__udivmoddi4+0x1a6>
 80005c2:	4463      	add	r3, ip
 80005c4:	3802      	subs	r0, #2
 80005c6:	e74d      	b.n	8000464 <__udivmoddi4+0x148>
 80005c8:	4606      	mov	r6, r0
 80005ca:	4623      	mov	r3, r4
 80005cc:	4608      	mov	r0, r1
 80005ce:	e70f      	b.n	80003f0 <__udivmoddi4+0xd4>
 80005d0:	3e02      	subs	r6, #2
 80005d2:	4463      	add	r3, ip
 80005d4:	e730      	b.n	8000438 <__udivmoddi4+0x11c>
 80005d6:	bf00      	nop

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005e2:	4b11      	ldr	r3, [pc, #68]	@ (8000628 <MX_DMA_Init+0x4c>)
 80005e4:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 80005e8:	4a0f      	ldr	r2, [pc, #60]	@ (8000628 <MX_DMA_Init+0x4c>)
 80005ea:	f043 0301 	orr.w	r3, r3, #1
 80005ee:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 80005f2:	4b0d      	ldr	r3, [pc, #52]	@ (8000628 <MX_DMA_Init+0x4c>)
 80005f4:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 80005f8:	f003 0301 	and.w	r3, r3, #1
 80005fc:	607b      	str	r3, [r7, #4]
 80005fe:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 6, 0);
 8000600:	2200      	movs	r2, #0
 8000602:	2106      	movs	r1, #6
 8000604:	200b      	movs	r0, #11
 8000606:	f000 fd63 	bl	80010d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800060a:	200b      	movs	r0, #11
 800060c:	f000 fd7a 	bl	8001104 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 6, 0);
 8000610:	2200      	movs	r2, #0
 8000612:	2106      	movs	r1, #6
 8000614:	200c      	movs	r0, #12
 8000616:	f000 fd5b 	bl	80010d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800061a:	200c      	movs	r0, #12
 800061c:	f000 fd72 	bl	8001104 <HAL_NVIC_EnableIRQ>

}
 8000620:	bf00      	nop
 8000622:	3708      	adds	r7, #8
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	58024400 	.word	0x58024400

0800062c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b088      	sub	sp, #32
 8000630:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000632:	f107 030c 	add.w	r3, r7, #12
 8000636:	2200      	movs	r2, #0
 8000638:	601a      	str	r2, [r3, #0]
 800063a:	605a      	str	r2, [r3, #4]
 800063c:	609a      	str	r2, [r3, #8]
 800063e:	60da      	str	r2, [r3, #12]
 8000640:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000642:	4b1b      	ldr	r3, [pc, #108]	@ (80006b0 <MX_GPIO_Init+0x84>)
 8000644:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000648:	4a19      	ldr	r2, [pc, #100]	@ (80006b0 <MX_GPIO_Init+0x84>)
 800064a:	f043 0302 	orr.w	r3, r3, #2
 800064e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000652:	4b17      	ldr	r3, [pc, #92]	@ (80006b0 <MX_GPIO_Init+0x84>)
 8000654:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000658:	f003 0302 	and.w	r3, r3, #2
 800065c:	60bb      	str	r3, [r7, #8]
 800065e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000660:	4b13      	ldr	r3, [pc, #76]	@ (80006b0 <MX_GPIO_Init+0x84>)
 8000662:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000666:	4a12      	ldr	r2, [pc, #72]	@ (80006b0 <MX_GPIO_Init+0x84>)
 8000668:	f043 0301 	orr.w	r3, r3, #1
 800066c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000670:	4b0f      	ldr	r3, [pc, #60]	@ (80006b0 <MX_GPIO_Init+0x84>)
 8000672:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000676:	f003 0301 	and.w	r3, r3, #1
 800067a:	607b      	str	r3, [r7, #4]
 800067c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = esp32i2cInterruptReqest_Pin;
 800067e:	2320      	movs	r3, #32
 8000680:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000682:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000686:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000688:	2300      	movs	r3, #0
 800068a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(esp32i2cInterruptReqest_GPIO_Port, &GPIO_InitStruct);
 800068c:	f107 030c 	add.w	r3, r7, #12
 8000690:	4619      	mov	r1, r3
 8000692:	4808      	ldr	r0, [pc, #32]	@ (80006b4 <MX_GPIO_Init+0x88>)
 8000694:	f002 fcc4 	bl	8003020 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000698:	2200      	movs	r2, #0
 800069a:	2105      	movs	r1, #5
 800069c:	2017      	movs	r0, #23
 800069e:	f000 fd17 	bl	80010d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80006a2:	2017      	movs	r0, #23
 80006a4:	f000 fd2e 	bl	8001104 <HAL_NVIC_EnableIRQ>

}
 80006a8:	bf00      	nop
 80006aa:	3720      	adds	r7, #32
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	58024400 	.word	0x58024400
 80006b4:	58020400 	.word	0x58020400

080006b8 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006bc:	4b1b      	ldr	r3, [pc, #108]	@ (800072c <MX_I2C1_Init+0x74>)
 80006be:	4a1c      	ldr	r2, [pc, #112]	@ (8000730 <MX_I2C1_Init+0x78>)
 80006c0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20B0CCFF;
 80006c2:	4b1a      	ldr	r3, [pc, #104]	@ (800072c <MX_I2C1_Init+0x74>)
 80006c4:	4a1b      	ldr	r2, [pc, #108]	@ (8000734 <MX_I2C1_Init+0x7c>)
 80006c6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80006c8:	4b18      	ldr	r3, [pc, #96]	@ (800072c <MX_I2C1_Init+0x74>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006ce:	4b17      	ldr	r3, [pc, #92]	@ (800072c <MX_I2C1_Init+0x74>)
 80006d0:	2201      	movs	r2, #1
 80006d2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006d4:	4b15      	ldr	r3, [pc, #84]	@ (800072c <MX_I2C1_Init+0x74>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80006da:	4b14      	ldr	r3, [pc, #80]	@ (800072c <MX_I2C1_Init+0x74>)
 80006dc:	2200      	movs	r2, #0
 80006de:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006e0:	4b12      	ldr	r3, [pc, #72]	@ (800072c <MX_I2C1_Init+0x74>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006e6:	4b11      	ldr	r3, [pc, #68]	@ (800072c <MX_I2C1_Init+0x74>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 80006ec:	4b0f      	ldr	r3, [pc, #60]	@ (800072c <MX_I2C1_Init+0x74>)
 80006ee:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80006f2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006f4:	480d      	ldr	r0, [pc, #52]	@ (800072c <MX_I2C1_Init+0x74>)
 80006f6:	f002 fe69 	bl	80033cc <HAL_I2C_Init>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000700:	f000 f98e 	bl	8000a20 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000704:	2100      	movs	r1, #0
 8000706:	4809      	ldr	r0, [pc, #36]	@ (800072c <MX_I2C1_Init+0x74>)
 8000708:	f003 fde9 	bl	80042de <HAL_I2CEx_ConfigAnalogFilter>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000712:	f000 f985 	bl	8000a20 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000716:	2100      	movs	r1, #0
 8000718:	4804      	ldr	r0, [pc, #16]	@ (800072c <MX_I2C1_Init+0x74>)
 800071a:	f003 fe2b 	bl	8004374 <HAL_I2CEx_ConfigDigitalFilter>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000724:	f000 f97c 	bl	8000a20 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000728:	bf00      	nop
 800072a:	bd80      	pop	{r7, pc}
 800072c:	2400002c 	.word	0x2400002c
 8000730:	40005400 	.word	0x40005400
 8000734:	20b0ccff 	.word	0x20b0ccff

08000738 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b0ba      	sub	sp, #232	@ 0xe8
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000740:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000744:	2200      	movs	r2, #0
 8000746:	601a      	str	r2, [r3, #0]
 8000748:	605a      	str	r2, [r3, #4]
 800074a:	609a      	str	r2, [r3, #8]
 800074c:	60da      	str	r2, [r3, #12]
 800074e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000750:	f107 0310 	add.w	r3, r7, #16
 8000754:	22c0      	movs	r2, #192	@ 0xc0
 8000756:	2100      	movs	r1, #0
 8000758:	4618      	mov	r0, r3
 800075a:	f008 f91f 	bl	800899c <memset>
  if(i2cHandle->Instance==I2C1)
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	4a5c      	ldr	r2, [pc, #368]	@ (80008d4 <HAL_I2C_MspInit+0x19c>)
 8000764:	4293      	cmp	r3, r2
 8000766:	f040 80b1 	bne.w	80008cc <HAL_I2C_MspInit+0x194>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800076a:	f04f 0208 	mov.w	r2, #8
 800076e:	f04f 0300 	mov.w	r3, #0
 8000772:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000776:	2300      	movs	r3, #0
 8000778:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800077c:	f107 0310 	add.w	r3, r7, #16
 8000780:	4618      	mov	r0, r3
 8000782:	f004 fe7d 	bl	8005480 <HAL_RCCEx_PeriphCLKConfig>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <HAL_I2C_MspInit+0x58>
    {
      Error_Handler();
 800078c:	f000 f948 	bl	8000a20 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000790:	4b51      	ldr	r3, [pc, #324]	@ (80008d8 <HAL_I2C_MspInit+0x1a0>)
 8000792:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000796:	4a50      	ldr	r2, [pc, #320]	@ (80008d8 <HAL_I2C_MspInit+0x1a0>)
 8000798:	f043 0302 	orr.w	r3, r3, #2
 800079c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80007a0:	4b4d      	ldr	r3, [pc, #308]	@ (80008d8 <HAL_I2C_MspInit+0x1a0>)
 80007a2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80007a6:	f003 0302 	and.w	r3, r3, #2
 80007aa:	60fb      	str	r3, [r7, #12]
 80007ac:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80007ae:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80007b2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007b6:	2312      	movs	r3, #18
 80007b8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007bc:	2300      	movs	r3, #0
 80007be:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c2:	2300      	movs	r3, #0
 80007c4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80007c8:	2304      	movs	r3, #4
 80007ca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007ce:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80007d2:	4619      	mov	r1, r3
 80007d4:	4841      	ldr	r0, [pc, #260]	@ (80008dc <HAL_I2C_MspInit+0x1a4>)
 80007d6:	f002 fc23 	bl	8003020 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80007da:	4b3f      	ldr	r3, [pc, #252]	@ (80008d8 <HAL_I2C_MspInit+0x1a0>)
 80007dc:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80007e0:	4a3d      	ldr	r2, [pc, #244]	@ (80008d8 <HAL_I2C_MspInit+0x1a0>)
 80007e2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80007e6:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 80007ea:	4b3b      	ldr	r3, [pc, #236]	@ (80008d8 <HAL_I2C_MspInit+0x1a0>)
 80007ec:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80007f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80007f4:	60bb      	str	r3, [r7, #8]
 80007f6:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 80007f8:	4b39      	ldr	r3, [pc, #228]	@ (80008e0 <HAL_I2C_MspInit+0x1a8>)
 80007fa:	4a3a      	ldr	r2, [pc, #232]	@ (80008e4 <HAL_I2C_MspInit+0x1ac>)
 80007fc:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 80007fe:	4b38      	ldr	r3, [pc, #224]	@ (80008e0 <HAL_I2C_MspInit+0x1a8>)
 8000800:	2221      	movs	r2, #33	@ 0x21
 8000802:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000804:	4b36      	ldr	r3, [pc, #216]	@ (80008e0 <HAL_I2C_MspInit+0x1a8>)
 8000806:	2200      	movs	r2, #0
 8000808:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800080a:	4b35      	ldr	r3, [pc, #212]	@ (80008e0 <HAL_I2C_MspInit+0x1a8>)
 800080c:	2200      	movs	r2, #0
 800080e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000810:	4b33      	ldr	r3, [pc, #204]	@ (80008e0 <HAL_I2C_MspInit+0x1a8>)
 8000812:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000816:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000818:	4b31      	ldr	r3, [pc, #196]	@ (80008e0 <HAL_I2C_MspInit+0x1a8>)
 800081a:	2200      	movs	r2, #0
 800081c:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800081e:	4b30      	ldr	r3, [pc, #192]	@ (80008e0 <HAL_I2C_MspInit+0x1a8>)
 8000820:	2200      	movs	r2, #0
 8000822:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8000824:	4b2e      	ldr	r3, [pc, #184]	@ (80008e0 <HAL_I2C_MspInit+0x1a8>)
 8000826:	2200      	movs	r2, #0
 8000828:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800082a:	4b2d      	ldr	r3, [pc, #180]	@ (80008e0 <HAL_I2C_MspInit+0x1a8>)
 800082c:	2200      	movs	r2, #0
 800082e:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000830:	4b2b      	ldr	r3, [pc, #172]	@ (80008e0 <HAL_I2C_MspInit+0x1a8>)
 8000832:	2200      	movs	r2, #0
 8000834:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8000836:	482a      	ldr	r0, [pc, #168]	@ (80008e0 <HAL_I2C_MspInit+0x1a8>)
 8000838:	f000 fc72 	bl	8001120 <HAL_DMA_Init>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <HAL_I2C_MspInit+0x10e>
    {
      Error_Handler();
 8000842:	f000 f8ed 	bl	8000a20 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	4a25      	ldr	r2, [pc, #148]	@ (80008e0 <HAL_I2C_MspInit+0x1a8>)
 800084a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800084c:	4a24      	ldr	r2, [pc, #144]	@ (80008e0 <HAL_I2C_MspInit+0x1a8>)
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream1;
 8000852:	4b25      	ldr	r3, [pc, #148]	@ (80008e8 <HAL_I2C_MspInit+0x1b0>)
 8000854:	4a25      	ldr	r2, [pc, #148]	@ (80008ec <HAL_I2C_MspInit+0x1b4>)
 8000856:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 8000858:	4b23      	ldr	r3, [pc, #140]	@ (80008e8 <HAL_I2C_MspInit+0x1b0>)
 800085a:	2222      	movs	r2, #34	@ 0x22
 800085c:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800085e:	4b22      	ldr	r3, [pc, #136]	@ (80008e8 <HAL_I2C_MspInit+0x1b0>)
 8000860:	2240      	movs	r2, #64	@ 0x40
 8000862:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000864:	4b20      	ldr	r3, [pc, #128]	@ (80008e8 <HAL_I2C_MspInit+0x1b0>)
 8000866:	2200      	movs	r2, #0
 8000868:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800086a:	4b1f      	ldr	r3, [pc, #124]	@ (80008e8 <HAL_I2C_MspInit+0x1b0>)
 800086c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000870:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000872:	4b1d      	ldr	r3, [pc, #116]	@ (80008e8 <HAL_I2C_MspInit+0x1b0>)
 8000874:	2200      	movs	r2, #0
 8000876:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000878:	4b1b      	ldr	r3, [pc, #108]	@ (80008e8 <HAL_I2C_MspInit+0x1b0>)
 800087a:	2200      	movs	r2, #0
 800087c:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800087e:	4b1a      	ldr	r3, [pc, #104]	@ (80008e8 <HAL_I2C_MspInit+0x1b0>)
 8000880:	2200      	movs	r2, #0
 8000882:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000884:	4b18      	ldr	r3, [pc, #96]	@ (80008e8 <HAL_I2C_MspInit+0x1b0>)
 8000886:	2200      	movs	r2, #0
 8000888:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800088a:	4b17      	ldr	r3, [pc, #92]	@ (80008e8 <HAL_I2C_MspInit+0x1b0>)
 800088c:	2200      	movs	r2, #0
 800088e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8000890:	4815      	ldr	r0, [pc, #84]	@ (80008e8 <HAL_I2C_MspInit+0x1b0>)
 8000892:	f000 fc45 	bl	8001120 <HAL_DMA_Init>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <HAL_I2C_MspInit+0x168>
    {
      Error_Handler();
 800089c:	f000 f8c0 	bl	8000a20 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	4a11      	ldr	r2, [pc, #68]	@ (80008e8 <HAL_I2C_MspInit+0x1b0>)
 80008a4:	639a      	str	r2, [r3, #56]	@ 0x38
 80008a6:	4a10      	ldr	r2, [pc, #64]	@ (80008e8 <HAL_I2C_MspInit+0x1b0>)
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80008ac:	2200      	movs	r2, #0
 80008ae:	2100      	movs	r1, #0
 80008b0:	201f      	movs	r0, #31
 80008b2:	f000 fc0d 	bl	80010d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80008b6:	201f      	movs	r0, #31
 80008b8:	f000 fc24 	bl	8001104 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80008bc:	2200      	movs	r2, #0
 80008be:	2100      	movs	r1, #0
 80008c0:	2020      	movs	r0, #32
 80008c2:	f000 fc05 	bl	80010d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80008c6:	2020      	movs	r0, #32
 80008c8:	f000 fc1c 	bl	8001104 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80008cc:	bf00      	nop
 80008ce:	37e8      	adds	r7, #232	@ 0xe8
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	40005400 	.word	0x40005400
 80008d8:	58024400 	.word	0x58024400
 80008dc:	58020400 	.word	0x58020400
 80008e0:	24000080 	.word	0x24000080
 80008e4:	40020010 	.word	0x40020010
 80008e8:	240000f8 	.word	0x240000f8
 80008ec:	40020028 	.word	0x40020028

080008f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008f4:	f000 fad8 	bl	8000ea8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008f8:	f000 f80a 	bl	8000910 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008fc:	f7ff fe96 	bl	800062c <MX_GPIO_Init>
  MX_DMA_Init();
 8000900:	f7ff fe6c 	bl	80005dc <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000904:	f000 f9f0 	bl	8000ce8 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8000908:	f7ff fed6 	bl	80006b8 <MX_I2C1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800090c:	bf00      	nop
 800090e:	e7fd      	b.n	800090c <main+0x1c>

08000910 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b09c      	sub	sp, #112	@ 0x70
 8000914:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000916:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800091a:	224c      	movs	r2, #76	@ 0x4c
 800091c:	2100      	movs	r1, #0
 800091e:	4618      	mov	r0, r3
 8000920:	f008 f83c 	bl	800899c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000924:	1d3b      	adds	r3, r7, #4
 8000926:	2220      	movs	r2, #32
 8000928:	2100      	movs	r1, #0
 800092a:	4618      	mov	r0, r3
 800092c:	f008 f836 	bl	800899c <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000930:	4b30      	ldr	r3, [pc, #192]	@ (80009f4 <SystemClock_Config+0xe4>)
 8000932:	f04f 32ff 	mov.w	r2, #4294967295
 8000936:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800093a:	2002      	movs	r0, #2
 800093c:	f003 fd66 	bl	800440c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000940:	2300      	movs	r3, #0
 8000942:	603b      	str	r3, [r7, #0]
 8000944:	4b2c      	ldr	r3, [pc, #176]	@ (80009f8 <SystemClock_Config+0xe8>)
 8000946:	699b      	ldr	r3, [r3, #24]
 8000948:	4a2b      	ldr	r2, [pc, #172]	@ (80009f8 <SystemClock_Config+0xe8>)
 800094a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800094e:	6193      	str	r3, [r2, #24]
 8000950:	4b29      	ldr	r3, [pc, #164]	@ (80009f8 <SystemClock_Config+0xe8>)
 8000952:	699b      	ldr	r3, [r3, #24]
 8000954:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000958:	603b      	str	r3, [r7, #0]
 800095a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800095c:	bf00      	nop
 800095e:	4b26      	ldr	r3, [pc, #152]	@ (80009f8 <SystemClock_Config+0xe8>)
 8000960:	699b      	ldr	r3, [r3, #24]
 8000962:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000966:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800096a:	d1f8      	bne.n	800095e <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800096c:	2302      	movs	r3, #2
 800096e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000970:	2301      	movs	r3, #1
 8000972:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8000974:	2340      	movs	r3, #64	@ 0x40
 8000976:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000978:	2302      	movs	r3, #2
 800097a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800097c:	2300      	movs	r3, #0
 800097e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000980:	2304      	movs	r3, #4
 8000982:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 35;
 8000984:	2323      	movs	r3, #35	@ 0x23
 8000986:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000988:	2302      	movs	r3, #2
 800098a:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800098c:	2302      	movs	r3, #2
 800098e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000990:	2302      	movs	r3, #2
 8000992:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000994:	230c      	movs	r3, #12
 8000996:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000998:	2300      	movs	r3, #0
 800099a:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800099c:	2300      	movs	r3, #0
 800099e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009a4:	4618      	mov	r0, r3
 80009a6:	f003 fd6b 	bl	8004480 <HAL_RCC_OscConfig>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80009b0:	f000 f836 	bl	8000a20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009b4:	233f      	movs	r3, #63	@ 0x3f
 80009b6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009b8:	2303      	movs	r3, #3
 80009ba:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80009bc:	2300      	movs	r3, #0
 80009be:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80009c0:	2300      	movs	r3, #0
 80009c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80009c4:	2340      	movs	r3, #64	@ 0x40
 80009c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80009c8:	2340      	movs	r3, #64	@ 0x40
 80009ca:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80009cc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80009d0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80009d2:	2340      	movs	r3, #64	@ 0x40
 80009d4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80009d6:	1d3b      	adds	r3, r7, #4
 80009d8:	2106      	movs	r1, #6
 80009da:	4618      	mov	r0, r3
 80009dc:	f004 f982 	bl	8004ce4 <HAL_RCC_ClockConfig>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <SystemClock_Config+0xda>
  {
    Error_Handler();
 80009e6:	f000 f81b 	bl	8000a20 <Error_Handler>
  }
}
 80009ea:	bf00      	nop
 80009ec:	3770      	adds	r7, #112	@ 0x70
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	58024400 	.word	0x58024400
 80009f8:	58024800 	.word	0x58024800

080009fc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a04      	ldr	r2, [pc, #16]	@ (8000a1c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d101      	bne.n	8000a12 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a0e:	f000 fa87 	bl	8000f20 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a12:	bf00      	nop
 8000a14:	3708      	adds	r7, #8
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	40010000 	.word	0x40010000

08000a20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a24:	b672      	cpsid	i
}
 8000a26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a28:	bf00      	nop
 8000a2a:	e7fd      	b.n	8000a28 <Error_Handler+0x8>

08000a2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b083      	sub	sp, #12
 8000a30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a32:	4b0a      	ldr	r3, [pc, #40]	@ (8000a5c <HAL_MspInit+0x30>)
 8000a34:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000a38:	4a08      	ldr	r2, [pc, #32]	@ (8000a5c <HAL_MspInit+0x30>)
 8000a3a:	f043 0302 	orr.w	r3, r3, #2
 8000a3e:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8000a42:	4b06      	ldr	r3, [pc, #24]	@ (8000a5c <HAL_MspInit+0x30>)
 8000a44:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000a48:	f003 0302 	and.w	r3, r3, #2
 8000a4c:	607b      	str	r3, [r7, #4]
 8000a4e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a50:	bf00      	nop
 8000a52:	370c      	adds	r7, #12
 8000a54:	46bd      	mov	sp, r7
 8000a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5a:	4770      	bx	lr
 8000a5c:	58024400 	.word	0x58024400

08000a60 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b08e      	sub	sp, #56	@ 0x38
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	2b0f      	cmp	r3, #15
 8000a6c:	d844      	bhi.n	8000af8 <HAL_InitTick+0x98>
  {
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0U);
 8000a6e:	2200      	movs	r2, #0
 8000a70:	6879      	ldr	r1, [r7, #4]
 8000a72:	2019      	movs	r0, #25
 8000a74:	f000 fb2c 	bl	80010d0 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000a78:	2019      	movs	r0, #25
 8000a7a:	f000 fb43 	bl	8001104 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8000a7e:	4a24      	ldr	r2, [pc, #144]	@ (8000b10 <HAL_InitTick+0xb0>)
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000a84:	4b23      	ldr	r3, [pc, #140]	@ (8000b14 <HAL_InitTick+0xb4>)
 8000a86:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8000a8a:	4a22      	ldr	r2, [pc, #136]	@ (8000b14 <HAL_InitTick+0xb4>)
 8000a8c:	f043 0301 	orr.w	r3, r3, #1
 8000a90:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 8000a94:	4b1f      	ldr	r3, [pc, #124]	@ (8000b14 <HAL_InitTick+0xb4>)
 8000a96:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8000a9a:	f003 0301 	and.w	r3, r3, #1
 8000a9e:	60bb      	str	r3, [r7, #8]
 8000aa0:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000aa2:	f107 020c 	add.w	r2, r7, #12
 8000aa6:	f107 0310 	add.w	r3, r7, #16
 8000aaa:	4611      	mov	r1, r2
 8000aac:	4618      	mov	r0, r3
 8000aae:	f004 fca5 	bl	80053fc <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000ab2:	f004 fc8d 	bl	80053d0 <HAL_RCC_GetPCLK2Freq>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	005b      	lsls	r3, r3, #1
 8000aba:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000abc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000abe:	4a16      	ldr	r2, [pc, #88]	@ (8000b18 <HAL_InitTick+0xb8>)
 8000ac0:	fba2 2303 	umull	r2, r3, r2, r3
 8000ac4:	0c9b      	lsrs	r3, r3, #18
 8000ac6:	3b01      	subs	r3, #1
 8000ac8:	633b      	str	r3, [r7, #48]	@ 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000aca:	4b14      	ldr	r3, [pc, #80]	@ (8000b1c <HAL_InitTick+0xbc>)
 8000acc:	4a14      	ldr	r2, [pc, #80]	@ (8000b20 <HAL_InitTick+0xc0>)
 8000ace:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000ad0:	4b12      	ldr	r3, [pc, #72]	@ (8000b1c <HAL_InitTick+0xbc>)
 8000ad2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000ad6:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000ad8:	4a10      	ldr	r2, [pc, #64]	@ (8000b1c <HAL_InitTick+0xbc>)
 8000ada:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000adc:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000ade:	4b0f      	ldr	r3, [pc, #60]	@ (8000b1c <HAL_InitTick+0xbc>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ae4:	4b0d      	ldr	r3, [pc, #52]	@ (8000b1c <HAL_InitTick+0xbc>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000aea:	480c      	ldr	r0, [pc, #48]	@ (8000b1c <HAL_InitTick+0xbc>)
 8000aec:	f006 faa8 	bl	8007040 <HAL_TIM_Base_Init>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d107      	bne.n	8000b06 <HAL_InitTick+0xa6>
 8000af6:	e001      	b.n	8000afc <HAL_InitTick+0x9c>
    return HAL_ERROR;
 8000af8:	2301      	movs	r3, #1
 8000afa:	e005      	b.n	8000b08 <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000afc:	4807      	ldr	r0, [pc, #28]	@ (8000b1c <HAL_InitTick+0xbc>)
 8000afe:	f006 fb01 	bl	8007104 <HAL_TIM_Base_Start_IT>
 8000b02:	4603      	mov	r3, r0
 8000b04:	e000      	b.n	8000b08 <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 8000b06:	2301      	movs	r3, #1
}
 8000b08:	4618      	mov	r0, r3
 8000b0a:	3738      	adds	r7, #56	@ 0x38
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	24000008 	.word	0x24000008
 8000b14:	58024400 	.word	0x58024400
 8000b18:	431bde83 	.word	0x431bde83
 8000b1c:	24000170 	.word	0x24000170
 8000b20:	40010000 	.word	0x40010000

08000b24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b28:	bf00      	nop
 8000b2a:	e7fd      	b.n	8000b28 <NMI_Handler+0x4>

08000b2c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b30:	bf00      	nop
 8000b32:	e7fd      	b.n	8000b30 <HardFault_Handler+0x4>

08000b34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b38:	bf00      	nop
 8000b3a:	e7fd      	b.n	8000b38 <MemManage_Handler+0x4>

08000b3c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b40:	bf00      	nop
 8000b42:	e7fd      	b.n	8000b40 <BusFault_Handler+0x4>

08000b44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b48:	bf00      	nop
 8000b4a:	e7fd      	b.n	8000b48 <UsageFault_Handler+0x4>

08000b4c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b50:	bf00      	nop
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr

08000b5a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b5a:	b480      	push	{r7}
 8000b5c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b5e:	bf00      	nop
 8000b60:	46bd      	mov	sp, r7
 8000b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b66:	4770      	bx	lr

08000b68 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b6c:	bf00      	nop
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr

08000b76 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b76:	b480      	push	{r7}
 8000b78:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b7a:	bf00      	nop
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr

08000b84 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8000b88:	4802      	ldr	r0, [pc, #8]	@ (8000b94 <DMA1_Stream0_IRQHandler+0x10>)
 8000b8a:	f001 f89d 	bl	8001cc8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000b8e:	bf00      	nop
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	24000080 	.word	0x24000080

08000b98 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8000b9c:	4802      	ldr	r0, [pc, #8]	@ (8000ba8 <DMA1_Stream1_IRQHandler+0x10>)
 8000b9e:	f001 f893 	bl	8001cc8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8000ba2:	bf00      	nop
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	240000f8 	.word	0x240000f8

08000bac <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(esp32i2cInterruptReqest_Pin);
 8000bb0:	2020      	movs	r0, #32
 8000bb2:	f002 fbe5 	bl	8003380 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000bb6:	bf00      	nop
 8000bb8:	bd80      	pop	{r7, pc}
	...

08000bbc <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000bc0:	4802      	ldr	r0, [pc, #8]	@ (8000bcc <TIM1_UP_IRQHandler+0x10>)
 8000bc2:	f006 fb17 	bl	80071f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000bc6:	bf00      	nop
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	24000170 	.word	0x24000170

08000bd0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000bd4:	4802      	ldr	r0, [pc, #8]	@ (8000be0 <I2C1_EV_IRQHandler+0x10>)
 8000bd6:	f002 fc95 	bl	8003504 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000bda:	bf00      	nop
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	2400002c 	.word	0x2400002c

08000be4 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000be8:	4802      	ldr	r0, [pc, #8]	@ (8000bf4 <I2C1_ER_IRQHandler+0x10>)
 8000bea:	f002 fca5 	bl	8003538 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000bee:	bf00      	nop
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	2400002c 	.word	0x2400002c

08000bf8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000bfc:	4b32      	ldr	r3, [pc, #200]	@ (8000cc8 <SystemInit+0xd0>)
 8000bfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c02:	4a31      	ldr	r2, [pc, #196]	@ (8000cc8 <SystemInit+0xd0>)
 8000c04:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c08:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000c0c:	4b2f      	ldr	r3, [pc, #188]	@ (8000ccc <SystemInit+0xd4>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	f003 030f 	and.w	r3, r3, #15
 8000c14:	2b02      	cmp	r3, #2
 8000c16:	d807      	bhi.n	8000c28 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000c18:	4b2c      	ldr	r3, [pc, #176]	@ (8000ccc <SystemInit+0xd4>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	f023 030f 	bic.w	r3, r3, #15
 8000c20:	4a2a      	ldr	r2, [pc, #168]	@ (8000ccc <SystemInit+0xd4>)
 8000c22:	f043 0303 	orr.w	r3, r3, #3
 8000c26:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000c28:	4b29      	ldr	r3, [pc, #164]	@ (8000cd0 <SystemInit+0xd8>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4a28      	ldr	r2, [pc, #160]	@ (8000cd0 <SystemInit+0xd8>)
 8000c2e:	f043 0301 	orr.w	r3, r3, #1
 8000c32:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000c34:	4b26      	ldr	r3, [pc, #152]	@ (8000cd0 <SystemInit+0xd8>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000c3a:	4b25      	ldr	r3, [pc, #148]	@ (8000cd0 <SystemInit+0xd8>)
 8000c3c:	681a      	ldr	r2, [r3, #0]
 8000c3e:	4924      	ldr	r1, [pc, #144]	@ (8000cd0 <SystemInit+0xd8>)
 8000c40:	4b24      	ldr	r3, [pc, #144]	@ (8000cd4 <SystemInit+0xdc>)
 8000c42:	4013      	ands	r3, r2
 8000c44:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000c46:	4b21      	ldr	r3, [pc, #132]	@ (8000ccc <SystemInit+0xd4>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	f003 030c 	and.w	r3, r3, #12
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d007      	beq.n	8000c62 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000c52:	4b1e      	ldr	r3, [pc, #120]	@ (8000ccc <SystemInit+0xd4>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	f023 030f 	bic.w	r3, r3, #15
 8000c5a:	4a1c      	ldr	r2, [pc, #112]	@ (8000ccc <SystemInit+0xd4>)
 8000c5c:	f043 0303 	orr.w	r3, r3, #3
 8000c60:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8000c62:	4b1b      	ldr	r3, [pc, #108]	@ (8000cd0 <SystemInit+0xd8>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8000c68:	4b19      	ldr	r3, [pc, #100]	@ (8000cd0 <SystemInit+0xd8>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8000c6e:	4b18      	ldr	r3, [pc, #96]	@ (8000cd0 <SystemInit+0xd8>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000c74:	4b16      	ldr	r3, [pc, #88]	@ (8000cd0 <SystemInit+0xd8>)
 8000c76:	4a18      	ldr	r2, [pc, #96]	@ (8000cd8 <SystemInit+0xe0>)
 8000c78:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000c7a:	4b15      	ldr	r3, [pc, #84]	@ (8000cd0 <SystemInit+0xd8>)
 8000c7c:	4a17      	ldr	r2, [pc, #92]	@ (8000cdc <SystemInit+0xe4>)
 8000c7e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000c80:	4b13      	ldr	r3, [pc, #76]	@ (8000cd0 <SystemInit+0xd8>)
 8000c82:	4a17      	ldr	r2, [pc, #92]	@ (8000ce0 <SystemInit+0xe8>)
 8000c84:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000c86:	4b12      	ldr	r3, [pc, #72]	@ (8000cd0 <SystemInit+0xd8>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000c8c:	4b10      	ldr	r3, [pc, #64]	@ (8000cd0 <SystemInit+0xd8>)
 8000c8e:	4a14      	ldr	r2, [pc, #80]	@ (8000ce0 <SystemInit+0xe8>)
 8000c90:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000c92:	4b0f      	ldr	r3, [pc, #60]	@ (8000cd0 <SystemInit+0xd8>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000c98:	4b0d      	ldr	r3, [pc, #52]	@ (8000cd0 <SystemInit+0xd8>)
 8000c9a:	4a11      	ldr	r2, [pc, #68]	@ (8000ce0 <SystemInit+0xe8>)
 8000c9c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000c9e:	4b0c      	ldr	r3, [pc, #48]	@ (8000cd0 <SystemInit+0xd8>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000ca4:	4b0a      	ldr	r3, [pc, #40]	@ (8000cd0 <SystemInit+0xd8>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a09      	ldr	r2, [pc, #36]	@ (8000cd0 <SystemInit+0xd8>)
 8000caa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000cae:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000cb0:	4b07      	ldr	r3, [pc, #28]	@ (8000cd0 <SystemInit+0xd8>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000cb6:	4b0b      	ldr	r3, [pc, #44]	@ (8000ce4 <SystemInit+0xec>)
 8000cb8:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000cbc:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000cbe:	bf00      	nop
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr
 8000cc8:	e000ed00 	.word	0xe000ed00
 8000ccc:	52002000 	.word	0x52002000
 8000cd0:	58024400 	.word	0x58024400
 8000cd4:	eaf6ed7f 	.word	0xeaf6ed7f
 8000cd8:	02020200 	.word	0x02020200
 8000cdc:	01ff0000 	.word	0x01ff0000
 8000ce0:	01010280 	.word	0x01010280
 8000ce4:	52004000 	.word	0x52004000

08000ce8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000cec:	4b22      	ldr	r3, [pc, #136]	@ (8000d78 <MX_USART1_UART_Init+0x90>)
 8000cee:	4a23      	ldr	r2, [pc, #140]	@ (8000d7c <MX_USART1_UART_Init+0x94>)
 8000cf0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000cf2:	4b21      	ldr	r3, [pc, #132]	@ (8000d78 <MX_USART1_UART_Init+0x90>)
 8000cf4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000cf8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000cfa:	4b1f      	ldr	r3, [pc, #124]	@ (8000d78 <MX_USART1_UART_Init+0x90>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d00:	4b1d      	ldr	r3, [pc, #116]	@ (8000d78 <MX_USART1_UART_Init+0x90>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d06:	4b1c      	ldr	r3, [pc, #112]	@ (8000d78 <MX_USART1_UART_Init+0x90>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d0c:	4b1a      	ldr	r3, [pc, #104]	@ (8000d78 <MX_USART1_UART_Init+0x90>)
 8000d0e:	220c      	movs	r2, #12
 8000d10:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d12:	4b19      	ldr	r3, [pc, #100]	@ (8000d78 <MX_USART1_UART_Init+0x90>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d18:	4b17      	ldr	r3, [pc, #92]	@ (8000d78 <MX_USART1_UART_Init+0x90>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d1e:	4b16      	ldr	r3, [pc, #88]	@ (8000d78 <MX_USART1_UART_Init+0x90>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d24:	4b14      	ldr	r3, [pc, #80]	@ (8000d78 <MX_USART1_UART_Init+0x90>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d2a:	4b13      	ldr	r3, [pc, #76]	@ (8000d78 <MX_USART1_UART_Init+0x90>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d30:	4811      	ldr	r0, [pc, #68]	@ (8000d78 <MX_USART1_UART_Init+0x90>)
 8000d32:	f006 fc53 	bl	80075dc <HAL_UART_Init>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d001      	beq.n	8000d40 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000d3c:	f7ff fe70 	bl	8000a20 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d40:	2100      	movs	r1, #0
 8000d42:	480d      	ldr	r0, [pc, #52]	@ (8000d78 <MX_USART1_UART_Init+0x90>)
 8000d44:	f007 fd5f 	bl	8008806 <HAL_UARTEx_SetTxFifoThreshold>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000d4e:	f7ff fe67 	bl	8000a20 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d52:	2100      	movs	r1, #0
 8000d54:	4808      	ldr	r0, [pc, #32]	@ (8000d78 <MX_USART1_UART_Init+0x90>)
 8000d56:	f007 fd94 	bl	8008882 <HAL_UARTEx_SetRxFifoThreshold>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d001      	beq.n	8000d64 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000d60:	f7ff fe5e 	bl	8000a20 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000d64:	4804      	ldr	r0, [pc, #16]	@ (8000d78 <MX_USART1_UART_Init+0x90>)
 8000d66:	f007 fd15 	bl	8008794 <HAL_UARTEx_DisableFifoMode>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d001      	beq.n	8000d74 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000d70:	f7ff fe56 	bl	8000a20 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d74:	bf00      	nop
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	240001bc 	.word	0x240001bc
 8000d7c:	40011000 	.word	0x40011000

08000d80 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b0ba      	sub	sp, #232	@ 0xe8
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d88:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	601a      	str	r2, [r3, #0]
 8000d90:	605a      	str	r2, [r3, #4]
 8000d92:	609a      	str	r2, [r3, #8]
 8000d94:	60da      	str	r2, [r3, #12]
 8000d96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d98:	f107 0310 	add.w	r3, r7, #16
 8000d9c:	22c0      	movs	r2, #192	@ 0xc0
 8000d9e:	2100      	movs	r1, #0
 8000da0:	4618      	mov	r0, r3
 8000da2:	f007 fdfb 	bl	800899c <memset>
  if(uartHandle->Instance==USART1)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	4a27      	ldr	r2, [pc, #156]	@ (8000e48 <HAL_UART_MspInit+0xc8>)
 8000dac:	4293      	cmp	r3, r2
 8000dae:	d146      	bne.n	8000e3e <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000db0:	f04f 0201 	mov.w	r2, #1
 8000db4:	f04f 0300 	mov.w	r3, #0
 8000db8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dc2:	f107 0310 	add.w	r3, r7, #16
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f004 fb5a 	bl	8005480 <HAL_RCCEx_PeriphCLKConfig>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000dd2:	f7ff fe25 	bl	8000a20 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000dd6:	4b1d      	ldr	r3, [pc, #116]	@ (8000e4c <HAL_UART_MspInit+0xcc>)
 8000dd8:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8000ddc:	4a1b      	ldr	r2, [pc, #108]	@ (8000e4c <HAL_UART_MspInit+0xcc>)
 8000dde:	f043 0310 	orr.w	r3, r3, #16
 8000de2:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 8000de6:	4b19      	ldr	r3, [pc, #100]	@ (8000e4c <HAL_UART_MspInit+0xcc>)
 8000de8:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8000dec:	f003 0310 	and.w	r3, r3, #16
 8000df0:	60fb      	str	r3, [r7, #12]
 8000df2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000df4:	4b15      	ldr	r3, [pc, #84]	@ (8000e4c <HAL_UART_MspInit+0xcc>)
 8000df6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000dfa:	4a14      	ldr	r2, [pc, #80]	@ (8000e4c <HAL_UART_MspInit+0xcc>)
 8000dfc:	f043 0302 	orr.w	r3, r3, #2
 8000e00:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000e04:	4b11      	ldr	r3, [pc, #68]	@ (8000e4c <HAL_UART_MspInit+0xcc>)
 8000e06:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000e0a:	f003 0302 	and.w	r3, r3, #2
 8000e0e:	60bb      	str	r3, [r7, #8]
 8000e10:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = dbg_UART_TX_Pin|dbg_UART_RX_Pin;
 8000e12:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000e16:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e1a:	2302      	movs	r3, #2
 8000e1c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e20:	2300      	movs	r3, #0
 8000e22:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e26:	2300      	movs	r3, #0
 8000e28:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8000e2c:	2304      	movs	r3, #4
 8000e2e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e32:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000e36:	4619      	mov	r1, r3
 8000e38:	4805      	ldr	r0, [pc, #20]	@ (8000e50 <HAL_UART_MspInit+0xd0>)
 8000e3a:	f002 f8f1 	bl	8003020 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000e3e:	bf00      	nop
 8000e40:	37e8      	adds	r7, #232	@ 0xe8
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	40011000 	.word	0x40011000
 8000e4c:	58024400 	.word	0x58024400
 8000e50:	58020400 	.word	0x58020400

08000e54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000e54:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e8c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e58:	f7ff fece 	bl	8000bf8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e5c:	480c      	ldr	r0, [pc, #48]	@ (8000e90 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e5e:	490d      	ldr	r1, [pc, #52]	@ (8000e94 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e60:	4a0d      	ldr	r2, [pc, #52]	@ (8000e98 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e64:	e002      	b.n	8000e6c <LoopCopyDataInit>

08000e66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e6a:	3304      	adds	r3, #4

08000e6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e70:	d3f9      	bcc.n	8000e66 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e72:	4a0a      	ldr	r2, [pc, #40]	@ (8000e9c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e74:	4c0a      	ldr	r4, [pc, #40]	@ (8000ea0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e78:	e001      	b.n	8000e7e <LoopFillZerobss>

08000e7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e7c:	3204      	adds	r2, #4

08000e7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e80:	d3fb      	bcc.n	8000e7a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e82:	f007 fd93 	bl	80089ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e86:	f7ff fd33 	bl	80008f0 <main>
  bx  lr
 8000e8a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e8c:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8000e90:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000e94:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000e98:	08008a5c 	.word	0x08008a5c
  ldr r2, =_sbss
 8000e9c:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000ea0:	24000254 	.word	0x24000254

08000ea4 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ea4:	e7fe      	b.n	8000ea4 <ADC_IRQHandler>
	...

08000ea8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eae:	2003      	movs	r0, #3
 8000eb0:	f000 f903 	bl	80010ba <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8000eb4:	f004 f8cc 	bl	8005050 <HAL_RCC_GetSysClockFreq>
 8000eb8:	4602      	mov	r2, r0
 8000eba:	4b15      	ldr	r3, [pc, #84]	@ (8000f10 <HAL_Init+0x68>)
 8000ebc:	699b      	ldr	r3, [r3, #24]
 8000ebe:	0a1b      	lsrs	r3, r3, #8
 8000ec0:	f003 030f 	and.w	r3, r3, #15
 8000ec4:	4913      	ldr	r1, [pc, #76]	@ (8000f14 <HAL_Init+0x6c>)
 8000ec6:	5ccb      	ldrb	r3, [r1, r3]
 8000ec8:	f003 031f 	and.w	r3, r3, #31
 8000ecc:	fa22 f303 	lsr.w	r3, r2, r3
 8000ed0:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8000ed2:	4b0f      	ldr	r3, [pc, #60]	@ (8000f10 <HAL_Init+0x68>)
 8000ed4:	699b      	ldr	r3, [r3, #24]
 8000ed6:	f003 030f 	and.w	r3, r3, #15
 8000eda:	4a0e      	ldr	r2, [pc, #56]	@ (8000f14 <HAL_Init+0x6c>)
 8000edc:	5cd3      	ldrb	r3, [r2, r3]
 8000ede:	f003 031f 	and.w	r3, r3, #31
 8000ee2:	687a      	ldr	r2, [r7, #4]
 8000ee4:	fa22 f303 	lsr.w	r3, r2, r3
 8000ee8:	4a0b      	ldr	r2, [pc, #44]	@ (8000f18 <HAL_Init+0x70>)
 8000eea:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000eec:	4a0b      	ldr	r2, [pc, #44]	@ (8000f1c <HAL_Init+0x74>)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ef2:	200f      	movs	r0, #15
 8000ef4:	f7ff fdb4 	bl	8000a60 <HAL_InitTick>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000efe:	2301      	movs	r3, #1
 8000f00:	e002      	b.n	8000f08 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000f02:	f7ff fd93 	bl	8000a2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f06:	2300      	movs	r3, #0
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	3708      	adds	r7, #8
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	58024400 	.word	0x58024400
 8000f14:	08008a0c 	.word	0x08008a0c
 8000f18:	24000004 	.word	0x24000004
 8000f1c:	24000000 	.word	0x24000000

08000f20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f24:	4b06      	ldr	r3, [pc, #24]	@ (8000f40 <HAL_IncTick+0x20>)
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	461a      	mov	r2, r3
 8000f2a:	4b06      	ldr	r3, [pc, #24]	@ (8000f44 <HAL_IncTick+0x24>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4413      	add	r3, r2
 8000f30:	4a04      	ldr	r2, [pc, #16]	@ (8000f44 <HAL_IncTick+0x24>)
 8000f32:	6013      	str	r3, [r2, #0]
}
 8000f34:	bf00      	nop
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	2400000c 	.word	0x2400000c
 8000f44:	24000250 	.word	0x24000250

08000f48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f4c:	4b03      	ldr	r3, [pc, #12]	@ (8000f5c <HAL_GetTick+0x14>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	24000250 	.word	0x24000250

08000f60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b085      	sub	sp, #20
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	f003 0307 	and.w	r3, r3, #7
 8000f6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f70:	4b0b      	ldr	r3, [pc, #44]	@ (8000fa0 <__NVIC_SetPriorityGrouping+0x40>)
 8000f72:	68db      	ldr	r3, [r3, #12]
 8000f74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f76:	68ba      	ldr	r2, [r7, #8]
 8000f78:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f84:	68bb      	ldr	r3, [r7, #8]
 8000f86:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000f88:	4b06      	ldr	r3, [pc, #24]	@ (8000fa4 <__NVIC_SetPriorityGrouping+0x44>)
 8000f8a:	4313      	orrs	r3, r2
 8000f8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f8e:	4a04      	ldr	r2, [pc, #16]	@ (8000fa0 <__NVIC_SetPriorityGrouping+0x40>)
 8000f90:	68bb      	ldr	r3, [r7, #8]
 8000f92:	60d3      	str	r3, [r2, #12]
}
 8000f94:	bf00      	nop
 8000f96:	3714      	adds	r7, #20
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr
 8000fa0:	e000ed00 	.word	0xe000ed00
 8000fa4:	05fa0000 	.word	0x05fa0000

08000fa8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fac:	4b04      	ldr	r3, [pc, #16]	@ (8000fc0 <__NVIC_GetPriorityGrouping+0x18>)
 8000fae:	68db      	ldr	r3, [r3, #12]
 8000fb0:	0a1b      	lsrs	r3, r3, #8
 8000fb2:	f003 0307 	and.w	r3, r3, #7
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr
 8000fc0:	e000ed00 	.word	0xe000ed00

08000fc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	4603      	mov	r3, r0
 8000fcc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000fce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	db0b      	blt.n	8000fee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fd6:	88fb      	ldrh	r3, [r7, #6]
 8000fd8:	f003 021f 	and.w	r2, r3, #31
 8000fdc:	4907      	ldr	r1, [pc, #28]	@ (8000ffc <__NVIC_EnableIRQ+0x38>)
 8000fde:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fe2:	095b      	lsrs	r3, r3, #5
 8000fe4:	2001      	movs	r0, #1
 8000fe6:	fa00 f202 	lsl.w	r2, r0, r2
 8000fea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000fee:	bf00      	nop
 8000ff0:	370c      	adds	r7, #12
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	e000e100 	.word	0xe000e100

08001000 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001000:	b480      	push	{r7}
 8001002:	b083      	sub	sp, #12
 8001004:	af00      	add	r7, sp, #0
 8001006:	4603      	mov	r3, r0
 8001008:	6039      	str	r1, [r7, #0]
 800100a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800100c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001010:	2b00      	cmp	r3, #0
 8001012:	db0a      	blt.n	800102a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	b2da      	uxtb	r2, r3
 8001018:	490c      	ldr	r1, [pc, #48]	@ (800104c <__NVIC_SetPriority+0x4c>)
 800101a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800101e:	0112      	lsls	r2, r2, #4
 8001020:	b2d2      	uxtb	r2, r2
 8001022:	440b      	add	r3, r1
 8001024:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001028:	e00a      	b.n	8001040 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	b2da      	uxtb	r2, r3
 800102e:	4908      	ldr	r1, [pc, #32]	@ (8001050 <__NVIC_SetPriority+0x50>)
 8001030:	88fb      	ldrh	r3, [r7, #6]
 8001032:	f003 030f 	and.w	r3, r3, #15
 8001036:	3b04      	subs	r3, #4
 8001038:	0112      	lsls	r2, r2, #4
 800103a:	b2d2      	uxtb	r2, r2
 800103c:	440b      	add	r3, r1
 800103e:	761a      	strb	r2, [r3, #24]
}
 8001040:	bf00      	nop
 8001042:	370c      	adds	r7, #12
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr
 800104c:	e000e100 	.word	0xe000e100
 8001050:	e000ed00 	.word	0xe000ed00

08001054 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001054:	b480      	push	{r7}
 8001056:	b089      	sub	sp, #36	@ 0x24
 8001058:	af00      	add	r7, sp, #0
 800105a:	60f8      	str	r0, [r7, #12]
 800105c:	60b9      	str	r1, [r7, #8]
 800105e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	f003 0307 	and.w	r3, r3, #7
 8001066:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001068:	69fb      	ldr	r3, [r7, #28]
 800106a:	f1c3 0307 	rsb	r3, r3, #7
 800106e:	2b04      	cmp	r3, #4
 8001070:	bf28      	it	cs
 8001072:	2304      	movcs	r3, #4
 8001074:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	3304      	adds	r3, #4
 800107a:	2b06      	cmp	r3, #6
 800107c:	d902      	bls.n	8001084 <NVIC_EncodePriority+0x30>
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	3b03      	subs	r3, #3
 8001082:	e000      	b.n	8001086 <NVIC_EncodePriority+0x32>
 8001084:	2300      	movs	r3, #0
 8001086:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001088:	f04f 32ff 	mov.w	r2, #4294967295
 800108c:	69bb      	ldr	r3, [r7, #24]
 800108e:	fa02 f303 	lsl.w	r3, r2, r3
 8001092:	43da      	mvns	r2, r3
 8001094:	68bb      	ldr	r3, [r7, #8]
 8001096:	401a      	ands	r2, r3
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800109c:	f04f 31ff 	mov.w	r1, #4294967295
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	fa01 f303 	lsl.w	r3, r1, r3
 80010a6:	43d9      	mvns	r1, r3
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010ac:	4313      	orrs	r3, r2
         );
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3724      	adds	r7, #36	@ 0x24
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr

080010ba <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010ba:	b580      	push	{r7, lr}
 80010bc:	b082      	sub	sp, #8
 80010be:	af00      	add	r7, sp, #0
 80010c0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010c2:	6878      	ldr	r0, [r7, #4]
 80010c4:	f7ff ff4c 	bl	8000f60 <__NVIC_SetPriorityGrouping>
}
 80010c8:	bf00      	nop
 80010ca:	3708      	adds	r7, #8
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}

080010d0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b086      	sub	sp, #24
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	4603      	mov	r3, r0
 80010d8:	60b9      	str	r1, [r7, #8]
 80010da:	607a      	str	r2, [r7, #4]
 80010dc:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80010de:	f7ff ff63 	bl	8000fa8 <__NVIC_GetPriorityGrouping>
 80010e2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010e4:	687a      	ldr	r2, [r7, #4]
 80010e6:	68b9      	ldr	r1, [r7, #8]
 80010e8:	6978      	ldr	r0, [r7, #20]
 80010ea:	f7ff ffb3 	bl	8001054 <NVIC_EncodePriority>
 80010ee:	4602      	mov	r2, r0
 80010f0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80010f4:	4611      	mov	r1, r2
 80010f6:	4618      	mov	r0, r3
 80010f8:	f7ff ff82 	bl	8001000 <__NVIC_SetPriority>
}
 80010fc:	bf00      	nop
 80010fe:	3718      	adds	r7, #24
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}

08001104 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	4603      	mov	r3, r0
 800110c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800110e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001112:	4618      	mov	r0, r3
 8001114:	f7ff ff56 	bl	8000fc4 <__NVIC_EnableIRQ>
}
 8001118:	bf00      	nop
 800111a:	3708      	adds	r7, #8
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}

08001120 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b086      	sub	sp, #24
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001128:	f7ff ff0e 	bl	8000f48 <HAL_GetTick>
 800112c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d101      	bne.n	8001138 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001134:	2301      	movs	r3, #1
 8001136:	e37d      	b.n	8001834 <HAL_DMA_Init+0x714>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a66      	ldr	r2, [pc, #408]	@ (80012d8 <HAL_DMA_Init+0x1b8>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d04a      	beq.n	80011d8 <HAL_DMA_Init+0xb8>
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4a65      	ldr	r2, [pc, #404]	@ (80012dc <HAL_DMA_Init+0x1bc>)
 8001148:	4293      	cmp	r3, r2
 800114a:	d045      	beq.n	80011d8 <HAL_DMA_Init+0xb8>
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a63      	ldr	r2, [pc, #396]	@ (80012e0 <HAL_DMA_Init+0x1c0>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d040      	beq.n	80011d8 <HAL_DMA_Init+0xb8>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4a62      	ldr	r2, [pc, #392]	@ (80012e4 <HAL_DMA_Init+0x1c4>)
 800115c:	4293      	cmp	r3, r2
 800115e:	d03b      	beq.n	80011d8 <HAL_DMA_Init+0xb8>
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a60      	ldr	r2, [pc, #384]	@ (80012e8 <HAL_DMA_Init+0x1c8>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d036      	beq.n	80011d8 <HAL_DMA_Init+0xb8>
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4a5f      	ldr	r2, [pc, #380]	@ (80012ec <HAL_DMA_Init+0x1cc>)
 8001170:	4293      	cmp	r3, r2
 8001172:	d031      	beq.n	80011d8 <HAL_DMA_Init+0xb8>
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a5d      	ldr	r2, [pc, #372]	@ (80012f0 <HAL_DMA_Init+0x1d0>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d02c      	beq.n	80011d8 <HAL_DMA_Init+0xb8>
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4a5c      	ldr	r2, [pc, #368]	@ (80012f4 <HAL_DMA_Init+0x1d4>)
 8001184:	4293      	cmp	r3, r2
 8001186:	d027      	beq.n	80011d8 <HAL_DMA_Init+0xb8>
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a5a      	ldr	r2, [pc, #360]	@ (80012f8 <HAL_DMA_Init+0x1d8>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d022      	beq.n	80011d8 <HAL_DMA_Init+0xb8>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4a59      	ldr	r2, [pc, #356]	@ (80012fc <HAL_DMA_Init+0x1dc>)
 8001198:	4293      	cmp	r3, r2
 800119a:	d01d      	beq.n	80011d8 <HAL_DMA_Init+0xb8>
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a57      	ldr	r2, [pc, #348]	@ (8001300 <HAL_DMA_Init+0x1e0>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d018      	beq.n	80011d8 <HAL_DMA_Init+0xb8>
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4a56      	ldr	r2, [pc, #344]	@ (8001304 <HAL_DMA_Init+0x1e4>)
 80011ac:	4293      	cmp	r3, r2
 80011ae:	d013      	beq.n	80011d8 <HAL_DMA_Init+0xb8>
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a54      	ldr	r2, [pc, #336]	@ (8001308 <HAL_DMA_Init+0x1e8>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d00e      	beq.n	80011d8 <HAL_DMA_Init+0xb8>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4a53      	ldr	r2, [pc, #332]	@ (800130c <HAL_DMA_Init+0x1ec>)
 80011c0:	4293      	cmp	r3, r2
 80011c2:	d009      	beq.n	80011d8 <HAL_DMA_Init+0xb8>
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a51      	ldr	r2, [pc, #324]	@ (8001310 <HAL_DMA_Init+0x1f0>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d004      	beq.n	80011d8 <HAL_DMA_Init+0xb8>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4a50      	ldr	r2, [pc, #320]	@ (8001314 <HAL_DMA_Init+0x1f4>)
 80011d4:	4293      	cmp	r3, r2
 80011d6:	d101      	bne.n	80011dc <HAL_DMA_Init+0xbc>
 80011d8:	2301      	movs	r3, #1
 80011da:	e000      	b.n	80011de <HAL_DMA_Init+0xbe>
 80011dc:	2300      	movs	r3, #0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	f000 813c 	beq.w	800145c <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2202      	movs	r2, #2
 80011e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	2200      	movs	r2, #0
 80011f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a37      	ldr	r2, [pc, #220]	@ (80012d8 <HAL_DMA_Init+0x1b8>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d04a      	beq.n	8001294 <HAL_DMA_Init+0x174>
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4a36      	ldr	r2, [pc, #216]	@ (80012dc <HAL_DMA_Init+0x1bc>)
 8001204:	4293      	cmp	r3, r2
 8001206:	d045      	beq.n	8001294 <HAL_DMA_Init+0x174>
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a34      	ldr	r2, [pc, #208]	@ (80012e0 <HAL_DMA_Init+0x1c0>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d040      	beq.n	8001294 <HAL_DMA_Init+0x174>
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4a33      	ldr	r2, [pc, #204]	@ (80012e4 <HAL_DMA_Init+0x1c4>)
 8001218:	4293      	cmp	r3, r2
 800121a:	d03b      	beq.n	8001294 <HAL_DMA_Init+0x174>
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a31      	ldr	r2, [pc, #196]	@ (80012e8 <HAL_DMA_Init+0x1c8>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d036      	beq.n	8001294 <HAL_DMA_Init+0x174>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4a30      	ldr	r2, [pc, #192]	@ (80012ec <HAL_DMA_Init+0x1cc>)
 800122c:	4293      	cmp	r3, r2
 800122e:	d031      	beq.n	8001294 <HAL_DMA_Init+0x174>
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a2e      	ldr	r2, [pc, #184]	@ (80012f0 <HAL_DMA_Init+0x1d0>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d02c      	beq.n	8001294 <HAL_DMA_Init+0x174>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4a2d      	ldr	r2, [pc, #180]	@ (80012f4 <HAL_DMA_Init+0x1d4>)
 8001240:	4293      	cmp	r3, r2
 8001242:	d027      	beq.n	8001294 <HAL_DMA_Init+0x174>
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a2b      	ldr	r2, [pc, #172]	@ (80012f8 <HAL_DMA_Init+0x1d8>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d022      	beq.n	8001294 <HAL_DMA_Init+0x174>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4a2a      	ldr	r2, [pc, #168]	@ (80012fc <HAL_DMA_Init+0x1dc>)
 8001254:	4293      	cmp	r3, r2
 8001256:	d01d      	beq.n	8001294 <HAL_DMA_Init+0x174>
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a28      	ldr	r2, [pc, #160]	@ (8001300 <HAL_DMA_Init+0x1e0>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d018      	beq.n	8001294 <HAL_DMA_Init+0x174>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4a27      	ldr	r2, [pc, #156]	@ (8001304 <HAL_DMA_Init+0x1e4>)
 8001268:	4293      	cmp	r3, r2
 800126a:	d013      	beq.n	8001294 <HAL_DMA_Init+0x174>
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a25      	ldr	r2, [pc, #148]	@ (8001308 <HAL_DMA_Init+0x1e8>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d00e      	beq.n	8001294 <HAL_DMA_Init+0x174>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4a24      	ldr	r2, [pc, #144]	@ (800130c <HAL_DMA_Init+0x1ec>)
 800127c:	4293      	cmp	r3, r2
 800127e:	d009      	beq.n	8001294 <HAL_DMA_Init+0x174>
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a22      	ldr	r2, [pc, #136]	@ (8001310 <HAL_DMA_Init+0x1f0>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d004      	beq.n	8001294 <HAL_DMA_Init+0x174>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4a21      	ldr	r2, [pc, #132]	@ (8001314 <HAL_DMA_Init+0x1f4>)
 8001290:	4293      	cmp	r3, r2
 8001292:	d108      	bne.n	80012a6 <HAL_DMA_Init+0x186>
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	681a      	ldr	r2, [r3, #0]
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f022 0201 	bic.w	r2, r2, #1
 80012a2:	601a      	str	r2, [r3, #0]
 80012a4:	e007      	b.n	80012b6 <HAL_DMA_Init+0x196>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	681a      	ldr	r2, [r3, #0]
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f022 0201 	bic.w	r2, r2, #1
 80012b4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80012b6:	e02f      	b.n	8001318 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80012b8:	f7ff fe46 	bl	8000f48 <HAL_GetTick>
 80012bc:	4602      	mov	r2, r0
 80012be:	693b      	ldr	r3, [r7, #16]
 80012c0:	1ad3      	subs	r3, r2, r3
 80012c2:	2b05      	cmp	r3, #5
 80012c4:	d928      	bls.n	8001318 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	2220      	movs	r2, #32
 80012ca:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2203      	movs	r2, #3
 80012d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 80012d4:	2301      	movs	r3, #1
 80012d6:	e2ad      	b.n	8001834 <HAL_DMA_Init+0x714>
 80012d8:	40020010 	.word	0x40020010
 80012dc:	40020028 	.word	0x40020028
 80012e0:	40020040 	.word	0x40020040
 80012e4:	40020058 	.word	0x40020058
 80012e8:	40020070 	.word	0x40020070
 80012ec:	40020088 	.word	0x40020088
 80012f0:	400200a0 	.word	0x400200a0
 80012f4:	400200b8 	.word	0x400200b8
 80012f8:	40020410 	.word	0x40020410
 80012fc:	40020428 	.word	0x40020428
 8001300:	40020440 	.word	0x40020440
 8001304:	40020458 	.word	0x40020458
 8001308:	40020470 	.word	0x40020470
 800130c:	40020488 	.word	0x40020488
 8001310:	400204a0 	.word	0x400204a0
 8001314:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f003 0301 	and.w	r3, r3, #1
 8001322:	2b00      	cmp	r3, #0
 8001324:	d1c8      	bne.n	80012b8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800132e:	697a      	ldr	r2, [r7, #20]
 8001330:	4b73      	ldr	r3, [pc, #460]	@ (8001500 <HAL_DMA_Init+0x3e0>)
 8001332:	4013      	ands	r3, r2
 8001334:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800133e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	691b      	ldr	r3, [r3, #16]
 8001344:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800134a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	699b      	ldr	r3, [r3, #24]
 8001350:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001356:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6a1b      	ldr	r3, [r3, #32]
 800135c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800135e:	697a      	ldr	r2, [r7, #20]
 8001360:	4313      	orrs	r3, r2
 8001362:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001368:	2b04      	cmp	r3, #4
 800136a:	d107      	bne.n	800137c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001374:	4313      	orrs	r3, r2
 8001376:	697a      	ldr	r2, [r7, #20]
 8001378:	4313      	orrs	r3, r2
 800137a:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	2b28      	cmp	r3, #40	@ 0x28
 8001382:	d903      	bls.n	800138c <HAL_DMA_Init+0x26c>
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	2b2e      	cmp	r3, #46	@ 0x2e
 800138a:	d91f      	bls.n	80013cc <HAL_DMA_Init+0x2ac>
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	2b3e      	cmp	r3, #62	@ 0x3e
 8001392:	d903      	bls.n	800139c <HAL_DMA_Init+0x27c>
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	2b42      	cmp	r3, #66	@ 0x42
 800139a:	d917      	bls.n	80013cc <HAL_DMA_Init+0x2ac>
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	2b46      	cmp	r3, #70	@ 0x46
 80013a2:	d903      	bls.n	80013ac <HAL_DMA_Init+0x28c>
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	2b48      	cmp	r3, #72	@ 0x48
 80013aa:	d90f      	bls.n	80013cc <HAL_DMA_Init+0x2ac>
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	2b4e      	cmp	r3, #78	@ 0x4e
 80013b2:	d903      	bls.n	80013bc <HAL_DMA_Init+0x29c>
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	2b52      	cmp	r3, #82	@ 0x52
 80013ba:	d907      	bls.n	80013cc <HAL_DMA_Init+0x2ac>
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	2b73      	cmp	r3, #115	@ 0x73
 80013c2:	d905      	bls.n	80013d0 <HAL_DMA_Init+0x2b0>
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	2b77      	cmp	r3, #119	@ 0x77
 80013ca:	d801      	bhi.n	80013d0 <HAL_DMA_Init+0x2b0>
 80013cc:	2301      	movs	r3, #1
 80013ce:	e000      	b.n	80013d2 <HAL_DMA_Init+0x2b2>
 80013d0:	2300      	movs	r3, #0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d003      	beq.n	80013de <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80013dc:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	697a      	ldr	r2, [r7, #20]
 80013e4:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	695b      	ldr	r3, [r3, #20]
 80013ec:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	f023 0307 	bic.w	r3, r3, #7
 80013f4:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013fa:	697a      	ldr	r2, [r7, #20]
 80013fc:	4313      	orrs	r3, r2
 80013fe:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001404:	2b04      	cmp	r3, #4
 8001406:	d117      	bne.n	8001438 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800140c:	697a      	ldr	r2, [r7, #20]
 800140e:	4313      	orrs	r3, r2
 8001410:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001416:	2b00      	cmp	r3, #0
 8001418:	d00e      	beq.n	8001438 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800141a:	6878      	ldr	r0, [r7, #4]
 800141c:	f001 fc76 	bl	8002d0c <DMA_CheckFifoParam>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d008      	beq.n	8001438 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2240      	movs	r2, #64	@ 0x40
 800142a:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2201      	movs	r2, #1
 8001430:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8001434:	2301      	movs	r3, #1
 8001436:	e1fd      	b.n	8001834 <HAL_DMA_Init+0x714>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	697a      	ldr	r2, [r7, #20]
 800143e:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001440:	6878      	ldr	r0, [r7, #4]
 8001442:	f001 fbb1 	bl	8002ba8 <DMA_CalcBaseAndBitshift>
 8001446:	4603      	mov	r3, r0
 8001448:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800144e:	f003 031f 	and.w	r3, r3, #31
 8001452:	223f      	movs	r2, #63	@ 0x3f
 8001454:	409a      	lsls	r2, r3
 8001456:	68bb      	ldr	r3, [r7, #8]
 8001458:	609a      	str	r2, [r3, #8]
 800145a:	e0fd      	b.n	8001658 <HAL_DMA_Init+0x538>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a28      	ldr	r2, [pc, #160]	@ (8001504 <HAL_DMA_Init+0x3e4>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d04a      	beq.n	80014fc <HAL_DMA_Init+0x3dc>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4a27      	ldr	r2, [pc, #156]	@ (8001508 <HAL_DMA_Init+0x3e8>)
 800146c:	4293      	cmp	r3, r2
 800146e:	d045      	beq.n	80014fc <HAL_DMA_Init+0x3dc>
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a25      	ldr	r2, [pc, #148]	@ (800150c <HAL_DMA_Init+0x3ec>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d040      	beq.n	80014fc <HAL_DMA_Init+0x3dc>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a24      	ldr	r2, [pc, #144]	@ (8001510 <HAL_DMA_Init+0x3f0>)
 8001480:	4293      	cmp	r3, r2
 8001482:	d03b      	beq.n	80014fc <HAL_DMA_Init+0x3dc>
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a22      	ldr	r2, [pc, #136]	@ (8001514 <HAL_DMA_Init+0x3f4>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d036      	beq.n	80014fc <HAL_DMA_Init+0x3dc>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4a21      	ldr	r2, [pc, #132]	@ (8001518 <HAL_DMA_Init+0x3f8>)
 8001494:	4293      	cmp	r3, r2
 8001496:	d031      	beq.n	80014fc <HAL_DMA_Init+0x3dc>
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a1f      	ldr	r2, [pc, #124]	@ (800151c <HAL_DMA_Init+0x3fc>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d02c      	beq.n	80014fc <HAL_DMA_Init+0x3dc>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4a1e      	ldr	r2, [pc, #120]	@ (8001520 <HAL_DMA_Init+0x400>)
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d027      	beq.n	80014fc <HAL_DMA_Init+0x3dc>
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a1c      	ldr	r2, [pc, #112]	@ (8001524 <HAL_DMA_Init+0x404>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d022      	beq.n	80014fc <HAL_DMA_Init+0x3dc>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4a1b      	ldr	r2, [pc, #108]	@ (8001528 <HAL_DMA_Init+0x408>)
 80014bc:	4293      	cmp	r3, r2
 80014be:	d01d      	beq.n	80014fc <HAL_DMA_Init+0x3dc>
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a19      	ldr	r2, [pc, #100]	@ (800152c <HAL_DMA_Init+0x40c>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d018      	beq.n	80014fc <HAL_DMA_Init+0x3dc>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4a18      	ldr	r2, [pc, #96]	@ (8001530 <HAL_DMA_Init+0x410>)
 80014d0:	4293      	cmp	r3, r2
 80014d2:	d013      	beq.n	80014fc <HAL_DMA_Init+0x3dc>
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a16      	ldr	r2, [pc, #88]	@ (8001534 <HAL_DMA_Init+0x414>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d00e      	beq.n	80014fc <HAL_DMA_Init+0x3dc>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4a15      	ldr	r2, [pc, #84]	@ (8001538 <HAL_DMA_Init+0x418>)
 80014e4:	4293      	cmp	r3, r2
 80014e6:	d009      	beq.n	80014fc <HAL_DMA_Init+0x3dc>
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a13      	ldr	r2, [pc, #76]	@ (800153c <HAL_DMA_Init+0x41c>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d004      	beq.n	80014fc <HAL_DMA_Init+0x3dc>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4a12      	ldr	r2, [pc, #72]	@ (8001540 <HAL_DMA_Init+0x420>)
 80014f8:	4293      	cmp	r3, r2
 80014fa:	d123      	bne.n	8001544 <HAL_DMA_Init+0x424>
 80014fc:	2301      	movs	r3, #1
 80014fe:	e022      	b.n	8001546 <HAL_DMA_Init+0x426>
 8001500:	fe10803f 	.word	0xfe10803f
 8001504:	48022c08 	.word	0x48022c08
 8001508:	48022c1c 	.word	0x48022c1c
 800150c:	48022c30 	.word	0x48022c30
 8001510:	48022c44 	.word	0x48022c44
 8001514:	48022c58 	.word	0x48022c58
 8001518:	48022c6c 	.word	0x48022c6c
 800151c:	48022c80 	.word	0x48022c80
 8001520:	48022c94 	.word	0x48022c94
 8001524:	58025408 	.word	0x58025408
 8001528:	5802541c 	.word	0x5802541c
 800152c:	58025430 	.word	0x58025430
 8001530:	58025444 	.word	0x58025444
 8001534:	58025458 	.word	0x58025458
 8001538:	5802546c 	.word	0x5802546c
 800153c:	58025480 	.word	0x58025480
 8001540:	58025494 	.word	0x58025494
 8001544:	2300      	movs	r3, #0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d07d      	beq.n	8001646 <HAL_DMA_Init+0x526>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4a7f      	ldr	r2, [pc, #508]	@ (800174c <HAL_DMA_Init+0x62c>)
 8001550:	4293      	cmp	r3, r2
 8001552:	d021      	beq.n	8001598 <HAL_DMA_Init+0x478>
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a7d      	ldr	r2, [pc, #500]	@ (8001750 <HAL_DMA_Init+0x630>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d01c      	beq.n	8001598 <HAL_DMA_Init+0x478>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a7c      	ldr	r2, [pc, #496]	@ (8001754 <HAL_DMA_Init+0x634>)
 8001564:	4293      	cmp	r3, r2
 8001566:	d017      	beq.n	8001598 <HAL_DMA_Init+0x478>
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a7a      	ldr	r2, [pc, #488]	@ (8001758 <HAL_DMA_Init+0x638>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d012      	beq.n	8001598 <HAL_DMA_Init+0x478>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4a79      	ldr	r2, [pc, #484]	@ (800175c <HAL_DMA_Init+0x63c>)
 8001578:	4293      	cmp	r3, r2
 800157a:	d00d      	beq.n	8001598 <HAL_DMA_Init+0x478>
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a77      	ldr	r2, [pc, #476]	@ (8001760 <HAL_DMA_Init+0x640>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d008      	beq.n	8001598 <HAL_DMA_Init+0x478>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4a76      	ldr	r2, [pc, #472]	@ (8001764 <HAL_DMA_Init+0x644>)
 800158c:	4293      	cmp	r3, r2
 800158e:	d003      	beq.n	8001598 <HAL_DMA_Init+0x478>
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a74      	ldr	r2, [pc, #464]	@ (8001768 <HAL_DMA_Init+0x648>)
 8001596:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2202      	movs	r2, #2
 800159c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2200      	movs	r2, #0
 80015a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80015b0:	697a      	ldr	r2, [r7, #20]
 80015b2:	4b6e      	ldr	r3, [pc, #440]	@ (800176c <HAL_DMA_Init+0x64c>)
 80015b4:	4013      	ands	r3, r2
 80015b6:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	689b      	ldr	r3, [r3, #8]
 80015bc:	2b40      	cmp	r3, #64	@ 0x40
 80015be:	d008      	beq.n	80015d2 <HAL_DMA_Init+0x4b2>
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	689b      	ldr	r3, [r3, #8]
 80015c4:	2b80      	cmp	r3, #128	@ 0x80
 80015c6:	d102      	bne.n	80015ce <HAL_DMA_Init+0x4ae>
 80015c8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80015cc:	e002      	b.n	80015d4 <HAL_DMA_Init+0x4b4>
 80015ce:	2300      	movs	r3, #0
 80015d0:	e000      	b.n	80015d4 <HAL_DMA_Init+0x4b4>
 80015d2:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80015d4:	687a      	ldr	r2, [r7, #4]
 80015d6:	68d2      	ldr	r2, [r2, #12]
 80015d8:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80015da:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	691b      	ldr	r3, [r3, #16]
 80015e0:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80015e2:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	695b      	ldr	r3, [r3, #20]
 80015e8:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80015ea:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	699b      	ldr	r3, [r3, #24]
 80015f0:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80015f2:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	69db      	ldr	r3, [r3, #28]
 80015f8:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80015fa:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6a1b      	ldr	r3, [r3, #32]
 8001600:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001602:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001604:	697a      	ldr	r2, [r7, #20]
 8001606:	4313      	orrs	r3, r2
 8001608:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	697a      	ldr	r2, [r7, #20]
 8001610:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	461a      	mov	r2, r3
 8001618:	4b55      	ldr	r3, [pc, #340]	@ (8001770 <HAL_DMA_Init+0x650>)
 800161a:	4413      	add	r3, r2
 800161c:	4a55      	ldr	r2, [pc, #340]	@ (8001774 <HAL_DMA_Init+0x654>)
 800161e:	fba2 2303 	umull	r2, r3, r2, r3
 8001622:	091b      	lsrs	r3, r3, #4
 8001624:	009a      	lsls	r2, r3, #2
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800162a:	6878      	ldr	r0, [r7, #4]
 800162c:	f001 fabc 	bl	8002ba8 <DMA_CalcBaseAndBitshift>
 8001630:	4603      	mov	r3, r0
 8001632:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001638:	f003 031f 	and.w	r3, r3, #31
 800163c:	2201      	movs	r2, #1
 800163e:	409a      	lsls	r2, r3
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	605a      	str	r2, [r3, #4]
 8001644:	e008      	b.n	8001658 <HAL_DMA_Init+0x538>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2240      	movs	r2, #64	@ 0x40
 800164a:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2203      	movs	r2, #3
 8001650:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8001654:	2301      	movs	r3, #1
 8001656:	e0ed      	b.n	8001834 <HAL_DMA_Init+0x714>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a46      	ldr	r2, [pc, #280]	@ (8001778 <HAL_DMA_Init+0x658>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d072      	beq.n	8001748 <HAL_DMA_Init+0x628>
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a45      	ldr	r2, [pc, #276]	@ (800177c <HAL_DMA_Init+0x65c>)
 8001668:	4293      	cmp	r3, r2
 800166a:	d06d      	beq.n	8001748 <HAL_DMA_Init+0x628>
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a43      	ldr	r2, [pc, #268]	@ (8001780 <HAL_DMA_Init+0x660>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d068      	beq.n	8001748 <HAL_DMA_Init+0x628>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a42      	ldr	r2, [pc, #264]	@ (8001784 <HAL_DMA_Init+0x664>)
 800167c:	4293      	cmp	r3, r2
 800167e:	d063      	beq.n	8001748 <HAL_DMA_Init+0x628>
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a40      	ldr	r2, [pc, #256]	@ (8001788 <HAL_DMA_Init+0x668>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d05e      	beq.n	8001748 <HAL_DMA_Init+0x628>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a3f      	ldr	r2, [pc, #252]	@ (800178c <HAL_DMA_Init+0x66c>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d059      	beq.n	8001748 <HAL_DMA_Init+0x628>
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a3d      	ldr	r2, [pc, #244]	@ (8001790 <HAL_DMA_Init+0x670>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d054      	beq.n	8001748 <HAL_DMA_Init+0x628>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a3c      	ldr	r2, [pc, #240]	@ (8001794 <HAL_DMA_Init+0x674>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d04f      	beq.n	8001748 <HAL_DMA_Init+0x628>
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a3a      	ldr	r2, [pc, #232]	@ (8001798 <HAL_DMA_Init+0x678>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d04a      	beq.n	8001748 <HAL_DMA_Init+0x628>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a39      	ldr	r2, [pc, #228]	@ (800179c <HAL_DMA_Init+0x67c>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d045      	beq.n	8001748 <HAL_DMA_Init+0x628>
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a37      	ldr	r2, [pc, #220]	@ (80017a0 <HAL_DMA_Init+0x680>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d040      	beq.n	8001748 <HAL_DMA_Init+0x628>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a36      	ldr	r2, [pc, #216]	@ (80017a4 <HAL_DMA_Init+0x684>)
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d03b      	beq.n	8001748 <HAL_DMA_Init+0x628>
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a34      	ldr	r2, [pc, #208]	@ (80017a8 <HAL_DMA_Init+0x688>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d036      	beq.n	8001748 <HAL_DMA_Init+0x628>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a33      	ldr	r2, [pc, #204]	@ (80017ac <HAL_DMA_Init+0x68c>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d031      	beq.n	8001748 <HAL_DMA_Init+0x628>
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a31      	ldr	r2, [pc, #196]	@ (80017b0 <HAL_DMA_Init+0x690>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d02c      	beq.n	8001748 <HAL_DMA_Init+0x628>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a30      	ldr	r2, [pc, #192]	@ (80017b4 <HAL_DMA_Init+0x694>)
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d027      	beq.n	8001748 <HAL_DMA_Init+0x628>
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a13      	ldr	r2, [pc, #76]	@ (800174c <HAL_DMA_Init+0x62c>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d022      	beq.n	8001748 <HAL_DMA_Init+0x628>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a12      	ldr	r2, [pc, #72]	@ (8001750 <HAL_DMA_Init+0x630>)
 8001708:	4293      	cmp	r3, r2
 800170a:	d01d      	beq.n	8001748 <HAL_DMA_Init+0x628>
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a10      	ldr	r2, [pc, #64]	@ (8001754 <HAL_DMA_Init+0x634>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d018      	beq.n	8001748 <HAL_DMA_Init+0x628>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a0f      	ldr	r2, [pc, #60]	@ (8001758 <HAL_DMA_Init+0x638>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d013      	beq.n	8001748 <HAL_DMA_Init+0x628>
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a0d      	ldr	r2, [pc, #52]	@ (800175c <HAL_DMA_Init+0x63c>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d00e      	beq.n	8001748 <HAL_DMA_Init+0x628>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a0c      	ldr	r2, [pc, #48]	@ (8001760 <HAL_DMA_Init+0x640>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d009      	beq.n	8001748 <HAL_DMA_Init+0x628>
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a0a      	ldr	r2, [pc, #40]	@ (8001764 <HAL_DMA_Init+0x644>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d004      	beq.n	8001748 <HAL_DMA_Init+0x628>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4a09      	ldr	r2, [pc, #36]	@ (8001768 <HAL_DMA_Init+0x648>)
 8001744:	4293      	cmp	r3, r2
 8001746:	d137      	bne.n	80017b8 <HAL_DMA_Init+0x698>
 8001748:	2301      	movs	r3, #1
 800174a:	e036      	b.n	80017ba <HAL_DMA_Init+0x69a>
 800174c:	58025408 	.word	0x58025408
 8001750:	5802541c 	.word	0x5802541c
 8001754:	58025430 	.word	0x58025430
 8001758:	58025444 	.word	0x58025444
 800175c:	58025458 	.word	0x58025458
 8001760:	5802546c 	.word	0x5802546c
 8001764:	58025480 	.word	0x58025480
 8001768:	58025494 	.word	0x58025494
 800176c:	fffe000f 	.word	0xfffe000f
 8001770:	a7fdabf8 	.word	0xa7fdabf8
 8001774:	cccccccd 	.word	0xcccccccd
 8001778:	40020010 	.word	0x40020010
 800177c:	40020028 	.word	0x40020028
 8001780:	40020040 	.word	0x40020040
 8001784:	40020058 	.word	0x40020058
 8001788:	40020070 	.word	0x40020070
 800178c:	40020088 	.word	0x40020088
 8001790:	400200a0 	.word	0x400200a0
 8001794:	400200b8 	.word	0x400200b8
 8001798:	40020410 	.word	0x40020410
 800179c:	40020428 	.word	0x40020428
 80017a0:	40020440 	.word	0x40020440
 80017a4:	40020458 	.word	0x40020458
 80017a8:	40020470 	.word	0x40020470
 80017ac:	40020488 	.word	0x40020488
 80017b0:	400204a0 	.word	0x400204a0
 80017b4:	400204b8 	.word	0x400204b8
 80017b8:	2300      	movs	r3, #0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d032      	beq.n	8001824 <HAL_DMA_Init+0x704>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80017be:	6878      	ldr	r0, [r7, #4]
 80017c0:	f001 fb20 	bl	8002e04 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	2b80      	cmp	r3, #128	@ 0x80
 80017ca:	d102      	bne.n	80017d2 <HAL_DMA_Init+0x6b2>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2200      	movs	r2, #0
 80017d0:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	685a      	ldr	r2, [r3, #4]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017da:	b2d2      	uxtb	r2, r2
 80017dc:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80017e2:	687a      	ldr	r2, [r7, #4]
 80017e4:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80017e6:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d010      	beq.n	8001812 <HAL_DMA_Init+0x6f2>
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	2b08      	cmp	r3, #8
 80017f6:	d80c      	bhi.n	8001812 <HAL_DMA_Init+0x6f2>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80017f8:	6878      	ldr	r0, [r7, #4]
 80017fa:	f001 fb9d 	bl	8002f38 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001802:	2200      	movs	r2, #0
 8001804:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800180a:	687a      	ldr	r2, [r7, #4]
 800180c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800180e:	605a      	str	r2, [r3, #4]
 8001810:	e008      	b.n	8001824 <HAL_DMA_Init+0x704>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2200      	movs	r2, #0
 8001816:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2200      	movs	r2, #0
 800181c:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2200      	movs	r2, #0
 8001822:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2200      	movs	r2, #0
 8001828:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2201      	movs	r2, #1
 800182e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001832:	2300      	movs	r3, #0
}
 8001834:	4618      	mov	r0, r3
 8001836:	3718      	adds	r7, #24
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}

0800183c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b084      	sub	sp, #16
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d101      	bne.n	800184e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800184a:	2301      	movs	r3, #1
 800184c:	e237      	b.n	8001cbe <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001854:	b2db      	uxtb	r3, r3
 8001856:	2b02      	cmp	r3, #2
 8001858:	d004      	beq.n	8001864 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2280      	movs	r2, #128	@ 0x80
 800185e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001860:	2301      	movs	r3, #1
 8001862:	e22c      	b.n	8001cbe <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a5c      	ldr	r2, [pc, #368]	@ (80019dc <HAL_DMA_Abort_IT+0x1a0>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d04a      	beq.n	8001904 <HAL_DMA_Abort_IT+0xc8>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a5b      	ldr	r2, [pc, #364]	@ (80019e0 <HAL_DMA_Abort_IT+0x1a4>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d045      	beq.n	8001904 <HAL_DMA_Abort_IT+0xc8>
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a59      	ldr	r2, [pc, #356]	@ (80019e4 <HAL_DMA_Abort_IT+0x1a8>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d040      	beq.n	8001904 <HAL_DMA_Abort_IT+0xc8>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a58      	ldr	r2, [pc, #352]	@ (80019e8 <HAL_DMA_Abort_IT+0x1ac>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d03b      	beq.n	8001904 <HAL_DMA_Abort_IT+0xc8>
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a56      	ldr	r2, [pc, #344]	@ (80019ec <HAL_DMA_Abort_IT+0x1b0>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d036      	beq.n	8001904 <HAL_DMA_Abort_IT+0xc8>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a55      	ldr	r2, [pc, #340]	@ (80019f0 <HAL_DMA_Abort_IT+0x1b4>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d031      	beq.n	8001904 <HAL_DMA_Abort_IT+0xc8>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a53      	ldr	r2, [pc, #332]	@ (80019f4 <HAL_DMA_Abort_IT+0x1b8>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d02c      	beq.n	8001904 <HAL_DMA_Abort_IT+0xc8>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a52      	ldr	r2, [pc, #328]	@ (80019f8 <HAL_DMA_Abort_IT+0x1bc>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d027      	beq.n	8001904 <HAL_DMA_Abort_IT+0xc8>
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a50      	ldr	r2, [pc, #320]	@ (80019fc <HAL_DMA_Abort_IT+0x1c0>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d022      	beq.n	8001904 <HAL_DMA_Abort_IT+0xc8>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a4f      	ldr	r2, [pc, #316]	@ (8001a00 <HAL_DMA_Abort_IT+0x1c4>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d01d      	beq.n	8001904 <HAL_DMA_Abort_IT+0xc8>
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a4d      	ldr	r2, [pc, #308]	@ (8001a04 <HAL_DMA_Abort_IT+0x1c8>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d018      	beq.n	8001904 <HAL_DMA_Abort_IT+0xc8>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a4c      	ldr	r2, [pc, #304]	@ (8001a08 <HAL_DMA_Abort_IT+0x1cc>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d013      	beq.n	8001904 <HAL_DMA_Abort_IT+0xc8>
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a4a      	ldr	r2, [pc, #296]	@ (8001a0c <HAL_DMA_Abort_IT+0x1d0>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d00e      	beq.n	8001904 <HAL_DMA_Abort_IT+0xc8>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4a49      	ldr	r2, [pc, #292]	@ (8001a10 <HAL_DMA_Abort_IT+0x1d4>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d009      	beq.n	8001904 <HAL_DMA_Abort_IT+0xc8>
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a47      	ldr	r2, [pc, #284]	@ (8001a14 <HAL_DMA_Abort_IT+0x1d8>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d004      	beq.n	8001904 <HAL_DMA_Abort_IT+0xc8>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a46      	ldr	r2, [pc, #280]	@ (8001a18 <HAL_DMA_Abort_IT+0x1dc>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d101      	bne.n	8001908 <HAL_DMA_Abort_IT+0xcc>
 8001904:	2301      	movs	r3, #1
 8001906:	e000      	b.n	800190a <HAL_DMA_Abort_IT+0xce>
 8001908:	2300      	movs	r3, #0
 800190a:	2b00      	cmp	r3, #0
 800190c:	f000 8086 	beq.w	8001a1c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2204      	movs	r2, #4
 8001914:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a2f      	ldr	r2, [pc, #188]	@ (80019dc <HAL_DMA_Abort_IT+0x1a0>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d04a      	beq.n	80019b8 <HAL_DMA_Abort_IT+0x17c>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4a2e      	ldr	r2, [pc, #184]	@ (80019e0 <HAL_DMA_Abort_IT+0x1a4>)
 8001928:	4293      	cmp	r3, r2
 800192a:	d045      	beq.n	80019b8 <HAL_DMA_Abort_IT+0x17c>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a2c      	ldr	r2, [pc, #176]	@ (80019e4 <HAL_DMA_Abort_IT+0x1a8>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d040      	beq.n	80019b8 <HAL_DMA_Abort_IT+0x17c>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a2b      	ldr	r2, [pc, #172]	@ (80019e8 <HAL_DMA_Abort_IT+0x1ac>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d03b      	beq.n	80019b8 <HAL_DMA_Abort_IT+0x17c>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a29      	ldr	r2, [pc, #164]	@ (80019ec <HAL_DMA_Abort_IT+0x1b0>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d036      	beq.n	80019b8 <HAL_DMA_Abort_IT+0x17c>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a28      	ldr	r2, [pc, #160]	@ (80019f0 <HAL_DMA_Abort_IT+0x1b4>)
 8001950:	4293      	cmp	r3, r2
 8001952:	d031      	beq.n	80019b8 <HAL_DMA_Abort_IT+0x17c>
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a26      	ldr	r2, [pc, #152]	@ (80019f4 <HAL_DMA_Abort_IT+0x1b8>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d02c      	beq.n	80019b8 <HAL_DMA_Abort_IT+0x17c>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a25      	ldr	r2, [pc, #148]	@ (80019f8 <HAL_DMA_Abort_IT+0x1bc>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d027      	beq.n	80019b8 <HAL_DMA_Abort_IT+0x17c>
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a23      	ldr	r2, [pc, #140]	@ (80019fc <HAL_DMA_Abort_IT+0x1c0>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d022      	beq.n	80019b8 <HAL_DMA_Abort_IT+0x17c>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4a22      	ldr	r2, [pc, #136]	@ (8001a00 <HAL_DMA_Abort_IT+0x1c4>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d01d      	beq.n	80019b8 <HAL_DMA_Abort_IT+0x17c>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a20      	ldr	r2, [pc, #128]	@ (8001a04 <HAL_DMA_Abort_IT+0x1c8>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d018      	beq.n	80019b8 <HAL_DMA_Abort_IT+0x17c>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4a1f      	ldr	r2, [pc, #124]	@ (8001a08 <HAL_DMA_Abort_IT+0x1cc>)
 800198c:	4293      	cmp	r3, r2
 800198e:	d013      	beq.n	80019b8 <HAL_DMA_Abort_IT+0x17c>
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a1d      	ldr	r2, [pc, #116]	@ (8001a0c <HAL_DMA_Abort_IT+0x1d0>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d00e      	beq.n	80019b8 <HAL_DMA_Abort_IT+0x17c>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4a1c      	ldr	r2, [pc, #112]	@ (8001a10 <HAL_DMA_Abort_IT+0x1d4>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d009      	beq.n	80019b8 <HAL_DMA_Abort_IT+0x17c>
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a1a      	ldr	r2, [pc, #104]	@ (8001a14 <HAL_DMA_Abort_IT+0x1d8>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d004      	beq.n	80019b8 <HAL_DMA_Abort_IT+0x17c>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4a19      	ldr	r2, [pc, #100]	@ (8001a18 <HAL_DMA_Abort_IT+0x1dc>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d108      	bne.n	80019ca <HAL_DMA_Abort_IT+0x18e>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f022 0201 	bic.w	r2, r2, #1
 80019c6:	601a      	str	r2, [r3, #0]
 80019c8:	e178      	b.n	8001cbc <HAL_DMA_Abort_IT+0x480>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f022 0201 	bic.w	r2, r2, #1
 80019d8:	601a      	str	r2, [r3, #0]
 80019da:	e16f      	b.n	8001cbc <HAL_DMA_Abort_IT+0x480>
 80019dc:	40020010 	.word	0x40020010
 80019e0:	40020028 	.word	0x40020028
 80019e4:	40020040 	.word	0x40020040
 80019e8:	40020058 	.word	0x40020058
 80019ec:	40020070 	.word	0x40020070
 80019f0:	40020088 	.word	0x40020088
 80019f4:	400200a0 	.word	0x400200a0
 80019f8:	400200b8 	.word	0x400200b8
 80019fc:	40020410 	.word	0x40020410
 8001a00:	40020428 	.word	0x40020428
 8001a04:	40020440 	.word	0x40020440
 8001a08:	40020458 	.word	0x40020458
 8001a0c:	40020470 	.word	0x40020470
 8001a10:	40020488 	.word	0x40020488
 8001a14:	400204a0 	.word	0x400204a0
 8001a18:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f022 020e 	bic.w	r2, r2, #14
 8001a2a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a6c      	ldr	r2, [pc, #432]	@ (8001be4 <HAL_DMA_Abort_IT+0x3a8>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d04a      	beq.n	8001acc <HAL_DMA_Abort_IT+0x290>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a6b      	ldr	r2, [pc, #428]	@ (8001be8 <HAL_DMA_Abort_IT+0x3ac>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d045      	beq.n	8001acc <HAL_DMA_Abort_IT+0x290>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a69      	ldr	r2, [pc, #420]	@ (8001bec <HAL_DMA_Abort_IT+0x3b0>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d040      	beq.n	8001acc <HAL_DMA_Abort_IT+0x290>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a68      	ldr	r2, [pc, #416]	@ (8001bf0 <HAL_DMA_Abort_IT+0x3b4>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d03b      	beq.n	8001acc <HAL_DMA_Abort_IT+0x290>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a66      	ldr	r2, [pc, #408]	@ (8001bf4 <HAL_DMA_Abort_IT+0x3b8>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d036      	beq.n	8001acc <HAL_DMA_Abort_IT+0x290>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a65      	ldr	r2, [pc, #404]	@ (8001bf8 <HAL_DMA_Abort_IT+0x3bc>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d031      	beq.n	8001acc <HAL_DMA_Abort_IT+0x290>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a63      	ldr	r2, [pc, #396]	@ (8001bfc <HAL_DMA_Abort_IT+0x3c0>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d02c      	beq.n	8001acc <HAL_DMA_Abort_IT+0x290>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a62      	ldr	r2, [pc, #392]	@ (8001c00 <HAL_DMA_Abort_IT+0x3c4>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d027      	beq.n	8001acc <HAL_DMA_Abort_IT+0x290>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a60      	ldr	r2, [pc, #384]	@ (8001c04 <HAL_DMA_Abort_IT+0x3c8>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d022      	beq.n	8001acc <HAL_DMA_Abort_IT+0x290>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a5f      	ldr	r2, [pc, #380]	@ (8001c08 <HAL_DMA_Abort_IT+0x3cc>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d01d      	beq.n	8001acc <HAL_DMA_Abort_IT+0x290>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a5d      	ldr	r2, [pc, #372]	@ (8001c0c <HAL_DMA_Abort_IT+0x3d0>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d018      	beq.n	8001acc <HAL_DMA_Abort_IT+0x290>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a5c      	ldr	r2, [pc, #368]	@ (8001c10 <HAL_DMA_Abort_IT+0x3d4>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d013      	beq.n	8001acc <HAL_DMA_Abort_IT+0x290>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a5a      	ldr	r2, [pc, #360]	@ (8001c14 <HAL_DMA_Abort_IT+0x3d8>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d00e      	beq.n	8001acc <HAL_DMA_Abort_IT+0x290>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a59      	ldr	r2, [pc, #356]	@ (8001c18 <HAL_DMA_Abort_IT+0x3dc>)
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d009      	beq.n	8001acc <HAL_DMA_Abort_IT+0x290>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a57      	ldr	r2, [pc, #348]	@ (8001c1c <HAL_DMA_Abort_IT+0x3e0>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d004      	beq.n	8001acc <HAL_DMA_Abort_IT+0x290>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a56      	ldr	r2, [pc, #344]	@ (8001c20 <HAL_DMA_Abort_IT+0x3e4>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d108      	bne.n	8001ade <HAL_DMA_Abort_IT+0x2a2>
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f022 0201 	bic.w	r2, r2, #1
 8001ada:	601a      	str	r2, [r3, #0]
 8001adc:	e007      	b.n	8001aee <HAL_DMA_Abort_IT+0x2b2>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f022 0201 	bic.w	r2, r2, #1
 8001aec:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a3c      	ldr	r2, [pc, #240]	@ (8001be4 <HAL_DMA_Abort_IT+0x3a8>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d072      	beq.n	8001bde <HAL_DMA_Abort_IT+0x3a2>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a3a      	ldr	r2, [pc, #232]	@ (8001be8 <HAL_DMA_Abort_IT+0x3ac>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d06d      	beq.n	8001bde <HAL_DMA_Abort_IT+0x3a2>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a39      	ldr	r2, [pc, #228]	@ (8001bec <HAL_DMA_Abort_IT+0x3b0>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d068      	beq.n	8001bde <HAL_DMA_Abort_IT+0x3a2>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a37      	ldr	r2, [pc, #220]	@ (8001bf0 <HAL_DMA_Abort_IT+0x3b4>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d063      	beq.n	8001bde <HAL_DMA_Abort_IT+0x3a2>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a36      	ldr	r2, [pc, #216]	@ (8001bf4 <HAL_DMA_Abort_IT+0x3b8>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d05e      	beq.n	8001bde <HAL_DMA_Abort_IT+0x3a2>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a34      	ldr	r2, [pc, #208]	@ (8001bf8 <HAL_DMA_Abort_IT+0x3bc>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d059      	beq.n	8001bde <HAL_DMA_Abort_IT+0x3a2>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a33      	ldr	r2, [pc, #204]	@ (8001bfc <HAL_DMA_Abort_IT+0x3c0>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d054      	beq.n	8001bde <HAL_DMA_Abort_IT+0x3a2>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a31      	ldr	r2, [pc, #196]	@ (8001c00 <HAL_DMA_Abort_IT+0x3c4>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d04f      	beq.n	8001bde <HAL_DMA_Abort_IT+0x3a2>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a30      	ldr	r2, [pc, #192]	@ (8001c04 <HAL_DMA_Abort_IT+0x3c8>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d04a      	beq.n	8001bde <HAL_DMA_Abort_IT+0x3a2>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a2e      	ldr	r2, [pc, #184]	@ (8001c08 <HAL_DMA_Abort_IT+0x3cc>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d045      	beq.n	8001bde <HAL_DMA_Abort_IT+0x3a2>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a2d      	ldr	r2, [pc, #180]	@ (8001c0c <HAL_DMA_Abort_IT+0x3d0>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d040      	beq.n	8001bde <HAL_DMA_Abort_IT+0x3a2>
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a2b      	ldr	r2, [pc, #172]	@ (8001c10 <HAL_DMA_Abort_IT+0x3d4>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d03b      	beq.n	8001bde <HAL_DMA_Abort_IT+0x3a2>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a2a      	ldr	r2, [pc, #168]	@ (8001c14 <HAL_DMA_Abort_IT+0x3d8>)
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d036      	beq.n	8001bde <HAL_DMA_Abort_IT+0x3a2>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a28      	ldr	r2, [pc, #160]	@ (8001c18 <HAL_DMA_Abort_IT+0x3dc>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d031      	beq.n	8001bde <HAL_DMA_Abort_IT+0x3a2>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a27      	ldr	r2, [pc, #156]	@ (8001c1c <HAL_DMA_Abort_IT+0x3e0>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d02c      	beq.n	8001bde <HAL_DMA_Abort_IT+0x3a2>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a25      	ldr	r2, [pc, #148]	@ (8001c20 <HAL_DMA_Abort_IT+0x3e4>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d027      	beq.n	8001bde <HAL_DMA_Abort_IT+0x3a2>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a24      	ldr	r2, [pc, #144]	@ (8001c24 <HAL_DMA_Abort_IT+0x3e8>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d022      	beq.n	8001bde <HAL_DMA_Abort_IT+0x3a2>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a22      	ldr	r2, [pc, #136]	@ (8001c28 <HAL_DMA_Abort_IT+0x3ec>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d01d      	beq.n	8001bde <HAL_DMA_Abort_IT+0x3a2>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a21      	ldr	r2, [pc, #132]	@ (8001c2c <HAL_DMA_Abort_IT+0x3f0>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d018      	beq.n	8001bde <HAL_DMA_Abort_IT+0x3a2>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a1f      	ldr	r2, [pc, #124]	@ (8001c30 <HAL_DMA_Abort_IT+0x3f4>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d013      	beq.n	8001bde <HAL_DMA_Abort_IT+0x3a2>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a1e      	ldr	r2, [pc, #120]	@ (8001c34 <HAL_DMA_Abort_IT+0x3f8>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d00e      	beq.n	8001bde <HAL_DMA_Abort_IT+0x3a2>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a1c      	ldr	r2, [pc, #112]	@ (8001c38 <HAL_DMA_Abort_IT+0x3fc>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d009      	beq.n	8001bde <HAL_DMA_Abort_IT+0x3a2>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a1b      	ldr	r2, [pc, #108]	@ (8001c3c <HAL_DMA_Abort_IT+0x400>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d004      	beq.n	8001bde <HAL_DMA_Abort_IT+0x3a2>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a19      	ldr	r2, [pc, #100]	@ (8001c40 <HAL_DMA_Abort_IT+0x404>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d132      	bne.n	8001c44 <HAL_DMA_Abort_IT+0x408>
 8001bde:	2301      	movs	r3, #1
 8001be0:	e031      	b.n	8001c46 <HAL_DMA_Abort_IT+0x40a>
 8001be2:	bf00      	nop
 8001be4:	40020010 	.word	0x40020010
 8001be8:	40020028 	.word	0x40020028
 8001bec:	40020040 	.word	0x40020040
 8001bf0:	40020058 	.word	0x40020058
 8001bf4:	40020070 	.word	0x40020070
 8001bf8:	40020088 	.word	0x40020088
 8001bfc:	400200a0 	.word	0x400200a0
 8001c00:	400200b8 	.word	0x400200b8
 8001c04:	40020410 	.word	0x40020410
 8001c08:	40020428 	.word	0x40020428
 8001c0c:	40020440 	.word	0x40020440
 8001c10:	40020458 	.word	0x40020458
 8001c14:	40020470 	.word	0x40020470
 8001c18:	40020488 	.word	0x40020488
 8001c1c:	400204a0 	.word	0x400204a0
 8001c20:	400204b8 	.word	0x400204b8
 8001c24:	58025408 	.word	0x58025408
 8001c28:	5802541c 	.word	0x5802541c
 8001c2c:	58025430 	.word	0x58025430
 8001c30:	58025444 	.word	0x58025444
 8001c34:	58025458 	.word	0x58025458
 8001c38:	5802546c 	.word	0x5802546c
 8001c3c:	58025480 	.word	0x58025480
 8001c40:	58025494 	.word	0x58025494
 8001c44:	2300      	movs	r3, #0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d028      	beq.n	8001c9c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c54:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001c58:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c5e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c64:	f003 031f 	and.w	r3, r3, #31
 8001c68:	2201      	movs	r2, #1
 8001c6a:	409a      	lsls	r2, r3
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001c74:	687a      	ldr	r2, [r7, #4]
 8001c76:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001c78:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d00c      	beq.n	8001c9c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001c8c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001c90:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c96:	687a      	ldr	r2, [r7, #4]
 8001c98:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8001c9a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d003      	beq.n	8001cbc <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001cb8:	6878      	ldr	r0, [r7, #4]
 8001cba:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8001cbc:	2300      	movs	r3, #0
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3710      	adds	r7, #16
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop

08001cc8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b08a      	sub	sp, #40	@ 0x28
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001cd4:	4b67      	ldr	r3, [pc, #412]	@ (8001e74 <HAL_DMA_IRQHandler+0x1ac>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a67      	ldr	r2, [pc, #412]	@ (8001e78 <HAL_DMA_IRQHandler+0x1b0>)
 8001cda:	fba2 2303 	umull	r2, r3, r2, r3
 8001cde:	0a9b      	lsrs	r3, r3, #10
 8001ce0:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ce6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cec:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8001cee:	6a3b      	ldr	r3, [r7, #32]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8001cf4:	69fb      	ldr	r3, [r7, #28]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a5f      	ldr	r2, [pc, #380]	@ (8001e7c <HAL_DMA_IRQHandler+0x1b4>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d04a      	beq.n	8001d9a <HAL_DMA_IRQHandler+0xd2>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a5d      	ldr	r2, [pc, #372]	@ (8001e80 <HAL_DMA_IRQHandler+0x1b8>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d045      	beq.n	8001d9a <HAL_DMA_IRQHandler+0xd2>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a5c      	ldr	r2, [pc, #368]	@ (8001e84 <HAL_DMA_IRQHandler+0x1bc>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d040      	beq.n	8001d9a <HAL_DMA_IRQHandler+0xd2>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a5a      	ldr	r2, [pc, #360]	@ (8001e88 <HAL_DMA_IRQHandler+0x1c0>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d03b      	beq.n	8001d9a <HAL_DMA_IRQHandler+0xd2>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a59      	ldr	r2, [pc, #356]	@ (8001e8c <HAL_DMA_IRQHandler+0x1c4>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d036      	beq.n	8001d9a <HAL_DMA_IRQHandler+0xd2>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a57      	ldr	r2, [pc, #348]	@ (8001e90 <HAL_DMA_IRQHandler+0x1c8>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d031      	beq.n	8001d9a <HAL_DMA_IRQHandler+0xd2>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a56      	ldr	r2, [pc, #344]	@ (8001e94 <HAL_DMA_IRQHandler+0x1cc>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d02c      	beq.n	8001d9a <HAL_DMA_IRQHandler+0xd2>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a54      	ldr	r2, [pc, #336]	@ (8001e98 <HAL_DMA_IRQHandler+0x1d0>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d027      	beq.n	8001d9a <HAL_DMA_IRQHandler+0xd2>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a53      	ldr	r2, [pc, #332]	@ (8001e9c <HAL_DMA_IRQHandler+0x1d4>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d022      	beq.n	8001d9a <HAL_DMA_IRQHandler+0xd2>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a51      	ldr	r2, [pc, #324]	@ (8001ea0 <HAL_DMA_IRQHandler+0x1d8>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d01d      	beq.n	8001d9a <HAL_DMA_IRQHandler+0xd2>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a50      	ldr	r2, [pc, #320]	@ (8001ea4 <HAL_DMA_IRQHandler+0x1dc>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d018      	beq.n	8001d9a <HAL_DMA_IRQHandler+0xd2>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a4e      	ldr	r2, [pc, #312]	@ (8001ea8 <HAL_DMA_IRQHandler+0x1e0>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d013      	beq.n	8001d9a <HAL_DMA_IRQHandler+0xd2>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a4d      	ldr	r2, [pc, #308]	@ (8001eac <HAL_DMA_IRQHandler+0x1e4>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d00e      	beq.n	8001d9a <HAL_DMA_IRQHandler+0xd2>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a4b      	ldr	r2, [pc, #300]	@ (8001eb0 <HAL_DMA_IRQHandler+0x1e8>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d009      	beq.n	8001d9a <HAL_DMA_IRQHandler+0xd2>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a4a      	ldr	r2, [pc, #296]	@ (8001eb4 <HAL_DMA_IRQHandler+0x1ec>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d004      	beq.n	8001d9a <HAL_DMA_IRQHandler+0xd2>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a48      	ldr	r2, [pc, #288]	@ (8001eb8 <HAL_DMA_IRQHandler+0x1f0>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d101      	bne.n	8001d9e <HAL_DMA_IRQHandler+0xd6>
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e000      	b.n	8001da0 <HAL_DMA_IRQHandler+0xd8>
 8001d9e:	2300      	movs	r3, #0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	f000 842b 	beq.w	80025fc <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001daa:	f003 031f 	and.w	r3, r3, #31
 8001dae:	2208      	movs	r2, #8
 8001db0:	409a      	lsls	r2, r3
 8001db2:	69bb      	ldr	r3, [r7, #24]
 8001db4:	4013      	ands	r3, r2
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	f000 80a2 	beq.w	8001f00 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a2e      	ldr	r2, [pc, #184]	@ (8001e7c <HAL_DMA_IRQHandler+0x1b4>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d04a      	beq.n	8001e5c <HAL_DMA_IRQHandler+0x194>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a2d      	ldr	r2, [pc, #180]	@ (8001e80 <HAL_DMA_IRQHandler+0x1b8>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d045      	beq.n	8001e5c <HAL_DMA_IRQHandler+0x194>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a2b      	ldr	r2, [pc, #172]	@ (8001e84 <HAL_DMA_IRQHandler+0x1bc>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d040      	beq.n	8001e5c <HAL_DMA_IRQHandler+0x194>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a2a      	ldr	r2, [pc, #168]	@ (8001e88 <HAL_DMA_IRQHandler+0x1c0>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d03b      	beq.n	8001e5c <HAL_DMA_IRQHandler+0x194>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a28      	ldr	r2, [pc, #160]	@ (8001e8c <HAL_DMA_IRQHandler+0x1c4>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d036      	beq.n	8001e5c <HAL_DMA_IRQHandler+0x194>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a27      	ldr	r2, [pc, #156]	@ (8001e90 <HAL_DMA_IRQHandler+0x1c8>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d031      	beq.n	8001e5c <HAL_DMA_IRQHandler+0x194>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a25      	ldr	r2, [pc, #148]	@ (8001e94 <HAL_DMA_IRQHandler+0x1cc>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d02c      	beq.n	8001e5c <HAL_DMA_IRQHandler+0x194>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a24      	ldr	r2, [pc, #144]	@ (8001e98 <HAL_DMA_IRQHandler+0x1d0>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d027      	beq.n	8001e5c <HAL_DMA_IRQHandler+0x194>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a22      	ldr	r2, [pc, #136]	@ (8001e9c <HAL_DMA_IRQHandler+0x1d4>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d022      	beq.n	8001e5c <HAL_DMA_IRQHandler+0x194>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a21      	ldr	r2, [pc, #132]	@ (8001ea0 <HAL_DMA_IRQHandler+0x1d8>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d01d      	beq.n	8001e5c <HAL_DMA_IRQHandler+0x194>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a1f      	ldr	r2, [pc, #124]	@ (8001ea4 <HAL_DMA_IRQHandler+0x1dc>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d018      	beq.n	8001e5c <HAL_DMA_IRQHandler+0x194>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a1e      	ldr	r2, [pc, #120]	@ (8001ea8 <HAL_DMA_IRQHandler+0x1e0>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d013      	beq.n	8001e5c <HAL_DMA_IRQHandler+0x194>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a1c      	ldr	r2, [pc, #112]	@ (8001eac <HAL_DMA_IRQHandler+0x1e4>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d00e      	beq.n	8001e5c <HAL_DMA_IRQHandler+0x194>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a1b      	ldr	r2, [pc, #108]	@ (8001eb0 <HAL_DMA_IRQHandler+0x1e8>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d009      	beq.n	8001e5c <HAL_DMA_IRQHandler+0x194>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a19      	ldr	r2, [pc, #100]	@ (8001eb4 <HAL_DMA_IRQHandler+0x1ec>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d004      	beq.n	8001e5c <HAL_DMA_IRQHandler+0x194>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a18      	ldr	r2, [pc, #96]	@ (8001eb8 <HAL_DMA_IRQHandler+0x1f0>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d12f      	bne.n	8001ebc <HAL_DMA_IRQHandler+0x1f4>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 0304 	and.w	r3, r3, #4
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	bf14      	ite	ne
 8001e6a:	2301      	movne	r3, #1
 8001e6c:	2300      	moveq	r3, #0
 8001e6e:	b2db      	uxtb	r3, r3
 8001e70:	e02e      	b.n	8001ed0 <HAL_DMA_IRQHandler+0x208>
 8001e72:	bf00      	nop
 8001e74:	24000000 	.word	0x24000000
 8001e78:	1b4e81b5 	.word	0x1b4e81b5
 8001e7c:	40020010 	.word	0x40020010
 8001e80:	40020028 	.word	0x40020028
 8001e84:	40020040 	.word	0x40020040
 8001e88:	40020058 	.word	0x40020058
 8001e8c:	40020070 	.word	0x40020070
 8001e90:	40020088 	.word	0x40020088
 8001e94:	400200a0 	.word	0x400200a0
 8001e98:	400200b8 	.word	0x400200b8
 8001e9c:	40020410 	.word	0x40020410
 8001ea0:	40020428 	.word	0x40020428
 8001ea4:	40020440 	.word	0x40020440
 8001ea8:	40020458 	.word	0x40020458
 8001eac:	40020470 	.word	0x40020470
 8001eb0:	40020488 	.word	0x40020488
 8001eb4:	400204a0 	.word	0x400204a0
 8001eb8:	400204b8 	.word	0x400204b8
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 0308 	and.w	r3, r3, #8
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	bf14      	ite	ne
 8001eca:	2301      	movne	r3, #1
 8001ecc:	2300      	moveq	r3, #0
 8001ece:	b2db      	uxtb	r3, r3
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d015      	beq.n	8001f00 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f022 0204 	bic.w	r2, r2, #4
 8001ee2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ee8:	f003 031f 	and.w	r3, r3, #31
 8001eec:	2208      	movs	r2, #8
 8001eee:	409a      	lsls	r2, r3
 8001ef0:	6a3b      	ldr	r3, [r7, #32]
 8001ef2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ef8:	f043 0201 	orr.w	r2, r3, #1
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f04:	f003 031f 	and.w	r3, r3, #31
 8001f08:	69ba      	ldr	r2, [r7, #24]
 8001f0a:	fa22 f303 	lsr.w	r3, r2, r3
 8001f0e:	f003 0301 	and.w	r3, r3, #1
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d06e      	beq.n	8001ff4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a69      	ldr	r2, [pc, #420]	@ (80020c0 <HAL_DMA_IRQHandler+0x3f8>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d04a      	beq.n	8001fb6 <HAL_DMA_IRQHandler+0x2ee>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a67      	ldr	r2, [pc, #412]	@ (80020c4 <HAL_DMA_IRQHandler+0x3fc>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d045      	beq.n	8001fb6 <HAL_DMA_IRQHandler+0x2ee>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a66      	ldr	r2, [pc, #408]	@ (80020c8 <HAL_DMA_IRQHandler+0x400>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d040      	beq.n	8001fb6 <HAL_DMA_IRQHandler+0x2ee>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a64      	ldr	r2, [pc, #400]	@ (80020cc <HAL_DMA_IRQHandler+0x404>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d03b      	beq.n	8001fb6 <HAL_DMA_IRQHandler+0x2ee>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a63      	ldr	r2, [pc, #396]	@ (80020d0 <HAL_DMA_IRQHandler+0x408>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d036      	beq.n	8001fb6 <HAL_DMA_IRQHandler+0x2ee>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a61      	ldr	r2, [pc, #388]	@ (80020d4 <HAL_DMA_IRQHandler+0x40c>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d031      	beq.n	8001fb6 <HAL_DMA_IRQHandler+0x2ee>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a60      	ldr	r2, [pc, #384]	@ (80020d8 <HAL_DMA_IRQHandler+0x410>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d02c      	beq.n	8001fb6 <HAL_DMA_IRQHandler+0x2ee>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a5e      	ldr	r2, [pc, #376]	@ (80020dc <HAL_DMA_IRQHandler+0x414>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d027      	beq.n	8001fb6 <HAL_DMA_IRQHandler+0x2ee>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a5d      	ldr	r2, [pc, #372]	@ (80020e0 <HAL_DMA_IRQHandler+0x418>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d022      	beq.n	8001fb6 <HAL_DMA_IRQHandler+0x2ee>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a5b      	ldr	r2, [pc, #364]	@ (80020e4 <HAL_DMA_IRQHandler+0x41c>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d01d      	beq.n	8001fb6 <HAL_DMA_IRQHandler+0x2ee>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a5a      	ldr	r2, [pc, #360]	@ (80020e8 <HAL_DMA_IRQHandler+0x420>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d018      	beq.n	8001fb6 <HAL_DMA_IRQHandler+0x2ee>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a58      	ldr	r2, [pc, #352]	@ (80020ec <HAL_DMA_IRQHandler+0x424>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d013      	beq.n	8001fb6 <HAL_DMA_IRQHandler+0x2ee>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a57      	ldr	r2, [pc, #348]	@ (80020f0 <HAL_DMA_IRQHandler+0x428>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d00e      	beq.n	8001fb6 <HAL_DMA_IRQHandler+0x2ee>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a55      	ldr	r2, [pc, #340]	@ (80020f4 <HAL_DMA_IRQHandler+0x42c>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d009      	beq.n	8001fb6 <HAL_DMA_IRQHandler+0x2ee>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a54      	ldr	r2, [pc, #336]	@ (80020f8 <HAL_DMA_IRQHandler+0x430>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d004      	beq.n	8001fb6 <HAL_DMA_IRQHandler+0x2ee>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a52      	ldr	r2, [pc, #328]	@ (80020fc <HAL_DMA_IRQHandler+0x434>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d10a      	bne.n	8001fcc <HAL_DMA_IRQHandler+0x304>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	695b      	ldr	r3, [r3, #20]
 8001fbc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	bf14      	ite	ne
 8001fc4:	2301      	movne	r3, #1
 8001fc6:	2300      	moveq	r3, #0
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	e003      	b.n	8001fd4 <HAL_DMA_IRQHandler+0x30c>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d00d      	beq.n	8001ff4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fdc:	f003 031f 	and.w	r3, r3, #31
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	409a      	lsls	r2, r3
 8001fe4:	6a3b      	ldr	r3, [r7, #32]
 8001fe6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fec:	f043 0202 	orr.w	r2, r3, #2
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ff8:	f003 031f 	and.w	r3, r3, #31
 8001ffc:	2204      	movs	r2, #4
 8001ffe:	409a      	lsls	r2, r3
 8002000:	69bb      	ldr	r3, [r7, #24]
 8002002:	4013      	ands	r3, r2
 8002004:	2b00      	cmp	r3, #0
 8002006:	f000 808f 	beq.w	8002128 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a2c      	ldr	r2, [pc, #176]	@ (80020c0 <HAL_DMA_IRQHandler+0x3f8>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d04a      	beq.n	80020aa <HAL_DMA_IRQHandler+0x3e2>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a2a      	ldr	r2, [pc, #168]	@ (80020c4 <HAL_DMA_IRQHandler+0x3fc>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d045      	beq.n	80020aa <HAL_DMA_IRQHandler+0x3e2>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a29      	ldr	r2, [pc, #164]	@ (80020c8 <HAL_DMA_IRQHandler+0x400>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d040      	beq.n	80020aa <HAL_DMA_IRQHandler+0x3e2>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a27      	ldr	r2, [pc, #156]	@ (80020cc <HAL_DMA_IRQHandler+0x404>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d03b      	beq.n	80020aa <HAL_DMA_IRQHandler+0x3e2>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a26      	ldr	r2, [pc, #152]	@ (80020d0 <HAL_DMA_IRQHandler+0x408>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d036      	beq.n	80020aa <HAL_DMA_IRQHandler+0x3e2>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a24      	ldr	r2, [pc, #144]	@ (80020d4 <HAL_DMA_IRQHandler+0x40c>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d031      	beq.n	80020aa <HAL_DMA_IRQHandler+0x3e2>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a23      	ldr	r2, [pc, #140]	@ (80020d8 <HAL_DMA_IRQHandler+0x410>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d02c      	beq.n	80020aa <HAL_DMA_IRQHandler+0x3e2>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a21      	ldr	r2, [pc, #132]	@ (80020dc <HAL_DMA_IRQHandler+0x414>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d027      	beq.n	80020aa <HAL_DMA_IRQHandler+0x3e2>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a20      	ldr	r2, [pc, #128]	@ (80020e0 <HAL_DMA_IRQHandler+0x418>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d022      	beq.n	80020aa <HAL_DMA_IRQHandler+0x3e2>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a1e      	ldr	r2, [pc, #120]	@ (80020e4 <HAL_DMA_IRQHandler+0x41c>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d01d      	beq.n	80020aa <HAL_DMA_IRQHandler+0x3e2>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a1d      	ldr	r2, [pc, #116]	@ (80020e8 <HAL_DMA_IRQHandler+0x420>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d018      	beq.n	80020aa <HAL_DMA_IRQHandler+0x3e2>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a1b      	ldr	r2, [pc, #108]	@ (80020ec <HAL_DMA_IRQHandler+0x424>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d013      	beq.n	80020aa <HAL_DMA_IRQHandler+0x3e2>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a1a      	ldr	r2, [pc, #104]	@ (80020f0 <HAL_DMA_IRQHandler+0x428>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d00e      	beq.n	80020aa <HAL_DMA_IRQHandler+0x3e2>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a18      	ldr	r2, [pc, #96]	@ (80020f4 <HAL_DMA_IRQHandler+0x42c>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d009      	beq.n	80020aa <HAL_DMA_IRQHandler+0x3e2>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a17      	ldr	r2, [pc, #92]	@ (80020f8 <HAL_DMA_IRQHandler+0x430>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d004      	beq.n	80020aa <HAL_DMA_IRQHandler+0x3e2>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a15      	ldr	r2, [pc, #84]	@ (80020fc <HAL_DMA_IRQHandler+0x434>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d12a      	bne.n	8002100 <HAL_DMA_IRQHandler+0x438>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 0302 	and.w	r3, r3, #2
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	bf14      	ite	ne
 80020b8:	2301      	movne	r3, #1
 80020ba:	2300      	moveq	r3, #0
 80020bc:	b2db      	uxtb	r3, r3
 80020be:	e023      	b.n	8002108 <HAL_DMA_IRQHandler+0x440>
 80020c0:	40020010 	.word	0x40020010
 80020c4:	40020028 	.word	0x40020028
 80020c8:	40020040 	.word	0x40020040
 80020cc:	40020058 	.word	0x40020058
 80020d0:	40020070 	.word	0x40020070
 80020d4:	40020088 	.word	0x40020088
 80020d8:	400200a0 	.word	0x400200a0
 80020dc:	400200b8 	.word	0x400200b8
 80020e0:	40020410 	.word	0x40020410
 80020e4:	40020428 	.word	0x40020428
 80020e8:	40020440 	.word	0x40020440
 80020ec:	40020458 	.word	0x40020458
 80020f0:	40020470 	.word	0x40020470
 80020f4:	40020488 	.word	0x40020488
 80020f8:	400204a0 	.word	0x400204a0
 80020fc:	400204b8 	.word	0x400204b8
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	2300      	movs	r3, #0
 8002108:	2b00      	cmp	r3, #0
 800210a:	d00d      	beq.n	8002128 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002110:	f003 031f 	and.w	r3, r3, #31
 8002114:	2204      	movs	r2, #4
 8002116:	409a      	lsls	r2, r3
 8002118:	6a3b      	ldr	r3, [r7, #32]
 800211a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002120:	f043 0204 	orr.w	r2, r3, #4
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800212c:	f003 031f 	and.w	r3, r3, #31
 8002130:	2210      	movs	r2, #16
 8002132:	409a      	lsls	r2, r3
 8002134:	69bb      	ldr	r3, [r7, #24]
 8002136:	4013      	ands	r3, r2
 8002138:	2b00      	cmp	r3, #0
 800213a:	f000 80a6 	beq.w	800228a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a85      	ldr	r2, [pc, #532]	@ (8002358 <HAL_DMA_IRQHandler+0x690>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d04a      	beq.n	80021de <HAL_DMA_IRQHandler+0x516>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a83      	ldr	r2, [pc, #524]	@ (800235c <HAL_DMA_IRQHandler+0x694>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d045      	beq.n	80021de <HAL_DMA_IRQHandler+0x516>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a82      	ldr	r2, [pc, #520]	@ (8002360 <HAL_DMA_IRQHandler+0x698>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d040      	beq.n	80021de <HAL_DMA_IRQHandler+0x516>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a80      	ldr	r2, [pc, #512]	@ (8002364 <HAL_DMA_IRQHandler+0x69c>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d03b      	beq.n	80021de <HAL_DMA_IRQHandler+0x516>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a7f      	ldr	r2, [pc, #508]	@ (8002368 <HAL_DMA_IRQHandler+0x6a0>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d036      	beq.n	80021de <HAL_DMA_IRQHandler+0x516>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a7d      	ldr	r2, [pc, #500]	@ (800236c <HAL_DMA_IRQHandler+0x6a4>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d031      	beq.n	80021de <HAL_DMA_IRQHandler+0x516>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a7c      	ldr	r2, [pc, #496]	@ (8002370 <HAL_DMA_IRQHandler+0x6a8>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d02c      	beq.n	80021de <HAL_DMA_IRQHandler+0x516>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a7a      	ldr	r2, [pc, #488]	@ (8002374 <HAL_DMA_IRQHandler+0x6ac>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d027      	beq.n	80021de <HAL_DMA_IRQHandler+0x516>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a79      	ldr	r2, [pc, #484]	@ (8002378 <HAL_DMA_IRQHandler+0x6b0>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d022      	beq.n	80021de <HAL_DMA_IRQHandler+0x516>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a77      	ldr	r2, [pc, #476]	@ (800237c <HAL_DMA_IRQHandler+0x6b4>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d01d      	beq.n	80021de <HAL_DMA_IRQHandler+0x516>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a76      	ldr	r2, [pc, #472]	@ (8002380 <HAL_DMA_IRQHandler+0x6b8>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d018      	beq.n	80021de <HAL_DMA_IRQHandler+0x516>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a74      	ldr	r2, [pc, #464]	@ (8002384 <HAL_DMA_IRQHandler+0x6bc>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d013      	beq.n	80021de <HAL_DMA_IRQHandler+0x516>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a73      	ldr	r2, [pc, #460]	@ (8002388 <HAL_DMA_IRQHandler+0x6c0>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d00e      	beq.n	80021de <HAL_DMA_IRQHandler+0x516>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a71      	ldr	r2, [pc, #452]	@ (800238c <HAL_DMA_IRQHandler+0x6c4>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d009      	beq.n	80021de <HAL_DMA_IRQHandler+0x516>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a70      	ldr	r2, [pc, #448]	@ (8002390 <HAL_DMA_IRQHandler+0x6c8>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d004      	beq.n	80021de <HAL_DMA_IRQHandler+0x516>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a6e      	ldr	r2, [pc, #440]	@ (8002394 <HAL_DMA_IRQHandler+0x6cc>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d10a      	bne.n	80021f4 <HAL_DMA_IRQHandler+0x52c>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 0308 	and.w	r3, r3, #8
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	bf14      	ite	ne
 80021ec:	2301      	movne	r3, #1
 80021ee:	2300      	moveq	r3, #0
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	e009      	b.n	8002208 <HAL_DMA_IRQHandler+0x540>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 0304 	and.w	r3, r3, #4
 80021fe:	2b00      	cmp	r3, #0
 8002200:	bf14      	ite	ne
 8002202:	2301      	movne	r3, #1
 8002204:	2300      	moveq	r3, #0
 8002206:	b2db      	uxtb	r3, r3
 8002208:	2b00      	cmp	r3, #0
 800220a:	d03e      	beq.n	800228a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002210:	f003 031f 	and.w	r3, r3, #31
 8002214:	2210      	movs	r2, #16
 8002216:	409a      	lsls	r2, r3
 8002218:	6a3b      	ldr	r3, [r7, #32]
 800221a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002226:	2b00      	cmp	r3, #0
 8002228:	d018      	beq.n	800225c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002234:	2b00      	cmp	r3, #0
 8002236:	d108      	bne.n	800224a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800223c:	2b00      	cmp	r3, #0
 800223e:	d024      	beq.n	800228a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002244:	6878      	ldr	r0, [r7, #4]
 8002246:	4798      	blx	r3
 8002248:	e01f      	b.n	800228a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800224e:	2b00      	cmp	r3, #0
 8002250:	d01b      	beq.n	800228a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	4798      	blx	r3
 800225a:	e016      	b.n	800228a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002266:	2b00      	cmp	r3, #0
 8002268:	d107      	bne.n	800227a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f022 0208 	bic.w	r2, r2, #8
 8002278:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800227e:	2b00      	cmp	r3, #0
 8002280:	d003      	beq.n	800228a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800228e:	f003 031f 	and.w	r3, r3, #31
 8002292:	2220      	movs	r2, #32
 8002294:	409a      	lsls	r2, r3
 8002296:	69bb      	ldr	r3, [r7, #24]
 8002298:	4013      	ands	r3, r2
 800229a:	2b00      	cmp	r3, #0
 800229c:	f000 8110 	beq.w	80024c0 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a2c      	ldr	r2, [pc, #176]	@ (8002358 <HAL_DMA_IRQHandler+0x690>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d04a      	beq.n	8002340 <HAL_DMA_IRQHandler+0x678>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a2b      	ldr	r2, [pc, #172]	@ (800235c <HAL_DMA_IRQHandler+0x694>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d045      	beq.n	8002340 <HAL_DMA_IRQHandler+0x678>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a29      	ldr	r2, [pc, #164]	@ (8002360 <HAL_DMA_IRQHandler+0x698>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d040      	beq.n	8002340 <HAL_DMA_IRQHandler+0x678>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a28      	ldr	r2, [pc, #160]	@ (8002364 <HAL_DMA_IRQHandler+0x69c>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d03b      	beq.n	8002340 <HAL_DMA_IRQHandler+0x678>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a26      	ldr	r2, [pc, #152]	@ (8002368 <HAL_DMA_IRQHandler+0x6a0>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d036      	beq.n	8002340 <HAL_DMA_IRQHandler+0x678>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a25      	ldr	r2, [pc, #148]	@ (800236c <HAL_DMA_IRQHandler+0x6a4>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d031      	beq.n	8002340 <HAL_DMA_IRQHandler+0x678>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a23      	ldr	r2, [pc, #140]	@ (8002370 <HAL_DMA_IRQHandler+0x6a8>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d02c      	beq.n	8002340 <HAL_DMA_IRQHandler+0x678>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a22      	ldr	r2, [pc, #136]	@ (8002374 <HAL_DMA_IRQHandler+0x6ac>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d027      	beq.n	8002340 <HAL_DMA_IRQHandler+0x678>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a20      	ldr	r2, [pc, #128]	@ (8002378 <HAL_DMA_IRQHandler+0x6b0>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d022      	beq.n	8002340 <HAL_DMA_IRQHandler+0x678>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a1f      	ldr	r2, [pc, #124]	@ (800237c <HAL_DMA_IRQHandler+0x6b4>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d01d      	beq.n	8002340 <HAL_DMA_IRQHandler+0x678>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a1d      	ldr	r2, [pc, #116]	@ (8002380 <HAL_DMA_IRQHandler+0x6b8>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d018      	beq.n	8002340 <HAL_DMA_IRQHandler+0x678>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a1c      	ldr	r2, [pc, #112]	@ (8002384 <HAL_DMA_IRQHandler+0x6bc>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d013      	beq.n	8002340 <HAL_DMA_IRQHandler+0x678>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a1a      	ldr	r2, [pc, #104]	@ (8002388 <HAL_DMA_IRQHandler+0x6c0>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d00e      	beq.n	8002340 <HAL_DMA_IRQHandler+0x678>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a19      	ldr	r2, [pc, #100]	@ (800238c <HAL_DMA_IRQHandler+0x6c4>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d009      	beq.n	8002340 <HAL_DMA_IRQHandler+0x678>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a17      	ldr	r2, [pc, #92]	@ (8002390 <HAL_DMA_IRQHandler+0x6c8>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d004      	beq.n	8002340 <HAL_DMA_IRQHandler+0x678>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a16      	ldr	r2, [pc, #88]	@ (8002394 <HAL_DMA_IRQHandler+0x6cc>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d12b      	bne.n	8002398 <HAL_DMA_IRQHandler+0x6d0>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 0310 	and.w	r3, r3, #16
 800234a:	2b00      	cmp	r3, #0
 800234c:	bf14      	ite	ne
 800234e:	2301      	movne	r3, #1
 8002350:	2300      	moveq	r3, #0
 8002352:	b2db      	uxtb	r3, r3
 8002354:	e02a      	b.n	80023ac <HAL_DMA_IRQHandler+0x6e4>
 8002356:	bf00      	nop
 8002358:	40020010 	.word	0x40020010
 800235c:	40020028 	.word	0x40020028
 8002360:	40020040 	.word	0x40020040
 8002364:	40020058 	.word	0x40020058
 8002368:	40020070 	.word	0x40020070
 800236c:	40020088 	.word	0x40020088
 8002370:	400200a0 	.word	0x400200a0
 8002374:	400200b8 	.word	0x400200b8
 8002378:	40020410 	.word	0x40020410
 800237c:	40020428 	.word	0x40020428
 8002380:	40020440 	.word	0x40020440
 8002384:	40020458 	.word	0x40020458
 8002388:	40020470 	.word	0x40020470
 800238c:	40020488 	.word	0x40020488
 8002390:	400204a0 	.word	0x400204a0
 8002394:	400204b8 	.word	0x400204b8
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 0302 	and.w	r3, r3, #2
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	bf14      	ite	ne
 80023a6:	2301      	movne	r3, #1
 80023a8:	2300      	moveq	r3, #0
 80023aa:	b2db      	uxtb	r3, r3
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	f000 8087 	beq.w	80024c0 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023b6:	f003 031f 	and.w	r3, r3, #31
 80023ba:	2220      	movs	r2, #32
 80023bc:	409a      	lsls	r2, r3
 80023be:	6a3b      	ldr	r3, [r7, #32]
 80023c0:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	2b04      	cmp	r3, #4
 80023cc:	d139      	bne.n	8002442 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	681a      	ldr	r2, [r3, #0]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f022 0216 	bic.w	r2, r2, #22
 80023dc:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	695a      	ldr	r2, [r3, #20]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80023ec:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d103      	bne.n	80023fe <HAL_DMA_IRQHandler+0x736>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d007      	beq.n	800240e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f022 0208 	bic.w	r2, r2, #8
 800240c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002412:	f003 031f 	and.w	r3, r3, #31
 8002416:	223f      	movs	r2, #63	@ 0x3f
 8002418:	409a      	lsls	r2, r3
 800241a:	6a3b      	ldr	r3, [r7, #32]
 800241c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2201      	movs	r2, #1
 8002422:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2200      	movs	r2, #0
 800242a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002432:	2b00      	cmp	r3, #0
 8002434:	f000 8382 	beq.w	8002b3c <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800243c:	6878      	ldr	r0, [r7, #4]
 800243e:	4798      	blx	r3
          }
          return;
 8002440:	e37c      	b.n	8002b3c <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800244c:	2b00      	cmp	r3, #0
 800244e:	d018      	beq.n	8002482 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800245a:	2b00      	cmp	r3, #0
 800245c:	d108      	bne.n	8002470 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002462:	2b00      	cmp	r3, #0
 8002464:	d02c      	beq.n	80024c0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	4798      	blx	r3
 800246e:	e027      	b.n	80024c0 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002474:	2b00      	cmp	r3, #0
 8002476:	d023      	beq.n	80024c0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800247c:	6878      	ldr	r0, [r7, #4]
 800247e:	4798      	blx	r3
 8002480:	e01e      	b.n	80024c0 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800248c:	2b00      	cmp	r3, #0
 800248e:	d10f      	bne.n	80024b0 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f022 0210 	bic.w	r2, r2, #16
 800249e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2201      	movs	r2, #1
 80024a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2200      	movs	r2, #0
 80024ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d003      	beq.n	80024c0 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024bc:	6878      	ldr	r0, [r7, #4]
 80024be:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	f000 833e 	beq.w	8002b46 <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024ce:	f003 0301 	and.w	r3, r3, #1
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	f000 8088 	beq.w	80025e8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2204      	movs	r2, #4
 80024dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a89      	ldr	r2, [pc, #548]	@ (800270c <HAL_DMA_IRQHandler+0xa44>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d04a      	beq.n	8002580 <HAL_DMA_IRQHandler+0x8b8>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a88      	ldr	r2, [pc, #544]	@ (8002710 <HAL_DMA_IRQHandler+0xa48>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d045      	beq.n	8002580 <HAL_DMA_IRQHandler+0x8b8>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a86      	ldr	r2, [pc, #536]	@ (8002714 <HAL_DMA_IRQHandler+0xa4c>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d040      	beq.n	8002580 <HAL_DMA_IRQHandler+0x8b8>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a85      	ldr	r2, [pc, #532]	@ (8002718 <HAL_DMA_IRQHandler+0xa50>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d03b      	beq.n	8002580 <HAL_DMA_IRQHandler+0x8b8>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a83      	ldr	r2, [pc, #524]	@ (800271c <HAL_DMA_IRQHandler+0xa54>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d036      	beq.n	8002580 <HAL_DMA_IRQHandler+0x8b8>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a82      	ldr	r2, [pc, #520]	@ (8002720 <HAL_DMA_IRQHandler+0xa58>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d031      	beq.n	8002580 <HAL_DMA_IRQHandler+0x8b8>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a80      	ldr	r2, [pc, #512]	@ (8002724 <HAL_DMA_IRQHandler+0xa5c>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d02c      	beq.n	8002580 <HAL_DMA_IRQHandler+0x8b8>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a7f      	ldr	r2, [pc, #508]	@ (8002728 <HAL_DMA_IRQHandler+0xa60>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d027      	beq.n	8002580 <HAL_DMA_IRQHandler+0x8b8>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a7d      	ldr	r2, [pc, #500]	@ (800272c <HAL_DMA_IRQHandler+0xa64>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d022      	beq.n	8002580 <HAL_DMA_IRQHandler+0x8b8>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a7c      	ldr	r2, [pc, #496]	@ (8002730 <HAL_DMA_IRQHandler+0xa68>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d01d      	beq.n	8002580 <HAL_DMA_IRQHandler+0x8b8>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a7a      	ldr	r2, [pc, #488]	@ (8002734 <HAL_DMA_IRQHandler+0xa6c>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d018      	beq.n	8002580 <HAL_DMA_IRQHandler+0x8b8>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a79      	ldr	r2, [pc, #484]	@ (8002738 <HAL_DMA_IRQHandler+0xa70>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d013      	beq.n	8002580 <HAL_DMA_IRQHandler+0x8b8>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a77      	ldr	r2, [pc, #476]	@ (800273c <HAL_DMA_IRQHandler+0xa74>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d00e      	beq.n	8002580 <HAL_DMA_IRQHandler+0x8b8>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a76      	ldr	r2, [pc, #472]	@ (8002740 <HAL_DMA_IRQHandler+0xa78>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d009      	beq.n	8002580 <HAL_DMA_IRQHandler+0x8b8>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a74      	ldr	r2, [pc, #464]	@ (8002744 <HAL_DMA_IRQHandler+0xa7c>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d004      	beq.n	8002580 <HAL_DMA_IRQHandler+0x8b8>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a73      	ldr	r2, [pc, #460]	@ (8002748 <HAL_DMA_IRQHandler+0xa80>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d108      	bne.n	8002592 <HAL_DMA_IRQHandler+0x8ca>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f022 0201 	bic.w	r2, r2, #1
 800258e:	601a      	str	r2, [r3, #0]
 8002590:	e007      	b.n	80025a2 <HAL_DMA_IRQHandler+0x8da>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f022 0201 	bic.w	r2, r2, #1
 80025a0:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	3301      	adds	r3, #1
 80025a6:	60fb      	str	r3, [r7, #12]
 80025a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025aa:	429a      	cmp	r2, r3
 80025ac:	d307      	bcc.n	80025be <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f003 0301 	and.w	r3, r3, #1
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d1f2      	bne.n	80025a2 <HAL_DMA_IRQHandler+0x8da>
 80025bc:	e000      	b.n	80025c0 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80025be:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 0301 	and.w	r3, r3, #1
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d004      	beq.n	80025d8 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2203      	movs	r2, #3
 80025d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 80025d6:	e003      	b.n	80025e0 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2201      	movs	r2, #1
 80025dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2200      	movs	r2, #0
 80025e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	f000 82aa 	beq.w	8002b46 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025f6:	6878      	ldr	r0, [r7, #4]
 80025f8:	4798      	blx	r3
 80025fa:	e2a4      	b.n	8002b46 <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a52      	ldr	r2, [pc, #328]	@ (800274c <HAL_DMA_IRQHandler+0xa84>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d04a      	beq.n	800269c <HAL_DMA_IRQHandler+0x9d4>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a51      	ldr	r2, [pc, #324]	@ (8002750 <HAL_DMA_IRQHandler+0xa88>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d045      	beq.n	800269c <HAL_DMA_IRQHandler+0x9d4>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a4f      	ldr	r2, [pc, #316]	@ (8002754 <HAL_DMA_IRQHandler+0xa8c>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d040      	beq.n	800269c <HAL_DMA_IRQHandler+0x9d4>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a4e      	ldr	r2, [pc, #312]	@ (8002758 <HAL_DMA_IRQHandler+0xa90>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d03b      	beq.n	800269c <HAL_DMA_IRQHandler+0x9d4>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a4c      	ldr	r2, [pc, #304]	@ (800275c <HAL_DMA_IRQHandler+0xa94>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d036      	beq.n	800269c <HAL_DMA_IRQHandler+0x9d4>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a4b      	ldr	r2, [pc, #300]	@ (8002760 <HAL_DMA_IRQHandler+0xa98>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d031      	beq.n	800269c <HAL_DMA_IRQHandler+0x9d4>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a49      	ldr	r2, [pc, #292]	@ (8002764 <HAL_DMA_IRQHandler+0xa9c>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d02c      	beq.n	800269c <HAL_DMA_IRQHandler+0x9d4>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a48      	ldr	r2, [pc, #288]	@ (8002768 <HAL_DMA_IRQHandler+0xaa0>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d027      	beq.n	800269c <HAL_DMA_IRQHandler+0x9d4>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a46      	ldr	r2, [pc, #280]	@ (800276c <HAL_DMA_IRQHandler+0xaa4>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d022      	beq.n	800269c <HAL_DMA_IRQHandler+0x9d4>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a45      	ldr	r2, [pc, #276]	@ (8002770 <HAL_DMA_IRQHandler+0xaa8>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d01d      	beq.n	800269c <HAL_DMA_IRQHandler+0x9d4>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a43      	ldr	r2, [pc, #268]	@ (8002774 <HAL_DMA_IRQHandler+0xaac>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d018      	beq.n	800269c <HAL_DMA_IRQHandler+0x9d4>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a42      	ldr	r2, [pc, #264]	@ (8002778 <HAL_DMA_IRQHandler+0xab0>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d013      	beq.n	800269c <HAL_DMA_IRQHandler+0x9d4>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a40      	ldr	r2, [pc, #256]	@ (800277c <HAL_DMA_IRQHandler+0xab4>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d00e      	beq.n	800269c <HAL_DMA_IRQHandler+0x9d4>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a3f      	ldr	r2, [pc, #252]	@ (8002780 <HAL_DMA_IRQHandler+0xab8>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d009      	beq.n	800269c <HAL_DMA_IRQHandler+0x9d4>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a3d      	ldr	r2, [pc, #244]	@ (8002784 <HAL_DMA_IRQHandler+0xabc>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d004      	beq.n	800269c <HAL_DMA_IRQHandler+0x9d4>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a3c      	ldr	r2, [pc, #240]	@ (8002788 <HAL_DMA_IRQHandler+0xac0>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d101      	bne.n	80026a0 <HAL_DMA_IRQHandler+0x9d8>
 800269c:	2301      	movs	r3, #1
 800269e:	e000      	b.n	80026a2 <HAL_DMA_IRQHandler+0x9da>
 80026a0:	2300      	movs	r3, #0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	f000 824f 	beq.w	8002b46 <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026b4:	f003 031f 	and.w	r3, r3, #31
 80026b8:	2204      	movs	r2, #4
 80026ba:	409a      	lsls	r2, r3
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	4013      	ands	r3, r2
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	f000 80dd 	beq.w	8002880 <HAL_DMA_IRQHandler+0xbb8>
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	f003 0304 	and.w	r3, r3, #4
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	f000 80d7 	beq.w	8002880 <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026d6:	f003 031f 	and.w	r3, r3, #31
 80026da:	2204      	movs	r2, #4
 80026dc:	409a      	lsls	r2, r3
 80026de:	69fb      	ldr	r3, [r7, #28]
 80026e0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d059      	beq.n	80027a0 <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d14a      	bne.n	800278c <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	f000 8220 	beq.w	8002b40 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002704:	6878      	ldr	r0, [r7, #4]
 8002706:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002708:	e21a      	b.n	8002b40 <HAL_DMA_IRQHandler+0xe78>
 800270a:	bf00      	nop
 800270c:	40020010 	.word	0x40020010
 8002710:	40020028 	.word	0x40020028
 8002714:	40020040 	.word	0x40020040
 8002718:	40020058 	.word	0x40020058
 800271c:	40020070 	.word	0x40020070
 8002720:	40020088 	.word	0x40020088
 8002724:	400200a0 	.word	0x400200a0
 8002728:	400200b8 	.word	0x400200b8
 800272c:	40020410 	.word	0x40020410
 8002730:	40020428 	.word	0x40020428
 8002734:	40020440 	.word	0x40020440
 8002738:	40020458 	.word	0x40020458
 800273c:	40020470 	.word	0x40020470
 8002740:	40020488 	.word	0x40020488
 8002744:	400204a0 	.word	0x400204a0
 8002748:	400204b8 	.word	0x400204b8
 800274c:	48022c08 	.word	0x48022c08
 8002750:	48022c1c 	.word	0x48022c1c
 8002754:	48022c30 	.word	0x48022c30
 8002758:	48022c44 	.word	0x48022c44
 800275c:	48022c58 	.word	0x48022c58
 8002760:	48022c6c 	.word	0x48022c6c
 8002764:	48022c80 	.word	0x48022c80
 8002768:	48022c94 	.word	0x48022c94
 800276c:	58025408 	.word	0x58025408
 8002770:	5802541c 	.word	0x5802541c
 8002774:	58025430 	.word	0x58025430
 8002778:	58025444 	.word	0x58025444
 800277c:	58025458 	.word	0x58025458
 8002780:	5802546c 	.word	0x5802546c
 8002784:	58025480 	.word	0x58025480
 8002788:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002790:	2b00      	cmp	r3, #0
 8002792:	f000 81d5 	beq.w	8002b40 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800279e:	e1cf      	b.n	8002b40 <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	f003 0320 	and.w	r3, r3, #32
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d160      	bne.n	800286c <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a7f      	ldr	r2, [pc, #508]	@ (80029ac <HAL_DMA_IRQHandler+0xce4>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d04a      	beq.n	800284a <HAL_DMA_IRQHandler+0xb82>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a7d      	ldr	r2, [pc, #500]	@ (80029b0 <HAL_DMA_IRQHandler+0xce8>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d045      	beq.n	800284a <HAL_DMA_IRQHandler+0xb82>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a7c      	ldr	r2, [pc, #496]	@ (80029b4 <HAL_DMA_IRQHandler+0xcec>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d040      	beq.n	800284a <HAL_DMA_IRQHandler+0xb82>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a7a      	ldr	r2, [pc, #488]	@ (80029b8 <HAL_DMA_IRQHandler+0xcf0>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d03b      	beq.n	800284a <HAL_DMA_IRQHandler+0xb82>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a79      	ldr	r2, [pc, #484]	@ (80029bc <HAL_DMA_IRQHandler+0xcf4>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d036      	beq.n	800284a <HAL_DMA_IRQHandler+0xb82>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a77      	ldr	r2, [pc, #476]	@ (80029c0 <HAL_DMA_IRQHandler+0xcf8>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d031      	beq.n	800284a <HAL_DMA_IRQHandler+0xb82>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a76      	ldr	r2, [pc, #472]	@ (80029c4 <HAL_DMA_IRQHandler+0xcfc>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d02c      	beq.n	800284a <HAL_DMA_IRQHandler+0xb82>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a74      	ldr	r2, [pc, #464]	@ (80029c8 <HAL_DMA_IRQHandler+0xd00>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d027      	beq.n	800284a <HAL_DMA_IRQHandler+0xb82>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a73      	ldr	r2, [pc, #460]	@ (80029cc <HAL_DMA_IRQHandler+0xd04>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d022      	beq.n	800284a <HAL_DMA_IRQHandler+0xb82>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a71      	ldr	r2, [pc, #452]	@ (80029d0 <HAL_DMA_IRQHandler+0xd08>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d01d      	beq.n	800284a <HAL_DMA_IRQHandler+0xb82>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a70      	ldr	r2, [pc, #448]	@ (80029d4 <HAL_DMA_IRQHandler+0xd0c>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d018      	beq.n	800284a <HAL_DMA_IRQHandler+0xb82>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a6e      	ldr	r2, [pc, #440]	@ (80029d8 <HAL_DMA_IRQHandler+0xd10>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d013      	beq.n	800284a <HAL_DMA_IRQHandler+0xb82>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a6d      	ldr	r2, [pc, #436]	@ (80029dc <HAL_DMA_IRQHandler+0xd14>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d00e      	beq.n	800284a <HAL_DMA_IRQHandler+0xb82>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a6b      	ldr	r2, [pc, #428]	@ (80029e0 <HAL_DMA_IRQHandler+0xd18>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d009      	beq.n	800284a <HAL_DMA_IRQHandler+0xb82>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a6a      	ldr	r2, [pc, #424]	@ (80029e4 <HAL_DMA_IRQHandler+0xd1c>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d004      	beq.n	800284a <HAL_DMA_IRQHandler+0xb82>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a68      	ldr	r2, [pc, #416]	@ (80029e8 <HAL_DMA_IRQHandler+0xd20>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d108      	bne.n	800285c <HAL_DMA_IRQHandler+0xb94>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f022 0208 	bic.w	r2, r2, #8
 8002858:	601a      	str	r2, [r3, #0]
 800285a:	e007      	b.n	800286c <HAL_DMA_IRQHandler+0xba4>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f022 0204 	bic.w	r2, r2, #4
 800286a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002870:	2b00      	cmp	r3, #0
 8002872:	f000 8165 	beq.w	8002b40 <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800287e:	e15f      	b.n	8002b40 <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002884:	f003 031f 	and.w	r3, r3, #31
 8002888:	2202      	movs	r2, #2
 800288a:	409a      	lsls	r2, r3
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	4013      	ands	r3, r2
 8002890:	2b00      	cmp	r3, #0
 8002892:	f000 80c5 	beq.w	8002a20 <HAL_DMA_IRQHandler+0xd58>
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	f003 0302 	and.w	r3, r3, #2
 800289c:	2b00      	cmp	r3, #0
 800289e:	f000 80bf 	beq.w	8002a20 <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028a6:	f003 031f 	and.w	r3, r3, #31
 80028aa:	2202      	movs	r2, #2
 80028ac:	409a      	lsls	r2, r3
 80028ae:	69fb      	ldr	r3, [r7, #28]
 80028b0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d018      	beq.n	80028ee <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d109      	bne.n	80028da <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	f000 813a 	beq.w	8002b44 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028d4:	6878      	ldr	r0, [r7, #4]
 80028d6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80028d8:	e134      	b.n	8002b44 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028de:	2b00      	cmp	r3, #0
 80028e0:	f000 8130 	beq.w	8002b44 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028e8:	6878      	ldr	r0, [r7, #4]
 80028ea:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80028ec:	e12a      	b.n	8002b44 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	f003 0320 	and.w	r3, r3, #32
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	f040 8089 	bne.w	8002a0c <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a2b      	ldr	r2, [pc, #172]	@ (80029ac <HAL_DMA_IRQHandler+0xce4>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d04a      	beq.n	800299a <HAL_DMA_IRQHandler+0xcd2>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a29      	ldr	r2, [pc, #164]	@ (80029b0 <HAL_DMA_IRQHandler+0xce8>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d045      	beq.n	800299a <HAL_DMA_IRQHandler+0xcd2>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a28      	ldr	r2, [pc, #160]	@ (80029b4 <HAL_DMA_IRQHandler+0xcec>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d040      	beq.n	800299a <HAL_DMA_IRQHandler+0xcd2>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a26      	ldr	r2, [pc, #152]	@ (80029b8 <HAL_DMA_IRQHandler+0xcf0>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d03b      	beq.n	800299a <HAL_DMA_IRQHandler+0xcd2>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a25      	ldr	r2, [pc, #148]	@ (80029bc <HAL_DMA_IRQHandler+0xcf4>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d036      	beq.n	800299a <HAL_DMA_IRQHandler+0xcd2>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a23      	ldr	r2, [pc, #140]	@ (80029c0 <HAL_DMA_IRQHandler+0xcf8>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d031      	beq.n	800299a <HAL_DMA_IRQHandler+0xcd2>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a22      	ldr	r2, [pc, #136]	@ (80029c4 <HAL_DMA_IRQHandler+0xcfc>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d02c      	beq.n	800299a <HAL_DMA_IRQHandler+0xcd2>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a20      	ldr	r2, [pc, #128]	@ (80029c8 <HAL_DMA_IRQHandler+0xd00>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d027      	beq.n	800299a <HAL_DMA_IRQHandler+0xcd2>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a1f      	ldr	r2, [pc, #124]	@ (80029cc <HAL_DMA_IRQHandler+0xd04>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d022      	beq.n	800299a <HAL_DMA_IRQHandler+0xcd2>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a1d      	ldr	r2, [pc, #116]	@ (80029d0 <HAL_DMA_IRQHandler+0xd08>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d01d      	beq.n	800299a <HAL_DMA_IRQHandler+0xcd2>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a1c      	ldr	r2, [pc, #112]	@ (80029d4 <HAL_DMA_IRQHandler+0xd0c>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d018      	beq.n	800299a <HAL_DMA_IRQHandler+0xcd2>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a1a      	ldr	r2, [pc, #104]	@ (80029d8 <HAL_DMA_IRQHandler+0xd10>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d013      	beq.n	800299a <HAL_DMA_IRQHandler+0xcd2>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a19      	ldr	r2, [pc, #100]	@ (80029dc <HAL_DMA_IRQHandler+0xd14>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d00e      	beq.n	800299a <HAL_DMA_IRQHandler+0xcd2>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a17      	ldr	r2, [pc, #92]	@ (80029e0 <HAL_DMA_IRQHandler+0xd18>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d009      	beq.n	800299a <HAL_DMA_IRQHandler+0xcd2>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a16      	ldr	r2, [pc, #88]	@ (80029e4 <HAL_DMA_IRQHandler+0xd1c>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d004      	beq.n	800299a <HAL_DMA_IRQHandler+0xcd2>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a14      	ldr	r2, [pc, #80]	@ (80029e8 <HAL_DMA_IRQHandler+0xd20>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d128      	bne.n	80029ec <HAL_DMA_IRQHandler+0xd24>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f022 0214 	bic.w	r2, r2, #20
 80029a8:	601a      	str	r2, [r3, #0]
 80029aa:	e027      	b.n	80029fc <HAL_DMA_IRQHandler+0xd34>
 80029ac:	40020010 	.word	0x40020010
 80029b0:	40020028 	.word	0x40020028
 80029b4:	40020040 	.word	0x40020040
 80029b8:	40020058 	.word	0x40020058
 80029bc:	40020070 	.word	0x40020070
 80029c0:	40020088 	.word	0x40020088
 80029c4:	400200a0 	.word	0x400200a0
 80029c8:	400200b8 	.word	0x400200b8
 80029cc:	40020410 	.word	0x40020410
 80029d0:	40020428 	.word	0x40020428
 80029d4:	40020440 	.word	0x40020440
 80029d8:	40020458 	.word	0x40020458
 80029dc:	40020470 	.word	0x40020470
 80029e0:	40020488 	.word	0x40020488
 80029e4:	400204a0 	.word	0x400204a0
 80029e8:	400204b8 	.word	0x400204b8
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f022 020a 	bic.w	r2, r2, #10
 80029fa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2201      	movs	r2, #1
 8002a00:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2200      	movs	r2, #0
 8002a08:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	f000 8097 	beq.w	8002b44 <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002a1e:	e091      	b.n	8002b44 <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a24:	f003 031f 	and.w	r3, r3, #31
 8002a28:	2208      	movs	r2, #8
 8002a2a:	409a      	lsls	r2, r3
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	4013      	ands	r3, r2
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	f000 8088 	beq.w	8002b46 <HAL_DMA_IRQHandler+0xe7e>
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	f003 0308 	and.w	r3, r3, #8
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	f000 8082 	beq.w	8002b46 <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a41      	ldr	r2, [pc, #260]	@ (8002b4c <HAL_DMA_IRQHandler+0xe84>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d04a      	beq.n	8002ae2 <HAL_DMA_IRQHandler+0xe1a>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a3f      	ldr	r2, [pc, #252]	@ (8002b50 <HAL_DMA_IRQHandler+0xe88>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d045      	beq.n	8002ae2 <HAL_DMA_IRQHandler+0xe1a>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a3e      	ldr	r2, [pc, #248]	@ (8002b54 <HAL_DMA_IRQHandler+0xe8c>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d040      	beq.n	8002ae2 <HAL_DMA_IRQHandler+0xe1a>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a3c      	ldr	r2, [pc, #240]	@ (8002b58 <HAL_DMA_IRQHandler+0xe90>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d03b      	beq.n	8002ae2 <HAL_DMA_IRQHandler+0xe1a>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a3b      	ldr	r2, [pc, #236]	@ (8002b5c <HAL_DMA_IRQHandler+0xe94>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d036      	beq.n	8002ae2 <HAL_DMA_IRQHandler+0xe1a>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a39      	ldr	r2, [pc, #228]	@ (8002b60 <HAL_DMA_IRQHandler+0xe98>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d031      	beq.n	8002ae2 <HAL_DMA_IRQHandler+0xe1a>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a38      	ldr	r2, [pc, #224]	@ (8002b64 <HAL_DMA_IRQHandler+0xe9c>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d02c      	beq.n	8002ae2 <HAL_DMA_IRQHandler+0xe1a>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a36      	ldr	r2, [pc, #216]	@ (8002b68 <HAL_DMA_IRQHandler+0xea0>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d027      	beq.n	8002ae2 <HAL_DMA_IRQHandler+0xe1a>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a35      	ldr	r2, [pc, #212]	@ (8002b6c <HAL_DMA_IRQHandler+0xea4>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d022      	beq.n	8002ae2 <HAL_DMA_IRQHandler+0xe1a>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a33      	ldr	r2, [pc, #204]	@ (8002b70 <HAL_DMA_IRQHandler+0xea8>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d01d      	beq.n	8002ae2 <HAL_DMA_IRQHandler+0xe1a>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a32      	ldr	r2, [pc, #200]	@ (8002b74 <HAL_DMA_IRQHandler+0xeac>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d018      	beq.n	8002ae2 <HAL_DMA_IRQHandler+0xe1a>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a30      	ldr	r2, [pc, #192]	@ (8002b78 <HAL_DMA_IRQHandler+0xeb0>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d013      	beq.n	8002ae2 <HAL_DMA_IRQHandler+0xe1a>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a2f      	ldr	r2, [pc, #188]	@ (8002b7c <HAL_DMA_IRQHandler+0xeb4>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d00e      	beq.n	8002ae2 <HAL_DMA_IRQHandler+0xe1a>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a2d      	ldr	r2, [pc, #180]	@ (8002b80 <HAL_DMA_IRQHandler+0xeb8>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d009      	beq.n	8002ae2 <HAL_DMA_IRQHandler+0xe1a>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a2c      	ldr	r2, [pc, #176]	@ (8002b84 <HAL_DMA_IRQHandler+0xebc>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d004      	beq.n	8002ae2 <HAL_DMA_IRQHandler+0xe1a>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a2a      	ldr	r2, [pc, #168]	@ (8002b88 <HAL_DMA_IRQHandler+0xec0>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d108      	bne.n	8002af4 <HAL_DMA_IRQHandler+0xe2c>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f022 021c 	bic.w	r2, r2, #28
 8002af0:	601a      	str	r2, [r3, #0]
 8002af2:	e007      	b.n	8002b04 <HAL_DMA_IRQHandler+0xe3c>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f022 020e 	bic.w	r2, r2, #14
 8002b02:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b08:	f003 031f 	and.w	r3, r3, #31
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	409a      	lsls	r2, r3
 8002b10:	69fb      	ldr	r3, [r7, #28]
 8002b12:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2201      	movs	r2, #1
 8002b18:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2200      	movs	r2, #0
 8002b26:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d009      	beq.n	8002b46 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b36:	6878      	ldr	r0, [r7, #4]
 8002b38:	4798      	blx	r3
 8002b3a:	e004      	b.n	8002b46 <HAL_DMA_IRQHandler+0xe7e>
          return;
 8002b3c:	bf00      	nop
 8002b3e:	e002      	b.n	8002b46 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002b40:	bf00      	nop
 8002b42:	e000      	b.n	8002b46 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002b44:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8002b46:	3728      	adds	r7, #40	@ 0x28
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}
 8002b4c:	40020010 	.word	0x40020010
 8002b50:	40020028 	.word	0x40020028
 8002b54:	40020040 	.word	0x40020040
 8002b58:	40020058 	.word	0x40020058
 8002b5c:	40020070 	.word	0x40020070
 8002b60:	40020088 	.word	0x40020088
 8002b64:	400200a0 	.word	0x400200a0
 8002b68:	400200b8 	.word	0x400200b8
 8002b6c:	40020410 	.word	0x40020410
 8002b70:	40020428 	.word	0x40020428
 8002b74:	40020440 	.word	0x40020440
 8002b78:	40020458 	.word	0x40020458
 8002b7c:	40020470 	.word	0x40020470
 8002b80:	40020488 	.word	0x40020488
 8002b84:	400204a0 	.word	0x400204a0
 8002b88:	400204b8 	.word	0x400204b8

08002b8c <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b083      	sub	sp, #12
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002b9a:	b2db      	uxtb	r3, r3
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	370c      	adds	r7, #12
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba6:	4770      	bx	lr

08002ba8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b085      	sub	sp, #20
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a42      	ldr	r2, [pc, #264]	@ (8002cc0 <DMA_CalcBaseAndBitshift+0x118>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d04a      	beq.n	8002c50 <DMA_CalcBaseAndBitshift+0xa8>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a41      	ldr	r2, [pc, #260]	@ (8002cc4 <DMA_CalcBaseAndBitshift+0x11c>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d045      	beq.n	8002c50 <DMA_CalcBaseAndBitshift+0xa8>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a3f      	ldr	r2, [pc, #252]	@ (8002cc8 <DMA_CalcBaseAndBitshift+0x120>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d040      	beq.n	8002c50 <DMA_CalcBaseAndBitshift+0xa8>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a3e      	ldr	r2, [pc, #248]	@ (8002ccc <DMA_CalcBaseAndBitshift+0x124>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d03b      	beq.n	8002c50 <DMA_CalcBaseAndBitshift+0xa8>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a3c      	ldr	r2, [pc, #240]	@ (8002cd0 <DMA_CalcBaseAndBitshift+0x128>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d036      	beq.n	8002c50 <DMA_CalcBaseAndBitshift+0xa8>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a3b      	ldr	r2, [pc, #236]	@ (8002cd4 <DMA_CalcBaseAndBitshift+0x12c>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d031      	beq.n	8002c50 <DMA_CalcBaseAndBitshift+0xa8>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a39      	ldr	r2, [pc, #228]	@ (8002cd8 <DMA_CalcBaseAndBitshift+0x130>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d02c      	beq.n	8002c50 <DMA_CalcBaseAndBitshift+0xa8>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a38      	ldr	r2, [pc, #224]	@ (8002cdc <DMA_CalcBaseAndBitshift+0x134>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d027      	beq.n	8002c50 <DMA_CalcBaseAndBitshift+0xa8>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a36      	ldr	r2, [pc, #216]	@ (8002ce0 <DMA_CalcBaseAndBitshift+0x138>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d022      	beq.n	8002c50 <DMA_CalcBaseAndBitshift+0xa8>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a35      	ldr	r2, [pc, #212]	@ (8002ce4 <DMA_CalcBaseAndBitshift+0x13c>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d01d      	beq.n	8002c50 <DMA_CalcBaseAndBitshift+0xa8>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a33      	ldr	r2, [pc, #204]	@ (8002ce8 <DMA_CalcBaseAndBitshift+0x140>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d018      	beq.n	8002c50 <DMA_CalcBaseAndBitshift+0xa8>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a32      	ldr	r2, [pc, #200]	@ (8002cec <DMA_CalcBaseAndBitshift+0x144>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d013      	beq.n	8002c50 <DMA_CalcBaseAndBitshift+0xa8>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a30      	ldr	r2, [pc, #192]	@ (8002cf0 <DMA_CalcBaseAndBitshift+0x148>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d00e      	beq.n	8002c50 <DMA_CalcBaseAndBitshift+0xa8>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a2f      	ldr	r2, [pc, #188]	@ (8002cf4 <DMA_CalcBaseAndBitshift+0x14c>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d009      	beq.n	8002c50 <DMA_CalcBaseAndBitshift+0xa8>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a2d      	ldr	r2, [pc, #180]	@ (8002cf8 <DMA_CalcBaseAndBitshift+0x150>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d004      	beq.n	8002c50 <DMA_CalcBaseAndBitshift+0xa8>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a2c      	ldr	r2, [pc, #176]	@ (8002cfc <DMA_CalcBaseAndBitshift+0x154>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d101      	bne.n	8002c54 <DMA_CalcBaseAndBitshift+0xac>
 8002c50:	2301      	movs	r3, #1
 8002c52:	e000      	b.n	8002c56 <DMA_CalcBaseAndBitshift+0xae>
 8002c54:	2300      	movs	r3, #0
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d024      	beq.n	8002ca4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	b2db      	uxtb	r3, r3
 8002c60:	3b10      	subs	r3, #16
 8002c62:	4a27      	ldr	r2, [pc, #156]	@ (8002d00 <DMA_CalcBaseAndBitshift+0x158>)
 8002c64:	fba2 2303 	umull	r2, r3, r2, r3
 8002c68:	091b      	lsrs	r3, r3, #4
 8002c6a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	f003 0307 	and.w	r3, r3, #7
 8002c72:	4a24      	ldr	r2, [pc, #144]	@ (8002d04 <DMA_CalcBaseAndBitshift+0x15c>)
 8002c74:	5cd3      	ldrb	r3, [r2, r3]
 8002c76:	461a      	mov	r2, r3
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	2b03      	cmp	r3, #3
 8002c80:	d908      	bls.n	8002c94 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	461a      	mov	r2, r3
 8002c88:	4b1f      	ldr	r3, [pc, #124]	@ (8002d08 <DMA_CalcBaseAndBitshift+0x160>)
 8002c8a:	4013      	ands	r3, r2
 8002c8c:	1d1a      	adds	r2, r3, #4
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	659a      	str	r2, [r3, #88]	@ 0x58
 8002c92:	e00d      	b.n	8002cb0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	461a      	mov	r2, r3
 8002c9a:	4b1b      	ldr	r3, [pc, #108]	@ (8002d08 <DMA_CalcBaseAndBitshift+0x160>)
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	687a      	ldr	r2, [r7, #4]
 8002ca0:	6593      	str	r3, [r2, #88]	@ 0x58
 8002ca2:	e005      	b.n	8002cb0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	3714      	adds	r7, #20
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr
 8002cc0:	40020010 	.word	0x40020010
 8002cc4:	40020028 	.word	0x40020028
 8002cc8:	40020040 	.word	0x40020040
 8002ccc:	40020058 	.word	0x40020058
 8002cd0:	40020070 	.word	0x40020070
 8002cd4:	40020088 	.word	0x40020088
 8002cd8:	400200a0 	.word	0x400200a0
 8002cdc:	400200b8 	.word	0x400200b8
 8002ce0:	40020410 	.word	0x40020410
 8002ce4:	40020428 	.word	0x40020428
 8002ce8:	40020440 	.word	0x40020440
 8002cec:	40020458 	.word	0x40020458
 8002cf0:	40020470 	.word	0x40020470
 8002cf4:	40020488 	.word	0x40020488
 8002cf8:	400204a0 	.word	0x400204a0
 8002cfc:	400204b8 	.word	0x400204b8
 8002d00:	aaaaaaab 	.word	0xaaaaaaab
 8002d04:	08008a1c 	.word	0x08008a1c
 8002d08:	fffffc00 	.word	0xfffffc00

08002d0c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b085      	sub	sp, #20
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d14:	2300      	movs	r3, #0
 8002d16:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	699b      	ldr	r3, [r3, #24]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d120      	bne.n	8002d62 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d24:	2b03      	cmp	r3, #3
 8002d26:	d858      	bhi.n	8002dda <DMA_CheckFifoParam+0xce>
 8002d28:	a201      	add	r2, pc, #4	@ (adr r2, 8002d30 <DMA_CheckFifoParam+0x24>)
 8002d2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d2e:	bf00      	nop
 8002d30:	08002d41 	.word	0x08002d41
 8002d34:	08002d53 	.word	0x08002d53
 8002d38:	08002d41 	.word	0x08002d41
 8002d3c:	08002ddb 	.word	0x08002ddb
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d44:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d048      	beq.n	8002dde <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002d50:	e045      	b.n	8002dde <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d56:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002d5a:	d142      	bne.n	8002de2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002d60:	e03f      	b.n	8002de2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	699b      	ldr	r3, [r3, #24]
 8002d66:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d6a:	d123      	bne.n	8002db4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d70:	2b03      	cmp	r3, #3
 8002d72:	d838      	bhi.n	8002de6 <DMA_CheckFifoParam+0xda>
 8002d74:	a201      	add	r2, pc, #4	@ (adr r2, 8002d7c <DMA_CheckFifoParam+0x70>)
 8002d76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d7a:	bf00      	nop
 8002d7c:	08002d8d 	.word	0x08002d8d
 8002d80:	08002d93 	.word	0x08002d93
 8002d84:	08002d8d 	.word	0x08002d8d
 8002d88:	08002da5 	.word	0x08002da5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	73fb      	strb	r3, [r7, #15]
        break;
 8002d90:	e030      	b.n	8002df4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d96:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d025      	beq.n	8002dea <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002da2:	e022      	b.n	8002dea <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002da8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002dac:	d11f      	bne.n	8002dee <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002db2:	e01c      	b.n	8002dee <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002db8:	2b02      	cmp	r3, #2
 8002dba:	d902      	bls.n	8002dc2 <DMA_CheckFifoParam+0xb6>
 8002dbc:	2b03      	cmp	r3, #3
 8002dbe:	d003      	beq.n	8002dc8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8002dc0:	e018      	b.n	8002df4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	73fb      	strb	r3, [r7, #15]
        break;
 8002dc6:	e015      	b.n	8002df4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dcc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d00e      	beq.n	8002df2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	73fb      	strb	r3, [r7, #15]
    break;
 8002dd8:	e00b      	b.n	8002df2 <DMA_CheckFifoParam+0xe6>
        break;
 8002dda:	bf00      	nop
 8002ddc:	e00a      	b.n	8002df4 <DMA_CheckFifoParam+0xe8>
        break;
 8002dde:	bf00      	nop
 8002de0:	e008      	b.n	8002df4 <DMA_CheckFifoParam+0xe8>
        break;
 8002de2:	bf00      	nop
 8002de4:	e006      	b.n	8002df4 <DMA_CheckFifoParam+0xe8>
        break;
 8002de6:	bf00      	nop
 8002de8:	e004      	b.n	8002df4 <DMA_CheckFifoParam+0xe8>
        break;
 8002dea:	bf00      	nop
 8002dec:	e002      	b.n	8002df4 <DMA_CheckFifoParam+0xe8>
        break;
 8002dee:	bf00      	nop
 8002df0:	e000      	b.n	8002df4 <DMA_CheckFifoParam+0xe8>
    break;
 8002df2:	bf00      	nop
    }
  }

  return status;
 8002df4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3714      	adds	r7, #20
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr
 8002e02:	bf00      	nop

08002e04 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b085      	sub	sp, #20
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a38      	ldr	r2, [pc, #224]	@ (8002ef8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d022      	beq.n	8002e62 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a36      	ldr	r2, [pc, #216]	@ (8002efc <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d01d      	beq.n	8002e62 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a35      	ldr	r2, [pc, #212]	@ (8002f00 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d018      	beq.n	8002e62 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a33      	ldr	r2, [pc, #204]	@ (8002f04 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d013      	beq.n	8002e62 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a32      	ldr	r2, [pc, #200]	@ (8002f08 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d00e      	beq.n	8002e62 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a30      	ldr	r2, [pc, #192]	@ (8002f0c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d009      	beq.n	8002e62 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a2f      	ldr	r2, [pc, #188]	@ (8002f10 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d004      	beq.n	8002e62 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a2d      	ldr	r2, [pc, #180]	@ (8002f14 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d101      	bne.n	8002e66 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8002e62:	2301      	movs	r3, #1
 8002e64:	e000      	b.n	8002e68 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8002e66:	2300      	movs	r3, #0
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d01a      	beq.n	8002ea2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	3b08      	subs	r3, #8
 8002e74:	4a28      	ldr	r2, [pc, #160]	@ (8002f18 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8002e76:	fba2 2303 	umull	r2, r3, r2, r3
 8002e7a:	091b      	lsrs	r3, r3, #4
 8002e7c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8002e7e:	68fa      	ldr	r2, [r7, #12]
 8002e80:	4b26      	ldr	r3, [pc, #152]	@ (8002f1c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8002e82:	4413      	add	r3, r2
 8002e84:	009b      	lsls	r3, r3, #2
 8002e86:	461a      	mov	r2, r3
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	4a24      	ldr	r2, [pc, #144]	@ (8002f20 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8002e90:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	f003 031f 	and.w	r3, r3, #31
 8002e98:	2201      	movs	r2, #1
 8002e9a:	409a      	lsls	r2, r3
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8002ea0:	e024      	b.n	8002eec <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	b2db      	uxtb	r3, r3
 8002ea8:	3b10      	subs	r3, #16
 8002eaa:	4a1e      	ldr	r2, [pc, #120]	@ (8002f24 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8002eac:	fba2 2303 	umull	r2, r3, r2, r3
 8002eb0:	091b      	lsrs	r3, r3, #4
 8002eb2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	4a1c      	ldr	r2, [pc, #112]	@ (8002f28 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d806      	bhi.n	8002eca <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	4a1b      	ldr	r2, [pc, #108]	@ (8002f2c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d902      	bls.n	8002eca <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	3308      	adds	r3, #8
 8002ec8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8002eca:	68fa      	ldr	r2, [r7, #12]
 8002ecc:	4b18      	ldr	r3, [pc, #96]	@ (8002f30 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8002ece:	4413      	add	r3, r2
 8002ed0:	009b      	lsls	r3, r3, #2
 8002ed2:	461a      	mov	r2, r3
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	4a16      	ldr	r2, [pc, #88]	@ (8002f34 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8002edc:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	f003 031f 	and.w	r3, r3, #31
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	409a      	lsls	r2, r3
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8002eec:	bf00      	nop
 8002eee:	3714      	adds	r7, #20
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef6:	4770      	bx	lr
 8002ef8:	58025408 	.word	0x58025408
 8002efc:	5802541c 	.word	0x5802541c
 8002f00:	58025430 	.word	0x58025430
 8002f04:	58025444 	.word	0x58025444
 8002f08:	58025458 	.word	0x58025458
 8002f0c:	5802546c 	.word	0x5802546c
 8002f10:	58025480 	.word	0x58025480
 8002f14:	58025494 	.word	0x58025494
 8002f18:	cccccccd 	.word	0xcccccccd
 8002f1c:	16009600 	.word	0x16009600
 8002f20:	58025880 	.word	0x58025880
 8002f24:	aaaaaaab 	.word	0xaaaaaaab
 8002f28:	400204b8 	.word	0x400204b8
 8002f2c:	4002040f 	.word	0x4002040f
 8002f30:	10008200 	.word	0x10008200
 8002f34:	40020880 	.word	0x40020880

08002f38 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b085      	sub	sp, #20
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d04a      	beq.n	8002fe4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2b08      	cmp	r3, #8
 8002f52:	d847      	bhi.n	8002fe4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a25      	ldr	r2, [pc, #148]	@ (8002ff0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d022      	beq.n	8002fa4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a24      	ldr	r2, [pc, #144]	@ (8002ff4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d01d      	beq.n	8002fa4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a22      	ldr	r2, [pc, #136]	@ (8002ff8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d018      	beq.n	8002fa4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a21      	ldr	r2, [pc, #132]	@ (8002ffc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d013      	beq.n	8002fa4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a1f      	ldr	r2, [pc, #124]	@ (8003000 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d00e      	beq.n	8002fa4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a1e      	ldr	r2, [pc, #120]	@ (8003004 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d009      	beq.n	8002fa4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a1c      	ldr	r2, [pc, #112]	@ (8003008 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d004      	beq.n	8002fa4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a1b      	ldr	r2, [pc, #108]	@ (800300c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d101      	bne.n	8002fa8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e000      	b.n	8002faa <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8002fa8:	2300      	movs	r3, #0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d00a      	beq.n	8002fc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8002fae:	68fa      	ldr	r2, [r7, #12]
 8002fb0:	4b17      	ldr	r3, [pc, #92]	@ (8003010 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8002fb2:	4413      	add	r3, r2
 8002fb4:	009b      	lsls	r3, r3, #2
 8002fb6:	461a      	mov	r2, r3
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	4a15      	ldr	r2, [pc, #84]	@ (8003014 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8002fc0:	671a      	str	r2, [r3, #112]	@ 0x70
 8002fc2:	e009      	b.n	8002fd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002fc4:	68fa      	ldr	r2, [r7, #12]
 8002fc6:	4b14      	ldr	r3, [pc, #80]	@ (8003018 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8002fc8:	4413      	add	r3, r2
 8002fca:	009b      	lsls	r3, r3, #2
 8002fcc:	461a      	mov	r2, r3
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	4a11      	ldr	r2, [pc, #68]	@ (800301c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8002fd6:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	3b01      	subs	r3, #1
 8002fdc:	2201      	movs	r2, #1
 8002fde:	409a      	lsls	r2, r3
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8002fe4:	bf00      	nop
 8002fe6:	3714      	adds	r7, #20
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fee:	4770      	bx	lr
 8002ff0:	58025408 	.word	0x58025408
 8002ff4:	5802541c 	.word	0x5802541c
 8002ff8:	58025430 	.word	0x58025430
 8002ffc:	58025444 	.word	0x58025444
 8003000:	58025458 	.word	0x58025458
 8003004:	5802546c 	.word	0x5802546c
 8003008:	58025480 	.word	0x58025480
 800300c:	58025494 	.word	0x58025494
 8003010:	1600963f 	.word	0x1600963f
 8003014:	58025940 	.word	0x58025940
 8003018:	1000823f 	.word	0x1000823f
 800301c:	40020940 	.word	0x40020940

08003020 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003020:	b480      	push	{r7}
 8003022:	b089      	sub	sp, #36	@ 0x24
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
 8003028:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800302a:	2300      	movs	r3, #0
 800302c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800302e:	4b89      	ldr	r3, [pc, #548]	@ (8003254 <HAL_GPIO_Init+0x234>)
 8003030:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003032:	e194      	b.n	800335e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	2101      	movs	r1, #1
 800303a:	69fb      	ldr	r3, [r7, #28]
 800303c:	fa01 f303 	lsl.w	r3, r1, r3
 8003040:	4013      	ands	r3, r2
 8003042:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	2b00      	cmp	r3, #0
 8003048:	f000 8186 	beq.w	8003358 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	f003 0303 	and.w	r3, r3, #3
 8003054:	2b01      	cmp	r3, #1
 8003056:	d005      	beq.n	8003064 <HAL_GPIO_Init+0x44>
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	f003 0303 	and.w	r3, r3, #3
 8003060:	2b02      	cmp	r3, #2
 8003062:	d130      	bne.n	80030c6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800306a:	69fb      	ldr	r3, [r7, #28]
 800306c:	005b      	lsls	r3, r3, #1
 800306e:	2203      	movs	r2, #3
 8003070:	fa02 f303 	lsl.w	r3, r2, r3
 8003074:	43db      	mvns	r3, r3
 8003076:	69ba      	ldr	r2, [r7, #24]
 8003078:	4013      	ands	r3, r2
 800307a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	68da      	ldr	r2, [r3, #12]
 8003080:	69fb      	ldr	r3, [r7, #28]
 8003082:	005b      	lsls	r3, r3, #1
 8003084:	fa02 f303 	lsl.w	r3, r2, r3
 8003088:	69ba      	ldr	r2, [r7, #24]
 800308a:	4313      	orrs	r3, r2
 800308c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	69ba      	ldr	r2, [r7, #24]
 8003092:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800309a:	2201      	movs	r2, #1
 800309c:	69fb      	ldr	r3, [r7, #28]
 800309e:	fa02 f303 	lsl.w	r3, r2, r3
 80030a2:	43db      	mvns	r3, r3
 80030a4:	69ba      	ldr	r2, [r7, #24]
 80030a6:	4013      	ands	r3, r2
 80030a8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	091b      	lsrs	r3, r3, #4
 80030b0:	f003 0201 	and.w	r2, r3, #1
 80030b4:	69fb      	ldr	r3, [r7, #28]
 80030b6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ba:	69ba      	ldr	r2, [r7, #24]
 80030bc:	4313      	orrs	r3, r2
 80030be:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	69ba      	ldr	r2, [r7, #24]
 80030c4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	f003 0303 	and.w	r3, r3, #3
 80030ce:	2b03      	cmp	r3, #3
 80030d0:	d017      	beq.n	8003102 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	68db      	ldr	r3, [r3, #12]
 80030d6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80030d8:	69fb      	ldr	r3, [r7, #28]
 80030da:	005b      	lsls	r3, r3, #1
 80030dc:	2203      	movs	r2, #3
 80030de:	fa02 f303 	lsl.w	r3, r2, r3
 80030e2:	43db      	mvns	r3, r3
 80030e4:	69ba      	ldr	r2, [r7, #24]
 80030e6:	4013      	ands	r3, r2
 80030e8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	689a      	ldr	r2, [r3, #8]
 80030ee:	69fb      	ldr	r3, [r7, #28]
 80030f0:	005b      	lsls	r3, r3, #1
 80030f2:	fa02 f303 	lsl.w	r3, r2, r3
 80030f6:	69ba      	ldr	r2, [r7, #24]
 80030f8:	4313      	orrs	r3, r2
 80030fa:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	69ba      	ldr	r2, [r7, #24]
 8003100:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	f003 0303 	and.w	r3, r3, #3
 800310a:	2b02      	cmp	r3, #2
 800310c:	d123      	bne.n	8003156 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	08da      	lsrs	r2, r3, #3
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	3208      	adds	r2, #8
 8003116:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800311a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800311c:	69fb      	ldr	r3, [r7, #28]
 800311e:	f003 0307 	and.w	r3, r3, #7
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	220f      	movs	r2, #15
 8003126:	fa02 f303 	lsl.w	r3, r2, r3
 800312a:	43db      	mvns	r3, r3
 800312c:	69ba      	ldr	r2, [r7, #24]
 800312e:	4013      	ands	r3, r2
 8003130:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	691a      	ldr	r2, [r3, #16]
 8003136:	69fb      	ldr	r3, [r7, #28]
 8003138:	f003 0307 	and.w	r3, r3, #7
 800313c:	009b      	lsls	r3, r3, #2
 800313e:	fa02 f303 	lsl.w	r3, r2, r3
 8003142:	69ba      	ldr	r2, [r7, #24]
 8003144:	4313      	orrs	r3, r2
 8003146:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003148:	69fb      	ldr	r3, [r7, #28]
 800314a:	08da      	lsrs	r2, r3, #3
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	3208      	adds	r2, #8
 8003150:	69b9      	ldr	r1, [r7, #24]
 8003152:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800315c:	69fb      	ldr	r3, [r7, #28]
 800315e:	005b      	lsls	r3, r3, #1
 8003160:	2203      	movs	r2, #3
 8003162:	fa02 f303 	lsl.w	r3, r2, r3
 8003166:	43db      	mvns	r3, r3
 8003168:	69ba      	ldr	r2, [r7, #24]
 800316a:	4013      	ands	r3, r2
 800316c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	f003 0203 	and.w	r2, r3, #3
 8003176:	69fb      	ldr	r3, [r7, #28]
 8003178:	005b      	lsls	r3, r3, #1
 800317a:	fa02 f303 	lsl.w	r3, r2, r3
 800317e:	69ba      	ldr	r2, [r7, #24]
 8003180:	4313      	orrs	r3, r2
 8003182:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	69ba      	ldr	r2, [r7, #24]
 8003188:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003192:	2b00      	cmp	r3, #0
 8003194:	f000 80e0 	beq.w	8003358 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003198:	4b2f      	ldr	r3, [pc, #188]	@ (8003258 <HAL_GPIO_Init+0x238>)
 800319a:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800319e:	4a2e      	ldr	r2, [pc, #184]	@ (8003258 <HAL_GPIO_Init+0x238>)
 80031a0:	f043 0302 	orr.w	r3, r3, #2
 80031a4:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 80031a8:	4b2b      	ldr	r3, [pc, #172]	@ (8003258 <HAL_GPIO_Init+0x238>)
 80031aa:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80031ae:	f003 0302 	and.w	r3, r3, #2
 80031b2:	60fb      	str	r3, [r7, #12]
 80031b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80031b6:	4a29      	ldr	r2, [pc, #164]	@ (800325c <HAL_GPIO_Init+0x23c>)
 80031b8:	69fb      	ldr	r3, [r7, #28]
 80031ba:	089b      	lsrs	r3, r3, #2
 80031bc:	3302      	adds	r3, #2
 80031be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80031c4:	69fb      	ldr	r3, [r7, #28]
 80031c6:	f003 0303 	and.w	r3, r3, #3
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	220f      	movs	r2, #15
 80031ce:	fa02 f303 	lsl.w	r3, r2, r3
 80031d2:	43db      	mvns	r3, r3
 80031d4:	69ba      	ldr	r2, [r7, #24]
 80031d6:	4013      	ands	r3, r2
 80031d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	4a20      	ldr	r2, [pc, #128]	@ (8003260 <HAL_GPIO_Init+0x240>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d052      	beq.n	8003288 <HAL_GPIO_Init+0x268>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	4a1f      	ldr	r2, [pc, #124]	@ (8003264 <HAL_GPIO_Init+0x244>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d031      	beq.n	800324e <HAL_GPIO_Init+0x22e>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	4a1e      	ldr	r2, [pc, #120]	@ (8003268 <HAL_GPIO_Init+0x248>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d02b      	beq.n	800324a <HAL_GPIO_Init+0x22a>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	4a1d      	ldr	r2, [pc, #116]	@ (800326c <HAL_GPIO_Init+0x24c>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d025      	beq.n	8003246 <HAL_GPIO_Init+0x226>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	4a1c      	ldr	r2, [pc, #112]	@ (8003270 <HAL_GPIO_Init+0x250>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d01f      	beq.n	8003242 <HAL_GPIO_Init+0x222>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	4a1b      	ldr	r2, [pc, #108]	@ (8003274 <HAL_GPIO_Init+0x254>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d019      	beq.n	800323e <HAL_GPIO_Init+0x21e>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	4a1a      	ldr	r2, [pc, #104]	@ (8003278 <HAL_GPIO_Init+0x258>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d013      	beq.n	800323a <HAL_GPIO_Init+0x21a>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	4a19      	ldr	r2, [pc, #100]	@ (800327c <HAL_GPIO_Init+0x25c>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d00d      	beq.n	8003236 <HAL_GPIO_Init+0x216>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	4a18      	ldr	r2, [pc, #96]	@ (8003280 <HAL_GPIO_Init+0x260>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d007      	beq.n	8003232 <HAL_GPIO_Init+0x212>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	4a17      	ldr	r2, [pc, #92]	@ (8003284 <HAL_GPIO_Init+0x264>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d101      	bne.n	800322e <HAL_GPIO_Init+0x20e>
 800322a:	2309      	movs	r3, #9
 800322c:	e02d      	b.n	800328a <HAL_GPIO_Init+0x26a>
 800322e:	230a      	movs	r3, #10
 8003230:	e02b      	b.n	800328a <HAL_GPIO_Init+0x26a>
 8003232:	2308      	movs	r3, #8
 8003234:	e029      	b.n	800328a <HAL_GPIO_Init+0x26a>
 8003236:	2307      	movs	r3, #7
 8003238:	e027      	b.n	800328a <HAL_GPIO_Init+0x26a>
 800323a:	2306      	movs	r3, #6
 800323c:	e025      	b.n	800328a <HAL_GPIO_Init+0x26a>
 800323e:	2305      	movs	r3, #5
 8003240:	e023      	b.n	800328a <HAL_GPIO_Init+0x26a>
 8003242:	2304      	movs	r3, #4
 8003244:	e021      	b.n	800328a <HAL_GPIO_Init+0x26a>
 8003246:	2303      	movs	r3, #3
 8003248:	e01f      	b.n	800328a <HAL_GPIO_Init+0x26a>
 800324a:	2302      	movs	r3, #2
 800324c:	e01d      	b.n	800328a <HAL_GPIO_Init+0x26a>
 800324e:	2301      	movs	r3, #1
 8003250:	e01b      	b.n	800328a <HAL_GPIO_Init+0x26a>
 8003252:	bf00      	nop
 8003254:	58000080 	.word	0x58000080
 8003258:	58024400 	.word	0x58024400
 800325c:	58000400 	.word	0x58000400
 8003260:	58020000 	.word	0x58020000
 8003264:	58020400 	.word	0x58020400
 8003268:	58020800 	.word	0x58020800
 800326c:	58020c00 	.word	0x58020c00
 8003270:	58021000 	.word	0x58021000
 8003274:	58021400 	.word	0x58021400
 8003278:	58021800 	.word	0x58021800
 800327c:	58021c00 	.word	0x58021c00
 8003280:	58022000 	.word	0x58022000
 8003284:	58022400 	.word	0x58022400
 8003288:	2300      	movs	r3, #0
 800328a:	69fa      	ldr	r2, [r7, #28]
 800328c:	f002 0203 	and.w	r2, r2, #3
 8003290:	0092      	lsls	r2, r2, #2
 8003292:	4093      	lsls	r3, r2
 8003294:	69ba      	ldr	r2, [r7, #24]
 8003296:	4313      	orrs	r3, r2
 8003298:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800329a:	4938      	ldr	r1, [pc, #224]	@ (800337c <HAL_GPIO_Init+0x35c>)
 800329c:	69fb      	ldr	r3, [r7, #28]
 800329e:	089b      	lsrs	r3, r3, #2
 80032a0:	3302      	adds	r3, #2
 80032a2:	69ba      	ldr	r2, [r7, #24]
 80032a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80032a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	43db      	mvns	r3, r3
 80032b4:	69ba      	ldr	r2, [r7, #24]
 80032b6:	4013      	ands	r3, r2
 80032b8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d003      	beq.n	80032ce <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80032c6:	69ba      	ldr	r2, [r7, #24]
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	4313      	orrs	r3, r2
 80032cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80032ce:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80032d2:	69bb      	ldr	r3, [r7, #24]
 80032d4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80032d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	43db      	mvns	r3, r3
 80032e2:	69ba      	ldr	r2, [r7, #24]
 80032e4:	4013      	ands	r3, r2
 80032e6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d003      	beq.n	80032fc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80032f4:	69ba      	ldr	r2, [r7, #24]
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	4313      	orrs	r3, r2
 80032fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80032fc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003300:	69bb      	ldr	r3, [r7, #24]
 8003302:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	43db      	mvns	r3, r3
 800330e:	69ba      	ldr	r2, [r7, #24]
 8003310:	4013      	ands	r3, r2
 8003312:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800331c:	2b00      	cmp	r3, #0
 800331e:	d003      	beq.n	8003328 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003320:	69ba      	ldr	r2, [r7, #24]
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	4313      	orrs	r3, r2
 8003326:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	69ba      	ldr	r2, [r7, #24]
 800332c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	43db      	mvns	r3, r3
 8003338:	69ba      	ldr	r2, [r7, #24]
 800333a:	4013      	ands	r3, r2
 800333c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003346:	2b00      	cmp	r3, #0
 8003348:	d003      	beq.n	8003352 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800334a:	69ba      	ldr	r2, [r7, #24]
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	4313      	orrs	r3, r2
 8003350:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	69ba      	ldr	r2, [r7, #24]
 8003356:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003358:	69fb      	ldr	r3, [r7, #28]
 800335a:	3301      	adds	r3, #1
 800335c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	69fb      	ldr	r3, [r7, #28]
 8003364:	fa22 f303 	lsr.w	r3, r2, r3
 8003368:	2b00      	cmp	r3, #0
 800336a:	f47f ae63 	bne.w	8003034 <HAL_GPIO_Init+0x14>
  }
}
 800336e:	bf00      	nop
 8003370:	bf00      	nop
 8003372:	3724      	adds	r7, #36	@ 0x24
 8003374:	46bd      	mov	sp, r7
 8003376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337a:	4770      	bx	lr
 800337c:	58000400 	.word	0x58000400

08003380 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b082      	sub	sp, #8
 8003384:	af00      	add	r7, sp, #0
 8003386:	4603      	mov	r3, r0
 8003388:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 800338a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800338e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003392:	88fb      	ldrh	r3, [r7, #6]
 8003394:	4013      	ands	r3, r2
 8003396:	2b00      	cmp	r3, #0
 8003398:	d008      	beq.n	80033ac <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800339a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800339e:	88fb      	ldrh	r3, [r7, #6]
 80033a0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80033a4:	88fb      	ldrh	r3, [r7, #6]
 80033a6:	4618      	mov	r0, r3
 80033a8:	f000 f804 	bl	80033b4 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 80033ac:	bf00      	nop
 80033ae:	3708      	adds	r7, #8
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}

080033b4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b083      	sub	sp, #12
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	4603      	mov	r3, r0
 80033bc:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80033be:	bf00      	nop
 80033c0:	370c      	adds	r7, #12
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr
	...

080033cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b082      	sub	sp, #8
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d101      	bne.n	80033de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	e08b      	b.n	80034f6 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d106      	bne.n	80033f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2200      	movs	r2, #0
 80033ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f7fd f9a0 	bl	8000738 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2224      	movs	r2, #36	@ 0x24
 80033fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f022 0201 	bic.w	r2, r2, #1
 800340e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	685a      	ldr	r2, [r3, #4]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800341c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	689a      	ldr	r2, [r3, #8]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800342c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	68db      	ldr	r3, [r3, #12]
 8003432:	2b01      	cmp	r3, #1
 8003434:	d107      	bne.n	8003446 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	689a      	ldr	r2, [r3, #8]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003442:	609a      	str	r2, [r3, #8]
 8003444:	e006      	b.n	8003454 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	689a      	ldr	r2, [r3, #8]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003452:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	68db      	ldr	r3, [r3, #12]
 8003458:	2b02      	cmp	r3, #2
 800345a:	d108      	bne.n	800346e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	685a      	ldr	r2, [r3, #4]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800346a:	605a      	str	r2, [r3, #4]
 800346c:	e007      	b.n	800347e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	685a      	ldr	r2, [r3, #4]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800347c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	6859      	ldr	r1, [r3, #4]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	4b1d      	ldr	r3, [pc, #116]	@ (8003500 <HAL_I2C_Init+0x134>)
 800348a:	430b      	orrs	r3, r1
 800348c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	68da      	ldr	r2, [r3, #12]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800349c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	691a      	ldr	r2, [r3, #16]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	695b      	ldr	r3, [r3, #20]
 80034a6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	699b      	ldr	r3, [r3, #24]
 80034ae:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	430a      	orrs	r2, r1
 80034b6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	69d9      	ldr	r1, [r3, #28]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6a1a      	ldr	r2, [r3, #32]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	430a      	orrs	r2, r1
 80034c6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f042 0201 	orr.w	r2, r2, #1
 80034d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2200      	movs	r2, #0
 80034dc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2220      	movs	r2, #32
 80034e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2200      	movs	r2, #0
 80034ea:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2200      	movs	r2, #0
 80034f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80034f4:	2300      	movs	r3, #0
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	3708      	adds	r7, #8
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}
 80034fe:	bf00      	nop
 8003500:	02008000 	.word	0x02008000

08003504 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b084      	sub	sp, #16
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	699b      	ldr	r3, [r3, #24]
 8003512:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003520:	2b00      	cmp	r3, #0
 8003522:	d005      	beq.n	8003530 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003528:	68ba      	ldr	r2, [r7, #8]
 800352a:	68f9      	ldr	r1, [r7, #12]
 800352c:	6878      	ldr	r0, [r7, #4]
 800352e:	4798      	blx	r3
  }
}
 8003530:	bf00      	nop
 8003532:	3710      	adds	r7, #16
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}

08003538 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b086      	sub	sp, #24
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	699b      	ldr	r3, [r3, #24]
 8003546:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003556:	2b00      	cmp	r3, #0
 8003558:	d00f      	beq.n	800357a <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003560:	2b00      	cmp	r3, #0
 8003562:	d00a      	beq.n	800357a <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003568:	f043 0201 	orr.w	r2, r3, #1
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003578:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003580:	2b00      	cmp	r3, #0
 8003582:	d00f      	beq.n	80035a4 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800358a:	2b00      	cmp	r3, #0
 800358c:	d00a      	beq.n	80035a4 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003592:	f043 0208 	orr.w	r2, r3, #8
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80035a2:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d00f      	beq.n	80035ce <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d00a      	beq.n	80035ce <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035bc:	f043 0202 	orr.w	r2, r3, #2
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80035cc:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035d2:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	f003 030b 	and.w	r3, r3, #11
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d003      	beq.n	80035e6 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 80035de:	68f9      	ldr	r1, [r7, #12]
 80035e0:	6878      	ldr	r0, [r7, #4]
 80035e2:	f000 fcc5 	bl	8003f70 <I2C_ITError>
  }
}
 80035e6:	bf00      	nop
 80035e8:	3718      	adds	r7, #24
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}

080035ee <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80035ee:	b480      	push	{r7}
 80035f0:	b083      	sub	sp, #12
 80035f2:	af00      	add	r7, sp, #0
 80035f4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80035f6:	bf00      	nop
 80035f8:	370c      	adds	r7, #12
 80035fa:	46bd      	mov	sp, r7
 80035fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003600:	4770      	bx	lr

08003602 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003602:	b480      	push	{r7}
 8003604:	b083      	sub	sp, #12
 8003606:	af00      	add	r7, sp, #0
 8003608:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800360a:	bf00      	nop
 800360c:	370c      	adds	r7, #12
 800360e:	46bd      	mov	sp, r7
 8003610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003614:	4770      	bx	lr

08003616 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003616:	b480      	push	{r7}
 8003618:	b083      	sub	sp, #12
 800361a:	af00      	add	r7, sp, #0
 800361c:	6078      	str	r0, [r7, #4]
 800361e:	460b      	mov	r3, r1
 8003620:	70fb      	strb	r3, [r7, #3]
 8003622:	4613      	mov	r3, r2
 8003624:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003626:	bf00      	nop
 8003628:	370c      	adds	r7, #12
 800362a:	46bd      	mov	sp, r7
 800362c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003630:	4770      	bx	lr

08003632 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003632:	b480      	push	{r7}
 8003634:	b083      	sub	sp, #12
 8003636:	af00      	add	r7, sp, #0
 8003638:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800363a:	bf00      	nop
 800363c:	370c      	adds	r7, #12
 800363e:	46bd      	mov	sp, r7
 8003640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003644:	4770      	bx	lr

08003646 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003646:	b480      	push	{r7}
 8003648:	b083      	sub	sp, #12
 800364a:	af00      	add	r7, sp, #0
 800364c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800364e:	bf00      	nop
 8003650:	370c      	adds	r7, #12
 8003652:	46bd      	mov	sp, r7
 8003654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003658:	4770      	bx	lr

0800365a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800365a:	b480      	push	{r7}
 800365c:	b083      	sub	sp, #12
 800365e:	af00      	add	r7, sp, #0
 8003660:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003662:	bf00      	nop
 8003664:	370c      	adds	r7, #12
 8003666:	46bd      	mov	sp, r7
 8003668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366c:	4770      	bx	lr

0800366e <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800366e:	b580      	push	{r7, lr}
 8003670:	b086      	sub	sp, #24
 8003672:	af00      	add	r7, sp, #0
 8003674:	60f8      	str	r0, [r7, #12]
 8003676:	60b9      	str	r1, [r7, #8]
 8003678:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800367e:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800368a:	2b01      	cmp	r3, #1
 800368c:	d101      	bne.n	8003692 <I2C_Slave_ISR_IT+0x24>
 800368e:	2302      	movs	r3, #2
 8003690:	e0e2      	b.n	8003858 <I2C_Slave_ISR_IT+0x1ea>
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2201      	movs	r2, #1
 8003696:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	f003 0320 	and.w	r3, r3, #32
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d009      	beq.n	80036b8 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d004      	beq.n	80036b8 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80036ae:	6939      	ldr	r1, [r7, #16]
 80036b0:	68f8      	ldr	r0, [r7, #12]
 80036b2:	f000 f9b5 	bl	8003a20 <I2C_ITSlaveCplt>
 80036b6:	e0ca      	b.n	800384e <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	f003 0310 	and.w	r3, r3, #16
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d04b      	beq.n	800375a <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d046      	beq.n	800375a <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036d0:	b29b      	uxth	r3, r3
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d128      	bne.n	8003728 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036dc:	b2db      	uxtb	r3, r3
 80036de:	2b28      	cmp	r3, #40	@ 0x28
 80036e0:	d108      	bne.n	80036f4 <I2C_Slave_ISR_IT+0x86>
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80036e8:	d104      	bne.n	80036f4 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80036ea:	6939      	ldr	r1, [r7, #16]
 80036ec:	68f8      	ldr	r0, [r7, #12]
 80036ee:	f000 fbeb 	bl	8003ec8 <I2C_ITListenCplt>
 80036f2:	e031      	b.n	8003758 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036fa:	b2db      	uxtb	r3, r3
 80036fc:	2b29      	cmp	r3, #41	@ 0x29
 80036fe:	d10e      	bne.n	800371e <I2C_Slave_ISR_IT+0xb0>
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003706:	d00a      	beq.n	800371e <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	2210      	movs	r2, #16
 800370e:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003710:	68f8      	ldr	r0, [r7, #12]
 8003712:	f000 fd44 	bl	800419e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003716:	68f8      	ldr	r0, [r7, #12]
 8003718:	f000 f926 	bl	8003968 <I2C_ITSlaveSeqCplt>
 800371c:	e01c      	b.n	8003758 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	2210      	movs	r2, #16
 8003724:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8003726:	e08f      	b.n	8003848 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	2210      	movs	r2, #16
 800372e:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003734:	f043 0204 	orr.w	r2, r3, #4
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d003      	beq.n	800374a <I2C_Slave_ISR_IT+0xdc>
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003748:	d17e      	bne.n	8003848 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800374e:	4619      	mov	r1, r3
 8003750:	68f8      	ldr	r0, [r7, #12]
 8003752:	f000 fc0d 	bl	8003f70 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003756:	e077      	b.n	8003848 <I2C_Slave_ISR_IT+0x1da>
 8003758:	e076      	b.n	8003848 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	f003 0304 	and.w	r3, r3, #4
 8003760:	2b00      	cmp	r3, #0
 8003762:	d02f      	beq.n	80037c4 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800376a:	2b00      	cmp	r3, #0
 800376c:	d02a      	beq.n	80037c4 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003772:	b29b      	uxth	r3, r3
 8003774:	2b00      	cmp	r3, #0
 8003776:	d018      	beq.n	80037aa <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003782:	b2d2      	uxtb	r2, r2
 8003784:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800378a:	1c5a      	adds	r2, r3, #1
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003794:	3b01      	subs	r3, #1
 8003796:	b29a      	uxth	r2, r3
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037a0:	b29b      	uxth	r3, r3
 80037a2:	3b01      	subs	r3, #1
 80037a4:	b29a      	uxth	r2, r3
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037ae:	b29b      	uxth	r3, r3
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d14b      	bne.n	800384c <I2C_Slave_ISR_IT+0x1de>
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80037ba:	d047      	beq.n	800384c <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80037bc:	68f8      	ldr	r0, [r7, #12]
 80037be:	f000 f8d3 	bl	8003968 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80037c2:	e043      	b.n	800384c <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	f003 0308 	and.w	r3, r3, #8
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d009      	beq.n	80037e2 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d004      	beq.n	80037e2 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80037d8:	6939      	ldr	r1, [r7, #16]
 80037da:	68f8      	ldr	r0, [r7, #12]
 80037dc:	f000 f840 	bl	8003860 <I2C_ITAddrCplt>
 80037e0:	e035      	b.n	800384e <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	f003 0302 	and.w	r3, r3, #2
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d030      	beq.n	800384e <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d02b      	beq.n	800384e <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037fa:	b29b      	uxth	r3, r3
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d018      	beq.n	8003832 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003804:	781a      	ldrb	r2, [r3, #0]
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003810:	1c5a      	adds	r2, r3, #1
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800381a:	b29b      	uxth	r3, r3
 800381c:	3b01      	subs	r3, #1
 800381e:	b29a      	uxth	r2, r3
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003828:	3b01      	subs	r3, #1
 800382a:	b29a      	uxth	r2, r3
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	851a      	strh	r2, [r3, #40]	@ 0x28
 8003830:	e00d      	b.n	800384e <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003838:	d002      	beq.n	8003840 <I2C_Slave_ISR_IT+0x1d2>
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d106      	bne.n	800384e <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003840:	68f8      	ldr	r0, [r7, #12]
 8003842:	f000 f891 	bl	8003968 <I2C_ITSlaveSeqCplt>
 8003846:	e002      	b.n	800384e <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8003848:	bf00      	nop
 800384a:	e000      	b.n	800384e <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 800384c:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2200      	movs	r2, #0
 8003852:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003856:	2300      	movs	r3, #0
}
 8003858:	4618      	mov	r0, r3
 800385a:	3718      	adds	r7, #24
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}

08003860 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b084      	sub	sp, #16
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003870:	b2db      	uxtb	r3, r3
 8003872:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003876:	2b28      	cmp	r3, #40	@ 0x28
 8003878:	d16a      	bne.n	8003950 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	699b      	ldr	r3, [r3, #24]
 8003880:	0c1b      	lsrs	r3, r3, #16
 8003882:	b2db      	uxtb	r3, r3
 8003884:	f003 0301 	and.w	r3, r3, #1
 8003888:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	699b      	ldr	r3, [r3, #24]
 8003890:	0c1b      	lsrs	r3, r3, #16
 8003892:	b29b      	uxth	r3, r3
 8003894:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8003898:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	689b      	ldr	r3, [r3, #8]
 80038a0:	b29b      	uxth	r3, r3
 80038a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80038a6:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	68db      	ldr	r3, [r3, #12]
 80038ae:	b29b      	uxth	r3, r3
 80038b0:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80038b4:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	68db      	ldr	r3, [r3, #12]
 80038ba:	2b02      	cmp	r3, #2
 80038bc:	d138      	bne.n	8003930 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80038be:	897b      	ldrh	r3, [r7, #10]
 80038c0:	09db      	lsrs	r3, r3, #7
 80038c2:	b29a      	uxth	r2, r3
 80038c4:	89bb      	ldrh	r3, [r7, #12]
 80038c6:	4053      	eors	r3, r2
 80038c8:	b29b      	uxth	r3, r3
 80038ca:	f003 0306 	and.w	r3, r3, #6
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d11c      	bne.n	800390c <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80038d2:	897b      	ldrh	r3, [r7, #10]
 80038d4:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038da:	1c5a      	adds	r2, r3, #1
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038e4:	2b02      	cmp	r3, #2
 80038e6:	d13b      	bne.n	8003960 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2200      	movs	r2, #0
 80038ec:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	2208      	movs	r2, #8
 80038f4:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2200      	movs	r2, #0
 80038fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80038fe:	89ba      	ldrh	r2, [r7, #12]
 8003900:	7bfb      	ldrb	r3, [r7, #15]
 8003902:	4619      	mov	r1, r3
 8003904:	6878      	ldr	r0, [r7, #4]
 8003906:	f7ff fe86 	bl	8003616 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800390a:	e029      	b.n	8003960 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800390c:	893b      	ldrh	r3, [r7, #8]
 800390e:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003910:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003914:	6878      	ldr	r0, [r7, #4]
 8003916:	f000 fc84 	bl	8004222 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2200      	movs	r2, #0
 800391e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003922:	89ba      	ldrh	r2, [r7, #12]
 8003924:	7bfb      	ldrb	r3, [r7, #15]
 8003926:	4619      	mov	r1, r3
 8003928:	6878      	ldr	r0, [r7, #4]
 800392a:	f7ff fe74 	bl	8003616 <HAL_I2C_AddrCallback>
}
 800392e:	e017      	b.n	8003960 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003930:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003934:	6878      	ldr	r0, [r7, #4]
 8003936:	f000 fc74 	bl	8004222 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2200      	movs	r2, #0
 800393e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003942:	89ba      	ldrh	r2, [r7, #12]
 8003944:	7bfb      	ldrb	r3, [r7, #15]
 8003946:	4619      	mov	r1, r3
 8003948:	6878      	ldr	r0, [r7, #4]
 800394a:	f7ff fe64 	bl	8003616 <HAL_I2C_AddrCallback>
}
 800394e:	e007      	b.n	8003960 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	2208      	movs	r2, #8
 8003956:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2200      	movs	r2, #0
 800395c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8003960:	bf00      	nop
 8003962:	3710      	adds	r7, #16
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}

08003968 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b084      	sub	sp, #16
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2200      	movs	r2, #0
 800397c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003986:	2b00      	cmp	r3, #0
 8003988:	d008      	beq.n	800399c <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003998:	601a      	str	r2, [r3, #0]
 800399a:	e00c      	b.n	80039b6 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d007      	beq.n	80039b6 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80039b4:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80039bc:	b2db      	uxtb	r3, r3
 80039be:	2b29      	cmp	r3, #41	@ 0x29
 80039c0:	d112      	bne.n	80039e8 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2228      	movs	r2, #40	@ 0x28
 80039c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2221      	movs	r2, #33	@ 0x21
 80039ce:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80039d0:	2101      	movs	r1, #1
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f000 fc25 	bl	8004222 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2200      	movs	r2, #0
 80039dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80039e0:	6878      	ldr	r0, [r7, #4]
 80039e2:	f7ff fe04 	bl	80035ee <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80039e6:	e017      	b.n	8003a18 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80039ee:	b2db      	uxtb	r3, r3
 80039f0:	2b2a      	cmp	r3, #42	@ 0x2a
 80039f2:	d111      	bne.n	8003a18 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2228      	movs	r2, #40	@ 0x28
 80039f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2222      	movs	r2, #34	@ 0x22
 8003a00:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003a02:	2102      	movs	r1, #2
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	f000 fc0c 	bl	8004222 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f7ff fdf5 	bl	8003602 <HAL_I2C_SlaveRxCpltCallback>
}
 8003a18:	bf00      	nop
 8003a1a:	3710      	adds	r7, #16
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd80      	pop	{r7, pc}

08003a20 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b086      	sub	sp, #24
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
 8003a28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a3a:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a42:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	2220      	movs	r2, #32
 8003a4a:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003a4c:	7afb      	ldrb	r3, [r7, #11]
 8003a4e:	2b21      	cmp	r3, #33	@ 0x21
 8003a50:	d002      	beq.n	8003a58 <I2C_ITSlaveCplt+0x38>
 8003a52:	7afb      	ldrb	r3, [r7, #11]
 8003a54:	2b29      	cmp	r3, #41	@ 0x29
 8003a56:	d108      	bne.n	8003a6a <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8003a58:	f248 0101 	movw	r1, #32769	@ 0x8001
 8003a5c:	6878      	ldr	r0, [r7, #4]
 8003a5e:	f000 fbe0 	bl	8004222 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2221      	movs	r2, #33	@ 0x21
 8003a66:	631a      	str	r2, [r3, #48]	@ 0x30
 8003a68:	e019      	b.n	8003a9e <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003a6a:	7afb      	ldrb	r3, [r7, #11]
 8003a6c:	2b22      	cmp	r3, #34	@ 0x22
 8003a6e:	d002      	beq.n	8003a76 <I2C_ITSlaveCplt+0x56>
 8003a70:	7afb      	ldrb	r3, [r7, #11]
 8003a72:	2b2a      	cmp	r3, #42	@ 0x2a
 8003a74:	d108      	bne.n	8003a88 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8003a76:	f248 0102 	movw	r1, #32770	@ 0x8002
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	f000 fbd1 	bl	8004222 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2222      	movs	r2, #34	@ 0x22
 8003a84:	631a      	str	r2, [r3, #48]	@ 0x30
 8003a86:	e00a      	b.n	8003a9e <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8003a88:	7afb      	ldrb	r3, [r7, #11]
 8003a8a:	2b28      	cmp	r3, #40	@ 0x28
 8003a8c:	d107      	bne.n	8003a9e <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8003a8e:	f248 0103 	movw	r1, #32771	@ 0x8003
 8003a92:	6878      	ldr	r0, [r7, #4]
 8003a94:	f000 fbc5 	bl	8004222 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	685a      	ldr	r2, [r3, #4]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003aac:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	6859      	ldr	r1, [r3, #4]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681a      	ldr	r2, [r3, #0]
 8003ab8:	4b7f      	ldr	r3, [pc, #508]	@ (8003cb8 <I2C_ITSlaveCplt+0x298>)
 8003aba:	400b      	ands	r3, r1
 8003abc:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f000 fb6d 	bl	800419e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d07a      	beq.n	8003bc4 <I2C_ITSlaveCplt+0x1a4>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003adc:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	f000 8111 	beq.w	8003d0a <I2C_ITSlaveCplt+0x2ea>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a73      	ldr	r2, [pc, #460]	@ (8003cbc <I2C_ITSlaveCplt+0x29c>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d059      	beq.n	8003ba8 <I2C_ITSlaveCplt+0x188>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a71      	ldr	r2, [pc, #452]	@ (8003cc0 <I2C_ITSlaveCplt+0x2a0>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d053      	beq.n	8003ba8 <I2C_ITSlaveCplt+0x188>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a6f      	ldr	r2, [pc, #444]	@ (8003cc4 <I2C_ITSlaveCplt+0x2a4>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d04d      	beq.n	8003ba8 <I2C_ITSlaveCplt+0x188>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a6d      	ldr	r2, [pc, #436]	@ (8003cc8 <I2C_ITSlaveCplt+0x2a8>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d047      	beq.n	8003ba8 <I2C_ITSlaveCplt+0x188>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a6b      	ldr	r2, [pc, #428]	@ (8003ccc <I2C_ITSlaveCplt+0x2ac>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d041      	beq.n	8003ba8 <I2C_ITSlaveCplt+0x188>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a69      	ldr	r2, [pc, #420]	@ (8003cd0 <I2C_ITSlaveCplt+0x2b0>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d03b      	beq.n	8003ba8 <I2C_ITSlaveCplt+0x188>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a67      	ldr	r2, [pc, #412]	@ (8003cd4 <I2C_ITSlaveCplt+0x2b4>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d035      	beq.n	8003ba8 <I2C_ITSlaveCplt+0x188>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a65      	ldr	r2, [pc, #404]	@ (8003cd8 <I2C_ITSlaveCplt+0x2b8>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d02f      	beq.n	8003ba8 <I2C_ITSlaveCplt+0x188>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a63      	ldr	r2, [pc, #396]	@ (8003cdc <I2C_ITSlaveCplt+0x2bc>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d029      	beq.n	8003ba8 <I2C_ITSlaveCplt+0x188>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a61      	ldr	r2, [pc, #388]	@ (8003ce0 <I2C_ITSlaveCplt+0x2c0>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d023      	beq.n	8003ba8 <I2C_ITSlaveCplt+0x188>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a5f      	ldr	r2, [pc, #380]	@ (8003ce4 <I2C_ITSlaveCplt+0x2c4>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d01d      	beq.n	8003ba8 <I2C_ITSlaveCplt+0x188>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a5d      	ldr	r2, [pc, #372]	@ (8003ce8 <I2C_ITSlaveCplt+0x2c8>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d017      	beq.n	8003ba8 <I2C_ITSlaveCplt+0x188>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a5b      	ldr	r2, [pc, #364]	@ (8003cec <I2C_ITSlaveCplt+0x2cc>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d011      	beq.n	8003ba8 <I2C_ITSlaveCplt+0x188>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a59      	ldr	r2, [pc, #356]	@ (8003cf0 <I2C_ITSlaveCplt+0x2d0>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d00b      	beq.n	8003ba8 <I2C_ITSlaveCplt+0x188>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a57      	ldr	r2, [pc, #348]	@ (8003cf4 <I2C_ITSlaveCplt+0x2d4>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d005      	beq.n	8003ba8 <I2C_ITSlaveCplt+0x188>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a55      	ldr	r2, [pc, #340]	@ (8003cf8 <I2C_ITSlaveCplt+0x2d8>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d105      	bne.n	8003bb4 <I2C_ITSlaveCplt+0x194>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	b29b      	uxth	r3, r3
 8003bb2:	e004      	b.n	8003bbe <I2C_ITSlaveCplt+0x19e>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	b29b      	uxth	r3, r3
 8003bbe:	687a      	ldr	r2, [r7, #4]
 8003bc0:	8553      	strh	r3, [r2, #42]	@ 0x2a
 8003bc2:	e0a2      	b.n	8003d0a <I2C_ITSlaveCplt+0x2ea>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	f000 809d 	beq.w	8003d0a <I2C_ITSlaveCplt+0x2ea>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	681a      	ldr	r2, [r3, #0]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003bde:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	f000 8090 	beq.w	8003d0a <I2C_ITSlaveCplt+0x2ea>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a32      	ldr	r2, [pc, #200]	@ (8003cbc <I2C_ITSlaveCplt+0x29c>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d059      	beq.n	8003caa <I2C_ITSlaveCplt+0x28a>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a30      	ldr	r2, [pc, #192]	@ (8003cc0 <I2C_ITSlaveCplt+0x2a0>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d053      	beq.n	8003caa <I2C_ITSlaveCplt+0x28a>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a2e      	ldr	r2, [pc, #184]	@ (8003cc4 <I2C_ITSlaveCplt+0x2a4>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d04d      	beq.n	8003caa <I2C_ITSlaveCplt+0x28a>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a2c      	ldr	r2, [pc, #176]	@ (8003cc8 <I2C_ITSlaveCplt+0x2a8>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d047      	beq.n	8003caa <I2C_ITSlaveCplt+0x28a>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a2a      	ldr	r2, [pc, #168]	@ (8003ccc <I2C_ITSlaveCplt+0x2ac>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d041      	beq.n	8003caa <I2C_ITSlaveCplt+0x28a>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a28      	ldr	r2, [pc, #160]	@ (8003cd0 <I2C_ITSlaveCplt+0x2b0>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d03b      	beq.n	8003caa <I2C_ITSlaveCplt+0x28a>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a26      	ldr	r2, [pc, #152]	@ (8003cd4 <I2C_ITSlaveCplt+0x2b4>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d035      	beq.n	8003caa <I2C_ITSlaveCplt+0x28a>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a24      	ldr	r2, [pc, #144]	@ (8003cd8 <I2C_ITSlaveCplt+0x2b8>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d02f      	beq.n	8003caa <I2C_ITSlaveCplt+0x28a>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a22      	ldr	r2, [pc, #136]	@ (8003cdc <I2C_ITSlaveCplt+0x2bc>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d029      	beq.n	8003caa <I2C_ITSlaveCplt+0x28a>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a20      	ldr	r2, [pc, #128]	@ (8003ce0 <I2C_ITSlaveCplt+0x2c0>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d023      	beq.n	8003caa <I2C_ITSlaveCplt+0x28a>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a1e      	ldr	r2, [pc, #120]	@ (8003ce4 <I2C_ITSlaveCplt+0x2c4>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d01d      	beq.n	8003caa <I2C_ITSlaveCplt+0x28a>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a1c      	ldr	r2, [pc, #112]	@ (8003ce8 <I2C_ITSlaveCplt+0x2c8>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d017      	beq.n	8003caa <I2C_ITSlaveCplt+0x28a>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a1a      	ldr	r2, [pc, #104]	@ (8003cec <I2C_ITSlaveCplt+0x2cc>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d011      	beq.n	8003caa <I2C_ITSlaveCplt+0x28a>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a18      	ldr	r2, [pc, #96]	@ (8003cf0 <I2C_ITSlaveCplt+0x2d0>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d00b      	beq.n	8003caa <I2C_ITSlaveCplt+0x28a>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a16      	ldr	r2, [pc, #88]	@ (8003cf4 <I2C_ITSlaveCplt+0x2d4>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d005      	beq.n	8003caa <I2C_ITSlaveCplt+0x28a>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a14      	ldr	r2, [pc, #80]	@ (8003cf8 <I2C_ITSlaveCplt+0x2d8>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d128      	bne.n	8003cfc <I2C_ITSlaveCplt+0x2dc>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	b29b      	uxth	r3, r3
 8003cb4:	e027      	b.n	8003d06 <I2C_ITSlaveCplt+0x2e6>
 8003cb6:	bf00      	nop
 8003cb8:	fe00e800 	.word	0xfe00e800
 8003cbc:	40020010 	.word	0x40020010
 8003cc0:	40020028 	.word	0x40020028
 8003cc4:	40020040 	.word	0x40020040
 8003cc8:	40020058 	.word	0x40020058
 8003ccc:	40020070 	.word	0x40020070
 8003cd0:	40020088 	.word	0x40020088
 8003cd4:	400200a0 	.word	0x400200a0
 8003cd8:	400200b8 	.word	0x400200b8
 8003cdc:	40020410 	.word	0x40020410
 8003ce0:	40020428 	.word	0x40020428
 8003ce4:	40020440 	.word	0x40020440
 8003ce8:	40020458 	.word	0x40020458
 8003cec:	40020470 	.word	0x40020470
 8003cf0:	40020488 	.word	0x40020488
 8003cf4:	400204a0 	.word	0x400204a0
 8003cf8:	400204b8 	.word	0x400204b8
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	b29b      	uxth	r3, r3
 8003d06:	687a      	ldr	r2, [r7, #4]
 8003d08:	8553      	strh	r3, [r2, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	f003 0304 	and.w	r3, r3, #4
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d020      	beq.n	8003d56 <I2C_ITSlaveCplt+0x336>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	f023 0304 	bic.w	r3, r3, #4
 8003d1a:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d26:	b2d2      	uxtb	r2, r2
 8003d28:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d2e:	1c5a      	adds	r2, r3, #1
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d00c      	beq.n	8003d56 <I2C_ITSlaveCplt+0x336>
    {
      hi2c->XferSize--;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d40:	3b01      	subs	r3, #1
 8003d42:	b29a      	uxth	r2, r3
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d4c:	b29b      	uxth	r3, r3
 8003d4e:	3b01      	subs	r3, #1
 8003d50:	b29a      	uxth	r2, r3
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d5a:	b29b      	uxth	r3, r3
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d005      	beq.n	8003d6c <I2C_ITSlaveCplt+0x34c>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d64:	f043 0204 	orr.w	r2, r3, #4
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	f003 0310 	and.w	r3, r3, #16
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d049      	beq.n	8003e0a <I2C_ITSlaveCplt+0x3ea>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d044      	beq.n	8003e0a <I2C_ITSlaveCplt+0x3ea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d84:	b29b      	uxth	r3, r3
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d128      	bne.n	8003ddc <I2C_ITSlaveCplt+0x3bc>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d90:	b2db      	uxtb	r3, r3
 8003d92:	2b28      	cmp	r3, #40	@ 0x28
 8003d94:	d108      	bne.n	8003da8 <I2C_ITSlaveCplt+0x388>
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003d9c:	d104      	bne.n	8003da8 <I2C_ITSlaveCplt+0x388>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003d9e:	6979      	ldr	r1, [r7, #20]
 8003da0:	6878      	ldr	r0, [r7, #4]
 8003da2:	f000 f891 	bl	8003ec8 <I2C_ITListenCplt>
 8003da6:	e030      	b.n	8003e0a <I2C_ITSlaveCplt+0x3ea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003dae:	b2db      	uxtb	r3, r3
 8003db0:	2b29      	cmp	r3, #41	@ 0x29
 8003db2:	d10e      	bne.n	8003dd2 <I2C_ITSlaveCplt+0x3b2>
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003dba:	d00a      	beq.n	8003dd2 <I2C_ITSlaveCplt+0x3b2>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	2210      	movs	r2, #16
 8003dc2:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003dc4:	6878      	ldr	r0, [r7, #4]
 8003dc6:	f000 f9ea 	bl	800419e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f7ff fdcc 	bl	8003968 <I2C_ITSlaveSeqCplt>
 8003dd0:	e01b      	b.n	8003e0a <I2C_ITSlaveCplt+0x3ea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	2210      	movs	r2, #16
 8003dd8:	61da      	str	r2, [r3, #28]
 8003dda:	e016      	b.n	8003e0a <I2C_ITSlaveCplt+0x3ea>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	2210      	movs	r2, #16
 8003de2:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003de8:	f043 0204 	orr.w	r2, r3, #4
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d003      	beq.n	8003dfe <I2C_ITSlaveCplt+0x3de>
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003dfc:	d105      	bne.n	8003e0a <I2C_ITSlaveCplt+0x3ea>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e02:	4619      	mov	r1, r3
 8003e04:	6878      	ldr	r0, [r7, #4]
 8003e06:	f000 f8b3 	bl	8003f70 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2200      	movs	r2, #0
 8003e16:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d010      	beq.n	8003e42 <I2C_ITSlaveCplt+0x422>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e24:	4619      	mov	r1, r3
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f000 f8a2 	bl	8003f70 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e32:	b2db      	uxtb	r3, r3
 8003e34:	2b28      	cmp	r3, #40	@ 0x28
 8003e36:	d141      	bne.n	8003ebc <I2C_ITSlaveCplt+0x49c>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8003e38:	6979      	ldr	r1, [r7, #20]
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f000 f844 	bl	8003ec8 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003e40:	e03c      	b.n	8003ebc <I2C_ITSlaveCplt+0x49c>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e46:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003e4a:	d014      	beq.n	8003e76 <I2C_ITSlaveCplt+0x456>
    I2C_ITSlaveSeqCplt(hi2c);
 8003e4c:	6878      	ldr	r0, [r7, #4]
 8003e4e:	f7ff fd8b 	bl	8003968 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	4a1b      	ldr	r2, [pc, #108]	@ (8003ec4 <I2C_ITSlaveCplt+0x4a4>)
 8003e56:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2220      	movs	r2, #32
 8003e5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2200      	movs	r2, #0
 8003e64:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	f7ff fbdf 	bl	8003632 <HAL_I2C_ListenCpltCallback>
}
 8003e74:	e022      	b.n	8003ebc <I2C_ITSlaveCplt+0x49c>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e7c:	b2db      	uxtb	r3, r3
 8003e7e:	2b22      	cmp	r3, #34	@ 0x22
 8003e80:	d10e      	bne.n	8003ea0 <I2C_ITSlaveCplt+0x480>
    hi2c->State = HAL_I2C_STATE_READY;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2220      	movs	r2, #32
 8003e86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2200      	movs	r2, #0
 8003e94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003e98:	6878      	ldr	r0, [r7, #4]
 8003e9a:	f7ff fbb2 	bl	8003602 <HAL_I2C_SlaveRxCpltCallback>
}
 8003e9e:	e00d      	b.n	8003ebc <I2C_ITSlaveCplt+0x49c>
    hi2c->State = HAL_I2C_STATE_READY;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2220      	movs	r2, #32
 8003ea4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	f7ff fb99 	bl	80035ee <HAL_I2C_SlaveTxCpltCallback>
}
 8003ebc:	bf00      	nop
 8003ebe:	3718      	adds	r7, #24
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bd80      	pop	{r7, pc}
 8003ec4:	ffff0000 	.word	0xffff0000

08003ec8 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b082      	sub	sp, #8
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
 8003ed0:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	4a25      	ldr	r2, [pc, #148]	@ (8003f6c <I2C_ITListenCplt+0xa4>)
 8003ed6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2200      	movs	r2, #0
 8003edc:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2220      	movs	r2, #32
 8003ee2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	f003 0304 	and.w	r3, r3, #4
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d022      	beq.n	8003f44 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f08:	b2d2      	uxtb	r2, r2
 8003f0a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f10:	1c5a      	adds	r2, r3, #1
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d012      	beq.n	8003f44 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f22:	3b01      	subs	r3, #1
 8003f24:	b29a      	uxth	r2, r3
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f2e:	b29b      	uxth	r3, r3
 8003f30:	3b01      	subs	r3, #1
 8003f32:	b29a      	uxth	r2, r3
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f3c:	f043 0204 	orr.w	r2, r3, #4
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003f44:	f248 0103 	movw	r1, #32771	@ 0x8003
 8003f48:	6878      	ldr	r0, [r7, #4]
 8003f4a:	f000 f96a 	bl	8004222 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	2210      	movs	r2, #16
 8003f54:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	f7ff fb67 	bl	8003632 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8003f64:	bf00      	nop
 8003f66:	3708      	adds	r7, #8
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bd80      	pop	{r7, pc}
 8003f6c:	ffff0000 	.word	0xffff0000

08003f70 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b084      	sub	sp, #16
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
 8003f78:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f80:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2200      	movs	r2, #0
 8003f86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	4a6d      	ldr	r2, [pc, #436]	@ (8004144 <I2C_ITError+0x1d4>)
 8003f8e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2200      	movs	r2, #0
 8003f94:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	431a      	orrs	r2, r3
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8003fa2:	7bfb      	ldrb	r3, [r7, #15]
 8003fa4:	2b28      	cmp	r3, #40	@ 0x28
 8003fa6:	d005      	beq.n	8003fb4 <I2C_ITError+0x44>
 8003fa8:	7bfb      	ldrb	r3, [r7, #15]
 8003faa:	2b29      	cmp	r3, #41	@ 0x29
 8003fac:	d002      	beq.n	8003fb4 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8003fae:	7bfb      	ldrb	r3, [r7, #15]
 8003fb0:	2b2a      	cmp	r3, #42	@ 0x2a
 8003fb2:	d10b      	bne.n	8003fcc <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003fb4:	2103      	movs	r1, #3
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f000 f933 	bl	8004222 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2228      	movs	r2, #40	@ 0x28
 8003fc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	4a60      	ldr	r2, [pc, #384]	@ (8004148 <I2C_ITError+0x1d8>)
 8003fc8:	635a      	str	r2, [r3, #52]	@ 0x34
 8003fca:	e030      	b.n	800402e <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003fcc:	f248 0103 	movw	r1, #32771	@ 0x8003
 8003fd0:	6878      	ldr	r0, [r7, #4]
 8003fd2:	f000 f926 	bl	8004222 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003fd6:	6878      	ldr	r0, [r7, #4]
 8003fd8:	f000 f8e1 	bl	800419e <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003fe2:	b2db      	uxtb	r3, r3
 8003fe4:	2b60      	cmp	r3, #96	@ 0x60
 8003fe6:	d01f      	beq.n	8004028 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2220      	movs	r2, #32
 8003fec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	699b      	ldr	r3, [r3, #24]
 8003ff6:	f003 0320 	and.w	r3, r3, #32
 8003ffa:	2b20      	cmp	r3, #32
 8003ffc:	d114      	bne.n	8004028 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	699b      	ldr	r3, [r3, #24]
 8004004:	f003 0310 	and.w	r3, r3, #16
 8004008:	2b10      	cmp	r3, #16
 800400a:	d109      	bne.n	8004020 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	2210      	movs	r2, #16
 8004012:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004018:	f043 0204 	orr.w	r2, r3, #4
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	2220      	movs	r2, #32
 8004026:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2200      	movs	r2, #0
 800402c:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004032:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004038:	2b00      	cmp	r3, #0
 800403a:	d039      	beq.n	80040b0 <I2C_ITError+0x140>
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	2b11      	cmp	r3, #17
 8004040:	d002      	beq.n	8004048 <I2C_ITError+0xd8>
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	2b21      	cmp	r3, #33	@ 0x21
 8004046:	d133      	bne.n	80040b0 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004052:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004056:	d107      	bne.n	8004068 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	681a      	ldr	r2, [r3, #0]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004066:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800406c:	4618      	mov	r0, r3
 800406e:	f7fe fd8d 	bl	8002b8c <HAL_DMA_GetState>
 8004072:	4603      	mov	r3, r0
 8004074:	2b01      	cmp	r3, #1
 8004076:	d017      	beq.n	80040a8 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800407c:	4a33      	ldr	r2, [pc, #204]	@ (800414c <I2C_ITError+0x1dc>)
 800407e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2200      	movs	r2, #0
 8004084:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800408c:	4618      	mov	r0, r3
 800408e:	f7fd fbd5 	bl	800183c <HAL_DMA_Abort_IT>
 8004092:	4603      	mov	r3, r0
 8004094:	2b00      	cmp	r3, #0
 8004096:	d04d      	beq.n	8004134 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800409c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800409e:	687a      	ldr	r2, [r7, #4]
 80040a0:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80040a2:	4610      	mov	r0, r2
 80040a4:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80040a6:	e045      	b.n	8004134 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80040a8:	6878      	ldr	r0, [r7, #4]
 80040aa:	f000 f851 	bl	8004150 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80040ae:	e041      	b.n	8004134 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d039      	beq.n	800412c <I2C_ITError+0x1bc>
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	2b12      	cmp	r3, #18
 80040bc:	d002      	beq.n	80040c4 <I2C_ITError+0x154>
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	2b22      	cmp	r3, #34	@ 0x22
 80040c2:	d133      	bne.n	800412c <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80040ce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80040d2:	d107      	bne.n	80040e4 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	681a      	ldr	r2, [r3, #0]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80040e2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040e8:	4618      	mov	r0, r3
 80040ea:	f7fe fd4f 	bl	8002b8c <HAL_DMA_GetState>
 80040ee:	4603      	mov	r3, r0
 80040f0:	2b01      	cmp	r3, #1
 80040f2:	d017      	beq.n	8004124 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040f8:	4a14      	ldr	r2, [pc, #80]	@ (800414c <I2C_ITError+0x1dc>)
 80040fa:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2200      	movs	r2, #0
 8004100:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004108:	4618      	mov	r0, r3
 800410a:	f7fd fb97 	bl	800183c <HAL_DMA_Abort_IT>
 800410e:	4603      	mov	r3, r0
 8004110:	2b00      	cmp	r3, #0
 8004112:	d011      	beq.n	8004138 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004118:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800411a:	687a      	ldr	r2, [r7, #4]
 800411c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800411e:	4610      	mov	r0, r2
 8004120:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004122:	e009      	b.n	8004138 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004124:	6878      	ldr	r0, [r7, #4]
 8004126:	f000 f813 	bl	8004150 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800412a:	e005      	b.n	8004138 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800412c:	6878      	ldr	r0, [r7, #4]
 800412e:	f000 f80f 	bl	8004150 <I2C_TreatErrorCallback>
  }
}
 8004132:	e002      	b.n	800413a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004134:	bf00      	nop
 8004136:	e000      	b.n	800413a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004138:	bf00      	nop
}
 800413a:	bf00      	nop
 800413c:	3710      	adds	r7, #16
 800413e:	46bd      	mov	sp, r7
 8004140:	bd80      	pop	{r7, pc}
 8004142:	bf00      	nop
 8004144:	ffff0000 	.word	0xffff0000
 8004148:	0800366f 	.word	0x0800366f
 800414c:	080041e7 	.word	0x080041e7

08004150 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b082      	sub	sp, #8
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800415e:	b2db      	uxtb	r3, r3
 8004160:	2b60      	cmp	r3, #96	@ 0x60
 8004162:	d10e      	bne.n	8004182 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2220      	movs	r2, #32
 8004168:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2200      	movs	r2, #0
 8004170:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2200      	movs	r2, #0
 8004176:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	f7ff fa6d 	bl	800365a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004180:	e009      	b.n	8004196 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2200      	movs	r2, #0
 8004186:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2200      	movs	r2, #0
 800418c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8004190:	6878      	ldr	r0, [r7, #4]
 8004192:	f7ff fa58 	bl	8003646 <HAL_I2C_ErrorCallback>
}
 8004196:	bf00      	nop
 8004198:	3708      	adds	r7, #8
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}

0800419e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800419e:	b480      	push	{r7}
 80041a0:	b083      	sub	sp, #12
 80041a2:	af00      	add	r7, sp, #0
 80041a4:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	699b      	ldr	r3, [r3, #24]
 80041ac:	f003 0302 	and.w	r3, r3, #2
 80041b0:	2b02      	cmp	r3, #2
 80041b2:	d103      	bne.n	80041bc <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	2200      	movs	r2, #0
 80041ba:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	699b      	ldr	r3, [r3, #24]
 80041c2:	f003 0301 	and.w	r3, r3, #1
 80041c6:	2b01      	cmp	r3, #1
 80041c8:	d007      	beq.n	80041da <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	699a      	ldr	r2, [r3, #24]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f042 0201 	orr.w	r2, r2, #1
 80041d8:	619a      	str	r2, [r3, #24]
  }
}
 80041da:	bf00      	nop
 80041dc:	370c      	adds	r7, #12
 80041de:	46bd      	mov	sp, r7
 80041e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e4:	4770      	bx	lr

080041e6 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80041e6:	b580      	push	{r7, lr}
 80041e8:	b084      	sub	sp, #16
 80041ea:	af00      	add	r7, sp, #0
 80041ec:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041f2:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d003      	beq.n	8004204 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004200:	2200      	movs	r2, #0
 8004202:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004208:	2b00      	cmp	r3, #0
 800420a:	d003      	beq.n	8004214 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004210:	2200      	movs	r2, #0
 8004212:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8004214:	68f8      	ldr	r0, [r7, #12]
 8004216:	f7ff ff9b 	bl	8004150 <I2C_TreatErrorCallback>
}
 800421a:	bf00      	nop
 800421c:	3710      	adds	r7, #16
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}

08004222 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004222:	b480      	push	{r7}
 8004224:	b085      	sub	sp, #20
 8004226:	af00      	add	r7, sp, #0
 8004228:	6078      	str	r0, [r7, #4]
 800422a:	460b      	mov	r3, r1
 800422c:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800422e:	2300      	movs	r3, #0
 8004230:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004232:	887b      	ldrh	r3, [r7, #2]
 8004234:	f003 0301 	and.w	r3, r3, #1
 8004238:	2b00      	cmp	r3, #0
 800423a:	d00f      	beq.n	800425c <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8004242:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800424a:	b2db      	uxtb	r3, r3
 800424c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004250:	2b28      	cmp	r3, #40	@ 0x28
 8004252:	d003      	beq.n	800425c <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800425a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800425c:	887b      	ldrh	r3, [r7, #2]
 800425e:	f003 0302 	and.w	r3, r3, #2
 8004262:	2b00      	cmp	r3, #0
 8004264:	d00f      	beq.n	8004286 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 800426c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004274:	b2db      	uxtb	r3, r3
 8004276:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800427a:	2b28      	cmp	r3, #40	@ 0x28
 800427c:	d003      	beq.n	8004286 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8004284:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004286:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800428a:	2b00      	cmp	r3, #0
 800428c:	da03      	bge.n	8004296 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8004294:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004296:	887b      	ldrh	r3, [r7, #2]
 8004298:	2b10      	cmp	r3, #16
 800429a:	d103      	bne.n	80042a4 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80042a2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80042a4:	887b      	ldrh	r3, [r7, #2]
 80042a6:	2b20      	cmp	r3, #32
 80042a8:	d103      	bne.n	80042b2 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	f043 0320 	orr.w	r3, r3, #32
 80042b0:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80042b2:	887b      	ldrh	r3, [r7, #2]
 80042b4:	2b40      	cmp	r3, #64	@ 0x40
 80042b6:	d103      	bne.n	80042c0 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80042be:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	6819      	ldr	r1, [r3, #0]
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	43da      	mvns	r2, r3
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	400a      	ands	r2, r1
 80042d0:	601a      	str	r2, [r3, #0]
}
 80042d2:	bf00      	nop
 80042d4:	3714      	adds	r7, #20
 80042d6:	46bd      	mov	sp, r7
 80042d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042dc:	4770      	bx	lr

080042de <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80042de:	b480      	push	{r7}
 80042e0:	b083      	sub	sp, #12
 80042e2:	af00      	add	r7, sp, #0
 80042e4:	6078      	str	r0, [r7, #4]
 80042e6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80042ee:	b2db      	uxtb	r3, r3
 80042f0:	2b20      	cmp	r3, #32
 80042f2:	d138      	bne.n	8004366 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80042fa:	2b01      	cmp	r3, #1
 80042fc:	d101      	bne.n	8004302 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80042fe:	2302      	movs	r3, #2
 8004300:	e032      	b.n	8004368 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2201      	movs	r2, #1
 8004306:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2224      	movs	r2, #36	@ 0x24
 800430e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	681a      	ldr	r2, [r3, #0]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f022 0201 	bic.w	r2, r2, #1
 8004320:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	681a      	ldr	r2, [r3, #0]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004330:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	6819      	ldr	r1, [r3, #0]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	683a      	ldr	r2, [r7, #0]
 800433e:	430a      	orrs	r2, r1
 8004340:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	681a      	ldr	r2, [r3, #0]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f042 0201 	orr.w	r2, r2, #1
 8004350:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2220      	movs	r2, #32
 8004356:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2200      	movs	r2, #0
 800435e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004362:	2300      	movs	r3, #0
 8004364:	e000      	b.n	8004368 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004366:	2302      	movs	r3, #2
  }
}
 8004368:	4618      	mov	r0, r3
 800436a:	370c      	adds	r7, #12
 800436c:	46bd      	mov	sp, r7
 800436e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004372:	4770      	bx	lr

08004374 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004374:	b480      	push	{r7}
 8004376:	b085      	sub	sp, #20
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
 800437c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004384:	b2db      	uxtb	r3, r3
 8004386:	2b20      	cmp	r3, #32
 8004388:	d139      	bne.n	80043fe <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004390:	2b01      	cmp	r3, #1
 8004392:	d101      	bne.n	8004398 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004394:	2302      	movs	r3, #2
 8004396:	e033      	b.n	8004400 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2201      	movs	r2, #1
 800439c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2224      	movs	r2, #36	@ 0x24
 80043a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	681a      	ldr	r2, [r3, #0]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f022 0201 	bic.w	r2, r2, #1
 80043b6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80043c6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	021b      	lsls	r3, r3, #8
 80043cc:	68fa      	ldr	r2, [r7, #12]
 80043ce:	4313      	orrs	r3, r2
 80043d0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	68fa      	ldr	r2, [r7, #12]
 80043d8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	681a      	ldr	r2, [r3, #0]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f042 0201 	orr.w	r2, r2, #1
 80043e8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2220      	movs	r2, #32
 80043ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2200      	movs	r2, #0
 80043f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80043fa:	2300      	movs	r3, #0
 80043fc:	e000      	b.n	8004400 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80043fe:	2302      	movs	r3, #2
  }
}
 8004400:	4618      	mov	r0, r3
 8004402:	3714      	adds	r7, #20
 8004404:	46bd      	mov	sp, r7
 8004406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440a:	4770      	bx	lr

0800440c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b084      	sub	sp, #16
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004414:	4b19      	ldr	r3, [pc, #100]	@ (800447c <HAL_PWREx_ConfigSupply+0x70>)
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	f003 0304 	and.w	r3, r3, #4
 800441c:	2b04      	cmp	r3, #4
 800441e:	d00a      	beq.n	8004436 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004420:	4b16      	ldr	r3, [pc, #88]	@ (800447c <HAL_PWREx_ConfigSupply+0x70>)
 8004422:	68db      	ldr	r3, [r3, #12]
 8004424:	f003 0307 	and.w	r3, r3, #7
 8004428:	687a      	ldr	r2, [r7, #4]
 800442a:	429a      	cmp	r2, r3
 800442c:	d001      	beq.n	8004432 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	e01f      	b.n	8004472 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004432:	2300      	movs	r3, #0
 8004434:	e01d      	b.n	8004472 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004436:	4b11      	ldr	r3, [pc, #68]	@ (800447c <HAL_PWREx_ConfigSupply+0x70>)
 8004438:	68db      	ldr	r3, [r3, #12]
 800443a:	f023 0207 	bic.w	r2, r3, #7
 800443e:	490f      	ldr	r1, [pc, #60]	@ (800447c <HAL_PWREx_ConfigSupply+0x70>)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	4313      	orrs	r3, r2
 8004444:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004446:	f7fc fd7f 	bl	8000f48 <HAL_GetTick>
 800444a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800444c:	e009      	b.n	8004462 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800444e:	f7fc fd7b 	bl	8000f48 <HAL_GetTick>
 8004452:	4602      	mov	r2, r0
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	1ad3      	subs	r3, r2, r3
 8004458:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800445c:	d901      	bls.n	8004462 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800445e:	2301      	movs	r3, #1
 8004460:	e007      	b.n	8004472 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004462:	4b06      	ldr	r3, [pc, #24]	@ (800447c <HAL_PWREx_ConfigSupply+0x70>)
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800446a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800446e:	d1ee      	bne.n	800444e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004470:	2300      	movs	r3, #0
}
 8004472:	4618      	mov	r0, r3
 8004474:	3710      	adds	r7, #16
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}
 800447a:	bf00      	nop
 800447c:	58024800 	.word	0x58024800

08004480 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b08c      	sub	sp, #48	@ 0x30
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d102      	bne.n	8004494 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800448e:	2301      	movs	r3, #1
 8004490:	f000 bc1f 	b.w	8004cd2 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f003 0301 	and.w	r3, r3, #1
 800449c:	2b00      	cmp	r3, #0
 800449e:	f000 80b3 	beq.w	8004608 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80044a2:	4b95      	ldr	r3, [pc, #596]	@ (80046f8 <HAL_RCC_OscConfig+0x278>)
 80044a4:	691b      	ldr	r3, [r3, #16]
 80044a6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80044aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80044ac:	4b92      	ldr	r3, [pc, #584]	@ (80046f8 <HAL_RCC_OscConfig+0x278>)
 80044ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044b0:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80044b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044b4:	2b10      	cmp	r3, #16
 80044b6:	d007      	beq.n	80044c8 <HAL_RCC_OscConfig+0x48>
 80044b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044ba:	2b18      	cmp	r3, #24
 80044bc:	d112      	bne.n	80044e4 <HAL_RCC_OscConfig+0x64>
 80044be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044c0:	f003 0303 	and.w	r3, r3, #3
 80044c4:	2b02      	cmp	r3, #2
 80044c6:	d10d      	bne.n	80044e4 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044c8:	4b8b      	ldr	r3, [pc, #556]	@ (80046f8 <HAL_RCC_OscConfig+0x278>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	f000 8098 	beq.w	8004606 <HAL_RCC_OscConfig+0x186>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	f040 8093 	bne.w	8004606 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80044e0:	2301      	movs	r3, #1
 80044e2:	e3f6      	b.n	8004cd2 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044ec:	d106      	bne.n	80044fc <HAL_RCC_OscConfig+0x7c>
 80044ee:	4b82      	ldr	r3, [pc, #520]	@ (80046f8 <HAL_RCC_OscConfig+0x278>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a81      	ldr	r2, [pc, #516]	@ (80046f8 <HAL_RCC_OscConfig+0x278>)
 80044f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044f8:	6013      	str	r3, [r2, #0]
 80044fa:	e058      	b.n	80045ae <HAL_RCC_OscConfig+0x12e>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d112      	bne.n	800452a <HAL_RCC_OscConfig+0xaa>
 8004504:	4b7c      	ldr	r3, [pc, #496]	@ (80046f8 <HAL_RCC_OscConfig+0x278>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a7b      	ldr	r2, [pc, #492]	@ (80046f8 <HAL_RCC_OscConfig+0x278>)
 800450a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800450e:	6013      	str	r3, [r2, #0]
 8004510:	4b79      	ldr	r3, [pc, #484]	@ (80046f8 <HAL_RCC_OscConfig+0x278>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a78      	ldr	r2, [pc, #480]	@ (80046f8 <HAL_RCC_OscConfig+0x278>)
 8004516:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800451a:	6013      	str	r3, [r2, #0]
 800451c:	4b76      	ldr	r3, [pc, #472]	@ (80046f8 <HAL_RCC_OscConfig+0x278>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a75      	ldr	r2, [pc, #468]	@ (80046f8 <HAL_RCC_OscConfig+0x278>)
 8004522:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004526:	6013      	str	r3, [r2, #0]
 8004528:	e041      	b.n	80045ae <HAL_RCC_OscConfig+0x12e>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004532:	d112      	bne.n	800455a <HAL_RCC_OscConfig+0xda>
 8004534:	4b70      	ldr	r3, [pc, #448]	@ (80046f8 <HAL_RCC_OscConfig+0x278>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a6f      	ldr	r2, [pc, #444]	@ (80046f8 <HAL_RCC_OscConfig+0x278>)
 800453a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800453e:	6013      	str	r3, [r2, #0]
 8004540:	4b6d      	ldr	r3, [pc, #436]	@ (80046f8 <HAL_RCC_OscConfig+0x278>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a6c      	ldr	r2, [pc, #432]	@ (80046f8 <HAL_RCC_OscConfig+0x278>)
 8004546:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800454a:	6013      	str	r3, [r2, #0]
 800454c:	4b6a      	ldr	r3, [pc, #424]	@ (80046f8 <HAL_RCC_OscConfig+0x278>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a69      	ldr	r2, [pc, #420]	@ (80046f8 <HAL_RCC_OscConfig+0x278>)
 8004552:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004556:	6013      	str	r3, [r2, #0]
 8004558:	e029      	b.n	80045ae <HAL_RCC_OscConfig+0x12e>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8004562:	d112      	bne.n	800458a <HAL_RCC_OscConfig+0x10a>
 8004564:	4b64      	ldr	r3, [pc, #400]	@ (80046f8 <HAL_RCC_OscConfig+0x278>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a63      	ldr	r2, [pc, #396]	@ (80046f8 <HAL_RCC_OscConfig+0x278>)
 800456a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800456e:	6013      	str	r3, [r2, #0]
 8004570:	4b61      	ldr	r3, [pc, #388]	@ (80046f8 <HAL_RCC_OscConfig+0x278>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a60      	ldr	r2, [pc, #384]	@ (80046f8 <HAL_RCC_OscConfig+0x278>)
 8004576:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800457a:	6013      	str	r3, [r2, #0]
 800457c:	4b5e      	ldr	r3, [pc, #376]	@ (80046f8 <HAL_RCC_OscConfig+0x278>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a5d      	ldr	r2, [pc, #372]	@ (80046f8 <HAL_RCC_OscConfig+0x278>)
 8004582:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004586:	6013      	str	r3, [r2, #0]
 8004588:	e011      	b.n	80045ae <HAL_RCC_OscConfig+0x12e>
 800458a:	4b5b      	ldr	r3, [pc, #364]	@ (80046f8 <HAL_RCC_OscConfig+0x278>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a5a      	ldr	r2, [pc, #360]	@ (80046f8 <HAL_RCC_OscConfig+0x278>)
 8004590:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004594:	6013      	str	r3, [r2, #0]
 8004596:	4b58      	ldr	r3, [pc, #352]	@ (80046f8 <HAL_RCC_OscConfig+0x278>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a57      	ldr	r2, [pc, #348]	@ (80046f8 <HAL_RCC_OscConfig+0x278>)
 800459c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80045a0:	6013      	str	r3, [r2, #0]
 80045a2:	4b55      	ldr	r3, [pc, #340]	@ (80046f8 <HAL_RCC_OscConfig+0x278>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a54      	ldr	r2, [pc, #336]	@ (80046f8 <HAL_RCC_OscConfig+0x278>)
 80045a8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80045ac:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d013      	beq.n	80045de <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045b6:	f7fc fcc7 	bl	8000f48 <HAL_GetTick>
 80045ba:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80045bc:	e008      	b.n	80045d0 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045be:	f7fc fcc3 	bl	8000f48 <HAL_GetTick>
 80045c2:	4602      	mov	r2, r0
 80045c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045c6:	1ad3      	subs	r3, r2, r3
 80045c8:	2b64      	cmp	r3, #100	@ 0x64
 80045ca:	d901      	bls.n	80045d0 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 80045cc:	2303      	movs	r3, #3
 80045ce:	e380      	b.n	8004cd2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80045d0:	4b49      	ldr	r3, [pc, #292]	@ (80046f8 <HAL_RCC_OscConfig+0x278>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d0f0      	beq.n	80045be <HAL_RCC_OscConfig+0x13e>
 80045dc:	e014      	b.n	8004608 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045de:	f7fc fcb3 	bl	8000f48 <HAL_GetTick>
 80045e2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80045e4:	e008      	b.n	80045f8 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045e6:	f7fc fcaf 	bl	8000f48 <HAL_GetTick>
 80045ea:	4602      	mov	r2, r0
 80045ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045ee:	1ad3      	subs	r3, r2, r3
 80045f0:	2b64      	cmp	r3, #100	@ 0x64
 80045f2:	d901      	bls.n	80045f8 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 80045f4:	2303      	movs	r3, #3
 80045f6:	e36c      	b.n	8004cd2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80045f8:	4b3f      	ldr	r3, [pc, #252]	@ (80046f8 <HAL_RCC_OscConfig+0x278>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004600:	2b00      	cmp	r3, #0
 8004602:	d1f0      	bne.n	80045e6 <HAL_RCC_OscConfig+0x166>
 8004604:	e000      	b.n	8004608 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004606:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f003 0302 	and.w	r3, r3, #2
 8004610:	2b00      	cmp	r3, #0
 8004612:	f000 808c 	beq.w	800472e <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004616:	4b38      	ldr	r3, [pc, #224]	@ (80046f8 <HAL_RCC_OscConfig+0x278>)
 8004618:	691b      	ldr	r3, [r3, #16]
 800461a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800461e:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004620:	4b35      	ldr	r3, [pc, #212]	@ (80046f8 <HAL_RCC_OscConfig+0x278>)
 8004622:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004624:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004626:	6a3b      	ldr	r3, [r7, #32]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d007      	beq.n	800463c <HAL_RCC_OscConfig+0x1bc>
 800462c:	6a3b      	ldr	r3, [r7, #32]
 800462e:	2b18      	cmp	r3, #24
 8004630:	d137      	bne.n	80046a2 <HAL_RCC_OscConfig+0x222>
 8004632:	69fb      	ldr	r3, [r7, #28]
 8004634:	f003 0303 	and.w	r3, r3, #3
 8004638:	2b00      	cmp	r3, #0
 800463a:	d132      	bne.n	80046a2 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800463c:	4b2e      	ldr	r3, [pc, #184]	@ (80046f8 <HAL_RCC_OscConfig+0x278>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f003 0304 	and.w	r3, r3, #4
 8004644:	2b00      	cmp	r3, #0
 8004646:	d005      	beq.n	8004654 <HAL_RCC_OscConfig+0x1d4>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	68db      	ldr	r3, [r3, #12]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d101      	bne.n	8004654 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8004650:	2301      	movs	r3, #1
 8004652:	e33e      	b.n	8004cd2 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004654:	4b28      	ldr	r3, [pc, #160]	@ (80046f8 <HAL_RCC_OscConfig+0x278>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f023 0219 	bic.w	r2, r3, #25
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	68db      	ldr	r3, [r3, #12]
 8004660:	4925      	ldr	r1, [pc, #148]	@ (80046f8 <HAL_RCC_OscConfig+0x278>)
 8004662:	4313      	orrs	r3, r2
 8004664:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004666:	f7fc fc6f 	bl	8000f48 <HAL_GetTick>
 800466a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800466c:	e008      	b.n	8004680 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800466e:	f7fc fc6b 	bl	8000f48 <HAL_GetTick>
 8004672:	4602      	mov	r2, r0
 8004674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004676:	1ad3      	subs	r3, r2, r3
 8004678:	2b02      	cmp	r3, #2
 800467a:	d901      	bls.n	8004680 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 800467c:	2303      	movs	r3, #3
 800467e:	e328      	b.n	8004cd2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004680:	4b1d      	ldr	r3, [pc, #116]	@ (80046f8 <HAL_RCC_OscConfig+0x278>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f003 0304 	and.w	r3, r3, #4
 8004688:	2b00      	cmp	r3, #0
 800468a:	d0f0      	beq.n	800466e <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800468c:	4b1a      	ldr	r3, [pc, #104]	@ (80046f8 <HAL_RCC_OscConfig+0x278>)
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	691b      	ldr	r3, [r3, #16]
 8004698:	061b      	lsls	r3, r3, #24
 800469a:	4917      	ldr	r1, [pc, #92]	@ (80046f8 <HAL_RCC_OscConfig+0x278>)
 800469c:	4313      	orrs	r3, r2
 800469e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80046a0:	e045      	b.n	800472e <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	68db      	ldr	r3, [r3, #12]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d028      	beq.n	80046fc <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80046aa:	4b13      	ldr	r3, [pc, #76]	@ (80046f8 <HAL_RCC_OscConfig+0x278>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f023 0219 	bic.w	r2, r3, #25
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	68db      	ldr	r3, [r3, #12]
 80046b6:	4910      	ldr	r1, [pc, #64]	@ (80046f8 <HAL_RCC_OscConfig+0x278>)
 80046b8:	4313      	orrs	r3, r2
 80046ba:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046bc:	f7fc fc44 	bl	8000f48 <HAL_GetTick>
 80046c0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80046c2:	e008      	b.n	80046d6 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046c4:	f7fc fc40 	bl	8000f48 <HAL_GetTick>
 80046c8:	4602      	mov	r2, r0
 80046ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046cc:	1ad3      	subs	r3, r2, r3
 80046ce:	2b02      	cmp	r3, #2
 80046d0:	d901      	bls.n	80046d6 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 80046d2:	2303      	movs	r3, #3
 80046d4:	e2fd      	b.n	8004cd2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80046d6:	4b08      	ldr	r3, [pc, #32]	@ (80046f8 <HAL_RCC_OscConfig+0x278>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f003 0304 	and.w	r3, r3, #4
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d0f0      	beq.n	80046c4 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046e2:	4b05      	ldr	r3, [pc, #20]	@ (80046f8 <HAL_RCC_OscConfig+0x278>)
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	691b      	ldr	r3, [r3, #16]
 80046ee:	061b      	lsls	r3, r3, #24
 80046f0:	4901      	ldr	r1, [pc, #4]	@ (80046f8 <HAL_RCC_OscConfig+0x278>)
 80046f2:	4313      	orrs	r3, r2
 80046f4:	604b      	str	r3, [r1, #4]
 80046f6:	e01a      	b.n	800472e <HAL_RCC_OscConfig+0x2ae>
 80046f8:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80046fc:	4b97      	ldr	r3, [pc, #604]	@ (800495c <HAL_RCC_OscConfig+0x4dc>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a96      	ldr	r2, [pc, #600]	@ (800495c <HAL_RCC_OscConfig+0x4dc>)
 8004702:	f023 0301 	bic.w	r3, r3, #1
 8004706:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004708:	f7fc fc1e 	bl	8000f48 <HAL_GetTick>
 800470c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800470e:	e008      	b.n	8004722 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004710:	f7fc fc1a 	bl	8000f48 <HAL_GetTick>
 8004714:	4602      	mov	r2, r0
 8004716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004718:	1ad3      	subs	r3, r2, r3
 800471a:	2b02      	cmp	r3, #2
 800471c:	d901      	bls.n	8004722 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 800471e:	2303      	movs	r3, #3
 8004720:	e2d7      	b.n	8004cd2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004722:	4b8e      	ldr	r3, [pc, #568]	@ (800495c <HAL_RCC_OscConfig+0x4dc>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f003 0304 	and.w	r3, r3, #4
 800472a:	2b00      	cmp	r3, #0
 800472c:	d1f0      	bne.n	8004710 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f003 0310 	and.w	r3, r3, #16
 8004736:	2b00      	cmp	r3, #0
 8004738:	d06a      	beq.n	8004810 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800473a:	4b88      	ldr	r3, [pc, #544]	@ (800495c <HAL_RCC_OscConfig+0x4dc>)
 800473c:	691b      	ldr	r3, [r3, #16]
 800473e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004742:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004744:	4b85      	ldr	r3, [pc, #532]	@ (800495c <HAL_RCC_OscConfig+0x4dc>)
 8004746:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004748:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800474a:	69bb      	ldr	r3, [r7, #24]
 800474c:	2b08      	cmp	r3, #8
 800474e:	d007      	beq.n	8004760 <HAL_RCC_OscConfig+0x2e0>
 8004750:	69bb      	ldr	r3, [r7, #24]
 8004752:	2b18      	cmp	r3, #24
 8004754:	d11b      	bne.n	800478e <HAL_RCC_OscConfig+0x30e>
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	f003 0303 	and.w	r3, r3, #3
 800475c:	2b01      	cmp	r3, #1
 800475e:	d116      	bne.n	800478e <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004760:	4b7e      	ldr	r3, [pc, #504]	@ (800495c <HAL_RCC_OscConfig+0x4dc>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004768:	2b00      	cmp	r3, #0
 800476a:	d005      	beq.n	8004778 <HAL_RCC_OscConfig+0x2f8>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	69db      	ldr	r3, [r3, #28]
 8004770:	2b80      	cmp	r3, #128	@ 0x80
 8004772:	d001      	beq.n	8004778 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8004774:	2301      	movs	r3, #1
 8004776:	e2ac      	b.n	8004cd2 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004778:	4b78      	ldr	r3, [pc, #480]	@ (800495c <HAL_RCC_OscConfig+0x4dc>)
 800477a:	68db      	ldr	r3, [r3, #12]
 800477c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6a1b      	ldr	r3, [r3, #32]
 8004784:	061b      	lsls	r3, r3, #24
 8004786:	4975      	ldr	r1, [pc, #468]	@ (800495c <HAL_RCC_OscConfig+0x4dc>)
 8004788:	4313      	orrs	r3, r2
 800478a:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800478c:	e040      	b.n	8004810 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	69db      	ldr	r3, [r3, #28]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d023      	beq.n	80047de <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004796:	4b71      	ldr	r3, [pc, #452]	@ (800495c <HAL_RCC_OscConfig+0x4dc>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a70      	ldr	r2, [pc, #448]	@ (800495c <HAL_RCC_OscConfig+0x4dc>)
 800479c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80047a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047a2:	f7fc fbd1 	bl	8000f48 <HAL_GetTick>
 80047a6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80047a8:	e008      	b.n	80047bc <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80047aa:	f7fc fbcd 	bl	8000f48 <HAL_GetTick>
 80047ae:	4602      	mov	r2, r0
 80047b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047b2:	1ad3      	subs	r3, r2, r3
 80047b4:	2b02      	cmp	r3, #2
 80047b6:	d901      	bls.n	80047bc <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 80047b8:	2303      	movs	r3, #3
 80047ba:	e28a      	b.n	8004cd2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80047bc:	4b67      	ldr	r3, [pc, #412]	@ (800495c <HAL_RCC_OscConfig+0x4dc>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d0f0      	beq.n	80047aa <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80047c8:	4b64      	ldr	r3, [pc, #400]	@ (800495c <HAL_RCC_OscConfig+0x4dc>)
 80047ca:	68db      	ldr	r3, [r3, #12]
 80047cc:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6a1b      	ldr	r3, [r3, #32]
 80047d4:	061b      	lsls	r3, r3, #24
 80047d6:	4961      	ldr	r1, [pc, #388]	@ (800495c <HAL_RCC_OscConfig+0x4dc>)
 80047d8:	4313      	orrs	r3, r2
 80047da:	60cb      	str	r3, [r1, #12]
 80047dc:	e018      	b.n	8004810 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80047de:	4b5f      	ldr	r3, [pc, #380]	@ (800495c <HAL_RCC_OscConfig+0x4dc>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a5e      	ldr	r2, [pc, #376]	@ (800495c <HAL_RCC_OscConfig+0x4dc>)
 80047e4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80047e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047ea:	f7fc fbad 	bl	8000f48 <HAL_GetTick>
 80047ee:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80047f0:	e008      	b.n	8004804 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80047f2:	f7fc fba9 	bl	8000f48 <HAL_GetTick>
 80047f6:	4602      	mov	r2, r0
 80047f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047fa:	1ad3      	subs	r3, r2, r3
 80047fc:	2b02      	cmp	r3, #2
 80047fe:	d901      	bls.n	8004804 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8004800:	2303      	movs	r3, #3
 8004802:	e266      	b.n	8004cd2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004804:	4b55      	ldr	r3, [pc, #340]	@ (800495c <HAL_RCC_OscConfig+0x4dc>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800480c:	2b00      	cmp	r3, #0
 800480e:	d1f0      	bne.n	80047f2 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f003 0308 	and.w	r3, r3, #8
 8004818:	2b00      	cmp	r3, #0
 800481a:	d036      	beq.n	800488a <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	695b      	ldr	r3, [r3, #20]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d019      	beq.n	8004858 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004824:	4b4d      	ldr	r3, [pc, #308]	@ (800495c <HAL_RCC_OscConfig+0x4dc>)
 8004826:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004828:	4a4c      	ldr	r2, [pc, #304]	@ (800495c <HAL_RCC_OscConfig+0x4dc>)
 800482a:	f043 0301 	orr.w	r3, r3, #1
 800482e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004830:	f7fc fb8a 	bl	8000f48 <HAL_GetTick>
 8004834:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004836:	e008      	b.n	800484a <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004838:	f7fc fb86 	bl	8000f48 <HAL_GetTick>
 800483c:	4602      	mov	r2, r0
 800483e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004840:	1ad3      	subs	r3, r2, r3
 8004842:	2b02      	cmp	r3, #2
 8004844:	d901      	bls.n	800484a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8004846:	2303      	movs	r3, #3
 8004848:	e243      	b.n	8004cd2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800484a:	4b44      	ldr	r3, [pc, #272]	@ (800495c <HAL_RCC_OscConfig+0x4dc>)
 800484c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800484e:	f003 0302 	and.w	r3, r3, #2
 8004852:	2b00      	cmp	r3, #0
 8004854:	d0f0      	beq.n	8004838 <HAL_RCC_OscConfig+0x3b8>
 8004856:	e018      	b.n	800488a <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004858:	4b40      	ldr	r3, [pc, #256]	@ (800495c <HAL_RCC_OscConfig+0x4dc>)
 800485a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800485c:	4a3f      	ldr	r2, [pc, #252]	@ (800495c <HAL_RCC_OscConfig+0x4dc>)
 800485e:	f023 0301 	bic.w	r3, r3, #1
 8004862:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004864:	f7fc fb70 	bl	8000f48 <HAL_GetTick>
 8004868:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800486a:	e008      	b.n	800487e <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800486c:	f7fc fb6c 	bl	8000f48 <HAL_GetTick>
 8004870:	4602      	mov	r2, r0
 8004872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004874:	1ad3      	subs	r3, r2, r3
 8004876:	2b02      	cmp	r3, #2
 8004878:	d901      	bls.n	800487e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800487a:	2303      	movs	r3, #3
 800487c:	e229      	b.n	8004cd2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800487e:	4b37      	ldr	r3, [pc, #220]	@ (800495c <HAL_RCC_OscConfig+0x4dc>)
 8004880:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004882:	f003 0302 	and.w	r3, r3, #2
 8004886:	2b00      	cmp	r3, #0
 8004888:	d1f0      	bne.n	800486c <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f003 0320 	and.w	r3, r3, #32
 8004892:	2b00      	cmp	r3, #0
 8004894:	d036      	beq.n	8004904 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	699b      	ldr	r3, [r3, #24]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d019      	beq.n	80048d2 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800489e:	4b2f      	ldr	r3, [pc, #188]	@ (800495c <HAL_RCC_OscConfig+0x4dc>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a2e      	ldr	r2, [pc, #184]	@ (800495c <HAL_RCC_OscConfig+0x4dc>)
 80048a4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80048a8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80048aa:	f7fc fb4d 	bl	8000f48 <HAL_GetTick>
 80048ae:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80048b0:	e008      	b.n	80048c4 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80048b2:	f7fc fb49 	bl	8000f48 <HAL_GetTick>
 80048b6:	4602      	mov	r2, r0
 80048b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048ba:	1ad3      	subs	r3, r2, r3
 80048bc:	2b02      	cmp	r3, #2
 80048be:	d901      	bls.n	80048c4 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80048c0:	2303      	movs	r3, #3
 80048c2:	e206      	b.n	8004cd2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80048c4:	4b25      	ldr	r3, [pc, #148]	@ (800495c <HAL_RCC_OscConfig+0x4dc>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d0f0      	beq.n	80048b2 <HAL_RCC_OscConfig+0x432>
 80048d0:	e018      	b.n	8004904 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80048d2:	4b22      	ldr	r3, [pc, #136]	@ (800495c <HAL_RCC_OscConfig+0x4dc>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a21      	ldr	r2, [pc, #132]	@ (800495c <HAL_RCC_OscConfig+0x4dc>)
 80048d8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80048dc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80048de:	f7fc fb33 	bl	8000f48 <HAL_GetTick>
 80048e2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80048e4:	e008      	b.n	80048f8 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80048e6:	f7fc fb2f 	bl	8000f48 <HAL_GetTick>
 80048ea:	4602      	mov	r2, r0
 80048ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048ee:	1ad3      	subs	r3, r2, r3
 80048f0:	2b02      	cmp	r3, #2
 80048f2:	d901      	bls.n	80048f8 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 80048f4:	2303      	movs	r3, #3
 80048f6:	e1ec      	b.n	8004cd2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80048f8:	4b18      	ldr	r3, [pc, #96]	@ (800495c <HAL_RCC_OscConfig+0x4dc>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004900:	2b00      	cmp	r3, #0
 8004902:	d1f0      	bne.n	80048e6 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f003 0304 	and.w	r3, r3, #4
 800490c:	2b00      	cmp	r3, #0
 800490e:	f000 80af 	beq.w	8004a70 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004912:	4b13      	ldr	r3, [pc, #76]	@ (8004960 <HAL_RCC_OscConfig+0x4e0>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a12      	ldr	r2, [pc, #72]	@ (8004960 <HAL_RCC_OscConfig+0x4e0>)
 8004918:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800491c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800491e:	f7fc fb13 	bl	8000f48 <HAL_GetTick>
 8004922:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004924:	e008      	b.n	8004938 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004926:	f7fc fb0f 	bl	8000f48 <HAL_GetTick>
 800492a:	4602      	mov	r2, r0
 800492c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800492e:	1ad3      	subs	r3, r2, r3
 8004930:	2b64      	cmp	r3, #100	@ 0x64
 8004932:	d901      	bls.n	8004938 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8004934:	2303      	movs	r3, #3
 8004936:	e1cc      	b.n	8004cd2 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004938:	4b09      	ldr	r3, [pc, #36]	@ (8004960 <HAL_RCC_OscConfig+0x4e0>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004940:	2b00      	cmp	r3, #0
 8004942:	d0f0      	beq.n	8004926 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	689b      	ldr	r3, [r3, #8]
 8004948:	2b01      	cmp	r3, #1
 800494a:	d10b      	bne.n	8004964 <HAL_RCC_OscConfig+0x4e4>
 800494c:	4b03      	ldr	r3, [pc, #12]	@ (800495c <HAL_RCC_OscConfig+0x4dc>)
 800494e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004950:	4a02      	ldr	r2, [pc, #8]	@ (800495c <HAL_RCC_OscConfig+0x4dc>)
 8004952:	f043 0301 	orr.w	r3, r3, #1
 8004956:	6713      	str	r3, [r2, #112]	@ 0x70
 8004958:	e05b      	b.n	8004a12 <HAL_RCC_OscConfig+0x592>
 800495a:	bf00      	nop
 800495c:	58024400 	.word	0x58024400
 8004960:	58024800 	.word	0x58024800
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d112      	bne.n	8004992 <HAL_RCC_OscConfig+0x512>
 800496c:	4b9d      	ldr	r3, [pc, #628]	@ (8004be4 <HAL_RCC_OscConfig+0x764>)
 800496e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004970:	4a9c      	ldr	r2, [pc, #624]	@ (8004be4 <HAL_RCC_OscConfig+0x764>)
 8004972:	f023 0301 	bic.w	r3, r3, #1
 8004976:	6713      	str	r3, [r2, #112]	@ 0x70
 8004978:	4b9a      	ldr	r3, [pc, #616]	@ (8004be4 <HAL_RCC_OscConfig+0x764>)
 800497a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800497c:	4a99      	ldr	r2, [pc, #612]	@ (8004be4 <HAL_RCC_OscConfig+0x764>)
 800497e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004982:	6713      	str	r3, [r2, #112]	@ 0x70
 8004984:	4b97      	ldr	r3, [pc, #604]	@ (8004be4 <HAL_RCC_OscConfig+0x764>)
 8004986:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004988:	4a96      	ldr	r2, [pc, #600]	@ (8004be4 <HAL_RCC_OscConfig+0x764>)
 800498a:	f023 0304 	bic.w	r3, r3, #4
 800498e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004990:	e03f      	b.n	8004a12 <HAL_RCC_OscConfig+0x592>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	689b      	ldr	r3, [r3, #8]
 8004996:	2b05      	cmp	r3, #5
 8004998:	d112      	bne.n	80049c0 <HAL_RCC_OscConfig+0x540>
 800499a:	4b92      	ldr	r3, [pc, #584]	@ (8004be4 <HAL_RCC_OscConfig+0x764>)
 800499c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800499e:	4a91      	ldr	r2, [pc, #580]	@ (8004be4 <HAL_RCC_OscConfig+0x764>)
 80049a0:	f043 0304 	orr.w	r3, r3, #4
 80049a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80049a6:	4b8f      	ldr	r3, [pc, #572]	@ (8004be4 <HAL_RCC_OscConfig+0x764>)
 80049a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049aa:	4a8e      	ldr	r2, [pc, #568]	@ (8004be4 <HAL_RCC_OscConfig+0x764>)
 80049ac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80049b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80049b2:	4b8c      	ldr	r3, [pc, #560]	@ (8004be4 <HAL_RCC_OscConfig+0x764>)
 80049b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049b6:	4a8b      	ldr	r2, [pc, #556]	@ (8004be4 <HAL_RCC_OscConfig+0x764>)
 80049b8:	f043 0301 	orr.w	r3, r3, #1
 80049bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80049be:	e028      	b.n	8004a12 <HAL_RCC_OscConfig+0x592>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	2b85      	cmp	r3, #133	@ 0x85
 80049c6:	d112      	bne.n	80049ee <HAL_RCC_OscConfig+0x56e>
 80049c8:	4b86      	ldr	r3, [pc, #536]	@ (8004be4 <HAL_RCC_OscConfig+0x764>)
 80049ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049cc:	4a85      	ldr	r2, [pc, #532]	@ (8004be4 <HAL_RCC_OscConfig+0x764>)
 80049ce:	f043 0304 	orr.w	r3, r3, #4
 80049d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80049d4:	4b83      	ldr	r3, [pc, #524]	@ (8004be4 <HAL_RCC_OscConfig+0x764>)
 80049d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049d8:	4a82      	ldr	r2, [pc, #520]	@ (8004be4 <HAL_RCC_OscConfig+0x764>)
 80049da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80049de:	6713      	str	r3, [r2, #112]	@ 0x70
 80049e0:	4b80      	ldr	r3, [pc, #512]	@ (8004be4 <HAL_RCC_OscConfig+0x764>)
 80049e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049e4:	4a7f      	ldr	r2, [pc, #508]	@ (8004be4 <HAL_RCC_OscConfig+0x764>)
 80049e6:	f043 0301 	orr.w	r3, r3, #1
 80049ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80049ec:	e011      	b.n	8004a12 <HAL_RCC_OscConfig+0x592>
 80049ee:	4b7d      	ldr	r3, [pc, #500]	@ (8004be4 <HAL_RCC_OscConfig+0x764>)
 80049f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049f2:	4a7c      	ldr	r2, [pc, #496]	@ (8004be4 <HAL_RCC_OscConfig+0x764>)
 80049f4:	f023 0301 	bic.w	r3, r3, #1
 80049f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80049fa:	4b7a      	ldr	r3, [pc, #488]	@ (8004be4 <HAL_RCC_OscConfig+0x764>)
 80049fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049fe:	4a79      	ldr	r2, [pc, #484]	@ (8004be4 <HAL_RCC_OscConfig+0x764>)
 8004a00:	f023 0304 	bic.w	r3, r3, #4
 8004a04:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a06:	4b77      	ldr	r3, [pc, #476]	@ (8004be4 <HAL_RCC_OscConfig+0x764>)
 8004a08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a0a:	4a76      	ldr	r2, [pc, #472]	@ (8004be4 <HAL_RCC_OscConfig+0x764>)
 8004a0c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004a10:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	689b      	ldr	r3, [r3, #8]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d015      	beq.n	8004a46 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a1a:	f7fc fa95 	bl	8000f48 <HAL_GetTick>
 8004a1e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004a20:	e00a      	b.n	8004a38 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a22:	f7fc fa91 	bl	8000f48 <HAL_GetTick>
 8004a26:	4602      	mov	r2, r0
 8004a28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a2a:	1ad3      	subs	r3, r2, r3
 8004a2c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d901      	bls.n	8004a38 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8004a34:	2303      	movs	r3, #3
 8004a36:	e14c      	b.n	8004cd2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004a38:	4b6a      	ldr	r3, [pc, #424]	@ (8004be4 <HAL_RCC_OscConfig+0x764>)
 8004a3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a3c:	f003 0302 	and.w	r3, r3, #2
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d0ee      	beq.n	8004a22 <HAL_RCC_OscConfig+0x5a2>
 8004a44:	e014      	b.n	8004a70 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a46:	f7fc fa7f 	bl	8000f48 <HAL_GetTick>
 8004a4a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004a4c:	e00a      	b.n	8004a64 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a4e:	f7fc fa7b 	bl	8000f48 <HAL_GetTick>
 8004a52:	4602      	mov	r2, r0
 8004a54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a56:	1ad3      	subs	r3, r2, r3
 8004a58:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d901      	bls.n	8004a64 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8004a60:	2303      	movs	r3, #3
 8004a62:	e136      	b.n	8004cd2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004a64:	4b5f      	ldr	r3, [pc, #380]	@ (8004be4 <HAL_RCC_OscConfig+0x764>)
 8004a66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a68:	f003 0302 	and.w	r3, r3, #2
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d1ee      	bne.n	8004a4e <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	f000 812b 	beq.w	8004cd0 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004a7a:	4b5a      	ldr	r3, [pc, #360]	@ (8004be4 <HAL_RCC_OscConfig+0x764>)
 8004a7c:	691b      	ldr	r3, [r3, #16]
 8004a7e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004a82:	2b18      	cmp	r3, #24
 8004a84:	f000 80bb 	beq.w	8004bfe <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a8c:	2b02      	cmp	r3, #2
 8004a8e:	f040 8095 	bne.w	8004bbc <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a92:	4b54      	ldr	r3, [pc, #336]	@ (8004be4 <HAL_RCC_OscConfig+0x764>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a53      	ldr	r2, [pc, #332]	@ (8004be4 <HAL_RCC_OscConfig+0x764>)
 8004a98:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004a9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a9e:	f7fc fa53 	bl	8000f48 <HAL_GetTick>
 8004aa2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004aa4:	e008      	b.n	8004ab8 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004aa6:	f7fc fa4f 	bl	8000f48 <HAL_GetTick>
 8004aaa:	4602      	mov	r2, r0
 8004aac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aae:	1ad3      	subs	r3, r2, r3
 8004ab0:	2b02      	cmp	r3, #2
 8004ab2:	d901      	bls.n	8004ab8 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8004ab4:	2303      	movs	r3, #3
 8004ab6:	e10c      	b.n	8004cd2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004ab8:	4b4a      	ldr	r3, [pc, #296]	@ (8004be4 <HAL_RCC_OscConfig+0x764>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d1f0      	bne.n	8004aa6 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ac4:	4b47      	ldr	r3, [pc, #284]	@ (8004be4 <HAL_RCC_OscConfig+0x764>)
 8004ac6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004ac8:	4b47      	ldr	r3, [pc, #284]	@ (8004be8 <HAL_RCC_OscConfig+0x768>)
 8004aca:	4013      	ands	r3, r2
 8004acc:	687a      	ldr	r2, [r7, #4]
 8004ace:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8004ad0:	687a      	ldr	r2, [r7, #4]
 8004ad2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004ad4:	0112      	lsls	r2, r2, #4
 8004ad6:	430a      	orrs	r2, r1
 8004ad8:	4942      	ldr	r1, [pc, #264]	@ (8004be4 <HAL_RCC_OscConfig+0x764>)
 8004ada:	4313      	orrs	r3, r2
 8004adc:	628b      	str	r3, [r1, #40]	@ 0x28
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ae2:	3b01      	subs	r3, #1
 8004ae4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004aec:	3b01      	subs	r3, #1
 8004aee:	025b      	lsls	r3, r3, #9
 8004af0:	b29b      	uxth	r3, r3
 8004af2:	431a      	orrs	r2, r3
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004af8:	3b01      	subs	r3, #1
 8004afa:	041b      	lsls	r3, r3, #16
 8004afc:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004b00:	431a      	orrs	r2, r3
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b06:	3b01      	subs	r3, #1
 8004b08:	061b      	lsls	r3, r3, #24
 8004b0a:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004b0e:	4935      	ldr	r1, [pc, #212]	@ (8004be4 <HAL_RCC_OscConfig+0x764>)
 8004b10:	4313      	orrs	r3, r2
 8004b12:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004b14:	4b33      	ldr	r3, [pc, #204]	@ (8004be4 <HAL_RCC_OscConfig+0x764>)
 8004b16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b18:	4a32      	ldr	r2, [pc, #200]	@ (8004be4 <HAL_RCC_OscConfig+0x764>)
 8004b1a:	f023 0301 	bic.w	r3, r3, #1
 8004b1e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004b20:	4b30      	ldr	r3, [pc, #192]	@ (8004be4 <HAL_RCC_OscConfig+0x764>)
 8004b22:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004b24:	4b31      	ldr	r3, [pc, #196]	@ (8004bec <HAL_RCC_OscConfig+0x76c>)
 8004b26:	4013      	ands	r3, r2
 8004b28:	687a      	ldr	r2, [r7, #4]
 8004b2a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004b2c:	00d2      	lsls	r2, r2, #3
 8004b2e:	492d      	ldr	r1, [pc, #180]	@ (8004be4 <HAL_RCC_OscConfig+0x764>)
 8004b30:	4313      	orrs	r3, r2
 8004b32:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004b34:	4b2b      	ldr	r3, [pc, #172]	@ (8004be4 <HAL_RCC_OscConfig+0x764>)
 8004b36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b38:	f023 020c 	bic.w	r2, r3, #12
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b40:	4928      	ldr	r1, [pc, #160]	@ (8004be4 <HAL_RCC_OscConfig+0x764>)
 8004b42:	4313      	orrs	r3, r2
 8004b44:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004b46:	4b27      	ldr	r3, [pc, #156]	@ (8004be4 <HAL_RCC_OscConfig+0x764>)
 8004b48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b4a:	f023 0202 	bic.w	r2, r3, #2
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b52:	4924      	ldr	r1, [pc, #144]	@ (8004be4 <HAL_RCC_OscConfig+0x764>)
 8004b54:	4313      	orrs	r3, r2
 8004b56:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004b58:	4b22      	ldr	r3, [pc, #136]	@ (8004be4 <HAL_RCC_OscConfig+0x764>)
 8004b5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b5c:	4a21      	ldr	r2, [pc, #132]	@ (8004be4 <HAL_RCC_OscConfig+0x764>)
 8004b5e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b62:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b64:	4b1f      	ldr	r3, [pc, #124]	@ (8004be4 <HAL_RCC_OscConfig+0x764>)
 8004b66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b68:	4a1e      	ldr	r2, [pc, #120]	@ (8004be4 <HAL_RCC_OscConfig+0x764>)
 8004b6a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b6e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004b70:	4b1c      	ldr	r3, [pc, #112]	@ (8004be4 <HAL_RCC_OscConfig+0x764>)
 8004b72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b74:	4a1b      	ldr	r2, [pc, #108]	@ (8004be4 <HAL_RCC_OscConfig+0x764>)
 8004b76:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004b7a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004b7c:	4b19      	ldr	r3, [pc, #100]	@ (8004be4 <HAL_RCC_OscConfig+0x764>)
 8004b7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b80:	4a18      	ldr	r2, [pc, #96]	@ (8004be4 <HAL_RCC_OscConfig+0x764>)
 8004b82:	f043 0301 	orr.w	r3, r3, #1
 8004b86:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b88:	4b16      	ldr	r3, [pc, #88]	@ (8004be4 <HAL_RCC_OscConfig+0x764>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a15      	ldr	r2, [pc, #84]	@ (8004be4 <HAL_RCC_OscConfig+0x764>)
 8004b8e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004b92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b94:	f7fc f9d8 	bl	8000f48 <HAL_GetTick>
 8004b98:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004b9a:	e008      	b.n	8004bae <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b9c:	f7fc f9d4 	bl	8000f48 <HAL_GetTick>
 8004ba0:	4602      	mov	r2, r0
 8004ba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ba4:	1ad3      	subs	r3, r2, r3
 8004ba6:	2b02      	cmp	r3, #2
 8004ba8:	d901      	bls.n	8004bae <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8004baa:	2303      	movs	r3, #3
 8004bac:	e091      	b.n	8004cd2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004bae:	4b0d      	ldr	r3, [pc, #52]	@ (8004be4 <HAL_RCC_OscConfig+0x764>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d0f0      	beq.n	8004b9c <HAL_RCC_OscConfig+0x71c>
 8004bba:	e089      	b.n	8004cd0 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bbc:	4b09      	ldr	r3, [pc, #36]	@ (8004be4 <HAL_RCC_OscConfig+0x764>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a08      	ldr	r2, [pc, #32]	@ (8004be4 <HAL_RCC_OscConfig+0x764>)
 8004bc2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004bc6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bc8:	f7fc f9be 	bl	8000f48 <HAL_GetTick>
 8004bcc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004bce:	e00f      	b.n	8004bf0 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bd0:	f7fc f9ba 	bl	8000f48 <HAL_GetTick>
 8004bd4:	4602      	mov	r2, r0
 8004bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bd8:	1ad3      	subs	r3, r2, r3
 8004bda:	2b02      	cmp	r3, #2
 8004bdc:	d908      	bls.n	8004bf0 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8004bde:	2303      	movs	r3, #3
 8004be0:	e077      	b.n	8004cd2 <HAL_RCC_OscConfig+0x852>
 8004be2:	bf00      	nop
 8004be4:	58024400 	.word	0x58024400
 8004be8:	fffffc0c 	.word	0xfffffc0c
 8004bec:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004bf0:	4b3a      	ldr	r3, [pc, #232]	@ (8004cdc <HAL_RCC_OscConfig+0x85c>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d1e9      	bne.n	8004bd0 <HAL_RCC_OscConfig+0x750>
 8004bfc:	e068      	b.n	8004cd0 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004bfe:	4b37      	ldr	r3, [pc, #220]	@ (8004cdc <HAL_RCC_OscConfig+0x85c>)
 8004c00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c02:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004c04:	4b35      	ldr	r3, [pc, #212]	@ (8004cdc <HAL_RCC_OscConfig+0x85c>)
 8004c06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c08:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c0e:	2b01      	cmp	r3, #1
 8004c10:	d031      	beq.n	8004c76 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c12:	693b      	ldr	r3, [r7, #16]
 8004c14:	f003 0203 	and.w	r2, r3, #3
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c1c:	429a      	cmp	r2, r3
 8004c1e:	d12a      	bne.n	8004c76 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004c20:	693b      	ldr	r3, [r7, #16]
 8004c22:	091b      	lsrs	r3, r3, #4
 8004c24:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c2c:	429a      	cmp	r2, r3
 8004c2e:	d122      	bne.n	8004c76 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c3a:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004c3c:	429a      	cmp	r2, r3
 8004c3e:	d11a      	bne.n	8004c76 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	0a5b      	lsrs	r3, r3, #9
 8004c44:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c4c:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004c4e:	429a      	cmp	r2, r3
 8004c50:	d111      	bne.n	8004c76 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	0c1b      	lsrs	r3, r3, #16
 8004c56:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c5e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004c60:	429a      	cmp	r2, r3
 8004c62:	d108      	bne.n	8004c76 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	0e1b      	lsrs	r3, r3, #24
 8004c68:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c70:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004c72:	429a      	cmp	r2, r3
 8004c74:	d001      	beq.n	8004c7a <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8004c76:	2301      	movs	r3, #1
 8004c78:	e02b      	b.n	8004cd2 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004c7a:	4b18      	ldr	r3, [pc, #96]	@ (8004cdc <HAL_RCC_OscConfig+0x85c>)
 8004c7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c7e:	08db      	lsrs	r3, r3, #3
 8004c80:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004c84:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c8a:	693a      	ldr	r2, [r7, #16]
 8004c8c:	429a      	cmp	r2, r3
 8004c8e:	d01f      	beq.n	8004cd0 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004c90:	4b12      	ldr	r3, [pc, #72]	@ (8004cdc <HAL_RCC_OscConfig+0x85c>)
 8004c92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c94:	4a11      	ldr	r2, [pc, #68]	@ (8004cdc <HAL_RCC_OscConfig+0x85c>)
 8004c96:	f023 0301 	bic.w	r3, r3, #1
 8004c9a:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004c9c:	f7fc f954 	bl	8000f48 <HAL_GetTick>
 8004ca0:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004ca2:	bf00      	nop
 8004ca4:	f7fc f950 	bl	8000f48 <HAL_GetTick>
 8004ca8:	4602      	mov	r2, r0
 8004caa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d0f9      	beq.n	8004ca4 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004cb0:	4b0a      	ldr	r3, [pc, #40]	@ (8004cdc <HAL_RCC_OscConfig+0x85c>)
 8004cb2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004cb4:	4b0a      	ldr	r3, [pc, #40]	@ (8004ce0 <HAL_RCC_OscConfig+0x860>)
 8004cb6:	4013      	ands	r3, r2
 8004cb8:	687a      	ldr	r2, [r7, #4]
 8004cba:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004cbc:	00d2      	lsls	r2, r2, #3
 8004cbe:	4907      	ldr	r1, [pc, #28]	@ (8004cdc <HAL_RCC_OscConfig+0x85c>)
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004cc4:	4b05      	ldr	r3, [pc, #20]	@ (8004cdc <HAL_RCC_OscConfig+0x85c>)
 8004cc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cc8:	4a04      	ldr	r2, [pc, #16]	@ (8004cdc <HAL_RCC_OscConfig+0x85c>)
 8004cca:	f043 0301 	orr.w	r3, r3, #1
 8004cce:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004cd0:	2300      	movs	r3, #0
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	3730      	adds	r7, #48	@ 0x30
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}
 8004cda:	bf00      	nop
 8004cdc:	58024400 	.word	0x58024400
 8004ce0:	ffff0007 	.word	0xffff0007

08004ce4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b086      	sub	sp, #24
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
 8004cec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d101      	bne.n	8004cf8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	e19c      	b.n	8005032 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004cf8:	4b8a      	ldr	r3, [pc, #552]	@ (8004f24 <HAL_RCC_ClockConfig+0x240>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f003 030f 	and.w	r3, r3, #15
 8004d00:	683a      	ldr	r2, [r7, #0]
 8004d02:	429a      	cmp	r2, r3
 8004d04:	d910      	bls.n	8004d28 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d06:	4b87      	ldr	r3, [pc, #540]	@ (8004f24 <HAL_RCC_ClockConfig+0x240>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f023 020f 	bic.w	r2, r3, #15
 8004d0e:	4985      	ldr	r1, [pc, #532]	@ (8004f24 <HAL_RCC_ClockConfig+0x240>)
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	4313      	orrs	r3, r2
 8004d14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d16:	4b83      	ldr	r3, [pc, #524]	@ (8004f24 <HAL_RCC_ClockConfig+0x240>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f003 030f 	and.w	r3, r3, #15
 8004d1e:	683a      	ldr	r2, [r7, #0]
 8004d20:	429a      	cmp	r2, r3
 8004d22:	d001      	beq.n	8004d28 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004d24:	2301      	movs	r3, #1
 8004d26:	e184      	b.n	8005032 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f003 0304 	and.w	r3, r3, #4
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d010      	beq.n	8004d56 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	691a      	ldr	r2, [r3, #16]
 8004d38:	4b7b      	ldr	r3, [pc, #492]	@ (8004f28 <HAL_RCC_ClockConfig+0x244>)
 8004d3a:	699b      	ldr	r3, [r3, #24]
 8004d3c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004d40:	429a      	cmp	r2, r3
 8004d42:	d908      	bls.n	8004d56 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004d44:	4b78      	ldr	r3, [pc, #480]	@ (8004f28 <HAL_RCC_ClockConfig+0x244>)
 8004d46:	699b      	ldr	r3, [r3, #24]
 8004d48:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	691b      	ldr	r3, [r3, #16]
 8004d50:	4975      	ldr	r1, [pc, #468]	@ (8004f28 <HAL_RCC_ClockConfig+0x244>)
 8004d52:	4313      	orrs	r3, r2
 8004d54:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f003 0308 	and.w	r3, r3, #8
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d010      	beq.n	8004d84 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	695a      	ldr	r2, [r3, #20]
 8004d66:	4b70      	ldr	r3, [pc, #448]	@ (8004f28 <HAL_RCC_ClockConfig+0x244>)
 8004d68:	69db      	ldr	r3, [r3, #28]
 8004d6a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004d6e:	429a      	cmp	r2, r3
 8004d70:	d908      	bls.n	8004d84 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004d72:	4b6d      	ldr	r3, [pc, #436]	@ (8004f28 <HAL_RCC_ClockConfig+0x244>)
 8004d74:	69db      	ldr	r3, [r3, #28]
 8004d76:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	695b      	ldr	r3, [r3, #20]
 8004d7e:	496a      	ldr	r1, [pc, #424]	@ (8004f28 <HAL_RCC_ClockConfig+0x244>)
 8004d80:	4313      	orrs	r3, r2
 8004d82:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f003 0310 	and.w	r3, r3, #16
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d010      	beq.n	8004db2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	699a      	ldr	r2, [r3, #24]
 8004d94:	4b64      	ldr	r3, [pc, #400]	@ (8004f28 <HAL_RCC_ClockConfig+0x244>)
 8004d96:	69db      	ldr	r3, [r3, #28]
 8004d98:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004d9c:	429a      	cmp	r2, r3
 8004d9e:	d908      	bls.n	8004db2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004da0:	4b61      	ldr	r3, [pc, #388]	@ (8004f28 <HAL_RCC_ClockConfig+0x244>)
 8004da2:	69db      	ldr	r3, [r3, #28]
 8004da4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	699b      	ldr	r3, [r3, #24]
 8004dac:	495e      	ldr	r1, [pc, #376]	@ (8004f28 <HAL_RCC_ClockConfig+0x244>)
 8004dae:	4313      	orrs	r3, r2
 8004db0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f003 0320 	and.w	r3, r3, #32
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d010      	beq.n	8004de0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	69da      	ldr	r2, [r3, #28]
 8004dc2:	4b59      	ldr	r3, [pc, #356]	@ (8004f28 <HAL_RCC_ClockConfig+0x244>)
 8004dc4:	6a1b      	ldr	r3, [r3, #32]
 8004dc6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004dca:	429a      	cmp	r2, r3
 8004dcc:	d908      	bls.n	8004de0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004dce:	4b56      	ldr	r3, [pc, #344]	@ (8004f28 <HAL_RCC_ClockConfig+0x244>)
 8004dd0:	6a1b      	ldr	r3, [r3, #32]
 8004dd2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	69db      	ldr	r3, [r3, #28]
 8004dda:	4953      	ldr	r1, [pc, #332]	@ (8004f28 <HAL_RCC_ClockConfig+0x244>)
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f003 0302 	and.w	r3, r3, #2
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d010      	beq.n	8004e0e <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	68da      	ldr	r2, [r3, #12]
 8004df0:	4b4d      	ldr	r3, [pc, #308]	@ (8004f28 <HAL_RCC_ClockConfig+0x244>)
 8004df2:	699b      	ldr	r3, [r3, #24]
 8004df4:	f003 030f 	and.w	r3, r3, #15
 8004df8:	429a      	cmp	r2, r3
 8004dfa:	d908      	bls.n	8004e0e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004dfc:	4b4a      	ldr	r3, [pc, #296]	@ (8004f28 <HAL_RCC_ClockConfig+0x244>)
 8004dfe:	699b      	ldr	r3, [r3, #24]
 8004e00:	f023 020f 	bic.w	r2, r3, #15
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	68db      	ldr	r3, [r3, #12]
 8004e08:	4947      	ldr	r1, [pc, #284]	@ (8004f28 <HAL_RCC_ClockConfig+0x244>)
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f003 0301 	and.w	r3, r3, #1
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d055      	beq.n	8004ec6 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004e1a:	4b43      	ldr	r3, [pc, #268]	@ (8004f28 <HAL_RCC_ClockConfig+0x244>)
 8004e1c:	699b      	ldr	r3, [r3, #24]
 8004e1e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	689b      	ldr	r3, [r3, #8]
 8004e26:	4940      	ldr	r1, [pc, #256]	@ (8004f28 <HAL_RCC_ClockConfig+0x244>)
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	2b02      	cmp	r3, #2
 8004e32:	d107      	bne.n	8004e44 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004e34:	4b3c      	ldr	r3, [pc, #240]	@ (8004f28 <HAL_RCC_ClockConfig+0x244>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d121      	bne.n	8004e84 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004e40:	2301      	movs	r3, #1
 8004e42:	e0f6      	b.n	8005032 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	2b03      	cmp	r3, #3
 8004e4a:	d107      	bne.n	8004e5c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004e4c:	4b36      	ldr	r3, [pc, #216]	@ (8004f28 <HAL_RCC_ClockConfig+0x244>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d115      	bne.n	8004e84 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004e58:	2301      	movs	r3, #1
 8004e5a:	e0ea      	b.n	8005032 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	2b01      	cmp	r3, #1
 8004e62:	d107      	bne.n	8004e74 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004e64:	4b30      	ldr	r3, [pc, #192]	@ (8004f28 <HAL_RCC_ClockConfig+0x244>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d109      	bne.n	8004e84 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004e70:	2301      	movs	r3, #1
 8004e72:	e0de      	b.n	8005032 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004e74:	4b2c      	ldr	r3, [pc, #176]	@ (8004f28 <HAL_RCC_ClockConfig+0x244>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f003 0304 	and.w	r3, r3, #4
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d101      	bne.n	8004e84 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004e80:	2301      	movs	r3, #1
 8004e82:	e0d6      	b.n	8005032 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004e84:	4b28      	ldr	r3, [pc, #160]	@ (8004f28 <HAL_RCC_ClockConfig+0x244>)
 8004e86:	691b      	ldr	r3, [r3, #16]
 8004e88:	f023 0207 	bic.w	r2, r3, #7
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	4925      	ldr	r1, [pc, #148]	@ (8004f28 <HAL_RCC_ClockConfig+0x244>)
 8004e92:	4313      	orrs	r3, r2
 8004e94:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e96:	f7fc f857 	bl	8000f48 <HAL_GetTick>
 8004e9a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e9c:	e00a      	b.n	8004eb4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e9e:	f7fc f853 	bl	8000f48 <HAL_GetTick>
 8004ea2:	4602      	mov	r2, r0
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	1ad3      	subs	r3, r2, r3
 8004ea8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d901      	bls.n	8004eb4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004eb0:	2303      	movs	r3, #3
 8004eb2:	e0be      	b.n	8005032 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004eb4:	4b1c      	ldr	r3, [pc, #112]	@ (8004f28 <HAL_RCC_ClockConfig+0x244>)
 8004eb6:	691b      	ldr	r3, [r3, #16]
 8004eb8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	00db      	lsls	r3, r3, #3
 8004ec2:	429a      	cmp	r2, r3
 8004ec4:	d1eb      	bne.n	8004e9e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f003 0302 	and.w	r3, r3, #2
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d010      	beq.n	8004ef4 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	68da      	ldr	r2, [r3, #12]
 8004ed6:	4b14      	ldr	r3, [pc, #80]	@ (8004f28 <HAL_RCC_ClockConfig+0x244>)
 8004ed8:	699b      	ldr	r3, [r3, #24]
 8004eda:	f003 030f 	and.w	r3, r3, #15
 8004ede:	429a      	cmp	r2, r3
 8004ee0:	d208      	bcs.n	8004ef4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ee2:	4b11      	ldr	r3, [pc, #68]	@ (8004f28 <HAL_RCC_ClockConfig+0x244>)
 8004ee4:	699b      	ldr	r3, [r3, #24]
 8004ee6:	f023 020f 	bic.w	r2, r3, #15
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	68db      	ldr	r3, [r3, #12]
 8004eee:	490e      	ldr	r1, [pc, #56]	@ (8004f28 <HAL_RCC_ClockConfig+0x244>)
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004ef4:	4b0b      	ldr	r3, [pc, #44]	@ (8004f24 <HAL_RCC_ClockConfig+0x240>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f003 030f 	and.w	r3, r3, #15
 8004efc:	683a      	ldr	r2, [r7, #0]
 8004efe:	429a      	cmp	r2, r3
 8004f00:	d214      	bcs.n	8004f2c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f02:	4b08      	ldr	r3, [pc, #32]	@ (8004f24 <HAL_RCC_ClockConfig+0x240>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f023 020f 	bic.w	r2, r3, #15
 8004f0a:	4906      	ldr	r1, [pc, #24]	@ (8004f24 <HAL_RCC_ClockConfig+0x240>)
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f12:	4b04      	ldr	r3, [pc, #16]	@ (8004f24 <HAL_RCC_ClockConfig+0x240>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f003 030f 	and.w	r3, r3, #15
 8004f1a:	683a      	ldr	r2, [r7, #0]
 8004f1c:	429a      	cmp	r2, r3
 8004f1e:	d005      	beq.n	8004f2c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004f20:	2301      	movs	r3, #1
 8004f22:	e086      	b.n	8005032 <HAL_RCC_ClockConfig+0x34e>
 8004f24:	52002000 	.word	0x52002000
 8004f28:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f003 0304 	and.w	r3, r3, #4
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d010      	beq.n	8004f5a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	691a      	ldr	r2, [r3, #16]
 8004f3c:	4b3f      	ldr	r3, [pc, #252]	@ (800503c <HAL_RCC_ClockConfig+0x358>)
 8004f3e:	699b      	ldr	r3, [r3, #24]
 8004f40:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004f44:	429a      	cmp	r2, r3
 8004f46:	d208      	bcs.n	8004f5a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004f48:	4b3c      	ldr	r3, [pc, #240]	@ (800503c <HAL_RCC_ClockConfig+0x358>)
 8004f4a:	699b      	ldr	r3, [r3, #24]
 8004f4c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	691b      	ldr	r3, [r3, #16]
 8004f54:	4939      	ldr	r1, [pc, #228]	@ (800503c <HAL_RCC_ClockConfig+0x358>)
 8004f56:	4313      	orrs	r3, r2
 8004f58:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f003 0308 	and.w	r3, r3, #8
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d010      	beq.n	8004f88 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	695a      	ldr	r2, [r3, #20]
 8004f6a:	4b34      	ldr	r3, [pc, #208]	@ (800503c <HAL_RCC_ClockConfig+0x358>)
 8004f6c:	69db      	ldr	r3, [r3, #28]
 8004f6e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004f72:	429a      	cmp	r2, r3
 8004f74:	d208      	bcs.n	8004f88 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004f76:	4b31      	ldr	r3, [pc, #196]	@ (800503c <HAL_RCC_ClockConfig+0x358>)
 8004f78:	69db      	ldr	r3, [r3, #28]
 8004f7a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	695b      	ldr	r3, [r3, #20]
 8004f82:	492e      	ldr	r1, [pc, #184]	@ (800503c <HAL_RCC_ClockConfig+0x358>)
 8004f84:	4313      	orrs	r3, r2
 8004f86:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f003 0310 	and.w	r3, r3, #16
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d010      	beq.n	8004fb6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	699a      	ldr	r2, [r3, #24]
 8004f98:	4b28      	ldr	r3, [pc, #160]	@ (800503c <HAL_RCC_ClockConfig+0x358>)
 8004f9a:	69db      	ldr	r3, [r3, #28]
 8004f9c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004fa0:	429a      	cmp	r2, r3
 8004fa2:	d208      	bcs.n	8004fb6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004fa4:	4b25      	ldr	r3, [pc, #148]	@ (800503c <HAL_RCC_ClockConfig+0x358>)
 8004fa6:	69db      	ldr	r3, [r3, #28]
 8004fa8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	699b      	ldr	r3, [r3, #24]
 8004fb0:	4922      	ldr	r1, [pc, #136]	@ (800503c <HAL_RCC_ClockConfig+0x358>)
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f003 0320 	and.w	r3, r3, #32
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d010      	beq.n	8004fe4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	69da      	ldr	r2, [r3, #28]
 8004fc6:	4b1d      	ldr	r3, [pc, #116]	@ (800503c <HAL_RCC_ClockConfig+0x358>)
 8004fc8:	6a1b      	ldr	r3, [r3, #32]
 8004fca:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004fce:	429a      	cmp	r2, r3
 8004fd0:	d208      	bcs.n	8004fe4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004fd2:	4b1a      	ldr	r3, [pc, #104]	@ (800503c <HAL_RCC_ClockConfig+0x358>)
 8004fd4:	6a1b      	ldr	r3, [r3, #32]
 8004fd6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	69db      	ldr	r3, [r3, #28]
 8004fde:	4917      	ldr	r1, [pc, #92]	@ (800503c <HAL_RCC_ClockConfig+0x358>)
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8004fe4:	f000 f834 	bl	8005050 <HAL_RCC_GetSysClockFreq>
 8004fe8:	4602      	mov	r2, r0
 8004fea:	4b14      	ldr	r3, [pc, #80]	@ (800503c <HAL_RCC_ClockConfig+0x358>)
 8004fec:	699b      	ldr	r3, [r3, #24]
 8004fee:	0a1b      	lsrs	r3, r3, #8
 8004ff0:	f003 030f 	and.w	r3, r3, #15
 8004ff4:	4912      	ldr	r1, [pc, #72]	@ (8005040 <HAL_RCC_ClockConfig+0x35c>)
 8004ff6:	5ccb      	ldrb	r3, [r1, r3]
 8004ff8:	f003 031f 	and.w	r3, r3, #31
 8004ffc:	fa22 f303 	lsr.w	r3, r2, r3
 8005000:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8005002:	4b0e      	ldr	r3, [pc, #56]	@ (800503c <HAL_RCC_ClockConfig+0x358>)
 8005004:	699b      	ldr	r3, [r3, #24]
 8005006:	f003 030f 	and.w	r3, r3, #15
 800500a:	4a0d      	ldr	r2, [pc, #52]	@ (8005040 <HAL_RCC_ClockConfig+0x35c>)
 800500c:	5cd3      	ldrb	r3, [r2, r3]
 800500e:	f003 031f 	and.w	r3, r3, #31
 8005012:	693a      	ldr	r2, [r7, #16]
 8005014:	fa22 f303 	lsr.w	r3, r2, r3
 8005018:	4a0a      	ldr	r2, [pc, #40]	@ (8005044 <HAL_RCC_ClockConfig+0x360>)
 800501a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800501c:	4a0a      	ldr	r2, [pc, #40]	@ (8005048 <HAL_RCC_ClockConfig+0x364>)
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005022:	4b0a      	ldr	r3, [pc, #40]	@ (800504c <HAL_RCC_ClockConfig+0x368>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4618      	mov	r0, r3
 8005028:	f7fb fd1a 	bl	8000a60 <HAL_InitTick>
 800502c:	4603      	mov	r3, r0
 800502e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005030:	7bfb      	ldrb	r3, [r7, #15]
}
 8005032:	4618      	mov	r0, r3
 8005034:	3718      	adds	r7, #24
 8005036:	46bd      	mov	sp, r7
 8005038:	bd80      	pop	{r7, pc}
 800503a:	bf00      	nop
 800503c:	58024400 	.word	0x58024400
 8005040:	08008a0c 	.word	0x08008a0c
 8005044:	24000004 	.word	0x24000004
 8005048:	24000000 	.word	0x24000000
 800504c:	24000008 	.word	0x24000008

08005050 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005050:	b480      	push	{r7}
 8005052:	b089      	sub	sp, #36	@ 0x24
 8005054:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005056:	4bb3      	ldr	r3, [pc, #716]	@ (8005324 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005058:	691b      	ldr	r3, [r3, #16]
 800505a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800505e:	2b18      	cmp	r3, #24
 8005060:	f200 8155 	bhi.w	800530e <HAL_RCC_GetSysClockFreq+0x2be>
 8005064:	a201      	add	r2, pc, #4	@ (adr r2, 800506c <HAL_RCC_GetSysClockFreq+0x1c>)
 8005066:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800506a:	bf00      	nop
 800506c:	080050d1 	.word	0x080050d1
 8005070:	0800530f 	.word	0x0800530f
 8005074:	0800530f 	.word	0x0800530f
 8005078:	0800530f 	.word	0x0800530f
 800507c:	0800530f 	.word	0x0800530f
 8005080:	0800530f 	.word	0x0800530f
 8005084:	0800530f 	.word	0x0800530f
 8005088:	0800530f 	.word	0x0800530f
 800508c:	080050f7 	.word	0x080050f7
 8005090:	0800530f 	.word	0x0800530f
 8005094:	0800530f 	.word	0x0800530f
 8005098:	0800530f 	.word	0x0800530f
 800509c:	0800530f 	.word	0x0800530f
 80050a0:	0800530f 	.word	0x0800530f
 80050a4:	0800530f 	.word	0x0800530f
 80050a8:	0800530f 	.word	0x0800530f
 80050ac:	080050fd 	.word	0x080050fd
 80050b0:	0800530f 	.word	0x0800530f
 80050b4:	0800530f 	.word	0x0800530f
 80050b8:	0800530f 	.word	0x0800530f
 80050bc:	0800530f 	.word	0x0800530f
 80050c0:	0800530f 	.word	0x0800530f
 80050c4:	0800530f 	.word	0x0800530f
 80050c8:	0800530f 	.word	0x0800530f
 80050cc:	08005103 	.word	0x08005103
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80050d0:	4b94      	ldr	r3, [pc, #592]	@ (8005324 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f003 0320 	and.w	r3, r3, #32
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d009      	beq.n	80050f0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80050dc:	4b91      	ldr	r3, [pc, #580]	@ (8005324 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	08db      	lsrs	r3, r3, #3
 80050e2:	f003 0303 	and.w	r3, r3, #3
 80050e6:	4a90      	ldr	r2, [pc, #576]	@ (8005328 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80050e8:	fa22 f303 	lsr.w	r3, r2, r3
 80050ec:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80050ee:	e111      	b.n	8005314 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80050f0:	4b8d      	ldr	r3, [pc, #564]	@ (8005328 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80050f2:	61bb      	str	r3, [r7, #24]
      break;
 80050f4:	e10e      	b.n	8005314 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80050f6:	4b8d      	ldr	r3, [pc, #564]	@ (800532c <HAL_RCC_GetSysClockFreq+0x2dc>)
 80050f8:	61bb      	str	r3, [r7, #24]
      break;
 80050fa:	e10b      	b.n	8005314 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80050fc:	4b8c      	ldr	r3, [pc, #560]	@ (8005330 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80050fe:	61bb      	str	r3, [r7, #24]
      break;
 8005100:	e108      	b.n	8005314 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005102:	4b88      	ldr	r3, [pc, #544]	@ (8005324 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005104:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005106:	f003 0303 	and.w	r3, r3, #3
 800510a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800510c:	4b85      	ldr	r3, [pc, #532]	@ (8005324 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800510e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005110:	091b      	lsrs	r3, r3, #4
 8005112:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005116:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005118:	4b82      	ldr	r3, [pc, #520]	@ (8005324 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800511a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800511c:	f003 0301 	and.w	r3, r3, #1
 8005120:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005122:	4b80      	ldr	r3, [pc, #512]	@ (8005324 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005124:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005126:	08db      	lsrs	r3, r3, #3
 8005128:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800512c:	68fa      	ldr	r2, [r7, #12]
 800512e:	fb02 f303 	mul.w	r3, r2, r3
 8005132:	ee07 3a90 	vmov	s15, r3
 8005136:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800513a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	2b00      	cmp	r3, #0
 8005142:	f000 80e1 	beq.w	8005308 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	2b02      	cmp	r3, #2
 800514a:	f000 8083 	beq.w	8005254 <HAL_RCC_GetSysClockFreq+0x204>
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	2b02      	cmp	r3, #2
 8005152:	f200 80a1 	bhi.w	8005298 <HAL_RCC_GetSysClockFreq+0x248>
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d003      	beq.n	8005164 <HAL_RCC_GetSysClockFreq+0x114>
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	2b01      	cmp	r3, #1
 8005160:	d056      	beq.n	8005210 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005162:	e099      	b.n	8005298 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005164:	4b6f      	ldr	r3, [pc, #444]	@ (8005324 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f003 0320 	and.w	r3, r3, #32
 800516c:	2b00      	cmp	r3, #0
 800516e:	d02d      	beq.n	80051cc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005170:	4b6c      	ldr	r3, [pc, #432]	@ (8005324 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	08db      	lsrs	r3, r3, #3
 8005176:	f003 0303 	and.w	r3, r3, #3
 800517a:	4a6b      	ldr	r2, [pc, #428]	@ (8005328 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800517c:	fa22 f303 	lsr.w	r3, r2, r3
 8005180:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	ee07 3a90 	vmov	s15, r3
 8005188:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800518c:	693b      	ldr	r3, [r7, #16]
 800518e:	ee07 3a90 	vmov	s15, r3
 8005192:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005196:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800519a:	4b62      	ldr	r3, [pc, #392]	@ (8005324 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800519c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800519e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051a2:	ee07 3a90 	vmov	s15, r3
 80051a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80051ae:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8005334 <HAL_RCC_GetSysClockFreq+0x2e4>
 80051b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80051be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051c6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80051ca:	e087      	b.n	80052dc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80051cc:	693b      	ldr	r3, [r7, #16]
 80051ce:	ee07 3a90 	vmov	s15, r3
 80051d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051d6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8005338 <HAL_RCC_GetSysClockFreq+0x2e8>
 80051da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051de:	4b51      	ldr	r3, [pc, #324]	@ (8005324 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051e6:	ee07 3a90 	vmov	s15, r3
 80051ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80051f2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8005334 <HAL_RCC_GetSysClockFreq+0x2e4>
 80051f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005202:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005206:	ee67 7a27 	vmul.f32	s15, s14, s15
 800520a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800520e:	e065      	b.n	80052dc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	ee07 3a90 	vmov	s15, r3
 8005216:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800521a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800533c <HAL_RCC_GetSysClockFreq+0x2ec>
 800521e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005222:	4b40      	ldr	r3, [pc, #256]	@ (8005324 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005226:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800522a:	ee07 3a90 	vmov	s15, r3
 800522e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005232:	ed97 6a02 	vldr	s12, [r7, #8]
 8005236:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8005334 <HAL_RCC_GetSysClockFreq+0x2e4>
 800523a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800523e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005242:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005246:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800524a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800524e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005252:	e043      	b.n	80052dc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	ee07 3a90 	vmov	s15, r3
 800525a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800525e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8005340 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005262:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005266:	4b2f      	ldr	r3, [pc, #188]	@ (8005324 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800526a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800526e:	ee07 3a90 	vmov	s15, r3
 8005272:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005276:	ed97 6a02 	vldr	s12, [r7, #8]
 800527a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8005334 <HAL_RCC_GetSysClockFreq+0x2e4>
 800527e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005282:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005286:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800528a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800528e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005292:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005296:	e021      	b.n	80052dc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	ee07 3a90 	vmov	s15, r3
 800529e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052a2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800533c <HAL_RCC_GetSysClockFreq+0x2ec>
 80052a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052aa:	4b1e      	ldr	r3, [pc, #120]	@ (8005324 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052b2:	ee07 3a90 	vmov	s15, r3
 80052b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80052be:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8005334 <HAL_RCC_GetSysClockFreq+0x2e4>
 80052c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80052ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052d6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80052da:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80052dc:	4b11      	ldr	r3, [pc, #68]	@ (8005324 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052e0:	0a5b      	lsrs	r3, r3, #9
 80052e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80052e6:	3301      	adds	r3, #1
 80052e8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	ee07 3a90 	vmov	s15, r3
 80052f0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80052f4:	edd7 6a07 	vldr	s13, [r7, #28]
 80052f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80052fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005300:	ee17 3a90 	vmov	r3, s15
 8005304:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005306:	e005      	b.n	8005314 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005308:	2300      	movs	r3, #0
 800530a:	61bb      	str	r3, [r7, #24]
      break;
 800530c:	e002      	b.n	8005314 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800530e:	4b07      	ldr	r3, [pc, #28]	@ (800532c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005310:	61bb      	str	r3, [r7, #24]
      break;
 8005312:	bf00      	nop
  }

  return sysclockfreq;
 8005314:	69bb      	ldr	r3, [r7, #24]
}
 8005316:	4618      	mov	r0, r3
 8005318:	3724      	adds	r7, #36	@ 0x24
 800531a:	46bd      	mov	sp, r7
 800531c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005320:	4770      	bx	lr
 8005322:	bf00      	nop
 8005324:	58024400 	.word	0x58024400
 8005328:	03d09000 	.word	0x03d09000
 800532c:	003d0900 	.word	0x003d0900
 8005330:	016e3600 	.word	0x016e3600
 8005334:	46000000 	.word	0x46000000
 8005338:	4c742400 	.word	0x4c742400
 800533c:	4a742400 	.word	0x4a742400
 8005340:	4bb71b00 	.word	0x4bb71b00

08005344 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b082      	sub	sp, #8
 8005348:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800534a:	f7ff fe81 	bl	8005050 <HAL_RCC_GetSysClockFreq>
 800534e:	4602      	mov	r2, r0
 8005350:	4b10      	ldr	r3, [pc, #64]	@ (8005394 <HAL_RCC_GetHCLKFreq+0x50>)
 8005352:	699b      	ldr	r3, [r3, #24]
 8005354:	0a1b      	lsrs	r3, r3, #8
 8005356:	f003 030f 	and.w	r3, r3, #15
 800535a:	490f      	ldr	r1, [pc, #60]	@ (8005398 <HAL_RCC_GetHCLKFreq+0x54>)
 800535c:	5ccb      	ldrb	r3, [r1, r3]
 800535e:	f003 031f 	and.w	r3, r3, #31
 8005362:	fa22 f303 	lsr.w	r3, r2, r3
 8005366:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8005368:	4b0a      	ldr	r3, [pc, #40]	@ (8005394 <HAL_RCC_GetHCLKFreq+0x50>)
 800536a:	699b      	ldr	r3, [r3, #24]
 800536c:	f003 030f 	and.w	r3, r3, #15
 8005370:	4a09      	ldr	r2, [pc, #36]	@ (8005398 <HAL_RCC_GetHCLKFreq+0x54>)
 8005372:	5cd3      	ldrb	r3, [r2, r3]
 8005374:	f003 031f 	and.w	r3, r3, #31
 8005378:	687a      	ldr	r2, [r7, #4]
 800537a:	fa22 f303 	lsr.w	r3, r2, r3
 800537e:	4a07      	ldr	r2, [pc, #28]	@ (800539c <HAL_RCC_GetHCLKFreq+0x58>)
 8005380:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005382:	4a07      	ldr	r2, [pc, #28]	@ (80053a0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005388:	4b04      	ldr	r3, [pc, #16]	@ (800539c <HAL_RCC_GetHCLKFreq+0x58>)
 800538a:	681b      	ldr	r3, [r3, #0]
}
 800538c:	4618      	mov	r0, r3
 800538e:	3708      	adds	r7, #8
 8005390:	46bd      	mov	sp, r7
 8005392:	bd80      	pop	{r7, pc}
 8005394:	58024400 	.word	0x58024400
 8005398:	08008a0c 	.word	0x08008a0c
 800539c:	24000004 	.word	0x24000004
 80053a0:	24000000 	.word	0x24000000

080053a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 80053a8:	f7ff ffcc 	bl	8005344 <HAL_RCC_GetHCLKFreq>
 80053ac:	4602      	mov	r2, r0
 80053ae:	4b06      	ldr	r3, [pc, #24]	@ (80053c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80053b0:	69db      	ldr	r3, [r3, #28]
 80053b2:	091b      	lsrs	r3, r3, #4
 80053b4:	f003 0307 	and.w	r3, r3, #7
 80053b8:	4904      	ldr	r1, [pc, #16]	@ (80053cc <HAL_RCC_GetPCLK1Freq+0x28>)
 80053ba:	5ccb      	ldrb	r3, [r1, r3]
 80053bc:	f003 031f 	and.w	r3, r3, #31
 80053c0:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	bd80      	pop	{r7, pc}
 80053c8:	58024400 	.word	0x58024400
 80053cc:	08008a0c 	.word	0x08008a0c

080053d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 80053d4:	f7ff ffb6 	bl	8005344 <HAL_RCC_GetHCLKFreq>
 80053d8:	4602      	mov	r2, r0
 80053da:	4b06      	ldr	r3, [pc, #24]	@ (80053f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80053dc:	69db      	ldr	r3, [r3, #28]
 80053de:	0a1b      	lsrs	r3, r3, #8
 80053e0:	f003 0307 	and.w	r3, r3, #7
 80053e4:	4904      	ldr	r1, [pc, #16]	@ (80053f8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80053e6:	5ccb      	ldrb	r3, [r1, r3]
 80053e8:	f003 031f 	and.w	r3, r3, #31
 80053ec:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80053f0:	4618      	mov	r0, r3
 80053f2:	bd80      	pop	{r7, pc}
 80053f4:	58024400 	.word	0x58024400
 80053f8:	08008a0c 	.word	0x08008a0c

080053fc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80053fc:	b480      	push	{r7}
 80053fe:	b083      	sub	sp, #12
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
 8005404:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	223f      	movs	r2, #63	@ 0x3f
 800540a:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800540c:	4b1a      	ldr	r3, [pc, #104]	@ (8005478 <HAL_RCC_GetClockConfig+0x7c>)
 800540e:	691b      	ldr	r3, [r3, #16]
 8005410:	f003 0207 	and.w	r2, r3, #7
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	605a      	str	r2, [r3, #4]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
#else
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE);
 8005418:	4b17      	ldr	r3, [pc, #92]	@ (8005478 <HAL_RCC_GetClockConfig+0x7c>)
 800541a:	699b      	ldr	r3, [r3, #24]
 800541c:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE);
 8005424:	4b14      	ldr	r3, [pc, #80]	@ (8005478 <HAL_RCC_GetClockConfig+0x7c>)
 8005426:	699b      	ldr	r3, [r3, #24]
 8005428:	f003 020f 	and.w	r2, r3, #15
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE);
 8005430:	4b11      	ldr	r3, [pc, #68]	@ (8005478 <HAL_RCC_GetClockConfig+0x7c>)
 8005432:	699b      	ldr	r3, [r3, #24]
 8005434:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1);
 800543c:	4b0e      	ldr	r3, [pc, #56]	@ (8005478 <HAL_RCC_GetClockConfig+0x7c>)
 800543e:	69db      	ldr	r3, [r3, #28]
 8005440:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2);
 8005448:	4b0b      	ldr	r3, [pc, #44]	@ (8005478 <HAL_RCC_GetClockConfig+0x7c>)
 800544a:	69db      	ldr	r3, [r3, #28]
 800544c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
 8005454:	4b08      	ldr	r3, [pc, #32]	@ (8005478 <HAL_RCC_GetClockConfig+0x7c>)
 8005456:	6a1b      	ldr	r3, [r3, #32]
 8005458:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	61da      	str	r2, [r3, #28]
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005460:	4b06      	ldr	r3, [pc, #24]	@ (800547c <HAL_RCC_GetClockConfig+0x80>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f003 020f 	and.w	r2, r3, #15
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	601a      	str	r2, [r3, #0]
}
 800546c:	bf00      	nop
 800546e:	370c      	adds	r7, #12
 8005470:	46bd      	mov	sp, r7
 8005472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005476:	4770      	bx	lr
 8005478:	58024400 	.word	0x58024400
 800547c:	52002000 	.word	0x52002000

08005480 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005480:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005484:	b0c8      	sub	sp, #288	@ 0x120
 8005486:	af00      	add	r7, sp, #0
 8005488:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800548c:	2300      	movs	r3, #0
 800548e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005492:	2300      	movs	r3, #0
 8005494:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005498:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800549c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054a0:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80054a4:	2500      	movs	r5, #0
 80054a6:	ea54 0305 	orrs.w	r3, r4, r5
 80054aa:	d049      	beq.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80054ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80054b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80054b2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80054b6:	d02f      	beq.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80054b8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80054bc:	d828      	bhi.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80054be:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80054c2:	d01a      	beq.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80054c4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80054c8:	d822      	bhi.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d003      	beq.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80054ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80054d2:	d007      	beq.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80054d4:	e01c      	b.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80054d6:	4ba7      	ldr	r3, [pc, #668]	@ (8005774 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80054d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054da:	4aa6      	ldr	r2, [pc, #664]	@ (8005774 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80054dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80054e0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80054e2:	e01a      	b.n	800551a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80054e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80054e8:	3308      	adds	r3, #8
 80054ea:	2102      	movs	r1, #2
 80054ec:	4618      	mov	r0, r3
 80054ee:	f001 fc43 	bl	8006d78 <RCCEx_PLL2_Config>
 80054f2:	4603      	mov	r3, r0
 80054f4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80054f8:	e00f      	b.n	800551a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80054fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80054fe:	3328      	adds	r3, #40	@ 0x28
 8005500:	2102      	movs	r1, #2
 8005502:	4618      	mov	r0, r3
 8005504:	f001 fcea 	bl	8006edc <RCCEx_PLL3_Config>
 8005508:	4603      	mov	r3, r0
 800550a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800550e:	e004      	b.n	800551a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005510:	2301      	movs	r3, #1
 8005512:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005516:	e000      	b.n	800551a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005518:	bf00      	nop
    }

    if (ret == HAL_OK)
 800551a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800551e:	2b00      	cmp	r3, #0
 8005520:	d10a      	bne.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005522:	4b94      	ldr	r3, [pc, #592]	@ (8005774 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005524:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005526:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800552a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800552e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005530:	4a90      	ldr	r2, [pc, #576]	@ (8005774 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005532:	430b      	orrs	r3, r1
 8005534:	6513      	str	r3, [r2, #80]	@ 0x50
 8005536:	e003      	b.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005538:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800553c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005540:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005548:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800554c:	f04f 0900 	mov.w	r9, #0
 8005550:	ea58 0309 	orrs.w	r3, r8, r9
 8005554:	d047      	beq.n	80055e6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005556:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800555a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800555c:	2b04      	cmp	r3, #4
 800555e:	d82a      	bhi.n	80055b6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005560:	a201      	add	r2, pc, #4	@ (adr r2, 8005568 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005562:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005566:	bf00      	nop
 8005568:	0800557d 	.word	0x0800557d
 800556c:	0800558b 	.word	0x0800558b
 8005570:	080055a1 	.word	0x080055a1
 8005574:	080055bf 	.word	0x080055bf
 8005578:	080055bf 	.word	0x080055bf
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800557c:	4b7d      	ldr	r3, [pc, #500]	@ (8005774 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800557e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005580:	4a7c      	ldr	r2, [pc, #496]	@ (8005774 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005582:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005586:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005588:	e01a      	b.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800558a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800558e:	3308      	adds	r3, #8
 8005590:	2100      	movs	r1, #0
 8005592:	4618      	mov	r0, r3
 8005594:	f001 fbf0 	bl	8006d78 <RCCEx_PLL2_Config>
 8005598:	4603      	mov	r3, r0
 800559a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800559e:	e00f      	b.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80055a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80055a4:	3328      	adds	r3, #40	@ 0x28
 80055a6:	2100      	movs	r1, #0
 80055a8:	4618      	mov	r0, r3
 80055aa:	f001 fc97 	bl	8006edc <RCCEx_PLL3_Config>
 80055ae:	4603      	mov	r3, r0
 80055b0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80055b4:	e004      	b.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80055b6:	2301      	movs	r3, #1
 80055b8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80055bc:	e000      	b.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80055be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80055c0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d10a      	bne.n	80055de <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80055c8:	4b6a      	ldr	r3, [pc, #424]	@ (8005774 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80055ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055cc:	f023 0107 	bic.w	r1, r3, #7
 80055d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80055d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055d6:	4a67      	ldr	r2, [pc, #412]	@ (8005774 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80055d8:	430b      	orrs	r3, r1
 80055da:	6513      	str	r3, [r2, #80]	@ 0x50
 80055dc:	e003      	b.n	80055e6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055de:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80055e2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 80055e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80055ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055ee:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80055f2:	f04f 0b00 	mov.w	fp, #0
 80055f6:	ea5a 030b 	orrs.w	r3, sl, fp
 80055fa:	d054      	beq.n	80056a6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 80055fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005600:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005602:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8005606:	d036      	beq.n	8005676 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8005608:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800560c:	d82f      	bhi.n	800566e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800560e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005612:	d032      	beq.n	800567a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005614:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005618:	d829      	bhi.n	800566e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800561a:	2bc0      	cmp	r3, #192	@ 0xc0
 800561c:	d02f      	beq.n	800567e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 800561e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005620:	d825      	bhi.n	800566e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005622:	2b80      	cmp	r3, #128	@ 0x80
 8005624:	d018      	beq.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8005626:	2b80      	cmp	r3, #128	@ 0x80
 8005628:	d821      	bhi.n	800566e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800562a:	2b00      	cmp	r3, #0
 800562c:	d002      	beq.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800562e:	2b40      	cmp	r3, #64	@ 0x40
 8005630:	d007      	beq.n	8005642 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8005632:	e01c      	b.n	800566e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005634:	4b4f      	ldr	r3, [pc, #316]	@ (8005774 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005636:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005638:	4a4e      	ldr	r2, [pc, #312]	@ (8005774 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800563a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800563e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8005640:	e01e      	b.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005642:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005646:	3308      	adds	r3, #8
 8005648:	2100      	movs	r1, #0
 800564a:	4618      	mov	r0, r3
 800564c:	f001 fb94 	bl	8006d78 <RCCEx_PLL2_Config>
 8005650:	4603      	mov	r3, r0
 8005652:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8005656:	e013      	b.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005658:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800565c:	3328      	adds	r3, #40	@ 0x28
 800565e:	2100      	movs	r1, #0
 8005660:	4618      	mov	r0, r3
 8005662:	f001 fc3b 	bl	8006edc <RCCEx_PLL3_Config>
 8005666:	4603      	mov	r3, r0
 8005668:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800566c:	e008      	b.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800566e:	2301      	movs	r3, #1
 8005670:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005674:	e004      	b.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8005676:	bf00      	nop
 8005678:	e002      	b.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800567a:	bf00      	nop
 800567c:	e000      	b.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800567e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005680:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005684:	2b00      	cmp	r3, #0
 8005686:	d10a      	bne.n	800569e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8005688:	4b3a      	ldr	r3, [pc, #232]	@ (8005774 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800568a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800568c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8005690:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005694:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005696:	4a37      	ldr	r2, [pc, #220]	@ (8005774 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005698:	430b      	orrs	r3, r1
 800569a:	6513      	str	r3, [r2, #80]	@ 0x50
 800569c:	e003      	b.n	80056a6 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800569e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80056a2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 80056a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80056aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056ae:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80056b2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80056b6:	2300      	movs	r3, #0
 80056b8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80056bc:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80056c0:	460b      	mov	r3, r1
 80056c2:	4313      	orrs	r3, r2
 80056c4:	d05c      	beq.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 80056c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80056ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80056cc:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80056d0:	d03b      	beq.n	800574a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80056d2:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80056d6:	d834      	bhi.n	8005742 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80056d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80056dc:	d037      	beq.n	800574e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 80056de:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80056e2:	d82e      	bhi.n	8005742 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80056e4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80056e8:	d033      	beq.n	8005752 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80056ea:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80056ee:	d828      	bhi.n	8005742 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80056f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80056f4:	d01a      	beq.n	800572c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 80056f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80056fa:	d822      	bhi.n	8005742 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d003      	beq.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0x288>
 8005700:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005704:	d007      	beq.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8005706:	e01c      	b.n	8005742 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005708:	4b1a      	ldr	r3, [pc, #104]	@ (8005774 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800570a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800570c:	4a19      	ldr	r2, [pc, #100]	@ (8005774 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800570e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005712:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8005714:	e01e      	b.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005716:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800571a:	3308      	adds	r3, #8
 800571c:	2100      	movs	r1, #0
 800571e:	4618      	mov	r0, r3
 8005720:	f001 fb2a 	bl	8006d78 <RCCEx_PLL2_Config>
 8005724:	4603      	mov	r3, r0
 8005726:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800572a:	e013      	b.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800572c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005730:	3328      	adds	r3, #40	@ 0x28
 8005732:	2100      	movs	r1, #0
 8005734:	4618      	mov	r0, r3
 8005736:	f001 fbd1 	bl	8006edc <RCCEx_PLL3_Config>
 800573a:	4603      	mov	r3, r0
 800573c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8005740:	e008      	b.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005742:	2301      	movs	r3, #1
 8005744:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005748:	e004      	b.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800574a:	bf00      	nop
 800574c:	e002      	b.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800574e:	bf00      	nop
 8005750:	e000      	b.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8005752:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005754:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005758:	2b00      	cmp	r3, #0
 800575a:	d10d      	bne.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 800575c:	4b05      	ldr	r3, [pc, #20]	@ (8005774 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800575e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005760:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8005764:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005768:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800576a:	4a02      	ldr	r2, [pc, #8]	@ (8005774 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800576c:	430b      	orrs	r3, r1
 800576e:	6513      	str	r3, [r2, #80]	@ 0x50
 8005770:	e006      	b.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8005772:	bf00      	nop
 8005774:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005778:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800577c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005780:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005788:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800578c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005790:	2300      	movs	r3, #0
 8005792:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005796:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800579a:	460b      	mov	r3, r1
 800579c:	4313      	orrs	r3, r2
 800579e:	d03a      	beq.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80057a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80057a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80057a6:	2b30      	cmp	r3, #48	@ 0x30
 80057a8:	d01f      	beq.n	80057ea <HAL_RCCEx_PeriphCLKConfig+0x36a>
 80057aa:	2b30      	cmp	r3, #48	@ 0x30
 80057ac:	d819      	bhi.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0x362>
 80057ae:	2b20      	cmp	r3, #32
 80057b0:	d00c      	beq.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80057b2:	2b20      	cmp	r3, #32
 80057b4:	d815      	bhi.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0x362>
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d019      	beq.n	80057ee <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80057ba:	2b10      	cmp	r3, #16
 80057bc:	d111      	bne.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057be:	4bae      	ldr	r3, [pc, #696]	@ (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80057c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057c2:	4aad      	ldr	r2, [pc, #692]	@ (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80057c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80057c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80057ca:	e011      	b.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80057cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80057d0:	3308      	adds	r3, #8
 80057d2:	2102      	movs	r1, #2
 80057d4:	4618      	mov	r0, r3
 80057d6:	f001 facf 	bl	8006d78 <RCCEx_PLL2_Config>
 80057da:	4603      	mov	r3, r0
 80057dc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80057e0:	e006      	b.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80057e2:	2301      	movs	r3, #1
 80057e4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80057e8:	e002      	b.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 80057ea:	bf00      	nop
 80057ec:	e000      	b.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 80057ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057f0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d10a      	bne.n	800580e <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80057f8:	4b9f      	ldr	r3, [pc, #636]	@ (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80057fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80057fc:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005800:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005804:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005806:	4a9c      	ldr	r2, [pc, #624]	@ (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005808:	430b      	orrs	r3, r1
 800580a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800580c:	e003      	b.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800580e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005812:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005816:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800581a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800581e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8005822:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005826:	2300      	movs	r3, #0
 8005828:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800582c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8005830:	460b      	mov	r3, r1
 8005832:	4313      	orrs	r3, r2
 8005834:	d051      	beq.n	80058da <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005836:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800583a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800583c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005840:	d035      	beq.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8005842:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005846:	d82e      	bhi.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8005848:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800584c:	d031      	beq.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0x432>
 800584e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005852:	d828      	bhi.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8005854:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005858:	d01a      	beq.n	8005890 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800585a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800585e:	d822      	bhi.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8005860:	2b00      	cmp	r3, #0
 8005862:	d003      	beq.n	800586c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8005864:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005868:	d007      	beq.n	800587a <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 800586a:	e01c      	b.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800586c:	4b82      	ldr	r3, [pc, #520]	@ (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800586e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005870:	4a81      	ldr	r2, [pc, #516]	@ (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005872:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005876:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005878:	e01c      	b.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800587a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800587e:	3308      	adds	r3, #8
 8005880:	2100      	movs	r1, #0
 8005882:	4618      	mov	r0, r3
 8005884:	f001 fa78 	bl	8006d78 <RCCEx_PLL2_Config>
 8005888:	4603      	mov	r3, r0
 800588a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800588e:	e011      	b.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005890:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005894:	3328      	adds	r3, #40	@ 0x28
 8005896:	2100      	movs	r1, #0
 8005898:	4618      	mov	r0, r3
 800589a:	f001 fb1f 	bl	8006edc <RCCEx_PLL3_Config>
 800589e:	4603      	mov	r3, r0
 80058a0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80058a4:	e006      	b.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80058a6:	2301      	movs	r3, #1
 80058a8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80058ac:	e002      	b.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 80058ae:	bf00      	nop
 80058b0:	e000      	b.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 80058b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058b4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d10a      	bne.n	80058d2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80058bc:	4b6e      	ldr	r3, [pc, #440]	@ (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80058be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058c0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80058c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80058c8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80058ca:	4a6b      	ldr	r2, [pc, #428]	@ (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80058cc:	430b      	orrs	r3, r1
 80058ce:	6513      	str	r3, [r2, #80]	@ 0x50
 80058d0:	e003      	b.n	80058da <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058d2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80058d6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80058da:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80058de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058e2:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80058e6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80058ea:	2300      	movs	r3, #0
 80058ec:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80058f0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80058f4:	460b      	mov	r3, r1
 80058f6:	4313      	orrs	r3, r2
 80058f8:	d053      	beq.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80058fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80058fe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005900:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005904:	d033      	beq.n	800596e <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8005906:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800590a:	d82c      	bhi.n	8005966 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800590c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005910:	d02f      	beq.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8005912:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005916:	d826      	bhi.n	8005966 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8005918:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800591c:	d02b      	beq.n	8005976 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800591e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005922:	d820      	bhi.n	8005966 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8005924:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005928:	d012      	beq.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800592a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800592e:	d81a      	bhi.n	8005966 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8005930:	2b00      	cmp	r3, #0
 8005932:	d022      	beq.n	800597a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8005934:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005938:	d115      	bne.n	8005966 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800593a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800593e:	3308      	adds	r3, #8
 8005940:	2101      	movs	r1, #1
 8005942:	4618      	mov	r0, r3
 8005944:	f001 fa18 	bl	8006d78 <RCCEx_PLL2_Config>
 8005948:	4603      	mov	r3, r0
 800594a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800594e:	e015      	b.n	800597c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005950:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005954:	3328      	adds	r3, #40	@ 0x28
 8005956:	2101      	movs	r1, #1
 8005958:	4618      	mov	r0, r3
 800595a:	f001 fabf 	bl	8006edc <RCCEx_PLL3_Config>
 800595e:	4603      	mov	r3, r0
 8005960:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005964:	e00a      	b.n	800597c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005966:	2301      	movs	r3, #1
 8005968:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800596c:	e006      	b.n	800597c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800596e:	bf00      	nop
 8005970:	e004      	b.n	800597c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8005972:	bf00      	nop
 8005974:	e002      	b.n	800597c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8005976:	bf00      	nop
 8005978:	e000      	b.n	800597c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800597a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800597c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005980:	2b00      	cmp	r3, #0
 8005982:	d10a      	bne.n	800599a <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005984:	4b3c      	ldr	r3, [pc, #240]	@ (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005986:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005988:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800598c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005990:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005992:	4a39      	ldr	r2, [pc, #228]	@ (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005994:	430b      	orrs	r3, r1
 8005996:	6513      	str	r3, [r2, #80]	@ 0x50
 8005998:	e003      	b.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800599a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800599e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80059a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80059a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059aa:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80059ae:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80059b2:	2300      	movs	r3, #0
 80059b4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80059b8:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80059bc:	460b      	mov	r3, r1
 80059be:	4313      	orrs	r3, r2
 80059c0:	d060      	beq.n	8005a84 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80059c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80059c6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80059ca:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 80059ce:	d039      	beq.n	8005a44 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 80059d0:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 80059d4:	d832      	bhi.n	8005a3c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80059d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80059da:	d035      	beq.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80059dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80059e0:	d82c      	bhi.n	8005a3c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80059e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059e6:	d031      	beq.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80059e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059ec:	d826      	bhi.n	8005a3c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80059ee:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80059f2:	d02d      	beq.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80059f4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80059f8:	d820      	bhi.n	8005a3c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80059fa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80059fe:	d012      	beq.n	8005a26 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005a00:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005a04:	d81a      	bhi.n	8005a3c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d024      	beq.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005a0a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005a0e:	d115      	bne.n	8005a3c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005a10:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005a14:	3308      	adds	r3, #8
 8005a16:	2101      	movs	r1, #1
 8005a18:	4618      	mov	r0, r3
 8005a1a:	f001 f9ad 	bl	8006d78 <RCCEx_PLL2_Config>
 8005a1e:	4603      	mov	r3, r0
 8005a20:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005a24:	e017      	b.n	8005a56 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005a26:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005a2a:	3328      	adds	r3, #40	@ 0x28
 8005a2c:	2101      	movs	r1, #1
 8005a2e:	4618      	mov	r0, r3
 8005a30:	f001 fa54 	bl	8006edc <RCCEx_PLL3_Config>
 8005a34:	4603      	mov	r3, r0
 8005a36:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005a3a:	e00c      	b.n	8005a56 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005a42:	e008      	b.n	8005a56 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005a44:	bf00      	nop
 8005a46:	e006      	b.n	8005a56 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005a48:	bf00      	nop
 8005a4a:	e004      	b.n	8005a56 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005a4c:	bf00      	nop
 8005a4e:	e002      	b.n	8005a56 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005a50:	bf00      	nop
 8005a52:	e000      	b.n	8005a56 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005a54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a56:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d10e      	bne.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005a5e:	4b06      	ldr	r3, [pc, #24]	@ (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005a60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a62:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005a66:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005a6a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005a6e:	4a02      	ldr	r2, [pc, #8]	@ (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005a70:	430b      	orrs	r3, r1
 8005a72:	6593      	str	r3, [r2, #88]	@ 0x58
 8005a74:	e006      	b.n	8005a84 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8005a76:	bf00      	nop
 8005a78:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a7c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005a80:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005a84:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a8c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8005a90:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005a94:	2300      	movs	r3, #0
 8005a96:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005a9a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005a9e:	460b      	mov	r3, r1
 8005aa0:	4313      	orrs	r3, r2
 8005aa2:	d037      	beq.n	8005b14 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005aa4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005aa8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005aaa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005aae:	d00e      	beq.n	8005ace <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8005ab0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005ab4:	d816      	bhi.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d018      	beq.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8005aba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005abe:	d111      	bne.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ac0:	4bc4      	ldr	r3, [pc, #784]	@ (8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005ac2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ac4:	4ac3      	ldr	r2, [pc, #780]	@ (8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005ac6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005aca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005acc:	e00f      	b.n	8005aee <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005ace:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005ad2:	3308      	adds	r3, #8
 8005ad4:	2101      	movs	r1, #1
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	f001 f94e 	bl	8006d78 <RCCEx_PLL2_Config>
 8005adc:	4603      	mov	r3, r0
 8005ade:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005ae2:	e004      	b.n	8005aee <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005aea:	e000      	b.n	8005aee <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8005aec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005aee:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d10a      	bne.n	8005b0c <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005af6:	4bb7      	ldr	r3, [pc, #732]	@ (8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005af8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005afa:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005afe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005b02:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005b04:	4ab3      	ldr	r2, [pc, #716]	@ (8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005b06:	430b      	orrs	r3, r1
 8005b08:	6513      	str	r3, [r2, #80]	@ 0x50
 8005b0a:	e003      	b.n	8005b14 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b0c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005b10:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005b14:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b1c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8005b20:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005b24:	2300      	movs	r3, #0
 8005b26:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005b2a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8005b2e:	460b      	mov	r3, r1
 8005b30:	4313      	orrs	r3, r2
 8005b32:	d039      	beq.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005b34:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005b38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b3a:	2b03      	cmp	r3, #3
 8005b3c:	d81c      	bhi.n	8005b78 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8005b3e:	a201      	add	r2, pc, #4	@ (adr r2, 8005b44 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8005b40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b44:	08005b81 	.word	0x08005b81
 8005b48:	08005b55 	.word	0x08005b55
 8005b4c:	08005b63 	.word	0x08005b63
 8005b50:	08005b81 	.word	0x08005b81
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b54:	4b9f      	ldr	r3, [pc, #636]	@ (8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005b56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b58:	4a9e      	ldr	r2, [pc, #632]	@ (8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005b5a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b5e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005b60:	e00f      	b.n	8005b82 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005b62:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005b66:	3308      	adds	r3, #8
 8005b68:	2102      	movs	r1, #2
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	f001 f904 	bl	8006d78 <RCCEx_PLL2_Config>
 8005b70:	4603      	mov	r3, r0
 8005b72:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005b76:	e004      	b.n	8005b82 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005b78:	2301      	movs	r3, #1
 8005b7a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005b7e:	e000      	b.n	8005b82 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8005b80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b82:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d10a      	bne.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005b8a:	4b92      	ldr	r3, [pc, #584]	@ (8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005b8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b8e:	f023 0103 	bic.w	r1, r3, #3
 8005b92:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005b96:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b98:	4a8e      	ldr	r2, [pc, #568]	@ (8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005b9a:	430b      	orrs	r3, r1
 8005b9c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005b9e:	e003      	b.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ba0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005ba4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005ba8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bb0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005bb4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005bb8:	2300      	movs	r3, #0
 8005bba:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005bbe:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8005bc2:	460b      	mov	r3, r1
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	f000 8099 	beq.w	8005cfc <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005bca:	4b83      	ldr	r3, [pc, #524]	@ (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	4a82      	ldr	r2, [pc, #520]	@ (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005bd0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005bd4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005bd6:	f7fb f9b7 	bl	8000f48 <HAL_GetTick>
 8005bda:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005bde:	e00b      	b.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005be0:	f7fb f9b2 	bl	8000f48 <HAL_GetTick>
 8005be4:	4602      	mov	r2, r0
 8005be6:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8005bea:	1ad3      	subs	r3, r2, r3
 8005bec:	2b64      	cmp	r3, #100	@ 0x64
 8005bee:	d903      	bls.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8005bf0:	2303      	movs	r3, #3
 8005bf2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005bf6:	e005      	b.n	8005c04 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005bf8:	4b77      	ldr	r3, [pc, #476]	@ (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d0ed      	beq.n	8005be0 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8005c04:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d173      	bne.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005c0c:	4b71      	ldr	r3, [pc, #452]	@ (8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005c0e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005c10:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005c14:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005c18:	4053      	eors	r3, r2
 8005c1a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d015      	beq.n	8005c4e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005c22:	4b6c      	ldr	r3, [pc, #432]	@ (8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005c24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c26:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c2a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005c2e:	4b69      	ldr	r3, [pc, #420]	@ (8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005c30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c32:	4a68      	ldr	r2, [pc, #416]	@ (8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005c34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c38:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005c3a:	4b66      	ldr	r3, [pc, #408]	@ (8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005c3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c3e:	4a65      	ldr	r2, [pc, #404]	@ (8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005c40:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005c44:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005c46:	4a63      	ldr	r2, [pc, #396]	@ (8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005c48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c4c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005c4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005c52:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005c56:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005c5a:	d118      	bne.n	8005c8e <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c5c:	f7fb f974 	bl	8000f48 <HAL_GetTick>
 8005c60:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005c64:	e00d      	b.n	8005c82 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c66:	f7fb f96f 	bl	8000f48 <HAL_GetTick>
 8005c6a:	4602      	mov	r2, r0
 8005c6c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8005c70:	1ad2      	subs	r2, r2, r3
 8005c72:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005c76:	429a      	cmp	r2, r3
 8005c78:	d903      	bls.n	8005c82 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8005c7a:	2303      	movs	r3, #3
 8005c7c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 8005c80:	e005      	b.n	8005c8e <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005c82:	4b54      	ldr	r3, [pc, #336]	@ (8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005c84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c86:	f003 0302 	and.w	r3, r3, #2
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d0eb      	beq.n	8005c66 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8005c8e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d129      	bne.n	8005cea <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005c96:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005c9a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005c9e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ca2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005ca6:	d10e      	bne.n	8005cc6 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8005ca8:	4b4a      	ldr	r3, [pc, #296]	@ (8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005caa:	691b      	ldr	r3, [r3, #16]
 8005cac:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8005cb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005cb4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005cb8:	091a      	lsrs	r2, r3, #4
 8005cba:	4b48      	ldr	r3, [pc, #288]	@ (8005ddc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005cbc:	4013      	ands	r3, r2
 8005cbe:	4a45      	ldr	r2, [pc, #276]	@ (8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005cc0:	430b      	orrs	r3, r1
 8005cc2:	6113      	str	r3, [r2, #16]
 8005cc4:	e005      	b.n	8005cd2 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8005cc6:	4b43      	ldr	r3, [pc, #268]	@ (8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005cc8:	691b      	ldr	r3, [r3, #16]
 8005cca:	4a42      	ldr	r2, [pc, #264]	@ (8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005ccc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005cd0:	6113      	str	r3, [r2, #16]
 8005cd2:	4b40      	ldr	r3, [pc, #256]	@ (8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005cd4:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8005cd6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005cda:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005cde:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ce2:	4a3c      	ldr	r2, [pc, #240]	@ (8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005ce4:	430b      	orrs	r3, r1
 8005ce6:	6713      	str	r3, [r2, #112]	@ 0x70
 8005ce8:	e008      	b.n	8005cfc <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005cea:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005cee:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 8005cf2:	e003      	b.n	8005cfc <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cf4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005cf8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005cfc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d04:	f002 0301 	and.w	r3, r2, #1
 8005d08:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005d12:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005d16:	460b      	mov	r3, r1
 8005d18:	4313      	orrs	r3, r2
 8005d1a:	f000 8090 	beq.w	8005e3e <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005d1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005d22:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005d26:	2b28      	cmp	r3, #40	@ 0x28
 8005d28:	d870      	bhi.n	8005e0c <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8005d2a:	a201      	add	r2, pc, #4	@ (adr r2, 8005d30 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8005d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d30:	08005e15 	.word	0x08005e15
 8005d34:	08005e0d 	.word	0x08005e0d
 8005d38:	08005e0d 	.word	0x08005e0d
 8005d3c:	08005e0d 	.word	0x08005e0d
 8005d40:	08005e0d 	.word	0x08005e0d
 8005d44:	08005e0d 	.word	0x08005e0d
 8005d48:	08005e0d 	.word	0x08005e0d
 8005d4c:	08005e0d 	.word	0x08005e0d
 8005d50:	08005de1 	.word	0x08005de1
 8005d54:	08005e0d 	.word	0x08005e0d
 8005d58:	08005e0d 	.word	0x08005e0d
 8005d5c:	08005e0d 	.word	0x08005e0d
 8005d60:	08005e0d 	.word	0x08005e0d
 8005d64:	08005e0d 	.word	0x08005e0d
 8005d68:	08005e0d 	.word	0x08005e0d
 8005d6c:	08005e0d 	.word	0x08005e0d
 8005d70:	08005df7 	.word	0x08005df7
 8005d74:	08005e0d 	.word	0x08005e0d
 8005d78:	08005e0d 	.word	0x08005e0d
 8005d7c:	08005e0d 	.word	0x08005e0d
 8005d80:	08005e0d 	.word	0x08005e0d
 8005d84:	08005e0d 	.word	0x08005e0d
 8005d88:	08005e0d 	.word	0x08005e0d
 8005d8c:	08005e0d 	.word	0x08005e0d
 8005d90:	08005e15 	.word	0x08005e15
 8005d94:	08005e0d 	.word	0x08005e0d
 8005d98:	08005e0d 	.word	0x08005e0d
 8005d9c:	08005e0d 	.word	0x08005e0d
 8005da0:	08005e0d 	.word	0x08005e0d
 8005da4:	08005e0d 	.word	0x08005e0d
 8005da8:	08005e0d 	.word	0x08005e0d
 8005dac:	08005e0d 	.word	0x08005e0d
 8005db0:	08005e15 	.word	0x08005e15
 8005db4:	08005e0d 	.word	0x08005e0d
 8005db8:	08005e0d 	.word	0x08005e0d
 8005dbc:	08005e0d 	.word	0x08005e0d
 8005dc0:	08005e0d 	.word	0x08005e0d
 8005dc4:	08005e0d 	.word	0x08005e0d
 8005dc8:	08005e0d 	.word	0x08005e0d
 8005dcc:	08005e0d 	.word	0x08005e0d
 8005dd0:	08005e15 	.word	0x08005e15
 8005dd4:	58024400 	.word	0x58024400
 8005dd8:	58024800 	.word	0x58024800
 8005ddc:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005de0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005de4:	3308      	adds	r3, #8
 8005de6:	2101      	movs	r1, #1
 8005de8:	4618      	mov	r0, r3
 8005dea:	f000 ffc5 	bl	8006d78 <RCCEx_PLL2_Config>
 8005dee:	4603      	mov	r3, r0
 8005df0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005df4:	e00f      	b.n	8005e16 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005df6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005dfa:	3328      	adds	r3, #40	@ 0x28
 8005dfc:	2101      	movs	r1, #1
 8005dfe:	4618      	mov	r0, r3
 8005e00:	f001 f86c 	bl	8006edc <RCCEx_PLL3_Config>
 8005e04:	4603      	mov	r3, r0
 8005e06:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005e0a:	e004      	b.n	8005e16 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e0c:	2301      	movs	r3, #1
 8005e0e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005e12:	e000      	b.n	8005e16 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8005e14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e16:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d10b      	bne.n	8005e36 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005e1e:	4bc0      	ldr	r3, [pc, #768]	@ (8006120 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005e20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e22:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8005e26:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005e2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005e2e:	4abc      	ldr	r2, [pc, #752]	@ (8006120 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005e30:	430b      	orrs	r3, r1
 8005e32:	6553      	str	r3, [r2, #84]	@ 0x54
 8005e34:	e003      	b.n	8005e3e <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e36:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005e3a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005e3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e46:	f002 0302 	and.w	r3, r2, #2
 8005e4a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005e4e:	2300      	movs	r3, #0
 8005e50:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005e54:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8005e58:	460b      	mov	r3, r1
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	d043      	beq.n	8005ee6 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005e5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005e62:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005e66:	2b05      	cmp	r3, #5
 8005e68:	d824      	bhi.n	8005eb4 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8005e6a:	a201      	add	r2, pc, #4	@ (adr r2, 8005e70 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8005e6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e70:	08005ebd 	.word	0x08005ebd
 8005e74:	08005e89 	.word	0x08005e89
 8005e78:	08005e9f 	.word	0x08005e9f
 8005e7c:	08005ebd 	.word	0x08005ebd
 8005e80:	08005ebd 	.word	0x08005ebd
 8005e84:	08005ebd 	.word	0x08005ebd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005e88:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005e8c:	3308      	adds	r3, #8
 8005e8e:	2101      	movs	r1, #1
 8005e90:	4618      	mov	r0, r3
 8005e92:	f000 ff71 	bl	8006d78 <RCCEx_PLL2_Config>
 8005e96:	4603      	mov	r3, r0
 8005e98:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005e9c:	e00f      	b.n	8005ebe <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005e9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005ea2:	3328      	adds	r3, #40	@ 0x28
 8005ea4:	2101      	movs	r1, #1
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	f001 f818 	bl	8006edc <RCCEx_PLL3_Config>
 8005eac:	4603      	mov	r3, r0
 8005eae:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005eb2:	e004      	b.n	8005ebe <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005eba:	e000      	b.n	8005ebe <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8005ebc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ebe:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d10b      	bne.n	8005ede <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005ec6:	4b96      	ldr	r3, [pc, #600]	@ (8006120 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005ec8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005eca:	f023 0107 	bic.w	r1, r3, #7
 8005ece:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005ed2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ed6:	4a92      	ldr	r2, [pc, #584]	@ (8006120 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005ed8:	430b      	orrs	r3, r1
 8005eda:	6553      	str	r3, [r2, #84]	@ 0x54
 8005edc:	e003      	b.n	8005ee6 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ede:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005ee2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005ee6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eee:	f002 0304 	and.w	r3, r2, #4
 8005ef2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005efc:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8005f00:	460b      	mov	r3, r1
 8005f02:	4313      	orrs	r3, r2
 8005f04:	d043      	beq.n	8005f8e <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005f06:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005f0a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005f0e:	2b05      	cmp	r3, #5
 8005f10:	d824      	bhi.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8005f12:	a201      	add	r2, pc, #4	@ (adr r2, 8005f18 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8005f14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f18:	08005f65 	.word	0x08005f65
 8005f1c:	08005f31 	.word	0x08005f31
 8005f20:	08005f47 	.word	0x08005f47
 8005f24:	08005f65 	.word	0x08005f65
 8005f28:	08005f65 	.word	0x08005f65
 8005f2c:	08005f65 	.word	0x08005f65
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005f30:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005f34:	3308      	adds	r3, #8
 8005f36:	2101      	movs	r1, #1
 8005f38:	4618      	mov	r0, r3
 8005f3a:	f000 ff1d 	bl	8006d78 <RCCEx_PLL2_Config>
 8005f3e:	4603      	mov	r3, r0
 8005f40:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005f44:	e00f      	b.n	8005f66 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005f46:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005f4a:	3328      	adds	r3, #40	@ 0x28
 8005f4c:	2101      	movs	r1, #1
 8005f4e:	4618      	mov	r0, r3
 8005f50:	f000 ffc4 	bl	8006edc <RCCEx_PLL3_Config>
 8005f54:	4603      	mov	r3, r0
 8005f56:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005f5a:	e004      	b.n	8005f66 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005f62:	e000      	b.n	8005f66 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8005f64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f66:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d10b      	bne.n	8005f86 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005f6e:	4b6c      	ldr	r3, [pc, #432]	@ (8006120 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005f70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f72:	f023 0107 	bic.w	r1, r3, #7
 8005f76:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005f7a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005f7e:	4a68      	ldr	r2, [pc, #416]	@ (8006120 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005f80:	430b      	orrs	r3, r1
 8005f82:	6593      	str	r3, [r2, #88]	@ 0x58
 8005f84:	e003      	b.n	8005f8e <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f86:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005f8a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005f8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f96:	f002 0320 	and.w	r3, r2, #32
 8005f9a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005fa4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005fa8:	460b      	mov	r3, r1
 8005faa:	4313      	orrs	r3, r2
 8005fac:	d055      	beq.n	800605a <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005fae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005fb2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005fb6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005fba:	d033      	beq.n	8006024 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8005fbc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005fc0:	d82c      	bhi.n	800601c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8005fc2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005fc6:	d02f      	beq.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8005fc8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005fcc:	d826      	bhi.n	800601c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8005fce:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005fd2:	d02b      	beq.n	800602c <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8005fd4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005fd8:	d820      	bhi.n	800601c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8005fda:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005fde:	d012      	beq.n	8006006 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8005fe0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005fe4:	d81a      	bhi.n	800601c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d022      	beq.n	8006030 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8005fea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005fee:	d115      	bne.n	800601c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005ff0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005ff4:	3308      	adds	r3, #8
 8005ff6:	2100      	movs	r1, #0
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	f000 febd 	bl	8006d78 <RCCEx_PLL2_Config>
 8005ffe:	4603      	mov	r3, r0
 8006000:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006004:	e015      	b.n	8006032 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006006:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800600a:	3328      	adds	r3, #40	@ 0x28
 800600c:	2102      	movs	r1, #2
 800600e:	4618      	mov	r0, r3
 8006010:	f000 ff64 	bl	8006edc <RCCEx_PLL3_Config>
 8006014:	4603      	mov	r3, r0
 8006016:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800601a:	e00a      	b.n	8006032 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800601c:	2301      	movs	r3, #1
 800601e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006022:	e006      	b.n	8006032 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8006024:	bf00      	nop
 8006026:	e004      	b.n	8006032 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8006028:	bf00      	nop
 800602a:	e002      	b.n	8006032 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800602c:	bf00      	nop
 800602e:	e000      	b.n	8006032 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8006030:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006032:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006036:	2b00      	cmp	r3, #0
 8006038:	d10b      	bne.n	8006052 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800603a:	4b39      	ldr	r3, [pc, #228]	@ (8006120 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800603c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800603e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006042:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006046:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800604a:	4a35      	ldr	r2, [pc, #212]	@ (8006120 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800604c:	430b      	orrs	r3, r1
 800604e:	6553      	str	r3, [r2, #84]	@ 0x54
 8006050:	e003      	b.n	800605a <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006052:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006056:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800605a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800605e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006062:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8006066:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800606a:	2300      	movs	r3, #0
 800606c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006070:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8006074:	460b      	mov	r3, r1
 8006076:	4313      	orrs	r3, r2
 8006078:	d058      	beq.n	800612c <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800607a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800607e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006082:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006086:	d033      	beq.n	80060f0 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8006088:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800608c:	d82c      	bhi.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800608e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006092:	d02f      	beq.n	80060f4 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8006094:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006098:	d826      	bhi.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800609a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800609e:	d02b      	beq.n	80060f8 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80060a0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80060a4:	d820      	bhi.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80060a6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80060aa:	d012      	beq.n	80060d2 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 80060ac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80060b0:	d81a      	bhi.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d022      	beq.n	80060fc <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 80060b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80060ba:	d115      	bne.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80060bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80060c0:	3308      	adds	r3, #8
 80060c2:	2100      	movs	r1, #0
 80060c4:	4618      	mov	r0, r3
 80060c6:	f000 fe57 	bl	8006d78 <RCCEx_PLL2_Config>
 80060ca:	4603      	mov	r3, r0
 80060cc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80060d0:	e015      	b.n	80060fe <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80060d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80060d6:	3328      	adds	r3, #40	@ 0x28
 80060d8:	2102      	movs	r1, #2
 80060da:	4618      	mov	r0, r3
 80060dc:	f000 fefe 	bl	8006edc <RCCEx_PLL3_Config>
 80060e0:	4603      	mov	r3, r0
 80060e2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80060e6:	e00a      	b.n	80060fe <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80060e8:	2301      	movs	r3, #1
 80060ea:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80060ee:	e006      	b.n	80060fe <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80060f0:	bf00      	nop
 80060f2:	e004      	b.n	80060fe <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80060f4:	bf00      	nop
 80060f6:	e002      	b.n	80060fe <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80060f8:	bf00      	nop
 80060fa:	e000      	b.n	80060fe <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80060fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060fe:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006102:	2b00      	cmp	r3, #0
 8006104:	d10e      	bne.n	8006124 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006106:	4b06      	ldr	r3, [pc, #24]	@ (8006120 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006108:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800610a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800610e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006112:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006116:	4a02      	ldr	r2, [pc, #8]	@ (8006120 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006118:	430b      	orrs	r3, r1
 800611a:	6593      	str	r3, [r2, #88]	@ 0x58
 800611c:	e006      	b.n	800612c <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800611e:	bf00      	nop
 8006120:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006124:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006128:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800612c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006134:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8006138:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800613c:	2300      	movs	r3, #0
 800613e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006142:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8006146:	460b      	mov	r3, r1
 8006148:	4313      	orrs	r3, r2
 800614a:	d055      	beq.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800614c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006150:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006154:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006158:	d033      	beq.n	80061c2 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800615a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800615e:	d82c      	bhi.n	80061ba <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8006160:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006164:	d02f      	beq.n	80061c6 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8006166:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800616a:	d826      	bhi.n	80061ba <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800616c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006170:	d02b      	beq.n	80061ca <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8006172:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006176:	d820      	bhi.n	80061ba <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8006178:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800617c:	d012      	beq.n	80061a4 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800617e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006182:	d81a      	bhi.n	80061ba <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8006184:	2b00      	cmp	r3, #0
 8006186:	d022      	beq.n	80061ce <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8006188:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800618c:	d115      	bne.n	80061ba <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800618e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006192:	3308      	adds	r3, #8
 8006194:	2100      	movs	r1, #0
 8006196:	4618      	mov	r0, r3
 8006198:	f000 fdee 	bl	8006d78 <RCCEx_PLL2_Config>
 800619c:	4603      	mov	r3, r0
 800619e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80061a2:	e015      	b.n	80061d0 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80061a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80061a8:	3328      	adds	r3, #40	@ 0x28
 80061aa:	2102      	movs	r1, #2
 80061ac:	4618      	mov	r0, r3
 80061ae:	f000 fe95 	bl	8006edc <RCCEx_PLL3_Config>
 80061b2:	4603      	mov	r3, r0
 80061b4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80061b8:	e00a      	b.n	80061d0 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80061ba:	2301      	movs	r3, #1
 80061bc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80061c0:	e006      	b.n	80061d0 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80061c2:	bf00      	nop
 80061c4:	e004      	b.n	80061d0 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80061c6:	bf00      	nop
 80061c8:	e002      	b.n	80061d0 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80061ca:	bf00      	nop
 80061cc:	e000      	b.n	80061d0 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80061ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061d0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d10b      	bne.n	80061f0 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80061d8:	4ba1      	ldr	r3, [pc, #644]	@ (8006460 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80061da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061dc:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80061e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80061e4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80061e8:	4a9d      	ldr	r2, [pc, #628]	@ (8006460 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80061ea:	430b      	orrs	r3, r1
 80061ec:	6593      	str	r3, [r2, #88]	@ 0x58
 80061ee:	e003      	b.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061f0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80061f4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80061f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80061fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006200:	f002 0308 	and.w	r3, r2, #8
 8006204:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006208:	2300      	movs	r3, #0
 800620a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800620e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8006212:	460b      	mov	r3, r1
 8006214:	4313      	orrs	r3, r2
 8006216:	d01e      	beq.n	8006256 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8006218:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800621c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006220:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006224:	d10c      	bne.n	8006240 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006226:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800622a:	3328      	adds	r3, #40	@ 0x28
 800622c:	2102      	movs	r1, #2
 800622e:	4618      	mov	r0, r3
 8006230:	f000 fe54 	bl	8006edc <RCCEx_PLL3_Config>
 8006234:	4603      	mov	r3, r0
 8006236:	2b00      	cmp	r3, #0
 8006238:	d002      	beq.n	8006240 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 800623a:	2301      	movs	r3, #1
 800623c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006240:	4b87      	ldr	r3, [pc, #540]	@ (8006460 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006242:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006244:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006248:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800624c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006250:	4a83      	ldr	r2, [pc, #524]	@ (8006460 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006252:	430b      	orrs	r3, r1
 8006254:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006256:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800625a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800625e:	f002 0310 	and.w	r3, r2, #16
 8006262:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006266:	2300      	movs	r3, #0
 8006268:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800626c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8006270:	460b      	mov	r3, r1
 8006272:	4313      	orrs	r3, r2
 8006274:	d01e      	beq.n	80062b4 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006276:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800627a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800627e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006282:	d10c      	bne.n	800629e <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006284:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006288:	3328      	adds	r3, #40	@ 0x28
 800628a:	2102      	movs	r1, #2
 800628c:	4618      	mov	r0, r3
 800628e:	f000 fe25 	bl	8006edc <RCCEx_PLL3_Config>
 8006292:	4603      	mov	r3, r0
 8006294:	2b00      	cmp	r3, #0
 8006296:	d002      	beq.n	800629e <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8006298:	2301      	movs	r3, #1
 800629a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800629e:	4b70      	ldr	r3, [pc, #448]	@ (8006460 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80062a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062a2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80062a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80062aa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80062ae:	4a6c      	ldr	r2, [pc, #432]	@ (8006460 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80062b0:	430b      	orrs	r3, r1
 80062b2:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80062b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80062b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062bc:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80062c0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80062c4:	2300      	movs	r3, #0
 80062c6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80062ca:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80062ce:	460b      	mov	r3, r1
 80062d0:	4313      	orrs	r3, r2
 80062d2:	d03e      	beq.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80062d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80062d8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80062dc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80062e0:	d022      	beq.n	8006328 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 80062e2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80062e6:	d81b      	bhi.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d003      	beq.n	80062f4 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 80062ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80062f0:	d00b      	beq.n	800630a <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 80062f2:	e015      	b.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80062f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80062f8:	3308      	adds	r3, #8
 80062fa:	2100      	movs	r1, #0
 80062fc:	4618      	mov	r0, r3
 80062fe:	f000 fd3b 	bl	8006d78 <RCCEx_PLL2_Config>
 8006302:	4603      	mov	r3, r0
 8006304:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006308:	e00f      	b.n	800632a <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800630a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800630e:	3328      	adds	r3, #40	@ 0x28
 8006310:	2102      	movs	r1, #2
 8006312:	4618      	mov	r0, r3
 8006314:	f000 fde2 	bl	8006edc <RCCEx_PLL3_Config>
 8006318:	4603      	mov	r3, r0
 800631a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800631e:	e004      	b.n	800632a <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006320:	2301      	movs	r3, #1
 8006322:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006326:	e000      	b.n	800632a <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8006328:	bf00      	nop
    }

    if (ret == HAL_OK)
 800632a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800632e:	2b00      	cmp	r3, #0
 8006330:	d10b      	bne.n	800634a <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006332:	4b4b      	ldr	r3, [pc, #300]	@ (8006460 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006334:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006336:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800633a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800633e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006342:	4a47      	ldr	r2, [pc, #284]	@ (8006460 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006344:	430b      	orrs	r3, r1
 8006346:	6593      	str	r3, [r2, #88]	@ 0x58
 8006348:	e003      	b.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800634a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800634e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006352:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800635a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800635e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006360:	2300      	movs	r3, #0
 8006362:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006364:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8006368:	460b      	mov	r3, r1
 800636a:	4313      	orrs	r3, r2
 800636c:	d03b      	beq.n	80063e6 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800636e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006372:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006376:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800637a:	d01f      	beq.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 800637c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006380:	d818      	bhi.n	80063b4 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8006382:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006386:	d003      	beq.n	8006390 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8006388:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800638c:	d007      	beq.n	800639e <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 800638e:	e011      	b.n	80063b4 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006390:	4b33      	ldr	r3, [pc, #204]	@ (8006460 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006392:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006394:	4a32      	ldr	r2, [pc, #200]	@ (8006460 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006396:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800639a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800639c:	e00f      	b.n	80063be <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800639e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80063a2:	3328      	adds	r3, #40	@ 0x28
 80063a4:	2101      	movs	r1, #1
 80063a6:	4618      	mov	r0, r3
 80063a8:	f000 fd98 	bl	8006edc <RCCEx_PLL3_Config>
 80063ac:	4603      	mov	r3, r0
 80063ae:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 80063b2:	e004      	b.n	80063be <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80063b4:	2301      	movs	r3, #1
 80063b6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80063ba:	e000      	b.n	80063be <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 80063bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063be:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d10b      	bne.n	80063de <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80063c6:	4b26      	ldr	r3, [pc, #152]	@ (8006460 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80063c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063ca:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80063ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80063d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063d6:	4a22      	ldr	r2, [pc, #136]	@ (8006460 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80063d8:	430b      	orrs	r3, r1
 80063da:	6553      	str	r3, [r2, #84]	@ 0x54
 80063dc:	e003      	b.n	80063e6 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063de:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80063e2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80063e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80063ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063ee:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80063f2:	673b      	str	r3, [r7, #112]	@ 0x70
 80063f4:	2300      	movs	r3, #0
 80063f6:	677b      	str	r3, [r7, #116]	@ 0x74
 80063f8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80063fc:	460b      	mov	r3, r1
 80063fe:	4313      	orrs	r3, r2
 8006400:	d034      	beq.n	800646c <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006402:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006406:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006408:	2b00      	cmp	r3, #0
 800640a:	d003      	beq.n	8006414 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 800640c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006410:	d007      	beq.n	8006422 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8006412:	e011      	b.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006414:	4b12      	ldr	r3, [pc, #72]	@ (8006460 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006416:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006418:	4a11      	ldr	r2, [pc, #68]	@ (8006460 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800641a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800641e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006420:	e00e      	b.n	8006440 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006422:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006426:	3308      	adds	r3, #8
 8006428:	2102      	movs	r1, #2
 800642a:	4618      	mov	r0, r3
 800642c:	f000 fca4 	bl	8006d78 <RCCEx_PLL2_Config>
 8006430:	4603      	mov	r3, r0
 8006432:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006436:	e003      	b.n	8006440 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8006438:	2301      	movs	r3, #1
 800643a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800643e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006440:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006444:	2b00      	cmp	r3, #0
 8006446:	d10d      	bne.n	8006464 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006448:	4b05      	ldr	r3, [pc, #20]	@ (8006460 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800644a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800644c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006450:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006454:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006456:	4a02      	ldr	r2, [pc, #8]	@ (8006460 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006458:	430b      	orrs	r3, r1
 800645a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800645c:	e006      	b.n	800646c <HAL_RCCEx_PeriphCLKConfig+0xfec>
 800645e:	bf00      	nop
 8006460:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006464:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006468:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800646c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006474:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8006478:	66bb      	str	r3, [r7, #104]	@ 0x68
 800647a:	2300      	movs	r3, #0
 800647c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800647e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8006482:	460b      	mov	r3, r1
 8006484:	4313      	orrs	r3, r2
 8006486:	d00c      	beq.n	80064a2 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006488:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800648c:	3328      	adds	r3, #40	@ 0x28
 800648e:	2102      	movs	r1, #2
 8006490:	4618      	mov	r0, r3
 8006492:	f000 fd23 	bl	8006edc <RCCEx_PLL3_Config>
 8006496:	4603      	mov	r3, r0
 8006498:	2b00      	cmp	r3, #0
 800649a:	d002      	beq.n	80064a2 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 800649c:	2301      	movs	r3, #1
 800649e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80064a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80064a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064aa:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80064ae:	663b      	str	r3, [r7, #96]	@ 0x60
 80064b0:	2300      	movs	r3, #0
 80064b2:	667b      	str	r3, [r7, #100]	@ 0x64
 80064b4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80064b8:	460b      	mov	r3, r1
 80064ba:	4313      	orrs	r3, r2
 80064bc:	d038      	beq.n	8006530 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 80064be:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80064c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064c6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80064ca:	d018      	beq.n	80064fe <HAL_RCCEx_PeriphCLKConfig+0x107e>
 80064cc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80064d0:	d811      	bhi.n	80064f6 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 80064d2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80064d6:	d014      	beq.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 80064d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80064dc:	d80b      	bhi.n	80064f6 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d011      	beq.n	8006506 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 80064e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80064e6:	d106      	bne.n	80064f6 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80064e8:	4bc3      	ldr	r3, [pc, #780]	@ (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80064ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064ec:	4ac2      	ldr	r2, [pc, #776]	@ (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80064ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80064f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80064f4:	e008      	b.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80064f6:	2301      	movs	r3, #1
 80064f8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80064fc:	e004      	b.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80064fe:	bf00      	nop
 8006500:	e002      	b.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8006502:	bf00      	nop
 8006504:	e000      	b.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8006506:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006508:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800650c:	2b00      	cmp	r3, #0
 800650e:	d10b      	bne.n	8006528 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006510:	4bb9      	ldr	r3, [pc, #740]	@ (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006512:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006514:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006518:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800651c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006520:	4ab5      	ldr	r2, [pc, #724]	@ (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006522:	430b      	orrs	r3, r1
 8006524:	6553      	str	r3, [r2, #84]	@ 0x54
 8006526:	e003      	b.n	8006530 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006528:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800652c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006530:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006538:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800653c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800653e:	2300      	movs	r3, #0
 8006540:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006542:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8006546:	460b      	mov	r3, r1
 8006548:	4313      	orrs	r3, r2
 800654a:	d009      	beq.n	8006560 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800654c:	4baa      	ldr	r3, [pc, #680]	@ (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800654e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006550:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006554:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006558:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800655a:	4aa7      	ldr	r2, [pc, #668]	@ (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800655c:	430b      	orrs	r3, r1
 800655e:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006560:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006568:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800656c:	653b      	str	r3, [r7, #80]	@ 0x50
 800656e:	2300      	movs	r3, #0
 8006570:	657b      	str	r3, [r7, #84]	@ 0x54
 8006572:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8006576:	460b      	mov	r3, r1
 8006578:	4313      	orrs	r3, r2
 800657a:	d009      	beq.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800657c:	4b9e      	ldr	r3, [pc, #632]	@ (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800657e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006580:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8006584:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006588:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800658a:	4a9b      	ldr	r2, [pc, #620]	@ (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800658c:	430b      	orrs	r3, r1
 800658e:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8006590:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006598:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800659c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800659e:	2300      	movs	r3, #0
 80065a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80065a2:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80065a6:	460b      	mov	r3, r1
 80065a8:	4313      	orrs	r3, r2
 80065aa:	d009      	beq.n	80065c0 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 80065ac:	4b92      	ldr	r3, [pc, #584]	@ (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80065ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80065b0:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 80065b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80065b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80065ba:	4a8f      	ldr	r2, [pc, #572]	@ (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80065bc:	430b      	orrs	r3, r1
 80065be:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80065c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80065c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065c8:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80065cc:	643b      	str	r3, [r7, #64]	@ 0x40
 80065ce:	2300      	movs	r3, #0
 80065d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80065d2:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80065d6:	460b      	mov	r3, r1
 80065d8:	4313      	orrs	r3, r2
 80065da:	d00e      	beq.n	80065fa <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80065dc:	4b86      	ldr	r3, [pc, #536]	@ (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80065de:	691b      	ldr	r3, [r3, #16]
 80065e0:	4a85      	ldr	r2, [pc, #532]	@ (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80065e2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80065e6:	6113      	str	r3, [r2, #16]
 80065e8:	4b83      	ldr	r3, [pc, #524]	@ (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80065ea:	6919      	ldr	r1, [r3, #16]
 80065ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80065f0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80065f4:	4a80      	ldr	r2, [pc, #512]	@ (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80065f6:	430b      	orrs	r3, r1
 80065f8:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80065fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80065fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006602:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8006606:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006608:	2300      	movs	r3, #0
 800660a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800660c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006610:	460b      	mov	r3, r1
 8006612:	4313      	orrs	r3, r2
 8006614:	d009      	beq.n	800662a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006616:	4b78      	ldr	r3, [pc, #480]	@ (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006618:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800661a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800661e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006622:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006624:	4a74      	ldr	r2, [pc, #464]	@ (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006626:	430b      	orrs	r3, r1
 8006628:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800662a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800662e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006632:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006636:	633b      	str	r3, [r7, #48]	@ 0x30
 8006638:	2300      	movs	r3, #0
 800663a:	637b      	str	r3, [r7, #52]	@ 0x34
 800663c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006640:	460b      	mov	r3, r1
 8006642:	4313      	orrs	r3, r2
 8006644:	d00a      	beq.n	800665c <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006646:	4b6c      	ldr	r3, [pc, #432]	@ (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006648:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800664a:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800664e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006652:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006656:	4a68      	ldr	r2, [pc, #416]	@ (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006658:	430b      	orrs	r3, r1
 800665a:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800665c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006664:	2100      	movs	r1, #0
 8006666:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006668:	f003 0301 	and.w	r3, r3, #1
 800666c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800666e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006672:	460b      	mov	r3, r1
 8006674:	4313      	orrs	r3, r2
 8006676:	d011      	beq.n	800669c <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006678:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800667c:	3308      	adds	r3, #8
 800667e:	2100      	movs	r1, #0
 8006680:	4618      	mov	r0, r3
 8006682:	f000 fb79 	bl	8006d78 <RCCEx_PLL2_Config>
 8006686:	4603      	mov	r3, r0
 8006688:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800668c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006690:	2b00      	cmp	r3, #0
 8006692:	d003      	beq.n	800669c <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006694:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006698:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800669c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80066a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066a4:	2100      	movs	r1, #0
 80066a6:	6239      	str	r1, [r7, #32]
 80066a8:	f003 0302 	and.w	r3, r3, #2
 80066ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80066ae:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80066b2:	460b      	mov	r3, r1
 80066b4:	4313      	orrs	r3, r2
 80066b6:	d011      	beq.n	80066dc <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80066b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80066bc:	3308      	adds	r3, #8
 80066be:	2101      	movs	r1, #1
 80066c0:	4618      	mov	r0, r3
 80066c2:	f000 fb59 	bl	8006d78 <RCCEx_PLL2_Config>
 80066c6:	4603      	mov	r3, r0
 80066c8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80066cc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d003      	beq.n	80066dc <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066d4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80066d8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80066dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80066e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066e4:	2100      	movs	r1, #0
 80066e6:	61b9      	str	r1, [r7, #24]
 80066e8:	f003 0304 	and.w	r3, r3, #4
 80066ec:	61fb      	str	r3, [r7, #28]
 80066ee:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80066f2:	460b      	mov	r3, r1
 80066f4:	4313      	orrs	r3, r2
 80066f6:	d011      	beq.n	800671c <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80066f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80066fc:	3308      	adds	r3, #8
 80066fe:	2102      	movs	r1, #2
 8006700:	4618      	mov	r0, r3
 8006702:	f000 fb39 	bl	8006d78 <RCCEx_PLL2_Config>
 8006706:	4603      	mov	r3, r0
 8006708:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800670c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006710:	2b00      	cmp	r3, #0
 8006712:	d003      	beq.n	800671c <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006714:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006718:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800671c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006724:	2100      	movs	r1, #0
 8006726:	6139      	str	r1, [r7, #16]
 8006728:	f003 0308 	and.w	r3, r3, #8
 800672c:	617b      	str	r3, [r7, #20]
 800672e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006732:	460b      	mov	r3, r1
 8006734:	4313      	orrs	r3, r2
 8006736:	d011      	beq.n	800675c <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006738:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800673c:	3328      	adds	r3, #40	@ 0x28
 800673e:	2100      	movs	r1, #0
 8006740:	4618      	mov	r0, r3
 8006742:	f000 fbcb 	bl	8006edc <RCCEx_PLL3_Config>
 8006746:	4603      	mov	r3, r0
 8006748:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 800674c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006750:	2b00      	cmp	r3, #0
 8006752:	d003      	beq.n	800675c <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006754:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006758:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800675c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006764:	2100      	movs	r1, #0
 8006766:	60b9      	str	r1, [r7, #8]
 8006768:	f003 0310 	and.w	r3, r3, #16
 800676c:	60fb      	str	r3, [r7, #12]
 800676e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006772:	460b      	mov	r3, r1
 8006774:	4313      	orrs	r3, r2
 8006776:	d011      	beq.n	800679c <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006778:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800677c:	3328      	adds	r3, #40	@ 0x28
 800677e:	2101      	movs	r1, #1
 8006780:	4618      	mov	r0, r3
 8006782:	f000 fbab 	bl	8006edc <RCCEx_PLL3_Config>
 8006786:	4603      	mov	r3, r0
 8006788:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800678c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006790:	2b00      	cmp	r3, #0
 8006792:	d003      	beq.n	800679c <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006794:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006798:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800679c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80067a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067a4:	2100      	movs	r1, #0
 80067a6:	6039      	str	r1, [r7, #0]
 80067a8:	f003 0320 	and.w	r3, r3, #32
 80067ac:	607b      	str	r3, [r7, #4]
 80067ae:	e9d7 1200 	ldrd	r1, r2, [r7]
 80067b2:	460b      	mov	r3, r1
 80067b4:	4313      	orrs	r3, r2
 80067b6:	d011      	beq.n	80067dc <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80067b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80067bc:	3328      	adds	r3, #40	@ 0x28
 80067be:	2102      	movs	r1, #2
 80067c0:	4618      	mov	r0, r3
 80067c2:	f000 fb8b 	bl	8006edc <RCCEx_PLL3_Config>
 80067c6:	4603      	mov	r3, r0
 80067c8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80067cc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d003      	beq.n	80067dc <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067d4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80067d8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 80067dc:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d101      	bne.n	80067e8 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 80067e4:	2300      	movs	r3, #0
 80067e6:	e000      	b.n	80067ea <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 80067e8:	2301      	movs	r3, #1
}
 80067ea:	4618      	mov	r0, r3
 80067ec:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 80067f0:	46bd      	mov	sp, r7
 80067f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80067f6:	bf00      	nop
 80067f8:	58024400 	.word	0x58024400

080067fc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8006800:	f7fe fda0 	bl	8005344 <HAL_RCC_GetHCLKFreq>
 8006804:	4602      	mov	r2, r0
 8006806:	4b06      	ldr	r3, [pc, #24]	@ (8006820 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006808:	6a1b      	ldr	r3, [r3, #32]
 800680a:	091b      	lsrs	r3, r3, #4
 800680c:	f003 0307 	and.w	r3, r3, #7
 8006810:	4904      	ldr	r1, [pc, #16]	@ (8006824 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006812:	5ccb      	ldrb	r3, [r1, r3]
 8006814:	f003 031f 	and.w	r3, r3, #31
 8006818:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800681c:	4618      	mov	r0, r3
 800681e:	bd80      	pop	{r7, pc}
 8006820:	58024400 	.word	0x58024400
 8006824:	08008a0c 	.word	0x08008a0c

08006828 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006828:	b480      	push	{r7}
 800682a:	b089      	sub	sp, #36	@ 0x24
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006830:	4ba1      	ldr	r3, [pc, #644]	@ (8006ab8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006832:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006834:	f003 0303 	and.w	r3, r3, #3
 8006838:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800683a:	4b9f      	ldr	r3, [pc, #636]	@ (8006ab8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800683c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800683e:	0b1b      	lsrs	r3, r3, #12
 8006840:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006844:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006846:	4b9c      	ldr	r3, [pc, #624]	@ (8006ab8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006848:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800684a:	091b      	lsrs	r3, r3, #4
 800684c:	f003 0301 	and.w	r3, r3, #1
 8006850:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006852:	4b99      	ldr	r3, [pc, #612]	@ (8006ab8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006854:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006856:	08db      	lsrs	r3, r3, #3
 8006858:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800685c:	693a      	ldr	r2, [r7, #16]
 800685e:	fb02 f303 	mul.w	r3, r2, r3
 8006862:	ee07 3a90 	vmov	s15, r3
 8006866:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800686a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800686e:	697b      	ldr	r3, [r7, #20]
 8006870:	2b00      	cmp	r3, #0
 8006872:	f000 8111 	beq.w	8006a98 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006876:	69bb      	ldr	r3, [r7, #24]
 8006878:	2b02      	cmp	r3, #2
 800687a:	f000 8083 	beq.w	8006984 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800687e:	69bb      	ldr	r3, [r7, #24]
 8006880:	2b02      	cmp	r3, #2
 8006882:	f200 80a1 	bhi.w	80069c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006886:	69bb      	ldr	r3, [r7, #24]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d003      	beq.n	8006894 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800688c:	69bb      	ldr	r3, [r7, #24]
 800688e:	2b01      	cmp	r3, #1
 8006890:	d056      	beq.n	8006940 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006892:	e099      	b.n	80069c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006894:	4b88      	ldr	r3, [pc, #544]	@ (8006ab8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f003 0320 	and.w	r3, r3, #32
 800689c:	2b00      	cmp	r3, #0
 800689e:	d02d      	beq.n	80068fc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80068a0:	4b85      	ldr	r3, [pc, #532]	@ (8006ab8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	08db      	lsrs	r3, r3, #3
 80068a6:	f003 0303 	and.w	r3, r3, #3
 80068aa:	4a84      	ldr	r2, [pc, #528]	@ (8006abc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80068ac:	fa22 f303 	lsr.w	r3, r2, r3
 80068b0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80068b2:	68bb      	ldr	r3, [r7, #8]
 80068b4:	ee07 3a90 	vmov	s15, r3
 80068b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068bc:	697b      	ldr	r3, [r7, #20]
 80068be:	ee07 3a90 	vmov	s15, r3
 80068c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068ca:	4b7b      	ldr	r3, [pc, #492]	@ (8006ab8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80068cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068d2:	ee07 3a90 	vmov	s15, r3
 80068d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068da:	ed97 6a03 	vldr	s12, [r7, #12]
 80068de:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006ac0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80068e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80068e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80068ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80068ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068f6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80068fa:	e087      	b.n	8006a0c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80068fc:	697b      	ldr	r3, [r7, #20]
 80068fe:	ee07 3a90 	vmov	s15, r3
 8006902:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006906:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006ac4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800690a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800690e:	4b6a      	ldr	r3, [pc, #424]	@ (8006ab8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006910:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006912:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006916:	ee07 3a90 	vmov	s15, r3
 800691a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800691e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006922:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006ac0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006926:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800692a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800692e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006932:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006936:	ee67 7a27 	vmul.f32	s15, s14, s15
 800693a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800693e:	e065      	b.n	8006a0c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006940:	697b      	ldr	r3, [r7, #20]
 8006942:	ee07 3a90 	vmov	s15, r3
 8006946:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800694a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006ac8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800694e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006952:	4b59      	ldr	r3, [pc, #356]	@ (8006ab8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006954:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006956:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800695a:	ee07 3a90 	vmov	s15, r3
 800695e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006962:	ed97 6a03 	vldr	s12, [r7, #12]
 8006966:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006ac0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800696a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800696e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006972:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006976:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800697a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800697e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006982:	e043      	b.n	8006a0c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006984:	697b      	ldr	r3, [r7, #20]
 8006986:	ee07 3a90 	vmov	s15, r3
 800698a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800698e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006acc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006992:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006996:	4b48      	ldr	r3, [pc, #288]	@ (8006ab8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006998:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800699a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800699e:	ee07 3a90 	vmov	s15, r3
 80069a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80069aa:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006ac0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80069ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80069b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80069b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80069ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80069c6:	e021      	b.n	8006a0c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80069c8:	697b      	ldr	r3, [r7, #20]
 80069ca:	ee07 3a90 	vmov	s15, r3
 80069ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069d2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006ac8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80069d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069da:	4b37      	ldr	r3, [pc, #220]	@ (8006ab8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80069dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069e2:	ee07 3a90 	vmov	s15, r3
 80069e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80069ee:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006ac0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80069f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80069f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80069fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80069fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a06:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006a0a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006a0c:	4b2a      	ldr	r3, [pc, #168]	@ (8006ab8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a10:	0a5b      	lsrs	r3, r3, #9
 8006a12:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006a16:	ee07 3a90 	vmov	s15, r3
 8006a1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a1e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006a22:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006a26:	edd7 6a07 	vldr	s13, [r7, #28]
 8006a2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006a32:	ee17 2a90 	vmov	r2, s15
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8006a3a:	4b1f      	ldr	r3, [pc, #124]	@ (8006ab8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a3e:	0c1b      	lsrs	r3, r3, #16
 8006a40:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006a44:	ee07 3a90 	vmov	s15, r3
 8006a48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a4c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006a50:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006a54:	edd7 6a07 	vldr	s13, [r7, #28]
 8006a58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006a60:	ee17 2a90 	vmov	r2, s15
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8006a68:	4b13      	ldr	r3, [pc, #76]	@ (8006ab8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a6c:	0e1b      	lsrs	r3, r3, #24
 8006a6e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006a72:	ee07 3a90 	vmov	s15, r3
 8006a76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a7a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006a7e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006a82:	edd7 6a07 	vldr	s13, [r7, #28]
 8006a86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006a8e:	ee17 2a90 	vmov	r2, s15
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006a96:	e008      	b.n	8006aaa <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	609a      	str	r2, [r3, #8]
}
 8006aaa:	bf00      	nop
 8006aac:	3724      	adds	r7, #36	@ 0x24
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab4:	4770      	bx	lr
 8006ab6:	bf00      	nop
 8006ab8:	58024400 	.word	0x58024400
 8006abc:	03d09000 	.word	0x03d09000
 8006ac0:	46000000 	.word	0x46000000
 8006ac4:	4c742400 	.word	0x4c742400
 8006ac8:	4a742400 	.word	0x4a742400
 8006acc:	4bb71b00 	.word	0x4bb71b00

08006ad0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006ad0:	b480      	push	{r7}
 8006ad2:	b089      	sub	sp, #36	@ 0x24
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006ad8:	4ba1      	ldr	r3, [pc, #644]	@ (8006d60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ada:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006adc:	f003 0303 	and.w	r3, r3, #3
 8006ae0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8006ae2:	4b9f      	ldr	r3, [pc, #636]	@ (8006d60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ae4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ae6:	0d1b      	lsrs	r3, r3, #20
 8006ae8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006aec:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006aee:	4b9c      	ldr	r3, [pc, #624]	@ (8006d60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006af0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006af2:	0a1b      	lsrs	r3, r3, #8
 8006af4:	f003 0301 	and.w	r3, r3, #1
 8006af8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8006afa:	4b99      	ldr	r3, [pc, #612]	@ (8006d60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006afc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006afe:	08db      	lsrs	r3, r3, #3
 8006b00:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006b04:	693a      	ldr	r2, [r7, #16]
 8006b06:	fb02 f303 	mul.w	r3, r2, r3
 8006b0a:	ee07 3a90 	vmov	s15, r3
 8006b0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b12:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006b16:	697b      	ldr	r3, [r7, #20]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	f000 8111 	beq.w	8006d40 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006b1e:	69bb      	ldr	r3, [r7, #24]
 8006b20:	2b02      	cmp	r3, #2
 8006b22:	f000 8083 	beq.w	8006c2c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006b26:	69bb      	ldr	r3, [r7, #24]
 8006b28:	2b02      	cmp	r3, #2
 8006b2a:	f200 80a1 	bhi.w	8006c70 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006b2e:	69bb      	ldr	r3, [r7, #24]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d003      	beq.n	8006b3c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006b34:	69bb      	ldr	r3, [r7, #24]
 8006b36:	2b01      	cmp	r3, #1
 8006b38:	d056      	beq.n	8006be8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006b3a:	e099      	b.n	8006c70 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006b3c:	4b88      	ldr	r3, [pc, #544]	@ (8006d60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f003 0320 	and.w	r3, r3, #32
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d02d      	beq.n	8006ba4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006b48:	4b85      	ldr	r3, [pc, #532]	@ (8006d60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	08db      	lsrs	r3, r3, #3
 8006b4e:	f003 0303 	and.w	r3, r3, #3
 8006b52:	4a84      	ldr	r2, [pc, #528]	@ (8006d64 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006b54:	fa22 f303 	lsr.w	r3, r2, r3
 8006b58:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006b5a:	68bb      	ldr	r3, [r7, #8]
 8006b5c:	ee07 3a90 	vmov	s15, r3
 8006b60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b64:	697b      	ldr	r3, [r7, #20]
 8006b66:	ee07 3a90 	vmov	s15, r3
 8006b6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b72:	4b7b      	ldr	r3, [pc, #492]	@ (8006d60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b7a:	ee07 3a90 	vmov	s15, r3
 8006b7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b82:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b86:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006d68 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006b8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b92:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006b96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b9e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006ba2:	e087      	b.n	8006cb4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006ba4:	697b      	ldr	r3, [r7, #20]
 8006ba6:	ee07 3a90 	vmov	s15, r3
 8006baa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bae:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006d6c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006bb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bb6:	4b6a      	ldr	r3, [pc, #424]	@ (8006d60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006bb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bbe:	ee07 3a90 	vmov	s15, r3
 8006bc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bc6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006bca:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006d68 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006bce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bd6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006bda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006bde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006be2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006be6:	e065      	b.n	8006cb4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006be8:	697b      	ldr	r3, [r7, #20]
 8006bea:	ee07 3a90 	vmov	s15, r3
 8006bee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bf2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006d70 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006bf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bfa:	4b59      	ldr	r3, [pc, #356]	@ (8006d60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c02:	ee07 3a90 	vmov	s15, r3
 8006c06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c0e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006d68 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006c12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c26:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006c2a:	e043      	b.n	8006cb4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006c2c:	697b      	ldr	r3, [r7, #20]
 8006c2e:	ee07 3a90 	vmov	s15, r3
 8006c32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c36:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006d74 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006c3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c3e:	4b48      	ldr	r3, [pc, #288]	@ (8006d60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c46:	ee07 3a90 	vmov	s15, r3
 8006c4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c52:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006d68 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006c56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c5e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006c6e:	e021      	b.n	8006cb4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006c70:	697b      	ldr	r3, [r7, #20]
 8006c72:	ee07 3a90 	vmov	s15, r3
 8006c76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c7a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006d70 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006c7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c82:	4b37      	ldr	r3, [pc, #220]	@ (8006d60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c8a:	ee07 3a90 	vmov	s15, r3
 8006c8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c92:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c96:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006d68 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006c9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ca2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006ca6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006caa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006cb2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006cb4:	4b2a      	ldr	r3, [pc, #168]	@ (8006d60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006cb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cb8:	0a5b      	lsrs	r3, r3, #9
 8006cba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006cbe:	ee07 3a90 	vmov	s15, r3
 8006cc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cc6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006cca:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006cce:	edd7 6a07 	vldr	s13, [r7, #28]
 8006cd2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006cd6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006cda:	ee17 2a90 	vmov	r2, s15
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8006ce2:	4b1f      	ldr	r3, [pc, #124]	@ (8006d60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ce4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ce6:	0c1b      	lsrs	r3, r3, #16
 8006ce8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006cec:	ee07 3a90 	vmov	s15, r3
 8006cf0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cf4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006cf8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006cfc:	edd7 6a07 	vldr	s13, [r7, #28]
 8006d00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d08:	ee17 2a90 	vmov	r2, s15
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8006d10:	4b13      	ldr	r3, [pc, #76]	@ (8006d60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d14:	0e1b      	lsrs	r3, r3, #24
 8006d16:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006d1a:	ee07 3a90 	vmov	s15, r3
 8006d1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d22:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006d26:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006d2a:	edd7 6a07 	vldr	s13, [r7, #28]
 8006d2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d36:	ee17 2a90 	vmov	r2, s15
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006d3e:	e008      	b.n	8006d52 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2200      	movs	r2, #0
 8006d44:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2200      	movs	r2, #0
 8006d4a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2200      	movs	r2, #0
 8006d50:	609a      	str	r2, [r3, #8]
}
 8006d52:	bf00      	nop
 8006d54:	3724      	adds	r7, #36	@ 0x24
 8006d56:	46bd      	mov	sp, r7
 8006d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5c:	4770      	bx	lr
 8006d5e:	bf00      	nop
 8006d60:	58024400 	.word	0x58024400
 8006d64:	03d09000 	.word	0x03d09000
 8006d68:	46000000 	.word	0x46000000
 8006d6c:	4c742400 	.word	0x4c742400
 8006d70:	4a742400 	.word	0x4a742400
 8006d74:	4bb71b00 	.word	0x4bb71b00

08006d78 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b084      	sub	sp, #16
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
 8006d80:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006d82:	2300      	movs	r3, #0
 8006d84:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006d86:	4b53      	ldr	r3, [pc, #332]	@ (8006ed4 <RCCEx_PLL2_Config+0x15c>)
 8006d88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d8a:	f003 0303 	and.w	r3, r3, #3
 8006d8e:	2b03      	cmp	r3, #3
 8006d90:	d101      	bne.n	8006d96 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006d92:	2301      	movs	r3, #1
 8006d94:	e099      	b.n	8006eca <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006d96:	4b4f      	ldr	r3, [pc, #316]	@ (8006ed4 <RCCEx_PLL2_Config+0x15c>)
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	4a4e      	ldr	r2, [pc, #312]	@ (8006ed4 <RCCEx_PLL2_Config+0x15c>)
 8006d9c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006da0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006da2:	f7fa f8d1 	bl	8000f48 <HAL_GetTick>
 8006da6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006da8:	e008      	b.n	8006dbc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006daa:	f7fa f8cd 	bl	8000f48 <HAL_GetTick>
 8006dae:	4602      	mov	r2, r0
 8006db0:	68bb      	ldr	r3, [r7, #8]
 8006db2:	1ad3      	subs	r3, r2, r3
 8006db4:	2b02      	cmp	r3, #2
 8006db6:	d901      	bls.n	8006dbc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006db8:	2303      	movs	r3, #3
 8006dba:	e086      	b.n	8006eca <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006dbc:	4b45      	ldr	r3, [pc, #276]	@ (8006ed4 <RCCEx_PLL2_Config+0x15c>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d1f0      	bne.n	8006daa <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006dc8:	4b42      	ldr	r3, [pc, #264]	@ (8006ed4 <RCCEx_PLL2_Config+0x15c>)
 8006dca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dcc:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	031b      	lsls	r3, r3, #12
 8006dd6:	493f      	ldr	r1, [pc, #252]	@ (8006ed4 <RCCEx_PLL2_Config+0x15c>)
 8006dd8:	4313      	orrs	r3, r2
 8006dda:	628b      	str	r3, [r1, #40]	@ 0x28
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	685b      	ldr	r3, [r3, #4]
 8006de0:	3b01      	subs	r3, #1
 8006de2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	689b      	ldr	r3, [r3, #8]
 8006dea:	3b01      	subs	r3, #1
 8006dec:	025b      	lsls	r3, r3, #9
 8006dee:	b29b      	uxth	r3, r3
 8006df0:	431a      	orrs	r2, r3
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	68db      	ldr	r3, [r3, #12]
 8006df6:	3b01      	subs	r3, #1
 8006df8:	041b      	lsls	r3, r3, #16
 8006dfa:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006dfe:	431a      	orrs	r2, r3
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	691b      	ldr	r3, [r3, #16]
 8006e04:	3b01      	subs	r3, #1
 8006e06:	061b      	lsls	r3, r3, #24
 8006e08:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006e0c:	4931      	ldr	r1, [pc, #196]	@ (8006ed4 <RCCEx_PLL2_Config+0x15c>)
 8006e0e:	4313      	orrs	r3, r2
 8006e10:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006e12:	4b30      	ldr	r3, [pc, #192]	@ (8006ed4 <RCCEx_PLL2_Config+0x15c>)
 8006e14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e16:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	695b      	ldr	r3, [r3, #20]
 8006e1e:	492d      	ldr	r1, [pc, #180]	@ (8006ed4 <RCCEx_PLL2_Config+0x15c>)
 8006e20:	4313      	orrs	r3, r2
 8006e22:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006e24:	4b2b      	ldr	r3, [pc, #172]	@ (8006ed4 <RCCEx_PLL2_Config+0x15c>)
 8006e26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e28:	f023 0220 	bic.w	r2, r3, #32
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	699b      	ldr	r3, [r3, #24]
 8006e30:	4928      	ldr	r1, [pc, #160]	@ (8006ed4 <RCCEx_PLL2_Config+0x15c>)
 8006e32:	4313      	orrs	r3, r2
 8006e34:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006e36:	4b27      	ldr	r3, [pc, #156]	@ (8006ed4 <RCCEx_PLL2_Config+0x15c>)
 8006e38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e3a:	4a26      	ldr	r2, [pc, #152]	@ (8006ed4 <RCCEx_PLL2_Config+0x15c>)
 8006e3c:	f023 0310 	bic.w	r3, r3, #16
 8006e40:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006e42:	4b24      	ldr	r3, [pc, #144]	@ (8006ed4 <RCCEx_PLL2_Config+0x15c>)
 8006e44:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006e46:	4b24      	ldr	r3, [pc, #144]	@ (8006ed8 <RCCEx_PLL2_Config+0x160>)
 8006e48:	4013      	ands	r3, r2
 8006e4a:	687a      	ldr	r2, [r7, #4]
 8006e4c:	69d2      	ldr	r2, [r2, #28]
 8006e4e:	00d2      	lsls	r2, r2, #3
 8006e50:	4920      	ldr	r1, [pc, #128]	@ (8006ed4 <RCCEx_PLL2_Config+0x15c>)
 8006e52:	4313      	orrs	r3, r2
 8006e54:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006e56:	4b1f      	ldr	r3, [pc, #124]	@ (8006ed4 <RCCEx_PLL2_Config+0x15c>)
 8006e58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e5a:	4a1e      	ldr	r2, [pc, #120]	@ (8006ed4 <RCCEx_PLL2_Config+0x15c>)
 8006e5c:	f043 0310 	orr.w	r3, r3, #16
 8006e60:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d106      	bne.n	8006e76 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006e68:	4b1a      	ldr	r3, [pc, #104]	@ (8006ed4 <RCCEx_PLL2_Config+0x15c>)
 8006e6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e6c:	4a19      	ldr	r2, [pc, #100]	@ (8006ed4 <RCCEx_PLL2_Config+0x15c>)
 8006e6e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006e72:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006e74:	e00f      	b.n	8006e96 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	2b01      	cmp	r3, #1
 8006e7a:	d106      	bne.n	8006e8a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006e7c:	4b15      	ldr	r3, [pc, #84]	@ (8006ed4 <RCCEx_PLL2_Config+0x15c>)
 8006e7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e80:	4a14      	ldr	r2, [pc, #80]	@ (8006ed4 <RCCEx_PLL2_Config+0x15c>)
 8006e82:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006e86:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006e88:	e005      	b.n	8006e96 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006e8a:	4b12      	ldr	r3, [pc, #72]	@ (8006ed4 <RCCEx_PLL2_Config+0x15c>)
 8006e8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e8e:	4a11      	ldr	r2, [pc, #68]	@ (8006ed4 <RCCEx_PLL2_Config+0x15c>)
 8006e90:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006e94:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006e96:	4b0f      	ldr	r3, [pc, #60]	@ (8006ed4 <RCCEx_PLL2_Config+0x15c>)
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	4a0e      	ldr	r2, [pc, #56]	@ (8006ed4 <RCCEx_PLL2_Config+0x15c>)
 8006e9c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006ea0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ea2:	f7fa f851 	bl	8000f48 <HAL_GetTick>
 8006ea6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006ea8:	e008      	b.n	8006ebc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006eaa:	f7fa f84d 	bl	8000f48 <HAL_GetTick>
 8006eae:	4602      	mov	r2, r0
 8006eb0:	68bb      	ldr	r3, [r7, #8]
 8006eb2:	1ad3      	subs	r3, r2, r3
 8006eb4:	2b02      	cmp	r3, #2
 8006eb6:	d901      	bls.n	8006ebc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006eb8:	2303      	movs	r3, #3
 8006eba:	e006      	b.n	8006eca <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006ebc:	4b05      	ldr	r3, [pc, #20]	@ (8006ed4 <RCCEx_PLL2_Config+0x15c>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d0f0      	beq.n	8006eaa <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006ec8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006eca:	4618      	mov	r0, r3
 8006ecc:	3710      	adds	r7, #16
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	bd80      	pop	{r7, pc}
 8006ed2:	bf00      	nop
 8006ed4:	58024400 	.word	0x58024400
 8006ed8:	ffff0007 	.word	0xffff0007

08006edc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b084      	sub	sp, #16
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
 8006ee4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006eea:	4b53      	ldr	r3, [pc, #332]	@ (8007038 <RCCEx_PLL3_Config+0x15c>)
 8006eec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006eee:	f003 0303 	and.w	r3, r3, #3
 8006ef2:	2b03      	cmp	r3, #3
 8006ef4:	d101      	bne.n	8006efa <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006ef6:	2301      	movs	r3, #1
 8006ef8:	e099      	b.n	800702e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006efa:	4b4f      	ldr	r3, [pc, #316]	@ (8007038 <RCCEx_PLL3_Config+0x15c>)
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	4a4e      	ldr	r2, [pc, #312]	@ (8007038 <RCCEx_PLL3_Config+0x15c>)
 8006f00:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006f04:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f06:	f7fa f81f 	bl	8000f48 <HAL_GetTick>
 8006f0a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006f0c:	e008      	b.n	8006f20 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006f0e:	f7fa f81b 	bl	8000f48 <HAL_GetTick>
 8006f12:	4602      	mov	r2, r0
 8006f14:	68bb      	ldr	r3, [r7, #8]
 8006f16:	1ad3      	subs	r3, r2, r3
 8006f18:	2b02      	cmp	r3, #2
 8006f1a:	d901      	bls.n	8006f20 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006f1c:	2303      	movs	r3, #3
 8006f1e:	e086      	b.n	800702e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006f20:	4b45      	ldr	r3, [pc, #276]	@ (8007038 <RCCEx_PLL3_Config+0x15c>)
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d1f0      	bne.n	8006f0e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006f2c:	4b42      	ldr	r3, [pc, #264]	@ (8007038 <RCCEx_PLL3_Config+0x15c>)
 8006f2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f30:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	051b      	lsls	r3, r3, #20
 8006f3a:	493f      	ldr	r1, [pc, #252]	@ (8007038 <RCCEx_PLL3_Config+0x15c>)
 8006f3c:	4313      	orrs	r3, r2
 8006f3e:	628b      	str	r3, [r1, #40]	@ 0x28
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	685b      	ldr	r3, [r3, #4]
 8006f44:	3b01      	subs	r3, #1
 8006f46:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	689b      	ldr	r3, [r3, #8]
 8006f4e:	3b01      	subs	r3, #1
 8006f50:	025b      	lsls	r3, r3, #9
 8006f52:	b29b      	uxth	r3, r3
 8006f54:	431a      	orrs	r2, r3
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	68db      	ldr	r3, [r3, #12]
 8006f5a:	3b01      	subs	r3, #1
 8006f5c:	041b      	lsls	r3, r3, #16
 8006f5e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006f62:	431a      	orrs	r2, r3
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	691b      	ldr	r3, [r3, #16]
 8006f68:	3b01      	subs	r3, #1
 8006f6a:	061b      	lsls	r3, r3, #24
 8006f6c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006f70:	4931      	ldr	r1, [pc, #196]	@ (8007038 <RCCEx_PLL3_Config+0x15c>)
 8006f72:	4313      	orrs	r3, r2
 8006f74:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006f76:	4b30      	ldr	r3, [pc, #192]	@ (8007038 <RCCEx_PLL3_Config+0x15c>)
 8006f78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f7a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	695b      	ldr	r3, [r3, #20]
 8006f82:	492d      	ldr	r1, [pc, #180]	@ (8007038 <RCCEx_PLL3_Config+0x15c>)
 8006f84:	4313      	orrs	r3, r2
 8006f86:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006f88:	4b2b      	ldr	r3, [pc, #172]	@ (8007038 <RCCEx_PLL3_Config+0x15c>)
 8006f8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f8c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	699b      	ldr	r3, [r3, #24]
 8006f94:	4928      	ldr	r1, [pc, #160]	@ (8007038 <RCCEx_PLL3_Config+0x15c>)
 8006f96:	4313      	orrs	r3, r2
 8006f98:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006f9a:	4b27      	ldr	r3, [pc, #156]	@ (8007038 <RCCEx_PLL3_Config+0x15c>)
 8006f9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f9e:	4a26      	ldr	r2, [pc, #152]	@ (8007038 <RCCEx_PLL3_Config+0x15c>)
 8006fa0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006fa4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006fa6:	4b24      	ldr	r3, [pc, #144]	@ (8007038 <RCCEx_PLL3_Config+0x15c>)
 8006fa8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006faa:	4b24      	ldr	r3, [pc, #144]	@ (800703c <RCCEx_PLL3_Config+0x160>)
 8006fac:	4013      	ands	r3, r2
 8006fae:	687a      	ldr	r2, [r7, #4]
 8006fb0:	69d2      	ldr	r2, [r2, #28]
 8006fb2:	00d2      	lsls	r2, r2, #3
 8006fb4:	4920      	ldr	r1, [pc, #128]	@ (8007038 <RCCEx_PLL3_Config+0x15c>)
 8006fb6:	4313      	orrs	r3, r2
 8006fb8:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006fba:	4b1f      	ldr	r3, [pc, #124]	@ (8007038 <RCCEx_PLL3_Config+0x15c>)
 8006fbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fbe:	4a1e      	ldr	r2, [pc, #120]	@ (8007038 <RCCEx_PLL3_Config+0x15c>)
 8006fc0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006fc4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d106      	bne.n	8006fda <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006fcc:	4b1a      	ldr	r3, [pc, #104]	@ (8007038 <RCCEx_PLL3_Config+0x15c>)
 8006fce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fd0:	4a19      	ldr	r2, [pc, #100]	@ (8007038 <RCCEx_PLL3_Config+0x15c>)
 8006fd2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006fd6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006fd8:	e00f      	b.n	8006ffa <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	2b01      	cmp	r3, #1
 8006fde:	d106      	bne.n	8006fee <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006fe0:	4b15      	ldr	r3, [pc, #84]	@ (8007038 <RCCEx_PLL3_Config+0x15c>)
 8006fe2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fe4:	4a14      	ldr	r2, [pc, #80]	@ (8007038 <RCCEx_PLL3_Config+0x15c>)
 8006fe6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006fea:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006fec:	e005      	b.n	8006ffa <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006fee:	4b12      	ldr	r3, [pc, #72]	@ (8007038 <RCCEx_PLL3_Config+0x15c>)
 8006ff0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ff2:	4a11      	ldr	r2, [pc, #68]	@ (8007038 <RCCEx_PLL3_Config+0x15c>)
 8006ff4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006ff8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006ffa:	4b0f      	ldr	r3, [pc, #60]	@ (8007038 <RCCEx_PLL3_Config+0x15c>)
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	4a0e      	ldr	r2, [pc, #56]	@ (8007038 <RCCEx_PLL3_Config+0x15c>)
 8007000:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007004:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007006:	f7f9 ff9f 	bl	8000f48 <HAL_GetTick>
 800700a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800700c:	e008      	b.n	8007020 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800700e:	f7f9 ff9b 	bl	8000f48 <HAL_GetTick>
 8007012:	4602      	mov	r2, r0
 8007014:	68bb      	ldr	r3, [r7, #8]
 8007016:	1ad3      	subs	r3, r2, r3
 8007018:	2b02      	cmp	r3, #2
 800701a:	d901      	bls.n	8007020 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800701c:	2303      	movs	r3, #3
 800701e:	e006      	b.n	800702e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007020:	4b05      	ldr	r3, [pc, #20]	@ (8007038 <RCCEx_PLL3_Config+0x15c>)
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007028:	2b00      	cmp	r3, #0
 800702a:	d0f0      	beq.n	800700e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800702c:	7bfb      	ldrb	r3, [r7, #15]
}
 800702e:	4618      	mov	r0, r3
 8007030:	3710      	adds	r7, #16
 8007032:	46bd      	mov	sp, r7
 8007034:	bd80      	pop	{r7, pc}
 8007036:	bf00      	nop
 8007038:	58024400 	.word	0x58024400
 800703c:	ffff0007 	.word	0xffff0007

08007040 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b082      	sub	sp, #8
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d101      	bne.n	8007052 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800704e:	2301      	movs	r3, #1
 8007050:	e049      	b.n	80070e6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007058:	b2db      	uxtb	r3, r3
 800705a:	2b00      	cmp	r3, #0
 800705c:	d106      	bne.n	800706c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2200      	movs	r2, #0
 8007062:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007066:	6878      	ldr	r0, [r7, #4]
 8007068:	f000 f841 	bl	80070ee <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2202      	movs	r2, #2
 8007070:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681a      	ldr	r2, [r3, #0]
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	3304      	adds	r3, #4
 800707c:	4619      	mov	r1, r3
 800707e:	4610      	mov	r0, r2
 8007080:	f000 f9e8 	bl	8007454 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2201      	movs	r2, #1
 8007088:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2201      	movs	r2, #1
 8007090:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2201      	movs	r2, #1
 8007098:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2201      	movs	r2, #1
 80070a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2201      	movs	r2, #1
 80070a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2201      	movs	r2, #1
 80070b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2201      	movs	r2, #1
 80070b8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2201      	movs	r2, #1
 80070c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2201      	movs	r2, #1
 80070c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2201      	movs	r2, #1
 80070d0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2201      	movs	r2, #1
 80070d8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2201      	movs	r2, #1
 80070e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80070e4:	2300      	movs	r3, #0
}
 80070e6:	4618      	mov	r0, r3
 80070e8:	3708      	adds	r7, #8
 80070ea:	46bd      	mov	sp, r7
 80070ec:	bd80      	pop	{r7, pc}

080070ee <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80070ee:	b480      	push	{r7}
 80070f0:	b083      	sub	sp, #12
 80070f2:	af00      	add	r7, sp, #0
 80070f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80070f6:	bf00      	nop
 80070f8:	370c      	adds	r7, #12
 80070fa:	46bd      	mov	sp, r7
 80070fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007100:	4770      	bx	lr
	...

08007104 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007104:	b480      	push	{r7}
 8007106:	b085      	sub	sp, #20
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007112:	b2db      	uxtb	r3, r3
 8007114:	2b01      	cmp	r3, #1
 8007116:	d001      	beq.n	800711c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007118:	2301      	movs	r3, #1
 800711a:	e054      	b.n	80071c6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2202      	movs	r2, #2
 8007120:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	68da      	ldr	r2, [r3, #12]
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f042 0201 	orr.w	r2, r2, #1
 8007132:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	4a26      	ldr	r2, [pc, #152]	@ (80071d4 <HAL_TIM_Base_Start_IT+0xd0>)
 800713a:	4293      	cmp	r3, r2
 800713c:	d022      	beq.n	8007184 <HAL_TIM_Base_Start_IT+0x80>
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007146:	d01d      	beq.n	8007184 <HAL_TIM_Base_Start_IT+0x80>
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	4a22      	ldr	r2, [pc, #136]	@ (80071d8 <HAL_TIM_Base_Start_IT+0xd4>)
 800714e:	4293      	cmp	r3, r2
 8007150:	d018      	beq.n	8007184 <HAL_TIM_Base_Start_IT+0x80>
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	4a21      	ldr	r2, [pc, #132]	@ (80071dc <HAL_TIM_Base_Start_IT+0xd8>)
 8007158:	4293      	cmp	r3, r2
 800715a:	d013      	beq.n	8007184 <HAL_TIM_Base_Start_IT+0x80>
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	4a1f      	ldr	r2, [pc, #124]	@ (80071e0 <HAL_TIM_Base_Start_IT+0xdc>)
 8007162:	4293      	cmp	r3, r2
 8007164:	d00e      	beq.n	8007184 <HAL_TIM_Base_Start_IT+0x80>
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	4a1e      	ldr	r2, [pc, #120]	@ (80071e4 <HAL_TIM_Base_Start_IT+0xe0>)
 800716c:	4293      	cmp	r3, r2
 800716e:	d009      	beq.n	8007184 <HAL_TIM_Base_Start_IT+0x80>
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	4a1c      	ldr	r2, [pc, #112]	@ (80071e8 <HAL_TIM_Base_Start_IT+0xe4>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d004      	beq.n	8007184 <HAL_TIM_Base_Start_IT+0x80>
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	4a1b      	ldr	r2, [pc, #108]	@ (80071ec <HAL_TIM_Base_Start_IT+0xe8>)
 8007180:	4293      	cmp	r3, r2
 8007182:	d115      	bne.n	80071b0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	689a      	ldr	r2, [r3, #8]
 800718a:	4b19      	ldr	r3, [pc, #100]	@ (80071f0 <HAL_TIM_Base_Start_IT+0xec>)
 800718c:	4013      	ands	r3, r2
 800718e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	2b06      	cmp	r3, #6
 8007194:	d015      	beq.n	80071c2 <HAL_TIM_Base_Start_IT+0xbe>
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800719c:	d011      	beq.n	80071c2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	681a      	ldr	r2, [r3, #0]
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	f042 0201 	orr.w	r2, r2, #1
 80071ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071ae:	e008      	b.n	80071c2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	681a      	ldr	r2, [r3, #0]
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f042 0201 	orr.w	r2, r2, #1
 80071be:	601a      	str	r2, [r3, #0]
 80071c0:	e000      	b.n	80071c4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071c2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80071c4:	2300      	movs	r3, #0
}
 80071c6:	4618      	mov	r0, r3
 80071c8:	3714      	adds	r7, #20
 80071ca:	46bd      	mov	sp, r7
 80071cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d0:	4770      	bx	lr
 80071d2:	bf00      	nop
 80071d4:	40010000 	.word	0x40010000
 80071d8:	40000400 	.word	0x40000400
 80071dc:	40000800 	.word	0x40000800
 80071e0:	40000c00 	.word	0x40000c00
 80071e4:	40010400 	.word	0x40010400
 80071e8:	40001800 	.word	0x40001800
 80071ec:	40014000 	.word	0x40014000
 80071f0:	00010007 	.word	0x00010007

080071f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b084      	sub	sp, #16
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	68db      	ldr	r3, [r3, #12]
 8007202:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	691b      	ldr	r3, [r3, #16]
 800720a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800720c:	68bb      	ldr	r3, [r7, #8]
 800720e:	f003 0302 	and.w	r3, r3, #2
 8007212:	2b00      	cmp	r3, #0
 8007214:	d020      	beq.n	8007258 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	f003 0302 	and.w	r3, r3, #2
 800721c:	2b00      	cmp	r3, #0
 800721e:	d01b      	beq.n	8007258 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f06f 0202 	mvn.w	r2, #2
 8007228:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	2201      	movs	r2, #1
 800722e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	699b      	ldr	r3, [r3, #24]
 8007236:	f003 0303 	and.w	r3, r3, #3
 800723a:	2b00      	cmp	r3, #0
 800723c:	d003      	beq.n	8007246 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800723e:	6878      	ldr	r0, [r7, #4]
 8007240:	f000 f8e9 	bl	8007416 <HAL_TIM_IC_CaptureCallback>
 8007244:	e005      	b.n	8007252 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007246:	6878      	ldr	r0, [r7, #4]
 8007248:	f000 f8db 	bl	8007402 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800724c:	6878      	ldr	r0, [r7, #4]
 800724e:	f000 f8ec 	bl	800742a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2200      	movs	r2, #0
 8007256:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007258:	68bb      	ldr	r3, [r7, #8]
 800725a:	f003 0304 	and.w	r3, r3, #4
 800725e:	2b00      	cmp	r3, #0
 8007260:	d020      	beq.n	80072a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	f003 0304 	and.w	r3, r3, #4
 8007268:	2b00      	cmp	r3, #0
 800726a:	d01b      	beq.n	80072a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f06f 0204 	mvn.w	r2, #4
 8007274:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2202      	movs	r2, #2
 800727a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	699b      	ldr	r3, [r3, #24]
 8007282:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007286:	2b00      	cmp	r3, #0
 8007288:	d003      	beq.n	8007292 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	f000 f8c3 	bl	8007416 <HAL_TIM_IC_CaptureCallback>
 8007290:	e005      	b.n	800729e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007292:	6878      	ldr	r0, [r7, #4]
 8007294:	f000 f8b5 	bl	8007402 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007298:	6878      	ldr	r0, [r7, #4]
 800729a:	f000 f8c6 	bl	800742a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2200      	movs	r2, #0
 80072a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80072a4:	68bb      	ldr	r3, [r7, #8]
 80072a6:	f003 0308 	and.w	r3, r3, #8
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d020      	beq.n	80072f0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	f003 0308 	and.w	r3, r3, #8
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d01b      	beq.n	80072f0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f06f 0208 	mvn.w	r2, #8
 80072c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	2204      	movs	r2, #4
 80072c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	69db      	ldr	r3, [r3, #28]
 80072ce:	f003 0303 	and.w	r3, r3, #3
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d003      	beq.n	80072de <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80072d6:	6878      	ldr	r0, [r7, #4]
 80072d8:	f000 f89d 	bl	8007416 <HAL_TIM_IC_CaptureCallback>
 80072dc:	e005      	b.n	80072ea <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f000 f88f 	bl	8007402 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072e4:	6878      	ldr	r0, [r7, #4]
 80072e6:	f000 f8a0 	bl	800742a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2200      	movs	r2, #0
 80072ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80072f0:	68bb      	ldr	r3, [r7, #8]
 80072f2:	f003 0310 	and.w	r3, r3, #16
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d020      	beq.n	800733c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	f003 0310 	and.w	r3, r3, #16
 8007300:	2b00      	cmp	r3, #0
 8007302:	d01b      	beq.n	800733c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f06f 0210 	mvn.w	r2, #16
 800730c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2208      	movs	r2, #8
 8007312:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	69db      	ldr	r3, [r3, #28]
 800731a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800731e:	2b00      	cmp	r3, #0
 8007320:	d003      	beq.n	800732a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007322:	6878      	ldr	r0, [r7, #4]
 8007324:	f000 f877 	bl	8007416 <HAL_TIM_IC_CaptureCallback>
 8007328:	e005      	b.n	8007336 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800732a:	6878      	ldr	r0, [r7, #4]
 800732c:	f000 f869 	bl	8007402 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007330:	6878      	ldr	r0, [r7, #4]
 8007332:	f000 f87a 	bl	800742a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2200      	movs	r2, #0
 800733a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800733c:	68bb      	ldr	r3, [r7, #8]
 800733e:	f003 0301 	and.w	r3, r3, #1
 8007342:	2b00      	cmp	r3, #0
 8007344:	d00c      	beq.n	8007360 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	f003 0301 	and.w	r3, r3, #1
 800734c:	2b00      	cmp	r3, #0
 800734e:	d007      	beq.n	8007360 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f06f 0201 	mvn.w	r2, #1
 8007358:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	f7f9 fb4e 	bl	80009fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007360:	68bb      	ldr	r3, [r7, #8]
 8007362:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007366:	2b00      	cmp	r3, #0
 8007368:	d104      	bne.n	8007374 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800736a:	68bb      	ldr	r3, [r7, #8]
 800736c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007370:	2b00      	cmp	r3, #0
 8007372:	d00c      	beq.n	800738e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800737a:	2b00      	cmp	r3, #0
 800737c:	d007      	beq.n	800738e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8007386:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007388:	6878      	ldr	r0, [r7, #4]
 800738a:	f000 f913 	bl	80075b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800738e:	68bb      	ldr	r3, [r7, #8]
 8007390:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007394:	2b00      	cmp	r3, #0
 8007396:	d00c      	beq.n	80073b2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d007      	beq.n	80073b2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80073aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80073ac:	6878      	ldr	r0, [r7, #4]
 80073ae:	f000 f90b 	bl	80075c8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80073b2:	68bb      	ldr	r3, [r7, #8]
 80073b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d00c      	beq.n	80073d6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d007      	beq.n	80073d6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80073ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80073d0:	6878      	ldr	r0, [r7, #4]
 80073d2:	f000 f834 	bl	800743e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80073d6:	68bb      	ldr	r3, [r7, #8]
 80073d8:	f003 0320 	and.w	r3, r3, #32
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d00c      	beq.n	80073fa <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	f003 0320 	and.w	r3, r3, #32
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d007      	beq.n	80073fa <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f06f 0220 	mvn.w	r2, #32
 80073f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80073f4:	6878      	ldr	r0, [r7, #4]
 80073f6:	f000 f8d3 	bl	80075a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80073fa:	bf00      	nop
 80073fc:	3710      	adds	r7, #16
 80073fe:	46bd      	mov	sp, r7
 8007400:	bd80      	pop	{r7, pc}

08007402 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007402:	b480      	push	{r7}
 8007404:	b083      	sub	sp, #12
 8007406:	af00      	add	r7, sp, #0
 8007408:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800740a:	bf00      	nop
 800740c:	370c      	adds	r7, #12
 800740e:	46bd      	mov	sp, r7
 8007410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007414:	4770      	bx	lr

08007416 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007416:	b480      	push	{r7}
 8007418:	b083      	sub	sp, #12
 800741a:	af00      	add	r7, sp, #0
 800741c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800741e:	bf00      	nop
 8007420:	370c      	adds	r7, #12
 8007422:	46bd      	mov	sp, r7
 8007424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007428:	4770      	bx	lr

0800742a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800742a:	b480      	push	{r7}
 800742c:	b083      	sub	sp, #12
 800742e:	af00      	add	r7, sp, #0
 8007430:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007432:	bf00      	nop
 8007434:	370c      	adds	r7, #12
 8007436:	46bd      	mov	sp, r7
 8007438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743c:	4770      	bx	lr

0800743e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800743e:	b480      	push	{r7}
 8007440:	b083      	sub	sp, #12
 8007442:	af00      	add	r7, sp, #0
 8007444:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007446:	bf00      	nop
 8007448:	370c      	adds	r7, #12
 800744a:	46bd      	mov	sp, r7
 800744c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007450:	4770      	bx	lr
	...

08007454 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007454:	b480      	push	{r7}
 8007456:	b085      	sub	sp, #20
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
 800745c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	4a46      	ldr	r2, [pc, #280]	@ (8007580 <TIM_Base_SetConfig+0x12c>)
 8007468:	4293      	cmp	r3, r2
 800746a:	d013      	beq.n	8007494 <TIM_Base_SetConfig+0x40>
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007472:	d00f      	beq.n	8007494 <TIM_Base_SetConfig+0x40>
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	4a43      	ldr	r2, [pc, #268]	@ (8007584 <TIM_Base_SetConfig+0x130>)
 8007478:	4293      	cmp	r3, r2
 800747a:	d00b      	beq.n	8007494 <TIM_Base_SetConfig+0x40>
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	4a42      	ldr	r2, [pc, #264]	@ (8007588 <TIM_Base_SetConfig+0x134>)
 8007480:	4293      	cmp	r3, r2
 8007482:	d007      	beq.n	8007494 <TIM_Base_SetConfig+0x40>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	4a41      	ldr	r2, [pc, #260]	@ (800758c <TIM_Base_SetConfig+0x138>)
 8007488:	4293      	cmp	r3, r2
 800748a:	d003      	beq.n	8007494 <TIM_Base_SetConfig+0x40>
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	4a40      	ldr	r2, [pc, #256]	@ (8007590 <TIM_Base_SetConfig+0x13c>)
 8007490:	4293      	cmp	r3, r2
 8007492:	d108      	bne.n	80074a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800749a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	685b      	ldr	r3, [r3, #4]
 80074a0:	68fa      	ldr	r2, [r7, #12]
 80074a2:	4313      	orrs	r3, r2
 80074a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	4a35      	ldr	r2, [pc, #212]	@ (8007580 <TIM_Base_SetConfig+0x12c>)
 80074aa:	4293      	cmp	r3, r2
 80074ac:	d01f      	beq.n	80074ee <TIM_Base_SetConfig+0x9a>
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80074b4:	d01b      	beq.n	80074ee <TIM_Base_SetConfig+0x9a>
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	4a32      	ldr	r2, [pc, #200]	@ (8007584 <TIM_Base_SetConfig+0x130>)
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d017      	beq.n	80074ee <TIM_Base_SetConfig+0x9a>
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	4a31      	ldr	r2, [pc, #196]	@ (8007588 <TIM_Base_SetConfig+0x134>)
 80074c2:	4293      	cmp	r3, r2
 80074c4:	d013      	beq.n	80074ee <TIM_Base_SetConfig+0x9a>
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	4a30      	ldr	r2, [pc, #192]	@ (800758c <TIM_Base_SetConfig+0x138>)
 80074ca:	4293      	cmp	r3, r2
 80074cc:	d00f      	beq.n	80074ee <TIM_Base_SetConfig+0x9a>
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	4a2f      	ldr	r2, [pc, #188]	@ (8007590 <TIM_Base_SetConfig+0x13c>)
 80074d2:	4293      	cmp	r3, r2
 80074d4:	d00b      	beq.n	80074ee <TIM_Base_SetConfig+0x9a>
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	4a2e      	ldr	r2, [pc, #184]	@ (8007594 <TIM_Base_SetConfig+0x140>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d007      	beq.n	80074ee <TIM_Base_SetConfig+0x9a>
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	4a2d      	ldr	r2, [pc, #180]	@ (8007598 <TIM_Base_SetConfig+0x144>)
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d003      	beq.n	80074ee <TIM_Base_SetConfig+0x9a>
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	4a2c      	ldr	r2, [pc, #176]	@ (800759c <TIM_Base_SetConfig+0x148>)
 80074ea:	4293      	cmp	r3, r2
 80074ec:	d108      	bne.n	8007500 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80074f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	68db      	ldr	r3, [r3, #12]
 80074fa:	68fa      	ldr	r2, [r7, #12]
 80074fc:	4313      	orrs	r3, r2
 80074fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	695b      	ldr	r3, [r3, #20]
 800750a:	4313      	orrs	r3, r2
 800750c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	68fa      	ldr	r2, [r7, #12]
 8007512:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	689a      	ldr	r2, [r3, #8]
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	681a      	ldr	r2, [r3, #0]
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	4a16      	ldr	r2, [pc, #88]	@ (8007580 <TIM_Base_SetConfig+0x12c>)
 8007528:	4293      	cmp	r3, r2
 800752a:	d00f      	beq.n	800754c <TIM_Base_SetConfig+0xf8>
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	4a18      	ldr	r2, [pc, #96]	@ (8007590 <TIM_Base_SetConfig+0x13c>)
 8007530:	4293      	cmp	r3, r2
 8007532:	d00b      	beq.n	800754c <TIM_Base_SetConfig+0xf8>
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	4a17      	ldr	r2, [pc, #92]	@ (8007594 <TIM_Base_SetConfig+0x140>)
 8007538:	4293      	cmp	r3, r2
 800753a:	d007      	beq.n	800754c <TIM_Base_SetConfig+0xf8>
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	4a16      	ldr	r2, [pc, #88]	@ (8007598 <TIM_Base_SetConfig+0x144>)
 8007540:	4293      	cmp	r3, r2
 8007542:	d003      	beq.n	800754c <TIM_Base_SetConfig+0xf8>
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	4a15      	ldr	r2, [pc, #84]	@ (800759c <TIM_Base_SetConfig+0x148>)
 8007548:	4293      	cmp	r3, r2
 800754a:	d103      	bne.n	8007554 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	691a      	ldr	r2, [r3, #16]
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2201      	movs	r2, #1
 8007558:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	691b      	ldr	r3, [r3, #16]
 800755e:	f003 0301 	and.w	r3, r3, #1
 8007562:	2b01      	cmp	r3, #1
 8007564:	d105      	bne.n	8007572 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	691b      	ldr	r3, [r3, #16]
 800756a:	f023 0201 	bic.w	r2, r3, #1
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	611a      	str	r2, [r3, #16]
  }
}
 8007572:	bf00      	nop
 8007574:	3714      	adds	r7, #20
 8007576:	46bd      	mov	sp, r7
 8007578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757c:	4770      	bx	lr
 800757e:	bf00      	nop
 8007580:	40010000 	.word	0x40010000
 8007584:	40000400 	.word	0x40000400
 8007588:	40000800 	.word	0x40000800
 800758c:	40000c00 	.word	0x40000c00
 8007590:	40010400 	.word	0x40010400
 8007594:	40014000 	.word	0x40014000
 8007598:	40014400 	.word	0x40014400
 800759c:	40014800 	.word	0x40014800

080075a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80075a0:	b480      	push	{r7}
 80075a2:	b083      	sub	sp, #12
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80075a8:	bf00      	nop
 80075aa:	370c      	adds	r7, #12
 80075ac:	46bd      	mov	sp, r7
 80075ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b2:	4770      	bx	lr

080075b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80075b4:	b480      	push	{r7}
 80075b6:	b083      	sub	sp, #12
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80075bc:	bf00      	nop
 80075be:	370c      	adds	r7, #12
 80075c0:	46bd      	mov	sp, r7
 80075c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c6:	4770      	bx	lr

080075c8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80075c8:	b480      	push	{r7}
 80075ca:	b083      	sub	sp, #12
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80075d0:	bf00      	nop
 80075d2:	370c      	adds	r7, #12
 80075d4:	46bd      	mov	sp, r7
 80075d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075da:	4770      	bx	lr

080075dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b082      	sub	sp, #8
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d101      	bne.n	80075ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80075ea:	2301      	movs	r3, #1
 80075ec:	e042      	b.n	8007674 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d106      	bne.n	8007606 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2200      	movs	r2, #0
 80075fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007600:	6878      	ldr	r0, [r7, #4]
 8007602:	f7f9 fbbd 	bl	8000d80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2224      	movs	r2, #36	@ 0x24
 800760a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	681a      	ldr	r2, [r3, #0]
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f022 0201 	bic.w	r2, r2, #1
 800761c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007622:	2b00      	cmp	r3, #0
 8007624:	d002      	beq.n	800762c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007626:	6878      	ldr	r0, [r7, #4]
 8007628:	f000 fe94 	bl	8008354 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800762c:	6878      	ldr	r0, [r7, #4]
 800762e:	f000 f825 	bl	800767c <UART_SetConfig>
 8007632:	4603      	mov	r3, r0
 8007634:	2b01      	cmp	r3, #1
 8007636:	d101      	bne.n	800763c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007638:	2301      	movs	r3, #1
 800763a:	e01b      	b.n	8007674 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	685a      	ldr	r2, [r3, #4]
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800764a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	689a      	ldr	r2, [r3, #8]
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800765a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	681a      	ldr	r2, [r3, #0]
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f042 0201 	orr.w	r2, r2, #1
 800766a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800766c:	6878      	ldr	r0, [r7, #4]
 800766e:	f000 ff13 	bl	8008498 <UART_CheckIdleState>
 8007672:	4603      	mov	r3, r0
}
 8007674:	4618      	mov	r0, r3
 8007676:	3708      	adds	r7, #8
 8007678:	46bd      	mov	sp, r7
 800767a:	bd80      	pop	{r7, pc}

0800767c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800767c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007680:	b092      	sub	sp, #72	@ 0x48
 8007682:	af00      	add	r7, sp, #0
 8007684:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007686:	2300      	movs	r3, #0
 8007688:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800768c:	697b      	ldr	r3, [r7, #20]
 800768e:	689a      	ldr	r2, [r3, #8]
 8007690:	697b      	ldr	r3, [r7, #20]
 8007692:	691b      	ldr	r3, [r3, #16]
 8007694:	431a      	orrs	r2, r3
 8007696:	697b      	ldr	r3, [r7, #20]
 8007698:	695b      	ldr	r3, [r3, #20]
 800769a:	431a      	orrs	r2, r3
 800769c:	697b      	ldr	r3, [r7, #20]
 800769e:	69db      	ldr	r3, [r3, #28]
 80076a0:	4313      	orrs	r3, r2
 80076a2:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80076a4:	697b      	ldr	r3, [r7, #20]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	681a      	ldr	r2, [r3, #0]
 80076aa:	4bbe      	ldr	r3, [pc, #760]	@ (80079a4 <UART_SetConfig+0x328>)
 80076ac:	4013      	ands	r3, r2
 80076ae:	697a      	ldr	r2, [r7, #20]
 80076b0:	6812      	ldr	r2, [r2, #0]
 80076b2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80076b4:	430b      	orrs	r3, r1
 80076b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80076b8:	697b      	ldr	r3, [r7, #20]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	685b      	ldr	r3, [r3, #4]
 80076be:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80076c2:	697b      	ldr	r3, [r7, #20]
 80076c4:	68da      	ldr	r2, [r3, #12]
 80076c6:	697b      	ldr	r3, [r7, #20]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	430a      	orrs	r2, r1
 80076cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80076ce:	697b      	ldr	r3, [r7, #20]
 80076d0:	699b      	ldr	r3, [r3, #24]
 80076d2:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80076d4:	697b      	ldr	r3, [r7, #20]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	4ab3      	ldr	r2, [pc, #716]	@ (80079a8 <UART_SetConfig+0x32c>)
 80076da:	4293      	cmp	r3, r2
 80076dc:	d004      	beq.n	80076e8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80076de:	697b      	ldr	r3, [r7, #20]
 80076e0:	6a1b      	ldr	r3, [r3, #32]
 80076e2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80076e4:	4313      	orrs	r3, r2
 80076e6:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80076e8:	697b      	ldr	r3, [r7, #20]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	689a      	ldr	r2, [r3, #8]
 80076ee:	4baf      	ldr	r3, [pc, #700]	@ (80079ac <UART_SetConfig+0x330>)
 80076f0:	4013      	ands	r3, r2
 80076f2:	697a      	ldr	r2, [r7, #20]
 80076f4:	6812      	ldr	r2, [r2, #0]
 80076f6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80076f8:	430b      	orrs	r3, r1
 80076fa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80076fc:	697b      	ldr	r3, [r7, #20]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007702:	f023 010f 	bic.w	r1, r3, #15
 8007706:	697b      	ldr	r3, [r7, #20]
 8007708:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800770a:	697b      	ldr	r3, [r7, #20]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	430a      	orrs	r2, r1
 8007710:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007712:	697b      	ldr	r3, [r7, #20]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	4aa6      	ldr	r2, [pc, #664]	@ (80079b0 <UART_SetConfig+0x334>)
 8007718:	4293      	cmp	r3, r2
 800771a:	d177      	bne.n	800780c <UART_SetConfig+0x190>
 800771c:	4ba5      	ldr	r3, [pc, #660]	@ (80079b4 <UART_SetConfig+0x338>)
 800771e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007720:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007724:	2b28      	cmp	r3, #40	@ 0x28
 8007726:	d86d      	bhi.n	8007804 <UART_SetConfig+0x188>
 8007728:	a201      	add	r2, pc, #4	@ (adr r2, 8007730 <UART_SetConfig+0xb4>)
 800772a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800772e:	bf00      	nop
 8007730:	080077d5 	.word	0x080077d5
 8007734:	08007805 	.word	0x08007805
 8007738:	08007805 	.word	0x08007805
 800773c:	08007805 	.word	0x08007805
 8007740:	08007805 	.word	0x08007805
 8007744:	08007805 	.word	0x08007805
 8007748:	08007805 	.word	0x08007805
 800774c:	08007805 	.word	0x08007805
 8007750:	080077dd 	.word	0x080077dd
 8007754:	08007805 	.word	0x08007805
 8007758:	08007805 	.word	0x08007805
 800775c:	08007805 	.word	0x08007805
 8007760:	08007805 	.word	0x08007805
 8007764:	08007805 	.word	0x08007805
 8007768:	08007805 	.word	0x08007805
 800776c:	08007805 	.word	0x08007805
 8007770:	080077e5 	.word	0x080077e5
 8007774:	08007805 	.word	0x08007805
 8007778:	08007805 	.word	0x08007805
 800777c:	08007805 	.word	0x08007805
 8007780:	08007805 	.word	0x08007805
 8007784:	08007805 	.word	0x08007805
 8007788:	08007805 	.word	0x08007805
 800778c:	08007805 	.word	0x08007805
 8007790:	080077ed 	.word	0x080077ed
 8007794:	08007805 	.word	0x08007805
 8007798:	08007805 	.word	0x08007805
 800779c:	08007805 	.word	0x08007805
 80077a0:	08007805 	.word	0x08007805
 80077a4:	08007805 	.word	0x08007805
 80077a8:	08007805 	.word	0x08007805
 80077ac:	08007805 	.word	0x08007805
 80077b0:	080077f5 	.word	0x080077f5
 80077b4:	08007805 	.word	0x08007805
 80077b8:	08007805 	.word	0x08007805
 80077bc:	08007805 	.word	0x08007805
 80077c0:	08007805 	.word	0x08007805
 80077c4:	08007805 	.word	0x08007805
 80077c8:	08007805 	.word	0x08007805
 80077cc:	08007805 	.word	0x08007805
 80077d0:	080077fd 	.word	0x080077fd
 80077d4:	2301      	movs	r3, #1
 80077d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077da:	e326      	b.n	8007e2a <UART_SetConfig+0x7ae>
 80077dc:	2304      	movs	r3, #4
 80077de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077e2:	e322      	b.n	8007e2a <UART_SetConfig+0x7ae>
 80077e4:	2308      	movs	r3, #8
 80077e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077ea:	e31e      	b.n	8007e2a <UART_SetConfig+0x7ae>
 80077ec:	2310      	movs	r3, #16
 80077ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077f2:	e31a      	b.n	8007e2a <UART_SetConfig+0x7ae>
 80077f4:	2320      	movs	r3, #32
 80077f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077fa:	e316      	b.n	8007e2a <UART_SetConfig+0x7ae>
 80077fc:	2340      	movs	r3, #64	@ 0x40
 80077fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007802:	e312      	b.n	8007e2a <UART_SetConfig+0x7ae>
 8007804:	2380      	movs	r3, #128	@ 0x80
 8007806:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800780a:	e30e      	b.n	8007e2a <UART_SetConfig+0x7ae>
 800780c:	697b      	ldr	r3, [r7, #20]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	4a69      	ldr	r2, [pc, #420]	@ (80079b8 <UART_SetConfig+0x33c>)
 8007812:	4293      	cmp	r3, r2
 8007814:	d130      	bne.n	8007878 <UART_SetConfig+0x1fc>
 8007816:	4b67      	ldr	r3, [pc, #412]	@ (80079b4 <UART_SetConfig+0x338>)
 8007818:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800781a:	f003 0307 	and.w	r3, r3, #7
 800781e:	2b05      	cmp	r3, #5
 8007820:	d826      	bhi.n	8007870 <UART_SetConfig+0x1f4>
 8007822:	a201      	add	r2, pc, #4	@ (adr r2, 8007828 <UART_SetConfig+0x1ac>)
 8007824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007828:	08007841 	.word	0x08007841
 800782c:	08007849 	.word	0x08007849
 8007830:	08007851 	.word	0x08007851
 8007834:	08007859 	.word	0x08007859
 8007838:	08007861 	.word	0x08007861
 800783c:	08007869 	.word	0x08007869
 8007840:	2300      	movs	r3, #0
 8007842:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007846:	e2f0      	b.n	8007e2a <UART_SetConfig+0x7ae>
 8007848:	2304      	movs	r3, #4
 800784a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800784e:	e2ec      	b.n	8007e2a <UART_SetConfig+0x7ae>
 8007850:	2308      	movs	r3, #8
 8007852:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007856:	e2e8      	b.n	8007e2a <UART_SetConfig+0x7ae>
 8007858:	2310      	movs	r3, #16
 800785a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800785e:	e2e4      	b.n	8007e2a <UART_SetConfig+0x7ae>
 8007860:	2320      	movs	r3, #32
 8007862:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007866:	e2e0      	b.n	8007e2a <UART_SetConfig+0x7ae>
 8007868:	2340      	movs	r3, #64	@ 0x40
 800786a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800786e:	e2dc      	b.n	8007e2a <UART_SetConfig+0x7ae>
 8007870:	2380      	movs	r3, #128	@ 0x80
 8007872:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007876:	e2d8      	b.n	8007e2a <UART_SetConfig+0x7ae>
 8007878:	697b      	ldr	r3, [r7, #20]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	4a4f      	ldr	r2, [pc, #316]	@ (80079bc <UART_SetConfig+0x340>)
 800787e:	4293      	cmp	r3, r2
 8007880:	d130      	bne.n	80078e4 <UART_SetConfig+0x268>
 8007882:	4b4c      	ldr	r3, [pc, #304]	@ (80079b4 <UART_SetConfig+0x338>)
 8007884:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007886:	f003 0307 	and.w	r3, r3, #7
 800788a:	2b05      	cmp	r3, #5
 800788c:	d826      	bhi.n	80078dc <UART_SetConfig+0x260>
 800788e:	a201      	add	r2, pc, #4	@ (adr r2, 8007894 <UART_SetConfig+0x218>)
 8007890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007894:	080078ad 	.word	0x080078ad
 8007898:	080078b5 	.word	0x080078b5
 800789c:	080078bd 	.word	0x080078bd
 80078a0:	080078c5 	.word	0x080078c5
 80078a4:	080078cd 	.word	0x080078cd
 80078a8:	080078d5 	.word	0x080078d5
 80078ac:	2300      	movs	r3, #0
 80078ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078b2:	e2ba      	b.n	8007e2a <UART_SetConfig+0x7ae>
 80078b4:	2304      	movs	r3, #4
 80078b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078ba:	e2b6      	b.n	8007e2a <UART_SetConfig+0x7ae>
 80078bc:	2308      	movs	r3, #8
 80078be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078c2:	e2b2      	b.n	8007e2a <UART_SetConfig+0x7ae>
 80078c4:	2310      	movs	r3, #16
 80078c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078ca:	e2ae      	b.n	8007e2a <UART_SetConfig+0x7ae>
 80078cc:	2320      	movs	r3, #32
 80078ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078d2:	e2aa      	b.n	8007e2a <UART_SetConfig+0x7ae>
 80078d4:	2340      	movs	r3, #64	@ 0x40
 80078d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078da:	e2a6      	b.n	8007e2a <UART_SetConfig+0x7ae>
 80078dc:	2380      	movs	r3, #128	@ 0x80
 80078de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078e2:	e2a2      	b.n	8007e2a <UART_SetConfig+0x7ae>
 80078e4:	697b      	ldr	r3, [r7, #20]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	4a35      	ldr	r2, [pc, #212]	@ (80079c0 <UART_SetConfig+0x344>)
 80078ea:	4293      	cmp	r3, r2
 80078ec:	d130      	bne.n	8007950 <UART_SetConfig+0x2d4>
 80078ee:	4b31      	ldr	r3, [pc, #196]	@ (80079b4 <UART_SetConfig+0x338>)
 80078f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078f2:	f003 0307 	and.w	r3, r3, #7
 80078f6:	2b05      	cmp	r3, #5
 80078f8:	d826      	bhi.n	8007948 <UART_SetConfig+0x2cc>
 80078fa:	a201      	add	r2, pc, #4	@ (adr r2, 8007900 <UART_SetConfig+0x284>)
 80078fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007900:	08007919 	.word	0x08007919
 8007904:	08007921 	.word	0x08007921
 8007908:	08007929 	.word	0x08007929
 800790c:	08007931 	.word	0x08007931
 8007910:	08007939 	.word	0x08007939
 8007914:	08007941 	.word	0x08007941
 8007918:	2300      	movs	r3, #0
 800791a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800791e:	e284      	b.n	8007e2a <UART_SetConfig+0x7ae>
 8007920:	2304      	movs	r3, #4
 8007922:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007926:	e280      	b.n	8007e2a <UART_SetConfig+0x7ae>
 8007928:	2308      	movs	r3, #8
 800792a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800792e:	e27c      	b.n	8007e2a <UART_SetConfig+0x7ae>
 8007930:	2310      	movs	r3, #16
 8007932:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007936:	e278      	b.n	8007e2a <UART_SetConfig+0x7ae>
 8007938:	2320      	movs	r3, #32
 800793a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800793e:	e274      	b.n	8007e2a <UART_SetConfig+0x7ae>
 8007940:	2340      	movs	r3, #64	@ 0x40
 8007942:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007946:	e270      	b.n	8007e2a <UART_SetConfig+0x7ae>
 8007948:	2380      	movs	r3, #128	@ 0x80
 800794a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800794e:	e26c      	b.n	8007e2a <UART_SetConfig+0x7ae>
 8007950:	697b      	ldr	r3, [r7, #20]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	4a1b      	ldr	r2, [pc, #108]	@ (80079c4 <UART_SetConfig+0x348>)
 8007956:	4293      	cmp	r3, r2
 8007958:	d142      	bne.n	80079e0 <UART_SetConfig+0x364>
 800795a:	4b16      	ldr	r3, [pc, #88]	@ (80079b4 <UART_SetConfig+0x338>)
 800795c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800795e:	f003 0307 	and.w	r3, r3, #7
 8007962:	2b05      	cmp	r3, #5
 8007964:	d838      	bhi.n	80079d8 <UART_SetConfig+0x35c>
 8007966:	a201      	add	r2, pc, #4	@ (adr r2, 800796c <UART_SetConfig+0x2f0>)
 8007968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800796c:	08007985 	.word	0x08007985
 8007970:	0800798d 	.word	0x0800798d
 8007974:	08007995 	.word	0x08007995
 8007978:	0800799d 	.word	0x0800799d
 800797c:	080079c9 	.word	0x080079c9
 8007980:	080079d1 	.word	0x080079d1
 8007984:	2300      	movs	r3, #0
 8007986:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800798a:	e24e      	b.n	8007e2a <UART_SetConfig+0x7ae>
 800798c:	2304      	movs	r3, #4
 800798e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007992:	e24a      	b.n	8007e2a <UART_SetConfig+0x7ae>
 8007994:	2308      	movs	r3, #8
 8007996:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800799a:	e246      	b.n	8007e2a <UART_SetConfig+0x7ae>
 800799c:	2310      	movs	r3, #16
 800799e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079a2:	e242      	b.n	8007e2a <UART_SetConfig+0x7ae>
 80079a4:	cfff69f3 	.word	0xcfff69f3
 80079a8:	58000c00 	.word	0x58000c00
 80079ac:	11fff4ff 	.word	0x11fff4ff
 80079b0:	40011000 	.word	0x40011000
 80079b4:	58024400 	.word	0x58024400
 80079b8:	40004400 	.word	0x40004400
 80079bc:	40004800 	.word	0x40004800
 80079c0:	40004c00 	.word	0x40004c00
 80079c4:	40005000 	.word	0x40005000
 80079c8:	2320      	movs	r3, #32
 80079ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079ce:	e22c      	b.n	8007e2a <UART_SetConfig+0x7ae>
 80079d0:	2340      	movs	r3, #64	@ 0x40
 80079d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079d6:	e228      	b.n	8007e2a <UART_SetConfig+0x7ae>
 80079d8:	2380      	movs	r3, #128	@ 0x80
 80079da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079de:	e224      	b.n	8007e2a <UART_SetConfig+0x7ae>
 80079e0:	697b      	ldr	r3, [r7, #20]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	4ab1      	ldr	r2, [pc, #708]	@ (8007cac <UART_SetConfig+0x630>)
 80079e6:	4293      	cmp	r3, r2
 80079e8:	d176      	bne.n	8007ad8 <UART_SetConfig+0x45c>
 80079ea:	4bb1      	ldr	r3, [pc, #708]	@ (8007cb0 <UART_SetConfig+0x634>)
 80079ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80079ee:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80079f2:	2b28      	cmp	r3, #40	@ 0x28
 80079f4:	d86c      	bhi.n	8007ad0 <UART_SetConfig+0x454>
 80079f6:	a201      	add	r2, pc, #4	@ (adr r2, 80079fc <UART_SetConfig+0x380>)
 80079f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079fc:	08007aa1 	.word	0x08007aa1
 8007a00:	08007ad1 	.word	0x08007ad1
 8007a04:	08007ad1 	.word	0x08007ad1
 8007a08:	08007ad1 	.word	0x08007ad1
 8007a0c:	08007ad1 	.word	0x08007ad1
 8007a10:	08007ad1 	.word	0x08007ad1
 8007a14:	08007ad1 	.word	0x08007ad1
 8007a18:	08007ad1 	.word	0x08007ad1
 8007a1c:	08007aa9 	.word	0x08007aa9
 8007a20:	08007ad1 	.word	0x08007ad1
 8007a24:	08007ad1 	.word	0x08007ad1
 8007a28:	08007ad1 	.word	0x08007ad1
 8007a2c:	08007ad1 	.word	0x08007ad1
 8007a30:	08007ad1 	.word	0x08007ad1
 8007a34:	08007ad1 	.word	0x08007ad1
 8007a38:	08007ad1 	.word	0x08007ad1
 8007a3c:	08007ab1 	.word	0x08007ab1
 8007a40:	08007ad1 	.word	0x08007ad1
 8007a44:	08007ad1 	.word	0x08007ad1
 8007a48:	08007ad1 	.word	0x08007ad1
 8007a4c:	08007ad1 	.word	0x08007ad1
 8007a50:	08007ad1 	.word	0x08007ad1
 8007a54:	08007ad1 	.word	0x08007ad1
 8007a58:	08007ad1 	.word	0x08007ad1
 8007a5c:	08007ab9 	.word	0x08007ab9
 8007a60:	08007ad1 	.word	0x08007ad1
 8007a64:	08007ad1 	.word	0x08007ad1
 8007a68:	08007ad1 	.word	0x08007ad1
 8007a6c:	08007ad1 	.word	0x08007ad1
 8007a70:	08007ad1 	.word	0x08007ad1
 8007a74:	08007ad1 	.word	0x08007ad1
 8007a78:	08007ad1 	.word	0x08007ad1
 8007a7c:	08007ac1 	.word	0x08007ac1
 8007a80:	08007ad1 	.word	0x08007ad1
 8007a84:	08007ad1 	.word	0x08007ad1
 8007a88:	08007ad1 	.word	0x08007ad1
 8007a8c:	08007ad1 	.word	0x08007ad1
 8007a90:	08007ad1 	.word	0x08007ad1
 8007a94:	08007ad1 	.word	0x08007ad1
 8007a98:	08007ad1 	.word	0x08007ad1
 8007a9c:	08007ac9 	.word	0x08007ac9
 8007aa0:	2301      	movs	r3, #1
 8007aa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007aa6:	e1c0      	b.n	8007e2a <UART_SetConfig+0x7ae>
 8007aa8:	2304      	movs	r3, #4
 8007aaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007aae:	e1bc      	b.n	8007e2a <UART_SetConfig+0x7ae>
 8007ab0:	2308      	movs	r3, #8
 8007ab2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ab6:	e1b8      	b.n	8007e2a <UART_SetConfig+0x7ae>
 8007ab8:	2310      	movs	r3, #16
 8007aba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007abe:	e1b4      	b.n	8007e2a <UART_SetConfig+0x7ae>
 8007ac0:	2320      	movs	r3, #32
 8007ac2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ac6:	e1b0      	b.n	8007e2a <UART_SetConfig+0x7ae>
 8007ac8:	2340      	movs	r3, #64	@ 0x40
 8007aca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ace:	e1ac      	b.n	8007e2a <UART_SetConfig+0x7ae>
 8007ad0:	2380      	movs	r3, #128	@ 0x80
 8007ad2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ad6:	e1a8      	b.n	8007e2a <UART_SetConfig+0x7ae>
 8007ad8:	697b      	ldr	r3, [r7, #20]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	4a75      	ldr	r2, [pc, #468]	@ (8007cb4 <UART_SetConfig+0x638>)
 8007ade:	4293      	cmp	r3, r2
 8007ae0:	d130      	bne.n	8007b44 <UART_SetConfig+0x4c8>
 8007ae2:	4b73      	ldr	r3, [pc, #460]	@ (8007cb0 <UART_SetConfig+0x634>)
 8007ae4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ae6:	f003 0307 	and.w	r3, r3, #7
 8007aea:	2b05      	cmp	r3, #5
 8007aec:	d826      	bhi.n	8007b3c <UART_SetConfig+0x4c0>
 8007aee:	a201      	add	r2, pc, #4	@ (adr r2, 8007af4 <UART_SetConfig+0x478>)
 8007af0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007af4:	08007b0d 	.word	0x08007b0d
 8007af8:	08007b15 	.word	0x08007b15
 8007afc:	08007b1d 	.word	0x08007b1d
 8007b00:	08007b25 	.word	0x08007b25
 8007b04:	08007b2d 	.word	0x08007b2d
 8007b08:	08007b35 	.word	0x08007b35
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b12:	e18a      	b.n	8007e2a <UART_SetConfig+0x7ae>
 8007b14:	2304      	movs	r3, #4
 8007b16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b1a:	e186      	b.n	8007e2a <UART_SetConfig+0x7ae>
 8007b1c:	2308      	movs	r3, #8
 8007b1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b22:	e182      	b.n	8007e2a <UART_SetConfig+0x7ae>
 8007b24:	2310      	movs	r3, #16
 8007b26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b2a:	e17e      	b.n	8007e2a <UART_SetConfig+0x7ae>
 8007b2c:	2320      	movs	r3, #32
 8007b2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b32:	e17a      	b.n	8007e2a <UART_SetConfig+0x7ae>
 8007b34:	2340      	movs	r3, #64	@ 0x40
 8007b36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b3a:	e176      	b.n	8007e2a <UART_SetConfig+0x7ae>
 8007b3c:	2380      	movs	r3, #128	@ 0x80
 8007b3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b42:	e172      	b.n	8007e2a <UART_SetConfig+0x7ae>
 8007b44:	697b      	ldr	r3, [r7, #20]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	4a5b      	ldr	r2, [pc, #364]	@ (8007cb8 <UART_SetConfig+0x63c>)
 8007b4a:	4293      	cmp	r3, r2
 8007b4c:	d130      	bne.n	8007bb0 <UART_SetConfig+0x534>
 8007b4e:	4b58      	ldr	r3, [pc, #352]	@ (8007cb0 <UART_SetConfig+0x634>)
 8007b50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b52:	f003 0307 	and.w	r3, r3, #7
 8007b56:	2b05      	cmp	r3, #5
 8007b58:	d826      	bhi.n	8007ba8 <UART_SetConfig+0x52c>
 8007b5a:	a201      	add	r2, pc, #4	@ (adr r2, 8007b60 <UART_SetConfig+0x4e4>)
 8007b5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b60:	08007b79 	.word	0x08007b79
 8007b64:	08007b81 	.word	0x08007b81
 8007b68:	08007b89 	.word	0x08007b89
 8007b6c:	08007b91 	.word	0x08007b91
 8007b70:	08007b99 	.word	0x08007b99
 8007b74:	08007ba1 	.word	0x08007ba1
 8007b78:	2300      	movs	r3, #0
 8007b7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b7e:	e154      	b.n	8007e2a <UART_SetConfig+0x7ae>
 8007b80:	2304      	movs	r3, #4
 8007b82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b86:	e150      	b.n	8007e2a <UART_SetConfig+0x7ae>
 8007b88:	2308      	movs	r3, #8
 8007b8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b8e:	e14c      	b.n	8007e2a <UART_SetConfig+0x7ae>
 8007b90:	2310      	movs	r3, #16
 8007b92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b96:	e148      	b.n	8007e2a <UART_SetConfig+0x7ae>
 8007b98:	2320      	movs	r3, #32
 8007b9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b9e:	e144      	b.n	8007e2a <UART_SetConfig+0x7ae>
 8007ba0:	2340      	movs	r3, #64	@ 0x40
 8007ba2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ba6:	e140      	b.n	8007e2a <UART_SetConfig+0x7ae>
 8007ba8:	2380      	movs	r3, #128	@ 0x80
 8007baa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bae:	e13c      	b.n	8007e2a <UART_SetConfig+0x7ae>
 8007bb0:	697b      	ldr	r3, [r7, #20]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	4a41      	ldr	r2, [pc, #260]	@ (8007cbc <UART_SetConfig+0x640>)
 8007bb6:	4293      	cmp	r3, r2
 8007bb8:	f040 8082 	bne.w	8007cc0 <UART_SetConfig+0x644>
 8007bbc:	4b3c      	ldr	r3, [pc, #240]	@ (8007cb0 <UART_SetConfig+0x634>)
 8007bbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007bc0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007bc4:	2b28      	cmp	r3, #40	@ 0x28
 8007bc6:	d86d      	bhi.n	8007ca4 <UART_SetConfig+0x628>
 8007bc8:	a201      	add	r2, pc, #4	@ (adr r2, 8007bd0 <UART_SetConfig+0x554>)
 8007bca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bce:	bf00      	nop
 8007bd0:	08007c75 	.word	0x08007c75
 8007bd4:	08007ca5 	.word	0x08007ca5
 8007bd8:	08007ca5 	.word	0x08007ca5
 8007bdc:	08007ca5 	.word	0x08007ca5
 8007be0:	08007ca5 	.word	0x08007ca5
 8007be4:	08007ca5 	.word	0x08007ca5
 8007be8:	08007ca5 	.word	0x08007ca5
 8007bec:	08007ca5 	.word	0x08007ca5
 8007bf0:	08007c7d 	.word	0x08007c7d
 8007bf4:	08007ca5 	.word	0x08007ca5
 8007bf8:	08007ca5 	.word	0x08007ca5
 8007bfc:	08007ca5 	.word	0x08007ca5
 8007c00:	08007ca5 	.word	0x08007ca5
 8007c04:	08007ca5 	.word	0x08007ca5
 8007c08:	08007ca5 	.word	0x08007ca5
 8007c0c:	08007ca5 	.word	0x08007ca5
 8007c10:	08007c85 	.word	0x08007c85
 8007c14:	08007ca5 	.word	0x08007ca5
 8007c18:	08007ca5 	.word	0x08007ca5
 8007c1c:	08007ca5 	.word	0x08007ca5
 8007c20:	08007ca5 	.word	0x08007ca5
 8007c24:	08007ca5 	.word	0x08007ca5
 8007c28:	08007ca5 	.word	0x08007ca5
 8007c2c:	08007ca5 	.word	0x08007ca5
 8007c30:	08007c8d 	.word	0x08007c8d
 8007c34:	08007ca5 	.word	0x08007ca5
 8007c38:	08007ca5 	.word	0x08007ca5
 8007c3c:	08007ca5 	.word	0x08007ca5
 8007c40:	08007ca5 	.word	0x08007ca5
 8007c44:	08007ca5 	.word	0x08007ca5
 8007c48:	08007ca5 	.word	0x08007ca5
 8007c4c:	08007ca5 	.word	0x08007ca5
 8007c50:	08007c95 	.word	0x08007c95
 8007c54:	08007ca5 	.word	0x08007ca5
 8007c58:	08007ca5 	.word	0x08007ca5
 8007c5c:	08007ca5 	.word	0x08007ca5
 8007c60:	08007ca5 	.word	0x08007ca5
 8007c64:	08007ca5 	.word	0x08007ca5
 8007c68:	08007ca5 	.word	0x08007ca5
 8007c6c:	08007ca5 	.word	0x08007ca5
 8007c70:	08007c9d 	.word	0x08007c9d
 8007c74:	2301      	movs	r3, #1
 8007c76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c7a:	e0d6      	b.n	8007e2a <UART_SetConfig+0x7ae>
 8007c7c:	2304      	movs	r3, #4
 8007c7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c82:	e0d2      	b.n	8007e2a <UART_SetConfig+0x7ae>
 8007c84:	2308      	movs	r3, #8
 8007c86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c8a:	e0ce      	b.n	8007e2a <UART_SetConfig+0x7ae>
 8007c8c:	2310      	movs	r3, #16
 8007c8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c92:	e0ca      	b.n	8007e2a <UART_SetConfig+0x7ae>
 8007c94:	2320      	movs	r3, #32
 8007c96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c9a:	e0c6      	b.n	8007e2a <UART_SetConfig+0x7ae>
 8007c9c:	2340      	movs	r3, #64	@ 0x40
 8007c9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ca2:	e0c2      	b.n	8007e2a <UART_SetConfig+0x7ae>
 8007ca4:	2380      	movs	r3, #128	@ 0x80
 8007ca6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007caa:	e0be      	b.n	8007e2a <UART_SetConfig+0x7ae>
 8007cac:	40011400 	.word	0x40011400
 8007cb0:	58024400 	.word	0x58024400
 8007cb4:	40007800 	.word	0x40007800
 8007cb8:	40007c00 	.word	0x40007c00
 8007cbc:	40011800 	.word	0x40011800
 8007cc0:	697b      	ldr	r3, [r7, #20]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	4aad      	ldr	r2, [pc, #692]	@ (8007f7c <UART_SetConfig+0x900>)
 8007cc6:	4293      	cmp	r3, r2
 8007cc8:	d176      	bne.n	8007db8 <UART_SetConfig+0x73c>
 8007cca:	4bad      	ldr	r3, [pc, #692]	@ (8007f80 <UART_SetConfig+0x904>)
 8007ccc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007cce:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007cd2:	2b28      	cmp	r3, #40	@ 0x28
 8007cd4:	d86c      	bhi.n	8007db0 <UART_SetConfig+0x734>
 8007cd6:	a201      	add	r2, pc, #4	@ (adr r2, 8007cdc <UART_SetConfig+0x660>)
 8007cd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cdc:	08007d81 	.word	0x08007d81
 8007ce0:	08007db1 	.word	0x08007db1
 8007ce4:	08007db1 	.word	0x08007db1
 8007ce8:	08007db1 	.word	0x08007db1
 8007cec:	08007db1 	.word	0x08007db1
 8007cf0:	08007db1 	.word	0x08007db1
 8007cf4:	08007db1 	.word	0x08007db1
 8007cf8:	08007db1 	.word	0x08007db1
 8007cfc:	08007d89 	.word	0x08007d89
 8007d00:	08007db1 	.word	0x08007db1
 8007d04:	08007db1 	.word	0x08007db1
 8007d08:	08007db1 	.word	0x08007db1
 8007d0c:	08007db1 	.word	0x08007db1
 8007d10:	08007db1 	.word	0x08007db1
 8007d14:	08007db1 	.word	0x08007db1
 8007d18:	08007db1 	.word	0x08007db1
 8007d1c:	08007d91 	.word	0x08007d91
 8007d20:	08007db1 	.word	0x08007db1
 8007d24:	08007db1 	.word	0x08007db1
 8007d28:	08007db1 	.word	0x08007db1
 8007d2c:	08007db1 	.word	0x08007db1
 8007d30:	08007db1 	.word	0x08007db1
 8007d34:	08007db1 	.word	0x08007db1
 8007d38:	08007db1 	.word	0x08007db1
 8007d3c:	08007d99 	.word	0x08007d99
 8007d40:	08007db1 	.word	0x08007db1
 8007d44:	08007db1 	.word	0x08007db1
 8007d48:	08007db1 	.word	0x08007db1
 8007d4c:	08007db1 	.word	0x08007db1
 8007d50:	08007db1 	.word	0x08007db1
 8007d54:	08007db1 	.word	0x08007db1
 8007d58:	08007db1 	.word	0x08007db1
 8007d5c:	08007da1 	.word	0x08007da1
 8007d60:	08007db1 	.word	0x08007db1
 8007d64:	08007db1 	.word	0x08007db1
 8007d68:	08007db1 	.word	0x08007db1
 8007d6c:	08007db1 	.word	0x08007db1
 8007d70:	08007db1 	.word	0x08007db1
 8007d74:	08007db1 	.word	0x08007db1
 8007d78:	08007db1 	.word	0x08007db1
 8007d7c:	08007da9 	.word	0x08007da9
 8007d80:	2301      	movs	r3, #1
 8007d82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d86:	e050      	b.n	8007e2a <UART_SetConfig+0x7ae>
 8007d88:	2304      	movs	r3, #4
 8007d8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d8e:	e04c      	b.n	8007e2a <UART_SetConfig+0x7ae>
 8007d90:	2308      	movs	r3, #8
 8007d92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d96:	e048      	b.n	8007e2a <UART_SetConfig+0x7ae>
 8007d98:	2310      	movs	r3, #16
 8007d9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d9e:	e044      	b.n	8007e2a <UART_SetConfig+0x7ae>
 8007da0:	2320      	movs	r3, #32
 8007da2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007da6:	e040      	b.n	8007e2a <UART_SetConfig+0x7ae>
 8007da8:	2340      	movs	r3, #64	@ 0x40
 8007daa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007dae:	e03c      	b.n	8007e2a <UART_SetConfig+0x7ae>
 8007db0:	2380      	movs	r3, #128	@ 0x80
 8007db2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007db6:	e038      	b.n	8007e2a <UART_SetConfig+0x7ae>
 8007db8:	697b      	ldr	r3, [r7, #20]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	4a71      	ldr	r2, [pc, #452]	@ (8007f84 <UART_SetConfig+0x908>)
 8007dbe:	4293      	cmp	r3, r2
 8007dc0:	d130      	bne.n	8007e24 <UART_SetConfig+0x7a8>
 8007dc2:	4b6f      	ldr	r3, [pc, #444]	@ (8007f80 <UART_SetConfig+0x904>)
 8007dc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007dc6:	f003 0307 	and.w	r3, r3, #7
 8007dca:	2b05      	cmp	r3, #5
 8007dcc:	d826      	bhi.n	8007e1c <UART_SetConfig+0x7a0>
 8007dce:	a201      	add	r2, pc, #4	@ (adr r2, 8007dd4 <UART_SetConfig+0x758>)
 8007dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dd4:	08007ded 	.word	0x08007ded
 8007dd8:	08007df5 	.word	0x08007df5
 8007ddc:	08007dfd 	.word	0x08007dfd
 8007de0:	08007e05 	.word	0x08007e05
 8007de4:	08007e0d 	.word	0x08007e0d
 8007de8:	08007e15 	.word	0x08007e15
 8007dec:	2302      	movs	r3, #2
 8007dee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007df2:	e01a      	b.n	8007e2a <UART_SetConfig+0x7ae>
 8007df4:	2304      	movs	r3, #4
 8007df6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007dfa:	e016      	b.n	8007e2a <UART_SetConfig+0x7ae>
 8007dfc:	2308      	movs	r3, #8
 8007dfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e02:	e012      	b.n	8007e2a <UART_SetConfig+0x7ae>
 8007e04:	2310      	movs	r3, #16
 8007e06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e0a:	e00e      	b.n	8007e2a <UART_SetConfig+0x7ae>
 8007e0c:	2320      	movs	r3, #32
 8007e0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e12:	e00a      	b.n	8007e2a <UART_SetConfig+0x7ae>
 8007e14:	2340      	movs	r3, #64	@ 0x40
 8007e16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e1a:	e006      	b.n	8007e2a <UART_SetConfig+0x7ae>
 8007e1c:	2380      	movs	r3, #128	@ 0x80
 8007e1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e22:	e002      	b.n	8007e2a <UART_SetConfig+0x7ae>
 8007e24:	2380      	movs	r3, #128	@ 0x80
 8007e26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007e2a:	697b      	ldr	r3, [r7, #20]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	4a55      	ldr	r2, [pc, #340]	@ (8007f84 <UART_SetConfig+0x908>)
 8007e30:	4293      	cmp	r3, r2
 8007e32:	f040 80f8 	bne.w	8008026 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007e36:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007e3a:	2b20      	cmp	r3, #32
 8007e3c:	dc46      	bgt.n	8007ecc <UART_SetConfig+0x850>
 8007e3e:	2b02      	cmp	r3, #2
 8007e40:	db75      	blt.n	8007f2e <UART_SetConfig+0x8b2>
 8007e42:	3b02      	subs	r3, #2
 8007e44:	2b1e      	cmp	r3, #30
 8007e46:	d872      	bhi.n	8007f2e <UART_SetConfig+0x8b2>
 8007e48:	a201      	add	r2, pc, #4	@ (adr r2, 8007e50 <UART_SetConfig+0x7d4>)
 8007e4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e4e:	bf00      	nop
 8007e50:	08007ed3 	.word	0x08007ed3
 8007e54:	08007f2f 	.word	0x08007f2f
 8007e58:	08007edb 	.word	0x08007edb
 8007e5c:	08007f2f 	.word	0x08007f2f
 8007e60:	08007f2f 	.word	0x08007f2f
 8007e64:	08007f2f 	.word	0x08007f2f
 8007e68:	08007eeb 	.word	0x08007eeb
 8007e6c:	08007f2f 	.word	0x08007f2f
 8007e70:	08007f2f 	.word	0x08007f2f
 8007e74:	08007f2f 	.word	0x08007f2f
 8007e78:	08007f2f 	.word	0x08007f2f
 8007e7c:	08007f2f 	.word	0x08007f2f
 8007e80:	08007f2f 	.word	0x08007f2f
 8007e84:	08007f2f 	.word	0x08007f2f
 8007e88:	08007efb 	.word	0x08007efb
 8007e8c:	08007f2f 	.word	0x08007f2f
 8007e90:	08007f2f 	.word	0x08007f2f
 8007e94:	08007f2f 	.word	0x08007f2f
 8007e98:	08007f2f 	.word	0x08007f2f
 8007e9c:	08007f2f 	.word	0x08007f2f
 8007ea0:	08007f2f 	.word	0x08007f2f
 8007ea4:	08007f2f 	.word	0x08007f2f
 8007ea8:	08007f2f 	.word	0x08007f2f
 8007eac:	08007f2f 	.word	0x08007f2f
 8007eb0:	08007f2f 	.word	0x08007f2f
 8007eb4:	08007f2f 	.word	0x08007f2f
 8007eb8:	08007f2f 	.word	0x08007f2f
 8007ebc:	08007f2f 	.word	0x08007f2f
 8007ec0:	08007f2f 	.word	0x08007f2f
 8007ec4:	08007f2f 	.word	0x08007f2f
 8007ec8:	08007f21 	.word	0x08007f21
 8007ecc:	2b40      	cmp	r3, #64	@ 0x40
 8007ece:	d02a      	beq.n	8007f26 <UART_SetConfig+0x8aa>
 8007ed0:	e02d      	b.n	8007f2e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007ed2:	f7fe fc93 	bl	80067fc <HAL_RCCEx_GetD3PCLK1Freq>
 8007ed6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007ed8:	e02f      	b.n	8007f3a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007eda:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007ede:	4618      	mov	r0, r3
 8007ee0:	f7fe fca2 	bl	8006828 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007ee4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ee6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ee8:	e027      	b.n	8007f3a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007eea:	f107 0318 	add.w	r3, r7, #24
 8007eee:	4618      	mov	r0, r3
 8007ef0:	f7fe fdee 	bl	8006ad0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007ef4:	69fb      	ldr	r3, [r7, #28]
 8007ef6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ef8:	e01f      	b.n	8007f3a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007efa:	4b21      	ldr	r3, [pc, #132]	@ (8007f80 <UART_SetConfig+0x904>)
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	f003 0320 	and.w	r3, r3, #32
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d009      	beq.n	8007f1a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007f06:	4b1e      	ldr	r3, [pc, #120]	@ (8007f80 <UART_SetConfig+0x904>)
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	08db      	lsrs	r3, r3, #3
 8007f0c:	f003 0303 	and.w	r3, r3, #3
 8007f10:	4a1d      	ldr	r2, [pc, #116]	@ (8007f88 <UART_SetConfig+0x90c>)
 8007f12:	fa22 f303 	lsr.w	r3, r2, r3
 8007f16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007f18:	e00f      	b.n	8007f3a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8007f1a:	4b1b      	ldr	r3, [pc, #108]	@ (8007f88 <UART_SetConfig+0x90c>)
 8007f1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f1e:	e00c      	b.n	8007f3a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007f20:	4b1a      	ldr	r3, [pc, #104]	@ (8007f8c <UART_SetConfig+0x910>)
 8007f22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f24:	e009      	b.n	8007f3a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007f26:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007f2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f2c:	e005      	b.n	8007f3a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8007f2e:	2300      	movs	r3, #0
 8007f30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007f32:	2301      	movs	r3, #1
 8007f34:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007f38:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007f3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	f000 81ee 	beq.w	800831e <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007f42:	697b      	ldr	r3, [r7, #20]
 8007f44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f46:	4a12      	ldr	r2, [pc, #72]	@ (8007f90 <UART_SetConfig+0x914>)
 8007f48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007f4c:	461a      	mov	r2, r3
 8007f4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f50:	fbb3 f3f2 	udiv	r3, r3, r2
 8007f54:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007f56:	697b      	ldr	r3, [r7, #20]
 8007f58:	685a      	ldr	r2, [r3, #4]
 8007f5a:	4613      	mov	r3, r2
 8007f5c:	005b      	lsls	r3, r3, #1
 8007f5e:	4413      	add	r3, r2
 8007f60:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007f62:	429a      	cmp	r2, r3
 8007f64:	d305      	bcc.n	8007f72 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007f66:	697b      	ldr	r3, [r7, #20]
 8007f68:	685b      	ldr	r3, [r3, #4]
 8007f6a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007f6c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007f6e:	429a      	cmp	r2, r3
 8007f70:	d910      	bls.n	8007f94 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8007f72:	2301      	movs	r3, #1
 8007f74:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007f78:	e1d1      	b.n	800831e <UART_SetConfig+0xca2>
 8007f7a:	bf00      	nop
 8007f7c:	40011c00 	.word	0x40011c00
 8007f80:	58024400 	.word	0x58024400
 8007f84:	58000c00 	.word	0x58000c00
 8007f88:	03d09000 	.word	0x03d09000
 8007f8c:	003d0900 	.word	0x003d0900
 8007f90:	08008a24 	.word	0x08008a24
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007f94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f96:	2200      	movs	r2, #0
 8007f98:	60bb      	str	r3, [r7, #8]
 8007f9a:	60fa      	str	r2, [r7, #12]
 8007f9c:	697b      	ldr	r3, [r7, #20]
 8007f9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fa0:	4ac0      	ldr	r2, [pc, #768]	@ (80082a4 <UART_SetConfig+0xc28>)
 8007fa2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007fa6:	b29b      	uxth	r3, r3
 8007fa8:	2200      	movs	r2, #0
 8007faa:	603b      	str	r3, [r7, #0]
 8007fac:	607a      	str	r2, [r7, #4]
 8007fae:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007fb2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007fb6:	f7f8 f999 	bl	80002ec <__aeabi_uldivmod>
 8007fba:	4602      	mov	r2, r0
 8007fbc:	460b      	mov	r3, r1
 8007fbe:	4610      	mov	r0, r2
 8007fc0:	4619      	mov	r1, r3
 8007fc2:	f04f 0200 	mov.w	r2, #0
 8007fc6:	f04f 0300 	mov.w	r3, #0
 8007fca:	020b      	lsls	r3, r1, #8
 8007fcc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007fd0:	0202      	lsls	r2, r0, #8
 8007fd2:	6979      	ldr	r1, [r7, #20]
 8007fd4:	6849      	ldr	r1, [r1, #4]
 8007fd6:	0849      	lsrs	r1, r1, #1
 8007fd8:	2000      	movs	r0, #0
 8007fda:	460c      	mov	r4, r1
 8007fdc:	4605      	mov	r5, r0
 8007fde:	eb12 0804 	adds.w	r8, r2, r4
 8007fe2:	eb43 0905 	adc.w	r9, r3, r5
 8007fe6:	697b      	ldr	r3, [r7, #20]
 8007fe8:	685b      	ldr	r3, [r3, #4]
 8007fea:	2200      	movs	r2, #0
 8007fec:	469a      	mov	sl, r3
 8007fee:	4693      	mov	fp, r2
 8007ff0:	4652      	mov	r2, sl
 8007ff2:	465b      	mov	r3, fp
 8007ff4:	4640      	mov	r0, r8
 8007ff6:	4649      	mov	r1, r9
 8007ff8:	f7f8 f978 	bl	80002ec <__aeabi_uldivmod>
 8007ffc:	4602      	mov	r2, r0
 8007ffe:	460b      	mov	r3, r1
 8008000:	4613      	mov	r3, r2
 8008002:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008004:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008006:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800800a:	d308      	bcc.n	800801e <UART_SetConfig+0x9a2>
 800800c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800800e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008012:	d204      	bcs.n	800801e <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8008014:	697b      	ldr	r3, [r7, #20]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800801a:	60da      	str	r2, [r3, #12]
 800801c:	e17f      	b.n	800831e <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800801e:	2301      	movs	r3, #1
 8008020:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008024:	e17b      	b.n	800831e <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008026:	697b      	ldr	r3, [r7, #20]
 8008028:	69db      	ldr	r3, [r3, #28]
 800802a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800802e:	f040 80bd 	bne.w	80081ac <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8008032:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008036:	2b20      	cmp	r3, #32
 8008038:	dc48      	bgt.n	80080cc <UART_SetConfig+0xa50>
 800803a:	2b00      	cmp	r3, #0
 800803c:	db7b      	blt.n	8008136 <UART_SetConfig+0xaba>
 800803e:	2b20      	cmp	r3, #32
 8008040:	d879      	bhi.n	8008136 <UART_SetConfig+0xaba>
 8008042:	a201      	add	r2, pc, #4	@ (adr r2, 8008048 <UART_SetConfig+0x9cc>)
 8008044:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008048:	080080d3 	.word	0x080080d3
 800804c:	080080db 	.word	0x080080db
 8008050:	08008137 	.word	0x08008137
 8008054:	08008137 	.word	0x08008137
 8008058:	080080e3 	.word	0x080080e3
 800805c:	08008137 	.word	0x08008137
 8008060:	08008137 	.word	0x08008137
 8008064:	08008137 	.word	0x08008137
 8008068:	080080f3 	.word	0x080080f3
 800806c:	08008137 	.word	0x08008137
 8008070:	08008137 	.word	0x08008137
 8008074:	08008137 	.word	0x08008137
 8008078:	08008137 	.word	0x08008137
 800807c:	08008137 	.word	0x08008137
 8008080:	08008137 	.word	0x08008137
 8008084:	08008137 	.word	0x08008137
 8008088:	08008103 	.word	0x08008103
 800808c:	08008137 	.word	0x08008137
 8008090:	08008137 	.word	0x08008137
 8008094:	08008137 	.word	0x08008137
 8008098:	08008137 	.word	0x08008137
 800809c:	08008137 	.word	0x08008137
 80080a0:	08008137 	.word	0x08008137
 80080a4:	08008137 	.word	0x08008137
 80080a8:	08008137 	.word	0x08008137
 80080ac:	08008137 	.word	0x08008137
 80080b0:	08008137 	.word	0x08008137
 80080b4:	08008137 	.word	0x08008137
 80080b8:	08008137 	.word	0x08008137
 80080bc:	08008137 	.word	0x08008137
 80080c0:	08008137 	.word	0x08008137
 80080c4:	08008137 	.word	0x08008137
 80080c8:	08008129 	.word	0x08008129
 80080cc:	2b40      	cmp	r3, #64	@ 0x40
 80080ce:	d02e      	beq.n	800812e <UART_SetConfig+0xab2>
 80080d0:	e031      	b.n	8008136 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80080d2:	f7fd f967 	bl	80053a4 <HAL_RCC_GetPCLK1Freq>
 80080d6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80080d8:	e033      	b.n	8008142 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80080da:	f7fd f979 	bl	80053d0 <HAL_RCC_GetPCLK2Freq>
 80080de:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80080e0:	e02f      	b.n	8008142 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80080e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80080e6:	4618      	mov	r0, r3
 80080e8:	f7fe fb9e 	bl	8006828 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80080ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80080f0:	e027      	b.n	8008142 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80080f2:	f107 0318 	add.w	r3, r7, #24
 80080f6:	4618      	mov	r0, r3
 80080f8:	f7fe fcea 	bl	8006ad0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80080fc:	69fb      	ldr	r3, [r7, #28]
 80080fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008100:	e01f      	b.n	8008142 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008102:	4b69      	ldr	r3, [pc, #420]	@ (80082a8 <UART_SetConfig+0xc2c>)
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	f003 0320 	and.w	r3, r3, #32
 800810a:	2b00      	cmp	r3, #0
 800810c:	d009      	beq.n	8008122 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800810e:	4b66      	ldr	r3, [pc, #408]	@ (80082a8 <UART_SetConfig+0xc2c>)
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	08db      	lsrs	r3, r3, #3
 8008114:	f003 0303 	and.w	r3, r3, #3
 8008118:	4a64      	ldr	r2, [pc, #400]	@ (80082ac <UART_SetConfig+0xc30>)
 800811a:	fa22 f303 	lsr.w	r3, r2, r3
 800811e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008120:	e00f      	b.n	8008142 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8008122:	4b62      	ldr	r3, [pc, #392]	@ (80082ac <UART_SetConfig+0xc30>)
 8008124:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008126:	e00c      	b.n	8008142 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008128:	4b61      	ldr	r3, [pc, #388]	@ (80082b0 <UART_SetConfig+0xc34>)
 800812a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800812c:	e009      	b.n	8008142 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800812e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008132:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008134:	e005      	b.n	8008142 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8008136:	2300      	movs	r3, #0
 8008138:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800813a:	2301      	movs	r3, #1
 800813c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008140:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008142:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008144:	2b00      	cmp	r3, #0
 8008146:	f000 80ea 	beq.w	800831e <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800814a:	697b      	ldr	r3, [r7, #20]
 800814c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800814e:	4a55      	ldr	r2, [pc, #340]	@ (80082a4 <UART_SetConfig+0xc28>)
 8008150:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008154:	461a      	mov	r2, r3
 8008156:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008158:	fbb3 f3f2 	udiv	r3, r3, r2
 800815c:	005a      	lsls	r2, r3, #1
 800815e:	697b      	ldr	r3, [r7, #20]
 8008160:	685b      	ldr	r3, [r3, #4]
 8008162:	085b      	lsrs	r3, r3, #1
 8008164:	441a      	add	r2, r3
 8008166:	697b      	ldr	r3, [r7, #20]
 8008168:	685b      	ldr	r3, [r3, #4]
 800816a:	fbb2 f3f3 	udiv	r3, r2, r3
 800816e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008170:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008172:	2b0f      	cmp	r3, #15
 8008174:	d916      	bls.n	80081a4 <UART_SetConfig+0xb28>
 8008176:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008178:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800817c:	d212      	bcs.n	80081a4 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800817e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008180:	b29b      	uxth	r3, r3
 8008182:	f023 030f 	bic.w	r3, r3, #15
 8008186:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008188:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800818a:	085b      	lsrs	r3, r3, #1
 800818c:	b29b      	uxth	r3, r3
 800818e:	f003 0307 	and.w	r3, r3, #7
 8008192:	b29a      	uxth	r2, r3
 8008194:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8008196:	4313      	orrs	r3, r2
 8008198:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800819a:	697b      	ldr	r3, [r7, #20]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80081a0:	60da      	str	r2, [r3, #12]
 80081a2:	e0bc      	b.n	800831e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80081a4:	2301      	movs	r3, #1
 80081a6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80081aa:	e0b8      	b.n	800831e <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80081ac:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80081b0:	2b20      	cmp	r3, #32
 80081b2:	dc4b      	bgt.n	800824c <UART_SetConfig+0xbd0>
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	f2c0 8087 	blt.w	80082c8 <UART_SetConfig+0xc4c>
 80081ba:	2b20      	cmp	r3, #32
 80081bc:	f200 8084 	bhi.w	80082c8 <UART_SetConfig+0xc4c>
 80081c0:	a201      	add	r2, pc, #4	@ (adr r2, 80081c8 <UART_SetConfig+0xb4c>)
 80081c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081c6:	bf00      	nop
 80081c8:	08008253 	.word	0x08008253
 80081cc:	0800825b 	.word	0x0800825b
 80081d0:	080082c9 	.word	0x080082c9
 80081d4:	080082c9 	.word	0x080082c9
 80081d8:	08008263 	.word	0x08008263
 80081dc:	080082c9 	.word	0x080082c9
 80081e0:	080082c9 	.word	0x080082c9
 80081e4:	080082c9 	.word	0x080082c9
 80081e8:	08008273 	.word	0x08008273
 80081ec:	080082c9 	.word	0x080082c9
 80081f0:	080082c9 	.word	0x080082c9
 80081f4:	080082c9 	.word	0x080082c9
 80081f8:	080082c9 	.word	0x080082c9
 80081fc:	080082c9 	.word	0x080082c9
 8008200:	080082c9 	.word	0x080082c9
 8008204:	080082c9 	.word	0x080082c9
 8008208:	08008283 	.word	0x08008283
 800820c:	080082c9 	.word	0x080082c9
 8008210:	080082c9 	.word	0x080082c9
 8008214:	080082c9 	.word	0x080082c9
 8008218:	080082c9 	.word	0x080082c9
 800821c:	080082c9 	.word	0x080082c9
 8008220:	080082c9 	.word	0x080082c9
 8008224:	080082c9 	.word	0x080082c9
 8008228:	080082c9 	.word	0x080082c9
 800822c:	080082c9 	.word	0x080082c9
 8008230:	080082c9 	.word	0x080082c9
 8008234:	080082c9 	.word	0x080082c9
 8008238:	080082c9 	.word	0x080082c9
 800823c:	080082c9 	.word	0x080082c9
 8008240:	080082c9 	.word	0x080082c9
 8008244:	080082c9 	.word	0x080082c9
 8008248:	080082bb 	.word	0x080082bb
 800824c:	2b40      	cmp	r3, #64	@ 0x40
 800824e:	d037      	beq.n	80082c0 <UART_SetConfig+0xc44>
 8008250:	e03a      	b.n	80082c8 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008252:	f7fd f8a7 	bl	80053a4 <HAL_RCC_GetPCLK1Freq>
 8008256:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008258:	e03c      	b.n	80082d4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800825a:	f7fd f8b9 	bl	80053d0 <HAL_RCC_GetPCLK2Freq>
 800825e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008260:	e038      	b.n	80082d4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008262:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008266:	4618      	mov	r0, r3
 8008268:	f7fe fade 	bl	8006828 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800826c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800826e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008270:	e030      	b.n	80082d4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008272:	f107 0318 	add.w	r3, r7, #24
 8008276:	4618      	mov	r0, r3
 8008278:	f7fe fc2a 	bl	8006ad0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800827c:	69fb      	ldr	r3, [r7, #28]
 800827e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008280:	e028      	b.n	80082d4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008282:	4b09      	ldr	r3, [pc, #36]	@ (80082a8 <UART_SetConfig+0xc2c>)
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	f003 0320 	and.w	r3, r3, #32
 800828a:	2b00      	cmp	r3, #0
 800828c:	d012      	beq.n	80082b4 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800828e:	4b06      	ldr	r3, [pc, #24]	@ (80082a8 <UART_SetConfig+0xc2c>)
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	08db      	lsrs	r3, r3, #3
 8008294:	f003 0303 	and.w	r3, r3, #3
 8008298:	4a04      	ldr	r2, [pc, #16]	@ (80082ac <UART_SetConfig+0xc30>)
 800829a:	fa22 f303 	lsr.w	r3, r2, r3
 800829e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80082a0:	e018      	b.n	80082d4 <UART_SetConfig+0xc58>
 80082a2:	bf00      	nop
 80082a4:	08008a24 	.word	0x08008a24
 80082a8:	58024400 	.word	0x58024400
 80082ac:	03d09000 	.word	0x03d09000
 80082b0:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 80082b4:	4b24      	ldr	r3, [pc, #144]	@ (8008348 <UART_SetConfig+0xccc>)
 80082b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80082b8:	e00c      	b.n	80082d4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80082ba:	4b24      	ldr	r3, [pc, #144]	@ (800834c <UART_SetConfig+0xcd0>)
 80082bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80082be:	e009      	b.n	80082d4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80082c0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80082c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80082c6:	e005      	b.n	80082d4 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 80082c8:	2300      	movs	r3, #0
 80082ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80082cc:	2301      	movs	r3, #1
 80082ce:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80082d2:	bf00      	nop
    }

    if (pclk != 0U)
 80082d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d021      	beq.n	800831e <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80082da:	697b      	ldr	r3, [r7, #20]
 80082dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082de:	4a1c      	ldr	r2, [pc, #112]	@ (8008350 <UART_SetConfig+0xcd4>)
 80082e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80082e4:	461a      	mov	r2, r3
 80082e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80082e8:	fbb3 f2f2 	udiv	r2, r3, r2
 80082ec:	697b      	ldr	r3, [r7, #20]
 80082ee:	685b      	ldr	r3, [r3, #4]
 80082f0:	085b      	lsrs	r3, r3, #1
 80082f2:	441a      	add	r2, r3
 80082f4:	697b      	ldr	r3, [r7, #20]
 80082f6:	685b      	ldr	r3, [r3, #4]
 80082f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80082fc:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80082fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008300:	2b0f      	cmp	r3, #15
 8008302:	d909      	bls.n	8008318 <UART_SetConfig+0xc9c>
 8008304:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008306:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800830a:	d205      	bcs.n	8008318 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800830c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800830e:	b29a      	uxth	r2, r3
 8008310:	697b      	ldr	r3, [r7, #20]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	60da      	str	r2, [r3, #12]
 8008316:	e002      	b.n	800831e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8008318:	2301      	movs	r3, #1
 800831a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800831e:	697b      	ldr	r3, [r7, #20]
 8008320:	2201      	movs	r2, #1
 8008322:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008326:	697b      	ldr	r3, [r7, #20]
 8008328:	2201      	movs	r2, #1
 800832a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800832e:	697b      	ldr	r3, [r7, #20]
 8008330:	2200      	movs	r2, #0
 8008332:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008334:	697b      	ldr	r3, [r7, #20]
 8008336:	2200      	movs	r2, #0
 8008338:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800833a:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800833e:	4618      	mov	r0, r3
 8008340:	3748      	adds	r7, #72	@ 0x48
 8008342:	46bd      	mov	sp, r7
 8008344:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008348:	03d09000 	.word	0x03d09000
 800834c:	003d0900 	.word	0x003d0900
 8008350:	08008a24 	.word	0x08008a24

08008354 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008354:	b480      	push	{r7}
 8008356:	b083      	sub	sp, #12
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008360:	f003 0308 	and.w	r3, r3, #8
 8008364:	2b00      	cmp	r3, #0
 8008366:	d00a      	beq.n	800837e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	685b      	ldr	r3, [r3, #4]
 800836e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	430a      	orrs	r2, r1
 800837c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008382:	f003 0301 	and.w	r3, r3, #1
 8008386:	2b00      	cmp	r3, #0
 8008388:	d00a      	beq.n	80083a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	685b      	ldr	r3, [r3, #4]
 8008390:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	430a      	orrs	r2, r1
 800839e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083a4:	f003 0302 	and.w	r3, r3, #2
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d00a      	beq.n	80083c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	685b      	ldr	r3, [r3, #4]
 80083b2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	430a      	orrs	r2, r1
 80083c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083c6:	f003 0304 	and.w	r3, r3, #4
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d00a      	beq.n	80083e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	685b      	ldr	r3, [r3, #4]
 80083d4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	430a      	orrs	r2, r1
 80083e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083e8:	f003 0310 	and.w	r3, r3, #16
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d00a      	beq.n	8008406 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	689b      	ldr	r3, [r3, #8]
 80083f6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	430a      	orrs	r2, r1
 8008404:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800840a:	f003 0320 	and.w	r3, r3, #32
 800840e:	2b00      	cmp	r3, #0
 8008410:	d00a      	beq.n	8008428 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	689b      	ldr	r3, [r3, #8]
 8008418:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	430a      	orrs	r2, r1
 8008426:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800842c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008430:	2b00      	cmp	r3, #0
 8008432:	d01a      	beq.n	800846a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	685b      	ldr	r3, [r3, #4]
 800843a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	430a      	orrs	r2, r1
 8008448:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800844e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008452:	d10a      	bne.n	800846a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	685b      	ldr	r3, [r3, #4]
 800845a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	430a      	orrs	r2, r1
 8008468:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800846e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008472:	2b00      	cmp	r3, #0
 8008474:	d00a      	beq.n	800848c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	685b      	ldr	r3, [r3, #4]
 800847c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	430a      	orrs	r2, r1
 800848a:	605a      	str	r2, [r3, #4]
  }
}
 800848c:	bf00      	nop
 800848e:	370c      	adds	r7, #12
 8008490:	46bd      	mov	sp, r7
 8008492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008496:	4770      	bx	lr

08008498 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b098      	sub	sp, #96	@ 0x60
 800849c:	af02      	add	r7, sp, #8
 800849e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2200      	movs	r2, #0
 80084a4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80084a8:	f7f8 fd4e 	bl	8000f48 <HAL_GetTick>
 80084ac:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	f003 0308 	and.w	r3, r3, #8
 80084b8:	2b08      	cmp	r3, #8
 80084ba:	d12f      	bne.n	800851c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80084bc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80084c0:	9300      	str	r3, [sp, #0]
 80084c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80084c4:	2200      	movs	r2, #0
 80084c6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80084ca:	6878      	ldr	r0, [r7, #4]
 80084cc:	f000 f88e 	bl	80085ec <UART_WaitOnFlagUntilTimeout>
 80084d0:	4603      	mov	r3, r0
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d022      	beq.n	800851c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084de:	e853 3f00 	ldrex	r3, [r3]
 80084e2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80084e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80084ea:	653b      	str	r3, [r7, #80]	@ 0x50
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	461a      	mov	r2, r3
 80084f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80084f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80084f6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084f8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80084fa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80084fc:	e841 2300 	strex	r3, r2, [r1]
 8008500:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008502:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008504:	2b00      	cmp	r3, #0
 8008506:	d1e6      	bne.n	80084d6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	2220      	movs	r2, #32
 800850c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	2200      	movs	r2, #0
 8008514:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008518:	2303      	movs	r3, #3
 800851a:	e063      	b.n	80085e4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	f003 0304 	and.w	r3, r3, #4
 8008526:	2b04      	cmp	r3, #4
 8008528:	d149      	bne.n	80085be <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800852a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800852e:	9300      	str	r3, [sp, #0]
 8008530:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008532:	2200      	movs	r2, #0
 8008534:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008538:	6878      	ldr	r0, [r7, #4]
 800853a:	f000 f857 	bl	80085ec <UART_WaitOnFlagUntilTimeout>
 800853e:	4603      	mov	r3, r0
 8008540:	2b00      	cmp	r3, #0
 8008542:	d03c      	beq.n	80085be <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800854a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800854c:	e853 3f00 	ldrex	r3, [r3]
 8008550:	623b      	str	r3, [r7, #32]
   return(result);
 8008552:	6a3b      	ldr	r3, [r7, #32]
 8008554:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008558:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	461a      	mov	r2, r3
 8008560:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008562:	633b      	str	r3, [r7, #48]	@ 0x30
 8008564:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008566:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008568:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800856a:	e841 2300 	strex	r3, r2, [r1]
 800856e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008570:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008572:	2b00      	cmp	r3, #0
 8008574:	d1e6      	bne.n	8008544 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	3308      	adds	r3, #8
 800857c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800857e:	693b      	ldr	r3, [r7, #16]
 8008580:	e853 3f00 	ldrex	r3, [r3]
 8008584:	60fb      	str	r3, [r7, #12]
   return(result);
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	f023 0301 	bic.w	r3, r3, #1
 800858c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	3308      	adds	r3, #8
 8008594:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008596:	61fa      	str	r2, [r7, #28]
 8008598:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800859a:	69b9      	ldr	r1, [r7, #24]
 800859c:	69fa      	ldr	r2, [r7, #28]
 800859e:	e841 2300 	strex	r3, r2, [r1]
 80085a2:	617b      	str	r3, [r7, #20]
   return(result);
 80085a4:	697b      	ldr	r3, [r7, #20]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d1e5      	bne.n	8008576 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	2220      	movs	r2, #32
 80085ae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	2200      	movs	r2, #0
 80085b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80085ba:	2303      	movs	r3, #3
 80085bc:	e012      	b.n	80085e4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	2220      	movs	r2, #32
 80085c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	2220      	movs	r2, #32
 80085ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	2200      	movs	r2, #0
 80085d2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	2200      	movs	r2, #0
 80085d8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	2200      	movs	r2, #0
 80085de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80085e2:	2300      	movs	r3, #0
}
 80085e4:	4618      	mov	r0, r3
 80085e6:	3758      	adds	r7, #88	@ 0x58
 80085e8:	46bd      	mov	sp, r7
 80085ea:	bd80      	pop	{r7, pc}

080085ec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80085ec:	b580      	push	{r7, lr}
 80085ee:	b084      	sub	sp, #16
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	60f8      	str	r0, [r7, #12]
 80085f4:	60b9      	str	r1, [r7, #8]
 80085f6:	603b      	str	r3, [r7, #0]
 80085f8:	4613      	mov	r3, r2
 80085fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80085fc:	e04f      	b.n	800869e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80085fe:	69bb      	ldr	r3, [r7, #24]
 8008600:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008604:	d04b      	beq.n	800869e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008606:	f7f8 fc9f 	bl	8000f48 <HAL_GetTick>
 800860a:	4602      	mov	r2, r0
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	1ad3      	subs	r3, r2, r3
 8008610:	69ba      	ldr	r2, [r7, #24]
 8008612:	429a      	cmp	r2, r3
 8008614:	d302      	bcc.n	800861c <UART_WaitOnFlagUntilTimeout+0x30>
 8008616:	69bb      	ldr	r3, [r7, #24]
 8008618:	2b00      	cmp	r3, #0
 800861a:	d101      	bne.n	8008620 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800861c:	2303      	movs	r3, #3
 800861e:	e04e      	b.n	80086be <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	f003 0304 	and.w	r3, r3, #4
 800862a:	2b00      	cmp	r3, #0
 800862c:	d037      	beq.n	800869e <UART_WaitOnFlagUntilTimeout+0xb2>
 800862e:	68bb      	ldr	r3, [r7, #8]
 8008630:	2b80      	cmp	r3, #128	@ 0x80
 8008632:	d034      	beq.n	800869e <UART_WaitOnFlagUntilTimeout+0xb2>
 8008634:	68bb      	ldr	r3, [r7, #8]
 8008636:	2b40      	cmp	r3, #64	@ 0x40
 8008638:	d031      	beq.n	800869e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	69db      	ldr	r3, [r3, #28]
 8008640:	f003 0308 	and.w	r3, r3, #8
 8008644:	2b08      	cmp	r3, #8
 8008646:	d110      	bne.n	800866a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	2208      	movs	r2, #8
 800864e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008650:	68f8      	ldr	r0, [r7, #12]
 8008652:	f000 f839 	bl	80086c8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	2208      	movs	r2, #8
 800865a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	2200      	movs	r2, #0
 8008662:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008666:	2301      	movs	r3, #1
 8008668:	e029      	b.n	80086be <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	69db      	ldr	r3, [r3, #28]
 8008670:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008674:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008678:	d111      	bne.n	800869e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008682:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008684:	68f8      	ldr	r0, [r7, #12]
 8008686:	f000 f81f 	bl	80086c8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	2220      	movs	r2, #32
 800868e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	2200      	movs	r2, #0
 8008696:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800869a:	2303      	movs	r3, #3
 800869c:	e00f      	b.n	80086be <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	69da      	ldr	r2, [r3, #28]
 80086a4:	68bb      	ldr	r3, [r7, #8]
 80086a6:	4013      	ands	r3, r2
 80086a8:	68ba      	ldr	r2, [r7, #8]
 80086aa:	429a      	cmp	r2, r3
 80086ac:	bf0c      	ite	eq
 80086ae:	2301      	moveq	r3, #1
 80086b0:	2300      	movne	r3, #0
 80086b2:	b2db      	uxtb	r3, r3
 80086b4:	461a      	mov	r2, r3
 80086b6:	79fb      	ldrb	r3, [r7, #7]
 80086b8:	429a      	cmp	r2, r3
 80086ba:	d0a0      	beq.n	80085fe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80086bc:	2300      	movs	r3, #0
}
 80086be:	4618      	mov	r0, r3
 80086c0:	3710      	adds	r7, #16
 80086c2:	46bd      	mov	sp, r7
 80086c4:	bd80      	pop	{r7, pc}
	...

080086c8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80086c8:	b480      	push	{r7}
 80086ca:	b095      	sub	sp, #84	@ 0x54
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086d8:	e853 3f00 	ldrex	r3, [r3]
 80086dc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80086de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086e0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80086e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	461a      	mov	r2, r3
 80086ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80086ee:	643b      	str	r3, [r7, #64]	@ 0x40
 80086f0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086f2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80086f4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80086f6:	e841 2300 	strex	r3, r2, [r1]
 80086fa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80086fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d1e6      	bne.n	80086d0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	3308      	adds	r3, #8
 8008708:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800870a:	6a3b      	ldr	r3, [r7, #32]
 800870c:	e853 3f00 	ldrex	r3, [r3]
 8008710:	61fb      	str	r3, [r7, #28]
   return(result);
 8008712:	69fa      	ldr	r2, [r7, #28]
 8008714:	4b1e      	ldr	r3, [pc, #120]	@ (8008790 <UART_EndRxTransfer+0xc8>)
 8008716:	4013      	ands	r3, r2
 8008718:	64bb      	str	r3, [r7, #72]	@ 0x48
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	3308      	adds	r3, #8
 8008720:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008722:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008724:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008726:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008728:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800872a:	e841 2300 	strex	r3, r2, [r1]
 800872e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008732:	2b00      	cmp	r3, #0
 8008734:	d1e5      	bne.n	8008702 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800873a:	2b01      	cmp	r3, #1
 800873c:	d118      	bne.n	8008770 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	e853 3f00 	ldrex	r3, [r3]
 800874a:	60bb      	str	r3, [r7, #8]
   return(result);
 800874c:	68bb      	ldr	r3, [r7, #8]
 800874e:	f023 0310 	bic.w	r3, r3, #16
 8008752:	647b      	str	r3, [r7, #68]	@ 0x44
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	461a      	mov	r2, r3
 800875a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800875c:	61bb      	str	r3, [r7, #24]
 800875e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008760:	6979      	ldr	r1, [r7, #20]
 8008762:	69ba      	ldr	r2, [r7, #24]
 8008764:	e841 2300 	strex	r3, r2, [r1]
 8008768:	613b      	str	r3, [r7, #16]
   return(result);
 800876a:	693b      	ldr	r3, [r7, #16]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d1e6      	bne.n	800873e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	2220      	movs	r2, #32
 8008774:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	2200      	movs	r2, #0
 800877c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	2200      	movs	r2, #0
 8008782:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008784:	bf00      	nop
 8008786:	3754      	adds	r7, #84	@ 0x54
 8008788:	46bd      	mov	sp, r7
 800878a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878e:	4770      	bx	lr
 8008790:	effffffe 	.word	0xeffffffe

08008794 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008794:	b480      	push	{r7}
 8008796:	b085      	sub	sp, #20
 8008798:	af00      	add	r7, sp, #0
 800879a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80087a2:	2b01      	cmp	r3, #1
 80087a4:	d101      	bne.n	80087aa <HAL_UARTEx_DisableFifoMode+0x16>
 80087a6:	2302      	movs	r3, #2
 80087a8:	e027      	b.n	80087fa <HAL_UARTEx_DisableFifoMode+0x66>
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	2201      	movs	r2, #1
 80087ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	2224      	movs	r2, #36	@ 0x24
 80087b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	681a      	ldr	r2, [r3, #0]
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	f022 0201 	bic.w	r2, r2, #1
 80087d0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80087d8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	2200      	movs	r2, #0
 80087de:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	68fa      	ldr	r2, [r7, #12]
 80087e6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	2220      	movs	r2, #32
 80087ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	2200      	movs	r2, #0
 80087f4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80087f8:	2300      	movs	r3, #0
}
 80087fa:	4618      	mov	r0, r3
 80087fc:	3714      	adds	r7, #20
 80087fe:	46bd      	mov	sp, r7
 8008800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008804:	4770      	bx	lr

08008806 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008806:	b580      	push	{r7, lr}
 8008808:	b084      	sub	sp, #16
 800880a:	af00      	add	r7, sp, #0
 800880c:	6078      	str	r0, [r7, #4]
 800880e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008816:	2b01      	cmp	r3, #1
 8008818:	d101      	bne.n	800881e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800881a:	2302      	movs	r3, #2
 800881c:	e02d      	b.n	800887a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	2201      	movs	r2, #1
 8008822:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	2224      	movs	r2, #36	@ 0x24
 800882a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	681a      	ldr	r2, [r3, #0]
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	f022 0201 	bic.w	r2, r2, #1
 8008844:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	689b      	ldr	r3, [r3, #8]
 800884c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	683a      	ldr	r2, [r7, #0]
 8008856:	430a      	orrs	r2, r1
 8008858:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800885a:	6878      	ldr	r0, [r7, #4]
 800885c:	f000 f850 	bl	8008900 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	68fa      	ldr	r2, [r7, #12]
 8008866:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2220      	movs	r2, #32
 800886c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2200      	movs	r2, #0
 8008874:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008878:	2300      	movs	r3, #0
}
 800887a:	4618      	mov	r0, r3
 800887c:	3710      	adds	r7, #16
 800887e:	46bd      	mov	sp, r7
 8008880:	bd80      	pop	{r7, pc}

08008882 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008882:	b580      	push	{r7, lr}
 8008884:	b084      	sub	sp, #16
 8008886:	af00      	add	r7, sp, #0
 8008888:	6078      	str	r0, [r7, #4]
 800888a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008892:	2b01      	cmp	r3, #1
 8008894:	d101      	bne.n	800889a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008896:	2302      	movs	r3, #2
 8008898:	e02d      	b.n	80088f6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	2201      	movs	r2, #1
 800889e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	2224      	movs	r2, #36	@ 0x24
 80088a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	681a      	ldr	r2, [r3, #0]
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	f022 0201 	bic.w	r2, r2, #1
 80088c0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	689b      	ldr	r3, [r3, #8]
 80088c8:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	683a      	ldr	r2, [r7, #0]
 80088d2:	430a      	orrs	r2, r1
 80088d4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80088d6:	6878      	ldr	r0, [r7, #4]
 80088d8:	f000 f812 	bl	8008900 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	68fa      	ldr	r2, [r7, #12]
 80088e2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	2220      	movs	r2, #32
 80088e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2200      	movs	r2, #0
 80088f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80088f4:	2300      	movs	r3, #0
}
 80088f6:	4618      	mov	r0, r3
 80088f8:	3710      	adds	r7, #16
 80088fa:	46bd      	mov	sp, r7
 80088fc:	bd80      	pop	{r7, pc}
	...

08008900 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008900:	b480      	push	{r7}
 8008902:	b085      	sub	sp, #20
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800890c:	2b00      	cmp	r3, #0
 800890e:	d108      	bne.n	8008922 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	2201      	movs	r2, #1
 8008914:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	2201      	movs	r2, #1
 800891c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008920:	e031      	b.n	8008986 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008922:	2310      	movs	r3, #16
 8008924:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008926:	2310      	movs	r3, #16
 8008928:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	689b      	ldr	r3, [r3, #8]
 8008930:	0e5b      	lsrs	r3, r3, #25
 8008932:	b2db      	uxtb	r3, r3
 8008934:	f003 0307 	and.w	r3, r3, #7
 8008938:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	689b      	ldr	r3, [r3, #8]
 8008940:	0f5b      	lsrs	r3, r3, #29
 8008942:	b2db      	uxtb	r3, r3
 8008944:	f003 0307 	and.w	r3, r3, #7
 8008948:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800894a:	7bbb      	ldrb	r3, [r7, #14]
 800894c:	7b3a      	ldrb	r2, [r7, #12]
 800894e:	4911      	ldr	r1, [pc, #68]	@ (8008994 <UARTEx_SetNbDataToProcess+0x94>)
 8008950:	5c8a      	ldrb	r2, [r1, r2]
 8008952:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008956:	7b3a      	ldrb	r2, [r7, #12]
 8008958:	490f      	ldr	r1, [pc, #60]	@ (8008998 <UARTEx_SetNbDataToProcess+0x98>)
 800895a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800895c:	fb93 f3f2 	sdiv	r3, r3, r2
 8008960:	b29a      	uxth	r2, r3
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008968:	7bfb      	ldrb	r3, [r7, #15]
 800896a:	7b7a      	ldrb	r2, [r7, #13]
 800896c:	4909      	ldr	r1, [pc, #36]	@ (8008994 <UARTEx_SetNbDataToProcess+0x94>)
 800896e:	5c8a      	ldrb	r2, [r1, r2]
 8008970:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008974:	7b7a      	ldrb	r2, [r7, #13]
 8008976:	4908      	ldr	r1, [pc, #32]	@ (8008998 <UARTEx_SetNbDataToProcess+0x98>)
 8008978:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800897a:	fb93 f3f2 	sdiv	r3, r3, r2
 800897e:	b29a      	uxth	r2, r3
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8008986:	bf00      	nop
 8008988:	3714      	adds	r7, #20
 800898a:	46bd      	mov	sp, r7
 800898c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008990:	4770      	bx	lr
 8008992:	bf00      	nop
 8008994:	08008a3c 	.word	0x08008a3c
 8008998:	08008a44 	.word	0x08008a44

0800899c <memset>:
 800899c:	4402      	add	r2, r0
 800899e:	4603      	mov	r3, r0
 80089a0:	4293      	cmp	r3, r2
 80089a2:	d100      	bne.n	80089a6 <memset+0xa>
 80089a4:	4770      	bx	lr
 80089a6:	f803 1b01 	strb.w	r1, [r3], #1
 80089aa:	e7f9      	b.n	80089a0 <memset+0x4>

080089ac <__libc_init_array>:
 80089ac:	b570      	push	{r4, r5, r6, lr}
 80089ae:	4d0d      	ldr	r5, [pc, #52]	@ (80089e4 <__libc_init_array+0x38>)
 80089b0:	4c0d      	ldr	r4, [pc, #52]	@ (80089e8 <__libc_init_array+0x3c>)
 80089b2:	1b64      	subs	r4, r4, r5
 80089b4:	10a4      	asrs	r4, r4, #2
 80089b6:	2600      	movs	r6, #0
 80089b8:	42a6      	cmp	r6, r4
 80089ba:	d109      	bne.n	80089d0 <__libc_init_array+0x24>
 80089bc:	4d0b      	ldr	r5, [pc, #44]	@ (80089ec <__libc_init_array+0x40>)
 80089be:	4c0c      	ldr	r4, [pc, #48]	@ (80089f0 <__libc_init_array+0x44>)
 80089c0:	f000 f818 	bl	80089f4 <_init>
 80089c4:	1b64      	subs	r4, r4, r5
 80089c6:	10a4      	asrs	r4, r4, #2
 80089c8:	2600      	movs	r6, #0
 80089ca:	42a6      	cmp	r6, r4
 80089cc:	d105      	bne.n	80089da <__libc_init_array+0x2e>
 80089ce:	bd70      	pop	{r4, r5, r6, pc}
 80089d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80089d4:	4798      	blx	r3
 80089d6:	3601      	adds	r6, #1
 80089d8:	e7ee      	b.n	80089b8 <__libc_init_array+0xc>
 80089da:	f855 3b04 	ldr.w	r3, [r5], #4
 80089de:	4798      	blx	r3
 80089e0:	3601      	adds	r6, #1
 80089e2:	e7f2      	b.n	80089ca <__libc_init_array+0x1e>
 80089e4:	08008a54 	.word	0x08008a54
 80089e8:	08008a54 	.word	0x08008a54
 80089ec:	08008a54 	.word	0x08008a54
 80089f0:	08008a58 	.word	0x08008a58

080089f4 <_init>:
 80089f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089f6:	bf00      	nop
 80089f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089fa:	bc08      	pop	{r3}
 80089fc:	469e      	mov	lr, r3
 80089fe:	4770      	bx	lr

08008a00 <_fini>:
 8008a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a02:	bf00      	nop
 8008a04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a06:	bc08      	pop	{r3}
 8008a08:	469e      	mov	lr, r3
 8008a0a:	4770      	bx	lr
