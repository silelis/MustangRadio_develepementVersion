
I2C_DMA_testes.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b178  080002b0  080002b0  000012b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  0800b428  0800b428  0000c428  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800b474  0800b474  0000c474  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800b47c  0800b47c  0000c47c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800b480  0800b480  0000c480  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000064  24000000  0800b484  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004078  24000064  0800b4e8  0000d064  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240040dc  0800b4e8  0000d0dc  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000d064  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001f712  00000000  00000000  0000d092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003f21  00000000  00000000  0002c7a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001800  00000000  00000000  000306c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000012c2  00000000  00000000  00031ec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00032437  00000000  00000000  0003318a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00023243  00000000  00000000  000655c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00148b1f  00000000  00000000  00088804  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001d1323  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000067c8  00000000  00000000  001d1368  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000008f  00000000  00000000  001d7b30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	@ (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	@ (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000064 	.word	0x24000064
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0800b410 	.word	0x0800b410

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	@ (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	@ (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	@ (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000068 	.word	0x24000068
 80002ec:	0800b410 	.word	0x0800b410

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96a 	b.w	80005dc <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	460c      	mov	r4, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14e      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032c:	4694      	mov	ip, r2
 800032e:	458c      	cmp	ip, r1
 8000330:	4686      	mov	lr, r0
 8000332:	fab2 f282 	clz	r2, r2
 8000336:	d962      	bls.n	80003fe <__udivmoddi4+0xde>
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0320 	rsb	r3, r2, #32
 800033e:	4091      	lsls	r1, r2
 8000340:	fa20 f303 	lsr.w	r3, r0, r3
 8000344:	fa0c fc02 	lsl.w	ip, ip, r2
 8000348:	4319      	orrs	r1, r3
 800034a:	fa00 fe02 	lsl.w	lr, r0, r2
 800034e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000352:	fa1f f68c 	uxth.w	r6, ip
 8000356:	fbb1 f4f7 	udiv	r4, r1, r7
 800035a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035e:	fb07 1114 	mls	r1, r7, r4, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb04 f106 	mul.w	r1, r4, r6
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f104 30ff 	add.w	r0, r4, #4294967295
 8000376:	f080 8112 	bcs.w	800059e <__udivmoddi4+0x27e>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 810f 	bls.w	800059e <__udivmoddi4+0x27e>
 8000380:	3c02      	subs	r4, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a59      	subs	r1, r3, r1
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb1 f0f7 	udiv	r0, r1, r7
 800038e:	fb07 1110 	mls	r1, r7, r0, r1
 8000392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000396:	fb00 f606 	mul.w	r6, r0, r6
 800039a:	429e      	cmp	r6, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x94>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003a6:	f080 80fc 	bcs.w	80005a2 <__udivmoddi4+0x282>
 80003aa:	429e      	cmp	r6, r3
 80003ac:	f240 80f9 	bls.w	80005a2 <__udivmoddi4+0x282>
 80003b0:	4463      	add	r3, ip
 80003b2:	3802      	subs	r0, #2
 80003b4:	1b9b      	subs	r3, r3, r6
 80003b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ba:	2100      	movs	r1, #0
 80003bc:	b11d      	cbz	r5, 80003c6 <__udivmoddi4+0xa6>
 80003be:	40d3      	lsrs	r3, r2
 80003c0:	2200      	movs	r2, #0
 80003c2:	e9c5 3200 	strd	r3, r2, [r5]
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d905      	bls.n	80003da <__udivmoddi4+0xba>
 80003ce:	b10d      	cbz	r5, 80003d4 <__udivmoddi4+0xb4>
 80003d0:	e9c5 0100 	strd	r0, r1, [r5]
 80003d4:	2100      	movs	r1, #0
 80003d6:	4608      	mov	r0, r1
 80003d8:	e7f5      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003da:	fab3 f183 	clz	r1, r3
 80003de:	2900      	cmp	r1, #0
 80003e0:	d146      	bne.n	8000470 <__udivmoddi4+0x150>
 80003e2:	42a3      	cmp	r3, r4
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xcc>
 80003e6:	4290      	cmp	r0, r2
 80003e8:	f0c0 80f0 	bcc.w	80005cc <__udivmoddi4+0x2ac>
 80003ec:	1a86      	subs	r6, r0, r2
 80003ee:	eb64 0303 	sbc.w	r3, r4, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	2d00      	cmp	r5, #0
 80003f6:	d0e6      	beq.n	80003c6 <__udivmoddi4+0xa6>
 80003f8:	e9c5 6300 	strd	r6, r3, [r5]
 80003fc:	e7e3      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003fe:	2a00      	cmp	r2, #0
 8000400:	f040 8090 	bne.w	8000524 <__udivmoddi4+0x204>
 8000404:	eba1 040c 	sub.w	r4, r1, ip
 8000408:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800040c:	fa1f f78c 	uxth.w	r7, ip
 8000410:	2101      	movs	r1, #1
 8000412:	fbb4 f6f8 	udiv	r6, r4, r8
 8000416:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041a:	fb08 4416 	mls	r4, r8, r6, r4
 800041e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000422:	fb07 f006 	mul.w	r0, r7, r6
 8000426:	4298      	cmp	r0, r3
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x11c>
 800042a:	eb1c 0303 	adds.w	r3, ip, r3
 800042e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x11a>
 8000434:	4298      	cmp	r0, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 800043a:	4626      	mov	r6, r4
 800043c:	1a1c      	subs	r4, r3, r0
 800043e:	fa1f f38e 	uxth.w	r3, lr
 8000442:	fbb4 f0f8 	udiv	r0, r4, r8
 8000446:	fb08 4410 	mls	r4, r8, r0, r4
 800044a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044e:	fb00 f707 	mul.w	r7, r0, r7
 8000452:	429f      	cmp	r7, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x148>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 34ff 	add.w	r4, r0, #4294967295
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x146>
 8000460:	429f      	cmp	r7, r3
 8000462:	f200 80b0 	bhi.w	80005c6 <__udivmoddi4+0x2a6>
 8000466:	4620      	mov	r0, r4
 8000468:	1bdb      	subs	r3, r3, r7
 800046a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046e:	e7a5      	b.n	80003bc <__udivmoddi4+0x9c>
 8000470:	f1c1 0620 	rsb	r6, r1, #32
 8000474:	408b      	lsls	r3, r1
 8000476:	fa22 f706 	lsr.w	r7, r2, r6
 800047a:	431f      	orrs	r7, r3
 800047c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000480:	fa04 f301 	lsl.w	r3, r4, r1
 8000484:	ea43 030c 	orr.w	r3, r3, ip
 8000488:	40f4      	lsrs	r4, r6
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	0c38      	lsrs	r0, r7, #16
 8000490:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000494:	fbb4 fef0 	udiv	lr, r4, r0
 8000498:	fa1f fc87 	uxth.w	ip, r7
 800049c:	fb00 441e 	mls	r4, r0, lr, r4
 80004a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a4:	fb0e f90c 	mul.w	r9, lr, ip
 80004a8:	45a1      	cmp	r9, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	d90a      	bls.n	80004c6 <__udivmoddi4+0x1a6>
 80004b0:	193c      	adds	r4, r7, r4
 80004b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004b6:	f080 8084 	bcs.w	80005c2 <__udivmoddi4+0x2a2>
 80004ba:	45a1      	cmp	r9, r4
 80004bc:	f240 8081 	bls.w	80005c2 <__udivmoddi4+0x2a2>
 80004c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	eba4 0409 	sub.w	r4, r4, r9
 80004ca:	fa1f f983 	uxth.w	r9, r3
 80004ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80004d2:	fb00 4413 	mls	r4, r0, r3, r4
 80004d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004da:	fb03 fc0c 	mul.w	ip, r3, ip
 80004de:	45a4      	cmp	ip, r4
 80004e0:	d907      	bls.n	80004f2 <__udivmoddi4+0x1d2>
 80004e2:	193c      	adds	r4, r7, r4
 80004e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004e8:	d267      	bcs.n	80005ba <__udivmoddi4+0x29a>
 80004ea:	45a4      	cmp	ip, r4
 80004ec:	d965      	bls.n	80005ba <__udivmoddi4+0x29a>
 80004ee:	3b02      	subs	r3, #2
 80004f0:	443c      	add	r4, r7
 80004f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f6:	fba0 9302 	umull	r9, r3, r0, r2
 80004fa:	eba4 040c 	sub.w	r4, r4, ip
 80004fe:	429c      	cmp	r4, r3
 8000500:	46ce      	mov	lr, r9
 8000502:	469c      	mov	ip, r3
 8000504:	d351      	bcc.n	80005aa <__udivmoddi4+0x28a>
 8000506:	d04e      	beq.n	80005a6 <__udivmoddi4+0x286>
 8000508:	b155      	cbz	r5, 8000520 <__udivmoddi4+0x200>
 800050a:	ebb8 030e 	subs.w	r3, r8, lr
 800050e:	eb64 040c 	sbc.w	r4, r4, ip
 8000512:	fa04 f606 	lsl.w	r6, r4, r6
 8000516:	40cb      	lsrs	r3, r1
 8000518:	431e      	orrs	r6, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	e9c5 6400 	strd	r6, r4, [r5]
 8000520:	2100      	movs	r1, #0
 8000522:	e750      	b.n	80003c6 <__udivmoddi4+0xa6>
 8000524:	f1c2 0320 	rsb	r3, r2, #32
 8000528:	fa20 f103 	lsr.w	r1, r0, r3
 800052c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000530:	fa24 f303 	lsr.w	r3, r4, r3
 8000534:	4094      	lsls	r4, r2
 8000536:	430c      	orrs	r4, r1
 8000538:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800053c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000540:	fa1f f78c 	uxth.w	r7, ip
 8000544:	fbb3 f0f8 	udiv	r0, r3, r8
 8000548:	fb08 3110 	mls	r1, r8, r0, r3
 800054c:	0c23      	lsrs	r3, r4, #16
 800054e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000552:	fb00 f107 	mul.w	r1, r0, r7
 8000556:	4299      	cmp	r1, r3
 8000558:	d908      	bls.n	800056c <__udivmoddi4+0x24c>
 800055a:	eb1c 0303 	adds.w	r3, ip, r3
 800055e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000562:	d22c      	bcs.n	80005be <__udivmoddi4+0x29e>
 8000564:	4299      	cmp	r1, r3
 8000566:	d92a      	bls.n	80005be <__udivmoddi4+0x29e>
 8000568:	3802      	subs	r0, #2
 800056a:	4463      	add	r3, ip
 800056c:	1a5b      	subs	r3, r3, r1
 800056e:	b2a4      	uxth	r4, r4
 8000570:	fbb3 f1f8 	udiv	r1, r3, r8
 8000574:	fb08 3311 	mls	r3, r8, r1, r3
 8000578:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800057c:	fb01 f307 	mul.w	r3, r1, r7
 8000580:	42a3      	cmp	r3, r4
 8000582:	d908      	bls.n	8000596 <__udivmoddi4+0x276>
 8000584:	eb1c 0404 	adds.w	r4, ip, r4
 8000588:	f101 36ff 	add.w	r6, r1, #4294967295
 800058c:	d213      	bcs.n	80005b6 <__udivmoddi4+0x296>
 800058e:	42a3      	cmp	r3, r4
 8000590:	d911      	bls.n	80005b6 <__udivmoddi4+0x296>
 8000592:	3902      	subs	r1, #2
 8000594:	4464      	add	r4, ip
 8000596:	1ae4      	subs	r4, r4, r3
 8000598:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800059c:	e739      	b.n	8000412 <__udivmoddi4+0xf2>
 800059e:	4604      	mov	r4, r0
 80005a0:	e6f0      	b.n	8000384 <__udivmoddi4+0x64>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e706      	b.n	80003b4 <__udivmoddi4+0x94>
 80005a6:	45c8      	cmp	r8, r9
 80005a8:	d2ae      	bcs.n	8000508 <__udivmoddi4+0x1e8>
 80005aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80005b2:	3801      	subs	r0, #1
 80005b4:	e7a8      	b.n	8000508 <__udivmoddi4+0x1e8>
 80005b6:	4631      	mov	r1, r6
 80005b8:	e7ed      	b.n	8000596 <__udivmoddi4+0x276>
 80005ba:	4603      	mov	r3, r0
 80005bc:	e799      	b.n	80004f2 <__udivmoddi4+0x1d2>
 80005be:	4630      	mov	r0, r6
 80005c0:	e7d4      	b.n	800056c <__udivmoddi4+0x24c>
 80005c2:	46d6      	mov	lr, sl
 80005c4:	e77f      	b.n	80004c6 <__udivmoddi4+0x1a6>
 80005c6:	4463      	add	r3, ip
 80005c8:	3802      	subs	r0, #2
 80005ca:	e74d      	b.n	8000468 <__udivmoddi4+0x148>
 80005cc:	4606      	mov	r6, r0
 80005ce:	4623      	mov	r3, r4
 80005d0:	4608      	mov	r0, r1
 80005d2:	e70f      	b.n	80003f4 <__udivmoddi4+0xd4>
 80005d4:	3e02      	subs	r6, #2
 80005d6:	4463      	add	r3, ip
 80005d8:	e730      	b.n	800043c <__udivmoddi4+0x11c>
 80005da:	bf00      	nop

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005e6:	4b11      	ldr	r3, [pc, #68]	@ (800062c <MX_DMA_Init+0x4c>)
 80005e8:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 80005ec:	4a0f      	ldr	r2, [pc, #60]	@ (800062c <MX_DMA_Init+0x4c>)
 80005ee:	f043 0301 	orr.w	r3, r3, #1
 80005f2:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 80005f6:	4b0d      	ldr	r3, [pc, #52]	@ (800062c <MX_DMA_Init+0x4c>)
 80005f8:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 80005fc:	f003 0301 	and.w	r3, r3, #1
 8000600:	607b      	str	r3, [r7, #4]
 8000602:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 6, 0);
 8000604:	2200      	movs	r2, #0
 8000606:	2106      	movs	r1, #6
 8000608:	200b      	movs	r0, #11
 800060a:	f000 fdcf 	bl	80011ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800060e:	200b      	movs	r0, #11
 8000610:	f000 fde6 	bl	80011e0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 6, 0);
 8000614:	2200      	movs	r2, #0
 8000616:	2106      	movs	r1, #6
 8000618:	200c      	movs	r0, #12
 800061a:	f000 fdc7 	bl	80011ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800061e:	200c      	movs	r0, #12
 8000620:	f000 fdde 	bl	80011e0 <HAL_NVIC_EnableIRQ>

}
 8000624:	bf00      	nop
 8000626:	3708      	adds	r7, #8
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}
 800062c:	58024400 	.word	0x58024400

08000630 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b088      	sub	sp, #32
 8000634:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000636:	f107 030c 	add.w	r3, r7, #12
 800063a:	2200      	movs	r2, #0
 800063c:	601a      	str	r2, [r3, #0]
 800063e:	605a      	str	r2, [r3, #4]
 8000640:	609a      	str	r2, [r3, #8]
 8000642:	60da      	str	r2, [r3, #12]
 8000644:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000646:	4b1b      	ldr	r3, [pc, #108]	@ (80006b4 <MX_GPIO_Init+0x84>)
 8000648:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800064c:	4a19      	ldr	r2, [pc, #100]	@ (80006b4 <MX_GPIO_Init+0x84>)
 800064e:	f043 0302 	orr.w	r3, r3, #2
 8000652:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000656:	4b17      	ldr	r3, [pc, #92]	@ (80006b4 <MX_GPIO_Init+0x84>)
 8000658:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800065c:	f003 0302 	and.w	r3, r3, #2
 8000660:	60bb      	str	r3, [r7, #8]
 8000662:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000664:	4b13      	ldr	r3, [pc, #76]	@ (80006b4 <MX_GPIO_Init+0x84>)
 8000666:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800066a:	4a12      	ldr	r2, [pc, #72]	@ (80006b4 <MX_GPIO_Init+0x84>)
 800066c:	f043 0301 	orr.w	r3, r3, #1
 8000670:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000674:	4b0f      	ldr	r3, [pc, #60]	@ (80006b4 <MX_GPIO_Init+0x84>)
 8000676:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800067a:	f003 0301 	and.w	r3, r3, #1
 800067e:	607b      	str	r3, [r7, #4]
 8000680:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = esp32i2cInterruptReqest_Pin;
 8000682:	2320      	movs	r3, #32
 8000684:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000686:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800068a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068c:	2300      	movs	r3, #0
 800068e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(esp32i2cInterruptReqest_GPIO_Port, &GPIO_InitStruct);
 8000690:	f107 030c 	add.w	r3, r7, #12
 8000694:	4619      	mov	r1, r3
 8000696:	4808      	ldr	r0, [pc, #32]	@ (80006b8 <MX_GPIO_Init+0x88>)
 8000698:	f003 f98a 	bl	80039b0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 800069c:	2200      	movs	r2, #0
 800069e:	2105      	movs	r1, #5
 80006a0:	2017      	movs	r0, #23
 80006a2:	f000 fd83 	bl	80011ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80006a6:	2017      	movs	r0, #23
 80006a8:	f000 fd9a 	bl	80011e0 <HAL_NVIC_EnableIRQ>

}
 80006ac:	bf00      	nop
 80006ae:	3720      	adds	r7, #32
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	58024400 	.word	0x58024400
 80006b8:	58020400 	.word	0x58020400

080006bc <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006c0:	4b1b      	ldr	r3, [pc, #108]	@ (8000730 <MX_I2C1_Init+0x74>)
 80006c2:	4a1c      	ldr	r2, [pc, #112]	@ (8000734 <MX_I2C1_Init+0x78>)
 80006c4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20B0CCFF;
 80006c6:	4b1a      	ldr	r3, [pc, #104]	@ (8000730 <MX_I2C1_Init+0x74>)
 80006c8:	4a1b      	ldr	r2, [pc, #108]	@ (8000738 <MX_I2C1_Init+0x7c>)
 80006ca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80006cc:	4b18      	ldr	r3, [pc, #96]	@ (8000730 <MX_I2C1_Init+0x74>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006d2:	4b17      	ldr	r3, [pc, #92]	@ (8000730 <MX_I2C1_Init+0x74>)
 80006d4:	2201      	movs	r2, #1
 80006d6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006d8:	4b15      	ldr	r3, [pc, #84]	@ (8000730 <MX_I2C1_Init+0x74>)
 80006da:	2200      	movs	r2, #0
 80006dc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80006de:	4b14      	ldr	r3, [pc, #80]	@ (8000730 <MX_I2C1_Init+0x74>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006e4:	4b12      	ldr	r3, [pc, #72]	@ (8000730 <MX_I2C1_Init+0x74>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006ea:	4b11      	ldr	r3, [pc, #68]	@ (8000730 <MX_I2C1_Init+0x74>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 80006f0:	4b0f      	ldr	r3, [pc, #60]	@ (8000730 <MX_I2C1_Init+0x74>)
 80006f2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80006f6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006f8:	480d      	ldr	r0, [pc, #52]	@ (8000730 <MX_I2C1_Init+0x74>)
 80006fa:	f003 fb2f 	bl	8003d5c <HAL_I2C_Init>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000704:	f000 f9d4 	bl	8000ab0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000708:	2100      	movs	r1, #0
 800070a:	4809      	ldr	r0, [pc, #36]	@ (8000730 <MX_I2C1_Init+0x74>)
 800070c:	f005 fc4c 	bl	8005fa8 <HAL_I2CEx_ConfigAnalogFilter>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000716:	f000 f9cb 	bl	8000ab0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800071a:	2100      	movs	r1, #0
 800071c:	4804      	ldr	r0, [pc, #16]	@ (8000730 <MX_I2C1_Init+0x74>)
 800071e:	f005 fc8e 	bl	800603e <HAL_I2CEx_ConfigDigitalFilter>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000728:	f000 f9c2 	bl	8000ab0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800072c:	bf00      	nop
 800072e:	bd80      	pop	{r7, pc}
 8000730:	24000080 	.word	0x24000080
 8000734:	40005400 	.word	0x40005400
 8000738:	20b0ccff 	.word	0x20b0ccff

0800073c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b0ba      	sub	sp, #232	@ 0xe8
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000744:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000748:	2200      	movs	r2, #0
 800074a:	601a      	str	r2, [r3, #0]
 800074c:	605a      	str	r2, [r3, #4]
 800074e:	609a      	str	r2, [r3, #8]
 8000750:	60da      	str	r2, [r3, #12]
 8000752:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000754:	f107 0310 	add.w	r3, r7, #16
 8000758:	22c0      	movs	r2, #192	@ 0xc0
 800075a:	2100      	movs	r1, #0
 800075c:	4618      	mov	r0, r3
 800075e:	f00a fe05 	bl	800b36c <memset>
  if(i2cHandle->Instance==I2C1)
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	4a5c      	ldr	r2, [pc, #368]	@ (80008d8 <HAL_I2C_MspInit+0x19c>)
 8000768:	4293      	cmp	r3, r2
 800076a:	f040 80b1 	bne.w	80008d0 <HAL_I2C_MspInit+0x194>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800076e:	f04f 0208 	mov.w	r2, #8
 8000772:	f04f 0300 	mov.w	r3, #0
 8000776:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 800077a:	2300      	movs	r3, #0
 800077c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000780:	f107 0310 	add.w	r3, r7, #16
 8000784:	4618      	mov	r0, r3
 8000786:	f006 fce1 	bl	800714c <HAL_RCCEx_PeriphCLKConfig>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <HAL_I2C_MspInit+0x58>
    {
      Error_Handler();
 8000790:	f000 f98e 	bl	8000ab0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000794:	4b51      	ldr	r3, [pc, #324]	@ (80008dc <HAL_I2C_MspInit+0x1a0>)
 8000796:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800079a:	4a50      	ldr	r2, [pc, #320]	@ (80008dc <HAL_I2C_MspInit+0x1a0>)
 800079c:	f043 0302 	orr.w	r3, r3, #2
 80007a0:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80007a4:	4b4d      	ldr	r3, [pc, #308]	@ (80008dc <HAL_I2C_MspInit+0x1a0>)
 80007a6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80007aa:	f003 0302 	and.w	r3, r3, #2
 80007ae:	60fb      	str	r3, [r7, #12]
 80007b0:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80007b2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80007b6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007ba:	2312      	movs	r3, #18
 80007bc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c0:	2300      	movs	r3, #0
 80007c2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c6:	2300      	movs	r3, #0
 80007c8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80007cc:	2304      	movs	r3, #4
 80007ce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007d2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80007d6:	4619      	mov	r1, r3
 80007d8:	4841      	ldr	r0, [pc, #260]	@ (80008e0 <HAL_I2C_MspInit+0x1a4>)
 80007da:	f003 f8e9 	bl	80039b0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80007de:	4b3f      	ldr	r3, [pc, #252]	@ (80008dc <HAL_I2C_MspInit+0x1a0>)
 80007e0:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80007e4:	4a3d      	ldr	r2, [pc, #244]	@ (80008dc <HAL_I2C_MspInit+0x1a0>)
 80007e6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80007ea:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 80007ee:	4b3b      	ldr	r3, [pc, #236]	@ (80008dc <HAL_I2C_MspInit+0x1a0>)
 80007f0:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80007f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80007f8:	60bb      	str	r3, [r7, #8]
 80007fa:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 80007fc:	4b39      	ldr	r3, [pc, #228]	@ (80008e4 <HAL_I2C_MspInit+0x1a8>)
 80007fe:	4a3a      	ldr	r2, [pc, #232]	@ (80008e8 <HAL_I2C_MspInit+0x1ac>)
 8000800:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 8000802:	4b38      	ldr	r3, [pc, #224]	@ (80008e4 <HAL_I2C_MspInit+0x1a8>)
 8000804:	2221      	movs	r2, #33	@ 0x21
 8000806:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000808:	4b36      	ldr	r3, [pc, #216]	@ (80008e4 <HAL_I2C_MspInit+0x1a8>)
 800080a:	2200      	movs	r2, #0
 800080c:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800080e:	4b35      	ldr	r3, [pc, #212]	@ (80008e4 <HAL_I2C_MspInit+0x1a8>)
 8000810:	2200      	movs	r2, #0
 8000812:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000814:	4b33      	ldr	r3, [pc, #204]	@ (80008e4 <HAL_I2C_MspInit+0x1a8>)
 8000816:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800081a:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800081c:	4b31      	ldr	r3, [pc, #196]	@ (80008e4 <HAL_I2C_MspInit+0x1a8>)
 800081e:	2200      	movs	r2, #0
 8000820:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000822:	4b30      	ldr	r3, [pc, #192]	@ (80008e4 <HAL_I2C_MspInit+0x1a8>)
 8000824:	2200      	movs	r2, #0
 8000826:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8000828:	4b2e      	ldr	r3, [pc, #184]	@ (80008e4 <HAL_I2C_MspInit+0x1a8>)
 800082a:	2200      	movs	r2, #0
 800082c:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800082e:	4b2d      	ldr	r3, [pc, #180]	@ (80008e4 <HAL_I2C_MspInit+0x1a8>)
 8000830:	2200      	movs	r2, #0
 8000832:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000834:	4b2b      	ldr	r3, [pc, #172]	@ (80008e4 <HAL_I2C_MspInit+0x1a8>)
 8000836:	2200      	movs	r2, #0
 8000838:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800083a:	482a      	ldr	r0, [pc, #168]	@ (80008e4 <HAL_I2C_MspInit+0x1a8>)
 800083c:	f000 fcde 	bl	80011fc <HAL_DMA_Init>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <HAL_I2C_MspInit+0x10e>
    {
      Error_Handler();
 8000846:	f000 f933 	bl	8000ab0 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	4a25      	ldr	r2, [pc, #148]	@ (80008e4 <HAL_I2C_MspInit+0x1a8>)
 800084e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000850:	4a24      	ldr	r2, [pc, #144]	@ (80008e4 <HAL_I2C_MspInit+0x1a8>)
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream1;
 8000856:	4b25      	ldr	r3, [pc, #148]	@ (80008ec <HAL_I2C_MspInit+0x1b0>)
 8000858:	4a25      	ldr	r2, [pc, #148]	@ (80008f0 <HAL_I2C_MspInit+0x1b4>)
 800085a:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 800085c:	4b23      	ldr	r3, [pc, #140]	@ (80008ec <HAL_I2C_MspInit+0x1b0>)
 800085e:	2222      	movs	r2, #34	@ 0x22
 8000860:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000862:	4b22      	ldr	r3, [pc, #136]	@ (80008ec <HAL_I2C_MspInit+0x1b0>)
 8000864:	2240      	movs	r2, #64	@ 0x40
 8000866:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000868:	4b20      	ldr	r3, [pc, #128]	@ (80008ec <HAL_I2C_MspInit+0x1b0>)
 800086a:	2200      	movs	r2, #0
 800086c:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800086e:	4b1f      	ldr	r3, [pc, #124]	@ (80008ec <HAL_I2C_MspInit+0x1b0>)
 8000870:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000874:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000876:	4b1d      	ldr	r3, [pc, #116]	@ (80008ec <HAL_I2C_MspInit+0x1b0>)
 8000878:	2200      	movs	r2, #0
 800087a:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800087c:	4b1b      	ldr	r3, [pc, #108]	@ (80008ec <HAL_I2C_MspInit+0x1b0>)
 800087e:	2200      	movs	r2, #0
 8000880:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8000882:	4b1a      	ldr	r3, [pc, #104]	@ (80008ec <HAL_I2C_MspInit+0x1b0>)
 8000884:	2200      	movs	r2, #0
 8000886:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000888:	4b18      	ldr	r3, [pc, #96]	@ (80008ec <HAL_I2C_MspInit+0x1b0>)
 800088a:	2200      	movs	r2, #0
 800088c:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800088e:	4b17      	ldr	r3, [pc, #92]	@ (80008ec <HAL_I2C_MspInit+0x1b0>)
 8000890:	2200      	movs	r2, #0
 8000892:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8000894:	4815      	ldr	r0, [pc, #84]	@ (80008ec <HAL_I2C_MspInit+0x1b0>)
 8000896:	f000 fcb1 	bl	80011fc <HAL_DMA_Init>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <HAL_I2C_MspInit+0x168>
    {
      Error_Handler();
 80008a0:	f000 f906 	bl	8000ab0 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	4a11      	ldr	r2, [pc, #68]	@ (80008ec <HAL_I2C_MspInit+0x1b0>)
 80008a8:	639a      	str	r2, [r3, #56]	@ 0x38
 80008aa:	4a10      	ldr	r2, [pc, #64]	@ (80008ec <HAL_I2C_MspInit+0x1b0>)
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 80008b0:	2200      	movs	r2, #0
 80008b2:	2105      	movs	r1, #5
 80008b4:	201f      	movs	r0, #31
 80008b6:	f000 fc79 	bl	80011ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80008ba:	201f      	movs	r0, #31
 80008bc:	f000 fc90 	bl	80011e0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 80008c0:	2200      	movs	r2, #0
 80008c2:	2105      	movs	r1, #5
 80008c4:	2020      	movs	r0, #32
 80008c6:	f000 fc71 	bl	80011ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80008ca:	2020      	movs	r0, #32
 80008cc:	f000 fc88 	bl	80011e0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80008d0:	bf00      	nop
 80008d2:	37e8      	adds	r7, #232	@ 0xe8
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	40005400 	.word	0x40005400
 80008dc:	58024400 	.word	0x58024400
 80008e0:	58020400 	.word	0x58020400
 80008e4:	240000d4 	.word	0x240000d4
 80008e8:	40020010 	.word	0x40020010
 80008ec:	2400014c 	.word	0x2400014c
 80008f0:	40020028 	.word	0x40020028

080008f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b08c      	sub	sp, #48	@ 0x30
 80008f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008fa:	f000 fb43 	bl	8000f84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008fe:	f000 f84f 	bl	80009a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000902:	f7ff fe95 	bl	8000630 <MX_GPIO_Init>
  MX_DMA_Init();
 8000906:	f7ff fe6b 	bl	80005e0 <MX_DMA_Init>
  MX_USART1_UART_Init();
 800090a:	f000 fa5b 	bl	8000dc4 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 800090e:	f7ff fed5 	bl	80006bc <MX_I2C1_Init>



	void* testBuffer;

	QueueHandle_t handler_Queue = xQueueCreate(20, sizeof(uint8_t));
 8000912:	2200      	movs	r2, #0
 8000914:	2101      	movs	r1, #1
 8000916:	2014      	movs	r0, #20
 8000918:	f009 ff7e 	bl	800a818 <xQueueGenericCreate>
 800091c:	62b8      	str	r0, [r7, #40]	@ 0x28

	char trash[] = "HelloABCDEF";
 800091e:	4a1d      	ldr	r2, [pc, #116]	@ (8000994 <main+0xa0>)
 8000920:	f107 0310 	add.w	r3, r7, #16
 8000924:	ca07      	ldmia	r2, {r0, r1, r2}
 8000926:	e883 0007 	stmia.w	r3, {r0, r1, r2}


	i2cFrame_transmitQueue testTransm;

	testTransm.slaveDevice7bitAddress = 0x3C<<1;
 800092a:	2378      	movs	r3, #120	@ 0x78
 800092c:	713b      	strb	r3, [r7, #4]
	testTransm.dataSize =sizeof(trash);
 800092e:	230c      	movs	r3, #12
 8000930:	60bb      	str	r3, [r7, #8]
	testTransm.pData = &trash;
 8000932:	f107 0310 	add.w	r3, r7, #16
 8000936:	60fb      	str	r3, [r7, #12]


	size_t bufferLenght = sizeof(testTransm.dataSize)+testTransm.dataSize;
 8000938:	68bb      	ldr	r3, [r7, #8]
 800093a:	3304      	adds	r3, #4
 800093c:	627b      	str	r3, [r7, #36]	@ 0x24
	testBuffer = malloc(bufferLenght);
 800093e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000940:	f00a fc5e 	bl	800b200 <malloc>
 8000944:	4603      	mov	r3, r0
 8000946:	623b      	str	r3, [r7, #32]

	memcpy(testBuffer,&testTransm.dataSize, sizeof(testTransm.dataSize));
 8000948:	68ba      	ldr	r2, [r7, #8]
 800094a:	6a3b      	ldr	r3, [r7, #32]
 800094c:	601a      	str	r2, [r3, #0]
	memcpy(testBuffer+sizeof(size_t), testTransm.pData, testTransm.dataSize);
 800094e:	6a3b      	ldr	r3, [r7, #32]
 8000950:	3304      	adds	r3, #4
 8000952:	68f9      	ldr	r1, [r7, #12]
 8000954:	68ba      	ldr	r2, [r7, #8]
 8000956:	4618      	mov	r0, r3
 8000958:	f00a fd4c 	bl	800b3f4 <memcpy>


	while(1){
		while(HAL_I2C_GetState(&hi2c1)!= HAL_I2C_STATE_READY){};
 800095c:	bf00      	nop
 800095e:	480e      	ldr	r0, [pc, #56]	@ (8000998 <main+0xa4>)
 8000960:	f003 fc89 	bl	8004276 <HAL_I2C_GetState>
 8000964:	4603      	mov	r3, r0
 8000966:	2b20      	cmp	r3, #32
 8000968:	d1f9      	bne.n	800095e <main+0x6a>

		HAL_StatusTypeDef retVal =HAL_I2C_Master_Transmit_DMA(&hi2c1, I2C_SLAVE_ADDRESS_ESP32<<1, (uint8_t*) testBuffer, bufferLenght);
 800096a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800096c:	b29b      	uxth	r3, r3
 800096e:	6a3a      	ldr	r2, [r7, #32]
 8000970:	2178      	movs	r1, #120	@ 0x78
 8000972:	4809      	ldr	r0, [pc, #36]	@ (8000998 <main+0xa4>)
 8000974:	f003 fa8e 	bl	8003e94 <HAL_I2C_Master_Transmit_DMA>
 8000978:	4603      	mov	r3, r0
 800097a:	77fb      	strb	r3, [r7, #31]

		//pętla opóźniająca jest potrzebna między kolejnymi przesyłkami
		for(uint32_t i=0; i<0xfffff; i++){
 800097c:	2300      	movs	r3, #0
 800097e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000980:	e002      	b.n	8000988 <main+0x94>
 8000982:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000984:	3301      	adds	r3, #1
 8000986:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000988:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800098a:	4a04      	ldr	r2, [pc, #16]	@ (800099c <main+0xa8>)
 800098c:	4293      	cmp	r3, r2
 800098e:	d9f8      	bls.n	8000982 <main+0x8e>
	while(1){
 8000990:	e7e4      	b.n	800095c <main+0x68>
 8000992:	bf00      	nop
 8000994:	0800b428 	.word	0x0800b428
 8000998:	24000080 	.word	0x24000080
 800099c:	000ffffe 	.word	0x000ffffe

080009a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b09c      	sub	sp, #112	@ 0x70
 80009a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009aa:	224c      	movs	r2, #76	@ 0x4c
 80009ac:	2100      	movs	r1, #0
 80009ae:	4618      	mov	r0, r3
 80009b0:	f00a fcdc 	bl	800b36c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009b4:	1d3b      	adds	r3, r7, #4
 80009b6:	2220      	movs	r2, #32
 80009b8:	2100      	movs	r1, #0
 80009ba:	4618      	mov	r0, r3
 80009bc:	f00a fcd6 	bl	800b36c <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 80009c0:	4b30      	ldr	r3, [pc, #192]	@ (8000a84 <SystemClock_Config+0xe4>)
 80009c2:	f04f 32ff 	mov.w	r2, #4294967295
 80009c6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80009ca:	2002      	movs	r0, #2
 80009cc:	f005 fb84 	bl	80060d8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80009d0:	2300      	movs	r3, #0
 80009d2:	603b      	str	r3, [r7, #0]
 80009d4:	4b2c      	ldr	r3, [pc, #176]	@ (8000a88 <SystemClock_Config+0xe8>)
 80009d6:	699b      	ldr	r3, [r3, #24]
 80009d8:	4a2b      	ldr	r2, [pc, #172]	@ (8000a88 <SystemClock_Config+0xe8>)
 80009da:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80009de:	6193      	str	r3, [r2, #24]
 80009e0:	4b29      	ldr	r3, [pc, #164]	@ (8000a88 <SystemClock_Config+0xe8>)
 80009e2:	699b      	ldr	r3, [r3, #24]
 80009e4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80009e8:	603b      	str	r3, [r7, #0]
 80009ea:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80009ec:	bf00      	nop
 80009ee:	4b26      	ldr	r3, [pc, #152]	@ (8000a88 <SystemClock_Config+0xe8>)
 80009f0:	699b      	ldr	r3, [r3, #24]
 80009f2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80009f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80009fa:	d1f8      	bne.n	80009ee <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009fc:	2302      	movs	r3, #2
 80009fe:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000a00:	2301      	movs	r3, #1
 8000a02:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8000a04:	2340      	movs	r3, #64	@ 0x40
 8000a06:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a08:	2302      	movs	r3, #2
 8000a0a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a10:	2304      	movs	r3, #4
 8000a12:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 35;
 8000a14:	2323      	movs	r3, #35	@ 0x23
 8000a16:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000a18:	2302      	movs	r3, #2
 8000a1a:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000a1c:	2302      	movs	r3, #2
 8000a1e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a20:	2302      	movs	r3, #2
 8000a22:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000a24:	230c      	movs	r3, #12
 8000a26:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a30:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a34:	4618      	mov	r0, r3
 8000a36:	f005 fb89 	bl	800614c <HAL_RCC_OscConfig>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000a40:	f000 f836 	bl	8000ab0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a44:	233f      	movs	r3, #63	@ 0x3f
 8000a46:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a48:	2303      	movs	r3, #3
 8000a4a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000a50:	2300      	movs	r3, #0
 8000a52:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000a54:	2340      	movs	r3, #64	@ 0x40
 8000a56:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000a58:	2340      	movs	r3, #64	@ 0x40
 8000a5a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000a5c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a60:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000a62:	2340      	movs	r3, #64	@ 0x40
 8000a64:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000a66:	1d3b      	adds	r3, r7, #4
 8000a68:	2106      	movs	r1, #6
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f005 ffa0 	bl	80069b0 <HAL_RCC_ClockConfig>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <SystemClock_Config+0xda>
  {
    Error_Handler();
 8000a76:	f000 f81b 	bl	8000ab0 <Error_Handler>
  }
}
 8000a7a:	bf00      	nop
 8000a7c:	3770      	adds	r7, #112	@ 0x70
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	58024400 	.word	0x58024400
 8000a88:	58024800 	.word	0x58024800

08000a8c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4a04      	ldr	r2, [pc, #16]	@ (8000aac <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a9a:	4293      	cmp	r3, r2
 8000a9c:	d101      	bne.n	8000aa2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a9e:	f000 faad 	bl	8000ffc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000aa2:	bf00      	nop
 8000aa4:	3708      	adds	r7, #8
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	40010000 	.word	0x40010000

08000ab0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ab4:	b672      	cpsid	i
}
 8000ab6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ab8:	bf00      	nop
 8000aba:	e7fd      	b.n	8000ab8 <Error_Handler+0x8>

08000abc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ac2:	4b0c      	ldr	r3, [pc, #48]	@ (8000af4 <HAL_MspInit+0x38>)
 8000ac4:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000ac8:	4a0a      	ldr	r2, [pc, #40]	@ (8000af4 <HAL_MspInit+0x38>)
 8000aca:	f043 0302 	orr.w	r3, r3, #2
 8000ace:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8000ad2:	4b08      	ldr	r3, [pc, #32]	@ (8000af4 <HAL_MspInit+0x38>)
 8000ad4:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000ad8:	f003 0302 	and.w	r3, r3, #2
 8000adc:	607b      	str	r3, [r7, #4]
 8000ade:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	210f      	movs	r1, #15
 8000ae4:	f06f 0001 	mvn.w	r0, #1
 8000ae8:	f000 fb60 	bl	80011ac <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aec:	bf00      	nop
 8000aee:	3708      	adds	r7, #8
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	58024400 	.word	0x58024400

08000af8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b08e      	sub	sp, #56	@ 0x38
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	2b0f      	cmp	r3, #15
 8000b04:	d844      	bhi.n	8000b90 <HAL_InitTick+0x98>
  {
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0U);
 8000b06:	2200      	movs	r2, #0
 8000b08:	6879      	ldr	r1, [r7, #4]
 8000b0a:	2019      	movs	r0, #25
 8000b0c:	f000 fb4e 	bl	80011ac <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000b10:	2019      	movs	r0, #25
 8000b12:	f000 fb65 	bl	80011e0 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8000b16:	4a24      	ldr	r2, [pc, #144]	@ (8000ba8 <HAL_InitTick+0xb0>)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000b1c:	4b23      	ldr	r3, [pc, #140]	@ (8000bac <HAL_InitTick+0xb4>)
 8000b1e:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8000b22:	4a22      	ldr	r2, [pc, #136]	@ (8000bac <HAL_InitTick+0xb4>)
 8000b24:	f043 0301 	orr.w	r3, r3, #1
 8000b28:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 8000b2c:	4b1f      	ldr	r3, [pc, #124]	@ (8000bac <HAL_InitTick+0xb4>)
 8000b2e:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8000b32:	f003 0301 	and.w	r3, r3, #1
 8000b36:	60bb      	str	r3, [r7, #8]
 8000b38:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b3a:	f107 020c 	add.w	r2, r7, #12
 8000b3e:	f107 0310 	add.w	r3, r7, #16
 8000b42:	4611      	mov	r1, r2
 8000b44:	4618      	mov	r0, r3
 8000b46:	f006 fabf 	bl	80070c8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000b4a:	f006 faa7 	bl	800709c <HAL_RCC_GetPCLK2Freq>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	005b      	lsls	r3, r3, #1
 8000b52:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000b56:	4a16      	ldr	r2, [pc, #88]	@ (8000bb0 <HAL_InitTick+0xb8>)
 8000b58:	fba2 2303 	umull	r2, r3, r2, r3
 8000b5c:	0c9b      	lsrs	r3, r3, #18
 8000b5e:	3b01      	subs	r3, #1
 8000b60:	633b      	str	r3, [r7, #48]	@ 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000b62:	4b14      	ldr	r3, [pc, #80]	@ (8000bb4 <HAL_InitTick+0xbc>)
 8000b64:	4a14      	ldr	r2, [pc, #80]	@ (8000bb8 <HAL_InitTick+0xc0>)
 8000b66:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000b68:	4b12      	ldr	r3, [pc, #72]	@ (8000bb4 <HAL_InitTick+0xbc>)
 8000b6a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000b6e:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000b70:	4a10      	ldr	r2, [pc, #64]	@ (8000bb4 <HAL_InitTick+0xbc>)
 8000b72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000b74:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000b76:	4b0f      	ldr	r3, [pc, #60]	@ (8000bb4 <HAL_InitTick+0xbc>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b7c:	4b0d      	ldr	r3, [pc, #52]	@ (8000bb4 <HAL_InitTick+0xbc>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000b82:	480c      	ldr	r0, [pc, #48]	@ (8000bb4 <HAL_InitTick+0xbc>)
 8000b84:	f008 f8c2 	bl	8008d0c <HAL_TIM_Base_Init>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d107      	bne.n	8000b9e <HAL_InitTick+0xa6>
 8000b8e:	e001      	b.n	8000b94 <HAL_InitTick+0x9c>
    return HAL_ERROR;
 8000b90:	2301      	movs	r3, #1
 8000b92:	e005      	b.n	8000ba0 <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000b94:	4807      	ldr	r0, [pc, #28]	@ (8000bb4 <HAL_InitTick+0xbc>)
 8000b96:	f008 f91b 	bl	8008dd0 <HAL_TIM_Base_Start_IT>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	e000      	b.n	8000ba0 <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 8000b9e:	2301      	movs	r3, #1
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	3738      	adds	r7, #56	@ 0x38
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	24000008 	.word	0x24000008
 8000bac:	58024400 	.word	0x58024400
 8000bb0:	431bde83 	.word	0x431bde83
 8000bb4:	240001c4 	.word	0x240001c4
 8000bb8:	40010000 	.word	0x40010000

08000bbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bc0:	bf00      	nop
 8000bc2:	e7fd      	b.n	8000bc0 <NMI_Handler+0x4>

08000bc4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bc8:	bf00      	nop
 8000bca:	e7fd      	b.n	8000bc8 <HardFault_Handler+0x4>

08000bcc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bd0:	bf00      	nop
 8000bd2:	e7fd      	b.n	8000bd0 <MemManage_Handler+0x4>

08000bd4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bd8:	bf00      	nop
 8000bda:	e7fd      	b.n	8000bd8 <BusFault_Handler+0x4>

08000bdc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000be0:	bf00      	nop
 8000be2:	e7fd      	b.n	8000be0 <UsageFault_Handler+0x4>

08000be4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000be8:	bf00      	nop
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr
	...

08000bf4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8000bf8:	4802      	ldr	r0, [pc, #8]	@ (8000c04 <DMA1_Stream0_IRQHandler+0x10>)
 8000bfa:	f001 fb3d 	bl	8002278 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000bfe:	bf00      	nop
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	240000d4 	.word	0x240000d4

08000c08 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8000c0c:	4802      	ldr	r0, [pc, #8]	@ (8000c18 <DMA1_Stream1_IRQHandler+0x10>)
 8000c0e:	f001 fb33 	bl	8002278 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8000c12:	bf00      	nop
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	2400014c 	.word	0x2400014c

08000c1c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(esp32i2cInterruptReqest_Pin);
 8000c20:	2020      	movs	r0, #32
 8000c22:	f003 f875 	bl	8003d10 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000c26:	bf00      	nop
 8000c28:	bd80      	pop	{r7, pc}
	...

08000c2c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000c30:	4802      	ldr	r0, [pc, #8]	@ (8000c3c <TIM1_UP_IRQHandler+0x10>)
 8000c32:	f008 f945 	bl	8008ec0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000c36:	bf00      	nop
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	240001c4 	.word	0x240001c4

08000c40 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000c44:	4802      	ldr	r0, [pc, #8]	@ (8000c50 <I2C1_EV_IRQHandler+0x10>)
 8000c46:	f003 fa39 	bl	80040bc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000c4a:	bf00      	nop
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	24000080 	.word	0x24000080

08000c54 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000c58:	4802      	ldr	r0, [pc, #8]	@ (8000c64 <I2C1_ER_IRQHandler+0x10>)
 8000c5a:	f003 fa49 	bl	80040f0 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000c5e:	bf00      	nop
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	24000080 	.word	0x24000080

08000c68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b086      	sub	sp, #24
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c70:	4a14      	ldr	r2, [pc, #80]	@ (8000cc4 <_sbrk+0x5c>)
 8000c72:	4b15      	ldr	r3, [pc, #84]	@ (8000cc8 <_sbrk+0x60>)
 8000c74:	1ad3      	subs	r3, r2, r3
 8000c76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c7c:	4b13      	ldr	r3, [pc, #76]	@ (8000ccc <_sbrk+0x64>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d102      	bne.n	8000c8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c84:	4b11      	ldr	r3, [pc, #68]	@ (8000ccc <_sbrk+0x64>)
 8000c86:	4a12      	ldr	r2, [pc, #72]	@ (8000cd0 <_sbrk+0x68>)
 8000c88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c8a:	4b10      	ldr	r3, [pc, #64]	@ (8000ccc <_sbrk+0x64>)
 8000c8c:	681a      	ldr	r2, [r3, #0]
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	4413      	add	r3, r2
 8000c92:	693a      	ldr	r2, [r7, #16]
 8000c94:	429a      	cmp	r2, r3
 8000c96:	d207      	bcs.n	8000ca8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c98:	f00a fb80 	bl	800b39c <__errno>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	220c      	movs	r2, #12
 8000ca0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ca2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ca6:	e009      	b.n	8000cbc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ca8:	4b08      	ldr	r3, [pc, #32]	@ (8000ccc <_sbrk+0x64>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cae:	4b07      	ldr	r3, [pc, #28]	@ (8000ccc <_sbrk+0x64>)
 8000cb0:	681a      	ldr	r2, [r3, #0]
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	4413      	add	r3, r2
 8000cb6:	4a05      	ldr	r2, [pc, #20]	@ (8000ccc <_sbrk+0x64>)
 8000cb8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cba:	68fb      	ldr	r3, [r7, #12]
}
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	3718      	adds	r7, #24
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	24100000 	.word	0x24100000
 8000cc8:	00000400 	.word	0x00000400
 8000ccc:	24000210 	.word	0x24000210
 8000cd0:	240040e0 	.word	0x240040e0

08000cd4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000cd8:	4b32      	ldr	r3, [pc, #200]	@ (8000da4 <SystemInit+0xd0>)
 8000cda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000cde:	4a31      	ldr	r2, [pc, #196]	@ (8000da4 <SystemInit+0xd0>)
 8000ce0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ce4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ce8:	4b2f      	ldr	r3, [pc, #188]	@ (8000da8 <SystemInit+0xd4>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	f003 030f 	and.w	r3, r3, #15
 8000cf0:	2b02      	cmp	r3, #2
 8000cf2:	d807      	bhi.n	8000d04 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000cf4:	4b2c      	ldr	r3, [pc, #176]	@ (8000da8 <SystemInit+0xd4>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	f023 030f 	bic.w	r3, r3, #15
 8000cfc:	4a2a      	ldr	r2, [pc, #168]	@ (8000da8 <SystemInit+0xd4>)
 8000cfe:	f043 0303 	orr.w	r3, r3, #3
 8000d02:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000d04:	4b29      	ldr	r3, [pc, #164]	@ (8000dac <SystemInit+0xd8>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a28      	ldr	r2, [pc, #160]	@ (8000dac <SystemInit+0xd8>)
 8000d0a:	f043 0301 	orr.w	r3, r3, #1
 8000d0e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000d10:	4b26      	ldr	r3, [pc, #152]	@ (8000dac <SystemInit+0xd8>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000d16:	4b25      	ldr	r3, [pc, #148]	@ (8000dac <SystemInit+0xd8>)
 8000d18:	681a      	ldr	r2, [r3, #0]
 8000d1a:	4924      	ldr	r1, [pc, #144]	@ (8000dac <SystemInit+0xd8>)
 8000d1c:	4b24      	ldr	r3, [pc, #144]	@ (8000db0 <SystemInit+0xdc>)
 8000d1e:	4013      	ands	r3, r2
 8000d20:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000d22:	4b21      	ldr	r3, [pc, #132]	@ (8000da8 <SystemInit+0xd4>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	f003 030c 	and.w	r3, r3, #12
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d007      	beq.n	8000d3e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000d2e:	4b1e      	ldr	r3, [pc, #120]	@ (8000da8 <SystemInit+0xd4>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	f023 030f 	bic.w	r3, r3, #15
 8000d36:	4a1c      	ldr	r2, [pc, #112]	@ (8000da8 <SystemInit+0xd4>)
 8000d38:	f043 0303 	orr.w	r3, r3, #3
 8000d3c:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8000d3e:	4b1b      	ldr	r3, [pc, #108]	@ (8000dac <SystemInit+0xd8>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8000d44:	4b19      	ldr	r3, [pc, #100]	@ (8000dac <SystemInit+0xd8>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8000d4a:	4b18      	ldr	r3, [pc, #96]	@ (8000dac <SystemInit+0xd8>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000d50:	4b16      	ldr	r3, [pc, #88]	@ (8000dac <SystemInit+0xd8>)
 8000d52:	4a18      	ldr	r2, [pc, #96]	@ (8000db4 <SystemInit+0xe0>)
 8000d54:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000d56:	4b15      	ldr	r3, [pc, #84]	@ (8000dac <SystemInit+0xd8>)
 8000d58:	4a17      	ldr	r2, [pc, #92]	@ (8000db8 <SystemInit+0xe4>)
 8000d5a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000d5c:	4b13      	ldr	r3, [pc, #76]	@ (8000dac <SystemInit+0xd8>)
 8000d5e:	4a17      	ldr	r2, [pc, #92]	@ (8000dbc <SystemInit+0xe8>)
 8000d60:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000d62:	4b12      	ldr	r3, [pc, #72]	@ (8000dac <SystemInit+0xd8>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000d68:	4b10      	ldr	r3, [pc, #64]	@ (8000dac <SystemInit+0xd8>)
 8000d6a:	4a14      	ldr	r2, [pc, #80]	@ (8000dbc <SystemInit+0xe8>)
 8000d6c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000d6e:	4b0f      	ldr	r3, [pc, #60]	@ (8000dac <SystemInit+0xd8>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000d74:	4b0d      	ldr	r3, [pc, #52]	@ (8000dac <SystemInit+0xd8>)
 8000d76:	4a11      	ldr	r2, [pc, #68]	@ (8000dbc <SystemInit+0xe8>)
 8000d78:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000d7a:	4b0c      	ldr	r3, [pc, #48]	@ (8000dac <SystemInit+0xd8>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000d80:	4b0a      	ldr	r3, [pc, #40]	@ (8000dac <SystemInit+0xd8>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a09      	ldr	r2, [pc, #36]	@ (8000dac <SystemInit+0xd8>)
 8000d86:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000d8a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000d8c:	4b07      	ldr	r3, [pc, #28]	@ (8000dac <SystemInit+0xd8>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000d92:	4b0b      	ldr	r3, [pc, #44]	@ (8000dc0 <SystemInit+0xec>)
 8000d94:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000d98:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000d9a:	bf00      	nop
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr
 8000da4:	e000ed00 	.word	0xe000ed00
 8000da8:	52002000 	.word	0x52002000
 8000dac:	58024400 	.word	0x58024400
 8000db0:	eaf6ed7f 	.word	0xeaf6ed7f
 8000db4:	02020200 	.word	0x02020200
 8000db8:	01ff0000 	.word	0x01ff0000
 8000dbc:	01010280 	.word	0x01010280
 8000dc0:	52004000 	.word	0x52004000

08000dc4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000dc8:	4b22      	ldr	r3, [pc, #136]	@ (8000e54 <MX_USART1_UART_Init+0x90>)
 8000dca:	4a23      	ldr	r2, [pc, #140]	@ (8000e58 <MX_USART1_UART_Init+0x94>)
 8000dcc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000dce:	4b21      	ldr	r3, [pc, #132]	@ (8000e54 <MX_USART1_UART_Init+0x90>)
 8000dd0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000dd4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000dd6:	4b1f      	ldr	r3, [pc, #124]	@ (8000e54 <MX_USART1_UART_Init+0x90>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ddc:	4b1d      	ldr	r3, [pc, #116]	@ (8000e54 <MX_USART1_UART_Init+0x90>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000de2:	4b1c      	ldr	r3, [pc, #112]	@ (8000e54 <MX_USART1_UART_Init+0x90>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000de8:	4b1a      	ldr	r3, [pc, #104]	@ (8000e54 <MX_USART1_UART_Init+0x90>)
 8000dea:	220c      	movs	r2, #12
 8000dec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dee:	4b19      	ldr	r3, [pc, #100]	@ (8000e54 <MX_USART1_UART_Init+0x90>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000df4:	4b17      	ldr	r3, [pc, #92]	@ (8000e54 <MX_USART1_UART_Init+0x90>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dfa:	4b16      	ldr	r3, [pc, #88]	@ (8000e54 <MX_USART1_UART_Init+0x90>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e00:	4b14      	ldr	r3, [pc, #80]	@ (8000e54 <MX_USART1_UART_Init+0x90>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e06:	4b13      	ldr	r3, [pc, #76]	@ (8000e54 <MX_USART1_UART_Init+0x90>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e0c:	4811      	ldr	r0, [pc, #68]	@ (8000e54 <MX_USART1_UART_Init+0x90>)
 8000e0e:	f008 fa4b 	bl	80092a8 <HAL_UART_Init>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d001      	beq.n	8000e1c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000e18:	f7ff fe4a 	bl	8000ab0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e1c:	2100      	movs	r1, #0
 8000e1e:	480d      	ldr	r0, [pc, #52]	@ (8000e54 <MX_USART1_UART_Init+0x90>)
 8000e20:	f009 fb57 	bl	800a4d2 <HAL_UARTEx_SetTxFifoThreshold>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000e2a:	f7ff fe41 	bl	8000ab0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e2e:	2100      	movs	r1, #0
 8000e30:	4808      	ldr	r0, [pc, #32]	@ (8000e54 <MX_USART1_UART_Init+0x90>)
 8000e32:	f009 fb8c 	bl	800a54e <HAL_UARTEx_SetRxFifoThreshold>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000e3c:	f7ff fe38 	bl	8000ab0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000e40:	4804      	ldr	r0, [pc, #16]	@ (8000e54 <MX_USART1_UART_Init+0x90>)
 8000e42:	f009 fb0d 	bl	800a460 <HAL_UARTEx_DisableFifoMode>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000e4c:	f7ff fe30 	bl	8000ab0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e50:	bf00      	nop
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	24000214 	.word	0x24000214
 8000e58:	40011000 	.word	0x40011000

08000e5c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b0ba      	sub	sp, #232	@ 0xe8
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e64:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000e68:	2200      	movs	r2, #0
 8000e6a:	601a      	str	r2, [r3, #0]
 8000e6c:	605a      	str	r2, [r3, #4]
 8000e6e:	609a      	str	r2, [r3, #8]
 8000e70:	60da      	str	r2, [r3, #12]
 8000e72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e74:	f107 0310 	add.w	r3, r7, #16
 8000e78:	22c0      	movs	r2, #192	@ 0xc0
 8000e7a:	2100      	movs	r1, #0
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f00a fa75 	bl	800b36c <memset>
  if(uartHandle->Instance==USART1)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	4a27      	ldr	r2, [pc, #156]	@ (8000f24 <HAL_UART_MspInit+0xc8>)
 8000e88:	4293      	cmp	r3, r2
 8000e8a:	d146      	bne.n	8000f1a <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000e8c:	f04f 0201 	mov.w	r2, #1
 8000e90:	f04f 0300 	mov.w	r3, #0
 8000e94:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e9e:	f107 0310 	add.w	r3, r7, #16
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f006 f952 	bl	800714c <HAL_RCCEx_PeriphCLKConfig>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000eae:	f7ff fdff 	bl	8000ab0 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000eb2:	4b1d      	ldr	r3, [pc, #116]	@ (8000f28 <HAL_UART_MspInit+0xcc>)
 8000eb4:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8000eb8:	4a1b      	ldr	r2, [pc, #108]	@ (8000f28 <HAL_UART_MspInit+0xcc>)
 8000eba:	f043 0310 	orr.w	r3, r3, #16
 8000ebe:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 8000ec2:	4b19      	ldr	r3, [pc, #100]	@ (8000f28 <HAL_UART_MspInit+0xcc>)
 8000ec4:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8000ec8:	f003 0310 	and.w	r3, r3, #16
 8000ecc:	60fb      	str	r3, [r7, #12]
 8000ece:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ed0:	4b15      	ldr	r3, [pc, #84]	@ (8000f28 <HAL_UART_MspInit+0xcc>)
 8000ed2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000ed6:	4a14      	ldr	r2, [pc, #80]	@ (8000f28 <HAL_UART_MspInit+0xcc>)
 8000ed8:	f043 0302 	orr.w	r3, r3, #2
 8000edc:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000ee0:	4b11      	ldr	r3, [pc, #68]	@ (8000f28 <HAL_UART_MspInit+0xcc>)
 8000ee2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000ee6:	f003 0302 	and.w	r3, r3, #2
 8000eea:	60bb      	str	r3, [r7, #8]
 8000eec:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = dbg_UART_TX_Pin|dbg_UART_RX_Pin;
 8000eee:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000ef2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef6:	2302      	movs	r3, #2
 8000ef8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efc:	2300      	movs	r3, #0
 8000efe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f02:	2300      	movs	r3, #0
 8000f04:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8000f08:	2304      	movs	r3, #4
 8000f0a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f0e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000f12:	4619      	mov	r1, r3
 8000f14:	4805      	ldr	r0, [pc, #20]	@ (8000f2c <HAL_UART_MspInit+0xd0>)
 8000f16:	f002 fd4b 	bl	80039b0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000f1a:	bf00      	nop
 8000f1c:	37e8      	adds	r7, #232	@ 0xe8
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	40011000 	.word	0x40011000
 8000f28:	58024400 	.word	0x58024400
 8000f2c:	58020400 	.word	0x58020400

08000f30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000f30:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f68 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f34:	f7ff fece 	bl	8000cd4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f38:	480c      	ldr	r0, [pc, #48]	@ (8000f6c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f3a:	490d      	ldr	r1, [pc, #52]	@ (8000f70 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f3c:	4a0d      	ldr	r2, [pc, #52]	@ (8000f74 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f40:	e002      	b.n	8000f48 <LoopCopyDataInit>

08000f42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f46:	3304      	adds	r3, #4

08000f48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f4c:	d3f9      	bcc.n	8000f42 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f4e:	4a0a      	ldr	r2, [pc, #40]	@ (8000f78 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f50:	4c0a      	ldr	r4, [pc, #40]	@ (8000f7c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f54:	e001      	b.n	8000f5a <LoopFillZerobss>

08000f56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f58:	3204      	adds	r2, #4

08000f5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f5c:	d3fb      	bcc.n	8000f56 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f5e:	f00a fa23 	bl	800b3a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f62:	f7ff fcc7 	bl	80008f4 <main>
  bx  lr
 8000f66:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f68:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8000f6c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000f70:	24000064 	.word	0x24000064
  ldr r2, =_sidata
 8000f74:	0800b484 	.word	0x0800b484
  ldr r2, =_sbss
 8000f78:	24000064 	.word	0x24000064
  ldr r4, =_ebss
 8000f7c:	240040dc 	.word	0x240040dc

08000f80 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f80:	e7fe      	b.n	8000f80 <ADC_IRQHandler>
	...

08000f84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f8a:	2003      	movs	r0, #3
 8000f8c:	f000 f903 	bl	8001196 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8000f90:	f005 fec4 	bl	8006d1c <HAL_RCC_GetSysClockFreq>
 8000f94:	4602      	mov	r2, r0
 8000f96:	4b15      	ldr	r3, [pc, #84]	@ (8000fec <HAL_Init+0x68>)
 8000f98:	699b      	ldr	r3, [r3, #24]
 8000f9a:	0a1b      	lsrs	r3, r3, #8
 8000f9c:	f003 030f 	and.w	r3, r3, #15
 8000fa0:	4913      	ldr	r1, [pc, #76]	@ (8000ff0 <HAL_Init+0x6c>)
 8000fa2:	5ccb      	ldrb	r3, [r1, r3]
 8000fa4:	f003 031f 	and.w	r3, r3, #31
 8000fa8:	fa22 f303 	lsr.w	r3, r2, r3
 8000fac:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8000fae:	4b0f      	ldr	r3, [pc, #60]	@ (8000fec <HAL_Init+0x68>)
 8000fb0:	699b      	ldr	r3, [r3, #24]
 8000fb2:	f003 030f 	and.w	r3, r3, #15
 8000fb6:	4a0e      	ldr	r2, [pc, #56]	@ (8000ff0 <HAL_Init+0x6c>)
 8000fb8:	5cd3      	ldrb	r3, [r2, r3]
 8000fba:	f003 031f 	and.w	r3, r3, #31
 8000fbe:	687a      	ldr	r2, [r7, #4]
 8000fc0:	fa22 f303 	lsr.w	r3, r2, r3
 8000fc4:	4a0b      	ldr	r2, [pc, #44]	@ (8000ff4 <HAL_Init+0x70>)
 8000fc6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000fc8:	4a0b      	ldr	r2, [pc, #44]	@ (8000ff8 <HAL_Init+0x74>)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fce:	200f      	movs	r0, #15
 8000fd0:	f7ff fd92 	bl	8000af8 <HAL_InitTick>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	e002      	b.n	8000fe4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000fde:	f7ff fd6d 	bl	8000abc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fe2:	2300      	movs	r3, #0
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	3708      	adds	r7, #8
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	58024400 	.word	0x58024400
 8000ff0:	0800b434 	.word	0x0800b434
 8000ff4:	24000004 	.word	0x24000004
 8000ff8:	24000000 	.word	0x24000000

08000ffc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001000:	4b06      	ldr	r3, [pc, #24]	@ (800101c <HAL_IncTick+0x20>)
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	461a      	mov	r2, r3
 8001006:	4b06      	ldr	r3, [pc, #24]	@ (8001020 <HAL_IncTick+0x24>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4413      	add	r3, r2
 800100c:	4a04      	ldr	r2, [pc, #16]	@ (8001020 <HAL_IncTick+0x24>)
 800100e:	6013      	str	r3, [r2, #0]
}
 8001010:	bf00      	nop
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	2400000c 	.word	0x2400000c
 8001020:	240002a8 	.word	0x240002a8

08001024 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  return uwTick;
 8001028:	4b03      	ldr	r3, [pc, #12]	@ (8001038 <HAL_GetTick+0x14>)
 800102a:	681b      	ldr	r3, [r3, #0]
}
 800102c:	4618      	mov	r0, r3
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	240002a8 	.word	0x240002a8

0800103c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800103c:	b480      	push	{r7}
 800103e:	b085      	sub	sp, #20
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	f003 0307 	and.w	r3, r3, #7
 800104a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800104c:	4b0b      	ldr	r3, [pc, #44]	@ (800107c <__NVIC_SetPriorityGrouping+0x40>)
 800104e:	68db      	ldr	r3, [r3, #12]
 8001050:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001052:	68ba      	ldr	r2, [r7, #8]
 8001054:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001058:	4013      	ands	r3, r2
 800105a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001060:	68bb      	ldr	r3, [r7, #8]
 8001062:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001064:	4b06      	ldr	r3, [pc, #24]	@ (8001080 <__NVIC_SetPriorityGrouping+0x44>)
 8001066:	4313      	orrs	r3, r2
 8001068:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800106a:	4a04      	ldr	r2, [pc, #16]	@ (800107c <__NVIC_SetPriorityGrouping+0x40>)
 800106c:	68bb      	ldr	r3, [r7, #8]
 800106e:	60d3      	str	r3, [r2, #12]
}
 8001070:	bf00      	nop
 8001072:	3714      	adds	r7, #20
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr
 800107c:	e000ed00 	.word	0xe000ed00
 8001080:	05fa0000 	.word	0x05fa0000

08001084 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001088:	4b04      	ldr	r3, [pc, #16]	@ (800109c <__NVIC_GetPriorityGrouping+0x18>)
 800108a:	68db      	ldr	r3, [r3, #12]
 800108c:	0a1b      	lsrs	r3, r3, #8
 800108e:	f003 0307 	and.w	r3, r3, #7
}
 8001092:	4618      	mov	r0, r3
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr
 800109c:	e000ed00 	.word	0xe000ed00

080010a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	4603      	mov	r3, r0
 80010a8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80010aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	db0b      	blt.n	80010ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010b2:	88fb      	ldrh	r3, [r7, #6]
 80010b4:	f003 021f 	and.w	r2, r3, #31
 80010b8:	4907      	ldr	r1, [pc, #28]	@ (80010d8 <__NVIC_EnableIRQ+0x38>)
 80010ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010be:	095b      	lsrs	r3, r3, #5
 80010c0:	2001      	movs	r0, #1
 80010c2:	fa00 f202 	lsl.w	r2, r0, r2
 80010c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80010ca:	bf00      	nop
 80010cc:	370c      	adds	r7, #12
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	e000e100 	.word	0xe000e100

080010dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010dc:	b480      	push	{r7}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	4603      	mov	r3, r0
 80010e4:	6039      	str	r1, [r7, #0]
 80010e6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80010e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	db0a      	blt.n	8001106 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	b2da      	uxtb	r2, r3
 80010f4:	490c      	ldr	r1, [pc, #48]	@ (8001128 <__NVIC_SetPriority+0x4c>)
 80010f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010fa:	0112      	lsls	r2, r2, #4
 80010fc:	b2d2      	uxtb	r2, r2
 80010fe:	440b      	add	r3, r1
 8001100:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001104:	e00a      	b.n	800111c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	b2da      	uxtb	r2, r3
 800110a:	4908      	ldr	r1, [pc, #32]	@ (800112c <__NVIC_SetPriority+0x50>)
 800110c:	88fb      	ldrh	r3, [r7, #6]
 800110e:	f003 030f 	and.w	r3, r3, #15
 8001112:	3b04      	subs	r3, #4
 8001114:	0112      	lsls	r2, r2, #4
 8001116:	b2d2      	uxtb	r2, r2
 8001118:	440b      	add	r3, r1
 800111a:	761a      	strb	r2, [r3, #24]
}
 800111c:	bf00      	nop
 800111e:	370c      	adds	r7, #12
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr
 8001128:	e000e100 	.word	0xe000e100
 800112c:	e000ed00 	.word	0xe000ed00

08001130 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001130:	b480      	push	{r7}
 8001132:	b089      	sub	sp, #36	@ 0x24
 8001134:	af00      	add	r7, sp, #0
 8001136:	60f8      	str	r0, [r7, #12]
 8001138:	60b9      	str	r1, [r7, #8]
 800113a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	f003 0307 	and.w	r3, r3, #7
 8001142:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001144:	69fb      	ldr	r3, [r7, #28]
 8001146:	f1c3 0307 	rsb	r3, r3, #7
 800114a:	2b04      	cmp	r3, #4
 800114c:	bf28      	it	cs
 800114e:	2304      	movcs	r3, #4
 8001150:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001152:	69fb      	ldr	r3, [r7, #28]
 8001154:	3304      	adds	r3, #4
 8001156:	2b06      	cmp	r3, #6
 8001158:	d902      	bls.n	8001160 <NVIC_EncodePriority+0x30>
 800115a:	69fb      	ldr	r3, [r7, #28]
 800115c:	3b03      	subs	r3, #3
 800115e:	e000      	b.n	8001162 <NVIC_EncodePriority+0x32>
 8001160:	2300      	movs	r3, #0
 8001162:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001164:	f04f 32ff 	mov.w	r2, #4294967295
 8001168:	69bb      	ldr	r3, [r7, #24]
 800116a:	fa02 f303 	lsl.w	r3, r2, r3
 800116e:	43da      	mvns	r2, r3
 8001170:	68bb      	ldr	r3, [r7, #8]
 8001172:	401a      	ands	r2, r3
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001178:	f04f 31ff 	mov.w	r1, #4294967295
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	fa01 f303 	lsl.w	r3, r1, r3
 8001182:	43d9      	mvns	r1, r3
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001188:	4313      	orrs	r3, r2
         );
}
 800118a:	4618      	mov	r0, r3
 800118c:	3724      	adds	r7, #36	@ 0x24
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr

08001196 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001196:	b580      	push	{r7, lr}
 8001198:	b082      	sub	sp, #8
 800119a:	af00      	add	r7, sp, #0
 800119c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800119e:	6878      	ldr	r0, [r7, #4]
 80011a0:	f7ff ff4c 	bl	800103c <__NVIC_SetPriorityGrouping>
}
 80011a4:	bf00      	nop
 80011a6:	3708      	adds	r7, #8
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}

080011ac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b086      	sub	sp, #24
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	4603      	mov	r3, r0
 80011b4:	60b9      	str	r1, [r7, #8]
 80011b6:	607a      	str	r2, [r7, #4]
 80011b8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80011ba:	f7ff ff63 	bl	8001084 <__NVIC_GetPriorityGrouping>
 80011be:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011c0:	687a      	ldr	r2, [r7, #4]
 80011c2:	68b9      	ldr	r1, [r7, #8]
 80011c4:	6978      	ldr	r0, [r7, #20]
 80011c6:	f7ff ffb3 	bl	8001130 <NVIC_EncodePriority>
 80011ca:	4602      	mov	r2, r0
 80011cc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80011d0:	4611      	mov	r1, r2
 80011d2:	4618      	mov	r0, r3
 80011d4:	f7ff ff82 	bl	80010dc <__NVIC_SetPriority>
}
 80011d8:	bf00      	nop
 80011da:	3718      	adds	r7, #24
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}

080011e0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	4603      	mov	r3, r0
 80011e8:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011ee:	4618      	mov	r0, r3
 80011f0:	f7ff ff56 	bl	80010a0 <__NVIC_EnableIRQ>
}
 80011f4:	bf00      	nop
 80011f6:	3708      	adds	r7, #8
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}

080011fc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b086      	sub	sp, #24
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001204:	f7ff ff0e 	bl	8001024 <HAL_GetTick>
 8001208:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d101      	bne.n	8001214 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001210:	2301      	movs	r3, #1
 8001212:	e37d      	b.n	8001910 <HAL_DMA_Init+0x714>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a66      	ldr	r2, [pc, #408]	@ (80013b4 <HAL_DMA_Init+0x1b8>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d04a      	beq.n	80012b4 <HAL_DMA_Init+0xb8>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4a65      	ldr	r2, [pc, #404]	@ (80013b8 <HAL_DMA_Init+0x1bc>)
 8001224:	4293      	cmp	r3, r2
 8001226:	d045      	beq.n	80012b4 <HAL_DMA_Init+0xb8>
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a63      	ldr	r2, [pc, #396]	@ (80013bc <HAL_DMA_Init+0x1c0>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d040      	beq.n	80012b4 <HAL_DMA_Init+0xb8>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4a62      	ldr	r2, [pc, #392]	@ (80013c0 <HAL_DMA_Init+0x1c4>)
 8001238:	4293      	cmp	r3, r2
 800123a:	d03b      	beq.n	80012b4 <HAL_DMA_Init+0xb8>
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a60      	ldr	r2, [pc, #384]	@ (80013c4 <HAL_DMA_Init+0x1c8>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d036      	beq.n	80012b4 <HAL_DMA_Init+0xb8>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4a5f      	ldr	r2, [pc, #380]	@ (80013c8 <HAL_DMA_Init+0x1cc>)
 800124c:	4293      	cmp	r3, r2
 800124e:	d031      	beq.n	80012b4 <HAL_DMA_Init+0xb8>
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a5d      	ldr	r2, [pc, #372]	@ (80013cc <HAL_DMA_Init+0x1d0>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d02c      	beq.n	80012b4 <HAL_DMA_Init+0xb8>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4a5c      	ldr	r2, [pc, #368]	@ (80013d0 <HAL_DMA_Init+0x1d4>)
 8001260:	4293      	cmp	r3, r2
 8001262:	d027      	beq.n	80012b4 <HAL_DMA_Init+0xb8>
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a5a      	ldr	r2, [pc, #360]	@ (80013d4 <HAL_DMA_Init+0x1d8>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d022      	beq.n	80012b4 <HAL_DMA_Init+0xb8>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4a59      	ldr	r2, [pc, #356]	@ (80013d8 <HAL_DMA_Init+0x1dc>)
 8001274:	4293      	cmp	r3, r2
 8001276:	d01d      	beq.n	80012b4 <HAL_DMA_Init+0xb8>
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a57      	ldr	r2, [pc, #348]	@ (80013dc <HAL_DMA_Init+0x1e0>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d018      	beq.n	80012b4 <HAL_DMA_Init+0xb8>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4a56      	ldr	r2, [pc, #344]	@ (80013e0 <HAL_DMA_Init+0x1e4>)
 8001288:	4293      	cmp	r3, r2
 800128a:	d013      	beq.n	80012b4 <HAL_DMA_Init+0xb8>
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a54      	ldr	r2, [pc, #336]	@ (80013e4 <HAL_DMA_Init+0x1e8>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d00e      	beq.n	80012b4 <HAL_DMA_Init+0xb8>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4a53      	ldr	r2, [pc, #332]	@ (80013e8 <HAL_DMA_Init+0x1ec>)
 800129c:	4293      	cmp	r3, r2
 800129e:	d009      	beq.n	80012b4 <HAL_DMA_Init+0xb8>
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a51      	ldr	r2, [pc, #324]	@ (80013ec <HAL_DMA_Init+0x1f0>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d004      	beq.n	80012b4 <HAL_DMA_Init+0xb8>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4a50      	ldr	r2, [pc, #320]	@ (80013f0 <HAL_DMA_Init+0x1f4>)
 80012b0:	4293      	cmp	r3, r2
 80012b2:	d101      	bne.n	80012b8 <HAL_DMA_Init+0xbc>
 80012b4:	2301      	movs	r3, #1
 80012b6:	e000      	b.n	80012ba <HAL_DMA_Init+0xbe>
 80012b8:	2300      	movs	r3, #0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	f000 813c 	beq.w	8001538 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2202      	movs	r2, #2
 80012c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2200      	movs	r2, #0
 80012cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a37      	ldr	r2, [pc, #220]	@ (80013b4 <HAL_DMA_Init+0x1b8>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d04a      	beq.n	8001370 <HAL_DMA_Init+0x174>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4a36      	ldr	r2, [pc, #216]	@ (80013b8 <HAL_DMA_Init+0x1bc>)
 80012e0:	4293      	cmp	r3, r2
 80012e2:	d045      	beq.n	8001370 <HAL_DMA_Init+0x174>
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a34      	ldr	r2, [pc, #208]	@ (80013bc <HAL_DMA_Init+0x1c0>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d040      	beq.n	8001370 <HAL_DMA_Init+0x174>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4a33      	ldr	r2, [pc, #204]	@ (80013c0 <HAL_DMA_Init+0x1c4>)
 80012f4:	4293      	cmp	r3, r2
 80012f6:	d03b      	beq.n	8001370 <HAL_DMA_Init+0x174>
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a31      	ldr	r2, [pc, #196]	@ (80013c4 <HAL_DMA_Init+0x1c8>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d036      	beq.n	8001370 <HAL_DMA_Init+0x174>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4a30      	ldr	r2, [pc, #192]	@ (80013c8 <HAL_DMA_Init+0x1cc>)
 8001308:	4293      	cmp	r3, r2
 800130a:	d031      	beq.n	8001370 <HAL_DMA_Init+0x174>
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a2e      	ldr	r2, [pc, #184]	@ (80013cc <HAL_DMA_Init+0x1d0>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d02c      	beq.n	8001370 <HAL_DMA_Init+0x174>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4a2d      	ldr	r2, [pc, #180]	@ (80013d0 <HAL_DMA_Init+0x1d4>)
 800131c:	4293      	cmp	r3, r2
 800131e:	d027      	beq.n	8001370 <HAL_DMA_Init+0x174>
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a2b      	ldr	r2, [pc, #172]	@ (80013d4 <HAL_DMA_Init+0x1d8>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d022      	beq.n	8001370 <HAL_DMA_Init+0x174>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4a2a      	ldr	r2, [pc, #168]	@ (80013d8 <HAL_DMA_Init+0x1dc>)
 8001330:	4293      	cmp	r3, r2
 8001332:	d01d      	beq.n	8001370 <HAL_DMA_Init+0x174>
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a28      	ldr	r2, [pc, #160]	@ (80013dc <HAL_DMA_Init+0x1e0>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d018      	beq.n	8001370 <HAL_DMA_Init+0x174>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4a27      	ldr	r2, [pc, #156]	@ (80013e0 <HAL_DMA_Init+0x1e4>)
 8001344:	4293      	cmp	r3, r2
 8001346:	d013      	beq.n	8001370 <HAL_DMA_Init+0x174>
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a25      	ldr	r2, [pc, #148]	@ (80013e4 <HAL_DMA_Init+0x1e8>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d00e      	beq.n	8001370 <HAL_DMA_Init+0x174>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4a24      	ldr	r2, [pc, #144]	@ (80013e8 <HAL_DMA_Init+0x1ec>)
 8001358:	4293      	cmp	r3, r2
 800135a:	d009      	beq.n	8001370 <HAL_DMA_Init+0x174>
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a22      	ldr	r2, [pc, #136]	@ (80013ec <HAL_DMA_Init+0x1f0>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d004      	beq.n	8001370 <HAL_DMA_Init+0x174>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4a21      	ldr	r2, [pc, #132]	@ (80013f0 <HAL_DMA_Init+0x1f4>)
 800136c:	4293      	cmp	r3, r2
 800136e:	d108      	bne.n	8001382 <HAL_DMA_Init+0x186>
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	681a      	ldr	r2, [r3, #0]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f022 0201 	bic.w	r2, r2, #1
 800137e:	601a      	str	r2, [r3, #0]
 8001380:	e007      	b.n	8001392 <HAL_DMA_Init+0x196>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	681a      	ldr	r2, [r3, #0]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f022 0201 	bic.w	r2, r2, #1
 8001390:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001392:	e02f      	b.n	80013f4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001394:	f7ff fe46 	bl	8001024 <HAL_GetTick>
 8001398:	4602      	mov	r2, r0
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	1ad3      	subs	r3, r2, r3
 800139e:	2b05      	cmp	r3, #5
 80013a0:	d928      	bls.n	80013f4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2220      	movs	r2, #32
 80013a6:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2203      	movs	r2, #3
 80013ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 80013b0:	2301      	movs	r3, #1
 80013b2:	e2ad      	b.n	8001910 <HAL_DMA_Init+0x714>
 80013b4:	40020010 	.word	0x40020010
 80013b8:	40020028 	.word	0x40020028
 80013bc:	40020040 	.word	0x40020040
 80013c0:	40020058 	.word	0x40020058
 80013c4:	40020070 	.word	0x40020070
 80013c8:	40020088 	.word	0x40020088
 80013cc:	400200a0 	.word	0x400200a0
 80013d0:	400200b8 	.word	0x400200b8
 80013d4:	40020410 	.word	0x40020410
 80013d8:	40020428 	.word	0x40020428
 80013dc:	40020440 	.word	0x40020440
 80013e0:	40020458 	.word	0x40020458
 80013e4:	40020470 	.word	0x40020470
 80013e8:	40020488 	.word	0x40020488
 80013ec:	400204a0 	.word	0x400204a0
 80013f0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f003 0301 	and.w	r3, r3, #1
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d1c8      	bne.n	8001394 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800140a:	697a      	ldr	r2, [r7, #20]
 800140c:	4b73      	ldr	r3, [pc, #460]	@ (80015dc <HAL_DMA_Init+0x3e0>)
 800140e:	4013      	ands	r3, r2
 8001410:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800141a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	691b      	ldr	r3, [r3, #16]
 8001420:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001426:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	699b      	ldr	r3, [r3, #24]
 800142c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001432:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6a1b      	ldr	r3, [r3, #32]
 8001438:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800143a:	697a      	ldr	r2, [r7, #20]
 800143c:	4313      	orrs	r3, r2
 800143e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001444:	2b04      	cmp	r3, #4
 8001446:	d107      	bne.n	8001458 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001450:	4313      	orrs	r3, r2
 8001452:	697a      	ldr	r2, [r7, #20]
 8001454:	4313      	orrs	r3, r2
 8001456:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	2b28      	cmp	r3, #40	@ 0x28
 800145e:	d903      	bls.n	8001468 <HAL_DMA_Init+0x26c>
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	2b2e      	cmp	r3, #46	@ 0x2e
 8001466:	d91f      	bls.n	80014a8 <HAL_DMA_Init+0x2ac>
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	2b3e      	cmp	r3, #62	@ 0x3e
 800146e:	d903      	bls.n	8001478 <HAL_DMA_Init+0x27c>
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	2b42      	cmp	r3, #66	@ 0x42
 8001476:	d917      	bls.n	80014a8 <HAL_DMA_Init+0x2ac>
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	2b46      	cmp	r3, #70	@ 0x46
 800147e:	d903      	bls.n	8001488 <HAL_DMA_Init+0x28c>
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	2b48      	cmp	r3, #72	@ 0x48
 8001486:	d90f      	bls.n	80014a8 <HAL_DMA_Init+0x2ac>
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	2b4e      	cmp	r3, #78	@ 0x4e
 800148e:	d903      	bls.n	8001498 <HAL_DMA_Init+0x29c>
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	2b52      	cmp	r3, #82	@ 0x52
 8001496:	d907      	bls.n	80014a8 <HAL_DMA_Init+0x2ac>
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	2b73      	cmp	r3, #115	@ 0x73
 800149e:	d905      	bls.n	80014ac <HAL_DMA_Init+0x2b0>
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	2b77      	cmp	r3, #119	@ 0x77
 80014a6:	d801      	bhi.n	80014ac <HAL_DMA_Init+0x2b0>
 80014a8:	2301      	movs	r3, #1
 80014aa:	e000      	b.n	80014ae <HAL_DMA_Init+0x2b2>
 80014ac:	2300      	movs	r3, #0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d003      	beq.n	80014ba <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80014b8:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	697a      	ldr	r2, [r7, #20]
 80014c0:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	695b      	ldr	r3, [r3, #20]
 80014c8:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	f023 0307 	bic.w	r3, r3, #7
 80014d0:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014d6:	697a      	ldr	r2, [r7, #20]
 80014d8:	4313      	orrs	r3, r2
 80014da:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014e0:	2b04      	cmp	r3, #4
 80014e2:	d117      	bne.n	8001514 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014e8:	697a      	ldr	r2, [r7, #20]
 80014ea:	4313      	orrs	r3, r2
 80014ec:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d00e      	beq.n	8001514 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80014f6:	6878      	ldr	r0, [r7, #4]
 80014f8:	f002 f8d0 	bl	800369c <DMA_CheckFifoParam>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d008      	beq.n	8001514 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2240      	movs	r2, #64	@ 0x40
 8001506:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2201      	movs	r2, #1
 800150c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8001510:	2301      	movs	r3, #1
 8001512:	e1fd      	b.n	8001910 <HAL_DMA_Init+0x714>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	697a      	ldr	r2, [r7, #20]
 800151a:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800151c:	6878      	ldr	r0, [r7, #4]
 800151e:	f002 f80b 	bl	8003538 <DMA_CalcBaseAndBitshift>
 8001522:	4603      	mov	r3, r0
 8001524:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800152a:	f003 031f 	and.w	r3, r3, #31
 800152e:	223f      	movs	r2, #63	@ 0x3f
 8001530:	409a      	lsls	r2, r3
 8001532:	68bb      	ldr	r3, [r7, #8]
 8001534:	609a      	str	r2, [r3, #8]
 8001536:	e0fd      	b.n	8001734 <HAL_DMA_Init+0x538>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a28      	ldr	r2, [pc, #160]	@ (80015e0 <HAL_DMA_Init+0x3e4>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d04a      	beq.n	80015d8 <HAL_DMA_Init+0x3dc>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4a27      	ldr	r2, [pc, #156]	@ (80015e4 <HAL_DMA_Init+0x3e8>)
 8001548:	4293      	cmp	r3, r2
 800154a:	d045      	beq.n	80015d8 <HAL_DMA_Init+0x3dc>
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a25      	ldr	r2, [pc, #148]	@ (80015e8 <HAL_DMA_Init+0x3ec>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d040      	beq.n	80015d8 <HAL_DMA_Init+0x3dc>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a24      	ldr	r2, [pc, #144]	@ (80015ec <HAL_DMA_Init+0x3f0>)
 800155c:	4293      	cmp	r3, r2
 800155e:	d03b      	beq.n	80015d8 <HAL_DMA_Init+0x3dc>
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a22      	ldr	r2, [pc, #136]	@ (80015f0 <HAL_DMA_Init+0x3f4>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d036      	beq.n	80015d8 <HAL_DMA_Init+0x3dc>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4a21      	ldr	r2, [pc, #132]	@ (80015f4 <HAL_DMA_Init+0x3f8>)
 8001570:	4293      	cmp	r3, r2
 8001572:	d031      	beq.n	80015d8 <HAL_DMA_Init+0x3dc>
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a1f      	ldr	r2, [pc, #124]	@ (80015f8 <HAL_DMA_Init+0x3fc>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d02c      	beq.n	80015d8 <HAL_DMA_Init+0x3dc>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4a1e      	ldr	r2, [pc, #120]	@ (80015fc <HAL_DMA_Init+0x400>)
 8001584:	4293      	cmp	r3, r2
 8001586:	d027      	beq.n	80015d8 <HAL_DMA_Init+0x3dc>
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a1c      	ldr	r2, [pc, #112]	@ (8001600 <HAL_DMA_Init+0x404>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d022      	beq.n	80015d8 <HAL_DMA_Init+0x3dc>
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a1b      	ldr	r2, [pc, #108]	@ (8001604 <HAL_DMA_Init+0x408>)
 8001598:	4293      	cmp	r3, r2
 800159a:	d01d      	beq.n	80015d8 <HAL_DMA_Init+0x3dc>
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a19      	ldr	r2, [pc, #100]	@ (8001608 <HAL_DMA_Init+0x40c>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d018      	beq.n	80015d8 <HAL_DMA_Init+0x3dc>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4a18      	ldr	r2, [pc, #96]	@ (800160c <HAL_DMA_Init+0x410>)
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d013      	beq.n	80015d8 <HAL_DMA_Init+0x3dc>
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a16      	ldr	r2, [pc, #88]	@ (8001610 <HAL_DMA_Init+0x414>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d00e      	beq.n	80015d8 <HAL_DMA_Init+0x3dc>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4a15      	ldr	r2, [pc, #84]	@ (8001614 <HAL_DMA_Init+0x418>)
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d009      	beq.n	80015d8 <HAL_DMA_Init+0x3dc>
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a13      	ldr	r2, [pc, #76]	@ (8001618 <HAL_DMA_Init+0x41c>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d004      	beq.n	80015d8 <HAL_DMA_Init+0x3dc>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a12      	ldr	r2, [pc, #72]	@ (800161c <HAL_DMA_Init+0x420>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d123      	bne.n	8001620 <HAL_DMA_Init+0x424>
 80015d8:	2301      	movs	r3, #1
 80015da:	e022      	b.n	8001622 <HAL_DMA_Init+0x426>
 80015dc:	fe10803f 	.word	0xfe10803f
 80015e0:	48022c08 	.word	0x48022c08
 80015e4:	48022c1c 	.word	0x48022c1c
 80015e8:	48022c30 	.word	0x48022c30
 80015ec:	48022c44 	.word	0x48022c44
 80015f0:	48022c58 	.word	0x48022c58
 80015f4:	48022c6c 	.word	0x48022c6c
 80015f8:	48022c80 	.word	0x48022c80
 80015fc:	48022c94 	.word	0x48022c94
 8001600:	58025408 	.word	0x58025408
 8001604:	5802541c 	.word	0x5802541c
 8001608:	58025430 	.word	0x58025430
 800160c:	58025444 	.word	0x58025444
 8001610:	58025458 	.word	0x58025458
 8001614:	5802546c 	.word	0x5802546c
 8001618:	58025480 	.word	0x58025480
 800161c:	58025494 	.word	0x58025494
 8001620:	2300      	movs	r3, #0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d07d      	beq.n	8001722 <HAL_DMA_Init+0x526>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a7f      	ldr	r2, [pc, #508]	@ (8001828 <HAL_DMA_Init+0x62c>)
 800162c:	4293      	cmp	r3, r2
 800162e:	d021      	beq.n	8001674 <HAL_DMA_Init+0x478>
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a7d      	ldr	r2, [pc, #500]	@ (800182c <HAL_DMA_Init+0x630>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d01c      	beq.n	8001674 <HAL_DMA_Init+0x478>
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a7c      	ldr	r2, [pc, #496]	@ (8001830 <HAL_DMA_Init+0x634>)
 8001640:	4293      	cmp	r3, r2
 8001642:	d017      	beq.n	8001674 <HAL_DMA_Init+0x478>
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a7a      	ldr	r2, [pc, #488]	@ (8001834 <HAL_DMA_Init+0x638>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d012      	beq.n	8001674 <HAL_DMA_Init+0x478>
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4a79      	ldr	r2, [pc, #484]	@ (8001838 <HAL_DMA_Init+0x63c>)
 8001654:	4293      	cmp	r3, r2
 8001656:	d00d      	beq.n	8001674 <HAL_DMA_Init+0x478>
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a77      	ldr	r2, [pc, #476]	@ (800183c <HAL_DMA_Init+0x640>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d008      	beq.n	8001674 <HAL_DMA_Init+0x478>
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a76      	ldr	r2, [pc, #472]	@ (8001840 <HAL_DMA_Init+0x644>)
 8001668:	4293      	cmp	r3, r2
 800166a:	d003      	beq.n	8001674 <HAL_DMA_Init+0x478>
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a74      	ldr	r2, [pc, #464]	@ (8001844 <HAL_DMA_Init+0x648>)
 8001672:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2202      	movs	r2, #2
 8001678:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2200      	movs	r2, #0
 8001680:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800168c:	697a      	ldr	r2, [r7, #20]
 800168e:	4b6e      	ldr	r3, [pc, #440]	@ (8001848 <HAL_DMA_Init+0x64c>)
 8001690:	4013      	ands	r3, r2
 8001692:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	689b      	ldr	r3, [r3, #8]
 8001698:	2b40      	cmp	r3, #64	@ 0x40
 800169a:	d008      	beq.n	80016ae <HAL_DMA_Init+0x4b2>
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	689b      	ldr	r3, [r3, #8]
 80016a0:	2b80      	cmp	r3, #128	@ 0x80
 80016a2:	d102      	bne.n	80016aa <HAL_DMA_Init+0x4ae>
 80016a4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80016a8:	e002      	b.n	80016b0 <HAL_DMA_Init+0x4b4>
 80016aa:	2300      	movs	r3, #0
 80016ac:	e000      	b.n	80016b0 <HAL_DMA_Init+0x4b4>
 80016ae:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80016b0:	687a      	ldr	r2, [r7, #4]
 80016b2:	68d2      	ldr	r2, [r2, #12]
 80016b4:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80016b6:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	691b      	ldr	r3, [r3, #16]
 80016bc:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80016be:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	695b      	ldr	r3, [r3, #20]
 80016c4:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80016c6:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	699b      	ldr	r3, [r3, #24]
 80016cc:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80016ce:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	69db      	ldr	r3, [r3, #28]
 80016d4:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80016d6:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6a1b      	ldr	r3, [r3, #32]
 80016dc:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80016de:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80016e0:	697a      	ldr	r2, [r7, #20]
 80016e2:	4313      	orrs	r3, r2
 80016e4:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	697a      	ldr	r2, [r7, #20]
 80016ec:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	461a      	mov	r2, r3
 80016f4:	4b55      	ldr	r3, [pc, #340]	@ (800184c <HAL_DMA_Init+0x650>)
 80016f6:	4413      	add	r3, r2
 80016f8:	4a55      	ldr	r2, [pc, #340]	@ (8001850 <HAL_DMA_Init+0x654>)
 80016fa:	fba2 2303 	umull	r2, r3, r2, r3
 80016fe:	091b      	lsrs	r3, r3, #4
 8001700:	009a      	lsls	r2, r3, #2
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001706:	6878      	ldr	r0, [r7, #4]
 8001708:	f001 ff16 	bl	8003538 <DMA_CalcBaseAndBitshift>
 800170c:	4603      	mov	r3, r0
 800170e:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001714:	f003 031f 	and.w	r3, r3, #31
 8001718:	2201      	movs	r2, #1
 800171a:	409a      	lsls	r2, r3
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	605a      	str	r2, [r3, #4]
 8001720:	e008      	b.n	8001734 <HAL_DMA_Init+0x538>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2240      	movs	r2, #64	@ 0x40
 8001726:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2203      	movs	r2, #3
 800172c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8001730:	2301      	movs	r3, #1
 8001732:	e0ed      	b.n	8001910 <HAL_DMA_Init+0x714>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a46      	ldr	r2, [pc, #280]	@ (8001854 <HAL_DMA_Init+0x658>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d072      	beq.n	8001824 <HAL_DMA_Init+0x628>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4a45      	ldr	r2, [pc, #276]	@ (8001858 <HAL_DMA_Init+0x65c>)
 8001744:	4293      	cmp	r3, r2
 8001746:	d06d      	beq.n	8001824 <HAL_DMA_Init+0x628>
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a43      	ldr	r2, [pc, #268]	@ (800185c <HAL_DMA_Init+0x660>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d068      	beq.n	8001824 <HAL_DMA_Init+0x628>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a42      	ldr	r2, [pc, #264]	@ (8001860 <HAL_DMA_Init+0x664>)
 8001758:	4293      	cmp	r3, r2
 800175a:	d063      	beq.n	8001824 <HAL_DMA_Init+0x628>
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a40      	ldr	r2, [pc, #256]	@ (8001864 <HAL_DMA_Init+0x668>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d05e      	beq.n	8001824 <HAL_DMA_Init+0x628>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a3f      	ldr	r2, [pc, #252]	@ (8001868 <HAL_DMA_Init+0x66c>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d059      	beq.n	8001824 <HAL_DMA_Init+0x628>
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a3d      	ldr	r2, [pc, #244]	@ (800186c <HAL_DMA_Init+0x670>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d054      	beq.n	8001824 <HAL_DMA_Init+0x628>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a3c      	ldr	r2, [pc, #240]	@ (8001870 <HAL_DMA_Init+0x674>)
 8001780:	4293      	cmp	r3, r2
 8001782:	d04f      	beq.n	8001824 <HAL_DMA_Init+0x628>
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a3a      	ldr	r2, [pc, #232]	@ (8001874 <HAL_DMA_Init+0x678>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d04a      	beq.n	8001824 <HAL_DMA_Init+0x628>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a39      	ldr	r2, [pc, #228]	@ (8001878 <HAL_DMA_Init+0x67c>)
 8001794:	4293      	cmp	r3, r2
 8001796:	d045      	beq.n	8001824 <HAL_DMA_Init+0x628>
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a37      	ldr	r2, [pc, #220]	@ (800187c <HAL_DMA_Init+0x680>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d040      	beq.n	8001824 <HAL_DMA_Init+0x628>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a36      	ldr	r2, [pc, #216]	@ (8001880 <HAL_DMA_Init+0x684>)
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d03b      	beq.n	8001824 <HAL_DMA_Init+0x628>
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a34      	ldr	r2, [pc, #208]	@ (8001884 <HAL_DMA_Init+0x688>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d036      	beq.n	8001824 <HAL_DMA_Init+0x628>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4a33      	ldr	r2, [pc, #204]	@ (8001888 <HAL_DMA_Init+0x68c>)
 80017bc:	4293      	cmp	r3, r2
 80017be:	d031      	beq.n	8001824 <HAL_DMA_Init+0x628>
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a31      	ldr	r2, [pc, #196]	@ (800188c <HAL_DMA_Init+0x690>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d02c      	beq.n	8001824 <HAL_DMA_Init+0x628>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a30      	ldr	r2, [pc, #192]	@ (8001890 <HAL_DMA_Init+0x694>)
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d027      	beq.n	8001824 <HAL_DMA_Init+0x628>
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a13      	ldr	r2, [pc, #76]	@ (8001828 <HAL_DMA_Init+0x62c>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d022      	beq.n	8001824 <HAL_DMA_Init+0x628>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a12      	ldr	r2, [pc, #72]	@ (800182c <HAL_DMA_Init+0x630>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d01d      	beq.n	8001824 <HAL_DMA_Init+0x628>
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a10      	ldr	r2, [pc, #64]	@ (8001830 <HAL_DMA_Init+0x634>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d018      	beq.n	8001824 <HAL_DMA_Init+0x628>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a0f      	ldr	r2, [pc, #60]	@ (8001834 <HAL_DMA_Init+0x638>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d013      	beq.n	8001824 <HAL_DMA_Init+0x628>
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a0d      	ldr	r2, [pc, #52]	@ (8001838 <HAL_DMA_Init+0x63c>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d00e      	beq.n	8001824 <HAL_DMA_Init+0x628>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a0c      	ldr	r2, [pc, #48]	@ (800183c <HAL_DMA_Init+0x640>)
 800180c:	4293      	cmp	r3, r2
 800180e:	d009      	beq.n	8001824 <HAL_DMA_Init+0x628>
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a0a      	ldr	r2, [pc, #40]	@ (8001840 <HAL_DMA_Init+0x644>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d004      	beq.n	8001824 <HAL_DMA_Init+0x628>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a09      	ldr	r2, [pc, #36]	@ (8001844 <HAL_DMA_Init+0x648>)
 8001820:	4293      	cmp	r3, r2
 8001822:	d137      	bne.n	8001894 <HAL_DMA_Init+0x698>
 8001824:	2301      	movs	r3, #1
 8001826:	e036      	b.n	8001896 <HAL_DMA_Init+0x69a>
 8001828:	58025408 	.word	0x58025408
 800182c:	5802541c 	.word	0x5802541c
 8001830:	58025430 	.word	0x58025430
 8001834:	58025444 	.word	0x58025444
 8001838:	58025458 	.word	0x58025458
 800183c:	5802546c 	.word	0x5802546c
 8001840:	58025480 	.word	0x58025480
 8001844:	58025494 	.word	0x58025494
 8001848:	fffe000f 	.word	0xfffe000f
 800184c:	a7fdabf8 	.word	0xa7fdabf8
 8001850:	cccccccd 	.word	0xcccccccd
 8001854:	40020010 	.word	0x40020010
 8001858:	40020028 	.word	0x40020028
 800185c:	40020040 	.word	0x40020040
 8001860:	40020058 	.word	0x40020058
 8001864:	40020070 	.word	0x40020070
 8001868:	40020088 	.word	0x40020088
 800186c:	400200a0 	.word	0x400200a0
 8001870:	400200b8 	.word	0x400200b8
 8001874:	40020410 	.word	0x40020410
 8001878:	40020428 	.word	0x40020428
 800187c:	40020440 	.word	0x40020440
 8001880:	40020458 	.word	0x40020458
 8001884:	40020470 	.word	0x40020470
 8001888:	40020488 	.word	0x40020488
 800188c:	400204a0 	.word	0x400204a0
 8001890:	400204b8 	.word	0x400204b8
 8001894:	2300      	movs	r3, #0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d032      	beq.n	8001900 <HAL_DMA_Init+0x704>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800189a:	6878      	ldr	r0, [r7, #4]
 800189c:	f001 ff7a 	bl	8003794 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	2b80      	cmp	r3, #128	@ 0x80
 80018a6:	d102      	bne.n	80018ae <HAL_DMA_Init+0x6b2>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2200      	movs	r2, #0
 80018ac:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	685a      	ldr	r2, [r3, #4]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018b6:	b2d2      	uxtb	r2, r2
 80018b8:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80018be:	687a      	ldr	r2, [r7, #4]
 80018c0:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80018c2:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d010      	beq.n	80018ee <HAL_DMA_Init+0x6f2>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	2b08      	cmp	r3, #8
 80018d2:	d80c      	bhi.n	80018ee <HAL_DMA_Init+0x6f2>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80018d4:	6878      	ldr	r0, [r7, #4]
 80018d6:	f001 fff7 	bl	80038c8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80018de:	2200      	movs	r2, #0
 80018e0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018e6:	687a      	ldr	r2, [r7, #4]
 80018e8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80018ea:	605a      	str	r2, [r3, #4]
 80018ec:	e008      	b.n	8001900 <HAL_DMA_Init+0x704>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2200      	movs	r2, #0
 80018f2:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2200      	movs	r2, #0
 80018f8:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2200      	movs	r2, #0
 80018fe:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2200      	movs	r2, #0
 8001904:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2201      	movs	r2, #1
 800190a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800190e:	2300      	movs	r3, #0
}
 8001910:	4618      	mov	r0, r3
 8001912:	3718      	adds	r7, #24
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}

08001918 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b086      	sub	sp, #24
 800191c:	af00      	add	r7, sp, #0
 800191e:	60f8      	str	r0, [r7, #12]
 8001920:	60b9      	str	r1, [r7, #8]
 8001922:	607a      	str	r2, [r7, #4]
 8001924:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001926:	2300      	movs	r3, #0
 8001928:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d101      	bne.n	8001934 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8001930:	2301      	movs	r3, #1
 8001932:	e226      	b.n	8001d82 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800193a:	2b01      	cmp	r3, #1
 800193c:	d101      	bne.n	8001942 <HAL_DMA_Start_IT+0x2a>
 800193e:	2302      	movs	r3, #2
 8001940:	e21f      	b.n	8001d82 <HAL_DMA_Start_IT+0x46a>
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	2201      	movs	r2, #1
 8001946:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001950:	b2db      	uxtb	r3, r3
 8001952:	2b01      	cmp	r3, #1
 8001954:	f040 820a 	bne.w	8001d6c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	2202      	movs	r2, #2
 800195c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	2200      	movs	r2, #0
 8001964:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a68      	ldr	r2, [pc, #416]	@ (8001b0c <HAL_DMA_Start_IT+0x1f4>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d04a      	beq.n	8001a06 <HAL_DMA_Start_IT+0xee>
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a66      	ldr	r2, [pc, #408]	@ (8001b10 <HAL_DMA_Start_IT+0x1f8>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d045      	beq.n	8001a06 <HAL_DMA_Start_IT+0xee>
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a65      	ldr	r2, [pc, #404]	@ (8001b14 <HAL_DMA_Start_IT+0x1fc>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d040      	beq.n	8001a06 <HAL_DMA_Start_IT+0xee>
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a63      	ldr	r2, [pc, #396]	@ (8001b18 <HAL_DMA_Start_IT+0x200>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d03b      	beq.n	8001a06 <HAL_DMA_Start_IT+0xee>
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a62      	ldr	r2, [pc, #392]	@ (8001b1c <HAL_DMA_Start_IT+0x204>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d036      	beq.n	8001a06 <HAL_DMA_Start_IT+0xee>
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a60      	ldr	r2, [pc, #384]	@ (8001b20 <HAL_DMA_Start_IT+0x208>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d031      	beq.n	8001a06 <HAL_DMA_Start_IT+0xee>
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a5f      	ldr	r2, [pc, #380]	@ (8001b24 <HAL_DMA_Start_IT+0x20c>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d02c      	beq.n	8001a06 <HAL_DMA_Start_IT+0xee>
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a5d      	ldr	r2, [pc, #372]	@ (8001b28 <HAL_DMA_Start_IT+0x210>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d027      	beq.n	8001a06 <HAL_DMA_Start_IT+0xee>
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a5c      	ldr	r2, [pc, #368]	@ (8001b2c <HAL_DMA_Start_IT+0x214>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d022      	beq.n	8001a06 <HAL_DMA_Start_IT+0xee>
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a5a      	ldr	r2, [pc, #360]	@ (8001b30 <HAL_DMA_Start_IT+0x218>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d01d      	beq.n	8001a06 <HAL_DMA_Start_IT+0xee>
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a59      	ldr	r2, [pc, #356]	@ (8001b34 <HAL_DMA_Start_IT+0x21c>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d018      	beq.n	8001a06 <HAL_DMA_Start_IT+0xee>
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a57      	ldr	r2, [pc, #348]	@ (8001b38 <HAL_DMA_Start_IT+0x220>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d013      	beq.n	8001a06 <HAL_DMA_Start_IT+0xee>
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a56      	ldr	r2, [pc, #344]	@ (8001b3c <HAL_DMA_Start_IT+0x224>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d00e      	beq.n	8001a06 <HAL_DMA_Start_IT+0xee>
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a54      	ldr	r2, [pc, #336]	@ (8001b40 <HAL_DMA_Start_IT+0x228>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d009      	beq.n	8001a06 <HAL_DMA_Start_IT+0xee>
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a53      	ldr	r2, [pc, #332]	@ (8001b44 <HAL_DMA_Start_IT+0x22c>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d004      	beq.n	8001a06 <HAL_DMA_Start_IT+0xee>
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a51      	ldr	r2, [pc, #324]	@ (8001b48 <HAL_DMA_Start_IT+0x230>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d108      	bne.n	8001a18 <HAL_DMA_Start_IT+0x100>
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f022 0201 	bic.w	r2, r2, #1
 8001a14:	601a      	str	r2, [r3, #0]
 8001a16:	e007      	b.n	8001a28 <HAL_DMA_Start_IT+0x110>
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f022 0201 	bic.w	r2, r2, #1
 8001a26:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	687a      	ldr	r2, [r7, #4]
 8001a2c:	68b9      	ldr	r1, [r7, #8]
 8001a2e:	68f8      	ldr	r0, [r7, #12]
 8001a30:	f001 fb9e 	bl	8003170 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a34      	ldr	r2, [pc, #208]	@ (8001b0c <HAL_DMA_Start_IT+0x1f4>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d04a      	beq.n	8001ad4 <HAL_DMA_Start_IT+0x1bc>
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a33      	ldr	r2, [pc, #204]	@ (8001b10 <HAL_DMA_Start_IT+0x1f8>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d045      	beq.n	8001ad4 <HAL_DMA_Start_IT+0x1bc>
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a31      	ldr	r2, [pc, #196]	@ (8001b14 <HAL_DMA_Start_IT+0x1fc>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d040      	beq.n	8001ad4 <HAL_DMA_Start_IT+0x1bc>
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a30      	ldr	r2, [pc, #192]	@ (8001b18 <HAL_DMA_Start_IT+0x200>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d03b      	beq.n	8001ad4 <HAL_DMA_Start_IT+0x1bc>
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a2e      	ldr	r2, [pc, #184]	@ (8001b1c <HAL_DMA_Start_IT+0x204>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d036      	beq.n	8001ad4 <HAL_DMA_Start_IT+0x1bc>
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a2d      	ldr	r2, [pc, #180]	@ (8001b20 <HAL_DMA_Start_IT+0x208>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d031      	beq.n	8001ad4 <HAL_DMA_Start_IT+0x1bc>
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a2b      	ldr	r2, [pc, #172]	@ (8001b24 <HAL_DMA_Start_IT+0x20c>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d02c      	beq.n	8001ad4 <HAL_DMA_Start_IT+0x1bc>
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a2a      	ldr	r2, [pc, #168]	@ (8001b28 <HAL_DMA_Start_IT+0x210>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d027      	beq.n	8001ad4 <HAL_DMA_Start_IT+0x1bc>
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a28      	ldr	r2, [pc, #160]	@ (8001b2c <HAL_DMA_Start_IT+0x214>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d022      	beq.n	8001ad4 <HAL_DMA_Start_IT+0x1bc>
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a27      	ldr	r2, [pc, #156]	@ (8001b30 <HAL_DMA_Start_IT+0x218>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d01d      	beq.n	8001ad4 <HAL_DMA_Start_IT+0x1bc>
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a25      	ldr	r2, [pc, #148]	@ (8001b34 <HAL_DMA_Start_IT+0x21c>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d018      	beq.n	8001ad4 <HAL_DMA_Start_IT+0x1bc>
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a24      	ldr	r2, [pc, #144]	@ (8001b38 <HAL_DMA_Start_IT+0x220>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d013      	beq.n	8001ad4 <HAL_DMA_Start_IT+0x1bc>
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a22      	ldr	r2, [pc, #136]	@ (8001b3c <HAL_DMA_Start_IT+0x224>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d00e      	beq.n	8001ad4 <HAL_DMA_Start_IT+0x1bc>
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a21      	ldr	r2, [pc, #132]	@ (8001b40 <HAL_DMA_Start_IT+0x228>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d009      	beq.n	8001ad4 <HAL_DMA_Start_IT+0x1bc>
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a1f      	ldr	r2, [pc, #124]	@ (8001b44 <HAL_DMA_Start_IT+0x22c>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d004      	beq.n	8001ad4 <HAL_DMA_Start_IT+0x1bc>
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a1e      	ldr	r2, [pc, #120]	@ (8001b48 <HAL_DMA_Start_IT+0x230>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d101      	bne.n	8001ad8 <HAL_DMA_Start_IT+0x1c0>
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e000      	b.n	8001ada <HAL_DMA_Start_IT+0x1c2>
 8001ad8:	2300      	movs	r3, #0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d036      	beq.n	8001b4c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f023 021e 	bic.w	r2, r3, #30
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f042 0216 	orr.w	r2, r2, #22
 8001af0:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d03e      	beq.n	8001b78 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	681a      	ldr	r2, [r3, #0]
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f042 0208 	orr.w	r2, r2, #8
 8001b08:	601a      	str	r2, [r3, #0]
 8001b0a:	e035      	b.n	8001b78 <HAL_DMA_Start_IT+0x260>
 8001b0c:	40020010 	.word	0x40020010
 8001b10:	40020028 	.word	0x40020028
 8001b14:	40020040 	.word	0x40020040
 8001b18:	40020058 	.word	0x40020058
 8001b1c:	40020070 	.word	0x40020070
 8001b20:	40020088 	.word	0x40020088
 8001b24:	400200a0 	.word	0x400200a0
 8001b28:	400200b8 	.word	0x400200b8
 8001b2c:	40020410 	.word	0x40020410
 8001b30:	40020428 	.word	0x40020428
 8001b34:	40020440 	.word	0x40020440
 8001b38:	40020458 	.word	0x40020458
 8001b3c:	40020470 	.word	0x40020470
 8001b40:	40020488 	.word	0x40020488
 8001b44:	400204a0 	.word	0x400204a0
 8001b48:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f023 020e 	bic.w	r2, r3, #14
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f042 020a 	orr.w	r2, r2, #10
 8001b5e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d007      	beq.n	8001b78 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f042 0204 	orr.w	r2, r2, #4
 8001b76:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a83      	ldr	r2, [pc, #524]	@ (8001d8c <HAL_DMA_Start_IT+0x474>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d072      	beq.n	8001c68 <HAL_DMA_Start_IT+0x350>
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a82      	ldr	r2, [pc, #520]	@ (8001d90 <HAL_DMA_Start_IT+0x478>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d06d      	beq.n	8001c68 <HAL_DMA_Start_IT+0x350>
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a80      	ldr	r2, [pc, #512]	@ (8001d94 <HAL_DMA_Start_IT+0x47c>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d068      	beq.n	8001c68 <HAL_DMA_Start_IT+0x350>
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a7f      	ldr	r2, [pc, #508]	@ (8001d98 <HAL_DMA_Start_IT+0x480>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d063      	beq.n	8001c68 <HAL_DMA_Start_IT+0x350>
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a7d      	ldr	r2, [pc, #500]	@ (8001d9c <HAL_DMA_Start_IT+0x484>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d05e      	beq.n	8001c68 <HAL_DMA_Start_IT+0x350>
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a7c      	ldr	r2, [pc, #496]	@ (8001da0 <HAL_DMA_Start_IT+0x488>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d059      	beq.n	8001c68 <HAL_DMA_Start_IT+0x350>
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a7a      	ldr	r2, [pc, #488]	@ (8001da4 <HAL_DMA_Start_IT+0x48c>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d054      	beq.n	8001c68 <HAL_DMA_Start_IT+0x350>
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a79      	ldr	r2, [pc, #484]	@ (8001da8 <HAL_DMA_Start_IT+0x490>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d04f      	beq.n	8001c68 <HAL_DMA_Start_IT+0x350>
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a77      	ldr	r2, [pc, #476]	@ (8001dac <HAL_DMA_Start_IT+0x494>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d04a      	beq.n	8001c68 <HAL_DMA_Start_IT+0x350>
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a76      	ldr	r2, [pc, #472]	@ (8001db0 <HAL_DMA_Start_IT+0x498>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d045      	beq.n	8001c68 <HAL_DMA_Start_IT+0x350>
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a74      	ldr	r2, [pc, #464]	@ (8001db4 <HAL_DMA_Start_IT+0x49c>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d040      	beq.n	8001c68 <HAL_DMA_Start_IT+0x350>
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a73      	ldr	r2, [pc, #460]	@ (8001db8 <HAL_DMA_Start_IT+0x4a0>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d03b      	beq.n	8001c68 <HAL_DMA_Start_IT+0x350>
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a71      	ldr	r2, [pc, #452]	@ (8001dbc <HAL_DMA_Start_IT+0x4a4>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d036      	beq.n	8001c68 <HAL_DMA_Start_IT+0x350>
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a70      	ldr	r2, [pc, #448]	@ (8001dc0 <HAL_DMA_Start_IT+0x4a8>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d031      	beq.n	8001c68 <HAL_DMA_Start_IT+0x350>
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a6e      	ldr	r2, [pc, #440]	@ (8001dc4 <HAL_DMA_Start_IT+0x4ac>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d02c      	beq.n	8001c68 <HAL_DMA_Start_IT+0x350>
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a6d      	ldr	r2, [pc, #436]	@ (8001dc8 <HAL_DMA_Start_IT+0x4b0>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d027      	beq.n	8001c68 <HAL_DMA_Start_IT+0x350>
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a6b      	ldr	r2, [pc, #428]	@ (8001dcc <HAL_DMA_Start_IT+0x4b4>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d022      	beq.n	8001c68 <HAL_DMA_Start_IT+0x350>
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a6a      	ldr	r2, [pc, #424]	@ (8001dd0 <HAL_DMA_Start_IT+0x4b8>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d01d      	beq.n	8001c68 <HAL_DMA_Start_IT+0x350>
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a68      	ldr	r2, [pc, #416]	@ (8001dd4 <HAL_DMA_Start_IT+0x4bc>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d018      	beq.n	8001c68 <HAL_DMA_Start_IT+0x350>
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a67      	ldr	r2, [pc, #412]	@ (8001dd8 <HAL_DMA_Start_IT+0x4c0>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d013      	beq.n	8001c68 <HAL_DMA_Start_IT+0x350>
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a65      	ldr	r2, [pc, #404]	@ (8001ddc <HAL_DMA_Start_IT+0x4c4>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d00e      	beq.n	8001c68 <HAL_DMA_Start_IT+0x350>
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a64      	ldr	r2, [pc, #400]	@ (8001de0 <HAL_DMA_Start_IT+0x4c8>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d009      	beq.n	8001c68 <HAL_DMA_Start_IT+0x350>
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a62      	ldr	r2, [pc, #392]	@ (8001de4 <HAL_DMA_Start_IT+0x4cc>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d004      	beq.n	8001c68 <HAL_DMA_Start_IT+0x350>
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a61      	ldr	r2, [pc, #388]	@ (8001de8 <HAL_DMA_Start_IT+0x4d0>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d101      	bne.n	8001c6c <HAL_DMA_Start_IT+0x354>
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e000      	b.n	8001c6e <HAL_DMA_Start_IT+0x356>
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d01a      	beq.n	8001ca8 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d007      	beq.n	8001c90 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c8a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001c8e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d007      	beq.n	8001ca8 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001ca2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001ca6:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a37      	ldr	r2, [pc, #220]	@ (8001d8c <HAL_DMA_Start_IT+0x474>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d04a      	beq.n	8001d48 <HAL_DMA_Start_IT+0x430>
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a36      	ldr	r2, [pc, #216]	@ (8001d90 <HAL_DMA_Start_IT+0x478>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d045      	beq.n	8001d48 <HAL_DMA_Start_IT+0x430>
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a34      	ldr	r2, [pc, #208]	@ (8001d94 <HAL_DMA_Start_IT+0x47c>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d040      	beq.n	8001d48 <HAL_DMA_Start_IT+0x430>
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a33      	ldr	r2, [pc, #204]	@ (8001d98 <HAL_DMA_Start_IT+0x480>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d03b      	beq.n	8001d48 <HAL_DMA_Start_IT+0x430>
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a31      	ldr	r2, [pc, #196]	@ (8001d9c <HAL_DMA_Start_IT+0x484>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d036      	beq.n	8001d48 <HAL_DMA_Start_IT+0x430>
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a30      	ldr	r2, [pc, #192]	@ (8001da0 <HAL_DMA_Start_IT+0x488>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d031      	beq.n	8001d48 <HAL_DMA_Start_IT+0x430>
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a2e      	ldr	r2, [pc, #184]	@ (8001da4 <HAL_DMA_Start_IT+0x48c>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d02c      	beq.n	8001d48 <HAL_DMA_Start_IT+0x430>
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a2d      	ldr	r2, [pc, #180]	@ (8001da8 <HAL_DMA_Start_IT+0x490>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d027      	beq.n	8001d48 <HAL_DMA_Start_IT+0x430>
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a2b      	ldr	r2, [pc, #172]	@ (8001dac <HAL_DMA_Start_IT+0x494>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d022      	beq.n	8001d48 <HAL_DMA_Start_IT+0x430>
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a2a      	ldr	r2, [pc, #168]	@ (8001db0 <HAL_DMA_Start_IT+0x498>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d01d      	beq.n	8001d48 <HAL_DMA_Start_IT+0x430>
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a28      	ldr	r2, [pc, #160]	@ (8001db4 <HAL_DMA_Start_IT+0x49c>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d018      	beq.n	8001d48 <HAL_DMA_Start_IT+0x430>
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a27      	ldr	r2, [pc, #156]	@ (8001db8 <HAL_DMA_Start_IT+0x4a0>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d013      	beq.n	8001d48 <HAL_DMA_Start_IT+0x430>
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a25      	ldr	r2, [pc, #148]	@ (8001dbc <HAL_DMA_Start_IT+0x4a4>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d00e      	beq.n	8001d48 <HAL_DMA_Start_IT+0x430>
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a24      	ldr	r2, [pc, #144]	@ (8001dc0 <HAL_DMA_Start_IT+0x4a8>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d009      	beq.n	8001d48 <HAL_DMA_Start_IT+0x430>
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a22      	ldr	r2, [pc, #136]	@ (8001dc4 <HAL_DMA_Start_IT+0x4ac>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d004      	beq.n	8001d48 <HAL_DMA_Start_IT+0x430>
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a21      	ldr	r2, [pc, #132]	@ (8001dc8 <HAL_DMA_Start_IT+0x4b0>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d108      	bne.n	8001d5a <HAL_DMA_Start_IT+0x442>
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f042 0201 	orr.w	r2, r2, #1
 8001d56:	601a      	str	r2, [r3, #0]
 8001d58:	e012      	b.n	8001d80 <HAL_DMA_Start_IT+0x468>
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f042 0201 	orr.w	r2, r2, #1
 8001d68:	601a      	str	r2, [r3, #0]
 8001d6a:	e009      	b.n	8001d80 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001d72:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	2200      	movs	r2, #0
 8001d78:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8001d80:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3718      	adds	r7, #24
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	40020010 	.word	0x40020010
 8001d90:	40020028 	.word	0x40020028
 8001d94:	40020040 	.word	0x40020040
 8001d98:	40020058 	.word	0x40020058
 8001d9c:	40020070 	.word	0x40020070
 8001da0:	40020088 	.word	0x40020088
 8001da4:	400200a0 	.word	0x400200a0
 8001da8:	400200b8 	.word	0x400200b8
 8001dac:	40020410 	.word	0x40020410
 8001db0:	40020428 	.word	0x40020428
 8001db4:	40020440 	.word	0x40020440
 8001db8:	40020458 	.word	0x40020458
 8001dbc:	40020470 	.word	0x40020470
 8001dc0:	40020488 	.word	0x40020488
 8001dc4:	400204a0 	.word	0x400204a0
 8001dc8:	400204b8 	.word	0x400204b8
 8001dcc:	58025408 	.word	0x58025408
 8001dd0:	5802541c 	.word	0x5802541c
 8001dd4:	58025430 	.word	0x58025430
 8001dd8:	58025444 	.word	0x58025444
 8001ddc:	58025458 	.word	0x58025458
 8001de0:	5802546c 	.word	0x5802546c
 8001de4:	58025480 	.word	0x58025480
 8001de8:	58025494 	.word	0x58025494

08001dec <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b084      	sub	sp, #16
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d101      	bne.n	8001dfe <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e237      	b.n	800226e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	2b02      	cmp	r3, #2
 8001e08:	d004      	beq.n	8001e14 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2280      	movs	r2, #128	@ 0x80
 8001e0e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001e10:	2301      	movs	r3, #1
 8001e12:	e22c      	b.n	800226e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a5c      	ldr	r2, [pc, #368]	@ (8001f8c <HAL_DMA_Abort_IT+0x1a0>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d04a      	beq.n	8001eb4 <HAL_DMA_Abort_IT+0xc8>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a5b      	ldr	r2, [pc, #364]	@ (8001f90 <HAL_DMA_Abort_IT+0x1a4>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d045      	beq.n	8001eb4 <HAL_DMA_Abort_IT+0xc8>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a59      	ldr	r2, [pc, #356]	@ (8001f94 <HAL_DMA_Abort_IT+0x1a8>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d040      	beq.n	8001eb4 <HAL_DMA_Abort_IT+0xc8>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a58      	ldr	r2, [pc, #352]	@ (8001f98 <HAL_DMA_Abort_IT+0x1ac>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d03b      	beq.n	8001eb4 <HAL_DMA_Abort_IT+0xc8>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a56      	ldr	r2, [pc, #344]	@ (8001f9c <HAL_DMA_Abort_IT+0x1b0>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d036      	beq.n	8001eb4 <HAL_DMA_Abort_IT+0xc8>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a55      	ldr	r2, [pc, #340]	@ (8001fa0 <HAL_DMA_Abort_IT+0x1b4>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d031      	beq.n	8001eb4 <HAL_DMA_Abort_IT+0xc8>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a53      	ldr	r2, [pc, #332]	@ (8001fa4 <HAL_DMA_Abort_IT+0x1b8>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d02c      	beq.n	8001eb4 <HAL_DMA_Abort_IT+0xc8>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a52      	ldr	r2, [pc, #328]	@ (8001fa8 <HAL_DMA_Abort_IT+0x1bc>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d027      	beq.n	8001eb4 <HAL_DMA_Abort_IT+0xc8>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a50      	ldr	r2, [pc, #320]	@ (8001fac <HAL_DMA_Abort_IT+0x1c0>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d022      	beq.n	8001eb4 <HAL_DMA_Abort_IT+0xc8>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a4f      	ldr	r2, [pc, #316]	@ (8001fb0 <HAL_DMA_Abort_IT+0x1c4>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d01d      	beq.n	8001eb4 <HAL_DMA_Abort_IT+0xc8>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a4d      	ldr	r2, [pc, #308]	@ (8001fb4 <HAL_DMA_Abort_IT+0x1c8>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d018      	beq.n	8001eb4 <HAL_DMA_Abort_IT+0xc8>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a4c      	ldr	r2, [pc, #304]	@ (8001fb8 <HAL_DMA_Abort_IT+0x1cc>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d013      	beq.n	8001eb4 <HAL_DMA_Abort_IT+0xc8>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a4a      	ldr	r2, [pc, #296]	@ (8001fbc <HAL_DMA_Abort_IT+0x1d0>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d00e      	beq.n	8001eb4 <HAL_DMA_Abort_IT+0xc8>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a49      	ldr	r2, [pc, #292]	@ (8001fc0 <HAL_DMA_Abort_IT+0x1d4>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d009      	beq.n	8001eb4 <HAL_DMA_Abort_IT+0xc8>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a47      	ldr	r2, [pc, #284]	@ (8001fc4 <HAL_DMA_Abort_IT+0x1d8>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d004      	beq.n	8001eb4 <HAL_DMA_Abort_IT+0xc8>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a46      	ldr	r2, [pc, #280]	@ (8001fc8 <HAL_DMA_Abort_IT+0x1dc>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d101      	bne.n	8001eb8 <HAL_DMA_Abort_IT+0xcc>
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e000      	b.n	8001eba <HAL_DMA_Abort_IT+0xce>
 8001eb8:	2300      	movs	r3, #0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	f000 8086 	beq.w	8001fcc <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2204      	movs	r2, #4
 8001ec4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a2f      	ldr	r2, [pc, #188]	@ (8001f8c <HAL_DMA_Abort_IT+0x1a0>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d04a      	beq.n	8001f68 <HAL_DMA_Abort_IT+0x17c>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a2e      	ldr	r2, [pc, #184]	@ (8001f90 <HAL_DMA_Abort_IT+0x1a4>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d045      	beq.n	8001f68 <HAL_DMA_Abort_IT+0x17c>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a2c      	ldr	r2, [pc, #176]	@ (8001f94 <HAL_DMA_Abort_IT+0x1a8>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d040      	beq.n	8001f68 <HAL_DMA_Abort_IT+0x17c>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a2b      	ldr	r2, [pc, #172]	@ (8001f98 <HAL_DMA_Abort_IT+0x1ac>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d03b      	beq.n	8001f68 <HAL_DMA_Abort_IT+0x17c>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a29      	ldr	r2, [pc, #164]	@ (8001f9c <HAL_DMA_Abort_IT+0x1b0>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d036      	beq.n	8001f68 <HAL_DMA_Abort_IT+0x17c>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a28      	ldr	r2, [pc, #160]	@ (8001fa0 <HAL_DMA_Abort_IT+0x1b4>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d031      	beq.n	8001f68 <HAL_DMA_Abort_IT+0x17c>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a26      	ldr	r2, [pc, #152]	@ (8001fa4 <HAL_DMA_Abort_IT+0x1b8>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d02c      	beq.n	8001f68 <HAL_DMA_Abort_IT+0x17c>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a25      	ldr	r2, [pc, #148]	@ (8001fa8 <HAL_DMA_Abort_IT+0x1bc>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d027      	beq.n	8001f68 <HAL_DMA_Abort_IT+0x17c>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a23      	ldr	r2, [pc, #140]	@ (8001fac <HAL_DMA_Abort_IT+0x1c0>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d022      	beq.n	8001f68 <HAL_DMA_Abort_IT+0x17c>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a22      	ldr	r2, [pc, #136]	@ (8001fb0 <HAL_DMA_Abort_IT+0x1c4>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d01d      	beq.n	8001f68 <HAL_DMA_Abort_IT+0x17c>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a20      	ldr	r2, [pc, #128]	@ (8001fb4 <HAL_DMA_Abort_IT+0x1c8>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d018      	beq.n	8001f68 <HAL_DMA_Abort_IT+0x17c>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a1f      	ldr	r2, [pc, #124]	@ (8001fb8 <HAL_DMA_Abort_IT+0x1cc>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d013      	beq.n	8001f68 <HAL_DMA_Abort_IT+0x17c>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a1d      	ldr	r2, [pc, #116]	@ (8001fbc <HAL_DMA_Abort_IT+0x1d0>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d00e      	beq.n	8001f68 <HAL_DMA_Abort_IT+0x17c>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a1c      	ldr	r2, [pc, #112]	@ (8001fc0 <HAL_DMA_Abort_IT+0x1d4>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d009      	beq.n	8001f68 <HAL_DMA_Abort_IT+0x17c>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a1a      	ldr	r2, [pc, #104]	@ (8001fc4 <HAL_DMA_Abort_IT+0x1d8>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d004      	beq.n	8001f68 <HAL_DMA_Abort_IT+0x17c>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a19      	ldr	r2, [pc, #100]	@ (8001fc8 <HAL_DMA_Abort_IT+0x1dc>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d108      	bne.n	8001f7a <HAL_DMA_Abort_IT+0x18e>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f022 0201 	bic.w	r2, r2, #1
 8001f76:	601a      	str	r2, [r3, #0]
 8001f78:	e178      	b.n	800226c <HAL_DMA_Abort_IT+0x480>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f022 0201 	bic.w	r2, r2, #1
 8001f88:	601a      	str	r2, [r3, #0]
 8001f8a:	e16f      	b.n	800226c <HAL_DMA_Abort_IT+0x480>
 8001f8c:	40020010 	.word	0x40020010
 8001f90:	40020028 	.word	0x40020028
 8001f94:	40020040 	.word	0x40020040
 8001f98:	40020058 	.word	0x40020058
 8001f9c:	40020070 	.word	0x40020070
 8001fa0:	40020088 	.word	0x40020088
 8001fa4:	400200a0 	.word	0x400200a0
 8001fa8:	400200b8 	.word	0x400200b8
 8001fac:	40020410 	.word	0x40020410
 8001fb0:	40020428 	.word	0x40020428
 8001fb4:	40020440 	.word	0x40020440
 8001fb8:	40020458 	.word	0x40020458
 8001fbc:	40020470 	.word	0x40020470
 8001fc0:	40020488 	.word	0x40020488
 8001fc4:	400204a0 	.word	0x400204a0
 8001fc8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	681a      	ldr	r2, [r3, #0]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f022 020e 	bic.w	r2, r2, #14
 8001fda:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a6c      	ldr	r2, [pc, #432]	@ (8002194 <HAL_DMA_Abort_IT+0x3a8>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d04a      	beq.n	800207c <HAL_DMA_Abort_IT+0x290>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a6b      	ldr	r2, [pc, #428]	@ (8002198 <HAL_DMA_Abort_IT+0x3ac>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d045      	beq.n	800207c <HAL_DMA_Abort_IT+0x290>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a69      	ldr	r2, [pc, #420]	@ (800219c <HAL_DMA_Abort_IT+0x3b0>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d040      	beq.n	800207c <HAL_DMA_Abort_IT+0x290>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a68      	ldr	r2, [pc, #416]	@ (80021a0 <HAL_DMA_Abort_IT+0x3b4>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d03b      	beq.n	800207c <HAL_DMA_Abort_IT+0x290>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a66      	ldr	r2, [pc, #408]	@ (80021a4 <HAL_DMA_Abort_IT+0x3b8>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d036      	beq.n	800207c <HAL_DMA_Abort_IT+0x290>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a65      	ldr	r2, [pc, #404]	@ (80021a8 <HAL_DMA_Abort_IT+0x3bc>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d031      	beq.n	800207c <HAL_DMA_Abort_IT+0x290>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a63      	ldr	r2, [pc, #396]	@ (80021ac <HAL_DMA_Abort_IT+0x3c0>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d02c      	beq.n	800207c <HAL_DMA_Abort_IT+0x290>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a62      	ldr	r2, [pc, #392]	@ (80021b0 <HAL_DMA_Abort_IT+0x3c4>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d027      	beq.n	800207c <HAL_DMA_Abort_IT+0x290>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a60      	ldr	r2, [pc, #384]	@ (80021b4 <HAL_DMA_Abort_IT+0x3c8>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d022      	beq.n	800207c <HAL_DMA_Abort_IT+0x290>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a5f      	ldr	r2, [pc, #380]	@ (80021b8 <HAL_DMA_Abort_IT+0x3cc>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d01d      	beq.n	800207c <HAL_DMA_Abort_IT+0x290>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a5d      	ldr	r2, [pc, #372]	@ (80021bc <HAL_DMA_Abort_IT+0x3d0>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d018      	beq.n	800207c <HAL_DMA_Abort_IT+0x290>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a5c      	ldr	r2, [pc, #368]	@ (80021c0 <HAL_DMA_Abort_IT+0x3d4>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d013      	beq.n	800207c <HAL_DMA_Abort_IT+0x290>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a5a      	ldr	r2, [pc, #360]	@ (80021c4 <HAL_DMA_Abort_IT+0x3d8>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d00e      	beq.n	800207c <HAL_DMA_Abort_IT+0x290>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a59      	ldr	r2, [pc, #356]	@ (80021c8 <HAL_DMA_Abort_IT+0x3dc>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d009      	beq.n	800207c <HAL_DMA_Abort_IT+0x290>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a57      	ldr	r2, [pc, #348]	@ (80021cc <HAL_DMA_Abort_IT+0x3e0>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d004      	beq.n	800207c <HAL_DMA_Abort_IT+0x290>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a56      	ldr	r2, [pc, #344]	@ (80021d0 <HAL_DMA_Abort_IT+0x3e4>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d108      	bne.n	800208e <HAL_DMA_Abort_IT+0x2a2>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f022 0201 	bic.w	r2, r2, #1
 800208a:	601a      	str	r2, [r3, #0]
 800208c:	e007      	b.n	800209e <HAL_DMA_Abort_IT+0x2b2>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f022 0201 	bic.w	r2, r2, #1
 800209c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a3c      	ldr	r2, [pc, #240]	@ (8002194 <HAL_DMA_Abort_IT+0x3a8>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d072      	beq.n	800218e <HAL_DMA_Abort_IT+0x3a2>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a3a      	ldr	r2, [pc, #232]	@ (8002198 <HAL_DMA_Abort_IT+0x3ac>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d06d      	beq.n	800218e <HAL_DMA_Abort_IT+0x3a2>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a39      	ldr	r2, [pc, #228]	@ (800219c <HAL_DMA_Abort_IT+0x3b0>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d068      	beq.n	800218e <HAL_DMA_Abort_IT+0x3a2>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a37      	ldr	r2, [pc, #220]	@ (80021a0 <HAL_DMA_Abort_IT+0x3b4>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d063      	beq.n	800218e <HAL_DMA_Abort_IT+0x3a2>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a36      	ldr	r2, [pc, #216]	@ (80021a4 <HAL_DMA_Abort_IT+0x3b8>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d05e      	beq.n	800218e <HAL_DMA_Abort_IT+0x3a2>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a34      	ldr	r2, [pc, #208]	@ (80021a8 <HAL_DMA_Abort_IT+0x3bc>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d059      	beq.n	800218e <HAL_DMA_Abort_IT+0x3a2>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a33      	ldr	r2, [pc, #204]	@ (80021ac <HAL_DMA_Abort_IT+0x3c0>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d054      	beq.n	800218e <HAL_DMA_Abort_IT+0x3a2>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a31      	ldr	r2, [pc, #196]	@ (80021b0 <HAL_DMA_Abort_IT+0x3c4>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d04f      	beq.n	800218e <HAL_DMA_Abort_IT+0x3a2>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a30      	ldr	r2, [pc, #192]	@ (80021b4 <HAL_DMA_Abort_IT+0x3c8>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d04a      	beq.n	800218e <HAL_DMA_Abort_IT+0x3a2>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a2e      	ldr	r2, [pc, #184]	@ (80021b8 <HAL_DMA_Abort_IT+0x3cc>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d045      	beq.n	800218e <HAL_DMA_Abort_IT+0x3a2>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a2d      	ldr	r2, [pc, #180]	@ (80021bc <HAL_DMA_Abort_IT+0x3d0>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d040      	beq.n	800218e <HAL_DMA_Abort_IT+0x3a2>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a2b      	ldr	r2, [pc, #172]	@ (80021c0 <HAL_DMA_Abort_IT+0x3d4>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d03b      	beq.n	800218e <HAL_DMA_Abort_IT+0x3a2>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a2a      	ldr	r2, [pc, #168]	@ (80021c4 <HAL_DMA_Abort_IT+0x3d8>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d036      	beq.n	800218e <HAL_DMA_Abort_IT+0x3a2>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a28      	ldr	r2, [pc, #160]	@ (80021c8 <HAL_DMA_Abort_IT+0x3dc>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d031      	beq.n	800218e <HAL_DMA_Abort_IT+0x3a2>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a27      	ldr	r2, [pc, #156]	@ (80021cc <HAL_DMA_Abort_IT+0x3e0>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d02c      	beq.n	800218e <HAL_DMA_Abort_IT+0x3a2>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a25      	ldr	r2, [pc, #148]	@ (80021d0 <HAL_DMA_Abort_IT+0x3e4>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d027      	beq.n	800218e <HAL_DMA_Abort_IT+0x3a2>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a24      	ldr	r2, [pc, #144]	@ (80021d4 <HAL_DMA_Abort_IT+0x3e8>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d022      	beq.n	800218e <HAL_DMA_Abort_IT+0x3a2>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a22      	ldr	r2, [pc, #136]	@ (80021d8 <HAL_DMA_Abort_IT+0x3ec>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d01d      	beq.n	800218e <HAL_DMA_Abort_IT+0x3a2>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a21      	ldr	r2, [pc, #132]	@ (80021dc <HAL_DMA_Abort_IT+0x3f0>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d018      	beq.n	800218e <HAL_DMA_Abort_IT+0x3a2>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a1f      	ldr	r2, [pc, #124]	@ (80021e0 <HAL_DMA_Abort_IT+0x3f4>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d013      	beq.n	800218e <HAL_DMA_Abort_IT+0x3a2>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a1e      	ldr	r2, [pc, #120]	@ (80021e4 <HAL_DMA_Abort_IT+0x3f8>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d00e      	beq.n	800218e <HAL_DMA_Abort_IT+0x3a2>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a1c      	ldr	r2, [pc, #112]	@ (80021e8 <HAL_DMA_Abort_IT+0x3fc>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d009      	beq.n	800218e <HAL_DMA_Abort_IT+0x3a2>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a1b      	ldr	r2, [pc, #108]	@ (80021ec <HAL_DMA_Abort_IT+0x400>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d004      	beq.n	800218e <HAL_DMA_Abort_IT+0x3a2>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a19      	ldr	r2, [pc, #100]	@ (80021f0 <HAL_DMA_Abort_IT+0x404>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d132      	bne.n	80021f4 <HAL_DMA_Abort_IT+0x408>
 800218e:	2301      	movs	r3, #1
 8002190:	e031      	b.n	80021f6 <HAL_DMA_Abort_IT+0x40a>
 8002192:	bf00      	nop
 8002194:	40020010 	.word	0x40020010
 8002198:	40020028 	.word	0x40020028
 800219c:	40020040 	.word	0x40020040
 80021a0:	40020058 	.word	0x40020058
 80021a4:	40020070 	.word	0x40020070
 80021a8:	40020088 	.word	0x40020088
 80021ac:	400200a0 	.word	0x400200a0
 80021b0:	400200b8 	.word	0x400200b8
 80021b4:	40020410 	.word	0x40020410
 80021b8:	40020428 	.word	0x40020428
 80021bc:	40020440 	.word	0x40020440
 80021c0:	40020458 	.word	0x40020458
 80021c4:	40020470 	.word	0x40020470
 80021c8:	40020488 	.word	0x40020488
 80021cc:	400204a0 	.word	0x400204a0
 80021d0:	400204b8 	.word	0x400204b8
 80021d4:	58025408 	.word	0x58025408
 80021d8:	5802541c 	.word	0x5802541c
 80021dc:	58025430 	.word	0x58025430
 80021e0:	58025444 	.word	0x58025444
 80021e4:	58025458 	.word	0x58025458
 80021e8:	5802546c 	.word	0x5802546c
 80021ec:	58025480 	.word	0x58025480
 80021f0:	58025494 	.word	0x58025494
 80021f4:	2300      	movs	r3, #0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d028      	beq.n	800224c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002204:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002208:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800220e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002214:	f003 031f 	and.w	r3, r3, #31
 8002218:	2201      	movs	r2, #1
 800221a:	409a      	lsls	r2, r3
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002224:	687a      	ldr	r2, [r7, #4]
 8002226:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002228:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800222e:	2b00      	cmp	r3, #0
 8002230:	d00c      	beq.n	800224c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800223c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002240:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002246:	687a      	ldr	r2, [r7, #4]
 8002248:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800224a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2201      	movs	r2, #1
 8002250:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2200      	movs	r2, #0
 8002258:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002260:	2b00      	cmp	r3, #0
 8002262:	d003      	beq.n	800226c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800226c:	2300      	movs	r3, #0
}
 800226e:	4618      	mov	r0, r3
 8002270:	3710      	adds	r7, #16
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop

08002278 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b08a      	sub	sp, #40	@ 0x28
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002280:	2300      	movs	r3, #0
 8002282:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002284:	4b67      	ldr	r3, [pc, #412]	@ (8002424 <HAL_DMA_IRQHandler+0x1ac>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a67      	ldr	r2, [pc, #412]	@ (8002428 <HAL_DMA_IRQHandler+0x1b0>)
 800228a:	fba2 2303 	umull	r2, r3, r2, r3
 800228e:	0a9b      	lsrs	r3, r3, #10
 8002290:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002296:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800229c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800229e:	6a3b      	ldr	r3, [r7, #32]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80022a4:	69fb      	ldr	r3, [r7, #28]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a5f      	ldr	r2, [pc, #380]	@ (800242c <HAL_DMA_IRQHandler+0x1b4>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d04a      	beq.n	800234a <HAL_DMA_IRQHandler+0xd2>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a5d      	ldr	r2, [pc, #372]	@ (8002430 <HAL_DMA_IRQHandler+0x1b8>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d045      	beq.n	800234a <HAL_DMA_IRQHandler+0xd2>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a5c      	ldr	r2, [pc, #368]	@ (8002434 <HAL_DMA_IRQHandler+0x1bc>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d040      	beq.n	800234a <HAL_DMA_IRQHandler+0xd2>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a5a      	ldr	r2, [pc, #360]	@ (8002438 <HAL_DMA_IRQHandler+0x1c0>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d03b      	beq.n	800234a <HAL_DMA_IRQHandler+0xd2>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a59      	ldr	r2, [pc, #356]	@ (800243c <HAL_DMA_IRQHandler+0x1c4>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d036      	beq.n	800234a <HAL_DMA_IRQHandler+0xd2>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a57      	ldr	r2, [pc, #348]	@ (8002440 <HAL_DMA_IRQHandler+0x1c8>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d031      	beq.n	800234a <HAL_DMA_IRQHandler+0xd2>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a56      	ldr	r2, [pc, #344]	@ (8002444 <HAL_DMA_IRQHandler+0x1cc>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d02c      	beq.n	800234a <HAL_DMA_IRQHandler+0xd2>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a54      	ldr	r2, [pc, #336]	@ (8002448 <HAL_DMA_IRQHandler+0x1d0>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d027      	beq.n	800234a <HAL_DMA_IRQHandler+0xd2>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a53      	ldr	r2, [pc, #332]	@ (800244c <HAL_DMA_IRQHandler+0x1d4>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d022      	beq.n	800234a <HAL_DMA_IRQHandler+0xd2>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a51      	ldr	r2, [pc, #324]	@ (8002450 <HAL_DMA_IRQHandler+0x1d8>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d01d      	beq.n	800234a <HAL_DMA_IRQHandler+0xd2>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a50      	ldr	r2, [pc, #320]	@ (8002454 <HAL_DMA_IRQHandler+0x1dc>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d018      	beq.n	800234a <HAL_DMA_IRQHandler+0xd2>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a4e      	ldr	r2, [pc, #312]	@ (8002458 <HAL_DMA_IRQHandler+0x1e0>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d013      	beq.n	800234a <HAL_DMA_IRQHandler+0xd2>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a4d      	ldr	r2, [pc, #308]	@ (800245c <HAL_DMA_IRQHandler+0x1e4>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d00e      	beq.n	800234a <HAL_DMA_IRQHandler+0xd2>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a4b      	ldr	r2, [pc, #300]	@ (8002460 <HAL_DMA_IRQHandler+0x1e8>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d009      	beq.n	800234a <HAL_DMA_IRQHandler+0xd2>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a4a      	ldr	r2, [pc, #296]	@ (8002464 <HAL_DMA_IRQHandler+0x1ec>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d004      	beq.n	800234a <HAL_DMA_IRQHandler+0xd2>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a48      	ldr	r2, [pc, #288]	@ (8002468 <HAL_DMA_IRQHandler+0x1f0>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d101      	bne.n	800234e <HAL_DMA_IRQHandler+0xd6>
 800234a:	2301      	movs	r3, #1
 800234c:	e000      	b.n	8002350 <HAL_DMA_IRQHandler+0xd8>
 800234e:	2300      	movs	r3, #0
 8002350:	2b00      	cmp	r3, #0
 8002352:	f000 842b 	beq.w	8002bac <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800235a:	f003 031f 	and.w	r3, r3, #31
 800235e:	2208      	movs	r2, #8
 8002360:	409a      	lsls	r2, r3
 8002362:	69bb      	ldr	r3, [r7, #24]
 8002364:	4013      	ands	r3, r2
 8002366:	2b00      	cmp	r3, #0
 8002368:	f000 80a2 	beq.w	80024b0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a2e      	ldr	r2, [pc, #184]	@ (800242c <HAL_DMA_IRQHandler+0x1b4>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d04a      	beq.n	800240c <HAL_DMA_IRQHandler+0x194>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a2d      	ldr	r2, [pc, #180]	@ (8002430 <HAL_DMA_IRQHandler+0x1b8>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d045      	beq.n	800240c <HAL_DMA_IRQHandler+0x194>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a2b      	ldr	r2, [pc, #172]	@ (8002434 <HAL_DMA_IRQHandler+0x1bc>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d040      	beq.n	800240c <HAL_DMA_IRQHandler+0x194>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a2a      	ldr	r2, [pc, #168]	@ (8002438 <HAL_DMA_IRQHandler+0x1c0>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d03b      	beq.n	800240c <HAL_DMA_IRQHandler+0x194>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a28      	ldr	r2, [pc, #160]	@ (800243c <HAL_DMA_IRQHandler+0x1c4>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d036      	beq.n	800240c <HAL_DMA_IRQHandler+0x194>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a27      	ldr	r2, [pc, #156]	@ (8002440 <HAL_DMA_IRQHandler+0x1c8>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d031      	beq.n	800240c <HAL_DMA_IRQHandler+0x194>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a25      	ldr	r2, [pc, #148]	@ (8002444 <HAL_DMA_IRQHandler+0x1cc>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d02c      	beq.n	800240c <HAL_DMA_IRQHandler+0x194>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a24      	ldr	r2, [pc, #144]	@ (8002448 <HAL_DMA_IRQHandler+0x1d0>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d027      	beq.n	800240c <HAL_DMA_IRQHandler+0x194>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a22      	ldr	r2, [pc, #136]	@ (800244c <HAL_DMA_IRQHandler+0x1d4>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d022      	beq.n	800240c <HAL_DMA_IRQHandler+0x194>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a21      	ldr	r2, [pc, #132]	@ (8002450 <HAL_DMA_IRQHandler+0x1d8>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d01d      	beq.n	800240c <HAL_DMA_IRQHandler+0x194>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a1f      	ldr	r2, [pc, #124]	@ (8002454 <HAL_DMA_IRQHandler+0x1dc>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d018      	beq.n	800240c <HAL_DMA_IRQHandler+0x194>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a1e      	ldr	r2, [pc, #120]	@ (8002458 <HAL_DMA_IRQHandler+0x1e0>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d013      	beq.n	800240c <HAL_DMA_IRQHandler+0x194>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a1c      	ldr	r2, [pc, #112]	@ (800245c <HAL_DMA_IRQHandler+0x1e4>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d00e      	beq.n	800240c <HAL_DMA_IRQHandler+0x194>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a1b      	ldr	r2, [pc, #108]	@ (8002460 <HAL_DMA_IRQHandler+0x1e8>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d009      	beq.n	800240c <HAL_DMA_IRQHandler+0x194>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a19      	ldr	r2, [pc, #100]	@ (8002464 <HAL_DMA_IRQHandler+0x1ec>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d004      	beq.n	800240c <HAL_DMA_IRQHandler+0x194>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a18      	ldr	r2, [pc, #96]	@ (8002468 <HAL_DMA_IRQHandler+0x1f0>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d12f      	bne.n	800246c <HAL_DMA_IRQHandler+0x1f4>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 0304 	and.w	r3, r3, #4
 8002416:	2b00      	cmp	r3, #0
 8002418:	bf14      	ite	ne
 800241a:	2301      	movne	r3, #1
 800241c:	2300      	moveq	r3, #0
 800241e:	b2db      	uxtb	r3, r3
 8002420:	e02e      	b.n	8002480 <HAL_DMA_IRQHandler+0x208>
 8002422:	bf00      	nop
 8002424:	24000000 	.word	0x24000000
 8002428:	1b4e81b5 	.word	0x1b4e81b5
 800242c:	40020010 	.word	0x40020010
 8002430:	40020028 	.word	0x40020028
 8002434:	40020040 	.word	0x40020040
 8002438:	40020058 	.word	0x40020058
 800243c:	40020070 	.word	0x40020070
 8002440:	40020088 	.word	0x40020088
 8002444:	400200a0 	.word	0x400200a0
 8002448:	400200b8 	.word	0x400200b8
 800244c:	40020410 	.word	0x40020410
 8002450:	40020428 	.word	0x40020428
 8002454:	40020440 	.word	0x40020440
 8002458:	40020458 	.word	0x40020458
 800245c:	40020470 	.word	0x40020470
 8002460:	40020488 	.word	0x40020488
 8002464:	400204a0 	.word	0x400204a0
 8002468:	400204b8 	.word	0x400204b8
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0308 	and.w	r3, r3, #8
 8002476:	2b00      	cmp	r3, #0
 8002478:	bf14      	ite	ne
 800247a:	2301      	movne	r3, #1
 800247c:	2300      	moveq	r3, #0
 800247e:	b2db      	uxtb	r3, r3
 8002480:	2b00      	cmp	r3, #0
 8002482:	d015      	beq.n	80024b0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f022 0204 	bic.w	r2, r2, #4
 8002492:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002498:	f003 031f 	and.w	r3, r3, #31
 800249c:	2208      	movs	r2, #8
 800249e:	409a      	lsls	r2, r3
 80024a0:	6a3b      	ldr	r3, [r7, #32]
 80024a2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024a8:	f043 0201 	orr.w	r2, r3, #1
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024b4:	f003 031f 	and.w	r3, r3, #31
 80024b8:	69ba      	ldr	r2, [r7, #24]
 80024ba:	fa22 f303 	lsr.w	r3, r2, r3
 80024be:	f003 0301 	and.w	r3, r3, #1
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d06e      	beq.n	80025a4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a69      	ldr	r2, [pc, #420]	@ (8002670 <HAL_DMA_IRQHandler+0x3f8>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d04a      	beq.n	8002566 <HAL_DMA_IRQHandler+0x2ee>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a67      	ldr	r2, [pc, #412]	@ (8002674 <HAL_DMA_IRQHandler+0x3fc>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d045      	beq.n	8002566 <HAL_DMA_IRQHandler+0x2ee>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a66      	ldr	r2, [pc, #408]	@ (8002678 <HAL_DMA_IRQHandler+0x400>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d040      	beq.n	8002566 <HAL_DMA_IRQHandler+0x2ee>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a64      	ldr	r2, [pc, #400]	@ (800267c <HAL_DMA_IRQHandler+0x404>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d03b      	beq.n	8002566 <HAL_DMA_IRQHandler+0x2ee>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a63      	ldr	r2, [pc, #396]	@ (8002680 <HAL_DMA_IRQHandler+0x408>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d036      	beq.n	8002566 <HAL_DMA_IRQHandler+0x2ee>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a61      	ldr	r2, [pc, #388]	@ (8002684 <HAL_DMA_IRQHandler+0x40c>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d031      	beq.n	8002566 <HAL_DMA_IRQHandler+0x2ee>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a60      	ldr	r2, [pc, #384]	@ (8002688 <HAL_DMA_IRQHandler+0x410>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d02c      	beq.n	8002566 <HAL_DMA_IRQHandler+0x2ee>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a5e      	ldr	r2, [pc, #376]	@ (800268c <HAL_DMA_IRQHandler+0x414>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d027      	beq.n	8002566 <HAL_DMA_IRQHandler+0x2ee>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a5d      	ldr	r2, [pc, #372]	@ (8002690 <HAL_DMA_IRQHandler+0x418>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d022      	beq.n	8002566 <HAL_DMA_IRQHandler+0x2ee>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a5b      	ldr	r2, [pc, #364]	@ (8002694 <HAL_DMA_IRQHandler+0x41c>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d01d      	beq.n	8002566 <HAL_DMA_IRQHandler+0x2ee>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a5a      	ldr	r2, [pc, #360]	@ (8002698 <HAL_DMA_IRQHandler+0x420>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d018      	beq.n	8002566 <HAL_DMA_IRQHandler+0x2ee>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a58      	ldr	r2, [pc, #352]	@ (800269c <HAL_DMA_IRQHandler+0x424>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d013      	beq.n	8002566 <HAL_DMA_IRQHandler+0x2ee>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a57      	ldr	r2, [pc, #348]	@ (80026a0 <HAL_DMA_IRQHandler+0x428>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d00e      	beq.n	8002566 <HAL_DMA_IRQHandler+0x2ee>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a55      	ldr	r2, [pc, #340]	@ (80026a4 <HAL_DMA_IRQHandler+0x42c>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d009      	beq.n	8002566 <HAL_DMA_IRQHandler+0x2ee>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a54      	ldr	r2, [pc, #336]	@ (80026a8 <HAL_DMA_IRQHandler+0x430>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d004      	beq.n	8002566 <HAL_DMA_IRQHandler+0x2ee>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a52      	ldr	r2, [pc, #328]	@ (80026ac <HAL_DMA_IRQHandler+0x434>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d10a      	bne.n	800257c <HAL_DMA_IRQHandler+0x304>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	695b      	ldr	r3, [r3, #20]
 800256c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002570:	2b00      	cmp	r3, #0
 8002572:	bf14      	ite	ne
 8002574:	2301      	movne	r3, #1
 8002576:	2300      	moveq	r3, #0
 8002578:	b2db      	uxtb	r3, r3
 800257a:	e003      	b.n	8002584 <HAL_DMA_IRQHandler+0x30c>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	2300      	movs	r3, #0
 8002584:	2b00      	cmp	r3, #0
 8002586:	d00d      	beq.n	80025a4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800258c:	f003 031f 	and.w	r3, r3, #31
 8002590:	2201      	movs	r2, #1
 8002592:	409a      	lsls	r2, r3
 8002594:	6a3b      	ldr	r3, [r7, #32]
 8002596:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800259c:	f043 0202 	orr.w	r2, r3, #2
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025a8:	f003 031f 	and.w	r3, r3, #31
 80025ac:	2204      	movs	r2, #4
 80025ae:	409a      	lsls	r2, r3
 80025b0:	69bb      	ldr	r3, [r7, #24]
 80025b2:	4013      	ands	r3, r2
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	f000 808f 	beq.w	80026d8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a2c      	ldr	r2, [pc, #176]	@ (8002670 <HAL_DMA_IRQHandler+0x3f8>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d04a      	beq.n	800265a <HAL_DMA_IRQHandler+0x3e2>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a2a      	ldr	r2, [pc, #168]	@ (8002674 <HAL_DMA_IRQHandler+0x3fc>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d045      	beq.n	800265a <HAL_DMA_IRQHandler+0x3e2>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a29      	ldr	r2, [pc, #164]	@ (8002678 <HAL_DMA_IRQHandler+0x400>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d040      	beq.n	800265a <HAL_DMA_IRQHandler+0x3e2>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a27      	ldr	r2, [pc, #156]	@ (800267c <HAL_DMA_IRQHandler+0x404>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d03b      	beq.n	800265a <HAL_DMA_IRQHandler+0x3e2>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a26      	ldr	r2, [pc, #152]	@ (8002680 <HAL_DMA_IRQHandler+0x408>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d036      	beq.n	800265a <HAL_DMA_IRQHandler+0x3e2>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a24      	ldr	r2, [pc, #144]	@ (8002684 <HAL_DMA_IRQHandler+0x40c>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d031      	beq.n	800265a <HAL_DMA_IRQHandler+0x3e2>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a23      	ldr	r2, [pc, #140]	@ (8002688 <HAL_DMA_IRQHandler+0x410>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d02c      	beq.n	800265a <HAL_DMA_IRQHandler+0x3e2>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a21      	ldr	r2, [pc, #132]	@ (800268c <HAL_DMA_IRQHandler+0x414>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d027      	beq.n	800265a <HAL_DMA_IRQHandler+0x3e2>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a20      	ldr	r2, [pc, #128]	@ (8002690 <HAL_DMA_IRQHandler+0x418>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d022      	beq.n	800265a <HAL_DMA_IRQHandler+0x3e2>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a1e      	ldr	r2, [pc, #120]	@ (8002694 <HAL_DMA_IRQHandler+0x41c>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d01d      	beq.n	800265a <HAL_DMA_IRQHandler+0x3e2>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a1d      	ldr	r2, [pc, #116]	@ (8002698 <HAL_DMA_IRQHandler+0x420>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d018      	beq.n	800265a <HAL_DMA_IRQHandler+0x3e2>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a1b      	ldr	r2, [pc, #108]	@ (800269c <HAL_DMA_IRQHandler+0x424>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d013      	beq.n	800265a <HAL_DMA_IRQHandler+0x3e2>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a1a      	ldr	r2, [pc, #104]	@ (80026a0 <HAL_DMA_IRQHandler+0x428>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d00e      	beq.n	800265a <HAL_DMA_IRQHandler+0x3e2>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a18      	ldr	r2, [pc, #96]	@ (80026a4 <HAL_DMA_IRQHandler+0x42c>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d009      	beq.n	800265a <HAL_DMA_IRQHandler+0x3e2>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a17      	ldr	r2, [pc, #92]	@ (80026a8 <HAL_DMA_IRQHandler+0x430>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d004      	beq.n	800265a <HAL_DMA_IRQHandler+0x3e2>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a15      	ldr	r2, [pc, #84]	@ (80026ac <HAL_DMA_IRQHandler+0x434>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d12a      	bne.n	80026b0 <HAL_DMA_IRQHandler+0x438>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 0302 	and.w	r3, r3, #2
 8002664:	2b00      	cmp	r3, #0
 8002666:	bf14      	ite	ne
 8002668:	2301      	movne	r3, #1
 800266a:	2300      	moveq	r3, #0
 800266c:	b2db      	uxtb	r3, r3
 800266e:	e023      	b.n	80026b8 <HAL_DMA_IRQHandler+0x440>
 8002670:	40020010 	.word	0x40020010
 8002674:	40020028 	.word	0x40020028
 8002678:	40020040 	.word	0x40020040
 800267c:	40020058 	.word	0x40020058
 8002680:	40020070 	.word	0x40020070
 8002684:	40020088 	.word	0x40020088
 8002688:	400200a0 	.word	0x400200a0
 800268c:	400200b8 	.word	0x400200b8
 8002690:	40020410 	.word	0x40020410
 8002694:	40020428 	.word	0x40020428
 8002698:	40020440 	.word	0x40020440
 800269c:	40020458 	.word	0x40020458
 80026a0:	40020470 	.word	0x40020470
 80026a4:	40020488 	.word	0x40020488
 80026a8:	400204a0 	.word	0x400204a0
 80026ac:	400204b8 	.word	0x400204b8
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	2300      	movs	r3, #0
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d00d      	beq.n	80026d8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026c0:	f003 031f 	and.w	r3, r3, #31
 80026c4:	2204      	movs	r2, #4
 80026c6:	409a      	lsls	r2, r3
 80026c8:	6a3b      	ldr	r3, [r7, #32]
 80026ca:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026d0:	f043 0204 	orr.w	r2, r3, #4
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026dc:	f003 031f 	and.w	r3, r3, #31
 80026e0:	2210      	movs	r2, #16
 80026e2:	409a      	lsls	r2, r3
 80026e4:	69bb      	ldr	r3, [r7, #24]
 80026e6:	4013      	ands	r3, r2
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	f000 80a6 	beq.w	800283a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a85      	ldr	r2, [pc, #532]	@ (8002908 <HAL_DMA_IRQHandler+0x690>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d04a      	beq.n	800278e <HAL_DMA_IRQHandler+0x516>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a83      	ldr	r2, [pc, #524]	@ (800290c <HAL_DMA_IRQHandler+0x694>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d045      	beq.n	800278e <HAL_DMA_IRQHandler+0x516>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a82      	ldr	r2, [pc, #520]	@ (8002910 <HAL_DMA_IRQHandler+0x698>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d040      	beq.n	800278e <HAL_DMA_IRQHandler+0x516>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a80      	ldr	r2, [pc, #512]	@ (8002914 <HAL_DMA_IRQHandler+0x69c>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d03b      	beq.n	800278e <HAL_DMA_IRQHandler+0x516>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a7f      	ldr	r2, [pc, #508]	@ (8002918 <HAL_DMA_IRQHandler+0x6a0>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d036      	beq.n	800278e <HAL_DMA_IRQHandler+0x516>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a7d      	ldr	r2, [pc, #500]	@ (800291c <HAL_DMA_IRQHandler+0x6a4>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d031      	beq.n	800278e <HAL_DMA_IRQHandler+0x516>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a7c      	ldr	r2, [pc, #496]	@ (8002920 <HAL_DMA_IRQHandler+0x6a8>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d02c      	beq.n	800278e <HAL_DMA_IRQHandler+0x516>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a7a      	ldr	r2, [pc, #488]	@ (8002924 <HAL_DMA_IRQHandler+0x6ac>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d027      	beq.n	800278e <HAL_DMA_IRQHandler+0x516>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a79      	ldr	r2, [pc, #484]	@ (8002928 <HAL_DMA_IRQHandler+0x6b0>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d022      	beq.n	800278e <HAL_DMA_IRQHandler+0x516>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a77      	ldr	r2, [pc, #476]	@ (800292c <HAL_DMA_IRQHandler+0x6b4>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d01d      	beq.n	800278e <HAL_DMA_IRQHandler+0x516>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a76      	ldr	r2, [pc, #472]	@ (8002930 <HAL_DMA_IRQHandler+0x6b8>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d018      	beq.n	800278e <HAL_DMA_IRQHandler+0x516>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a74      	ldr	r2, [pc, #464]	@ (8002934 <HAL_DMA_IRQHandler+0x6bc>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d013      	beq.n	800278e <HAL_DMA_IRQHandler+0x516>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a73      	ldr	r2, [pc, #460]	@ (8002938 <HAL_DMA_IRQHandler+0x6c0>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d00e      	beq.n	800278e <HAL_DMA_IRQHandler+0x516>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a71      	ldr	r2, [pc, #452]	@ (800293c <HAL_DMA_IRQHandler+0x6c4>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d009      	beq.n	800278e <HAL_DMA_IRQHandler+0x516>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a70      	ldr	r2, [pc, #448]	@ (8002940 <HAL_DMA_IRQHandler+0x6c8>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d004      	beq.n	800278e <HAL_DMA_IRQHandler+0x516>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a6e      	ldr	r2, [pc, #440]	@ (8002944 <HAL_DMA_IRQHandler+0x6cc>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d10a      	bne.n	80027a4 <HAL_DMA_IRQHandler+0x52c>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 0308 	and.w	r3, r3, #8
 8002798:	2b00      	cmp	r3, #0
 800279a:	bf14      	ite	ne
 800279c:	2301      	movne	r3, #1
 800279e:	2300      	moveq	r3, #0
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	e009      	b.n	80027b8 <HAL_DMA_IRQHandler+0x540>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 0304 	and.w	r3, r3, #4
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	bf14      	ite	ne
 80027b2:	2301      	movne	r3, #1
 80027b4:	2300      	moveq	r3, #0
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d03e      	beq.n	800283a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027c0:	f003 031f 	and.w	r3, r3, #31
 80027c4:	2210      	movs	r2, #16
 80027c6:	409a      	lsls	r2, r3
 80027c8:	6a3b      	ldr	r3, [r7, #32]
 80027ca:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d018      	beq.n	800280c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d108      	bne.n	80027fa <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d024      	beq.n	800283a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027f4:	6878      	ldr	r0, [r7, #4]
 80027f6:	4798      	blx	r3
 80027f8:	e01f      	b.n	800283a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d01b      	beq.n	800283a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	4798      	blx	r3
 800280a:	e016      	b.n	800283a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002816:	2b00      	cmp	r3, #0
 8002818:	d107      	bne.n	800282a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f022 0208 	bic.w	r2, r2, #8
 8002828:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800282e:	2b00      	cmp	r3, #0
 8002830:	d003      	beq.n	800283a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800283e:	f003 031f 	and.w	r3, r3, #31
 8002842:	2220      	movs	r2, #32
 8002844:	409a      	lsls	r2, r3
 8002846:	69bb      	ldr	r3, [r7, #24]
 8002848:	4013      	ands	r3, r2
 800284a:	2b00      	cmp	r3, #0
 800284c:	f000 8110 	beq.w	8002a70 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a2c      	ldr	r2, [pc, #176]	@ (8002908 <HAL_DMA_IRQHandler+0x690>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d04a      	beq.n	80028f0 <HAL_DMA_IRQHandler+0x678>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a2b      	ldr	r2, [pc, #172]	@ (800290c <HAL_DMA_IRQHandler+0x694>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d045      	beq.n	80028f0 <HAL_DMA_IRQHandler+0x678>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a29      	ldr	r2, [pc, #164]	@ (8002910 <HAL_DMA_IRQHandler+0x698>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d040      	beq.n	80028f0 <HAL_DMA_IRQHandler+0x678>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a28      	ldr	r2, [pc, #160]	@ (8002914 <HAL_DMA_IRQHandler+0x69c>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d03b      	beq.n	80028f0 <HAL_DMA_IRQHandler+0x678>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a26      	ldr	r2, [pc, #152]	@ (8002918 <HAL_DMA_IRQHandler+0x6a0>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d036      	beq.n	80028f0 <HAL_DMA_IRQHandler+0x678>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a25      	ldr	r2, [pc, #148]	@ (800291c <HAL_DMA_IRQHandler+0x6a4>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d031      	beq.n	80028f0 <HAL_DMA_IRQHandler+0x678>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a23      	ldr	r2, [pc, #140]	@ (8002920 <HAL_DMA_IRQHandler+0x6a8>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d02c      	beq.n	80028f0 <HAL_DMA_IRQHandler+0x678>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a22      	ldr	r2, [pc, #136]	@ (8002924 <HAL_DMA_IRQHandler+0x6ac>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d027      	beq.n	80028f0 <HAL_DMA_IRQHandler+0x678>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a20      	ldr	r2, [pc, #128]	@ (8002928 <HAL_DMA_IRQHandler+0x6b0>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d022      	beq.n	80028f0 <HAL_DMA_IRQHandler+0x678>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a1f      	ldr	r2, [pc, #124]	@ (800292c <HAL_DMA_IRQHandler+0x6b4>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d01d      	beq.n	80028f0 <HAL_DMA_IRQHandler+0x678>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a1d      	ldr	r2, [pc, #116]	@ (8002930 <HAL_DMA_IRQHandler+0x6b8>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d018      	beq.n	80028f0 <HAL_DMA_IRQHandler+0x678>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a1c      	ldr	r2, [pc, #112]	@ (8002934 <HAL_DMA_IRQHandler+0x6bc>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d013      	beq.n	80028f0 <HAL_DMA_IRQHandler+0x678>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a1a      	ldr	r2, [pc, #104]	@ (8002938 <HAL_DMA_IRQHandler+0x6c0>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d00e      	beq.n	80028f0 <HAL_DMA_IRQHandler+0x678>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a19      	ldr	r2, [pc, #100]	@ (800293c <HAL_DMA_IRQHandler+0x6c4>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d009      	beq.n	80028f0 <HAL_DMA_IRQHandler+0x678>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a17      	ldr	r2, [pc, #92]	@ (8002940 <HAL_DMA_IRQHandler+0x6c8>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d004      	beq.n	80028f0 <HAL_DMA_IRQHandler+0x678>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a16      	ldr	r2, [pc, #88]	@ (8002944 <HAL_DMA_IRQHandler+0x6cc>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d12b      	bne.n	8002948 <HAL_DMA_IRQHandler+0x6d0>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 0310 	and.w	r3, r3, #16
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	bf14      	ite	ne
 80028fe:	2301      	movne	r3, #1
 8002900:	2300      	moveq	r3, #0
 8002902:	b2db      	uxtb	r3, r3
 8002904:	e02a      	b.n	800295c <HAL_DMA_IRQHandler+0x6e4>
 8002906:	bf00      	nop
 8002908:	40020010 	.word	0x40020010
 800290c:	40020028 	.word	0x40020028
 8002910:	40020040 	.word	0x40020040
 8002914:	40020058 	.word	0x40020058
 8002918:	40020070 	.word	0x40020070
 800291c:	40020088 	.word	0x40020088
 8002920:	400200a0 	.word	0x400200a0
 8002924:	400200b8 	.word	0x400200b8
 8002928:	40020410 	.word	0x40020410
 800292c:	40020428 	.word	0x40020428
 8002930:	40020440 	.word	0x40020440
 8002934:	40020458 	.word	0x40020458
 8002938:	40020470 	.word	0x40020470
 800293c:	40020488 	.word	0x40020488
 8002940:	400204a0 	.word	0x400204a0
 8002944:	400204b8 	.word	0x400204b8
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 0302 	and.w	r3, r3, #2
 8002952:	2b00      	cmp	r3, #0
 8002954:	bf14      	ite	ne
 8002956:	2301      	movne	r3, #1
 8002958:	2300      	moveq	r3, #0
 800295a:	b2db      	uxtb	r3, r3
 800295c:	2b00      	cmp	r3, #0
 800295e:	f000 8087 	beq.w	8002a70 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002966:	f003 031f 	and.w	r3, r3, #31
 800296a:	2220      	movs	r2, #32
 800296c:	409a      	lsls	r2, r3
 800296e:	6a3b      	ldr	r3, [r7, #32]
 8002970:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002978:	b2db      	uxtb	r3, r3
 800297a:	2b04      	cmp	r3, #4
 800297c:	d139      	bne.n	80029f2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f022 0216 	bic.w	r2, r2, #22
 800298c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	695a      	ldr	r2, [r3, #20]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800299c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d103      	bne.n	80029ae <HAL_DMA_IRQHandler+0x736>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d007      	beq.n	80029be <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f022 0208 	bic.w	r2, r2, #8
 80029bc:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029c2:	f003 031f 	and.w	r3, r3, #31
 80029c6:	223f      	movs	r2, #63	@ 0x3f
 80029c8:	409a      	lsls	r2, r3
 80029ca:	6a3b      	ldr	r3, [r7, #32]
 80029cc:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2201      	movs	r2, #1
 80029d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2200      	movs	r2, #0
 80029da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	f000 8382 	beq.w	80030ec <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80029ec:	6878      	ldr	r0, [r7, #4]
 80029ee:	4798      	blx	r3
          }
          return;
 80029f0:	e37c      	b.n	80030ec <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d018      	beq.n	8002a32 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d108      	bne.n	8002a20 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d02c      	beq.n	8002a70 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	4798      	blx	r3
 8002a1e:	e027      	b.n	8002a70 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d023      	beq.n	8002a70 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a2c:	6878      	ldr	r0, [r7, #4]
 8002a2e:	4798      	blx	r3
 8002a30:	e01e      	b.n	8002a70 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d10f      	bne.n	8002a60 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f022 0210 	bic.w	r2, r2, #16
 8002a4e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2201      	movs	r2, #1
 8002a54:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d003      	beq.n	8002a70 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a6c:	6878      	ldr	r0, [r7, #4]
 8002a6e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	f000 833e 	beq.w	80030f6 <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a7e:	f003 0301 	and.w	r3, r3, #1
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	f000 8088 	beq.w	8002b98 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2204      	movs	r2, #4
 8002a8c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a89      	ldr	r2, [pc, #548]	@ (8002cbc <HAL_DMA_IRQHandler+0xa44>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d04a      	beq.n	8002b30 <HAL_DMA_IRQHandler+0x8b8>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a88      	ldr	r2, [pc, #544]	@ (8002cc0 <HAL_DMA_IRQHandler+0xa48>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d045      	beq.n	8002b30 <HAL_DMA_IRQHandler+0x8b8>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a86      	ldr	r2, [pc, #536]	@ (8002cc4 <HAL_DMA_IRQHandler+0xa4c>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d040      	beq.n	8002b30 <HAL_DMA_IRQHandler+0x8b8>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a85      	ldr	r2, [pc, #532]	@ (8002cc8 <HAL_DMA_IRQHandler+0xa50>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d03b      	beq.n	8002b30 <HAL_DMA_IRQHandler+0x8b8>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a83      	ldr	r2, [pc, #524]	@ (8002ccc <HAL_DMA_IRQHandler+0xa54>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d036      	beq.n	8002b30 <HAL_DMA_IRQHandler+0x8b8>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a82      	ldr	r2, [pc, #520]	@ (8002cd0 <HAL_DMA_IRQHandler+0xa58>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d031      	beq.n	8002b30 <HAL_DMA_IRQHandler+0x8b8>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a80      	ldr	r2, [pc, #512]	@ (8002cd4 <HAL_DMA_IRQHandler+0xa5c>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d02c      	beq.n	8002b30 <HAL_DMA_IRQHandler+0x8b8>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a7f      	ldr	r2, [pc, #508]	@ (8002cd8 <HAL_DMA_IRQHandler+0xa60>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d027      	beq.n	8002b30 <HAL_DMA_IRQHandler+0x8b8>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a7d      	ldr	r2, [pc, #500]	@ (8002cdc <HAL_DMA_IRQHandler+0xa64>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d022      	beq.n	8002b30 <HAL_DMA_IRQHandler+0x8b8>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a7c      	ldr	r2, [pc, #496]	@ (8002ce0 <HAL_DMA_IRQHandler+0xa68>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d01d      	beq.n	8002b30 <HAL_DMA_IRQHandler+0x8b8>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a7a      	ldr	r2, [pc, #488]	@ (8002ce4 <HAL_DMA_IRQHandler+0xa6c>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d018      	beq.n	8002b30 <HAL_DMA_IRQHandler+0x8b8>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a79      	ldr	r2, [pc, #484]	@ (8002ce8 <HAL_DMA_IRQHandler+0xa70>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d013      	beq.n	8002b30 <HAL_DMA_IRQHandler+0x8b8>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a77      	ldr	r2, [pc, #476]	@ (8002cec <HAL_DMA_IRQHandler+0xa74>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d00e      	beq.n	8002b30 <HAL_DMA_IRQHandler+0x8b8>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a76      	ldr	r2, [pc, #472]	@ (8002cf0 <HAL_DMA_IRQHandler+0xa78>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d009      	beq.n	8002b30 <HAL_DMA_IRQHandler+0x8b8>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a74      	ldr	r2, [pc, #464]	@ (8002cf4 <HAL_DMA_IRQHandler+0xa7c>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d004      	beq.n	8002b30 <HAL_DMA_IRQHandler+0x8b8>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a73      	ldr	r2, [pc, #460]	@ (8002cf8 <HAL_DMA_IRQHandler+0xa80>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d108      	bne.n	8002b42 <HAL_DMA_IRQHandler+0x8ca>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f022 0201 	bic.w	r2, r2, #1
 8002b3e:	601a      	str	r2, [r3, #0]
 8002b40:	e007      	b.n	8002b52 <HAL_DMA_IRQHandler+0x8da>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f022 0201 	bic.w	r2, r2, #1
 8002b50:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	3301      	adds	r3, #1
 8002b56:	60fb      	str	r3, [r7, #12]
 8002b58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	d307      	bcc.n	8002b6e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 0301 	and.w	r3, r3, #1
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d1f2      	bne.n	8002b52 <HAL_DMA_IRQHandler+0x8da>
 8002b6c:	e000      	b.n	8002b70 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8002b6e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 0301 	and.w	r3, r3, #1
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d004      	beq.n	8002b88 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2203      	movs	r2, #3
 8002b82:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8002b86:	e003      	b.n	8002b90 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2200      	movs	r2, #0
 8002b94:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	f000 82aa 	beq.w	80030f6 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	4798      	blx	r3
 8002baa:	e2a4      	b.n	80030f6 <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a52      	ldr	r2, [pc, #328]	@ (8002cfc <HAL_DMA_IRQHandler+0xa84>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d04a      	beq.n	8002c4c <HAL_DMA_IRQHandler+0x9d4>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a51      	ldr	r2, [pc, #324]	@ (8002d00 <HAL_DMA_IRQHandler+0xa88>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d045      	beq.n	8002c4c <HAL_DMA_IRQHandler+0x9d4>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a4f      	ldr	r2, [pc, #316]	@ (8002d04 <HAL_DMA_IRQHandler+0xa8c>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d040      	beq.n	8002c4c <HAL_DMA_IRQHandler+0x9d4>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a4e      	ldr	r2, [pc, #312]	@ (8002d08 <HAL_DMA_IRQHandler+0xa90>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d03b      	beq.n	8002c4c <HAL_DMA_IRQHandler+0x9d4>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a4c      	ldr	r2, [pc, #304]	@ (8002d0c <HAL_DMA_IRQHandler+0xa94>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d036      	beq.n	8002c4c <HAL_DMA_IRQHandler+0x9d4>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a4b      	ldr	r2, [pc, #300]	@ (8002d10 <HAL_DMA_IRQHandler+0xa98>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d031      	beq.n	8002c4c <HAL_DMA_IRQHandler+0x9d4>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a49      	ldr	r2, [pc, #292]	@ (8002d14 <HAL_DMA_IRQHandler+0xa9c>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d02c      	beq.n	8002c4c <HAL_DMA_IRQHandler+0x9d4>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a48      	ldr	r2, [pc, #288]	@ (8002d18 <HAL_DMA_IRQHandler+0xaa0>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d027      	beq.n	8002c4c <HAL_DMA_IRQHandler+0x9d4>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a46      	ldr	r2, [pc, #280]	@ (8002d1c <HAL_DMA_IRQHandler+0xaa4>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d022      	beq.n	8002c4c <HAL_DMA_IRQHandler+0x9d4>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a45      	ldr	r2, [pc, #276]	@ (8002d20 <HAL_DMA_IRQHandler+0xaa8>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d01d      	beq.n	8002c4c <HAL_DMA_IRQHandler+0x9d4>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a43      	ldr	r2, [pc, #268]	@ (8002d24 <HAL_DMA_IRQHandler+0xaac>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d018      	beq.n	8002c4c <HAL_DMA_IRQHandler+0x9d4>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a42      	ldr	r2, [pc, #264]	@ (8002d28 <HAL_DMA_IRQHandler+0xab0>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d013      	beq.n	8002c4c <HAL_DMA_IRQHandler+0x9d4>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a40      	ldr	r2, [pc, #256]	@ (8002d2c <HAL_DMA_IRQHandler+0xab4>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d00e      	beq.n	8002c4c <HAL_DMA_IRQHandler+0x9d4>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a3f      	ldr	r2, [pc, #252]	@ (8002d30 <HAL_DMA_IRQHandler+0xab8>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d009      	beq.n	8002c4c <HAL_DMA_IRQHandler+0x9d4>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a3d      	ldr	r2, [pc, #244]	@ (8002d34 <HAL_DMA_IRQHandler+0xabc>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d004      	beq.n	8002c4c <HAL_DMA_IRQHandler+0x9d4>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a3c      	ldr	r2, [pc, #240]	@ (8002d38 <HAL_DMA_IRQHandler+0xac0>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d101      	bne.n	8002c50 <HAL_DMA_IRQHandler+0x9d8>
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	e000      	b.n	8002c52 <HAL_DMA_IRQHandler+0x9da>
 8002c50:	2300      	movs	r3, #0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	f000 824f 	beq.w	80030f6 <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c64:	f003 031f 	and.w	r3, r3, #31
 8002c68:	2204      	movs	r2, #4
 8002c6a:	409a      	lsls	r2, r3
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	4013      	ands	r3, r2
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	f000 80dd 	beq.w	8002e30 <HAL_DMA_IRQHandler+0xbb8>
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	f003 0304 	and.w	r3, r3, #4
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	f000 80d7 	beq.w	8002e30 <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c86:	f003 031f 	and.w	r3, r3, #31
 8002c8a:	2204      	movs	r2, #4
 8002c8c:	409a      	lsls	r2, r3
 8002c8e:	69fb      	ldr	r3, [r7, #28]
 8002c90:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d059      	beq.n	8002d50 <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d14a      	bne.n	8002d3c <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	f000 8220 	beq.w	80030f0 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002cb4:	6878      	ldr	r0, [r7, #4]
 8002cb6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002cb8:	e21a      	b.n	80030f0 <HAL_DMA_IRQHandler+0xe78>
 8002cba:	bf00      	nop
 8002cbc:	40020010 	.word	0x40020010
 8002cc0:	40020028 	.word	0x40020028
 8002cc4:	40020040 	.word	0x40020040
 8002cc8:	40020058 	.word	0x40020058
 8002ccc:	40020070 	.word	0x40020070
 8002cd0:	40020088 	.word	0x40020088
 8002cd4:	400200a0 	.word	0x400200a0
 8002cd8:	400200b8 	.word	0x400200b8
 8002cdc:	40020410 	.word	0x40020410
 8002ce0:	40020428 	.word	0x40020428
 8002ce4:	40020440 	.word	0x40020440
 8002ce8:	40020458 	.word	0x40020458
 8002cec:	40020470 	.word	0x40020470
 8002cf0:	40020488 	.word	0x40020488
 8002cf4:	400204a0 	.word	0x400204a0
 8002cf8:	400204b8 	.word	0x400204b8
 8002cfc:	48022c08 	.word	0x48022c08
 8002d00:	48022c1c 	.word	0x48022c1c
 8002d04:	48022c30 	.word	0x48022c30
 8002d08:	48022c44 	.word	0x48022c44
 8002d0c:	48022c58 	.word	0x48022c58
 8002d10:	48022c6c 	.word	0x48022c6c
 8002d14:	48022c80 	.word	0x48022c80
 8002d18:	48022c94 	.word	0x48022c94
 8002d1c:	58025408 	.word	0x58025408
 8002d20:	5802541c 	.word	0x5802541c
 8002d24:	58025430 	.word	0x58025430
 8002d28:	58025444 	.word	0x58025444
 8002d2c:	58025458 	.word	0x58025458
 8002d30:	5802546c 	.word	0x5802546c
 8002d34:	58025480 	.word	0x58025480
 8002d38:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	f000 81d5 	beq.w	80030f0 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002d4e:	e1cf      	b.n	80030f0 <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	f003 0320 	and.w	r3, r3, #32
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d160      	bne.n	8002e1c <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a7f      	ldr	r2, [pc, #508]	@ (8002f5c <HAL_DMA_IRQHandler+0xce4>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d04a      	beq.n	8002dfa <HAL_DMA_IRQHandler+0xb82>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a7d      	ldr	r2, [pc, #500]	@ (8002f60 <HAL_DMA_IRQHandler+0xce8>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d045      	beq.n	8002dfa <HAL_DMA_IRQHandler+0xb82>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a7c      	ldr	r2, [pc, #496]	@ (8002f64 <HAL_DMA_IRQHandler+0xcec>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d040      	beq.n	8002dfa <HAL_DMA_IRQHandler+0xb82>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a7a      	ldr	r2, [pc, #488]	@ (8002f68 <HAL_DMA_IRQHandler+0xcf0>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d03b      	beq.n	8002dfa <HAL_DMA_IRQHandler+0xb82>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a79      	ldr	r2, [pc, #484]	@ (8002f6c <HAL_DMA_IRQHandler+0xcf4>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d036      	beq.n	8002dfa <HAL_DMA_IRQHandler+0xb82>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a77      	ldr	r2, [pc, #476]	@ (8002f70 <HAL_DMA_IRQHandler+0xcf8>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d031      	beq.n	8002dfa <HAL_DMA_IRQHandler+0xb82>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a76      	ldr	r2, [pc, #472]	@ (8002f74 <HAL_DMA_IRQHandler+0xcfc>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d02c      	beq.n	8002dfa <HAL_DMA_IRQHandler+0xb82>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a74      	ldr	r2, [pc, #464]	@ (8002f78 <HAL_DMA_IRQHandler+0xd00>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d027      	beq.n	8002dfa <HAL_DMA_IRQHandler+0xb82>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a73      	ldr	r2, [pc, #460]	@ (8002f7c <HAL_DMA_IRQHandler+0xd04>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d022      	beq.n	8002dfa <HAL_DMA_IRQHandler+0xb82>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a71      	ldr	r2, [pc, #452]	@ (8002f80 <HAL_DMA_IRQHandler+0xd08>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d01d      	beq.n	8002dfa <HAL_DMA_IRQHandler+0xb82>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a70      	ldr	r2, [pc, #448]	@ (8002f84 <HAL_DMA_IRQHandler+0xd0c>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d018      	beq.n	8002dfa <HAL_DMA_IRQHandler+0xb82>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a6e      	ldr	r2, [pc, #440]	@ (8002f88 <HAL_DMA_IRQHandler+0xd10>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d013      	beq.n	8002dfa <HAL_DMA_IRQHandler+0xb82>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a6d      	ldr	r2, [pc, #436]	@ (8002f8c <HAL_DMA_IRQHandler+0xd14>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d00e      	beq.n	8002dfa <HAL_DMA_IRQHandler+0xb82>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a6b      	ldr	r2, [pc, #428]	@ (8002f90 <HAL_DMA_IRQHandler+0xd18>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d009      	beq.n	8002dfa <HAL_DMA_IRQHandler+0xb82>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a6a      	ldr	r2, [pc, #424]	@ (8002f94 <HAL_DMA_IRQHandler+0xd1c>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d004      	beq.n	8002dfa <HAL_DMA_IRQHandler+0xb82>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a68      	ldr	r2, [pc, #416]	@ (8002f98 <HAL_DMA_IRQHandler+0xd20>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d108      	bne.n	8002e0c <HAL_DMA_IRQHandler+0xb94>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f022 0208 	bic.w	r2, r2, #8
 8002e08:	601a      	str	r2, [r3, #0]
 8002e0a:	e007      	b.n	8002e1c <HAL_DMA_IRQHandler+0xba4>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f022 0204 	bic.w	r2, r2, #4
 8002e1a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	f000 8165 	beq.w	80030f0 <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e2a:	6878      	ldr	r0, [r7, #4]
 8002e2c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002e2e:	e15f      	b.n	80030f0 <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e34:	f003 031f 	and.w	r3, r3, #31
 8002e38:	2202      	movs	r2, #2
 8002e3a:	409a      	lsls	r2, r3
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	4013      	ands	r3, r2
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	f000 80c5 	beq.w	8002fd0 <HAL_DMA_IRQHandler+0xd58>
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	f003 0302 	and.w	r3, r3, #2
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	f000 80bf 	beq.w	8002fd0 <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e56:	f003 031f 	and.w	r3, r3, #31
 8002e5a:	2202      	movs	r2, #2
 8002e5c:	409a      	lsls	r2, r3
 8002e5e:	69fb      	ldr	r3, [r7, #28]
 8002e60:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d018      	beq.n	8002e9e <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d109      	bne.n	8002e8a <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	f000 813a 	beq.w	80030f4 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e84:	6878      	ldr	r0, [r7, #4]
 8002e86:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002e88:	e134      	b.n	80030f4 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	f000 8130 	beq.w	80030f4 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e98:	6878      	ldr	r0, [r7, #4]
 8002e9a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002e9c:	e12a      	b.n	80030f4 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	f003 0320 	and.w	r3, r3, #32
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	f040 8089 	bne.w	8002fbc <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a2b      	ldr	r2, [pc, #172]	@ (8002f5c <HAL_DMA_IRQHandler+0xce4>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d04a      	beq.n	8002f4a <HAL_DMA_IRQHandler+0xcd2>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a29      	ldr	r2, [pc, #164]	@ (8002f60 <HAL_DMA_IRQHandler+0xce8>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d045      	beq.n	8002f4a <HAL_DMA_IRQHandler+0xcd2>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a28      	ldr	r2, [pc, #160]	@ (8002f64 <HAL_DMA_IRQHandler+0xcec>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d040      	beq.n	8002f4a <HAL_DMA_IRQHandler+0xcd2>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a26      	ldr	r2, [pc, #152]	@ (8002f68 <HAL_DMA_IRQHandler+0xcf0>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d03b      	beq.n	8002f4a <HAL_DMA_IRQHandler+0xcd2>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a25      	ldr	r2, [pc, #148]	@ (8002f6c <HAL_DMA_IRQHandler+0xcf4>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d036      	beq.n	8002f4a <HAL_DMA_IRQHandler+0xcd2>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a23      	ldr	r2, [pc, #140]	@ (8002f70 <HAL_DMA_IRQHandler+0xcf8>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d031      	beq.n	8002f4a <HAL_DMA_IRQHandler+0xcd2>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a22      	ldr	r2, [pc, #136]	@ (8002f74 <HAL_DMA_IRQHandler+0xcfc>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d02c      	beq.n	8002f4a <HAL_DMA_IRQHandler+0xcd2>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a20      	ldr	r2, [pc, #128]	@ (8002f78 <HAL_DMA_IRQHandler+0xd00>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d027      	beq.n	8002f4a <HAL_DMA_IRQHandler+0xcd2>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a1f      	ldr	r2, [pc, #124]	@ (8002f7c <HAL_DMA_IRQHandler+0xd04>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d022      	beq.n	8002f4a <HAL_DMA_IRQHandler+0xcd2>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a1d      	ldr	r2, [pc, #116]	@ (8002f80 <HAL_DMA_IRQHandler+0xd08>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d01d      	beq.n	8002f4a <HAL_DMA_IRQHandler+0xcd2>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a1c      	ldr	r2, [pc, #112]	@ (8002f84 <HAL_DMA_IRQHandler+0xd0c>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d018      	beq.n	8002f4a <HAL_DMA_IRQHandler+0xcd2>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a1a      	ldr	r2, [pc, #104]	@ (8002f88 <HAL_DMA_IRQHandler+0xd10>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d013      	beq.n	8002f4a <HAL_DMA_IRQHandler+0xcd2>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a19      	ldr	r2, [pc, #100]	@ (8002f8c <HAL_DMA_IRQHandler+0xd14>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d00e      	beq.n	8002f4a <HAL_DMA_IRQHandler+0xcd2>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a17      	ldr	r2, [pc, #92]	@ (8002f90 <HAL_DMA_IRQHandler+0xd18>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d009      	beq.n	8002f4a <HAL_DMA_IRQHandler+0xcd2>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a16      	ldr	r2, [pc, #88]	@ (8002f94 <HAL_DMA_IRQHandler+0xd1c>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d004      	beq.n	8002f4a <HAL_DMA_IRQHandler+0xcd2>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a14      	ldr	r2, [pc, #80]	@ (8002f98 <HAL_DMA_IRQHandler+0xd20>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d128      	bne.n	8002f9c <HAL_DMA_IRQHandler+0xd24>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f022 0214 	bic.w	r2, r2, #20
 8002f58:	601a      	str	r2, [r3, #0]
 8002f5a:	e027      	b.n	8002fac <HAL_DMA_IRQHandler+0xd34>
 8002f5c:	40020010 	.word	0x40020010
 8002f60:	40020028 	.word	0x40020028
 8002f64:	40020040 	.word	0x40020040
 8002f68:	40020058 	.word	0x40020058
 8002f6c:	40020070 	.word	0x40020070
 8002f70:	40020088 	.word	0x40020088
 8002f74:	400200a0 	.word	0x400200a0
 8002f78:	400200b8 	.word	0x400200b8
 8002f7c:	40020410 	.word	0x40020410
 8002f80:	40020428 	.word	0x40020428
 8002f84:	40020440 	.word	0x40020440
 8002f88:	40020458 	.word	0x40020458
 8002f8c:	40020470 	.word	0x40020470
 8002f90:	40020488 	.word	0x40020488
 8002f94:	400204a0 	.word	0x400204a0
 8002f98:	400204b8 	.word	0x400204b8
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f022 020a 	bic.w	r2, r2, #10
 8002faa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	f000 8097 	beq.w	80030f4 <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002fce:	e091      	b.n	80030f4 <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fd4:	f003 031f 	and.w	r3, r3, #31
 8002fd8:	2208      	movs	r2, #8
 8002fda:	409a      	lsls	r2, r3
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	4013      	ands	r3, r2
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	f000 8088 	beq.w	80030f6 <HAL_DMA_IRQHandler+0xe7e>
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	f003 0308 	and.w	r3, r3, #8
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	f000 8082 	beq.w	80030f6 <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a41      	ldr	r2, [pc, #260]	@ (80030fc <HAL_DMA_IRQHandler+0xe84>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d04a      	beq.n	8003092 <HAL_DMA_IRQHandler+0xe1a>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a3f      	ldr	r2, [pc, #252]	@ (8003100 <HAL_DMA_IRQHandler+0xe88>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d045      	beq.n	8003092 <HAL_DMA_IRQHandler+0xe1a>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a3e      	ldr	r2, [pc, #248]	@ (8003104 <HAL_DMA_IRQHandler+0xe8c>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d040      	beq.n	8003092 <HAL_DMA_IRQHandler+0xe1a>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a3c      	ldr	r2, [pc, #240]	@ (8003108 <HAL_DMA_IRQHandler+0xe90>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d03b      	beq.n	8003092 <HAL_DMA_IRQHandler+0xe1a>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a3b      	ldr	r2, [pc, #236]	@ (800310c <HAL_DMA_IRQHandler+0xe94>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d036      	beq.n	8003092 <HAL_DMA_IRQHandler+0xe1a>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a39      	ldr	r2, [pc, #228]	@ (8003110 <HAL_DMA_IRQHandler+0xe98>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d031      	beq.n	8003092 <HAL_DMA_IRQHandler+0xe1a>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a38      	ldr	r2, [pc, #224]	@ (8003114 <HAL_DMA_IRQHandler+0xe9c>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d02c      	beq.n	8003092 <HAL_DMA_IRQHandler+0xe1a>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a36      	ldr	r2, [pc, #216]	@ (8003118 <HAL_DMA_IRQHandler+0xea0>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d027      	beq.n	8003092 <HAL_DMA_IRQHandler+0xe1a>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a35      	ldr	r2, [pc, #212]	@ (800311c <HAL_DMA_IRQHandler+0xea4>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d022      	beq.n	8003092 <HAL_DMA_IRQHandler+0xe1a>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a33      	ldr	r2, [pc, #204]	@ (8003120 <HAL_DMA_IRQHandler+0xea8>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d01d      	beq.n	8003092 <HAL_DMA_IRQHandler+0xe1a>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a32      	ldr	r2, [pc, #200]	@ (8003124 <HAL_DMA_IRQHandler+0xeac>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d018      	beq.n	8003092 <HAL_DMA_IRQHandler+0xe1a>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a30      	ldr	r2, [pc, #192]	@ (8003128 <HAL_DMA_IRQHandler+0xeb0>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d013      	beq.n	8003092 <HAL_DMA_IRQHandler+0xe1a>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a2f      	ldr	r2, [pc, #188]	@ (800312c <HAL_DMA_IRQHandler+0xeb4>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d00e      	beq.n	8003092 <HAL_DMA_IRQHandler+0xe1a>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a2d      	ldr	r2, [pc, #180]	@ (8003130 <HAL_DMA_IRQHandler+0xeb8>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d009      	beq.n	8003092 <HAL_DMA_IRQHandler+0xe1a>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a2c      	ldr	r2, [pc, #176]	@ (8003134 <HAL_DMA_IRQHandler+0xebc>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d004      	beq.n	8003092 <HAL_DMA_IRQHandler+0xe1a>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a2a      	ldr	r2, [pc, #168]	@ (8003138 <HAL_DMA_IRQHandler+0xec0>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d108      	bne.n	80030a4 <HAL_DMA_IRQHandler+0xe2c>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f022 021c 	bic.w	r2, r2, #28
 80030a0:	601a      	str	r2, [r3, #0]
 80030a2:	e007      	b.n	80030b4 <HAL_DMA_IRQHandler+0xe3c>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f022 020e 	bic.w	r2, r2, #14
 80030b2:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030b8:	f003 031f 	and.w	r3, r3, #31
 80030bc:	2201      	movs	r2, #1
 80030be:	409a      	lsls	r2, r3
 80030c0:	69fb      	ldr	r3, [r7, #28]
 80030c2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2201      	movs	r2, #1
 80030c8:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2201      	movs	r2, #1
 80030ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2200      	movs	r2, #0
 80030d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d009      	beq.n	80030f6 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030e6:	6878      	ldr	r0, [r7, #4]
 80030e8:	4798      	blx	r3
 80030ea:	e004      	b.n	80030f6 <HAL_DMA_IRQHandler+0xe7e>
          return;
 80030ec:	bf00      	nop
 80030ee:	e002      	b.n	80030f6 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80030f0:	bf00      	nop
 80030f2:	e000      	b.n	80030f6 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80030f4:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80030f6:	3728      	adds	r7, #40	@ 0x28
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}
 80030fc:	40020010 	.word	0x40020010
 8003100:	40020028 	.word	0x40020028
 8003104:	40020040 	.word	0x40020040
 8003108:	40020058 	.word	0x40020058
 800310c:	40020070 	.word	0x40020070
 8003110:	40020088 	.word	0x40020088
 8003114:	400200a0 	.word	0x400200a0
 8003118:	400200b8 	.word	0x400200b8
 800311c:	40020410 	.word	0x40020410
 8003120:	40020428 	.word	0x40020428
 8003124:	40020440 	.word	0x40020440
 8003128:	40020458 	.word	0x40020458
 800312c:	40020470 	.word	0x40020470
 8003130:	40020488 	.word	0x40020488
 8003134:	400204a0 	.word	0x400204a0
 8003138:	400204b8 	.word	0x400204b8

0800313c <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800313c:	b480      	push	{r7}
 800313e:	b083      	sub	sp, #12
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800314a:	b2db      	uxtb	r3, r3
}
 800314c:	4618      	mov	r0, r3
 800314e:	370c      	adds	r7, #12
 8003150:	46bd      	mov	sp, r7
 8003152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003156:	4770      	bx	lr

08003158 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003158:	b480      	push	{r7}
 800315a:	b083      	sub	sp, #12
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8003164:	4618      	mov	r0, r3
 8003166:	370c      	adds	r7, #12
 8003168:	46bd      	mov	sp, r7
 800316a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316e:	4770      	bx	lr

08003170 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003170:	b480      	push	{r7}
 8003172:	b087      	sub	sp, #28
 8003174:	af00      	add	r7, sp, #0
 8003176:	60f8      	str	r0, [r7, #12]
 8003178:	60b9      	str	r1, [r7, #8]
 800317a:	607a      	str	r2, [r7, #4]
 800317c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003182:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003188:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a7f      	ldr	r2, [pc, #508]	@ (800338c <DMA_SetConfig+0x21c>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d072      	beq.n	800327a <DMA_SetConfig+0x10a>
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a7d      	ldr	r2, [pc, #500]	@ (8003390 <DMA_SetConfig+0x220>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d06d      	beq.n	800327a <DMA_SetConfig+0x10a>
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a7c      	ldr	r2, [pc, #496]	@ (8003394 <DMA_SetConfig+0x224>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d068      	beq.n	800327a <DMA_SetConfig+0x10a>
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a7a      	ldr	r2, [pc, #488]	@ (8003398 <DMA_SetConfig+0x228>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d063      	beq.n	800327a <DMA_SetConfig+0x10a>
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a79      	ldr	r2, [pc, #484]	@ (800339c <DMA_SetConfig+0x22c>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d05e      	beq.n	800327a <DMA_SetConfig+0x10a>
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a77      	ldr	r2, [pc, #476]	@ (80033a0 <DMA_SetConfig+0x230>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d059      	beq.n	800327a <DMA_SetConfig+0x10a>
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a76      	ldr	r2, [pc, #472]	@ (80033a4 <DMA_SetConfig+0x234>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d054      	beq.n	800327a <DMA_SetConfig+0x10a>
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a74      	ldr	r2, [pc, #464]	@ (80033a8 <DMA_SetConfig+0x238>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d04f      	beq.n	800327a <DMA_SetConfig+0x10a>
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a73      	ldr	r2, [pc, #460]	@ (80033ac <DMA_SetConfig+0x23c>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d04a      	beq.n	800327a <DMA_SetConfig+0x10a>
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a71      	ldr	r2, [pc, #452]	@ (80033b0 <DMA_SetConfig+0x240>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d045      	beq.n	800327a <DMA_SetConfig+0x10a>
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a70      	ldr	r2, [pc, #448]	@ (80033b4 <DMA_SetConfig+0x244>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d040      	beq.n	800327a <DMA_SetConfig+0x10a>
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a6e      	ldr	r2, [pc, #440]	@ (80033b8 <DMA_SetConfig+0x248>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d03b      	beq.n	800327a <DMA_SetConfig+0x10a>
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a6d      	ldr	r2, [pc, #436]	@ (80033bc <DMA_SetConfig+0x24c>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d036      	beq.n	800327a <DMA_SetConfig+0x10a>
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a6b      	ldr	r2, [pc, #428]	@ (80033c0 <DMA_SetConfig+0x250>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d031      	beq.n	800327a <DMA_SetConfig+0x10a>
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a6a      	ldr	r2, [pc, #424]	@ (80033c4 <DMA_SetConfig+0x254>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d02c      	beq.n	800327a <DMA_SetConfig+0x10a>
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a68      	ldr	r2, [pc, #416]	@ (80033c8 <DMA_SetConfig+0x258>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d027      	beq.n	800327a <DMA_SetConfig+0x10a>
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a67      	ldr	r2, [pc, #412]	@ (80033cc <DMA_SetConfig+0x25c>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d022      	beq.n	800327a <DMA_SetConfig+0x10a>
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a65      	ldr	r2, [pc, #404]	@ (80033d0 <DMA_SetConfig+0x260>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d01d      	beq.n	800327a <DMA_SetConfig+0x10a>
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a64      	ldr	r2, [pc, #400]	@ (80033d4 <DMA_SetConfig+0x264>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d018      	beq.n	800327a <DMA_SetConfig+0x10a>
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a62      	ldr	r2, [pc, #392]	@ (80033d8 <DMA_SetConfig+0x268>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d013      	beq.n	800327a <DMA_SetConfig+0x10a>
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a61      	ldr	r2, [pc, #388]	@ (80033dc <DMA_SetConfig+0x26c>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d00e      	beq.n	800327a <DMA_SetConfig+0x10a>
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a5f      	ldr	r2, [pc, #380]	@ (80033e0 <DMA_SetConfig+0x270>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d009      	beq.n	800327a <DMA_SetConfig+0x10a>
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a5e      	ldr	r2, [pc, #376]	@ (80033e4 <DMA_SetConfig+0x274>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d004      	beq.n	800327a <DMA_SetConfig+0x10a>
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a5c      	ldr	r2, [pc, #368]	@ (80033e8 <DMA_SetConfig+0x278>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d101      	bne.n	800327e <DMA_SetConfig+0x10e>
 800327a:	2301      	movs	r3, #1
 800327c:	e000      	b.n	8003280 <DMA_SetConfig+0x110>
 800327e:	2300      	movs	r3, #0
 8003280:	2b00      	cmp	r3, #0
 8003282:	d00d      	beq.n	80032a0 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003288:	68fa      	ldr	r2, [r7, #12]
 800328a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800328c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003292:	2b00      	cmp	r3, #0
 8003294:	d004      	beq.n	80032a0 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800329a:	68fa      	ldr	r2, [r7, #12]
 800329c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800329e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a39      	ldr	r2, [pc, #228]	@ (800338c <DMA_SetConfig+0x21c>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d04a      	beq.n	8003340 <DMA_SetConfig+0x1d0>
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a38      	ldr	r2, [pc, #224]	@ (8003390 <DMA_SetConfig+0x220>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d045      	beq.n	8003340 <DMA_SetConfig+0x1d0>
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a36      	ldr	r2, [pc, #216]	@ (8003394 <DMA_SetConfig+0x224>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d040      	beq.n	8003340 <DMA_SetConfig+0x1d0>
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a35      	ldr	r2, [pc, #212]	@ (8003398 <DMA_SetConfig+0x228>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d03b      	beq.n	8003340 <DMA_SetConfig+0x1d0>
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a33      	ldr	r2, [pc, #204]	@ (800339c <DMA_SetConfig+0x22c>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d036      	beq.n	8003340 <DMA_SetConfig+0x1d0>
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a32      	ldr	r2, [pc, #200]	@ (80033a0 <DMA_SetConfig+0x230>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d031      	beq.n	8003340 <DMA_SetConfig+0x1d0>
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a30      	ldr	r2, [pc, #192]	@ (80033a4 <DMA_SetConfig+0x234>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d02c      	beq.n	8003340 <DMA_SetConfig+0x1d0>
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a2f      	ldr	r2, [pc, #188]	@ (80033a8 <DMA_SetConfig+0x238>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d027      	beq.n	8003340 <DMA_SetConfig+0x1d0>
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a2d      	ldr	r2, [pc, #180]	@ (80033ac <DMA_SetConfig+0x23c>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d022      	beq.n	8003340 <DMA_SetConfig+0x1d0>
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a2c      	ldr	r2, [pc, #176]	@ (80033b0 <DMA_SetConfig+0x240>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d01d      	beq.n	8003340 <DMA_SetConfig+0x1d0>
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a2a      	ldr	r2, [pc, #168]	@ (80033b4 <DMA_SetConfig+0x244>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d018      	beq.n	8003340 <DMA_SetConfig+0x1d0>
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a29      	ldr	r2, [pc, #164]	@ (80033b8 <DMA_SetConfig+0x248>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d013      	beq.n	8003340 <DMA_SetConfig+0x1d0>
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a27      	ldr	r2, [pc, #156]	@ (80033bc <DMA_SetConfig+0x24c>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d00e      	beq.n	8003340 <DMA_SetConfig+0x1d0>
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a26      	ldr	r2, [pc, #152]	@ (80033c0 <DMA_SetConfig+0x250>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d009      	beq.n	8003340 <DMA_SetConfig+0x1d0>
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a24      	ldr	r2, [pc, #144]	@ (80033c4 <DMA_SetConfig+0x254>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d004      	beq.n	8003340 <DMA_SetConfig+0x1d0>
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a23      	ldr	r2, [pc, #140]	@ (80033c8 <DMA_SetConfig+0x258>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d101      	bne.n	8003344 <DMA_SetConfig+0x1d4>
 8003340:	2301      	movs	r3, #1
 8003342:	e000      	b.n	8003346 <DMA_SetConfig+0x1d6>
 8003344:	2300      	movs	r3, #0
 8003346:	2b00      	cmp	r3, #0
 8003348:	d059      	beq.n	80033fe <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800334e:	f003 031f 	and.w	r3, r3, #31
 8003352:	223f      	movs	r2, #63	@ 0x3f
 8003354:	409a      	lsls	r2, r3
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003368:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	683a      	ldr	r2, [r7, #0]
 8003370:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	2b40      	cmp	r3, #64	@ 0x40
 8003378:	d138      	bne.n	80033ec <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	687a      	ldr	r2, [r7, #4]
 8003380:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	68ba      	ldr	r2, [r7, #8]
 8003388:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800338a:	e0ae      	b.n	80034ea <DMA_SetConfig+0x37a>
 800338c:	40020010 	.word	0x40020010
 8003390:	40020028 	.word	0x40020028
 8003394:	40020040 	.word	0x40020040
 8003398:	40020058 	.word	0x40020058
 800339c:	40020070 	.word	0x40020070
 80033a0:	40020088 	.word	0x40020088
 80033a4:	400200a0 	.word	0x400200a0
 80033a8:	400200b8 	.word	0x400200b8
 80033ac:	40020410 	.word	0x40020410
 80033b0:	40020428 	.word	0x40020428
 80033b4:	40020440 	.word	0x40020440
 80033b8:	40020458 	.word	0x40020458
 80033bc:	40020470 	.word	0x40020470
 80033c0:	40020488 	.word	0x40020488
 80033c4:	400204a0 	.word	0x400204a0
 80033c8:	400204b8 	.word	0x400204b8
 80033cc:	58025408 	.word	0x58025408
 80033d0:	5802541c 	.word	0x5802541c
 80033d4:	58025430 	.word	0x58025430
 80033d8:	58025444 	.word	0x58025444
 80033dc:	58025458 	.word	0x58025458
 80033e0:	5802546c 	.word	0x5802546c
 80033e4:	58025480 	.word	0x58025480
 80033e8:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	68ba      	ldr	r2, [r7, #8]
 80033f2:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	687a      	ldr	r2, [r7, #4]
 80033fa:	60da      	str	r2, [r3, #12]
}
 80033fc:	e075      	b.n	80034ea <DMA_SetConfig+0x37a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a3d      	ldr	r2, [pc, #244]	@ (80034f8 <DMA_SetConfig+0x388>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d04a      	beq.n	800349e <DMA_SetConfig+0x32e>
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a3b      	ldr	r2, [pc, #236]	@ (80034fc <DMA_SetConfig+0x38c>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d045      	beq.n	800349e <DMA_SetConfig+0x32e>
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a3a      	ldr	r2, [pc, #232]	@ (8003500 <DMA_SetConfig+0x390>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d040      	beq.n	800349e <DMA_SetConfig+0x32e>
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a38      	ldr	r2, [pc, #224]	@ (8003504 <DMA_SetConfig+0x394>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d03b      	beq.n	800349e <DMA_SetConfig+0x32e>
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a37      	ldr	r2, [pc, #220]	@ (8003508 <DMA_SetConfig+0x398>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d036      	beq.n	800349e <DMA_SetConfig+0x32e>
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a35      	ldr	r2, [pc, #212]	@ (800350c <DMA_SetConfig+0x39c>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d031      	beq.n	800349e <DMA_SetConfig+0x32e>
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a34      	ldr	r2, [pc, #208]	@ (8003510 <DMA_SetConfig+0x3a0>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d02c      	beq.n	800349e <DMA_SetConfig+0x32e>
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a32      	ldr	r2, [pc, #200]	@ (8003514 <DMA_SetConfig+0x3a4>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d027      	beq.n	800349e <DMA_SetConfig+0x32e>
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a31      	ldr	r2, [pc, #196]	@ (8003518 <DMA_SetConfig+0x3a8>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d022      	beq.n	800349e <DMA_SetConfig+0x32e>
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a2f      	ldr	r2, [pc, #188]	@ (800351c <DMA_SetConfig+0x3ac>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d01d      	beq.n	800349e <DMA_SetConfig+0x32e>
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a2e      	ldr	r2, [pc, #184]	@ (8003520 <DMA_SetConfig+0x3b0>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d018      	beq.n	800349e <DMA_SetConfig+0x32e>
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a2c      	ldr	r2, [pc, #176]	@ (8003524 <DMA_SetConfig+0x3b4>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d013      	beq.n	800349e <DMA_SetConfig+0x32e>
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a2b      	ldr	r2, [pc, #172]	@ (8003528 <DMA_SetConfig+0x3b8>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d00e      	beq.n	800349e <DMA_SetConfig+0x32e>
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a29      	ldr	r2, [pc, #164]	@ (800352c <DMA_SetConfig+0x3bc>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d009      	beq.n	800349e <DMA_SetConfig+0x32e>
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a28      	ldr	r2, [pc, #160]	@ (8003530 <DMA_SetConfig+0x3c0>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d004      	beq.n	800349e <DMA_SetConfig+0x32e>
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a26      	ldr	r2, [pc, #152]	@ (8003534 <DMA_SetConfig+0x3c4>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d101      	bne.n	80034a2 <DMA_SetConfig+0x332>
 800349e:	2301      	movs	r3, #1
 80034a0:	e000      	b.n	80034a4 <DMA_SetConfig+0x334>
 80034a2:	2300      	movs	r3, #0
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d020      	beq.n	80034ea <DMA_SetConfig+0x37a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034ac:	f003 031f 	and.w	r3, r3, #31
 80034b0:	2201      	movs	r2, #1
 80034b2:	409a      	lsls	r2, r3
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	683a      	ldr	r2, [r7, #0]
 80034be:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	2b40      	cmp	r3, #64	@ 0x40
 80034c6:	d108      	bne.n	80034da <DMA_SetConfig+0x36a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	687a      	ldr	r2, [r7, #4]
 80034ce:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	68ba      	ldr	r2, [r7, #8]
 80034d6:	60da      	str	r2, [r3, #12]
}
 80034d8:	e007      	b.n	80034ea <DMA_SetConfig+0x37a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	68ba      	ldr	r2, [r7, #8]
 80034e0:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	687a      	ldr	r2, [r7, #4]
 80034e8:	60da      	str	r2, [r3, #12]
}
 80034ea:	bf00      	nop
 80034ec:	371c      	adds	r7, #28
 80034ee:	46bd      	mov	sp, r7
 80034f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f4:	4770      	bx	lr
 80034f6:	bf00      	nop
 80034f8:	48022c08 	.word	0x48022c08
 80034fc:	48022c1c 	.word	0x48022c1c
 8003500:	48022c30 	.word	0x48022c30
 8003504:	48022c44 	.word	0x48022c44
 8003508:	48022c58 	.word	0x48022c58
 800350c:	48022c6c 	.word	0x48022c6c
 8003510:	48022c80 	.word	0x48022c80
 8003514:	48022c94 	.word	0x48022c94
 8003518:	58025408 	.word	0x58025408
 800351c:	5802541c 	.word	0x5802541c
 8003520:	58025430 	.word	0x58025430
 8003524:	58025444 	.word	0x58025444
 8003528:	58025458 	.word	0x58025458
 800352c:	5802546c 	.word	0x5802546c
 8003530:	58025480 	.word	0x58025480
 8003534:	58025494 	.word	0x58025494

08003538 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003538:	b480      	push	{r7}
 800353a:	b085      	sub	sp, #20
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a42      	ldr	r2, [pc, #264]	@ (8003650 <DMA_CalcBaseAndBitshift+0x118>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d04a      	beq.n	80035e0 <DMA_CalcBaseAndBitshift+0xa8>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a41      	ldr	r2, [pc, #260]	@ (8003654 <DMA_CalcBaseAndBitshift+0x11c>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d045      	beq.n	80035e0 <DMA_CalcBaseAndBitshift+0xa8>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a3f      	ldr	r2, [pc, #252]	@ (8003658 <DMA_CalcBaseAndBitshift+0x120>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d040      	beq.n	80035e0 <DMA_CalcBaseAndBitshift+0xa8>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a3e      	ldr	r2, [pc, #248]	@ (800365c <DMA_CalcBaseAndBitshift+0x124>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d03b      	beq.n	80035e0 <DMA_CalcBaseAndBitshift+0xa8>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a3c      	ldr	r2, [pc, #240]	@ (8003660 <DMA_CalcBaseAndBitshift+0x128>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d036      	beq.n	80035e0 <DMA_CalcBaseAndBitshift+0xa8>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a3b      	ldr	r2, [pc, #236]	@ (8003664 <DMA_CalcBaseAndBitshift+0x12c>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d031      	beq.n	80035e0 <DMA_CalcBaseAndBitshift+0xa8>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a39      	ldr	r2, [pc, #228]	@ (8003668 <DMA_CalcBaseAndBitshift+0x130>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d02c      	beq.n	80035e0 <DMA_CalcBaseAndBitshift+0xa8>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a38      	ldr	r2, [pc, #224]	@ (800366c <DMA_CalcBaseAndBitshift+0x134>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d027      	beq.n	80035e0 <DMA_CalcBaseAndBitshift+0xa8>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a36      	ldr	r2, [pc, #216]	@ (8003670 <DMA_CalcBaseAndBitshift+0x138>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d022      	beq.n	80035e0 <DMA_CalcBaseAndBitshift+0xa8>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a35      	ldr	r2, [pc, #212]	@ (8003674 <DMA_CalcBaseAndBitshift+0x13c>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d01d      	beq.n	80035e0 <DMA_CalcBaseAndBitshift+0xa8>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a33      	ldr	r2, [pc, #204]	@ (8003678 <DMA_CalcBaseAndBitshift+0x140>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d018      	beq.n	80035e0 <DMA_CalcBaseAndBitshift+0xa8>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a32      	ldr	r2, [pc, #200]	@ (800367c <DMA_CalcBaseAndBitshift+0x144>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d013      	beq.n	80035e0 <DMA_CalcBaseAndBitshift+0xa8>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a30      	ldr	r2, [pc, #192]	@ (8003680 <DMA_CalcBaseAndBitshift+0x148>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d00e      	beq.n	80035e0 <DMA_CalcBaseAndBitshift+0xa8>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a2f      	ldr	r2, [pc, #188]	@ (8003684 <DMA_CalcBaseAndBitshift+0x14c>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d009      	beq.n	80035e0 <DMA_CalcBaseAndBitshift+0xa8>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a2d      	ldr	r2, [pc, #180]	@ (8003688 <DMA_CalcBaseAndBitshift+0x150>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d004      	beq.n	80035e0 <DMA_CalcBaseAndBitshift+0xa8>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a2c      	ldr	r2, [pc, #176]	@ (800368c <DMA_CalcBaseAndBitshift+0x154>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d101      	bne.n	80035e4 <DMA_CalcBaseAndBitshift+0xac>
 80035e0:	2301      	movs	r3, #1
 80035e2:	e000      	b.n	80035e6 <DMA_CalcBaseAndBitshift+0xae>
 80035e4:	2300      	movs	r3, #0
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d024      	beq.n	8003634 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	3b10      	subs	r3, #16
 80035f2:	4a27      	ldr	r2, [pc, #156]	@ (8003690 <DMA_CalcBaseAndBitshift+0x158>)
 80035f4:	fba2 2303 	umull	r2, r3, r2, r3
 80035f8:	091b      	lsrs	r3, r3, #4
 80035fa:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	f003 0307 	and.w	r3, r3, #7
 8003602:	4a24      	ldr	r2, [pc, #144]	@ (8003694 <DMA_CalcBaseAndBitshift+0x15c>)
 8003604:	5cd3      	ldrb	r3, [r2, r3]
 8003606:	461a      	mov	r2, r3
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2b03      	cmp	r3, #3
 8003610:	d908      	bls.n	8003624 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	461a      	mov	r2, r3
 8003618:	4b1f      	ldr	r3, [pc, #124]	@ (8003698 <DMA_CalcBaseAndBitshift+0x160>)
 800361a:	4013      	ands	r3, r2
 800361c:	1d1a      	adds	r2, r3, #4
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	659a      	str	r2, [r3, #88]	@ 0x58
 8003622:	e00d      	b.n	8003640 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	461a      	mov	r2, r3
 800362a:	4b1b      	ldr	r3, [pc, #108]	@ (8003698 <DMA_CalcBaseAndBitshift+0x160>)
 800362c:	4013      	ands	r3, r2
 800362e:	687a      	ldr	r2, [r7, #4]
 8003630:	6593      	str	r3, [r2, #88]	@ 0x58
 8003632:	e005      	b.n	8003640 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003644:	4618      	mov	r0, r3
 8003646:	3714      	adds	r7, #20
 8003648:	46bd      	mov	sp, r7
 800364a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364e:	4770      	bx	lr
 8003650:	40020010 	.word	0x40020010
 8003654:	40020028 	.word	0x40020028
 8003658:	40020040 	.word	0x40020040
 800365c:	40020058 	.word	0x40020058
 8003660:	40020070 	.word	0x40020070
 8003664:	40020088 	.word	0x40020088
 8003668:	400200a0 	.word	0x400200a0
 800366c:	400200b8 	.word	0x400200b8
 8003670:	40020410 	.word	0x40020410
 8003674:	40020428 	.word	0x40020428
 8003678:	40020440 	.word	0x40020440
 800367c:	40020458 	.word	0x40020458
 8003680:	40020470 	.word	0x40020470
 8003684:	40020488 	.word	0x40020488
 8003688:	400204a0 	.word	0x400204a0
 800368c:	400204b8 	.word	0x400204b8
 8003690:	aaaaaaab 	.word	0xaaaaaaab
 8003694:	0800b444 	.word	0x0800b444
 8003698:	fffffc00 	.word	0xfffffc00

0800369c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800369c:	b480      	push	{r7}
 800369e:	b085      	sub	sp, #20
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036a4:	2300      	movs	r3, #0
 80036a6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	699b      	ldr	r3, [r3, #24]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d120      	bne.n	80036f2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036b4:	2b03      	cmp	r3, #3
 80036b6:	d858      	bhi.n	800376a <DMA_CheckFifoParam+0xce>
 80036b8:	a201      	add	r2, pc, #4	@ (adr r2, 80036c0 <DMA_CheckFifoParam+0x24>)
 80036ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036be:	bf00      	nop
 80036c0:	080036d1 	.word	0x080036d1
 80036c4:	080036e3 	.word	0x080036e3
 80036c8:	080036d1 	.word	0x080036d1
 80036cc:	0800376b 	.word	0x0800376b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036d4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d048      	beq.n	800376e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80036e0:	e045      	b.n	800376e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036e6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80036ea:	d142      	bne.n	8003772 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80036f0:	e03f      	b.n	8003772 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	699b      	ldr	r3, [r3, #24]
 80036f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80036fa:	d123      	bne.n	8003744 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003700:	2b03      	cmp	r3, #3
 8003702:	d838      	bhi.n	8003776 <DMA_CheckFifoParam+0xda>
 8003704:	a201      	add	r2, pc, #4	@ (adr r2, 800370c <DMA_CheckFifoParam+0x70>)
 8003706:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800370a:	bf00      	nop
 800370c:	0800371d 	.word	0x0800371d
 8003710:	08003723 	.word	0x08003723
 8003714:	0800371d 	.word	0x0800371d
 8003718:	08003735 	.word	0x08003735
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800371c:	2301      	movs	r3, #1
 800371e:	73fb      	strb	r3, [r7, #15]
        break;
 8003720:	e030      	b.n	8003784 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003726:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800372a:	2b00      	cmp	r3, #0
 800372c:	d025      	beq.n	800377a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003732:	e022      	b.n	800377a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003738:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800373c:	d11f      	bne.n	800377e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003742:	e01c      	b.n	800377e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003748:	2b02      	cmp	r3, #2
 800374a:	d902      	bls.n	8003752 <DMA_CheckFifoParam+0xb6>
 800374c:	2b03      	cmp	r3, #3
 800374e:	d003      	beq.n	8003758 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003750:	e018      	b.n	8003784 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	73fb      	strb	r3, [r7, #15]
        break;
 8003756:	e015      	b.n	8003784 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800375c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003760:	2b00      	cmp	r3, #0
 8003762:	d00e      	beq.n	8003782 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	73fb      	strb	r3, [r7, #15]
    break;
 8003768:	e00b      	b.n	8003782 <DMA_CheckFifoParam+0xe6>
        break;
 800376a:	bf00      	nop
 800376c:	e00a      	b.n	8003784 <DMA_CheckFifoParam+0xe8>
        break;
 800376e:	bf00      	nop
 8003770:	e008      	b.n	8003784 <DMA_CheckFifoParam+0xe8>
        break;
 8003772:	bf00      	nop
 8003774:	e006      	b.n	8003784 <DMA_CheckFifoParam+0xe8>
        break;
 8003776:	bf00      	nop
 8003778:	e004      	b.n	8003784 <DMA_CheckFifoParam+0xe8>
        break;
 800377a:	bf00      	nop
 800377c:	e002      	b.n	8003784 <DMA_CheckFifoParam+0xe8>
        break;
 800377e:	bf00      	nop
 8003780:	e000      	b.n	8003784 <DMA_CheckFifoParam+0xe8>
    break;
 8003782:	bf00      	nop
    }
  }

  return status;
 8003784:	7bfb      	ldrb	r3, [r7, #15]
}
 8003786:	4618      	mov	r0, r3
 8003788:	3714      	adds	r7, #20
 800378a:	46bd      	mov	sp, r7
 800378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003790:	4770      	bx	lr
 8003792:	bf00      	nop

08003794 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003794:	b480      	push	{r7}
 8003796:	b085      	sub	sp, #20
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a38      	ldr	r2, [pc, #224]	@ (8003888 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d022      	beq.n	80037f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a36      	ldr	r2, [pc, #216]	@ (800388c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d01d      	beq.n	80037f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a35      	ldr	r2, [pc, #212]	@ (8003890 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d018      	beq.n	80037f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a33      	ldr	r2, [pc, #204]	@ (8003894 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d013      	beq.n	80037f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a32      	ldr	r2, [pc, #200]	@ (8003898 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d00e      	beq.n	80037f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a30      	ldr	r2, [pc, #192]	@ (800389c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d009      	beq.n	80037f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a2f      	ldr	r2, [pc, #188]	@ (80038a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d004      	beq.n	80037f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a2d      	ldr	r2, [pc, #180]	@ (80038a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d101      	bne.n	80037f6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80037f2:	2301      	movs	r3, #1
 80037f4:	e000      	b.n	80037f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80037f6:	2300      	movs	r3, #0
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d01a      	beq.n	8003832 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	b2db      	uxtb	r3, r3
 8003802:	3b08      	subs	r3, #8
 8003804:	4a28      	ldr	r2, [pc, #160]	@ (80038a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8003806:	fba2 2303 	umull	r2, r3, r2, r3
 800380a:	091b      	lsrs	r3, r3, #4
 800380c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800380e:	68fa      	ldr	r2, [r7, #12]
 8003810:	4b26      	ldr	r3, [pc, #152]	@ (80038ac <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8003812:	4413      	add	r3, r2
 8003814:	009b      	lsls	r3, r3, #2
 8003816:	461a      	mov	r2, r3
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	4a24      	ldr	r2, [pc, #144]	@ (80038b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8003820:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	f003 031f 	and.w	r3, r3, #31
 8003828:	2201      	movs	r2, #1
 800382a:	409a      	lsls	r2, r3
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8003830:	e024      	b.n	800387c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	b2db      	uxtb	r3, r3
 8003838:	3b10      	subs	r3, #16
 800383a:	4a1e      	ldr	r2, [pc, #120]	@ (80038b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800383c:	fba2 2303 	umull	r2, r3, r2, r3
 8003840:	091b      	lsrs	r3, r3, #4
 8003842:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	4a1c      	ldr	r2, [pc, #112]	@ (80038b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d806      	bhi.n	800385a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	4a1b      	ldr	r2, [pc, #108]	@ (80038bc <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d902      	bls.n	800385a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	3308      	adds	r3, #8
 8003858:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800385a:	68fa      	ldr	r2, [r7, #12]
 800385c:	4b18      	ldr	r3, [pc, #96]	@ (80038c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800385e:	4413      	add	r3, r2
 8003860:	009b      	lsls	r3, r3, #2
 8003862:	461a      	mov	r2, r3
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	4a16      	ldr	r2, [pc, #88]	@ (80038c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800386c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	f003 031f 	and.w	r3, r3, #31
 8003874:	2201      	movs	r2, #1
 8003876:	409a      	lsls	r2, r3
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800387c:	bf00      	nop
 800387e:	3714      	adds	r7, #20
 8003880:	46bd      	mov	sp, r7
 8003882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003886:	4770      	bx	lr
 8003888:	58025408 	.word	0x58025408
 800388c:	5802541c 	.word	0x5802541c
 8003890:	58025430 	.word	0x58025430
 8003894:	58025444 	.word	0x58025444
 8003898:	58025458 	.word	0x58025458
 800389c:	5802546c 	.word	0x5802546c
 80038a0:	58025480 	.word	0x58025480
 80038a4:	58025494 	.word	0x58025494
 80038a8:	cccccccd 	.word	0xcccccccd
 80038ac:	16009600 	.word	0x16009600
 80038b0:	58025880 	.word	0x58025880
 80038b4:	aaaaaaab 	.word	0xaaaaaaab
 80038b8:	400204b8 	.word	0x400204b8
 80038bc:	4002040f 	.word	0x4002040f
 80038c0:	10008200 	.word	0x10008200
 80038c4:	40020880 	.word	0x40020880

080038c8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b085      	sub	sp, #20
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d04a      	beq.n	8003974 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2b08      	cmp	r3, #8
 80038e2:	d847      	bhi.n	8003974 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a25      	ldr	r2, [pc, #148]	@ (8003980 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d022      	beq.n	8003934 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a24      	ldr	r2, [pc, #144]	@ (8003984 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d01d      	beq.n	8003934 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a22      	ldr	r2, [pc, #136]	@ (8003988 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d018      	beq.n	8003934 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a21      	ldr	r2, [pc, #132]	@ (800398c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d013      	beq.n	8003934 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a1f      	ldr	r2, [pc, #124]	@ (8003990 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d00e      	beq.n	8003934 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a1e      	ldr	r2, [pc, #120]	@ (8003994 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d009      	beq.n	8003934 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a1c      	ldr	r2, [pc, #112]	@ (8003998 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d004      	beq.n	8003934 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a1b      	ldr	r2, [pc, #108]	@ (800399c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d101      	bne.n	8003938 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8003934:	2301      	movs	r3, #1
 8003936:	e000      	b.n	800393a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8003938:	2300      	movs	r3, #0
 800393a:	2b00      	cmp	r3, #0
 800393c:	d00a      	beq.n	8003954 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800393e:	68fa      	ldr	r2, [r7, #12]
 8003940:	4b17      	ldr	r3, [pc, #92]	@ (80039a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8003942:	4413      	add	r3, r2
 8003944:	009b      	lsls	r3, r3, #2
 8003946:	461a      	mov	r2, r3
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	4a15      	ldr	r2, [pc, #84]	@ (80039a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8003950:	671a      	str	r2, [r3, #112]	@ 0x70
 8003952:	e009      	b.n	8003968 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003954:	68fa      	ldr	r2, [r7, #12]
 8003956:	4b14      	ldr	r3, [pc, #80]	@ (80039a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8003958:	4413      	add	r3, r2
 800395a:	009b      	lsls	r3, r3, #2
 800395c:	461a      	mov	r2, r3
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	4a11      	ldr	r2, [pc, #68]	@ (80039ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8003966:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	3b01      	subs	r3, #1
 800396c:	2201      	movs	r2, #1
 800396e:	409a      	lsls	r2, r3
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8003974:	bf00      	nop
 8003976:	3714      	adds	r7, #20
 8003978:	46bd      	mov	sp, r7
 800397a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397e:	4770      	bx	lr
 8003980:	58025408 	.word	0x58025408
 8003984:	5802541c 	.word	0x5802541c
 8003988:	58025430 	.word	0x58025430
 800398c:	58025444 	.word	0x58025444
 8003990:	58025458 	.word	0x58025458
 8003994:	5802546c 	.word	0x5802546c
 8003998:	58025480 	.word	0x58025480
 800399c:	58025494 	.word	0x58025494
 80039a0:	1600963f 	.word	0x1600963f
 80039a4:	58025940 	.word	0x58025940
 80039a8:	1000823f 	.word	0x1000823f
 80039ac:	40020940 	.word	0x40020940

080039b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b089      	sub	sp, #36	@ 0x24
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
 80039b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80039ba:	2300      	movs	r3, #0
 80039bc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80039be:	4b89      	ldr	r3, [pc, #548]	@ (8003be4 <HAL_GPIO_Init+0x234>)
 80039c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80039c2:	e194      	b.n	8003cee <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	681a      	ldr	r2, [r3, #0]
 80039c8:	2101      	movs	r1, #1
 80039ca:	69fb      	ldr	r3, [r7, #28]
 80039cc:	fa01 f303 	lsl.w	r3, r1, r3
 80039d0:	4013      	ands	r3, r2
 80039d2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	f000 8186 	beq.w	8003ce8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	f003 0303 	and.w	r3, r3, #3
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d005      	beq.n	80039f4 <HAL_GPIO_Init+0x44>
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	f003 0303 	and.w	r3, r3, #3
 80039f0:	2b02      	cmp	r3, #2
 80039f2:	d130      	bne.n	8003a56 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80039fa:	69fb      	ldr	r3, [r7, #28]
 80039fc:	005b      	lsls	r3, r3, #1
 80039fe:	2203      	movs	r2, #3
 8003a00:	fa02 f303 	lsl.w	r3, r2, r3
 8003a04:	43db      	mvns	r3, r3
 8003a06:	69ba      	ldr	r2, [r7, #24]
 8003a08:	4013      	ands	r3, r2
 8003a0a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	68da      	ldr	r2, [r3, #12]
 8003a10:	69fb      	ldr	r3, [r7, #28]
 8003a12:	005b      	lsls	r3, r3, #1
 8003a14:	fa02 f303 	lsl.w	r3, r2, r3
 8003a18:	69ba      	ldr	r2, [r7, #24]
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	69ba      	ldr	r2, [r7, #24]
 8003a22:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	69fb      	ldr	r3, [r7, #28]
 8003a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a32:	43db      	mvns	r3, r3
 8003a34:	69ba      	ldr	r2, [r7, #24]
 8003a36:	4013      	ands	r3, r2
 8003a38:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	091b      	lsrs	r3, r3, #4
 8003a40:	f003 0201 	and.w	r2, r3, #1
 8003a44:	69fb      	ldr	r3, [r7, #28]
 8003a46:	fa02 f303 	lsl.w	r3, r2, r3
 8003a4a:	69ba      	ldr	r2, [r7, #24]
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	69ba      	ldr	r2, [r7, #24]
 8003a54:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	f003 0303 	and.w	r3, r3, #3
 8003a5e:	2b03      	cmp	r3, #3
 8003a60:	d017      	beq.n	8003a92 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	68db      	ldr	r3, [r3, #12]
 8003a66:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003a68:	69fb      	ldr	r3, [r7, #28]
 8003a6a:	005b      	lsls	r3, r3, #1
 8003a6c:	2203      	movs	r2, #3
 8003a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a72:	43db      	mvns	r3, r3
 8003a74:	69ba      	ldr	r2, [r7, #24]
 8003a76:	4013      	ands	r3, r2
 8003a78:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	689a      	ldr	r2, [r3, #8]
 8003a7e:	69fb      	ldr	r3, [r7, #28]
 8003a80:	005b      	lsls	r3, r3, #1
 8003a82:	fa02 f303 	lsl.w	r3, r2, r3
 8003a86:	69ba      	ldr	r2, [r7, #24]
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	69ba      	ldr	r2, [r7, #24]
 8003a90:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	f003 0303 	and.w	r3, r3, #3
 8003a9a:	2b02      	cmp	r3, #2
 8003a9c:	d123      	bne.n	8003ae6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003a9e:	69fb      	ldr	r3, [r7, #28]
 8003aa0:	08da      	lsrs	r2, r3, #3
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	3208      	adds	r2, #8
 8003aa6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003aaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003aac:	69fb      	ldr	r3, [r7, #28]
 8003aae:	f003 0307 	and.w	r3, r3, #7
 8003ab2:	009b      	lsls	r3, r3, #2
 8003ab4:	220f      	movs	r2, #15
 8003ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8003aba:	43db      	mvns	r3, r3
 8003abc:	69ba      	ldr	r2, [r7, #24]
 8003abe:	4013      	ands	r3, r2
 8003ac0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	691a      	ldr	r2, [r3, #16]
 8003ac6:	69fb      	ldr	r3, [r7, #28]
 8003ac8:	f003 0307 	and.w	r3, r3, #7
 8003acc:	009b      	lsls	r3, r3, #2
 8003ace:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad2:	69ba      	ldr	r2, [r7, #24]
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003ad8:	69fb      	ldr	r3, [r7, #28]
 8003ada:	08da      	lsrs	r2, r3, #3
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	3208      	adds	r2, #8
 8003ae0:	69b9      	ldr	r1, [r7, #24]
 8003ae2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003aec:	69fb      	ldr	r3, [r7, #28]
 8003aee:	005b      	lsls	r3, r3, #1
 8003af0:	2203      	movs	r2, #3
 8003af2:	fa02 f303 	lsl.w	r3, r2, r3
 8003af6:	43db      	mvns	r3, r3
 8003af8:	69ba      	ldr	r2, [r7, #24]
 8003afa:	4013      	ands	r3, r2
 8003afc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	f003 0203 	and.w	r2, r3, #3
 8003b06:	69fb      	ldr	r3, [r7, #28]
 8003b08:	005b      	lsls	r3, r3, #1
 8003b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b0e:	69ba      	ldr	r2, [r7, #24]
 8003b10:	4313      	orrs	r3, r2
 8003b12:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	69ba      	ldr	r2, [r7, #24]
 8003b18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	f000 80e0 	beq.w	8003ce8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b28:	4b2f      	ldr	r3, [pc, #188]	@ (8003be8 <HAL_GPIO_Init+0x238>)
 8003b2a:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8003b2e:	4a2e      	ldr	r2, [pc, #184]	@ (8003be8 <HAL_GPIO_Init+0x238>)
 8003b30:	f043 0302 	orr.w	r3, r3, #2
 8003b34:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8003b38:	4b2b      	ldr	r3, [pc, #172]	@ (8003be8 <HAL_GPIO_Init+0x238>)
 8003b3a:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8003b3e:	f003 0302 	and.w	r3, r3, #2
 8003b42:	60fb      	str	r3, [r7, #12]
 8003b44:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003b46:	4a29      	ldr	r2, [pc, #164]	@ (8003bec <HAL_GPIO_Init+0x23c>)
 8003b48:	69fb      	ldr	r3, [r7, #28]
 8003b4a:	089b      	lsrs	r3, r3, #2
 8003b4c:	3302      	adds	r3, #2
 8003b4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003b54:	69fb      	ldr	r3, [r7, #28]
 8003b56:	f003 0303 	and.w	r3, r3, #3
 8003b5a:	009b      	lsls	r3, r3, #2
 8003b5c:	220f      	movs	r2, #15
 8003b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b62:	43db      	mvns	r3, r3
 8003b64:	69ba      	ldr	r2, [r7, #24]
 8003b66:	4013      	ands	r3, r2
 8003b68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	4a20      	ldr	r2, [pc, #128]	@ (8003bf0 <HAL_GPIO_Init+0x240>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d052      	beq.n	8003c18 <HAL_GPIO_Init+0x268>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	4a1f      	ldr	r2, [pc, #124]	@ (8003bf4 <HAL_GPIO_Init+0x244>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d031      	beq.n	8003bde <HAL_GPIO_Init+0x22e>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	4a1e      	ldr	r2, [pc, #120]	@ (8003bf8 <HAL_GPIO_Init+0x248>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d02b      	beq.n	8003bda <HAL_GPIO_Init+0x22a>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	4a1d      	ldr	r2, [pc, #116]	@ (8003bfc <HAL_GPIO_Init+0x24c>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d025      	beq.n	8003bd6 <HAL_GPIO_Init+0x226>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	4a1c      	ldr	r2, [pc, #112]	@ (8003c00 <HAL_GPIO_Init+0x250>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d01f      	beq.n	8003bd2 <HAL_GPIO_Init+0x222>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	4a1b      	ldr	r2, [pc, #108]	@ (8003c04 <HAL_GPIO_Init+0x254>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d019      	beq.n	8003bce <HAL_GPIO_Init+0x21e>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	4a1a      	ldr	r2, [pc, #104]	@ (8003c08 <HAL_GPIO_Init+0x258>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d013      	beq.n	8003bca <HAL_GPIO_Init+0x21a>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	4a19      	ldr	r2, [pc, #100]	@ (8003c0c <HAL_GPIO_Init+0x25c>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d00d      	beq.n	8003bc6 <HAL_GPIO_Init+0x216>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	4a18      	ldr	r2, [pc, #96]	@ (8003c10 <HAL_GPIO_Init+0x260>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d007      	beq.n	8003bc2 <HAL_GPIO_Init+0x212>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	4a17      	ldr	r2, [pc, #92]	@ (8003c14 <HAL_GPIO_Init+0x264>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d101      	bne.n	8003bbe <HAL_GPIO_Init+0x20e>
 8003bba:	2309      	movs	r3, #9
 8003bbc:	e02d      	b.n	8003c1a <HAL_GPIO_Init+0x26a>
 8003bbe:	230a      	movs	r3, #10
 8003bc0:	e02b      	b.n	8003c1a <HAL_GPIO_Init+0x26a>
 8003bc2:	2308      	movs	r3, #8
 8003bc4:	e029      	b.n	8003c1a <HAL_GPIO_Init+0x26a>
 8003bc6:	2307      	movs	r3, #7
 8003bc8:	e027      	b.n	8003c1a <HAL_GPIO_Init+0x26a>
 8003bca:	2306      	movs	r3, #6
 8003bcc:	e025      	b.n	8003c1a <HAL_GPIO_Init+0x26a>
 8003bce:	2305      	movs	r3, #5
 8003bd0:	e023      	b.n	8003c1a <HAL_GPIO_Init+0x26a>
 8003bd2:	2304      	movs	r3, #4
 8003bd4:	e021      	b.n	8003c1a <HAL_GPIO_Init+0x26a>
 8003bd6:	2303      	movs	r3, #3
 8003bd8:	e01f      	b.n	8003c1a <HAL_GPIO_Init+0x26a>
 8003bda:	2302      	movs	r3, #2
 8003bdc:	e01d      	b.n	8003c1a <HAL_GPIO_Init+0x26a>
 8003bde:	2301      	movs	r3, #1
 8003be0:	e01b      	b.n	8003c1a <HAL_GPIO_Init+0x26a>
 8003be2:	bf00      	nop
 8003be4:	58000080 	.word	0x58000080
 8003be8:	58024400 	.word	0x58024400
 8003bec:	58000400 	.word	0x58000400
 8003bf0:	58020000 	.word	0x58020000
 8003bf4:	58020400 	.word	0x58020400
 8003bf8:	58020800 	.word	0x58020800
 8003bfc:	58020c00 	.word	0x58020c00
 8003c00:	58021000 	.word	0x58021000
 8003c04:	58021400 	.word	0x58021400
 8003c08:	58021800 	.word	0x58021800
 8003c0c:	58021c00 	.word	0x58021c00
 8003c10:	58022000 	.word	0x58022000
 8003c14:	58022400 	.word	0x58022400
 8003c18:	2300      	movs	r3, #0
 8003c1a:	69fa      	ldr	r2, [r7, #28]
 8003c1c:	f002 0203 	and.w	r2, r2, #3
 8003c20:	0092      	lsls	r2, r2, #2
 8003c22:	4093      	lsls	r3, r2
 8003c24:	69ba      	ldr	r2, [r7, #24]
 8003c26:	4313      	orrs	r3, r2
 8003c28:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003c2a:	4938      	ldr	r1, [pc, #224]	@ (8003d0c <HAL_GPIO_Init+0x35c>)
 8003c2c:	69fb      	ldr	r3, [r7, #28]
 8003c2e:	089b      	lsrs	r3, r3, #2
 8003c30:	3302      	adds	r3, #2
 8003c32:	69ba      	ldr	r2, [r7, #24]
 8003c34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003c38:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	43db      	mvns	r3, r3
 8003c44:	69ba      	ldr	r2, [r7, #24]
 8003c46:	4013      	ands	r3, r2
 8003c48:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d003      	beq.n	8003c5e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003c56:	69ba      	ldr	r2, [r7, #24]
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003c5e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003c62:	69bb      	ldr	r3, [r7, #24]
 8003c64:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003c66:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	43db      	mvns	r3, r3
 8003c72:	69ba      	ldr	r2, [r7, #24]
 8003c74:	4013      	ands	r3, r2
 8003c76:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d003      	beq.n	8003c8c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003c84:	69ba      	ldr	r2, [r7, #24]
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003c8c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003c90:	69bb      	ldr	r3, [r7, #24]
 8003c92:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	43db      	mvns	r3, r3
 8003c9e:	69ba      	ldr	r2, [r7, #24]
 8003ca0:	4013      	ands	r3, r2
 8003ca2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d003      	beq.n	8003cb8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003cb0:	69ba      	ldr	r2, [r7, #24]
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	69ba      	ldr	r2, [r7, #24]
 8003cbc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	43db      	mvns	r3, r3
 8003cc8:	69ba      	ldr	r2, [r7, #24]
 8003cca:	4013      	ands	r3, r2
 8003ccc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d003      	beq.n	8003ce2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8003cda:	69ba      	ldr	r2, [r7, #24]
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	69ba      	ldr	r2, [r7, #24]
 8003ce6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003ce8:	69fb      	ldr	r3, [r7, #28]
 8003cea:	3301      	adds	r3, #1
 8003cec:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	69fb      	ldr	r3, [r7, #28]
 8003cf4:	fa22 f303 	lsr.w	r3, r2, r3
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	f47f ae63 	bne.w	80039c4 <HAL_GPIO_Init+0x14>
  }
}
 8003cfe:	bf00      	nop
 8003d00:	bf00      	nop
 8003d02:	3724      	adds	r7, #36	@ 0x24
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr
 8003d0c:	58000400 	.word	0x58000400

08003d10 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b082      	sub	sp, #8
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	4603      	mov	r3, r0
 8003d18:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8003d1a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d1e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003d22:	88fb      	ldrh	r3, [r7, #6]
 8003d24:	4013      	ands	r3, r2
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d008      	beq.n	8003d3c <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003d2a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003d2e:	88fb      	ldrh	r3, [r7, #6]
 8003d30:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003d34:	88fb      	ldrh	r3, [r7, #6]
 8003d36:	4618      	mov	r0, r3
 8003d38:	f000 f804 	bl	8003d44 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8003d3c:	bf00      	nop
 8003d3e:	3708      	adds	r7, #8
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}

08003d44 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b083      	sub	sp, #12
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003d4e:	bf00      	nop
 8003d50:	370c      	adds	r7, #12
 8003d52:	46bd      	mov	sp, r7
 8003d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d58:	4770      	bx	lr
	...

08003d5c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b082      	sub	sp, #8
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d101      	bne.n	8003d6e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e08b      	b.n	8003e86 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d74:	b2db      	uxtb	r3, r3
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d106      	bne.n	8003d88 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	f7fc fcda 	bl	800073c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2224      	movs	r2, #36	@ 0x24
 8003d8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f022 0201 	bic.w	r2, r2, #1
 8003d9e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	685a      	ldr	r2, [r3, #4]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003dac:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	689a      	ldr	r2, [r3, #8]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003dbc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	68db      	ldr	r3, [r3, #12]
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	d107      	bne.n	8003dd6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	689a      	ldr	r2, [r3, #8]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003dd2:	609a      	str	r2, [r3, #8]
 8003dd4:	e006      	b.n	8003de4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	689a      	ldr	r2, [r3, #8]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003de2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	68db      	ldr	r3, [r3, #12]
 8003de8:	2b02      	cmp	r3, #2
 8003dea:	d108      	bne.n	8003dfe <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	685a      	ldr	r2, [r3, #4]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003dfa:	605a      	str	r2, [r3, #4]
 8003dfc:	e007      	b.n	8003e0e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	685a      	ldr	r2, [r3, #4]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003e0c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	6859      	ldr	r1, [r3, #4]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681a      	ldr	r2, [r3, #0]
 8003e18:	4b1d      	ldr	r3, [pc, #116]	@ (8003e90 <HAL_I2C_Init+0x134>)
 8003e1a:	430b      	orrs	r3, r1
 8003e1c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	68da      	ldr	r2, [r3, #12]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003e2c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	691a      	ldr	r2, [r3, #16]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	695b      	ldr	r3, [r3, #20]
 8003e36:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	699b      	ldr	r3, [r3, #24]
 8003e3e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	430a      	orrs	r2, r1
 8003e46:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	69d9      	ldr	r1, [r3, #28]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6a1a      	ldr	r2, [r3, #32]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	430a      	orrs	r2, r1
 8003e56:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f042 0201 	orr.w	r2, r2, #1
 8003e66:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2220      	movs	r2, #32
 8003e72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003e84:	2300      	movs	r3, #0
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3708      	adds	r7, #8
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}
 8003e8e:	bf00      	nop
 8003e90:	02008000 	.word	0x02008000

08003e94 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b08a      	sub	sp, #40	@ 0x28
 8003e98:	af02      	add	r7, sp, #8
 8003e9a:	60f8      	str	r0, [r7, #12]
 8003e9c:	607a      	str	r2, [r7, #4]
 8003e9e:	461a      	mov	r2, r3
 8003ea0:	460b      	mov	r3, r1
 8003ea2:	817b      	strh	r3, [r7, #10]
 8003ea4:	4613      	mov	r3, r2
 8003ea6:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;
  uint32_t sizetoxfer = 0U;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	61bb      	str	r3, [r7, #24]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003eb2:	b2db      	uxtb	r3, r3
 8003eb4:	2b20      	cmp	r3, #32
 8003eb6:	f040 80ef 	bne.w	8004098 <HAL_I2C_Master_Transmit_DMA+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	699b      	ldr	r3, [r3, #24]
 8003ec0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003ec4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ec8:	d101      	bne.n	8003ece <HAL_I2C_Master_Transmit_DMA+0x3a>
    {
      return HAL_BUSY;
 8003eca:	2302      	movs	r3, #2
 8003ecc:	e0e5      	b.n	800409a <HAL_I2C_Master_Transmit_DMA+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d101      	bne.n	8003edc <HAL_I2C_Master_Transmit_DMA+0x48>
 8003ed8:	2302      	movs	r3, #2
 8003eda:	e0de      	b.n	800409a <HAL_I2C_Master_Transmit_DMA+0x206>
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	2201      	movs	r2, #1
 8003ee0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2221      	movs	r2, #33	@ 0x21
 8003ee8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2210      	movs	r2, #16
 8003ef0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	687a      	ldr	r2, [r7, #4]
 8003efe:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	893a      	ldrh	r2, [r7, #8]
 8003f04:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	4a66      	ldr	r2, [pc, #408]	@ (80040a4 <HAL_I2C_Master_Transmit_DMA+0x210>)
 8003f0a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	4a66      	ldr	r2, [pc, #408]	@ (80040a8 <HAL_I2C_Master_Transmit_DMA+0x214>)
 8003f10:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f16:	b29b      	uxth	r3, r3
 8003f18:	2bff      	cmp	r3, #255	@ 0xff
 8003f1a:	d906      	bls.n	8003f2a <HAL_I2C_Master_Transmit_DMA+0x96>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	22ff      	movs	r2, #255	@ 0xff
 8003f20:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8003f22:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003f26:	61fb      	str	r3, [r7, #28]
 8003f28:	e007      	b.n	8003f3a <HAL_I2C_Master_Transmit_DMA+0xa6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f2e:	b29a      	uxth	r2, r3
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003f34:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003f38:	61fb      	str	r3, [r7, #28]
    }

    if (hi2c->XferSize > 0U)
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d01a      	beq.n	8003f78 <HAL_I2C_Master_Transmit_DMA+0xe4>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f46:	781a      	ldrb	r2, [r3, #0]
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f52:	1c5a      	adds	r2, r3, #1
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	625a      	str	r2, [r3, #36]	@ 0x24

      sizetoxfer = hi2c->XferSize;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f5c:	61bb      	str	r3, [r7, #24]
      hi2c->XferCount--;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f62:	b29b      	uxth	r3, r3
 8003f64:	3b01      	subs	r3, #1
 8003f66:	b29a      	uxth	r2, r3
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f70:	3b01      	subs	r3, #1
 8003f72:	b29a      	uxth	r2, r3
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    if (hi2c->XferSize > 0U)
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d074      	beq.n	800406a <HAL_I2C_Master_Transmit_DMA+0x1d6>
    {
      if (hi2c->hdmatx != NULL)
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d022      	beq.n	8003fce <HAL_I2C_Master_Transmit_DMA+0x13a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f8c:	4a47      	ldr	r2, [pc, #284]	@ (80040ac <HAL_I2C_Master_Transmit_DMA+0x218>)
 8003f8e:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f94:	4a46      	ldr	r2, [pc, #280]	@ (80040b0 <HAL_I2C_Master_Transmit_DMA+0x21c>)
 8003f96:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmatx->XferAbortCallback = NULL;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream or channel depends on Instance */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fb0:	4619      	mov	r1, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	3328      	adds	r3, #40	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8003fb8:	461a      	mov	r2, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8003fbe:	f7fd fcab 	bl	8001918 <HAL_DMA_Start_IT>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8003fc6:	7dfb      	ldrb	r3, [r7, #23]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d13a      	bne.n	8004042 <HAL_I2C_Master_Transmit_DMA+0x1ae>
 8003fcc:	e013      	b.n	8003ff6 <HAL_I2C_Master_Transmit_DMA+0x162>
        hi2c->State     = HAL_I2C_STATE_READY;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2220      	movs	r2, #32
 8003fd2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fe2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2200      	movs	r2, #0
 8003fee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	e051      	b.n	800409a <HAL_I2C_Master_Transmit_DMA+0x206>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U),
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ffa:	b2db      	uxtb	r3, r3
 8003ffc:	3301      	adds	r3, #1
 8003ffe:	b2da      	uxtb	r2, r3
 8004000:	8979      	ldrh	r1, [r7, #10]
 8004002:	4b2c      	ldr	r3, [pc, #176]	@ (80040b4 <HAL_I2C_Master_Transmit_DMA+0x220>)
 8004004:	9300      	str	r3, [sp, #0]
 8004006:	69fb      	ldr	r3, [r7, #28]
 8004008:	68f8      	ldr	r0, [r7, #12]
 800400a:	f001 feb9 	bl	8005d80 <I2C_TransferConfig>
                           xfermode, I2C_GENERATE_START_WRITE);

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004012:	b29a      	uxth	r2, r3
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004018:	1ad3      	subs	r3, r2, r3
 800401a:	b29a      	uxth	r2, r3
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2200      	movs	r2, #0
 8004024:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8004028:	2110      	movs	r1, #16
 800402a:	68f8      	ldr	r0, [r7, #12]
 800402c:	f001 feda 	bl	8005de4 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	681a      	ldr	r2, [r3, #0]
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800403e:	601a      	str	r2, [r3, #0]
 8004040:	e028      	b.n	8004094 <HAL_I2C_Master_Transmit_DMA+0x200>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2220      	movs	r2, #32
 8004046:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	2200      	movs	r2, #0
 800404e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004056:	f043 0210 	orr.w	r2, r3, #16
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2200      	movs	r2, #0
 8004062:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8004066:	2301      	movs	r3, #1
 8004068:	e017      	b.n	800409a <HAL_I2C_Master_Transmit_DMA+0x206>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	4a12      	ldr	r2, [pc, #72]	@ (80040b8 <HAL_I2C_Master_Transmit_DMA+0x224>)
 800406e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)sizetoxfer, I2C_AUTOEND_MODE,
 8004070:	69bb      	ldr	r3, [r7, #24]
 8004072:	b2da      	uxtb	r2, r3
 8004074:	8979      	ldrh	r1, [r7, #10]
 8004076:	4b0f      	ldr	r3, [pc, #60]	@ (80040b4 <HAL_I2C_Master_Transmit_DMA+0x220>)
 8004078:	9300      	str	r3, [sp, #0]
 800407a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800407e:	68f8      	ldr	r0, [r7, #12]
 8004080:	f001 fe7e 	bl	8005d80 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2200      	movs	r2, #0
 8004088:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800408c:	2101      	movs	r1, #1
 800408e:	68f8      	ldr	r0, [r7, #12]
 8004090:	f001 fea8 	bl	8005de4 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8004094:	2300      	movs	r3, #0
 8004096:	e000      	b.n	800409a <HAL_I2C_Master_Transmit_DMA+0x206>
  }
  else
  {
    return HAL_BUSY;
 8004098:	2302      	movs	r3, #2
  }
}
 800409a:	4618      	mov	r0, r3
 800409c:	3720      	adds	r7, #32
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}
 80040a2:	bf00      	nop
 80040a4:	ffff0000 	.word	0xffff0000
 80040a8:	080046d3 	.word	0x080046d3
 80040ac:	08005a3b 	.word	0x08005a3b
 80040b0:	08005ad1 	.word	0x08005ad1
 80040b4:	80002000 	.word	0x80002000
 80040b8:	08004293 	.word	0x08004293

080040bc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b084      	sub	sp, #16
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	699b      	ldr	r3, [r3, #24]
 80040ca:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d005      	beq.n	80040e8 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040e0:	68ba      	ldr	r2, [r7, #8]
 80040e2:	68f9      	ldr	r1, [r7, #12]
 80040e4:	6878      	ldr	r0, [r7, #4]
 80040e6:	4798      	blx	r3
  }
}
 80040e8:	bf00      	nop
 80040ea:	3710      	adds	r7, #16
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}

080040f0 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b086      	sub	sp, #24
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	699b      	ldr	r3, [r3, #24]
 80040fe:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800410e:	2b00      	cmp	r3, #0
 8004110:	d00f      	beq.n	8004132 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8004118:	2b00      	cmp	r3, #0
 800411a:	d00a      	beq.n	8004132 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004120:	f043 0201 	orr.w	r2, r3, #1
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004130:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004138:	2b00      	cmp	r3, #0
 800413a:	d00f      	beq.n	800415c <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8004142:	2b00      	cmp	r3, #0
 8004144:	d00a      	beq.n	800415c <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800414a:	f043 0208 	orr.w	r2, r3, #8
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800415a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004162:	2b00      	cmp	r3, #0
 8004164:	d00f      	beq.n	8004186 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800416c:	2b00      	cmp	r3, #0
 800416e:	d00a      	beq.n	8004186 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004174:	f043 0202 	orr.w	r2, r3, #2
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004184:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800418a:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	f003 030b 	and.w	r3, r3, #11
 8004192:	2b00      	cmp	r3, #0
 8004194:	d003      	beq.n	800419e <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8004196:	68f9      	ldr	r1, [r7, #12]
 8004198:	6878      	ldr	r0, [r7, #4]
 800419a:	f001 fb13 	bl	80057c4 <I2C_ITError>
  }
}
 800419e:	bf00      	nop
 80041a0:	3718      	adds	r7, #24
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}

080041a6 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80041a6:	b480      	push	{r7}
 80041a8:	b083      	sub	sp, #12
 80041aa:	af00      	add	r7, sp, #0
 80041ac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80041ae:	bf00      	nop
 80041b0:	370c      	adds	r7, #12
 80041b2:	46bd      	mov	sp, r7
 80041b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b8:	4770      	bx	lr

080041ba <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80041ba:	b480      	push	{r7}
 80041bc:	b083      	sub	sp, #12
 80041be:	af00      	add	r7, sp, #0
 80041c0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80041c2:	bf00      	nop
 80041c4:	370c      	adds	r7, #12
 80041c6:	46bd      	mov	sp, r7
 80041c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041cc:	4770      	bx	lr

080041ce <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80041ce:	b480      	push	{r7}
 80041d0:	b083      	sub	sp, #12
 80041d2:	af00      	add	r7, sp, #0
 80041d4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80041d6:	bf00      	nop
 80041d8:	370c      	adds	r7, #12
 80041da:	46bd      	mov	sp, r7
 80041dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e0:	4770      	bx	lr

080041e2 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80041e2:	b480      	push	{r7}
 80041e4:	b083      	sub	sp, #12
 80041e6:	af00      	add	r7, sp, #0
 80041e8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80041ea:	bf00      	nop
 80041ec:	370c      	adds	r7, #12
 80041ee:	46bd      	mov	sp, r7
 80041f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f4:	4770      	bx	lr

080041f6 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80041f6:	b480      	push	{r7}
 80041f8:	b083      	sub	sp, #12
 80041fa:	af00      	add	r7, sp, #0
 80041fc:	6078      	str	r0, [r7, #4]
 80041fe:	460b      	mov	r3, r1
 8004200:	70fb      	strb	r3, [r7, #3]
 8004202:	4613      	mov	r3, r2
 8004204:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004206:	bf00      	nop
 8004208:	370c      	adds	r7, #12
 800420a:	46bd      	mov	sp, r7
 800420c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004210:	4770      	bx	lr

08004212 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004212:	b480      	push	{r7}
 8004214:	b083      	sub	sp, #12
 8004216:	af00      	add	r7, sp, #0
 8004218:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800421a:	bf00      	nop
 800421c:	370c      	adds	r7, #12
 800421e:	46bd      	mov	sp, r7
 8004220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004224:	4770      	bx	lr

08004226 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004226:	b480      	push	{r7}
 8004228:	b083      	sub	sp, #12
 800422a:	af00      	add	r7, sp, #0
 800422c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800422e:	bf00      	nop
 8004230:	370c      	adds	r7, #12
 8004232:	46bd      	mov	sp, r7
 8004234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004238:	4770      	bx	lr

0800423a <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800423a:	b480      	push	{r7}
 800423c:	b083      	sub	sp, #12
 800423e:	af00      	add	r7, sp, #0
 8004240:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004242:	bf00      	nop
 8004244:	370c      	adds	r7, #12
 8004246:	46bd      	mov	sp, r7
 8004248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424c:	4770      	bx	lr

0800424e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800424e:	b480      	push	{r7}
 8004250:	b083      	sub	sp, #12
 8004252:	af00      	add	r7, sp, #0
 8004254:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004256:	bf00      	nop
 8004258:	370c      	adds	r7, #12
 800425a:	46bd      	mov	sp, r7
 800425c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004260:	4770      	bx	lr

08004262 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004262:	b480      	push	{r7}
 8004264:	b083      	sub	sp, #12
 8004266:	af00      	add	r7, sp, #0
 8004268:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800426a:	bf00      	nop
 800426c:	370c      	adds	r7, #12
 800426e:	46bd      	mov	sp, r7
 8004270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004274:	4770      	bx	lr

08004276 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 8004276:	b480      	push	{r7}
 8004278:	b083      	sub	sp, #12
 800427a:	af00      	add	r7, sp, #0
 800427c:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004284:	b2db      	uxtb	r3, r3
}
 8004286:	4618      	mov	r0, r3
 8004288:	370c      	adds	r7, #12
 800428a:	46bd      	mov	sp, r7
 800428c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004290:	4770      	bx	lr

08004292 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8004292:	b580      	push	{r7, lr}
 8004294:	b088      	sub	sp, #32
 8004296:	af02      	add	r7, sp, #8
 8004298:	60f8      	str	r0, [r7, #12]
 800429a:	60b9      	str	r1, [r7, #8]
 800429c:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80042a8:	2b01      	cmp	r3, #1
 80042aa:	d101      	bne.n	80042b0 <I2C_Master_ISR_IT+0x1e>
 80042ac:	2302      	movs	r3, #2
 80042ae:	e113      	b.n	80044d8 <I2C_Master_ISR_IT+0x246>
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	2201      	movs	r2, #1
 80042b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	f003 0310 	and.w	r3, r3, #16
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d012      	beq.n	80042e8 <I2C_Master_ISR_IT+0x56>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d00d      	beq.n	80042e8 <I2C_Master_ISR_IT+0x56>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	2210      	movs	r2, #16
 80042d2:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042d8:	f043 0204 	orr.w	r2, r3, #4
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80042e0:	68f8      	ldr	r0, [r7, #12]
 80042e2:	f001 fb86 	bl	80059f2 <I2C_Flush_TXDR>
 80042e6:	e0e4      	b.n	80044b2 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	f003 0304 	and.w	r3, r3, #4
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d022      	beq.n	8004338 <I2C_Master_ISR_IT+0xa6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d01d      	beq.n	8004338 <I2C_Master_ISR_IT+0xa6>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	f023 0304 	bic.w	r3, r3, #4
 8004302:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800430e:	b2d2      	uxtb	r2, r2
 8004310:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004316:	1c5a      	adds	r2, r3, #1
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004320:	3b01      	subs	r3, #1
 8004322:	b29a      	uxth	r2, r3
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800432c:	b29b      	uxth	r3, r3
 800432e:	3b01      	subs	r3, #1
 8004330:	b29a      	uxth	r2, r3
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004336:	e0bc      	b.n	80044b2 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8004338:	697b      	ldr	r3, [r7, #20]
 800433a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800433e:	2b00      	cmp	r3, #0
 8004340:	d128      	bne.n	8004394 <I2C_Master_ISR_IT+0x102>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8004348:	2b00      	cmp	r3, #0
 800434a:	d023      	beq.n	8004394 <I2C_Master_ISR_IT+0x102>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	f003 0302 	and.w	r3, r3, #2
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004352:	2b00      	cmp	r3, #0
 8004354:	d01e      	beq.n	8004394 <I2C_Master_ISR_IT+0x102>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800435a:	b29b      	uxth	r3, r3
 800435c:	2b00      	cmp	r3, #0
 800435e:	f000 80a8 	beq.w	80044b2 <I2C_Master_ISR_IT+0x220>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004366:	781a      	ldrb	r2, [r3, #0]
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004372:	1c5a      	adds	r2, r3, #1
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800437c:	3b01      	subs	r3, #1
 800437e:	b29a      	uxth	r2, r3
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004388:	b29b      	uxth	r3, r3
 800438a:	3b01      	subs	r3, #1
 800438c:	b29a      	uxth	r2, r3
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->XferCount != 0U)
 8004392:	e08e      	b.n	80044b2 <I2C_Master_ISR_IT+0x220>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800439a:	2b00      	cmp	r3, #0
 800439c:	d05c      	beq.n	8004458 <I2C_Master_ISR_IT+0x1c6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d057      	beq.n	8004458 <I2C_Master_ISR_IT+0x1c6>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043ac:	b29b      	uxth	r3, r3
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d040      	beq.n	8004434 <I2C_Master_ISR_IT+0x1a2>
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d13c      	bne.n	8004434 <I2C_Master_ISR_IT+0x1a2>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	b29b      	uxth	r3, r3
 80043c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80043c6:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043cc:	b29b      	uxth	r3, r3
 80043ce:	2bff      	cmp	r3, #255	@ 0xff
 80043d0:	d90e      	bls.n	80043f0 <I2C_Master_ISR_IT+0x15e>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	22ff      	movs	r2, #255	@ 0xff
 80043d6:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043dc:	b2da      	uxtb	r2, r3
 80043de:	8a79      	ldrh	r1, [r7, #18]
 80043e0:	2300      	movs	r3, #0
 80043e2:	9300      	str	r3, [sp, #0]
 80043e4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80043e8:	68f8      	ldr	r0, [r7, #12]
 80043ea:	f001 fcc9 	bl	8005d80 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80043ee:	e032      	b.n	8004456 <I2C_Master_ISR_IT+0x1c4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043f4:	b29a      	uxth	r2, r3
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043fe:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004402:	d00b      	beq.n	800441c <I2C_Master_ISR_IT+0x18a>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004408:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800440e:	8a79      	ldrh	r1, [r7, #18]
 8004410:	2000      	movs	r0, #0
 8004412:	9000      	str	r0, [sp, #0]
 8004414:	68f8      	ldr	r0, [r7, #12]
 8004416:	f001 fcb3 	bl	8005d80 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800441a:	e01c      	b.n	8004456 <I2C_Master_ISR_IT+0x1c4>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004420:	b2da      	uxtb	r2, r3
 8004422:	8a79      	ldrh	r1, [r7, #18]
 8004424:	2300      	movs	r3, #0
 8004426:	9300      	str	r3, [sp, #0]
 8004428:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800442c:	68f8      	ldr	r0, [r7, #12]
 800442e:	f001 fca7 	bl	8005d80 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004432:	e010      	b.n	8004456 <I2C_Master_ISR_IT+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800443e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004442:	d003      	beq.n	800444c <I2C_Master_ISR_IT+0x1ba>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8004444:	68f8      	ldr	r0, [r7, #12]
 8004446:	f000 fdb3 	bl	8004fb0 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800444a:	e032      	b.n	80044b2 <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800444c:	2140      	movs	r1, #64	@ 0x40
 800444e:	68f8      	ldr	r0, [r7, #12]
 8004450:	f001 f9b8 	bl	80057c4 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004454:	e02d      	b.n	80044b2 <I2C_Master_ISR_IT+0x220>
 8004456:	e02c      	b.n	80044b2 <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800445e:	2b00      	cmp	r3, #0
 8004460:	d027      	beq.n	80044b2 <I2C_Master_ISR_IT+0x220>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8004468:	2b00      	cmp	r3, #0
 800446a:	d022      	beq.n	80044b2 <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004470:	b29b      	uxth	r3, r3
 8004472:	2b00      	cmp	r3, #0
 8004474:	d119      	bne.n	80044aa <I2C_Master_ISR_IT+0x218>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004480:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004484:	d015      	beq.n	80044b2 <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800448a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800448e:	d108      	bne.n	80044a2 <I2C_Master_ISR_IT+0x210>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	685a      	ldr	r2, [r3, #4]
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800449e:	605a      	str	r2, [r3, #4]
 80044a0:	e007      	b.n	80044b2 <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80044a2:	68f8      	ldr	r0, [r7, #12]
 80044a4:	f000 fd84 	bl	8004fb0 <I2C_ITMasterSeqCplt>
 80044a8:	e003      	b.n	80044b2 <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80044aa:	2140      	movs	r1, #64	@ 0x40
 80044ac:	68f8      	ldr	r0, [r7, #12]
 80044ae:	f001 f989 	bl	80057c4 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	f003 0320 	and.w	r3, r3, #32
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d008      	beq.n	80044ce <I2C_Master_ISR_IT+0x23c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d003      	beq.n	80044ce <I2C_Master_ISR_IT+0x23c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 80044c6:	6979      	ldr	r1, [r7, #20]
 80044c8:	68f8      	ldr	r0, [r7, #12]
 80044ca:	f000 fe0b 	bl	80050e4 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2200      	movs	r2, #0
 80044d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80044d6:	2300      	movs	r3, #0
}
 80044d8:	4618      	mov	r0, r3
 80044da:	3718      	adds	r7, #24
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}

080044e0 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b086      	sub	sp, #24
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	60f8      	str	r0, [r7, #12]
 80044e8:	60b9      	str	r1, [r7, #8]
 80044ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044f0:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80044fc:	2b01      	cmp	r3, #1
 80044fe:	d101      	bne.n	8004504 <I2C_Slave_ISR_IT+0x24>
 8004500:	2302      	movs	r3, #2
 8004502:	e0e2      	b.n	80046ca <I2C_Slave_ISR_IT+0x1ea>
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2201      	movs	r2, #1
 8004508:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	f003 0320 	and.w	r3, r3, #32
 8004512:	2b00      	cmp	r3, #0
 8004514:	d009      	beq.n	800452a <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800451c:	2b00      	cmp	r3, #0
 800451e:	d004      	beq.n	800452a <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8004520:	6939      	ldr	r1, [r7, #16]
 8004522:	68f8      	ldr	r0, [r7, #12]
 8004524:	f000 fea6 	bl	8005274 <I2C_ITSlaveCplt>
 8004528:	e0ca      	b.n	80046c0 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	f003 0310 	and.w	r3, r3, #16
 8004530:	2b00      	cmp	r3, #0
 8004532:	d04b      	beq.n	80045cc <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800453a:	2b00      	cmp	r3, #0
 800453c:	d046      	beq.n	80045cc <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004542:	b29b      	uxth	r3, r3
 8004544:	2b00      	cmp	r3, #0
 8004546:	d128      	bne.n	800459a <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800454e:	b2db      	uxtb	r3, r3
 8004550:	2b28      	cmp	r3, #40	@ 0x28
 8004552:	d108      	bne.n	8004566 <I2C_Slave_ISR_IT+0x86>
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800455a:	d104      	bne.n	8004566 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800455c:	6939      	ldr	r1, [r7, #16]
 800455e:	68f8      	ldr	r0, [r7, #12]
 8004560:	f001 f8dc 	bl	800571c <I2C_ITListenCplt>
 8004564:	e031      	b.n	80045ca <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800456c:	b2db      	uxtb	r3, r3
 800456e:	2b29      	cmp	r3, #41	@ 0x29
 8004570:	d10e      	bne.n	8004590 <I2C_Slave_ISR_IT+0xb0>
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004578:	d00a      	beq.n	8004590 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	2210      	movs	r2, #16
 8004580:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8004582:	68f8      	ldr	r0, [r7, #12]
 8004584:	f001 fa35 	bl	80059f2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004588:	68f8      	ldr	r0, [r7, #12]
 800458a:	f000 fd4e 	bl	800502a <I2C_ITSlaveSeqCplt>
 800458e:	e01c      	b.n	80045ca <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	2210      	movs	r2, #16
 8004596:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8004598:	e08f      	b.n	80046ba <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	2210      	movs	r2, #16
 80045a0:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045a6:	f043 0204 	orr.w	r2, r3, #4
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d003      	beq.n	80045bc <I2C_Slave_ISR_IT+0xdc>
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80045ba:	d17e      	bne.n	80046ba <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045c0:	4619      	mov	r1, r3
 80045c2:	68f8      	ldr	r0, [r7, #12]
 80045c4:	f001 f8fe 	bl	80057c4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80045c8:	e077      	b.n	80046ba <I2C_Slave_ISR_IT+0x1da>
 80045ca:	e076      	b.n	80046ba <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	f003 0304 	and.w	r3, r3, #4
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d02f      	beq.n	8004636 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d02a      	beq.n	8004636 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045e4:	b29b      	uxth	r3, r3
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d018      	beq.n	800461c <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045f4:	b2d2      	uxtb	r2, r2
 80045f6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045fc:	1c5a      	adds	r2, r3, #1
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004606:	3b01      	subs	r3, #1
 8004608:	b29a      	uxth	r2, r3
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004612:	b29b      	uxth	r3, r3
 8004614:	3b01      	subs	r3, #1
 8004616:	b29a      	uxth	r2, r3
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004620:	b29b      	uxth	r3, r3
 8004622:	2b00      	cmp	r3, #0
 8004624:	d14b      	bne.n	80046be <I2C_Slave_ISR_IT+0x1de>
 8004626:	697b      	ldr	r3, [r7, #20]
 8004628:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800462c:	d047      	beq.n	80046be <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800462e:	68f8      	ldr	r0, [r7, #12]
 8004630:	f000 fcfb 	bl	800502a <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8004634:	e043      	b.n	80046be <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	f003 0308 	and.w	r3, r3, #8
 800463c:	2b00      	cmp	r3, #0
 800463e:	d009      	beq.n	8004654 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004646:	2b00      	cmp	r3, #0
 8004648:	d004      	beq.n	8004654 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800464a:	6939      	ldr	r1, [r7, #16]
 800464c:	68f8      	ldr	r0, [r7, #12]
 800464e:	f000 fc2b 	bl	8004ea8 <I2C_ITAddrCplt>
 8004652:	e035      	b.n	80046c0 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	f003 0302 	and.w	r3, r3, #2
 800465a:	2b00      	cmp	r3, #0
 800465c:	d030      	beq.n	80046c0 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004664:	2b00      	cmp	r3, #0
 8004666:	d02b      	beq.n	80046c0 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800466c:	b29b      	uxth	r3, r3
 800466e:	2b00      	cmp	r3, #0
 8004670:	d018      	beq.n	80046a4 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004676:	781a      	ldrb	r2, [r3, #0]
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004682:	1c5a      	adds	r2, r3, #1
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800468c:	b29b      	uxth	r3, r3
 800468e:	3b01      	subs	r3, #1
 8004690:	b29a      	uxth	r2, r3
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800469a:	3b01      	subs	r3, #1
 800469c:	b29a      	uxth	r2, r3
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	851a      	strh	r2, [r3, #40]	@ 0x28
 80046a2:	e00d      	b.n	80046c0 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80046aa:	d002      	beq.n	80046b2 <I2C_Slave_ISR_IT+0x1d2>
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d106      	bne.n	80046c0 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80046b2:	68f8      	ldr	r0, [r7, #12]
 80046b4:	f000 fcb9 	bl	800502a <I2C_ITSlaveSeqCplt>
 80046b8:	e002      	b.n	80046c0 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 80046ba:	bf00      	nop
 80046bc:	e000      	b.n	80046c0 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 80046be:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	2200      	movs	r2, #0
 80046c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80046c8:	2300      	movs	r3, #0
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	3718      	adds	r7, #24
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}

080046d2 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 80046d2:	b580      	push	{r7, lr}
 80046d4:	b088      	sub	sp, #32
 80046d6:	af02      	add	r7, sp, #8
 80046d8:	60f8      	str	r0, [r7, #12]
 80046da:	60b9      	str	r1, [r7, #8]
 80046dc:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	d101      	bne.n	80046ec <I2C_Master_ISR_DMA+0x1a>
 80046e8:	2302      	movs	r3, #2
 80046ea:	e0d9      	b.n	80048a0 <I2C_Master_ISR_DMA+0x1ce>
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	2201      	movs	r2, #1
 80046f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	f003 0310 	and.w	r3, r3, #16
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d016      	beq.n	800472c <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004704:	2b00      	cmp	r3, #0
 8004706:	d011      	beq.n	800472c <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	2210      	movs	r2, #16
 800470e:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004714:	f043 0204 	orr.w	r2, r3, #4
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800471c:	2120      	movs	r1, #32
 800471e:	68f8      	ldr	r0, [r7, #12]
 8004720:	f001 fb60 	bl	8005de4 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004724:	68f8      	ldr	r0, [r7, #12]
 8004726:	f001 f964 	bl	80059f2 <I2C_Flush_TXDR>
 800472a:	e0b4      	b.n	8004896 <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004732:	2b00      	cmp	r3, #0
 8004734:	d071      	beq.n	800481a <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800473c:	2b00      	cmp	r3, #0
 800473e:	d06c      	beq.n	800481a <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	681a      	ldr	r2, [r3, #0]
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800474e:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004754:	b29b      	uxth	r3, r3
 8004756:	2b00      	cmp	r3, #0
 8004758:	d04e      	beq.n	80047f8 <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	b29b      	uxth	r3, r3
 8004762:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004766:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800476c:	b29b      	uxth	r3, r3
 800476e:	2bff      	cmp	r3, #255	@ 0xff
 8004770:	d906      	bls.n	8004780 <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	22ff      	movs	r2, #255	@ 0xff
 8004776:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 8004778:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800477c:	617b      	str	r3, [r7, #20]
 800477e:	e010      	b.n	80047a2 <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004784:	b29a      	uxth	r2, r3
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800478e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004792:	d003      	beq.n	800479c <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004798:	617b      	str	r3, [r7, #20]
 800479a:	e002      	b.n	80047a2 <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800479c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80047a0:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047a6:	b2da      	uxtb	r2, r3
 80047a8:	8a79      	ldrh	r1, [r7, #18]
 80047aa:	2300      	movs	r3, #0
 80047ac:	9300      	str	r3, [sp, #0]
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	68f8      	ldr	r0, [r7, #12]
 80047b2:	f001 fae5 	bl	8005d80 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047ba:	b29a      	uxth	r2, r3
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047c0:	1ad3      	subs	r3, r2, r3
 80047c2:	b29a      	uxth	r2, r3
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80047ce:	b2db      	uxtb	r3, r3
 80047d0:	2b22      	cmp	r3, #34	@ 0x22
 80047d2:	d108      	bne.n	80047e6 <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	681a      	ldr	r2, [r3, #0]
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80047e2:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80047e4:	e057      	b.n	8004896 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	681a      	ldr	r2, [r3, #0]
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80047f4:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80047f6:	e04e      	b.n	8004896 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004802:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004806:	d003      	beq.n	8004810 <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8004808:	68f8      	ldr	r0, [r7, #12]
 800480a:	f000 fbd1 	bl	8004fb0 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800480e:	e042      	b.n	8004896 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8004810:	2140      	movs	r1, #64	@ 0x40
 8004812:	68f8      	ldr	r0, [r7, #12]
 8004814:	f000 ffd6 	bl	80057c4 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8004818:	e03d      	b.n	8004896 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004820:	2b00      	cmp	r3, #0
 8004822:	d028      	beq.n	8004876 <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800482a:	2b00      	cmp	r3, #0
 800482c:	d023      	beq.n	8004876 <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004832:	b29b      	uxth	r3, r3
 8004834:	2b00      	cmp	r3, #0
 8004836:	d119      	bne.n	800486c <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004842:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004846:	d025      	beq.n	8004894 <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800484c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004850:	d108      	bne.n	8004864 <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	685a      	ldr	r2, [r3, #4]
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004860:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8004862:	e017      	b.n	8004894 <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8004864:	68f8      	ldr	r0, [r7, #12]
 8004866:	f000 fba3 	bl	8004fb0 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800486a:	e013      	b.n	8004894 <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800486c:	2140      	movs	r1, #64	@ 0x40
 800486e:	68f8      	ldr	r0, [r7, #12]
 8004870:	f000 ffa8 	bl	80057c4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8004874:	e00e      	b.n	8004894 <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	f003 0320 	and.w	r3, r3, #32
 800487c:	2b00      	cmp	r3, #0
 800487e:	d00a      	beq.n	8004896 <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004886:	2b00      	cmp	r3, #0
 8004888:	d005      	beq.n	8004896 <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800488a:	68b9      	ldr	r1, [r7, #8]
 800488c:	68f8      	ldr	r0, [r7, #12]
 800488e:	f000 fc29 	bl	80050e4 <I2C_ITMasterCplt>
 8004892:	e000      	b.n	8004896 <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 8004894:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	2200      	movs	r2, #0
 800489a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800489e:	2300      	movs	r3, #0
}
 80048a0:	4618      	mov	r0, r3
 80048a2:	3718      	adds	r7, #24
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bd80      	pop	{r7, pc}

080048a8 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b088      	sub	sp, #32
 80048ac:	af02      	add	r7, sp, #8
 80048ae:	60f8      	str	r0, [r7, #12]
 80048b0:	60b9      	str	r1, [r7, #8]
 80048b2:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 80048b4:	4b8d      	ldr	r3, [pc, #564]	@ (8004aec <I2C_Mem_ISR_DMA+0x244>)
 80048b6:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80048be:	2b01      	cmp	r3, #1
 80048c0:	d101      	bne.n	80048c6 <I2C_Mem_ISR_DMA+0x1e>
 80048c2:	2302      	movs	r3, #2
 80048c4:	e10e      	b.n	8004ae4 <I2C_Mem_ISR_DMA+0x23c>
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	2201      	movs	r2, #1
 80048ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	f003 0310 	and.w	r3, r3, #16
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d016      	beq.n	8004906 <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d011      	beq.n	8004906 <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	2210      	movs	r2, #16
 80048e8:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048ee:	f043 0204 	orr.w	r2, r3, #4
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80048f6:	2120      	movs	r1, #32
 80048f8:	68f8      	ldr	r0, [r7, #12]
 80048fa:	f001 fa73 	bl	8005de4 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80048fe:	68f8      	ldr	r0, [r7, #12]
 8004900:	f001 f877 	bl	80059f2 <I2C_Flush_TXDR>
 8004904:	e0e9      	b.n	8004ada <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	f003 0302 	and.w	r3, r3, #2
 800490c:	2b00      	cmp	r3, #0
 800490e:	d00e      	beq.n	800492e <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004916:	2b00      	cmp	r3, #0
 8004918:	d009      	beq.n	800492e <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	68fa      	ldr	r2, [r7, #12]
 8004920:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004922:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	f04f 32ff 	mov.w	r2, #4294967295
 800492a:	651a      	str	r2, [r3, #80]	@ 0x50
 800492c:	e0d5      	b.n	8004ada <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004934:	2b00      	cmp	r3, #0
 8004936:	d05f      	beq.n	80049f8 <I2C_Mem_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800493e:	2b00      	cmp	r3, #0
 8004940:	d05a      	beq.n	80049f8 <I2C_Mem_ISR_DMA+0x150>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004942:	2101      	movs	r1, #1
 8004944:	68f8      	ldr	r0, [r7, #12]
 8004946:	f001 fad1 	bl	8005eec <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800494a:	2110      	movs	r1, #16
 800494c:	68f8      	ldr	r0, [r7, #12]
 800494e:	f001 fa49 	bl	8005de4 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004956:	b29b      	uxth	r3, r3
 8004958:	2b00      	cmp	r3, #0
 800495a:	d048      	beq.n	80049ee <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004960:	b29b      	uxth	r3, r3
 8004962:	2bff      	cmp	r3, #255	@ 0xff
 8004964:	d910      	bls.n	8004988 <I2C_Mem_ISR_DMA+0xe0>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	22ff      	movs	r2, #255	@ 0xff
 800496a:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004970:	b299      	uxth	r1, r3
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004976:	b2da      	uxtb	r2, r3
 8004978:	2300      	movs	r3, #0
 800497a:	9300      	str	r3, [sp, #0]
 800497c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004980:	68f8      	ldr	r0, [r7, #12]
 8004982:	f001 f9fd 	bl	8005d80 <I2C_TransferConfig>
 8004986:	e011      	b.n	80049ac <I2C_Mem_ISR_DMA+0x104>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800498c:	b29a      	uxth	r2, r3
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004996:	b299      	uxth	r1, r3
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800499c:	b2da      	uxtb	r2, r3
 800499e:	2300      	movs	r3, #0
 80049a0:	9300      	str	r3, [sp, #0]
 80049a2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80049a6:	68f8      	ldr	r0, [r7, #12]
 80049a8:	f001 f9ea 	bl	8005d80 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049b0:	b29a      	uxth	r2, r3
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049b6:	1ad3      	subs	r3, r2, r3
 80049b8:	b29a      	uxth	r2, r3
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80049c4:	b2db      	uxtb	r3, r3
 80049c6:	2b22      	cmp	r3, #34	@ 0x22
 80049c8:	d108      	bne.n	80049dc <I2C_Mem_ISR_DMA+0x134>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	681a      	ldr	r2, [r3, #0]
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80049d8:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80049da:	e07e      	b.n	8004ada <I2C_Mem_ISR_DMA+0x232>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	681a      	ldr	r2, [r3, #0]
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80049ea:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80049ec:	e075      	b.n	8004ada <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80049ee:	2140      	movs	r1, #64	@ 0x40
 80049f0:	68f8      	ldr	r0, [r7, #12]
 80049f2:	f000 fee7 	bl	80057c4 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80049f6:	e070      	b.n	8004ada <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d05d      	beq.n	8004abe <I2C_Mem_ISR_DMA+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d058      	beq.n	8004abe <I2C_Mem_ISR_DMA+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004a0c:	2101      	movs	r1, #1
 8004a0e:	68f8      	ldr	r0, [r7, #12]
 8004a10:	f001 fa6c 	bl	8005eec <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8004a14:	2110      	movs	r1, #16
 8004a16:	68f8      	ldr	r0, [r7, #12]
 8004a18:	f001 f9e4 	bl	8005de4 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a22:	b2db      	uxtb	r3, r3
 8004a24:	2b22      	cmp	r3, #34	@ 0x22
 8004a26:	d101      	bne.n	8004a2c <I2C_Mem_ISR_DMA+0x184>
    {
      direction = I2C_GENERATE_START_READ;
 8004a28:	4b31      	ldr	r3, [pc, #196]	@ (8004af0 <I2C_Mem_ISR_DMA+0x248>)
 8004a2a:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a30:	b29b      	uxth	r3, r3
 8004a32:	2bff      	cmp	r3, #255	@ 0xff
 8004a34:	d910      	bls.n	8004a58 <I2C_Mem_ISR_DMA+0x1b0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	22ff      	movs	r2, #255	@ 0xff
 8004a3a:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a40:	b299      	uxth	r1, r3
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a46:	b2da      	uxtb	r2, r3
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	9300      	str	r3, [sp, #0]
 8004a4c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004a50:	68f8      	ldr	r0, [r7, #12]
 8004a52:	f001 f995 	bl	8005d80 <I2C_TransferConfig>
 8004a56:	e011      	b.n	8004a7c <I2C_Mem_ISR_DMA+0x1d4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a5c:	b29a      	uxth	r2, r3
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a66:	b299      	uxth	r1, r3
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a6c:	b2da      	uxtb	r2, r3
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	9300      	str	r3, [sp, #0]
 8004a72:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004a76:	68f8      	ldr	r0, [r7, #12]
 8004a78:	f001 f982 	bl	8005d80 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a80:	b29a      	uxth	r2, r3
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a86:	1ad3      	subs	r3, r2, r3
 8004a88:	b29a      	uxth	r2, r3
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a94:	b2db      	uxtb	r3, r3
 8004a96:	2b22      	cmp	r3, #34	@ 0x22
 8004a98:	d108      	bne.n	8004aac <I2C_Mem_ISR_DMA+0x204>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	681a      	ldr	r2, [r3, #0]
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004aa8:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004aaa:	e016      	b.n	8004ada <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	681a      	ldr	r2, [r3, #0]
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004aba:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004abc:	e00d      	b.n	8004ada <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	f003 0320 	and.w	r3, r3, #32
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d008      	beq.n	8004ada <I2C_Mem_ISR_DMA+0x232>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d003      	beq.n	8004ada <I2C_Mem_ISR_DMA+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8004ad2:	68b9      	ldr	r1, [r7, #8]
 8004ad4:	68f8      	ldr	r0, [r7, #12]
 8004ad6:	f000 fb05 	bl	80050e4 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	2200      	movs	r2, #0
 8004ade:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004ae2:	2300      	movs	r3, #0
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	3718      	adds	r7, #24
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd80      	pop	{r7, pc}
 8004aec:	80002000 	.word	0x80002000
 8004af0:	80002400 	.word	0x80002400

08004af4 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b088      	sub	sp, #32
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	60f8      	str	r0, [r7, #12]
 8004afc:	60b9      	str	r1, [r7, #8]
 8004afe:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b04:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8004b06:	2300      	movs	r3, #0
 8004b08:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004b10:	2b01      	cmp	r3, #1
 8004b12:	d101      	bne.n	8004b18 <I2C_Slave_ISR_DMA+0x24>
 8004b14:	2302      	movs	r3, #2
 8004b16:	e1c2      	b.n	8004e9e <I2C_Slave_ISR_DMA+0x3aa>
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	f003 0320 	and.w	r3, r3, #32
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d009      	beq.n	8004b3e <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d004      	beq.n	8004b3e <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8004b34:	68b9      	ldr	r1, [r7, #8]
 8004b36:	68f8      	ldr	r0, [r7, #12]
 8004b38:	f000 fb9c 	bl	8005274 <I2C_ITSlaveCplt>
 8004b3c:	e1aa      	b.n	8004e94 <I2C_Slave_ISR_DMA+0x3a0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	f003 0310 	and.w	r3, r3, #16
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	f000 8197 	beq.w	8004e78 <I2C_Slave_ISR_DMA+0x384>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	f000 8191 	beq.w	8004e78 <I2C_Slave_ISR_DMA+0x384>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d105      	bne.n	8004b6c <I2C_Slave_ISR_DMA+0x78>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	f000 817f 	beq.w	8004e6a <I2C_Slave_ISR_DMA+0x376>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d07b      	beq.n	8004c6c <I2C_Slave_ISR_DMA+0x178>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d076      	beq.n	8004c6c <I2C_Slave_ISR_DMA+0x178>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a74      	ldr	r2, [pc, #464]	@ (8004d58 <I2C_Slave_ISR_DMA+0x264>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d059      	beq.n	8004c3e <I2C_Slave_ISR_DMA+0x14a>
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a72      	ldr	r2, [pc, #456]	@ (8004d5c <I2C_Slave_ISR_DMA+0x268>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d053      	beq.n	8004c3e <I2C_Slave_ISR_DMA+0x14a>
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a70      	ldr	r2, [pc, #448]	@ (8004d60 <I2C_Slave_ISR_DMA+0x26c>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d04d      	beq.n	8004c3e <I2C_Slave_ISR_DMA+0x14a>
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a6e      	ldr	r2, [pc, #440]	@ (8004d64 <I2C_Slave_ISR_DMA+0x270>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d047      	beq.n	8004c3e <I2C_Slave_ISR_DMA+0x14a>
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a6c      	ldr	r2, [pc, #432]	@ (8004d68 <I2C_Slave_ISR_DMA+0x274>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d041      	beq.n	8004c3e <I2C_Slave_ISR_DMA+0x14a>
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a6a      	ldr	r2, [pc, #424]	@ (8004d6c <I2C_Slave_ISR_DMA+0x278>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d03b      	beq.n	8004c3e <I2C_Slave_ISR_DMA+0x14a>
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a68      	ldr	r2, [pc, #416]	@ (8004d70 <I2C_Slave_ISR_DMA+0x27c>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d035      	beq.n	8004c3e <I2C_Slave_ISR_DMA+0x14a>
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a66      	ldr	r2, [pc, #408]	@ (8004d74 <I2C_Slave_ISR_DMA+0x280>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d02f      	beq.n	8004c3e <I2C_Slave_ISR_DMA+0x14a>
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a64      	ldr	r2, [pc, #400]	@ (8004d78 <I2C_Slave_ISR_DMA+0x284>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d029      	beq.n	8004c3e <I2C_Slave_ISR_DMA+0x14a>
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a62      	ldr	r2, [pc, #392]	@ (8004d7c <I2C_Slave_ISR_DMA+0x288>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d023      	beq.n	8004c3e <I2C_Slave_ISR_DMA+0x14a>
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a60      	ldr	r2, [pc, #384]	@ (8004d80 <I2C_Slave_ISR_DMA+0x28c>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d01d      	beq.n	8004c3e <I2C_Slave_ISR_DMA+0x14a>
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a5e      	ldr	r2, [pc, #376]	@ (8004d84 <I2C_Slave_ISR_DMA+0x290>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d017      	beq.n	8004c3e <I2C_Slave_ISR_DMA+0x14a>
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a5c      	ldr	r2, [pc, #368]	@ (8004d88 <I2C_Slave_ISR_DMA+0x294>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d011      	beq.n	8004c3e <I2C_Slave_ISR_DMA+0x14a>
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a5a      	ldr	r2, [pc, #360]	@ (8004d8c <I2C_Slave_ISR_DMA+0x298>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d00b      	beq.n	8004c3e <I2C_Slave_ISR_DMA+0x14a>
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a58      	ldr	r2, [pc, #352]	@ (8004d90 <I2C_Slave_ISR_DMA+0x29c>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d005      	beq.n	8004c3e <I2C_Slave_ISR_DMA+0x14a>
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a56      	ldr	r2, [pc, #344]	@ (8004d94 <I2C_Slave_ISR_DMA+0x2a0>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d109      	bne.n	8004c52 <I2C_Slave_ISR_DMA+0x15e>
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	bf0c      	ite	eq
 8004c4a:	2301      	moveq	r3, #1
 8004c4c:	2300      	movne	r3, #0
 8004c4e:	b2db      	uxtb	r3, r3
 8004c50:	e008      	b.n	8004c64 <I2C_Slave_ISR_DMA+0x170>
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	bf0c      	ite	eq
 8004c5e:	2301      	moveq	r3, #1
 8004c60:	2300      	movne	r3, #0
 8004c62:	b2db      	uxtb	r3, r3
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d001      	beq.n	8004c6c <I2C_Slave_ISR_DMA+0x178>
          {
            treatdmanack = 1U;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	f000 809e 	beq.w	8004db2 <I2C_Slave_ISR_DMA+0x2be>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	f000 8098 	beq.w	8004db2 <I2C_Slave_ISR_DMA+0x2be>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a33      	ldr	r2, [pc, #204]	@ (8004d58 <I2C_Slave_ISR_DMA+0x264>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d059      	beq.n	8004d42 <I2C_Slave_ISR_DMA+0x24e>
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a31      	ldr	r2, [pc, #196]	@ (8004d5c <I2C_Slave_ISR_DMA+0x268>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d053      	beq.n	8004d42 <I2C_Slave_ISR_DMA+0x24e>
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a2f      	ldr	r2, [pc, #188]	@ (8004d60 <I2C_Slave_ISR_DMA+0x26c>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d04d      	beq.n	8004d42 <I2C_Slave_ISR_DMA+0x24e>
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a2d      	ldr	r2, [pc, #180]	@ (8004d64 <I2C_Slave_ISR_DMA+0x270>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d047      	beq.n	8004d42 <I2C_Slave_ISR_DMA+0x24e>
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a2b      	ldr	r2, [pc, #172]	@ (8004d68 <I2C_Slave_ISR_DMA+0x274>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d041      	beq.n	8004d42 <I2C_Slave_ISR_DMA+0x24e>
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a29      	ldr	r2, [pc, #164]	@ (8004d6c <I2C_Slave_ISR_DMA+0x278>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d03b      	beq.n	8004d42 <I2C_Slave_ISR_DMA+0x24e>
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a27      	ldr	r2, [pc, #156]	@ (8004d70 <I2C_Slave_ISR_DMA+0x27c>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d035      	beq.n	8004d42 <I2C_Slave_ISR_DMA+0x24e>
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a25      	ldr	r2, [pc, #148]	@ (8004d74 <I2C_Slave_ISR_DMA+0x280>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d02f      	beq.n	8004d42 <I2C_Slave_ISR_DMA+0x24e>
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a23      	ldr	r2, [pc, #140]	@ (8004d78 <I2C_Slave_ISR_DMA+0x284>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d029      	beq.n	8004d42 <I2C_Slave_ISR_DMA+0x24e>
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a21      	ldr	r2, [pc, #132]	@ (8004d7c <I2C_Slave_ISR_DMA+0x288>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d023      	beq.n	8004d42 <I2C_Slave_ISR_DMA+0x24e>
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a1f      	ldr	r2, [pc, #124]	@ (8004d80 <I2C_Slave_ISR_DMA+0x28c>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d01d      	beq.n	8004d42 <I2C_Slave_ISR_DMA+0x24e>
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a1d      	ldr	r2, [pc, #116]	@ (8004d84 <I2C_Slave_ISR_DMA+0x290>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d017      	beq.n	8004d42 <I2C_Slave_ISR_DMA+0x24e>
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a1b      	ldr	r2, [pc, #108]	@ (8004d88 <I2C_Slave_ISR_DMA+0x294>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d011      	beq.n	8004d42 <I2C_Slave_ISR_DMA+0x24e>
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a19      	ldr	r2, [pc, #100]	@ (8004d8c <I2C_Slave_ISR_DMA+0x298>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d00b      	beq.n	8004d42 <I2C_Slave_ISR_DMA+0x24e>
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a17      	ldr	r2, [pc, #92]	@ (8004d90 <I2C_Slave_ISR_DMA+0x29c>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d005      	beq.n	8004d42 <I2C_Slave_ISR_DMA+0x24e>
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a15      	ldr	r2, [pc, #84]	@ (8004d94 <I2C_Slave_ISR_DMA+0x2a0>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d12a      	bne.n	8004d98 <I2C_Slave_ISR_DMA+0x2a4>
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	bf0c      	ite	eq
 8004d4e:	2301      	moveq	r3, #1
 8004d50:	2300      	movne	r3, #0
 8004d52:	b2db      	uxtb	r3, r3
 8004d54:	e029      	b.n	8004daa <I2C_Slave_ISR_DMA+0x2b6>
 8004d56:	bf00      	nop
 8004d58:	40020010 	.word	0x40020010
 8004d5c:	40020028 	.word	0x40020028
 8004d60:	40020040 	.word	0x40020040
 8004d64:	40020058 	.word	0x40020058
 8004d68:	40020070 	.word	0x40020070
 8004d6c:	40020088 	.word	0x40020088
 8004d70:	400200a0 	.word	0x400200a0
 8004d74:	400200b8 	.word	0x400200b8
 8004d78:	40020410 	.word	0x40020410
 8004d7c:	40020428 	.word	0x40020428
 8004d80:	40020440 	.word	0x40020440
 8004d84:	40020458 	.word	0x40020458
 8004d88:	40020470 	.word	0x40020470
 8004d8c:	40020488 	.word	0x40020488
 8004d90:	400204a0 	.word	0x400204a0
 8004d94:	400204b8 	.word	0x400204b8
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	bf0c      	ite	eq
 8004da4:	2301      	moveq	r3, #1
 8004da6:	2300      	movne	r3, #0
 8004da8:	b2db      	uxtb	r3, r3
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d001      	beq.n	8004db2 <I2C_Slave_ISR_DMA+0x2be>
          {
            treatdmanack = 1U;
 8004dae:	2301      	movs	r3, #1
 8004db0:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8004db2:	69fb      	ldr	r3, [r7, #28]
 8004db4:	2b01      	cmp	r3, #1
 8004db6:	d128      	bne.n	8004e0a <I2C_Slave_ISR_DMA+0x316>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004dbe:	b2db      	uxtb	r3, r3
 8004dc0:	2b28      	cmp	r3, #40	@ 0x28
 8004dc2:	d108      	bne.n	8004dd6 <I2C_Slave_ISR_DMA+0x2e2>
 8004dc4:	69bb      	ldr	r3, [r7, #24]
 8004dc6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004dca:	d104      	bne.n	8004dd6 <I2C_Slave_ISR_DMA+0x2e2>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8004dcc:	68b9      	ldr	r1, [r7, #8]
 8004dce:	68f8      	ldr	r0, [r7, #12]
 8004dd0:	f000 fca4 	bl	800571c <I2C_ITListenCplt>
 8004dd4:	e048      	b.n	8004e68 <I2C_Slave_ISR_DMA+0x374>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ddc:	b2db      	uxtb	r3, r3
 8004dde:	2b29      	cmp	r3, #41	@ 0x29
 8004de0:	d10e      	bne.n	8004e00 <I2C_Slave_ISR_DMA+0x30c>
 8004de2:	69bb      	ldr	r3, [r7, #24]
 8004de4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004de8:	d00a      	beq.n	8004e00 <I2C_Slave_ISR_DMA+0x30c>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	2210      	movs	r2, #16
 8004df0:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8004df2:	68f8      	ldr	r0, [r7, #12]
 8004df4:	f000 fdfd 	bl	80059f2 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8004df8:	68f8      	ldr	r0, [r7, #12]
 8004dfa:	f000 f916 	bl	800502a <I2C_ITSlaveSeqCplt>
 8004dfe:	e033      	b.n	8004e68 <I2C_Slave_ISR_DMA+0x374>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	2210      	movs	r2, #16
 8004e06:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8004e08:	e034      	b.n	8004e74 <I2C_Slave_ISR_DMA+0x380>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	2210      	movs	r2, #16
 8004e10:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e16:	f043 0204 	orr.w	r2, r3, #4
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e24:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004e26:	69bb      	ldr	r3, [r7, #24]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d003      	beq.n	8004e34 <I2C_Slave_ISR_DMA+0x340>
 8004e2c:	69bb      	ldr	r3, [r7, #24]
 8004e2e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004e32:	d11f      	bne.n	8004e74 <I2C_Slave_ISR_DMA+0x380>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004e34:	7dfb      	ldrb	r3, [r7, #23]
 8004e36:	2b21      	cmp	r3, #33	@ 0x21
 8004e38:	d002      	beq.n	8004e40 <I2C_Slave_ISR_DMA+0x34c>
 8004e3a:	7dfb      	ldrb	r3, [r7, #23]
 8004e3c:	2b29      	cmp	r3, #41	@ 0x29
 8004e3e:	d103      	bne.n	8004e48 <I2C_Slave_ISR_DMA+0x354>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	2221      	movs	r2, #33	@ 0x21
 8004e44:	631a      	str	r2, [r3, #48]	@ 0x30
 8004e46:	e008      	b.n	8004e5a <I2C_Slave_ISR_DMA+0x366>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004e48:	7dfb      	ldrb	r3, [r7, #23]
 8004e4a:	2b22      	cmp	r3, #34	@ 0x22
 8004e4c:	d002      	beq.n	8004e54 <I2C_Slave_ISR_DMA+0x360>
 8004e4e:	7dfb      	ldrb	r3, [r7, #23]
 8004e50:	2b2a      	cmp	r3, #42	@ 0x2a
 8004e52:	d102      	bne.n	8004e5a <I2C_Slave_ISR_DMA+0x366>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	2222      	movs	r2, #34	@ 0x22
 8004e58:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e5e:	4619      	mov	r1, r3
 8004e60:	68f8      	ldr	r0, [r7, #12]
 8004e62:	f000 fcaf 	bl	80057c4 <I2C_ITError>
      if (treatdmanack == 1U)
 8004e66:	e005      	b.n	8004e74 <I2C_Slave_ISR_DMA+0x380>
 8004e68:	e004      	b.n	8004e74 <I2C_Slave_ISR_DMA+0x380>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	2210      	movs	r2, #16
 8004e70:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004e72:	e00f      	b.n	8004e94 <I2C_Slave_ISR_DMA+0x3a0>
      if (treatdmanack == 1U)
 8004e74:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004e76:	e00d      	b.n	8004e94 <I2C_Slave_ISR_DMA+0x3a0>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	f003 0308 	and.w	r3, r3, #8
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d008      	beq.n	8004e94 <I2C_Slave_ISR_DMA+0x3a0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d003      	beq.n	8004e94 <I2C_Slave_ISR_DMA+0x3a0>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8004e8c:	68b9      	ldr	r1, [r7, #8]
 8004e8e:	68f8      	ldr	r0, [r7, #12]
 8004e90:	f000 f80a 	bl	8004ea8 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	2200      	movs	r2, #0
 8004e98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004e9c:	2300      	movs	r3, #0
}
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	3720      	adds	r7, #32
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd80      	pop	{r7, pc}
 8004ea6:	bf00      	nop

08004ea8 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b084      	sub	sp, #16
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
 8004eb0:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004eb8:	b2db      	uxtb	r3, r3
 8004eba:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004ebe:	2b28      	cmp	r3, #40	@ 0x28
 8004ec0:	d16a      	bne.n	8004f98 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	699b      	ldr	r3, [r3, #24]
 8004ec8:	0c1b      	lsrs	r3, r3, #16
 8004eca:	b2db      	uxtb	r3, r3
 8004ecc:	f003 0301 	and.w	r3, r3, #1
 8004ed0:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	699b      	ldr	r3, [r3, #24]
 8004ed8:	0c1b      	lsrs	r3, r3, #16
 8004eda:	b29b      	uxth	r3, r3
 8004edc:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8004ee0:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	689b      	ldr	r3, [r3, #8]
 8004ee8:	b29b      	uxth	r3, r3
 8004eea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004eee:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	68db      	ldr	r3, [r3, #12]
 8004ef6:	b29b      	uxth	r3, r3
 8004ef8:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8004efc:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	68db      	ldr	r3, [r3, #12]
 8004f02:	2b02      	cmp	r3, #2
 8004f04:	d138      	bne.n	8004f78 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8004f06:	897b      	ldrh	r3, [r7, #10]
 8004f08:	09db      	lsrs	r3, r3, #7
 8004f0a:	b29a      	uxth	r2, r3
 8004f0c:	89bb      	ldrh	r3, [r7, #12]
 8004f0e:	4053      	eors	r3, r2
 8004f10:	b29b      	uxth	r3, r3
 8004f12:	f003 0306 	and.w	r3, r3, #6
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d11c      	bne.n	8004f54 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8004f1a:	897b      	ldrh	r3, [r7, #10]
 8004f1c:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f22:	1c5a      	adds	r2, r3, #1
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f2c:	2b02      	cmp	r3, #2
 8004f2e:	d13b      	bne.n	8004fa8 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2200      	movs	r2, #0
 8004f34:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	2208      	movs	r2, #8
 8004f3c:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2200      	movs	r2, #0
 8004f42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004f46:	89ba      	ldrh	r2, [r7, #12]
 8004f48:	7bfb      	ldrb	r3, [r7, #15]
 8004f4a:	4619      	mov	r1, r3
 8004f4c:	6878      	ldr	r0, [r7, #4]
 8004f4e:	f7ff f952 	bl	80041f6 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004f52:	e029      	b.n	8004fa8 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8004f54:	893b      	ldrh	r3, [r7, #8]
 8004f56:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004f58:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004f5c:	6878      	ldr	r0, [r7, #4]
 8004f5e:	f000 ffc5 	bl	8005eec <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2200      	movs	r2, #0
 8004f66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004f6a:	89ba      	ldrh	r2, [r7, #12]
 8004f6c:	7bfb      	ldrb	r3, [r7, #15]
 8004f6e:	4619      	mov	r1, r3
 8004f70:	6878      	ldr	r0, [r7, #4]
 8004f72:	f7ff f940 	bl	80041f6 <HAL_I2C_AddrCallback>
}
 8004f76:	e017      	b.n	8004fa8 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004f78:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004f7c:	6878      	ldr	r0, [r7, #4]
 8004f7e:	f000 ffb5 	bl	8005eec <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2200      	movs	r2, #0
 8004f86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004f8a:	89ba      	ldrh	r2, [r7, #12]
 8004f8c:	7bfb      	ldrb	r3, [r7, #15]
 8004f8e:	4619      	mov	r1, r3
 8004f90:	6878      	ldr	r0, [r7, #4]
 8004f92:	f7ff f930 	bl	80041f6 <HAL_I2C_AddrCallback>
}
 8004f96:	e007      	b.n	8004fa8 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	2208      	movs	r2, #8
 8004f9e:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8004fa8:	bf00      	nop
 8004faa:	3710      	adds	r7, #16
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bd80      	pop	{r7, pc}

08004fb0 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b082      	sub	sp, #8
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004fc6:	b2db      	uxtb	r3, r3
 8004fc8:	2b21      	cmp	r3, #33	@ 0x21
 8004fca:	d115      	bne.n	8004ff8 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2220      	movs	r2, #32
 8004fd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2211      	movs	r2, #17
 8004fd8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004fe0:	2101      	movs	r1, #1
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	f000 ff82 	bl	8005eec <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2200      	movs	r2, #0
 8004fec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8004ff0:	6878      	ldr	r0, [r7, #4]
 8004ff2:	f7ff f8d8 	bl	80041a6 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004ff6:	e014      	b.n	8005022 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2220      	movs	r2, #32
 8004ffc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2212      	movs	r2, #18
 8005004:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2200      	movs	r2, #0
 800500a:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800500c:	2102      	movs	r1, #2
 800500e:	6878      	ldr	r0, [r7, #4]
 8005010:	f000 ff6c 	bl	8005eec <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2200      	movs	r2, #0
 8005018:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800501c:	6878      	ldr	r0, [r7, #4]
 800501e:	f7ff f8cc 	bl	80041ba <HAL_I2C_MasterRxCpltCallback>
}
 8005022:	bf00      	nop
 8005024:	3708      	adds	r7, #8
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}

0800502a <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800502a:	b580      	push	{r7, lr}
 800502c:	b084      	sub	sp, #16
 800502e:	af00      	add	r7, sp, #0
 8005030:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2200      	movs	r2, #0
 800503e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005048:	2b00      	cmp	r3, #0
 800504a:	d008      	beq.n	800505e <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	681a      	ldr	r2, [r3, #0]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800505a:	601a      	str	r2, [r3, #0]
 800505c:	e00c      	b.n	8005078 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005064:	2b00      	cmp	r3, #0
 8005066:	d007      	beq.n	8005078 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	681a      	ldr	r2, [r3, #0]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005076:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800507e:	b2db      	uxtb	r3, r3
 8005080:	2b29      	cmp	r3, #41	@ 0x29
 8005082:	d112      	bne.n	80050aa <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2228      	movs	r2, #40	@ 0x28
 8005088:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2221      	movs	r2, #33	@ 0x21
 8005090:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005092:	2101      	movs	r1, #1
 8005094:	6878      	ldr	r0, [r7, #4]
 8005096:	f000 ff29 	bl	8005eec <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2200      	movs	r2, #0
 800509e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80050a2:	6878      	ldr	r0, [r7, #4]
 80050a4:	f7ff f893 	bl	80041ce <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80050a8:	e017      	b.n	80050da <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80050b0:	b2db      	uxtb	r3, r3
 80050b2:	2b2a      	cmp	r3, #42	@ 0x2a
 80050b4:	d111      	bne.n	80050da <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2228      	movs	r2, #40	@ 0x28
 80050ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2222      	movs	r2, #34	@ 0x22
 80050c2:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80050c4:	2102      	movs	r1, #2
 80050c6:	6878      	ldr	r0, [r7, #4]
 80050c8:	f000 ff10 	bl	8005eec <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2200      	movs	r2, #0
 80050d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80050d4:	6878      	ldr	r0, [r7, #4]
 80050d6:	f7ff f884 	bl	80041e2 <HAL_I2C_SlaveRxCpltCallback>
}
 80050da:	bf00      	nop
 80050dc:	3710      	adds	r7, #16
 80050de:	46bd      	mov	sp, r7
 80050e0:	bd80      	pop	{r7, pc}
	...

080050e4 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b086      	sub	sp, #24
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
 80050ec:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	2220      	movs	r2, #32
 80050f8:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005100:	b2db      	uxtb	r3, r3
 8005102:	2b21      	cmp	r3, #33	@ 0x21
 8005104:	d107      	bne.n	8005116 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005106:	2101      	movs	r1, #1
 8005108:	6878      	ldr	r0, [r7, #4]
 800510a:	f000 feef 	bl	8005eec <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2211      	movs	r2, #17
 8005112:	631a      	str	r2, [r3, #48]	@ 0x30
 8005114:	e00c      	b.n	8005130 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800511c:	b2db      	uxtb	r3, r3
 800511e:	2b22      	cmp	r3, #34	@ 0x22
 8005120:	d106      	bne.n	8005130 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005122:	2102      	movs	r1, #2
 8005124:	6878      	ldr	r0, [r7, #4]
 8005126:	f000 fee1 	bl	8005eec <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2212      	movs	r2, #18
 800512e:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	6859      	ldr	r1, [r3, #4]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681a      	ldr	r2, [r3, #0]
 800513a:	4b4c      	ldr	r3, [pc, #304]	@ (800526c <I2C_ITMasterCplt+0x188>)
 800513c:	400b      	ands	r3, r1
 800513e:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2200      	movs	r2, #0
 8005144:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	4a49      	ldr	r2, [pc, #292]	@ (8005270 <I2C_ITMasterCplt+0x18c>)
 800514a:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	f003 0310 	and.w	r3, r3, #16
 8005152:	2b00      	cmp	r3, #0
 8005154:	d009      	beq.n	800516a <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	2210      	movs	r2, #16
 800515c:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005162:	f043 0204 	orr.w	r2, r3, #4
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005170:	b2db      	uxtb	r3, r3
 8005172:	2b60      	cmp	r3, #96	@ 0x60
 8005174:	d10a      	bne.n	800518c <I2C_ITMasterCplt+0xa8>
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	f003 0304 	and.w	r3, r3, #4
 800517c:	2b00      	cmp	r3, #0
 800517e:	d005      	beq.n	800518c <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005186:	b2db      	uxtb	r3, r3
 8005188:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800518a:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800518c:	6878      	ldr	r0, [r7, #4]
 800518e:	f000 fc30 	bl	80059f2 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005196:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800519e:	b2db      	uxtb	r3, r3
 80051a0:	2b60      	cmp	r3, #96	@ 0x60
 80051a2:	d002      	beq.n	80051aa <I2C_ITMasterCplt+0xc6>
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d006      	beq.n	80051b8 <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051ae:	4619      	mov	r1, r3
 80051b0:	6878      	ldr	r0, [r7, #4]
 80051b2:	f000 fb07 	bl	80057c4 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 80051b6:	e054      	b.n	8005262 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80051be:	b2db      	uxtb	r3, r3
 80051c0:	2b21      	cmp	r3, #33	@ 0x21
 80051c2:	d124      	bne.n	800520e <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2220      	movs	r2, #32
 80051c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2200      	movs	r2, #0
 80051d0:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80051d8:	b2db      	uxtb	r3, r3
 80051da:	2b40      	cmp	r3, #64	@ 0x40
 80051dc:	d10b      	bne.n	80051f6 <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2200      	movs	r2, #0
 80051e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2200      	movs	r2, #0
 80051ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	f7ff f819 	bl	8004226 <HAL_I2C_MemTxCpltCallback>
}
 80051f4:	e035      	b.n	8005262 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2200      	movs	r2, #0
 80051fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2200      	movs	r2, #0
 8005202:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f7fe ffcd 	bl	80041a6 <HAL_I2C_MasterTxCpltCallback>
}
 800520c:	e029      	b.n	8005262 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005214:	b2db      	uxtb	r3, r3
 8005216:	2b22      	cmp	r3, #34	@ 0x22
 8005218:	d123      	bne.n	8005262 <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2220      	movs	r2, #32
 800521e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2200      	movs	r2, #0
 8005226:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800522e:	b2db      	uxtb	r3, r3
 8005230:	2b40      	cmp	r3, #64	@ 0x40
 8005232:	d10b      	bne.n	800524c <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2200      	movs	r2, #0
 8005238:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2200      	movs	r2, #0
 8005240:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8005244:	6878      	ldr	r0, [r7, #4]
 8005246:	f7fe fff8 	bl	800423a <HAL_I2C_MemRxCpltCallback>
}
 800524a:	e00a      	b.n	8005262 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2200      	movs	r2, #0
 8005250:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2200      	movs	r2, #0
 8005258:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800525c:	6878      	ldr	r0, [r7, #4]
 800525e:	f7fe ffac 	bl	80041ba <HAL_I2C_MasterRxCpltCallback>
}
 8005262:	bf00      	nop
 8005264:	3718      	adds	r7, #24
 8005266:	46bd      	mov	sp, r7
 8005268:	bd80      	pop	{r7, pc}
 800526a:	bf00      	nop
 800526c:	fe00e800 	.word	0xfe00e800
 8005270:	ffff0000 	.word	0xffff0000

08005274 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b086      	sub	sp, #24
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
 800527c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800528e:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005296:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	2220      	movs	r2, #32
 800529e:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80052a0:	7afb      	ldrb	r3, [r7, #11]
 80052a2:	2b21      	cmp	r3, #33	@ 0x21
 80052a4:	d002      	beq.n	80052ac <I2C_ITSlaveCplt+0x38>
 80052a6:	7afb      	ldrb	r3, [r7, #11]
 80052a8:	2b29      	cmp	r3, #41	@ 0x29
 80052aa:	d108      	bne.n	80052be <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80052ac:	f248 0101 	movw	r1, #32769	@ 0x8001
 80052b0:	6878      	ldr	r0, [r7, #4]
 80052b2:	f000 fe1b 	bl	8005eec <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2221      	movs	r2, #33	@ 0x21
 80052ba:	631a      	str	r2, [r3, #48]	@ 0x30
 80052bc:	e019      	b.n	80052f2 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80052be:	7afb      	ldrb	r3, [r7, #11]
 80052c0:	2b22      	cmp	r3, #34	@ 0x22
 80052c2:	d002      	beq.n	80052ca <I2C_ITSlaveCplt+0x56>
 80052c4:	7afb      	ldrb	r3, [r7, #11]
 80052c6:	2b2a      	cmp	r3, #42	@ 0x2a
 80052c8:	d108      	bne.n	80052dc <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80052ca:	f248 0102 	movw	r1, #32770	@ 0x8002
 80052ce:	6878      	ldr	r0, [r7, #4]
 80052d0:	f000 fe0c 	bl	8005eec <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2222      	movs	r2, #34	@ 0x22
 80052d8:	631a      	str	r2, [r3, #48]	@ 0x30
 80052da:	e00a      	b.n	80052f2 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 80052dc:	7afb      	ldrb	r3, [r7, #11]
 80052de:	2b28      	cmp	r3, #40	@ 0x28
 80052e0:	d107      	bne.n	80052f2 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80052e2:	f248 0103 	movw	r1, #32771	@ 0x8003
 80052e6:	6878      	ldr	r0, [r7, #4]
 80052e8:	f000 fe00 	bl	8005eec <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2200      	movs	r2, #0
 80052f0:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	685a      	ldr	r2, [r3, #4]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005300:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	6859      	ldr	r1, [r3, #4]
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681a      	ldr	r2, [r3, #0]
 800530c:	4b7f      	ldr	r3, [pc, #508]	@ (800550c <I2C_ITSlaveCplt+0x298>)
 800530e:	400b      	ands	r3, r1
 8005310:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f000 fb6d 	bl	80059f2 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8005318:	693b      	ldr	r3, [r7, #16]
 800531a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800531e:	2b00      	cmp	r3, #0
 8005320:	d07a      	beq.n	8005418 <I2C_ITSlaveCplt+0x1a4>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	681a      	ldr	r2, [r3, #0]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005330:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005336:	2b00      	cmp	r3, #0
 8005338:	f000 8111 	beq.w	800555e <I2C_ITSlaveCplt+0x2ea>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a73      	ldr	r2, [pc, #460]	@ (8005510 <I2C_ITSlaveCplt+0x29c>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d059      	beq.n	80053fc <I2C_ITSlaveCplt+0x188>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4a71      	ldr	r2, [pc, #452]	@ (8005514 <I2C_ITSlaveCplt+0x2a0>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d053      	beq.n	80053fc <I2C_ITSlaveCplt+0x188>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4a6f      	ldr	r2, [pc, #444]	@ (8005518 <I2C_ITSlaveCplt+0x2a4>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d04d      	beq.n	80053fc <I2C_ITSlaveCplt+0x188>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4a6d      	ldr	r2, [pc, #436]	@ (800551c <I2C_ITSlaveCplt+0x2a8>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d047      	beq.n	80053fc <I2C_ITSlaveCplt+0x188>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a6b      	ldr	r2, [pc, #428]	@ (8005520 <I2C_ITSlaveCplt+0x2ac>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d041      	beq.n	80053fc <I2C_ITSlaveCplt+0x188>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a69      	ldr	r2, [pc, #420]	@ (8005524 <I2C_ITSlaveCplt+0x2b0>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d03b      	beq.n	80053fc <I2C_ITSlaveCplt+0x188>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4a67      	ldr	r2, [pc, #412]	@ (8005528 <I2C_ITSlaveCplt+0x2b4>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d035      	beq.n	80053fc <I2C_ITSlaveCplt+0x188>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a65      	ldr	r2, [pc, #404]	@ (800552c <I2C_ITSlaveCplt+0x2b8>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d02f      	beq.n	80053fc <I2C_ITSlaveCplt+0x188>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4a63      	ldr	r2, [pc, #396]	@ (8005530 <I2C_ITSlaveCplt+0x2bc>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d029      	beq.n	80053fc <I2C_ITSlaveCplt+0x188>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a61      	ldr	r2, [pc, #388]	@ (8005534 <I2C_ITSlaveCplt+0x2c0>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d023      	beq.n	80053fc <I2C_ITSlaveCplt+0x188>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a5f      	ldr	r2, [pc, #380]	@ (8005538 <I2C_ITSlaveCplt+0x2c4>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d01d      	beq.n	80053fc <I2C_ITSlaveCplt+0x188>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4a5d      	ldr	r2, [pc, #372]	@ (800553c <I2C_ITSlaveCplt+0x2c8>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d017      	beq.n	80053fc <I2C_ITSlaveCplt+0x188>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a5b      	ldr	r2, [pc, #364]	@ (8005540 <I2C_ITSlaveCplt+0x2cc>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d011      	beq.n	80053fc <I2C_ITSlaveCplt+0x188>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4a59      	ldr	r2, [pc, #356]	@ (8005544 <I2C_ITSlaveCplt+0x2d0>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d00b      	beq.n	80053fc <I2C_ITSlaveCplt+0x188>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a57      	ldr	r2, [pc, #348]	@ (8005548 <I2C_ITSlaveCplt+0x2d4>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d005      	beq.n	80053fc <I2C_ITSlaveCplt+0x188>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4a55      	ldr	r2, [pc, #340]	@ (800554c <I2C_ITSlaveCplt+0x2d8>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d105      	bne.n	8005408 <I2C_ITSlaveCplt+0x194>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	b29b      	uxth	r3, r3
 8005406:	e004      	b.n	8005412 <I2C_ITSlaveCplt+0x19e>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	b29b      	uxth	r3, r3
 8005412:	687a      	ldr	r2, [r7, #4]
 8005414:	8553      	strh	r3, [r2, #42]	@ 0x2a
 8005416:	e0a2      	b.n	800555e <I2C_ITSlaveCplt+0x2ea>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8005418:	693b      	ldr	r3, [r7, #16]
 800541a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800541e:	2b00      	cmp	r3, #0
 8005420:	f000 809d 	beq.w	800555e <I2C_ITSlaveCplt+0x2ea>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	681a      	ldr	r2, [r3, #0]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005432:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005438:	2b00      	cmp	r3, #0
 800543a:	f000 8090 	beq.w	800555e <I2C_ITSlaveCplt+0x2ea>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a32      	ldr	r2, [pc, #200]	@ (8005510 <I2C_ITSlaveCplt+0x29c>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d059      	beq.n	80054fe <I2C_ITSlaveCplt+0x28a>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a30      	ldr	r2, [pc, #192]	@ (8005514 <I2C_ITSlaveCplt+0x2a0>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d053      	beq.n	80054fe <I2C_ITSlaveCplt+0x28a>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a2e      	ldr	r2, [pc, #184]	@ (8005518 <I2C_ITSlaveCplt+0x2a4>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d04d      	beq.n	80054fe <I2C_ITSlaveCplt+0x28a>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a2c      	ldr	r2, [pc, #176]	@ (800551c <I2C_ITSlaveCplt+0x2a8>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d047      	beq.n	80054fe <I2C_ITSlaveCplt+0x28a>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a2a      	ldr	r2, [pc, #168]	@ (8005520 <I2C_ITSlaveCplt+0x2ac>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d041      	beq.n	80054fe <I2C_ITSlaveCplt+0x28a>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4a28      	ldr	r2, [pc, #160]	@ (8005524 <I2C_ITSlaveCplt+0x2b0>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d03b      	beq.n	80054fe <I2C_ITSlaveCplt+0x28a>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a26      	ldr	r2, [pc, #152]	@ (8005528 <I2C_ITSlaveCplt+0x2b4>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d035      	beq.n	80054fe <I2C_ITSlaveCplt+0x28a>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a24      	ldr	r2, [pc, #144]	@ (800552c <I2C_ITSlaveCplt+0x2b8>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d02f      	beq.n	80054fe <I2C_ITSlaveCplt+0x28a>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a22      	ldr	r2, [pc, #136]	@ (8005530 <I2C_ITSlaveCplt+0x2bc>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d029      	beq.n	80054fe <I2C_ITSlaveCplt+0x28a>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a20      	ldr	r2, [pc, #128]	@ (8005534 <I2C_ITSlaveCplt+0x2c0>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d023      	beq.n	80054fe <I2C_ITSlaveCplt+0x28a>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4a1e      	ldr	r2, [pc, #120]	@ (8005538 <I2C_ITSlaveCplt+0x2c4>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d01d      	beq.n	80054fe <I2C_ITSlaveCplt+0x28a>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a1c      	ldr	r2, [pc, #112]	@ (800553c <I2C_ITSlaveCplt+0x2c8>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d017      	beq.n	80054fe <I2C_ITSlaveCplt+0x28a>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a1a      	ldr	r2, [pc, #104]	@ (8005540 <I2C_ITSlaveCplt+0x2cc>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d011      	beq.n	80054fe <I2C_ITSlaveCplt+0x28a>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a18      	ldr	r2, [pc, #96]	@ (8005544 <I2C_ITSlaveCplt+0x2d0>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d00b      	beq.n	80054fe <I2C_ITSlaveCplt+0x28a>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a16      	ldr	r2, [pc, #88]	@ (8005548 <I2C_ITSlaveCplt+0x2d4>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d005      	beq.n	80054fe <I2C_ITSlaveCplt+0x28a>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a14      	ldr	r2, [pc, #80]	@ (800554c <I2C_ITSlaveCplt+0x2d8>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d128      	bne.n	8005550 <I2C_ITSlaveCplt+0x2dc>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	b29b      	uxth	r3, r3
 8005508:	e027      	b.n	800555a <I2C_ITSlaveCplt+0x2e6>
 800550a:	bf00      	nop
 800550c:	fe00e800 	.word	0xfe00e800
 8005510:	40020010 	.word	0x40020010
 8005514:	40020028 	.word	0x40020028
 8005518:	40020040 	.word	0x40020040
 800551c:	40020058 	.word	0x40020058
 8005520:	40020070 	.word	0x40020070
 8005524:	40020088 	.word	0x40020088
 8005528:	400200a0 	.word	0x400200a0
 800552c:	400200b8 	.word	0x400200b8
 8005530:	40020410 	.word	0x40020410
 8005534:	40020428 	.word	0x40020428
 8005538:	40020440 	.word	0x40020440
 800553c:	40020458 	.word	0x40020458
 8005540:	40020470 	.word	0x40020470
 8005544:	40020488 	.word	0x40020488
 8005548:	400204a0 	.word	0x400204a0
 800554c:	400204b8 	.word	0x400204b8
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	b29b      	uxth	r3, r3
 800555a:	687a      	ldr	r2, [r7, #4]
 800555c:	8553      	strh	r3, [r2, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800555e:	697b      	ldr	r3, [r7, #20]
 8005560:	f003 0304 	and.w	r3, r3, #4
 8005564:	2b00      	cmp	r3, #0
 8005566:	d020      	beq.n	80055aa <I2C_ITSlaveCplt+0x336>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	f023 0304 	bic.w	r3, r3, #4
 800556e:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800557a:	b2d2      	uxtb	r2, r2
 800557c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005582:	1c5a      	adds	r2, r3, #1
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800558c:	2b00      	cmp	r3, #0
 800558e:	d00c      	beq.n	80055aa <I2C_ITSlaveCplt+0x336>
    {
      hi2c->XferSize--;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005594:	3b01      	subs	r3, #1
 8005596:	b29a      	uxth	r2, r3
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055a0:	b29b      	uxth	r3, r3
 80055a2:	3b01      	subs	r3, #1
 80055a4:	b29a      	uxth	r2, r3
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055ae:	b29b      	uxth	r3, r3
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d005      	beq.n	80055c0 <I2C_ITSlaveCplt+0x34c>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055b8:	f043 0204 	orr.w	r2, r3, #4
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	f003 0310 	and.w	r3, r3, #16
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d049      	beq.n	800565e <I2C_ITSlaveCplt+0x3ea>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 80055ca:	693b      	ldr	r3, [r7, #16]
 80055cc:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d044      	beq.n	800565e <I2C_ITSlaveCplt+0x3ea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055d8:	b29b      	uxth	r3, r3
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d128      	bne.n	8005630 <I2C_ITSlaveCplt+0x3bc>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80055e4:	b2db      	uxtb	r3, r3
 80055e6:	2b28      	cmp	r3, #40	@ 0x28
 80055e8:	d108      	bne.n	80055fc <I2C_ITSlaveCplt+0x388>
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80055f0:	d104      	bne.n	80055fc <I2C_ITSlaveCplt+0x388>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80055f2:	6979      	ldr	r1, [r7, #20]
 80055f4:	6878      	ldr	r0, [r7, #4]
 80055f6:	f000 f891 	bl	800571c <I2C_ITListenCplt>
 80055fa:	e030      	b.n	800565e <I2C_ITSlaveCplt+0x3ea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005602:	b2db      	uxtb	r3, r3
 8005604:	2b29      	cmp	r3, #41	@ 0x29
 8005606:	d10e      	bne.n	8005626 <I2C_ITSlaveCplt+0x3b2>
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800560e:	d00a      	beq.n	8005626 <I2C_ITSlaveCplt+0x3b2>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	2210      	movs	r2, #16
 8005616:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8005618:	6878      	ldr	r0, [r7, #4]
 800561a:	f000 f9ea 	bl	80059f2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	f7ff fd03 	bl	800502a <I2C_ITSlaveSeqCplt>
 8005624:	e01b      	b.n	800565e <I2C_ITSlaveCplt+0x3ea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	2210      	movs	r2, #16
 800562c:	61da      	str	r2, [r3, #28]
 800562e:	e016      	b.n	800565e <I2C_ITSlaveCplt+0x3ea>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	2210      	movs	r2, #16
 8005636:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800563c:	f043 0204 	orr.w	r2, r3, #4
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d003      	beq.n	8005652 <I2C_ITSlaveCplt+0x3de>
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005650:	d105      	bne.n	800565e <I2C_ITSlaveCplt+0x3ea>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005656:	4619      	mov	r1, r3
 8005658:	6878      	ldr	r0, [r7, #4]
 800565a:	f000 f8b3 	bl	80057c4 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2200      	movs	r2, #0
 8005662:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2200      	movs	r2, #0
 800566a:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005670:	2b00      	cmp	r3, #0
 8005672:	d010      	beq.n	8005696 <I2C_ITSlaveCplt+0x422>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005678:	4619      	mov	r1, r3
 800567a:	6878      	ldr	r0, [r7, #4]
 800567c:	f000 f8a2 	bl	80057c4 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005686:	b2db      	uxtb	r3, r3
 8005688:	2b28      	cmp	r3, #40	@ 0x28
 800568a:	d141      	bne.n	8005710 <I2C_ITSlaveCplt+0x49c>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800568c:	6979      	ldr	r1, [r7, #20]
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	f000 f844 	bl	800571c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005694:	e03c      	b.n	8005710 <I2C_ITSlaveCplt+0x49c>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800569a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800569e:	d014      	beq.n	80056ca <I2C_ITSlaveCplt+0x456>
    I2C_ITSlaveSeqCplt(hi2c);
 80056a0:	6878      	ldr	r0, [r7, #4]
 80056a2:	f7ff fcc2 	bl	800502a <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	4a1b      	ldr	r2, [pc, #108]	@ (8005718 <I2C_ITSlaveCplt+0x4a4>)
 80056aa:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2220      	movs	r2, #32
 80056b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2200      	movs	r2, #0
 80056b8:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2200      	movs	r2, #0
 80056be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80056c2:	6878      	ldr	r0, [r7, #4]
 80056c4:	f7fe fda5 	bl	8004212 <HAL_I2C_ListenCpltCallback>
}
 80056c8:	e022      	b.n	8005710 <I2C_ITSlaveCplt+0x49c>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80056d0:	b2db      	uxtb	r3, r3
 80056d2:	2b22      	cmp	r3, #34	@ 0x22
 80056d4:	d10e      	bne.n	80056f4 <I2C_ITSlaveCplt+0x480>
    hi2c->State = HAL_I2C_STATE_READY;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2220      	movs	r2, #32
 80056da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2200      	movs	r2, #0
 80056e2:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2200      	movs	r2, #0
 80056e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80056ec:	6878      	ldr	r0, [r7, #4]
 80056ee:	f7fe fd78 	bl	80041e2 <HAL_I2C_SlaveRxCpltCallback>
}
 80056f2:	e00d      	b.n	8005710 <I2C_ITSlaveCplt+0x49c>
    hi2c->State = HAL_I2C_STATE_READY;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2220      	movs	r2, #32
 80056f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2200      	movs	r2, #0
 8005700:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2200      	movs	r2, #0
 8005706:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f7fe fd5f 	bl	80041ce <HAL_I2C_SlaveTxCpltCallback>
}
 8005710:	bf00      	nop
 8005712:	3718      	adds	r7, #24
 8005714:	46bd      	mov	sp, r7
 8005716:	bd80      	pop	{r7, pc}
 8005718:	ffff0000 	.word	0xffff0000

0800571c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b082      	sub	sp, #8
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
 8005724:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	4a25      	ldr	r2, [pc, #148]	@ (80057c0 <I2C_ITListenCplt+0xa4>)
 800572a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2200      	movs	r2, #0
 8005730:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2220      	movs	r2, #32
 8005736:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2200      	movs	r2, #0
 800573e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2200      	movs	r2, #0
 8005746:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	f003 0304 	and.w	r3, r3, #4
 800574e:	2b00      	cmp	r3, #0
 8005750:	d022      	beq.n	8005798 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800575c:	b2d2      	uxtb	r2, r2
 800575e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005764:	1c5a      	adds	r2, r3, #1
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800576e:	2b00      	cmp	r3, #0
 8005770:	d012      	beq.n	8005798 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005776:	3b01      	subs	r3, #1
 8005778:	b29a      	uxth	r2, r3
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005782:	b29b      	uxth	r3, r3
 8005784:	3b01      	subs	r3, #1
 8005786:	b29a      	uxth	r2, r3
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005790:	f043 0204 	orr.w	r2, r3, #4
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005798:	f248 0103 	movw	r1, #32771	@ 0x8003
 800579c:	6878      	ldr	r0, [r7, #4]
 800579e:	f000 fba5 	bl	8005eec <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	2210      	movs	r2, #16
 80057a8:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2200      	movs	r2, #0
 80057ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80057b2:	6878      	ldr	r0, [r7, #4]
 80057b4:	f7fe fd2d 	bl	8004212 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80057b8:	bf00      	nop
 80057ba:	3708      	adds	r7, #8
 80057bc:	46bd      	mov	sp, r7
 80057be:	bd80      	pop	{r7, pc}
 80057c0:	ffff0000 	.word	0xffff0000

080057c4 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b084      	sub	sp, #16
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
 80057cc:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80057d4:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2200      	movs	r2, #0
 80057da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	4a6d      	ldr	r2, [pc, #436]	@ (8005998 <I2C_ITError+0x1d4>)
 80057e2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2200      	movs	r2, #0
 80057e8:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	431a      	orrs	r2, r3
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80057f6:	7bfb      	ldrb	r3, [r7, #15]
 80057f8:	2b28      	cmp	r3, #40	@ 0x28
 80057fa:	d005      	beq.n	8005808 <I2C_ITError+0x44>
 80057fc:	7bfb      	ldrb	r3, [r7, #15]
 80057fe:	2b29      	cmp	r3, #41	@ 0x29
 8005800:	d002      	beq.n	8005808 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8005802:	7bfb      	ldrb	r3, [r7, #15]
 8005804:	2b2a      	cmp	r3, #42	@ 0x2a
 8005806:	d10b      	bne.n	8005820 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005808:	2103      	movs	r1, #3
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	f000 fb6e 	bl	8005eec <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2228      	movs	r2, #40	@ 0x28
 8005814:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	4a60      	ldr	r2, [pc, #384]	@ (800599c <I2C_ITError+0x1d8>)
 800581c:	635a      	str	r2, [r3, #52]	@ 0x34
 800581e:	e030      	b.n	8005882 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005820:	f248 0103 	movw	r1, #32771	@ 0x8003
 8005824:	6878      	ldr	r0, [r7, #4]
 8005826:	f000 fb61 	bl	8005eec <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800582a:	6878      	ldr	r0, [r7, #4]
 800582c:	f000 f8e1 	bl	80059f2 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005836:	b2db      	uxtb	r3, r3
 8005838:	2b60      	cmp	r3, #96	@ 0x60
 800583a:	d01f      	beq.n	800587c <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2220      	movs	r2, #32
 8005840:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	699b      	ldr	r3, [r3, #24]
 800584a:	f003 0320 	and.w	r3, r3, #32
 800584e:	2b20      	cmp	r3, #32
 8005850:	d114      	bne.n	800587c <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	699b      	ldr	r3, [r3, #24]
 8005858:	f003 0310 	and.w	r3, r3, #16
 800585c:	2b10      	cmp	r3, #16
 800585e:	d109      	bne.n	8005874 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	2210      	movs	r2, #16
 8005866:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800586c:	f043 0204 	orr.w	r2, r3, #4
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	2220      	movs	r2, #32
 800587a:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2200      	movs	r2, #0
 8005880:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005886:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800588c:	2b00      	cmp	r3, #0
 800588e:	d039      	beq.n	8005904 <I2C_ITError+0x140>
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	2b11      	cmp	r3, #17
 8005894:	d002      	beq.n	800589c <I2C_ITError+0xd8>
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	2b21      	cmp	r3, #33	@ 0x21
 800589a:	d133      	bne.n	8005904 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80058a6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80058aa:	d107      	bne.n	80058bc <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	681a      	ldr	r2, [r3, #0]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80058ba:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058c0:	4618      	mov	r0, r3
 80058c2:	f7fd fc3b 	bl	800313c <HAL_DMA_GetState>
 80058c6:	4603      	mov	r3, r0
 80058c8:	2b01      	cmp	r3, #1
 80058ca:	d017      	beq.n	80058fc <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058d0:	4a33      	ldr	r2, [pc, #204]	@ (80059a0 <I2C_ITError+0x1dc>)
 80058d2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2200      	movs	r2, #0
 80058d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058e0:	4618      	mov	r0, r3
 80058e2:	f7fc fa83 	bl	8001dec <HAL_DMA_Abort_IT>
 80058e6:	4603      	mov	r3, r0
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d04d      	beq.n	8005988 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058f2:	687a      	ldr	r2, [r7, #4]
 80058f4:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80058f6:	4610      	mov	r0, r2
 80058f8:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80058fa:	e045      	b.n	8005988 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80058fc:	6878      	ldr	r0, [r7, #4]
 80058fe:	f000 f851 	bl	80059a4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005902:	e041      	b.n	8005988 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005908:	2b00      	cmp	r3, #0
 800590a:	d039      	beq.n	8005980 <I2C_ITError+0x1bc>
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	2b12      	cmp	r3, #18
 8005910:	d002      	beq.n	8005918 <I2C_ITError+0x154>
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	2b22      	cmp	r3, #34	@ 0x22
 8005916:	d133      	bne.n	8005980 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005922:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005926:	d107      	bne.n	8005938 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	681a      	ldr	r2, [r3, #0]
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005936:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800593c:	4618      	mov	r0, r3
 800593e:	f7fd fbfd 	bl	800313c <HAL_DMA_GetState>
 8005942:	4603      	mov	r3, r0
 8005944:	2b01      	cmp	r3, #1
 8005946:	d017      	beq.n	8005978 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800594c:	4a14      	ldr	r2, [pc, #80]	@ (80059a0 <I2C_ITError+0x1dc>)
 800594e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2200      	movs	r2, #0
 8005954:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800595c:	4618      	mov	r0, r3
 800595e:	f7fc fa45 	bl	8001dec <HAL_DMA_Abort_IT>
 8005962:	4603      	mov	r3, r0
 8005964:	2b00      	cmp	r3, #0
 8005966:	d011      	beq.n	800598c <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800596c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800596e:	687a      	ldr	r2, [r7, #4]
 8005970:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005972:	4610      	mov	r0, r2
 8005974:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005976:	e009      	b.n	800598c <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8005978:	6878      	ldr	r0, [r7, #4]
 800597a:	f000 f813 	bl	80059a4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800597e:	e005      	b.n	800598c <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8005980:	6878      	ldr	r0, [r7, #4]
 8005982:	f000 f80f 	bl	80059a4 <I2C_TreatErrorCallback>
  }
}
 8005986:	e002      	b.n	800598e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005988:	bf00      	nop
 800598a:	e000      	b.n	800598e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800598c:	bf00      	nop
}
 800598e:	bf00      	nop
 8005990:	3710      	adds	r7, #16
 8005992:	46bd      	mov	sp, r7
 8005994:	bd80      	pop	{r7, pc}
 8005996:	bf00      	nop
 8005998:	ffff0000 	.word	0xffff0000
 800599c:	080044e1 	.word	0x080044e1
 80059a0:	08005d45 	.word	0x08005d45

080059a4 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b082      	sub	sp, #8
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80059b2:	b2db      	uxtb	r3, r3
 80059b4:	2b60      	cmp	r3, #96	@ 0x60
 80059b6:	d10e      	bne.n	80059d6 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2220      	movs	r2, #32
 80059bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2200      	movs	r2, #0
 80059c4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2200      	movs	r2, #0
 80059ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	f7fe fc47 	bl	8004262 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80059d4:	e009      	b.n	80059ea <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2200      	movs	r2, #0
 80059da:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2200      	movs	r2, #0
 80059e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80059e4:	6878      	ldr	r0, [r7, #4]
 80059e6:	f7fe fc32 	bl	800424e <HAL_I2C_ErrorCallback>
}
 80059ea:	bf00      	nop
 80059ec:	3708      	adds	r7, #8
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bd80      	pop	{r7, pc}

080059f2 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80059f2:	b480      	push	{r7}
 80059f4:	b083      	sub	sp, #12
 80059f6:	af00      	add	r7, sp, #0
 80059f8:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	699b      	ldr	r3, [r3, #24]
 8005a00:	f003 0302 	and.w	r3, r3, #2
 8005a04:	2b02      	cmp	r3, #2
 8005a06:	d103      	bne.n	8005a10 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	699b      	ldr	r3, [r3, #24]
 8005a16:	f003 0301 	and.w	r3, r3, #1
 8005a1a:	2b01      	cmp	r3, #1
 8005a1c:	d007      	beq.n	8005a2e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	699a      	ldr	r2, [r3, #24]
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f042 0201 	orr.w	r2, r2, #1
 8005a2c:	619a      	str	r2, [r3, #24]
  }
}
 8005a2e:	bf00      	nop
 8005a30:	370c      	adds	r7, #12
 8005a32:	46bd      	mov	sp, r7
 8005a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a38:	4770      	bx	lr

08005a3a <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005a3a:	b580      	push	{r7, lr}
 8005a3c:	b084      	sub	sp, #16
 8005a3e:	af00      	add	r7, sp, #0
 8005a40:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a46:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	681a      	ldr	r2, [r3, #0]
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005a56:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a5c:	b29b      	uxth	r3, r3
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d104      	bne.n	8005a6c <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8005a62:	2120      	movs	r1, #32
 8005a64:	68f8      	ldr	r0, [r7, #12]
 8005a66:	f000 f9bd 	bl	8005de4 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8005a6a:	e02d      	b.n	8005ac8 <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a70:	68fa      	ldr	r2, [r7, #12]
 8005a72:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8005a74:	441a      	add	r2, r3
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a7e:	b29b      	uxth	r3, r3
 8005a80:	2bff      	cmp	r3, #255	@ 0xff
 8005a82:	d903      	bls.n	8005a8c <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	22ff      	movs	r2, #255	@ 0xff
 8005a88:	851a      	strh	r2, [r3, #40]	@ 0x28
 8005a8a:	e004      	b.n	8005a96 <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a90:	b29a      	uxth	r2, r3
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a9e:	4619      	mov	r1, r3
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	3328      	adds	r3, #40	@ 0x28
 8005aa6:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8005aac:	f7fb ff34 	bl	8001918 <HAL_DMA_Start_IT>
 8005ab0:	4603      	mov	r3, r0
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d004      	beq.n	8005ac0 <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8005ab6:	2110      	movs	r1, #16
 8005ab8:	68f8      	ldr	r0, [r7, #12]
 8005aba:	f7ff fe83 	bl	80057c4 <I2C_ITError>
}
 8005abe:	e003      	b.n	8005ac8 <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8005ac0:	2140      	movs	r1, #64	@ 0x40
 8005ac2:	68f8      	ldr	r0, [r7, #12]
 8005ac4:	f000 f98e 	bl	8005de4 <I2C_Enable_IRQ>
}
 8005ac8:	bf00      	nop
 8005aca:	3710      	adds	r7, #16
 8005acc:	46bd      	mov	sp, r7
 8005ace:	bd80      	pop	{r7, pc}

08005ad0 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b084      	sub	sp, #16
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
  uint32_t treatdmaerror = 0U;
 8005ad8:	2300      	movs	r3, #0
 8005ada:	60fb      	str	r3, [r7, #12]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ae0:	60bb      	str	r3, [r7, #8]

  if (hi2c->hdmatx != NULL)
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d076      	beq.n	8005bd8 <I2C_DMAError+0x108>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4a71      	ldr	r2, [pc, #452]	@ (8005cb8 <I2C_DMAError+0x1e8>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d059      	beq.n	8005baa <I2C_DMAError+0xda>
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4a6f      	ldr	r2, [pc, #444]	@ (8005cbc <I2C_DMAError+0x1ec>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d053      	beq.n	8005baa <I2C_DMAError+0xda>
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4a6d      	ldr	r2, [pc, #436]	@ (8005cc0 <I2C_DMAError+0x1f0>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d04d      	beq.n	8005baa <I2C_DMAError+0xda>
 8005b0e:	68bb      	ldr	r3, [r7, #8]
 8005b10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4a6b      	ldr	r2, [pc, #428]	@ (8005cc4 <I2C_DMAError+0x1f4>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d047      	beq.n	8005baa <I2C_DMAError+0xda>
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4a69      	ldr	r2, [pc, #420]	@ (8005cc8 <I2C_DMAError+0x1f8>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d041      	beq.n	8005baa <I2C_DMAError+0xda>
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	4a67      	ldr	r2, [pc, #412]	@ (8005ccc <I2C_DMAError+0x1fc>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d03b      	beq.n	8005baa <I2C_DMAError+0xda>
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4a65      	ldr	r2, [pc, #404]	@ (8005cd0 <I2C_DMAError+0x200>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d035      	beq.n	8005baa <I2C_DMAError+0xda>
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4a63      	ldr	r2, [pc, #396]	@ (8005cd4 <I2C_DMAError+0x204>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d02f      	beq.n	8005baa <I2C_DMAError+0xda>
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4a61      	ldr	r2, [pc, #388]	@ (8005cd8 <I2C_DMAError+0x208>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d029      	beq.n	8005baa <I2C_DMAError+0xda>
 8005b56:	68bb      	ldr	r3, [r7, #8]
 8005b58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4a5f      	ldr	r2, [pc, #380]	@ (8005cdc <I2C_DMAError+0x20c>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d023      	beq.n	8005baa <I2C_DMAError+0xda>
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4a5d      	ldr	r2, [pc, #372]	@ (8005ce0 <I2C_DMAError+0x210>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d01d      	beq.n	8005baa <I2C_DMAError+0xda>
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4a5b      	ldr	r2, [pc, #364]	@ (8005ce4 <I2C_DMAError+0x214>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d017      	beq.n	8005baa <I2C_DMAError+0xda>
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a59      	ldr	r2, [pc, #356]	@ (8005ce8 <I2C_DMAError+0x218>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d011      	beq.n	8005baa <I2C_DMAError+0xda>
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4a57      	ldr	r2, [pc, #348]	@ (8005cec <I2C_DMAError+0x21c>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d00b      	beq.n	8005baa <I2C_DMAError+0xda>
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4a55      	ldr	r2, [pc, #340]	@ (8005cf0 <I2C_DMAError+0x220>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d005      	beq.n	8005baa <I2C_DMAError+0xda>
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a53      	ldr	r2, [pc, #332]	@ (8005cf4 <I2C_DMAError+0x224>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d109      	bne.n	8005bbe <I2C_DMAError+0xee>
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	685b      	ldr	r3, [r3, #4]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	bf0c      	ite	eq
 8005bb6:	2301      	moveq	r3, #1
 8005bb8:	2300      	movne	r3, #0
 8005bba:	b2db      	uxtb	r3, r3
 8005bbc:	e008      	b.n	8005bd0 <I2C_DMAError+0x100>
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	685b      	ldr	r3, [r3, #4]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	bf0c      	ite	eq
 8005bca:	2301      	moveq	r3, #1
 8005bcc:	2300      	movne	r3, #0
 8005bce:	b2db      	uxtb	r3, r3
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d001      	beq.n	8005bd8 <I2C_DMAError+0x108>
    {
      treatdmaerror = 1U;
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	60fb      	str	r3, [r7, #12]
    }
  }

  if (hi2c->hdmarx != NULL)
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	f000 8098 	beq.w	8005d12 <I2C_DMAError+0x242>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4a33      	ldr	r2, [pc, #204]	@ (8005cb8 <I2C_DMAError+0x1e8>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d059      	beq.n	8005ca2 <I2C_DMAError+0x1d2>
 8005bee:	68bb      	ldr	r3, [r7, #8]
 8005bf0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4a31      	ldr	r2, [pc, #196]	@ (8005cbc <I2C_DMAError+0x1ec>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d053      	beq.n	8005ca2 <I2C_DMAError+0x1d2>
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	4a2f      	ldr	r2, [pc, #188]	@ (8005cc0 <I2C_DMAError+0x1f0>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d04d      	beq.n	8005ca2 <I2C_DMAError+0x1d2>
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	4a2d      	ldr	r2, [pc, #180]	@ (8005cc4 <I2C_DMAError+0x1f4>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d047      	beq.n	8005ca2 <I2C_DMAError+0x1d2>
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	4a2b      	ldr	r2, [pc, #172]	@ (8005cc8 <I2C_DMAError+0x1f8>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d041      	beq.n	8005ca2 <I2C_DMAError+0x1d2>
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4a29      	ldr	r2, [pc, #164]	@ (8005ccc <I2C_DMAError+0x1fc>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d03b      	beq.n	8005ca2 <I2C_DMAError+0x1d2>
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a27      	ldr	r2, [pc, #156]	@ (8005cd0 <I2C_DMAError+0x200>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d035      	beq.n	8005ca2 <I2C_DMAError+0x1d2>
 8005c36:	68bb      	ldr	r3, [r7, #8]
 8005c38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4a25      	ldr	r2, [pc, #148]	@ (8005cd4 <I2C_DMAError+0x204>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d02f      	beq.n	8005ca2 <I2C_DMAError+0x1d2>
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4a23      	ldr	r2, [pc, #140]	@ (8005cd8 <I2C_DMAError+0x208>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d029      	beq.n	8005ca2 <I2C_DMAError+0x1d2>
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a21      	ldr	r2, [pc, #132]	@ (8005cdc <I2C_DMAError+0x20c>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d023      	beq.n	8005ca2 <I2C_DMAError+0x1d2>
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4a1f      	ldr	r2, [pc, #124]	@ (8005ce0 <I2C_DMAError+0x210>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d01d      	beq.n	8005ca2 <I2C_DMAError+0x1d2>
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4a1d      	ldr	r2, [pc, #116]	@ (8005ce4 <I2C_DMAError+0x214>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d017      	beq.n	8005ca2 <I2C_DMAError+0x1d2>
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4a1b      	ldr	r2, [pc, #108]	@ (8005ce8 <I2C_DMAError+0x218>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d011      	beq.n	8005ca2 <I2C_DMAError+0x1d2>
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4a19      	ldr	r2, [pc, #100]	@ (8005cec <I2C_DMAError+0x21c>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d00b      	beq.n	8005ca2 <I2C_DMAError+0x1d2>
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4a17      	ldr	r2, [pc, #92]	@ (8005cf0 <I2C_DMAError+0x220>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d005      	beq.n	8005ca2 <I2C_DMAError+0x1d2>
 8005c96:	68bb      	ldr	r3, [r7, #8]
 8005c98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4a15      	ldr	r2, [pc, #84]	@ (8005cf4 <I2C_DMAError+0x224>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d12a      	bne.n	8005cf8 <I2C_DMAError+0x228>
 8005ca2:	68bb      	ldr	r3, [r7, #8]
 8005ca4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	685b      	ldr	r3, [r3, #4]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	bf0c      	ite	eq
 8005cae:	2301      	moveq	r3, #1
 8005cb0:	2300      	movne	r3, #0
 8005cb2:	b2db      	uxtb	r3, r3
 8005cb4:	e029      	b.n	8005d0a <I2C_DMAError+0x23a>
 8005cb6:	bf00      	nop
 8005cb8:	40020010 	.word	0x40020010
 8005cbc:	40020028 	.word	0x40020028
 8005cc0:	40020040 	.word	0x40020040
 8005cc4:	40020058 	.word	0x40020058
 8005cc8:	40020070 	.word	0x40020070
 8005ccc:	40020088 	.word	0x40020088
 8005cd0:	400200a0 	.word	0x400200a0
 8005cd4:	400200b8 	.word	0x400200b8
 8005cd8:	40020410 	.word	0x40020410
 8005cdc:	40020428 	.word	0x40020428
 8005ce0:	40020440 	.word	0x40020440
 8005ce4:	40020458 	.word	0x40020458
 8005ce8:	40020470 	.word	0x40020470
 8005cec:	40020488 	.word	0x40020488
 8005cf0:	400204a0 	.word	0x400204a0
 8005cf4:	400204b8 	.word	0x400204b8
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	685b      	ldr	r3, [r3, #4]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	bf0c      	ite	eq
 8005d04:	2301      	moveq	r3, #1
 8005d06:	2300      	movne	r3, #0
 8005d08:	b2db      	uxtb	r3, r3
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d001      	beq.n	8005d12 <I2C_DMAError+0x242>
    {
      treatdmaerror = 1U;
 8005d0e:	2301      	movs	r3, #1
 8005d10:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Check if a FIFO error is detected, if true normal use case, so no specific action to perform */
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 8005d12:	6878      	ldr	r0, [r7, #4]
 8005d14:	f7fd fa20 	bl	8003158 <HAL_DMA_GetError>
 8005d18:	4603      	mov	r3, r0
 8005d1a:	2b02      	cmp	r3, #2
 8005d1c:	d00e      	beq.n	8005d3c <I2C_DMAError+0x26c>
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d00b      	beq.n	8005d3c <I2C_DMAError+0x26c>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	685a      	ldr	r2, [r3, #4]
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005d32:	605a      	str	r2, [r3, #4]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8005d34:	2110      	movs	r1, #16
 8005d36:	68b8      	ldr	r0, [r7, #8]
 8005d38:	f7ff fd44 	bl	80057c4 <I2C_ITError>
  }
}
 8005d3c:	bf00      	nop
 8005d3e:	3710      	adds	r7, #16
 8005d40:	46bd      	mov	sp, r7
 8005d42:	bd80      	pop	{r7, pc}

08005d44 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b084      	sub	sp, #16
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d50:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d003      	beq.n	8005d62 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d5e:	2200      	movs	r2, #0
 8005d60:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d003      	beq.n	8005d72 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d6e:	2200      	movs	r2, #0
 8005d70:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8005d72:	68f8      	ldr	r0, [r7, #12]
 8005d74:	f7ff fe16 	bl	80059a4 <I2C_TreatErrorCallback>
}
 8005d78:	bf00      	nop
 8005d7a:	3710      	adds	r7, #16
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	bd80      	pop	{r7, pc}

08005d80 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005d80:	b480      	push	{r7}
 8005d82:	b087      	sub	sp, #28
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	60f8      	str	r0, [r7, #12]
 8005d88:	607b      	str	r3, [r7, #4]
 8005d8a:	460b      	mov	r3, r1
 8005d8c:	817b      	strh	r3, [r7, #10]
 8005d8e:	4613      	mov	r3, r2
 8005d90:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005d92:	897b      	ldrh	r3, [r7, #10]
 8005d94:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005d98:	7a7b      	ldrb	r3, [r7, #9]
 8005d9a:	041b      	lsls	r3, r3, #16
 8005d9c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005da0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005da6:	6a3b      	ldr	r3, [r7, #32]
 8005da8:	4313      	orrs	r3, r2
 8005daa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005dae:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	685a      	ldr	r2, [r3, #4]
 8005db6:	6a3b      	ldr	r3, [r7, #32]
 8005db8:	0d5b      	lsrs	r3, r3, #21
 8005dba:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8005dbe:	4b08      	ldr	r3, [pc, #32]	@ (8005de0 <I2C_TransferConfig+0x60>)
 8005dc0:	430b      	orrs	r3, r1
 8005dc2:	43db      	mvns	r3, r3
 8005dc4:	ea02 0103 	and.w	r1, r2, r3
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	697a      	ldr	r2, [r7, #20]
 8005dce:	430a      	orrs	r2, r1
 8005dd0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005dd2:	bf00      	nop
 8005dd4:	371c      	adds	r7, #28
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ddc:	4770      	bx	lr
 8005dde:	bf00      	nop
 8005de0:	03ff63ff 	.word	0x03ff63ff

08005de4 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8005de4:	b480      	push	{r7}
 8005de6:	b085      	sub	sp, #20
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
 8005dec:	460b      	mov	r3, r1
 8005dee:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8005df0:	2300      	movs	r3, #0
 8005df2:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005df8:	4a39      	ldr	r2, [pc, #228]	@ (8005ee0 <I2C_Enable_IRQ+0xfc>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d032      	beq.n	8005e64 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8005e02:	4a38      	ldr	r2, [pc, #224]	@ (8005ee4 <I2C_Enable_IRQ+0x100>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d02d      	beq.n	8005e64 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8005e0c:	4a36      	ldr	r2, [pc, #216]	@ (8005ee8 <I2C_Enable_IRQ+0x104>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d028      	beq.n	8005e64 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005e12:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	da03      	bge.n	8005e22 <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8005e20:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005e22:	887b      	ldrh	r3, [r7, #2]
 8005e24:	f003 0301 	and.w	r3, r3, #1
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d003      	beq.n	8005e34 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8005e32:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005e34:	887b      	ldrh	r3, [r7, #2]
 8005e36:	f003 0302 	and.w	r3, r3, #2
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d003      	beq.n	8005e46 <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8005e44:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005e46:	887b      	ldrh	r3, [r7, #2]
 8005e48:	2b10      	cmp	r3, #16
 8005e4a:	d103      	bne.n	8005e54 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8005e52:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005e54:	887b      	ldrh	r3, [r7, #2]
 8005e56:	2b20      	cmp	r3, #32
 8005e58:	d133      	bne.n	8005ec2 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	f043 0320 	orr.w	r3, r3, #32
 8005e60:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005e62:	e02e      	b.n	8005ec2 <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005e64:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	da03      	bge.n	8005e74 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8005e72:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005e74:	887b      	ldrh	r3, [r7, #2]
 8005e76:	f003 0301 	and.w	r3, r3, #1
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d003      	beq.n	8005e86 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8005e84:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005e86:	887b      	ldrh	r3, [r7, #2]
 8005e88:	f003 0302 	and.w	r3, r3, #2
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d003      	beq.n	8005e98 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8005e96:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005e98:	887b      	ldrh	r3, [r7, #2]
 8005e9a:	2b10      	cmp	r3, #16
 8005e9c:	d103      	bne.n	8005ea6 <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8005ea4:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005ea6:	887b      	ldrh	r3, [r7, #2]
 8005ea8:	2b20      	cmp	r3, #32
 8005eaa:	d103      	bne.n	8005eb4 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8005eb2:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8005eb4:	887b      	ldrh	r3, [r7, #2]
 8005eb6:	2b40      	cmp	r3, #64	@ 0x40
 8005eb8:	d103      	bne.n	8005ec2 <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005ec0:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	6819      	ldr	r1, [r3, #0]
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	68fa      	ldr	r2, [r7, #12]
 8005ece:	430a      	orrs	r2, r1
 8005ed0:	601a      	str	r2, [r3, #0]
}
 8005ed2:	bf00      	nop
 8005ed4:	3714      	adds	r7, #20
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005edc:	4770      	bx	lr
 8005ede:	bf00      	nop
 8005ee0:	080046d3 	.word	0x080046d3
 8005ee4:	08004af5 	.word	0x08004af5
 8005ee8:	080048a9 	.word	0x080048a9

08005eec <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8005eec:	b480      	push	{r7}
 8005eee:	b085      	sub	sp, #20
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
 8005ef4:	460b      	mov	r3, r1
 8005ef6:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8005ef8:	2300      	movs	r3, #0
 8005efa:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005efc:	887b      	ldrh	r3, [r7, #2]
 8005efe:	f003 0301 	and.w	r3, r3, #1
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d00f      	beq.n	8005f26 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8005f0c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005f14:	b2db      	uxtb	r3, r3
 8005f16:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005f1a:	2b28      	cmp	r3, #40	@ 0x28
 8005f1c:	d003      	beq.n	8005f26 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8005f24:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005f26:	887b      	ldrh	r3, [r7, #2]
 8005f28:	f003 0302 	and.w	r3, r3, #2
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d00f      	beq.n	8005f50 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8005f36:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005f3e:	b2db      	uxtb	r3, r3
 8005f40:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005f44:	2b28      	cmp	r3, #40	@ 0x28
 8005f46:	d003      	beq.n	8005f50 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8005f4e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005f50:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	da03      	bge.n	8005f60 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8005f5e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005f60:	887b      	ldrh	r3, [r7, #2]
 8005f62:	2b10      	cmp	r3, #16
 8005f64:	d103      	bne.n	8005f6e <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8005f6c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005f6e:	887b      	ldrh	r3, [r7, #2]
 8005f70:	2b20      	cmp	r3, #32
 8005f72:	d103      	bne.n	8005f7c <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	f043 0320 	orr.w	r3, r3, #32
 8005f7a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8005f7c:	887b      	ldrh	r3, [r7, #2]
 8005f7e:	2b40      	cmp	r3, #64	@ 0x40
 8005f80:	d103      	bne.n	8005f8a <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005f88:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	6819      	ldr	r1, [r3, #0]
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	43da      	mvns	r2, r3
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	400a      	ands	r2, r1
 8005f9a:	601a      	str	r2, [r3, #0]
}
 8005f9c:	bf00      	nop
 8005f9e:	3714      	adds	r7, #20
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa6:	4770      	bx	lr

08005fa8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005fa8:	b480      	push	{r7}
 8005faa:	b083      	sub	sp, #12
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
 8005fb0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005fb8:	b2db      	uxtb	r3, r3
 8005fba:	2b20      	cmp	r3, #32
 8005fbc:	d138      	bne.n	8006030 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005fc4:	2b01      	cmp	r3, #1
 8005fc6:	d101      	bne.n	8005fcc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005fc8:	2302      	movs	r3, #2
 8005fca:	e032      	b.n	8006032 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2201      	movs	r2, #1
 8005fd0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2224      	movs	r2, #36	@ 0x24
 8005fd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	681a      	ldr	r2, [r3, #0]
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f022 0201 	bic.w	r2, r2, #1
 8005fea:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	681a      	ldr	r2, [r3, #0]
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005ffa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	6819      	ldr	r1, [r3, #0]
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	683a      	ldr	r2, [r7, #0]
 8006008:	430a      	orrs	r2, r1
 800600a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	681a      	ldr	r2, [r3, #0]
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f042 0201 	orr.w	r2, r2, #1
 800601a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2220      	movs	r2, #32
 8006020:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2200      	movs	r2, #0
 8006028:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800602c:	2300      	movs	r3, #0
 800602e:	e000      	b.n	8006032 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006030:	2302      	movs	r3, #2
  }
}
 8006032:	4618      	mov	r0, r3
 8006034:	370c      	adds	r7, #12
 8006036:	46bd      	mov	sp, r7
 8006038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603c:	4770      	bx	lr

0800603e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800603e:	b480      	push	{r7}
 8006040:	b085      	sub	sp, #20
 8006042:	af00      	add	r7, sp, #0
 8006044:	6078      	str	r0, [r7, #4]
 8006046:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800604e:	b2db      	uxtb	r3, r3
 8006050:	2b20      	cmp	r3, #32
 8006052:	d139      	bne.n	80060c8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800605a:	2b01      	cmp	r3, #1
 800605c:	d101      	bne.n	8006062 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800605e:	2302      	movs	r3, #2
 8006060:	e033      	b.n	80060ca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2201      	movs	r2, #1
 8006066:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2224      	movs	r2, #36	@ 0x24
 800606e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	681a      	ldr	r2, [r3, #0]
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f022 0201 	bic.w	r2, r2, #1
 8006080:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006090:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	021b      	lsls	r3, r3, #8
 8006096:	68fa      	ldr	r2, [r7, #12]
 8006098:	4313      	orrs	r3, r2
 800609a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	68fa      	ldr	r2, [r7, #12]
 80060a2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	681a      	ldr	r2, [r3, #0]
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f042 0201 	orr.w	r2, r2, #1
 80060b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2220      	movs	r2, #32
 80060b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2200      	movs	r2, #0
 80060c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80060c4:	2300      	movs	r3, #0
 80060c6:	e000      	b.n	80060ca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80060c8:	2302      	movs	r3, #2
  }
}
 80060ca:	4618      	mov	r0, r3
 80060cc:	3714      	adds	r7, #20
 80060ce:	46bd      	mov	sp, r7
 80060d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d4:	4770      	bx	lr
	...

080060d8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b084      	sub	sp, #16
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80060e0:	4b19      	ldr	r3, [pc, #100]	@ (8006148 <HAL_PWREx_ConfigSupply+0x70>)
 80060e2:	68db      	ldr	r3, [r3, #12]
 80060e4:	f003 0304 	and.w	r3, r3, #4
 80060e8:	2b04      	cmp	r3, #4
 80060ea:	d00a      	beq.n	8006102 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80060ec:	4b16      	ldr	r3, [pc, #88]	@ (8006148 <HAL_PWREx_ConfigSupply+0x70>)
 80060ee:	68db      	ldr	r3, [r3, #12]
 80060f0:	f003 0307 	and.w	r3, r3, #7
 80060f4:	687a      	ldr	r2, [r7, #4]
 80060f6:	429a      	cmp	r2, r3
 80060f8:	d001      	beq.n	80060fe <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80060fa:	2301      	movs	r3, #1
 80060fc:	e01f      	b.n	800613e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80060fe:	2300      	movs	r3, #0
 8006100:	e01d      	b.n	800613e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006102:	4b11      	ldr	r3, [pc, #68]	@ (8006148 <HAL_PWREx_ConfigSupply+0x70>)
 8006104:	68db      	ldr	r3, [r3, #12]
 8006106:	f023 0207 	bic.w	r2, r3, #7
 800610a:	490f      	ldr	r1, [pc, #60]	@ (8006148 <HAL_PWREx_ConfigSupply+0x70>)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	4313      	orrs	r3, r2
 8006110:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006112:	f7fa ff87 	bl	8001024 <HAL_GetTick>
 8006116:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006118:	e009      	b.n	800612e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800611a:	f7fa ff83 	bl	8001024 <HAL_GetTick>
 800611e:	4602      	mov	r2, r0
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	1ad3      	subs	r3, r2, r3
 8006124:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006128:	d901      	bls.n	800612e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800612a:	2301      	movs	r3, #1
 800612c:	e007      	b.n	800613e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800612e:	4b06      	ldr	r3, [pc, #24]	@ (8006148 <HAL_PWREx_ConfigSupply+0x70>)
 8006130:	685b      	ldr	r3, [r3, #4]
 8006132:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006136:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800613a:	d1ee      	bne.n	800611a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800613c:	2300      	movs	r3, #0
}
 800613e:	4618      	mov	r0, r3
 8006140:	3710      	adds	r7, #16
 8006142:	46bd      	mov	sp, r7
 8006144:	bd80      	pop	{r7, pc}
 8006146:	bf00      	nop
 8006148:	58024800 	.word	0x58024800

0800614c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b08c      	sub	sp, #48	@ 0x30
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d102      	bne.n	8006160 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800615a:	2301      	movs	r3, #1
 800615c:	f000 bc1f 	b.w	800699e <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f003 0301 	and.w	r3, r3, #1
 8006168:	2b00      	cmp	r3, #0
 800616a:	f000 80b3 	beq.w	80062d4 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800616e:	4b95      	ldr	r3, [pc, #596]	@ (80063c4 <HAL_RCC_OscConfig+0x278>)
 8006170:	691b      	ldr	r3, [r3, #16]
 8006172:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006176:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006178:	4b92      	ldr	r3, [pc, #584]	@ (80063c4 <HAL_RCC_OscConfig+0x278>)
 800617a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800617c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800617e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006180:	2b10      	cmp	r3, #16
 8006182:	d007      	beq.n	8006194 <HAL_RCC_OscConfig+0x48>
 8006184:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006186:	2b18      	cmp	r3, #24
 8006188:	d112      	bne.n	80061b0 <HAL_RCC_OscConfig+0x64>
 800618a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800618c:	f003 0303 	and.w	r3, r3, #3
 8006190:	2b02      	cmp	r3, #2
 8006192:	d10d      	bne.n	80061b0 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006194:	4b8b      	ldr	r3, [pc, #556]	@ (80063c4 <HAL_RCC_OscConfig+0x278>)
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800619c:	2b00      	cmp	r3, #0
 800619e:	f000 8098 	beq.w	80062d2 <HAL_RCC_OscConfig+0x186>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	685b      	ldr	r3, [r3, #4]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	f040 8093 	bne.w	80062d2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80061ac:	2301      	movs	r3, #1
 80061ae:	e3f6      	b.n	800699e <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	685b      	ldr	r3, [r3, #4]
 80061b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80061b8:	d106      	bne.n	80061c8 <HAL_RCC_OscConfig+0x7c>
 80061ba:	4b82      	ldr	r3, [pc, #520]	@ (80063c4 <HAL_RCC_OscConfig+0x278>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	4a81      	ldr	r2, [pc, #516]	@ (80063c4 <HAL_RCC_OscConfig+0x278>)
 80061c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80061c4:	6013      	str	r3, [r2, #0]
 80061c6:	e058      	b.n	800627a <HAL_RCC_OscConfig+0x12e>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	685b      	ldr	r3, [r3, #4]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d112      	bne.n	80061f6 <HAL_RCC_OscConfig+0xaa>
 80061d0:	4b7c      	ldr	r3, [pc, #496]	@ (80063c4 <HAL_RCC_OscConfig+0x278>)
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	4a7b      	ldr	r2, [pc, #492]	@ (80063c4 <HAL_RCC_OscConfig+0x278>)
 80061d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80061da:	6013      	str	r3, [r2, #0]
 80061dc:	4b79      	ldr	r3, [pc, #484]	@ (80063c4 <HAL_RCC_OscConfig+0x278>)
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	4a78      	ldr	r2, [pc, #480]	@ (80063c4 <HAL_RCC_OscConfig+0x278>)
 80061e2:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80061e6:	6013      	str	r3, [r2, #0]
 80061e8:	4b76      	ldr	r3, [pc, #472]	@ (80063c4 <HAL_RCC_OscConfig+0x278>)
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	4a75      	ldr	r2, [pc, #468]	@ (80063c4 <HAL_RCC_OscConfig+0x278>)
 80061ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80061f2:	6013      	str	r3, [r2, #0]
 80061f4:	e041      	b.n	800627a <HAL_RCC_OscConfig+0x12e>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	685b      	ldr	r3, [r3, #4]
 80061fa:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80061fe:	d112      	bne.n	8006226 <HAL_RCC_OscConfig+0xda>
 8006200:	4b70      	ldr	r3, [pc, #448]	@ (80063c4 <HAL_RCC_OscConfig+0x278>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4a6f      	ldr	r2, [pc, #444]	@ (80063c4 <HAL_RCC_OscConfig+0x278>)
 8006206:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800620a:	6013      	str	r3, [r2, #0]
 800620c:	4b6d      	ldr	r3, [pc, #436]	@ (80063c4 <HAL_RCC_OscConfig+0x278>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4a6c      	ldr	r2, [pc, #432]	@ (80063c4 <HAL_RCC_OscConfig+0x278>)
 8006212:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006216:	6013      	str	r3, [r2, #0]
 8006218:	4b6a      	ldr	r3, [pc, #424]	@ (80063c4 <HAL_RCC_OscConfig+0x278>)
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4a69      	ldr	r2, [pc, #420]	@ (80063c4 <HAL_RCC_OscConfig+0x278>)
 800621e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006222:	6013      	str	r3, [r2, #0]
 8006224:	e029      	b.n	800627a <HAL_RCC_OscConfig+0x12e>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	685b      	ldr	r3, [r3, #4]
 800622a:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 800622e:	d112      	bne.n	8006256 <HAL_RCC_OscConfig+0x10a>
 8006230:	4b64      	ldr	r3, [pc, #400]	@ (80063c4 <HAL_RCC_OscConfig+0x278>)
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4a63      	ldr	r2, [pc, #396]	@ (80063c4 <HAL_RCC_OscConfig+0x278>)
 8006236:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800623a:	6013      	str	r3, [r2, #0]
 800623c:	4b61      	ldr	r3, [pc, #388]	@ (80063c4 <HAL_RCC_OscConfig+0x278>)
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	4a60      	ldr	r2, [pc, #384]	@ (80063c4 <HAL_RCC_OscConfig+0x278>)
 8006242:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006246:	6013      	str	r3, [r2, #0]
 8006248:	4b5e      	ldr	r3, [pc, #376]	@ (80063c4 <HAL_RCC_OscConfig+0x278>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	4a5d      	ldr	r2, [pc, #372]	@ (80063c4 <HAL_RCC_OscConfig+0x278>)
 800624e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006252:	6013      	str	r3, [r2, #0]
 8006254:	e011      	b.n	800627a <HAL_RCC_OscConfig+0x12e>
 8006256:	4b5b      	ldr	r3, [pc, #364]	@ (80063c4 <HAL_RCC_OscConfig+0x278>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4a5a      	ldr	r2, [pc, #360]	@ (80063c4 <HAL_RCC_OscConfig+0x278>)
 800625c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006260:	6013      	str	r3, [r2, #0]
 8006262:	4b58      	ldr	r3, [pc, #352]	@ (80063c4 <HAL_RCC_OscConfig+0x278>)
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4a57      	ldr	r2, [pc, #348]	@ (80063c4 <HAL_RCC_OscConfig+0x278>)
 8006268:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800626c:	6013      	str	r3, [r2, #0]
 800626e:	4b55      	ldr	r3, [pc, #340]	@ (80063c4 <HAL_RCC_OscConfig+0x278>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4a54      	ldr	r2, [pc, #336]	@ (80063c4 <HAL_RCC_OscConfig+0x278>)
 8006274:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006278:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	685b      	ldr	r3, [r3, #4]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d013      	beq.n	80062aa <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006282:	f7fa fecf 	bl	8001024 <HAL_GetTick>
 8006286:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006288:	e008      	b.n	800629c <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800628a:	f7fa fecb 	bl	8001024 <HAL_GetTick>
 800628e:	4602      	mov	r2, r0
 8006290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006292:	1ad3      	subs	r3, r2, r3
 8006294:	2b64      	cmp	r3, #100	@ 0x64
 8006296:	d901      	bls.n	800629c <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8006298:	2303      	movs	r3, #3
 800629a:	e380      	b.n	800699e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800629c:	4b49      	ldr	r3, [pc, #292]	@ (80063c4 <HAL_RCC_OscConfig+0x278>)
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d0f0      	beq.n	800628a <HAL_RCC_OscConfig+0x13e>
 80062a8:	e014      	b.n	80062d4 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062aa:	f7fa febb 	bl	8001024 <HAL_GetTick>
 80062ae:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80062b0:	e008      	b.n	80062c4 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80062b2:	f7fa feb7 	bl	8001024 <HAL_GetTick>
 80062b6:	4602      	mov	r2, r0
 80062b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062ba:	1ad3      	subs	r3, r2, r3
 80062bc:	2b64      	cmp	r3, #100	@ 0x64
 80062be:	d901      	bls.n	80062c4 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 80062c0:	2303      	movs	r3, #3
 80062c2:	e36c      	b.n	800699e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80062c4:	4b3f      	ldr	r3, [pc, #252]	@ (80063c4 <HAL_RCC_OscConfig+0x278>)
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d1f0      	bne.n	80062b2 <HAL_RCC_OscConfig+0x166>
 80062d0:	e000      	b.n	80062d4 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062d2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f003 0302 	and.w	r3, r3, #2
 80062dc:	2b00      	cmp	r3, #0
 80062de:	f000 808c 	beq.w	80063fa <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80062e2:	4b38      	ldr	r3, [pc, #224]	@ (80063c4 <HAL_RCC_OscConfig+0x278>)
 80062e4:	691b      	ldr	r3, [r3, #16]
 80062e6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80062ea:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80062ec:	4b35      	ldr	r3, [pc, #212]	@ (80063c4 <HAL_RCC_OscConfig+0x278>)
 80062ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062f0:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80062f2:	6a3b      	ldr	r3, [r7, #32]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d007      	beq.n	8006308 <HAL_RCC_OscConfig+0x1bc>
 80062f8:	6a3b      	ldr	r3, [r7, #32]
 80062fa:	2b18      	cmp	r3, #24
 80062fc:	d137      	bne.n	800636e <HAL_RCC_OscConfig+0x222>
 80062fe:	69fb      	ldr	r3, [r7, #28]
 8006300:	f003 0303 	and.w	r3, r3, #3
 8006304:	2b00      	cmp	r3, #0
 8006306:	d132      	bne.n	800636e <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006308:	4b2e      	ldr	r3, [pc, #184]	@ (80063c4 <HAL_RCC_OscConfig+0x278>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f003 0304 	and.w	r3, r3, #4
 8006310:	2b00      	cmp	r3, #0
 8006312:	d005      	beq.n	8006320 <HAL_RCC_OscConfig+0x1d4>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	68db      	ldr	r3, [r3, #12]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d101      	bne.n	8006320 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 800631c:	2301      	movs	r3, #1
 800631e:	e33e      	b.n	800699e <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006320:	4b28      	ldr	r3, [pc, #160]	@ (80063c4 <HAL_RCC_OscConfig+0x278>)
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f023 0219 	bic.w	r2, r3, #25
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	68db      	ldr	r3, [r3, #12]
 800632c:	4925      	ldr	r1, [pc, #148]	@ (80063c4 <HAL_RCC_OscConfig+0x278>)
 800632e:	4313      	orrs	r3, r2
 8006330:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006332:	f7fa fe77 	bl	8001024 <HAL_GetTick>
 8006336:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006338:	e008      	b.n	800634c <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800633a:	f7fa fe73 	bl	8001024 <HAL_GetTick>
 800633e:	4602      	mov	r2, r0
 8006340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006342:	1ad3      	subs	r3, r2, r3
 8006344:	2b02      	cmp	r3, #2
 8006346:	d901      	bls.n	800634c <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8006348:	2303      	movs	r3, #3
 800634a:	e328      	b.n	800699e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800634c:	4b1d      	ldr	r3, [pc, #116]	@ (80063c4 <HAL_RCC_OscConfig+0x278>)
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f003 0304 	and.w	r3, r3, #4
 8006354:	2b00      	cmp	r3, #0
 8006356:	d0f0      	beq.n	800633a <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006358:	4b1a      	ldr	r3, [pc, #104]	@ (80063c4 <HAL_RCC_OscConfig+0x278>)
 800635a:	685b      	ldr	r3, [r3, #4]
 800635c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	691b      	ldr	r3, [r3, #16]
 8006364:	061b      	lsls	r3, r3, #24
 8006366:	4917      	ldr	r1, [pc, #92]	@ (80063c4 <HAL_RCC_OscConfig+0x278>)
 8006368:	4313      	orrs	r3, r2
 800636a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800636c:	e045      	b.n	80063fa <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	68db      	ldr	r3, [r3, #12]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d028      	beq.n	80063c8 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006376:	4b13      	ldr	r3, [pc, #76]	@ (80063c4 <HAL_RCC_OscConfig+0x278>)
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f023 0219 	bic.w	r2, r3, #25
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	68db      	ldr	r3, [r3, #12]
 8006382:	4910      	ldr	r1, [pc, #64]	@ (80063c4 <HAL_RCC_OscConfig+0x278>)
 8006384:	4313      	orrs	r3, r2
 8006386:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006388:	f7fa fe4c 	bl	8001024 <HAL_GetTick>
 800638c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800638e:	e008      	b.n	80063a2 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006390:	f7fa fe48 	bl	8001024 <HAL_GetTick>
 8006394:	4602      	mov	r2, r0
 8006396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006398:	1ad3      	subs	r3, r2, r3
 800639a:	2b02      	cmp	r3, #2
 800639c:	d901      	bls.n	80063a2 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 800639e:	2303      	movs	r3, #3
 80063a0:	e2fd      	b.n	800699e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80063a2:	4b08      	ldr	r3, [pc, #32]	@ (80063c4 <HAL_RCC_OscConfig+0x278>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f003 0304 	and.w	r3, r3, #4
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d0f0      	beq.n	8006390 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063ae:	4b05      	ldr	r3, [pc, #20]	@ (80063c4 <HAL_RCC_OscConfig+0x278>)
 80063b0:	685b      	ldr	r3, [r3, #4]
 80063b2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	691b      	ldr	r3, [r3, #16]
 80063ba:	061b      	lsls	r3, r3, #24
 80063bc:	4901      	ldr	r1, [pc, #4]	@ (80063c4 <HAL_RCC_OscConfig+0x278>)
 80063be:	4313      	orrs	r3, r2
 80063c0:	604b      	str	r3, [r1, #4]
 80063c2:	e01a      	b.n	80063fa <HAL_RCC_OscConfig+0x2ae>
 80063c4:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80063c8:	4b97      	ldr	r3, [pc, #604]	@ (8006628 <HAL_RCC_OscConfig+0x4dc>)
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4a96      	ldr	r2, [pc, #600]	@ (8006628 <HAL_RCC_OscConfig+0x4dc>)
 80063ce:	f023 0301 	bic.w	r3, r3, #1
 80063d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063d4:	f7fa fe26 	bl	8001024 <HAL_GetTick>
 80063d8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80063da:	e008      	b.n	80063ee <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80063dc:	f7fa fe22 	bl	8001024 <HAL_GetTick>
 80063e0:	4602      	mov	r2, r0
 80063e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063e4:	1ad3      	subs	r3, r2, r3
 80063e6:	2b02      	cmp	r3, #2
 80063e8:	d901      	bls.n	80063ee <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 80063ea:	2303      	movs	r3, #3
 80063ec:	e2d7      	b.n	800699e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80063ee:	4b8e      	ldr	r3, [pc, #568]	@ (8006628 <HAL_RCC_OscConfig+0x4dc>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f003 0304 	and.w	r3, r3, #4
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d1f0      	bne.n	80063dc <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f003 0310 	and.w	r3, r3, #16
 8006402:	2b00      	cmp	r3, #0
 8006404:	d06a      	beq.n	80064dc <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006406:	4b88      	ldr	r3, [pc, #544]	@ (8006628 <HAL_RCC_OscConfig+0x4dc>)
 8006408:	691b      	ldr	r3, [r3, #16]
 800640a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800640e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006410:	4b85      	ldr	r3, [pc, #532]	@ (8006628 <HAL_RCC_OscConfig+0x4dc>)
 8006412:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006414:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006416:	69bb      	ldr	r3, [r7, #24]
 8006418:	2b08      	cmp	r3, #8
 800641a:	d007      	beq.n	800642c <HAL_RCC_OscConfig+0x2e0>
 800641c:	69bb      	ldr	r3, [r7, #24]
 800641e:	2b18      	cmp	r3, #24
 8006420:	d11b      	bne.n	800645a <HAL_RCC_OscConfig+0x30e>
 8006422:	697b      	ldr	r3, [r7, #20]
 8006424:	f003 0303 	and.w	r3, r3, #3
 8006428:	2b01      	cmp	r3, #1
 800642a:	d116      	bne.n	800645a <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800642c:	4b7e      	ldr	r3, [pc, #504]	@ (8006628 <HAL_RCC_OscConfig+0x4dc>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006434:	2b00      	cmp	r3, #0
 8006436:	d005      	beq.n	8006444 <HAL_RCC_OscConfig+0x2f8>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	69db      	ldr	r3, [r3, #28]
 800643c:	2b80      	cmp	r3, #128	@ 0x80
 800643e:	d001      	beq.n	8006444 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8006440:	2301      	movs	r3, #1
 8006442:	e2ac      	b.n	800699e <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006444:	4b78      	ldr	r3, [pc, #480]	@ (8006628 <HAL_RCC_OscConfig+0x4dc>)
 8006446:	68db      	ldr	r3, [r3, #12]
 8006448:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6a1b      	ldr	r3, [r3, #32]
 8006450:	061b      	lsls	r3, r3, #24
 8006452:	4975      	ldr	r1, [pc, #468]	@ (8006628 <HAL_RCC_OscConfig+0x4dc>)
 8006454:	4313      	orrs	r3, r2
 8006456:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006458:	e040      	b.n	80064dc <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	69db      	ldr	r3, [r3, #28]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d023      	beq.n	80064aa <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006462:	4b71      	ldr	r3, [pc, #452]	@ (8006628 <HAL_RCC_OscConfig+0x4dc>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	4a70      	ldr	r2, [pc, #448]	@ (8006628 <HAL_RCC_OscConfig+0x4dc>)
 8006468:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800646c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800646e:	f7fa fdd9 	bl	8001024 <HAL_GetTick>
 8006472:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006474:	e008      	b.n	8006488 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006476:	f7fa fdd5 	bl	8001024 <HAL_GetTick>
 800647a:	4602      	mov	r2, r0
 800647c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800647e:	1ad3      	subs	r3, r2, r3
 8006480:	2b02      	cmp	r3, #2
 8006482:	d901      	bls.n	8006488 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8006484:	2303      	movs	r3, #3
 8006486:	e28a      	b.n	800699e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006488:	4b67      	ldr	r3, [pc, #412]	@ (8006628 <HAL_RCC_OscConfig+0x4dc>)
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006490:	2b00      	cmp	r3, #0
 8006492:	d0f0      	beq.n	8006476 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006494:	4b64      	ldr	r3, [pc, #400]	@ (8006628 <HAL_RCC_OscConfig+0x4dc>)
 8006496:	68db      	ldr	r3, [r3, #12]
 8006498:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6a1b      	ldr	r3, [r3, #32]
 80064a0:	061b      	lsls	r3, r3, #24
 80064a2:	4961      	ldr	r1, [pc, #388]	@ (8006628 <HAL_RCC_OscConfig+0x4dc>)
 80064a4:	4313      	orrs	r3, r2
 80064a6:	60cb      	str	r3, [r1, #12]
 80064a8:	e018      	b.n	80064dc <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80064aa:	4b5f      	ldr	r3, [pc, #380]	@ (8006628 <HAL_RCC_OscConfig+0x4dc>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4a5e      	ldr	r2, [pc, #376]	@ (8006628 <HAL_RCC_OscConfig+0x4dc>)
 80064b0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80064b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064b6:	f7fa fdb5 	bl	8001024 <HAL_GetTick>
 80064ba:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80064bc:	e008      	b.n	80064d0 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80064be:	f7fa fdb1 	bl	8001024 <HAL_GetTick>
 80064c2:	4602      	mov	r2, r0
 80064c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064c6:	1ad3      	subs	r3, r2, r3
 80064c8:	2b02      	cmp	r3, #2
 80064ca:	d901      	bls.n	80064d0 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 80064cc:	2303      	movs	r3, #3
 80064ce:	e266      	b.n	800699e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80064d0:	4b55      	ldr	r3, [pc, #340]	@ (8006628 <HAL_RCC_OscConfig+0x4dc>)
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d1f0      	bne.n	80064be <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f003 0308 	and.w	r3, r3, #8
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d036      	beq.n	8006556 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	695b      	ldr	r3, [r3, #20]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d019      	beq.n	8006524 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80064f0:	4b4d      	ldr	r3, [pc, #308]	@ (8006628 <HAL_RCC_OscConfig+0x4dc>)
 80064f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80064f4:	4a4c      	ldr	r2, [pc, #304]	@ (8006628 <HAL_RCC_OscConfig+0x4dc>)
 80064f6:	f043 0301 	orr.w	r3, r3, #1
 80064fa:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064fc:	f7fa fd92 	bl	8001024 <HAL_GetTick>
 8006500:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006502:	e008      	b.n	8006516 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006504:	f7fa fd8e 	bl	8001024 <HAL_GetTick>
 8006508:	4602      	mov	r2, r0
 800650a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800650c:	1ad3      	subs	r3, r2, r3
 800650e:	2b02      	cmp	r3, #2
 8006510:	d901      	bls.n	8006516 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8006512:	2303      	movs	r3, #3
 8006514:	e243      	b.n	800699e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006516:	4b44      	ldr	r3, [pc, #272]	@ (8006628 <HAL_RCC_OscConfig+0x4dc>)
 8006518:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800651a:	f003 0302 	and.w	r3, r3, #2
 800651e:	2b00      	cmp	r3, #0
 8006520:	d0f0      	beq.n	8006504 <HAL_RCC_OscConfig+0x3b8>
 8006522:	e018      	b.n	8006556 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006524:	4b40      	ldr	r3, [pc, #256]	@ (8006628 <HAL_RCC_OscConfig+0x4dc>)
 8006526:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006528:	4a3f      	ldr	r2, [pc, #252]	@ (8006628 <HAL_RCC_OscConfig+0x4dc>)
 800652a:	f023 0301 	bic.w	r3, r3, #1
 800652e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006530:	f7fa fd78 	bl	8001024 <HAL_GetTick>
 8006534:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006536:	e008      	b.n	800654a <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006538:	f7fa fd74 	bl	8001024 <HAL_GetTick>
 800653c:	4602      	mov	r2, r0
 800653e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006540:	1ad3      	subs	r3, r2, r3
 8006542:	2b02      	cmp	r3, #2
 8006544:	d901      	bls.n	800654a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8006546:	2303      	movs	r3, #3
 8006548:	e229      	b.n	800699e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800654a:	4b37      	ldr	r3, [pc, #220]	@ (8006628 <HAL_RCC_OscConfig+0x4dc>)
 800654c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800654e:	f003 0302 	and.w	r3, r3, #2
 8006552:	2b00      	cmp	r3, #0
 8006554:	d1f0      	bne.n	8006538 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f003 0320 	and.w	r3, r3, #32
 800655e:	2b00      	cmp	r3, #0
 8006560:	d036      	beq.n	80065d0 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	699b      	ldr	r3, [r3, #24]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d019      	beq.n	800659e <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800656a:	4b2f      	ldr	r3, [pc, #188]	@ (8006628 <HAL_RCC_OscConfig+0x4dc>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	4a2e      	ldr	r2, [pc, #184]	@ (8006628 <HAL_RCC_OscConfig+0x4dc>)
 8006570:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006574:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006576:	f7fa fd55 	bl	8001024 <HAL_GetTick>
 800657a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800657c:	e008      	b.n	8006590 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800657e:	f7fa fd51 	bl	8001024 <HAL_GetTick>
 8006582:	4602      	mov	r2, r0
 8006584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006586:	1ad3      	subs	r3, r2, r3
 8006588:	2b02      	cmp	r3, #2
 800658a:	d901      	bls.n	8006590 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 800658c:	2303      	movs	r3, #3
 800658e:	e206      	b.n	800699e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006590:	4b25      	ldr	r3, [pc, #148]	@ (8006628 <HAL_RCC_OscConfig+0x4dc>)
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006598:	2b00      	cmp	r3, #0
 800659a:	d0f0      	beq.n	800657e <HAL_RCC_OscConfig+0x432>
 800659c:	e018      	b.n	80065d0 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800659e:	4b22      	ldr	r3, [pc, #136]	@ (8006628 <HAL_RCC_OscConfig+0x4dc>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	4a21      	ldr	r2, [pc, #132]	@ (8006628 <HAL_RCC_OscConfig+0x4dc>)
 80065a4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80065a8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80065aa:	f7fa fd3b 	bl	8001024 <HAL_GetTick>
 80065ae:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80065b0:	e008      	b.n	80065c4 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80065b2:	f7fa fd37 	bl	8001024 <HAL_GetTick>
 80065b6:	4602      	mov	r2, r0
 80065b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065ba:	1ad3      	subs	r3, r2, r3
 80065bc:	2b02      	cmp	r3, #2
 80065be:	d901      	bls.n	80065c4 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 80065c0:	2303      	movs	r3, #3
 80065c2:	e1ec      	b.n	800699e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80065c4:	4b18      	ldr	r3, [pc, #96]	@ (8006628 <HAL_RCC_OscConfig+0x4dc>)
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d1f0      	bne.n	80065b2 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f003 0304 	and.w	r3, r3, #4
 80065d8:	2b00      	cmp	r3, #0
 80065da:	f000 80af 	beq.w	800673c <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80065de:	4b13      	ldr	r3, [pc, #76]	@ (800662c <HAL_RCC_OscConfig+0x4e0>)
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	4a12      	ldr	r2, [pc, #72]	@ (800662c <HAL_RCC_OscConfig+0x4e0>)
 80065e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80065e8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80065ea:	f7fa fd1b 	bl	8001024 <HAL_GetTick>
 80065ee:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80065f0:	e008      	b.n	8006604 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80065f2:	f7fa fd17 	bl	8001024 <HAL_GetTick>
 80065f6:	4602      	mov	r2, r0
 80065f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065fa:	1ad3      	subs	r3, r2, r3
 80065fc:	2b64      	cmp	r3, #100	@ 0x64
 80065fe:	d901      	bls.n	8006604 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8006600:	2303      	movs	r3, #3
 8006602:	e1cc      	b.n	800699e <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006604:	4b09      	ldr	r3, [pc, #36]	@ (800662c <HAL_RCC_OscConfig+0x4e0>)
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800660c:	2b00      	cmp	r3, #0
 800660e:	d0f0      	beq.n	80065f2 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	689b      	ldr	r3, [r3, #8]
 8006614:	2b01      	cmp	r3, #1
 8006616:	d10b      	bne.n	8006630 <HAL_RCC_OscConfig+0x4e4>
 8006618:	4b03      	ldr	r3, [pc, #12]	@ (8006628 <HAL_RCC_OscConfig+0x4dc>)
 800661a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800661c:	4a02      	ldr	r2, [pc, #8]	@ (8006628 <HAL_RCC_OscConfig+0x4dc>)
 800661e:	f043 0301 	orr.w	r3, r3, #1
 8006622:	6713      	str	r3, [r2, #112]	@ 0x70
 8006624:	e05b      	b.n	80066de <HAL_RCC_OscConfig+0x592>
 8006626:	bf00      	nop
 8006628:	58024400 	.word	0x58024400
 800662c:	58024800 	.word	0x58024800
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	689b      	ldr	r3, [r3, #8]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d112      	bne.n	800665e <HAL_RCC_OscConfig+0x512>
 8006638:	4b9d      	ldr	r3, [pc, #628]	@ (80068b0 <HAL_RCC_OscConfig+0x764>)
 800663a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800663c:	4a9c      	ldr	r2, [pc, #624]	@ (80068b0 <HAL_RCC_OscConfig+0x764>)
 800663e:	f023 0301 	bic.w	r3, r3, #1
 8006642:	6713      	str	r3, [r2, #112]	@ 0x70
 8006644:	4b9a      	ldr	r3, [pc, #616]	@ (80068b0 <HAL_RCC_OscConfig+0x764>)
 8006646:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006648:	4a99      	ldr	r2, [pc, #612]	@ (80068b0 <HAL_RCC_OscConfig+0x764>)
 800664a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800664e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006650:	4b97      	ldr	r3, [pc, #604]	@ (80068b0 <HAL_RCC_OscConfig+0x764>)
 8006652:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006654:	4a96      	ldr	r2, [pc, #600]	@ (80068b0 <HAL_RCC_OscConfig+0x764>)
 8006656:	f023 0304 	bic.w	r3, r3, #4
 800665a:	6713      	str	r3, [r2, #112]	@ 0x70
 800665c:	e03f      	b.n	80066de <HAL_RCC_OscConfig+0x592>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	689b      	ldr	r3, [r3, #8]
 8006662:	2b05      	cmp	r3, #5
 8006664:	d112      	bne.n	800668c <HAL_RCC_OscConfig+0x540>
 8006666:	4b92      	ldr	r3, [pc, #584]	@ (80068b0 <HAL_RCC_OscConfig+0x764>)
 8006668:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800666a:	4a91      	ldr	r2, [pc, #580]	@ (80068b0 <HAL_RCC_OscConfig+0x764>)
 800666c:	f043 0304 	orr.w	r3, r3, #4
 8006670:	6713      	str	r3, [r2, #112]	@ 0x70
 8006672:	4b8f      	ldr	r3, [pc, #572]	@ (80068b0 <HAL_RCC_OscConfig+0x764>)
 8006674:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006676:	4a8e      	ldr	r2, [pc, #568]	@ (80068b0 <HAL_RCC_OscConfig+0x764>)
 8006678:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800667c:	6713      	str	r3, [r2, #112]	@ 0x70
 800667e:	4b8c      	ldr	r3, [pc, #560]	@ (80068b0 <HAL_RCC_OscConfig+0x764>)
 8006680:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006682:	4a8b      	ldr	r2, [pc, #556]	@ (80068b0 <HAL_RCC_OscConfig+0x764>)
 8006684:	f043 0301 	orr.w	r3, r3, #1
 8006688:	6713      	str	r3, [r2, #112]	@ 0x70
 800668a:	e028      	b.n	80066de <HAL_RCC_OscConfig+0x592>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	689b      	ldr	r3, [r3, #8]
 8006690:	2b85      	cmp	r3, #133	@ 0x85
 8006692:	d112      	bne.n	80066ba <HAL_RCC_OscConfig+0x56e>
 8006694:	4b86      	ldr	r3, [pc, #536]	@ (80068b0 <HAL_RCC_OscConfig+0x764>)
 8006696:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006698:	4a85      	ldr	r2, [pc, #532]	@ (80068b0 <HAL_RCC_OscConfig+0x764>)
 800669a:	f043 0304 	orr.w	r3, r3, #4
 800669e:	6713      	str	r3, [r2, #112]	@ 0x70
 80066a0:	4b83      	ldr	r3, [pc, #524]	@ (80068b0 <HAL_RCC_OscConfig+0x764>)
 80066a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066a4:	4a82      	ldr	r2, [pc, #520]	@ (80068b0 <HAL_RCC_OscConfig+0x764>)
 80066a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80066aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80066ac:	4b80      	ldr	r3, [pc, #512]	@ (80068b0 <HAL_RCC_OscConfig+0x764>)
 80066ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066b0:	4a7f      	ldr	r2, [pc, #508]	@ (80068b0 <HAL_RCC_OscConfig+0x764>)
 80066b2:	f043 0301 	orr.w	r3, r3, #1
 80066b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80066b8:	e011      	b.n	80066de <HAL_RCC_OscConfig+0x592>
 80066ba:	4b7d      	ldr	r3, [pc, #500]	@ (80068b0 <HAL_RCC_OscConfig+0x764>)
 80066bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066be:	4a7c      	ldr	r2, [pc, #496]	@ (80068b0 <HAL_RCC_OscConfig+0x764>)
 80066c0:	f023 0301 	bic.w	r3, r3, #1
 80066c4:	6713      	str	r3, [r2, #112]	@ 0x70
 80066c6:	4b7a      	ldr	r3, [pc, #488]	@ (80068b0 <HAL_RCC_OscConfig+0x764>)
 80066c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066ca:	4a79      	ldr	r2, [pc, #484]	@ (80068b0 <HAL_RCC_OscConfig+0x764>)
 80066cc:	f023 0304 	bic.w	r3, r3, #4
 80066d0:	6713      	str	r3, [r2, #112]	@ 0x70
 80066d2:	4b77      	ldr	r3, [pc, #476]	@ (80068b0 <HAL_RCC_OscConfig+0x764>)
 80066d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066d6:	4a76      	ldr	r2, [pc, #472]	@ (80068b0 <HAL_RCC_OscConfig+0x764>)
 80066d8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80066dc:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	689b      	ldr	r3, [r3, #8]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d015      	beq.n	8006712 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066e6:	f7fa fc9d 	bl	8001024 <HAL_GetTick>
 80066ea:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80066ec:	e00a      	b.n	8006704 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80066ee:	f7fa fc99 	bl	8001024 <HAL_GetTick>
 80066f2:	4602      	mov	r2, r0
 80066f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066f6:	1ad3      	subs	r3, r2, r3
 80066f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d901      	bls.n	8006704 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8006700:	2303      	movs	r3, #3
 8006702:	e14c      	b.n	800699e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006704:	4b6a      	ldr	r3, [pc, #424]	@ (80068b0 <HAL_RCC_OscConfig+0x764>)
 8006706:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006708:	f003 0302 	and.w	r3, r3, #2
 800670c:	2b00      	cmp	r3, #0
 800670e:	d0ee      	beq.n	80066ee <HAL_RCC_OscConfig+0x5a2>
 8006710:	e014      	b.n	800673c <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006712:	f7fa fc87 	bl	8001024 <HAL_GetTick>
 8006716:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006718:	e00a      	b.n	8006730 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800671a:	f7fa fc83 	bl	8001024 <HAL_GetTick>
 800671e:	4602      	mov	r2, r0
 8006720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006722:	1ad3      	subs	r3, r2, r3
 8006724:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006728:	4293      	cmp	r3, r2
 800672a:	d901      	bls.n	8006730 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 800672c:	2303      	movs	r3, #3
 800672e:	e136      	b.n	800699e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006730:	4b5f      	ldr	r3, [pc, #380]	@ (80068b0 <HAL_RCC_OscConfig+0x764>)
 8006732:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006734:	f003 0302 	and.w	r3, r3, #2
 8006738:	2b00      	cmp	r3, #0
 800673a:	d1ee      	bne.n	800671a <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006740:	2b00      	cmp	r3, #0
 8006742:	f000 812b 	beq.w	800699c <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006746:	4b5a      	ldr	r3, [pc, #360]	@ (80068b0 <HAL_RCC_OscConfig+0x764>)
 8006748:	691b      	ldr	r3, [r3, #16]
 800674a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800674e:	2b18      	cmp	r3, #24
 8006750:	f000 80bb 	beq.w	80068ca <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006758:	2b02      	cmp	r3, #2
 800675a:	f040 8095 	bne.w	8006888 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800675e:	4b54      	ldr	r3, [pc, #336]	@ (80068b0 <HAL_RCC_OscConfig+0x764>)
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	4a53      	ldr	r2, [pc, #332]	@ (80068b0 <HAL_RCC_OscConfig+0x764>)
 8006764:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006768:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800676a:	f7fa fc5b 	bl	8001024 <HAL_GetTick>
 800676e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006770:	e008      	b.n	8006784 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006772:	f7fa fc57 	bl	8001024 <HAL_GetTick>
 8006776:	4602      	mov	r2, r0
 8006778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800677a:	1ad3      	subs	r3, r2, r3
 800677c:	2b02      	cmp	r3, #2
 800677e:	d901      	bls.n	8006784 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8006780:	2303      	movs	r3, #3
 8006782:	e10c      	b.n	800699e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006784:	4b4a      	ldr	r3, [pc, #296]	@ (80068b0 <HAL_RCC_OscConfig+0x764>)
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800678c:	2b00      	cmp	r3, #0
 800678e:	d1f0      	bne.n	8006772 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006790:	4b47      	ldr	r3, [pc, #284]	@ (80068b0 <HAL_RCC_OscConfig+0x764>)
 8006792:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006794:	4b47      	ldr	r3, [pc, #284]	@ (80068b4 <HAL_RCC_OscConfig+0x768>)
 8006796:	4013      	ands	r3, r2
 8006798:	687a      	ldr	r2, [r7, #4]
 800679a:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800679c:	687a      	ldr	r2, [r7, #4]
 800679e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80067a0:	0112      	lsls	r2, r2, #4
 80067a2:	430a      	orrs	r2, r1
 80067a4:	4942      	ldr	r1, [pc, #264]	@ (80068b0 <HAL_RCC_OscConfig+0x764>)
 80067a6:	4313      	orrs	r3, r2
 80067a8:	628b      	str	r3, [r1, #40]	@ 0x28
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067ae:	3b01      	subs	r3, #1
 80067b0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80067b8:	3b01      	subs	r3, #1
 80067ba:	025b      	lsls	r3, r3, #9
 80067bc:	b29b      	uxth	r3, r3
 80067be:	431a      	orrs	r2, r3
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067c4:	3b01      	subs	r3, #1
 80067c6:	041b      	lsls	r3, r3, #16
 80067c8:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80067cc:	431a      	orrs	r2, r3
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067d2:	3b01      	subs	r3, #1
 80067d4:	061b      	lsls	r3, r3, #24
 80067d6:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80067da:	4935      	ldr	r1, [pc, #212]	@ (80068b0 <HAL_RCC_OscConfig+0x764>)
 80067dc:	4313      	orrs	r3, r2
 80067de:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80067e0:	4b33      	ldr	r3, [pc, #204]	@ (80068b0 <HAL_RCC_OscConfig+0x764>)
 80067e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067e4:	4a32      	ldr	r2, [pc, #200]	@ (80068b0 <HAL_RCC_OscConfig+0x764>)
 80067e6:	f023 0301 	bic.w	r3, r3, #1
 80067ea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80067ec:	4b30      	ldr	r3, [pc, #192]	@ (80068b0 <HAL_RCC_OscConfig+0x764>)
 80067ee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80067f0:	4b31      	ldr	r3, [pc, #196]	@ (80068b8 <HAL_RCC_OscConfig+0x76c>)
 80067f2:	4013      	ands	r3, r2
 80067f4:	687a      	ldr	r2, [r7, #4]
 80067f6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80067f8:	00d2      	lsls	r2, r2, #3
 80067fa:	492d      	ldr	r1, [pc, #180]	@ (80068b0 <HAL_RCC_OscConfig+0x764>)
 80067fc:	4313      	orrs	r3, r2
 80067fe:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006800:	4b2b      	ldr	r3, [pc, #172]	@ (80068b0 <HAL_RCC_OscConfig+0x764>)
 8006802:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006804:	f023 020c 	bic.w	r2, r3, #12
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800680c:	4928      	ldr	r1, [pc, #160]	@ (80068b0 <HAL_RCC_OscConfig+0x764>)
 800680e:	4313      	orrs	r3, r2
 8006810:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006812:	4b27      	ldr	r3, [pc, #156]	@ (80068b0 <HAL_RCC_OscConfig+0x764>)
 8006814:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006816:	f023 0202 	bic.w	r2, r3, #2
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800681e:	4924      	ldr	r1, [pc, #144]	@ (80068b0 <HAL_RCC_OscConfig+0x764>)
 8006820:	4313      	orrs	r3, r2
 8006822:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006824:	4b22      	ldr	r3, [pc, #136]	@ (80068b0 <HAL_RCC_OscConfig+0x764>)
 8006826:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006828:	4a21      	ldr	r2, [pc, #132]	@ (80068b0 <HAL_RCC_OscConfig+0x764>)
 800682a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800682e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006830:	4b1f      	ldr	r3, [pc, #124]	@ (80068b0 <HAL_RCC_OscConfig+0x764>)
 8006832:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006834:	4a1e      	ldr	r2, [pc, #120]	@ (80068b0 <HAL_RCC_OscConfig+0x764>)
 8006836:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800683a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800683c:	4b1c      	ldr	r3, [pc, #112]	@ (80068b0 <HAL_RCC_OscConfig+0x764>)
 800683e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006840:	4a1b      	ldr	r2, [pc, #108]	@ (80068b0 <HAL_RCC_OscConfig+0x764>)
 8006842:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006846:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8006848:	4b19      	ldr	r3, [pc, #100]	@ (80068b0 <HAL_RCC_OscConfig+0x764>)
 800684a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800684c:	4a18      	ldr	r2, [pc, #96]	@ (80068b0 <HAL_RCC_OscConfig+0x764>)
 800684e:	f043 0301 	orr.w	r3, r3, #1
 8006852:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006854:	4b16      	ldr	r3, [pc, #88]	@ (80068b0 <HAL_RCC_OscConfig+0x764>)
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	4a15      	ldr	r2, [pc, #84]	@ (80068b0 <HAL_RCC_OscConfig+0x764>)
 800685a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800685e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006860:	f7fa fbe0 	bl	8001024 <HAL_GetTick>
 8006864:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006866:	e008      	b.n	800687a <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006868:	f7fa fbdc 	bl	8001024 <HAL_GetTick>
 800686c:	4602      	mov	r2, r0
 800686e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006870:	1ad3      	subs	r3, r2, r3
 8006872:	2b02      	cmp	r3, #2
 8006874:	d901      	bls.n	800687a <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8006876:	2303      	movs	r3, #3
 8006878:	e091      	b.n	800699e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800687a:	4b0d      	ldr	r3, [pc, #52]	@ (80068b0 <HAL_RCC_OscConfig+0x764>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006882:	2b00      	cmp	r3, #0
 8006884:	d0f0      	beq.n	8006868 <HAL_RCC_OscConfig+0x71c>
 8006886:	e089      	b.n	800699c <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006888:	4b09      	ldr	r3, [pc, #36]	@ (80068b0 <HAL_RCC_OscConfig+0x764>)
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4a08      	ldr	r2, [pc, #32]	@ (80068b0 <HAL_RCC_OscConfig+0x764>)
 800688e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006892:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006894:	f7fa fbc6 	bl	8001024 <HAL_GetTick>
 8006898:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800689a:	e00f      	b.n	80068bc <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800689c:	f7fa fbc2 	bl	8001024 <HAL_GetTick>
 80068a0:	4602      	mov	r2, r0
 80068a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068a4:	1ad3      	subs	r3, r2, r3
 80068a6:	2b02      	cmp	r3, #2
 80068a8:	d908      	bls.n	80068bc <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 80068aa:	2303      	movs	r3, #3
 80068ac:	e077      	b.n	800699e <HAL_RCC_OscConfig+0x852>
 80068ae:	bf00      	nop
 80068b0:	58024400 	.word	0x58024400
 80068b4:	fffffc0c 	.word	0xfffffc0c
 80068b8:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80068bc:	4b3a      	ldr	r3, [pc, #232]	@ (80069a8 <HAL_RCC_OscConfig+0x85c>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d1e9      	bne.n	800689c <HAL_RCC_OscConfig+0x750>
 80068c8:	e068      	b.n	800699c <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80068ca:	4b37      	ldr	r3, [pc, #220]	@ (80069a8 <HAL_RCC_OscConfig+0x85c>)
 80068cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068ce:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80068d0:	4b35      	ldr	r3, [pc, #212]	@ (80069a8 <HAL_RCC_OscConfig+0x85c>)
 80068d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068d4:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068da:	2b01      	cmp	r3, #1
 80068dc:	d031      	beq.n	8006942 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80068de:	693b      	ldr	r3, [r7, #16]
 80068e0:	f003 0203 	and.w	r2, r3, #3
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80068e8:	429a      	cmp	r2, r3
 80068ea:	d12a      	bne.n	8006942 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80068ec:	693b      	ldr	r3, [r7, #16]
 80068ee:	091b      	lsrs	r3, r3, #4
 80068f0:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80068f8:	429a      	cmp	r2, r3
 80068fa:	d122      	bne.n	8006942 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006906:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006908:	429a      	cmp	r2, r3
 800690a:	d11a      	bne.n	8006942 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	0a5b      	lsrs	r3, r3, #9
 8006910:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006918:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800691a:	429a      	cmp	r2, r3
 800691c:	d111      	bne.n	8006942 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	0c1b      	lsrs	r3, r3, #16
 8006922:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800692a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800692c:	429a      	cmp	r2, r3
 800692e:	d108      	bne.n	8006942 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	0e1b      	lsrs	r3, r3, #24
 8006934:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800693c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800693e:	429a      	cmp	r2, r3
 8006940:	d001      	beq.n	8006946 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8006942:	2301      	movs	r3, #1
 8006944:	e02b      	b.n	800699e <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8006946:	4b18      	ldr	r3, [pc, #96]	@ (80069a8 <HAL_RCC_OscConfig+0x85c>)
 8006948:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800694a:	08db      	lsrs	r3, r3, #3
 800694c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006950:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006956:	693a      	ldr	r2, [r7, #16]
 8006958:	429a      	cmp	r2, r3
 800695a:	d01f      	beq.n	800699c <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800695c:	4b12      	ldr	r3, [pc, #72]	@ (80069a8 <HAL_RCC_OscConfig+0x85c>)
 800695e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006960:	4a11      	ldr	r2, [pc, #68]	@ (80069a8 <HAL_RCC_OscConfig+0x85c>)
 8006962:	f023 0301 	bic.w	r3, r3, #1
 8006966:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006968:	f7fa fb5c 	bl	8001024 <HAL_GetTick>
 800696c:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800696e:	bf00      	nop
 8006970:	f7fa fb58 	bl	8001024 <HAL_GetTick>
 8006974:	4602      	mov	r2, r0
 8006976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006978:	4293      	cmp	r3, r2
 800697a:	d0f9      	beq.n	8006970 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800697c:	4b0a      	ldr	r3, [pc, #40]	@ (80069a8 <HAL_RCC_OscConfig+0x85c>)
 800697e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006980:	4b0a      	ldr	r3, [pc, #40]	@ (80069ac <HAL_RCC_OscConfig+0x860>)
 8006982:	4013      	ands	r3, r2
 8006984:	687a      	ldr	r2, [r7, #4]
 8006986:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006988:	00d2      	lsls	r2, r2, #3
 800698a:	4907      	ldr	r1, [pc, #28]	@ (80069a8 <HAL_RCC_OscConfig+0x85c>)
 800698c:	4313      	orrs	r3, r2
 800698e:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8006990:	4b05      	ldr	r3, [pc, #20]	@ (80069a8 <HAL_RCC_OscConfig+0x85c>)
 8006992:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006994:	4a04      	ldr	r2, [pc, #16]	@ (80069a8 <HAL_RCC_OscConfig+0x85c>)
 8006996:	f043 0301 	orr.w	r3, r3, #1
 800699a:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800699c:	2300      	movs	r3, #0
}
 800699e:	4618      	mov	r0, r3
 80069a0:	3730      	adds	r7, #48	@ 0x30
 80069a2:	46bd      	mov	sp, r7
 80069a4:	bd80      	pop	{r7, pc}
 80069a6:	bf00      	nop
 80069a8:	58024400 	.word	0x58024400
 80069ac:	ffff0007 	.word	0xffff0007

080069b0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b086      	sub	sp, #24
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
 80069b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d101      	bne.n	80069c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80069c0:	2301      	movs	r3, #1
 80069c2:	e19c      	b.n	8006cfe <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80069c4:	4b8a      	ldr	r3, [pc, #552]	@ (8006bf0 <HAL_RCC_ClockConfig+0x240>)
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f003 030f 	and.w	r3, r3, #15
 80069cc:	683a      	ldr	r2, [r7, #0]
 80069ce:	429a      	cmp	r2, r3
 80069d0:	d910      	bls.n	80069f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80069d2:	4b87      	ldr	r3, [pc, #540]	@ (8006bf0 <HAL_RCC_ClockConfig+0x240>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f023 020f 	bic.w	r2, r3, #15
 80069da:	4985      	ldr	r1, [pc, #532]	@ (8006bf0 <HAL_RCC_ClockConfig+0x240>)
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	4313      	orrs	r3, r2
 80069e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80069e2:	4b83      	ldr	r3, [pc, #524]	@ (8006bf0 <HAL_RCC_ClockConfig+0x240>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f003 030f 	and.w	r3, r3, #15
 80069ea:	683a      	ldr	r2, [r7, #0]
 80069ec:	429a      	cmp	r2, r3
 80069ee:	d001      	beq.n	80069f4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80069f0:	2301      	movs	r3, #1
 80069f2:	e184      	b.n	8006cfe <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f003 0304 	and.w	r3, r3, #4
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d010      	beq.n	8006a22 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	691a      	ldr	r2, [r3, #16]
 8006a04:	4b7b      	ldr	r3, [pc, #492]	@ (8006bf4 <HAL_RCC_ClockConfig+0x244>)
 8006a06:	699b      	ldr	r3, [r3, #24]
 8006a08:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006a0c:	429a      	cmp	r2, r3
 8006a0e:	d908      	bls.n	8006a22 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006a10:	4b78      	ldr	r3, [pc, #480]	@ (8006bf4 <HAL_RCC_ClockConfig+0x244>)
 8006a12:	699b      	ldr	r3, [r3, #24]
 8006a14:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	691b      	ldr	r3, [r3, #16]
 8006a1c:	4975      	ldr	r1, [pc, #468]	@ (8006bf4 <HAL_RCC_ClockConfig+0x244>)
 8006a1e:	4313      	orrs	r3, r2
 8006a20:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f003 0308 	and.w	r3, r3, #8
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d010      	beq.n	8006a50 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	695a      	ldr	r2, [r3, #20]
 8006a32:	4b70      	ldr	r3, [pc, #448]	@ (8006bf4 <HAL_RCC_ClockConfig+0x244>)
 8006a34:	69db      	ldr	r3, [r3, #28]
 8006a36:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006a3a:	429a      	cmp	r2, r3
 8006a3c:	d908      	bls.n	8006a50 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006a3e:	4b6d      	ldr	r3, [pc, #436]	@ (8006bf4 <HAL_RCC_ClockConfig+0x244>)
 8006a40:	69db      	ldr	r3, [r3, #28]
 8006a42:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	695b      	ldr	r3, [r3, #20]
 8006a4a:	496a      	ldr	r1, [pc, #424]	@ (8006bf4 <HAL_RCC_ClockConfig+0x244>)
 8006a4c:	4313      	orrs	r3, r2
 8006a4e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f003 0310 	and.w	r3, r3, #16
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d010      	beq.n	8006a7e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	699a      	ldr	r2, [r3, #24]
 8006a60:	4b64      	ldr	r3, [pc, #400]	@ (8006bf4 <HAL_RCC_ClockConfig+0x244>)
 8006a62:	69db      	ldr	r3, [r3, #28]
 8006a64:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006a68:	429a      	cmp	r2, r3
 8006a6a:	d908      	bls.n	8006a7e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006a6c:	4b61      	ldr	r3, [pc, #388]	@ (8006bf4 <HAL_RCC_ClockConfig+0x244>)
 8006a6e:	69db      	ldr	r3, [r3, #28]
 8006a70:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	699b      	ldr	r3, [r3, #24]
 8006a78:	495e      	ldr	r1, [pc, #376]	@ (8006bf4 <HAL_RCC_ClockConfig+0x244>)
 8006a7a:	4313      	orrs	r3, r2
 8006a7c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f003 0320 	and.w	r3, r3, #32
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d010      	beq.n	8006aac <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	69da      	ldr	r2, [r3, #28]
 8006a8e:	4b59      	ldr	r3, [pc, #356]	@ (8006bf4 <HAL_RCC_ClockConfig+0x244>)
 8006a90:	6a1b      	ldr	r3, [r3, #32]
 8006a92:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006a96:	429a      	cmp	r2, r3
 8006a98:	d908      	bls.n	8006aac <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006a9a:	4b56      	ldr	r3, [pc, #344]	@ (8006bf4 <HAL_RCC_ClockConfig+0x244>)
 8006a9c:	6a1b      	ldr	r3, [r3, #32]
 8006a9e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	69db      	ldr	r3, [r3, #28]
 8006aa6:	4953      	ldr	r1, [pc, #332]	@ (8006bf4 <HAL_RCC_ClockConfig+0x244>)
 8006aa8:	4313      	orrs	r3, r2
 8006aaa:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f003 0302 	and.w	r3, r3, #2
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d010      	beq.n	8006ada <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	68da      	ldr	r2, [r3, #12]
 8006abc:	4b4d      	ldr	r3, [pc, #308]	@ (8006bf4 <HAL_RCC_ClockConfig+0x244>)
 8006abe:	699b      	ldr	r3, [r3, #24]
 8006ac0:	f003 030f 	and.w	r3, r3, #15
 8006ac4:	429a      	cmp	r2, r3
 8006ac6:	d908      	bls.n	8006ada <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006ac8:	4b4a      	ldr	r3, [pc, #296]	@ (8006bf4 <HAL_RCC_ClockConfig+0x244>)
 8006aca:	699b      	ldr	r3, [r3, #24]
 8006acc:	f023 020f 	bic.w	r2, r3, #15
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	68db      	ldr	r3, [r3, #12]
 8006ad4:	4947      	ldr	r1, [pc, #284]	@ (8006bf4 <HAL_RCC_ClockConfig+0x244>)
 8006ad6:	4313      	orrs	r3, r2
 8006ad8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f003 0301 	and.w	r3, r3, #1
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d055      	beq.n	8006b92 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006ae6:	4b43      	ldr	r3, [pc, #268]	@ (8006bf4 <HAL_RCC_ClockConfig+0x244>)
 8006ae8:	699b      	ldr	r3, [r3, #24]
 8006aea:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	689b      	ldr	r3, [r3, #8]
 8006af2:	4940      	ldr	r1, [pc, #256]	@ (8006bf4 <HAL_RCC_ClockConfig+0x244>)
 8006af4:	4313      	orrs	r3, r2
 8006af6:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	685b      	ldr	r3, [r3, #4]
 8006afc:	2b02      	cmp	r3, #2
 8006afe:	d107      	bne.n	8006b10 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006b00:	4b3c      	ldr	r3, [pc, #240]	@ (8006bf4 <HAL_RCC_ClockConfig+0x244>)
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d121      	bne.n	8006b50 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006b0c:	2301      	movs	r3, #1
 8006b0e:	e0f6      	b.n	8006cfe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	685b      	ldr	r3, [r3, #4]
 8006b14:	2b03      	cmp	r3, #3
 8006b16:	d107      	bne.n	8006b28 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006b18:	4b36      	ldr	r3, [pc, #216]	@ (8006bf4 <HAL_RCC_ClockConfig+0x244>)
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d115      	bne.n	8006b50 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006b24:	2301      	movs	r3, #1
 8006b26:	e0ea      	b.n	8006cfe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	685b      	ldr	r3, [r3, #4]
 8006b2c:	2b01      	cmp	r3, #1
 8006b2e:	d107      	bne.n	8006b40 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006b30:	4b30      	ldr	r3, [pc, #192]	@ (8006bf4 <HAL_RCC_ClockConfig+0x244>)
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d109      	bne.n	8006b50 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006b3c:	2301      	movs	r3, #1
 8006b3e:	e0de      	b.n	8006cfe <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006b40:	4b2c      	ldr	r3, [pc, #176]	@ (8006bf4 <HAL_RCC_ClockConfig+0x244>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f003 0304 	and.w	r3, r3, #4
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d101      	bne.n	8006b50 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006b4c:	2301      	movs	r3, #1
 8006b4e:	e0d6      	b.n	8006cfe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006b50:	4b28      	ldr	r3, [pc, #160]	@ (8006bf4 <HAL_RCC_ClockConfig+0x244>)
 8006b52:	691b      	ldr	r3, [r3, #16]
 8006b54:	f023 0207 	bic.w	r2, r3, #7
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	685b      	ldr	r3, [r3, #4]
 8006b5c:	4925      	ldr	r1, [pc, #148]	@ (8006bf4 <HAL_RCC_ClockConfig+0x244>)
 8006b5e:	4313      	orrs	r3, r2
 8006b60:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b62:	f7fa fa5f 	bl	8001024 <HAL_GetTick>
 8006b66:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b68:	e00a      	b.n	8006b80 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006b6a:	f7fa fa5b 	bl	8001024 <HAL_GetTick>
 8006b6e:	4602      	mov	r2, r0
 8006b70:	697b      	ldr	r3, [r7, #20]
 8006b72:	1ad3      	subs	r3, r2, r3
 8006b74:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d901      	bls.n	8006b80 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8006b7c:	2303      	movs	r3, #3
 8006b7e:	e0be      	b.n	8006cfe <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b80:	4b1c      	ldr	r3, [pc, #112]	@ (8006bf4 <HAL_RCC_ClockConfig+0x244>)
 8006b82:	691b      	ldr	r3, [r3, #16]
 8006b84:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	685b      	ldr	r3, [r3, #4]
 8006b8c:	00db      	lsls	r3, r3, #3
 8006b8e:	429a      	cmp	r2, r3
 8006b90:	d1eb      	bne.n	8006b6a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f003 0302 	and.w	r3, r3, #2
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d010      	beq.n	8006bc0 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	68da      	ldr	r2, [r3, #12]
 8006ba2:	4b14      	ldr	r3, [pc, #80]	@ (8006bf4 <HAL_RCC_ClockConfig+0x244>)
 8006ba4:	699b      	ldr	r3, [r3, #24]
 8006ba6:	f003 030f 	and.w	r3, r3, #15
 8006baa:	429a      	cmp	r2, r3
 8006bac:	d208      	bcs.n	8006bc0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006bae:	4b11      	ldr	r3, [pc, #68]	@ (8006bf4 <HAL_RCC_ClockConfig+0x244>)
 8006bb0:	699b      	ldr	r3, [r3, #24]
 8006bb2:	f023 020f 	bic.w	r2, r3, #15
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	68db      	ldr	r3, [r3, #12]
 8006bba:	490e      	ldr	r1, [pc, #56]	@ (8006bf4 <HAL_RCC_ClockConfig+0x244>)
 8006bbc:	4313      	orrs	r3, r2
 8006bbe:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006bc0:	4b0b      	ldr	r3, [pc, #44]	@ (8006bf0 <HAL_RCC_ClockConfig+0x240>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f003 030f 	and.w	r3, r3, #15
 8006bc8:	683a      	ldr	r2, [r7, #0]
 8006bca:	429a      	cmp	r2, r3
 8006bcc:	d214      	bcs.n	8006bf8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006bce:	4b08      	ldr	r3, [pc, #32]	@ (8006bf0 <HAL_RCC_ClockConfig+0x240>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f023 020f 	bic.w	r2, r3, #15
 8006bd6:	4906      	ldr	r1, [pc, #24]	@ (8006bf0 <HAL_RCC_ClockConfig+0x240>)
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	4313      	orrs	r3, r2
 8006bdc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006bde:	4b04      	ldr	r3, [pc, #16]	@ (8006bf0 <HAL_RCC_ClockConfig+0x240>)
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f003 030f 	and.w	r3, r3, #15
 8006be6:	683a      	ldr	r2, [r7, #0]
 8006be8:	429a      	cmp	r2, r3
 8006bea:	d005      	beq.n	8006bf8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006bec:	2301      	movs	r3, #1
 8006bee:	e086      	b.n	8006cfe <HAL_RCC_ClockConfig+0x34e>
 8006bf0:	52002000 	.word	0x52002000
 8006bf4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f003 0304 	and.w	r3, r3, #4
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d010      	beq.n	8006c26 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	691a      	ldr	r2, [r3, #16]
 8006c08:	4b3f      	ldr	r3, [pc, #252]	@ (8006d08 <HAL_RCC_ClockConfig+0x358>)
 8006c0a:	699b      	ldr	r3, [r3, #24]
 8006c0c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006c10:	429a      	cmp	r2, r3
 8006c12:	d208      	bcs.n	8006c26 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006c14:	4b3c      	ldr	r3, [pc, #240]	@ (8006d08 <HAL_RCC_ClockConfig+0x358>)
 8006c16:	699b      	ldr	r3, [r3, #24]
 8006c18:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	691b      	ldr	r3, [r3, #16]
 8006c20:	4939      	ldr	r1, [pc, #228]	@ (8006d08 <HAL_RCC_ClockConfig+0x358>)
 8006c22:	4313      	orrs	r3, r2
 8006c24:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f003 0308 	and.w	r3, r3, #8
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d010      	beq.n	8006c54 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	695a      	ldr	r2, [r3, #20]
 8006c36:	4b34      	ldr	r3, [pc, #208]	@ (8006d08 <HAL_RCC_ClockConfig+0x358>)
 8006c38:	69db      	ldr	r3, [r3, #28]
 8006c3a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006c3e:	429a      	cmp	r2, r3
 8006c40:	d208      	bcs.n	8006c54 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006c42:	4b31      	ldr	r3, [pc, #196]	@ (8006d08 <HAL_RCC_ClockConfig+0x358>)
 8006c44:	69db      	ldr	r3, [r3, #28]
 8006c46:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	695b      	ldr	r3, [r3, #20]
 8006c4e:	492e      	ldr	r1, [pc, #184]	@ (8006d08 <HAL_RCC_ClockConfig+0x358>)
 8006c50:	4313      	orrs	r3, r2
 8006c52:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f003 0310 	and.w	r3, r3, #16
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d010      	beq.n	8006c82 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	699a      	ldr	r2, [r3, #24]
 8006c64:	4b28      	ldr	r3, [pc, #160]	@ (8006d08 <HAL_RCC_ClockConfig+0x358>)
 8006c66:	69db      	ldr	r3, [r3, #28]
 8006c68:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006c6c:	429a      	cmp	r2, r3
 8006c6e:	d208      	bcs.n	8006c82 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006c70:	4b25      	ldr	r3, [pc, #148]	@ (8006d08 <HAL_RCC_ClockConfig+0x358>)
 8006c72:	69db      	ldr	r3, [r3, #28]
 8006c74:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	699b      	ldr	r3, [r3, #24]
 8006c7c:	4922      	ldr	r1, [pc, #136]	@ (8006d08 <HAL_RCC_ClockConfig+0x358>)
 8006c7e:	4313      	orrs	r3, r2
 8006c80:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f003 0320 	and.w	r3, r3, #32
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d010      	beq.n	8006cb0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	69da      	ldr	r2, [r3, #28]
 8006c92:	4b1d      	ldr	r3, [pc, #116]	@ (8006d08 <HAL_RCC_ClockConfig+0x358>)
 8006c94:	6a1b      	ldr	r3, [r3, #32]
 8006c96:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006c9a:	429a      	cmp	r2, r3
 8006c9c:	d208      	bcs.n	8006cb0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006c9e:	4b1a      	ldr	r3, [pc, #104]	@ (8006d08 <HAL_RCC_ClockConfig+0x358>)
 8006ca0:	6a1b      	ldr	r3, [r3, #32]
 8006ca2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	69db      	ldr	r3, [r3, #28]
 8006caa:	4917      	ldr	r1, [pc, #92]	@ (8006d08 <HAL_RCC_ClockConfig+0x358>)
 8006cac:	4313      	orrs	r3, r2
 8006cae:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8006cb0:	f000 f834 	bl	8006d1c <HAL_RCC_GetSysClockFreq>
 8006cb4:	4602      	mov	r2, r0
 8006cb6:	4b14      	ldr	r3, [pc, #80]	@ (8006d08 <HAL_RCC_ClockConfig+0x358>)
 8006cb8:	699b      	ldr	r3, [r3, #24]
 8006cba:	0a1b      	lsrs	r3, r3, #8
 8006cbc:	f003 030f 	and.w	r3, r3, #15
 8006cc0:	4912      	ldr	r1, [pc, #72]	@ (8006d0c <HAL_RCC_ClockConfig+0x35c>)
 8006cc2:	5ccb      	ldrb	r3, [r1, r3]
 8006cc4:	f003 031f 	and.w	r3, r3, #31
 8006cc8:	fa22 f303 	lsr.w	r3, r2, r3
 8006ccc:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8006cce:	4b0e      	ldr	r3, [pc, #56]	@ (8006d08 <HAL_RCC_ClockConfig+0x358>)
 8006cd0:	699b      	ldr	r3, [r3, #24]
 8006cd2:	f003 030f 	and.w	r3, r3, #15
 8006cd6:	4a0d      	ldr	r2, [pc, #52]	@ (8006d0c <HAL_RCC_ClockConfig+0x35c>)
 8006cd8:	5cd3      	ldrb	r3, [r2, r3]
 8006cda:	f003 031f 	and.w	r3, r3, #31
 8006cde:	693a      	ldr	r2, [r7, #16]
 8006ce0:	fa22 f303 	lsr.w	r3, r2, r3
 8006ce4:	4a0a      	ldr	r2, [pc, #40]	@ (8006d10 <HAL_RCC_ClockConfig+0x360>)
 8006ce6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006ce8:	4a0a      	ldr	r2, [pc, #40]	@ (8006d14 <HAL_RCC_ClockConfig+0x364>)
 8006cea:	693b      	ldr	r3, [r7, #16]
 8006cec:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8006cee:	4b0a      	ldr	r3, [pc, #40]	@ (8006d18 <HAL_RCC_ClockConfig+0x368>)
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	f7f9 ff00 	bl	8000af8 <HAL_InitTick>
 8006cf8:	4603      	mov	r3, r0
 8006cfa:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006cfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cfe:	4618      	mov	r0, r3
 8006d00:	3718      	adds	r7, #24
 8006d02:	46bd      	mov	sp, r7
 8006d04:	bd80      	pop	{r7, pc}
 8006d06:	bf00      	nop
 8006d08:	58024400 	.word	0x58024400
 8006d0c:	0800b434 	.word	0x0800b434
 8006d10:	24000004 	.word	0x24000004
 8006d14:	24000000 	.word	0x24000000
 8006d18:	24000008 	.word	0x24000008

08006d1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	b089      	sub	sp, #36	@ 0x24
 8006d20:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006d22:	4bb3      	ldr	r3, [pc, #716]	@ (8006ff0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d24:	691b      	ldr	r3, [r3, #16]
 8006d26:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006d2a:	2b18      	cmp	r3, #24
 8006d2c:	f200 8155 	bhi.w	8006fda <HAL_RCC_GetSysClockFreq+0x2be>
 8006d30:	a201      	add	r2, pc, #4	@ (adr r2, 8006d38 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006d32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d36:	bf00      	nop
 8006d38:	08006d9d 	.word	0x08006d9d
 8006d3c:	08006fdb 	.word	0x08006fdb
 8006d40:	08006fdb 	.word	0x08006fdb
 8006d44:	08006fdb 	.word	0x08006fdb
 8006d48:	08006fdb 	.word	0x08006fdb
 8006d4c:	08006fdb 	.word	0x08006fdb
 8006d50:	08006fdb 	.word	0x08006fdb
 8006d54:	08006fdb 	.word	0x08006fdb
 8006d58:	08006dc3 	.word	0x08006dc3
 8006d5c:	08006fdb 	.word	0x08006fdb
 8006d60:	08006fdb 	.word	0x08006fdb
 8006d64:	08006fdb 	.word	0x08006fdb
 8006d68:	08006fdb 	.word	0x08006fdb
 8006d6c:	08006fdb 	.word	0x08006fdb
 8006d70:	08006fdb 	.word	0x08006fdb
 8006d74:	08006fdb 	.word	0x08006fdb
 8006d78:	08006dc9 	.word	0x08006dc9
 8006d7c:	08006fdb 	.word	0x08006fdb
 8006d80:	08006fdb 	.word	0x08006fdb
 8006d84:	08006fdb 	.word	0x08006fdb
 8006d88:	08006fdb 	.word	0x08006fdb
 8006d8c:	08006fdb 	.word	0x08006fdb
 8006d90:	08006fdb 	.word	0x08006fdb
 8006d94:	08006fdb 	.word	0x08006fdb
 8006d98:	08006dcf 	.word	0x08006dcf
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006d9c:	4b94      	ldr	r3, [pc, #592]	@ (8006ff0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f003 0320 	and.w	r3, r3, #32
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d009      	beq.n	8006dbc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006da8:	4b91      	ldr	r3, [pc, #580]	@ (8006ff0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	08db      	lsrs	r3, r3, #3
 8006dae:	f003 0303 	and.w	r3, r3, #3
 8006db2:	4a90      	ldr	r2, [pc, #576]	@ (8006ff4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006db4:	fa22 f303 	lsr.w	r3, r2, r3
 8006db8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8006dba:	e111      	b.n	8006fe0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006dbc:	4b8d      	ldr	r3, [pc, #564]	@ (8006ff4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006dbe:	61bb      	str	r3, [r7, #24]
      break;
 8006dc0:	e10e      	b.n	8006fe0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8006dc2:	4b8d      	ldr	r3, [pc, #564]	@ (8006ff8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006dc4:	61bb      	str	r3, [r7, #24]
      break;
 8006dc6:	e10b      	b.n	8006fe0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8006dc8:	4b8c      	ldr	r3, [pc, #560]	@ (8006ffc <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006dca:	61bb      	str	r3, [r7, #24]
      break;
 8006dcc:	e108      	b.n	8006fe0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006dce:	4b88      	ldr	r3, [pc, #544]	@ (8006ff0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006dd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dd2:	f003 0303 	and.w	r3, r3, #3
 8006dd6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006dd8:	4b85      	ldr	r3, [pc, #532]	@ (8006ff0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006dda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ddc:	091b      	lsrs	r3, r3, #4
 8006dde:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006de2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006de4:	4b82      	ldr	r3, [pc, #520]	@ (8006ff0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006de6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006de8:	f003 0301 	and.w	r3, r3, #1
 8006dec:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006dee:	4b80      	ldr	r3, [pc, #512]	@ (8006ff0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006df0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006df2:	08db      	lsrs	r3, r3, #3
 8006df4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006df8:	68fa      	ldr	r2, [r7, #12]
 8006dfa:	fb02 f303 	mul.w	r3, r2, r3
 8006dfe:	ee07 3a90 	vmov	s15, r3
 8006e02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e06:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8006e0a:	693b      	ldr	r3, [r7, #16]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	f000 80e1 	beq.w	8006fd4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8006e12:	697b      	ldr	r3, [r7, #20]
 8006e14:	2b02      	cmp	r3, #2
 8006e16:	f000 8083 	beq.w	8006f20 <HAL_RCC_GetSysClockFreq+0x204>
 8006e1a:	697b      	ldr	r3, [r7, #20]
 8006e1c:	2b02      	cmp	r3, #2
 8006e1e:	f200 80a1 	bhi.w	8006f64 <HAL_RCC_GetSysClockFreq+0x248>
 8006e22:	697b      	ldr	r3, [r7, #20]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d003      	beq.n	8006e30 <HAL_RCC_GetSysClockFreq+0x114>
 8006e28:	697b      	ldr	r3, [r7, #20]
 8006e2a:	2b01      	cmp	r3, #1
 8006e2c:	d056      	beq.n	8006edc <HAL_RCC_GetSysClockFreq+0x1c0>
 8006e2e:	e099      	b.n	8006f64 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006e30:	4b6f      	ldr	r3, [pc, #444]	@ (8006ff0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f003 0320 	and.w	r3, r3, #32
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d02d      	beq.n	8006e98 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006e3c:	4b6c      	ldr	r3, [pc, #432]	@ (8006ff0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	08db      	lsrs	r3, r3, #3
 8006e42:	f003 0303 	and.w	r3, r3, #3
 8006e46:	4a6b      	ldr	r2, [pc, #428]	@ (8006ff4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006e48:	fa22 f303 	lsr.w	r3, r2, r3
 8006e4c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	ee07 3a90 	vmov	s15, r3
 8006e54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e58:	693b      	ldr	r3, [r7, #16]
 8006e5a:	ee07 3a90 	vmov	s15, r3
 8006e5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e66:	4b62      	ldr	r3, [pc, #392]	@ (8006ff0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e6e:	ee07 3a90 	vmov	s15, r3
 8006e72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e76:	ed97 6a02 	vldr	s12, [r7, #8]
 8006e7a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8007000 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006e7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006e8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e92:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8006e96:	e087      	b.n	8006fa8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006e98:	693b      	ldr	r3, [r7, #16]
 8006e9a:	ee07 3a90 	vmov	s15, r3
 8006e9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ea2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8007004 <HAL_RCC_GetSysClockFreq+0x2e8>
 8006ea6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006eaa:	4b51      	ldr	r3, [pc, #324]	@ (8006ff0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006eac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006eae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006eb2:	ee07 3a90 	vmov	s15, r3
 8006eb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006eba:	ed97 6a02 	vldr	s12, [r7, #8]
 8006ebe:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8007000 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006ec2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ec6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006eca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006ece:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ed2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ed6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006eda:	e065      	b.n	8006fa8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006edc:	693b      	ldr	r3, [r7, #16]
 8006ede:	ee07 3a90 	vmov	s15, r3
 8006ee2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ee6:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8007008 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006eea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006eee:	4b40      	ldr	r3, [pc, #256]	@ (8006ff0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ef2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ef6:	ee07 3a90 	vmov	s15, r3
 8006efa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006efe:	ed97 6a02 	vldr	s12, [r7, #8]
 8006f02:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8007000 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006f06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f0e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f1a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006f1e:	e043      	b.n	8006fa8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006f20:	693b      	ldr	r3, [r7, #16]
 8006f22:	ee07 3a90 	vmov	s15, r3
 8006f26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f2a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800700c <HAL_RCC_GetSysClockFreq+0x2f0>
 8006f2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f32:	4b2f      	ldr	r3, [pc, #188]	@ (8006ff0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f3a:	ee07 3a90 	vmov	s15, r3
 8006f3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f42:	ed97 6a02 	vldr	s12, [r7, #8]
 8006f46:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8007000 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006f4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f5e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006f62:	e021      	b.n	8006fa8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006f64:	693b      	ldr	r3, [r7, #16]
 8006f66:	ee07 3a90 	vmov	s15, r3
 8006f6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f6e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8007008 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006f72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f76:	4b1e      	ldr	r3, [pc, #120]	@ (8006ff0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f7e:	ee07 3a90 	vmov	s15, r3
 8006f82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f86:	ed97 6a02 	vldr	s12, [r7, #8]
 8006f8a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8007000 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006f8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f96:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fa2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006fa6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8006fa8:	4b11      	ldr	r3, [pc, #68]	@ (8006ff0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006faa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fac:	0a5b      	lsrs	r3, r3, #9
 8006fae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006fb2:	3301      	adds	r3, #1
 8006fb4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	ee07 3a90 	vmov	s15, r3
 8006fbc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006fc0:	edd7 6a07 	vldr	s13, [r7, #28]
 8006fc4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006fc8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006fcc:	ee17 3a90 	vmov	r3, s15
 8006fd0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8006fd2:	e005      	b.n	8006fe0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	61bb      	str	r3, [r7, #24]
      break;
 8006fd8:	e002      	b.n	8006fe0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8006fda:	4b07      	ldr	r3, [pc, #28]	@ (8006ff8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006fdc:	61bb      	str	r3, [r7, #24]
      break;
 8006fde:	bf00      	nop
  }

  return sysclockfreq;
 8006fe0:	69bb      	ldr	r3, [r7, #24]
}
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	3724      	adds	r7, #36	@ 0x24
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fec:	4770      	bx	lr
 8006fee:	bf00      	nop
 8006ff0:	58024400 	.word	0x58024400
 8006ff4:	03d09000 	.word	0x03d09000
 8006ff8:	003d0900 	.word	0x003d0900
 8006ffc:	016e3600 	.word	0x016e3600
 8007000:	46000000 	.word	0x46000000
 8007004:	4c742400 	.word	0x4c742400
 8007008:	4a742400 	.word	0x4a742400
 800700c:	4bb71b00 	.word	0x4bb71b00

08007010 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007010:	b580      	push	{r7, lr}
 8007012:	b082      	sub	sp, #8
 8007014:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8007016:	f7ff fe81 	bl	8006d1c <HAL_RCC_GetSysClockFreq>
 800701a:	4602      	mov	r2, r0
 800701c:	4b10      	ldr	r3, [pc, #64]	@ (8007060 <HAL_RCC_GetHCLKFreq+0x50>)
 800701e:	699b      	ldr	r3, [r3, #24]
 8007020:	0a1b      	lsrs	r3, r3, #8
 8007022:	f003 030f 	and.w	r3, r3, #15
 8007026:	490f      	ldr	r1, [pc, #60]	@ (8007064 <HAL_RCC_GetHCLKFreq+0x54>)
 8007028:	5ccb      	ldrb	r3, [r1, r3]
 800702a:	f003 031f 	and.w	r3, r3, #31
 800702e:	fa22 f303 	lsr.w	r3, r2, r3
 8007032:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8007034:	4b0a      	ldr	r3, [pc, #40]	@ (8007060 <HAL_RCC_GetHCLKFreq+0x50>)
 8007036:	699b      	ldr	r3, [r3, #24]
 8007038:	f003 030f 	and.w	r3, r3, #15
 800703c:	4a09      	ldr	r2, [pc, #36]	@ (8007064 <HAL_RCC_GetHCLKFreq+0x54>)
 800703e:	5cd3      	ldrb	r3, [r2, r3]
 8007040:	f003 031f 	and.w	r3, r3, #31
 8007044:	687a      	ldr	r2, [r7, #4]
 8007046:	fa22 f303 	lsr.w	r3, r2, r3
 800704a:	4a07      	ldr	r2, [pc, #28]	@ (8007068 <HAL_RCC_GetHCLKFreq+0x58>)
 800704c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800704e:	4a07      	ldr	r2, [pc, #28]	@ (800706c <HAL_RCC_GetHCLKFreq+0x5c>)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007054:	4b04      	ldr	r3, [pc, #16]	@ (8007068 <HAL_RCC_GetHCLKFreq+0x58>)
 8007056:	681b      	ldr	r3, [r3, #0]
}
 8007058:	4618      	mov	r0, r3
 800705a:	3708      	adds	r7, #8
 800705c:	46bd      	mov	sp, r7
 800705e:	bd80      	pop	{r7, pc}
 8007060:	58024400 	.word	0x58024400
 8007064:	0800b434 	.word	0x0800b434
 8007068:	24000004 	.word	0x24000004
 800706c:	24000000 	.word	0x24000000

08007070 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007070:	b580      	push	{r7, lr}
 8007072:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8007074:	f7ff ffcc 	bl	8007010 <HAL_RCC_GetHCLKFreq>
 8007078:	4602      	mov	r2, r0
 800707a:	4b06      	ldr	r3, [pc, #24]	@ (8007094 <HAL_RCC_GetPCLK1Freq+0x24>)
 800707c:	69db      	ldr	r3, [r3, #28]
 800707e:	091b      	lsrs	r3, r3, #4
 8007080:	f003 0307 	and.w	r3, r3, #7
 8007084:	4904      	ldr	r1, [pc, #16]	@ (8007098 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007086:	5ccb      	ldrb	r3, [r1, r3]
 8007088:	f003 031f 	and.w	r3, r3, #31
 800708c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8007090:	4618      	mov	r0, r3
 8007092:	bd80      	pop	{r7, pc}
 8007094:	58024400 	.word	0x58024400
 8007098:	0800b434 	.word	0x0800b434

0800709c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 80070a0:	f7ff ffb6 	bl	8007010 <HAL_RCC_GetHCLKFreq>
 80070a4:	4602      	mov	r2, r0
 80070a6:	4b06      	ldr	r3, [pc, #24]	@ (80070c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80070a8:	69db      	ldr	r3, [r3, #28]
 80070aa:	0a1b      	lsrs	r3, r3, #8
 80070ac:	f003 0307 	and.w	r3, r3, #7
 80070b0:	4904      	ldr	r1, [pc, #16]	@ (80070c4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80070b2:	5ccb      	ldrb	r3, [r1, r3]
 80070b4:	f003 031f 	and.w	r3, r3, #31
 80070b8:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80070bc:	4618      	mov	r0, r3
 80070be:	bd80      	pop	{r7, pc}
 80070c0:	58024400 	.word	0x58024400
 80070c4:	0800b434 	.word	0x0800b434

080070c8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80070c8:	b480      	push	{r7}
 80070ca:	b083      	sub	sp, #12
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
 80070d0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	223f      	movs	r2, #63	@ 0x3f
 80070d6:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80070d8:	4b1a      	ldr	r3, [pc, #104]	@ (8007144 <HAL_RCC_GetClockConfig+0x7c>)
 80070da:	691b      	ldr	r3, [r3, #16]
 80070dc:	f003 0207 	and.w	r2, r3, #7
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	605a      	str	r2, [r3, #4]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
#else
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE);
 80070e4:	4b17      	ldr	r3, [pc, #92]	@ (8007144 <HAL_RCC_GetClockConfig+0x7c>)
 80070e6:	699b      	ldr	r3, [r3, #24]
 80070e8:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE);
 80070f0:	4b14      	ldr	r3, [pc, #80]	@ (8007144 <HAL_RCC_GetClockConfig+0x7c>)
 80070f2:	699b      	ldr	r3, [r3, #24]
 80070f4:	f003 020f 	and.w	r2, r3, #15
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE);
 80070fc:	4b11      	ldr	r3, [pc, #68]	@ (8007144 <HAL_RCC_GetClockConfig+0x7c>)
 80070fe:	699b      	ldr	r3, [r3, #24]
 8007100:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1);
 8007108:	4b0e      	ldr	r3, [pc, #56]	@ (8007144 <HAL_RCC_GetClockConfig+0x7c>)
 800710a:	69db      	ldr	r3, [r3, #28]
 800710c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2);
 8007114:	4b0b      	ldr	r3, [pc, #44]	@ (8007144 <HAL_RCC_GetClockConfig+0x7c>)
 8007116:	69db      	ldr	r3, [r3, #28]
 8007118:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
 8007120:	4b08      	ldr	r3, [pc, #32]	@ (8007144 <HAL_RCC_GetClockConfig+0x7c>)
 8007122:	6a1b      	ldr	r3, [r3, #32]
 8007124:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	61da      	str	r2, [r3, #28]
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800712c:	4b06      	ldr	r3, [pc, #24]	@ (8007148 <HAL_RCC_GetClockConfig+0x80>)
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f003 020f 	and.w	r2, r3, #15
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	601a      	str	r2, [r3, #0]
}
 8007138:	bf00      	nop
 800713a:	370c      	adds	r7, #12
 800713c:	46bd      	mov	sp, r7
 800713e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007142:	4770      	bx	lr
 8007144:	58024400 	.word	0x58024400
 8007148:	52002000 	.word	0x52002000

0800714c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800714c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007150:	b0c8      	sub	sp, #288	@ 0x120
 8007152:	af00      	add	r7, sp, #0
 8007154:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007158:	2300      	movs	r3, #0
 800715a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800715e:	2300      	movs	r3, #0
 8007160:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007164:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800716c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8007170:	2500      	movs	r5, #0
 8007172:	ea54 0305 	orrs.w	r3, r4, r5
 8007176:	d049      	beq.n	800720c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8007178:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800717c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800717e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007182:	d02f      	beq.n	80071e4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8007184:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007188:	d828      	bhi.n	80071dc <HAL_RCCEx_PeriphCLKConfig+0x90>
 800718a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800718e:	d01a      	beq.n	80071c6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007190:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007194:	d822      	bhi.n	80071dc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007196:	2b00      	cmp	r3, #0
 8007198:	d003      	beq.n	80071a2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800719a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800719e:	d007      	beq.n	80071b0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80071a0:	e01c      	b.n	80071dc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80071a2:	4ba7      	ldr	r3, [pc, #668]	@ (8007440 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80071a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071a6:	4aa6      	ldr	r2, [pc, #664]	@ (8007440 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80071a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80071ac:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80071ae:	e01a      	b.n	80071e6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80071b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80071b4:	3308      	adds	r3, #8
 80071b6:	2102      	movs	r1, #2
 80071b8:	4618      	mov	r0, r3
 80071ba:	f001 fc43 	bl	8008a44 <RCCEx_PLL2_Config>
 80071be:	4603      	mov	r3, r0
 80071c0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80071c4:	e00f      	b.n	80071e6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80071c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80071ca:	3328      	adds	r3, #40	@ 0x28
 80071cc:	2102      	movs	r1, #2
 80071ce:	4618      	mov	r0, r3
 80071d0:	f001 fcea 	bl	8008ba8 <RCCEx_PLL3_Config>
 80071d4:	4603      	mov	r3, r0
 80071d6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80071da:	e004      	b.n	80071e6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80071dc:	2301      	movs	r3, #1
 80071de:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80071e2:	e000      	b.n	80071e6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80071e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80071e6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d10a      	bne.n	8007204 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80071ee:	4b94      	ldr	r3, [pc, #592]	@ (8007440 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80071f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80071f2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80071f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80071fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80071fc:	4a90      	ldr	r2, [pc, #576]	@ (8007440 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80071fe:	430b      	orrs	r3, r1
 8007200:	6513      	str	r3, [r2, #80]	@ 0x50
 8007202:	e003      	b.n	800720c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007204:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007208:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800720c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007214:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8007218:	f04f 0900 	mov.w	r9, #0
 800721c:	ea58 0309 	orrs.w	r3, r8, r9
 8007220:	d047      	beq.n	80072b2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8007222:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007226:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007228:	2b04      	cmp	r3, #4
 800722a:	d82a      	bhi.n	8007282 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800722c:	a201      	add	r2, pc, #4	@ (adr r2, 8007234 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800722e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007232:	bf00      	nop
 8007234:	08007249 	.word	0x08007249
 8007238:	08007257 	.word	0x08007257
 800723c:	0800726d 	.word	0x0800726d
 8007240:	0800728b 	.word	0x0800728b
 8007244:	0800728b 	.word	0x0800728b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007248:	4b7d      	ldr	r3, [pc, #500]	@ (8007440 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800724a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800724c:	4a7c      	ldr	r2, [pc, #496]	@ (8007440 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800724e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007252:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007254:	e01a      	b.n	800728c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007256:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800725a:	3308      	adds	r3, #8
 800725c:	2100      	movs	r1, #0
 800725e:	4618      	mov	r0, r3
 8007260:	f001 fbf0 	bl	8008a44 <RCCEx_PLL2_Config>
 8007264:	4603      	mov	r3, r0
 8007266:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800726a:	e00f      	b.n	800728c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800726c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007270:	3328      	adds	r3, #40	@ 0x28
 8007272:	2100      	movs	r1, #0
 8007274:	4618      	mov	r0, r3
 8007276:	f001 fc97 	bl	8008ba8 <RCCEx_PLL3_Config>
 800727a:	4603      	mov	r3, r0
 800727c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007280:	e004      	b.n	800728c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007282:	2301      	movs	r3, #1
 8007284:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007288:	e000      	b.n	800728c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800728a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800728c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007290:	2b00      	cmp	r3, #0
 8007292:	d10a      	bne.n	80072aa <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007294:	4b6a      	ldr	r3, [pc, #424]	@ (8007440 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007296:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007298:	f023 0107 	bic.w	r1, r3, #7
 800729c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80072a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80072a2:	4a67      	ldr	r2, [pc, #412]	@ (8007440 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80072a4:	430b      	orrs	r3, r1
 80072a6:	6513      	str	r3, [r2, #80]	@ 0x50
 80072a8:	e003      	b.n	80072b2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072aa:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80072ae:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 80072b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80072b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072ba:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80072be:	f04f 0b00 	mov.w	fp, #0
 80072c2:	ea5a 030b 	orrs.w	r3, sl, fp
 80072c6:	d054      	beq.n	8007372 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 80072c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80072cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80072ce:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80072d2:	d036      	beq.n	8007342 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 80072d4:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80072d8:	d82f      	bhi.n	800733a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80072da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80072de:	d032      	beq.n	8007346 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80072e0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80072e4:	d829      	bhi.n	800733a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80072e6:	2bc0      	cmp	r3, #192	@ 0xc0
 80072e8:	d02f      	beq.n	800734a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 80072ea:	2bc0      	cmp	r3, #192	@ 0xc0
 80072ec:	d825      	bhi.n	800733a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80072ee:	2b80      	cmp	r3, #128	@ 0x80
 80072f0:	d018      	beq.n	8007324 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 80072f2:	2b80      	cmp	r3, #128	@ 0x80
 80072f4:	d821      	bhi.n	800733a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d002      	beq.n	8007300 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 80072fa:	2b40      	cmp	r3, #64	@ 0x40
 80072fc:	d007      	beq.n	800730e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 80072fe:	e01c      	b.n	800733a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007300:	4b4f      	ldr	r3, [pc, #316]	@ (8007440 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007302:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007304:	4a4e      	ldr	r2, [pc, #312]	@ (8007440 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007306:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800730a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800730c:	e01e      	b.n	800734c <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800730e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007312:	3308      	adds	r3, #8
 8007314:	2100      	movs	r1, #0
 8007316:	4618      	mov	r0, r3
 8007318:	f001 fb94 	bl	8008a44 <RCCEx_PLL2_Config>
 800731c:	4603      	mov	r3, r0
 800731e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8007322:	e013      	b.n	800734c <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007324:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007328:	3328      	adds	r3, #40	@ 0x28
 800732a:	2100      	movs	r1, #0
 800732c:	4618      	mov	r0, r3
 800732e:	f001 fc3b 	bl	8008ba8 <RCCEx_PLL3_Config>
 8007332:	4603      	mov	r3, r0
 8007334:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8007338:	e008      	b.n	800734c <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800733a:	2301      	movs	r3, #1
 800733c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007340:	e004      	b.n	800734c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8007342:	bf00      	nop
 8007344:	e002      	b.n	800734c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8007346:	bf00      	nop
 8007348:	e000      	b.n	800734c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800734a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800734c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007350:	2b00      	cmp	r3, #0
 8007352:	d10a      	bne.n	800736a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8007354:	4b3a      	ldr	r3, [pc, #232]	@ (8007440 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007356:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007358:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800735c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007360:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007362:	4a37      	ldr	r2, [pc, #220]	@ (8007440 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007364:	430b      	orrs	r3, r1
 8007366:	6513      	str	r3, [r2, #80]	@ 0x50
 8007368:	e003      	b.n	8007372 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800736a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800736e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8007372:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800737a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800737e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007382:	2300      	movs	r3, #0
 8007384:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8007388:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800738c:	460b      	mov	r3, r1
 800738e:	4313      	orrs	r3, r2
 8007390:	d05c      	beq.n	800744c <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 8007392:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007396:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007398:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800739c:	d03b      	beq.n	8007416 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800739e:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80073a2:	d834      	bhi.n	800740e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80073a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80073a8:	d037      	beq.n	800741a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 80073aa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80073ae:	d82e      	bhi.n	800740e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80073b0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80073b4:	d033      	beq.n	800741e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80073b6:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80073ba:	d828      	bhi.n	800740e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80073bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80073c0:	d01a      	beq.n	80073f8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 80073c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80073c6:	d822      	bhi.n	800740e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d003      	beq.n	80073d4 <HAL_RCCEx_PeriphCLKConfig+0x288>
 80073cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80073d0:	d007      	beq.n	80073e2 <HAL_RCCEx_PeriphCLKConfig+0x296>
 80073d2:	e01c      	b.n	800740e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80073d4:	4b1a      	ldr	r3, [pc, #104]	@ (8007440 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80073d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073d8:	4a19      	ldr	r2, [pc, #100]	@ (8007440 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80073da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80073de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80073e0:	e01e      	b.n	8007420 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80073e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80073e6:	3308      	adds	r3, #8
 80073e8:	2100      	movs	r1, #0
 80073ea:	4618      	mov	r0, r3
 80073ec:	f001 fb2a 	bl	8008a44 <RCCEx_PLL2_Config>
 80073f0:	4603      	mov	r3, r0
 80073f2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80073f6:	e013      	b.n	8007420 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80073f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80073fc:	3328      	adds	r3, #40	@ 0x28
 80073fe:	2100      	movs	r1, #0
 8007400:	4618      	mov	r0, r3
 8007402:	f001 fbd1 	bl	8008ba8 <RCCEx_PLL3_Config>
 8007406:	4603      	mov	r3, r0
 8007408:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800740c:	e008      	b.n	8007420 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800740e:	2301      	movs	r3, #1
 8007410:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007414:	e004      	b.n	8007420 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8007416:	bf00      	nop
 8007418:	e002      	b.n	8007420 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800741a:	bf00      	nop
 800741c:	e000      	b.n	8007420 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800741e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007420:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007424:	2b00      	cmp	r3, #0
 8007426:	d10d      	bne.n	8007444 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8007428:	4b05      	ldr	r3, [pc, #20]	@ (8007440 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800742a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800742c:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8007430:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007434:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007436:	4a02      	ldr	r2, [pc, #8]	@ (8007440 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007438:	430b      	orrs	r3, r1
 800743a:	6513      	str	r3, [r2, #80]	@ 0x50
 800743c:	e006      	b.n	800744c <HAL_RCCEx_PeriphCLKConfig+0x300>
 800743e:	bf00      	nop
 8007440:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007444:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007448:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800744c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007454:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8007458:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800745c:	2300      	movs	r3, #0
 800745e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007462:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8007466:	460b      	mov	r3, r1
 8007468:	4313      	orrs	r3, r2
 800746a:	d03a      	beq.n	80074e2 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800746c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007470:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007472:	2b30      	cmp	r3, #48	@ 0x30
 8007474:	d01f      	beq.n	80074b6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8007476:	2b30      	cmp	r3, #48	@ 0x30
 8007478:	d819      	bhi.n	80074ae <HAL_RCCEx_PeriphCLKConfig+0x362>
 800747a:	2b20      	cmp	r3, #32
 800747c:	d00c      	beq.n	8007498 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800747e:	2b20      	cmp	r3, #32
 8007480:	d815      	bhi.n	80074ae <HAL_RCCEx_PeriphCLKConfig+0x362>
 8007482:	2b00      	cmp	r3, #0
 8007484:	d019      	beq.n	80074ba <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8007486:	2b10      	cmp	r3, #16
 8007488:	d111      	bne.n	80074ae <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800748a:	4bae      	ldr	r3, [pc, #696]	@ (8007744 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800748c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800748e:	4aad      	ldr	r2, [pc, #692]	@ (8007744 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007490:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007494:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8007496:	e011      	b.n	80074bc <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007498:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800749c:	3308      	adds	r3, #8
 800749e:	2102      	movs	r1, #2
 80074a0:	4618      	mov	r0, r3
 80074a2:	f001 facf 	bl	8008a44 <RCCEx_PLL2_Config>
 80074a6:	4603      	mov	r3, r0
 80074a8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80074ac:	e006      	b.n	80074bc <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80074ae:	2301      	movs	r3, #1
 80074b0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80074b4:	e002      	b.n	80074bc <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 80074b6:	bf00      	nop
 80074b8:	e000      	b.n	80074bc <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 80074ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80074bc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d10a      	bne.n	80074da <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80074c4:	4b9f      	ldr	r3, [pc, #636]	@ (8007744 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80074c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80074c8:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80074cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80074d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80074d2:	4a9c      	ldr	r2, [pc, #624]	@ (8007744 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80074d4:	430b      	orrs	r3, r1
 80074d6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80074d8:	e003      	b.n	80074e2 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074da:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80074de:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80074e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80074e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074ea:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80074ee:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80074f2:	2300      	movs	r3, #0
 80074f4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80074f8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80074fc:	460b      	mov	r3, r1
 80074fe:	4313      	orrs	r3, r2
 8007500:	d051      	beq.n	80075a6 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8007502:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007506:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007508:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800750c:	d035      	beq.n	800757a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800750e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007512:	d82e      	bhi.n	8007572 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8007514:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007518:	d031      	beq.n	800757e <HAL_RCCEx_PeriphCLKConfig+0x432>
 800751a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800751e:	d828      	bhi.n	8007572 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8007520:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007524:	d01a      	beq.n	800755c <HAL_RCCEx_PeriphCLKConfig+0x410>
 8007526:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800752a:	d822      	bhi.n	8007572 <HAL_RCCEx_PeriphCLKConfig+0x426>
 800752c:	2b00      	cmp	r3, #0
 800752e:	d003      	beq.n	8007538 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8007530:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007534:	d007      	beq.n	8007546 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8007536:	e01c      	b.n	8007572 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007538:	4b82      	ldr	r3, [pc, #520]	@ (8007744 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800753a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800753c:	4a81      	ldr	r2, [pc, #516]	@ (8007744 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800753e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007542:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007544:	e01c      	b.n	8007580 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007546:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800754a:	3308      	adds	r3, #8
 800754c:	2100      	movs	r1, #0
 800754e:	4618      	mov	r0, r3
 8007550:	f001 fa78 	bl	8008a44 <RCCEx_PLL2_Config>
 8007554:	4603      	mov	r3, r0
 8007556:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800755a:	e011      	b.n	8007580 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800755c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007560:	3328      	adds	r3, #40	@ 0x28
 8007562:	2100      	movs	r1, #0
 8007564:	4618      	mov	r0, r3
 8007566:	f001 fb1f 	bl	8008ba8 <RCCEx_PLL3_Config>
 800756a:	4603      	mov	r3, r0
 800756c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007570:	e006      	b.n	8007580 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007572:	2301      	movs	r3, #1
 8007574:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007578:	e002      	b.n	8007580 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800757a:	bf00      	nop
 800757c:	e000      	b.n	8007580 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800757e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007580:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007584:	2b00      	cmp	r3, #0
 8007586:	d10a      	bne.n	800759e <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007588:	4b6e      	ldr	r3, [pc, #440]	@ (8007744 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800758a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800758c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8007590:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007594:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007596:	4a6b      	ldr	r2, [pc, #428]	@ (8007744 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007598:	430b      	orrs	r3, r1
 800759a:	6513      	str	r3, [r2, #80]	@ 0x50
 800759c:	e003      	b.n	80075a6 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800759e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80075a2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80075a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80075aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075ae:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80075b2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80075b6:	2300      	movs	r3, #0
 80075b8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80075bc:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80075c0:	460b      	mov	r3, r1
 80075c2:	4313      	orrs	r3, r2
 80075c4:	d053      	beq.n	800766e <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80075c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80075ca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80075cc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80075d0:	d033      	beq.n	800763a <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 80075d2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80075d6:	d82c      	bhi.n	8007632 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80075d8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80075dc:	d02f      	beq.n	800763e <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 80075de:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80075e2:	d826      	bhi.n	8007632 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80075e4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80075e8:	d02b      	beq.n	8007642 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80075ea:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80075ee:	d820      	bhi.n	8007632 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80075f0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80075f4:	d012      	beq.n	800761c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 80075f6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80075fa:	d81a      	bhi.n	8007632 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d022      	beq.n	8007646 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8007600:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007604:	d115      	bne.n	8007632 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007606:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800760a:	3308      	adds	r3, #8
 800760c:	2101      	movs	r1, #1
 800760e:	4618      	mov	r0, r3
 8007610:	f001 fa18 	bl	8008a44 <RCCEx_PLL2_Config>
 8007614:	4603      	mov	r3, r0
 8007616:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800761a:	e015      	b.n	8007648 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800761c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007620:	3328      	adds	r3, #40	@ 0x28
 8007622:	2101      	movs	r1, #1
 8007624:	4618      	mov	r0, r3
 8007626:	f001 fabf 	bl	8008ba8 <RCCEx_PLL3_Config>
 800762a:	4603      	mov	r3, r0
 800762c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007630:	e00a      	b.n	8007648 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007632:	2301      	movs	r3, #1
 8007634:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007638:	e006      	b.n	8007648 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800763a:	bf00      	nop
 800763c:	e004      	b.n	8007648 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800763e:	bf00      	nop
 8007640:	e002      	b.n	8007648 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8007642:	bf00      	nop
 8007644:	e000      	b.n	8007648 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8007646:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007648:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800764c:	2b00      	cmp	r3, #0
 800764e:	d10a      	bne.n	8007666 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007650:	4b3c      	ldr	r3, [pc, #240]	@ (8007744 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007652:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007654:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8007658:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800765c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800765e:	4a39      	ldr	r2, [pc, #228]	@ (8007744 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007660:	430b      	orrs	r3, r1
 8007662:	6513      	str	r3, [r2, #80]	@ 0x50
 8007664:	e003      	b.n	800766e <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007666:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800766a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800766e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007676:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800767a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800767e:	2300      	movs	r3, #0
 8007680:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007684:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8007688:	460b      	mov	r3, r1
 800768a:	4313      	orrs	r3, r2
 800768c:	d060      	beq.n	8007750 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800768e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007692:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007696:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 800769a:	d039      	beq.n	8007710 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 800769c:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 80076a0:	d832      	bhi.n	8007708 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80076a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80076a6:	d035      	beq.n	8007714 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80076a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80076ac:	d82c      	bhi.n	8007708 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80076ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80076b2:	d031      	beq.n	8007718 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80076b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80076b8:	d826      	bhi.n	8007708 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80076ba:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80076be:	d02d      	beq.n	800771c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80076c0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80076c4:	d820      	bhi.n	8007708 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80076c6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80076ca:	d012      	beq.n	80076f2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80076cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80076d0:	d81a      	bhi.n	8007708 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d024      	beq.n	8007720 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80076d6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80076da:	d115      	bne.n	8007708 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80076dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80076e0:	3308      	adds	r3, #8
 80076e2:	2101      	movs	r1, #1
 80076e4:	4618      	mov	r0, r3
 80076e6:	f001 f9ad 	bl	8008a44 <RCCEx_PLL2_Config>
 80076ea:	4603      	mov	r3, r0
 80076ec:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80076f0:	e017      	b.n	8007722 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80076f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80076f6:	3328      	adds	r3, #40	@ 0x28
 80076f8:	2101      	movs	r1, #1
 80076fa:	4618      	mov	r0, r3
 80076fc:	f001 fa54 	bl	8008ba8 <RCCEx_PLL3_Config>
 8007700:	4603      	mov	r3, r0
 8007702:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007706:	e00c      	b.n	8007722 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8007708:	2301      	movs	r3, #1
 800770a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800770e:	e008      	b.n	8007722 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007710:	bf00      	nop
 8007712:	e006      	b.n	8007722 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007714:	bf00      	nop
 8007716:	e004      	b.n	8007722 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007718:	bf00      	nop
 800771a:	e002      	b.n	8007722 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800771c:	bf00      	nop
 800771e:	e000      	b.n	8007722 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007720:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007722:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007726:	2b00      	cmp	r3, #0
 8007728:	d10e      	bne.n	8007748 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800772a:	4b06      	ldr	r3, [pc, #24]	@ (8007744 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800772c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800772e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007732:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007736:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800773a:	4a02      	ldr	r2, [pc, #8]	@ (8007744 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800773c:	430b      	orrs	r3, r1
 800773e:	6593      	str	r3, [r2, #88]	@ 0x58
 8007740:	e006      	b.n	8007750 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8007742:	bf00      	nop
 8007744:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007748:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800774c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007750:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007758:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800775c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007760:	2300      	movs	r3, #0
 8007762:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007766:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800776a:	460b      	mov	r3, r1
 800776c:	4313      	orrs	r3, r2
 800776e:	d037      	beq.n	80077e0 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8007770:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007774:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007776:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800777a:	d00e      	beq.n	800779a <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800777c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007780:	d816      	bhi.n	80077b0 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8007782:	2b00      	cmp	r3, #0
 8007784:	d018      	beq.n	80077b8 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8007786:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800778a:	d111      	bne.n	80077b0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800778c:	4bc4      	ldr	r3, [pc, #784]	@ (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800778e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007790:	4ac3      	ldr	r2, [pc, #780]	@ (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007792:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007796:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007798:	e00f      	b.n	80077ba <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800779a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800779e:	3308      	adds	r3, #8
 80077a0:	2101      	movs	r1, #1
 80077a2:	4618      	mov	r0, r3
 80077a4:	f001 f94e 	bl	8008a44 <RCCEx_PLL2_Config>
 80077a8:	4603      	mov	r3, r0
 80077aa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80077ae:	e004      	b.n	80077ba <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80077b0:	2301      	movs	r3, #1
 80077b2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80077b6:	e000      	b.n	80077ba <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80077b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80077ba:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d10a      	bne.n	80077d8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80077c2:	4bb7      	ldr	r3, [pc, #732]	@ (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80077c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80077c6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80077ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80077ce:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80077d0:	4ab3      	ldr	r2, [pc, #716]	@ (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80077d2:	430b      	orrs	r3, r1
 80077d4:	6513      	str	r3, [r2, #80]	@ 0x50
 80077d6:	e003      	b.n	80077e0 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077d8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80077dc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80077e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80077e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077e8:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80077ec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80077f0:	2300      	movs	r3, #0
 80077f2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80077f6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80077fa:	460b      	mov	r3, r1
 80077fc:	4313      	orrs	r3, r2
 80077fe:	d039      	beq.n	8007874 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8007800:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007804:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007806:	2b03      	cmp	r3, #3
 8007808:	d81c      	bhi.n	8007844 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800780a:	a201      	add	r2, pc, #4	@ (adr r2, 8007810 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800780c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007810:	0800784d 	.word	0x0800784d
 8007814:	08007821 	.word	0x08007821
 8007818:	0800782f 	.word	0x0800782f
 800781c:	0800784d 	.word	0x0800784d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007820:	4b9f      	ldr	r3, [pc, #636]	@ (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007822:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007824:	4a9e      	ldr	r2, [pc, #632]	@ (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007826:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800782a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800782c:	e00f      	b.n	800784e <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800782e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007832:	3308      	adds	r3, #8
 8007834:	2102      	movs	r1, #2
 8007836:	4618      	mov	r0, r3
 8007838:	f001 f904 	bl	8008a44 <RCCEx_PLL2_Config>
 800783c:	4603      	mov	r3, r0
 800783e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007842:	e004      	b.n	800784e <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007844:	2301      	movs	r3, #1
 8007846:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800784a:	e000      	b.n	800784e <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800784c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800784e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007852:	2b00      	cmp	r3, #0
 8007854:	d10a      	bne.n	800786c <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007856:	4b92      	ldr	r3, [pc, #584]	@ (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007858:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800785a:	f023 0103 	bic.w	r1, r3, #3
 800785e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007862:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007864:	4a8e      	ldr	r2, [pc, #568]	@ (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007866:	430b      	orrs	r3, r1
 8007868:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800786a:	e003      	b.n	8007874 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800786c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007870:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007874:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800787c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8007880:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007884:	2300      	movs	r3, #0
 8007886:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800788a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800788e:	460b      	mov	r3, r1
 8007890:	4313      	orrs	r3, r2
 8007892:	f000 8099 	beq.w	80079c8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007896:	4b83      	ldr	r3, [pc, #524]	@ (8007aa4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	4a82      	ldr	r2, [pc, #520]	@ (8007aa4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800789c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80078a0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80078a2:	f7f9 fbbf 	bl	8001024 <HAL_GetTick>
 80078a6:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80078aa:	e00b      	b.n	80078c4 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80078ac:	f7f9 fbba 	bl	8001024 <HAL_GetTick>
 80078b0:	4602      	mov	r2, r0
 80078b2:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80078b6:	1ad3      	subs	r3, r2, r3
 80078b8:	2b64      	cmp	r3, #100	@ 0x64
 80078ba:	d903      	bls.n	80078c4 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80078bc:	2303      	movs	r3, #3
 80078be:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80078c2:	e005      	b.n	80078d0 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80078c4:	4b77      	ldr	r3, [pc, #476]	@ (8007aa4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d0ed      	beq.n	80078ac <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 80078d0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d173      	bne.n	80079c0 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80078d8:	4b71      	ldr	r3, [pc, #452]	@ (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80078da:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80078dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80078e0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80078e4:	4053      	eors	r3, r2
 80078e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d015      	beq.n	800791a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80078ee:	4b6c      	ldr	r3, [pc, #432]	@ (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80078f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80078f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80078f6:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80078fa:	4b69      	ldr	r3, [pc, #420]	@ (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80078fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80078fe:	4a68      	ldr	r2, [pc, #416]	@ (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007900:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007904:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007906:	4b66      	ldr	r3, [pc, #408]	@ (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007908:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800790a:	4a65      	ldr	r2, [pc, #404]	@ (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800790c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007910:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007912:	4a63      	ldr	r2, [pc, #396]	@ (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007914:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007918:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800791a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800791e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007922:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007926:	d118      	bne.n	800795a <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007928:	f7f9 fb7c 	bl	8001024 <HAL_GetTick>
 800792c:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007930:	e00d      	b.n	800794e <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007932:	f7f9 fb77 	bl	8001024 <HAL_GetTick>
 8007936:	4602      	mov	r2, r0
 8007938:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800793c:	1ad2      	subs	r2, r2, r3
 800793e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8007942:	429a      	cmp	r2, r3
 8007944:	d903      	bls.n	800794e <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8007946:	2303      	movs	r3, #3
 8007948:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 800794c:	e005      	b.n	800795a <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800794e:	4b54      	ldr	r3, [pc, #336]	@ (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007950:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007952:	f003 0302 	and.w	r3, r3, #2
 8007956:	2b00      	cmp	r3, #0
 8007958:	d0eb      	beq.n	8007932 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800795a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800795e:	2b00      	cmp	r3, #0
 8007960:	d129      	bne.n	80079b6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007962:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007966:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800796a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800796e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007972:	d10e      	bne.n	8007992 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8007974:	4b4a      	ldr	r3, [pc, #296]	@ (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007976:	691b      	ldr	r3, [r3, #16]
 8007978:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800797c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007980:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007984:	091a      	lsrs	r2, r3, #4
 8007986:	4b48      	ldr	r3, [pc, #288]	@ (8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8007988:	4013      	ands	r3, r2
 800798a:	4a45      	ldr	r2, [pc, #276]	@ (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800798c:	430b      	orrs	r3, r1
 800798e:	6113      	str	r3, [r2, #16]
 8007990:	e005      	b.n	800799e <HAL_RCCEx_PeriphCLKConfig+0x852>
 8007992:	4b43      	ldr	r3, [pc, #268]	@ (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007994:	691b      	ldr	r3, [r3, #16]
 8007996:	4a42      	ldr	r2, [pc, #264]	@ (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007998:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800799c:	6113      	str	r3, [r2, #16]
 800799e:	4b40      	ldr	r3, [pc, #256]	@ (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80079a0:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80079a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80079a6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80079aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80079ae:	4a3c      	ldr	r2, [pc, #240]	@ (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80079b0:	430b      	orrs	r3, r1
 80079b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80079b4:	e008      	b.n	80079c8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80079b6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80079ba:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 80079be:	e003      	b.n	80079c8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079c0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80079c4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80079c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80079cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079d0:	f002 0301 	and.w	r3, r2, #1
 80079d4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80079d8:	2300      	movs	r3, #0
 80079da:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80079de:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80079e2:	460b      	mov	r3, r1
 80079e4:	4313      	orrs	r3, r2
 80079e6:	f000 8090 	beq.w	8007b0a <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80079ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80079ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80079f2:	2b28      	cmp	r3, #40	@ 0x28
 80079f4:	d870      	bhi.n	8007ad8 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 80079f6:	a201      	add	r2, pc, #4	@ (adr r2, 80079fc <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 80079f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079fc:	08007ae1 	.word	0x08007ae1
 8007a00:	08007ad9 	.word	0x08007ad9
 8007a04:	08007ad9 	.word	0x08007ad9
 8007a08:	08007ad9 	.word	0x08007ad9
 8007a0c:	08007ad9 	.word	0x08007ad9
 8007a10:	08007ad9 	.word	0x08007ad9
 8007a14:	08007ad9 	.word	0x08007ad9
 8007a18:	08007ad9 	.word	0x08007ad9
 8007a1c:	08007aad 	.word	0x08007aad
 8007a20:	08007ad9 	.word	0x08007ad9
 8007a24:	08007ad9 	.word	0x08007ad9
 8007a28:	08007ad9 	.word	0x08007ad9
 8007a2c:	08007ad9 	.word	0x08007ad9
 8007a30:	08007ad9 	.word	0x08007ad9
 8007a34:	08007ad9 	.word	0x08007ad9
 8007a38:	08007ad9 	.word	0x08007ad9
 8007a3c:	08007ac3 	.word	0x08007ac3
 8007a40:	08007ad9 	.word	0x08007ad9
 8007a44:	08007ad9 	.word	0x08007ad9
 8007a48:	08007ad9 	.word	0x08007ad9
 8007a4c:	08007ad9 	.word	0x08007ad9
 8007a50:	08007ad9 	.word	0x08007ad9
 8007a54:	08007ad9 	.word	0x08007ad9
 8007a58:	08007ad9 	.word	0x08007ad9
 8007a5c:	08007ae1 	.word	0x08007ae1
 8007a60:	08007ad9 	.word	0x08007ad9
 8007a64:	08007ad9 	.word	0x08007ad9
 8007a68:	08007ad9 	.word	0x08007ad9
 8007a6c:	08007ad9 	.word	0x08007ad9
 8007a70:	08007ad9 	.word	0x08007ad9
 8007a74:	08007ad9 	.word	0x08007ad9
 8007a78:	08007ad9 	.word	0x08007ad9
 8007a7c:	08007ae1 	.word	0x08007ae1
 8007a80:	08007ad9 	.word	0x08007ad9
 8007a84:	08007ad9 	.word	0x08007ad9
 8007a88:	08007ad9 	.word	0x08007ad9
 8007a8c:	08007ad9 	.word	0x08007ad9
 8007a90:	08007ad9 	.word	0x08007ad9
 8007a94:	08007ad9 	.word	0x08007ad9
 8007a98:	08007ad9 	.word	0x08007ad9
 8007a9c:	08007ae1 	.word	0x08007ae1
 8007aa0:	58024400 	.word	0x58024400
 8007aa4:	58024800 	.word	0x58024800
 8007aa8:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007aac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007ab0:	3308      	adds	r3, #8
 8007ab2:	2101      	movs	r1, #1
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	f000 ffc5 	bl	8008a44 <RCCEx_PLL2_Config>
 8007aba:	4603      	mov	r3, r0
 8007abc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007ac0:	e00f      	b.n	8007ae2 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007ac2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007ac6:	3328      	adds	r3, #40	@ 0x28
 8007ac8:	2101      	movs	r1, #1
 8007aca:	4618      	mov	r0, r3
 8007acc:	f001 f86c 	bl	8008ba8 <RCCEx_PLL3_Config>
 8007ad0:	4603      	mov	r3, r0
 8007ad2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007ad6:	e004      	b.n	8007ae2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007ad8:	2301      	movs	r3, #1
 8007ada:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007ade:	e000      	b.n	8007ae2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8007ae0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ae2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d10b      	bne.n	8007b02 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007aea:	4bc0      	ldr	r3, [pc, #768]	@ (8007dec <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007aec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007aee:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8007af2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007af6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007afa:	4abc      	ldr	r2, [pc, #752]	@ (8007dec <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007afc:	430b      	orrs	r3, r1
 8007afe:	6553      	str	r3, [r2, #84]	@ 0x54
 8007b00:	e003      	b.n	8007b0a <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b02:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007b06:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007b0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b12:	f002 0302 	and.w	r3, r2, #2
 8007b16:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007b20:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8007b24:	460b      	mov	r3, r1
 8007b26:	4313      	orrs	r3, r2
 8007b28:	d043      	beq.n	8007bb2 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8007b2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007b2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b32:	2b05      	cmp	r3, #5
 8007b34:	d824      	bhi.n	8007b80 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8007b36:	a201      	add	r2, pc, #4	@ (adr r2, 8007b3c <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8007b38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b3c:	08007b89 	.word	0x08007b89
 8007b40:	08007b55 	.word	0x08007b55
 8007b44:	08007b6b 	.word	0x08007b6b
 8007b48:	08007b89 	.word	0x08007b89
 8007b4c:	08007b89 	.word	0x08007b89
 8007b50:	08007b89 	.word	0x08007b89
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007b54:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007b58:	3308      	adds	r3, #8
 8007b5a:	2101      	movs	r1, #1
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	f000 ff71 	bl	8008a44 <RCCEx_PLL2_Config>
 8007b62:	4603      	mov	r3, r0
 8007b64:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007b68:	e00f      	b.n	8007b8a <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007b6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007b6e:	3328      	adds	r3, #40	@ 0x28
 8007b70:	2101      	movs	r1, #1
 8007b72:	4618      	mov	r0, r3
 8007b74:	f001 f818 	bl	8008ba8 <RCCEx_PLL3_Config>
 8007b78:	4603      	mov	r3, r0
 8007b7a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007b7e:	e004      	b.n	8007b8a <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007b80:	2301      	movs	r3, #1
 8007b82:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007b86:	e000      	b.n	8007b8a <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8007b88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b8a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d10b      	bne.n	8007baa <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007b92:	4b96      	ldr	r3, [pc, #600]	@ (8007dec <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007b94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b96:	f023 0107 	bic.w	r1, r3, #7
 8007b9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007b9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007ba2:	4a92      	ldr	r2, [pc, #584]	@ (8007dec <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007ba4:	430b      	orrs	r3, r1
 8007ba6:	6553      	str	r3, [r2, #84]	@ 0x54
 8007ba8:	e003      	b.n	8007bb2 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007baa:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007bae:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007bb2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bba:	f002 0304 	and.w	r3, r2, #4
 8007bbe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007bc8:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8007bcc:	460b      	mov	r3, r1
 8007bce:	4313      	orrs	r3, r2
 8007bd0:	d043      	beq.n	8007c5a <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007bd2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007bd6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007bda:	2b05      	cmp	r3, #5
 8007bdc:	d824      	bhi.n	8007c28 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8007bde:	a201      	add	r2, pc, #4	@ (adr r2, 8007be4 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8007be0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007be4:	08007c31 	.word	0x08007c31
 8007be8:	08007bfd 	.word	0x08007bfd
 8007bec:	08007c13 	.word	0x08007c13
 8007bf0:	08007c31 	.word	0x08007c31
 8007bf4:	08007c31 	.word	0x08007c31
 8007bf8:	08007c31 	.word	0x08007c31
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007bfc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007c00:	3308      	adds	r3, #8
 8007c02:	2101      	movs	r1, #1
 8007c04:	4618      	mov	r0, r3
 8007c06:	f000 ff1d 	bl	8008a44 <RCCEx_PLL2_Config>
 8007c0a:	4603      	mov	r3, r0
 8007c0c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007c10:	e00f      	b.n	8007c32 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007c12:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007c16:	3328      	adds	r3, #40	@ 0x28
 8007c18:	2101      	movs	r1, #1
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	f000 ffc4 	bl	8008ba8 <RCCEx_PLL3_Config>
 8007c20:	4603      	mov	r3, r0
 8007c22:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007c26:	e004      	b.n	8007c32 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007c28:	2301      	movs	r3, #1
 8007c2a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007c2e:	e000      	b.n	8007c32 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8007c30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c32:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d10b      	bne.n	8007c52 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007c3a:	4b6c      	ldr	r3, [pc, #432]	@ (8007dec <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007c3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c3e:	f023 0107 	bic.w	r1, r3, #7
 8007c42:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007c46:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007c4a:	4a68      	ldr	r2, [pc, #416]	@ (8007dec <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007c4c:	430b      	orrs	r3, r1
 8007c4e:	6593      	str	r3, [r2, #88]	@ 0x58
 8007c50:	e003      	b.n	8007c5a <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c52:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007c56:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007c5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c62:	f002 0320 	and.w	r3, r2, #32
 8007c66:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007c70:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007c74:	460b      	mov	r3, r1
 8007c76:	4313      	orrs	r3, r2
 8007c78:	d055      	beq.n	8007d26 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8007c7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007c7e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007c82:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007c86:	d033      	beq.n	8007cf0 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8007c88:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007c8c:	d82c      	bhi.n	8007ce8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8007c8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c92:	d02f      	beq.n	8007cf4 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8007c94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c98:	d826      	bhi.n	8007ce8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8007c9a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007c9e:	d02b      	beq.n	8007cf8 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8007ca0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007ca4:	d820      	bhi.n	8007ce8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8007ca6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007caa:	d012      	beq.n	8007cd2 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8007cac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007cb0:	d81a      	bhi.n	8007ce8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d022      	beq.n	8007cfc <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8007cb6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007cba:	d115      	bne.n	8007ce8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007cbc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007cc0:	3308      	adds	r3, #8
 8007cc2:	2100      	movs	r1, #0
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	f000 febd 	bl	8008a44 <RCCEx_PLL2_Config>
 8007cca:	4603      	mov	r3, r0
 8007ccc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007cd0:	e015      	b.n	8007cfe <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007cd2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007cd6:	3328      	adds	r3, #40	@ 0x28
 8007cd8:	2102      	movs	r1, #2
 8007cda:	4618      	mov	r0, r3
 8007cdc:	f000 ff64 	bl	8008ba8 <RCCEx_PLL3_Config>
 8007ce0:	4603      	mov	r3, r0
 8007ce2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007ce6:	e00a      	b.n	8007cfe <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007ce8:	2301      	movs	r3, #1
 8007cea:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007cee:	e006      	b.n	8007cfe <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8007cf0:	bf00      	nop
 8007cf2:	e004      	b.n	8007cfe <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8007cf4:	bf00      	nop
 8007cf6:	e002      	b.n	8007cfe <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8007cf8:	bf00      	nop
 8007cfa:	e000      	b.n	8007cfe <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8007cfc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007cfe:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d10b      	bne.n	8007d1e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007d06:	4b39      	ldr	r3, [pc, #228]	@ (8007dec <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007d08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d0a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007d0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007d12:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007d16:	4a35      	ldr	r2, [pc, #212]	@ (8007dec <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007d18:	430b      	orrs	r3, r1
 8007d1a:	6553      	str	r3, [r2, #84]	@ 0x54
 8007d1c:	e003      	b.n	8007d26 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d1e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007d22:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007d26:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d2e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8007d32:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007d36:	2300      	movs	r3, #0
 8007d38:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007d3c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8007d40:	460b      	mov	r3, r1
 8007d42:	4313      	orrs	r3, r2
 8007d44:	d058      	beq.n	8007df8 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8007d46:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007d4a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007d4e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007d52:	d033      	beq.n	8007dbc <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8007d54:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007d58:	d82c      	bhi.n	8007db4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8007d5a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007d5e:	d02f      	beq.n	8007dc0 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8007d60:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007d64:	d826      	bhi.n	8007db4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8007d66:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007d6a:	d02b      	beq.n	8007dc4 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8007d6c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007d70:	d820      	bhi.n	8007db4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8007d72:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007d76:	d012      	beq.n	8007d9e <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8007d78:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007d7c:	d81a      	bhi.n	8007db4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d022      	beq.n	8007dc8 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 8007d82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007d86:	d115      	bne.n	8007db4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007d88:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007d8c:	3308      	adds	r3, #8
 8007d8e:	2100      	movs	r1, #0
 8007d90:	4618      	mov	r0, r3
 8007d92:	f000 fe57 	bl	8008a44 <RCCEx_PLL2_Config>
 8007d96:	4603      	mov	r3, r0
 8007d98:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007d9c:	e015      	b.n	8007dca <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007d9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007da2:	3328      	adds	r3, #40	@ 0x28
 8007da4:	2102      	movs	r1, #2
 8007da6:	4618      	mov	r0, r3
 8007da8:	f000 fefe 	bl	8008ba8 <RCCEx_PLL3_Config>
 8007dac:	4603      	mov	r3, r0
 8007dae:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007db2:	e00a      	b.n	8007dca <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007db4:	2301      	movs	r3, #1
 8007db6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007dba:	e006      	b.n	8007dca <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8007dbc:	bf00      	nop
 8007dbe:	e004      	b.n	8007dca <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8007dc0:	bf00      	nop
 8007dc2:	e002      	b.n	8007dca <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8007dc4:	bf00      	nop
 8007dc6:	e000      	b.n	8007dca <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8007dc8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007dca:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d10e      	bne.n	8007df0 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007dd2:	4b06      	ldr	r3, [pc, #24]	@ (8007dec <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007dd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007dd6:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8007dda:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007dde:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007de2:	4a02      	ldr	r2, [pc, #8]	@ (8007dec <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007de4:	430b      	orrs	r3, r1
 8007de6:	6593      	str	r3, [r2, #88]	@ 0x58
 8007de8:	e006      	b.n	8007df8 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 8007dea:	bf00      	nop
 8007dec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007df0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007df4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007df8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e00:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8007e04:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007e08:	2300      	movs	r3, #0
 8007e0a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007e0e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8007e12:	460b      	mov	r3, r1
 8007e14:	4313      	orrs	r3, r2
 8007e16:	d055      	beq.n	8007ec4 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8007e18:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007e1c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007e20:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007e24:	d033      	beq.n	8007e8e <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8007e26:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007e2a:	d82c      	bhi.n	8007e86 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8007e2c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007e30:	d02f      	beq.n	8007e92 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8007e32:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007e36:	d826      	bhi.n	8007e86 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8007e38:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007e3c:	d02b      	beq.n	8007e96 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8007e3e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007e42:	d820      	bhi.n	8007e86 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8007e44:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007e48:	d012      	beq.n	8007e70 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8007e4a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007e4e:	d81a      	bhi.n	8007e86 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d022      	beq.n	8007e9a <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8007e54:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007e58:	d115      	bne.n	8007e86 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007e5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007e5e:	3308      	adds	r3, #8
 8007e60:	2100      	movs	r1, #0
 8007e62:	4618      	mov	r0, r3
 8007e64:	f000 fdee 	bl	8008a44 <RCCEx_PLL2_Config>
 8007e68:	4603      	mov	r3, r0
 8007e6a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007e6e:	e015      	b.n	8007e9c <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007e70:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007e74:	3328      	adds	r3, #40	@ 0x28
 8007e76:	2102      	movs	r1, #2
 8007e78:	4618      	mov	r0, r3
 8007e7a:	f000 fe95 	bl	8008ba8 <RCCEx_PLL3_Config>
 8007e7e:	4603      	mov	r3, r0
 8007e80:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007e84:	e00a      	b.n	8007e9c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007e86:	2301      	movs	r3, #1
 8007e88:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007e8c:	e006      	b.n	8007e9c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8007e8e:	bf00      	nop
 8007e90:	e004      	b.n	8007e9c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8007e92:	bf00      	nop
 8007e94:	e002      	b.n	8007e9c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8007e96:	bf00      	nop
 8007e98:	e000      	b.n	8007e9c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8007e9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e9c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d10b      	bne.n	8007ebc <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007ea4:	4ba1      	ldr	r3, [pc, #644]	@ (800812c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007ea6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ea8:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8007eac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007eb0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007eb4:	4a9d      	ldr	r2, [pc, #628]	@ (800812c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007eb6:	430b      	orrs	r3, r1
 8007eb8:	6593      	str	r3, [r2, #88]	@ 0x58
 8007eba:	e003      	b.n	8007ec4 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ebc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007ec0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007ec4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ecc:	f002 0308 	and.w	r3, r2, #8
 8007ed0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007eda:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8007ede:	460b      	mov	r3, r1
 8007ee0:	4313      	orrs	r3, r2
 8007ee2:	d01e      	beq.n	8007f22 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8007ee4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007ee8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007eec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007ef0:	d10c      	bne.n	8007f0c <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007ef2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007ef6:	3328      	adds	r3, #40	@ 0x28
 8007ef8:	2102      	movs	r1, #2
 8007efa:	4618      	mov	r0, r3
 8007efc:	f000 fe54 	bl	8008ba8 <RCCEx_PLL3_Config>
 8007f00:	4603      	mov	r3, r0
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d002      	beq.n	8007f0c <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 8007f06:	2301      	movs	r3, #1
 8007f08:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007f0c:	4b87      	ldr	r3, [pc, #540]	@ (800812c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007f0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f10:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007f14:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007f18:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007f1c:	4a83      	ldr	r2, [pc, #524]	@ (800812c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007f1e:	430b      	orrs	r3, r1
 8007f20:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007f22:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f2a:	f002 0310 	and.w	r3, r2, #16
 8007f2e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007f32:	2300      	movs	r3, #0
 8007f34:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007f38:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8007f3c:	460b      	mov	r3, r1
 8007f3e:	4313      	orrs	r3, r2
 8007f40:	d01e      	beq.n	8007f80 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8007f42:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007f46:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007f4a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007f4e:	d10c      	bne.n	8007f6a <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007f50:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007f54:	3328      	adds	r3, #40	@ 0x28
 8007f56:	2102      	movs	r1, #2
 8007f58:	4618      	mov	r0, r3
 8007f5a:	f000 fe25 	bl	8008ba8 <RCCEx_PLL3_Config>
 8007f5e:	4603      	mov	r3, r0
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d002      	beq.n	8007f6a <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8007f64:	2301      	movs	r3, #1
 8007f66:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007f6a:	4b70      	ldr	r3, [pc, #448]	@ (800812c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007f6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f6e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007f72:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007f76:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007f7a:	4a6c      	ldr	r2, [pc, #432]	@ (800812c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007f7c:	430b      	orrs	r3, r1
 8007f7e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007f80:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f88:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8007f8c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007f90:	2300      	movs	r3, #0
 8007f92:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007f96:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8007f9a:	460b      	mov	r3, r1
 8007f9c:	4313      	orrs	r3, r2
 8007f9e:	d03e      	beq.n	800801e <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8007fa0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007fa4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007fa8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007fac:	d022      	beq.n	8007ff4 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 8007fae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007fb2:	d81b      	bhi.n	8007fec <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d003      	beq.n	8007fc0 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8007fb8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007fbc:	d00b      	beq.n	8007fd6 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8007fbe:	e015      	b.n	8007fec <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007fc0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007fc4:	3308      	adds	r3, #8
 8007fc6:	2100      	movs	r1, #0
 8007fc8:	4618      	mov	r0, r3
 8007fca:	f000 fd3b 	bl	8008a44 <RCCEx_PLL2_Config>
 8007fce:	4603      	mov	r3, r0
 8007fd0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007fd4:	e00f      	b.n	8007ff6 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007fd6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007fda:	3328      	adds	r3, #40	@ 0x28
 8007fdc:	2102      	movs	r1, #2
 8007fde:	4618      	mov	r0, r3
 8007fe0:	f000 fde2 	bl	8008ba8 <RCCEx_PLL3_Config>
 8007fe4:	4603      	mov	r3, r0
 8007fe6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007fea:	e004      	b.n	8007ff6 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007fec:	2301      	movs	r3, #1
 8007fee:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007ff2:	e000      	b.n	8007ff6 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8007ff4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ff6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d10b      	bne.n	8008016 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007ffe:	4b4b      	ldr	r3, [pc, #300]	@ (800812c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008000:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008002:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8008006:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800800a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800800e:	4a47      	ldr	r2, [pc, #284]	@ (800812c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008010:	430b      	orrs	r3, r1
 8008012:	6593      	str	r3, [r2, #88]	@ 0x58
 8008014:	e003      	b.n	800801e <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008016:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800801a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800801e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008026:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800802a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800802c:	2300      	movs	r3, #0
 800802e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008030:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8008034:	460b      	mov	r3, r1
 8008036:	4313      	orrs	r3, r2
 8008038:	d03b      	beq.n	80080b2 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800803a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800803e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008042:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008046:	d01f      	beq.n	8008088 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8008048:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800804c:	d818      	bhi.n	8008080 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800804e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008052:	d003      	beq.n	800805c <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8008054:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008058:	d007      	beq.n	800806a <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 800805a:	e011      	b.n	8008080 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800805c:	4b33      	ldr	r3, [pc, #204]	@ (800812c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800805e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008060:	4a32      	ldr	r2, [pc, #200]	@ (800812c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008062:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008066:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8008068:	e00f      	b.n	800808a <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800806a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800806e:	3328      	adds	r3, #40	@ 0x28
 8008070:	2101      	movs	r1, #1
 8008072:	4618      	mov	r0, r3
 8008074:	f000 fd98 	bl	8008ba8 <RCCEx_PLL3_Config>
 8008078:	4603      	mov	r3, r0
 800807a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 800807e:	e004      	b.n	800808a <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008080:	2301      	movs	r3, #1
 8008082:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008086:	e000      	b.n	800808a <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8008088:	bf00      	nop
    }

    if (ret == HAL_OK)
 800808a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800808e:	2b00      	cmp	r3, #0
 8008090:	d10b      	bne.n	80080aa <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008092:	4b26      	ldr	r3, [pc, #152]	@ (800812c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008094:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008096:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800809a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800809e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80080a2:	4a22      	ldr	r2, [pc, #136]	@ (800812c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80080a4:	430b      	orrs	r3, r1
 80080a6:	6553      	str	r3, [r2, #84]	@ 0x54
 80080a8:	e003      	b.n	80080b2 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080aa:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80080ae:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80080b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80080b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080ba:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80080be:	673b      	str	r3, [r7, #112]	@ 0x70
 80080c0:	2300      	movs	r3, #0
 80080c2:	677b      	str	r3, [r7, #116]	@ 0x74
 80080c4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80080c8:	460b      	mov	r3, r1
 80080ca:	4313      	orrs	r3, r2
 80080cc:	d034      	beq.n	8008138 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80080ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80080d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d003      	beq.n	80080e0 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 80080d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80080dc:	d007      	beq.n	80080ee <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 80080de:	e011      	b.n	8008104 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80080e0:	4b12      	ldr	r3, [pc, #72]	@ (800812c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80080e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080e4:	4a11      	ldr	r2, [pc, #68]	@ (800812c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80080e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80080ea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80080ec:	e00e      	b.n	800810c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80080ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80080f2:	3308      	adds	r3, #8
 80080f4:	2102      	movs	r1, #2
 80080f6:	4618      	mov	r0, r3
 80080f8:	f000 fca4 	bl	8008a44 <RCCEx_PLL2_Config>
 80080fc:	4603      	mov	r3, r0
 80080fe:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008102:	e003      	b.n	800810c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8008104:	2301      	movs	r3, #1
 8008106:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800810a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800810c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008110:	2b00      	cmp	r3, #0
 8008112:	d10d      	bne.n	8008130 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008114:	4b05      	ldr	r3, [pc, #20]	@ (800812c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008116:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008118:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800811c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008120:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008122:	4a02      	ldr	r2, [pc, #8]	@ (800812c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008124:	430b      	orrs	r3, r1
 8008126:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008128:	e006      	b.n	8008138 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 800812a:	bf00      	nop
 800812c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008130:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008134:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008138:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800813c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008140:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8008144:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008146:	2300      	movs	r3, #0
 8008148:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800814a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800814e:	460b      	mov	r3, r1
 8008150:	4313      	orrs	r3, r2
 8008152:	d00c      	beq.n	800816e <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008154:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008158:	3328      	adds	r3, #40	@ 0x28
 800815a:	2102      	movs	r1, #2
 800815c:	4618      	mov	r0, r3
 800815e:	f000 fd23 	bl	8008ba8 <RCCEx_PLL3_Config>
 8008162:	4603      	mov	r3, r0
 8008164:	2b00      	cmp	r3, #0
 8008166:	d002      	beq.n	800816e <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8008168:	2301      	movs	r3, #1
 800816a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800816e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008176:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800817a:	663b      	str	r3, [r7, #96]	@ 0x60
 800817c:	2300      	movs	r3, #0
 800817e:	667b      	str	r3, [r7, #100]	@ 0x64
 8008180:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8008184:	460b      	mov	r3, r1
 8008186:	4313      	orrs	r3, r2
 8008188:	d038      	beq.n	80081fc <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 800818a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800818e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008192:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008196:	d018      	beq.n	80081ca <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8008198:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800819c:	d811      	bhi.n	80081c2 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800819e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80081a2:	d014      	beq.n	80081ce <HAL_RCCEx_PeriphCLKConfig+0x1082>
 80081a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80081a8:	d80b      	bhi.n	80081c2 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d011      	beq.n	80081d2 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 80081ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80081b2:	d106      	bne.n	80081c2 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80081b4:	4bc3      	ldr	r3, [pc, #780]	@ (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80081b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081b8:	4ac2      	ldr	r2, [pc, #776]	@ (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80081ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80081be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80081c0:	e008      	b.n	80081d4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80081c2:	2301      	movs	r3, #1
 80081c4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80081c8:	e004      	b.n	80081d4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80081ca:	bf00      	nop
 80081cc:	e002      	b.n	80081d4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80081ce:	bf00      	nop
 80081d0:	e000      	b.n	80081d4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80081d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80081d4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d10b      	bne.n	80081f4 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80081dc:	4bb9      	ldr	r3, [pc, #740]	@ (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80081de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80081e0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80081e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80081e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80081ec:	4ab5      	ldr	r2, [pc, #724]	@ (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80081ee:	430b      	orrs	r3, r1
 80081f0:	6553      	str	r3, [r2, #84]	@ 0x54
 80081f2:	e003      	b.n	80081fc <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081f4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80081f8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80081fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008204:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8008208:	65bb      	str	r3, [r7, #88]	@ 0x58
 800820a:	2300      	movs	r3, #0
 800820c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800820e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8008212:	460b      	mov	r3, r1
 8008214:	4313      	orrs	r3, r2
 8008216:	d009      	beq.n	800822c <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008218:	4baa      	ldr	r3, [pc, #680]	@ (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800821a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800821c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008220:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008224:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008226:	4aa7      	ldr	r2, [pc, #668]	@ (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008228:	430b      	orrs	r3, r1
 800822a:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800822c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008234:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8008238:	653b      	str	r3, [r7, #80]	@ 0x50
 800823a:	2300      	movs	r3, #0
 800823c:	657b      	str	r3, [r7, #84]	@ 0x54
 800823e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8008242:	460b      	mov	r3, r1
 8008244:	4313      	orrs	r3, r2
 8008246:	d009      	beq.n	800825c <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008248:	4b9e      	ldr	r3, [pc, #632]	@ (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800824a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800824c:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8008250:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008254:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008256:	4a9b      	ldr	r2, [pc, #620]	@ (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008258:	430b      	orrs	r3, r1
 800825a:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 800825c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008264:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8008268:	64bb      	str	r3, [r7, #72]	@ 0x48
 800826a:	2300      	movs	r3, #0
 800826c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800826e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8008272:	460b      	mov	r3, r1
 8008274:	4313      	orrs	r3, r2
 8008276:	d009      	beq.n	800828c <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8008278:	4b92      	ldr	r3, [pc, #584]	@ (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800827a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800827c:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 8008280:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008284:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008286:	4a8f      	ldr	r2, [pc, #572]	@ (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008288:	430b      	orrs	r3, r1
 800828a:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800828c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008294:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8008298:	643b      	str	r3, [r7, #64]	@ 0x40
 800829a:	2300      	movs	r3, #0
 800829c:	647b      	str	r3, [r7, #68]	@ 0x44
 800829e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80082a2:	460b      	mov	r3, r1
 80082a4:	4313      	orrs	r3, r2
 80082a6:	d00e      	beq.n	80082c6 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80082a8:	4b86      	ldr	r3, [pc, #536]	@ (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80082aa:	691b      	ldr	r3, [r3, #16]
 80082ac:	4a85      	ldr	r2, [pc, #532]	@ (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80082ae:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80082b2:	6113      	str	r3, [r2, #16]
 80082b4:	4b83      	ldr	r3, [pc, #524]	@ (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80082b6:	6919      	ldr	r1, [r3, #16]
 80082b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80082bc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80082c0:	4a80      	ldr	r2, [pc, #512]	@ (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80082c2:	430b      	orrs	r3, r1
 80082c4:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80082c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80082ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082ce:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80082d2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80082d4:	2300      	movs	r3, #0
 80082d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80082d8:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80082dc:	460b      	mov	r3, r1
 80082de:	4313      	orrs	r3, r2
 80082e0:	d009      	beq.n	80082f6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80082e2:	4b78      	ldr	r3, [pc, #480]	@ (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80082e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80082e6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80082ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80082ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80082f0:	4a74      	ldr	r2, [pc, #464]	@ (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80082f2:	430b      	orrs	r3, r1
 80082f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80082f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80082fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082fe:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8008302:	633b      	str	r3, [r7, #48]	@ 0x30
 8008304:	2300      	movs	r3, #0
 8008306:	637b      	str	r3, [r7, #52]	@ 0x34
 8008308:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800830c:	460b      	mov	r3, r1
 800830e:	4313      	orrs	r3, r2
 8008310:	d00a      	beq.n	8008328 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008312:	4b6c      	ldr	r3, [pc, #432]	@ (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008314:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008316:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800831a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800831e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008322:	4a68      	ldr	r2, [pc, #416]	@ (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008324:	430b      	orrs	r3, r1
 8008326:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8008328:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800832c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008330:	2100      	movs	r1, #0
 8008332:	62b9      	str	r1, [r7, #40]	@ 0x28
 8008334:	f003 0301 	and.w	r3, r3, #1
 8008338:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800833a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800833e:	460b      	mov	r3, r1
 8008340:	4313      	orrs	r3, r2
 8008342:	d011      	beq.n	8008368 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008344:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008348:	3308      	adds	r3, #8
 800834a:	2100      	movs	r1, #0
 800834c:	4618      	mov	r0, r3
 800834e:	f000 fb79 	bl	8008a44 <RCCEx_PLL2_Config>
 8008352:	4603      	mov	r3, r0
 8008354:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8008358:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800835c:	2b00      	cmp	r3, #0
 800835e:	d003      	beq.n	8008368 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008360:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008364:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8008368:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800836c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008370:	2100      	movs	r1, #0
 8008372:	6239      	str	r1, [r7, #32]
 8008374:	f003 0302 	and.w	r3, r3, #2
 8008378:	627b      	str	r3, [r7, #36]	@ 0x24
 800837a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800837e:	460b      	mov	r3, r1
 8008380:	4313      	orrs	r3, r2
 8008382:	d011      	beq.n	80083a8 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008384:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008388:	3308      	adds	r3, #8
 800838a:	2101      	movs	r1, #1
 800838c:	4618      	mov	r0, r3
 800838e:	f000 fb59 	bl	8008a44 <RCCEx_PLL2_Config>
 8008392:	4603      	mov	r3, r0
 8008394:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8008398:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800839c:	2b00      	cmp	r3, #0
 800839e:	d003      	beq.n	80083a8 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083a0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80083a4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80083a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80083ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083b0:	2100      	movs	r1, #0
 80083b2:	61b9      	str	r1, [r7, #24]
 80083b4:	f003 0304 	and.w	r3, r3, #4
 80083b8:	61fb      	str	r3, [r7, #28]
 80083ba:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80083be:	460b      	mov	r3, r1
 80083c0:	4313      	orrs	r3, r2
 80083c2:	d011      	beq.n	80083e8 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80083c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80083c8:	3308      	adds	r3, #8
 80083ca:	2102      	movs	r1, #2
 80083cc:	4618      	mov	r0, r3
 80083ce:	f000 fb39 	bl	8008a44 <RCCEx_PLL2_Config>
 80083d2:	4603      	mov	r3, r0
 80083d4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80083d8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d003      	beq.n	80083e8 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083e0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80083e4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80083e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80083ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083f0:	2100      	movs	r1, #0
 80083f2:	6139      	str	r1, [r7, #16]
 80083f4:	f003 0308 	and.w	r3, r3, #8
 80083f8:	617b      	str	r3, [r7, #20]
 80083fa:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80083fe:	460b      	mov	r3, r1
 8008400:	4313      	orrs	r3, r2
 8008402:	d011      	beq.n	8008428 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008404:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008408:	3328      	adds	r3, #40	@ 0x28
 800840a:	2100      	movs	r1, #0
 800840c:	4618      	mov	r0, r3
 800840e:	f000 fbcb 	bl	8008ba8 <RCCEx_PLL3_Config>
 8008412:	4603      	mov	r3, r0
 8008414:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 8008418:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800841c:	2b00      	cmp	r3, #0
 800841e:	d003      	beq.n	8008428 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008420:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008424:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8008428:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800842c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008430:	2100      	movs	r1, #0
 8008432:	60b9      	str	r1, [r7, #8]
 8008434:	f003 0310 	and.w	r3, r3, #16
 8008438:	60fb      	str	r3, [r7, #12]
 800843a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800843e:	460b      	mov	r3, r1
 8008440:	4313      	orrs	r3, r2
 8008442:	d011      	beq.n	8008468 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008444:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008448:	3328      	adds	r3, #40	@ 0x28
 800844a:	2101      	movs	r1, #1
 800844c:	4618      	mov	r0, r3
 800844e:	f000 fbab 	bl	8008ba8 <RCCEx_PLL3_Config>
 8008452:	4603      	mov	r3, r0
 8008454:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8008458:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800845c:	2b00      	cmp	r3, #0
 800845e:	d003      	beq.n	8008468 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008460:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008464:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8008468:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800846c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008470:	2100      	movs	r1, #0
 8008472:	6039      	str	r1, [r7, #0]
 8008474:	f003 0320 	and.w	r3, r3, #32
 8008478:	607b      	str	r3, [r7, #4]
 800847a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800847e:	460b      	mov	r3, r1
 8008480:	4313      	orrs	r3, r2
 8008482:	d011      	beq.n	80084a8 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008484:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008488:	3328      	adds	r3, #40	@ 0x28
 800848a:	2102      	movs	r1, #2
 800848c:	4618      	mov	r0, r3
 800848e:	f000 fb8b 	bl	8008ba8 <RCCEx_PLL3_Config>
 8008492:	4603      	mov	r3, r0
 8008494:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8008498:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800849c:	2b00      	cmp	r3, #0
 800849e:	d003      	beq.n	80084a8 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084a0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80084a4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 80084a8:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d101      	bne.n	80084b4 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 80084b0:	2300      	movs	r3, #0
 80084b2:	e000      	b.n	80084b6 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 80084b4:	2301      	movs	r3, #1
}
 80084b6:	4618      	mov	r0, r3
 80084b8:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 80084bc:	46bd      	mov	sp, r7
 80084be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80084c2:	bf00      	nop
 80084c4:	58024400 	.word	0x58024400

080084c8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 80084cc:	f7fe fda0 	bl	8007010 <HAL_RCC_GetHCLKFreq>
 80084d0:	4602      	mov	r2, r0
 80084d2:	4b06      	ldr	r3, [pc, #24]	@ (80084ec <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80084d4:	6a1b      	ldr	r3, [r3, #32]
 80084d6:	091b      	lsrs	r3, r3, #4
 80084d8:	f003 0307 	and.w	r3, r3, #7
 80084dc:	4904      	ldr	r1, [pc, #16]	@ (80084f0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80084de:	5ccb      	ldrb	r3, [r1, r3]
 80084e0:	f003 031f 	and.w	r3, r3, #31
 80084e4:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80084e8:	4618      	mov	r0, r3
 80084ea:	bd80      	pop	{r7, pc}
 80084ec:	58024400 	.word	0x58024400
 80084f0:	0800b434 	.word	0x0800b434

080084f4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80084f4:	b480      	push	{r7}
 80084f6:	b089      	sub	sp, #36	@ 0x24
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80084fc:	4ba1      	ldr	r3, [pc, #644]	@ (8008784 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80084fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008500:	f003 0303 	and.w	r3, r3, #3
 8008504:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8008506:	4b9f      	ldr	r3, [pc, #636]	@ (8008784 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008508:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800850a:	0b1b      	lsrs	r3, r3, #12
 800850c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008510:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008512:	4b9c      	ldr	r3, [pc, #624]	@ (8008784 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008514:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008516:	091b      	lsrs	r3, r3, #4
 8008518:	f003 0301 	and.w	r3, r3, #1
 800851c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800851e:	4b99      	ldr	r3, [pc, #612]	@ (8008784 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008520:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008522:	08db      	lsrs	r3, r3, #3
 8008524:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008528:	693a      	ldr	r2, [r7, #16]
 800852a:	fb02 f303 	mul.w	r3, r2, r3
 800852e:	ee07 3a90 	vmov	s15, r3
 8008532:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008536:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800853a:	697b      	ldr	r3, [r7, #20]
 800853c:	2b00      	cmp	r3, #0
 800853e:	f000 8111 	beq.w	8008764 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008542:	69bb      	ldr	r3, [r7, #24]
 8008544:	2b02      	cmp	r3, #2
 8008546:	f000 8083 	beq.w	8008650 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800854a:	69bb      	ldr	r3, [r7, #24]
 800854c:	2b02      	cmp	r3, #2
 800854e:	f200 80a1 	bhi.w	8008694 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008552:	69bb      	ldr	r3, [r7, #24]
 8008554:	2b00      	cmp	r3, #0
 8008556:	d003      	beq.n	8008560 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008558:	69bb      	ldr	r3, [r7, #24]
 800855a:	2b01      	cmp	r3, #1
 800855c:	d056      	beq.n	800860c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800855e:	e099      	b.n	8008694 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008560:	4b88      	ldr	r3, [pc, #544]	@ (8008784 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	f003 0320 	and.w	r3, r3, #32
 8008568:	2b00      	cmp	r3, #0
 800856a:	d02d      	beq.n	80085c8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800856c:	4b85      	ldr	r3, [pc, #532]	@ (8008784 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	08db      	lsrs	r3, r3, #3
 8008572:	f003 0303 	and.w	r3, r3, #3
 8008576:	4a84      	ldr	r2, [pc, #528]	@ (8008788 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008578:	fa22 f303 	lsr.w	r3, r2, r3
 800857c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800857e:	68bb      	ldr	r3, [r7, #8]
 8008580:	ee07 3a90 	vmov	s15, r3
 8008584:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008588:	697b      	ldr	r3, [r7, #20]
 800858a:	ee07 3a90 	vmov	s15, r3
 800858e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008592:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008596:	4b7b      	ldr	r3, [pc, #492]	@ (8008784 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008598:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800859a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800859e:	ee07 3a90 	vmov	s15, r3
 80085a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80085aa:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800878c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80085ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80085b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80085ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085c2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80085c6:	e087      	b.n	80086d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80085c8:	697b      	ldr	r3, [r7, #20]
 80085ca:	ee07 3a90 	vmov	s15, r3
 80085ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085d2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008790 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80085d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80085da:	4b6a      	ldr	r3, [pc, #424]	@ (8008784 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80085dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085e2:	ee07 3a90 	vmov	s15, r3
 80085e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80085ee:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800878c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80085f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80085f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80085fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008602:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008606:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800860a:	e065      	b.n	80086d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800860c:	697b      	ldr	r3, [r7, #20]
 800860e:	ee07 3a90 	vmov	s15, r3
 8008612:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008616:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008794 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800861a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800861e:	4b59      	ldr	r3, [pc, #356]	@ (8008784 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008620:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008622:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008626:	ee07 3a90 	vmov	s15, r3
 800862a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800862e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008632:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800878c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008636:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800863a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800863e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008642:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008646:	ee67 7a27 	vmul.f32	s15, s14, s15
 800864a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800864e:	e043      	b.n	80086d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008650:	697b      	ldr	r3, [r7, #20]
 8008652:	ee07 3a90 	vmov	s15, r3
 8008656:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800865a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008798 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800865e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008662:	4b48      	ldr	r3, [pc, #288]	@ (8008784 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008664:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008666:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800866a:	ee07 3a90 	vmov	s15, r3
 800866e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008672:	ed97 6a03 	vldr	s12, [r7, #12]
 8008676:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800878c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800867a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800867e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008682:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008686:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800868a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800868e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008692:	e021      	b.n	80086d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008694:	697b      	ldr	r3, [r7, #20]
 8008696:	ee07 3a90 	vmov	s15, r3
 800869a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800869e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008794 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80086a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80086a6:	4b37      	ldr	r3, [pc, #220]	@ (8008784 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80086a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086ae:	ee07 3a90 	vmov	s15, r3
 80086b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80086ba:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800878c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80086be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80086c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80086c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80086ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80086ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80086d6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80086d8:	4b2a      	ldr	r3, [pc, #168]	@ (8008784 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80086da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086dc:	0a5b      	lsrs	r3, r3, #9
 80086de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80086e2:	ee07 3a90 	vmov	s15, r3
 80086e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086ea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80086ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 80086f2:	edd7 6a07 	vldr	s13, [r7, #28]
 80086f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80086fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80086fe:	ee17 2a90 	vmov	r2, s15
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8008706:	4b1f      	ldr	r3, [pc, #124]	@ (8008784 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008708:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800870a:	0c1b      	lsrs	r3, r3, #16
 800870c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008710:	ee07 3a90 	vmov	s15, r3
 8008714:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008718:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800871c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008720:	edd7 6a07 	vldr	s13, [r7, #28]
 8008724:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008728:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800872c:	ee17 2a90 	vmov	r2, s15
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8008734:	4b13      	ldr	r3, [pc, #76]	@ (8008784 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008736:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008738:	0e1b      	lsrs	r3, r3, #24
 800873a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800873e:	ee07 3a90 	vmov	s15, r3
 8008742:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008746:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800874a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800874e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008752:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008756:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800875a:	ee17 2a90 	vmov	r2, s15
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008762:	e008      	b.n	8008776 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	2200      	movs	r2, #0
 8008768:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	2200      	movs	r2, #0
 800876e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	2200      	movs	r2, #0
 8008774:	609a      	str	r2, [r3, #8]
}
 8008776:	bf00      	nop
 8008778:	3724      	adds	r7, #36	@ 0x24
 800877a:	46bd      	mov	sp, r7
 800877c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008780:	4770      	bx	lr
 8008782:	bf00      	nop
 8008784:	58024400 	.word	0x58024400
 8008788:	03d09000 	.word	0x03d09000
 800878c:	46000000 	.word	0x46000000
 8008790:	4c742400 	.word	0x4c742400
 8008794:	4a742400 	.word	0x4a742400
 8008798:	4bb71b00 	.word	0x4bb71b00

0800879c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800879c:	b480      	push	{r7}
 800879e:	b089      	sub	sp, #36	@ 0x24
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80087a4:	4ba1      	ldr	r3, [pc, #644]	@ (8008a2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80087a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087a8:	f003 0303 	and.w	r3, r3, #3
 80087ac:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80087ae:	4b9f      	ldr	r3, [pc, #636]	@ (8008a2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80087b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087b2:	0d1b      	lsrs	r3, r3, #20
 80087b4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80087b8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80087ba:	4b9c      	ldr	r3, [pc, #624]	@ (8008a2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80087bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087be:	0a1b      	lsrs	r3, r3, #8
 80087c0:	f003 0301 	and.w	r3, r3, #1
 80087c4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80087c6:	4b99      	ldr	r3, [pc, #612]	@ (8008a2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80087c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80087ca:	08db      	lsrs	r3, r3, #3
 80087cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80087d0:	693a      	ldr	r2, [r7, #16]
 80087d2:	fb02 f303 	mul.w	r3, r2, r3
 80087d6:	ee07 3a90 	vmov	s15, r3
 80087da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087de:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80087e2:	697b      	ldr	r3, [r7, #20]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	f000 8111 	beq.w	8008a0c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80087ea:	69bb      	ldr	r3, [r7, #24]
 80087ec:	2b02      	cmp	r3, #2
 80087ee:	f000 8083 	beq.w	80088f8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80087f2:	69bb      	ldr	r3, [r7, #24]
 80087f4:	2b02      	cmp	r3, #2
 80087f6:	f200 80a1 	bhi.w	800893c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80087fa:	69bb      	ldr	r3, [r7, #24]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d003      	beq.n	8008808 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008800:	69bb      	ldr	r3, [r7, #24]
 8008802:	2b01      	cmp	r3, #1
 8008804:	d056      	beq.n	80088b4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008806:	e099      	b.n	800893c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008808:	4b88      	ldr	r3, [pc, #544]	@ (8008a2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	f003 0320 	and.w	r3, r3, #32
 8008810:	2b00      	cmp	r3, #0
 8008812:	d02d      	beq.n	8008870 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008814:	4b85      	ldr	r3, [pc, #532]	@ (8008a2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	08db      	lsrs	r3, r3, #3
 800881a:	f003 0303 	and.w	r3, r3, #3
 800881e:	4a84      	ldr	r2, [pc, #528]	@ (8008a30 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008820:	fa22 f303 	lsr.w	r3, r2, r3
 8008824:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008826:	68bb      	ldr	r3, [r7, #8]
 8008828:	ee07 3a90 	vmov	s15, r3
 800882c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008830:	697b      	ldr	r3, [r7, #20]
 8008832:	ee07 3a90 	vmov	s15, r3
 8008836:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800883a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800883e:	4b7b      	ldr	r3, [pc, #492]	@ (8008a2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008842:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008846:	ee07 3a90 	vmov	s15, r3
 800884a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800884e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008852:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008a34 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008856:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800885a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800885e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008862:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008866:	ee67 7a27 	vmul.f32	s15, s14, s15
 800886a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800886e:	e087      	b.n	8008980 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008870:	697b      	ldr	r3, [r7, #20]
 8008872:	ee07 3a90 	vmov	s15, r3
 8008876:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800887a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008a38 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800887e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008882:	4b6a      	ldr	r3, [pc, #424]	@ (8008a2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008886:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800888a:	ee07 3a90 	vmov	s15, r3
 800888e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008892:	ed97 6a03 	vldr	s12, [r7, #12]
 8008896:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008a34 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800889a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800889e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80088a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80088a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80088b2:	e065      	b.n	8008980 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80088b4:	697b      	ldr	r3, [r7, #20]
 80088b6:	ee07 3a90 	vmov	s15, r3
 80088ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088be:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008a3c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80088c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088c6:	4b59      	ldr	r3, [pc, #356]	@ (8008a2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80088c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088ce:	ee07 3a90 	vmov	s15, r3
 80088d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80088da:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008a34 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80088de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80088e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80088e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80088ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80088f6:	e043      	b.n	8008980 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80088f8:	697b      	ldr	r3, [r7, #20]
 80088fa:	ee07 3a90 	vmov	s15, r3
 80088fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008902:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008a40 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008906:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800890a:	4b48      	ldr	r3, [pc, #288]	@ (8008a2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800890c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800890e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008912:	ee07 3a90 	vmov	s15, r3
 8008916:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800891a:	ed97 6a03 	vldr	s12, [r7, #12]
 800891e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008a34 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008922:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008926:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800892a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800892e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008932:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008936:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800893a:	e021      	b.n	8008980 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800893c:	697b      	ldr	r3, [r7, #20]
 800893e:	ee07 3a90 	vmov	s15, r3
 8008942:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008946:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008a3c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800894a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800894e:	4b37      	ldr	r3, [pc, #220]	@ (8008a2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008952:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008956:	ee07 3a90 	vmov	s15, r3
 800895a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800895e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008962:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008a34 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008966:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800896a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800896e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008972:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008976:	ee67 7a27 	vmul.f32	s15, s14, s15
 800897a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800897e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8008980:	4b2a      	ldr	r3, [pc, #168]	@ (8008a2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008982:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008984:	0a5b      	lsrs	r3, r3, #9
 8008986:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800898a:	ee07 3a90 	vmov	s15, r3
 800898e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008992:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008996:	ee37 7a87 	vadd.f32	s14, s15, s14
 800899a:	edd7 6a07 	vldr	s13, [r7, #28]
 800899e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80089a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80089a6:	ee17 2a90 	vmov	r2, s15
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80089ae:	4b1f      	ldr	r3, [pc, #124]	@ (8008a2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80089b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089b2:	0c1b      	lsrs	r3, r3, #16
 80089b4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80089b8:	ee07 3a90 	vmov	s15, r3
 80089bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089c0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80089c4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80089c8:	edd7 6a07 	vldr	s13, [r7, #28]
 80089cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80089d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80089d4:	ee17 2a90 	vmov	r2, s15
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80089dc:	4b13      	ldr	r3, [pc, #76]	@ (8008a2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80089de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089e0:	0e1b      	lsrs	r3, r3, #24
 80089e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80089e6:	ee07 3a90 	vmov	s15, r3
 80089ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089ee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80089f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80089f6:	edd7 6a07 	vldr	s13, [r7, #28]
 80089fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80089fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008a02:	ee17 2a90 	vmov	r2, s15
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008a0a:	e008      	b.n	8008a1e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2200      	movs	r2, #0
 8008a10:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	2200      	movs	r2, #0
 8008a16:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	609a      	str	r2, [r3, #8]
}
 8008a1e:	bf00      	nop
 8008a20:	3724      	adds	r7, #36	@ 0x24
 8008a22:	46bd      	mov	sp, r7
 8008a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a28:	4770      	bx	lr
 8008a2a:	bf00      	nop
 8008a2c:	58024400 	.word	0x58024400
 8008a30:	03d09000 	.word	0x03d09000
 8008a34:	46000000 	.word	0x46000000
 8008a38:	4c742400 	.word	0x4c742400
 8008a3c:	4a742400 	.word	0x4a742400
 8008a40:	4bb71b00 	.word	0x4bb71b00

08008a44 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b084      	sub	sp, #16
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
 8008a4c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008a4e:	2300      	movs	r3, #0
 8008a50:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008a52:	4b53      	ldr	r3, [pc, #332]	@ (8008ba0 <RCCEx_PLL2_Config+0x15c>)
 8008a54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a56:	f003 0303 	and.w	r3, r3, #3
 8008a5a:	2b03      	cmp	r3, #3
 8008a5c:	d101      	bne.n	8008a62 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008a5e:	2301      	movs	r3, #1
 8008a60:	e099      	b.n	8008b96 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008a62:	4b4f      	ldr	r3, [pc, #316]	@ (8008ba0 <RCCEx_PLL2_Config+0x15c>)
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	4a4e      	ldr	r2, [pc, #312]	@ (8008ba0 <RCCEx_PLL2_Config+0x15c>)
 8008a68:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008a6c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008a6e:	f7f8 fad9 	bl	8001024 <HAL_GetTick>
 8008a72:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008a74:	e008      	b.n	8008a88 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008a76:	f7f8 fad5 	bl	8001024 <HAL_GetTick>
 8008a7a:	4602      	mov	r2, r0
 8008a7c:	68bb      	ldr	r3, [r7, #8]
 8008a7e:	1ad3      	subs	r3, r2, r3
 8008a80:	2b02      	cmp	r3, #2
 8008a82:	d901      	bls.n	8008a88 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008a84:	2303      	movs	r3, #3
 8008a86:	e086      	b.n	8008b96 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008a88:	4b45      	ldr	r3, [pc, #276]	@ (8008ba0 <RCCEx_PLL2_Config+0x15c>)
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d1f0      	bne.n	8008a76 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008a94:	4b42      	ldr	r3, [pc, #264]	@ (8008ba0 <RCCEx_PLL2_Config+0x15c>)
 8008a96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a98:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	031b      	lsls	r3, r3, #12
 8008aa2:	493f      	ldr	r1, [pc, #252]	@ (8008ba0 <RCCEx_PLL2_Config+0x15c>)
 8008aa4:	4313      	orrs	r3, r2
 8008aa6:	628b      	str	r3, [r1, #40]	@ 0x28
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	685b      	ldr	r3, [r3, #4]
 8008aac:	3b01      	subs	r3, #1
 8008aae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	689b      	ldr	r3, [r3, #8]
 8008ab6:	3b01      	subs	r3, #1
 8008ab8:	025b      	lsls	r3, r3, #9
 8008aba:	b29b      	uxth	r3, r3
 8008abc:	431a      	orrs	r2, r3
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	68db      	ldr	r3, [r3, #12]
 8008ac2:	3b01      	subs	r3, #1
 8008ac4:	041b      	lsls	r3, r3, #16
 8008ac6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008aca:	431a      	orrs	r2, r3
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	691b      	ldr	r3, [r3, #16]
 8008ad0:	3b01      	subs	r3, #1
 8008ad2:	061b      	lsls	r3, r3, #24
 8008ad4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008ad8:	4931      	ldr	r1, [pc, #196]	@ (8008ba0 <RCCEx_PLL2_Config+0x15c>)
 8008ada:	4313      	orrs	r3, r2
 8008adc:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008ade:	4b30      	ldr	r3, [pc, #192]	@ (8008ba0 <RCCEx_PLL2_Config+0x15c>)
 8008ae0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ae2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	695b      	ldr	r3, [r3, #20]
 8008aea:	492d      	ldr	r1, [pc, #180]	@ (8008ba0 <RCCEx_PLL2_Config+0x15c>)
 8008aec:	4313      	orrs	r3, r2
 8008aee:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008af0:	4b2b      	ldr	r3, [pc, #172]	@ (8008ba0 <RCCEx_PLL2_Config+0x15c>)
 8008af2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008af4:	f023 0220 	bic.w	r2, r3, #32
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	699b      	ldr	r3, [r3, #24]
 8008afc:	4928      	ldr	r1, [pc, #160]	@ (8008ba0 <RCCEx_PLL2_Config+0x15c>)
 8008afe:	4313      	orrs	r3, r2
 8008b00:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008b02:	4b27      	ldr	r3, [pc, #156]	@ (8008ba0 <RCCEx_PLL2_Config+0x15c>)
 8008b04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b06:	4a26      	ldr	r2, [pc, #152]	@ (8008ba0 <RCCEx_PLL2_Config+0x15c>)
 8008b08:	f023 0310 	bic.w	r3, r3, #16
 8008b0c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008b0e:	4b24      	ldr	r3, [pc, #144]	@ (8008ba0 <RCCEx_PLL2_Config+0x15c>)
 8008b10:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008b12:	4b24      	ldr	r3, [pc, #144]	@ (8008ba4 <RCCEx_PLL2_Config+0x160>)
 8008b14:	4013      	ands	r3, r2
 8008b16:	687a      	ldr	r2, [r7, #4]
 8008b18:	69d2      	ldr	r2, [r2, #28]
 8008b1a:	00d2      	lsls	r2, r2, #3
 8008b1c:	4920      	ldr	r1, [pc, #128]	@ (8008ba0 <RCCEx_PLL2_Config+0x15c>)
 8008b1e:	4313      	orrs	r3, r2
 8008b20:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008b22:	4b1f      	ldr	r3, [pc, #124]	@ (8008ba0 <RCCEx_PLL2_Config+0x15c>)
 8008b24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b26:	4a1e      	ldr	r2, [pc, #120]	@ (8008ba0 <RCCEx_PLL2_Config+0x15c>)
 8008b28:	f043 0310 	orr.w	r3, r3, #16
 8008b2c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008b2e:	683b      	ldr	r3, [r7, #0]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d106      	bne.n	8008b42 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008b34:	4b1a      	ldr	r3, [pc, #104]	@ (8008ba0 <RCCEx_PLL2_Config+0x15c>)
 8008b36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b38:	4a19      	ldr	r2, [pc, #100]	@ (8008ba0 <RCCEx_PLL2_Config+0x15c>)
 8008b3a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008b3e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008b40:	e00f      	b.n	8008b62 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	2b01      	cmp	r3, #1
 8008b46:	d106      	bne.n	8008b56 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008b48:	4b15      	ldr	r3, [pc, #84]	@ (8008ba0 <RCCEx_PLL2_Config+0x15c>)
 8008b4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b4c:	4a14      	ldr	r2, [pc, #80]	@ (8008ba0 <RCCEx_PLL2_Config+0x15c>)
 8008b4e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008b52:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008b54:	e005      	b.n	8008b62 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008b56:	4b12      	ldr	r3, [pc, #72]	@ (8008ba0 <RCCEx_PLL2_Config+0x15c>)
 8008b58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b5a:	4a11      	ldr	r2, [pc, #68]	@ (8008ba0 <RCCEx_PLL2_Config+0x15c>)
 8008b5c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008b60:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008b62:	4b0f      	ldr	r3, [pc, #60]	@ (8008ba0 <RCCEx_PLL2_Config+0x15c>)
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	4a0e      	ldr	r2, [pc, #56]	@ (8008ba0 <RCCEx_PLL2_Config+0x15c>)
 8008b68:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008b6c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008b6e:	f7f8 fa59 	bl	8001024 <HAL_GetTick>
 8008b72:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008b74:	e008      	b.n	8008b88 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008b76:	f7f8 fa55 	bl	8001024 <HAL_GetTick>
 8008b7a:	4602      	mov	r2, r0
 8008b7c:	68bb      	ldr	r3, [r7, #8]
 8008b7e:	1ad3      	subs	r3, r2, r3
 8008b80:	2b02      	cmp	r3, #2
 8008b82:	d901      	bls.n	8008b88 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008b84:	2303      	movs	r3, #3
 8008b86:	e006      	b.n	8008b96 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008b88:	4b05      	ldr	r3, [pc, #20]	@ (8008ba0 <RCCEx_PLL2_Config+0x15c>)
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d0f0      	beq.n	8008b76 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008b94:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b96:	4618      	mov	r0, r3
 8008b98:	3710      	adds	r7, #16
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	bd80      	pop	{r7, pc}
 8008b9e:	bf00      	nop
 8008ba0:	58024400 	.word	0x58024400
 8008ba4:	ffff0007 	.word	0xffff0007

08008ba8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008ba8:	b580      	push	{r7, lr}
 8008baa:	b084      	sub	sp, #16
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
 8008bb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008bb6:	4b53      	ldr	r3, [pc, #332]	@ (8008d04 <RCCEx_PLL3_Config+0x15c>)
 8008bb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bba:	f003 0303 	and.w	r3, r3, #3
 8008bbe:	2b03      	cmp	r3, #3
 8008bc0:	d101      	bne.n	8008bc6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008bc2:	2301      	movs	r3, #1
 8008bc4:	e099      	b.n	8008cfa <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008bc6:	4b4f      	ldr	r3, [pc, #316]	@ (8008d04 <RCCEx_PLL3_Config+0x15c>)
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	4a4e      	ldr	r2, [pc, #312]	@ (8008d04 <RCCEx_PLL3_Config+0x15c>)
 8008bcc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008bd0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008bd2:	f7f8 fa27 	bl	8001024 <HAL_GetTick>
 8008bd6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008bd8:	e008      	b.n	8008bec <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008bda:	f7f8 fa23 	bl	8001024 <HAL_GetTick>
 8008bde:	4602      	mov	r2, r0
 8008be0:	68bb      	ldr	r3, [r7, #8]
 8008be2:	1ad3      	subs	r3, r2, r3
 8008be4:	2b02      	cmp	r3, #2
 8008be6:	d901      	bls.n	8008bec <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008be8:	2303      	movs	r3, #3
 8008bea:	e086      	b.n	8008cfa <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008bec:	4b45      	ldr	r3, [pc, #276]	@ (8008d04 <RCCEx_PLL3_Config+0x15c>)
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d1f0      	bne.n	8008bda <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008bf8:	4b42      	ldr	r3, [pc, #264]	@ (8008d04 <RCCEx_PLL3_Config+0x15c>)
 8008bfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bfc:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	051b      	lsls	r3, r3, #20
 8008c06:	493f      	ldr	r1, [pc, #252]	@ (8008d04 <RCCEx_PLL3_Config+0x15c>)
 8008c08:	4313      	orrs	r3, r2
 8008c0a:	628b      	str	r3, [r1, #40]	@ 0x28
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	685b      	ldr	r3, [r3, #4]
 8008c10:	3b01      	subs	r3, #1
 8008c12:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	689b      	ldr	r3, [r3, #8]
 8008c1a:	3b01      	subs	r3, #1
 8008c1c:	025b      	lsls	r3, r3, #9
 8008c1e:	b29b      	uxth	r3, r3
 8008c20:	431a      	orrs	r2, r3
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	68db      	ldr	r3, [r3, #12]
 8008c26:	3b01      	subs	r3, #1
 8008c28:	041b      	lsls	r3, r3, #16
 8008c2a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008c2e:	431a      	orrs	r2, r3
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	691b      	ldr	r3, [r3, #16]
 8008c34:	3b01      	subs	r3, #1
 8008c36:	061b      	lsls	r3, r3, #24
 8008c38:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008c3c:	4931      	ldr	r1, [pc, #196]	@ (8008d04 <RCCEx_PLL3_Config+0x15c>)
 8008c3e:	4313      	orrs	r3, r2
 8008c40:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008c42:	4b30      	ldr	r3, [pc, #192]	@ (8008d04 <RCCEx_PLL3_Config+0x15c>)
 8008c44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c46:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	695b      	ldr	r3, [r3, #20]
 8008c4e:	492d      	ldr	r1, [pc, #180]	@ (8008d04 <RCCEx_PLL3_Config+0x15c>)
 8008c50:	4313      	orrs	r3, r2
 8008c52:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008c54:	4b2b      	ldr	r3, [pc, #172]	@ (8008d04 <RCCEx_PLL3_Config+0x15c>)
 8008c56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c58:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	699b      	ldr	r3, [r3, #24]
 8008c60:	4928      	ldr	r1, [pc, #160]	@ (8008d04 <RCCEx_PLL3_Config+0x15c>)
 8008c62:	4313      	orrs	r3, r2
 8008c64:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008c66:	4b27      	ldr	r3, [pc, #156]	@ (8008d04 <RCCEx_PLL3_Config+0x15c>)
 8008c68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c6a:	4a26      	ldr	r2, [pc, #152]	@ (8008d04 <RCCEx_PLL3_Config+0x15c>)
 8008c6c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008c70:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008c72:	4b24      	ldr	r3, [pc, #144]	@ (8008d04 <RCCEx_PLL3_Config+0x15c>)
 8008c74:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008c76:	4b24      	ldr	r3, [pc, #144]	@ (8008d08 <RCCEx_PLL3_Config+0x160>)
 8008c78:	4013      	ands	r3, r2
 8008c7a:	687a      	ldr	r2, [r7, #4]
 8008c7c:	69d2      	ldr	r2, [r2, #28]
 8008c7e:	00d2      	lsls	r2, r2, #3
 8008c80:	4920      	ldr	r1, [pc, #128]	@ (8008d04 <RCCEx_PLL3_Config+0x15c>)
 8008c82:	4313      	orrs	r3, r2
 8008c84:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008c86:	4b1f      	ldr	r3, [pc, #124]	@ (8008d04 <RCCEx_PLL3_Config+0x15c>)
 8008c88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c8a:	4a1e      	ldr	r2, [pc, #120]	@ (8008d04 <RCCEx_PLL3_Config+0x15c>)
 8008c8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008c90:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008c92:	683b      	ldr	r3, [r7, #0]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d106      	bne.n	8008ca6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008c98:	4b1a      	ldr	r3, [pc, #104]	@ (8008d04 <RCCEx_PLL3_Config+0x15c>)
 8008c9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c9c:	4a19      	ldr	r2, [pc, #100]	@ (8008d04 <RCCEx_PLL3_Config+0x15c>)
 8008c9e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8008ca2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008ca4:	e00f      	b.n	8008cc6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008ca6:	683b      	ldr	r3, [r7, #0]
 8008ca8:	2b01      	cmp	r3, #1
 8008caa:	d106      	bne.n	8008cba <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008cac:	4b15      	ldr	r3, [pc, #84]	@ (8008d04 <RCCEx_PLL3_Config+0x15c>)
 8008cae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cb0:	4a14      	ldr	r2, [pc, #80]	@ (8008d04 <RCCEx_PLL3_Config+0x15c>)
 8008cb2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008cb6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008cb8:	e005      	b.n	8008cc6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008cba:	4b12      	ldr	r3, [pc, #72]	@ (8008d04 <RCCEx_PLL3_Config+0x15c>)
 8008cbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cbe:	4a11      	ldr	r2, [pc, #68]	@ (8008d04 <RCCEx_PLL3_Config+0x15c>)
 8008cc0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008cc4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008cc6:	4b0f      	ldr	r3, [pc, #60]	@ (8008d04 <RCCEx_PLL3_Config+0x15c>)
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	4a0e      	ldr	r2, [pc, #56]	@ (8008d04 <RCCEx_PLL3_Config+0x15c>)
 8008ccc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008cd0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008cd2:	f7f8 f9a7 	bl	8001024 <HAL_GetTick>
 8008cd6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008cd8:	e008      	b.n	8008cec <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008cda:	f7f8 f9a3 	bl	8001024 <HAL_GetTick>
 8008cde:	4602      	mov	r2, r0
 8008ce0:	68bb      	ldr	r3, [r7, #8]
 8008ce2:	1ad3      	subs	r3, r2, r3
 8008ce4:	2b02      	cmp	r3, #2
 8008ce6:	d901      	bls.n	8008cec <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008ce8:	2303      	movs	r3, #3
 8008cea:	e006      	b.n	8008cfa <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008cec:	4b05      	ldr	r3, [pc, #20]	@ (8008d04 <RCCEx_PLL3_Config+0x15c>)
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d0f0      	beq.n	8008cda <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008cf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	3710      	adds	r7, #16
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	bd80      	pop	{r7, pc}
 8008d02:	bf00      	nop
 8008d04:	58024400 	.word	0x58024400
 8008d08:	ffff0007 	.word	0xffff0007

08008d0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	b082      	sub	sp, #8
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d101      	bne.n	8008d1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008d1a:	2301      	movs	r3, #1
 8008d1c:	e049      	b.n	8008db2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008d24:	b2db      	uxtb	r3, r3
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d106      	bne.n	8008d38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008d32:	6878      	ldr	r0, [r7, #4]
 8008d34:	f000 f841 	bl	8008dba <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	2202      	movs	r2, #2
 8008d3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681a      	ldr	r2, [r3, #0]
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	3304      	adds	r3, #4
 8008d48:	4619      	mov	r1, r3
 8008d4a:	4610      	mov	r0, r2
 8008d4c:	f000 f9e8 	bl	8009120 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	2201      	movs	r2, #1
 8008d54:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	2201      	movs	r2, #1
 8008d5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	2201      	movs	r2, #1
 8008d64:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	2201      	movs	r2, #1
 8008d6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	2201      	movs	r2, #1
 8008d74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	2201      	movs	r2, #1
 8008d7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	2201      	movs	r2, #1
 8008d84:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	2201      	movs	r2, #1
 8008d8c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	2201      	movs	r2, #1
 8008d94:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	2201      	movs	r2, #1
 8008d9c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	2201      	movs	r2, #1
 8008da4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	2201      	movs	r2, #1
 8008dac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008db0:	2300      	movs	r3, #0
}
 8008db2:	4618      	mov	r0, r3
 8008db4:	3708      	adds	r7, #8
 8008db6:	46bd      	mov	sp, r7
 8008db8:	bd80      	pop	{r7, pc}

08008dba <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8008dba:	b480      	push	{r7}
 8008dbc:	b083      	sub	sp, #12
 8008dbe:	af00      	add	r7, sp, #0
 8008dc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8008dc2:	bf00      	nop
 8008dc4:	370c      	adds	r7, #12
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dcc:	4770      	bx	lr
	...

08008dd0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008dd0:	b480      	push	{r7}
 8008dd2:	b085      	sub	sp, #20
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008dde:	b2db      	uxtb	r3, r3
 8008de0:	2b01      	cmp	r3, #1
 8008de2:	d001      	beq.n	8008de8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008de4:	2301      	movs	r3, #1
 8008de6:	e054      	b.n	8008e92 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	2202      	movs	r2, #2
 8008dec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	68da      	ldr	r2, [r3, #12]
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	f042 0201 	orr.w	r2, r2, #1
 8008dfe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	4a26      	ldr	r2, [pc, #152]	@ (8008ea0 <HAL_TIM_Base_Start_IT+0xd0>)
 8008e06:	4293      	cmp	r3, r2
 8008e08:	d022      	beq.n	8008e50 <HAL_TIM_Base_Start_IT+0x80>
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008e12:	d01d      	beq.n	8008e50 <HAL_TIM_Base_Start_IT+0x80>
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	4a22      	ldr	r2, [pc, #136]	@ (8008ea4 <HAL_TIM_Base_Start_IT+0xd4>)
 8008e1a:	4293      	cmp	r3, r2
 8008e1c:	d018      	beq.n	8008e50 <HAL_TIM_Base_Start_IT+0x80>
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	4a21      	ldr	r2, [pc, #132]	@ (8008ea8 <HAL_TIM_Base_Start_IT+0xd8>)
 8008e24:	4293      	cmp	r3, r2
 8008e26:	d013      	beq.n	8008e50 <HAL_TIM_Base_Start_IT+0x80>
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	4a1f      	ldr	r2, [pc, #124]	@ (8008eac <HAL_TIM_Base_Start_IT+0xdc>)
 8008e2e:	4293      	cmp	r3, r2
 8008e30:	d00e      	beq.n	8008e50 <HAL_TIM_Base_Start_IT+0x80>
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	4a1e      	ldr	r2, [pc, #120]	@ (8008eb0 <HAL_TIM_Base_Start_IT+0xe0>)
 8008e38:	4293      	cmp	r3, r2
 8008e3a:	d009      	beq.n	8008e50 <HAL_TIM_Base_Start_IT+0x80>
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	4a1c      	ldr	r2, [pc, #112]	@ (8008eb4 <HAL_TIM_Base_Start_IT+0xe4>)
 8008e42:	4293      	cmp	r3, r2
 8008e44:	d004      	beq.n	8008e50 <HAL_TIM_Base_Start_IT+0x80>
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	4a1b      	ldr	r2, [pc, #108]	@ (8008eb8 <HAL_TIM_Base_Start_IT+0xe8>)
 8008e4c:	4293      	cmp	r3, r2
 8008e4e:	d115      	bne.n	8008e7c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	689a      	ldr	r2, [r3, #8]
 8008e56:	4b19      	ldr	r3, [pc, #100]	@ (8008ebc <HAL_TIM_Base_Start_IT+0xec>)
 8008e58:	4013      	ands	r3, r2
 8008e5a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	2b06      	cmp	r3, #6
 8008e60:	d015      	beq.n	8008e8e <HAL_TIM_Base_Start_IT+0xbe>
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008e68:	d011      	beq.n	8008e8e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	681a      	ldr	r2, [r3, #0]
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	f042 0201 	orr.w	r2, r2, #1
 8008e78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e7a:	e008      	b.n	8008e8e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	681a      	ldr	r2, [r3, #0]
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	f042 0201 	orr.w	r2, r2, #1
 8008e8a:	601a      	str	r2, [r3, #0]
 8008e8c:	e000      	b.n	8008e90 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e8e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008e90:	2300      	movs	r3, #0
}
 8008e92:	4618      	mov	r0, r3
 8008e94:	3714      	adds	r7, #20
 8008e96:	46bd      	mov	sp, r7
 8008e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9c:	4770      	bx	lr
 8008e9e:	bf00      	nop
 8008ea0:	40010000 	.word	0x40010000
 8008ea4:	40000400 	.word	0x40000400
 8008ea8:	40000800 	.word	0x40000800
 8008eac:	40000c00 	.word	0x40000c00
 8008eb0:	40010400 	.word	0x40010400
 8008eb4:	40001800 	.word	0x40001800
 8008eb8:	40014000 	.word	0x40014000
 8008ebc:	00010007 	.word	0x00010007

08008ec0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008ec0:	b580      	push	{r7, lr}
 8008ec2:	b084      	sub	sp, #16
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	68db      	ldr	r3, [r3, #12]
 8008ece:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	691b      	ldr	r3, [r3, #16]
 8008ed6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008ed8:	68bb      	ldr	r3, [r7, #8]
 8008eda:	f003 0302 	and.w	r3, r3, #2
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d020      	beq.n	8008f24 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	f003 0302 	and.w	r3, r3, #2
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d01b      	beq.n	8008f24 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	f06f 0202 	mvn.w	r2, #2
 8008ef4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	2201      	movs	r2, #1
 8008efa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	699b      	ldr	r3, [r3, #24]
 8008f02:	f003 0303 	and.w	r3, r3, #3
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d003      	beq.n	8008f12 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008f0a:	6878      	ldr	r0, [r7, #4]
 8008f0c:	f000 f8e9 	bl	80090e2 <HAL_TIM_IC_CaptureCallback>
 8008f10:	e005      	b.n	8008f1e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f12:	6878      	ldr	r0, [r7, #4]
 8008f14:	f000 f8db 	bl	80090ce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f18:	6878      	ldr	r0, [r7, #4]
 8008f1a:	f000 f8ec 	bl	80090f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	2200      	movs	r2, #0
 8008f22:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008f24:	68bb      	ldr	r3, [r7, #8]
 8008f26:	f003 0304 	and.w	r3, r3, #4
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d020      	beq.n	8008f70 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	f003 0304 	and.w	r3, r3, #4
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d01b      	beq.n	8008f70 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	f06f 0204 	mvn.w	r2, #4
 8008f40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	2202      	movs	r2, #2
 8008f46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	699b      	ldr	r3, [r3, #24]
 8008f4e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d003      	beq.n	8008f5e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008f56:	6878      	ldr	r0, [r7, #4]
 8008f58:	f000 f8c3 	bl	80090e2 <HAL_TIM_IC_CaptureCallback>
 8008f5c:	e005      	b.n	8008f6a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f5e:	6878      	ldr	r0, [r7, #4]
 8008f60:	f000 f8b5 	bl	80090ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f64:	6878      	ldr	r0, [r7, #4]
 8008f66:	f000 f8c6 	bl	80090f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	2200      	movs	r2, #0
 8008f6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008f70:	68bb      	ldr	r3, [r7, #8]
 8008f72:	f003 0308 	and.w	r3, r3, #8
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d020      	beq.n	8008fbc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	f003 0308 	and.w	r3, r3, #8
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d01b      	beq.n	8008fbc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	f06f 0208 	mvn.w	r2, #8
 8008f8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	2204      	movs	r2, #4
 8008f92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	69db      	ldr	r3, [r3, #28]
 8008f9a:	f003 0303 	and.w	r3, r3, #3
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d003      	beq.n	8008faa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008fa2:	6878      	ldr	r0, [r7, #4]
 8008fa4:	f000 f89d 	bl	80090e2 <HAL_TIM_IC_CaptureCallback>
 8008fa8:	e005      	b.n	8008fb6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008faa:	6878      	ldr	r0, [r7, #4]
 8008fac:	f000 f88f 	bl	80090ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008fb0:	6878      	ldr	r0, [r7, #4]
 8008fb2:	f000 f8a0 	bl	80090f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	2200      	movs	r2, #0
 8008fba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008fbc:	68bb      	ldr	r3, [r7, #8]
 8008fbe:	f003 0310 	and.w	r3, r3, #16
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d020      	beq.n	8009008 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	f003 0310 	and.w	r3, r3, #16
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d01b      	beq.n	8009008 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	f06f 0210 	mvn.w	r2, #16
 8008fd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	2208      	movs	r2, #8
 8008fde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	69db      	ldr	r3, [r3, #28]
 8008fe6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d003      	beq.n	8008ff6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008fee:	6878      	ldr	r0, [r7, #4]
 8008ff0:	f000 f877 	bl	80090e2 <HAL_TIM_IC_CaptureCallback>
 8008ff4:	e005      	b.n	8009002 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ff6:	6878      	ldr	r0, [r7, #4]
 8008ff8:	f000 f869 	bl	80090ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ffc:	6878      	ldr	r0, [r7, #4]
 8008ffe:	f000 f87a 	bl	80090f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	2200      	movs	r2, #0
 8009006:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009008:	68bb      	ldr	r3, [r7, #8]
 800900a:	f003 0301 	and.w	r3, r3, #1
 800900e:	2b00      	cmp	r3, #0
 8009010:	d00c      	beq.n	800902c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	f003 0301 	and.w	r3, r3, #1
 8009018:	2b00      	cmp	r3, #0
 800901a:	d007      	beq.n	800902c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	f06f 0201 	mvn.w	r2, #1
 8009024:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009026:	6878      	ldr	r0, [r7, #4]
 8009028:	f7f7 fd30 	bl	8000a8c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800902c:	68bb      	ldr	r3, [r7, #8]
 800902e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009032:	2b00      	cmp	r3, #0
 8009034:	d104      	bne.n	8009040 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8009036:	68bb      	ldr	r3, [r7, #8]
 8009038:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800903c:	2b00      	cmp	r3, #0
 800903e:	d00c      	beq.n	800905a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009046:	2b00      	cmp	r3, #0
 8009048:	d007      	beq.n	800905a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8009052:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009054:	6878      	ldr	r0, [r7, #4]
 8009056:	f000 f913 	bl	8009280 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800905a:	68bb      	ldr	r3, [r7, #8]
 800905c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009060:	2b00      	cmp	r3, #0
 8009062:	d00c      	beq.n	800907e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800906a:	2b00      	cmp	r3, #0
 800906c:	d007      	beq.n	800907e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8009076:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009078:	6878      	ldr	r0, [r7, #4]
 800907a:	f000 f90b 	bl	8009294 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800907e:	68bb      	ldr	r3, [r7, #8]
 8009080:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009084:	2b00      	cmp	r3, #0
 8009086:	d00c      	beq.n	80090a2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800908e:	2b00      	cmp	r3, #0
 8009090:	d007      	beq.n	80090a2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800909a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800909c:	6878      	ldr	r0, [r7, #4]
 800909e:	f000 f834 	bl	800910a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80090a2:	68bb      	ldr	r3, [r7, #8]
 80090a4:	f003 0320 	and.w	r3, r3, #32
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d00c      	beq.n	80090c6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	f003 0320 	and.w	r3, r3, #32
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d007      	beq.n	80090c6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	f06f 0220 	mvn.w	r2, #32
 80090be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80090c0:	6878      	ldr	r0, [r7, #4]
 80090c2:	f000 f8d3 	bl	800926c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80090c6:	bf00      	nop
 80090c8:	3710      	adds	r7, #16
 80090ca:	46bd      	mov	sp, r7
 80090cc:	bd80      	pop	{r7, pc}

080090ce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80090ce:	b480      	push	{r7}
 80090d0:	b083      	sub	sp, #12
 80090d2:	af00      	add	r7, sp, #0
 80090d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80090d6:	bf00      	nop
 80090d8:	370c      	adds	r7, #12
 80090da:	46bd      	mov	sp, r7
 80090dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e0:	4770      	bx	lr

080090e2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80090e2:	b480      	push	{r7}
 80090e4:	b083      	sub	sp, #12
 80090e6:	af00      	add	r7, sp, #0
 80090e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80090ea:	bf00      	nop
 80090ec:	370c      	adds	r7, #12
 80090ee:	46bd      	mov	sp, r7
 80090f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f4:	4770      	bx	lr

080090f6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80090f6:	b480      	push	{r7}
 80090f8:	b083      	sub	sp, #12
 80090fa:	af00      	add	r7, sp, #0
 80090fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80090fe:	bf00      	nop
 8009100:	370c      	adds	r7, #12
 8009102:	46bd      	mov	sp, r7
 8009104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009108:	4770      	bx	lr

0800910a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800910a:	b480      	push	{r7}
 800910c:	b083      	sub	sp, #12
 800910e:	af00      	add	r7, sp, #0
 8009110:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009112:	bf00      	nop
 8009114:	370c      	adds	r7, #12
 8009116:	46bd      	mov	sp, r7
 8009118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911c:	4770      	bx	lr
	...

08009120 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009120:	b480      	push	{r7}
 8009122:	b085      	sub	sp, #20
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]
 8009128:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	4a46      	ldr	r2, [pc, #280]	@ (800924c <TIM_Base_SetConfig+0x12c>)
 8009134:	4293      	cmp	r3, r2
 8009136:	d013      	beq.n	8009160 <TIM_Base_SetConfig+0x40>
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800913e:	d00f      	beq.n	8009160 <TIM_Base_SetConfig+0x40>
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	4a43      	ldr	r2, [pc, #268]	@ (8009250 <TIM_Base_SetConfig+0x130>)
 8009144:	4293      	cmp	r3, r2
 8009146:	d00b      	beq.n	8009160 <TIM_Base_SetConfig+0x40>
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	4a42      	ldr	r2, [pc, #264]	@ (8009254 <TIM_Base_SetConfig+0x134>)
 800914c:	4293      	cmp	r3, r2
 800914e:	d007      	beq.n	8009160 <TIM_Base_SetConfig+0x40>
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	4a41      	ldr	r2, [pc, #260]	@ (8009258 <TIM_Base_SetConfig+0x138>)
 8009154:	4293      	cmp	r3, r2
 8009156:	d003      	beq.n	8009160 <TIM_Base_SetConfig+0x40>
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	4a40      	ldr	r2, [pc, #256]	@ (800925c <TIM_Base_SetConfig+0x13c>)
 800915c:	4293      	cmp	r3, r2
 800915e:	d108      	bne.n	8009172 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009166:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009168:	683b      	ldr	r3, [r7, #0]
 800916a:	685b      	ldr	r3, [r3, #4]
 800916c:	68fa      	ldr	r2, [r7, #12]
 800916e:	4313      	orrs	r3, r2
 8009170:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	4a35      	ldr	r2, [pc, #212]	@ (800924c <TIM_Base_SetConfig+0x12c>)
 8009176:	4293      	cmp	r3, r2
 8009178:	d01f      	beq.n	80091ba <TIM_Base_SetConfig+0x9a>
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009180:	d01b      	beq.n	80091ba <TIM_Base_SetConfig+0x9a>
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	4a32      	ldr	r2, [pc, #200]	@ (8009250 <TIM_Base_SetConfig+0x130>)
 8009186:	4293      	cmp	r3, r2
 8009188:	d017      	beq.n	80091ba <TIM_Base_SetConfig+0x9a>
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	4a31      	ldr	r2, [pc, #196]	@ (8009254 <TIM_Base_SetConfig+0x134>)
 800918e:	4293      	cmp	r3, r2
 8009190:	d013      	beq.n	80091ba <TIM_Base_SetConfig+0x9a>
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	4a30      	ldr	r2, [pc, #192]	@ (8009258 <TIM_Base_SetConfig+0x138>)
 8009196:	4293      	cmp	r3, r2
 8009198:	d00f      	beq.n	80091ba <TIM_Base_SetConfig+0x9a>
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	4a2f      	ldr	r2, [pc, #188]	@ (800925c <TIM_Base_SetConfig+0x13c>)
 800919e:	4293      	cmp	r3, r2
 80091a0:	d00b      	beq.n	80091ba <TIM_Base_SetConfig+0x9a>
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	4a2e      	ldr	r2, [pc, #184]	@ (8009260 <TIM_Base_SetConfig+0x140>)
 80091a6:	4293      	cmp	r3, r2
 80091a8:	d007      	beq.n	80091ba <TIM_Base_SetConfig+0x9a>
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	4a2d      	ldr	r2, [pc, #180]	@ (8009264 <TIM_Base_SetConfig+0x144>)
 80091ae:	4293      	cmp	r3, r2
 80091b0:	d003      	beq.n	80091ba <TIM_Base_SetConfig+0x9a>
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	4a2c      	ldr	r2, [pc, #176]	@ (8009268 <TIM_Base_SetConfig+0x148>)
 80091b6:	4293      	cmp	r3, r2
 80091b8:	d108      	bne.n	80091cc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80091c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80091c2:	683b      	ldr	r3, [r7, #0]
 80091c4:	68db      	ldr	r3, [r3, #12]
 80091c6:	68fa      	ldr	r2, [r7, #12]
 80091c8:	4313      	orrs	r3, r2
 80091ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80091d2:	683b      	ldr	r3, [r7, #0]
 80091d4:	695b      	ldr	r3, [r3, #20]
 80091d6:	4313      	orrs	r3, r2
 80091d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	68fa      	ldr	r2, [r7, #12]
 80091de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80091e0:	683b      	ldr	r3, [r7, #0]
 80091e2:	689a      	ldr	r2, [r3, #8]
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80091e8:	683b      	ldr	r3, [r7, #0]
 80091ea:	681a      	ldr	r2, [r3, #0]
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	4a16      	ldr	r2, [pc, #88]	@ (800924c <TIM_Base_SetConfig+0x12c>)
 80091f4:	4293      	cmp	r3, r2
 80091f6:	d00f      	beq.n	8009218 <TIM_Base_SetConfig+0xf8>
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	4a18      	ldr	r2, [pc, #96]	@ (800925c <TIM_Base_SetConfig+0x13c>)
 80091fc:	4293      	cmp	r3, r2
 80091fe:	d00b      	beq.n	8009218 <TIM_Base_SetConfig+0xf8>
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	4a17      	ldr	r2, [pc, #92]	@ (8009260 <TIM_Base_SetConfig+0x140>)
 8009204:	4293      	cmp	r3, r2
 8009206:	d007      	beq.n	8009218 <TIM_Base_SetConfig+0xf8>
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	4a16      	ldr	r2, [pc, #88]	@ (8009264 <TIM_Base_SetConfig+0x144>)
 800920c:	4293      	cmp	r3, r2
 800920e:	d003      	beq.n	8009218 <TIM_Base_SetConfig+0xf8>
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	4a15      	ldr	r2, [pc, #84]	@ (8009268 <TIM_Base_SetConfig+0x148>)
 8009214:	4293      	cmp	r3, r2
 8009216:	d103      	bne.n	8009220 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009218:	683b      	ldr	r3, [r7, #0]
 800921a:	691a      	ldr	r2, [r3, #16]
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	2201      	movs	r2, #1
 8009224:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	691b      	ldr	r3, [r3, #16]
 800922a:	f003 0301 	and.w	r3, r3, #1
 800922e:	2b01      	cmp	r3, #1
 8009230:	d105      	bne.n	800923e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	691b      	ldr	r3, [r3, #16]
 8009236:	f023 0201 	bic.w	r2, r3, #1
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	611a      	str	r2, [r3, #16]
  }
}
 800923e:	bf00      	nop
 8009240:	3714      	adds	r7, #20
 8009242:	46bd      	mov	sp, r7
 8009244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009248:	4770      	bx	lr
 800924a:	bf00      	nop
 800924c:	40010000 	.word	0x40010000
 8009250:	40000400 	.word	0x40000400
 8009254:	40000800 	.word	0x40000800
 8009258:	40000c00 	.word	0x40000c00
 800925c:	40010400 	.word	0x40010400
 8009260:	40014000 	.word	0x40014000
 8009264:	40014400 	.word	0x40014400
 8009268:	40014800 	.word	0x40014800

0800926c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800926c:	b480      	push	{r7}
 800926e:	b083      	sub	sp, #12
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009274:	bf00      	nop
 8009276:	370c      	adds	r7, #12
 8009278:	46bd      	mov	sp, r7
 800927a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927e:	4770      	bx	lr

08009280 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009280:	b480      	push	{r7}
 8009282:	b083      	sub	sp, #12
 8009284:	af00      	add	r7, sp, #0
 8009286:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009288:	bf00      	nop
 800928a:	370c      	adds	r7, #12
 800928c:	46bd      	mov	sp, r7
 800928e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009292:	4770      	bx	lr

08009294 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009294:	b480      	push	{r7}
 8009296:	b083      	sub	sp, #12
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800929c:	bf00      	nop
 800929e:	370c      	adds	r7, #12
 80092a0:	46bd      	mov	sp, r7
 80092a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a6:	4770      	bx	lr

080092a8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b082      	sub	sp, #8
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d101      	bne.n	80092ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80092b6:	2301      	movs	r3, #1
 80092b8:	e042      	b.n	8009340 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d106      	bne.n	80092d2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	2200      	movs	r2, #0
 80092c8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80092cc:	6878      	ldr	r0, [r7, #4]
 80092ce:	f7f7 fdc5 	bl	8000e5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	2224      	movs	r2, #36	@ 0x24
 80092d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	681a      	ldr	r2, [r3, #0]
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	f022 0201 	bic.w	r2, r2, #1
 80092e8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d002      	beq.n	80092f8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80092f2:	6878      	ldr	r0, [r7, #4]
 80092f4:	f000 fe94 	bl	800a020 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80092f8:	6878      	ldr	r0, [r7, #4]
 80092fa:	f000 f825 	bl	8009348 <UART_SetConfig>
 80092fe:	4603      	mov	r3, r0
 8009300:	2b01      	cmp	r3, #1
 8009302:	d101      	bne.n	8009308 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8009304:	2301      	movs	r3, #1
 8009306:	e01b      	b.n	8009340 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	685a      	ldr	r2, [r3, #4]
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009316:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	689a      	ldr	r2, [r3, #8]
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009326:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	681a      	ldr	r2, [r3, #0]
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	f042 0201 	orr.w	r2, r2, #1
 8009336:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009338:	6878      	ldr	r0, [r7, #4]
 800933a:	f000 ff13 	bl	800a164 <UART_CheckIdleState>
 800933e:	4603      	mov	r3, r0
}
 8009340:	4618      	mov	r0, r3
 8009342:	3708      	adds	r7, #8
 8009344:	46bd      	mov	sp, r7
 8009346:	bd80      	pop	{r7, pc}

08009348 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009348:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800934c:	b092      	sub	sp, #72	@ 0x48
 800934e:	af00      	add	r7, sp, #0
 8009350:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009352:	2300      	movs	r3, #0
 8009354:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009358:	697b      	ldr	r3, [r7, #20]
 800935a:	689a      	ldr	r2, [r3, #8]
 800935c:	697b      	ldr	r3, [r7, #20]
 800935e:	691b      	ldr	r3, [r3, #16]
 8009360:	431a      	orrs	r2, r3
 8009362:	697b      	ldr	r3, [r7, #20]
 8009364:	695b      	ldr	r3, [r3, #20]
 8009366:	431a      	orrs	r2, r3
 8009368:	697b      	ldr	r3, [r7, #20]
 800936a:	69db      	ldr	r3, [r3, #28]
 800936c:	4313      	orrs	r3, r2
 800936e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009370:	697b      	ldr	r3, [r7, #20]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	681a      	ldr	r2, [r3, #0]
 8009376:	4bbe      	ldr	r3, [pc, #760]	@ (8009670 <UART_SetConfig+0x328>)
 8009378:	4013      	ands	r3, r2
 800937a:	697a      	ldr	r2, [r7, #20]
 800937c:	6812      	ldr	r2, [r2, #0]
 800937e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009380:	430b      	orrs	r3, r1
 8009382:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009384:	697b      	ldr	r3, [r7, #20]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	685b      	ldr	r3, [r3, #4]
 800938a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800938e:	697b      	ldr	r3, [r7, #20]
 8009390:	68da      	ldr	r2, [r3, #12]
 8009392:	697b      	ldr	r3, [r7, #20]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	430a      	orrs	r2, r1
 8009398:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800939a:	697b      	ldr	r3, [r7, #20]
 800939c:	699b      	ldr	r3, [r3, #24]
 800939e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80093a0:	697b      	ldr	r3, [r7, #20]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	4ab3      	ldr	r2, [pc, #716]	@ (8009674 <UART_SetConfig+0x32c>)
 80093a6:	4293      	cmp	r3, r2
 80093a8:	d004      	beq.n	80093b4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80093aa:	697b      	ldr	r3, [r7, #20]
 80093ac:	6a1b      	ldr	r3, [r3, #32]
 80093ae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80093b0:	4313      	orrs	r3, r2
 80093b2:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80093b4:	697b      	ldr	r3, [r7, #20]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	689a      	ldr	r2, [r3, #8]
 80093ba:	4baf      	ldr	r3, [pc, #700]	@ (8009678 <UART_SetConfig+0x330>)
 80093bc:	4013      	ands	r3, r2
 80093be:	697a      	ldr	r2, [r7, #20]
 80093c0:	6812      	ldr	r2, [r2, #0]
 80093c2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80093c4:	430b      	orrs	r3, r1
 80093c6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80093c8:	697b      	ldr	r3, [r7, #20]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093ce:	f023 010f 	bic.w	r1, r3, #15
 80093d2:	697b      	ldr	r3, [r7, #20]
 80093d4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80093d6:	697b      	ldr	r3, [r7, #20]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	430a      	orrs	r2, r1
 80093dc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80093de:	697b      	ldr	r3, [r7, #20]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	4aa6      	ldr	r2, [pc, #664]	@ (800967c <UART_SetConfig+0x334>)
 80093e4:	4293      	cmp	r3, r2
 80093e6:	d177      	bne.n	80094d8 <UART_SetConfig+0x190>
 80093e8:	4ba5      	ldr	r3, [pc, #660]	@ (8009680 <UART_SetConfig+0x338>)
 80093ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80093ec:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80093f0:	2b28      	cmp	r3, #40	@ 0x28
 80093f2:	d86d      	bhi.n	80094d0 <UART_SetConfig+0x188>
 80093f4:	a201      	add	r2, pc, #4	@ (adr r2, 80093fc <UART_SetConfig+0xb4>)
 80093f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093fa:	bf00      	nop
 80093fc:	080094a1 	.word	0x080094a1
 8009400:	080094d1 	.word	0x080094d1
 8009404:	080094d1 	.word	0x080094d1
 8009408:	080094d1 	.word	0x080094d1
 800940c:	080094d1 	.word	0x080094d1
 8009410:	080094d1 	.word	0x080094d1
 8009414:	080094d1 	.word	0x080094d1
 8009418:	080094d1 	.word	0x080094d1
 800941c:	080094a9 	.word	0x080094a9
 8009420:	080094d1 	.word	0x080094d1
 8009424:	080094d1 	.word	0x080094d1
 8009428:	080094d1 	.word	0x080094d1
 800942c:	080094d1 	.word	0x080094d1
 8009430:	080094d1 	.word	0x080094d1
 8009434:	080094d1 	.word	0x080094d1
 8009438:	080094d1 	.word	0x080094d1
 800943c:	080094b1 	.word	0x080094b1
 8009440:	080094d1 	.word	0x080094d1
 8009444:	080094d1 	.word	0x080094d1
 8009448:	080094d1 	.word	0x080094d1
 800944c:	080094d1 	.word	0x080094d1
 8009450:	080094d1 	.word	0x080094d1
 8009454:	080094d1 	.word	0x080094d1
 8009458:	080094d1 	.word	0x080094d1
 800945c:	080094b9 	.word	0x080094b9
 8009460:	080094d1 	.word	0x080094d1
 8009464:	080094d1 	.word	0x080094d1
 8009468:	080094d1 	.word	0x080094d1
 800946c:	080094d1 	.word	0x080094d1
 8009470:	080094d1 	.word	0x080094d1
 8009474:	080094d1 	.word	0x080094d1
 8009478:	080094d1 	.word	0x080094d1
 800947c:	080094c1 	.word	0x080094c1
 8009480:	080094d1 	.word	0x080094d1
 8009484:	080094d1 	.word	0x080094d1
 8009488:	080094d1 	.word	0x080094d1
 800948c:	080094d1 	.word	0x080094d1
 8009490:	080094d1 	.word	0x080094d1
 8009494:	080094d1 	.word	0x080094d1
 8009498:	080094d1 	.word	0x080094d1
 800949c:	080094c9 	.word	0x080094c9
 80094a0:	2301      	movs	r3, #1
 80094a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094a6:	e326      	b.n	8009af6 <UART_SetConfig+0x7ae>
 80094a8:	2304      	movs	r3, #4
 80094aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094ae:	e322      	b.n	8009af6 <UART_SetConfig+0x7ae>
 80094b0:	2308      	movs	r3, #8
 80094b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094b6:	e31e      	b.n	8009af6 <UART_SetConfig+0x7ae>
 80094b8:	2310      	movs	r3, #16
 80094ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094be:	e31a      	b.n	8009af6 <UART_SetConfig+0x7ae>
 80094c0:	2320      	movs	r3, #32
 80094c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094c6:	e316      	b.n	8009af6 <UART_SetConfig+0x7ae>
 80094c8:	2340      	movs	r3, #64	@ 0x40
 80094ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094ce:	e312      	b.n	8009af6 <UART_SetConfig+0x7ae>
 80094d0:	2380      	movs	r3, #128	@ 0x80
 80094d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094d6:	e30e      	b.n	8009af6 <UART_SetConfig+0x7ae>
 80094d8:	697b      	ldr	r3, [r7, #20]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	4a69      	ldr	r2, [pc, #420]	@ (8009684 <UART_SetConfig+0x33c>)
 80094de:	4293      	cmp	r3, r2
 80094e0:	d130      	bne.n	8009544 <UART_SetConfig+0x1fc>
 80094e2:	4b67      	ldr	r3, [pc, #412]	@ (8009680 <UART_SetConfig+0x338>)
 80094e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80094e6:	f003 0307 	and.w	r3, r3, #7
 80094ea:	2b05      	cmp	r3, #5
 80094ec:	d826      	bhi.n	800953c <UART_SetConfig+0x1f4>
 80094ee:	a201      	add	r2, pc, #4	@ (adr r2, 80094f4 <UART_SetConfig+0x1ac>)
 80094f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094f4:	0800950d 	.word	0x0800950d
 80094f8:	08009515 	.word	0x08009515
 80094fc:	0800951d 	.word	0x0800951d
 8009500:	08009525 	.word	0x08009525
 8009504:	0800952d 	.word	0x0800952d
 8009508:	08009535 	.word	0x08009535
 800950c:	2300      	movs	r3, #0
 800950e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009512:	e2f0      	b.n	8009af6 <UART_SetConfig+0x7ae>
 8009514:	2304      	movs	r3, #4
 8009516:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800951a:	e2ec      	b.n	8009af6 <UART_SetConfig+0x7ae>
 800951c:	2308      	movs	r3, #8
 800951e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009522:	e2e8      	b.n	8009af6 <UART_SetConfig+0x7ae>
 8009524:	2310      	movs	r3, #16
 8009526:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800952a:	e2e4      	b.n	8009af6 <UART_SetConfig+0x7ae>
 800952c:	2320      	movs	r3, #32
 800952e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009532:	e2e0      	b.n	8009af6 <UART_SetConfig+0x7ae>
 8009534:	2340      	movs	r3, #64	@ 0x40
 8009536:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800953a:	e2dc      	b.n	8009af6 <UART_SetConfig+0x7ae>
 800953c:	2380      	movs	r3, #128	@ 0x80
 800953e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009542:	e2d8      	b.n	8009af6 <UART_SetConfig+0x7ae>
 8009544:	697b      	ldr	r3, [r7, #20]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	4a4f      	ldr	r2, [pc, #316]	@ (8009688 <UART_SetConfig+0x340>)
 800954a:	4293      	cmp	r3, r2
 800954c:	d130      	bne.n	80095b0 <UART_SetConfig+0x268>
 800954e:	4b4c      	ldr	r3, [pc, #304]	@ (8009680 <UART_SetConfig+0x338>)
 8009550:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009552:	f003 0307 	and.w	r3, r3, #7
 8009556:	2b05      	cmp	r3, #5
 8009558:	d826      	bhi.n	80095a8 <UART_SetConfig+0x260>
 800955a:	a201      	add	r2, pc, #4	@ (adr r2, 8009560 <UART_SetConfig+0x218>)
 800955c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009560:	08009579 	.word	0x08009579
 8009564:	08009581 	.word	0x08009581
 8009568:	08009589 	.word	0x08009589
 800956c:	08009591 	.word	0x08009591
 8009570:	08009599 	.word	0x08009599
 8009574:	080095a1 	.word	0x080095a1
 8009578:	2300      	movs	r3, #0
 800957a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800957e:	e2ba      	b.n	8009af6 <UART_SetConfig+0x7ae>
 8009580:	2304      	movs	r3, #4
 8009582:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009586:	e2b6      	b.n	8009af6 <UART_SetConfig+0x7ae>
 8009588:	2308      	movs	r3, #8
 800958a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800958e:	e2b2      	b.n	8009af6 <UART_SetConfig+0x7ae>
 8009590:	2310      	movs	r3, #16
 8009592:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009596:	e2ae      	b.n	8009af6 <UART_SetConfig+0x7ae>
 8009598:	2320      	movs	r3, #32
 800959a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800959e:	e2aa      	b.n	8009af6 <UART_SetConfig+0x7ae>
 80095a0:	2340      	movs	r3, #64	@ 0x40
 80095a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095a6:	e2a6      	b.n	8009af6 <UART_SetConfig+0x7ae>
 80095a8:	2380      	movs	r3, #128	@ 0x80
 80095aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095ae:	e2a2      	b.n	8009af6 <UART_SetConfig+0x7ae>
 80095b0:	697b      	ldr	r3, [r7, #20]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	4a35      	ldr	r2, [pc, #212]	@ (800968c <UART_SetConfig+0x344>)
 80095b6:	4293      	cmp	r3, r2
 80095b8:	d130      	bne.n	800961c <UART_SetConfig+0x2d4>
 80095ba:	4b31      	ldr	r3, [pc, #196]	@ (8009680 <UART_SetConfig+0x338>)
 80095bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80095be:	f003 0307 	and.w	r3, r3, #7
 80095c2:	2b05      	cmp	r3, #5
 80095c4:	d826      	bhi.n	8009614 <UART_SetConfig+0x2cc>
 80095c6:	a201      	add	r2, pc, #4	@ (adr r2, 80095cc <UART_SetConfig+0x284>)
 80095c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095cc:	080095e5 	.word	0x080095e5
 80095d0:	080095ed 	.word	0x080095ed
 80095d4:	080095f5 	.word	0x080095f5
 80095d8:	080095fd 	.word	0x080095fd
 80095dc:	08009605 	.word	0x08009605
 80095e0:	0800960d 	.word	0x0800960d
 80095e4:	2300      	movs	r3, #0
 80095e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095ea:	e284      	b.n	8009af6 <UART_SetConfig+0x7ae>
 80095ec:	2304      	movs	r3, #4
 80095ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095f2:	e280      	b.n	8009af6 <UART_SetConfig+0x7ae>
 80095f4:	2308      	movs	r3, #8
 80095f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095fa:	e27c      	b.n	8009af6 <UART_SetConfig+0x7ae>
 80095fc:	2310      	movs	r3, #16
 80095fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009602:	e278      	b.n	8009af6 <UART_SetConfig+0x7ae>
 8009604:	2320      	movs	r3, #32
 8009606:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800960a:	e274      	b.n	8009af6 <UART_SetConfig+0x7ae>
 800960c:	2340      	movs	r3, #64	@ 0x40
 800960e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009612:	e270      	b.n	8009af6 <UART_SetConfig+0x7ae>
 8009614:	2380      	movs	r3, #128	@ 0x80
 8009616:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800961a:	e26c      	b.n	8009af6 <UART_SetConfig+0x7ae>
 800961c:	697b      	ldr	r3, [r7, #20]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	4a1b      	ldr	r2, [pc, #108]	@ (8009690 <UART_SetConfig+0x348>)
 8009622:	4293      	cmp	r3, r2
 8009624:	d142      	bne.n	80096ac <UART_SetConfig+0x364>
 8009626:	4b16      	ldr	r3, [pc, #88]	@ (8009680 <UART_SetConfig+0x338>)
 8009628:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800962a:	f003 0307 	and.w	r3, r3, #7
 800962e:	2b05      	cmp	r3, #5
 8009630:	d838      	bhi.n	80096a4 <UART_SetConfig+0x35c>
 8009632:	a201      	add	r2, pc, #4	@ (adr r2, 8009638 <UART_SetConfig+0x2f0>)
 8009634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009638:	08009651 	.word	0x08009651
 800963c:	08009659 	.word	0x08009659
 8009640:	08009661 	.word	0x08009661
 8009644:	08009669 	.word	0x08009669
 8009648:	08009695 	.word	0x08009695
 800964c:	0800969d 	.word	0x0800969d
 8009650:	2300      	movs	r3, #0
 8009652:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009656:	e24e      	b.n	8009af6 <UART_SetConfig+0x7ae>
 8009658:	2304      	movs	r3, #4
 800965a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800965e:	e24a      	b.n	8009af6 <UART_SetConfig+0x7ae>
 8009660:	2308      	movs	r3, #8
 8009662:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009666:	e246      	b.n	8009af6 <UART_SetConfig+0x7ae>
 8009668:	2310      	movs	r3, #16
 800966a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800966e:	e242      	b.n	8009af6 <UART_SetConfig+0x7ae>
 8009670:	cfff69f3 	.word	0xcfff69f3
 8009674:	58000c00 	.word	0x58000c00
 8009678:	11fff4ff 	.word	0x11fff4ff
 800967c:	40011000 	.word	0x40011000
 8009680:	58024400 	.word	0x58024400
 8009684:	40004400 	.word	0x40004400
 8009688:	40004800 	.word	0x40004800
 800968c:	40004c00 	.word	0x40004c00
 8009690:	40005000 	.word	0x40005000
 8009694:	2320      	movs	r3, #32
 8009696:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800969a:	e22c      	b.n	8009af6 <UART_SetConfig+0x7ae>
 800969c:	2340      	movs	r3, #64	@ 0x40
 800969e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096a2:	e228      	b.n	8009af6 <UART_SetConfig+0x7ae>
 80096a4:	2380      	movs	r3, #128	@ 0x80
 80096a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096aa:	e224      	b.n	8009af6 <UART_SetConfig+0x7ae>
 80096ac:	697b      	ldr	r3, [r7, #20]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	4ab1      	ldr	r2, [pc, #708]	@ (8009978 <UART_SetConfig+0x630>)
 80096b2:	4293      	cmp	r3, r2
 80096b4:	d176      	bne.n	80097a4 <UART_SetConfig+0x45c>
 80096b6:	4bb1      	ldr	r3, [pc, #708]	@ (800997c <UART_SetConfig+0x634>)
 80096b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80096ba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80096be:	2b28      	cmp	r3, #40	@ 0x28
 80096c0:	d86c      	bhi.n	800979c <UART_SetConfig+0x454>
 80096c2:	a201      	add	r2, pc, #4	@ (adr r2, 80096c8 <UART_SetConfig+0x380>)
 80096c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096c8:	0800976d 	.word	0x0800976d
 80096cc:	0800979d 	.word	0x0800979d
 80096d0:	0800979d 	.word	0x0800979d
 80096d4:	0800979d 	.word	0x0800979d
 80096d8:	0800979d 	.word	0x0800979d
 80096dc:	0800979d 	.word	0x0800979d
 80096e0:	0800979d 	.word	0x0800979d
 80096e4:	0800979d 	.word	0x0800979d
 80096e8:	08009775 	.word	0x08009775
 80096ec:	0800979d 	.word	0x0800979d
 80096f0:	0800979d 	.word	0x0800979d
 80096f4:	0800979d 	.word	0x0800979d
 80096f8:	0800979d 	.word	0x0800979d
 80096fc:	0800979d 	.word	0x0800979d
 8009700:	0800979d 	.word	0x0800979d
 8009704:	0800979d 	.word	0x0800979d
 8009708:	0800977d 	.word	0x0800977d
 800970c:	0800979d 	.word	0x0800979d
 8009710:	0800979d 	.word	0x0800979d
 8009714:	0800979d 	.word	0x0800979d
 8009718:	0800979d 	.word	0x0800979d
 800971c:	0800979d 	.word	0x0800979d
 8009720:	0800979d 	.word	0x0800979d
 8009724:	0800979d 	.word	0x0800979d
 8009728:	08009785 	.word	0x08009785
 800972c:	0800979d 	.word	0x0800979d
 8009730:	0800979d 	.word	0x0800979d
 8009734:	0800979d 	.word	0x0800979d
 8009738:	0800979d 	.word	0x0800979d
 800973c:	0800979d 	.word	0x0800979d
 8009740:	0800979d 	.word	0x0800979d
 8009744:	0800979d 	.word	0x0800979d
 8009748:	0800978d 	.word	0x0800978d
 800974c:	0800979d 	.word	0x0800979d
 8009750:	0800979d 	.word	0x0800979d
 8009754:	0800979d 	.word	0x0800979d
 8009758:	0800979d 	.word	0x0800979d
 800975c:	0800979d 	.word	0x0800979d
 8009760:	0800979d 	.word	0x0800979d
 8009764:	0800979d 	.word	0x0800979d
 8009768:	08009795 	.word	0x08009795
 800976c:	2301      	movs	r3, #1
 800976e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009772:	e1c0      	b.n	8009af6 <UART_SetConfig+0x7ae>
 8009774:	2304      	movs	r3, #4
 8009776:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800977a:	e1bc      	b.n	8009af6 <UART_SetConfig+0x7ae>
 800977c:	2308      	movs	r3, #8
 800977e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009782:	e1b8      	b.n	8009af6 <UART_SetConfig+0x7ae>
 8009784:	2310      	movs	r3, #16
 8009786:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800978a:	e1b4      	b.n	8009af6 <UART_SetConfig+0x7ae>
 800978c:	2320      	movs	r3, #32
 800978e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009792:	e1b0      	b.n	8009af6 <UART_SetConfig+0x7ae>
 8009794:	2340      	movs	r3, #64	@ 0x40
 8009796:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800979a:	e1ac      	b.n	8009af6 <UART_SetConfig+0x7ae>
 800979c:	2380      	movs	r3, #128	@ 0x80
 800979e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097a2:	e1a8      	b.n	8009af6 <UART_SetConfig+0x7ae>
 80097a4:	697b      	ldr	r3, [r7, #20]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	4a75      	ldr	r2, [pc, #468]	@ (8009980 <UART_SetConfig+0x638>)
 80097aa:	4293      	cmp	r3, r2
 80097ac:	d130      	bne.n	8009810 <UART_SetConfig+0x4c8>
 80097ae:	4b73      	ldr	r3, [pc, #460]	@ (800997c <UART_SetConfig+0x634>)
 80097b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80097b2:	f003 0307 	and.w	r3, r3, #7
 80097b6:	2b05      	cmp	r3, #5
 80097b8:	d826      	bhi.n	8009808 <UART_SetConfig+0x4c0>
 80097ba:	a201      	add	r2, pc, #4	@ (adr r2, 80097c0 <UART_SetConfig+0x478>)
 80097bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097c0:	080097d9 	.word	0x080097d9
 80097c4:	080097e1 	.word	0x080097e1
 80097c8:	080097e9 	.word	0x080097e9
 80097cc:	080097f1 	.word	0x080097f1
 80097d0:	080097f9 	.word	0x080097f9
 80097d4:	08009801 	.word	0x08009801
 80097d8:	2300      	movs	r3, #0
 80097da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097de:	e18a      	b.n	8009af6 <UART_SetConfig+0x7ae>
 80097e0:	2304      	movs	r3, #4
 80097e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097e6:	e186      	b.n	8009af6 <UART_SetConfig+0x7ae>
 80097e8:	2308      	movs	r3, #8
 80097ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097ee:	e182      	b.n	8009af6 <UART_SetConfig+0x7ae>
 80097f0:	2310      	movs	r3, #16
 80097f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097f6:	e17e      	b.n	8009af6 <UART_SetConfig+0x7ae>
 80097f8:	2320      	movs	r3, #32
 80097fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097fe:	e17a      	b.n	8009af6 <UART_SetConfig+0x7ae>
 8009800:	2340      	movs	r3, #64	@ 0x40
 8009802:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009806:	e176      	b.n	8009af6 <UART_SetConfig+0x7ae>
 8009808:	2380      	movs	r3, #128	@ 0x80
 800980a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800980e:	e172      	b.n	8009af6 <UART_SetConfig+0x7ae>
 8009810:	697b      	ldr	r3, [r7, #20]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	4a5b      	ldr	r2, [pc, #364]	@ (8009984 <UART_SetConfig+0x63c>)
 8009816:	4293      	cmp	r3, r2
 8009818:	d130      	bne.n	800987c <UART_SetConfig+0x534>
 800981a:	4b58      	ldr	r3, [pc, #352]	@ (800997c <UART_SetConfig+0x634>)
 800981c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800981e:	f003 0307 	and.w	r3, r3, #7
 8009822:	2b05      	cmp	r3, #5
 8009824:	d826      	bhi.n	8009874 <UART_SetConfig+0x52c>
 8009826:	a201      	add	r2, pc, #4	@ (adr r2, 800982c <UART_SetConfig+0x4e4>)
 8009828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800982c:	08009845 	.word	0x08009845
 8009830:	0800984d 	.word	0x0800984d
 8009834:	08009855 	.word	0x08009855
 8009838:	0800985d 	.word	0x0800985d
 800983c:	08009865 	.word	0x08009865
 8009840:	0800986d 	.word	0x0800986d
 8009844:	2300      	movs	r3, #0
 8009846:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800984a:	e154      	b.n	8009af6 <UART_SetConfig+0x7ae>
 800984c:	2304      	movs	r3, #4
 800984e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009852:	e150      	b.n	8009af6 <UART_SetConfig+0x7ae>
 8009854:	2308      	movs	r3, #8
 8009856:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800985a:	e14c      	b.n	8009af6 <UART_SetConfig+0x7ae>
 800985c:	2310      	movs	r3, #16
 800985e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009862:	e148      	b.n	8009af6 <UART_SetConfig+0x7ae>
 8009864:	2320      	movs	r3, #32
 8009866:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800986a:	e144      	b.n	8009af6 <UART_SetConfig+0x7ae>
 800986c:	2340      	movs	r3, #64	@ 0x40
 800986e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009872:	e140      	b.n	8009af6 <UART_SetConfig+0x7ae>
 8009874:	2380      	movs	r3, #128	@ 0x80
 8009876:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800987a:	e13c      	b.n	8009af6 <UART_SetConfig+0x7ae>
 800987c:	697b      	ldr	r3, [r7, #20]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	4a41      	ldr	r2, [pc, #260]	@ (8009988 <UART_SetConfig+0x640>)
 8009882:	4293      	cmp	r3, r2
 8009884:	f040 8082 	bne.w	800998c <UART_SetConfig+0x644>
 8009888:	4b3c      	ldr	r3, [pc, #240]	@ (800997c <UART_SetConfig+0x634>)
 800988a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800988c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009890:	2b28      	cmp	r3, #40	@ 0x28
 8009892:	d86d      	bhi.n	8009970 <UART_SetConfig+0x628>
 8009894:	a201      	add	r2, pc, #4	@ (adr r2, 800989c <UART_SetConfig+0x554>)
 8009896:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800989a:	bf00      	nop
 800989c:	08009941 	.word	0x08009941
 80098a0:	08009971 	.word	0x08009971
 80098a4:	08009971 	.word	0x08009971
 80098a8:	08009971 	.word	0x08009971
 80098ac:	08009971 	.word	0x08009971
 80098b0:	08009971 	.word	0x08009971
 80098b4:	08009971 	.word	0x08009971
 80098b8:	08009971 	.word	0x08009971
 80098bc:	08009949 	.word	0x08009949
 80098c0:	08009971 	.word	0x08009971
 80098c4:	08009971 	.word	0x08009971
 80098c8:	08009971 	.word	0x08009971
 80098cc:	08009971 	.word	0x08009971
 80098d0:	08009971 	.word	0x08009971
 80098d4:	08009971 	.word	0x08009971
 80098d8:	08009971 	.word	0x08009971
 80098dc:	08009951 	.word	0x08009951
 80098e0:	08009971 	.word	0x08009971
 80098e4:	08009971 	.word	0x08009971
 80098e8:	08009971 	.word	0x08009971
 80098ec:	08009971 	.word	0x08009971
 80098f0:	08009971 	.word	0x08009971
 80098f4:	08009971 	.word	0x08009971
 80098f8:	08009971 	.word	0x08009971
 80098fc:	08009959 	.word	0x08009959
 8009900:	08009971 	.word	0x08009971
 8009904:	08009971 	.word	0x08009971
 8009908:	08009971 	.word	0x08009971
 800990c:	08009971 	.word	0x08009971
 8009910:	08009971 	.word	0x08009971
 8009914:	08009971 	.word	0x08009971
 8009918:	08009971 	.word	0x08009971
 800991c:	08009961 	.word	0x08009961
 8009920:	08009971 	.word	0x08009971
 8009924:	08009971 	.word	0x08009971
 8009928:	08009971 	.word	0x08009971
 800992c:	08009971 	.word	0x08009971
 8009930:	08009971 	.word	0x08009971
 8009934:	08009971 	.word	0x08009971
 8009938:	08009971 	.word	0x08009971
 800993c:	08009969 	.word	0x08009969
 8009940:	2301      	movs	r3, #1
 8009942:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009946:	e0d6      	b.n	8009af6 <UART_SetConfig+0x7ae>
 8009948:	2304      	movs	r3, #4
 800994a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800994e:	e0d2      	b.n	8009af6 <UART_SetConfig+0x7ae>
 8009950:	2308      	movs	r3, #8
 8009952:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009956:	e0ce      	b.n	8009af6 <UART_SetConfig+0x7ae>
 8009958:	2310      	movs	r3, #16
 800995a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800995e:	e0ca      	b.n	8009af6 <UART_SetConfig+0x7ae>
 8009960:	2320      	movs	r3, #32
 8009962:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009966:	e0c6      	b.n	8009af6 <UART_SetConfig+0x7ae>
 8009968:	2340      	movs	r3, #64	@ 0x40
 800996a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800996e:	e0c2      	b.n	8009af6 <UART_SetConfig+0x7ae>
 8009970:	2380      	movs	r3, #128	@ 0x80
 8009972:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009976:	e0be      	b.n	8009af6 <UART_SetConfig+0x7ae>
 8009978:	40011400 	.word	0x40011400
 800997c:	58024400 	.word	0x58024400
 8009980:	40007800 	.word	0x40007800
 8009984:	40007c00 	.word	0x40007c00
 8009988:	40011800 	.word	0x40011800
 800998c:	697b      	ldr	r3, [r7, #20]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	4aad      	ldr	r2, [pc, #692]	@ (8009c48 <UART_SetConfig+0x900>)
 8009992:	4293      	cmp	r3, r2
 8009994:	d176      	bne.n	8009a84 <UART_SetConfig+0x73c>
 8009996:	4bad      	ldr	r3, [pc, #692]	@ (8009c4c <UART_SetConfig+0x904>)
 8009998:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800999a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800999e:	2b28      	cmp	r3, #40	@ 0x28
 80099a0:	d86c      	bhi.n	8009a7c <UART_SetConfig+0x734>
 80099a2:	a201      	add	r2, pc, #4	@ (adr r2, 80099a8 <UART_SetConfig+0x660>)
 80099a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099a8:	08009a4d 	.word	0x08009a4d
 80099ac:	08009a7d 	.word	0x08009a7d
 80099b0:	08009a7d 	.word	0x08009a7d
 80099b4:	08009a7d 	.word	0x08009a7d
 80099b8:	08009a7d 	.word	0x08009a7d
 80099bc:	08009a7d 	.word	0x08009a7d
 80099c0:	08009a7d 	.word	0x08009a7d
 80099c4:	08009a7d 	.word	0x08009a7d
 80099c8:	08009a55 	.word	0x08009a55
 80099cc:	08009a7d 	.word	0x08009a7d
 80099d0:	08009a7d 	.word	0x08009a7d
 80099d4:	08009a7d 	.word	0x08009a7d
 80099d8:	08009a7d 	.word	0x08009a7d
 80099dc:	08009a7d 	.word	0x08009a7d
 80099e0:	08009a7d 	.word	0x08009a7d
 80099e4:	08009a7d 	.word	0x08009a7d
 80099e8:	08009a5d 	.word	0x08009a5d
 80099ec:	08009a7d 	.word	0x08009a7d
 80099f0:	08009a7d 	.word	0x08009a7d
 80099f4:	08009a7d 	.word	0x08009a7d
 80099f8:	08009a7d 	.word	0x08009a7d
 80099fc:	08009a7d 	.word	0x08009a7d
 8009a00:	08009a7d 	.word	0x08009a7d
 8009a04:	08009a7d 	.word	0x08009a7d
 8009a08:	08009a65 	.word	0x08009a65
 8009a0c:	08009a7d 	.word	0x08009a7d
 8009a10:	08009a7d 	.word	0x08009a7d
 8009a14:	08009a7d 	.word	0x08009a7d
 8009a18:	08009a7d 	.word	0x08009a7d
 8009a1c:	08009a7d 	.word	0x08009a7d
 8009a20:	08009a7d 	.word	0x08009a7d
 8009a24:	08009a7d 	.word	0x08009a7d
 8009a28:	08009a6d 	.word	0x08009a6d
 8009a2c:	08009a7d 	.word	0x08009a7d
 8009a30:	08009a7d 	.word	0x08009a7d
 8009a34:	08009a7d 	.word	0x08009a7d
 8009a38:	08009a7d 	.word	0x08009a7d
 8009a3c:	08009a7d 	.word	0x08009a7d
 8009a40:	08009a7d 	.word	0x08009a7d
 8009a44:	08009a7d 	.word	0x08009a7d
 8009a48:	08009a75 	.word	0x08009a75
 8009a4c:	2301      	movs	r3, #1
 8009a4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a52:	e050      	b.n	8009af6 <UART_SetConfig+0x7ae>
 8009a54:	2304      	movs	r3, #4
 8009a56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a5a:	e04c      	b.n	8009af6 <UART_SetConfig+0x7ae>
 8009a5c:	2308      	movs	r3, #8
 8009a5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a62:	e048      	b.n	8009af6 <UART_SetConfig+0x7ae>
 8009a64:	2310      	movs	r3, #16
 8009a66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a6a:	e044      	b.n	8009af6 <UART_SetConfig+0x7ae>
 8009a6c:	2320      	movs	r3, #32
 8009a6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a72:	e040      	b.n	8009af6 <UART_SetConfig+0x7ae>
 8009a74:	2340      	movs	r3, #64	@ 0x40
 8009a76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a7a:	e03c      	b.n	8009af6 <UART_SetConfig+0x7ae>
 8009a7c:	2380      	movs	r3, #128	@ 0x80
 8009a7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a82:	e038      	b.n	8009af6 <UART_SetConfig+0x7ae>
 8009a84:	697b      	ldr	r3, [r7, #20]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	4a71      	ldr	r2, [pc, #452]	@ (8009c50 <UART_SetConfig+0x908>)
 8009a8a:	4293      	cmp	r3, r2
 8009a8c:	d130      	bne.n	8009af0 <UART_SetConfig+0x7a8>
 8009a8e:	4b6f      	ldr	r3, [pc, #444]	@ (8009c4c <UART_SetConfig+0x904>)
 8009a90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009a92:	f003 0307 	and.w	r3, r3, #7
 8009a96:	2b05      	cmp	r3, #5
 8009a98:	d826      	bhi.n	8009ae8 <UART_SetConfig+0x7a0>
 8009a9a:	a201      	add	r2, pc, #4	@ (adr r2, 8009aa0 <UART_SetConfig+0x758>)
 8009a9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009aa0:	08009ab9 	.word	0x08009ab9
 8009aa4:	08009ac1 	.word	0x08009ac1
 8009aa8:	08009ac9 	.word	0x08009ac9
 8009aac:	08009ad1 	.word	0x08009ad1
 8009ab0:	08009ad9 	.word	0x08009ad9
 8009ab4:	08009ae1 	.word	0x08009ae1
 8009ab8:	2302      	movs	r3, #2
 8009aba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009abe:	e01a      	b.n	8009af6 <UART_SetConfig+0x7ae>
 8009ac0:	2304      	movs	r3, #4
 8009ac2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ac6:	e016      	b.n	8009af6 <UART_SetConfig+0x7ae>
 8009ac8:	2308      	movs	r3, #8
 8009aca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ace:	e012      	b.n	8009af6 <UART_SetConfig+0x7ae>
 8009ad0:	2310      	movs	r3, #16
 8009ad2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ad6:	e00e      	b.n	8009af6 <UART_SetConfig+0x7ae>
 8009ad8:	2320      	movs	r3, #32
 8009ada:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ade:	e00a      	b.n	8009af6 <UART_SetConfig+0x7ae>
 8009ae0:	2340      	movs	r3, #64	@ 0x40
 8009ae2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ae6:	e006      	b.n	8009af6 <UART_SetConfig+0x7ae>
 8009ae8:	2380      	movs	r3, #128	@ 0x80
 8009aea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009aee:	e002      	b.n	8009af6 <UART_SetConfig+0x7ae>
 8009af0:	2380      	movs	r3, #128	@ 0x80
 8009af2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009af6:	697b      	ldr	r3, [r7, #20]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	4a55      	ldr	r2, [pc, #340]	@ (8009c50 <UART_SetConfig+0x908>)
 8009afc:	4293      	cmp	r3, r2
 8009afe:	f040 80f8 	bne.w	8009cf2 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009b02:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009b06:	2b20      	cmp	r3, #32
 8009b08:	dc46      	bgt.n	8009b98 <UART_SetConfig+0x850>
 8009b0a:	2b02      	cmp	r3, #2
 8009b0c:	db75      	blt.n	8009bfa <UART_SetConfig+0x8b2>
 8009b0e:	3b02      	subs	r3, #2
 8009b10:	2b1e      	cmp	r3, #30
 8009b12:	d872      	bhi.n	8009bfa <UART_SetConfig+0x8b2>
 8009b14:	a201      	add	r2, pc, #4	@ (adr r2, 8009b1c <UART_SetConfig+0x7d4>)
 8009b16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b1a:	bf00      	nop
 8009b1c:	08009b9f 	.word	0x08009b9f
 8009b20:	08009bfb 	.word	0x08009bfb
 8009b24:	08009ba7 	.word	0x08009ba7
 8009b28:	08009bfb 	.word	0x08009bfb
 8009b2c:	08009bfb 	.word	0x08009bfb
 8009b30:	08009bfb 	.word	0x08009bfb
 8009b34:	08009bb7 	.word	0x08009bb7
 8009b38:	08009bfb 	.word	0x08009bfb
 8009b3c:	08009bfb 	.word	0x08009bfb
 8009b40:	08009bfb 	.word	0x08009bfb
 8009b44:	08009bfb 	.word	0x08009bfb
 8009b48:	08009bfb 	.word	0x08009bfb
 8009b4c:	08009bfb 	.word	0x08009bfb
 8009b50:	08009bfb 	.word	0x08009bfb
 8009b54:	08009bc7 	.word	0x08009bc7
 8009b58:	08009bfb 	.word	0x08009bfb
 8009b5c:	08009bfb 	.word	0x08009bfb
 8009b60:	08009bfb 	.word	0x08009bfb
 8009b64:	08009bfb 	.word	0x08009bfb
 8009b68:	08009bfb 	.word	0x08009bfb
 8009b6c:	08009bfb 	.word	0x08009bfb
 8009b70:	08009bfb 	.word	0x08009bfb
 8009b74:	08009bfb 	.word	0x08009bfb
 8009b78:	08009bfb 	.word	0x08009bfb
 8009b7c:	08009bfb 	.word	0x08009bfb
 8009b80:	08009bfb 	.word	0x08009bfb
 8009b84:	08009bfb 	.word	0x08009bfb
 8009b88:	08009bfb 	.word	0x08009bfb
 8009b8c:	08009bfb 	.word	0x08009bfb
 8009b90:	08009bfb 	.word	0x08009bfb
 8009b94:	08009bed 	.word	0x08009bed
 8009b98:	2b40      	cmp	r3, #64	@ 0x40
 8009b9a:	d02a      	beq.n	8009bf2 <UART_SetConfig+0x8aa>
 8009b9c:	e02d      	b.n	8009bfa <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009b9e:	f7fe fc93 	bl	80084c8 <HAL_RCCEx_GetD3PCLK1Freq>
 8009ba2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009ba4:	e02f      	b.n	8009c06 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009ba6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009baa:	4618      	mov	r0, r3
 8009bac:	f7fe fca2 	bl	80084f4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009bb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009bb4:	e027      	b.n	8009c06 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009bb6:	f107 0318 	add.w	r3, r7, #24
 8009bba:	4618      	mov	r0, r3
 8009bbc:	f7fe fdee 	bl	800879c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009bc0:	69fb      	ldr	r3, [r7, #28]
 8009bc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009bc4:	e01f      	b.n	8009c06 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009bc6:	4b21      	ldr	r3, [pc, #132]	@ (8009c4c <UART_SetConfig+0x904>)
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	f003 0320 	and.w	r3, r3, #32
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d009      	beq.n	8009be6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009bd2:	4b1e      	ldr	r3, [pc, #120]	@ (8009c4c <UART_SetConfig+0x904>)
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	08db      	lsrs	r3, r3, #3
 8009bd8:	f003 0303 	and.w	r3, r3, #3
 8009bdc:	4a1d      	ldr	r2, [pc, #116]	@ (8009c54 <UART_SetConfig+0x90c>)
 8009bde:	fa22 f303 	lsr.w	r3, r2, r3
 8009be2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009be4:	e00f      	b.n	8009c06 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8009be6:	4b1b      	ldr	r3, [pc, #108]	@ (8009c54 <UART_SetConfig+0x90c>)
 8009be8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009bea:	e00c      	b.n	8009c06 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009bec:	4b1a      	ldr	r3, [pc, #104]	@ (8009c58 <UART_SetConfig+0x910>)
 8009bee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009bf0:	e009      	b.n	8009c06 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009bf2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009bf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009bf8:	e005      	b.n	8009c06 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009bfe:	2301      	movs	r3, #1
 8009c00:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009c04:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009c06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	f000 81ee 	beq.w	8009fea <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009c0e:	697b      	ldr	r3, [r7, #20]
 8009c10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c12:	4a12      	ldr	r2, [pc, #72]	@ (8009c5c <UART_SetConfig+0x914>)
 8009c14:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009c18:	461a      	mov	r2, r3
 8009c1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c1c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009c20:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009c22:	697b      	ldr	r3, [r7, #20]
 8009c24:	685a      	ldr	r2, [r3, #4]
 8009c26:	4613      	mov	r3, r2
 8009c28:	005b      	lsls	r3, r3, #1
 8009c2a:	4413      	add	r3, r2
 8009c2c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009c2e:	429a      	cmp	r2, r3
 8009c30:	d305      	bcc.n	8009c3e <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009c32:	697b      	ldr	r3, [r7, #20]
 8009c34:	685b      	ldr	r3, [r3, #4]
 8009c36:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009c38:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009c3a:	429a      	cmp	r2, r3
 8009c3c:	d910      	bls.n	8009c60 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8009c3e:	2301      	movs	r3, #1
 8009c40:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009c44:	e1d1      	b.n	8009fea <UART_SetConfig+0xca2>
 8009c46:	bf00      	nop
 8009c48:	40011c00 	.word	0x40011c00
 8009c4c:	58024400 	.word	0x58024400
 8009c50:	58000c00 	.word	0x58000c00
 8009c54:	03d09000 	.word	0x03d09000
 8009c58:	003d0900 	.word	0x003d0900
 8009c5c:	0800b44c 	.word	0x0800b44c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009c60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c62:	2200      	movs	r2, #0
 8009c64:	60bb      	str	r3, [r7, #8]
 8009c66:	60fa      	str	r2, [r7, #12]
 8009c68:	697b      	ldr	r3, [r7, #20]
 8009c6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c6c:	4ac0      	ldr	r2, [pc, #768]	@ (8009f70 <UART_SetConfig+0xc28>)
 8009c6e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009c72:	b29b      	uxth	r3, r3
 8009c74:	2200      	movs	r2, #0
 8009c76:	603b      	str	r3, [r7, #0]
 8009c78:	607a      	str	r2, [r7, #4]
 8009c7a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009c7e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009c82:	f7f6 fb35 	bl	80002f0 <__aeabi_uldivmod>
 8009c86:	4602      	mov	r2, r0
 8009c88:	460b      	mov	r3, r1
 8009c8a:	4610      	mov	r0, r2
 8009c8c:	4619      	mov	r1, r3
 8009c8e:	f04f 0200 	mov.w	r2, #0
 8009c92:	f04f 0300 	mov.w	r3, #0
 8009c96:	020b      	lsls	r3, r1, #8
 8009c98:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009c9c:	0202      	lsls	r2, r0, #8
 8009c9e:	6979      	ldr	r1, [r7, #20]
 8009ca0:	6849      	ldr	r1, [r1, #4]
 8009ca2:	0849      	lsrs	r1, r1, #1
 8009ca4:	2000      	movs	r0, #0
 8009ca6:	460c      	mov	r4, r1
 8009ca8:	4605      	mov	r5, r0
 8009caa:	eb12 0804 	adds.w	r8, r2, r4
 8009cae:	eb43 0905 	adc.w	r9, r3, r5
 8009cb2:	697b      	ldr	r3, [r7, #20]
 8009cb4:	685b      	ldr	r3, [r3, #4]
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	469a      	mov	sl, r3
 8009cba:	4693      	mov	fp, r2
 8009cbc:	4652      	mov	r2, sl
 8009cbe:	465b      	mov	r3, fp
 8009cc0:	4640      	mov	r0, r8
 8009cc2:	4649      	mov	r1, r9
 8009cc4:	f7f6 fb14 	bl	80002f0 <__aeabi_uldivmod>
 8009cc8:	4602      	mov	r2, r0
 8009cca:	460b      	mov	r3, r1
 8009ccc:	4613      	mov	r3, r2
 8009cce:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009cd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cd2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009cd6:	d308      	bcc.n	8009cea <UART_SetConfig+0x9a2>
 8009cd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cda:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009cde:	d204      	bcs.n	8009cea <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8009ce0:	697b      	ldr	r3, [r7, #20]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009ce6:	60da      	str	r2, [r3, #12]
 8009ce8:	e17f      	b.n	8009fea <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8009cea:	2301      	movs	r3, #1
 8009cec:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009cf0:	e17b      	b.n	8009fea <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009cf2:	697b      	ldr	r3, [r7, #20]
 8009cf4:	69db      	ldr	r3, [r3, #28]
 8009cf6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009cfa:	f040 80bd 	bne.w	8009e78 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8009cfe:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009d02:	2b20      	cmp	r3, #32
 8009d04:	dc48      	bgt.n	8009d98 <UART_SetConfig+0xa50>
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	db7b      	blt.n	8009e02 <UART_SetConfig+0xaba>
 8009d0a:	2b20      	cmp	r3, #32
 8009d0c:	d879      	bhi.n	8009e02 <UART_SetConfig+0xaba>
 8009d0e:	a201      	add	r2, pc, #4	@ (adr r2, 8009d14 <UART_SetConfig+0x9cc>)
 8009d10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d14:	08009d9f 	.word	0x08009d9f
 8009d18:	08009da7 	.word	0x08009da7
 8009d1c:	08009e03 	.word	0x08009e03
 8009d20:	08009e03 	.word	0x08009e03
 8009d24:	08009daf 	.word	0x08009daf
 8009d28:	08009e03 	.word	0x08009e03
 8009d2c:	08009e03 	.word	0x08009e03
 8009d30:	08009e03 	.word	0x08009e03
 8009d34:	08009dbf 	.word	0x08009dbf
 8009d38:	08009e03 	.word	0x08009e03
 8009d3c:	08009e03 	.word	0x08009e03
 8009d40:	08009e03 	.word	0x08009e03
 8009d44:	08009e03 	.word	0x08009e03
 8009d48:	08009e03 	.word	0x08009e03
 8009d4c:	08009e03 	.word	0x08009e03
 8009d50:	08009e03 	.word	0x08009e03
 8009d54:	08009dcf 	.word	0x08009dcf
 8009d58:	08009e03 	.word	0x08009e03
 8009d5c:	08009e03 	.word	0x08009e03
 8009d60:	08009e03 	.word	0x08009e03
 8009d64:	08009e03 	.word	0x08009e03
 8009d68:	08009e03 	.word	0x08009e03
 8009d6c:	08009e03 	.word	0x08009e03
 8009d70:	08009e03 	.word	0x08009e03
 8009d74:	08009e03 	.word	0x08009e03
 8009d78:	08009e03 	.word	0x08009e03
 8009d7c:	08009e03 	.word	0x08009e03
 8009d80:	08009e03 	.word	0x08009e03
 8009d84:	08009e03 	.word	0x08009e03
 8009d88:	08009e03 	.word	0x08009e03
 8009d8c:	08009e03 	.word	0x08009e03
 8009d90:	08009e03 	.word	0x08009e03
 8009d94:	08009df5 	.word	0x08009df5
 8009d98:	2b40      	cmp	r3, #64	@ 0x40
 8009d9a:	d02e      	beq.n	8009dfa <UART_SetConfig+0xab2>
 8009d9c:	e031      	b.n	8009e02 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009d9e:	f7fd f967 	bl	8007070 <HAL_RCC_GetPCLK1Freq>
 8009da2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009da4:	e033      	b.n	8009e0e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009da6:	f7fd f979 	bl	800709c <HAL_RCC_GetPCLK2Freq>
 8009daa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009dac:	e02f      	b.n	8009e0e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009dae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009db2:	4618      	mov	r0, r3
 8009db4:	f7fe fb9e 	bl	80084f4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009db8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009dba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009dbc:	e027      	b.n	8009e0e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009dbe:	f107 0318 	add.w	r3, r7, #24
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	f7fe fcea 	bl	800879c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009dc8:	69fb      	ldr	r3, [r7, #28]
 8009dca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009dcc:	e01f      	b.n	8009e0e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009dce:	4b69      	ldr	r3, [pc, #420]	@ (8009f74 <UART_SetConfig+0xc2c>)
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	f003 0320 	and.w	r3, r3, #32
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d009      	beq.n	8009dee <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009dda:	4b66      	ldr	r3, [pc, #408]	@ (8009f74 <UART_SetConfig+0xc2c>)
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	08db      	lsrs	r3, r3, #3
 8009de0:	f003 0303 	and.w	r3, r3, #3
 8009de4:	4a64      	ldr	r2, [pc, #400]	@ (8009f78 <UART_SetConfig+0xc30>)
 8009de6:	fa22 f303 	lsr.w	r3, r2, r3
 8009dea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009dec:	e00f      	b.n	8009e0e <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8009dee:	4b62      	ldr	r3, [pc, #392]	@ (8009f78 <UART_SetConfig+0xc30>)
 8009df0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009df2:	e00c      	b.n	8009e0e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009df4:	4b61      	ldr	r3, [pc, #388]	@ (8009f7c <UART_SetConfig+0xc34>)
 8009df6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009df8:	e009      	b.n	8009e0e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009dfa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009dfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e00:	e005      	b.n	8009e0e <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8009e02:	2300      	movs	r3, #0
 8009e04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009e06:	2301      	movs	r3, #1
 8009e08:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009e0c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009e0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	f000 80ea 	beq.w	8009fea <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009e16:	697b      	ldr	r3, [r7, #20]
 8009e18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e1a:	4a55      	ldr	r2, [pc, #340]	@ (8009f70 <UART_SetConfig+0xc28>)
 8009e1c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009e20:	461a      	mov	r2, r3
 8009e22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e24:	fbb3 f3f2 	udiv	r3, r3, r2
 8009e28:	005a      	lsls	r2, r3, #1
 8009e2a:	697b      	ldr	r3, [r7, #20]
 8009e2c:	685b      	ldr	r3, [r3, #4]
 8009e2e:	085b      	lsrs	r3, r3, #1
 8009e30:	441a      	add	r2, r3
 8009e32:	697b      	ldr	r3, [r7, #20]
 8009e34:	685b      	ldr	r3, [r3, #4]
 8009e36:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e3a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009e3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e3e:	2b0f      	cmp	r3, #15
 8009e40:	d916      	bls.n	8009e70 <UART_SetConfig+0xb28>
 8009e42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009e48:	d212      	bcs.n	8009e70 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009e4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e4c:	b29b      	uxth	r3, r3
 8009e4e:	f023 030f 	bic.w	r3, r3, #15
 8009e52:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009e54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e56:	085b      	lsrs	r3, r3, #1
 8009e58:	b29b      	uxth	r3, r3
 8009e5a:	f003 0307 	and.w	r3, r3, #7
 8009e5e:	b29a      	uxth	r2, r3
 8009e60:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009e62:	4313      	orrs	r3, r2
 8009e64:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8009e66:	697b      	ldr	r3, [r7, #20]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8009e6c:	60da      	str	r2, [r3, #12]
 8009e6e:	e0bc      	b.n	8009fea <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8009e70:	2301      	movs	r3, #1
 8009e72:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009e76:	e0b8      	b.n	8009fea <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009e78:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009e7c:	2b20      	cmp	r3, #32
 8009e7e:	dc4b      	bgt.n	8009f18 <UART_SetConfig+0xbd0>
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	f2c0 8087 	blt.w	8009f94 <UART_SetConfig+0xc4c>
 8009e86:	2b20      	cmp	r3, #32
 8009e88:	f200 8084 	bhi.w	8009f94 <UART_SetConfig+0xc4c>
 8009e8c:	a201      	add	r2, pc, #4	@ (adr r2, 8009e94 <UART_SetConfig+0xb4c>)
 8009e8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e92:	bf00      	nop
 8009e94:	08009f1f 	.word	0x08009f1f
 8009e98:	08009f27 	.word	0x08009f27
 8009e9c:	08009f95 	.word	0x08009f95
 8009ea0:	08009f95 	.word	0x08009f95
 8009ea4:	08009f2f 	.word	0x08009f2f
 8009ea8:	08009f95 	.word	0x08009f95
 8009eac:	08009f95 	.word	0x08009f95
 8009eb0:	08009f95 	.word	0x08009f95
 8009eb4:	08009f3f 	.word	0x08009f3f
 8009eb8:	08009f95 	.word	0x08009f95
 8009ebc:	08009f95 	.word	0x08009f95
 8009ec0:	08009f95 	.word	0x08009f95
 8009ec4:	08009f95 	.word	0x08009f95
 8009ec8:	08009f95 	.word	0x08009f95
 8009ecc:	08009f95 	.word	0x08009f95
 8009ed0:	08009f95 	.word	0x08009f95
 8009ed4:	08009f4f 	.word	0x08009f4f
 8009ed8:	08009f95 	.word	0x08009f95
 8009edc:	08009f95 	.word	0x08009f95
 8009ee0:	08009f95 	.word	0x08009f95
 8009ee4:	08009f95 	.word	0x08009f95
 8009ee8:	08009f95 	.word	0x08009f95
 8009eec:	08009f95 	.word	0x08009f95
 8009ef0:	08009f95 	.word	0x08009f95
 8009ef4:	08009f95 	.word	0x08009f95
 8009ef8:	08009f95 	.word	0x08009f95
 8009efc:	08009f95 	.word	0x08009f95
 8009f00:	08009f95 	.word	0x08009f95
 8009f04:	08009f95 	.word	0x08009f95
 8009f08:	08009f95 	.word	0x08009f95
 8009f0c:	08009f95 	.word	0x08009f95
 8009f10:	08009f95 	.word	0x08009f95
 8009f14:	08009f87 	.word	0x08009f87
 8009f18:	2b40      	cmp	r3, #64	@ 0x40
 8009f1a:	d037      	beq.n	8009f8c <UART_SetConfig+0xc44>
 8009f1c:	e03a      	b.n	8009f94 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009f1e:	f7fd f8a7 	bl	8007070 <HAL_RCC_GetPCLK1Freq>
 8009f22:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009f24:	e03c      	b.n	8009fa0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009f26:	f7fd f8b9 	bl	800709c <HAL_RCC_GetPCLK2Freq>
 8009f2a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009f2c:	e038      	b.n	8009fa0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009f2e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009f32:	4618      	mov	r0, r3
 8009f34:	f7fe fade 	bl	80084f4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009f38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f3c:	e030      	b.n	8009fa0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009f3e:	f107 0318 	add.w	r3, r7, #24
 8009f42:	4618      	mov	r0, r3
 8009f44:	f7fe fc2a 	bl	800879c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009f48:	69fb      	ldr	r3, [r7, #28]
 8009f4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f4c:	e028      	b.n	8009fa0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009f4e:	4b09      	ldr	r3, [pc, #36]	@ (8009f74 <UART_SetConfig+0xc2c>)
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	f003 0320 	and.w	r3, r3, #32
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d012      	beq.n	8009f80 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009f5a:	4b06      	ldr	r3, [pc, #24]	@ (8009f74 <UART_SetConfig+0xc2c>)
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	08db      	lsrs	r3, r3, #3
 8009f60:	f003 0303 	and.w	r3, r3, #3
 8009f64:	4a04      	ldr	r2, [pc, #16]	@ (8009f78 <UART_SetConfig+0xc30>)
 8009f66:	fa22 f303 	lsr.w	r3, r2, r3
 8009f6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009f6c:	e018      	b.n	8009fa0 <UART_SetConfig+0xc58>
 8009f6e:	bf00      	nop
 8009f70:	0800b44c 	.word	0x0800b44c
 8009f74:	58024400 	.word	0x58024400
 8009f78:	03d09000 	.word	0x03d09000
 8009f7c:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8009f80:	4b24      	ldr	r3, [pc, #144]	@ (800a014 <UART_SetConfig+0xccc>)
 8009f82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f84:	e00c      	b.n	8009fa0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009f86:	4b24      	ldr	r3, [pc, #144]	@ (800a018 <UART_SetConfig+0xcd0>)
 8009f88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f8a:	e009      	b.n	8009fa0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009f8c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009f90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f92:	e005      	b.n	8009fa0 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8009f94:	2300      	movs	r3, #0
 8009f96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009f98:	2301      	movs	r3, #1
 8009f9a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009f9e:	bf00      	nop
    }

    if (pclk != 0U)
 8009fa0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d021      	beq.n	8009fea <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009fa6:	697b      	ldr	r3, [r7, #20]
 8009fa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009faa:	4a1c      	ldr	r2, [pc, #112]	@ (800a01c <UART_SetConfig+0xcd4>)
 8009fac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009fb0:	461a      	mov	r2, r3
 8009fb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009fb4:	fbb3 f2f2 	udiv	r2, r3, r2
 8009fb8:	697b      	ldr	r3, [r7, #20]
 8009fba:	685b      	ldr	r3, [r3, #4]
 8009fbc:	085b      	lsrs	r3, r3, #1
 8009fbe:	441a      	add	r2, r3
 8009fc0:	697b      	ldr	r3, [r7, #20]
 8009fc2:	685b      	ldr	r3, [r3, #4]
 8009fc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8009fc8:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009fca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fcc:	2b0f      	cmp	r3, #15
 8009fce:	d909      	bls.n	8009fe4 <UART_SetConfig+0xc9c>
 8009fd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fd2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009fd6:	d205      	bcs.n	8009fe4 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009fd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fda:	b29a      	uxth	r2, r3
 8009fdc:	697b      	ldr	r3, [r7, #20]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	60da      	str	r2, [r3, #12]
 8009fe2:	e002      	b.n	8009fea <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8009fe4:	2301      	movs	r3, #1
 8009fe6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009fea:	697b      	ldr	r3, [r7, #20]
 8009fec:	2201      	movs	r2, #1
 8009fee:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009ff2:	697b      	ldr	r3, [r7, #20]
 8009ff4:	2201      	movs	r2, #1
 8009ff6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009ffa:	697b      	ldr	r3, [r7, #20]
 8009ffc:	2200      	movs	r2, #0
 8009ffe:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a000:	697b      	ldr	r3, [r7, #20]
 800a002:	2200      	movs	r2, #0
 800a004:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a006:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800a00a:	4618      	mov	r0, r3
 800a00c:	3748      	adds	r7, #72	@ 0x48
 800a00e:	46bd      	mov	sp, r7
 800a010:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a014:	03d09000 	.word	0x03d09000
 800a018:	003d0900 	.word	0x003d0900
 800a01c:	0800b44c 	.word	0x0800b44c

0800a020 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a020:	b480      	push	{r7}
 800a022:	b083      	sub	sp, #12
 800a024:	af00      	add	r7, sp, #0
 800a026:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a02c:	f003 0308 	and.w	r3, r3, #8
 800a030:	2b00      	cmp	r3, #0
 800a032:	d00a      	beq.n	800a04a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	685b      	ldr	r3, [r3, #4]
 800a03a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	430a      	orrs	r2, r1
 800a048:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a04e:	f003 0301 	and.w	r3, r3, #1
 800a052:	2b00      	cmp	r3, #0
 800a054:	d00a      	beq.n	800a06c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	685b      	ldr	r3, [r3, #4]
 800a05c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	430a      	orrs	r2, r1
 800a06a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a070:	f003 0302 	and.w	r3, r3, #2
 800a074:	2b00      	cmp	r3, #0
 800a076:	d00a      	beq.n	800a08e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	685b      	ldr	r3, [r3, #4]
 800a07e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	430a      	orrs	r2, r1
 800a08c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a092:	f003 0304 	and.w	r3, r3, #4
 800a096:	2b00      	cmp	r3, #0
 800a098:	d00a      	beq.n	800a0b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	685b      	ldr	r3, [r3, #4]
 800a0a0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	430a      	orrs	r2, r1
 800a0ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0b4:	f003 0310 	and.w	r3, r3, #16
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d00a      	beq.n	800a0d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	689b      	ldr	r3, [r3, #8]
 800a0c2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	430a      	orrs	r2, r1
 800a0d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0d6:	f003 0320 	and.w	r3, r3, #32
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d00a      	beq.n	800a0f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	689b      	ldr	r3, [r3, #8]
 800a0e4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	430a      	orrs	r2, r1
 800a0f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d01a      	beq.n	800a136 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	685b      	ldr	r3, [r3, #4]
 800a106:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	430a      	orrs	r2, r1
 800a114:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a11a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a11e:	d10a      	bne.n	800a136 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	685b      	ldr	r3, [r3, #4]
 800a126:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	430a      	orrs	r2, r1
 800a134:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a13a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d00a      	beq.n	800a158 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	685b      	ldr	r3, [r3, #4]
 800a148:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	430a      	orrs	r2, r1
 800a156:	605a      	str	r2, [r3, #4]
  }
}
 800a158:	bf00      	nop
 800a15a:	370c      	adds	r7, #12
 800a15c:	46bd      	mov	sp, r7
 800a15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a162:	4770      	bx	lr

0800a164 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a164:	b580      	push	{r7, lr}
 800a166:	b098      	sub	sp, #96	@ 0x60
 800a168:	af02      	add	r7, sp, #8
 800a16a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	2200      	movs	r2, #0
 800a170:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a174:	f7f6 ff56 	bl	8001024 <HAL_GetTick>
 800a178:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	f003 0308 	and.w	r3, r3, #8
 800a184:	2b08      	cmp	r3, #8
 800a186:	d12f      	bne.n	800a1e8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a188:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a18c:	9300      	str	r3, [sp, #0]
 800a18e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a190:	2200      	movs	r2, #0
 800a192:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a196:	6878      	ldr	r0, [r7, #4]
 800a198:	f000 f88e 	bl	800a2b8 <UART_WaitOnFlagUntilTimeout>
 800a19c:	4603      	mov	r3, r0
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d022      	beq.n	800a1e8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1aa:	e853 3f00 	ldrex	r3, [r3]
 800a1ae:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a1b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a1b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a1b6:	653b      	str	r3, [r7, #80]	@ 0x50
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	461a      	mov	r2, r3
 800a1be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a1c0:	647b      	str	r3, [r7, #68]	@ 0x44
 800a1c2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1c4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a1c6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a1c8:	e841 2300 	strex	r3, r2, [r1]
 800a1cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a1ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d1e6      	bne.n	800a1a2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	2220      	movs	r2, #32
 800a1d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	2200      	movs	r2, #0
 800a1e0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a1e4:	2303      	movs	r3, #3
 800a1e6:	e063      	b.n	800a2b0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	f003 0304 	and.w	r3, r3, #4
 800a1f2:	2b04      	cmp	r3, #4
 800a1f4:	d149      	bne.n	800a28a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a1f6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a1fa:	9300      	str	r3, [sp, #0]
 800a1fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a1fe:	2200      	movs	r2, #0
 800a200:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a204:	6878      	ldr	r0, [r7, #4]
 800a206:	f000 f857 	bl	800a2b8 <UART_WaitOnFlagUntilTimeout>
 800a20a:	4603      	mov	r3, r0
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d03c      	beq.n	800a28a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a218:	e853 3f00 	ldrex	r3, [r3]
 800a21c:	623b      	str	r3, [r7, #32]
   return(result);
 800a21e:	6a3b      	ldr	r3, [r7, #32]
 800a220:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a224:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	461a      	mov	r2, r3
 800a22c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a22e:	633b      	str	r3, [r7, #48]	@ 0x30
 800a230:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a232:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a234:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a236:	e841 2300 	strex	r3, r2, [r1]
 800a23a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a23c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d1e6      	bne.n	800a210 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	3308      	adds	r3, #8
 800a248:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a24a:	693b      	ldr	r3, [r7, #16]
 800a24c:	e853 3f00 	ldrex	r3, [r3]
 800a250:	60fb      	str	r3, [r7, #12]
   return(result);
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	f023 0301 	bic.w	r3, r3, #1
 800a258:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	3308      	adds	r3, #8
 800a260:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a262:	61fa      	str	r2, [r7, #28]
 800a264:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a266:	69b9      	ldr	r1, [r7, #24]
 800a268:	69fa      	ldr	r2, [r7, #28]
 800a26a:	e841 2300 	strex	r3, r2, [r1]
 800a26e:	617b      	str	r3, [r7, #20]
   return(result);
 800a270:	697b      	ldr	r3, [r7, #20]
 800a272:	2b00      	cmp	r3, #0
 800a274:	d1e5      	bne.n	800a242 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	2220      	movs	r2, #32
 800a27a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	2200      	movs	r2, #0
 800a282:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a286:	2303      	movs	r3, #3
 800a288:	e012      	b.n	800a2b0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	2220      	movs	r2, #32
 800a28e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	2220      	movs	r2, #32
 800a296:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	2200      	movs	r2, #0
 800a29e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	2200      	movs	r2, #0
 800a2a4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	2200      	movs	r2, #0
 800a2aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a2ae:	2300      	movs	r3, #0
}
 800a2b0:	4618      	mov	r0, r3
 800a2b2:	3758      	adds	r7, #88	@ 0x58
 800a2b4:	46bd      	mov	sp, r7
 800a2b6:	bd80      	pop	{r7, pc}

0800a2b8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	b084      	sub	sp, #16
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	60f8      	str	r0, [r7, #12]
 800a2c0:	60b9      	str	r1, [r7, #8]
 800a2c2:	603b      	str	r3, [r7, #0]
 800a2c4:	4613      	mov	r3, r2
 800a2c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a2c8:	e04f      	b.n	800a36a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a2ca:	69bb      	ldr	r3, [r7, #24]
 800a2cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2d0:	d04b      	beq.n	800a36a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a2d2:	f7f6 fea7 	bl	8001024 <HAL_GetTick>
 800a2d6:	4602      	mov	r2, r0
 800a2d8:	683b      	ldr	r3, [r7, #0]
 800a2da:	1ad3      	subs	r3, r2, r3
 800a2dc:	69ba      	ldr	r2, [r7, #24]
 800a2de:	429a      	cmp	r2, r3
 800a2e0:	d302      	bcc.n	800a2e8 <UART_WaitOnFlagUntilTimeout+0x30>
 800a2e2:	69bb      	ldr	r3, [r7, #24]
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d101      	bne.n	800a2ec <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a2e8:	2303      	movs	r3, #3
 800a2ea:	e04e      	b.n	800a38a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	f003 0304 	and.w	r3, r3, #4
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d037      	beq.n	800a36a <UART_WaitOnFlagUntilTimeout+0xb2>
 800a2fa:	68bb      	ldr	r3, [r7, #8]
 800a2fc:	2b80      	cmp	r3, #128	@ 0x80
 800a2fe:	d034      	beq.n	800a36a <UART_WaitOnFlagUntilTimeout+0xb2>
 800a300:	68bb      	ldr	r3, [r7, #8]
 800a302:	2b40      	cmp	r3, #64	@ 0x40
 800a304:	d031      	beq.n	800a36a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	69db      	ldr	r3, [r3, #28]
 800a30c:	f003 0308 	and.w	r3, r3, #8
 800a310:	2b08      	cmp	r3, #8
 800a312:	d110      	bne.n	800a336 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	2208      	movs	r2, #8
 800a31a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a31c:	68f8      	ldr	r0, [r7, #12]
 800a31e:	f000 f839 	bl	800a394 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	2208      	movs	r2, #8
 800a326:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	2200      	movs	r2, #0
 800a32e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a332:	2301      	movs	r3, #1
 800a334:	e029      	b.n	800a38a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	69db      	ldr	r3, [r3, #28]
 800a33c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a340:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a344:	d111      	bne.n	800a36a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a34e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a350:	68f8      	ldr	r0, [r7, #12]
 800a352:	f000 f81f 	bl	800a394 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	2220      	movs	r2, #32
 800a35a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	2200      	movs	r2, #0
 800a362:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a366:	2303      	movs	r3, #3
 800a368:	e00f      	b.n	800a38a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	69da      	ldr	r2, [r3, #28]
 800a370:	68bb      	ldr	r3, [r7, #8]
 800a372:	4013      	ands	r3, r2
 800a374:	68ba      	ldr	r2, [r7, #8]
 800a376:	429a      	cmp	r2, r3
 800a378:	bf0c      	ite	eq
 800a37a:	2301      	moveq	r3, #1
 800a37c:	2300      	movne	r3, #0
 800a37e:	b2db      	uxtb	r3, r3
 800a380:	461a      	mov	r2, r3
 800a382:	79fb      	ldrb	r3, [r7, #7]
 800a384:	429a      	cmp	r2, r3
 800a386:	d0a0      	beq.n	800a2ca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a388:	2300      	movs	r3, #0
}
 800a38a:	4618      	mov	r0, r3
 800a38c:	3710      	adds	r7, #16
 800a38e:	46bd      	mov	sp, r7
 800a390:	bd80      	pop	{r7, pc}
	...

0800a394 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a394:	b480      	push	{r7}
 800a396:	b095      	sub	sp, #84	@ 0x54
 800a398:	af00      	add	r7, sp, #0
 800a39a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3a4:	e853 3f00 	ldrex	r3, [r3]
 800a3a8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a3aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3ac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a3b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	461a      	mov	r2, r3
 800a3b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a3ba:	643b      	str	r3, [r7, #64]	@ 0x40
 800a3bc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3be:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a3c0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a3c2:	e841 2300 	strex	r3, r2, [r1]
 800a3c6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a3c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d1e6      	bne.n	800a39c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	3308      	adds	r3, #8
 800a3d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3d6:	6a3b      	ldr	r3, [r7, #32]
 800a3d8:	e853 3f00 	ldrex	r3, [r3]
 800a3dc:	61fb      	str	r3, [r7, #28]
   return(result);
 800a3de:	69fa      	ldr	r2, [r7, #28]
 800a3e0:	4b1e      	ldr	r3, [pc, #120]	@ (800a45c <UART_EndRxTransfer+0xc8>)
 800a3e2:	4013      	ands	r3, r2
 800a3e4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	3308      	adds	r3, #8
 800a3ec:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a3ee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a3f0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3f2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a3f4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a3f6:	e841 2300 	strex	r3, r2, [r1]
 800a3fa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a3fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d1e5      	bne.n	800a3ce <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a406:	2b01      	cmp	r3, #1
 800a408:	d118      	bne.n	800a43c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	e853 3f00 	ldrex	r3, [r3]
 800a416:	60bb      	str	r3, [r7, #8]
   return(result);
 800a418:	68bb      	ldr	r3, [r7, #8]
 800a41a:	f023 0310 	bic.w	r3, r3, #16
 800a41e:	647b      	str	r3, [r7, #68]	@ 0x44
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	461a      	mov	r2, r3
 800a426:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a428:	61bb      	str	r3, [r7, #24]
 800a42a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a42c:	6979      	ldr	r1, [r7, #20]
 800a42e:	69ba      	ldr	r2, [r7, #24]
 800a430:	e841 2300 	strex	r3, r2, [r1]
 800a434:	613b      	str	r3, [r7, #16]
   return(result);
 800a436:	693b      	ldr	r3, [r7, #16]
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d1e6      	bne.n	800a40a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	2220      	movs	r2, #32
 800a440:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	2200      	movs	r2, #0
 800a448:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	2200      	movs	r2, #0
 800a44e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a450:	bf00      	nop
 800a452:	3754      	adds	r7, #84	@ 0x54
 800a454:	46bd      	mov	sp, r7
 800a456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a45a:	4770      	bx	lr
 800a45c:	effffffe 	.word	0xeffffffe

0800a460 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a460:	b480      	push	{r7}
 800a462:	b085      	sub	sp, #20
 800a464:	af00      	add	r7, sp, #0
 800a466:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a46e:	2b01      	cmp	r3, #1
 800a470:	d101      	bne.n	800a476 <HAL_UARTEx_DisableFifoMode+0x16>
 800a472:	2302      	movs	r3, #2
 800a474:	e027      	b.n	800a4c6 <HAL_UARTEx_DisableFifoMode+0x66>
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	2201      	movs	r2, #1
 800a47a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	2224      	movs	r2, #36	@ 0x24
 800a482:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	681a      	ldr	r2, [r3, #0]
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	f022 0201 	bic.w	r2, r2, #1
 800a49c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a4a4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	2200      	movs	r2, #0
 800a4aa:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	68fa      	ldr	r2, [r7, #12]
 800a4b2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	2220      	movs	r2, #32
 800a4b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	2200      	movs	r2, #0
 800a4c0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a4c4:	2300      	movs	r3, #0
}
 800a4c6:	4618      	mov	r0, r3
 800a4c8:	3714      	adds	r7, #20
 800a4ca:	46bd      	mov	sp, r7
 800a4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d0:	4770      	bx	lr

0800a4d2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a4d2:	b580      	push	{r7, lr}
 800a4d4:	b084      	sub	sp, #16
 800a4d6:	af00      	add	r7, sp, #0
 800a4d8:	6078      	str	r0, [r7, #4]
 800a4da:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a4e2:	2b01      	cmp	r3, #1
 800a4e4:	d101      	bne.n	800a4ea <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a4e6:	2302      	movs	r3, #2
 800a4e8:	e02d      	b.n	800a546 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	2201      	movs	r2, #1
 800a4ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	2224      	movs	r2, #36	@ 0x24
 800a4f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	681a      	ldr	r2, [r3, #0]
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	f022 0201 	bic.w	r2, r2, #1
 800a510:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	689b      	ldr	r3, [r3, #8]
 800a518:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	683a      	ldr	r2, [r7, #0]
 800a522:	430a      	orrs	r2, r1
 800a524:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a526:	6878      	ldr	r0, [r7, #4]
 800a528:	f000 f850 	bl	800a5cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	68fa      	ldr	r2, [r7, #12]
 800a532:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	2220      	movs	r2, #32
 800a538:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	2200      	movs	r2, #0
 800a540:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a544:	2300      	movs	r3, #0
}
 800a546:	4618      	mov	r0, r3
 800a548:	3710      	adds	r7, #16
 800a54a:	46bd      	mov	sp, r7
 800a54c:	bd80      	pop	{r7, pc}

0800a54e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a54e:	b580      	push	{r7, lr}
 800a550:	b084      	sub	sp, #16
 800a552:	af00      	add	r7, sp, #0
 800a554:	6078      	str	r0, [r7, #4]
 800a556:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a55e:	2b01      	cmp	r3, #1
 800a560:	d101      	bne.n	800a566 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a562:	2302      	movs	r3, #2
 800a564:	e02d      	b.n	800a5c2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	2201      	movs	r2, #1
 800a56a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	2224      	movs	r2, #36	@ 0x24
 800a572:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	681a      	ldr	r2, [r3, #0]
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	f022 0201 	bic.w	r2, r2, #1
 800a58c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	689b      	ldr	r3, [r3, #8]
 800a594:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	683a      	ldr	r2, [r7, #0]
 800a59e:	430a      	orrs	r2, r1
 800a5a0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a5a2:	6878      	ldr	r0, [r7, #4]
 800a5a4:	f000 f812 	bl	800a5cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	68fa      	ldr	r2, [r7, #12]
 800a5ae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	2220      	movs	r2, #32
 800a5b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	2200      	movs	r2, #0
 800a5bc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a5c0:	2300      	movs	r3, #0
}
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	3710      	adds	r7, #16
 800a5c6:	46bd      	mov	sp, r7
 800a5c8:	bd80      	pop	{r7, pc}
	...

0800a5cc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a5cc:	b480      	push	{r7}
 800a5ce:	b085      	sub	sp, #20
 800a5d0:	af00      	add	r7, sp, #0
 800a5d2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d108      	bne.n	800a5ee <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	2201      	movs	r2, #1
 800a5e0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	2201      	movs	r2, #1
 800a5e8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a5ec:	e031      	b.n	800a652 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a5ee:	2310      	movs	r3, #16
 800a5f0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a5f2:	2310      	movs	r3, #16
 800a5f4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	689b      	ldr	r3, [r3, #8]
 800a5fc:	0e5b      	lsrs	r3, r3, #25
 800a5fe:	b2db      	uxtb	r3, r3
 800a600:	f003 0307 	and.w	r3, r3, #7
 800a604:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	689b      	ldr	r3, [r3, #8]
 800a60c:	0f5b      	lsrs	r3, r3, #29
 800a60e:	b2db      	uxtb	r3, r3
 800a610:	f003 0307 	and.w	r3, r3, #7
 800a614:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a616:	7bbb      	ldrb	r3, [r7, #14]
 800a618:	7b3a      	ldrb	r2, [r7, #12]
 800a61a:	4911      	ldr	r1, [pc, #68]	@ (800a660 <UARTEx_SetNbDataToProcess+0x94>)
 800a61c:	5c8a      	ldrb	r2, [r1, r2]
 800a61e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a622:	7b3a      	ldrb	r2, [r7, #12]
 800a624:	490f      	ldr	r1, [pc, #60]	@ (800a664 <UARTEx_SetNbDataToProcess+0x98>)
 800a626:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a628:	fb93 f3f2 	sdiv	r3, r3, r2
 800a62c:	b29a      	uxth	r2, r3
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a634:	7bfb      	ldrb	r3, [r7, #15]
 800a636:	7b7a      	ldrb	r2, [r7, #13]
 800a638:	4909      	ldr	r1, [pc, #36]	@ (800a660 <UARTEx_SetNbDataToProcess+0x94>)
 800a63a:	5c8a      	ldrb	r2, [r1, r2]
 800a63c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a640:	7b7a      	ldrb	r2, [r7, #13]
 800a642:	4908      	ldr	r1, [pc, #32]	@ (800a664 <UARTEx_SetNbDataToProcess+0x98>)
 800a644:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a646:	fb93 f3f2 	sdiv	r3, r3, r2
 800a64a:	b29a      	uxth	r2, r3
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a652:	bf00      	nop
 800a654:	3714      	adds	r7, #20
 800a656:	46bd      	mov	sp, r7
 800a658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a65c:	4770      	bx	lr
 800a65e:	bf00      	nop
 800a660:	0800b464 	.word	0x0800b464
 800a664:	0800b46c 	.word	0x0800b46c

0800a668 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a668:	b480      	push	{r7}
 800a66a:	b083      	sub	sp, #12
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	f103 0208 	add.w	r2, r3, #8
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	f04f 32ff 	mov.w	r2, #4294967295
 800a680:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	f103 0208 	add.w	r2, r3, #8
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	f103 0208 	add.w	r2, r3, #8
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	2200      	movs	r2, #0
 800a69a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a69c:	bf00      	nop
 800a69e:	370c      	adds	r7, #12
 800a6a0:	46bd      	mov	sp, r7
 800a6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a6:	4770      	bx	lr

0800a6a8 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a6a8:	b480      	push	{r7}
 800a6aa:	b085      	sub	sp, #20
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	6078      	str	r0, [r7, #4]
 800a6b0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	685b      	ldr	r3, [r3, #4]
 800a6b6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a6b8:	683b      	ldr	r3, [r7, #0]
 800a6ba:	68fa      	ldr	r2, [r7, #12]
 800a6bc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	689a      	ldr	r2, [r3, #8]
 800a6c2:	683b      	ldr	r3, [r7, #0]
 800a6c4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	689b      	ldr	r3, [r3, #8]
 800a6ca:	683a      	ldr	r2, [r7, #0]
 800a6cc:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	683a      	ldr	r2, [r7, #0]
 800a6d2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a6d4:	683b      	ldr	r3, [r7, #0]
 800a6d6:	687a      	ldr	r2, [r7, #4]
 800a6d8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	1c5a      	adds	r2, r3, #1
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	601a      	str	r2, [r3, #0]
}
 800a6e4:	bf00      	nop
 800a6e6:	3714      	adds	r7, #20
 800a6e8:	46bd      	mov	sp, r7
 800a6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ee:	4770      	bx	lr

0800a6f0 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a6f0:	b480      	push	{r7}
 800a6f2:	b085      	sub	sp, #20
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	691b      	ldr	r3, [r3, #16]
 800a6fc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	685b      	ldr	r3, [r3, #4]
 800a702:	687a      	ldr	r2, [r7, #4]
 800a704:	6892      	ldr	r2, [r2, #8]
 800a706:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	689b      	ldr	r3, [r3, #8]
 800a70c:	687a      	ldr	r2, [r7, #4]
 800a70e:	6852      	ldr	r2, [r2, #4]
 800a710:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	685b      	ldr	r3, [r3, #4]
 800a716:	687a      	ldr	r2, [r7, #4]
 800a718:	429a      	cmp	r2, r3
 800a71a:	d103      	bne.n	800a724 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	689a      	ldr	r2, [r3, #8]
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	2200      	movs	r2, #0
 800a728:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	1e5a      	subs	r2, r3, #1
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	681b      	ldr	r3, [r3, #0]
}
 800a738:	4618      	mov	r0, r3
 800a73a:	3714      	adds	r7, #20
 800a73c:	46bd      	mov	sp, r7
 800a73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a742:	4770      	bx	lr

0800a744 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a744:	b580      	push	{r7, lr}
 800a746:	b084      	sub	sp, #16
 800a748:	af00      	add	r7, sp, #0
 800a74a:	6078      	str	r0, [r7, #4]
 800a74c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	2b00      	cmp	r3, #0
 800a756:	d10b      	bne.n	800a770 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a758:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a75c:	f383 8811 	msr	BASEPRI, r3
 800a760:	f3bf 8f6f 	isb	sy
 800a764:	f3bf 8f4f 	dsb	sy
 800a768:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a76a:	bf00      	nop
 800a76c:	bf00      	nop
 800a76e:	e7fd      	b.n	800a76c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a770:	f000 fb0a 	bl	800ad88 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	681a      	ldr	r2, [r3, #0]
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a77c:	68f9      	ldr	r1, [r7, #12]
 800a77e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a780:	fb01 f303 	mul.w	r3, r1, r3
 800a784:	441a      	add	r2, r3
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	2200      	movs	r2, #0
 800a78e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	681a      	ldr	r2, [r3, #0]
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	681a      	ldr	r2, [r3, #0]
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a7a0:	3b01      	subs	r3, #1
 800a7a2:	68f9      	ldr	r1, [r7, #12]
 800a7a4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a7a6:	fb01 f303 	mul.w	r3, r1, r3
 800a7aa:	441a      	add	r2, r3
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	22ff      	movs	r2, #255	@ 0xff
 800a7b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	22ff      	movs	r2, #255	@ 0xff
 800a7bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800a7c0:	683b      	ldr	r3, [r7, #0]
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d114      	bne.n	800a7f0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	691b      	ldr	r3, [r3, #16]
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d01a      	beq.n	800a804 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	3310      	adds	r3, #16
 800a7d2:	4618      	mov	r0, r3
 800a7d4:	f000 fa3c 	bl	800ac50 <xTaskRemoveFromEventList>
 800a7d8:	4603      	mov	r3, r0
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d012      	beq.n	800a804 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a7de:	4b0d      	ldr	r3, [pc, #52]	@ (800a814 <xQueueGenericReset+0xd0>)
 800a7e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a7e4:	601a      	str	r2, [r3, #0]
 800a7e6:	f3bf 8f4f 	dsb	sy
 800a7ea:	f3bf 8f6f 	isb	sy
 800a7ee:	e009      	b.n	800a804 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	3310      	adds	r3, #16
 800a7f4:	4618      	mov	r0, r3
 800a7f6:	f7ff ff37 	bl	800a668 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	3324      	adds	r3, #36	@ 0x24
 800a7fe:	4618      	mov	r0, r3
 800a800:	f7ff ff32 	bl	800a668 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a804:	f000 faf2 	bl	800adec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a808:	2301      	movs	r3, #1
}
 800a80a:	4618      	mov	r0, r3
 800a80c:	3710      	adds	r7, #16
 800a80e:	46bd      	mov	sp, r7
 800a810:	bd80      	pop	{r7, pc}
 800a812:	bf00      	nop
 800a814:	e000ed04 	.word	0xe000ed04

0800a818 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a818:	b580      	push	{r7, lr}
 800a81a:	b08a      	sub	sp, #40	@ 0x28
 800a81c:	af02      	add	r7, sp, #8
 800a81e:	60f8      	str	r0, [r7, #12]
 800a820:	60b9      	str	r1, [r7, #8]
 800a822:	4613      	mov	r3, r2
 800a824:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d10b      	bne.n	800a844 <xQueueGenericCreate+0x2c>
	__asm volatile
 800a82c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a830:	f383 8811 	msr	BASEPRI, r3
 800a834:	f3bf 8f6f 	isb	sy
 800a838:	f3bf 8f4f 	dsb	sy
 800a83c:	613b      	str	r3, [r7, #16]
}
 800a83e:	bf00      	nop
 800a840:	bf00      	nop
 800a842:	e7fd      	b.n	800a840 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	68ba      	ldr	r2, [r7, #8]
 800a848:	fb02 f303 	mul.w	r3, r2, r3
 800a84c:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a84e:	69fb      	ldr	r3, [r7, #28]
 800a850:	3348      	adds	r3, #72	@ 0x48
 800a852:	4618      	mov	r0, r3
 800a854:	f000 fb4a 	bl	800aeec <pvPortMalloc>
 800a858:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a85a:	69bb      	ldr	r3, [r7, #24]
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d011      	beq.n	800a884 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a860:	69bb      	ldr	r3, [r7, #24]
 800a862:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a864:	697b      	ldr	r3, [r7, #20]
 800a866:	3348      	adds	r3, #72	@ 0x48
 800a868:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a86a:	69bb      	ldr	r3, [r7, #24]
 800a86c:	2200      	movs	r2, #0
 800a86e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a872:	79fa      	ldrb	r2, [r7, #7]
 800a874:	69bb      	ldr	r3, [r7, #24]
 800a876:	9300      	str	r3, [sp, #0]
 800a878:	4613      	mov	r3, r2
 800a87a:	697a      	ldr	r2, [r7, #20]
 800a87c:	68b9      	ldr	r1, [r7, #8]
 800a87e:	68f8      	ldr	r0, [r7, #12]
 800a880:	f000 f805 	bl	800a88e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a884:	69bb      	ldr	r3, [r7, #24]
	}
 800a886:	4618      	mov	r0, r3
 800a888:	3720      	adds	r7, #32
 800a88a:	46bd      	mov	sp, r7
 800a88c:	bd80      	pop	{r7, pc}

0800a88e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a88e:	b580      	push	{r7, lr}
 800a890:	b084      	sub	sp, #16
 800a892:	af00      	add	r7, sp, #0
 800a894:	60f8      	str	r0, [r7, #12]
 800a896:	60b9      	str	r1, [r7, #8]
 800a898:	607a      	str	r2, [r7, #4]
 800a89a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a89c:	68bb      	ldr	r3, [r7, #8]
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d103      	bne.n	800a8aa <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a8a2:	69bb      	ldr	r3, [r7, #24]
 800a8a4:	69ba      	ldr	r2, [r7, #24]
 800a8a6:	601a      	str	r2, [r3, #0]
 800a8a8:	e002      	b.n	800a8b0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a8aa:	69bb      	ldr	r3, [r7, #24]
 800a8ac:	687a      	ldr	r2, [r7, #4]
 800a8ae:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a8b0:	69bb      	ldr	r3, [r7, #24]
 800a8b2:	68fa      	ldr	r2, [r7, #12]
 800a8b4:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a8b6:	69bb      	ldr	r3, [r7, #24]
 800a8b8:	68ba      	ldr	r2, [r7, #8]
 800a8ba:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a8bc:	2101      	movs	r1, #1
 800a8be:	69b8      	ldr	r0, [r7, #24]
 800a8c0:	f7ff ff40 	bl	800a744 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a8c4:	bf00      	nop
 800a8c6:	3710      	adds	r7, #16
 800a8c8:	46bd      	mov	sp, r7
 800a8ca:	bd80      	pop	{r7, pc}

0800a8cc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a8cc:	b480      	push	{r7}
 800a8ce:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a8d0:	4b04      	ldr	r3, [pc, #16]	@ (800a8e4 <vTaskSuspendAll+0x18>)
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	3301      	adds	r3, #1
 800a8d6:	4a03      	ldr	r2, [pc, #12]	@ (800a8e4 <vTaskSuspendAll+0x18>)
 800a8d8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a8da:	bf00      	nop
 800a8dc:	46bd      	mov	sp, r7
 800a8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e2:	4770      	bx	lr
 800a8e4:	24000374 	.word	0x24000374

0800a8e8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a8e8:	b580      	push	{r7, lr}
 800a8ea:	b084      	sub	sp, #16
 800a8ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a8ee:	2300      	movs	r3, #0
 800a8f0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a8f2:	2300      	movs	r3, #0
 800a8f4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a8f6:	4b42      	ldr	r3, [pc, #264]	@ (800aa00 <xTaskResumeAll+0x118>)
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d10b      	bne.n	800a916 <xTaskResumeAll+0x2e>
	__asm volatile
 800a8fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a902:	f383 8811 	msr	BASEPRI, r3
 800a906:	f3bf 8f6f 	isb	sy
 800a90a:	f3bf 8f4f 	dsb	sy
 800a90e:	603b      	str	r3, [r7, #0]
}
 800a910:	bf00      	nop
 800a912:	bf00      	nop
 800a914:	e7fd      	b.n	800a912 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a916:	f000 fa37 	bl	800ad88 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a91a:	4b39      	ldr	r3, [pc, #228]	@ (800aa00 <xTaskResumeAll+0x118>)
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	3b01      	subs	r3, #1
 800a920:	4a37      	ldr	r2, [pc, #220]	@ (800aa00 <xTaskResumeAll+0x118>)
 800a922:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a924:	4b36      	ldr	r3, [pc, #216]	@ (800aa00 <xTaskResumeAll+0x118>)
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d161      	bne.n	800a9f0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a92c:	4b35      	ldr	r3, [pc, #212]	@ (800aa04 <xTaskResumeAll+0x11c>)
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	2b00      	cmp	r3, #0
 800a932:	d05d      	beq.n	800a9f0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a934:	e02e      	b.n	800a994 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a936:	4b34      	ldr	r3, [pc, #208]	@ (800aa08 <xTaskResumeAll+0x120>)
 800a938:	68db      	ldr	r3, [r3, #12]
 800a93a:	68db      	ldr	r3, [r3, #12]
 800a93c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	3318      	adds	r3, #24
 800a942:	4618      	mov	r0, r3
 800a944:	f7ff fed4 	bl	800a6f0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	3304      	adds	r3, #4
 800a94c:	4618      	mov	r0, r3
 800a94e:	f7ff fecf 	bl	800a6f0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a956:	2201      	movs	r2, #1
 800a958:	409a      	lsls	r2, r3
 800a95a:	4b2c      	ldr	r3, [pc, #176]	@ (800aa0c <xTaskResumeAll+0x124>)
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	4313      	orrs	r3, r2
 800a960:	4a2a      	ldr	r2, [pc, #168]	@ (800aa0c <xTaskResumeAll+0x124>)
 800a962:	6013      	str	r3, [r2, #0]
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a968:	4613      	mov	r3, r2
 800a96a:	009b      	lsls	r3, r3, #2
 800a96c:	4413      	add	r3, r2
 800a96e:	009b      	lsls	r3, r3, #2
 800a970:	4a27      	ldr	r2, [pc, #156]	@ (800aa10 <xTaskResumeAll+0x128>)
 800a972:	441a      	add	r2, r3
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	3304      	adds	r3, #4
 800a978:	4619      	mov	r1, r3
 800a97a:	4610      	mov	r0, r2
 800a97c:	f7ff fe94 	bl	800a6a8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a984:	4b23      	ldr	r3, [pc, #140]	@ (800aa14 <xTaskResumeAll+0x12c>)
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a98a:	429a      	cmp	r2, r3
 800a98c:	d302      	bcc.n	800a994 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800a98e:	4b22      	ldr	r3, [pc, #136]	@ (800aa18 <xTaskResumeAll+0x130>)
 800a990:	2201      	movs	r2, #1
 800a992:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a994:	4b1c      	ldr	r3, [pc, #112]	@ (800aa08 <xTaskResumeAll+0x120>)
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d1cc      	bne.n	800a936 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d001      	beq.n	800a9a6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a9a2:	f000 f9b9 	bl	800ad18 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a9a6:	4b1d      	ldr	r3, [pc, #116]	@ (800aa1c <xTaskResumeAll+0x134>)
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d010      	beq.n	800a9d4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a9b2:	f000 f837 	bl	800aa24 <xTaskIncrementTick>
 800a9b6:	4603      	mov	r3, r0
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d002      	beq.n	800a9c2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800a9bc:	4b16      	ldr	r3, [pc, #88]	@ (800aa18 <xTaskResumeAll+0x130>)
 800a9be:	2201      	movs	r2, #1
 800a9c0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	3b01      	subs	r3, #1
 800a9c6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d1f1      	bne.n	800a9b2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800a9ce:	4b13      	ldr	r3, [pc, #76]	@ (800aa1c <xTaskResumeAll+0x134>)
 800a9d0:	2200      	movs	r2, #0
 800a9d2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a9d4:	4b10      	ldr	r3, [pc, #64]	@ (800aa18 <xTaskResumeAll+0x130>)
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d009      	beq.n	800a9f0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a9dc:	2301      	movs	r3, #1
 800a9de:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a9e0:	4b0f      	ldr	r3, [pc, #60]	@ (800aa20 <xTaskResumeAll+0x138>)
 800a9e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a9e6:	601a      	str	r2, [r3, #0]
 800a9e8:	f3bf 8f4f 	dsb	sy
 800a9ec:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a9f0:	f000 f9fc 	bl	800adec <vPortExitCritical>

	return xAlreadyYielded;
 800a9f4:	68bb      	ldr	r3, [r7, #8]
}
 800a9f6:	4618      	mov	r0, r3
 800a9f8:	3710      	adds	r7, #16
 800a9fa:	46bd      	mov	sp, r7
 800a9fc:	bd80      	pop	{r7, pc}
 800a9fe:	bf00      	nop
 800aa00:	24000374 	.word	0x24000374
 800aa04:	24000358 	.word	0x24000358
 800aa08:	24000344 	.word	0x24000344
 800aa0c:	24000360 	.word	0x24000360
 800aa10:	240002b0 	.word	0x240002b0
 800aa14:	240002ac 	.word	0x240002ac
 800aa18:	24000368 	.word	0x24000368
 800aa1c:	24000364 	.word	0x24000364
 800aa20:	e000ed04 	.word	0xe000ed04

0800aa24 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800aa24:	b580      	push	{r7, lr}
 800aa26:	b086      	sub	sp, #24
 800aa28:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aa2e:	4b4f      	ldr	r3, [pc, #316]	@ (800ab6c <xTaskIncrementTick+0x148>)
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	f040 808f 	bne.w	800ab56 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800aa38:	4b4d      	ldr	r3, [pc, #308]	@ (800ab70 <xTaskIncrementTick+0x14c>)
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	3301      	adds	r3, #1
 800aa3e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800aa40:	4a4b      	ldr	r2, [pc, #300]	@ (800ab70 <xTaskIncrementTick+0x14c>)
 800aa42:	693b      	ldr	r3, [r7, #16]
 800aa44:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800aa46:	693b      	ldr	r3, [r7, #16]
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d121      	bne.n	800aa90 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800aa4c:	4b49      	ldr	r3, [pc, #292]	@ (800ab74 <xTaskIncrementTick+0x150>)
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d00b      	beq.n	800aa6e <xTaskIncrementTick+0x4a>
	__asm volatile
 800aa56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa5a:	f383 8811 	msr	BASEPRI, r3
 800aa5e:	f3bf 8f6f 	isb	sy
 800aa62:	f3bf 8f4f 	dsb	sy
 800aa66:	603b      	str	r3, [r7, #0]
}
 800aa68:	bf00      	nop
 800aa6a:	bf00      	nop
 800aa6c:	e7fd      	b.n	800aa6a <xTaskIncrementTick+0x46>
 800aa6e:	4b41      	ldr	r3, [pc, #260]	@ (800ab74 <xTaskIncrementTick+0x150>)
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	60fb      	str	r3, [r7, #12]
 800aa74:	4b40      	ldr	r3, [pc, #256]	@ (800ab78 <xTaskIncrementTick+0x154>)
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	4a3e      	ldr	r2, [pc, #248]	@ (800ab74 <xTaskIncrementTick+0x150>)
 800aa7a:	6013      	str	r3, [r2, #0]
 800aa7c:	4a3e      	ldr	r2, [pc, #248]	@ (800ab78 <xTaskIncrementTick+0x154>)
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	6013      	str	r3, [r2, #0]
 800aa82:	4b3e      	ldr	r3, [pc, #248]	@ (800ab7c <xTaskIncrementTick+0x158>)
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	3301      	adds	r3, #1
 800aa88:	4a3c      	ldr	r2, [pc, #240]	@ (800ab7c <xTaskIncrementTick+0x158>)
 800aa8a:	6013      	str	r3, [r2, #0]
 800aa8c:	f000 f944 	bl	800ad18 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800aa90:	4b3b      	ldr	r3, [pc, #236]	@ (800ab80 <xTaskIncrementTick+0x15c>)
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	693a      	ldr	r2, [r7, #16]
 800aa96:	429a      	cmp	r2, r3
 800aa98:	d348      	bcc.n	800ab2c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aa9a:	4b36      	ldr	r3, [pc, #216]	@ (800ab74 <xTaskIncrementTick+0x150>)
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d104      	bne.n	800aaae <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aaa4:	4b36      	ldr	r3, [pc, #216]	@ (800ab80 <xTaskIncrementTick+0x15c>)
 800aaa6:	f04f 32ff 	mov.w	r2, #4294967295
 800aaaa:	601a      	str	r2, [r3, #0]
					break;
 800aaac:	e03e      	b.n	800ab2c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aaae:	4b31      	ldr	r3, [pc, #196]	@ (800ab74 <xTaskIncrementTick+0x150>)
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	68db      	ldr	r3, [r3, #12]
 800aab4:	68db      	ldr	r3, [r3, #12]
 800aab6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800aab8:	68bb      	ldr	r3, [r7, #8]
 800aaba:	685b      	ldr	r3, [r3, #4]
 800aabc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800aabe:	693a      	ldr	r2, [r7, #16]
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	429a      	cmp	r2, r3
 800aac4:	d203      	bcs.n	800aace <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800aac6:	4a2e      	ldr	r2, [pc, #184]	@ (800ab80 <xTaskIncrementTick+0x15c>)
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800aacc:	e02e      	b.n	800ab2c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aace:	68bb      	ldr	r3, [r7, #8]
 800aad0:	3304      	adds	r3, #4
 800aad2:	4618      	mov	r0, r3
 800aad4:	f7ff fe0c 	bl	800a6f0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800aad8:	68bb      	ldr	r3, [r7, #8]
 800aada:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d004      	beq.n	800aaea <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800aae0:	68bb      	ldr	r3, [r7, #8]
 800aae2:	3318      	adds	r3, #24
 800aae4:	4618      	mov	r0, r3
 800aae6:	f7ff fe03 	bl	800a6f0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800aaea:	68bb      	ldr	r3, [r7, #8]
 800aaec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aaee:	2201      	movs	r2, #1
 800aaf0:	409a      	lsls	r2, r3
 800aaf2:	4b24      	ldr	r3, [pc, #144]	@ (800ab84 <xTaskIncrementTick+0x160>)
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	4313      	orrs	r3, r2
 800aaf8:	4a22      	ldr	r2, [pc, #136]	@ (800ab84 <xTaskIncrementTick+0x160>)
 800aafa:	6013      	str	r3, [r2, #0]
 800aafc:	68bb      	ldr	r3, [r7, #8]
 800aafe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ab00:	4613      	mov	r3, r2
 800ab02:	009b      	lsls	r3, r3, #2
 800ab04:	4413      	add	r3, r2
 800ab06:	009b      	lsls	r3, r3, #2
 800ab08:	4a1f      	ldr	r2, [pc, #124]	@ (800ab88 <xTaskIncrementTick+0x164>)
 800ab0a:	441a      	add	r2, r3
 800ab0c:	68bb      	ldr	r3, [r7, #8]
 800ab0e:	3304      	adds	r3, #4
 800ab10:	4619      	mov	r1, r3
 800ab12:	4610      	mov	r0, r2
 800ab14:	f7ff fdc8 	bl	800a6a8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ab18:	68bb      	ldr	r3, [r7, #8]
 800ab1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ab1c:	4b1b      	ldr	r3, [pc, #108]	@ (800ab8c <xTaskIncrementTick+0x168>)
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab22:	429a      	cmp	r2, r3
 800ab24:	d3b9      	bcc.n	800aa9a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800ab26:	2301      	movs	r3, #1
 800ab28:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ab2a:	e7b6      	b.n	800aa9a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ab2c:	4b17      	ldr	r3, [pc, #92]	@ (800ab8c <xTaskIncrementTick+0x168>)
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ab32:	4915      	ldr	r1, [pc, #84]	@ (800ab88 <xTaskIncrementTick+0x164>)
 800ab34:	4613      	mov	r3, r2
 800ab36:	009b      	lsls	r3, r3, #2
 800ab38:	4413      	add	r3, r2
 800ab3a:	009b      	lsls	r3, r3, #2
 800ab3c:	440b      	add	r3, r1
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	2b01      	cmp	r3, #1
 800ab42:	d901      	bls.n	800ab48 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800ab44:	2301      	movs	r3, #1
 800ab46:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800ab48:	4b11      	ldr	r3, [pc, #68]	@ (800ab90 <xTaskIncrementTick+0x16c>)
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d007      	beq.n	800ab60 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800ab50:	2301      	movs	r3, #1
 800ab52:	617b      	str	r3, [r7, #20]
 800ab54:	e004      	b.n	800ab60 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800ab56:	4b0f      	ldr	r3, [pc, #60]	@ (800ab94 <xTaskIncrementTick+0x170>)
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	3301      	adds	r3, #1
 800ab5c:	4a0d      	ldr	r2, [pc, #52]	@ (800ab94 <xTaskIncrementTick+0x170>)
 800ab5e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800ab60:	697b      	ldr	r3, [r7, #20]
}
 800ab62:	4618      	mov	r0, r3
 800ab64:	3718      	adds	r7, #24
 800ab66:	46bd      	mov	sp, r7
 800ab68:	bd80      	pop	{r7, pc}
 800ab6a:	bf00      	nop
 800ab6c:	24000374 	.word	0x24000374
 800ab70:	2400035c 	.word	0x2400035c
 800ab74:	2400033c 	.word	0x2400033c
 800ab78:	24000340 	.word	0x24000340
 800ab7c:	2400036c 	.word	0x2400036c
 800ab80:	24000370 	.word	0x24000370
 800ab84:	24000360 	.word	0x24000360
 800ab88:	240002b0 	.word	0x240002b0
 800ab8c:	240002ac 	.word	0x240002ac
 800ab90:	24000368 	.word	0x24000368
 800ab94:	24000364 	.word	0x24000364

0800ab98 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ab98:	b480      	push	{r7}
 800ab9a:	b087      	sub	sp, #28
 800ab9c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ab9e:	4b27      	ldr	r3, [pc, #156]	@ (800ac3c <vTaskSwitchContext+0xa4>)
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d003      	beq.n	800abae <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800aba6:	4b26      	ldr	r3, [pc, #152]	@ (800ac40 <vTaskSwitchContext+0xa8>)
 800aba8:	2201      	movs	r2, #1
 800abaa:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800abac:	e040      	b.n	800ac30 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800abae:	4b24      	ldr	r3, [pc, #144]	@ (800ac40 <vTaskSwitchContext+0xa8>)
 800abb0:	2200      	movs	r2, #0
 800abb2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800abb4:	4b23      	ldr	r3, [pc, #140]	@ (800ac44 <vTaskSwitchContext+0xac>)
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	fab3 f383 	clz	r3, r3
 800abc0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800abc2:	7afb      	ldrb	r3, [r7, #11]
 800abc4:	f1c3 031f 	rsb	r3, r3, #31
 800abc8:	617b      	str	r3, [r7, #20]
 800abca:	491f      	ldr	r1, [pc, #124]	@ (800ac48 <vTaskSwitchContext+0xb0>)
 800abcc:	697a      	ldr	r2, [r7, #20]
 800abce:	4613      	mov	r3, r2
 800abd0:	009b      	lsls	r3, r3, #2
 800abd2:	4413      	add	r3, r2
 800abd4:	009b      	lsls	r3, r3, #2
 800abd6:	440b      	add	r3, r1
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d10b      	bne.n	800abf6 <vTaskSwitchContext+0x5e>
	__asm volatile
 800abde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abe2:	f383 8811 	msr	BASEPRI, r3
 800abe6:	f3bf 8f6f 	isb	sy
 800abea:	f3bf 8f4f 	dsb	sy
 800abee:	607b      	str	r3, [r7, #4]
}
 800abf0:	bf00      	nop
 800abf2:	bf00      	nop
 800abf4:	e7fd      	b.n	800abf2 <vTaskSwitchContext+0x5a>
 800abf6:	697a      	ldr	r2, [r7, #20]
 800abf8:	4613      	mov	r3, r2
 800abfa:	009b      	lsls	r3, r3, #2
 800abfc:	4413      	add	r3, r2
 800abfe:	009b      	lsls	r3, r3, #2
 800ac00:	4a11      	ldr	r2, [pc, #68]	@ (800ac48 <vTaskSwitchContext+0xb0>)
 800ac02:	4413      	add	r3, r2
 800ac04:	613b      	str	r3, [r7, #16]
 800ac06:	693b      	ldr	r3, [r7, #16]
 800ac08:	685b      	ldr	r3, [r3, #4]
 800ac0a:	685a      	ldr	r2, [r3, #4]
 800ac0c:	693b      	ldr	r3, [r7, #16]
 800ac0e:	605a      	str	r2, [r3, #4]
 800ac10:	693b      	ldr	r3, [r7, #16]
 800ac12:	685a      	ldr	r2, [r3, #4]
 800ac14:	693b      	ldr	r3, [r7, #16]
 800ac16:	3308      	adds	r3, #8
 800ac18:	429a      	cmp	r2, r3
 800ac1a:	d104      	bne.n	800ac26 <vTaskSwitchContext+0x8e>
 800ac1c:	693b      	ldr	r3, [r7, #16]
 800ac1e:	685b      	ldr	r3, [r3, #4]
 800ac20:	685a      	ldr	r2, [r3, #4]
 800ac22:	693b      	ldr	r3, [r7, #16]
 800ac24:	605a      	str	r2, [r3, #4]
 800ac26:	693b      	ldr	r3, [r7, #16]
 800ac28:	685b      	ldr	r3, [r3, #4]
 800ac2a:	68db      	ldr	r3, [r3, #12]
 800ac2c:	4a07      	ldr	r2, [pc, #28]	@ (800ac4c <vTaskSwitchContext+0xb4>)
 800ac2e:	6013      	str	r3, [r2, #0]
}
 800ac30:	bf00      	nop
 800ac32:	371c      	adds	r7, #28
 800ac34:	46bd      	mov	sp, r7
 800ac36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac3a:	4770      	bx	lr
 800ac3c:	24000374 	.word	0x24000374
 800ac40:	24000368 	.word	0x24000368
 800ac44:	24000360 	.word	0x24000360
 800ac48:	240002b0 	.word	0x240002b0
 800ac4c:	240002ac 	.word	0x240002ac

0800ac50 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ac50:	b580      	push	{r7, lr}
 800ac52:	b086      	sub	sp, #24
 800ac54:	af00      	add	r7, sp, #0
 800ac56:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	68db      	ldr	r3, [r3, #12]
 800ac5c:	68db      	ldr	r3, [r3, #12]
 800ac5e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ac60:	693b      	ldr	r3, [r7, #16]
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d10b      	bne.n	800ac7e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800ac66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac6a:	f383 8811 	msr	BASEPRI, r3
 800ac6e:	f3bf 8f6f 	isb	sy
 800ac72:	f3bf 8f4f 	dsb	sy
 800ac76:	60fb      	str	r3, [r7, #12]
}
 800ac78:	bf00      	nop
 800ac7a:	bf00      	nop
 800ac7c:	e7fd      	b.n	800ac7a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ac7e:	693b      	ldr	r3, [r7, #16]
 800ac80:	3318      	adds	r3, #24
 800ac82:	4618      	mov	r0, r3
 800ac84:	f7ff fd34 	bl	800a6f0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ac88:	4b1d      	ldr	r3, [pc, #116]	@ (800ad00 <xTaskRemoveFromEventList+0xb0>)
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d11c      	bne.n	800acca <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ac90:	693b      	ldr	r3, [r7, #16]
 800ac92:	3304      	adds	r3, #4
 800ac94:	4618      	mov	r0, r3
 800ac96:	f7ff fd2b 	bl	800a6f0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ac9a:	693b      	ldr	r3, [r7, #16]
 800ac9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac9e:	2201      	movs	r2, #1
 800aca0:	409a      	lsls	r2, r3
 800aca2:	4b18      	ldr	r3, [pc, #96]	@ (800ad04 <xTaskRemoveFromEventList+0xb4>)
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	4313      	orrs	r3, r2
 800aca8:	4a16      	ldr	r2, [pc, #88]	@ (800ad04 <xTaskRemoveFromEventList+0xb4>)
 800acaa:	6013      	str	r3, [r2, #0]
 800acac:	693b      	ldr	r3, [r7, #16]
 800acae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800acb0:	4613      	mov	r3, r2
 800acb2:	009b      	lsls	r3, r3, #2
 800acb4:	4413      	add	r3, r2
 800acb6:	009b      	lsls	r3, r3, #2
 800acb8:	4a13      	ldr	r2, [pc, #76]	@ (800ad08 <xTaskRemoveFromEventList+0xb8>)
 800acba:	441a      	add	r2, r3
 800acbc:	693b      	ldr	r3, [r7, #16]
 800acbe:	3304      	adds	r3, #4
 800acc0:	4619      	mov	r1, r3
 800acc2:	4610      	mov	r0, r2
 800acc4:	f7ff fcf0 	bl	800a6a8 <vListInsertEnd>
 800acc8:	e005      	b.n	800acd6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800acca:	693b      	ldr	r3, [r7, #16]
 800accc:	3318      	adds	r3, #24
 800acce:	4619      	mov	r1, r3
 800acd0:	480e      	ldr	r0, [pc, #56]	@ (800ad0c <xTaskRemoveFromEventList+0xbc>)
 800acd2:	f7ff fce9 	bl	800a6a8 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800acd6:	693b      	ldr	r3, [r7, #16]
 800acd8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800acda:	4b0d      	ldr	r3, [pc, #52]	@ (800ad10 <xTaskRemoveFromEventList+0xc0>)
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ace0:	429a      	cmp	r2, r3
 800ace2:	d905      	bls.n	800acf0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ace4:	2301      	movs	r3, #1
 800ace6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ace8:	4b0a      	ldr	r3, [pc, #40]	@ (800ad14 <xTaskRemoveFromEventList+0xc4>)
 800acea:	2201      	movs	r2, #1
 800acec:	601a      	str	r2, [r3, #0]
 800acee:	e001      	b.n	800acf4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800acf0:	2300      	movs	r3, #0
 800acf2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800acf4:	697b      	ldr	r3, [r7, #20]
}
 800acf6:	4618      	mov	r0, r3
 800acf8:	3718      	adds	r7, #24
 800acfa:	46bd      	mov	sp, r7
 800acfc:	bd80      	pop	{r7, pc}
 800acfe:	bf00      	nop
 800ad00:	24000374 	.word	0x24000374
 800ad04:	24000360 	.word	0x24000360
 800ad08:	240002b0 	.word	0x240002b0
 800ad0c:	24000344 	.word	0x24000344
 800ad10:	240002ac 	.word	0x240002ac
 800ad14:	24000368 	.word	0x24000368

0800ad18 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ad18:	b480      	push	{r7}
 800ad1a:	b083      	sub	sp, #12
 800ad1c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ad1e:	4b0c      	ldr	r3, [pc, #48]	@ (800ad50 <prvResetNextTaskUnblockTime+0x38>)
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d104      	bne.n	800ad32 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ad28:	4b0a      	ldr	r3, [pc, #40]	@ (800ad54 <prvResetNextTaskUnblockTime+0x3c>)
 800ad2a:	f04f 32ff 	mov.w	r2, #4294967295
 800ad2e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ad30:	e008      	b.n	800ad44 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ad32:	4b07      	ldr	r3, [pc, #28]	@ (800ad50 <prvResetNextTaskUnblockTime+0x38>)
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	68db      	ldr	r3, [r3, #12]
 800ad38:	68db      	ldr	r3, [r3, #12]
 800ad3a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	685b      	ldr	r3, [r3, #4]
 800ad40:	4a04      	ldr	r2, [pc, #16]	@ (800ad54 <prvResetNextTaskUnblockTime+0x3c>)
 800ad42:	6013      	str	r3, [r2, #0]
}
 800ad44:	bf00      	nop
 800ad46:	370c      	adds	r7, #12
 800ad48:	46bd      	mov	sp, r7
 800ad4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad4e:	4770      	bx	lr
 800ad50:	2400033c 	.word	0x2400033c
 800ad54:	24000370 	.word	0x24000370
	...

0800ad60 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ad60:	4b07      	ldr	r3, [pc, #28]	@ (800ad80 <pxCurrentTCBConst2>)
 800ad62:	6819      	ldr	r1, [r3, #0]
 800ad64:	6808      	ldr	r0, [r1, #0]
 800ad66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad6a:	f380 8809 	msr	PSP, r0
 800ad6e:	f3bf 8f6f 	isb	sy
 800ad72:	f04f 0000 	mov.w	r0, #0
 800ad76:	f380 8811 	msr	BASEPRI, r0
 800ad7a:	4770      	bx	lr
 800ad7c:	f3af 8000 	nop.w

0800ad80 <pxCurrentTCBConst2>:
 800ad80:	240002ac 	.word	0x240002ac
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ad84:	bf00      	nop
 800ad86:	bf00      	nop

0800ad88 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ad88:	b480      	push	{r7}
 800ad8a:	b083      	sub	sp, #12
 800ad8c:	af00      	add	r7, sp, #0
	__asm volatile
 800ad8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad92:	f383 8811 	msr	BASEPRI, r3
 800ad96:	f3bf 8f6f 	isb	sy
 800ad9a:	f3bf 8f4f 	dsb	sy
 800ad9e:	607b      	str	r3, [r7, #4]
}
 800ada0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ada2:	4b10      	ldr	r3, [pc, #64]	@ (800ade4 <vPortEnterCritical+0x5c>)
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	3301      	adds	r3, #1
 800ada8:	4a0e      	ldr	r2, [pc, #56]	@ (800ade4 <vPortEnterCritical+0x5c>)
 800adaa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800adac:	4b0d      	ldr	r3, [pc, #52]	@ (800ade4 <vPortEnterCritical+0x5c>)
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	2b01      	cmp	r3, #1
 800adb2:	d110      	bne.n	800add6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800adb4:	4b0c      	ldr	r3, [pc, #48]	@ (800ade8 <vPortEnterCritical+0x60>)
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	b2db      	uxtb	r3, r3
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d00b      	beq.n	800add6 <vPortEnterCritical+0x4e>
	__asm volatile
 800adbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800adc2:	f383 8811 	msr	BASEPRI, r3
 800adc6:	f3bf 8f6f 	isb	sy
 800adca:	f3bf 8f4f 	dsb	sy
 800adce:	603b      	str	r3, [r7, #0]
}
 800add0:	bf00      	nop
 800add2:	bf00      	nop
 800add4:	e7fd      	b.n	800add2 <vPortEnterCritical+0x4a>
	}
}
 800add6:	bf00      	nop
 800add8:	370c      	adds	r7, #12
 800adda:	46bd      	mov	sp, r7
 800addc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade0:	4770      	bx	lr
 800ade2:	bf00      	nop
 800ade4:	24000010 	.word	0x24000010
 800ade8:	e000ed04 	.word	0xe000ed04

0800adec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800adec:	b480      	push	{r7}
 800adee:	b083      	sub	sp, #12
 800adf0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800adf2:	4b12      	ldr	r3, [pc, #72]	@ (800ae3c <vPortExitCritical+0x50>)
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d10b      	bne.n	800ae12 <vPortExitCritical+0x26>
	__asm volatile
 800adfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800adfe:	f383 8811 	msr	BASEPRI, r3
 800ae02:	f3bf 8f6f 	isb	sy
 800ae06:	f3bf 8f4f 	dsb	sy
 800ae0a:	607b      	str	r3, [r7, #4]
}
 800ae0c:	bf00      	nop
 800ae0e:	bf00      	nop
 800ae10:	e7fd      	b.n	800ae0e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ae12:	4b0a      	ldr	r3, [pc, #40]	@ (800ae3c <vPortExitCritical+0x50>)
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	3b01      	subs	r3, #1
 800ae18:	4a08      	ldr	r2, [pc, #32]	@ (800ae3c <vPortExitCritical+0x50>)
 800ae1a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ae1c:	4b07      	ldr	r3, [pc, #28]	@ (800ae3c <vPortExitCritical+0x50>)
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d105      	bne.n	800ae30 <vPortExitCritical+0x44>
 800ae24:	2300      	movs	r3, #0
 800ae26:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ae28:	683b      	ldr	r3, [r7, #0]
 800ae2a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ae2e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ae30:	bf00      	nop
 800ae32:	370c      	adds	r7, #12
 800ae34:	46bd      	mov	sp, r7
 800ae36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae3a:	4770      	bx	lr
 800ae3c:	24000010 	.word	0x24000010

0800ae40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ae40:	f3ef 8009 	mrs	r0, PSP
 800ae44:	f3bf 8f6f 	isb	sy
 800ae48:	4b15      	ldr	r3, [pc, #84]	@ (800aea0 <pxCurrentTCBConst>)
 800ae4a:	681a      	ldr	r2, [r3, #0]
 800ae4c:	f01e 0f10 	tst.w	lr, #16
 800ae50:	bf08      	it	eq
 800ae52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ae56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae5a:	6010      	str	r0, [r2, #0]
 800ae5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ae60:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800ae64:	f380 8811 	msr	BASEPRI, r0
 800ae68:	f3bf 8f4f 	dsb	sy
 800ae6c:	f3bf 8f6f 	isb	sy
 800ae70:	f7ff fe92 	bl	800ab98 <vTaskSwitchContext>
 800ae74:	f04f 0000 	mov.w	r0, #0
 800ae78:	f380 8811 	msr	BASEPRI, r0
 800ae7c:	bc09      	pop	{r0, r3}
 800ae7e:	6819      	ldr	r1, [r3, #0]
 800ae80:	6808      	ldr	r0, [r1, #0]
 800ae82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae86:	f01e 0f10 	tst.w	lr, #16
 800ae8a:	bf08      	it	eq
 800ae8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ae90:	f380 8809 	msr	PSP, r0
 800ae94:	f3bf 8f6f 	isb	sy
 800ae98:	4770      	bx	lr
 800ae9a:	bf00      	nop
 800ae9c:	f3af 8000 	nop.w

0800aea0 <pxCurrentTCBConst>:
 800aea0:	240002ac 	.word	0x240002ac
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800aea4:	bf00      	nop
 800aea6:	bf00      	nop

0800aea8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800aea8:	b580      	push	{r7, lr}
 800aeaa:	b082      	sub	sp, #8
 800aeac:	af00      	add	r7, sp, #0
	__asm volatile
 800aeae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aeb2:	f383 8811 	msr	BASEPRI, r3
 800aeb6:	f3bf 8f6f 	isb	sy
 800aeba:	f3bf 8f4f 	dsb	sy
 800aebe:	607b      	str	r3, [r7, #4]
}
 800aec0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800aec2:	f7ff fdaf 	bl	800aa24 <xTaskIncrementTick>
 800aec6:	4603      	mov	r3, r0
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d003      	beq.n	800aed4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800aecc:	4b06      	ldr	r3, [pc, #24]	@ (800aee8 <SysTick_Handler+0x40>)
 800aece:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aed2:	601a      	str	r2, [r3, #0]
 800aed4:	2300      	movs	r3, #0
 800aed6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800aed8:	683b      	ldr	r3, [r7, #0]
 800aeda:	f383 8811 	msr	BASEPRI, r3
}
 800aede:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800aee0:	bf00      	nop
 800aee2:	3708      	adds	r7, #8
 800aee4:	46bd      	mov	sp, r7
 800aee6:	bd80      	pop	{r7, pc}
 800aee8:	e000ed04 	.word	0xe000ed04

0800aeec <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800aeec:	b580      	push	{r7, lr}
 800aeee:	b08a      	sub	sp, #40	@ 0x28
 800aef0:	af00      	add	r7, sp, #0
 800aef2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800aef4:	2300      	movs	r3, #0
 800aef6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800aef8:	f7ff fce8 	bl	800a8cc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800aefc:	4b5c      	ldr	r3, [pc, #368]	@ (800b070 <pvPortMalloc+0x184>)
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	2b00      	cmp	r3, #0
 800af02:	d101      	bne.n	800af08 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800af04:	f000 f8c0 	bl	800b088 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800af08:	4b5a      	ldr	r3, [pc, #360]	@ (800b074 <pvPortMalloc+0x188>)
 800af0a:	681a      	ldr	r2, [r3, #0]
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	4013      	ands	r3, r2
 800af10:	2b00      	cmp	r3, #0
 800af12:	f040 8095 	bne.w	800b040 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d01e      	beq.n	800af5a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800af1c:	2208      	movs	r2, #8
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	4413      	add	r3, r2
 800af22:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	f003 0307 	and.w	r3, r3, #7
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d015      	beq.n	800af5a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	f023 0307 	bic.w	r3, r3, #7
 800af34:	3308      	adds	r3, #8
 800af36:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	f003 0307 	and.w	r3, r3, #7
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d00b      	beq.n	800af5a <pvPortMalloc+0x6e>
	__asm volatile
 800af42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af46:	f383 8811 	msr	BASEPRI, r3
 800af4a:	f3bf 8f6f 	isb	sy
 800af4e:	f3bf 8f4f 	dsb	sy
 800af52:	617b      	str	r3, [r7, #20]
}
 800af54:	bf00      	nop
 800af56:	bf00      	nop
 800af58:	e7fd      	b.n	800af56 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d06f      	beq.n	800b040 <pvPortMalloc+0x154>
 800af60:	4b45      	ldr	r3, [pc, #276]	@ (800b078 <pvPortMalloc+0x18c>)
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	687a      	ldr	r2, [r7, #4]
 800af66:	429a      	cmp	r2, r3
 800af68:	d86a      	bhi.n	800b040 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800af6a:	4b44      	ldr	r3, [pc, #272]	@ (800b07c <pvPortMalloc+0x190>)
 800af6c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800af6e:	4b43      	ldr	r3, [pc, #268]	@ (800b07c <pvPortMalloc+0x190>)
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800af74:	e004      	b.n	800af80 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800af76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af78:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800af7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800af80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af82:	685b      	ldr	r3, [r3, #4]
 800af84:	687a      	ldr	r2, [r7, #4]
 800af86:	429a      	cmp	r2, r3
 800af88:	d903      	bls.n	800af92 <pvPortMalloc+0xa6>
 800af8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d1f1      	bne.n	800af76 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800af92:	4b37      	ldr	r3, [pc, #220]	@ (800b070 <pvPortMalloc+0x184>)
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800af98:	429a      	cmp	r2, r3
 800af9a:	d051      	beq.n	800b040 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800af9c:	6a3b      	ldr	r3, [r7, #32]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	2208      	movs	r2, #8
 800afa2:	4413      	add	r3, r2
 800afa4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800afa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afa8:	681a      	ldr	r2, [r3, #0]
 800afaa:	6a3b      	ldr	r3, [r7, #32]
 800afac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800afae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afb0:	685a      	ldr	r2, [r3, #4]
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	1ad2      	subs	r2, r2, r3
 800afb6:	2308      	movs	r3, #8
 800afb8:	005b      	lsls	r3, r3, #1
 800afba:	429a      	cmp	r2, r3
 800afbc:	d920      	bls.n	800b000 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800afbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	4413      	add	r3, r2
 800afc4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800afc6:	69bb      	ldr	r3, [r7, #24]
 800afc8:	f003 0307 	and.w	r3, r3, #7
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d00b      	beq.n	800afe8 <pvPortMalloc+0xfc>
	__asm volatile
 800afd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afd4:	f383 8811 	msr	BASEPRI, r3
 800afd8:	f3bf 8f6f 	isb	sy
 800afdc:	f3bf 8f4f 	dsb	sy
 800afe0:	613b      	str	r3, [r7, #16]
}
 800afe2:	bf00      	nop
 800afe4:	bf00      	nop
 800afe6:	e7fd      	b.n	800afe4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800afe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afea:	685a      	ldr	r2, [r3, #4]
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	1ad2      	subs	r2, r2, r3
 800aff0:	69bb      	ldr	r3, [r7, #24]
 800aff2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800aff4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aff6:	687a      	ldr	r2, [r7, #4]
 800aff8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800affa:	69b8      	ldr	r0, [r7, #24]
 800affc:	f000 f8a6 	bl	800b14c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b000:	4b1d      	ldr	r3, [pc, #116]	@ (800b078 <pvPortMalloc+0x18c>)
 800b002:	681a      	ldr	r2, [r3, #0]
 800b004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b006:	685b      	ldr	r3, [r3, #4]
 800b008:	1ad3      	subs	r3, r2, r3
 800b00a:	4a1b      	ldr	r2, [pc, #108]	@ (800b078 <pvPortMalloc+0x18c>)
 800b00c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b00e:	4b1a      	ldr	r3, [pc, #104]	@ (800b078 <pvPortMalloc+0x18c>)
 800b010:	681a      	ldr	r2, [r3, #0]
 800b012:	4b1b      	ldr	r3, [pc, #108]	@ (800b080 <pvPortMalloc+0x194>)
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	429a      	cmp	r2, r3
 800b018:	d203      	bcs.n	800b022 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b01a:	4b17      	ldr	r3, [pc, #92]	@ (800b078 <pvPortMalloc+0x18c>)
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	4a18      	ldr	r2, [pc, #96]	@ (800b080 <pvPortMalloc+0x194>)
 800b020:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b024:	685a      	ldr	r2, [r3, #4]
 800b026:	4b13      	ldr	r3, [pc, #76]	@ (800b074 <pvPortMalloc+0x188>)
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	431a      	orrs	r2, r3
 800b02c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b02e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b032:	2200      	movs	r2, #0
 800b034:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b036:	4b13      	ldr	r3, [pc, #76]	@ (800b084 <pvPortMalloc+0x198>)
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	3301      	adds	r3, #1
 800b03c:	4a11      	ldr	r2, [pc, #68]	@ (800b084 <pvPortMalloc+0x198>)
 800b03e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b040:	f7ff fc52 	bl	800a8e8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b044:	69fb      	ldr	r3, [r7, #28]
 800b046:	f003 0307 	and.w	r3, r3, #7
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d00b      	beq.n	800b066 <pvPortMalloc+0x17a>
	__asm volatile
 800b04e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b052:	f383 8811 	msr	BASEPRI, r3
 800b056:	f3bf 8f6f 	isb	sy
 800b05a:	f3bf 8f4f 	dsb	sy
 800b05e:	60fb      	str	r3, [r7, #12]
}
 800b060:	bf00      	nop
 800b062:	bf00      	nop
 800b064:	e7fd      	b.n	800b062 <pvPortMalloc+0x176>
	return pvReturn;
 800b066:	69fb      	ldr	r3, [r7, #28]
}
 800b068:	4618      	mov	r0, r3
 800b06a:	3728      	adds	r7, #40	@ 0x28
 800b06c:	46bd      	mov	sp, r7
 800b06e:	bd80      	pop	{r7, pc}
 800b070:	24003f80 	.word	0x24003f80
 800b074:	24003f90 	.word	0x24003f90
 800b078:	24003f84 	.word	0x24003f84
 800b07c:	24003f78 	.word	0x24003f78
 800b080:	24003f88 	.word	0x24003f88
 800b084:	24003f8c 	.word	0x24003f8c

0800b088 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b088:	b480      	push	{r7}
 800b08a:	b085      	sub	sp, #20
 800b08c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b08e:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800b092:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b094:	4b27      	ldr	r3, [pc, #156]	@ (800b134 <prvHeapInit+0xac>)
 800b096:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	f003 0307 	and.w	r3, r3, #7
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d00c      	beq.n	800b0bc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	3307      	adds	r3, #7
 800b0a6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	f023 0307 	bic.w	r3, r3, #7
 800b0ae:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b0b0:	68ba      	ldr	r2, [r7, #8]
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	1ad3      	subs	r3, r2, r3
 800b0b6:	4a1f      	ldr	r2, [pc, #124]	@ (800b134 <prvHeapInit+0xac>)
 800b0b8:	4413      	add	r3, r2
 800b0ba:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b0c0:	4a1d      	ldr	r2, [pc, #116]	@ (800b138 <prvHeapInit+0xb0>)
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b0c6:	4b1c      	ldr	r3, [pc, #112]	@ (800b138 <prvHeapInit+0xb0>)
 800b0c8:	2200      	movs	r2, #0
 800b0ca:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	68ba      	ldr	r2, [r7, #8]
 800b0d0:	4413      	add	r3, r2
 800b0d2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b0d4:	2208      	movs	r2, #8
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	1a9b      	subs	r3, r3, r2
 800b0da:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	f023 0307 	bic.w	r3, r3, #7
 800b0e2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	4a15      	ldr	r2, [pc, #84]	@ (800b13c <prvHeapInit+0xb4>)
 800b0e8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b0ea:	4b14      	ldr	r3, [pc, #80]	@ (800b13c <prvHeapInit+0xb4>)
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	2200      	movs	r2, #0
 800b0f0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b0f2:	4b12      	ldr	r3, [pc, #72]	@ (800b13c <prvHeapInit+0xb4>)
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	2200      	movs	r2, #0
 800b0f8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b0fe:	683b      	ldr	r3, [r7, #0]
 800b100:	68fa      	ldr	r2, [r7, #12]
 800b102:	1ad2      	subs	r2, r2, r3
 800b104:	683b      	ldr	r3, [r7, #0]
 800b106:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b108:	4b0c      	ldr	r3, [pc, #48]	@ (800b13c <prvHeapInit+0xb4>)
 800b10a:	681a      	ldr	r2, [r3, #0]
 800b10c:	683b      	ldr	r3, [r7, #0]
 800b10e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b110:	683b      	ldr	r3, [r7, #0]
 800b112:	685b      	ldr	r3, [r3, #4]
 800b114:	4a0a      	ldr	r2, [pc, #40]	@ (800b140 <prvHeapInit+0xb8>)
 800b116:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b118:	683b      	ldr	r3, [r7, #0]
 800b11a:	685b      	ldr	r3, [r3, #4]
 800b11c:	4a09      	ldr	r2, [pc, #36]	@ (800b144 <prvHeapInit+0xbc>)
 800b11e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b120:	4b09      	ldr	r3, [pc, #36]	@ (800b148 <prvHeapInit+0xc0>)
 800b122:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800b126:	601a      	str	r2, [r3, #0]
}
 800b128:	bf00      	nop
 800b12a:	3714      	adds	r7, #20
 800b12c:	46bd      	mov	sp, r7
 800b12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b132:	4770      	bx	lr
 800b134:	24000378 	.word	0x24000378
 800b138:	24003f78 	.word	0x24003f78
 800b13c:	24003f80 	.word	0x24003f80
 800b140:	24003f88 	.word	0x24003f88
 800b144:	24003f84 	.word	0x24003f84
 800b148:	24003f90 	.word	0x24003f90

0800b14c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b14c:	b480      	push	{r7}
 800b14e:	b085      	sub	sp, #20
 800b150:	af00      	add	r7, sp, #0
 800b152:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b154:	4b28      	ldr	r3, [pc, #160]	@ (800b1f8 <prvInsertBlockIntoFreeList+0xac>)
 800b156:	60fb      	str	r3, [r7, #12]
 800b158:	e002      	b.n	800b160 <prvInsertBlockIntoFreeList+0x14>
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	60fb      	str	r3, [r7, #12]
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	687a      	ldr	r2, [r7, #4]
 800b166:	429a      	cmp	r2, r3
 800b168:	d8f7      	bhi.n	800b15a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	685b      	ldr	r3, [r3, #4]
 800b172:	68ba      	ldr	r2, [r7, #8]
 800b174:	4413      	add	r3, r2
 800b176:	687a      	ldr	r2, [r7, #4]
 800b178:	429a      	cmp	r2, r3
 800b17a:	d108      	bne.n	800b18e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	685a      	ldr	r2, [r3, #4]
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	685b      	ldr	r3, [r3, #4]
 800b184:	441a      	add	r2, r3
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	685b      	ldr	r3, [r3, #4]
 800b196:	68ba      	ldr	r2, [r7, #8]
 800b198:	441a      	add	r2, r3
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	429a      	cmp	r2, r3
 800b1a0:	d118      	bne.n	800b1d4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	681a      	ldr	r2, [r3, #0]
 800b1a6:	4b15      	ldr	r3, [pc, #84]	@ (800b1fc <prvInsertBlockIntoFreeList+0xb0>)
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	429a      	cmp	r2, r3
 800b1ac:	d00d      	beq.n	800b1ca <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	685a      	ldr	r2, [r3, #4]
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	685b      	ldr	r3, [r3, #4]
 800b1b8:	441a      	add	r2, r3
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	681a      	ldr	r2, [r3, #0]
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	601a      	str	r2, [r3, #0]
 800b1c8:	e008      	b.n	800b1dc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b1ca:	4b0c      	ldr	r3, [pc, #48]	@ (800b1fc <prvInsertBlockIntoFreeList+0xb0>)
 800b1cc:	681a      	ldr	r2, [r3, #0]
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	601a      	str	r2, [r3, #0]
 800b1d2:	e003      	b.n	800b1dc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	681a      	ldr	r2, [r3, #0]
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b1dc:	68fa      	ldr	r2, [r7, #12]
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	429a      	cmp	r2, r3
 800b1e2:	d002      	beq.n	800b1ea <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	687a      	ldr	r2, [r7, #4]
 800b1e8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b1ea:	bf00      	nop
 800b1ec:	3714      	adds	r7, #20
 800b1ee:	46bd      	mov	sp, r7
 800b1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f4:	4770      	bx	lr
 800b1f6:	bf00      	nop
 800b1f8:	24003f78 	.word	0x24003f78
 800b1fc:	24003f80 	.word	0x24003f80

0800b200 <malloc>:
 800b200:	4b02      	ldr	r3, [pc, #8]	@ (800b20c <malloc+0xc>)
 800b202:	4601      	mov	r1, r0
 800b204:	6818      	ldr	r0, [r3, #0]
 800b206:	f000 b825 	b.w	800b254 <_malloc_r>
 800b20a:	bf00      	nop
 800b20c:	24000014 	.word	0x24000014

0800b210 <sbrk_aligned>:
 800b210:	b570      	push	{r4, r5, r6, lr}
 800b212:	4e0f      	ldr	r6, [pc, #60]	@ (800b250 <sbrk_aligned+0x40>)
 800b214:	460c      	mov	r4, r1
 800b216:	6831      	ldr	r1, [r6, #0]
 800b218:	4605      	mov	r5, r0
 800b21a:	b911      	cbnz	r1, 800b222 <sbrk_aligned+0x12>
 800b21c:	f000 f8ae 	bl	800b37c <_sbrk_r>
 800b220:	6030      	str	r0, [r6, #0]
 800b222:	4621      	mov	r1, r4
 800b224:	4628      	mov	r0, r5
 800b226:	f000 f8a9 	bl	800b37c <_sbrk_r>
 800b22a:	1c43      	adds	r3, r0, #1
 800b22c:	d103      	bne.n	800b236 <sbrk_aligned+0x26>
 800b22e:	f04f 34ff 	mov.w	r4, #4294967295
 800b232:	4620      	mov	r0, r4
 800b234:	bd70      	pop	{r4, r5, r6, pc}
 800b236:	1cc4      	adds	r4, r0, #3
 800b238:	f024 0403 	bic.w	r4, r4, #3
 800b23c:	42a0      	cmp	r0, r4
 800b23e:	d0f8      	beq.n	800b232 <sbrk_aligned+0x22>
 800b240:	1a21      	subs	r1, r4, r0
 800b242:	4628      	mov	r0, r5
 800b244:	f000 f89a 	bl	800b37c <_sbrk_r>
 800b248:	3001      	adds	r0, #1
 800b24a:	d1f2      	bne.n	800b232 <sbrk_aligned+0x22>
 800b24c:	e7ef      	b.n	800b22e <sbrk_aligned+0x1e>
 800b24e:	bf00      	nop
 800b250:	24003f94 	.word	0x24003f94

0800b254 <_malloc_r>:
 800b254:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b258:	1ccd      	adds	r5, r1, #3
 800b25a:	f025 0503 	bic.w	r5, r5, #3
 800b25e:	3508      	adds	r5, #8
 800b260:	2d0c      	cmp	r5, #12
 800b262:	bf38      	it	cc
 800b264:	250c      	movcc	r5, #12
 800b266:	2d00      	cmp	r5, #0
 800b268:	4606      	mov	r6, r0
 800b26a:	db01      	blt.n	800b270 <_malloc_r+0x1c>
 800b26c:	42a9      	cmp	r1, r5
 800b26e:	d904      	bls.n	800b27a <_malloc_r+0x26>
 800b270:	230c      	movs	r3, #12
 800b272:	6033      	str	r3, [r6, #0]
 800b274:	2000      	movs	r0, #0
 800b276:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b27a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b350 <_malloc_r+0xfc>
 800b27e:	f000 f869 	bl	800b354 <__malloc_lock>
 800b282:	f8d8 3000 	ldr.w	r3, [r8]
 800b286:	461c      	mov	r4, r3
 800b288:	bb44      	cbnz	r4, 800b2dc <_malloc_r+0x88>
 800b28a:	4629      	mov	r1, r5
 800b28c:	4630      	mov	r0, r6
 800b28e:	f7ff ffbf 	bl	800b210 <sbrk_aligned>
 800b292:	1c43      	adds	r3, r0, #1
 800b294:	4604      	mov	r4, r0
 800b296:	d158      	bne.n	800b34a <_malloc_r+0xf6>
 800b298:	f8d8 4000 	ldr.w	r4, [r8]
 800b29c:	4627      	mov	r7, r4
 800b29e:	2f00      	cmp	r7, #0
 800b2a0:	d143      	bne.n	800b32a <_malloc_r+0xd6>
 800b2a2:	2c00      	cmp	r4, #0
 800b2a4:	d04b      	beq.n	800b33e <_malloc_r+0xea>
 800b2a6:	6823      	ldr	r3, [r4, #0]
 800b2a8:	4639      	mov	r1, r7
 800b2aa:	4630      	mov	r0, r6
 800b2ac:	eb04 0903 	add.w	r9, r4, r3
 800b2b0:	f000 f864 	bl	800b37c <_sbrk_r>
 800b2b4:	4581      	cmp	r9, r0
 800b2b6:	d142      	bne.n	800b33e <_malloc_r+0xea>
 800b2b8:	6821      	ldr	r1, [r4, #0]
 800b2ba:	1a6d      	subs	r5, r5, r1
 800b2bc:	4629      	mov	r1, r5
 800b2be:	4630      	mov	r0, r6
 800b2c0:	f7ff ffa6 	bl	800b210 <sbrk_aligned>
 800b2c4:	3001      	adds	r0, #1
 800b2c6:	d03a      	beq.n	800b33e <_malloc_r+0xea>
 800b2c8:	6823      	ldr	r3, [r4, #0]
 800b2ca:	442b      	add	r3, r5
 800b2cc:	6023      	str	r3, [r4, #0]
 800b2ce:	f8d8 3000 	ldr.w	r3, [r8]
 800b2d2:	685a      	ldr	r2, [r3, #4]
 800b2d4:	bb62      	cbnz	r2, 800b330 <_malloc_r+0xdc>
 800b2d6:	f8c8 7000 	str.w	r7, [r8]
 800b2da:	e00f      	b.n	800b2fc <_malloc_r+0xa8>
 800b2dc:	6822      	ldr	r2, [r4, #0]
 800b2de:	1b52      	subs	r2, r2, r5
 800b2e0:	d420      	bmi.n	800b324 <_malloc_r+0xd0>
 800b2e2:	2a0b      	cmp	r2, #11
 800b2e4:	d917      	bls.n	800b316 <_malloc_r+0xc2>
 800b2e6:	1961      	adds	r1, r4, r5
 800b2e8:	42a3      	cmp	r3, r4
 800b2ea:	6025      	str	r5, [r4, #0]
 800b2ec:	bf18      	it	ne
 800b2ee:	6059      	strne	r1, [r3, #4]
 800b2f0:	6863      	ldr	r3, [r4, #4]
 800b2f2:	bf08      	it	eq
 800b2f4:	f8c8 1000 	streq.w	r1, [r8]
 800b2f8:	5162      	str	r2, [r4, r5]
 800b2fa:	604b      	str	r3, [r1, #4]
 800b2fc:	4630      	mov	r0, r6
 800b2fe:	f000 f82f 	bl	800b360 <__malloc_unlock>
 800b302:	f104 000b 	add.w	r0, r4, #11
 800b306:	1d23      	adds	r3, r4, #4
 800b308:	f020 0007 	bic.w	r0, r0, #7
 800b30c:	1ac2      	subs	r2, r0, r3
 800b30e:	bf1c      	itt	ne
 800b310:	1a1b      	subne	r3, r3, r0
 800b312:	50a3      	strne	r3, [r4, r2]
 800b314:	e7af      	b.n	800b276 <_malloc_r+0x22>
 800b316:	6862      	ldr	r2, [r4, #4]
 800b318:	42a3      	cmp	r3, r4
 800b31a:	bf0c      	ite	eq
 800b31c:	f8c8 2000 	streq.w	r2, [r8]
 800b320:	605a      	strne	r2, [r3, #4]
 800b322:	e7eb      	b.n	800b2fc <_malloc_r+0xa8>
 800b324:	4623      	mov	r3, r4
 800b326:	6864      	ldr	r4, [r4, #4]
 800b328:	e7ae      	b.n	800b288 <_malloc_r+0x34>
 800b32a:	463c      	mov	r4, r7
 800b32c:	687f      	ldr	r7, [r7, #4]
 800b32e:	e7b6      	b.n	800b29e <_malloc_r+0x4a>
 800b330:	461a      	mov	r2, r3
 800b332:	685b      	ldr	r3, [r3, #4]
 800b334:	42a3      	cmp	r3, r4
 800b336:	d1fb      	bne.n	800b330 <_malloc_r+0xdc>
 800b338:	2300      	movs	r3, #0
 800b33a:	6053      	str	r3, [r2, #4]
 800b33c:	e7de      	b.n	800b2fc <_malloc_r+0xa8>
 800b33e:	230c      	movs	r3, #12
 800b340:	6033      	str	r3, [r6, #0]
 800b342:	4630      	mov	r0, r6
 800b344:	f000 f80c 	bl	800b360 <__malloc_unlock>
 800b348:	e794      	b.n	800b274 <_malloc_r+0x20>
 800b34a:	6005      	str	r5, [r0, #0]
 800b34c:	e7d6      	b.n	800b2fc <_malloc_r+0xa8>
 800b34e:	bf00      	nop
 800b350:	24003f98 	.word	0x24003f98

0800b354 <__malloc_lock>:
 800b354:	4801      	ldr	r0, [pc, #4]	@ (800b35c <__malloc_lock+0x8>)
 800b356:	f000 b84b 	b.w	800b3f0 <__retarget_lock_acquire_recursive>
 800b35a:	bf00      	nop
 800b35c:	240040d8 	.word	0x240040d8

0800b360 <__malloc_unlock>:
 800b360:	4801      	ldr	r0, [pc, #4]	@ (800b368 <__malloc_unlock+0x8>)
 800b362:	f000 b846 	b.w	800b3f2 <__retarget_lock_release_recursive>
 800b366:	bf00      	nop
 800b368:	240040d8 	.word	0x240040d8

0800b36c <memset>:
 800b36c:	4402      	add	r2, r0
 800b36e:	4603      	mov	r3, r0
 800b370:	4293      	cmp	r3, r2
 800b372:	d100      	bne.n	800b376 <memset+0xa>
 800b374:	4770      	bx	lr
 800b376:	f803 1b01 	strb.w	r1, [r3], #1
 800b37a:	e7f9      	b.n	800b370 <memset+0x4>

0800b37c <_sbrk_r>:
 800b37c:	b538      	push	{r3, r4, r5, lr}
 800b37e:	4d06      	ldr	r5, [pc, #24]	@ (800b398 <_sbrk_r+0x1c>)
 800b380:	2300      	movs	r3, #0
 800b382:	4604      	mov	r4, r0
 800b384:	4608      	mov	r0, r1
 800b386:	602b      	str	r3, [r5, #0]
 800b388:	f7f5 fc6e 	bl	8000c68 <_sbrk>
 800b38c:	1c43      	adds	r3, r0, #1
 800b38e:	d102      	bne.n	800b396 <_sbrk_r+0x1a>
 800b390:	682b      	ldr	r3, [r5, #0]
 800b392:	b103      	cbz	r3, 800b396 <_sbrk_r+0x1a>
 800b394:	6023      	str	r3, [r4, #0]
 800b396:	bd38      	pop	{r3, r4, r5, pc}
 800b398:	240040d4 	.word	0x240040d4

0800b39c <__errno>:
 800b39c:	4b01      	ldr	r3, [pc, #4]	@ (800b3a4 <__errno+0x8>)
 800b39e:	6818      	ldr	r0, [r3, #0]
 800b3a0:	4770      	bx	lr
 800b3a2:	bf00      	nop
 800b3a4:	24000014 	.word	0x24000014

0800b3a8 <__libc_init_array>:
 800b3a8:	b570      	push	{r4, r5, r6, lr}
 800b3aa:	4d0d      	ldr	r5, [pc, #52]	@ (800b3e0 <__libc_init_array+0x38>)
 800b3ac:	4c0d      	ldr	r4, [pc, #52]	@ (800b3e4 <__libc_init_array+0x3c>)
 800b3ae:	1b64      	subs	r4, r4, r5
 800b3b0:	10a4      	asrs	r4, r4, #2
 800b3b2:	2600      	movs	r6, #0
 800b3b4:	42a6      	cmp	r6, r4
 800b3b6:	d109      	bne.n	800b3cc <__libc_init_array+0x24>
 800b3b8:	4d0b      	ldr	r5, [pc, #44]	@ (800b3e8 <__libc_init_array+0x40>)
 800b3ba:	4c0c      	ldr	r4, [pc, #48]	@ (800b3ec <__libc_init_array+0x44>)
 800b3bc:	f000 f828 	bl	800b410 <_init>
 800b3c0:	1b64      	subs	r4, r4, r5
 800b3c2:	10a4      	asrs	r4, r4, #2
 800b3c4:	2600      	movs	r6, #0
 800b3c6:	42a6      	cmp	r6, r4
 800b3c8:	d105      	bne.n	800b3d6 <__libc_init_array+0x2e>
 800b3ca:	bd70      	pop	{r4, r5, r6, pc}
 800b3cc:	f855 3b04 	ldr.w	r3, [r5], #4
 800b3d0:	4798      	blx	r3
 800b3d2:	3601      	adds	r6, #1
 800b3d4:	e7ee      	b.n	800b3b4 <__libc_init_array+0xc>
 800b3d6:	f855 3b04 	ldr.w	r3, [r5], #4
 800b3da:	4798      	blx	r3
 800b3dc:	3601      	adds	r6, #1
 800b3de:	e7f2      	b.n	800b3c6 <__libc_init_array+0x1e>
 800b3e0:	0800b47c 	.word	0x0800b47c
 800b3e4:	0800b47c 	.word	0x0800b47c
 800b3e8:	0800b47c 	.word	0x0800b47c
 800b3ec:	0800b480 	.word	0x0800b480

0800b3f0 <__retarget_lock_acquire_recursive>:
 800b3f0:	4770      	bx	lr

0800b3f2 <__retarget_lock_release_recursive>:
 800b3f2:	4770      	bx	lr

0800b3f4 <memcpy>:
 800b3f4:	440a      	add	r2, r1
 800b3f6:	4291      	cmp	r1, r2
 800b3f8:	f100 33ff 	add.w	r3, r0, #4294967295
 800b3fc:	d100      	bne.n	800b400 <memcpy+0xc>
 800b3fe:	4770      	bx	lr
 800b400:	b510      	push	{r4, lr}
 800b402:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b406:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b40a:	4291      	cmp	r1, r2
 800b40c:	d1f9      	bne.n	800b402 <memcpy+0xe>
 800b40e:	bd10      	pop	{r4, pc}

0800b410 <_init>:
 800b410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b412:	bf00      	nop
 800b414:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b416:	bc08      	pop	{r3}
 800b418:	469e      	mov	lr, r3
 800b41a:	4770      	bx	lr

0800b41c <_fini>:
 800b41c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b41e:	bf00      	nop
 800b420:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b422:	bc08      	pop	{r3}
 800b424:	469e      	mov	lr, r3
 800b426:	4770      	bx	lr
