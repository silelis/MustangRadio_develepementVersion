/*
 * esp32i2sComunicationDriver.cpp
 *
 *  Created on: Aug 2, 2024
 *      Author: dbank
 */

//#include "esp32i2cComunicationDriver.h"
#include "SileliS_code/esp32i2cComunicationDriver.h"


/********************************************************************
 * @brief  Konstruktor klasy esp32_i2cComunicationDriver
 *
 * Klasa esp32_i2cComunicationDriver służy do zapewnienia komunikacji
 * pomięszy stm32 (master), a esp32 (svlave) po magistrali i2c.
 *
 * @param  [pointer_to_i2cMasterObject] [i2cMaster*] Wskaźnik do obiektu
 * 			klasy i2cMaster, odpowiadającej za kontrolę komunikacji stm32
 * 			jako master po magistrali i2c.
 *
 * @return [NONE]
 *
 * @note   NONE
 * @warning NONE
 *******************************************************************/
esp32_i2cComunicationDriver::esp32_i2cComunicationDriver(i2cMaster* pointer_to_i2cMasterObject) {
	// TODO Auto-generated constructor stub
		this->pi2cMaster = pointer_to_i2cMasterObject;
		configASSERT(this->esp32IntrrruptRequest_CountingSemaphore = xSemaphoreCreateCounting(this->esp32InterruptRequestCountingSemaphore_MAX, 0));
		this->esp32DynamicmMemeoryAlocationError=this->esp32InrerruptRequest_CountingSemaphoreOverflowError=pdFALSE;
		this->esp32CrcSumCounterError=0;
}


/********************************************************************
 * @brief  Oblicza sume kontrolną
 *
 * Metoda oblicza sume kontrolną danych zawartych w adresie wskazanym
 * przez pole pData typu I2CReceivedFrame i porównuje ją z sumą kontrolną
 * jaka została przesłana przez esp32.
 *
 * @param  [I2CReceivedFrame] [i2cFrame_transmitQueue] struktura, która
 * 			zawiera informacje na temat parsametrów danych (m.in. sume
 * 			kontrolną, długość, adres w pamięci gdzie zapisano dane)
 * 			otrzymanych z esp32. NIE zawiera samych danych
 * @param  [crcSum] [uint8_t] wartość sumy kontrolnej, jaka została
 * 			wyliczona przez slave
 *
 * @return [BaseType]
 * @retval [pdPASS] zwracana jeśli suma kontrolna wyliczona i otrzymana
 * 			sa sobie równe
 * @retval [pdFAIL] Zwracana w przypadku różnicy w sumach kontrolnych.
 *
 * @note   Pierwszy byte ramki znajdujący się pod adresem wskazanym przez
 * pData typu i2cFrame_transmitQueue zawiera informację na temat sumy
 * kontrolnej, dlatego metoda liczy sume kontrolną od drugiego byte'u.
 * @warning i2cFrame_transmitQueue nie zawiera otrzymanych danych tylko
 * informacje na temat otrzymanych danych i miejsce (wskaźnik) ich
 * przechowywania w RAM.
 *******************************************************************/
BaseType_t esp32_i2cComunicationDriver::isCrcSumCorreect(i2cFrame_transmitQueue I2CReceivedFrame, uint8_t	crcSum){
	if(crcSum==calculate_checksum(I2CReceivedFrame.pData, sizeof(i2cFrame_keyboardFrame)))
	{
		this->esp32CrcSumCounterError=0;
		return pdPASS;
	}
	else{
		this->esp32CrcSumCounterError++;
		printf("%sCRC sum NOT correct: %d time(s)\r\n", this->TAG, this->esp32CrcSumCounterError);
		return pdFAIL;
	}
}



/********************************************************************
 * @brief  Metoda, która sprawdza czy esp32 jest dostępny na szynie i2c.
 *
 * @param  [NONE
 *
 * @return [HAL_StatusTypeDef]
 * @retval [  HAL_OK ] Jeśli esp32 jest na szynie i2c
 * @retval [HAL_ERROR ] Jeśłi esp32 nie ma na szynie i2c
 *
 * @note   W praktyce metoda ta jest odwołaniem do funkcji
 * 			HAL_I2C_GetState
 * @warning NONE
 *******************************************************************/
HAL_StatusTypeDef esp32_i2cComunicationDriver::ping(void){
	HAL_StatusTypeDef retVal;
	this->i2cMasterSemaphoreTake();
	this->pi2cMaster->while_I2C_STATE_READY();
	retVal = this->pi2cMaster->ping(this->esp32i2cSlaveAdress_7bit);
	this->i2cMasterSemaphoreGive();
	return retVal;
}

/********************************************************************
 * @brief  Zlicza ilość wywołań przerwania od esp32 informującego, że
 * ma dane do wysłania.
 *
 * Metoda wywoływana jest podczas wykrycia przerwania na GPIO do którego
 * podłączony jest sygnał interrupt request z esp32. Esp32 po przez ten
 * sygnał informuje stm32 o tym, że ma przygotowane dane do wysłąnia.
 *
 * @param  NONE
 *
 * @return NONE
 *
 * @note   Mechanizm interrupt request został użyty dlatego, że odczyt
 * 			danych może zająć wiecej czasu niż kolejne ich dostarczenie
 * 			do bufora nadawczego esp32. Stm32 zlicza ilość wystąpień od
 * 			przerwania interrupt request, a przy każdorazowym pobraniu
 * 			danych dekrementuje semafor zliczający. Dodatkowo gdy zemafor
 * 			jest pusty to wymusza to uśpienie tasku obsługującego odczyt
 * 			danych.
 * @warning [NONE
 *******************************************************************/
void esp32_i2cComunicationDriver::incrementInterruptRequestCountingSemaphore(void){
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
	xSemaphoreGiveFromISR(this->esp32IntrrruptRequest_CountingSemaphore, &xHigherPriorityTaskWoken);
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
}




esp32_i2cComunicationDriver::~esp32_i2cComunicationDriver() {
	// TODO Auto-generated destructor stub
	#warning zrobic porzadny destruktor np. w destruktorze ma wyłączy ć się radio
}


/********************************************************************
 * @brief  Sprawdza czy wartość semafora zliczającego nie jest równa
 * maksymalnej. Może to oznaczać za dużą ilość danych w buforze nadawczym
 * esp32, które nie zostały odebrane.
 *
 * @param  NONE
 *
 * @return NONE
 *
 * @note   	NONE
 * @warning NONE
 *******************************************************************/
void esp32_i2cComunicationDriver::isCountingSemaphoreOverflowed(void){
	if( uxSemaphoreGetCount(this->esp32IntrrruptRequest_CountingSemaphore)== this->esp32InterruptRequestCountingSemaphore_MAX){		//sprawdza czy licznik esp32 interrupt request nie jest przepełniony
		this->esp32InrerruptRequest_CountingSemaphoreOverflowError= pdTRUE;
		printf("!!! ESP32 interrupt request counter overflowed   !!!\r\n");
	}
}

/********************************************************************
 * @Oczekuje na semafor esp32IntrrruptRequest_CountingSemaphore i
 * dekrementuje jego wartość
 *
 * @param  [NONE
 *
 * @return NONE
 *******************************************************************/
BaseType_t esp32_i2cComunicationDriver::semaphoreTake__CountingSemaphore(void){
	return xSemaphoreTake(this->esp32IntrrruptRequest_CountingSemaphore, portMAX_DELAY) == pdTRUE;
}

/********************************************************************
 * @brief  Odczytuje dane z esp32 (i2c slave)
 *
 * Sprawdza czy szyna i2c jest dostępna, a jeśli tak to pobiera dane z
 * esp32
 *
 * @param  [*pData] [uint8_t] Wskaźnik do adresu pamięci pod jakim mają
 * 			być zapisane otrzymane dane
 * @param  [Size] [uint16_t] Ilość danych jakie mają być odczytane
 *
 * @return [HAL_StatusTypeDef] aka. wartość zwracana przez
 * 			HAL_I2C_Master_Receive_DMA
 *
 * @note	NONE
 * @warning	NONE
 *******************************************************************/
BaseType_t esp32_i2cComunicationDriver::masterReceiveFromESP32_DMA(uint8_t *pData, uint16_t Size){
	return this->pi2cMaster->I2C_Master_Receive_DMA(this->esp32i2cSlaveAdress_7bit, pData, Size);
}

/********************************************************************
 * @brief  Pobiera semafor szyny i2c.
 *
 * Pobiera semafor szyny i2c i blokuje możliwość nadawania przez inne
 * wątki / zadania
 *
 * @param  NONE
 *
 * @return [BaseType_t] Zwraca wartośc funkcji xSemaphoreTake
 *
 * @note   NONE
 * @warning NONE
 *******************************************************************/
BaseType_t esp32_i2cComunicationDriver::i2cMasterSemaphoreTake(void){
	return this->pi2cMaster->i2cMasterSemaphoreTake();
}

/********************************************************************
 * @brief  Oddaje semafor szyny i2c.
 *
 * Oddaje semafor szyny i2c i odblokowuje możliwość nadawania przez inne
 * wątki / zadania
 *
 * @param  NONE
 *
 * @return [BaseType_t] Zwraca wartośc funkcji xSemaphoreGive
 *
 * @note   NONE
 * @warning NONE
 *******************************************************************/
BaseType_t esp32_i2cComunicationDriver::i2cMasterSemaphoreGive(void){
	return this->pi2cMaster->i2cMasterSemaphoreGive();
}


/********************************************************************
 * @brief  Oczekuje do czasu, aż interfejs i2c nie bedzie dostępny.
 *
 * [Dłuższy opis funkcji, w którym można wyjaśnić szczegóły działania,
 *  algorytmy, przypadki brzegowe itp.]
 *
 * @param  NONE
 *
 * @return NONE
 *
 * @note   NONE
 * @warning NONE
 *******************************************************************/
void esp32_i2cComunicationDriver::while_I2C_STATE_READY(void){
	pi2cMaster->while_I2C_STATE_READY();
}

/********************************************************************
 * @brief  Metoda ustawia esp32DynamicmMemeoryAlocationError na wartość
 * pdTrue i wypisuje na konsoli stosowny komunikat, co świwadczy o tym,
 * że pojawił się błąd dynamicznej alokacji pamięci.
 *
 *
 * @param  NONE
 *
 * @return NONE
 *
 * @note   NONE
 * @warning NONE
 *******************************************************************/
void esp32_i2cComunicationDriver::seteDynamicmMemeoryAlocationError(){
	this->esp32DynamicmMemeoryAlocationError=pdTRUE;
	printf("error with memory allocation\r\n");
}


/********************************************************************
 * @brief  Metoda parsuje,a dokłądnie sprawdza z którego peryferium esp32
 * pochodfzi otrzymana ramka danych i przekazuje tę dane (już konkretne
 * dane) do odpowiedzialnej za odczyt funkcji z namespace "parserFunction"
 *
 * @param  [I2CReceivedFrame] [i2cFrame_transmitQueue] ramka danych  otrzymanych z i2c slave
 *
 * @return NONE
 *
 * @note   NONE
 * @warning NONE
 *******************************************************************/
void esp32_i2cComunicationDriver::parseReceivedData(i2cFrame_transmitQueue I2CReceivedFrame){
	i2cFrame_commonHeader tempI2cFrameCommandHeader;														//tymczasowa zmienna, do któej będa kopiowane otrzymane dane (aby zawsze uzyskać sumę crc z prawidłowego miejsca, nawert jeśli zmieni się typredef i2cFrame_commonHeader)
	memcpy(&tempI2cFrameCommandHeader, I2CReceivedFrame.pData, sizeof(i2cFrame_commonHeader));				//kopiowanie danych z otrzymanego bufora do zmiennej tymczasowej
	if(this->isCrcSumCorreect(I2CReceivedFrame, tempI2cFrameCommandHeader.crcSum))
	{
		switch(tempI2cFrameCommandHeader.commandGroup){

		case I2C_COMMAND_GROUP_KEYBOARD:
			parserFunction::keyboard((i2cFrame_keyboardFrame*)I2CReceivedFrame.pData);
			break;
		default:
			printf("%sunknown commandGroup value:0x%x\r\n",this->TAG, tempI2cFrameCommandHeader.commandGroup);
			assert(0);
		}
	}
}


#include "SileliS_code/radioMenu.h"

extern radioMenu* pRadioMenu;
namespace parserFunction{
	void keyboard(i2cFrame_keyboardFrame* kbrdFrame){
		//kbrdFrame;
		//kbrdFrame->keyboardData.array;
		printf("1\r\n");

		pRadioMenu->queueRadioMenuKbrdSend(kbrdFrame->keyboardData.array);

		keyboardUnion received;
		xQueueReceive(pRadioMenu->taskHandle_manageTheRadioManue, &received.array, 700);
		received;
		#warning tutaj pchamy do kolejki klasy menu
		//tutaj pchamy do kolejki klasy menu
	}

}
