#pragma once
#include "inttypes.h"
//#include "comunicationStructures.h"

#ifdef  /*TOOLCHAIN_ENVIRONMENT == __esp32__ */ ESP_PLATFORM
	#include "D:\!!!__GitHUB_repositories\MustangRadio_develepementVersion\02_Firmware\01_ESP32\HMI_and_bluetooth\main\common\comunicationStructures/comunicationStructures.h"
	//#include "hwConfigFile.h"
	#include "../../hwConfigFile.h"
#elif /*TOOLCHAIN_ENVIRONMENT == __stm32__ */ __ARM_ARCH
	#include "common/comunicationStructures/comunicationStructures.h"
	#include "hwConfigFile.h"
#else
	#error "TOOLCHAIN_ENVIRONMENT which is unknown!!!!"
#endif

#include <stdio.h>
#include <stdint.h> 



#define I2C_SLAVE_ADDRESS_ESP32					0x3C	//si468x 0b11001xx, TDA741x	 0b1000100, 24C16 0b1010xxx, TEA5767 0b1100000, MCP23008 0b0100xxx
#define ESP32_SLAVE_RECEIVE_BUFFER_LEN			52		//wygląda na to, że 52 to max

#define I2C_COMMAND_GROUP_KEYBOARD			0x01
//I2C_COMMAND_GROUP_KEYBOARD			0x01
#define HMI_INPUT_BUTTON					'b'		//oznacza, że przycisk został zwolniony (po osiagnięciu czasu long press lub przed tym czasem)
#define HMI_INPUT_BUTTON_LONG_AND_PRESSED	'B'		//oznacza, że przycisk jest nadal wciśnięty po osiagnięciu czasu long press 
#define HMI_INPUT_VOLUME					'v'		//oznacza, że poruszany jest encoder głośności
#define HMI_INPUT_EQUALISER					'e'		//oznacza, że poruszany jest encoder equalizera
#define LONG_PRESS_BIT_MASK					0b10000000





#define I2C_COMMAND_GROUP_SYSTEM			0x00
#define I2C_COMMAND_GROUP_NVS				0x02
#define I2C_COMMAND_GROUP_LEDS				0x03
#define I2C_COMMAND_GROUP_STEPPER			0x04


//I2C_COMMAND_GROUP_SYSTEM				0x00
#define SYSTEM_KEEPALIV					0x01
#define SYSTEM_CRC_ERROR				0x02
#define SYSTEM_CRC_OK					0x03




//I2C_COMMAND_GROUP_NVS					0x02
#define NVS_KEY_i8_test					"test"
#define NVS_KEY_BLOB_MotorParameters	"MotorParam"


typedef struct
{	   	
	uint8_t	crcSum;			//checksum for i2c farame (commandGroup+dataSize+data)
	uint8_t commandGroup;	//aka I2C_COMMAND_GROUP
	size_t /*uint8_t*/ dataSize;		//sizeof(data to send)
} i2cFrame_commonHeader;



typedef struct {
	i2cFrame_commonHeader i2cframeCommandHeader;
	union keyboardUnion keyboardData;
} i2cFrame_keyboardFrame;

typedef struct {
	i2cFrame_commonHeader i2cframeCommandHeader;
	struct hmiLeds ledsData;
} i2cFrame_hmiLeds;




#ifdef I2C_STM32_TO_ESP32_ROLE_MASTER
	/*typedef*/ struct i2cFrame_transmitQueue{
		uint8_t slaveDevice7bitAddress;		//pole zawiera informację z którego urządzenia slave (ares urządzenia) pochodzą odczytane po i2c dane
		size_t dataSize;					//pole zawiera informację o długości przesłanych danych (m.in. na podstawie tej informacji w sposób dynamiczny tworzone są zmienne przechowujące otrzymane dane
		void *pData;						//wskaźnik do miejsca w pamięci RAM (zarezerwowanej dynamicznie), gdzie przechowywane są otrzymane po i2c dane
		 i2cFrame_transmitQueue() : slaveDevice7bitAddress(0), dataSize(0), pData(nullptr) {}
	} /*i2cFrame_transmitQueue*/;
#else
	typedef struct{
		size_t dataSize;					//jak wyżej
		void *pData;						//jak wyżej
	} i2cFrame_transmitQueue;				//jak wyżej

#endif
