/*
 * keyboardToFunction.cpp
 *
 *  Created on: Apr 24, 2025
 *      Author: dbank
 */

#include <SileliS_code/keyboardToFunction.h>

extern myPrintfTask* pPrintf;

keyboardToFunction::keyboardToFunction() {
	memset(this->ExecutableButtons,NULL, sizeof(ExecutableButtons));
	//this->execFunctionArryAppended=0;
}

void keyboardToFunction::buildExecutableButtonsTable(void){
	ExecutableButtons[0]={{'b',1},NULL};
	ExecutableButtons[1];
	ExecutableButtons[2];
	ExecutableButtons[3];
	ExecutableButtons[4];
	ExecutableButtons[5];
	ExecutableButtons[6];
	ExecutableButtons[7];
	ExecutableButtons[8];
	ExecutableButtons[9];
	ExecutableButtons[10];
	ExecutableButtons[11];
	ExecutableButtons[12];
	ExecutableButtons[13];
	ExecutableButtons[14];
	ExecutableButtons[15];
	ExecutableButtons[16];
	ExecutableButtons[17];
	ExecutableButtons[18];

}
uint8_t	keyboardToFunction::searchExecFunctionForButtonSequence(keyboardUnion buttonSequence){
	for(uint8_t i=0;i<this->execFunctionArraySize/*execFunctionArryAppended*/;i++){
		if ((this->ExecutableButtons[i].buttonSequence.kbrdValue.input == buttonSequence.kbrdValue.input) &&
			(this->ExecutableButtons[i].buttonSequence.kbrdValue.value == buttonSequence.kbrdValue.value))
			{
			return i;
			}
	}
	return this->execFunctionArraySize;		//jeżeli zwraca warotść równią execFunctionArrySize to znaczy, żę sekwencja klawiszy nie znajduje się w tablicy
}

bool keyboardToFunction::isExecFunctionInButtonSequence(keyboardUnion buttonSequence){
	if (this->searchExecFunctionForButtonSequence(buttonSequence)==this->execFunctionArraySize)
		return false;
	return true;
}

void keyboardToFunction::appendFunctionPointer(std::function<void()>* funcPtr, std::function<void()> newFunc){
	*funcPtr = newFunc;
}

void keyboardToFunction::executeFunctionPointer(std::function<void()>* funcPtr){
    if (*funcPtr) {
        (*funcPtr)(); // Prawidłowe wywołanie std::function<void()>
    } else {
        pPrintf->feedPrintf("%s: Pointer to function is empty.", "TAG_NAME_HERE");
    }
}

keyboardToFunction::~keyboardToFunction() {
	// TODO Auto-generated destructor stub
}

