/*
 * ledsController.cpp
 *
 *  Created on: May 14, 2025
 *      Author: dbank
 */

#include "SileliS_code/ledsController.h"

ledsController::ledsController(hmiLeds* leds,i2cQueue4DynamicData* MasterTransmitToSlave_DataQueue) {
	// TODO Auto-generated constructor stub
	this->pLeds = leds;
//	this->setLedBlinking(sourceLed, this->color.Red, this->color.Black);
	this->setLedAllCleaned();
}

void ledsController::setLedColors(ledEnum whichLed, ws2812Color primary, ws2812Color secondary){
	colorSet*pSetLed;
	switch (whichLed) {
	        case sourceLed:
	        	pSetLed=&this->pLeds->sourceLed;
	            break;
	        case equaliserLed:
	        	pSetLed=&this->pLeds->equaliserLed;
	        	break;
	        case errorLed:
	        	pSetLed=&this->pLeds->errorLed;
	            break;
	        case backlightLeds:
	        	pSetLed=&this->pLeds->backlightLeds;
	            break;
	    }
	pSetLed->primary=primary;
	pSetLed->secondary=secondary;
}

//OK
void ledsController::setLedBlinking(ledEnum whichLed, ws2812Color primary, ws2812Color secondary){
	this->setLedColors(whichLed, primary, secondary);
}

//OK
void ledsController::setLedWithColor(ledEnum whichLed, ws2812Color color){
	this->setLedColors(whichLed, color, color);
}

//OK
void ledsController::setLedCleaned(ledEnum whichLed){
	this->setLedColors(whichLed, COLOR_BLACK, COLOR_BLACK);
}


//OK
void ledsController::setLedSourceBlinking(ws2812Color primary, ws2812Color secondary){
	this->setLedBlinking(sourceLed, primary, secondary);
}

//OK
void ledsController::setLedSourceWithColor(ws2812Color color){
	this->setLedSourceBlinking(color, color);
}

//OK
void ledsController::setLedSourceCleaned(void){
	this->setLedSourceWithColor(COLOR_BLACK);
}

//OK
void ledsController::setLedEqualiserBlinking(ws2812Color primary, ws2812Color secondary){
	this->setLedBlinking(equaliserLed, primary, secondary);
}

//OK
void ledsController::setLedEqualiserWithColor(ws2812Color color){
	this->setLedEqualiserBlinking(color, color);
}

//OK
void ledsController::setLedEqualiserCleaned(void){
	this->setLedEqualiserWithColor(COLOR_BLACK);
}

//OK
void ledsController::setLedErrorBlinking(ws2812Color primary, ws2812Color secondary){
	this->setLedBlinking(errorLed, primary, secondary);
}

//OK
void ledsController::setLedErrorWithColor(ws2812Color color){
	this->setLedErrorBlinking(color, color);
}

//OK
void ledsController::setLedErrorCleaned(void){
	this->setLedErrorWithColor(COLOR_BLACK);
}

//OK
void ledsController::setLedBacklightAllBlinking(ws2812Color primary, ws2812Color secondary){
	this->setLedBacklightInRangeBlinking(primary, secondary, BACKLIGHT_LED_FROM, BACKLIGHT_LED_TO);
}

//OK
void ledsController::setLedBacklightAllWithColor(ws2812Color color){
	this->setLedBacklightInRangeWithColor(color, BACKLIGHT_LED_FROM, BACKLIGHT_LED_TO);
}


//OK
void ledsController::setLedBacklightInRangeBlinking(ws2812Color primary, ws2812Color secondary, uint8_t from, uint8_t to){
	this->setLedBlinking(backlightLeds, primary, secondary);
	if (from>to){
		uint8_t tempFrom;
		uint8_t tempTo;

		tempFrom=to;
		tempTo=from;

		from=tempFrom;
		to=tempTo;
	}
	if (from<BACKLIGHT_LED_FROM){
		from = BACKLIGHT_LED_FROM;
	}
	if (to>BACKLIGHT_LED_TO){
		to = BACKLIGHT_LED_TO;
	}
	pLeds->backlightLedsFrom=from;
	pLeds->backlightLedsTo=to;
}

//OK
void ledsController::setLedBacklightInRangeWithColor(ws2812Color color, uint8_t from, uint8_t to){
	this->setLedBacklightInRangeBlinking(color, color, from, to);
}

//OK
void ledsController::setLedBacklighCleaned(void){
	this->setLedBacklightAllWithColor(COLOR_BLACK);
}

void ledsController::setLedAllCleaned(void){
	this->setLedSourceCleaned();
	this->setLedEqualiserCleaned();
	this->setLedErrorCleaned();
	this->setLedBacklighCleaned();
}

ledsController::~ledsController() {
	// TODO Auto-generated destructor stub
}
