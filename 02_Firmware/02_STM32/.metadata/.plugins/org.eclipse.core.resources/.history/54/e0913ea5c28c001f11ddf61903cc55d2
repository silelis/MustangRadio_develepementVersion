/*
 * i2cEngine.cpp
 *
 *  Created on: Jul 21, 2024
 *      Author: dbank
 */

//#include <i2cEngine.h>
#include "SileliS_code/i2cEngine.h"

extern myPrintfTask* pPrintf;

i2cMaster::i2cMaster(I2C_HandleTypeDef *hi2c1) {
	// TODO Auto-generated constructor stub
	this->p_hi2c1 =hi2c1;
	this->pI2C_MasterReceiveFromSlave_DataQueue = NULL;
	this->pI2C_MasterTransmitToSlave_DataQueue = NULL;
	this->pI2C_MasterInitialiseReadFromSlave_AdressessQueue = NULL;



	configASSERT(this->pI2C_MasterReceiveFromSlave_DataQueue = new i2cQueue4DynamicData(DEFAULT_RECEIVE_QUEUE_SIZE));
	configASSERT(this->pI2C_MasterTransmitToSlave_DataQueue = new i2cQueue4DynamicData(DEFAULT_RECEIVE_QUEUE_SIZE));
	configASSERT(this->pI2C_MasterInitialiseReadFromSlave_AdressessQueue = new i2cQueue4DynamicData(DEFAULT_RECEIVE_QUEUE_SIZE));




	//this->createI2C_DataObject(this->pI2C_fromSlaveReceiveDataQueue);
	//this->createI2C_DataObject(this->pI2C_toSlaveTransmitDataQueue);
	//this->createI2C_DataObject(this->pI2C_whichSlaveToReadQueue);

//	this->esp32InterruptCounterOverflow =pdFALSE;		//reset interrupt counter overflow indicator
	assert(this->handle_i2cBinarySemaphore = xSemaphoreCreateBinary());
	this->i2cMasterSemaphoreGive();
	this->i2cMasterSemaphoreTake();



	//HAL_I2C_DeInit(p_hi2c1);
	//MX_I2C1_Init();



	//vTaskDelay(pdMS_TO_TICKS(1000));
	//printf("%s bus had been initialized.\r\n",this->TAG);
	pPrintf->feedPrintf("%s bus had been initialized.",this->TAG);
	this->i2cMasterSemaphoreGive();
}

/*void i2cMaster::createI2C_DataObject(i2cQueue4DynamicData* queueToCreate){
	configASSERT(queueToCreate = new i2cQueue4DynamicData(DEFAULT_RECEIVE_QUEUE_SIZE));
}*/

BaseType_t i2cMaster::i2cMasterSemaphoreTake(void){
	return xSemaphoreTake(this->handle_i2cBinarySemaphore, portMAX_DELAY);
}

BaseType_t i2cMaster::i2cMasterSemaphoreGive(void){
	return xSemaphoreGive(this->handle_i2cBinarySemaphore);
}

HAL_StatusTypeDef i2cMaster::ping(uint16_t DevAddress_7bit){
	HAL_StatusTypeDef retVal;
	retVal = HAL_I2C_IsDeviceReady(this->p_hi2c1, DevAddress_7bit<<1, 100, 1000);
	if(retVal==HAL_OK){
			//printf("%s i2c slave avaliable on address: 0x%x (7bit).\r\n", this->TAG, DevAddress_7bit/*<<1*/);
			pPrintf->feedPrintf("%s i2c slave avaliable on address: 0x%x (7bit).", this->TAG, DevAddress_7bit/*<<1*/);
	}
	else{
		//printf("%s i2c slave NOT avaliable on address: 0x%x (7bit).\r\n", this->TAG, DevAddress_7bit/*<<1*/);
		pPrintf->feedPrintf("%s i2c slave NOT avaliable on address: 0x%x (7bit).", this->TAG, DevAddress_7bit/*<<1*/);
		assert(0);
	}
	return retVal;
}


BaseType_t  i2cMaster::setI2cAdressToAdressQueue(uint16_t DevAddress_7bit){
	i2cFrame_transmitQueue I2CFrameWithAdressOfSlaveToRead;
	I2CFrameWithAdressOfSlaveToRead.slaveDevice7bitAddress = DevAddress_7bit;
	return this->pI2C_MasterInitialiseReadFromSlave_AdressessQueue->QueueSendFromISR(&I2CFrameWithAdressOfSlaveToRead);
}


BaseType_t  i2cMaster::getI2cAdressFromAdressQueue(i2cFrame_transmitQueue* I2CFrameWithAdressOfSlaveToRead){
	return this->pI2C_MasterInitialiseReadFromSlave_AdressessQueue->QueueReceive(I2CFrameWithAdressOfSlaveToRead, portMAX_DELAY)
}


i2cMaster::~i2cMaster() {
	// TODO Auto-generated destructor stub
	this->i2cMasterSemaphoreTake();
	//HAL_I2C_DeInit(this->p_hi2c1);
	this->p_hi2c1 = NULL;
	delete this->pI2C_MasterReceiveFromSlave_DataQueue;
	delete this->pI2C_MasterTransmitToSlave_DataQueue;
	delete this->pI2C_MasterInitialiseReadFromSlave_AdressessQueue;
	vSemaphoreDelete(this->handle_i2cBinarySemaphore);
}

void i2cMaster::while_I2C_STATE_READY(void){
	while(HAL_I2C_GetState(this->p_hi2c1)!= HAL_I2C_STATE_READY){};
}

HAL_StatusTypeDef i2cMaster::I2C_Master_Receive_DMA(uint16_t DevAddress_7bit, uint8_t *pData, uint16_t Size){
	HAL_StatusTypeDef retVal;
	this->while_I2C_STATE_READY();
	retVal = HAL_I2C_Master_Receive_DMA(this->p_hi2c1, DevAddress_7bit<<1, pData, Size);

	return retVal;
}
