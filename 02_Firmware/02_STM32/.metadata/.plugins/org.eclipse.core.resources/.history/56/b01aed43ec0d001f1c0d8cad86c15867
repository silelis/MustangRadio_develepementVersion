/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2024 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "octospi.h"
#include "usart.h"
#include "gpio.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MPU_Config(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t writebuf[] = "Hello world from QSPI";
uint8_t Readbuf[100];




/**************************************************************************/
/*!
    @brief  Configure OCTO-SPI as Memory Mapped Mode.
            Winbond W25Q128JVSIQ specific setting.
            * Address size is 24bit(16MBytes).
            * Initially sets QUAD-MODE(not need quadmode command).
            * MAX 133MHz CLK.
            * Support "XIP",thus suitable for MemoryMappedMode.
    @param  None.
    @retval None.
*/
/**************************************************************************/

#define hospi	hospi1
void Set_OSPI_MemoryMappedMode(void)
{
    OSPI_RegularCmdTypeDef sCommand = {0};
    OSPI_MemoryMappedTypeDef sMemMappedCfg = {0};
    uint8_t reg_data =0;

    /* Initialize OCTO-SPI I/O */
    //OSPI_IoInit_If();

    /* Initialize OCTO-SPI */
    hospi.Instance                      = OCTOSPI1;
    hospi.Init.FifoThreshold            = 1;
    hospi.Init.DualQuad                 = HAL_OSPI_DUALQUAD_DISABLE;
    hospi.Init.MemoryType               = HAL_OSPI_MEMTYPE_MICRON;
    hospi.Init.DeviceSize               = 24;   /* 128Mbit=16MByte=2^24 W25Q128JVSIQ */
    hospi.Init.ChipSelectHighTime       = 2;    /* 2ClockCycle(18nSec@110MHz) Need for W25Q128JVSIQ >10nSec@read */
    hospi.Init.FreeRunningClock         = HAL_OSPI_FREERUNCLK_DISABLE;
    hospi.Init.ClockMode                = HAL_OSPI_CLOCK_MODE_0;
    hospi.Init.WrapSize                 = HAL_OSPI_WRAP_NOT_SUPPORTED;
    hospi.Init.ClockPrescaler           = 2;    /* 110MHzMAX/2 = 55MHz(MAX OSPI-CLK:90MHz) */
    hospi.Init.SampleShifting           = HAL_OSPI_SAMPLE_SHIFTING_HALFCYCLE;
    hospi.Init.DelayHoldQuarterCycle    = HAL_OSPI_DHQC_DISABLE;
    hospi.Init.ChipSelectBoundary       = 0;
    hospi.Init.DelayBlockBypass         = HAL_OSPI_DELAY_BLOCK_BYPASSED;
    hospi.Init.Refresh                  = 0;
    if (HAL_OSPI_Init(&hospi) != HAL_OK)
    {
        for(;;);
    }

    /* Enable Reset --------------------------- */
    /* Common Commands */
    sCommand.OperationType              = HAL_OSPI_OPTYPE_COMMON_CFG;
    sCommand.FlashId                    = HAL_OSPI_FLASH_ID_1;
    sCommand.InstructionDtrMode         = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
    sCommand.AddressDtrMode             = HAL_OSPI_ADDRESS_DTR_DISABLE;
    sCommand.DataDtrMode                = HAL_OSPI_DATA_DTR_DISABLE;
    sCommand.DQSMode                    = HAL_OSPI_DQS_DISABLE;
    sCommand.SIOOMode                   = HAL_OSPI_SIOO_INST_EVERY_CMD;
    sCommand.AlternateBytesMode         = HAL_OSPI_ALTERNATE_BYTES_NONE;
    sCommand.AlternateBytes             = HAL_OSPI_ALTERNATE_BYTES_NONE;
    sCommand.AlternateBytesSize         = HAL_OSPI_ALTERNATE_BYTES_NONE;
    sCommand.AlternateBytesDtrMode      = HAL_OSPI_ALTERNATE_BYTES_DTR_DISABLE;
    sCommand.InstructionMode            = HAL_OSPI_INSTRUCTION_1_LINE;
    sCommand.InstructionSize            = HAL_OSPI_INSTRUCTION_8_BITS;
    sCommand.AddressSize                = HAL_OSPI_ADDRESS_24_BITS;
    /* Instruction */
    sCommand.Instruction                = 0x66; /* Reset Enable W25Q128JVSIQ */
    /* Address */
    sCommand.AddressMode                = HAL_OSPI_ADDRESS_NONE;
    sCommand.Address                    = 0;
    /* Data */
    sCommand.DataMode                   = HAL_OSPI_DATA_NONE;
    sCommand.DummyCycles                = 0;
    sCommand.NbData                     = 0;

    if (HAL_OSPI_Command(&hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
    {
        for(;;);
    }

    /* Reset Device --------------------------- */
    /* Common Commands */
    sCommand.OperationType              = HAL_OSPI_OPTYPE_COMMON_CFG;
    sCommand.FlashId                    = HAL_OSPI_FLASH_ID_1;
    sCommand.InstructionDtrMode         = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
    sCommand.AddressDtrMode             = HAL_OSPI_ADDRESS_DTR_DISABLE;
    sCommand.DataDtrMode                = HAL_OSPI_DATA_DTR_DISABLE;
    sCommand.DQSMode                    = HAL_OSPI_DQS_DISABLE;
    sCommand.SIOOMode                   = HAL_OSPI_SIOO_INST_EVERY_CMD;
    sCommand.AlternateBytesMode         = HAL_OSPI_ALTERNATE_BYTES_NONE;
    sCommand.AlternateBytes             = HAL_OSPI_ALTERNATE_BYTES_NONE;
    sCommand.AlternateBytesSize         = HAL_OSPI_ALTERNATE_BYTES_NONE;
    sCommand.AlternateBytesDtrMode      = HAL_OSPI_ALTERNATE_BYTES_DTR_DISABLE;
    sCommand.InstructionMode            = HAL_OSPI_INSTRUCTION_1_LINE;
    sCommand.InstructionSize            = HAL_OSPI_INSTRUCTION_8_BITS;
    sCommand.AddressSize                = HAL_OSPI_ADDRESS_24_BITS;
    /* Instruction */
    sCommand.Instruction                = 0x99; /* Reset W25Q128JVSIQ */
    /* Address */
    sCommand.AddressMode                = HAL_OSPI_ADDRESS_NONE;
    sCommand.Address                    = 0;
    /* Data */
    sCommand.DataMode                   = HAL_OSPI_DATA_NONE;
    sCommand.DummyCycles                = 0;
    sCommand.NbData                     = 0;

    if (HAL_OSPI_Command(&hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
    {
        for(;;);
    }

    /* Enter Quad-SPI Mode --------------------------- */
    /* Common Commands */
    sCommand.OperationType              = HAL_OSPI_OPTYPE_COMMON_CFG;
    sCommand.FlashId                    = HAL_OSPI_FLASH_ID_1;
    sCommand.InstructionDtrMode         = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
    sCommand.AddressDtrMode             = HAL_OSPI_ADDRESS_DTR_DISABLE;
    sCommand.DataDtrMode                = HAL_OSPI_DATA_DTR_DISABLE;
    sCommand.DQSMode                    = HAL_OSPI_DQS_DISABLE;
    sCommand.SIOOMode                   = HAL_OSPI_SIOO_INST_EVERY_CMD;
    sCommand.AlternateBytesMode         = HAL_OSPI_ALTERNATE_BYTES_NONE;
    sCommand.AlternateBytes             = HAL_OSPI_ALTERNATE_BYTES_NONE;
    sCommand.AlternateBytesSize         = HAL_OSPI_ALTERNATE_BYTES_NONE;
    sCommand.AlternateBytesDtrMode      = HAL_OSPI_ALTERNATE_BYTES_DTR_DISABLE;
    sCommand.InstructionMode            = HAL_OSPI_INSTRUCTION_1_LINE;
    sCommand.InstructionSize            = HAL_OSPI_INSTRUCTION_8_BITS;
    sCommand.AddressSize                = HAL_OSPI_ADDRESS_24_BITS;
    /* Instruction */
    sCommand.Instruction                = 0x31; /* Set Status2 W25Q128JVSIQ */
    /* Address */
    sCommand.AddressMode                = HAL_OSPI_ADDRESS_NONE;
    sCommand.Address                    = 0;
    /* Data */
    sCommand.DataMode                   = HAL_OSPI_INSTRUCTION_1_LINE;
    sCommand.DummyCycles                = 0;
    sCommand.NbData                     = 1;
    reg_data                            = 0x02; /* Enable QuadI/O Mode */

    if (HAL_OSPI_Command(&hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
    {
        for(;;);
    }

    if (HAL_OSPI_Transmit(&hospi, &reg_data, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
    {
        for(;;);
    }

    /* Enter MemoryMappedMode --------------------------- */
    /* Read Commands */
    sCommand.OperationType              = HAL_OSPI_OPTYPE_READ_CFG;
    sCommand.FlashId                    = HAL_OSPI_FLASH_ID_1;
    sCommand.InstructionDtrMode         = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
    sCommand.AddressDtrMode             = HAL_OSPI_ADDRESS_DTR_DISABLE;
    sCommand.DataDtrMode                = HAL_OSPI_DATA_DTR_DISABLE;
    sCommand.DQSMode                    = HAL_OSPI_DQS_DISABLE;
    sCommand.SIOOMode                   = HAL_OSPI_SIOO_INST_EVERY_CMD;
    sCommand.AlternateBytesMode         = HAL_OSPI_ALTERNATE_BYTES_4_LINES;
    sCommand.AlternateBytes             = 0xFF; /* Need for Fast Read QUAD W25Q128JVSIQ */
    sCommand.AlternateBytesSize         = HAL_OSPI_ALTERNATE_BYTES_8_BITS;
    sCommand.AlternateBytesDtrMode      = HAL_OSPI_ALTERNATE_BYTES_DTR_DISABLE;
    sCommand.InstructionMode            = HAL_OSPI_INSTRUCTION_1_LINE;
    sCommand.InstructionSize            = HAL_OSPI_INSTRUCTION_8_BITS;
    sCommand.AddressSize                = HAL_OSPI_ADDRESS_24_BITS;
    /* Instruction */
    sCommand.Instruction                = 0xEB; /* Fast Read QUAD W25Q128JVSIQ */
    /* Address */
    sCommand.AddressMode                = HAL_OSPI_ADDRESS_4_LINES;
    sCommand.Address                    = 0;
    /* Data */
    sCommand.DataMode                   = HAL_OSPI_DATA_4_LINES;
    sCommand.DummyCycles                = 4;    /* DUMMY 4Cycle for Fast Read QUAD W25Q128JVSIQ */
    sCommand.NbData                     = 0;

    if(HAL_OSPI_Command(&hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
    {
        for(;;);
    }

    /* Write Commands */
    sCommand.OperationType              = HAL_OSPI_OPTYPE_WRITE_CFG;
    sCommand.FlashId                    = HAL_OSPI_FLASH_ID_1;
    sCommand.InstructionDtrMode         = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
    sCommand.AddressDtrMode             = HAL_OSPI_ADDRESS_DTR_DISABLE;
    sCommand.DataDtrMode                = HAL_OSPI_DATA_DTR_DISABLE;
    sCommand.DQSMode                    = HAL_OSPI_DQS_DISABLE;
    sCommand.SIOOMode                   = HAL_OSPI_SIOO_INST_EVERY_CMD;
    sCommand.AlternateBytesMode         = HAL_OSPI_ALTERNATE_BYTES_NONE;
    sCommand.AlternateBytes             = HAL_OSPI_ALTERNATE_BYTES_NONE;
    sCommand.AlternateBytesSize         = HAL_OSPI_ALTERNATE_BYTES_NONE;
    sCommand.AlternateBytesDtrMode      = HAL_OSPI_ALTERNATE_BYTES_DTR_DISABLE;
    sCommand.InstructionMode            = HAL_OSPI_INSTRUCTION_1_LINE;
    sCommand.InstructionSize            = HAL_OSPI_INSTRUCTION_8_BITS;
    sCommand.AddressSize                = HAL_OSPI_ADDRESS_24_BITS;
    /* Instruction */
    sCommand.Instruction                = 0x32; /* Page Write QUAD W25Q128JVSIQ */
    /* Address */
    sCommand.AddressMode                = HAL_OSPI_ADDRESS_1_LINE;
    sCommand.Address                    = 0;
    /* Data */
    sCommand.DataMode                   = HAL_OSPI_DATA_4_LINES;
    sCommand.DummyCycles                = 0;
    sCommand.NbData                     = 0;

    if(HAL_OSPI_Command(&hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
    {
        for(;;);
    }

    /* Set OCTO-SPI as MemoryMappedMode */
    sMemMappedCfg.TimeOutActivation = HAL_OSPI_TIMEOUT_COUNTER_DISABLE;
    sMemMappedCfg.TimeOutPeriod     = 0;
    if(HAL_OSPI_MemoryMapped(&hospi, &sMemMappedCfg) != HAL_OK)
    {
        for(;;);
    }

}
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART1_UART_Init();
  MX_OCTOSPI1_Init();
  /* USER CODE BEGIN 2 */



  HAL_StatusTypeDef retVal = W25Q128_OCTO_SPI_Init(&hospi1);

  printf("Erease\r\n");
  //W25Q128_OSPI_Erase_Chip(&hospi1);
  printf("Hello world!!!\r\n");








  //retVal =W25Q128_OSPI_Write(&hospi1, writebuf, 0, 22);






  retVal = W25Q128_OSPI_EnableMemoryMappedMode(&hospi1);
  //Set_OSPI_MemoryMappedMode();

  HAL_Delay(1500);
  uint8_t *map;
  map = 0x90000000;

 // memcpy(Readbuf, map, 22);
 // printf("%s\r\n", map[0]);

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
  RCC_OscInitStruct.HSICalibrationValue = 64;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 15;
  RCC_OscInitStruct.PLL.PLLP = 2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
  {
    Error_Handler();
  }
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
  MPU_Region_InitTypeDef MPU_InitStruct = {0};

  /* Disables the MPU */
  HAL_MPU_Disable();

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
  MPU_InitStruct.BaseAddress = 0x0;
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
  MPU_InitStruct.SubRegionDisable = 0x87;
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);

}

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
