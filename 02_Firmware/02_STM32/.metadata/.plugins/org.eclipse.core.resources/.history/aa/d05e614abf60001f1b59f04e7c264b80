#include <iostream>
#include "SmartDevice.h"

class TestClass {
public:
    TestClass() { std::cout << "TestClass default constructor\n"; }
    TestClass(const TestClass&) { std::cout << "TestClass copy constructor\n"; }
    TestClass(TestClass&&) noexcept { std::cout << "TestClass move constructor\n"; }
    ~TestClass() { std::cout << "TestClass destructor\n"; }
    void Show() const {
        std::cout << "TestClass instance\n";
    }
};

int main() {
    TestClass obj1; // Istniejący obiekt
    TestClass obj2; // Inny istniejący obiekt

    // Konstruktor domyślny
    SmartDevice<TestClass> sd1;

    // Konstruktor z wskaźnikiem
    SmartDevice<TestClass> sd2(new TestClass());

    // Konstruktor, który tworzy obiekt typu T
    SmartDevice<TestClass> sd3(obj1);

    // Użycie metody SetPointer do przypisania nowego wskaźnika
    sd1.SetPointer(new TestClass());

    // Użycie metody SetPointer do przypisania istniejącego obiektu
    sd2.SetPointer(obj2);

    sd1->Show();
    sd2->Show();
    sd3->Show();

    return 0;
}
