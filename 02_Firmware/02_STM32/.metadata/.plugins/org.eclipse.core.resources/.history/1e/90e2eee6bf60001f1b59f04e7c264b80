#ifndef SMARTDEVICE_H
#define SMARTDEVICE_H

template<typename T>
class SmartDevice {
private:
    T* ptr;

public:
    // Konstruktor domyślny, inicjalizujący wskaźnik jako nullptr
    SmartDevice();

    // Konstruktor z istniejącym wskaźnikiem
    explicit SmartDevice(T* p);

    // Konstruktor, który tworzy obiekt typu T przy użyciu new
    explicit SmartDevice(const T& obj);

    // Destruktor, który zwalnia pamięć
    ~SmartDevice();

    // Metoda do ustawiania wskaźnika na nowy obiekt
    void SetPointer(T* p);

    // Metoda do ustawiania wskaźnika na istniejący obiekt
    void SetPointer(T& obj);

    // Operator dostępu do obiektu
    T& operator*() const;

    // Operator dostępu do wskaźnika
    T* operator->() const;

    // Operator przenoszenia
    SmartDevice(SmartDevice&& other) noexcept;

    SmartDevice& operator=(SmartDevice&& other) noexcept;

    // Zakaz kopiowania
    SmartDevice(const SmartDevice&) = delete;
    SmartDevice& operator=(const SmartDevice&) = delete;
};

#include "SmartDevice.cpp" // Włączenie definicji metod szablonów

#endif // SMARTDEVICE_H
