/*
 * keyboardToFunction.cpp
 *
 *  Created on: Apr 24, 2025
 *      Author: dbank
 */

#include <SileliS_code/keyboardToFunction.h>

extern myPrintfTask* pPrintf;

keyboardToFunction::keyboardToFunction() {
	memset(this->ExecutableButtonsArray,0, sizeof(EXECUTALBE_BUTTONS_ARRAY_SIZE));
	//this->execFunctionArryAppended=0;
	this->buildExecutableButtonsArrayEmpty();
}

void keyboardToFunction::buildExecutableButtonsArrayEmpty(void){
	this->ExecutableButtonsArray[0]={{'b',0x7E},NULL, NULL};	//poweroff pressed
	this->ExecutableButtonsArray[1]={{'b',0xfe},NULL, NULL};	//long poweroff release
	this->ExecutableButtonsArray[2]={{0,0},NULL, NULL};
	this->ExecutableButtonsArray[3]={{0,0},NULL, NULL};
	this->ExecutableButtonsArray[4]={{0,0},NULL, NULL};
	this->ExecutableButtonsArray[5]={{0,0},NULL, NULL};
	this->ExecutableButtonsArray[6]={{0,0},NULL, NULL};
	this->ExecutableButtonsArray[7]={{0,0},NULL, NULL};
	this->ExecutableButtonsArray[8]={{0,0},NULL, NULL};
	this->ExecutableButtonsArray[9]={{0,0},NULL, NULL};
	this->ExecutableButtonsArray[10]={{0,0},NULL, NULL};
	this->ExecutableButtonsArray[11]={{0,0},NULL, NULL};
	this->ExecutableButtonsArray[12]={{0,0},NULL, NULL};
	this->ExecutableButtonsArray[13]={{0,0},NULL, NULL};
	this->ExecutableButtonsArray[14]={{0,0},NULL, NULL};
	this->ExecutableButtonsArray[15]={{0,0},NULL, NULL};
	this->ExecutableButtonsArray[16]={{0,0},NULL, NULL};
	this->ExecutableButtonsArray[17]={{0,0},NULL, NULL};
	//this->ExecutableButtons[18]={{0,0},NULL};
}
uint8_t	keyboardToFunction::searchButtonSequenceInExecutableButtonsArray(keyboardUnion buttonSequence){
	for(uint8_t i=0;i<EXECUTALBE_BUTTONS_ARRAY_SIZE;i++){
		if ((ExecutableButtonsArray[i].buttonSequence.kbrdValue.input == buttonSequence.kbrdValue.input) &&
			(ExecutableButtonsArray[i].buttonSequence.kbrdValue.value == buttonSequence.kbrdValue.value))
			{
			return i;
			}
	}
	return EXECUTALBE_BUTTONS_ARRAY_SIZE;		//jeżeli zwraca warotść równią execFunctionArrySize to znaczy, żę sekwencja klawiszy nie znajduje się w tablicy
}

bool keyboardToFunction::executeButtonFunction(keyboardUnion buttonSequence){
	uint8_t whichPosition= this->searchButtonSequenceInExecutableButtonsArray(buttonSequence);
	if (whichPosition==EXECUTALBE_BUTTONS_ARRAY_SIZE){
		//pPrintf->feedPrintf("%s %c %x - there is no button in array.", "PASS TAG HERE"/*ptrRadioMenu->getCurrentNodeTag()*/, buttonSequence.array[0], buttonSequence.array[1]);
		this->noButtonInArrayMessage(buttonSequence);
		return false;
	}
	if (this->ExecutableButtonsArray[whichPosition].functionPointer==NULL){
		pPrintf->feedPrintf("%s %c %x - there is no function binded for this button.", "PASS TAG HERE"/*ptrRadioMenu->getCurrentNodeTag()*/, buttonSequence.array[0], buttonSequence.array[1]);
		return false;
	}
	this->ExecutableButtonsArray[whichPosition].functionPointer;
	return true;
}


bool keyboardToFunction::appendButtonArrayWithFunctionPointer(uint8_t buttonPlaceInArray, std::function<void()> newFunc){
	if (buttonPlaceInArray>=EXECUTALBE_BUTTONS_ARRAY_SIZE){
		pPrintf->feedPrintf("%s You are trying to bind ExecutableButtonsArray[%d] but array size is ExecutableButtonsArray[%d]", "PASS TAG HERE", buttonPlaceInArray,EXECUTALBE_BUTTONS_ARRAY_SIZE);
		return false;
	}
	this->ExecutableButtonsArray[buttonPlaceInArray].functionPointer = newFunc;
	return true;

}

bool keyboardToFunction::isButtonSequenceInExecutableButtonsArray(keyboardUnion buttonSequence){
	if (this->searchButtonSequenceInExecutableButtonsArray(buttonSequence)==EXECUTALBE_BUTTONS_ARRAY_SIZE)
		return false;
	return true;
}


/*
void keyboardToFunction::appendFunctionPointer(std::function<void()>* funcPtr, std::function<void()> newFunc){
	*funcPtr = newFunc;
}*/

void keyboardToFunction::noButtonInArrayMessage(keyboardUnion buttonSequence){
	pPrintf->feedPrintf("%s %c %x - there is no button in array.", "PASS TAG HERE"/*ptrRadioMenu->getCurrentNodeTag()*/, buttonSequence.array[0], buttonSequence.array[1]);
}

bool keyboardToFunction::appendButtonArrayWithFunctionPointer(keyboardUnion buttonSequence, std::function<void()> newFunc){
	uint8_t whichPosition= this->searchButtonSequenceInExecutableButtonsArray(buttonSequence);
	if (whichPosition==EXECUTALBE_BUTTONS_ARRAY_SIZE){
		//pPrintf->feedPrintf("%s %c %x - there is no button in array.", "PASS TAG HERE"/*ptrRadioMenu->getCurrentNodeTag()*/, buttonSequence.array[0], buttonSequence.array[1]);
		this->noButtonInArrayMessage(buttonSequence);
		//assert(0);
		return false;
	}
	this->ExecutableButtonsArray[whichPosition].functionPointer = newFunc;
	return true;
}

bool keyboardToFunction::appendButtonArrayWithFunctionPointer(keyboardUnion buttonSequence, void (*func)(void*)){
	this->ExecutableButtonsArray[0].func_ptr=func;
	return true;
}

/*
 *
void keyboardToFunction::executeFunctionPointer(std::function<void()>* funcPtr){
    if (*funcPtr) {
        (*funcPtr)(); // Prawidłowe wywołanie std::function<void()>
    } else {
        pPrintf->feedPrintf("%s: Pointer to function is empty.", "TAG_NAME_HERE");
    }
}
*/

keyboardToFunction::~keyboardToFunction() {
	// TODO Auto-generated destructor stub
	this->buildExecutableButtonsArrayEmpty();
}

