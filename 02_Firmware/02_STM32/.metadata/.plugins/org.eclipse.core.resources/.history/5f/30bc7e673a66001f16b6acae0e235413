#include "SileliS_code/myList.h"

// Inicjalizacja statycznych zmiennych
myList* myList::head = nullptr;
myList* myList::currentListNode = nullptr;
uint8_t myList::indexCounter = 0;

// Konstruktor
myList::myList(ListHeader* pointerListHeader, const char* nodeName, uint8_t execFunctionArraySize)
    : menuItem(nodeName, execFunctionArraySize) {
	this->pListHeader = pointerListHeader;

	//this->pListHeader->indexCounter++;
	if (head==nullptr){
		head=this;
	}
	nextListNode=nullptr;
	//currentListNode=this;
	this->pListHeader->indexCounter++;
	//indexCounter++;
	this->index = this->pListHeader->indexCounter;
	assert(this);
}
/*
// Zwalnianie pamięci listy
void myList::freeList() {
    myList* temp;// = head;
    while (head!= nullptr) {
        temp = head;
        head = head->next;
        delete temp;
        temp = next;
        this->indexCounter--;
    }
    //head = nullptr;
    current = head; //nullptr;
    //indexCounter = 0;
}*/


// Destruktor
myList::~myList() {
//	if(head==nullptr)
//		return;
}

// Dodanie elementu na początku listy
void myList::addAtBeginning(const char* nodeName, uint8_t execFunctionArraySize) {
    if (!canAddItem()) return;
    myList* newNode;// = new myList(nodeName, execFunctionArraySize);
    assert(newNode = new myList(pListHeader, nodeName, execFunctionArraySize));
    newNode->nextListNode = head;
    head = newNode;
    currentListNode = newNode; // Ustawienie current na nowo dodany element
    renumberNodes();
}

// Dodanie elementu na końcu listy
void myList::addAtEnd(const char* nodeName, uint8_t execFunctionArraySize) {
    if (!canAddItem()) return;

    myList* newNode;// = new myList(nodeName, execFunctionArraySize);
    assert(newNode = new myList(pListHeader, nodeName, execFunctionArraySize));
    if (!head) {
        head = newNode;
    } else {
        myList* temp = head;
        while (temp->nextListNode) {
            temp = temp->nextListNode;
        }
        temp->nextListNode = newNode;
    }
    currentListNode = newNode; // Ustawienie current na nowo dodany element
    renumberNodes();
}

// Resetowanie current do pierwszego elementu listy
void myList::resetToFirst() {
	currentListNode = head;
}

// Przesunięcie current na następny element listy
myList* myList::moveToNext() {
    if (currentListNode) {
    	currentListNode = currentListNode->nextListNode;
    }
    return currentListNode;
}

void myList::moveToEnd(void){
	while(!this->isAtEnd()){
		this->moveToNext();
	}
}
void 	myList::moveToNextInLoop(void){
	printf("Exit from: %s\r\n",currentListNode->mI_TAG);
	currentListNode->mI_executeDeInit();
	if(!moveToNext())
		resetToFirst();
	printf("Enter to:%s\r\n",currentListNode->mI_TAG);
	//printCurrent();
	currentListNode->mI_executeInit();
}


// Zwracanie indeksu aktualnego węzła
uint8_t myList::getCurrentNodeIndex() const {
    return /*current ?*/ currentListNode->index /*: UINT8_MAX*/;
}

// Sprawdzanie, czy current znajduje się na końcu listy
bool myList::isAtEnd() const {
    return currentListNode->nextListNode == nullptr;
}

/*
// Usuwanie elementu z listy
void myList::removeElement(uint8_t indexToDelete) {
    if (!head) return;

    resetToFirst();
    myList* previous;// = head;
    while(current!=nullptr){
    	previous = current;
    	printCurrent();
    	if (current->index== indexToDelete){
    		previous->next=current->next;
    		break;
    	}

    	else{
    		moveToNext();
    	}
    }
    delete []current;
    printf("koniec\r\n");
    resetToFirst();
    //delete temp;
    //renumberNodes();
}*/

// Wydrukowanie wszystkich elementów listy
void myList::printList() const {
    myList* temp = head;
    while (temp){
    	printf("Node Index: %d, Name: %s.\r\n", temp->index, temp->mI_TAG);
        //std::cout << "Node Index: " << (int)temp->index << ", Name: " << (temp->name ? temp->name : "Unnamed") << std::endl;
        temp = temp->nextListNode;
    }
}

// Wydrukowanie aktualnego elementu listy
void myList::printCurrent() const {
    if (currentListNode) {
    	printf("Current Node Index: %d, Name: %s.\r\n", currentListNode->index, currentListNode->mI_TAG);
        //std::cout << "Current Node Index: " << (int)current->index << ", Name: " << (current->name ? current->name : "Unnamed") << std::endl;
    } else {
    	printf("No current node.\r\n");
        //std::cout << "No current node." << std::endl;
    }
}

// Renumeracja węzłów listy
void myList::renumberNodes() {
    myList* temp = head;
    uint8_t tempIndex = 0;
    while (temp) {
        temp->index = ++tempIndex;
        temp = temp->nextListNode;
    }
    //indexCounter = index;
}

// Sprawdzanie, czy można dodać element do listy
bool myList::canAddItem() const {
    return indexCounter < UINT8_MAX; // Maksymalna wartość uint8_t to 255, więc sprawdzamy, czy jest mniejsza niż 255
}


void myList::deleteList() {
    while (head != nullptr) {
        myList* temp = head;   // Zapamiętaj aktualny head
        head = head->nextListNode;     // Przejdź do następnego elementu
        delete temp;           // Usuń aktualny element	aka ~myList()
        indexCounter--;
    }
//    if (!head){
    	//delete current;
    currentListNode = nullptr;  // Po usunięciu wszystkich elementów ustaw current na nullptr
//    	head->next = nullptr;

 //   }

}

