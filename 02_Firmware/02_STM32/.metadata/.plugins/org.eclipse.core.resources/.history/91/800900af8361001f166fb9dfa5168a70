#ifndef LIST_H
#define LIST_H

#include <cstdint>
#include <iostream>
#include <cstring>

class List:protected menuItem {
public:
    // Konstruktor
    List(const char* nodeName = nullptr, uint8_t nodeIndex = 0);

    // Destruktor
    ~List();

    // Dodawanie elementów do listy
    void addAtBeginning(const char* nodeName);
    void addAtEnd(const char* nodeName);

    // Poruszanie się po liście
    void resetToFirst();
    void moveToNext();
    uint8_t getCurrentNodeIndex() const;
    bool isAtEnd() const;

    // Usuwanie elementu z listy
    void removeElement(uint8_t indexToDelete);

    // Wydrukowanie elementów listy
    void printList() const;
    void printCurrent() const;

private:
    char* name;      // Nazwa węzła
    uint8_t index;   // Indeks węzła
    List* next;      // Wskaźnik do następnego elementu w liście
    static List* head;   // Wskaźnik do pierwszego elementu listy
    static List* current; // Wskaźnik do aktualnego elementu listy
    static uint8_t indexCounter; // Licznik indeksów

    // Prywatna funkcja do renumeracji węzłów
    void renumberNodes();

    // Prywatna funkcja do sprawdzania, czy można dodać element do listy
    bool canAddItem() const;

    // Prywatna funkcja do zwalniania pamięci
    static void freeList();
};

#endif // LIST_H
