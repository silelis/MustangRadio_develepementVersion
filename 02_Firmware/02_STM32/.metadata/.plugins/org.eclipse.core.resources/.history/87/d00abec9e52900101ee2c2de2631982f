/*
 * radioMenu.h
 *
 *  Created on: Aug 25, 2024
 *      Author: dbank
 */

#ifndef INC_SILELIS_CODE_RADIOMENU_H_
#define INC_SILELIS_CODE_RADIOMENU_H_
#include "SileliS_code/myList.h"
#include "FreeRTOSConfig.h"
#include "FreeRTOS.h"
#include "queue.h"
#include "task.h"
#include "semphr.h"
#include "comunicationStructures.h"
#include "SileliS_code/keyboardToFunction.h"


#include <iostream>
#include <functional>

enum{
	USA =1,
	EU,
	Japan
}regionFM_AM;

/*
 * Radio FM (Frequency Modulation)
Region					Zakres częstotliwości							Skok strojenia
Europa (w tym Polska)	87 500 000 Hz – 108 000 000 Hz (87,5–108 MHz)	100 000 Hz (100 kHz)
Ameryka Północna		88 000 000 Hz – 108 000 000 Hz (88–108 MHz)		200 000 Hz (200 kHz)
Japonia					76 000 000 Hz – 95 000 000 Hz (76–95 MHz)		100 000 Hz (100 kHz)
Rosja (dawniej OIRT)	65 500 000 Hz – 74 000 000 Hz (65,5–74 MHz)		100 000 Hz (100 kHz)

Radio AM (Amplitude Modulation)
Region					Zakres częstotliwości							Skok strojenia
Europa (LW/MW)			148 500 Hz – 1 602 000 Hz (148,5 kHz–1,602 MHz)	9 000 Hz (9 kHz)
Ameryka Północna (MW)	530 000 Hz – 1 710 000 Hz (530 kHz–1,71 MHz)	10 000 Hz (10 kHz)
Krótkofalówka (SW)		2 300 000 Hz – 26 100 000 Hz (2,3–26,1 MHz)		5 000 Hz (5 kHz)
Lotnicze (AM)			118 000 000 Hz – 137 000 000 Hz (118–137 MHz)	25 000 Hz (25 kHz)
 *
*/


struct FM_AM_parameters{
	uint32
};

struct radioMegaStruct{
	struct {
		_execute_t	ExecutableButtonsArray[EXECUTALBE_BUTTONS_ARRAY_SIZE];
	}control;
	struct {
		struct{
			colorSet sourceLed;
			colorSet equaliserLed;
			colorSet errorLed;
			colorSet backlightLeds;
		}leds;
		struct{
			uint16_t beginOffest;	//ilość kroków od początku jaka jest potrzebna do odmierzenia, aby wskazówka była na początku skali
			uint16_t endOffset; //ilość kroków od końca jaka jest potrzebna do odmierzenia, aby wskazówka była na początku skali
			uint16_t maxPosition;
			uint16_t currentPosition;
		}motorParameters;		//w kodzie HMI podobną strukturą jest typedef struct{}MotorParameters;
	}humanMachineOnterface;
};

class radioMenu: public keyboardToFunction {

public:
	radioMenu();
	virtual ~radioMenu();
	BaseType_t queueRadioMenuKbrdSend(const void * kbrdUnionSend);
	BaseType_t queueRadioMenuKbrdReceive(keyboardUnion* kbrdUnionReceived);

	bool executeButtonFrom_radioMainMenu(keyboardUnion buttonSequence);
	bool executeButtonFrom_curretDevice(keyboardUnion buttonSequence);
	const char* getCurrentNodeTag();// const;


protected:


	void setCurrentDeviceMenu_audio(void);
	void setCurrentDeviceMenu_periphery(void);
private:
	const char	*TAG = "Main menu log: ";
	QueueHandle_t queueRadioMenuKbrd;	//kolejka, którza pobiera klawisze otrzymane z ESP32 i przekazuje do menuRadio


	ListHeader  ListHeader_audioDevices;
	ListHeader  ListHeader_peripheryDevices;
	ListHeader  ListHeader_mainMenu;

	myList*		radioMainMenu;				//zerowe menu/lista radio obsługująca but_ON/OFF, long_but_ON/OFF,VOL_CW,VOL_CCW,but_EQU,long_but_EQU
	myList*		curretDevice;				//wskaźnik do obecnie obsługiwanej przesz menu listy przełącza się pomiędzy audioDevices i peripheryDevices
	myList*		audioDevices;				//lista wszystkich dostępnych menu urządzęń audio
	myList*		peripheryDevices;			//lista wszystkich dostępnych do konfiguracji peryferiów

	void createDeviceMenuList_audio(void);
	void createDeviceMenuList_periphery(void);
	void createDeviceMenuList_mainMenu(void);

	void 		menuFunction_equButShortPressed(void);
	void 		menuFunction_volButShortPressed(void);
	void 		menuFunction_swithPeripheryDeviceToAudioDevice(void);
	//friend		void manageRadioButtonsAndManue(void* thing);

	uint8_t				peripheryMenu_TimeoutCounter;
	SemaphoreHandle_t	peripheryMenu_TimeoutCounterSemaphore;
	SemaphoreHandle_t	peripheryMenu_TaskSuspendAllowedSemaphore;
public:
	TaskHandle_t		peripheryMenu_taskHandle;
private:
	uint8_t peripheryMenu_TimeoutCounterIncrement(void);
	void peripheryMenu_TimeoutCounterReset(void);
	void peripheryMenu_onTimeoutActions(void);
	friend void peripheryMenuTimeoutFunction(void* thing);
};

#endif /* INC_SILELIS_CODE_RADIOMENU_H_ */
