
Radio_main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ed5c  080002b0  080002b0  000012b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000068c  0800f010  0800f010  00010010  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800f69c  0800f69c  0001069c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800f6a4  0800f6a4  000106a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800f6a8  0800f6a8  000106a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001dc  24000000  0800f6ac  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004cb0  240001dc  0800f888  000111dc  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24004e8c  0800f888  00011e8c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000111dc  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002df64  00000000  00000000  0001120a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000056c2  00000000  00000000  0003f16e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001d38  00000000  00000000  00044830  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000016a5  00000000  00000000  00046568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00037a58  00000000  00000000  00047c0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00029046  00000000  00000000  0007f665  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015133d  00000000  00000000  000a86ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001f99e8  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00008f1c  00000000  00000000  001f9a2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000008b  00000000  00000000  00202948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	@ (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	@ (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	240001dc 	.word	0x240001dc
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0800eff4 	.word	0x0800eff4

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	@ (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	@ (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	@ (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	240001e0 	.word	0x240001e0
 80002ec:	0800eff4 	.word	0x0800eff4

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <strlen>:
 8000390:	4603      	mov	r3, r0
 8000392:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000396:	2a00      	cmp	r2, #0
 8000398:	d1fb      	bne.n	8000392 <strlen+0x2>
 800039a:	1a18      	subs	r0, r3, r0
 800039c:	3801      	subs	r0, #1
 800039e:	4770      	bx	lr

080003a0 <__aeabi_drsub>:
 80003a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003a4:	e002      	b.n	80003ac <__adddf3>
 80003a6:	bf00      	nop

080003a8 <__aeabi_dsub>:
 80003a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003ac <__adddf3>:
 80003ac:	b530      	push	{r4, r5, lr}
 80003ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003b6:	ea94 0f05 	teq	r4, r5
 80003ba:	bf08      	it	eq
 80003bc:	ea90 0f02 	teqeq	r0, r2
 80003c0:	bf1f      	itttt	ne
 80003c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d2:	f000 80e2 	beq.w	800059a <__adddf3+0x1ee>
 80003d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003de:	bfb8      	it	lt
 80003e0:	426d      	neglt	r5, r5
 80003e2:	dd0c      	ble.n	80003fe <__adddf3+0x52>
 80003e4:	442c      	add	r4, r5
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	ea82 0000 	eor.w	r0, r2, r0
 80003f2:	ea83 0101 	eor.w	r1, r3, r1
 80003f6:	ea80 0202 	eor.w	r2, r0, r2
 80003fa:	ea81 0303 	eor.w	r3, r1, r3
 80003fe:	2d36      	cmp	r5, #54	@ 0x36
 8000400:	bf88      	it	hi
 8000402:	bd30      	pophi	{r4, r5, pc}
 8000404:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000408:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800040c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000410:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000414:	d002      	beq.n	800041c <__adddf3+0x70>
 8000416:	4240      	negs	r0, r0
 8000418:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800041c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000420:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000424:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000428:	d002      	beq.n	8000430 <__adddf3+0x84>
 800042a:	4252      	negs	r2, r2
 800042c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000430:	ea94 0f05 	teq	r4, r5
 8000434:	f000 80a7 	beq.w	8000586 <__adddf3+0x1da>
 8000438:	f1a4 0401 	sub.w	r4, r4, #1
 800043c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000440:	db0d      	blt.n	800045e <__adddf3+0xb2>
 8000442:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000446:	fa22 f205 	lsr.w	r2, r2, r5
 800044a:	1880      	adds	r0, r0, r2
 800044c:	f141 0100 	adc.w	r1, r1, #0
 8000450:	fa03 f20e 	lsl.w	r2, r3, lr
 8000454:	1880      	adds	r0, r0, r2
 8000456:	fa43 f305 	asr.w	r3, r3, r5
 800045a:	4159      	adcs	r1, r3
 800045c:	e00e      	b.n	800047c <__adddf3+0xd0>
 800045e:	f1a5 0520 	sub.w	r5, r5, #32
 8000462:	f10e 0e20 	add.w	lr, lr, #32
 8000466:	2a01      	cmp	r2, #1
 8000468:	fa03 fc0e 	lsl.w	ip, r3, lr
 800046c:	bf28      	it	cs
 800046e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000472:	fa43 f305 	asr.w	r3, r3, r5
 8000476:	18c0      	adds	r0, r0, r3
 8000478:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800047c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000480:	d507      	bpl.n	8000492 <__adddf3+0xe6>
 8000482:	f04f 0e00 	mov.w	lr, #0
 8000486:	f1dc 0c00 	rsbs	ip, ip, #0
 800048a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800048e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000492:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000496:	d31b      	bcc.n	80004d0 <__adddf3+0x124>
 8000498:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800049c:	d30c      	bcc.n	80004b8 <__adddf3+0x10c>
 800049e:	0849      	lsrs	r1, r1, #1
 80004a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004a8:	f104 0401 	add.w	r4, r4, #1
 80004ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004b4:	f080 809a 	bcs.w	80005ec <__adddf3+0x240>
 80004b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004bc:	bf08      	it	eq
 80004be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004c2:	f150 0000 	adcs.w	r0, r0, #0
 80004c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ca:	ea41 0105 	orr.w	r1, r1, r5
 80004ce:	bd30      	pop	{r4, r5, pc}
 80004d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004d4:	4140      	adcs	r0, r0
 80004d6:	eb41 0101 	adc.w	r1, r1, r1
 80004da:	3c01      	subs	r4, #1
 80004dc:	bf28      	it	cs
 80004de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004e2:	d2e9      	bcs.n	80004b8 <__adddf3+0x10c>
 80004e4:	f091 0f00 	teq	r1, #0
 80004e8:	bf04      	itt	eq
 80004ea:	4601      	moveq	r1, r0
 80004ec:	2000      	moveq	r0, #0
 80004ee:	fab1 f381 	clz	r3, r1
 80004f2:	bf08      	it	eq
 80004f4:	3320      	addeq	r3, #32
 80004f6:	f1a3 030b 	sub.w	r3, r3, #11
 80004fa:	f1b3 0220 	subs.w	r2, r3, #32
 80004fe:	da0c      	bge.n	800051a <__adddf3+0x16e>
 8000500:	320c      	adds	r2, #12
 8000502:	dd08      	ble.n	8000516 <__adddf3+0x16a>
 8000504:	f102 0c14 	add.w	ip, r2, #20
 8000508:	f1c2 020c 	rsb	r2, r2, #12
 800050c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000510:	fa21 f102 	lsr.w	r1, r1, r2
 8000514:	e00c      	b.n	8000530 <__adddf3+0x184>
 8000516:	f102 0214 	add.w	r2, r2, #20
 800051a:	bfd8      	it	le
 800051c:	f1c2 0c20 	rsble	ip, r2, #32
 8000520:	fa01 f102 	lsl.w	r1, r1, r2
 8000524:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000528:	bfdc      	itt	le
 800052a:	ea41 010c 	orrle.w	r1, r1, ip
 800052e:	4090      	lslle	r0, r2
 8000530:	1ae4      	subs	r4, r4, r3
 8000532:	bfa2      	ittt	ge
 8000534:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000538:	4329      	orrge	r1, r5
 800053a:	bd30      	popge	{r4, r5, pc}
 800053c:	ea6f 0404 	mvn.w	r4, r4
 8000540:	3c1f      	subs	r4, #31
 8000542:	da1c      	bge.n	800057e <__adddf3+0x1d2>
 8000544:	340c      	adds	r4, #12
 8000546:	dc0e      	bgt.n	8000566 <__adddf3+0x1ba>
 8000548:	f104 0414 	add.w	r4, r4, #20
 800054c:	f1c4 0220 	rsb	r2, r4, #32
 8000550:	fa20 f004 	lsr.w	r0, r0, r4
 8000554:	fa01 f302 	lsl.w	r3, r1, r2
 8000558:	ea40 0003 	orr.w	r0, r0, r3
 800055c:	fa21 f304 	lsr.w	r3, r1, r4
 8000560:	ea45 0103 	orr.w	r1, r5, r3
 8000564:	bd30      	pop	{r4, r5, pc}
 8000566:	f1c4 040c 	rsb	r4, r4, #12
 800056a:	f1c4 0220 	rsb	r2, r4, #32
 800056e:	fa20 f002 	lsr.w	r0, r0, r2
 8000572:	fa01 f304 	lsl.w	r3, r1, r4
 8000576:	ea40 0003 	orr.w	r0, r0, r3
 800057a:	4629      	mov	r1, r5
 800057c:	bd30      	pop	{r4, r5, pc}
 800057e:	fa21 f004 	lsr.w	r0, r1, r4
 8000582:	4629      	mov	r1, r5
 8000584:	bd30      	pop	{r4, r5, pc}
 8000586:	f094 0f00 	teq	r4, #0
 800058a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800058e:	bf06      	itte	eq
 8000590:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000594:	3401      	addeq	r4, #1
 8000596:	3d01      	subne	r5, #1
 8000598:	e74e      	b.n	8000438 <__adddf3+0x8c>
 800059a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800059e:	bf18      	it	ne
 80005a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005a4:	d029      	beq.n	80005fa <__adddf3+0x24e>
 80005a6:	ea94 0f05 	teq	r4, r5
 80005aa:	bf08      	it	eq
 80005ac:	ea90 0f02 	teqeq	r0, r2
 80005b0:	d005      	beq.n	80005be <__adddf3+0x212>
 80005b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005b6:	bf04      	itt	eq
 80005b8:	4619      	moveq	r1, r3
 80005ba:	4610      	moveq	r0, r2
 80005bc:	bd30      	pop	{r4, r5, pc}
 80005be:	ea91 0f03 	teq	r1, r3
 80005c2:	bf1e      	ittt	ne
 80005c4:	2100      	movne	r1, #0
 80005c6:	2000      	movne	r0, #0
 80005c8:	bd30      	popne	{r4, r5, pc}
 80005ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ce:	d105      	bne.n	80005dc <__adddf3+0x230>
 80005d0:	0040      	lsls	r0, r0, #1
 80005d2:	4149      	adcs	r1, r1
 80005d4:	bf28      	it	cs
 80005d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005da:	bd30      	pop	{r4, r5, pc}
 80005dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005e0:	bf3c      	itt	cc
 80005e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005e6:	bd30      	popcc	{r4, r5, pc}
 80005e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005f4:	f04f 0000 	mov.w	r0, #0
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005fe:	bf1a      	itte	ne
 8000600:	4619      	movne	r1, r3
 8000602:	4610      	movne	r0, r2
 8000604:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000608:	bf1c      	itt	ne
 800060a:	460b      	movne	r3, r1
 800060c:	4602      	movne	r2, r0
 800060e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000612:	bf06      	itte	eq
 8000614:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000618:	ea91 0f03 	teqeq	r1, r3
 800061c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000620:	bd30      	pop	{r4, r5, pc}
 8000622:	bf00      	nop

08000624 <__aeabi_ui2d>:
 8000624:	f090 0f00 	teq	r0, #0
 8000628:	bf04      	itt	eq
 800062a:	2100      	moveq	r1, #0
 800062c:	4770      	bxeq	lr
 800062e:	b530      	push	{r4, r5, lr}
 8000630:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000634:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000638:	f04f 0500 	mov.w	r5, #0
 800063c:	f04f 0100 	mov.w	r1, #0
 8000640:	e750      	b.n	80004e4 <__adddf3+0x138>
 8000642:	bf00      	nop

08000644 <__aeabi_i2d>:
 8000644:	f090 0f00 	teq	r0, #0
 8000648:	bf04      	itt	eq
 800064a:	2100      	moveq	r1, #0
 800064c:	4770      	bxeq	lr
 800064e:	b530      	push	{r4, r5, lr}
 8000650:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000654:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000658:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800065c:	bf48      	it	mi
 800065e:	4240      	negmi	r0, r0
 8000660:	f04f 0100 	mov.w	r1, #0
 8000664:	e73e      	b.n	80004e4 <__adddf3+0x138>
 8000666:	bf00      	nop

08000668 <__aeabi_f2d>:
 8000668:	0042      	lsls	r2, r0, #1
 800066a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800066e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000672:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000676:	bf1f      	itttt	ne
 8000678:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800067c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000680:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000684:	4770      	bxne	lr
 8000686:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800068a:	bf08      	it	eq
 800068c:	4770      	bxeq	lr
 800068e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000692:	bf04      	itt	eq
 8000694:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000698:	4770      	bxeq	lr
 800069a:	b530      	push	{r4, r5, lr}
 800069c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006a8:	e71c      	b.n	80004e4 <__adddf3+0x138>
 80006aa:	bf00      	nop

080006ac <__aeabi_ul2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f04f 0500 	mov.w	r5, #0
 80006ba:	e00a      	b.n	80006d2 <__aeabi_l2d+0x16>

080006bc <__aeabi_l2d>:
 80006bc:	ea50 0201 	orrs.w	r2, r0, r1
 80006c0:	bf08      	it	eq
 80006c2:	4770      	bxeq	lr
 80006c4:	b530      	push	{r4, r5, lr}
 80006c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ca:	d502      	bpl.n	80006d2 <__aeabi_l2d+0x16>
 80006cc:	4240      	negs	r0, r0
 80006ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006de:	f43f aed8 	beq.w	8000492 <__adddf3+0xe6>
 80006e2:	f04f 0203 	mov.w	r2, #3
 80006e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ea:	bf18      	it	ne
 80006ec:	3203      	addne	r2, #3
 80006ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006f2:	bf18      	it	ne
 80006f4:	3203      	addne	r2, #3
 80006f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006fa:	f1c2 0320 	rsb	r3, r2, #32
 80006fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000702:	fa20 f002 	lsr.w	r0, r0, r2
 8000706:	fa01 fe03 	lsl.w	lr, r1, r3
 800070a:	ea40 000e 	orr.w	r0, r0, lr
 800070e:	fa21 f102 	lsr.w	r1, r1, r2
 8000712:	4414      	add	r4, r2
 8000714:	e6bd      	b.n	8000492 <__adddf3+0xe6>
 8000716:	bf00      	nop

08000718 <__aeabi_uldivmod>:
 8000718:	b953      	cbnz	r3, 8000730 <__aeabi_uldivmod+0x18>
 800071a:	b94a      	cbnz	r2, 8000730 <__aeabi_uldivmod+0x18>
 800071c:	2900      	cmp	r1, #0
 800071e:	bf08      	it	eq
 8000720:	2800      	cmpeq	r0, #0
 8000722:	bf1c      	itt	ne
 8000724:	f04f 31ff 	movne.w	r1, #4294967295
 8000728:	f04f 30ff 	movne.w	r0, #4294967295
 800072c:	f000 b9a2 	b.w	8000a74 <__aeabi_idiv0>
 8000730:	f1ad 0c08 	sub.w	ip, sp, #8
 8000734:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000738:	f000 f83e 	bl	80007b8 <__udivmoddi4>
 800073c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000740:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000744:	b004      	add	sp, #16
 8000746:	4770      	bx	lr

08000748 <__aeabi_d2lz>:
 8000748:	b508      	push	{r3, lr}
 800074a:	4602      	mov	r2, r0
 800074c:	460b      	mov	r3, r1
 800074e:	ec43 2b17 	vmov	d7, r2, r3
 8000752:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000756:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800075a:	d403      	bmi.n	8000764 <__aeabi_d2lz+0x1c>
 800075c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000760:	f000 b80a 	b.w	8000778 <__aeabi_d2ulz>
 8000764:	eeb1 7b47 	vneg.f64	d7, d7
 8000768:	ec51 0b17 	vmov	r0, r1, d7
 800076c:	f000 f804 	bl	8000778 <__aeabi_d2ulz>
 8000770:	4240      	negs	r0, r0
 8000772:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000776:	bd08      	pop	{r3, pc}

08000778 <__aeabi_d2ulz>:
 8000778:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 80007a8 <__aeabi_d2ulz+0x30>
 800077c:	ec41 0b17 	vmov	d7, r0, r1
 8000780:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 80007b0 <__aeabi_d2ulz+0x38>
 8000784:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000788:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800078c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000790:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000794:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000798:	ee16 1a10 	vmov	r1, s12
 800079c:	ee17 0a90 	vmov	r0, s15
 80007a0:	4770      	bx	lr
 80007a2:	bf00      	nop
 80007a4:	f3af 8000 	nop.w
 80007a8:	00000000 	.word	0x00000000
 80007ac:	3df00000 	.word	0x3df00000
 80007b0:	00000000 	.word	0x00000000
 80007b4:	41f00000 	.word	0x41f00000

080007b8 <__udivmoddi4>:
 80007b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007bc:	9d08      	ldr	r5, [sp, #32]
 80007be:	460c      	mov	r4, r1
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d14e      	bne.n	8000862 <__udivmoddi4+0xaa>
 80007c4:	4694      	mov	ip, r2
 80007c6:	458c      	cmp	ip, r1
 80007c8:	4686      	mov	lr, r0
 80007ca:	fab2 f282 	clz	r2, r2
 80007ce:	d962      	bls.n	8000896 <__udivmoddi4+0xde>
 80007d0:	b14a      	cbz	r2, 80007e6 <__udivmoddi4+0x2e>
 80007d2:	f1c2 0320 	rsb	r3, r2, #32
 80007d6:	4091      	lsls	r1, r2
 80007d8:	fa20 f303 	lsr.w	r3, r0, r3
 80007dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80007e0:	4319      	orrs	r1, r3
 80007e2:	fa00 fe02 	lsl.w	lr, r0, r2
 80007e6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80007ea:	fa1f f68c 	uxth.w	r6, ip
 80007ee:	fbb1 f4f7 	udiv	r4, r1, r7
 80007f2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80007f6:	fb07 1114 	mls	r1, r7, r4, r1
 80007fa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007fe:	fb04 f106 	mul.w	r1, r4, r6
 8000802:	4299      	cmp	r1, r3
 8000804:	d90a      	bls.n	800081c <__udivmoddi4+0x64>
 8000806:	eb1c 0303 	adds.w	r3, ip, r3
 800080a:	f104 30ff 	add.w	r0, r4, #4294967295
 800080e:	f080 8112 	bcs.w	8000a36 <__udivmoddi4+0x27e>
 8000812:	4299      	cmp	r1, r3
 8000814:	f240 810f 	bls.w	8000a36 <__udivmoddi4+0x27e>
 8000818:	3c02      	subs	r4, #2
 800081a:	4463      	add	r3, ip
 800081c:	1a59      	subs	r1, r3, r1
 800081e:	fa1f f38e 	uxth.w	r3, lr
 8000822:	fbb1 f0f7 	udiv	r0, r1, r7
 8000826:	fb07 1110 	mls	r1, r7, r0, r1
 800082a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800082e:	fb00 f606 	mul.w	r6, r0, r6
 8000832:	429e      	cmp	r6, r3
 8000834:	d90a      	bls.n	800084c <__udivmoddi4+0x94>
 8000836:	eb1c 0303 	adds.w	r3, ip, r3
 800083a:	f100 31ff 	add.w	r1, r0, #4294967295
 800083e:	f080 80fc 	bcs.w	8000a3a <__udivmoddi4+0x282>
 8000842:	429e      	cmp	r6, r3
 8000844:	f240 80f9 	bls.w	8000a3a <__udivmoddi4+0x282>
 8000848:	4463      	add	r3, ip
 800084a:	3802      	subs	r0, #2
 800084c:	1b9b      	subs	r3, r3, r6
 800084e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000852:	2100      	movs	r1, #0
 8000854:	b11d      	cbz	r5, 800085e <__udivmoddi4+0xa6>
 8000856:	40d3      	lsrs	r3, r2
 8000858:	2200      	movs	r2, #0
 800085a:	e9c5 3200 	strd	r3, r2, [r5]
 800085e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000862:	428b      	cmp	r3, r1
 8000864:	d905      	bls.n	8000872 <__udivmoddi4+0xba>
 8000866:	b10d      	cbz	r5, 800086c <__udivmoddi4+0xb4>
 8000868:	e9c5 0100 	strd	r0, r1, [r5]
 800086c:	2100      	movs	r1, #0
 800086e:	4608      	mov	r0, r1
 8000870:	e7f5      	b.n	800085e <__udivmoddi4+0xa6>
 8000872:	fab3 f183 	clz	r1, r3
 8000876:	2900      	cmp	r1, #0
 8000878:	d146      	bne.n	8000908 <__udivmoddi4+0x150>
 800087a:	42a3      	cmp	r3, r4
 800087c:	d302      	bcc.n	8000884 <__udivmoddi4+0xcc>
 800087e:	4290      	cmp	r0, r2
 8000880:	f0c0 80f0 	bcc.w	8000a64 <__udivmoddi4+0x2ac>
 8000884:	1a86      	subs	r6, r0, r2
 8000886:	eb64 0303 	sbc.w	r3, r4, r3
 800088a:	2001      	movs	r0, #1
 800088c:	2d00      	cmp	r5, #0
 800088e:	d0e6      	beq.n	800085e <__udivmoddi4+0xa6>
 8000890:	e9c5 6300 	strd	r6, r3, [r5]
 8000894:	e7e3      	b.n	800085e <__udivmoddi4+0xa6>
 8000896:	2a00      	cmp	r2, #0
 8000898:	f040 8090 	bne.w	80009bc <__udivmoddi4+0x204>
 800089c:	eba1 040c 	sub.w	r4, r1, ip
 80008a0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008a4:	fa1f f78c 	uxth.w	r7, ip
 80008a8:	2101      	movs	r1, #1
 80008aa:	fbb4 f6f8 	udiv	r6, r4, r8
 80008ae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008b2:	fb08 4416 	mls	r4, r8, r6, r4
 80008b6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008ba:	fb07 f006 	mul.w	r0, r7, r6
 80008be:	4298      	cmp	r0, r3
 80008c0:	d908      	bls.n	80008d4 <__udivmoddi4+0x11c>
 80008c2:	eb1c 0303 	adds.w	r3, ip, r3
 80008c6:	f106 34ff 	add.w	r4, r6, #4294967295
 80008ca:	d202      	bcs.n	80008d2 <__udivmoddi4+0x11a>
 80008cc:	4298      	cmp	r0, r3
 80008ce:	f200 80cd 	bhi.w	8000a6c <__udivmoddi4+0x2b4>
 80008d2:	4626      	mov	r6, r4
 80008d4:	1a1c      	subs	r4, r3, r0
 80008d6:	fa1f f38e 	uxth.w	r3, lr
 80008da:	fbb4 f0f8 	udiv	r0, r4, r8
 80008de:	fb08 4410 	mls	r4, r8, r0, r4
 80008e2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008e6:	fb00 f707 	mul.w	r7, r0, r7
 80008ea:	429f      	cmp	r7, r3
 80008ec:	d908      	bls.n	8000900 <__udivmoddi4+0x148>
 80008ee:	eb1c 0303 	adds.w	r3, ip, r3
 80008f2:	f100 34ff 	add.w	r4, r0, #4294967295
 80008f6:	d202      	bcs.n	80008fe <__udivmoddi4+0x146>
 80008f8:	429f      	cmp	r7, r3
 80008fa:	f200 80b0 	bhi.w	8000a5e <__udivmoddi4+0x2a6>
 80008fe:	4620      	mov	r0, r4
 8000900:	1bdb      	subs	r3, r3, r7
 8000902:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000906:	e7a5      	b.n	8000854 <__udivmoddi4+0x9c>
 8000908:	f1c1 0620 	rsb	r6, r1, #32
 800090c:	408b      	lsls	r3, r1
 800090e:	fa22 f706 	lsr.w	r7, r2, r6
 8000912:	431f      	orrs	r7, r3
 8000914:	fa20 fc06 	lsr.w	ip, r0, r6
 8000918:	fa04 f301 	lsl.w	r3, r4, r1
 800091c:	ea43 030c 	orr.w	r3, r3, ip
 8000920:	40f4      	lsrs	r4, r6
 8000922:	fa00 f801 	lsl.w	r8, r0, r1
 8000926:	0c38      	lsrs	r0, r7, #16
 8000928:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800092c:	fbb4 fef0 	udiv	lr, r4, r0
 8000930:	fa1f fc87 	uxth.w	ip, r7
 8000934:	fb00 441e 	mls	r4, r0, lr, r4
 8000938:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800093c:	fb0e f90c 	mul.w	r9, lr, ip
 8000940:	45a1      	cmp	r9, r4
 8000942:	fa02 f201 	lsl.w	r2, r2, r1
 8000946:	d90a      	bls.n	800095e <__udivmoddi4+0x1a6>
 8000948:	193c      	adds	r4, r7, r4
 800094a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800094e:	f080 8084 	bcs.w	8000a5a <__udivmoddi4+0x2a2>
 8000952:	45a1      	cmp	r9, r4
 8000954:	f240 8081 	bls.w	8000a5a <__udivmoddi4+0x2a2>
 8000958:	f1ae 0e02 	sub.w	lr, lr, #2
 800095c:	443c      	add	r4, r7
 800095e:	eba4 0409 	sub.w	r4, r4, r9
 8000962:	fa1f f983 	uxth.w	r9, r3
 8000966:	fbb4 f3f0 	udiv	r3, r4, r0
 800096a:	fb00 4413 	mls	r4, r0, r3, r4
 800096e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000972:	fb03 fc0c 	mul.w	ip, r3, ip
 8000976:	45a4      	cmp	ip, r4
 8000978:	d907      	bls.n	800098a <__udivmoddi4+0x1d2>
 800097a:	193c      	adds	r4, r7, r4
 800097c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000980:	d267      	bcs.n	8000a52 <__udivmoddi4+0x29a>
 8000982:	45a4      	cmp	ip, r4
 8000984:	d965      	bls.n	8000a52 <__udivmoddi4+0x29a>
 8000986:	3b02      	subs	r3, #2
 8000988:	443c      	add	r4, r7
 800098a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800098e:	fba0 9302 	umull	r9, r3, r0, r2
 8000992:	eba4 040c 	sub.w	r4, r4, ip
 8000996:	429c      	cmp	r4, r3
 8000998:	46ce      	mov	lr, r9
 800099a:	469c      	mov	ip, r3
 800099c:	d351      	bcc.n	8000a42 <__udivmoddi4+0x28a>
 800099e:	d04e      	beq.n	8000a3e <__udivmoddi4+0x286>
 80009a0:	b155      	cbz	r5, 80009b8 <__udivmoddi4+0x200>
 80009a2:	ebb8 030e 	subs.w	r3, r8, lr
 80009a6:	eb64 040c 	sbc.w	r4, r4, ip
 80009aa:	fa04 f606 	lsl.w	r6, r4, r6
 80009ae:	40cb      	lsrs	r3, r1
 80009b0:	431e      	orrs	r6, r3
 80009b2:	40cc      	lsrs	r4, r1
 80009b4:	e9c5 6400 	strd	r6, r4, [r5]
 80009b8:	2100      	movs	r1, #0
 80009ba:	e750      	b.n	800085e <__udivmoddi4+0xa6>
 80009bc:	f1c2 0320 	rsb	r3, r2, #32
 80009c0:	fa20 f103 	lsr.w	r1, r0, r3
 80009c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80009c8:	fa24 f303 	lsr.w	r3, r4, r3
 80009cc:	4094      	lsls	r4, r2
 80009ce:	430c      	orrs	r4, r1
 80009d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009d4:	fa00 fe02 	lsl.w	lr, r0, r2
 80009d8:	fa1f f78c 	uxth.w	r7, ip
 80009dc:	fbb3 f0f8 	udiv	r0, r3, r8
 80009e0:	fb08 3110 	mls	r1, r8, r0, r3
 80009e4:	0c23      	lsrs	r3, r4, #16
 80009e6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009ea:	fb00 f107 	mul.w	r1, r0, r7
 80009ee:	4299      	cmp	r1, r3
 80009f0:	d908      	bls.n	8000a04 <__udivmoddi4+0x24c>
 80009f2:	eb1c 0303 	adds.w	r3, ip, r3
 80009f6:	f100 36ff 	add.w	r6, r0, #4294967295
 80009fa:	d22c      	bcs.n	8000a56 <__udivmoddi4+0x29e>
 80009fc:	4299      	cmp	r1, r3
 80009fe:	d92a      	bls.n	8000a56 <__udivmoddi4+0x29e>
 8000a00:	3802      	subs	r0, #2
 8000a02:	4463      	add	r3, ip
 8000a04:	1a5b      	subs	r3, r3, r1
 8000a06:	b2a4      	uxth	r4, r4
 8000a08:	fbb3 f1f8 	udiv	r1, r3, r8
 8000a0c:	fb08 3311 	mls	r3, r8, r1, r3
 8000a10:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a14:	fb01 f307 	mul.w	r3, r1, r7
 8000a18:	42a3      	cmp	r3, r4
 8000a1a:	d908      	bls.n	8000a2e <__udivmoddi4+0x276>
 8000a1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a20:	f101 36ff 	add.w	r6, r1, #4294967295
 8000a24:	d213      	bcs.n	8000a4e <__udivmoddi4+0x296>
 8000a26:	42a3      	cmp	r3, r4
 8000a28:	d911      	bls.n	8000a4e <__udivmoddi4+0x296>
 8000a2a:	3902      	subs	r1, #2
 8000a2c:	4464      	add	r4, ip
 8000a2e:	1ae4      	subs	r4, r4, r3
 8000a30:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000a34:	e739      	b.n	80008aa <__udivmoddi4+0xf2>
 8000a36:	4604      	mov	r4, r0
 8000a38:	e6f0      	b.n	800081c <__udivmoddi4+0x64>
 8000a3a:	4608      	mov	r0, r1
 8000a3c:	e706      	b.n	800084c <__udivmoddi4+0x94>
 8000a3e:	45c8      	cmp	r8, r9
 8000a40:	d2ae      	bcs.n	80009a0 <__udivmoddi4+0x1e8>
 8000a42:	ebb9 0e02 	subs.w	lr, r9, r2
 8000a46:	eb63 0c07 	sbc.w	ip, r3, r7
 8000a4a:	3801      	subs	r0, #1
 8000a4c:	e7a8      	b.n	80009a0 <__udivmoddi4+0x1e8>
 8000a4e:	4631      	mov	r1, r6
 8000a50:	e7ed      	b.n	8000a2e <__udivmoddi4+0x276>
 8000a52:	4603      	mov	r3, r0
 8000a54:	e799      	b.n	800098a <__udivmoddi4+0x1d2>
 8000a56:	4630      	mov	r0, r6
 8000a58:	e7d4      	b.n	8000a04 <__udivmoddi4+0x24c>
 8000a5a:	46d6      	mov	lr, sl
 8000a5c:	e77f      	b.n	800095e <__udivmoddi4+0x1a6>
 8000a5e:	4463      	add	r3, ip
 8000a60:	3802      	subs	r0, #2
 8000a62:	e74d      	b.n	8000900 <__udivmoddi4+0x148>
 8000a64:	4606      	mov	r6, r0
 8000a66:	4623      	mov	r3, r4
 8000a68:	4608      	mov	r0, r1
 8000a6a:	e70f      	b.n	800088c <__udivmoddi4+0xd4>
 8000a6c:	3e02      	subs	r6, #2
 8000a6e:	4463      	add	r3, ip
 8000a70:	e730      	b.n	80008d4 <__udivmoddi4+0x11c>
 8000a72:	bf00      	nop

08000a74 <__aeabi_idiv0>:
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <PreSleepProcessing>:

void MX_FREERTOS_Init(void); /* (MISRA C 2004 rule 8.1) */

/* USER CODE BEGIN PREPOSTSLEEP */
__weak void PreSleepProcessing(uint32_t ulExpectedIdleTime)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b083      	sub	sp, #12
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
/* place for user code */
}
 8000a80:	bf00      	nop
 8000a82:	370c      	adds	r7, #12
 8000a84:	46bd      	mov	sp, r7
 8000a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8a:	4770      	bx	lr

08000a8c <PostSleepProcessing>:

__weak void PostSleepProcessing(uint32_t ulExpectedIdleTime)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b083      	sub	sp, #12
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
/* place for user code */
}
 8000a94:	bf00      	nop
 8000a96:	370c      	adds	r7, #12
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9e:	4770      	bx	lr

08000aa0 <_Z16MX_FREERTOS_Initv>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000aa4:	4a04      	ldr	r2, [pc, #16]	@ (8000ab8 <_Z16MX_FREERTOS_Initv+0x18>)
 8000aa6:	2100      	movs	r1, #0
 8000aa8:	4804      	ldr	r0, [pc, #16]	@ (8000abc <_Z16MX_FREERTOS_Initv+0x1c>)
 8000aaa:	f006 fc9b 	bl	80073e4 <osThreadNew>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	4a03      	ldr	r2, [pc, #12]	@ (8000ac0 <_Z16MX_FREERTOS_Initv+0x20>)
 8000ab2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000ab4:	bf00      	nop
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	0800f200 	.word	0x0800f200
 8000abc:	08000ac5 	.word	0x08000ac5
 8000ac0:	240001f8 	.word	0x240001f8

08000ac4 <_Z16StartDefaultTaskPv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000acc:	2001      	movs	r0, #1
 8000ace:	f006 fd1b 	bl	8007508 <osDelay>
 8000ad2:	e7fb      	b.n	8000acc <_Z16StartDefaultTaskPv+0x8>

08000ad4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b088      	sub	sp, #32
 8000ad8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ada:	f107 030c 	add.w	r3, r7, #12
 8000ade:	2200      	movs	r2, #0
 8000ae0:	601a      	str	r2, [r3, #0]
 8000ae2:	605a      	str	r2, [r3, #4]
 8000ae4:	609a      	str	r2, [r3, #8]
 8000ae6:	60da      	str	r2, [r3, #12]
 8000ae8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aea:	4b1b      	ldr	r3, [pc, #108]	@ (8000b58 <MX_GPIO_Init+0x84>)
 8000aec:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000af0:	4a19      	ldr	r2, [pc, #100]	@ (8000b58 <MX_GPIO_Init+0x84>)
 8000af2:	f043 0302 	orr.w	r3, r3, #2
 8000af6:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000afa:	4b17      	ldr	r3, [pc, #92]	@ (8000b58 <MX_GPIO_Init+0x84>)
 8000afc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000b00:	f003 0302 	and.w	r3, r3, #2
 8000b04:	60bb      	str	r3, [r7, #8]
 8000b06:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b08:	4b13      	ldr	r3, [pc, #76]	@ (8000b58 <MX_GPIO_Init+0x84>)
 8000b0a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000b0e:	4a12      	ldr	r2, [pc, #72]	@ (8000b58 <MX_GPIO_Init+0x84>)
 8000b10:	f043 0301 	orr.w	r3, r3, #1
 8000b14:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000b18:	4b0f      	ldr	r3, [pc, #60]	@ (8000b58 <MX_GPIO_Init+0x84>)
 8000b1a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000b1e:	f003 0301 	and.w	r3, r3, #1
 8000b22:	607b      	str	r3, [r7, #4]
 8000b24:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = esp32i2cInterruptReqest_Pin;
 8000b26:	2320      	movs	r3, #32
 8000b28:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b2a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000b2e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b30:	2300      	movs	r3, #0
 8000b32:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(esp32i2cInterruptReqest_GPIO_Port, &GPIO_InitStruct);
 8000b34:	f107 030c 	add.w	r3, r7, #12
 8000b38:	4619      	mov	r1, r3
 8000b3a:	4808      	ldr	r0, [pc, #32]	@ (8000b5c <MX_GPIO_Init+0x88>)
 8000b3c:	f000 fff6 	bl	8001b2c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000b40:	2200      	movs	r2, #0
 8000b42:	2105      	movs	r1, #5
 8000b44:	2017      	movs	r0, #23
 8000b46:	f000 ffc9 	bl	8001adc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000b4a:	2017      	movs	r0, #23
 8000b4c:	f000 ffe0 	bl	8001b10 <HAL_NVIC_EnableIRQ>

}
 8000b50:	bf00      	nop
 8000b52:	3720      	adds	r7, #32
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	58024400 	.word	0x58024400
 8000b5c:	58020400 	.word	0x58020400

08000b60 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b64:	4b1b      	ldr	r3, [pc, #108]	@ (8000bd4 <MX_I2C1_Init+0x74>)
 8000b66:	4a1c      	ldr	r2, [pc, #112]	@ (8000bd8 <MX_I2C1_Init+0x78>)
 8000b68:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20B0CCFF;
 8000b6a:	4b1a      	ldr	r3, [pc, #104]	@ (8000bd4 <MX_I2C1_Init+0x74>)
 8000b6c:	4a1b      	ldr	r2, [pc, #108]	@ (8000bdc <MX_I2C1_Init+0x7c>)
 8000b6e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000b70:	4b18      	ldr	r3, [pc, #96]	@ (8000bd4 <MX_I2C1_Init+0x74>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b76:	4b17      	ldr	r3, [pc, #92]	@ (8000bd4 <MX_I2C1_Init+0x74>)
 8000b78:	2201      	movs	r2, #1
 8000b7a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b7c:	4b15      	ldr	r3, [pc, #84]	@ (8000bd4 <MX_I2C1_Init+0x74>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000b82:	4b14      	ldr	r3, [pc, #80]	@ (8000bd4 <MX_I2C1_Init+0x74>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b88:	4b12      	ldr	r3, [pc, #72]	@ (8000bd4 <MX_I2C1_Init+0x74>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b8e:	4b11      	ldr	r3, [pc, #68]	@ (8000bd4 <MX_I2C1_Init+0x74>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8000b94:	4b0f      	ldr	r3, [pc, #60]	@ (8000bd4 <MX_I2C1_Init+0x74>)
 8000b96:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000b9a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b9c:	480d      	ldr	r0, [pc, #52]	@ (8000bd4 <MX_I2C1_Init+0x74>)
 8000b9e:	f001 fa99 	bl	80020d4 <HAL_I2C_Init>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d001      	beq.n	8000bac <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ba8:	f000 faa4 	bl	80010f4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000bac:	2100      	movs	r1, #0
 8000bae:	4809      	ldr	r0, [pc, #36]	@ (8000bd4 <MX_I2C1_Init+0x74>)
 8000bb0:	f001 ff9c 	bl	8002aec <HAL_I2CEx_ConfigAnalogFilter>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000bba:	f000 fa9b 	bl	80010f4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	4804      	ldr	r0, [pc, #16]	@ (8000bd4 <MX_I2C1_Init+0x74>)
 8000bc2:	f001 ffde 	bl	8002b82 <HAL_I2CEx_ConfigDigitalFilter>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000bcc:	f000 fa92 	bl	80010f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000bd0:	bf00      	nop
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	240001fc 	.word	0x240001fc
 8000bd8:	40005400 	.word	0x40005400
 8000bdc:	20b0ccff 	.word	0x20b0ccff

08000be0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b0ba      	sub	sp, #232	@ 0xe8
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000bec:	2200      	movs	r2, #0
 8000bee:	601a      	str	r2, [r3, #0]
 8000bf0:	605a      	str	r2, [r3, #4]
 8000bf2:	609a      	str	r2, [r3, #8]
 8000bf4:	60da      	str	r2, [r3, #12]
 8000bf6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bf8:	f107 0310 	add.w	r3, r7, #16
 8000bfc:	22c0      	movs	r2, #192	@ 0xc0
 8000bfe:	2100      	movs	r1, #0
 8000c00:	4618      	mov	r0, r3
 8000c02:	f00b f809 	bl	800bc18 <memset>
  if(i2cHandle->Instance==I2C1)
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	4a27      	ldr	r2, [pc, #156]	@ (8000ca8 <HAL_I2C_MspInit+0xc8>)
 8000c0c:	4293      	cmp	r3, r2
 8000c0e:	d146      	bne.n	8000c9e <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000c10:	f04f 0208 	mov.w	r2, #8
 8000c14:	f04f 0300 	mov.w	r3, #0
 8000c18:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c22:	f107 0310 	add.w	r3, r7, #16
 8000c26:	4618      	mov	r0, r3
 8000c28:	f003 f832 	bl	8003c90 <HAL_RCCEx_PeriphCLKConfig>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8000c32:	f000 fa5f 	bl	80010f4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c36:	4b1d      	ldr	r3, [pc, #116]	@ (8000cac <HAL_I2C_MspInit+0xcc>)
 8000c38:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000c3c:	4a1b      	ldr	r2, [pc, #108]	@ (8000cac <HAL_I2C_MspInit+0xcc>)
 8000c3e:	f043 0302 	orr.w	r3, r3, #2
 8000c42:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000c46:	4b19      	ldr	r3, [pc, #100]	@ (8000cac <HAL_I2C_MspInit+0xcc>)
 8000c48:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000c4c:	f003 0302 	and.w	r3, r3, #2
 8000c50:	60fb      	str	r3, [r7, #12]
 8000c52:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000c54:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000c58:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c5c:	2312      	movs	r3, #18
 8000c5e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c62:	2300      	movs	r3, #0
 8000c64:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c6e:	2304      	movs	r3, #4
 8000c70:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c74:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000c78:	4619      	mov	r1, r3
 8000c7a:	480d      	ldr	r0, [pc, #52]	@ (8000cb0 <HAL_I2C_MspInit+0xd0>)
 8000c7c:	f000 ff56 	bl	8001b2c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c80:	4b0a      	ldr	r3, [pc, #40]	@ (8000cac <HAL_I2C_MspInit+0xcc>)
 8000c82:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000c86:	4a09      	ldr	r2, [pc, #36]	@ (8000cac <HAL_I2C_MspInit+0xcc>)
 8000c88:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000c8c:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8000c90:	4b06      	ldr	r3, [pc, #24]	@ (8000cac <HAL_I2C_MspInit+0xcc>)
 8000c92:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000c96:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c9a:	60bb      	str	r3, [r7, #8]
 8000c9c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000c9e:	bf00      	nop
 8000ca0:	37e8      	adds	r7, #232	@ 0xe8
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	40005400 	.word	0x40005400
 8000cac:	58024400 	.word	0x58024400
 8000cb0:	58020400 	.word	0x58020400

08000cb4 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a0c      	ldr	r2, [pc, #48]	@ (8000cf4 <HAL_I2C_MspDeInit+0x40>)
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	d111      	bne.n	8000cea <HAL_I2C_MspDeInit+0x36>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8000cc6:	4b0c      	ldr	r3, [pc, #48]	@ (8000cf8 <HAL_I2C_MspDeInit+0x44>)
 8000cc8:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000ccc:	4a0a      	ldr	r2, [pc, #40]	@ (8000cf8 <HAL_I2C_MspDeInit+0x44>)
 8000cce:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8000cd2:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 8000cd6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000cda:	4808      	ldr	r0, [pc, #32]	@ (8000cfc <HAL_I2C_MspDeInit+0x48>)
 8000cdc:	f001 f8d6 	bl	8001e8c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8000ce0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000ce4:	4805      	ldr	r0, [pc, #20]	@ (8000cfc <HAL_I2C_MspDeInit+0x48>)
 8000ce6:	f001 f8d1 	bl	8001e8c <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }
}
 8000cea:	bf00      	nop
 8000cec:	3708      	adds	r7, #8
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	40005400 	.word	0x40005400
 8000cf8:	58024400 	.word	0x58024400
 8000cfc:	58020400 	.word	0x58020400

08000d00 <_ZN9i2cMasterC1EP19__I2C_HandleTypeDef>:
 *      Author: dbank
 */

#include <i2cEngine.h>

i2cMaster::i2cMaster(I2C_HandleTypeDef *hi2c1) {
 8000d00:	b590      	push	{r4, r7, lr}
 8000d02:	b085      	sub	sp, #20
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
 8000d08:	6039      	str	r1, [r7, #0]
 8000d0a:	4a2c      	ldr	r2, [pc, #176]	@ (8000dbc <_ZN9i2cMasterC1EP19__I2C_HandleTypeDef+0xbc>)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	601a      	str	r2, [r3, #0]
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	4a2b      	ldr	r2, [pc, #172]	@ (8000dc0 <_ZN9i2cMasterC1EP19__I2C_HandleTypeDef+0xc0>)
 8000d14:	60da      	str	r2, [r3, #12]
	// TODO Auto-generated constructor stub
	this->p_hi2c1 =hi2c1;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	683a      	ldr	r2, [r7, #0]
 8000d1a:	609a      	str	r2, [r3, #8]
	this->pReceiveQueueObject = NULL;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	2200      	movs	r2, #0
 8000d20:	605a      	str	r2, [r3, #4]
	configASSERT(this->pReceiveQueueObject = new i2cQueue4DynamicData(DEFAULT_RECEIVE_QUEUE_SIZE));
 8000d22:	2004      	movs	r0, #4
 8000d24:	f009 fdf8 	bl	800a918 <_Znwj>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	461c      	mov	r4, r3
 8000d2c:	2119      	movs	r1, #25
 8000d2e:	4620      	mov	r0, r4
 8000d30:	f000 f8d4 	bl	8000edc <_ZN20i2cQueue4DynamicDataC1Em>
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	605c      	str	r4, [r3, #4]
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	685b      	ldr	r3, [r3, #4]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	bf0c      	ite	eq
 8000d40:	2301      	moveq	r3, #1
 8000d42:	2300      	movne	r3, #0
 8000d44:	b2db      	uxtb	r3, r3
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d00b      	beq.n	8000d62 <_ZN9i2cMasterC1EP19__I2C_HandleTypeDef+0x62>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000d4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000d4e:	f383 8811 	msr	BASEPRI, r3
 8000d52:	f3bf 8f6f 	isb	sy
 8000d56:	f3bf 8f4f 	dsb	sy
 8000d5a:	60fb      	str	r3, [r7, #12]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000d5c:	bf00      	nop
 8000d5e:	bf00      	nop
 8000d60:	e7fd      	b.n	8000d5e <_ZN9i2cMasterC1EP19__I2C_HandleTypeDef+0x5e>

//	this->esp32InterruptCounterOverflow =pdFALSE;		//reset interrupt counter overflow indicator
	assert(this->handle_i2cBinarySemaphore = xSemaphoreCreateBinary());
 8000d62:	2203      	movs	r2, #3
 8000d64:	2100      	movs	r1, #0
 8000d66:	2001      	movs	r0, #1
 8000d68:	f006 fdb9 	bl	80078de <xQueueGenericCreate>
 8000d6c:	4602      	mov	r2, r0
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	611a      	str	r2, [r3, #16]
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	691b      	ldr	r3, [r3, #16]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d105      	bne.n	8000d86 <_ZN9i2cMasterC1EP19__I2C_HandleTypeDef+0x86>
 8000d7a:	4b12      	ldr	r3, [pc, #72]	@ (8000dc4 <_ZN9i2cMasterC1EP19__I2C_HandleTypeDef+0xc4>)
 8000d7c:	4a12      	ldr	r2, [pc, #72]	@ (8000dc8 <_ZN9i2cMasterC1EP19__I2C_HandleTypeDef+0xc8>)
 8000d7e:	2111      	movs	r1, #17
 8000d80:	4812      	ldr	r0, [pc, #72]	@ (8000dcc <_ZN9i2cMasterC1EP19__I2C_HandleTypeDef+0xcc>)
 8000d82:	f009 fdef 	bl	800a964 <__assert_func>
	this->i2cSemaphoreGive();
 8000d86:	6878      	ldr	r0, [r7, #4]
 8000d88:	f000 f834 	bl	8000df4 <_ZN9i2cMaster16i2cSemaphoreGiveEv>
	this->i2cSemaphoreTake();
 8000d8c:	6878      	ldr	r0, [r7, #4]
 8000d8e:	f000 f821 	bl	8000dd4 <_ZN9i2cMaster16i2cSemaphoreTakeEv>
	HAL_I2C_DeInit(p_hi2c1);
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	689b      	ldr	r3, [r3, #8]
 8000d96:	4618      	mov	r0, r3
 8000d98:	f001 fa38 	bl	800220c <HAL_I2C_DeInit>
	MX_I2C1_Init();
 8000d9c:	f7ff fee0 	bl	8000b60 <MX_I2C1_Init>
	//vTaskDelay(pdMS_TO_TICKS(1000));
	printf("%s bus had been initialized.\r\n",this->TAG);
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	68db      	ldr	r3, [r3, #12]
 8000da4:	4619      	mov	r1, r3
 8000da6:	480a      	ldr	r0, [pc, #40]	@ (8000dd0 <_ZN9i2cMasterC1EP19__I2C_HandleTypeDef+0xd0>)
 8000da8:	f00a fdce 	bl	800b948 <iprintf>
	this->i2cSemaphoreGive();
 8000dac:	6878      	ldr	r0, [r7, #4]
 8000dae:	f000 f821 	bl	8000df4 <_ZN9i2cMaster16i2cSemaphoreGiveEv>
}
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	4618      	mov	r0, r3
 8000db6:	3714      	adds	r7, #20
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd90      	pop	{r4, r7, pc}
 8000dbc:	0800f22c 	.word	0x0800f22c
 8000dc0:	0800f01c 	.word	0x0800f01c
 8000dc4:	0800f02c 	.word	0x0800f02c
 8000dc8:	0800f068 	.word	0x0800f068
 8000dcc:	0800f094 	.word	0x0800f094
 8000dd0:	0800f0b0 	.word	0x0800f0b0

08000dd4 <_ZN9i2cMaster16i2cSemaphoreTakeEv>:
BaseType_t i2cMaster::getEsp32InterruptCounterOverflow(void){
	return this->esp32InterruptCounterOverflow;
}
*/

BaseType_t i2cMaster::i2cSemaphoreTake(void){
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
	return xSemaphoreTake(this->handle_i2cBinarySemaphore, portMAX_DELAY);
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	691b      	ldr	r3, [r3, #16]
 8000de0:	f04f 31ff 	mov.w	r1, #4294967295
 8000de4:	4618      	mov	r0, r3
 8000de6:	f007 f91f 	bl	8008028 <xQueueSemaphoreTake>
 8000dea:	4603      	mov	r3, r0
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	3708      	adds	r7, #8
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}

08000df4 <_ZN9i2cMaster16i2cSemaphoreGiveEv>:

BaseType_t i2cMaster::i2cSemaphoreGive(void){
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
	return xSemaphoreGive(this->handle_i2cBinarySemaphore);
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	6918      	ldr	r0, [r3, #16]
 8000e00:	2300      	movs	r3, #0
 8000e02:	2200      	movs	r2, #0
 8000e04:	2100      	movs	r1, #0
 8000e06:	f006 fdfd 	bl	8007a04 <xQueueGenericSend>
 8000e0a:	4603      	mov	r3, r0
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	3708      	adds	r7, #8
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}

08000e14 <_ZN9i2cMaster4pingEt>:

HAL_StatusTypeDef i2cMaster::ping(uint16_t DevAddress_7bit){
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b084      	sub	sp, #16
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
 8000e1c:	460b      	mov	r3, r1
 8000e1e:	807b      	strh	r3, [r7, #2]
	HAL_StatusTypeDef retVal;
	this->i2cSemaphoreTake();
 8000e20:	6878      	ldr	r0, [r7, #4]
 8000e22:	f7ff ffd7 	bl	8000dd4 <_ZN9i2cMaster16i2cSemaphoreTakeEv>
	retVal = HAL_I2C_IsDeviceReady(this->p_hi2c1, DevAddress_7bit<<1, 100, 1000);
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	6898      	ldr	r0, [r3, #8]
 8000e2a:	887b      	ldrh	r3, [r7, #2]
 8000e2c:	005b      	lsls	r3, r3, #1
 8000e2e:	b299      	uxth	r1, r3
 8000e30:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e34:	2264      	movs	r2, #100	@ 0x64
 8000e36:	f001 fb0f 	bl	8002458 <HAL_I2C_IsDeviceReady>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	73fb      	strb	r3, [r7, #15]
	this->i2cSemaphoreGive();
 8000e3e:	6878      	ldr	r0, [r7, #4]
 8000e40:	f7ff ffd8 	bl	8000df4 <_ZN9i2cMaster16i2cSemaphoreGiveEv>
	if(retVal==HAL_OK){
 8000e44:	7bfb      	ldrb	r3, [r7, #15]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d106      	bne.n	8000e58 <_ZN9i2cMaster4pingEt+0x44>
			printf("%s i2c slave avaliable on address: 0x%x (7bit).\r\n", this->TAG, DevAddress_7bit);
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	68db      	ldr	r3, [r3, #12]
 8000e4e:	887a      	ldrh	r2, [r7, #2]
 8000e50:	4619      	mov	r1, r3
 8000e52:	4804      	ldr	r0, [pc, #16]	@ (8000e64 <_ZN9i2cMaster4pingEt+0x50>)
 8000e54:	f00a fd78 	bl	800b948 <iprintf>
	}
	return retVal;
 8000e58:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	3710      	adds	r7, #16
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	0800f0d0 	.word	0x0800f0d0

08000e68 <_ZN9i2cMasterD1Ev>:

i2cMaster::~i2cMaster() {
 8000e68:	b590      	push	{r4, r7, lr}
 8000e6a:	b083      	sub	sp, #12
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
 8000e70:	4a11      	ldr	r2, [pc, #68]	@ (8000eb8 <_ZN9i2cMasterD1Ev+0x50>)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
	this->i2cSemaphoreTake();
 8000e76:	6878      	ldr	r0, [r7, #4]
 8000e78:	f7ff ffac 	bl	8000dd4 <_ZN9i2cMaster16i2cSemaphoreTakeEv>
	HAL_I2C_DeInit(this->p_hi2c1);
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	689b      	ldr	r3, [r3, #8]
 8000e80:	4618      	mov	r0, r3
 8000e82:	f001 f9c3 	bl	800220c <HAL_I2C_DeInit>
	this->p_hi2c1 = NULL;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	2200      	movs	r2, #0
 8000e8a:	609a      	str	r2, [r3, #8]
	delete this->pReceiveQueueObject;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	685c      	ldr	r4, [r3, #4]
 8000e90:	2c00      	cmp	r4, #0
 8000e92:	d006      	beq.n	8000ea2 <_ZN9i2cMasterD1Ev+0x3a>
 8000e94:	4620      	mov	r0, r4
 8000e96:	f000 f84b 	bl	8000f30 <_ZN20i2cQueue4DynamicDataD1Ev>
 8000e9a:	2104      	movs	r1, #4
 8000e9c:	4620      	mov	r0, r4
 8000e9e:	f009 fd37 	bl	800a910 <_ZdlPvj>
	vSemaphoreDelete(this->handle_i2cBinarySemaphore);
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	691b      	ldr	r3, [r3, #16]
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f007 f9ed 	bl	8008286 <vQueueDelete>
}
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	4618      	mov	r0, r3
 8000eb0:	370c      	adds	r7, #12
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd90      	pop	{r4, r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	0800f22c 	.word	0x0800f22c

08000ebc <_ZN9i2cMasterD0Ev>:
i2cMaster::~i2cMaster() {
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
}
 8000ec4:	6878      	ldr	r0, [r7, #4]
 8000ec6:	f7ff ffcf 	bl	8000e68 <_ZN9i2cMasterD1Ev>
 8000eca:	2114      	movs	r1, #20
 8000ecc:	6878      	ldr	r0, [r7, #4]
 8000ece:	f009 fd1f 	bl	800a910 <_ZdlPvj>
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	3708      	adds	r7, #8
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}

08000edc <_ZN20i2cQueue4DynamicDataC1Em>:
#include "i2c_slave_master_queueClass.h"


i2cQueue4DynamicData::i2cQueue4DynamicData(UBaseType_t uxQueueLength)
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b084      	sub	sp, #16
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
 8000ee4:	6039      	str	r1, [r7, #0]
{
	this->handler_transmitQueue = NULL;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	2200      	movs	r2, #0
 8000eea:	601a      	str	r2, [r3, #0]
	configASSERT(this->handler_transmitQueue = xQueueCreate(uxQueueLength, sizeof(i2cFrame_transmitQueue)));
 8000eec:	2200      	movs	r2, #0
 8000eee:	2108      	movs	r1, #8
 8000ef0:	6838      	ldr	r0, [r7, #0]
 8000ef2:	f006 fcf4 	bl	80078de <xQueueGenericCreate>
 8000ef6:	4602      	mov	r2, r0
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	601a      	str	r2, [r3, #0]
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	bf0c      	ite	eq
 8000f04:	2301      	moveq	r3, #1
 8000f06:	2300      	movne	r3, #0
 8000f08:	b2db      	uxtb	r3, r3
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d00b      	beq.n	8000f26 <_ZN20i2cQueue4DynamicDataC1Em+0x4a>
	__asm volatile
 8000f0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000f12:	f383 8811 	msr	BASEPRI, r3
 8000f16:	f3bf 8f6f 	isb	sy
 8000f1a:	f3bf 8f4f 	dsb	sy
 8000f1e:	60fb      	str	r3, [r7, #12]
}
 8000f20:	bf00      	nop
 8000f22:	bf00      	nop
 8000f24:	e7fd      	b.n	8000f22 <_ZN20i2cQueue4DynamicDataC1Em+0x46>
}
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	4618      	mov	r0, r3
 8000f2a:	3710      	adds	r7, #16
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}

08000f30 <_ZN20i2cQueue4DynamicDataD1Ev>:


i2cQueue4DynamicData::~i2cQueue4DynamicData(void)
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b086      	sub	sp, #24
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
{
	i2cFrame_transmitQueue tempItemToDestrouQueue;
	BaseType_t tempQueueRetVal;
	do
	{
		tempQueueRetVal = xQueueReceive(this->handler_transmitQueue, &tempItemToDestrouQueue, pdMS_TO_TICKS(1));
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f107 010c 	add.w	r1, r7, #12
 8000f40:	2201      	movs	r2, #1
 8000f42:	4618      	mov	r0, r3
 8000f44:	f006 ff8e 	bl	8007e64 <xQueueReceive>
 8000f48:	6178      	str	r0, [r7, #20]
		if (tempQueueRetVal == pdPASS)
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	2b01      	cmp	r3, #1
 8000f4e:	d106      	bne.n	8000f5e <_ZN20i2cQueue4DynamicDataD1Ev+0x2e>
		{
			this->QueueDeleteDataFromPointer(tempItemToDestrouQueue);
 8000f50:	f107 030c 	add.w	r3, r7, #12
 8000f54:	e893 0006 	ldmia.w	r3, {r1, r2}
 8000f58:	6878      	ldr	r0, [r7, #4]
 8000f5a:	f000 f80d 	bl	8000f78 <_ZN20i2cQueue4DynamicData26QueueDeleteDataFromPointerE22i2cFrame_transmitQueue>
		}			
	} while (tempQueueRetVal == pdPASS);
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	2b01      	cmp	r3, #1
 8000f62:	d0e9      	beq.n	8000f38 <_ZN20i2cQueue4DynamicDataD1Ev+0x8>
	vQueueDelete(this->handler_transmitQueue);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f007 f98c 	bl	8008286 <vQueueDelete>
}
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	4618      	mov	r0, r3
 8000f72:	3718      	adds	r7, #24
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}

08000f78 <_ZN20i2cQueue4DynamicData26QueueDeleteDataFromPointerE22i2cFrame_transmitQueue>:

void i2cQueue4DynamicData::QueueDeleteDataFromPointer(i2cFrame_transmitQueue structWithPointer)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b084      	sub	sp, #16
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	60f8      	str	r0, [r7, #12]
 8000f80:	1d3b      	adds	r3, r7, #4
 8000f82:	e883 0006 	stmia.w	r3, {r1, r2}
	delete[] static_cast<char*>(structWithPointer.pData);	
 8000f86:	68bb      	ldr	r3, [r7, #8]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d003      	beq.n	8000f94 <_ZN20i2cQueue4DynamicData26QueueDeleteDataFromPointerE22i2cFrame_transmitQueue+0x1c>
 8000f8c:	68bb      	ldr	r3, [r7, #8]
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f009 fcc0 	bl	800a914 <_ZdaPv>
}
 8000f94:	bf00      	nop
 8000f96:	3710      	adds	r7, #16
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}

08000f9c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fa0:	f000 fc88 	bl	80018b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fa4:	f000 f810 	bl	8000fc8 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fa8:	f7ff fd94 	bl	8000ad4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000fac:	f000 fba2 	bl	80016f4 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8000fb0:	f7ff fdd6 	bl	8000b60 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  initTaskFunctions();
 8000fb4:	f000 fafc 	bl	80015b0 <_Z17initTaskFunctionsv>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000fb8:	f006 f9ca 	bl	8007350 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000fbc:	f7ff fd70 	bl	8000aa0 <_Z16MX_FREERTOS_Initv>

  /* Start scheduler */
  osKernelStart();
 8000fc0:	f006 f9ea 	bl	8007398 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000fc4:	bf00      	nop
 8000fc6:	e7fd      	b.n	8000fc4 <main+0x28>

08000fc8 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b09c      	sub	sp, #112	@ 0x70
 8000fcc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fd2:	224c      	movs	r2, #76	@ 0x4c
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f00a fe1e 	bl	800bc18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fdc:	1d3b      	adds	r3, r7, #4
 8000fde:	2220      	movs	r2, #32
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f00a fe18 	bl	800bc18 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000fe8:	4b37      	ldr	r3, [pc, #220]	@ (80010c8 <_Z18SystemClock_Configv+0x100>)
 8000fea:	f04f 32ff 	mov.w	r2, #4294967295
 8000fee:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000ff2:	2002      	movs	r0, #2
 8000ff4:	f001 fe12 	bl	8002c1c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	603b      	str	r3, [r7, #0]
 8000ffc:	4b33      	ldr	r3, [pc, #204]	@ (80010cc <_Z18SystemClock_Configv+0x104>)
 8000ffe:	699b      	ldr	r3, [r3, #24]
 8001000:	4a32      	ldr	r2, [pc, #200]	@ (80010cc <_Z18SystemClock_Configv+0x104>)
 8001002:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001006:	6193      	str	r3, [r2, #24]
 8001008:	4b30      	ldr	r3, [pc, #192]	@ (80010cc <_Z18SystemClock_Configv+0x104>)
 800100a:	699b      	ldr	r3, [r3, #24]
 800100c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001010:	603b      	str	r3, [r7, #0]
 8001012:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001014:	bf00      	nop
 8001016:	4b2d      	ldr	r3, [pc, #180]	@ (80010cc <_Z18SystemClock_Configv+0x104>)
 8001018:	699b      	ldr	r3, [r3, #24]
 800101a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800101e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001022:	bf14      	ite	ne
 8001024:	2301      	movne	r3, #1
 8001026:	2300      	moveq	r3, #0
 8001028:	b2db      	uxtb	r3, r3
 800102a:	2b00      	cmp	r3, #0
 800102c:	d1f3      	bne.n	8001016 <_Z18SystemClock_Configv+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800102e:	2302      	movs	r3, #2
 8001030:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001032:	2301      	movs	r3, #1
 8001034:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8001036:	2340      	movs	r3, #64	@ 0x40
 8001038:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800103a:	2302      	movs	r3, #2
 800103c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800103e:	2300      	movs	r3, #0
 8001040:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001042:	2304      	movs	r3, #4
 8001044:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 35;
 8001046:	2323      	movs	r3, #35	@ 0x23
 8001048:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800104a:	2302      	movs	r3, #2
 800104c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800104e:	2302      	movs	r3, #2
 8001050:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001052:	2302      	movs	r3, #2
 8001054:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001056:	230c      	movs	r3, #12
 8001058:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800105a:	2300      	movs	r3, #0
 800105c:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800105e:	2300      	movs	r3, #0
 8001060:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001062:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001066:	4618      	mov	r0, r3
 8001068:	f001 fe12 	bl	8002c90 <HAL_RCC_OscConfig>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	bf14      	ite	ne
 8001072:	2301      	movne	r3, #1
 8001074:	2300      	moveq	r3, #0
 8001076:	b2db      	uxtb	r3, r3
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <_Z18SystemClock_Configv+0xb8>
  {
    Error_Handler();
 800107c:	f000 f83a 	bl	80010f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001080:	233f      	movs	r3, #63	@ 0x3f
 8001082:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001084:	2303      	movs	r3, #3
 8001086:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001088:	2300      	movs	r3, #0
 800108a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800108c:	2300      	movs	r3, #0
 800108e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001090:	2340      	movs	r3, #64	@ 0x40
 8001092:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001094:	2340      	movs	r3, #64	@ 0x40
 8001096:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001098:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800109c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800109e:	2340      	movs	r3, #64	@ 0x40
 80010a0:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80010a2:	1d3b      	adds	r3, r7, #4
 80010a4:	2106      	movs	r1, #6
 80010a6:	4618      	mov	r0, r3
 80010a8:	f002 fa24 	bl	80034f4 <HAL_RCC_ClockConfig>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	bf14      	ite	ne
 80010b2:	2301      	movne	r3, #1
 80010b4:	2300      	moveq	r3, #0
 80010b6:	b2db      	uxtb	r3, r3
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <_Z18SystemClock_Configv+0xf8>
  {
    Error_Handler();
 80010bc:	f000 f81a 	bl	80010f4 <Error_Handler>
  }
}
 80010c0:	bf00      	nop
 80010c2:	3770      	adds	r7, #112	@ 0x70
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	58024400 	.word	0x58024400
 80010cc:	58024800 	.word	0x58024800

080010d0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a04      	ldr	r2, [pc, #16]	@ (80010f0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d101      	bne.n	80010e6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80010e2:	f000 fc23 	bl	800192c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80010e6:	bf00      	nop
 80010e8:	3708      	adds	r7, #8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	40010000 	.word	0x40010000

080010f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010f8:	b672      	cpsid	i
}
 80010fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010fc:	bf00      	nop
 80010fe:	e7fd      	b.n	80010fc <Error_Handler+0x8>

08001100 <__io_putchar>:

#include <printfRedirect.h>


//printf to uart redirection
void __io_putchar(uint8_t ch) {
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	4603      	mov	r3, r0
 8001108:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart1, &ch, 1, 0xffff);
 800110a:	1df9      	adds	r1, r7, #7
 800110c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001110:	2201      	movs	r2, #1
 8001112:	4803      	ldr	r0, [pc, #12]	@ (8001120 <__io_putchar+0x20>)
 8001114:	f004 feba 	bl	8005e8c <HAL_UART_Transmit>
}
 8001118:	bf00      	nop
 800111a:	3708      	adds	r7, #8
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	240002b0 	.word	0x240002b0

08001124 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800112a:	4b0c      	ldr	r3, [pc, #48]	@ (800115c <HAL_MspInit+0x38>)
 800112c:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8001130:	4a0a      	ldr	r2, [pc, #40]	@ (800115c <HAL_MspInit+0x38>)
 8001132:	f043 0302 	orr.w	r3, r3, #2
 8001136:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 800113a:	4b08      	ldr	r3, [pc, #32]	@ (800115c <HAL_MspInit+0x38>)
 800113c:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8001140:	f003 0302 	and.w	r3, r3, #2
 8001144:	607b      	str	r3, [r7, #4]
 8001146:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001148:	2200      	movs	r2, #0
 800114a:	210f      	movs	r1, #15
 800114c:	f06f 0001 	mvn.w	r0, #1
 8001150:	f000 fcc4 	bl	8001adc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001154:	bf00      	nop
 8001156:	3708      	adds	r7, #8
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	58024400 	.word	0x58024400

08001160 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b08e      	sub	sp, #56	@ 0x38
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2b0f      	cmp	r3, #15
 800116c:	d844      	bhi.n	80011f8 <HAL_InitTick+0x98>
  {
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0U);
 800116e:	2200      	movs	r2, #0
 8001170:	6879      	ldr	r1, [r7, #4]
 8001172:	2019      	movs	r0, #25
 8001174:	f000 fcb2 	bl	8001adc <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001178:	2019      	movs	r0, #25
 800117a:	f000 fcc9 	bl	8001b10 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 800117e:	4a24      	ldr	r2, [pc, #144]	@ (8001210 <HAL_InitTick+0xb0>)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001184:	4b23      	ldr	r3, [pc, #140]	@ (8001214 <HAL_InitTick+0xb4>)
 8001186:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 800118a:	4a22      	ldr	r2, [pc, #136]	@ (8001214 <HAL_InitTick+0xb4>)
 800118c:	f043 0301 	orr.w	r3, r3, #1
 8001190:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 8001194:	4b1f      	ldr	r3, [pc, #124]	@ (8001214 <HAL_InitTick+0xb4>)
 8001196:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 800119a:	f003 0301 	and.w	r3, r3, #1
 800119e:	60bb      	str	r3, [r7, #8]
 80011a0:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80011a2:	f107 020c 	add.w	r2, r7, #12
 80011a6:	f107 0310 	add.w	r3, r7, #16
 80011aa:	4611      	mov	r1, r2
 80011ac:	4618      	mov	r0, r3
 80011ae:	f002 fd2d 	bl	8003c0c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80011b2:	f002 fd15 	bl	8003be0 <HAL_RCC_GetPCLK2Freq>
 80011b6:	4603      	mov	r3, r0
 80011b8:	005b      	lsls	r3, r3, #1
 80011ba:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80011bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80011be:	4a16      	ldr	r2, [pc, #88]	@ (8001218 <HAL_InitTick+0xb8>)
 80011c0:	fba2 2303 	umull	r2, r3, r2, r3
 80011c4:	0c9b      	lsrs	r3, r3, #18
 80011c6:	3b01      	subs	r3, #1
 80011c8:	633b      	str	r3, [r7, #48]	@ 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80011ca:	4b14      	ldr	r3, [pc, #80]	@ (800121c <HAL_InitTick+0xbc>)
 80011cc:	4a14      	ldr	r2, [pc, #80]	@ (8001220 <HAL_InitTick+0xc0>)
 80011ce:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80011d0:	4b12      	ldr	r3, [pc, #72]	@ (800121c <HAL_InitTick+0xbc>)
 80011d2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80011d6:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80011d8:	4a10      	ldr	r2, [pc, #64]	@ (800121c <HAL_InitTick+0xbc>)
 80011da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80011dc:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80011de:	4b0f      	ldr	r3, [pc, #60]	@ (800121c <HAL_InitTick+0xbc>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011e4:	4b0d      	ldr	r3, [pc, #52]	@ (800121c <HAL_InitTick+0xbc>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80011ea:	480c      	ldr	r0, [pc, #48]	@ (800121c <HAL_InitTick+0xbc>)
 80011ec:	f004 fb30 	bl	8005850 <HAL_TIM_Base_Init>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d107      	bne.n	8001206 <HAL_InitTick+0xa6>
 80011f6:	e001      	b.n	80011fc <HAL_InitTick+0x9c>
    return HAL_ERROR;
 80011f8:	2301      	movs	r3, #1
 80011fa:	e005      	b.n	8001208 <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80011fc:	4807      	ldr	r0, [pc, #28]	@ (800121c <HAL_InitTick+0xbc>)
 80011fe:	f004 fb89 	bl	8005914 <HAL_TIM_Base_Start_IT>
 8001202:	4603      	mov	r3, r0
 8001204:	e000      	b.n	8001208 <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 8001206:	2301      	movs	r3, #1
}
 8001208:	4618      	mov	r0, r3
 800120a:	3738      	adds	r7, #56	@ 0x38
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	24000008 	.word	0x24000008
 8001214:	58024400 	.word	0x58024400
 8001218:	431bde83 	.word	0x431bde83
 800121c:	24000250 	.word	0x24000250
 8001220:	40010000 	.word	0x40010000

08001224 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001228:	bf00      	nop
 800122a:	e7fd      	b.n	8001228 <NMI_Handler+0x4>

0800122c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001230:	bf00      	nop
 8001232:	e7fd      	b.n	8001230 <HardFault_Handler+0x4>

08001234 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001238:	bf00      	nop
 800123a:	e7fd      	b.n	8001238 <MemManage_Handler+0x4>

0800123c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001240:	bf00      	nop
 8001242:	e7fd      	b.n	8001240 <BusFault_Handler+0x4>

08001244 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001248:	bf00      	nop
 800124a:	e7fd      	b.n	8001248 <UsageFault_Handler+0x4>

0800124c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001250:	bf00      	nop
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr

0800125a <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800125a:	b580      	push	{r7, lr}
 800125c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(esp32i2cInterruptReqest_Pin);
 800125e:	2020      	movs	r0, #32
 8001260:	f000 ff1e 	bl	80020a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001264:	bf00      	nop
 8001266:	bd80      	pop	{r7, pc}

08001268 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800126c:	4802      	ldr	r0, [pc, #8]	@ (8001278 <TIM1_UP_IRQHandler+0x10>)
 800126e:	f004 fbc9 	bl	8005a04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001272:	bf00      	nop
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	24000250 	.word	0x24000250

0800127c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  return 1;
 8001280:	2301      	movs	r3, #1
}
 8001282:	4618      	mov	r0, r3
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr

0800128c <_kill>:

int _kill(int pid, int sig)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
 8001294:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001296:	f00a fdbb 	bl	800be10 <__errno>
 800129a:	4603      	mov	r3, r0
 800129c:	2216      	movs	r2, #22
 800129e:	601a      	str	r2, [r3, #0]
  return -1;
 80012a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	3708      	adds	r7, #8
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}

080012ac <_exit>:

void _exit (int status)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80012b4:	f04f 31ff 	mov.w	r1, #4294967295
 80012b8:	6878      	ldr	r0, [r7, #4]
 80012ba:	f7ff ffe7 	bl	800128c <_kill>
 while (1) {}    /* Make sure we hang here */
 80012be:	bf00      	nop
 80012c0:	e7fd      	b.n	80012be <_exit+0x12>

080012c2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012c2:	b580      	push	{r7, lr}
 80012c4:	b086      	sub	sp, #24
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	60f8      	str	r0, [r7, #12]
 80012ca:	60b9      	str	r1, [r7, #8]
 80012cc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012ce:	2300      	movs	r3, #0
 80012d0:	617b      	str	r3, [r7, #20]
 80012d2:	e00a      	b.n	80012ea <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80012d4:	f3af 8000 	nop.w
 80012d8:	4601      	mov	r1, r0
 80012da:	68bb      	ldr	r3, [r7, #8]
 80012dc:	1c5a      	adds	r2, r3, #1
 80012de:	60ba      	str	r2, [r7, #8]
 80012e0:	b2ca      	uxtb	r2, r1
 80012e2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	3301      	adds	r3, #1
 80012e8:	617b      	str	r3, [r7, #20]
 80012ea:	697a      	ldr	r2, [r7, #20]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	429a      	cmp	r2, r3
 80012f0:	dbf0      	blt.n	80012d4 <_read+0x12>
  }

  return len;
 80012f2:	687b      	ldr	r3, [r7, #4]
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	3718      	adds	r7, #24
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}

080012fc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b086      	sub	sp, #24
 8001300:	af00      	add	r7, sp, #0
 8001302:	60f8      	str	r0, [r7, #12]
 8001304:	60b9      	str	r1, [r7, #8]
 8001306:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001308:	2300      	movs	r3, #0
 800130a:	617b      	str	r3, [r7, #20]
 800130c:	e009      	b.n	8001322 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800130e:	68bb      	ldr	r3, [r7, #8]
 8001310:	1c5a      	adds	r2, r3, #1
 8001312:	60ba      	str	r2, [r7, #8]
 8001314:	781b      	ldrb	r3, [r3, #0]
 8001316:	4618      	mov	r0, r3
 8001318:	f7ff fef2 	bl	8001100 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	3301      	adds	r3, #1
 8001320:	617b      	str	r3, [r7, #20]
 8001322:	697a      	ldr	r2, [r7, #20]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	429a      	cmp	r2, r3
 8001328:	dbf1      	blt.n	800130e <_write+0x12>
  }
  return len;
 800132a:	687b      	ldr	r3, [r7, #4]
}
 800132c:	4618      	mov	r0, r3
 800132e:	3718      	adds	r7, #24
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}

08001334 <_close>:

int _close(int file)
{
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800133c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001340:	4618      	mov	r0, r3
 8001342:	370c      	adds	r7, #12
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr

0800134c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
 8001354:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800135c:	605a      	str	r2, [r3, #4]
  return 0;
 800135e:	2300      	movs	r3, #0
}
 8001360:	4618      	mov	r0, r3
 8001362:	370c      	adds	r7, #12
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr

0800136c <_isatty>:

int _isatty(int file)
{
 800136c:	b480      	push	{r7}
 800136e:	b083      	sub	sp, #12
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001374:	2301      	movs	r3, #1
}
 8001376:	4618      	mov	r0, r3
 8001378:	370c      	adds	r7, #12
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr

08001382 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001382:	b480      	push	{r7}
 8001384:	b085      	sub	sp, #20
 8001386:	af00      	add	r7, sp, #0
 8001388:	60f8      	str	r0, [r7, #12]
 800138a:	60b9      	str	r1, [r7, #8]
 800138c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800138e:	2300      	movs	r3, #0
}
 8001390:	4618      	mov	r0, r3
 8001392:	3714      	adds	r7, #20
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr

0800139c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b086      	sub	sp, #24
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013a4:	4a14      	ldr	r2, [pc, #80]	@ (80013f8 <_sbrk+0x5c>)
 80013a6:	4b15      	ldr	r3, [pc, #84]	@ (80013fc <_sbrk+0x60>)
 80013a8:	1ad3      	subs	r3, r2, r3
 80013aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013b0:	4b13      	ldr	r3, [pc, #76]	@ (8001400 <_sbrk+0x64>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d102      	bne.n	80013be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013b8:	4b11      	ldr	r3, [pc, #68]	@ (8001400 <_sbrk+0x64>)
 80013ba:	4a12      	ldr	r2, [pc, #72]	@ (8001404 <_sbrk+0x68>)
 80013bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013be:	4b10      	ldr	r3, [pc, #64]	@ (8001400 <_sbrk+0x64>)
 80013c0:	681a      	ldr	r2, [r3, #0]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4413      	add	r3, r2
 80013c6:	693a      	ldr	r2, [r7, #16]
 80013c8:	429a      	cmp	r2, r3
 80013ca:	d207      	bcs.n	80013dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013cc:	f00a fd20 	bl	800be10 <__errno>
 80013d0:	4603      	mov	r3, r0
 80013d2:	220c      	movs	r2, #12
 80013d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013d6:	f04f 33ff 	mov.w	r3, #4294967295
 80013da:	e009      	b.n	80013f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013dc:	4b08      	ldr	r3, [pc, #32]	@ (8001400 <_sbrk+0x64>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013e2:	4b07      	ldr	r3, [pc, #28]	@ (8001400 <_sbrk+0x64>)
 80013e4:	681a      	ldr	r2, [r3, #0]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	4413      	add	r3, r2
 80013ea:	4a05      	ldr	r2, [pc, #20]	@ (8001400 <_sbrk+0x64>)
 80013ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013ee:	68fb      	ldr	r3, [r7, #12]
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	3718      	adds	r7, #24
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	24100000 	.word	0x24100000
 80013fc:	00000400 	.word	0x00000400
 8001400:	2400029c 	.word	0x2400029c
 8001404:	24004e90 	.word	0x24004e90

08001408 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800140c:	4b32      	ldr	r3, [pc, #200]	@ (80014d8 <SystemInit+0xd0>)
 800140e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001412:	4a31      	ldr	r2, [pc, #196]	@ (80014d8 <SystemInit+0xd0>)
 8001414:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001418:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800141c:	4b2f      	ldr	r3, [pc, #188]	@ (80014dc <SystemInit+0xd4>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f003 030f 	and.w	r3, r3, #15
 8001424:	2b02      	cmp	r3, #2
 8001426:	d807      	bhi.n	8001438 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001428:	4b2c      	ldr	r3, [pc, #176]	@ (80014dc <SystemInit+0xd4>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f023 030f 	bic.w	r3, r3, #15
 8001430:	4a2a      	ldr	r2, [pc, #168]	@ (80014dc <SystemInit+0xd4>)
 8001432:	f043 0303 	orr.w	r3, r3, #3
 8001436:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001438:	4b29      	ldr	r3, [pc, #164]	@ (80014e0 <SystemInit+0xd8>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a28      	ldr	r2, [pc, #160]	@ (80014e0 <SystemInit+0xd8>)
 800143e:	f043 0301 	orr.w	r3, r3, #1
 8001442:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001444:	4b26      	ldr	r3, [pc, #152]	@ (80014e0 <SystemInit+0xd8>)
 8001446:	2200      	movs	r2, #0
 8001448:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800144a:	4b25      	ldr	r3, [pc, #148]	@ (80014e0 <SystemInit+0xd8>)
 800144c:	681a      	ldr	r2, [r3, #0]
 800144e:	4924      	ldr	r1, [pc, #144]	@ (80014e0 <SystemInit+0xd8>)
 8001450:	4b24      	ldr	r3, [pc, #144]	@ (80014e4 <SystemInit+0xdc>)
 8001452:	4013      	ands	r3, r2
 8001454:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001456:	4b21      	ldr	r3, [pc, #132]	@ (80014dc <SystemInit+0xd4>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f003 030c 	and.w	r3, r3, #12
 800145e:	2b00      	cmp	r3, #0
 8001460:	d007      	beq.n	8001472 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001462:	4b1e      	ldr	r3, [pc, #120]	@ (80014dc <SystemInit+0xd4>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f023 030f 	bic.w	r3, r3, #15
 800146a:	4a1c      	ldr	r2, [pc, #112]	@ (80014dc <SystemInit+0xd4>)
 800146c:	f043 0303 	orr.w	r3, r3, #3
 8001470:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8001472:	4b1b      	ldr	r3, [pc, #108]	@ (80014e0 <SystemInit+0xd8>)
 8001474:	2200      	movs	r2, #0
 8001476:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8001478:	4b19      	ldr	r3, [pc, #100]	@ (80014e0 <SystemInit+0xd8>)
 800147a:	2200      	movs	r2, #0
 800147c:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 800147e:	4b18      	ldr	r3, [pc, #96]	@ (80014e0 <SystemInit+0xd8>)
 8001480:	2200      	movs	r2, #0
 8001482:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001484:	4b16      	ldr	r3, [pc, #88]	@ (80014e0 <SystemInit+0xd8>)
 8001486:	4a18      	ldr	r2, [pc, #96]	@ (80014e8 <SystemInit+0xe0>)
 8001488:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800148a:	4b15      	ldr	r3, [pc, #84]	@ (80014e0 <SystemInit+0xd8>)
 800148c:	4a17      	ldr	r2, [pc, #92]	@ (80014ec <SystemInit+0xe4>)
 800148e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001490:	4b13      	ldr	r3, [pc, #76]	@ (80014e0 <SystemInit+0xd8>)
 8001492:	4a17      	ldr	r2, [pc, #92]	@ (80014f0 <SystemInit+0xe8>)
 8001494:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001496:	4b12      	ldr	r3, [pc, #72]	@ (80014e0 <SystemInit+0xd8>)
 8001498:	2200      	movs	r2, #0
 800149a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800149c:	4b10      	ldr	r3, [pc, #64]	@ (80014e0 <SystemInit+0xd8>)
 800149e:	4a14      	ldr	r2, [pc, #80]	@ (80014f0 <SystemInit+0xe8>)
 80014a0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80014a2:	4b0f      	ldr	r3, [pc, #60]	@ (80014e0 <SystemInit+0xd8>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80014a8:	4b0d      	ldr	r3, [pc, #52]	@ (80014e0 <SystemInit+0xd8>)
 80014aa:	4a11      	ldr	r2, [pc, #68]	@ (80014f0 <SystemInit+0xe8>)
 80014ac:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80014ae:	4b0c      	ldr	r3, [pc, #48]	@ (80014e0 <SystemInit+0xd8>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80014b4:	4b0a      	ldr	r3, [pc, #40]	@ (80014e0 <SystemInit+0xd8>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a09      	ldr	r2, [pc, #36]	@ (80014e0 <SystemInit+0xd8>)
 80014ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80014be:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80014c0:	4b07      	ldr	r3, [pc, #28]	@ (80014e0 <SystemInit+0xd8>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80014c6:	4b0b      	ldr	r3, [pc, #44]	@ (80014f4 <SystemInit+0xec>)
 80014c8:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80014cc:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80014ce:	bf00      	nop
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr
 80014d8:	e000ed00 	.word	0xe000ed00
 80014dc:	52002000 	.word	0x52002000
 80014e0:	58024400 	.word	0x58024400
 80014e4:	eaf6ed7f 	.word	0xeaf6ed7f
 80014e8:	02020200 	.word	0x02020200
 80014ec:	01ff0000 	.word	0x01ff0000
 80014f0:	01010280 	.word	0x01010280
 80014f4:	52004000 	.word	0x52004000

080014f8 <_ZL29esp32IntrrruptRequestCallbackPv>:
static BaseType_t esp32InrerruptRequest_CountingSemaphoreOverflow=pdFALSE;	//zmienna informująca o tym, że nastąpiło przepełnienie "esp32IntrrruptRequest_CountingSemaphore", aka. zbyt wiele oczekujących komunikatów, co może wskazywać na błąd.

static i2cMaster* pi2cMaster;  //wsyaźnik do obiektu służącego do komunikacji stm32 po i2c jako master


static void esp32IntrrruptRequestCallback(void *pNothing){
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b088      	sub	sp, #32
 80014fc:	af02      	add	r7, sp, #8
 80014fe:	6078      	str	r0, [r7, #4]
	i2cFrame_transmitQueue tempI2CFrameReceivedFromESP32;
	while(1){
		if( uxSemaphoreGetCount(esp32IntrrruptRequest_CountingSemaphore)==ESP32_INTERRUPT_REQUEST_COUNTING_SEMAPHORE_MAX){		//sprawdza czy licznik esp32 interrupt request nie jest przepełniony
 8001500:	4b24      	ldr	r3, [pc, #144]	@ (8001594 <_ZL29esp32IntrrruptRequestCallbackPv+0x9c>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4618      	mov	r0, r3
 8001506:	f006 fe9f 	bl	8008248 <uxQueueMessagesWaiting>
 800150a:	4603      	mov	r3, r0
 800150c:	2b15      	cmp	r3, #21
 800150e:	bf0c      	ite	eq
 8001510:	2301      	moveq	r3, #1
 8001512:	2300      	movne	r3, #0
 8001514:	b2db      	uxtb	r3, r3
 8001516:	2b00      	cmp	r3, #0
 8001518:	d005      	beq.n	8001526 <_ZL29esp32IntrrruptRequestCallbackPv+0x2e>
			esp32InrerruptRequest_CountingSemaphoreOverflow = pdTRUE;
 800151a:	4b1f      	ldr	r3, [pc, #124]	@ (8001598 <_ZL29esp32IntrrruptRequestCallbackPv+0xa0>)
 800151c:	2201      	movs	r2, #1
 800151e:	601a      	str	r2, [r3, #0]
			printf("!!! ESP32 interrupt request counter overflowed   !!!\r\n");
 8001520:	481e      	ldr	r0, [pc, #120]	@ (800159c <_ZL29esp32IntrrruptRequestCallbackPv+0xa4>)
 8001522:	f00a fa79 	bl	800ba18 <puts>
		}
		if (xSemaphoreTake(esp32IntrrruptRequest_CountingSemaphore, portMAX_DELAY) == pdTRUE){		//czeka dopuki nie pojawi się esp32 interrupt request
 8001526:	4b1b      	ldr	r3, [pc, #108]	@ (8001594 <_ZL29esp32IntrrruptRequestCallbackPv+0x9c>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f04f 31ff 	mov.w	r1, #4294967295
 800152e:	4618      	mov	r0, r3
 8001530:	f006 fd7a 	bl	8008028 <xQueueSemaphoreTake>
 8001534:	4603      	mov	r3, r0
 8001536:	2b01      	cmp	r3, #1
 8001538:	bf0c      	ite	eq
 800153a:	2301      	moveq	r3, #1
 800153c:	2300      	movne	r3, #0
 800153e:	b2db      	uxtb	r3, r3
 8001540:	2b00      	cmp	r3, #0
 8001542:	d0dd      	beq.n	8001500 <_ZL29esp32IntrrruptRequestCallbackPv+0x8>
			printf("High prior task \r\n");
 8001544:	4816      	ldr	r0, [pc, #88]	@ (80015a0 <_ZL29esp32IntrrruptRequestCallbackPv+0xa8>)
 8001546:	f00a fa67 	bl	800ba18 <puts>


//#error poprawić dodać ify
			//HAL_I2C_Master_Receive_DMA(&hi2c1, (uint16_t) I2C_SLAVE_ADDRESS<<1, (uint8_t*) &tempI2CFrameReceivedFromESP32.dataSize, sizeof(size_t));
			HAL_I2C_Master_Receive(&hi2c1, I2C_SLAVE_ADDRESS<<1, (uint8_t*) &tempI2CFrameReceivedFromESP32.dataSize, sizeof(size_t), 500);
 800154a:	f107 0208 	add.w	r2, r7, #8
 800154e:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001552:	9300      	str	r3, [sp, #0]
 8001554:	2304      	movs	r3, #4
 8001556:	2178      	movs	r1, #120	@ 0x78
 8001558:	4812      	ldr	r0, [pc, #72]	@ (80015a4 <_ZL29esp32IntrrruptRequestCallbackPv+0xac>)
 800155a:	f000 fe87 	bl	800226c <HAL_I2C_Master_Receive>
			char* pdymanicDataPointer = new char[tempI2CFrameReceivedFromESP32.dataSize];
 800155e:	68bb      	ldr	r3, [r7, #8]
 8001560:	4618      	mov	r0, r3
 8001562:	f009 f9ea 	bl	800a93a <_Znaj>
 8001566:	4603      	mov	r3, r0
 8001568:	617b      	str	r3, [r7, #20]
			HAL_I2C_Master_Receive(&hi2c1, I2C_SLAVE_ADDRESS<<1, (uint8_t*) pdymanicDataPointer, sizeof(tempI2CFrameReceivedFromESP32.dataSize), 500);
 800156a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800156e:	9300      	str	r3, [sp, #0]
 8001570:	2304      	movs	r3, #4
 8001572:	697a      	ldr	r2, [r7, #20]
 8001574:	2178      	movs	r1, #120	@ 0x78
 8001576:	480b      	ldr	r0, [pc, #44]	@ (80015a4 <_ZL29esp32IntrrruptRequestCallbackPv+0xac>)
 8001578:	f000 fe78 	bl	800226c <HAL_I2C_Master_Receive>
			printf("1 \r\n");
 800157c:	480a      	ldr	r0, [pc, #40]	@ (80015a8 <_ZL29esp32IntrrruptRequestCallbackPv+0xb0>)
 800157e:	f00a fa4b 	bl	800ba18 <puts>
			//HAL_I2C_Master_Receive_DMA(&hi2c1, I2C_SLAVE_ADDRESS<<1, (uint8_t*) pdymanicDataPointer, sizeof(tempI2CFrameReceivedFromESP32.dataSize));
			printf("2 \r\n");
 8001582:	480a      	ldr	r0, [pc, #40]	@ (80015ac <_ZL29esp32IntrrruptRequestCallbackPv+0xb4>)
 8001584:	f00a fa48 	bl	800ba18 <puts>

			tempI2CFrameReceivedFromESP32.pData = pdymanicDataPointer;
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	60fb      	str	r3, [r7, #12]



			uintptr_t pdymanicDataPointer_byValue = (uintptr_t) pdymanicDataPointer;
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	613b      	str	r3, [r7, #16]
			//pi2cMaster->pReceiveQueueObject->QueueSend(&pdymanicDataPointer_byValue);
			//#error Pociągnąć to dalej
		}
	};
 8001590:	e7b6      	b.n	8001500 <_ZL29esp32IntrrruptRequestCallbackPv+0x8>
 8001592:	bf00      	nop
 8001594:	240002a4 	.word	0x240002a4
 8001598:	240002a8 	.word	0x240002a8
 800159c:	0800f104 	.word	0x0800f104
 80015a0:	0800f13c 	.word	0x0800f13c
 80015a4:	240001fc 	.word	0x240001fc
 80015a8:	0800f150 	.word	0x0800f150
 80015ac:	0800f154 	.word	0x0800f154

080015b0 <_Z17initTaskFunctionsv>:
}


void initTaskFunctions(void){
 80015b0:	b590      	push	{r4, r7, lr}
 80015b2:	b085      	sub	sp, #20
 80015b4:	af02      	add	r7, sp, #8
	printf("Radio main firmware version: %.2f\r\n", FW_VERSION);
 80015b6:	a33c      	add	r3, pc, #240	@ (adr r3, 80016a8 <_Z17initTaskFunctionsv+0xf8>)
 80015b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015bc:	4830      	ldr	r0, [pc, #192]	@ (8001680 <_Z17initTaskFunctionsv+0xd0>)
 80015be:	f00a f9c3 	bl	800b948 <iprintf>
	configASSERT(esp32IntrrruptRequest_CountingSemaphore = xSemaphoreCreateCounting(ESP32_INTERRUPT_REQUEST_COUNTING_SEMAPHORE_MAX, 0));
 80015c2:	2100      	movs	r1, #0
 80015c4:	2015      	movs	r0, #21
 80015c6:	f006 f9e8 	bl	800799a <xQueueCreateCountingSemaphore>
 80015ca:	4603      	mov	r3, r0
 80015cc:	4a2d      	ldr	r2, [pc, #180]	@ (8001684 <_Z17initTaskFunctionsv+0xd4>)
 80015ce:	6013      	str	r3, [r2, #0]
 80015d0:	4b2c      	ldr	r3, [pc, #176]	@ (8001684 <_Z17initTaskFunctionsv+0xd4>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	bf0c      	ite	eq
 80015d8:	2301      	moveq	r3, #1
 80015da:	2300      	movne	r3, #0
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d00b      	beq.n	80015fa <_Z17initTaskFunctionsv+0x4a>
	__asm volatile
 80015e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80015e6:	f383 8811 	msr	BASEPRI, r3
 80015ea:	f3bf 8f6f 	isb	sy
 80015ee:	f3bf 8f4f 	dsb	sy
 80015f2:	607b      	str	r3, [r7, #4]
}
 80015f4:	bf00      	nop
 80015f6:	bf00      	nop
 80015f8:	e7fd      	b.n	80015f6 <_Z17initTaskFunctionsv+0x46>

	//tworzy task callback na przerwanie od ESP32 informującę, że ESP32 ma jakieś dane do wysłania
	configASSERT(xTaskCreate(esp32IntrrruptRequestCallback, "esp32IntReq", 3*128, NULL, tskIDLE_PRIORITY+1, &taskHandle_esp32IntrrruptRequest));
 80015fa:	4b23      	ldr	r3, [pc, #140]	@ (8001688 <_Z17initTaskFunctionsv+0xd8>)
 80015fc:	9301      	str	r3, [sp, #4]
 80015fe:	2301      	movs	r3, #1
 8001600:	9300      	str	r3, [sp, #0]
 8001602:	2300      	movs	r3, #0
 8001604:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001608:	4920      	ldr	r1, [pc, #128]	@ (800168c <_Z17initTaskFunctionsv+0xdc>)
 800160a:	4821      	ldr	r0, [pc, #132]	@ (8001690 <_Z17initTaskFunctionsv+0xe0>)
 800160c:	f007 f870 	bl	80086f0 <xTaskCreate>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	bf0c      	ite	eq
 8001616:	2301      	moveq	r3, #1
 8001618:	2300      	movne	r3, #0
 800161a:	b2db      	uxtb	r3, r3
 800161c:	2b00      	cmp	r3, #0
 800161e:	d00b      	beq.n	8001638 <_Z17initTaskFunctionsv+0x88>
	__asm volatile
 8001620:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001624:	f383 8811 	msr	BASEPRI, r3
 8001628:	f3bf 8f6f 	isb	sy
 800162c:	f3bf 8f4f 	dsb	sy
 8001630:	603b      	str	r3, [r7, #0]
}
 8001632:	bf00      	nop
 8001634:	bf00      	nop
 8001636:	e7fd      	b.n	8001634 <_Z17initTaskFunctionsv+0x84>

	pi2cMaster = NULL;
 8001638:	4b16      	ldr	r3, [pc, #88]	@ (8001694 <_Z17initTaskFunctionsv+0xe4>)
 800163a:	2200      	movs	r2, #0
 800163c:	601a      	str	r2, [r3, #0]
	assert(pi2cMaster = new i2cMaster(&hi2c1));
 800163e:	2014      	movs	r0, #20
 8001640:	f009 f96a 	bl	800a918 <_Znwj>
 8001644:	4603      	mov	r3, r0
 8001646:	461c      	mov	r4, r3
 8001648:	4913      	ldr	r1, [pc, #76]	@ (8001698 <_Z17initTaskFunctionsv+0xe8>)
 800164a:	4620      	mov	r0, r4
 800164c:	f7ff fb58 	bl	8000d00 <_ZN9i2cMasterC1EP19__I2C_HandleTypeDef>
 8001650:	4b10      	ldr	r3, [pc, #64]	@ (8001694 <_Z17initTaskFunctionsv+0xe4>)
 8001652:	601c      	str	r4, [r3, #0]
 8001654:	4b0f      	ldr	r3, [pc, #60]	@ (8001694 <_Z17initTaskFunctionsv+0xe4>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d105      	bne.n	8001668 <_Z17initTaskFunctionsv+0xb8>
 800165c:	4b0f      	ldr	r3, [pc, #60]	@ (800169c <_Z17initTaskFunctionsv+0xec>)
 800165e:	4a10      	ldr	r2, [pc, #64]	@ (80016a0 <_Z17initTaskFunctionsv+0xf0>)
 8001660:	2144      	movs	r1, #68	@ 0x44
 8001662:	4810      	ldr	r0, [pc, #64]	@ (80016a4 <_Z17initTaskFunctionsv+0xf4>)
 8001664:	f009 f97e 	bl	800a964 <__assert_func>
	pi2cMaster->ping(I2C_SLAVE_ADDRESS);
 8001668:	4b0a      	ldr	r3, [pc, #40]	@ (8001694 <_Z17initTaskFunctionsv+0xe4>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	213c      	movs	r1, #60	@ 0x3c
 800166e:	4618      	mov	r0, r3
 8001670:	f7ff fbd0 	bl	8000e14 <_ZN9i2cMaster4pingEt>
}
 8001674:	bf00      	nop
 8001676:	370c      	adds	r7, #12
 8001678:	46bd      	mov	sp, r7
 800167a:	bd90      	pop	{r4, r7, pc}
 800167c:	f3af 8000 	nop.w
 8001680:	0800f158 	.word	0x0800f158
 8001684:	240002a4 	.word	0x240002a4
 8001688:	240002a0 	.word	0x240002a0
 800168c:	0800f17c 	.word	0x0800f17c
 8001690:	080014f9 	.word	0x080014f9
 8001694:	240002ac 	.word	0x240002ac
 8001698:	240001fc 	.word	0x240001fc
 800169c:	0800f188 	.word	0x0800f188
 80016a0:	0800f1ac 	.word	0x0800f1ac
 80016a4:	0800f1c8 	.word	0x0800f1c8
 80016a8:	9999999a 	.word	0x9999999a
 80016ac:	3fb99999 	.word	0x3fb99999

080016b0 <HAL_GPIO_EXTI_Callback>:




void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b084      	sub	sp, #16
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	4603      	mov	r3, r0
 80016b8:	80fb      	strh	r3, [r7, #6]
		BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80016ba:	2300      	movs	r3, #0
 80016bc:	60fb      	str	r3, [r7, #12]
		xSemaphoreGiveFromISR(esp32IntrrruptRequest_CountingSemaphore, &xHigherPriorityTaskWoken);
 80016be:	4b0b      	ldr	r3, [pc, #44]	@ (80016ec <HAL_GPIO_EXTI_Callback+0x3c>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f107 020c 	add.w	r2, r7, #12
 80016c6:	4611      	mov	r1, r2
 80016c8:	4618      	mov	r0, r3
 80016ca:	f006 fb3b 	bl	8007d44 <xQueueGiveFromISR>
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d007      	beq.n	80016e4 <HAL_GPIO_EXTI_Callback+0x34>
 80016d4:	4b06      	ldr	r3, [pc, #24]	@ (80016f0 <HAL_GPIO_EXTI_Callback+0x40>)
 80016d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80016da:	601a      	str	r2, [r3, #0]
 80016dc:	f3bf 8f4f 	dsb	sy
 80016e0:	f3bf 8f6f 	isb	sy
}
 80016e4:	bf00      	nop
 80016e6:	3710      	adds	r7, #16
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	240002a4 	.word	0x240002a4
 80016f0:	e000ed04 	.word	0xe000ed04

080016f4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80016f8:	4b22      	ldr	r3, [pc, #136]	@ (8001784 <MX_USART1_UART_Init+0x90>)
 80016fa:	4a23      	ldr	r2, [pc, #140]	@ (8001788 <MX_USART1_UART_Init+0x94>)
 80016fc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80016fe:	4b21      	ldr	r3, [pc, #132]	@ (8001784 <MX_USART1_UART_Init+0x90>)
 8001700:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001704:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001706:	4b1f      	ldr	r3, [pc, #124]	@ (8001784 <MX_USART1_UART_Init+0x90>)
 8001708:	2200      	movs	r2, #0
 800170a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800170c:	4b1d      	ldr	r3, [pc, #116]	@ (8001784 <MX_USART1_UART_Init+0x90>)
 800170e:	2200      	movs	r2, #0
 8001710:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001712:	4b1c      	ldr	r3, [pc, #112]	@ (8001784 <MX_USART1_UART_Init+0x90>)
 8001714:	2200      	movs	r2, #0
 8001716:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001718:	4b1a      	ldr	r3, [pc, #104]	@ (8001784 <MX_USART1_UART_Init+0x90>)
 800171a:	220c      	movs	r2, #12
 800171c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800171e:	4b19      	ldr	r3, [pc, #100]	@ (8001784 <MX_USART1_UART_Init+0x90>)
 8001720:	2200      	movs	r2, #0
 8001722:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001724:	4b17      	ldr	r3, [pc, #92]	@ (8001784 <MX_USART1_UART_Init+0x90>)
 8001726:	2200      	movs	r2, #0
 8001728:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800172a:	4b16      	ldr	r3, [pc, #88]	@ (8001784 <MX_USART1_UART_Init+0x90>)
 800172c:	2200      	movs	r2, #0
 800172e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001730:	4b14      	ldr	r3, [pc, #80]	@ (8001784 <MX_USART1_UART_Init+0x90>)
 8001732:	2200      	movs	r2, #0
 8001734:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001736:	4b13      	ldr	r3, [pc, #76]	@ (8001784 <MX_USART1_UART_Init+0x90>)
 8001738:	2200      	movs	r2, #0
 800173a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800173c:	4811      	ldr	r0, [pc, #68]	@ (8001784 <MX_USART1_UART_Init+0x90>)
 800173e:	f004 fb55 	bl	8005dec <HAL_UART_Init>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d001      	beq.n	800174c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001748:	f7ff fcd4 	bl	80010f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800174c:	2100      	movs	r1, #0
 800174e:	480d      	ldr	r0, [pc, #52]	@ (8001784 <MX_USART1_UART_Init+0x90>)
 8001750:	f005 fcef 	bl	8007132 <HAL_UARTEx_SetTxFifoThreshold>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d001      	beq.n	800175e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800175a:	f7ff fccb 	bl	80010f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800175e:	2100      	movs	r1, #0
 8001760:	4808      	ldr	r0, [pc, #32]	@ (8001784 <MX_USART1_UART_Init+0x90>)
 8001762:	f005 fd24 	bl	80071ae <HAL_UARTEx_SetRxFifoThreshold>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d001      	beq.n	8001770 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800176c:	f7ff fcc2 	bl	80010f4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001770:	4804      	ldr	r0, [pc, #16]	@ (8001784 <MX_USART1_UART_Init+0x90>)
 8001772:	f005 fca5 	bl	80070c0 <HAL_UARTEx_DisableFifoMode>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d001      	beq.n	8001780 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800177c:	f7ff fcba 	bl	80010f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001780:	bf00      	nop
 8001782:	bd80      	pop	{r7, pc}
 8001784:	240002b0 	.word	0x240002b0
 8001788:	40011000 	.word	0x40011000

0800178c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b0ba      	sub	sp, #232	@ 0xe8
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001794:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001798:	2200      	movs	r2, #0
 800179a:	601a      	str	r2, [r3, #0]
 800179c:	605a      	str	r2, [r3, #4]
 800179e:	609a      	str	r2, [r3, #8]
 80017a0:	60da      	str	r2, [r3, #12]
 80017a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017a4:	f107 0310 	add.w	r3, r7, #16
 80017a8:	22c0      	movs	r2, #192	@ 0xc0
 80017aa:	2100      	movs	r1, #0
 80017ac:	4618      	mov	r0, r3
 80017ae:	f00a fa33 	bl	800bc18 <memset>
  if(uartHandle->Instance==USART1)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a27      	ldr	r2, [pc, #156]	@ (8001854 <HAL_UART_MspInit+0xc8>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d146      	bne.n	800184a <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80017bc:	f04f 0201 	mov.w	r2, #1
 80017c0:	f04f 0300 	mov.w	r3, #0
 80017c4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 80017c8:	2300      	movs	r3, #0
 80017ca:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017ce:	f107 0310 	add.w	r3, r7, #16
 80017d2:	4618      	mov	r0, r3
 80017d4:	f002 fa5c 	bl	8003c90 <HAL_RCCEx_PeriphCLKConfig>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80017de:	f7ff fc89 	bl	80010f4 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80017e2:	4b1d      	ldr	r3, [pc, #116]	@ (8001858 <HAL_UART_MspInit+0xcc>)
 80017e4:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 80017e8:	4a1b      	ldr	r2, [pc, #108]	@ (8001858 <HAL_UART_MspInit+0xcc>)
 80017ea:	f043 0310 	orr.w	r3, r3, #16
 80017ee:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 80017f2:	4b19      	ldr	r3, [pc, #100]	@ (8001858 <HAL_UART_MspInit+0xcc>)
 80017f4:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 80017f8:	f003 0310 	and.w	r3, r3, #16
 80017fc:	60fb      	str	r3, [r7, #12]
 80017fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001800:	4b15      	ldr	r3, [pc, #84]	@ (8001858 <HAL_UART_MspInit+0xcc>)
 8001802:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001806:	4a14      	ldr	r2, [pc, #80]	@ (8001858 <HAL_UART_MspInit+0xcc>)
 8001808:	f043 0302 	orr.w	r3, r3, #2
 800180c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001810:	4b11      	ldr	r3, [pc, #68]	@ (8001858 <HAL_UART_MspInit+0xcc>)
 8001812:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001816:	f003 0302 	and.w	r3, r3, #2
 800181a:	60bb      	str	r3, [r7, #8]
 800181c:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = dbg_UART_TX_Pin|dbg_UART_RX_Pin;
 800181e:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001822:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001826:	2302      	movs	r3, #2
 8001828:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182c:	2300      	movs	r3, #0
 800182e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001832:	2300      	movs	r3, #0
 8001834:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001838:	2304      	movs	r3, #4
 800183a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800183e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001842:	4619      	mov	r1, r3
 8001844:	4805      	ldr	r0, [pc, #20]	@ (800185c <HAL_UART_MspInit+0xd0>)
 8001846:	f000 f971 	bl	8001b2c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800184a:	bf00      	nop
 800184c:	37e8      	adds	r7, #232	@ 0xe8
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	40011000 	.word	0x40011000
 8001858:	58024400 	.word	0x58024400
 800185c:	58020400 	.word	0x58020400

08001860 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001860:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001898 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001864:	f7ff fdd0 	bl	8001408 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001868:	480c      	ldr	r0, [pc, #48]	@ (800189c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800186a:	490d      	ldr	r1, [pc, #52]	@ (80018a0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800186c:	4a0d      	ldr	r2, [pc, #52]	@ (80018a4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800186e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001870:	e002      	b.n	8001878 <LoopCopyDataInit>

08001872 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001872:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001874:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001876:	3304      	adds	r3, #4

08001878 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001878:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800187a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800187c:	d3f9      	bcc.n	8001872 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800187e:	4a0a      	ldr	r2, [pc, #40]	@ (80018a8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001880:	4c0a      	ldr	r4, [pc, #40]	@ (80018ac <LoopFillZerobss+0x22>)
  movs r3, #0
 8001882:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001884:	e001      	b.n	800188a <LoopFillZerobss>

08001886 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001886:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001888:	3204      	adds	r2, #4

0800188a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800188a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800188c:	d3fb      	bcc.n	8001886 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800188e:	f00a fac5 	bl	800be1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001892:	f7ff fb83 	bl	8000f9c <main>
  bx  lr
 8001896:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001898:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 800189c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80018a0:	240001dc 	.word	0x240001dc
  ldr r2, =_sidata
 80018a4:	0800f6ac 	.word	0x0800f6ac
  ldr r2, =_sbss
 80018a8:	240001dc 	.word	0x240001dc
  ldr r4, =_ebss
 80018ac:	24004e8c 	.word	0x24004e8c

080018b0 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018b0:	e7fe      	b.n	80018b0 <ADC_IRQHandler>
	...

080018b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018ba:	2003      	movs	r0, #3
 80018bc:	f000 f903 	bl	8001ac6 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80018c0:	f001 ffce 	bl	8003860 <HAL_RCC_GetSysClockFreq>
 80018c4:	4602      	mov	r2, r0
 80018c6:	4b15      	ldr	r3, [pc, #84]	@ (800191c <HAL_Init+0x68>)
 80018c8:	699b      	ldr	r3, [r3, #24]
 80018ca:	0a1b      	lsrs	r3, r3, #8
 80018cc:	f003 030f 	and.w	r3, r3, #15
 80018d0:	4913      	ldr	r1, [pc, #76]	@ (8001920 <HAL_Init+0x6c>)
 80018d2:	5ccb      	ldrb	r3, [r1, r3]
 80018d4:	f003 031f 	and.w	r3, r3, #31
 80018d8:	fa22 f303 	lsr.w	r3, r2, r3
 80018dc:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80018de:	4b0f      	ldr	r3, [pc, #60]	@ (800191c <HAL_Init+0x68>)
 80018e0:	699b      	ldr	r3, [r3, #24]
 80018e2:	f003 030f 	and.w	r3, r3, #15
 80018e6:	4a0e      	ldr	r2, [pc, #56]	@ (8001920 <HAL_Init+0x6c>)
 80018e8:	5cd3      	ldrb	r3, [r2, r3]
 80018ea:	f003 031f 	and.w	r3, r3, #31
 80018ee:	687a      	ldr	r2, [r7, #4]
 80018f0:	fa22 f303 	lsr.w	r3, r2, r3
 80018f4:	4a0b      	ldr	r2, [pc, #44]	@ (8001924 <HAL_Init+0x70>)
 80018f6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80018f8:	4a0b      	ldr	r2, [pc, #44]	@ (8001928 <HAL_Init+0x74>)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80018fe:	200f      	movs	r0, #15
 8001900:	f7ff fc2e 	bl	8001160 <HAL_InitTick>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d001      	beq.n	800190e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800190a:	2301      	movs	r3, #1
 800190c:	e002      	b.n	8001914 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800190e:	f7ff fc09 	bl	8001124 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001912:	2300      	movs	r3, #0
}
 8001914:	4618      	mov	r0, r3
 8001916:	3708      	adds	r7, #8
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	58024400 	.word	0x58024400
 8001920:	0800f234 	.word	0x0800f234
 8001924:	24000004 	.word	0x24000004
 8001928:	24000000 	.word	0x24000000

0800192c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001930:	4b06      	ldr	r3, [pc, #24]	@ (800194c <HAL_IncTick+0x20>)
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	461a      	mov	r2, r3
 8001936:	4b06      	ldr	r3, [pc, #24]	@ (8001950 <HAL_IncTick+0x24>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4413      	add	r3, r2
 800193c:	4a04      	ldr	r2, [pc, #16]	@ (8001950 <HAL_IncTick+0x24>)
 800193e:	6013      	str	r3, [r2, #0]
}
 8001940:	bf00      	nop
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop
 800194c:	2400000c 	.word	0x2400000c
 8001950:	24000344 	.word	0x24000344

08001954 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
  return uwTick;
 8001958:	4b03      	ldr	r3, [pc, #12]	@ (8001968 <HAL_GetTick+0x14>)
 800195a:	681b      	ldr	r3, [r3, #0]
}
 800195c:	4618      	mov	r0, r3
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop
 8001968:	24000344 	.word	0x24000344

0800196c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800196c:	b480      	push	{r7}
 800196e:	b085      	sub	sp, #20
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	f003 0307 	and.w	r3, r3, #7
 800197a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800197c:	4b0b      	ldr	r3, [pc, #44]	@ (80019ac <__NVIC_SetPriorityGrouping+0x40>)
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001982:	68ba      	ldr	r2, [r7, #8]
 8001984:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001988:	4013      	ands	r3, r2
 800198a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001994:	4b06      	ldr	r3, [pc, #24]	@ (80019b0 <__NVIC_SetPriorityGrouping+0x44>)
 8001996:	4313      	orrs	r3, r2
 8001998:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800199a:	4a04      	ldr	r2, [pc, #16]	@ (80019ac <__NVIC_SetPriorityGrouping+0x40>)
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	60d3      	str	r3, [r2, #12]
}
 80019a0:	bf00      	nop
 80019a2:	3714      	adds	r7, #20
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr
 80019ac:	e000ed00 	.word	0xe000ed00
 80019b0:	05fa0000 	.word	0x05fa0000

080019b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019b8:	4b04      	ldr	r3, [pc, #16]	@ (80019cc <__NVIC_GetPriorityGrouping+0x18>)
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	0a1b      	lsrs	r3, r3, #8
 80019be:	f003 0307 	and.w	r3, r3, #7
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr
 80019cc:	e000ed00 	.word	0xe000ed00

080019d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b083      	sub	sp, #12
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	4603      	mov	r3, r0
 80019d8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80019da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	db0b      	blt.n	80019fa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019e2:	88fb      	ldrh	r3, [r7, #6]
 80019e4:	f003 021f 	and.w	r2, r3, #31
 80019e8:	4907      	ldr	r1, [pc, #28]	@ (8001a08 <__NVIC_EnableIRQ+0x38>)
 80019ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019ee:	095b      	lsrs	r3, r3, #5
 80019f0:	2001      	movs	r0, #1
 80019f2:	fa00 f202 	lsl.w	r2, r0, r2
 80019f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80019fa:	bf00      	nop
 80019fc:	370c      	adds	r7, #12
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop
 8001a08:	e000e100 	.word	0xe000e100

08001a0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b083      	sub	sp, #12
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	4603      	mov	r3, r0
 8001a14:	6039      	str	r1, [r7, #0]
 8001a16:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001a18:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	db0a      	blt.n	8001a36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	b2da      	uxtb	r2, r3
 8001a24:	490c      	ldr	r1, [pc, #48]	@ (8001a58 <__NVIC_SetPriority+0x4c>)
 8001a26:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a2a:	0112      	lsls	r2, r2, #4
 8001a2c:	b2d2      	uxtb	r2, r2
 8001a2e:	440b      	add	r3, r1
 8001a30:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a34:	e00a      	b.n	8001a4c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	b2da      	uxtb	r2, r3
 8001a3a:	4908      	ldr	r1, [pc, #32]	@ (8001a5c <__NVIC_SetPriority+0x50>)
 8001a3c:	88fb      	ldrh	r3, [r7, #6]
 8001a3e:	f003 030f 	and.w	r3, r3, #15
 8001a42:	3b04      	subs	r3, #4
 8001a44:	0112      	lsls	r2, r2, #4
 8001a46:	b2d2      	uxtb	r2, r2
 8001a48:	440b      	add	r3, r1
 8001a4a:	761a      	strb	r2, [r3, #24]
}
 8001a4c:	bf00      	nop
 8001a4e:	370c      	adds	r7, #12
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr
 8001a58:	e000e100 	.word	0xe000e100
 8001a5c:	e000ed00 	.word	0xe000ed00

08001a60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b089      	sub	sp, #36	@ 0x24
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	60f8      	str	r0, [r7, #12]
 8001a68:	60b9      	str	r1, [r7, #8]
 8001a6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	f003 0307 	and.w	r3, r3, #7
 8001a72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a74:	69fb      	ldr	r3, [r7, #28]
 8001a76:	f1c3 0307 	rsb	r3, r3, #7
 8001a7a:	2b04      	cmp	r3, #4
 8001a7c:	bf28      	it	cs
 8001a7e:	2304      	movcs	r3, #4
 8001a80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	3304      	adds	r3, #4
 8001a86:	2b06      	cmp	r3, #6
 8001a88:	d902      	bls.n	8001a90 <NVIC_EncodePriority+0x30>
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	3b03      	subs	r3, #3
 8001a8e:	e000      	b.n	8001a92 <NVIC_EncodePriority+0x32>
 8001a90:	2300      	movs	r3, #0
 8001a92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a94:	f04f 32ff 	mov.w	r2, #4294967295
 8001a98:	69bb      	ldr	r3, [r7, #24]
 8001a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9e:	43da      	mvns	r2, r3
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	401a      	ands	r2, r3
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001aa8:	f04f 31ff 	mov.w	r1, #4294967295
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	fa01 f303 	lsl.w	r3, r1, r3
 8001ab2:	43d9      	mvns	r1, r3
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ab8:	4313      	orrs	r3, r2
         );
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	3724      	adds	r7, #36	@ 0x24
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr

08001ac6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ac6:	b580      	push	{r7, lr}
 8001ac8:	b082      	sub	sp, #8
 8001aca:	af00      	add	r7, sp, #0
 8001acc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f7ff ff4c 	bl	800196c <__NVIC_SetPriorityGrouping>
}
 8001ad4:	bf00      	nop
 8001ad6:	3708      	adds	r7, #8
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}

08001adc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b086      	sub	sp, #24
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	60b9      	str	r1, [r7, #8]
 8001ae6:	607a      	str	r2, [r7, #4]
 8001ae8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001aea:	f7ff ff63 	bl	80019b4 <__NVIC_GetPriorityGrouping>
 8001aee:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001af0:	687a      	ldr	r2, [r7, #4]
 8001af2:	68b9      	ldr	r1, [r7, #8]
 8001af4:	6978      	ldr	r0, [r7, #20]
 8001af6:	f7ff ffb3 	bl	8001a60 <NVIC_EncodePriority>
 8001afa:	4602      	mov	r2, r0
 8001afc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001b00:	4611      	mov	r1, r2
 8001b02:	4618      	mov	r0, r3
 8001b04:	f7ff ff82 	bl	8001a0c <__NVIC_SetPriority>
}
 8001b08:	bf00      	nop
 8001b0a:	3718      	adds	r7, #24
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}

08001b10 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	4603      	mov	r3, r0
 8001b18:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f7ff ff56 	bl	80019d0 <__NVIC_EnableIRQ>
}
 8001b24:	bf00      	nop
 8001b26:	3708      	adds	r7, #8
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}

08001b2c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b089      	sub	sp, #36	@ 0x24
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
 8001b34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001b36:	2300      	movs	r3, #0
 8001b38:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001b3a:	4b89      	ldr	r3, [pc, #548]	@ (8001d60 <HAL_GPIO_Init+0x234>)
 8001b3c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001b3e:	e194      	b.n	8001e6a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	2101      	movs	r1, #1
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	fa01 f303 	lsl.w	r3, r1, r3
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	f000 8186 	beq.w	8001e64 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f003 0303 	and.w	r3, r3, #3
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d005      	beq.n	8001b70 <HAL_GPIO_Init+0x44>
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	f003 0303 	and.w	r3, r3, #3
 8001b6c:	2b02      	cmp	r3, #2
 8001b6e:	d130      	bne.n	8001bd2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001b76:	69fb      	ldr	r3, [r7, #28]
 8001b78:	005b      	lsls	r3, r3, #1
 8001b7a:	2203      	movs	r2, #3
 8001b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b80:	43db      	mvns	r3, r3
 8001b82:	69ba      	ldr	r2, [r7, #24]
 8001b84:	4013      	ands	r3, r2
 8001b86:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	68da      	ldr	r2, [r3, #12]
 8001b8c:	69fb      	ldr	r3, [r7, #28]
 8001b8e:	005b      	lsls	r3, r3, #1
 8001b90:	fa02 f303 	lsl.w	r3, r2, r3
 8001b94:	69ba      	ldr	r2, [r7, #24]
 8001b96:	4313      	orrs	r3, r2
 8001b98:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	69ba      	ldr	r2, [r7, #24]
 8001b9e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	69fb      	ldr	r3, [r7, #28]
 8001baa:	fa02 f303 	lsl.w	r3, r2, r3
 8001bae:	43db      	mvns	r3, r3
 8001bb0:	69ba      	ldr	r2, [r7, #24]
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	091b      	lsrs	r3, r3, #4
 8001bbc:	f003 0201 	and.w	r2, r3, #1
 8001bc0:	69fb      	ldr	r3, [r7, #28]
 8001bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc6:	69ba      	ldr	r2, [r7, #24]
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	69ba      	ldr	r2, [r7, #24]
 8001bd0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	f003 0303 	and.w	r3, r3, #3
 8001bda:	2b03      	cmp	r3, #3
 8001bdc:	d017      	beq.n	8001c0e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	68db      	ldr	r3, [r3, #12]
 8001be2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001be4:	69fb      	ldr	r3, [r7, #28]
 8001be6:	005b      	lsls	r3, r3, #1
 8001be8:	2203      	movs	r2, #3
 8001bea:	fa02 f303 	lsl.w	r3, r2, r3
 8001bee:	43db      	mvns	r3, r3
 8001bf0:	69ba      	ldr	r2, [r7, #24]
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	689a      	ldr	r2, [r3, #8]
 8001bfa:	69fb      	ldr	r3, [r7, #28]
 8001bfc:	005b      	lsls	r3, r3, #1
 8001bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001c02:	69ba      	ldr	r2, [r7, #24]
 8001c04:	4313      	orrs	r3, r2
 8001c06:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	69ba      	ldr	r2, [r7, #24]
 8001c0c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	f003 0303 	and.w	r3, r3, #3
 8001c16:	2b02      	cmp	r3, #2
 8001c18:	d123      	bne.n	8001c62 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c1a:	69fb      	ldr	r3, [r7, #28]
 8001c1c:	08da      	lsrs	r2, r3, #3
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	3208      	adds	r2, #8
 8001c22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001c28:	69fb      	ldr	r3, [r7, #28]
 8001c2a:	f003 0307 	and.w	r3, r3, #7
 8001c2e:	009b      	lsls	r3, r3, #2
 8001c30:	220f      	movs	r2, #15
 8001c32:	fa02 f303 	lsl.w	r3, r2, r3
 8001c36:	43db      	mvns	r3, r3
 8001c38:	69ba      	ldr	r2, [r7, #24]
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	691a      	ldr	r2, [r3, #16]
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	f003 0307 	and.w	r3, r3, #7
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4e:	69ba      	ldr	r2, [r7, #24]
 8001c50:	4313      	orrs	r3, r2
 8001c52:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c54:	69fb      	ldr	r3, [r7, #28]
 8001c56:	08da      	lsrs	r2, r3, #3
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	3208      	adds	r2, #8
 8001c5c:	69b9      	ldr	r1, [r7, #24]
 8001c5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001c68:	69fb      	ldr	r3, [r7, #28]
 8001c6a:	005b      	lsls	r3, r3, #1
 8001c6c:	2203      	movs	r2, #3
 8001c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c72:	43db      	mvns	r3, r3
 8001c74:	69ba      	ldr	r2, [r7, #24]
 8001c76:	4013      	ands	r3, r2
 8001c78:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	f003 0203 	and.w	r2, r3, #3
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	005b      	lsls	r3, r3, #1
 8001c86:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8a:	69ba      	ldr	r2, [r7, #24]
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	69ba      	ldr	r2, [r7, #24]
 8001c94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	f000 80e0 	beq.w	8001e64 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ca4:	4b2f      	ldr	r3, [pc, #188]	@ (8001d64 <HAL_GPIO_Init+0x238>)
 8001ca6:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8001caa:	4a2e      	ldr	r2, [pc, #184]	@ (8001d64 <HAL_GPIO_Init+0x238>)
 8001cac:	f043 0302 	orr.w	r3, r3, #2
 8001cb0:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8001cb4:	4b2b      	ldr	r3, [pc, #172]	@ (8001d64 <HAL_GPIO_Init+0x238>)
 8001cb6:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8001cba:	f003 0302 	and.w	r3, r3, #2
 8001cbe:	60fb      	str	r3, [r7, #12]
 8001cc0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001cc2:	4a29      	ldr	r2, [pc, #164]	@ (8001d68 <HAL_GPIO_Init+0x23c>)
 8001cc4:	69fb      	ldr	r3, [r7, #28]
 8001cc6:	089b      	lsrs	r3, r3, #2
 8001cc8:	3302      	adds	r3, #2
 8001cca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001cd0:	69fb      	ldr	r3, [r7, #28]
 8001cd2:	f003 0303 	and.w	r3, r3, #3
 8001cd6:	009b      	lsls	r3, r3, #2
 8001cd8:	220f      	movs	r2, #15
 8001cda:	fa02 f303 	lsl.w	r3, r2, r3
 8001cde:	43db      	mvns	r3, r3
 8001ce0:	69ba      	ldr	r2, [r7, #24]
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	4a20      	ldr	r2, [pc, #128]	@ (8001d6c <HAL_GPIO_Init+0x240>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d052      	beq.n	8001d94 <HAL_GPIO_Init+0x268>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	4a1f      	ldr	r2, [pc, #124]	@ (8001d70 <HAL_GPIO_Init+0x244>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d031      	beq.n	8001d5a <HAL_GPIO_Init+0x22e>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	4a1e      	ldr	r2, [pc, #120]	@ (8001d74 <HAL_GPIO_Init+0x248>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d02b      	beq.n	8001d56 <HAL_GPIO_Init+0x22a>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	4a1d      	ldr	r2, [pc, #116]	@ (8001d78 <HAL_GPIO_Init+0x24c>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d025      	beq.n	8001d52 <HAL_GPIO_Init+0x226>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	4a1c      	ldr	r2, [pc, #112]	@ (8001d7c <HAL_GPIO_Init+0x250>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d01f      	beq.n	8001d4e <HAL_GPIO_Init+0x222>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	4a1b      	ldr	r2, [pc, #108]	@ (8001d80 <HAL_GPIO_Init+0x254>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d019      	beq.n	8001d4a <HAL_GPIO_Init+0x21e>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	4a1a      	ldr	r2, [pc, #104]	@ (8001d84 <HAL_GPIO_Init+0x258>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d013      	beq.n	8001d46 <HAL_GPIO_Init+0x21a>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	4a19      	ldr	r2, [pc, #100]	@ (8001d88 <HAL_GPIO_Init+0x25c>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d00d      	beq.n	8001d42 <HAL_GPIO_Init+0x216>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	4a18      	ldr	r2, [pc, #96]	@ (8001d8c <HAL_GPIO_Init+0x260>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d007      	beq.n	8001d3e <HAL_GPIO_Init+0x212>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	4a17      	ldr	r2, [pc, #92]	@ (8001d90 <HAL_GPIO_Init+0x264>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d101      	bne.n	8001d3a <HAL_GPIO_Init+0x20e>
 8001d36:	2309      	movs	r3, #9
 8001d38:	e02d      	b.n	8001d96 <HAL_GPIO_Init+0x26a>
 8001d3a:	230a      	movs	r3, #10
 8001d3c:	e02b      	b.n	8001d96 <HAL_GPIO_Init+0x26a>
 8001d3e:	2308      	movs	r3, #8
 8001d40:	e029      	b.n	8001d96 <HAL_GPIO_Init+0x26a>
 8001d42:	2307      	movs	r3, #7
 8001d44:	e027      	b.n	8001d96 <HAL_GPIO_Init+0x26a>
 8001d46:	2306      	movs	r3, #6
 8001d48:	e025      	b.n	8001d96 <HAL_GPIO_Init+0x26a>
 8001d4a:	2305      	movs	r3, #5
 8001d4c:	e023      	b.n	8001d96 <HAL_GPIO_Init+0x26a>
 8001d4e:	2304      	movs	r3, #4
 8001d50:	e021      	b.n	8001d96 <HAL_GPIO_Init+0x26a>
 8001d52:	2303      	movs	r3, #3
 8001d54:	e01f      	b.n	8001d96 <HAL_GPIO_Init+0x26a>
 8001d56:	2302      	movs	r3, #2
 8001d58:	e01d      	b.n	8001d96 <HAL_GPIO_Init+0x26a>
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e01b      	b.n	8001d96 <HAL_GPIO_Init+0x26a>
 8001d5e:	bf00      	nop
 8001d60:	58000080 	.word	0x58000080
 8001d64:	58024400 	.word	0x58024400
 8001d68:	58000400 	.word	0x58000400
 8001d6c:	58020000 	.word	0x58020000
 8001d70:	58020400 	.word	0x58020400
 8001d74:	58020800 	.word	0x58020800
 8001d78:	58020c00 	.word	0x58020c00
 8001d7c:	58021000 	.word	0x58021000
 8001d80:	58021400 	.word	0x58021400
 8001d84:	58021800 	.word	0x58021800
 8001d88:	58021c00 	.word	0x58021c00
 8001d8c:	58022000 	.word	0x58022000
 8001d90:	58022400 	.word	0x58022400
 8001d94:	2300      	movs	r3, #0
 8001d96:	69fa      	ldr	r2, [r7, #28]
 8001d98:	f002 0203 	and.w	r2, r2, #3
 8001d9c:	0092      	lsls	r2, r2, #2
 8001d9e:	4093      	lsls	r3, r2
 8001da0:	69ba      	ldr	r2, [r7, #24]
 8001da2:	4313      	orrs	r3, r2
 8001da4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001da6:	4938      	ldr	r1, [pc, #224]	@ (8001e88 <HAL_GPIO_Init+0x35c>)
 8001da8:	69fb      	ldr	r3, [r7, #28]
 8001daa:	089b      	lsrs	r3, r3, #2
 8001dac:	3302      	adds	r3, #2
 8001dae:	69ba      	ldr	r2, [r7, #24]
 8001db0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001db4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	43db      	mvns	r3, r3
 8001dc0:	69ba      	ldr	r2, [r7, #24]
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d003      	beq.n	8001dda <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001dd2:	69ba      	ldr	r2, [r7, #24]
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001dda:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001dde:	69bb      	ldr	r3, [r7, #24]
 8001de0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001de2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	43db      	mvns	r3, r3
 8001dee:	69ba      	ldr	r2, [r7, #24]
 8001df0:	4013      	ands	r3, r2
 8001df2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d003      	beq.n	8001e08 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001e00:	69ba      	ldr	r2, [r7, #24]
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	4313      	orrs	r3, r2
 8001e06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001e08:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001e0c:	69bb      	ldr	r3, [r7, #24]
 8001e0e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	43db      	mvns	r3, r3
 8001e1a:	69ba      	ldr	r2, [r7, #24]
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d003      	beq.n	8001e34 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001e2c:	69ba      	ldr	r2, [r7, #24]
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	4313      	orrs	r3, r2
 8001e32:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	69ba      	ldr	r2, [r7, #24]
 8001e38:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	43db      	mvns	r3, r3
 8001e44:	69ba      	ldr	r2, [r7, #24]
 8001e46:	4013      	ands	r3, r2
 8001e48:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d003      	beq.n	8001e5e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001e56:	69ba      	ldr	r2, [r7, #24]
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	69ba      	ldr	r2, [r7, #24]
 8001e62:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001e64:	69fb      	ldr	r3, [r7, #28]
 8001e66:	3301      	adds	r3, #1
 8001e68:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	69fb      	ldr	r3, [r7, #28]
 8001e70:	fa22 f303 	lsr.w	r3, r2, r3
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	f47f ae63 	bne.w	8001b40 <HAL_GPIO_Init+0x14>
  }
}
 8001e7a:	bf00      	nop
 8001e7c:	bf00      	nop
 8001e7e:	3724      	adds	r7, #36	@ 0x24
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr
 8001e88:	58000400 	.word	0x58000400

08001e8c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b087      	sub	sp, #28
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
 8001e94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001e96:	2300      	movs	r3, #0
 8001e98:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001e9a:	4b75      	ldr	r3, [pc, #468]	@ (8002070 <HAL_GPIO_DeInit+0x1e4>)
 8001e9c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 8001e9e:	e0d9      	b.n	8002054 <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea8:	683a      	ldr	r2, [r7, #0]
 8001eaa:	4013      	ands	r3, r2
 8001eac:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	f000 80cc 	beq.w	800204e <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 8001eb6:	4a6f      	ldr	r2, [pc, #444]	@ (8002074 <HAL_GPIO_DeInit+0x1e8>)
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	089b      	lsrs	r3, r3, #2
 8001ebc:	3302      	adds	r3, #2
 8001ebe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ec2:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	f003 0303 	and.w	r3, r3, #3
 8001eca:	009b      	lsls	r3, r3, #2
 8001ecc:	220f      	movs	r2, #15
 8001ece:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed2:	68ba      	ldr	r2, [r7, #8]
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	4a67      	ldr	r2, [pc, #412]	@ (8002078 <HAL_GPIO_DeInit+0x1ec>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d037      	beq.n	8001f50 <HAL_GPIO_DeInit+0xc4>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	4a66      	ldr	r2, [pc, #408]	@ (800207c <HAL_GPIO_DeInit+0x1f0>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d031      	beq.n	8001f4c <HAL_GPIO_DeInit+0xc0>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	4a65      	ldr	r2, [pc, #404]	@ (8002080 <HAL_GPIO_DeInit+0x1f4>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d02b      	beq.n	8001f48 <HAL_GPIO_DeInit+0xbc>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	4a64      	ldr	r2, [pc, #400]	@ (8002084 <HAL_GPIO_DeInit+0x1f8>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d025      	beq.n	8001f44 <HAL_GPIO_DeInit+0xb8>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	4a63      	ldr	r2, [pc, #396]	@ (8002088 <HAL_GPIO_DeInit+0x1fc>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d01f      	beq.n	8001f40 <HAL_GPIO_DeInit+0xb4>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	4a62      	ldr	r2, [pc, #392]	@ (800208c <HAL_GPIO_DeInit+0x200>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d019      	beq.n	8001f3c <HAL_GPIO_DeInit+0xb0>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	4a61      	ldr	r2, [pc, #388]	@ (8002090 <HAL_GPIO_DeInit+0x204>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d013      	beq.n	8001f38 <HAL_GPIO_DeInit+0xac>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	4a60      	ldr	r2, [pc, #384]	@ (8002094 <HAL_GPIO_DeInit+0x208>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d00d      	beq.n	8001f34 <HAL_GPIO_DeInit+0xa8>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	4a5f      	ldr	r2, [pc, #380]	@ (8002098 <HAL_GPIO_DeInit+0x20c>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d007      	beq.n	8001f30 <HAL_GPIO_DeInit+0xa4>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	4a5e      	ldr	r2, [pc, #376]	@ (800209c <HAL_GPIO_DeInit+0x210>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d101      	bne.n	8001f2c <HAL_GPIO_DeInit+0xa0>
 8001f28:	2309      	movs	r3, #9
 8001f2a:	e012      	b.n	8001f52 <HAL_GPIO_DeInit+0xc6>
 8001f2c:	230a      	movs	r3, #10
 8001f2e:	e010      	b.n	8001f52 <HAL_GPIO_DeInit+0xc6>
 8001f30:	2308      	movs	r3, #8
 8001f32:	e00e      	b.n	8001f52 <HAL_GPIO_DeInit+0xc6>
 8001f34:	2307      	movs	r3, #7
 8001f36:	e00c      	b.n	8001f52 <HAL_GPIO_DeInit+0xc6>
 8001f38:	2306      	movs	r3, #6
 8001f3a:	e00a      	b.n	8001f52 <HAL_GPIO_DeInit+0xc6>
 8001f3c:	2305      	movs	r3, #5
 8001f3e:	e008      	b.n	8001f52 <HAL_GPIO_DeInit+0xc6>
 8001f40:	2304      	movs	r3, #4
 8001f42:	e006      	b.n	8001f52 <HAL_GPIO_DeInit+0xc6>
 8001f44:	2303      	movs	r3, #3
 8001f46:	e004      	b.n	8001f52 <HAL_GPIO_DeInit+0xc6>
 8001f48:	2302      	movs	r3, #2
 8001f4a:	e002      	b.n	8001f52 <HAL_GPIO_DeInit+0xc6>
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	e000      	b.n	8001f52 <HAL_GPIO_DeInit+0xc6>
 8001f50:	2300      	movs	r3, #0
 8001f52:	697a      	ldr	r2, [r7, #20]
 8001f54:	f002 0203 	and.w	r2, r2, #3
 8001f58:	0092      	lsls	r2, r2, #2
 8001f5a:	4093      	lsls	r3, r2
 8001f5c:	68ba      	ldr	r2, [r7, #8]
 8001f5e:	429a      	cmp	r2, r3
 8001f60:	d136      	bne.n	8001fd0 <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	43db      	mvns	r3, r3
 8001f6a:	401a      	ands	r2, r3
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	685a      	ldr	r2, [r3, #4]
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	43db      	mvns	r3, r3
 8001f78:	401a      	ands	r2, r3
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8001f7e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f82:	685a      	ldr	r2, [r3, #4]
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	43db      	mvns	r3, r3
 8001f88:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8001f90:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	43db      	mvns	r3, r3
 8001f9a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	f003 0303 	and.w	r3, r3, #3
 8001fa8:	009b      	lsls	r3, r3, #2
 8001faa:	220f      	movs	r2, #15
 8001fac:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb0:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8001fb2:	4a30      	ldr	r2, [pc, #192]	@ (8002074 <HAL_GPIO_DeInit+0x1e8>)
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	089b      	lsrs	r3, r3, #2
 8001fb8:	3302      	adds	r3, #2
 8001fba:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	43da      	mvns	r2, r3
 8001fc2:	482c      	ldr	r0, [pc, #176]	@ (8002074 <HAL_GPIO_DeInit+0x1e8>)
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	089b      	lsrs	r3, r3, #2
 8001fc8:	400a      	ands	r2, r1
 8001fca:	3302      	adds	r3, #2
 8001fcc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	005b      	lsls	r3, r3, #1
 8001fd8:	2103      	movs	r1, #3
 8001fda:	fa01 f303 	lsl.w	r3, r1, r3
 8001fde:	431a      	orrs	r2, r3
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	08da      	lsrs	r2, r3, #3
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	3208      	adds	r2, #8
 8001fec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	f003 0307 	and.w	r3, r3, #7
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	220f      	movs	r2, #15
 8001ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffe:	43db      	mvns	r3, r3
 8002000:	697a      	ldr	r2, [r7, #20]
 8002002:	08d2      	lsrs	r2, r2, #3
 8002004:	4019      	ands	r1, r3
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	3208      	adds	r2, #8
 800200a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	68da      	ldr	r2, [r3, #12]
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	005b      	lsls	r3, r3, #1
 8002016:	2103      	movs	r1, #3
 8002018:	fa01 f303 	lsl.w	r3, r1, r3
 800201c:	43db      	mvns	r3, r3
 800201e:	401a      	ands	r2, r3
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	685a      	ldr	r2, [r3, #4]
 8002028:	2101      	movs	r1, #1
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	fa01 f303 	lsl.w	r3, r1, r3
 8002030:	43db      	mvns	r3, r3
 8002032:	401a      	ands	r2, r3
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	689a      	ldr	r2, [r3, #8]
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	005b      	lsls	r3, r3, #1
 8002040:	2103      	movs	r1, #3
 8002042:	fa01 f303 	lsl.w	r3, r1, r3
 8002046:	43db      	mvns	r3, r3
 8002048:	401a      	ands	r2, r3
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	609a      	str	r2, [r3, #8]
    }

    position++;
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	3301      	adds	r3, #1
 8002052:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 8002054:	683a      	ldr	r2, [r7, #0]
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	fa22 f303 	lsr.w	r3, r2, r3
 800205c:	2b00      	cmp	r3, #0
 800205e:	f47f af1f 	bne.w	8001ea0 <HAL_GPIO_DeInit+0x14>
  }
}
 8002062:	bf00      	nop
 8002064:	bf00      	nop
 8002066:	371c      	adds	r7, #28
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr
 8002070:	58000080 	.word	0x58000080
 8002074:	58000400 	.word	0x58000400
 8002078:	58020000 	.word	0x58020000
 800207c:	58020400 	.word	0x58020400
 8002080:	58020800 	.word	0x58020800
 8002084:	58020c00 	.word	0x58020c00
 8002088:	58021000 	.word	0x58021000
 800208c:	58021400 	.word	0x58021400
 8002090:	58021800 	.word	0x58021800
 8002094:	58021c00 	.word	0x58021c00
 8002098:	58022000 	.word	0x58022000
 800209c:	58022400 	.word	0x58022400

080020a0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	4603      	mov	r3, r0
 80020a8:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80020aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020ae:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80020b2:	88fb      	ldrh	r3, [r7, #6]
 80020b4:	4013      	ands	r3, r2
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d008      	beq.n	80020cc <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80020ba:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80020be:	88fb      	ldrh	r3, [r7, #6]
 80020c0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80020c4:	88fb      	ldrh	r3, [r7, #6]
 80020c6:	4618      	mov	r0, r3
 80020c8:	f7ff faf2 	bl	80016b0 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 80020cc:	bf00      	nop
 80020ce:	3708      	adds	r7, #8
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}

080020d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d101      	bne.n	80020e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e08b      	b.n	80021fe <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d106      	bne.n	8002100 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2200      	movs	r2, #0
 80020f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f7fe fd70 	bl	8000be0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2224      	movs	r2, #36	@ 0x24
 8002104:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f022 0201 	bic.w	r2, r2, #1
 8002116:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	685a      	ldr	r2, [r3, #4]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002124:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	689a      	ldr	r2, [r3, #8]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002134:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	68db      	ldr	r3, [r3, #12]
 800213a:	2b01      	cmp	r3, #1
 800213c:	d107      	bne.n	800214e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	689a      	ldr	r2, [r3, #8]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800214a:	609a      	str	r2, [r3, #8]
 800214c:	e006      	b.n	800215c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	689a      	ldr	r2, [r3, #8]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800215a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	2b02      	cmp	r3, #2
 8002162:	d108      	bne.n	8002176 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	685a      	ldr	r2, [r3, #4]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002172:	605a      	str	r2, [r3, #4]
 8002174:	e007      	b.n	8002186 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	685a      	ldr	r2, [r3, #4]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002184:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	6859      	ldr	r1, [r3, #4]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	4b1d      	ldr	r3, [pc, #116]	@ (8002208 <HAL_I2C_Init+0x134>)
 8002192:	430b      	orrs	r3, r1
 8002194:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	68da      	ldr	r2, [r3, #12]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80021a4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	691a      	ldr	r2, [r3, #16]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	695b      	ldr	r3, [r3, #20]
 80021ae:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	699b      	ldr	r3, [r3, #24]
 80021b6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	430a      	orrs	r2, r1
 80021be:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	69d9      	ldr	r1, [r3, #28]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6a1a      	ldr	r2, [r3, #32]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	430a      	orrs	r2, r1
 80021ce:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f042 0201 	orr.w	r2, r2, #1
 80021de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2200      	movs	r2, #0
 80021e4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2220      	movs	r2, #32
 80021ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2200      	movs	r2, #0
 80021f2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2200      	movs	r2, #0
 80021f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80021fc:	2300      	movs	r3, #0
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3708      	adds	r7, #8
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	02008000 	.word	0x02008000

0800220c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b082      	sub	sp, #8
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d101      	bne.n	800221e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e021      	b.n	8002262 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2224      	movs	r2, #36	@ 0x24
 8002222:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f022 0201 	bic.w	r2, r2, #1
 8002234:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	f7fe fd3c 	bl	8000cb4 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2200      	movs	r2, #0
 8002240:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2200      	movs	r2, #0
 8002246:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2200      	movs	r2, #0
 800224e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2200      	movs	r2, #0
 8002254:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2200      	movs	r2, #0
 800225c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8002260:	2300      	movs	r3, #0
}
 8002262:	4618      	mov	r0, r3
 8002264:	3708      	adds	r7, #8
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
	...

0800226c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b088      	sub	sp, #32
 8002270:	af02      	add	r7, sp, #8
 8002272:	60f8      	str	r0, [r7, #12]
 8002274:	607a      	str	r2, [r7, #4]
 8002276:	461a      	mov	r2, r3
 8002278:	460b      	mov	r3, r1
 800227a:	817b      	strh	r3, [r7, #10]
 800227c:	4613      	mov	r3, r2
 800227e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002286:	b2db      	uxtb	r3, r3
 8002288:	2b20      	cmp	r3, #32
 800228a:	f040 80db 	bne.w	8002444 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002294:	2b01      	cmp	r3, #1
 8002296:	d101      	bne.n	800229c <HAL_I2C_Master_Receive+0x30>
 8002298:	2302      	movs	r3, #2
 800229a:	e0d4      	b.n	8002446 <HAL_I2C_Master_Receive+0x1da>
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	2201      	movs	r2, #1
 80022a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80022a4:	f7ff fb56 	bl	8001954 <HAL_GetTick>
 80022a8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	9300      	str	r3, [sp, #0]
 80022ae:	2319      	movs	r3, #25
 80022b0:	2201      	movs	r2, #1
 80022b2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80022b6:	68f8      	ldr	r0, [r7, #12]
 80022b8:	f000 f9de 	bl	8002678 <I2C_WaitOnFlagUntilTimeout>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d001      	beq.n	80022c6 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e0bf      	b.n	8002446 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	2222      	movs	r2, #34	@ 0x22
 80022ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2210      	movs	r2, #16
 80022d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	2200      	movs	r2, #0
 80022da:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	687a      	ldr	r2, [r7, #4]
 80022e0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	893a      	ldrh	r2, [r7, #8]
 80022e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	2200      	movs	r2, #0
 80022ec:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022f2:	b29b      	uxth	r3, r3
 80022f4:	2bff      	cmp	r3, #255	@ 0xff
 80022f6:	d90e      	bls.n	8002316 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	22ff      	movs	r2, #255	@ 0xff
 80022fc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002302:	b2da      	uxtb	r2, r3
 8002304:	8979      	ldrh	r1, [r7, #10]
 8002306:	4b52      	ldr	r3, [pc, #328]	@ (8002450 <HAL_I2C_Master_Receive+0x1e4>)
 8002308:	9300      	str	r3, [sp, #0]
 800230a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800230e:	68f8      	ldr	r0, [r7, #12]
 8002310:	f000 fbba 	bl	8002a88 <I2C_TransferConfig>
 8002314:	e06d      	b.n	80023f2 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800231a:	b29a      	uxth	r2, r3
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002324:	b2da      	uxtb	r2, r3
 8002326:	8979      	ldrh	r1, [r7, #10]
 8002328:	4b49      	ldr	r3, [pc, #292]	@ (8002450 <HAL_I2C_Master_Receive+0x1e4>)
 800232a:	9300      	str	r3, [sp, #0]
 800232c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002330:	68f8      	ldr	r0, [r7, #12]
 8002332:	f000 fba9 	bl	8002a88 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002336:	e05c      	b.n	80023f2 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002338:	697a      	ldr	r2, [r7, #20]
 800233a:	6a39      	ldr	r1, [r7, #32]
 800233c:	68f8      	ldr	r0, [r7, #12]
 800233e:	f000 fa37 	bl	80027b0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002342:	4603      	mov	r3, r0
 8002344:	2b00      	cmp	r3, #0
 8002346:	d001      	beq.n	800234c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002348:	2301      	movs	r3, #1
 800234a:	e07c      	b.n	8002446 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002356:	b2d2      	uxtb	r2, r2
 8002358:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800235e:	1c5a      	adds	r2, r3, #1
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002368:	3b01      	subs	r3, #1
 800236a:	b29a      	uxth	r2, r3
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002374:	b29b      	uxth	r3, r3
 8002376:	3b01      	subs	r3, #1
 8002378:	b29a      	uxth	r2, r3
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002382:	b29b      	uxth	r3, r3
 8002384:	2b00      	cmp	r3, #0
 8002386:	d034      	beq.n	80023f2 <HAL_I2C_Master_Receive+0x186>
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800238c:	2b00      	cmp	r3, #0
 800238e:	d130      	bne.n	80023f2 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	9300      	str	r3, [sp, #0]
 8002394:	6a3b      	ldr	r3, [r7, #32]
 8002396:	2200      	movs	r2, #0
 8002398:	2180      	movs	r1, #128	@ 0x80
 800239a:	68f8      	ldr	r0, [r7, #12]
 800239c:	f000 f96c 	bl	8002678 <I2C_WaitOnFlagUntilTimeout>
 80023a0:	4603      	mov	r3, r0
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d001      	beq.n	80023aa <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e04d      	b.n	8002446 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023ae:	b29b      	uxth	r3, r3
 80023b0:	2bff      	cmp	r3, #255	@ 0xff
 80023b2:	d90e      	bls.n	80023d2 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	22ff      	movs	r2, #255	@ 0xff
 80023b8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023be:	b2da      	uxtb	r2, r3
 80023c0:	8979      	ldrh	r1, [r7, #10]
 80023c2:	2300      	movs	r3, #0
 80023c4:	9300      	str	r3, [sp, #0]
 80023c6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80023ca:	68f8      	ldr	r0, [r7, #12]
 80023cc:	f000 fb5c 	bl	8002a88 <I2C_TransferConfig>
 80023d0:	e00f      	b.n	80023f2 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023d6:	b29a      	uxth	r2, r3
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023e0:	b2da      	uxtb	r2, r3
 80023e2:	8979      	ldrh	r1, [r7, #10]
 80023e4:	2300      	movs	r3, #0
 80023e6:	9300      	str	r3, [sp, #0]
 80023e8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80023ec:	68f8      	ldr	r0, [r7, #12]
 80023ee:	f000 fb4b 	bl	8002a88 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023f6:	b29b      	uxth	r3, r3
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d19d      	bne.n	8002338 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023fc:	697a      	ldr	r2, [r7, #20]
 80023fe:	6a39      	ldr	r1, [r7, #32]
 8002400:	68f8      	ldr	r0, [r7, #12]
 8002402:	f000 f992 	bl	800272a <I2C_WaitOnSTOPFlagUntilTimeout>
 8002406:	4603      	mov	r3, r0
 8002408:	2b00      	cmp	r3, #0
 800240a:	d001      	beq.n	8002410 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	e01a      	b.n	8002446 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	2220      	movs	r2, #32
 8002416:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	6859      	ldr	r1, [r3, #4]
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	4b0c      	ldr	r3, [pc, #48]	@ (8002454 <HAL_I2C_Master_Receive+0x1e8>)
 8002424:	400b      	ands	r3, r1
 8002426:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	2220      	movs	r2, #32
 800242c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	2200      	movs	r2, #0
 8002434:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2200      	movs	r2, #0
 800243c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002440:	2300      	movs	r3, #0
 8002442:	e000      	b.n	8002446 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002444:	2302      	movs	r3, #2
  }
}
 8002446:	4618      	mov	r0, r3
 8002448:	3718      	adds	r7, #24
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	80002400 	.word	0x80002400
 8002454:	fe00e800 	.word	0xfe00e800

08002458 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b08a      	sub	sp, #40	@ 0x28
 800245c:	af02      	add	r7, sp, #8
 800245e:	60f8      	str	r0, [r7, #12]
 8002460:	607a      	str	r2, [r7, #4]
 8002462:	603b      	str	r3, [r7, #0]
 8002464:	460b      	mov	r3, r1
 8002466:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8002468:	2300      	movs	r3, #0
 800246a:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002472:	b2db      	uxtb	r3, r3
 8002474:	2b20      	cmp	r3, #32
 8002476:	f040 80d2 	bne.w	800261e <HAL_I2C_IsDeviceReady+0x1c6>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	699b      	ldr	r3, [r3, #24]
 8002480:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002484:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002488:	d101      	bne.n	800248e <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 800248a:	2302      	movs	r3, #2
 800248c:	e0c8      	b.n	8002620 <HAL_I2C_IsDeviceReady+0x1c8>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002494:	2b01      	cmp	r3, #1
 8002496:	d101      	bne.n	800249c <HAL_I2C_IsDeviceReady+0x44>
 8002498:	2302      	movs	r3, #2
 800249a:	e0c1      	b.n	8002620 <HAL_I2C_IsDeviceReady+0x1c8>
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	2201      	movs	r2, #1
 80024a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	2224      	movs	r2, #36	@ 0x24
 80024a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2200      	movs	r2, #0
 80024b0:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	68db      	ldr	r3, [r3, #12]
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d105      	bne.n	80024c6 <HAL_I2C_IsDeviceReady+0x6e>
 80024ba:	897b      	ldrh	r3, [r7, #10]
 80024bc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80024c0:	4b59      	ldr	r3, [pc, #356]	@ (8002628 <HAL_I2C_IsDeviceReady+0x1d0>)
 80024c2:	4313      	orrs	r3, r2
 80024c4:	e004      	b.n	80024d0 <HAL_I2C_IsDeviceReady+0x78>
 80024c6:	897b      	ldrh	r3, [r7, #10]
 80024c8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80024cc:	4b57      	ldr	r3, [pc, #348]	@ (800262c <HAL_I2C_IsDeviceReady+0x1d4>)
 80024ce:	4313      	orrs	r3, r2
 80024d0:	68fa      	ldr	r2, [r7, #12]
 80024d2:	6812      	ldr	r2, [r2, #0]
 80024d4:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80024d6:	f7ff fa3d 	bl	8001954 <HAL_GetTick>
 80024da:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	699b      	ldr	r3, [r3, #24]
 80024e2:	f003 0320 	and.w	r3, r3, #32
 80024e6:	2b20      	cmp	r3, #32
 80024e8:	bf0c      	ite	eq
 80024ea:	2301      	moveq	r3, #1
 80024ec:	2300      	movne	r3, #0
 80024ee:	b2db      	uxtb	r3, r3
 80024f0:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	699b      	ldr	r3, [r3, #24]
 80024f8:	f003 0310 	and.w	r3, r3, #16
 80024fc:	2b10      	cmp	r3, #16
 80024fe:	bf0c      	ite	eq
 8002500:	2301      	moveq	r3, #1
 8002502:	2300      	movne	r3, #0
 8002504:	b2db      	uxtb	r3, r3
 8002506:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002508:	e034      	b.n	8002574 <HAL_I2C_IsDeviceReady+0x11c>
      {
        if (Timeout != HAL_MAX_DELAY)
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002510:	d01a      	beq.n	8002548 <HAL_I2C_IsDeviceReady+0xf0>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002512:	f7ff fa1f 	bl	8001954 <HAL_GetTick>
 8002516:	4602      	mov	r2, r0
 8002518:	69bb      	ldr	r3, [r7, #24]
 800251a:	1ad3      	subs	r3, r2, r3
 800251c:	683a      	ldr	r2, [r7, #0]
 800251e:	429a      	cmp	r2, r3
 8002520:	d302      	bcc.n	8002528 <HAL_I2C_IsDeviceReady+0xd0>
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d10f      	bne.n	8002548 <HAL_I2C_IsDeviceReady+0xf0>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	2220      	movs	r2, #32
 800252c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002534:	f043 0220 	orr.w	r2, r3, #32
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2200      	movs	r2, #0
 8002540:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	e06b      	b.n	8002620 <HAL_I2C_IsDeviceReady+0x1c8>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	699b      	ldr	r3, [r3, #24]
 800254e:	f003 0320 	and.w	r3, r3, #32
 8002552:	2b20      	cmp	r3, #32
 8002554:	bf0c      	ite	eq
 8002556:	2301      	moveq	r3, #1
 8002558:	2300      	movne	r3, #0
 800255a:	b2db      	uxtb	r3, r3
 800255c:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	699b      	ldr	r3, [r3, #24]
 8002564:	f003 0310 	and.w	r3, r3, #16
 8002568:	2b10      	cmp	r3, #16
 800256a:	bf0c      	ite	eq
 800256c:	2301      	moveq	r3, #1
 800256e:	2300      	movne	r3, #0
 8002570:	b2db      	uxtb	r3, r3
 8002572:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002574:	7ffb      	ldrb	r3, [r7, #31]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d102      	bne.n	8002580 <HAL_I2C_IsDeviceReady+0x128>
 800257a:	7fbb      	ldrb	r3, [r7, #30]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d0c4      	beq.n	800250a <HAL_I2C_IsDeviceReady+0xb2>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	699b      	ldr	r3, [r3, #24]
 8002586:	f003 0310 	and.w	r3, r3, #16
 800258a:	2b10      	cmp	r3, #16
 800258c:	d01a      	beq.n	80025c4 <HAL_I2C_IsDeviceReady+0x16c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800258e:	69bb      	ldr	r3, [r7, #24]
 8002590:	9300      	str	r3, [sp, #0]
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	2200      	movs	r2, #0
 8002596:	2120      	movs	r1, #32
 8002598:	68f8      	ldr	r0, [r7, #12]
 800259a:	f000 f86d 	bl	8002678 <I2C_WaitOnFlagUntilTimeout>
 800259e:	4603      	mov	r3, r0
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d001      	beq.n	80025a8 <HAL_I2C_IsDeviceReady+0x150>
        {
          return HAL_ERROR;
 80025a4:	2301      	movs	r3, #1
 80025a6:	e03b      	b.n	8002620 <HAL_I2C_IsDeviceReady+0x1c8>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	2220      	movs	r2, #32
 80025ae:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	2220      	movs	r2, #32
 80025b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	2200      	movs	r2, #0
 80025bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 80025c0:	2300      	movs	r3, #0
 80025c2:	e02d      	b.n	8002620 <HAL_I2C_IsDeviceReady+0x1c8>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80025c4:	69bb      	ldr	r3, [r7, #24]
 80025c6:	9300      	str	r3, [sp, #0]
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	2200      	movs	r2, #0
 80025cc:	2120      	movs	r1, #32
 80025ce:	68f8      	ldr	r0, [r7, #12]
 80025d0:	f000 f852 	bl	8002678 <I2C_WaitOnFlagUntilTimeout>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d001      	beq.n	80025de <HAL_I2C_IsDeviceReady+0x186>
        {
          return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	e020      	b.n	8002620 <HAL_I2C_IsDeviceReady+0x1c8>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	2210      	movs	r2, #16
 80025e4:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	2220      	movs	r2, #32
 80025ec:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	3301      	adds	r3, #1
 80025f2:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	687a      	ldr	r2, [r7, #4]
 80025f8:	429a      	cmp	r2, r3
 80025fa:	f63f af5a 	bhi.w	80024b2 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	2220      	movs	r2, #32
 8002602:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800260a:	f043 0220 	orr.w	r2, r3, #32
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2200      	movs	r2, #0
 8002616:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e000      	b.n	8002620 <HAL_I2C_IsDeviceReady+0x1c8>
  }
  else
  {
    return HAL_BUSY;
 800261e:	2302      	movs	r3, #2
  }
}
 8002620:	4618      	mov	r0, r3
 8002622:	3720      	adds	r7, #32
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}
 8002628:	02002000 	.word	0x02002000
 800262c:	02002800 	.word	0x02002800

08002630 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002630:	b480      	push	{r7}
 8002632:	b083      	sub	sp, #12
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	699b      	ldr	r3, [r3, #24]
 800263e:	f003 0302 	and.w	r3, r3, #2
 8002642:	2b02      	cmp	r3, #2
 8002644:	d103      	bne.n	800264e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	2200      	movs	r2, #0
 800264c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	699b      	ldr	r3, [r3, #24]
 8002654:	f003 0301 	and.w	r3, r3, #1
 8002658:	2b01      	cmp	r3, #1
 800265a:	d007      	beq.n	800266c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	699a      	ldr	r2, [r3, #24]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f042 0201 	orr.w	r2, r2, #1
 800266a:	619a      	str	r2, [r3, #24]
  }
}
 800266c:	bf00      	nop
 800266e:	370c      	adds	r7, #12
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr

08002678 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b084      	sub	sp, #16
 800267c:	af00      	add	r7, sp, #0
 800267e:	60f8      	str	r0, [r7, #12]
 8002680:	60b9      	str	r1, [r7, #8]
 8002682:	603b      	str	r3, [r7, #0]
 8002684:	4613      	mov	r3, r2
 8002686:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002688:	e03b      	b.n	8002702 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800268a:	69ba      	ldr	r2, [r7, #24]
 800268c:	6839      	ldr	r1, [r7, #0]
 800268e:	68f8      	ldr	r0, [r7, #12]
 8002690:	f000 f91a 	bl	80028c8 <I2C_IsErrorOccurred>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d001      	beq.n	800269e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e041      	b.n	8002722 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026a4:	d02d      	beq.n	8002702 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026a6:	f7ff f955 	bl	8001954 <HAL_GetTick>
 80026aa:	4602      	mov	r2, r0
 80026ac:	69bb      	ldr	r3, [r7, #24]
 80026ae:	1ad3      	subs	r3, r2, r3
 80026b0:	683a      	ldr	r2, [r7, #0]
 80026b2:	429a      	cmp	r2, r3
 80026b4:	d302      	bcc.n	80026bc <I2C_WaitOnFlagUntilTimeout+0x44>
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d122      	bne.n	8002702 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	699a      	ldr	r2, [r3, #24]
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	4013      	ands	r3, r2
 80026c6:	68ba      	ldr	r2, [r7, #8]
 80026c8:	429a      	cmp	r2, r3
 80026ca:	bf0c      	ite	eq
 80026cc:	2301      	moveq	r3, #1
 80026ce:	2300      	movne	r3, #0
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	461a      	mov	r2, r3
 80026d4:	79fb      	ldrb	r3, [r7, #7]
 80026d6:	429a      	cmp	r2, r3
 80026d8:	d113      	bne.n	8002702 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026de:	f043 0220 	orr.w	r2, r3, #32
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	2220      	movs	r2, #32
 80026ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	2200      	movs	r2, #0
 80026f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	2200      	movs	r2, #0
 80026fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e00f      	b.n	8002722 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	699a      	ldr	r2, [r3, #24]
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	4013      	ands	r3, r2
 800270c:	68ba      	ldr	r2, [r7, #8]
 800270e:	429a      	cmp	r2, r3
 8002710:	bf0c      	ite	eq
 8002712:	2301      	moveq	r3, #1
 8002714:	2300      	movne	r3, #0
 8002716:	b2db      	uxtb	r3, r3
 8002718:	461a      	mov	r2, r3
 800271a:	79fb      	ldrb	r3, [r7, #7]
 800271c:	429a      	cmp	r2, r3
 800271e:	d0b4      	beq.n	800268a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002720:	2300      	movs	r3, #0
}
 8002722:	4618      	mov	r0, r3
 8002724:	3710      	adds	r7, #16
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}

0800272a <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800272a:	b580      	push	{r7, lr}
 800272c:	b084      	sub	sp, #16
 800272e:	af00      	add	r7, sp, #0
 8002730:	60f8      	str	r0, [r7, #12]
 8002732:	60b9      	str	r1, [r7, #8]
 8002734:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002736:	e02f      	b.n	8002798 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002738:	687a      	ldr	r2, [r7, #4]
 800273a:	68b9      	ldr	r1, [r7, #8]
 800273c:	68f8      	ldr	r0, [r7, #12]
 800273e:	f000 f8c3 	bl	80028c8 <I2C_IsErrorOccurred>
 8002742:	4603      	mov	r3, r0
 8002744:	2b00      	cmp	r3, #0
 8002746:	d001      	beq.n	800274c <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	e02d      	b.n	80027a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800274c:	f7ff f902 	bl	8001954 <HAL_GetTick>
 8002750:	4602      	mov	r2, r0
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	1ad3      	subs	r3, r2, r3
 8002756:	68ba      	ldr	r2, [r7, #8]
 8002758:	429a      	cmp	r2, r3
 800275a:	d302      	bcc.n	8002762 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d11a      	bne.n	8002798 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	699b      	ldr	r3, [r3, #24]
 8002768:	f003 0320 	and.w	r3, r3, #32
 800276c:	2b20      	cmp	r3, #32
 800276e:	d013      	beq.n	8002798 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002774:	f043 0220 	orr.w	r2, r3, #32
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	2220      	movs	r2, #32
 8002780:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	2200      	movs	r2, #0
 8002788:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	2200      	movs	r2, #0
 8002790:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	e007      	b.n	80027a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	699b      	ldr	r3, [r3, #24]
 800279e:	f003 0320 	and.w	r3, r3, #32
 80027a2:	2b20      	cmp	r3, #32
 80027a4:	d1c8      	bne.n	8002738 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80027a6:	2300      	movs	r3, #0
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	3710      	adds	r7, #16
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}

080027b0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b086      	sub	sp, #24
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	60f8      	str	r0, [r7, #12]
 80027b8:	60b9      	str	r1, [r7, #8]
 80027ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027bc:	2300      	movs	r3, #0
 80027be:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80027c0:	e071      	b.n	80028a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80027c2:	687a      	ldr	r2, [r7, #4]
 80027c4:	68b9      	ldr	r1, [r7, #8]
 80027c6:	68f8      	ldr	r0, [r7, #12]
 80027c8:	f000 f87e 	bl	80028c8 <I2C_IsErrorOccurred>
 80027cc:	4603      	mov	r3, r0
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d001      	beq.n	80027d6 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	699b      	ldr	r3, [r3, #24]
 80027dc:	f003 0320 	and.w	r3, r3, #32
 80027e0:	2b20      	cmp	r3, #32
 80027e2:	d13b      	bne.n	800285c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 80027e4:	7dfb      	ldrb	r3, [r7, #23]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d138      	bne.n	800285c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	699b      	ldr	r3, [r3, #24]
 80027f0:	f003 0304 	and.w	r3, r3, #4
 80027f4:	2b04      	cmp	r3, #4
 80027f6:	d105      	bne.n	8002804 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d001      	beq.n	8002804 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8002800:	2300      	movs	r3, #0
 8002802:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	699b      	ldr	r3, [r3, #24]
 800280a:	f003 0310 	and.w	r3, r3, #16
 800280e:	2b10      	cmp	r3, #16
 8002810:	d121      	bne.n	8002856 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	2210      	movs	r2, #16
 8002818:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2204      	movs	r2, #4
 800281e:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	2220      	movs	r2, #32
 8002826:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	6859      	ldr	r1, [r3, #4]
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	4b24      	ldr	r3, [pc, #144]	@ (80028c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8002834:	400b      	ands	r3, r1
 8002836:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	2220      	movs	r2, #32
 800283c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	2200      	movs	r2, #0
 8002844:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	2200      	movs	r2, #0
 800284c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	75fb      	strb	r3, [r7, #23]
 8002854:	e002      	b.n	800285c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	2200      	movs	r2, #0
 800285a:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 800285c:	f7ff f87a 	bl	8001954 <HAL_GetTick>
 8002860:	4602      	mov	r2, r0
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	68ba      	ldr	r2, [r7, #8]
 8002868:	429a      	cmp	r2, r3
 800286a:	d302      	bcc.n	8002872 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d119      	bne.n	80028a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8002872:	7dfb      	ldrb	r3, [r7, #23]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d116      	bne.n	80028a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	699b      	ldr	r3, [r3, #24]
 800287e:	f003 0304 	and.w	r3, r3, #4
 8002882:	2b04      	cmp	r3, #4
 8002884:	d00f      	beq.n	80028a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800288a:	f043 0220 	orr.w	r2, r3, #32
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2220      	movs	r2, #32
 8002896:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	2200      	movs	r2, #0
 800289e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	699b      	ldr	r3, [r3, #24]
 80028ac:	f003 0304 	and.w	r3, r3, #4
 80028b0:	2b04      	cmp	r3, #4
 80028b2:	d002      	beq.n	80028ba <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 80028b4:	7dfb      	ldrb	r3, [r7, #23]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d083      	beq.n	80027c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 80028ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80028bc:	4618      	mov	r0, r3
 80028be:	3718      	adds	r7, #24
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}
 80028c4:	fe00e800 	.word	0xfe00e800

080028c8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b08a      	sub	sp, #40	@ 0x28
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	60f8      	str	r0, [r7, #12]
 80028d0:	60b9      	str	r1, [r7, #8]
 80028d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028d4:	2300      	movs	r3, #0
 80028d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	699b      	ldr	r3, [r3, #24]
 80028e0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80028e2:	2300      	movs	r3, #0
 80028e4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80028ea:	69bb      	ldr	r3, [r7, #24]
 80028ec:	f003 0310 	and.w	r3, r3, #16
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d068      	beq.n	80029c6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	2210      	movs	r2, #16
 80028fa:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80028fc:	e049      	b.n	8002992 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002904:	d045      	beq.n	8002992 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002906:	f7ff f825 	bl	8001954 <HAL_GetTick>
 800290a:	4602      	mov	r2, r0
 800290c:	69fb      	ldr	r3, [r7, #28]
 800290e:	1ad3      	subs	r3, r2, r3
 8002910:	68ba      	ldr	r2, [r7, #8]
 8002912:	429a      	cmp	r2, r3
 8002914:	d302      	bcc.n	800291c <I2C_IsErrorOccurred+0x54>
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d13a      	bne.n	8002992 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002926:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800292e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	699b      	ldr	r3, [r3, #24]
 8002936:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800293a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800293e:	d121      	bne.n	8002984 <I2C_IsErrorOccurred+0xbc>
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002946:	d01d      	beq.n	8002984 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002948:	7cfb      	ldrb	r3, [r7, #19]
 800294a:	2b20      	cmp	r3, #32
 800294c:	d01a      	beq.n	8002984 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	685a      	ldr	r2, [r3, #4]
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800295c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800295e:	f7fe fff9 	bl	8001954 <HAL_GetTick>
 8002962:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002964:	e00e      	b.n	8002984 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002966:	f7fe fff5 	bl	8001954 <HAL_GetTick>
 800296a:	4602      	mov	r2, r0
 800296c:	69fb      	ldr	r3, [r7, #28]
 800296e:	1ad3      	subs	r3, r2, r3
 8002970:	2b19      	cmp	r3, #25
 8002972:	d907      	bls.n	8002984 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002974:	6a3b      	ldr	r3, [r7, #32]
 8002976:	f043 0320 	orr.w	r3, r3, #32
 800297a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800297c:	2301      	movs	r3, #1
 800297e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8002982:	e006      	b.n	8002992 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	699b      	ldr	r3, [r3, #24]
 800298a:	f003 0320 	and.w	r3, r3, #32
 800298e:	2b20      	cmp	r3, #32
 8002990:	d1e9      	bne.n	8002966 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	699b      	ldr	r3, [r3, #24]
 8002998:	f003 0320 	and.w	r3, r3, #32
 800299c:	2b20      	cmp	r3, #32
 800299e:	d003      	beq.n	80029a8 <I2C_IsErrorOccurred+0xe0>
 80029a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d0aa      	beq.n	80028fe <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80029a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d103      	bne.n	80029b8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	2220      	movs	r2, #32
 80029b6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80029b8:	6a3b      	ldr	r3, [r7, #32]
 80029ba:	f043 0304 	orr.w	r3, r3, #4
 80029be:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	699b      	ldr	r3, [r3, #24]
 80029cc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80029ce:	69bb      	ldr	r3, [r7, #24]
 80029d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d00b      	beq.n	80029f0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80029d8:	6a3b      	ldr	r3, [r7, #32]
 80029da:	f043 0301 	orr.w	r3, r3, #1
 80029de:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80029e8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80029f0:	69bb      	ldr	r3, [r7, #24]
 80029f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d00b      	beq.n	8002a12 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80029fa:	6a3b      	ldr	r3, [r7, #32]
 80029fc:	f043 0308 	orr.w	r3, r3, #8
 8002a00:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002a0a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002a12:	69bb      	ldr	r3, [r7, #24]
 8002a14:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d00b      	beq.n	8002a34 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002a1c:	6a3b      	ldr	r3, [r7, #32]
 8002a1e:	f043 0302 	orr.w	r3, r3, #2
 8002a22:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a2c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002a34:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d01c      	beq.n	8002a76 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002a3c:	68f8      	ldr	r0, [r7, #12]
 8002a3e:	f7ff fdf7 	bl	8002630 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	6859      	ldr	r1, [r3, #4]
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	4b0d      	ldr	r3, [pc, #52]	@ (8002a84 <I2C_IsErrorOccurred+0x1bc>)
 8002a4e:	400b      	ands	r3, r1
 8002a50:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002a56:	6a3b      	ldr	r3, [r7, #32]
 8002a58:	431a      	orrs	r2, r3
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	2220      	movs	r2, #32
 8002a62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	2200      	movs	r2, #0
 8002a72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8002a76:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3728      	adds	r7, #40	@ 0x28
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	fe00e800 	.word	0xfe00e800

08002a88 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b087      	sub	sp, #28
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	60f8      	str	r0, [r7, #12]
 8002a90:	607b      	str	r3, [r7, #4]
 8002a92:	460b      	mov	r3, r1
 8002a94:	817b      	strh	r3, [r7, #10]
 8002a96:	4613      	mov	r3, r2
 8002a98:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002a9a:	897b      	ldrh	r3, [r7, #10]
 8002a9c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002aa0:	7a7b      	ldrb	r3, [r7, #9]
 8002aa2:	041b      	lsls	r3, r3, #16
 8002aa4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002aa8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002aae:	6a3b      	ldr	r3, [r7, #32]
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002ab6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	685a      	ldr	r2, [r3, #4]
 8002abe:	6a3b      	ldr	r3, [r7, #32]
 8002ac0:	0d5b      	lsrs	r3, r3, #21
 8002ac2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8002ac6:	4b08      	ldr	r3, [pc, #32]	@ (8002ae8 <I2C_TransferConfig+0x60>)
 8002ac8:	430b      	orrs	r3, r1
 8002aca:	43db      	mvns	r3, r3
 8002acc:	ea02 0103 	and.w	r1, r2, r3
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	697a      	ldr	r2, [r7, #20]
 8002ad6:	430a      	orrs	r2, r1
 8002ad8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002ada:	bf00      	nop
 8002adc:	371c      	adds	r7, #28
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr
 8002ae6:	bf00      	nop
 8002ae8:	03ff63ff 	.word	0x03ff63ff

08002aec <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b083      	sub	sp, #12
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
 8002af4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	2b20      	cmp	r3, #32
 8002b00:	d138      	bne.n	8002b74 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	d101      	bne.n	8002b10 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002b0c:	2302      	movs	r3, #2
 8002b0e:	e032      	b.n	8002b76 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2201      	movs	r2, #1
 8002b14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2224      	movs	r2, #36	@ 0x24
 8002b1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f022 0201 	bic.w	r2, r2, #1
 8002b2e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002b3e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	6819      	ldr	r1, [r3, #0]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	683a      	ldr	r2, [r7, #0]
 8002b4c:	430a      	orrs	r2, r1
 8002b4e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f042 0201 	orr.w	r2, r2, #1
 8002b5e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2220      	movs	r2, #32
 8002b64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002b70:	2300      	movs	r3, #0
 8002b72:	e000      	b.n	8002b76 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002b74:	2302      	movs	r3, #2
  }
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	370c      	adds	r7, #12
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr

08002b82 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002b82:	b480      	push	{r7}
 8002b84:	b085      	sub	sp, #20
 8002b86:	af00      	add	r7, sp, #0
 8002b88:	6078      	str	r0, [r7, #4]
 8002b8a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b92:	b2db      	uxtb	r3, r3
 8002b94:	2b20      	cmp	r3, #32
 8002b96:	d139      	bne.n	8002c0c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	d101      	bne.n	8002ba6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002ba2:	2302      	movs	r3, #2
 8002ba4:	e033      	b.n	8002c0e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2201      	movs	r2, #1
 8002baa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2224      	movs	r2, #36	@ 0x24
 8002bb2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f022 0201 	bic.w	r2, r2, #1
 8002bc4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002bd4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	021b      	lsls	r3, r3, #8
 8002bda:	68fa      	ldr	r2, [r7, #12]
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	68fa      	ldr	r2, [r7, #12]
 8002be6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f042 0201 	orr.w	r2, r2, #1
 8002bf6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2220      	movs	r2, #32
 8002bfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2200      	movs	r2, #0
 8002c04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	e000      	b.n	8002c0e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002c0c:	2302      	movs	r3, #2
  }
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3714      	adds	r7, #20
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr
	...

08002c1c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b084      	sub	sp, #16
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002c24:	4b19      	ldr	r3, [pc, #100]	@ (8002c8c <HAL_PWREx_ConfigSupply+0x70>)
 8002c26:	68db      	ldr	r3, [r3, #12]
 8002c28:	f003 0304 	and.w	r3, r3, #4
 8002c2c:	2b04      	cmp	r3, #4
 8002c2e:	d00a      	beq.n	8002c46 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002c30:	4b16      	ldr	r3, [pc, #88]	@ (8002c8c <HAL_PWREx_ConfigSupply+0x70>)
 8002c32:	68db      	ldr	r3, [r3, #12]
 8002c34:	f003 0307 	and.w	r3, r3, #7
 8002c38:	687a      	ldr	r2, [r7, #4]
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	d001      	beq.n	8002c42 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e01f      	b.n	8002c82 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002c42:	2300      	movs	r3, #0
 8002c44:	e01d      	b.n	8002c82 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002c46:	4b11      	ldr	r3, [pc, #68]	@ (8002c8c <HAL_PWREx_ConfigSupply+0x70>)
 8002c48:	68db      	ldr	r3, [r3, #12]
 8002c4a:	f023 0207 	bic.w	r2, r3, #7
 8002c4e:	490f      	ldr	r1, [pc, #60]	@ (8002c8c <HAL_PWREx_ConfigSupply+0x70>)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	4313      	orrs	r3, r2
 8002c54:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002c56:	f7fe fe7d 	bl	8001954 <HAL_GetTick>
 8002c5a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002c5c:	e009      	b.n	8002c72 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002c5e:	f7fe fe79 	bl	8001954 <HAL_GetTick>
 8002c62:	4602      	mov	r2, r0
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	1ad3      	subs	r3, r2, r3
 8002c68:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002c6c:	d901      	bls.n	8002c72 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e007      	b.n	8002c82 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002c72:	4b06      	ldr	r3, [pc, #24]	@ (8002c8c <HAL_PWREx_ConfigSupply+0x70>)
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c7a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c7e:	d1ee      	bne.n	8002c5e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002c80:	2300      	movs	r3, #0
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	3710      	adds	r7, #16
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	58024800 	.word	0x58024800

08002c90 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b08c      	sub	sp, #48	@ 0x30
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d102      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	f000 bc1f 	b.w	80034e2 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f003 0301 	and.w	r3, r3, #1
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	f000 80b3 	beq.w	8002e18 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002cb2:	4b95      	ldr	r3, [pc, #596]	@ (8002f08 <HAL_RCC_OscConfig+0x278>)
 8002cb4:	691b      	ldr	r3, [r3, #16]
 8002cb6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002cba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002cbc:	4b92      	ldr	r3, [pc, #584]	@ (8002f08 <HAL_RCC_OscConfig+0x278>)
 8002cbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cc0:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002cc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cc4:	2b10      	cmp	r3, #16
 8002cc6:	d007      	beq.n	8002cd8 <HAL_RCC_OscConfig+0x48>
 8002cc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cca:	2b18      	cmp	r3, #24
 8002ccc:	d112      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x64>
 8002cce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cd0:	f003 0303 	and.w	r3, r3, #3
 8002cd4:	2b02      	cmp	r3, #2
 8002cd6:	d10d      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cd8:	4b8b      	ldr	r3, [pc, #556]	@ (8002f08 <HAL_RCC_OscConfig+0x278>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	f000 8098 	beq.w	8002e16 <HAL_RCC_OscConfig+0x186>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	f040 8093 	bne.w	8002e16 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e3f6      	b.n	80034e2 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002cfc:	d106      	bne.n	8002d0c <HAL_RCC_OscConfig+0x7c>
 8002cfe:	4b82      	ldr	r3, [pc, #520]	@ (8002f08 <HAL_RCC_OscConfig+0x278>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a81      	ldr	r2, [pc, #516]	@ (8002f08 <HAL_RCC_OscConfig+0x278>)
 8002d04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d08:	6013      	str	r3, [r2, #0]
 8002d0a:	e058      	b.n	8002dbe <HAL_RCC_OscConfig+0x12e>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d112      	bne.n	8002d3a <HAL_RCC_OscConfig+0xaa>
 8002d14:	4b7c      	ldr	r3, [pc, #496]	@ (8002f08 <HAL_RCC_OscConfig+0x278>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a7b      	ldr	r2, [pc, #492]	@ (8002f08 <HAL_RCC_OscConfig+0x278>)
 8002d1a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d1e:	6013      	str	r3, [r2, #0]
 8002d20:	4b79      	ldr	r3, [pc, #484]	@ (8002f08 <HAL_RCC_OscConfig+0x278>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a78      	ldr	r2, [pc, #480]	@ (8002f08 <HAL_RCC_OscConfig+0x278>)
 8002d26:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002d2a:	6013      	str	r3, [r2, #0]
 8002d2c:	4b76      	ldr	r3, [pc, #472]	@ (8002f08 <HAL_RCC_OscConfig+0x278>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a75      	ldr	r2, [pc, #468]	@ (8002f08 <HAL_RCC_OscConfig+0x278>)
 8002d32:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d36:	6013      	str	r3, [r2, #0]
 8002d38:	e041      	b.n	8002dbe <HAL_RCC_OscConfig+0x12e>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002d42:	d112      	bne.n	8002d6a <HAL_RCC_OscConfig+0xda>
 8002d44:	4b70      	ldr	r3, [pc, #448]	@ (8002f08 <HAL_RCC_OscConfig+0x278>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a6f      	ldr	r2, [pc, #444]	@ (8002f08 <HAL_RCC_OscConfig+0x278>)
 8002d4a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002d4e:	6013      	str	r3, [r2, #0]
 8002d50:	4b6d      	ldr	r3, [pc, #436]	@ (8002f08 <HAL_RCC_OscConfig+0x278>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a6c      	ldr	r2, [pc, #432]	@ (8002f08 <HAL_RCC_OscConfig+0x278>)
 8002d56:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002d5a:	6013      	str	r3, [r2, #0]
 8002d5c:	4b6a      	ldr	r3, [pc, #424]	@ (8002f08 <HAL_RCC_OscConfig+0x278>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a69      	ldr	r2, [pc, #420]	@ (8002f08 <HAL_RCC_OscConfig+0x278>)
 8002d62:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d66:	6013      	str	r3, [r2, #0]
 8002d68:	e029      	b.n	8002dbe <HAL_RCC_OscConfig+0x12e>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8002d72:	d112      	bne.n	8002d9a <HAL_RCC_OscConfig+0x10a>
 8002d74:	4b64      	ldr	r3, [pc, #400]	@ (8002f08 <HAL_RCC_OscConfig+0x278>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a63      	ldr	r2, [pc, #396]	@ (8002f08 <HAL_RCC_OscConfig+0x278>)
 8002d7a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002d7e:	6013      	str	r3, [r2, #0]
 8002d80:	4b61      	ldr	r3, [pc, #388]	@ (8002f08 <HAL_RCC_OscConfig+0x278>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a60      	ldr	r2, [pc, #384]	@ (8002f08 <HAL_RCC_OscConfig+0x278>)
 8002d86:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002d8a:	6013      	str	r3, [r2, #0]
 8002d8c:	4b5e      	ldr	r3, [pc, #376]	@ (8002f08 <HAL_RCC_OscConfig+0x278>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a5d      	ldr	r2, [pc, #372]	@ (8002f08 <HAL_RCC_OscConfig+0x278>)
 8002d92:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d96:	6013      	str	r3, [r2, #0]
 8002d98:	e011      	b.n	8002dbe <HAL_RCC_OscConfig+0x12e>
 8002d9a:	4b5b      	ldr	r3, [pc, #364]	@ (8002f08 <HAL_RCC_OscConfig+0x278>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a5a      	ldr	r2, [pc, #360]	@ (8002f08 <HAL_RCC_OscConfig+0x278>)
 8002da0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002da4:	6013      	str	r3, [r2, #0]
 8002da6:	4b58      	ldr	r3, [pc, #352]	@ (8002f08 <HAL_RCC_OscConfig+0x278>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a57      	ldr	r2, [pc, #348]	@ (8002f08 <HAL_RCC_OscConfig+0x278>)
 8002dac:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002db0:	6013      	str	r3, [r2, #0]
 8002db2:	4b55      	ldr	r3, [pc, #340]	@ (8002f08 <HAL_RCC_OscConfig+0x278>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a54      	ldr	r2, [pc, #336]	@ (8002f08 <HAL_RCC_OscConfig+0x278>)
 8002db8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002dbc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d013      	beq.n	8002dee <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dc6:	f7fe fdc5 	bl	8001954 <HAL_GetTick>
 8002dca:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002dcc:	e008      	b.n	8002de0 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002dce:	f7fe fdc1 	bl	8001954 <HAL_GetTick>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dd6:	1ad3      	subs	r3, r2, r3
 8002dd8:	2b64      	cmp	r3, #100	@ 0x64
 8002dda:	d901      	bls.n	8002de0 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8002ddc:	2303      	movs	r3, #3
 8002dde:	e380      	b.n	80034e2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002de0:	4b49      	ldr	r3, [pc, #292]	@ (8002f08 <HAL_RCC_OscConfig+0x278>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d0f0      	beq.n	8002dce <HAL_RCC_OscConfig+0x13e>
 8002dec:	e014      	b.n	8002e18 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dee:	f7fe fdb1 	bl	8001954 <HAL_GetTick>
 8002df2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002df4:	e008      	b.n	8002e08 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002df6:	f7fe fdad 	bl	8001954 <HAL_GetTick>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dfe:	1ad3      	subs	r3, r2, r3
 8002e00:	2b64      	cmp	r3, #100	@ 0x64
 8002e02:	d901      	bls.n	8002e08 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8002e04:	2303      	movs	r3, #3
 8002e06:	e36c      	b.n	80034e2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002e08:	4b3f      	ldr	r3, [pc, #252]	@ (8002f08 <HAL_RCC_OscConfig+0x278>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d1f0      	bne.n	8002df6 <HAL_RCC_OscConfig+0x166>
 8002e14:	e000      	b.n	8002e18 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e16:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 0302 	and.w	r3, r3, #2
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	f000 808c 	beq.w	8002f3e <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e26:	4b38      	ldr	r3, [pc, #224]	@ (8002f08 <HAL_RCC_OscConfig+0x278>)
 8002e28:	691b      	ldr	r3, [r3, #16]
 8002e2a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002e2e:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002e30:	4b35      	ldr	r3, [pc, #212]	@ (8002f08 <HAL_RCC_OscConfig+0x278>)
 8002e32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e34:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002e36:	6a3b      	ldr	r3, [r7, #32]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d007      	beq.n	8002e4c <HAL_RCC_OscConfig+0x1bc>
 8002e3c:	6a3b      	ldr	r3, [r7, #32]
 8002e3e:	2b18      	cmp	r3, #24
 8002e40:	d137      	bne.n	8002eb2 <HAL_RCC_OscConfig+0x222>
 8002e42:	69fb      	ldr	r3, [r7, #28]
 8002e44:	f003 0303 	and.w	r3, r3, #3
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d132      	bne.n	8002eb2 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e4c:	4b2e      	ldr	r3, [pc, #184]	@ (8002f08 <HAL_RCC_OscConfig+0x278>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 0304 	and.w	r3, r3, #4
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d005      	beq.n	8002e64 <HAL_RCC_OscConfig+0x1d4>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	68db      	ldr	r3, [r3, #12]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d101      	bne.n	8002e64 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	e33e      	b.n	80034e2 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002e64:	4b28      	ldr	r3, [pc, #160]	@ (8002f08 <HAL_RCC_OscConfig+0x278>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f023 0219 	bic.w	r2, r3, #25
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	68db      	ldr	r3, [r3, #12]
 8002e70:	4925      	ldr	r1, [pc, #148]	@ (8002f08 <HAL_RCC_OscConfig+0x278>)
 8002e72:	4313      	orrs	r3, r2
 8002e74:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e76:	f7fe fd6d 	bl	8001954 <HAL_GetTick>
 8002e7a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002e7c:	e008      	b.n	8002e90 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e7e:	f7fe fd69 	bl	8001954 <HAL_GetTick>
 8002e82:	4602      	mov	r2, r0
 8002e84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e86:	1ad3      	subs	r3, r2, r3
 8002e88:	2b02      	cmp	r3, #2
 8002e8a:	d901      	bls.n	8002e90 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8002e8c:	2303      	movs	r3, #3
 8002e8e:	e328      	b.n	80034e2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002e90:	4b1d      	ldr	r3, [pc, #116]	@ (8002f08 <HAL_RCC_OscConfig+0x278>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f003 0304 	and.w	r3, r3, #4
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d0f0      	beq.n	8002e7e <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e9c:	4b1a      	ldr	r3, [pc, #104]	@ (8002f08 <HAL_RCC_OscConfig+0x278>)
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	691b      	ldr	r3, [r3, #16]
 8002ea8:	061b      	lsls	r3, r3, #24
 8002eaa:	4917      	ldr	r1, [pc, #92]	@ (8002f08 <HAL_RCC_OscConfig+0x278>)
 8002eac:	4313      	orrs	r3, r2
 8002eae:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002eb0:	e045      	b.n	8002f3e <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	68db      	ldr	r3, [r3, #12]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d028      	beq.n	8002f0c <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002eba:	4b13      	ldr	r3, [pc, #76]	@ (8002f08 <HAL_RCC_OscConfig+0x278>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f023 0219 	bic.w	r2, r3, #25
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	68db      	ldr	r3, [r3, #12]
 8002ec6:	4910      	ldr	r1, [pc, #64]	@ (8002f08 <HAL_RCC_OscConfig+0x278>)
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ecc:	f7fe fd42 	bl	8001954 <HAL_GetTick>
 8002ed0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ed2:	e008      	b.n	8002ee6 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ed4:	f7fe fd3e 	bl	8001954 <HAL_GetTick>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002edc:	1ad3      	subs	r3, r2, r3
 8002ede:	2b02      	cmp	r3, #2
 8002ee0:	d901      	bls.n	8002ee6 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8002ee2:	2303      	movs	r3, #3
 8002ee4:	e2fd      	b.n	80034e2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ee6:	4b08      	ldr	r3, [pc, #32]	@ (8002f08 <HAL_RCC_OscConfig+0x278>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 0304 	and.w	r3, r3, #4
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d0f0      	beq.n	8002ed4 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ef2:	4b05      	ldr	r3, [pc, #20]	@ (8002f08 <HAL_RCC_OscConfig+0x278>)
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	691b      	ldr	r3, [r3, #16]
 8002efe:	061b      	lsls	r3, r3, #24
 8002f00:	4901      	ldr	r1, [pc, #4]	@ (8002f08 <HAL_RCC_OscConfig+0x278>)
 8002f02:	4313      	orrs	r3, r2
 8002f04:	604b      	str	r3, [r1, #4]
 8002f06:	e01a      	b.n	8002f3e <HAL_RCC_OscConfig+0x2ae>
 8002f08:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f0c:	4b97      	ldr	r3, [pc, #604]	@ (800316c <HAL_RCC_OscConfig+0x4dc>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a96      	ldr	r2, [pc, #600]	@ (800316c <HAL_RCC_OscConfig+0x4dc>)
 8002f12:	f023 0301 	bic.w	r3, r3, #1
 8002f16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f18:	f7fe fd1c 	bl	8001954 <HAL_GetTick>
 8002f1c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002f1e:	e008      	b.n	8002f32 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f20:	f7fe fd18 	bl	8001954 <HAL_GetTick>
 8002f24:	4602      	mov	r2, r0
 8002f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f28:	1ad3      	subs	r3, r2, r3
 8002f2a:	2b02      	cmp	r3, #2
 8002f2c:	d901      	bls.n	8002f32 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8002f2e:	2303      	movs	r3, #3
 8002f30:	e2d7      	b.n	80034e2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002f32:	4b8e      	ldr	r3, [pc, #568]	@ (800316c <HAL_RCC_OscConfig+0x4dc>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 0304 	and.w	r3, r3, #4
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d1f0      	bne.n	8002f20 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 0310 	and.w	r3, r3, #16
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d06a      	beq.n	8003020 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f4a:	4b88      	ldr	r3, [pc, #544]	@ (800316c <HAL_RCC_OscConfig+0x4dc>)
 8002f4c:	691b      	ldr	r3, [r3, #16]
 8002f4e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002f52:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002f54:	4b85      	ldr	r3, [pc, #532]	@ (800316c <HAL_RCC_OscConfig+0x4dc>)
 8002f56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f58:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002f5a:	69bb      	ldr	r3, [r7, #24]
 8002f5c:	2b08      	cmp	r3, #8
 8002f5e:	d007      	beq.n	8002f70 <HAL_RCC_OscConfig+0x2e0>
 8002f60:	69bb      	ldr	r3, [r7, #24]
 8002f62:	2b18      	cmp	r3, #24
 8002f64:	d11b      	bne.n	8002f9e <HAL_RCC_OscConfig+0x30e>
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	f003 0303 	and.w	r3, r3, #3
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d116      	bne.n	8002f9e <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002f70:	4b7e      	ldr	r3, [pc, #504]	@ (800316c <HAL_RCC_OscConfig+0x4dc>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d005      	beq.n	8002f88 <HAL_RCC_OscConfig+0x2f8>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	69db      	ldr	r3, [r3, #28]
 8002f80:	2b80      	cmp	r3, #128	@ 0x80
 8002f82:	d001      	beq.n	8002f88 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	e2ac      	b.n	80034e2 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002f88:	4b78      	ldr	r3, [pc, #480]	@ (800316c <HAL_RCC_OscConfig+0x4dc>)
 8002f8a:	68db      	ldr	r3, [r3, #12]
 8002f8c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6a1b      	ldr	r3, [r3, #32]
 8002f94:	061b      	lsls	r3, r3, #24
 8002f96:	4975      	ldr	r1, [pc, #468]	@ (800316c <HAL_RCC_OscConfig+0x4dc>)
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002f9c:	e040      	b.n	8003020 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	69db      	ldr	r3, [r3, #28]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d023      	beq.n	8002fee <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002fa6:	4b71      	ldr	r3, [pc, #452]	@ (800316c <HAL_RCC_OscConfig+0x4dc>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a70      	ldr	r2, [pc, #448]	@ (800316c <HAL_RCC_OscConfig+0x4dc>)
 8002fac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002fb0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fb2:	f7fe fccf 	bl	8001954 <HAL_GetTick>
 8002fb6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002fb8:	e008      	b.n	8002fcc <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002fba:	f7fe fccb 	bl	8001954 <HAL_GetTick>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fc2:	1ad3      	subs	r3, r2, r3
 8002fc4:	2b02      	cmp	r3, #2
 8002fc6:	d901      	bls.n	8002fcc <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8002fc8:	2303      	movs	r3, #3
 8002fca:	e28a      	b.n	80034e2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002fcc:	4b67      	ldr	r3, [pc, #412]	@ (800316c <HAL_RCC_OscConfig+0x4dc>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d0f0      	beq.n	8002fba <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002fd8:	4b64      	ldr	r3, [pc, #400]	@ (800316c <HAL_RCC_OscConfig+0x4dc>)
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6a1b      	ldr	r3, [r3, #32]
 8002fe4:	061b      	lsls	r3, r3, #24
 8002fe6:	4961      	ldr	r1, [pc, #388]	@ (800316c <HAL_RCC_OscConfig+0x4dc>)
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	60cb      	str	r3, [r1, #12]
 8002fec:	e018      	b.n	8003020 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002fee:	4b5f      	ldr	r3, [pc, #380]	@ (800316c <HAL_RCC_OscConfig+0x4dc>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a5e      	ldr	r2, [pc, #376]	@ (800316c <HAL_RCC_OscConfig+0x4dc>)
 8002ff4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002ff8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ffa:	f7fe fcab 	bl	8001954 <HAL_GetTick>
 8002ffe:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003000:	e008      	b.n	8003014 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003002:	f7fe fca7 	bl	8001954 <HAL_GetTick>
 8003006:	4602      	mov	r2, r0
 8003008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800300a:	1ad3      	subs	r3, r2, r3
 800300c:	2b02      	cmp	r3, #2
 800300e:	d901      	bls.n	8003014 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8003010:	2303      	movs	r3, #3
 8003012:	e266      	b.n	80034e2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003014:	4b55      	ldr	r3, [pc, #340]	@ (800316c <HAL_RCC_OscConfig+0x4dc>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800301c:	2b00      	cmp	r3, #0
 800301e:	d1f0      	bne.n	8003002 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f003 0308 	and.w	r3, r3, #8
 8003028:	2b00      	cmp	r3, #0
 800302a:	d036      	beq.n	800309a <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	695b      	ldr	r3, [r3, #20]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d019      	beq.n	8003068 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003034:	4b4d      	ldr	r3, [pc, #308]	@ (800316c <HAL_RCC_OscConfig+0x4dc>)
 8003036:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003038:	4a4c      	ldr	r2, [pc, #304]	@ (800316c <HAL_RCC_OscConfig+0x4dc>)
 800303a:	f043 0301 	orr.w	r3, r3, #1
 800303e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003040:	f7fe fc88 	bl	8001954 <HAL_GetTick>
 8003044:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003046:	e008      	b.n	800305a <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003048:	f7fe fc84 	bl	8001954 <HAL_GetTick>
 800304c:	4602      	mov	r2, r0
 800304e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003050:	1ad3      	subs	r3, r2, r3
 8003052:	2b02      	cmp	r3, #2
 8003054:	d901      	bls.n	800305a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8003056:	2303      	movs	r3, #3
 8003058:	e243      	b.n	80034e2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800305a:	4b44      	ldr	r3, [pc, #272]	@ (800316c <HAL_RCC_OscConfig+0x4dc>)
 800305c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800305e:	f003 0302 	and.w	r3, r3, #2
 8003062:	2b00      	cmp	r3, #0
 8003064:	d0f0      	beq.n	8003048 <HAL_RCC_OscConfig+0x3b8>
 8003066:	e018      	b.n	800309a <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003068:	4b40      	ldr	r3, [pc, #256]	@ (800316c <HAL_RCC_OscConfig+0x4dc>)
 800306a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800306c:	4a3f      	ldr	r2, [pc, #252]	@ (800316c <HAL_RCC_OscConfig+0x4dc>)
 800306e:	f023 0301 	bic.w	r3, r3, #1
 8003072:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003074:	f7fe fc6e 	bl	8001954 <HAL_GetTick>
 8003078:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800307a:	e008      	b.n	800308e <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800307c:	f7fe fc6a 	bl	8001954 <HAL_GetTick>
 8003080:	4602      	mov	r2, r0
 8003082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	2b02      	cmp	r3, #2
 8003088:	d901      	bls.n	800308e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800308a:	2303      	movs	r3, #3
 800308c:	e229      	b.n	80034e2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800308e:	4b37      	ldr	r3, [pc, #220]	@ (800316c <HAL_RCC_OscConfig+0x4dc>)
 8003090:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003092:	f003 0302 	and.w	r3, r3, #2
 8003096:	2b00      	cmp	r3, #0
 8003098:	d1f0      	bne.n	800307c <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 0320 	and.w	r3, r3, #32
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d036      	beq.n	8003114 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	699b      	ldr	r3, [r3, #24]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d019      	beq.n	80030e2 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80030ae:	4b2f      	ldr	r3, [pc, #188]	@ (800316c <HAL_RCC_OscConfig+0x4dc>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a2e      	ldr	r2, [pc, #184]	@ (800316c <HAL_RCC_OscConfig+0x4dc>)
 80030b4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80030b8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80030ba:	f7fe fc4b 	bl	8001954 <HAL_GetTick>
 80030be:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80030c0:	e008      	b.n	80030d4 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80030c2:	f7fe fc47 	bl	8001954 <HAL_GetTick>
 80030c6:	4602      	mov	r2, r0
 80030c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030ca:	1ad3      	subs	r3, r2, r3
 80030cc:	2b02      	cmp	r3, #2
 80030ce:	d901      	bls.n	80030d4 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80030d0:	2303      	movs	r3, #3
 80030d2:	e206      	b.n	80034e2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80030d4:	4b25      	ldr	r3, [pc, #148]	@ (800316c <HAL_RCC_OscConfig+0x4dc>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d0f0      	beq.n	80030c2 <HAL_RCC_OscConfig+0x432>
 80030e0:	e018      	b.n	8003114 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80030e2:	4b22      	ldr	r3, [pc, #136]	@ (800316c <HAL_RCC_OscConfig+0x4dc>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a21      	ldr	r2, [pc, #132]	@ (800316c <HAL_RCC_OscConfig+0x4dc>)
 80030e8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80030ec:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80030ee:	f7fe fc31 	bl	8001954 <HAL_GetTick>
 80030f2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80030f4:	e008      	b.n	8003108 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80030f6:	f7fe fc2d 	bl	8001954 <HAL_GetTick>
 80030fa:	4602      	mov	r2, r0
 80030fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030fe:	1ad3      	subs	r3, r2, r3
 8003100:	2b02      	cmp	r3, #2
 8003102:	d901      	bls.n	8003108 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8003104:	2303      	movs	r3, #3
 8003106:	e1ec      	b.n	80034e2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003108:	4b18      	ldr	r3, [pc, #96]	@ (800316c <HAL_RCC_OscConfig+0x4dc>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003110:	2b00      	cmp	r3, #0
 8003112:	d1f0      	bne.n	80030f6 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f003 0304 	and.w	r3, r3, #4
 800311c:	2b00      	cmp	r3, #0
 800311e:	f000 80af 	beq.w	8003280 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003122:	4b13      	ldr	r3, [pc, #76]	@ (8003170 <HAL_RCC_OscConfig+0x4e0>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a12      	ldr	r2, [pc, #72]	@ (8003170 <HAL_RCC_OscConfig+0x4e0>)
 8003128:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800312c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800312e:	f7fe fc11 	bl	8001954 <HAL_GetTick>
 8003132:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003134:	e008      	b.n	8003148 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003136:	f7fe fc0d 	bl	8001954 <HAL_GetTick>
 800313a:	4602      	mov	r2, r0
 800313c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800313e:	1ad3      	subs	r3, r2, r3
 8003140:	2b64      	cmp	r3, #100	@ 0x64
 8003142:	d901      	bls.n	8003148 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8003144:	2303      	movs	r3, #3
 8003146:	e1cc      	b.n	80034e2 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003148:	4b09      	ldr	r3, [pc, #36]	@ (8003170 <HAL_RCC_OscConfig+0x4e0>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003150:	2b00      	cmp	r3, #0
 8003152:	d0f0      	beq.n	8003136 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	2b01      	cmp	r3, #1
 800315a:	d10b      	bne.n	8003174 <HAL_RCC_OscConfig+0x4e4>
 800315c:	4b03      	ldr	r3, [pc, #12]	@ (800316c <HAL_RCC_OscConfig+0x4dc>)
 800315e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003160:	4a02      	ldr	r2, [pc, #8]	@ (800316c <HAL_RCC_OscConfig+0x4dc>)
 8003162:	f043 0301 	orr.w	r3, r3, #1
 8003166:	6713      	str	r3, [r2, #112]	@ 0x70
 8003168:	e05b      	b.n	8003222 <HAL_RCC_OscConfig+0x592>
 800316a:	bf00      	nop
 800316c:	58024400 	.word	0x58024400
 8003170:	58024800 	.word	0x58024800
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d112      	bne.n	80031a2 <HAL_RCC_OscConfig+0x512>
 800317c:	4b9d      	ldr	r3, [pc, #628]	@ (80033f4 <HAL_RCC_OscConfig+0x764>)
 800317e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003180:	4a9c      	ldr	r2, [pc, #624]	@ (80033f4 <HAL_RCC_OscConfig+0x764>)
 8003182:	f023 0301 	bic.w	r3, r3, #1
 8003186:	6713      	str	r3, [r2, #112]	@ 0x70
 8003188:	4b9a      	ldr	r3, [pc, #616]	@ (80033f4 <HAL_RCC_OscConfig+0x764>)
 800318a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800318c:	4a99      	ldr	r2, [pc, #612]	@ (80033f4 <HAL_RCC_OscConfig+0x764>)
 800318e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003192:	6713      	str	r3, [r2, #112]	@ 0x70
 8003194:	4b97      	ldr	r3, [pc, #604]	@ (80033f4 <HAL_RCC_OscConfig+0x764>)
 8003196:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003198:	4a96      	ldr	r2, [pc, #600]	@ (80033f4 <HAL_RCC_OscConfig+0x764>)
 800319a:	f023 0304 	bic.w	r3, r3, #4
 800319e:	6713      	str	r3, [r2, #112]	@ 0x70
 80031a0:	e03f      	b.n	8003222 <HAL_RCC_OscConfig+0x592>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	2b05      	cmp	r3, #5
 80031a8:	d112      	bne.n	80031d0 <HAL_RCC_OscConfig+0x540>
 80031aa:	4b92      	ldr	r3, [pc, #584]	@ (80033f4 <HAL_RCC_OscConfig+0x764>)
 80031ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031ae:	4a91      	ldr	r2, [pc, #580]	@ (80033f4 <HAL_RCC_OscConfig+0x764>)
 80031b0:	f043 0304 	orr.w	r3, r3, #4
 80031b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80031b6:	4b8f      	ldr	r3, [pc, #572]	@ (80033f4 <HAL_RCC_OscConfig+0x764>)
 80031b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031ba:	4a8e      	ldr	r2, [pc, #568]	@ (80033f4 <HAL_RCC_OscConfig+0x764>)
 80031bc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80031c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80031c2:	4b8c      	ldr	r3, [pc, #560]	@ (80033f4 <HAL_RCC_OscConfig+0x764>)
 80031c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031c6:	4a8b      	ldr	r2, [pc, #556]	@ (80033f4 <HAL_RCC_OscConfig+0x764>)
 80031c8:	f043 0301 	orr.w	r3, r3, #1
 80031cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80031ce:	e028      	b.n	8003222 <HAL_RCC_OscConfig+0x592>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	2b85      	cmp	r3, #133	@ 0x85
 80031d6:	d112      	bne.n	80031fe <HAL_RCC_OscConfig+0x56e>
 80031d8:	4b86      	ldr	r3, [pc, #536]	@ (80033f4 <HAL_RCC_OscConfig+0x764>)
 80031da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031dc:	4a85      	ldr	r2, [pc, #532]	@ (80033f4 <HAL_RCC_OscConfig+0x764>)
 80031de:	f043 0304 	orr.w	r3, r3, #4
 80031e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80031e4:	4b83      	ldr	r3, [pc, #524]	@ (80033f4 <HAL_RCC_OscConfig+0x764>)
 80031e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031e8:	4a82      	ldr	r2, [pc, #520]	@ (80033f4 <HAL_RCC_OscConfig+0x764>)
 80031ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80031ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80031f0:	4b80      	ldr	r3, [pc, #512]	@ (80033f4 <HAL_RCC_OscConfig+0x764>)
 80031f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031f4:	4a7f      	ldr	r2, [pc, #508]	@ (80033f4 <HAL_RCC_OscConfig+0x764>)
 80031f6:	f043 0301 	orr.w	r3, r3, #1
 80031fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80031fc:	e011      	b.n	8003222 <HAL_RCC_OscConfig+0x592>
 80031fe:	4b7d      	ldr	r3, [pc, #500]	@ (80033f4 <HAL_RCC_OscConfig+0x764>)
 8003200:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003202:	4a7c      	ldr	r2, [pc, #496]	@ (80033f4 <HAL_RCC_OscConfig+0x764>)
 8003204:	f023 0301 	bic.w	r3, r3, #1
 8003208:	6713      	str	r3, [r2, #112]	@ 0x70
 800320a:	4b7a      	ldr	r3, [pc, #488]	@ (80033f4 <HAL_RCC_OscConfig+0x764>)
 800320c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800320e:	4a79      	ldr	r2, [pc, #484]	@ (80033f4 <HAL_RCC_OscConfig+0x764>)
 8003210:	f023 0304 	bic.w	r3, r3, #4
 8003214:	6713      	str	r3, [r2, #112]	@ 0x70
 8003216:	4b77      	ldr	r3, [pc, #476]	@ (80033f4 <HAL_RCC_OscConfig+0x764>)
 8003218:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800321a:	4a76      	ldr	r2, [pc, #472]	@ (80033f4 <HAL_RCC_OscConfig+0x764>)
 800321c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003220:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d015      	beq.n	8003256 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800322a:	f7fe fb93 	bl	8001954 <HAL_GetTick>
 800322e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003230:	e00a      	b.n	8003248 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003232:	f7fe fb8f 	bl	8001954 <HAL_GetTick>
 8003236:	4602      	mov	r2, r0
 8003238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800323a:	1ad3      	subs	r3, r2, r3
 800323c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003240:	4293      	cmp	r3, r2
 8003242:	d901      	bls.n	8003248 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8003244:	2303      	movs	r3, #3
 8003246:	e14c      	b.n	80034e2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003248:	4b6a      	ldr	r3, [pc, #424]	@ (80033f4 <HAL_RCC_OscConfig+0x764>)
 800324a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800324c:	f003 0302 	and.w	r3, r3, #2
 8003250:	2b00      	cmp	r3, #0
 8003252:	d0ee      	beq.n	8003232 <HAL_RCC_OscConfig+0x5a2>
 8003254:	e014      	b.n	8003280 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003256:	f7fe fb7d 	bl	8001954 <HAL_GetTick>
 800325a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800325c:	e00a      	b.n	8003274 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800325e:	f7fe fb79 	bl	8001954 <HAL_GetTick>
 8003262:	4602      	mov	r2, r0
 8003264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003266:	1ad3      	subs	r3, r2, r3
 8003268:	f241 3288 	movw	r2, #5000	@ 0x1388
 800326c:	4293      	cmp	r3, r2
 800326e:	d901      	bls.n	8003274 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8003270:	2303      	movs	r3, #3
 8003272:	e136      	b.n	80034e2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003274:	4b5f      	ldr	r3, [pc, #380]	@ (80033f4 <HAL_RCC_OscConfig+0x764>)
 8003276:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003278:	f003 0302 	and.w	r3, r3, #2
 800327c:	2b00      	cmp	r3, #0
 800327e:	d1ee      	bne.n	800325e <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003284:	2b00      	cmp	r3, #0
 8003286:	f000 812b 	beq.w	80034e0 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800328a:	4b5a      	ldr	r3, [pc, #360]	@ (80033f4 <HAL_RCC_OscConfig+0x764>)
 800328c:	691b      	ldr	r3, [r3, #16]
 800328e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003292:	2b18      	cmp	r3, #24
 8003294:	f000 80bb 	beq.w	800340e <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800329c:	2b02      	cmp	r3, #2
 800329e:	f040 8095 	bne.w	80033cc <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032a2:	4b54      	ldr	r3, [pc, #336]	@ (80033f4 <HAL_RCC_OscConfig+0x764>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a53      	ldr	r2, [pc, #332]	@ (80033f4 <HAL_RCC_OscConfig+0x764>)
 80032a8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80032ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ae:	f7fe fb51 	bl	8001954 <HAL_GetTick>
 80032b2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80032b4:	e008      	b.n	80032c8 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032b6:	f7fe fb4d 	bl	8001954 <HAL_GetTick>
 80032ba:	4602      	mov	r2, r0
 80032bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032be:	1ad3      	subs	r3, r2, r3
 80032c0:	2b02      	cmp	r3, #2
 80032c2:	d901      	bls.n	80032c8 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 80032c4:	2303      	movs	r3, #3
 80032c6:	e10c      	b.n	80034e2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80032c8:	4b4a      	ldr	r3, [pc, #296]	@ (80033f4 <HAL_RCC_OscConfig+0x764>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d1f0      	bne.n	80032b6 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032d4:	4b47      	ldr	r3, [pc, #284]	@ (80033f4 <HAL_RCC_OscConfig+0x764>)
 80032d6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80032d8:	4b47      	ldr	r3, [pc, #284]	@ (80033f8 <HAL_RCC_OscConfig+0x768>)
 80032da:	4013      	ands	r3, r2
 80032dc:	687a      	ldr	r2, [r7, #4]
 80032de:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80032e0:	687a      	ldr	r2, [r7, #4]
 80032e2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80032e4:	0112      	lsls	r2, r2, #4
 80032e6:	430a      	orrs	r2, r1
 80032e8:	4942      	ldr	r1, [pc, #264]	@ (80033f4 <HAL_RCC_OscConfig+0x764>)
 80032ea:	4313      	orrs	r3, r2
 80032ec:	628b      	str	r3, [r1, #40]	@ 0x28
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032f2:	3b01      	subs	r3, #1
 80032f4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032fc:	3b01      	subs	r3, #1
 80032fe:	025b      	lsls	r3, r3, #9
 8003300:	b29b      	uxth	r3, r3
 8003302:	431a      	orrs	r2, r3
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003308:	3b01      	subs	r3, #1
 800330a:	041b      	lsls	r3, r3, #16
 800330c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003310:	431a      	orrs	r2, r3
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003316:	3b01      	subs	r3, #1
 8003318:	061b      	lsls	r3, r3, #24
 800331a:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800331e:	4935      	ldr	r1, [pc, #212]	@ (80033f4 <HAL_RCC_OscConfig+0x764>)
 8003320:	4313      	orrs	r3, r2
 8003322:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003324:	4b33      	ldr	r3, [pc, #204]	@ (80033f4 <HAL_RCC_OscConfig+0x764>)
 8003326:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003328:	4a32      	ldr	r2, [pc, #200]	@ (80033f4 <HAL_RCC_OscConfig+0x764>)
 800332a:	f023 0301 	bic.w	r3, r3, #1
 800332e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003330:	4b30      	ldr	r3, [pc, #192]	@ (80033f4 <HAL_RCC_OscConfig+0x764>)
 8003332:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003334:	4b31      	ldr	r3, [pc, #196]	@ (80033fc <HAL_RCC_OscConfig+0x76c>)
 8003336:	4013      	ands	r3, r2
 8003338:	687a      	ldr	r2, [r7, #4]
 800333a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800333c:	00d2      	lsls	r2, r2, #3
 800333e:	492d      	ldr	r1, [pc, #180]	@ (80033f4 <HAL_RCC_OscConfig+0x764>)
 8003340:	4313      	orrs	r3, r2
 8003342:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003344:	4b2b      	ldr	r3, [pc, #172]	@ (80033f4 <HAL_RCC_OscConfig+0x764>)
 8003346:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003348:	f023 020c 	bic.w	r2, r3, #12
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003350:	4928      	ldr	r1, [pc, #160]	@ (80033f4 <HAL_RCC_OscConfig+0x764>)
 8003352:	4313      	orrs	r3, r2
 8003354:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003356:	4b27      	ldr	r3, [pc, #156]	@ (80033f4 <HAL_RCC_OscConfig+0x764>)
 8003358:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800335a:	f023 0202 	bic.w	r2, r3, #2
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003362:	4924      	ldr	r1, [pc, #144]	@ (80033f4 <HAL_RCC_OscConfig+0x764>)
 8003364:	4313      	orrs	r3, r2
 8003366:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003368:	4b22      	ldr	r3, [pc, #136]	@ (80033f4 <HAL_RCC_OscConfig+0x764>)
 800336a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800336c:	4a21      	ldr	r2, [pc, #132]	@ (80033f4 <HAL_RCC_OscConfig+0x764>)
 800336e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003372:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003374:	4b1f      	ldr	r3, [pc, #124]	@ (80033f4 <HAL_RCC_OscConfig+0x764>)
 8003376:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003378:	4a1e      	ldr	r2, [pc, #120]	@ (80033f4 <HAL_RCC_OscConfig+0x764>)
 800337a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800337e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003380:	4b1c      	ldr	r3, [pc, #112]	@ (80033f4 <HAL_RCC_OscConfig+0x764>)
 8003382:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003384:	4a1b      	ldr	r2, [pc, #108]	@ (80033f4 <HAL_RCC_OscConfig+0x764>)
 8003386:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800338a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800338c:	4b19      	ldr	r3, [pc, #100]	@ (80033f4 <HAL_RCC_OscConfig+0x764>)
 800338e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003390:	4a18      	ldr	r2, [pc, #96]	@ (80033f4 <HAL_RCC_OscConfig+0x764>)
 8003392:	f043 0301 	orr.w	r3, r3, #1
 8003396:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003398:	4b16      	ldr	r3, [pc, #88]	@ (80033f4 <HAL_RCC_OscConfig+0x764>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a15      	ldr	r2, [pc, #84]	@ (80033f4 <HAL_RCC_OscConfig+0x764>)
 800339e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80033a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033a4:	f7fe fad6 	bl	8001954 <HAL_GetTick>
 80033a8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80033aa:	e008      	b.n	80033be <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033ac:	f7fe fad2 	bl	8001954 <HAL_GetTick>
 80033b0:	4602      	mov	r2, r0
 80033b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033b4:	1ad3      	subs	r3, r2, r3
 80033b6:	2b02      	cmp	r3, #2
 80033b8:	d901      	bls.n	80033be <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 80033ba:	2303      	movs	r3, #3
 80033bc:	e091      	b.n	80034e2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80033be:	4b0d      	ldr	r3, [pc, #52]	@ (80033f4 <HAL_RCC_OscConfig+0x764>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d0f0      	beq.n	80033ac <HAL_RCC_OscConfig+0x71c>
 80033ca:	e089      	b.n	80034e0 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033cc:	4b09      	ldr	r3, [pc, #36]	@ (80033f4 <HAL_RCC_OscConfig+0x764>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a08      	ldr	r2, [pc, #32]	@ (80033f4 <HAL_RCC_OscConfig+0x764>)
 80033d2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80033d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033d8:	f7fe fabc 	bl	8001954 <HAL_GetTick>
 80033dc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80033de:	e00f      	b.n	8003400 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033e0:	f7fe fab8 	bl	8001954 <HAL_GetTick>
 80033e4:	4602      	mov	r2, r0
 80033e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033e8:	1ad3      	subs	r3, r2, r3
 80033ea:	2b02      	cmp	r3, #2
 80033ec:	d908      	bls.n	8003400 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 80033ee:	2303      	movs	r3, #3
 80033f0:	e077      	b.n	80034e2 <HAL_RCC_OscConfig+0x852>
 80033f2:	bf00      	nop
 80033f4:	58024400 	.word	0x58024400
 80033f8:	fffffc0c 	.word	0xfffffc0c
 80033fc:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003400:	4b3a      	ldr	r3, [pc, #232]	@ (80034ec <HAL_RCC_OscConfig+0x85c>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003408:	2b00      	cmp	r3, #0
 800340a:	d1e9      	bne.n	80033e0 <HAL_RCC_OscConfig+0x750>
 800340c:	e068      	b.n	80034e0 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800340e:	4b37      	ldr	r3, [pc, #220]	@ (80034ec <HAL_RCC_OscConfig+0x85c>)
 8003410:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003412:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003414:	4b35      	ldr	r3, [pc, #212]	@ (80034ec <HAL_RCC_OscConfig+0x85c>)
 8003416:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003418:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800341e:	2b01      	cmp	r3, #1
 8003420:	d031      	beq.n	8003486 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	f003 0203 	and.w	r2, r3, #3
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800342c:	429a      	cmp	r2, r3
 800342e:	d12a      	bne.n	8003486 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	091b      	lsrs	r3, r3, #4
 8003434:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800343c:	429a      	cmp	r2, r3
 800343e:	d122      	bne.n	8003486 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800344a:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800344c:	429a      	cmp	r2, r3
 800344e:	d11a      	bne.n	8003486 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	0a5b      	lsrs	r3, r3, #9
 8003454:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800345c:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800345e:	429a      	cmp	r2, r3
 8003460:	d111      	bne.n	8003486 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	0c1b      	lsrs	r3, r3, #16
 8003466:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800346e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003470:	429a      	cmp	r2, r3
 8003472:	d108      	bne.n	8003486 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	0e1b      	lsrs	r3, r3, #24
 8003478:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003480:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003482:	429a      	cmp	r2, r3
 8003484:	d001      	beq.n	800348a <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	e02b      	b.n	80034e2 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800348a:	4b18      	ldr	r3, [pc, #96]	@ (80034ec <HAL_RCC_OscConfig+0x85c>)
 800348c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800348e:	08db      	lsrs	r3, r3, #3
 8003490:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003494:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800349a:	693a      	ldr	r2, [r7, #16]
 800349c:	429a      	cmp	r2, r3
 800349e:	d01f      	beq.n	80034e0 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80034a0:	4b12      	ldr	r3, [pc, #72]	@ (80034ec <HAL_RCC_OscConfig+0x85c>)
 80034a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034a4:	4a11      	ldr	r2, [pc, #68]	@ (80034ec <HAL_RCC_OscConfig+0x85c>)
 80034a6:	f023 0301 	bic.w	r3, r3, #1
 80034aa:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80034ac:	f7fe fa52 	bl	8001954 <HAL_GetTick>
 80034b0:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80034b2:	bf00      	nop
 80034b4:	f7fe fa4e 	bl	8001954 <HAL_GetTick>
 80034b8:	4602      	mov	r2, r0
 80034ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034bc:	4293      	cmp	r3, r2
 80034be:	d0f9      	beq.n	80034b4 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80034c0:	4b0a      	ldr	r3, [pc, #40]	@ (80034ec <HAL_RCC_OscConfig+0x85c>)
 80034c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80034c4:	4b0a      	ldr	r3, [pc, #40]	@ (80034f0 <HAL_RCC_OscConfig+0x860>)
 80034c6:	4013      	ands	r3, r2
 80034c8:	687a      	ldr	r2, [r7, #4]
 80034ca:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80034cc:	00d2      	lsls	r2, r2, #3
 80034ce:	4907      	ldr	r1, [pc, #28]	@ (80034ec <HAL_RCC_OscConfig+0x85c>)
 80034d0:	4313      	orrs	r3, r2
 80034d2:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80034d4:	4b05      	ldr	r3, [pc, #20]	@ (80034ec <HAL_RCC_OscConfig+0x85c>)
 80034d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034d8:	4a04      	ldr	r2, [pc, #16]	@ (80034ec <HAL_RCC_OscConfig+0x85c>)
 80034da:	f043 0301 	orr.w	r3, r3, #1
 80034de:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80034e0:	2300      	movs	r3, #0
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	3730      	adds	r7, #48	@ 0x30
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	bf00      	nop
 80034ec:	58024400 	.word	0x58024400
 80034f0:	ffff0007 	.word	0xffff0007

080034f4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b086      	sub	sp, #24
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
 80034fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d101      	bne.n	8003508 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003504:	2301      	movs	r3, #1
 8003506:	e19c      	b.n	8003842 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003508:	4b8a      	ldr	r3, [pc, #552]	@ (8003734 <HAL_RCC_ClockConfig+0x240>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f003 030f 	and.w	r3, r3, #15
 8003510:	683a      	ldr	r2, [r7, #0]
 8003512:	429a      	cmp	r2, r3
 8003514:	d910      	bls.n	8003538 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003516:	4b87      	ldr	r3, [pc, #540]	@ (8003734 <HAL_RCC_ClockConfig+0x240>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f023 020f 	bic.w	r2, r3, #15
 800351e:	4985      	ldr	r1, [pc, #532]	@ (8003734 <HAL_RCC_ClockConfig+0x240>)
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	4313      	orrs	r3, r2
 8003524:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003526:	4b83      	ldr	r3, [pc, #524]	@ (8003734 <HAL_RCC_ClockConfig+0x240>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 030f 	and.w	r3, r3, #15
 800352e:	683a      	ldr	r2, [r7, #0]
 8003530:	429a      	cmp	r2, r3
 8003532:	d001      	beq.n	8003538 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	e184      	b.n	8003842 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 0304 	and.w	r3, r3, #4
 8003540:	2b00      	cmp	r3, #0
 8003542:	d010      	beq.n	8003566 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	691a      	ldr	r2, [r3, #16]
 8003548:	4b7b      	ldr	r3, [pc, #492]	@ (8003738 <HAL_RCC_ClockConfig+0x244>)
 800354a:	699b      	ldr	r3, [r3, #24]
 800354c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003550:	429a      	cmp	r2, r3
 8003552:	d908      	bls.n	8003566 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003554:	4b78      	ldr	r3, [pc, #480]	@ (8003738 <HAL_RCC_ClockConfig+0x244>)
 8003556:	699b      	ldr	r3, [r3, #24]
 8003558:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	691b      	ldr	r3, [r3, #16]
 8003560:	4975      	ldr	r1, [pc, #468]	@ (8003738 <HAL_RCC_ClockConfig+0x244>)
 8003562:	4313      	orrs	r3, r2
 8003564:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f003 0308 	and.w	r3, r3, #8
 800356e:	2b00      	cmp	r3, #0
 8003570:	d010      	beq.n	8003594 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	695a      	ldr	r2, [r3, #20]
 8003576:	4b70      	ldr	r3, [pc, #448]	@ (8003738 <HAL_RCC_ClockConfig+0x244>)
 8003578:	69db      	ldr	r3, [r3, #28]
 800357a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800357e:	429a      	cmp	r2, r3
 8003580:	d908      	bls.n	8003594 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003582:	4b6d      	ldr	r3, [pc, #436]	@ (8003738 <HAL_RCC_ClockConfig+0x244>)
 8003584:	69db      	ldr	r3, [r3, #28]
 8003586:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	695b      	ldr	r3, [r3, #20]
 800358e:	496a      	ldr	r1, [pc, #424]	@ (8003738 <HAL_RCC_ClockConfig+0x244>)
 8003590:	4313      	orrs	r3, r2
 8003592:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f003 0310 	and.w	r3, r3, #16
 800359c:	2b00      	cmp	r3, #0
 800359e:	d010      	beq.n	80035c2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	699a      	ldr	r2, [r3, #24]
 80035a4:	4b64      	ldr	r3, [pc, #400]	@ (8003738 <HAL_RCC_ClockConfig+0x244>)
 80035a6:	69db      	ldr	r3, [r3, #28]
 80035a8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80035ac:	429a      	cmp	r2, r3
 80035ae:	d908      	bls.n	80035c2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80035b0:	4b61      	ldr	r3, [pc, #388]	@ (8003738 <HAL_RCC_ClockConfig+0x244>)
 80035b2:	69db      	ldr	r3, [r3, #28]
 80035b4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	699b      	ldr	r3, [r3, #24]
 80035bc:	495e      	ldr	r1, [pc, #376]	@ (8003738 <HAL_RCC_ClockConfig+0x244>)
 80035be:	4313      	orrs	r3, r2
 80035c0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f003 0320 	and.w	r3, r3, #32
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d010      	beq.n	80035f0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	69da      	ldr	r2, [r3, #28]
 80035d2:	4b59      	ldr	r3, [pc, #356]	@ (8003738 <HAL_RCC_ClockConfig+0x244>)
 80035d4:	6a1b      	ldr	r3, [r3, #32]
 80035d6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80035da:	429a      	cmp	r2, r3
 80035dc:	d908      	bls.n	80035f0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80035de:	4b56      	ldr	r3, [pc, #344]	@ (8003738 <HAL_RCC_ClockConfig+0x244>)
 80035e0:	6a1b      	ldr	r3, [r3, #32]
 80035e2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	69db      	ldr	r3, [r3, #28]
 80035ea:	4953      	ldr	r1, [pc, #332]	@ (8003738 <HAL_RCC_ClockConfig+0x244>)
 80035ec:	4313      	orrs	r3, r2
 80035ee:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f003 0302 	and.w	r3, r3, #2
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d010      	beq.n	800361e <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	68da      	ldr	r2, [r3, #12]
 8003600:	4b4d      	ldr	r3, [pc, #308]	@ (8003738 <HAL_RCC_ClockConfig+0x244>)
 8003602:	699b      	ldr	r3, [r3, #24]
 8003604:	f003 030f 	and.w	r3, r3, #15
 8003608:	429a      	cmp	r2, r3
 800360a:	d908      	bls.n	800361e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800360c:	4b4a      	ldr	r3, [pc, #296]	@ (8003738 <HAL_RCC_ClockConfig+0x244>)
 800360e:	699b      	ldr	r3, [r3, #24]
 8003610:	f023 020f 	bic.w	r2, r3, #15
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	68db      	ldr	r3, [r3, #12]
 8003618:	4947      	ldr	r1, [pc, #284]	@ (8003738 <HAL_RCC_ClockConfig+0x244>)
 800361a:	4313      	orrs	r3, r2
 800361c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 0301 	and.w	r3, r3, #1
 8003626:	2b00      	cmp	r3, #0
 8003628:	d055      	beq.n	80036d6 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800362a:	4b43      	ldr	r3, [pc, #268]	@ (8003738 <HAL_RCC_ClockConfig+0x244>)
 800362c:	699b      	ldr	r3, [r3, #24]
 800362e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	4940      	ldr	r1, [pc, #256]	@ (8003738 <HAL_RCC_ClockConfig+0x244>)
 8003638:	4313      	orrs	r3, r2
 800363a:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	2b02      	cmp	r3, #2
 8003642:	d107      	bne.n	8003654 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003644:	4b3c      	ldr	r3, [pc, #240]	@ (8003738 <HAL_RCC_ClockConfig+0x244>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800364c:	2b00      	cmp	r3, #0
 800364e:	d121      	bne.n	8003694 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	e0f6      	b.n	8003842 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	2b03      	cmp	r3, #3
 800365a:	d107      	bne.n	800366c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800365c:	4b36      	ldr	r3, [pc, #216]	@ (8003738 <HAL_RCC_ClockConfig+0x244>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003664:	2b00      	cmp	r3, #0
 8003666:	d115      	bne.n	8003694 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	e0ea      	b.n	8003842 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	2b01      	cmp	r3, #1
 8003672:	d107      	bne.n	8003684 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003674:	4b30      	ldr	r3, [pc, #192]	@ (8003738 <HAL_RCC_ClockConfig+0x244>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800367c:	2b00      	cmp	r3, #0
 800367e:	d109      	bne.n	8003694 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	e0de      	b.n	8003842 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003684:	4b2c      	ldr	r3, [pc, #176]	@ (8003738 <HAL_RCC_ClockConfig+0x244>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f003 0304 	and.w	r3, r3, #4
 800368c:	2b00      	cmp	r3, #0
 800368e:	d101      	bne.n	8003694 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	e0d6      	b.n	8003842 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003694:	4b28      	ldr	r3, [pc, #160]	@ (8003738 <HAL_RCC_ClockConfig+0x244>)
 8003696:	691b      	ldr	r3, [r3, #16]
 8003698:	f023 0207 	bic.w	r2, r3, #7
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	4925      	ldr	r1, [pc, #148]	@ (8003738 <HAL_RCC_ClockConfig+0x244>)
 80036a2:	4313      	orrs	r3, r2
 80036a4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036a6:	f7fe f955 	bl	8001954 <HAL_GetTick>
 80036aa:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036ac:	e00a      	b.n	80036c4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036ae:	f7fe f951 	bl	8001954 <HAL_GetTick>
 80036b2:	4602      	mov	r2, r0
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	1ad3      	subs	r3, r2, r3
 80036b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036bc:	4293      	cmp	r3, r2
 80036be:	d901      	bls.n	80036c4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80036c0:	2303      	movs	r3, #3
 80036c2:	e0be      	b.n	8003842 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036c4:	4b1c      	ldr	r3, [pc, #112]	@ (8003738 <HAL_RCC_ClockConfig+0x244>)
 80036c6:	691b      	ldr	r3, [r3, #16]
 80036c8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	00db      	lsls	r3, r3, #3
 80036d2:	429a      	cmp	r2, r3
 80036d4:	d1eb      	bne.n	80036ae <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f003 0302 	and.w	r3, r3, #2
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d010      	beq.n	8003704 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	68da      	ldr	r2, [r3, #12]
 80036e6:	4b14      	ldr	r3, [pc, #80]	@ (8003738 <HAL_RCC_ClockConfig+0x244>)
 80036e8:	699b      	ldr	r3, [r3, #24]
 80036ea:	f003 030f 	and.w	r3, r3, #15
 80036ee:	429a      	cmp	r2, r3
 80036f0:	d208      	bcs.n	8003704 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036f2:	4b11      	ldr	r3, [pc, #68]	@ (8003738 <HAL_RCC_ClockConfig+0x244>)
 80036f4:	699b      	ldr	r3, [r3, #24]
 80036f6:	f023 020f 	bic.w	r2, r3, #15
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	68db      	ldr	r3, [r3, #12]
 80036fe:	490e      	ldr	r1, [pc, #56]	@ (8003738 <HAL_RCC_ClockConfig+0x244>)
 8003700:	4313      	orrs	r3, r2
 8003702:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003704:	4b0b      	ldr	r3, [pc, #44]	@ (8003734 <HAL_RCC_ClockConfig+0x240>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f003 030f 	and.w	r3, r3, #15
 800370c:	683a      	ldr	r2, [r7, #0]
 800370e:	429a      	cmp	r2, r3
 8003710:	d214      	bcs.n	800373c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003712:	4b08      	ldr	r3, [pc, #32]	@ (8003734 <HAL_RCC_ClockConfig+0x240>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f023 020f 	bic.w	r2, r3, #15
 800371a:	4906      	ldr	r1, [pc, #24]	@ (8003734 <HAL_RCC_ClockConfig+0x240>)
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	4313      	orrs	r3, r2
 8003720:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003722:	4b04      	ldr	r3, [pc, #16]	@ (8003734 <HAL_RCC_ClockConfig+0x240>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 030f 	and.w	r3, r3, #15
 800372a:	683a      	ldr	r2, [r7, #0]
 800372c:	429a      	cmp	r2, r3
 800372e:	d005      	beq.n	800373c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	e086      	b.n	8003842 <HAL_RCC_ClockConfig+0x34e>
 8003734:	52002000 	.word	0x52002000
 8003738:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f003 0304 	and.w	r3, r3, #4
 8003744:	2b00      	cmp	r3, #0
 8003746:	d010      	beq.n	800376a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	691a      	ldr	r2, [r3, #16]
 800374c:	4b3f      	ldr	r3, [pc, #252]	@ (800384c <HAL_RCC_ClockConfig+0x358>)
 800374e:	699b      	ldr	r3, [r3, #24]
 8003750:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003754:	429a      	cmp	r2, r3
 8003756:	d208      	bcs.n	800376a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003758:	4b3c      	ldr	r3, [pc, #240]	@ (800384c <HAL_RCC_ClockConfig+0x358>)
 800375a:	699b      	ldr	r3, [r3, #24]
 800375c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	691b      	ldr	r3, [r3, #16]
 8003764:	4939      	ldr	r1, [pc, #228]	@ (800384c <HAL_RCC_ClockConfig+0x358>)
 8003766:	4313      	orrs	r3, r2
 8003768:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 0308 	and.w	r3, r3, #8
 8003772:	2b00      	cmp	r3, #0
 8003774:	d010      	beq.n	8003798 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	695a      	ldr	r2, [r3, #20]
 800377a:	4b34      	ldr	r3, [pc, #208]	@ (800384c <HAL_RCC_ClockConfig+0x358>)
 800377c:	69db      	ldr	r3, [r3, #28]
 800377e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003782:	429a      	cmp	r2, r3
 8003784:	d208      	bcs.n	8003798 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003786:	4b31      	ldr	r3, [pc, #196]	@ (800384c <HAL_RCC_ClockConfig+0x358>)
 8003788:	69db      	ldr	r3, [r3, #28]
 800378a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	695b      	ldr	r3, [r3, #20]
 8003792:	492e      	ldr	r1, [pc, #184]	@ (800384c <HAL_RCC_ClockConfig+0x358>)
 8003794:	4313      	orrs	r3, r2
 8003796:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f003 0310 	and.w	r3, r3, #16
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d010      	beq.n	80037c6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	699a      	ldr	r2, [r3, #24]
 80037a8:	4b28      	ldr	r3, [pc, #160]	@ (800384c <HAL_RCC_ClockConfig+0x358>)
 80037aa:	69db      	ldr	r3, [r3, #28]
 80037ac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d208      	bcs.n	80037c6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80037b4:	4b25      	ldr	r3, [pc, #148]	@ (800384c <HAL_RCC_ClockConfig+0x358>)
 80037b6:	69db      	ldr	r3, [r3, #28]
 80037b8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	699b      	ldr	r3, [r3, #24]
 80037c0:	4922      	ldr	r1, [pc, #136]	@ (800384c <HAL_RCC_ClockConfig+0x358>)
 80037c2:	4313      	orrs	r3, r2
 80037c4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 0320 	and.w	r3, r3, #32
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d010      	beq.n	80037f4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	69da      	ldr	r2, [r3, #28]
 80037d6:	4b1d      	ldr	r3, [pc, #116]	@ (800384c <HAL_RCC_ClockConfig+0x358>)
 80037d8:	6a1b      	ldr	r3, [r3, #32]
 80037da:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80037de:	429a      	cmp	r2, r3
 80037e0:	d208      	bcs.n	80037f4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80037e2:	4b1a      	ldr	r3, [pc, #104]	@ (800384c <HAL_RCC_ClockConfig+0x358>)
 80037e4:	6a1b      	ldr	r3, [r3, #32]
 80037e6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	69db      	ldr	r3, [r3, #28]
 80037ee:	4917      	ldr	r1, [pc, #92]	@ (800384c <HAL_RCC_ClockConfig+0x358>)
 80037f0:	4313      	orrs	r3, r2
 80037f2:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80037f4:	f000 f834 	bl	8003860 <HAL_RCC_GetSysClockFreq>
 80037f8:	4602      	mov	r2, r0
 80037fa:	4b14      	ldr	r3, [pc, #80]	@ (800384c <HAL_RCC_ClockConfig+0x358>)
 80037fc:	699b      	ldr	r3, [r3, #24]
 80037fe:	0a1b      	lsrs	r3, r3, #8
 8003800:	f003 030f 	and.w	r3, r3, #15
 8003804:	4912      	ldr	r1, [pc, #72]	@ (8003850 <HAL_RCC_ClockConfig+0x35c>)
 8003806:	5ccb      	ldrb	r3, [r1, r3]
 8003808:	f003 031f 	and.w	r3, r3, #31
 800380c:	fa22 f303 	lsr.w	r3, r2, r3
 8003810:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003812:	4b0e      	ldr	r3, [pc, #56]	@ (800384c <HAL_RCC_ClockConfig+0x358>)
 8003814:	699b      	ldr	r3, [r3, #24]
 8003816:	f003 030f 	and.w	r3, r3, #15
 800381a:	4a0d      	ldr	r2, [pc, #52]	@ (8003850 <HAL_RCC_ClockConfig+0x35c>)
 800381c:	5cd3      	ldrb	r3, [r2, r3]
 800381e:	f003 031f 	and.w	r3, r3, #31
 8003822:	693a      	ldr	r2, [r7, #16]
 8003824:	fa22 f303 	lsr.w	r3, r2, r3
 8003828:	4a0a      	ldr	r2, [pc, #40]	@ (8003854 <HAL_RCC_ClockConfig+0x360>)
 800382a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800382c:	4a0a      	ldr	r2, [pc, #40]	@ (8003858 <HAL_RCC_ClockConfig+0x364>)
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003832:	4b0a      	ldr	r3, [pc, #40]	@ (800385c <HAL_RCC_ClockConfig+0x368>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4618      	mov	r0, r3
 8003838:	f7fd fc92 	bl	8001160 <HAL_InitTick>
 800383c:	4603      	mov	r3, r0
 800383e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003840:	7bfb      	ldrb	r3, [r7, #15]
}
 8003842:	4618      	mov	r0, r3
 8003844:	3718      	adds	r7, #24
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}
 800384a:	bf00      	nop
 800384c:	58024400 	.word	0x58024400
 8003850:	0800f234 	.word	0x0800f234
 8003854:	24000004 	.word	0x24000004
 8003858:	24000000 	.word	0x24000000
 800385c:	24000008 	.word	0x24000008

08003860 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003860:	b480      	push	{r7}
 8003862:	b089      	sub	sp, #36	@ 0x24
 8003864:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003866:	4bb3      	ldr	r3, [pc, #716]	@ (8003b34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003868:	691b      	ldr	r3, [r3, #16]
 800386a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800386e:	2b18      	cmp	r3, #24
 8003870:	f200 8155 	bhi.w	8003b1e <HAL_RCC_GetSysClockFreq+0x2be>
 8003874:	a201      	add	r2, pc, #4	@ (adr r2, 800387c <HAL_RCC_GetSysClockFreq+0x1c>)
 8003876:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800387a:	bf00      	nop
 800387c:	080038e1 	.word	0x080038e1
 8003880:	08003b1f 	.word	0x08003b1f
 8003884:	08003b1f 	.word	0x08003b1f
 8003888:	08003b1f 	.word	0x08003b1f
 800388c:	08003b1f 	.word	0x08003b1f
 8003890:	08003b1f 	.word	0x08003b1f
 8003894:	08003b1f 	.word	0x08003b1f
 8003898:	08003b1f 	.word	0x08003b1f
 800389c:	08003907 	.word	0x08003907
 80038a0:	08003b1f 	.word	0x08003b1f
 80038a4:	08003b1f 	.word	0x08003b1f
 80038a8:	08003b1f 	.word	0x08003b1f
 80038ac:	08003b1f 	.word	0x08003b1f
 80038b0:	08003b1f 	.word	0x08003b1f
 80038b4:	08003b1f 	.word	0x08003b1f
 80038b8:	08003b1f 	.word	0x08003b1f
 80038bc:	0800390d 	.word	0x0800390d
 80038c0:	08003b1f 	.word	0x08003b1f
 80038c4:	08003b1f 	.word	0x08003b1f
 80038c8:	08003b1f 	.word	0x08003b1f
 80038cc:	08003b1f 	.word	0x08003b1f
 80038d0:	08003b1f 	.word	0x08003b1f
 80038d4:	08003b1f 	.word	0x08003b1f
 80038d8:	08003b1f 	.word	0x08003b1f
 80038dc:	08003913 	.word	0x08003913
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80038e0:	4b94      	ldr	r3, [pc, #592]	@ (8003b34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f003 0320 	and.w	r3, r3, #32
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d009      	beq.n	8003900 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80038ec:	4b91      	ldr	r3, [pc, #580]	@ (8003b34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	08db      	lsrs	r3, r3, #3
 80038f2:	f003 0303 	and.w	r3, r3, #3
 80038f6:	4a90      	ldr	r2, [pc, #576]	@ (8003b38 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80038f8:	fa22 f303 	lsr.w	r3, r2, r3
 80038fc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80038fe:	e111      	b.n	8003b24 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003900:	4b8d      	ldr	r3, [pc, #564]	@ (8003b38 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003902:	61bb      	str	r3, [r7, #24]
      break;
 8003904:	e10e      	b.n	8003b24 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003906:	4b8d      	ldr	r3, [pc, #564]	@ (8003b3c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003908:	61bb      	str	r3, [r7, #24]
      break;
 800390a:	e10b      	b.n	8003b24 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800390c:	4b8c      	ldr	r3, [pc, #560]	@ (8003b40 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800390e:	61bb      	str	r3, [r7, #24]
      break;
 8003910:	e108      	b.n	8003b24 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003912:	4b88      	ldr	r3, [pc, #544]	@ (8003b34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003914:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003916:	f003 0303 	and.w	r3, r3, #3
 800391a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800391c:	4b85      	ldr	r3, [pc, #532]	@ (8003b34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800391e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003920:	091b      	lsrs	r3, r3, #4
 8003922:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003926:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003928:	4b82      	ldr	r3, [pc, #520]	@ (8003b34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800392a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800392c:	f003 0301 	and.w	r3, r3, #1
 8003930:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003932:	4b80      	ldr	r3, [pc, #512]	@ (8003b34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003934:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003936:	08db      	lsrs	r3, r3, #3
 8003938:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800393c:	68fa      	ldr	r2, [r7, #12]
 800393e:	fb02 f303 	mul.w	r3, r2, r3
 8003942:	ee07 3a90 	vmov	s15, r3
 8003946:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800394a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	2b00      	cmp	r3, #0
 8003952:	f000 80e1 	beq.w	8003b18 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	2b02      	cmp	r3, #2
 800395a:	f000 8083 	beq.w	8003a64 <HAL_RCC_GetSysClockFreq+0x204>
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	2b02      	cmp	r3, #2
 8003962:	f200 80a1 	bhi.w	8003aa8 <HAL_RCC_GetSysClockFreq+0x248>
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d003      	beq.n	8003974 <HAL_RCC_GetSysClockFreq+0x114>
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	2b01      	cmp	r3, #1
 8003970:	d056      	beq.n	8003a20 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003972:	e099      	b.n	8003aa8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003974:	4b6f      	ldr	r3, [pc, #444]	@ (8003b34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f003 0320 	and.w	r3, r3, #32
 800397c:	2b00      	cmp	r3, #0
 800397e:	d02d      	beq.n	80039dc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003980:	4b6c      	ldr	r3, [pc, #432]	@ (8003b34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	08db      	lsrs	r3, r3, #3
 8003986:	f003 0303 	and.w	r3, r3, #3
 800398a:	4a6b      	ldr	r2, [pc, #428]	@ (8003b38 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800398c:	fa22 f303 	lsr.w	r3, r2, r3
 8003990:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	ee07 3a90 	vmov	s15, r3
 8003998:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	ee07 3a90 	vmov	s15, r3
 80039a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039aa:	4b62      	ldr	r3, [pc, #392]	@ (8003b34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039b2:	ee07 3a90 	vmov	s15, r3
 80039b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80039be:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8003b44 <HAL_RCC_GetSysClockFreq+0x2e4>
 80039c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80039c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80039ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80039d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039d6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80039da:	e087      	b.n	8003aec <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	ee07 3a90 	vmov	s15, r3
 80039e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039e6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003b48 <HAL_RCC_GetSysClockFreq+0x2e8>
 80039ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039ee:	4b51      	ldr	r3, [pc, #324]	@ (8003b34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039f6:	ee07 3a90 	vmov	s15, r3
 80039fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8003a02:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8003b44 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003a06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a0e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003a12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a1a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003a1e:	e065      	b.n	8003aec <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	ee07 3a90 	vmov	s15, r3
 8003a26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a2a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8003b4c <HAL_RCC_GetSysClockFreq+0x2ec>
 8003a2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a32:	4b40      	ldr	r3, [pc, #256]	@ (8003b34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a3a:	ee07 3a90 	vmov	s15, r3
 8003a3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a42:	ed97 6a02 	vldr	s12, [r7, #8]
 8003a46:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8003b44 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003a4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003a56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a5e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003a62:	e043      	b.n	8003aec <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	ee07 3a90 	vmov	s15, r3
 8003a6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a6e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003b50 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003a72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a76:	4b2f      	ldr	r3, [pc, #188]	@ (8003b34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a7e:	ee07 3a90 	vmov	s15, r3
 8003a82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a86:	ed97 6a02 	vldr	s12, [r7, #8]
 8003a8a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8003b44 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003a8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a96:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003a9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003aa2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003aa6:	e021      	b.n	8003aec <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	ee07 3a90 	vmov	s15, r3
 8003aae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ab2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003b4c <HAL_RCC_GetSysClockFreq+0x2ec>
 8003ab6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003aba:	4b1e      	ldr	r3, [pc, #120]	@ (8003b34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003abe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ac2:	ee07 3a90 	vmov	s15, r3
 8003ac6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003aca:	ed97 6a02 	vldr	s12, [r7, #8]
 8003ace:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8003b44 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003ad2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ad6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ada:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003ade:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ae2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ae6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003aea:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003aec:	4b11      	ldr	r3, [pc, #68]	@ (8003b34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003aee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003af0:	0a5b      	lsrs	r3, r3, #9
 8003af2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003af6:	3301      	adds	r3, #1
 8003af8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	ee07 3a90 	vmov	s15, r3
 8003b00:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003b04:	edd7 6a07 	vldr	s13, [r7, #28]
 8003b08:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b10:	ee17 3a90 	vmov	r3, s15
 8003b14:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003b16:	e005      	b.n	8003b24 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	61bb      	str	r3, [r7, #24]
      break;
 8003b1c:	e002      	b.n	8003b24 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003b1e:	4b07      	ldr	r3, [pc, #28]	@ (8003b3c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003b20:	61bb      	str	r3, [r7, #24]
      break;
 8003b22:	bf00      	nop
  }

  return sysclockfreq;
 8003b24:	69bb      	ldr	r3, [r7, #24]
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	3724      	adds	r7, #36	@ 0x24
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr
 8003b32:	bf00      	nop
 8003b34:	58024400 	.word	0x58024400
 8003b38:	03d09000 	.word	0x03d09000
 8003b3c:	003d0900 	.word	0x003d0900
 8003b40:	016e3600 	.word	0x016e3600
 8003b44:	46000000 	.word	0x46000000
 8003b48:	4c742400 	.word	0x4c742400
 8003b4c:	4a742400 	.word	0x4a742400
 8003b50:	4bb71b00 	.word	0x4bb71b00

08003b54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b082      	sub	sp, #8
 8003b58:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8003b5a:	f7ff fe81 	bl	8003860 <HAL_RCC_GetSysClockFreq>
 8003b5e:	4602      	mov	r2, r0
 8003b60:	4b10      	ldr	r3, [pc, #64]	@ (8003ba4 <HAL_RCC_GetHCLKFreq+0x50>)
 8003b62:	699b      	ldr	r3, [r3, #24]
 8003b64:	0a1b      	lsrs	r3, r3, #8
 8003b66:	f003 030f 	and.w	r3, r3, #15
 8003b6a:	490f      	ldr	r1, [pc, #60]	@ (8003ba8 <HAL_RCC_GetHCLKFreq+0x54>)
 8003b6c:	5ccb      	ldrb	r3, [r1, r3]
 8003b6e:	f003 031f 	and.w	r3, r3, #31
 8003b72:	fa22 f303 	lsr.w	r3, r2, r3
 8003b76:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003b78:	4b0a      	ldr	r3, [pc, #40]	@ (8003ba4 <HAL_RCC_GetHCLKFreq+0x50>)
 8003b7a:	699b      	ldr	r3, [r3, #24]
 8003b7c:	f003 030f 	and.w	r3, r3, #15
 8003b80:	4a09      	ldr	r2, [pc, #36]	@ (8003ba8 <HAL_RCC_GetHCLKFreq+0x54>)
 8003b82:	5cd3      	ldrb	r3, [r2, r3]
 8003b84:	f003 031f 	and.w	r3, r3, #31
 8003b88:	687a      	ldr	r2, [r7, #4]
 8003b8a:	fa22 f303 	lsr.w	r3, r2, r3
 8003b8e:	4a07      	ldr	r2, [pc, #28]	@ (8003bac <HAL_RCC_GetHCLKFreq+0x58>)
 8003b90:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003b92:	4a07      	ldr	r2, [pc, #28]	@ (8003bb0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003b98:	4b04      	ldr	r3, [pc, #16]	@ (8003bac <HAL_RCC_GetHCLKFreq+0x58>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	3708      	adds	r7, #8
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd80      	pop	{r7, pc}
 8003ba4:	58024400 	.word	0x58024400
 8003ba8:	0800f234 	.word	0x0800f234
 8003bac:	24000004 	.word	0x24000004
 8003bb0:	24000000 	.word	0x24000000

08003bb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8003bb8:	f7ff ffcc 	bl	8003b54 <HAL_RCC_GetHCLKFreq>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	4b06      	ldr	r3, [pc, #24]	@ (8003bd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003bc0:	69db      	ldr	r3, [r3, #28]
 8003bc2:	091b      	lsrs	r3, r3, #4
 8003bc4:	f003 0307 	and.w	r3, r3, #7
 8003bc8:	4904      	ldr	r1, [pc, #16]	@ (8003bdc <HAL_RCC_GetPCLK1Freq+0x28>)
 8003bca:	5ccb      	ldrb	r3, [r1, r3]
 8003bcc:	f003 031f 	and.w	r3, r3, #31
 8003bd0:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	bd80      	pop	{r7, pc}
 8003bd8:	58024400 	.word	0x58024400
 8003bdc:	0800f234 	.word	0x0800f234

08003be0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8003be4:	f7ff ffb6 	bl	8003b54 <HAL_RCC_GetHCLKFreq>
 8003be8:	4602      	mov	r2, r0
 8003bea:	4b06      	ldr	r3, [pc, #24]	@ (8003c04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003bec:	69db      	ldr	r3, [r3, #28]
 8003bee:	0a1b      	lsrs	r3, r3, #8
 8003bf0:	f003 0307 	and.w	r3, r3, #7
 8003bf4:	4904      	ldr	r1, [pc, #16]	@ (8003c08 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003bf6:	5ccb      	ldrb	r3, [r1, r3]
 8003bf8:	f003 031f 	and.w	r3, r3, #31
 8003bfc:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	bd80      	pop	{r7, pc}
 8003c04:	58024400 	.word	0x58024400
 8003c08:	0800f234 	.word	0x0800f234

08003c0c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b083      	sub	sp, #12
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
 8003c14:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	223f      	movs	r2, #63	@ 0x3f
 8003c1a:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003c1c:	4b1a      	ldr	r3, [pc, #104]	@ (8003c88 <HAL_RCC_GetClockConfig+0x7c>)
 8003c1e:	691b      	ldr	r3, [r3, #16]
 8003c20:	f003 0207 	and.w	r2, r3, #7
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	605a      	str	r2, [r3, #4]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
#else
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE);
 8003c28:	4b17      	ldr	r3, [pc, #92]	@ (8003c88 <HAL_RCC_GetClockConfig+0x7c>)
 8003c2a:	699b      	ldr	r3, [r3, #24]
 8003c2c:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE);
 8003c34:	4b14      	ldr	r3, [pc, #80]	@ (8003c88 <HAL_RCC_GetClockConfig+0x7c>)
 8003c36:	699b      	ldr	r3, [r3, #24]
 8003c38:	f003 020f 	and.w	r2, r3, #15
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE);
 8003c40:	4b11      	ldr	r3, [pc, #68]	@ (8003c88 <HAL_RCC_GetClockConfig+0x7c>)
 8003c42:	699b      	ldr	r3, [r3, #24]
 8003c44:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1);
 8003c4c:	4b0e      	ldr	r3, [pc, #56]	@ (8003c88 <HAL_RCC_GetClockConfig+0x7c>)
 8003c4e:	69db      	ldr	r3, [r3, #28]
 8003c50:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2);
 8003c58:	4b0b      	ldr	r3, [pc, #44]	@ (8003c88 <HAL_RCC_GetClockConfig+0x7c>)
 8003c5a:	69db      	ldr	r3, [r3, #28]
 8003c5c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
 8003c64:	4b08      	ldr	r3, [pc, #32]	@ (8003c88 <HAL_RCC_GetClockConfig+0x7c>)
 8003c66:	6a1b      	ldr	r3, [r3, #32]
 8003c68:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	61da      	str	r2, [r3, #28]
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003c70:	4b06      	ldr	r3, [pc, #24]	@ (8003c8c <HAL_RCC_GetClockConfig+0x80>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f003 020f 	and.w	r2, r3, #15
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	601a      	str	r2, [r3, #0]
}
 8003c7c:	bf00      	nop
 8003c7e:	370c      	adds	r7, #12
 8003c80:	46bd      	mov	sp, r7
 8003c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c86:	4770      	bx	lr
 8003c88:	58024400 	.word	0x58024400
 8003c8c:	52002000 	.word	0x52002000

08003c90 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c94:	b0c8      	sub	sp, #288	@ 0x120
 8003c96:	af00      	add	r7, sp, #0
 8003c98:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003ca8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cb0:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8003cb4:	2500      	movs	r5, #0
 8003cb6:	ea54 0305 	orrs.w	r3, r4, r5
 8003cba:	d049      	beq.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003cbc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003cc0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003cc2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003cc6:	d02f      	beq.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003cc8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003ccc:	d828      	bhi.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003cce:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003cd2:	d01a      	beq.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003cd4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003cd8:	d822      	bhi.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d003      	beq.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003cde:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003ce2:	d007      	beq.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003ce4:	e01c      	b.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ce6:	4ba7      	ldr	r3, [pc, #668]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003ce8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cea:	4aa6      	ldr	r2, [pc, #664]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003cec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003cf0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003cf2:	e01a      	b.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003cf4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003cf8:	3308      	adds	r3, #8
 8003cfa:	2102      	movs	r1, #2
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f001 fc43 	bl	8005588 <RCCEx_PLL2_Config>
 8003d02:	4603      	mov	r3, r0
 8003d04:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003d08:	e00f      	b.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003d0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003d0e:	3328      	adds	r3, #40	@ 0x28
 8003d10:	2102      	movs	r1, #2
 8003d12:	4618      	mov	r0, r3
 8003d14:	f001 fcea 	bl	80056ec <RCCEx_PLL3_Config>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003d1e:	e004      	b.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003d26:	e000      	b.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003d28:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d2a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d10a      	bne.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003d32:	4b94      	ldr	r3, [pc, #592]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003d34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d36:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003d3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003d3e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d40:	4a90      	ldr	r2, [pc, #576]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003d42:	430b      	orrs	r3, r1
 8003d44:	6513      	str	r3, [r2, #80]	@ 0x50
 8003d46:	e003      	b.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d48:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003d4c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003d50:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d58:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8003d5c:	f04f 0900 	mov.w	r9, #0
 8003d60:	ea58 0309 	orrs.w	r3, r8, r9
 8003d64:	d047      	beq.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003d66:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003d6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d6c:	2b04      	cmp	r3, #4
 8003d6e:	d82a      	bhi.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003d70:	a201      	add	r2, pc, #4	@ (adr r2, 8003d78 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003d72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d76:	bf00      	nop
 8003d78:	08003d8d 	.word	0x08003d8d
 8003d7c:	08003d9b 	.word	0x08003d9b
 8003d80:	08003db1 	.word	0x08003db1
 8003d84:	08003dcf 	.word	0x08003dcf
 8003d88:	08003dcf 	.word	0x08003dcf
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d8c:	4b7d      	ldr	r3, [pc, #500]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003d8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d90:	4a7c      	ldr	r2, [pc, #496]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003d92:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d96:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003d98:	e01a      	b.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003d9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003d9e:	3308      	adds	r3, #8
 8003da0:	2100      	movs	r1, #0
 8003da2:	4618      	mov	r0, r3
 8003da4:	f001 fbf0 	bl	8005588 <RCCEx_PLL2_Config>
 8003da8:	4603      	mov	r3, r0
 8003daa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003dae:	e00f      	b.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003db0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003db4:	3328      	adds	r3, #40	@ 0x28
 8003db6:	2100      	movs	r1, #0
 8003db8:	4618      	mov	r0, r3
 8003dba:	f001 fc97 	bl	80056ec <RCCEx_PLL3_Config>
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003dc4:	e004      	b.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003dcc:	e000      	b.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003dce:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003dd0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d10a      	bne.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003dd8:	4b6a      	ldr	r3, [pc, #424]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003dda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ddc:	f023 0107 	bic.w	r1, r3, #7
 8003de0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003de4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003de6:	4a67      	ldr	r2, [pc, #412]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003de8:	430b      	orrs	r3, r1
 8003dea:	6513      	str	r3, [r2, #80]	@ 0x50
 8003dec:	e003      	b.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dee:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003df2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8003df6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dfe:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8003e02:	f04f 0b00 	mov.w	fp, #0
 8003e06:	ea5a 030b 	orrs.w	r3, sl, fp
 8003e0a:	d054      	beq.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8003e0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003e10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e12:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8003e16:	d036      	beq.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8003e18:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8003e1c:	d82f      	bhi.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003e1e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e22:	d032      	beq.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003e24:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e28:	d829      	bhi.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003e2a:	2bc0      	cmp	r3, #192	@ 0xc0
 8003e2c:	d02f      	beq.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8003e2e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003e30:	d825      	bhi.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003e32:	2b80      	cmp	r3, #128	@ 0x80
 8003e34:	d018      	beq.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8003e36:	2b80      	cmp	r3, #128	@ 0x80
 8003e38:	d821      	bhi.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d002      	beq.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8003e3e:	2b40      	cmp	r3, #64	@ 0x40
 8003e40:	d007      	beq.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8003e42:	e01c      	b.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e44:	4b4f      	ldr	r3, [pc, #316]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003e46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e48:	4a4e      	ldr	r2, [pc, #312]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003e4a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e4e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8003e50:	e01e      	b.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003e52:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003e56:	3308      	adds	r3, #8
 8003e58:	2100      	movs	r1, #0
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f001 fb94 	bl	8005588 <RCCEx_PLL2_Config>
 8003e60:	4603      	mov	r3, r0
 8003e62:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8003e66:	e013      	b.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003e68:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003e6c:	3328      	adds	r3, #40	@ 0x28
 8003e6e:	2100      	movs	r1, #0
 8003e70:	4618      	mov	r0, r3
 8003e72:	f001 fc3b 	bl	80056ec <RCCEx_PLL3_Config>
 8003e76:	4603      	mov	r3, r0
 8003e78:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8003e7c:	e008      	b.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003e84:	e004      	b.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8003e86:	bf00      	nop
 8003e88:	e002      	b.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8003e8a:	bf00      	nop
 8003e8c:	e000      	b.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8003e8e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e90:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d10a      	bne.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8003e98:	4b3a      	ldr	r3, [pc, #232]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003e9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e9c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8003ea0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003ea4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ea6:	4a37      	ldr	r2, [pc, #220]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003ea8:	430b      	orrs	r3, r1
 8003eaa:	6513      	str	r3, [r2, #80]	@ 0x50
 8003eac:	e003      	b.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003eae:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003eb2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8003eb6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ebe:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8003ec2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003ecc:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8003ed0:	460b      	mov	r3, r1
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	d05c      	beq.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 8003ed6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003eda:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003edc:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8003ee0:	d03b      	beq.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003ee2:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8003ee6:	d834      	bhi.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003ee8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003eec:	d037      	beq.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8003eee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ef2:	d82e      	bhi.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003ef4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003ef8:	d033      	beq.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003efa:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003efe:	d828      	bhi.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003f00:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f04:	d01a      	beq.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8003f06:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f0a:	d822      	bhi.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d003      	beq.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x288>
 8003f10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f14:	d007      	beq.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8003f16:	e01c      	b.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f18:	4b1a      	ldr	r3, [pc, #104]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003f1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f1c:	4a19      	ldr	r2, [pc, #100]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003f1e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f22:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8003f24:	e01e      	b.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003f26:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003f2a:	3308      	adds	r3, #8
 8003f2c:	2100      	movs	r1, #0
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f001 fb2a 	bl	8005588 <RCCEx_PLL2_Config>
 8003f34:	4603      	mov	r3, r0
 8003f36:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8003f3a:	e013      	b.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003f3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003f40:	3328      	adds	r3, #40	@ 0x28
 8003f42:	2100      	movs	r1, #0
 8003f44:	4618      	mov	r0, r3
 8003f46:	f001 fbd1 	bl	80056ec <RCCEx_PLL3_Config>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8003f50:	e008      	b.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003f58:	e004      	b.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8003f5a:	bf00      	nop
 8003f5c:	e002      	b.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8003f5e:	bf00      	nop
 8003f60:	e000      	b.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8003f62:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f64:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d10d      	bne.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8003f6c:	4b05      	ldr	r3, [pc, #20]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003f6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f70:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8003f74:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003f78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f7a:	4a02      	ldr	r2, [pc, #8]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003f7c:	430b      	orrs	r3, r1
 8003f7e:	6513      	str	r3, [r2, #80]	@ 0x50
 8003f80:	e006      	b.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8003f82:	bf00      	nop
 8003f84:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f88:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003f8c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003f90:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f98:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003f9c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003fa6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8003faa:	460b      	mov	r3, r1
 8003fac:	4313      	orrs	r3, r2
 8003fae:	d03a      	beq.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8003fb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003fb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fb6:	2b30      	cmp	r3, #48	@ 0x30
 8003fb8:	d01f      	beq.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8003fba:	2b30      	cmp	r3, #48	@ 0x30
 8003fbc:	d819      	bhi.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8003fbe:	2b20      	cmp	r3, #32
 8003fc0:	d00c      	beq.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8003fc2:	2b20      	cmp	r3, #32
 8003fc4:	d815      	bhi.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d019      	beq.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8003fca:	2b10      	cmp	r3, #16
 8003fcc:	d111      	bne.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003fce:	4bae      	ldr	r3, [pc, #696]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003fd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fd2:	4aad      	ldr	r2, [pc, #692]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003fd4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003fd8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8003fda:	e011      	b.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003fdc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003fe0:	3308      	adds	r3, #8
 8003fe2:	2102      	movs	r1, #2
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	f001 facf 	bl	8005588 <RCCEx_PLL2_Config>
 8003fea:	4603      	mov	r3, r0
 8003fec:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8003ff0:	e006      	b.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003ff8:	e002      	b.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8003ffa:	bf00      	nop
 8003ffc:	e000      	b.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8003ffe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004000:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004004:	2b00      	cmp	r3, #0
 8004006:	d10a      	bne.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004008:	4b9f      	ldr	r3, [pc, #636]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800400a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800400c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8004010:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004014:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004016:	4a9c      	ldr	r2, [pc, #624]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004018:	430b      	orrs	r3, r1
 800401a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800401c:	e003      	b.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800401e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004022:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004026:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800402a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800402e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8004032:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004036:	2300      	movs	r3, #0
 8004038:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800403c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8004040:	460b      	mov	r3, r1
 8004042:	4313      	orrs	r3, r2
 8004044:	d051      	beq.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8004046:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800404a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800404c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004050:	d035      	beq.n	80040be <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8004052:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004056:	d82e      	bhi.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8004058:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800405c:	d031      	beq.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x432>
 800405e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004062:	d828      	bhi.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8004064:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004068:	d01a      	beq.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800406a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800406e:	d822      	bhi.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8004070:	2b00      	cmp	r3, #0
 8004072:	d003      	beq.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8004074:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004078:	d007      	beq.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 800407a:	e01c      	b.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800407c:	4b82      	ldr	r3, [pc, #520]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800407e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004080:	4a81      	ldr	r2, [pc, #516]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004082:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004086:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004088:	e01c      	b.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800408a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800408e:	3308      	adds	r3, #8
 8004090:	2100      	movs	r1, #0
 8004092:	4618      	mov	r0, r3
 8004094:	f001 fa78 	bl	8005588 <RCCEx_PLL2_Config>
 8004098:	4603      	mov	r3, r0
 800409a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800409e:	e011      	b.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80040a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80040a4:	3328      	adds	r3, #40	@ 0x28
 80040a6:	2100      	movs	r1, #0
 80040a8:	4618      	mov	r0, r3
 80040aa:	f001 fb1f 	bl	80056ec <RCCEx_PLL3_Config>
 80040ae:	4603      	mov	r3, r0
 80040b0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80040b4:	e006      	b.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80040bc:	e002      	b.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 80040be:	bf00      	nop
 80040c0:	e000      	b.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 80040c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040c4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d10a      	bne.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80040cc:	4b6e      	ldr	r3, [pc, #440]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80040ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80040d0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80040d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80040d8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80040da:	4a6b      	ldr	r2, [pc, #428]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80040dc:	430b      	orrs	r3, r1
 80040de:	6513      	str	r3, [r2, #80]	@ 0x50
 80040e0:	e003      	b.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040e2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80040e6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80040ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80040ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040f2:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80040f6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80040fa:	2300      	movs	r3, #0
 80040fc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004100:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8004104:	460b      	mov	r3, r1
 8004106:	4313      	orrs	r3, r2
 8004108:	d053      	beq.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800410a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800410e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004110:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004114:	d033      	beq.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8004116:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800411a:	d82c      	bhi.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800411c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004120:	d02f      	beq.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8004122:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004126:	d826      	bhi.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004128:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800412c:	d02b      	beq.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800412e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004132:	d820      	bhi.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004134:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004138:	d012      	beq.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800413a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800413e:	d81a      	bhi.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004140:	2b00      	cmp	r3, #0
 8004142:	d022      	beq.n	800418a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8004144:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004148:	d115      	bne.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800414a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800414e:	3308      	adds	r3, #8
 8004150:	2101      	movs	r1, #1
 8004152:	4618      	mov	r0, r3
 8004154:	f001 fa18 	bl	8005588 <RCCEx_PLL2_Config>
 8004158:	4603      	mov	r3, r0
 800415a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800415e:	e015      	b.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004160:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004164:	3328      	adds	r3, #40	@ 0x28
 8004166:	2101      	movs	r1, #1
 8004168:	4618      	mov	r0, r3
 800416a:	f001 fabf 	bl	80056ec <RCCEx_PLL3_Config>
 800416e:	4603      	mov	r3, r0
 8004170:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004174:	e00a      	b.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800417c:	e006      	b.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800417e:	bf00      	nop
 8004180:	e004      	b.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8004182:	bf00      	nop
 8004184:	e002      	b.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8004186:	bf00      	nop
 8004188:	e000      	b.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800418a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800418c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004190:	2b00      	cmp	r3, #0
 8004192:	d10a      	bne.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004194:	4b3c      	ldr	r3, [pc, #240]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004196:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004198:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800419c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80041a0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80041a2:	4a39      	ldr	r2, [pc, #228]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80041a4:	430b      	orrs	r3, r1
 80041a6:	6513      	str	r3, [r2, #80]	@ 0x50
 80041a8:	e003      	b.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041aa:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80041ae:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80041b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80041b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041ba:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80041be:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80041c2:	2300      	movs	r3, #0
 80041c4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80041c8:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80041cc:	460b      	mov	r3, r1
 80041ce:	4313      	orrs	r3, r2
 80041d0:	d060      	beq.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80041d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80041d6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80041da:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 80041de:	d039      	beq.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 80041e0:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 80041e4:	d832      	bhi.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80041e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80041ea:	d035      	beq.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80041ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80041f0:	d82c      	bhi.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80041f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041f6:	d031      	beq.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80041f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041fc:	d826      	bhi.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80041fe:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004202:	d02d      	beq.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8004204:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004208:	d820      	bhi.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800420a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800420e:	d012      	beq.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8004210:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004214:	d81a      	bhi.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004216:	2b00      	cmp	r3, #0
 8004218:	d024      	beq.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800421a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800421e:	d115      	bne.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004220:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004224:	3308      	adds	r3, #8
 8004226:	2101      	movs	r1, #1
 8004228:	4618      	mov	r0, r3
 800422a:	f001 f9ad 	bl	8005588 <RCCEx_PLL2_Config>
 800422e:	4603      	mov	r3, r0
 8004230:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004234:	e017      	b.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004236:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800423a:	3328      	adds	r3, #40	@ 0x28
 800423c:	2101      	movs	r1, #1
 800423e:	4618      	mov	r0, r3
 8004240:	f001 fa54 	bl	80056ec <RCCEx_PLL3_Config>
 8004244:	4603      	mov	r3, r0
 8004246:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800424a:	e00c      	b.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800424c:	2301      	movs	r3, #1
 800424e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004252:	e008      	b.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004254:	bf00      	nop
 8004256:	e006      	b.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004258:	bf00      	nop
 800425a:	e004      	b.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800425c:	bf00      	nop
 800425e:	e002      	b.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004260:	bf00      	nop
 8004262:	e000      	b.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004264:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004266:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800426a:	2b00      	cmp	r3, #0
 800426c:	d10e      	bne.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800426e:	4b06      	ldr	r3, [pc, #24]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004270:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004272:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004276:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800427a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800427e:	4a02      	ldr	r2, [pc, #8]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004280:	430b      	orrs	r3, r1
 8004282:	6593      	str	r3, [r2, #88]	@ 0x58
 8004284:	e006      	b.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8004286:	bf00      	nop
 8004288:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800428c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004290:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004294:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800429c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80042a0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80042a4:	2300      	movs	r3, #0
 80042a6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80042aa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80042ae:	460b      	mov	r3, r1
 80042b0:	4313      	orrs	r3, r2
 80042b2:	d037      	beq.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80042b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80042b8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80042ba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80042be:	d00e      	beq.n	80042de <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80042c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80042c4:	d816      	bhi.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d018      	beq.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80042ca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80042ce:	d111      	bne.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042d0:	4bc4      	ldr	r3, [pc, #784]	@ (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80042d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042d4:	4ac3      	ldr	r2, [pc, #780]	@ (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80042d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80042da:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80042dc:	e00f      	b.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80042de:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80042e2:	3308      	adds	r3, #8
 80042e4:	2101      	movs	r1, #1
 80042e6:	4618      	mov	r0, r3
 80042e8:	f001 f94e 	bl	8005588 <RCCEx_PLL2_Config>
 80042ec:	4603      	mov	r3, r0
 80042ee:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80042f2:	e004      	b.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042f4:	2301      	movs	r3, #1
 80042f6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80042fa:	e000      	b.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80042fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042fe:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004302:	2b00      	cmp	r3, #0
 8004304:	d10a      	bne.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004306:	4bb7      	ldr	r3, [pc, #732]	@ (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004308:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800430a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800430e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004312:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004314:	4ab3      	ldr	r2, [pc, #716]	@ (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004316:	430b      	orrs	r3, r1
 8004318:	6513      	str	r3, [r2, #80]	@ 0x50
 800431a:	e003      	b.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800431c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004320:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004324:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800432c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8004330:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004334:	2300      	movs	r3, #0
 8004336:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800433a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800433e:	460b      	mov	r3, r1
 8004340:	4313      	orrs	r3, r2
 8004342:	d039      	beq.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004344:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004348:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800434a:	2b03      	cmp	r3, #3
 800434c:	d81c      	bhi.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800434e:	a201      	add	r2, pc, #4	@ (adr r2, 8004354 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8004350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004354:	08004391 	.word	0x08004391
 8004358:	08004365 	.word	0x08004365
 800435c:	08004373 	.word	0x08004373
 8004360:	08004391 	.word	0x08004391
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004364:	4b9f      	ldr	r3, [pc, #636]	@ (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004366:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004368:	4a9e      	ldr	r2, [pc, #632]	@ (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800436a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800436e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004370:	e00f      	b.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004372:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004376:	3308      	adds	r3, #8
 8004378:	2102      	movs	r1, #2
 800437a:	4618      	mov	r0, r3
 800437c:	f001 f904 	bl	8005588 <RCCEx_PLL2_Config>
 8004380:	4603      	mov	r3, r0
 8004382:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004386:	e004      	b.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004388:	2301      	movs	r3, #1
 800438a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800438e:	e000      	b.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8004390:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004392:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004396:	2b00      	cmp	r3, #0
 8004398:	d10a      	bne.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800439a:	4b92      	ldr	r3, [pc, #584]	@ (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800439c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800439e:	f023 0103 	bic.w	r1, r3, #3
 80043a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80043a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80043a8:	4a8e      	ldr	r2, [pc, #568]	@ (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80043aa:	430b      	orrs	r3, r1
 80043ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80043ae:	e003      	b.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043b0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80043b4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80043b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80043bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043c0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80043c4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80043c8:	2300      	movs	r3, #0
 80043ca:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80043ce:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80043d2:	460b      	mov	r3, r1
 80043d4:	4313      	orrs	r3, r2
 80043d6:	f000 8099 	beq.w	800450c <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80043da:	4b83      	ldr	r3, [pc, #524]	@ (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a82      	ldr	r2, [pc, #520]	@ (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80043e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80043e4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80043e6:	f7fd fab5 	bl	8001954 <HAL_GetTick>
 80043ea:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80043ee:	e00b      	b.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043f0:	f7fd fab0 	bl	8001954 <HAL_GetTick>
 80043f4:	4602      	mov	r2, r0
 80043f6:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80043fa:	1ad3      	subs	r3, r2, r3
 80043fc:	2b64      	cmp	r3, #100	@ 0x64
 80043fe:	d903      	bls.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8004400:	2303      	movs	r3, #3
 8004402:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004406:	e005      	b.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004408:	4b77      	ldr	r3, [pc, #476]	@ (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004410:	2b00      	cmp	r3, #0
 8004412:	d0ed      	beq.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8004414:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004418:	2b00      	cmp	r3, #0
 800441a:	d173      	bne.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800441c:	4b71      	ldr	r3, [pc, #452]	@ (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800441e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004420:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004424:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004428:	4053      	eors	r3, r2
 800442a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800442e:	2b00      	cmp	r3, #0
 8004430:	d015      	beq.n	800445e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004432:	4b6c      	ldr	r3, [pc, #432]	@ (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004434:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004436:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800443a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800443e:	4b69      	ldr	r3, [pc, #420]	@ (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004440:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004442:	4a68      	ldr	r2, [pc, #416]	@ (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004444:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004448:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800444a:	4b66      	ldr	r3, [pc, #408]	@ (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800444c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800444e:	4a65      	ldr	r2, [pc, #404]	@ (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004450:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004454:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004456:	4a63      	ldr	r2, [pc, #396]	@ (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004458:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800445c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800445e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004462:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004466:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800446a:	d118      	bne.n	800449e <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800446c:	f7fd fa72 	bl	8001954 <HAL_GetTick>
 8004470:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004474:	e00d      	b.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004476:	f7fd fa6d 	bl	8001954 <HAL_GetTick>
 800447a:	4602      	mov	r2, r0
 800447c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8004480:	1ad2      	subs	r2, r2, r3
 8004482:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004486:	429a      	cmp	r2, r3
 8004488:	d903      	bls.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800448a:	2303      	movs	r3, #3
 800448c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 8004490:	e005      	b.n	800449e <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004492:	4b54      	ldr	r3, [pc, #336]	@ (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004494:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004496:	f003 0302 	and.w	r3, r3, #2
 800449a:	2b00      	cmp	r3, #0
 800449c:	d0eb      	beq.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800449e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d129      	bne.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80044a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80044aa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80044ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80044b2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80044b6:	d10e      	bne.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x846>
 80044b8:	4b4a      	ldr	r3, [pc, #296]	@ (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80044ba:	691b      	ldr	r3, [r3, #16]
 80044bc:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80044c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80044c4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80044c8:	091a      	lsrs	r2, r3, #4
 80044ca:	4b48      	ldr	r3, [pc, #288]	@ (80045ec <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80044cc:	4013      	ands	r3, r2
 80044ce:	4a45      	ldr	r2, [pc, #276]	@ (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80044d0:	430b      	orrs	r3, r1
 80044d2:	6113      	str	r3, [r2, #16]
 80044d4:	e005      	b.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x852>
 80044d6:	4b43      	ldr	r3, [pc, #268]	@ (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80044d8:	691b      	ldr	r3, [r3, #16]
 80044da:	4a42      	ldr	r2, [pc, #264]	@ (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80044dc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80044e0:	6113      	str	r3, [r2, #16]
 80044e2:	4b40      	ldr	r3, [pc, #256]	@ (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80044e4:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80044e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80044ea:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80044ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044f2:	4a3c      	ldr	r2, [pc, #240]	@ (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80044f4:	430b      	orrs	r3, r1
 80044f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80044f8:	e008      	b.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80044fa:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80044fe:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 8004502:	e003      	b.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004504:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004508:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800450c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004514:	f002 0301 	and.w	r3, r2, #1
 8004518:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800451c:	2300      	movs	r3, #0
 800451e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004522:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004526:	460b      	mov	r3, r1
 8004528:	4313      	orrs	r3, r2
 800452a:	f000 8090 	beq.w	800464e <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800452e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004532:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004536:	2b28      	cmp	r3, #40	@ 0x28
 8004538:	d870      	bhi.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800453a:	a201      	add	r2, pc, #4	@ (adr r2, 8004540 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800453c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004540:	08004625 	.word	0x08004625
 8004544:	0800461d 	.word	0x0800461d
 8004548:	0800461d 	.word	0x0800461d
 800454c:	0800461d 	.word	0x0800461d
 8004550:	0800461d 	.word	0x0800461d
 8004554:	0800461d 	.word	0x0800461d
 8004558:	0800461d 	.word	0x0800461d
 800455c:	0800461d 	.word	0x0800461d
 8004560:	080045f1 	.word	0x080045f1
 8004564:	0800461d 	.word	0x0800461d
 8004568:	0800461d 	.word	0x0800461d
 800456c:	0800461d 	.word	0x0800461d
 8004570:	0800461d 	.word	0x0800461d
 8004574:	0800461d 	.word	0x0800461d
 8004578:	0800461d 	.word	0x0800461d
 800457c:	0800461d 	.word	0x0800461d
 8004580:	08004607 	.word	0x08004607
 8004584:	0800461d 	.word	0x0800461d
 8004588:	0800461d 	.word	0x0800461d
 800458c:	0800461d 	.word	0x0800461d
 8004590:	0800461d 	.word	0x0800461d
 8004594:	0800461d 	.word	0x0800461d
 8004598:	0800461d 	.word	0x0800461d
 800459c:	0800461d 	.word	0x0800461d
 80045a0:	08004625 	.word	0x08004625
 80045a4:	0800461d 	.word	0x0800461d
 80045a8:	0800461d 	.word	0x0800461d
 80045ac:	0800461d 	.word	0x0800461d
 80045b0:	0800461d 	.word	0x0800461d
 80045b4:	0800461d 	.word	0x0800461d
 80045b8:	0800461d 	.word	0x0800461d
 80045bc:	0800461d 	.word	0x0800461d
 80045c0:	08004625 	.word	0x08004625
 80045c4:	0800461d 	.word	0x0800461d
 80045c8:	0800461d 	.word	0x0800461d
 80045cc:	0800461d 	.word	0x0800461d
 80045d0:	0800461d 	.word	0x0800461d
 80045d4:	0800461d 	.word	0x0800461d
 80045d8:	0800461d 	.word	0x0800461d
 80045dc:	0800461d 	.word	0x0800461d
 80045e0:	08004625 	.word	0x08004625
 80045e4:	58024400 	.word	0x58024400
 80045e8:	58024800 	.word	0x58024800
 80045ec:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80045f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80045f4:	3308      	adds	r3, #8
 80045f6:	2101      	movs	r1, #1
 80045f8:	4618      	mov	r0, r3
 80045fa:	f000 ffc5 	bl	8005588 <RCCEx_PLL2_Config>
 80045fe:	4603      	mov	r3, r0
 8004600:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004604:	e00f      	b.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004606:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800460a:	3328      	adds	r3, #40	@ 0x28
 800460c:	2101      	movs	r1, #1
 800460e:	4618      	mov	r0, r3
 8004610:	f001 f86c 	bl	80056ec <RCCEx_PLL3_Config>
 8004614:	4603      	mov	r3, r0
 8004616:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800461a:	e004      	b.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800461c:	2301      	movs	r3, #1
 800461e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004622:	e000      	b.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8004624:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004626:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800462a:	2b00      	cmp	r3, #0
 800462c:	d10b      	bne.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800462e:	4bc0      	ldr	r3, [pc, #768]	@ (8004930 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004630:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004632:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8004636:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800463a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800463e:	4abc      	ldr	r2, [pc, #752]	@ (8004930 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004640:	430b      	orrs	r3, r1
 8004642:	6553      	str	r3, [r2, #84]	@ 0x54
 8004644:	e003      	b.n	800464e <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004646:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800464a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800464e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004656:	f002 0302 	and.w	r3, r2, #2
 800465a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800465e:	2300      	movs	r3, #0
 8004660:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004664:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8004668:	460b      	mov	r3, r1
 800466a:	4313      	orrs	r3, r2
 800466c:	d043      	beq.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800466e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004672:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004676:	2b05      	cmp	r3, #5
 8004678:	d824      	bhi.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 800467a:	a201      	add	r2, pc, #4	@ (adr r2, 8004680 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 800467c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004680:	080046cd 	.word	0x080046cd
 8004684:	08004699 	.word	0x08004699
 8004688:	080046af 	.word	0x080046af
 800468c:	080046cd 	.word	0x080046cd
 8004690:	080046cd 	.word	0x080046cd
 8004694:	080046cd 	.word	0x080046cd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004698:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800469c:	3308      	adds	r3, #8
 800469e:	2101      	movs	r1, #1
 80046a0:	4618      	mov	r0, r3
 80046a2:	f000 ff71 	bl	8005588 <RCCEx_PLL2_Config>
 80046a6:	4603      	mov	r3, r0
 80046a8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80046ac:	e00f      	b.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80046ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80046b2:	3328      	adds	r3, #40	@ 0x28
 80046b4:	2101      	movs	r1, #1
 80046b6:	4618      	mov	r0, r3
 80046b8:	f001 f818 	bl	80056ec <RCCEx_PLL3_Config>
 80046bc:	4603      	mov	r3, r0
 80046be:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80046c2:	e004      	b.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80046c4:	2301      	movs	r3, #1
 80046c6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80046ca:	e000      	b.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 80046cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046ce:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d10b      	bne.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80046d6:	4b96      	ldr	r3, [pc, #600]	@ (8004930 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80046d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046da:	f023 0107 	bic.w	r1, r3, #7
 80046de:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80046e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80046e6:	4a92      	ldr	r2, [pc, #584]	@ (8004930 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80046e8:	430b      	orrs	r3, r1
 80046ea:	6553      	str	r3, [r2, #84]	@ 0x54
 80046ec:	e003      	b.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046ee:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80046f2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80046f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80046fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046fe:	f002 0304 	and.w	r3, r2, #4
 8004702:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004706:	2300      	movs	r3, #0
 8004708:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800470c:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8004710:	460b      	mov	r3, r1
 8004712:	4313      	orrs	r3, r2
 8004714:	d043      	beq.n	800479e <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004716:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800471a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800471e:	2b05      	cmp	r3, #5
 8004720:	d824      	bhi.n	800476c <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8004722:	a201      	add	r2, pc, #4	@ (adr r2, 8004728 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8004724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004728:	08004775 	.word	0x08004775
 800472c:	08004741 	.word	0x08004741
 8004730:	08004757 	.word	0x08004757
 8004734:	08004775 	.word	0x08004775
 8004738:	08004775 	.word	0x08004775
 800473c:	08004775 	.word	0x08004775
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004740:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004744:	3308      	adds	r3, #8
 8004746:	2101      	movs	r1, #1
 8004748:	4618      	mov	r0, r3
 800474a:	f000 ff1d 	bl	8005588 <RCCEx_PLL2_Config>
 800474e:	4603      	mov	r3, r0
 8004750:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004754:	e00f      	b.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004756:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800475a:	3328      	adds	r3, #40	@ 0x28
 800475c:	2101      	movs	r1, #1
 800475e:	4618      	mov	r0, r3
 8004760:	f000 ffc4 	bl	80056ec <RCCEx_PLL3_Config>
 8004764:	4603      	mov	r3, r0
 8004766:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800476a:	e004      	b.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800476c:	2301      	movs	r3, #1
 800476e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004772:	e000      	b.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8004774:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004776:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800477a:	2b00      	cmp	r3, #0
 800477c:	d10b      	bne.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800477e:	4b6c      	ldr	r3, [pc, #432]	@ (8004930 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004780:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004782:	f023 0107 	bic.w	r1, r3, #7
 8004786:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800478a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800478e:	4a68      	ldr	r2, [pc, #416]	@ (8004930 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004790:	430b      	orrs	r3, r1
 8004792:	6593      	str	r3, [r2, #88]	@ 0x58
 8004794:	e003      	b.n	800479e <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004796:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800479a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800479e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80047a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047a6:	f002 0320 	and.w	r3, r2, #32
 80047aa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80047ae:	2300      	movs	r3, #0
 80047b0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80047b4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80047b8:	460b      	mov	r3, r1
 80047ba:	4313      	orrs	r3, r2
 80047bc:	d055      	beq.n	800486a <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80047be:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80047c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80047c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80047ca:	d033      	beq.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80047cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80047d0:	d82c      	bhi.n	800482c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80047d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047d6:	d02f      	beq.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80047d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047dc:	d826      	bhi.n	800482c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80047de:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80047e2:	d02b      	beq.n	800483c <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80047e4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80047e8:	d820      	bhi.n	800482c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80047ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80047ee:	d012      	beq.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 80047f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80047f4:	d81a      	bhi.n	800482c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d022      	beq.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 80047fa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80047fe:	d115      	bne.n	800482c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004800:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004804:	3308      	adds	r3, #8
 8004806:	2100      	movs	r1, #0
 8004808:	4618      	mov	r0, r3
 800480a:	f000 febd 	bl	8005588 <RCCEx_PLL2_Config>
 800480e:	4603      	mov	r3, r0
 8004810:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004814:	e015      	b.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004816:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800481a:	3328      	adds	r3, #40	@ 0x28
 800481c:	2102      	movs	r1, #2
 800481e:	4618      	mov	r0, r3
 8004820:	f000 ff64 	bl	80056ec <RCCEx_PLL3_Config>
 8004824:	4603      	mov	r3, r0
 8004826:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800482a:	e00a      	b.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800482c:	2301      	movs	r3, #1
 800482e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004832:	e006      	b.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8004834:	bf00      	nop
 8004836:	e004      	b.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8004838:	bf00      	nop
 800483a:	e002      	b.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800483c:	bf00      	nop
 800483e:	e000      	b.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8004840:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004842:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004846:	2b00      	cmp	r3, #0
 8004848:	d10b      	bne.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800484a:	4b39      	ldr	r3, [pc, #228]	@ (8004930 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800484c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800484e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004852:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004856:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800485a:	4a35      	ldr	r2, [pc, #212]	@ (8004930 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800485c:	430b      	orrs	r3, r1
 800485e:	6553      	str	r3, [r2, #84]	@ 0x54
 8004860:	e003      	b.n	800486a <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004862:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004866:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800486a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800486e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004872:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8004876:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800487a:	2300      	movs	r3, #0
 800487c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004880:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004884:	460b      	mov	r3, r1
 8004886:	4313      	orrs	r3, r2
 8004888:	d058      	beq.n	800493c <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800488a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800488e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004892:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004896:	d033      	beq.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8004898:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800489c:	d82c      	bhi.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800489e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80048a2:	d02f      	beq.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80048a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80048a8:	d826      	bhi.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80048aa:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80048ae:	d02b      	beq.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80048b0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80048b4:	d820      	bhi.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80048b6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80048ba:	d012      	beq.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 80048bc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80048c0:	d81a      	bhi.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d022      	beq.n	800490c <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 80048c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048ca:	d115      	bne.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80048cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80048d0:	3308      	adds	r3, #8
 80048d2:	2100      	movs	r1, #0
 80048d4:	4618      	mov	r0, r3
 80048d6:	f000 fe57 	bl	8005588 <RCCEx_PLL2_Config>
 80048da:	4603      	mov	r3, r0
 80048dc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80048e0:	e015      	b.n	800490e <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80048e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80048e6:	3328      	adds	r3, #40	@ 0x28
 80048e8:	2102      	movs	r1, #2
 80048ea:	4618      	mov	r0, r3
 80048ec:	f000 fefe 	bl	80056ec <RCCEx_PLL3_Config>
 80048f0:	4603      	mov	r3, r0
 80048f2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80048f6:	e00a      	b.n	800490e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80048f8:	2301      	movs	r3, #1
 80048fa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80048fe:	e006      	b.n	800490e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8004900:	bf00      	nop
 8004902:	e004      	b.n	800490e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8004904:	bf00      	nop
 8004906:	e002      	b.n	800490e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8004908:	bf00      	nop
 800490a:	e000      	b.n	800490e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800490c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800490e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004912:	2b00      	cmp	r3, #0
 8004914:	d10e      	bne.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004916:	4b06      	ldr	r3, [pc, #24]	@ (8004930 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004918:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800491a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800491e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004922:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004926:	4a02      	ldr	r2, [pc, #8]	@ (8004930 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004928:	430b      	orrs	r3, r1
 800492a:	6593      	str	r3, [r2, #88]	@ 0x58
 800492c:	e006      	b.n	800493c <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800492e:	bf00      	nop
 8004930:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004934:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004938:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800493c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004944:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004948:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800494c:	2300      	movs	r3, #0
 800494e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004952:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8004956:	460b      	mov	r3, r1
 8004958:	4313      	orrs	r3, r2
 800495a:	d055      	beq.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800495c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004960:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004964:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004968:	d033      	beq.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800496a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800496e:	d82c      	bhi.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8004970:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004974:	d02f      	beq.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8004976:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800497a:	d826      	bhi.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800497c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004980:	d02b      	beq.n	80049da <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8004982:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004986:	d820      	bhi.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8004988:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800498c:	d012      	beq.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800498e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004992:	d81a      	bhi.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8004994:	2b00      	cmp	r3, #0
 8004996:	d022      	beq.n	80049de <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8004998:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800499c:	d115      	bne.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800499e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80049a2:	3308      	adds	r3, #8
 80049a4:	2100      	movs	r1, #0
 80049a6:	4618      	mov	r0, r3
 80049a8:	f000 fdee 	bl	8005588 <RCCEx_PLL2_Config>
 80049ac:	4603      	mov	r3, r0
 80049ae:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80049b2:	e015      	b.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80049b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80049b8:	3328      	adds	r3, #40	@ 0x28
 80049ba:	2102      	movs	r1, #2
 80049bc:	4618      	mov	r0, r3
 80049be:	f000 fe95 	bl	80056ec <RCCEx_PLL3_Config>
 80049c2:	4603      	mov	r3, r0
 80049c4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80049c8:	e00a      	b.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80049d0:	e006      	b.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80049d2:	bf00      	nop
 80049d4:	e004      	b.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80049d6:	bf00      	nop
 80049d8:	e002      	b.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80049da:	bf00      	nop
 80049dc:	e000      	b.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80049de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049e0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d10b      	bne.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80049e8:	4ba1      	ldr	r3, [pc, #644]	@ (8004c70 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80049ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049ec:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80049f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80049f4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80049f8:	4a9d      	ldr	r2, [pc, #628]	@ (8004c70 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80049fa:	430b      	orrs	r3, r1
 80049fc:	6593      	str	r3, [r2, #88]	@ 0x58
 80049fe:	e003      	b.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a00:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004a04:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004a08:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a10:	f002 0308 	and.w	r3, r2, #8
 8004a14:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004a18:	2300      	movs	r3, #0
 8004a1a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004a1e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004a22:	460b      	mov	r3, r1
 8004a24:	4313      	orrs	r3, r2
 8004a26:	d01e      	beq.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004a28:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004a2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004a30:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a34:	d10c      	bne.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004a36:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004a3a:	3328      	adds	r3, #40	@ 0x28
 8004a3c:	2102      	movs	r1, #2
 8004a3e:	4618      	mov	r0, r3
 8004a40:	f000 fe54 	bl	80056ec <RCCEx_PLL3_Config>
 8004a44:	4603      	mov	r3, r0
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d002      	beq.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004a50:	4b87      	ldr	r3, [pc, #540]	@ (8004c70 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004a52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a54:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004a58:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004a5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004a60:	4a83      	ldr	r2, [pc, #524]	@ (8004c70 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004a62:	430b      	orrs	r3, r1
 8004a64:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004a66:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a6e:	f002 0310 	and.w	r3, r2, #16
 8004a72:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004a76:	2300      	movs	r3, #0
 8004a78:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004a7c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004a80:	460b      	mov	r3, r1
 8004a82:	4313      	orrs	r3, r2
 8004a84:	d01e      	beq.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004a86:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004a8a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004a8e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a92:	d10c      	bne.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004a94:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004a98:	3328      	adds	r3, #40	@ 0x28
 8004a9a:	2102      	movs	r1, #2
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	f000 fe25 	bl	80056ec <RCCEx_PLL3_Config>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d002      	beq.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004aae:	4b70      	ldr	r3, [pc, #448]	@ (8004c70 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004ab0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ab2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004ab6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004aba:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004abe:	4a6c      	ldr	r2, [pc, #432]	@ (8004c70 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004ac0:	430b      	orrs	r3, r1
 8004ac2:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004ac4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004acc:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004ad0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004ada:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004ade:	460b      	mov	r3, r1
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	d03e      	beq.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004ae4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004ae8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004aec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004af0:	d022      	beq.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 8004af2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004af6:	d81b      	bhi.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d003      	beq.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8004afc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b00:	d00b      	beq.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8004b02:	e015      	b.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004b04:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004b08:	3308      	adds	r3, #8
 8004b0a:	2100      	movs	r1, #0
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	f000 fd3b 	bl	8005588 <RCCEx_PLL2_Config>
 8004b12:	4603      	mov	r3, r0
 8004b14:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004b18:	e00f      	b.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004b1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004b1e:	3328      	adds	r3, #40	@ 0x28
 8004b20:	2102      	movs	r1, #2
 8004b22:	4618      	mov	r0, r3
 8004b24:	f000 fde2 	bl	80056ec <RCCEx_PLL3_Config>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004b2e:	e004      	b.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b30:	2301      	movs	r3, #1
 8004b32:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004b36:	e000      	b.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8004b38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b3a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d10b      	bne.n	8004b5a <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004b42:	4b4b      	ldr	r3, [pc, #300]	@ (8004c70 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004b44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b46:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004b4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004b4e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004b52:	4a47      	ldr	r2, [pc, #284]	@ (8004c70 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004b54:	430b      	orrs	r3, r1
 8004b56:	6593      	str	r3, [r2, #88]	@ 0x58
 8004b58:	e003      	b.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b5a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004b5e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004b62:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b6a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8004b6e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004b70:	2300      	movs	r3, #0
 8004b72:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004b74:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004b78:	460b      	mov	r3, r1
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	d03b      	beq.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004b7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004b82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b86:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004b8a:	d01f      	beq.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8004b8c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004b90:	d818      	bhi.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8004b92:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004b96:	d003      	beq.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8004b98:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004b9c:	d007      	beq.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 8004b9e:	e011      	b.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ba0:	4b33      	ldr	r3, [pc, #204]	@ (8004c70 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004ba2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ba4:	4a32      	ldr	r2, [pc, #200]	@ (8004c70 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004ba6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004baa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004bac:	e00f      	b.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004bae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004bb2:	3328      	adds	r3, #40	@ 0x28
 8004bb4:	2101      	movs	r1, #1
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	f000 fd98 	bl	80056ec <RCCEx_PLL3_Config>
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 8004bc2:	e004      	b.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004bca:	e000      	b.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8004bcc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004bce:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d10b      	bne.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004bd6:	4b26      	ldr	r3, [pc, #152]	@ (8004c70 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004bd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bda:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004bde:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004be2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004be6:	4a22      	ldr	r2, [pc, #136]	@ (8004c70 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004be8:	430b      	orrs	r3, r1
 8004bea:	6553      	str	r3, [r2, #84]	@ 0x54
 8004bec:	e003      	b.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bee:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004bf2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004bf6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bfe:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004c02:	673b      	str	r3, [r7, #112]	@ 0x70
 8004c04:	2300      	movs	r3, #0
 8004c06:	677b      	str	r3, [r7, #116]	@ 0x74
 8004c08:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004c0c:	460b      	mov	r3, r1
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	d034      	beq.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004c12:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004c16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d003      	beq.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8004c1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c20:	d007      	beq.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8004c22:	e011      	b.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c24:	4b12      	ldr	r3, [pc, #72]	@ (8004c70 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004c26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c28:	4a11      	ldr	r2, [pc, #68]	@ (8004c70 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004c2a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004c2e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004c30:	e00e      	b.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004c32:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004c36:	3308      	adds	r3, #8
 8004c38:	2102      	movs	r1, #2
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f000 fca4 	bl	8005588 <RCCEx_PLL2_Config>
 8004c40:	4603      	mov	r3, r0
 8004c42:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004c46:	e003      	b.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004c4e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c50:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d10d      	bne.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004c58:	4b05      	ldr	r3, [pc, #20]	@ (8004c70 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004c5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c5c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004c60:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004c64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c66:	4a02      	ldr	r2, [pc, #8]	@ (8004c70 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004c68:	430b      	orrs	r3, r1
 8004c6a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004c6c:	e006      	b.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8004c6e:	bf00      	nop
 8004c70:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c74:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004c78:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004c7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c84:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004c88:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004c8e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004c92:	460b      	mov	r3, r1
 8004c94:	4313      	orrs	r3, r2
 8004c96:	d00c      	beq.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004c98:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004c9c:	3328      	adds	r3, #40	@ 0x28
 8004c9e:	2102      	movs	r1, #2
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	f000 fd23 	bl	80056ec <RCCEx_PLL3_Config>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d002      	beq.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8004cac:	2301      	movs	r3, #1
 8004cae:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004cb2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cba:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8004cbe:	663b      	str	r3, [r7, #96]	@ 0x60
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	667b      	str	r3, [r7, #100]	@ 0x64
 8004cc4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004cc8:	460b      	mov	r3, r1
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	d038      	beq.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004cce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004cd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cd6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004cda:	d018      	beq.n	8004d0e <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8004cdc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004ce0:	d811      	bhi.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8004ce2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ce6:	d014      	beq.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8004ce8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004cec:	d80b      	bhi.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d011      	beq.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8004cf2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004cf6:	d106      	bne.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004cf8:	4bc3      	ldr	r3, [pc, #780]	@ (8005008 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004cfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cfc:	4ac2      	ldr	r2, [pc, #776]	@ (8005008 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004cfe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d02:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004d04:	e008      	b.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d06:	2301      	movs	r3, #1
 8004d08:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004d0c:	e004      	b.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8004d0e:	bf00      	nop
 8004d10:	e002      	b.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8004d12:	bf00      	nop
 8004d14:	e000      	b.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8004d16:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d18:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d10b      	bne.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004d20:	4bb9      	ldr	r3, [pc, #740]	@ (8005008 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004d22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d24:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004d28:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004d2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d30:	4ab5      	ldr	r2, [pc, #724]	@ (8005008 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004d32:	430b      	orrs	r3, r1
 8004d34:	6553      	str	r3, [r2, #84]	@ 0x54
 8004d36:	e003      	b.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d38:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004d3c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004d40:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d48:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004d4c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004d4e:	2300      	movs	r3, #0
 8004d50:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004d52:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004d56:	460b      	mov	r3, r1
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	d009      	beq.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004d5c:	4baa      	ldr	r3, [pc, #680]	@ (8005008 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004d5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d60:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004d64:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004d68:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004d6a:	4aa7      	ldr	r2, [pc, #668]	@ (8005008 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004d6c:	430b      	orrs	r3, r1
 8004d6e:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004d70:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d78:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004d7c:	653b      	str	r3, [r7, #80]	@ 0x50
 8004d7e:	2300      	movs	r3, #0
 8004d80:	657b      	str	r3, [r7, #84]	@ 0x54
 8004d82:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004d86:	460b      	mov	r3, r1
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	d009      	beq.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004d8c:	4b9e      	ldr	r3, [pc, #632]	@ (8005008 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004d8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d90:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8004d94:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004d98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d9a:	4a9b      	ldr	r2, [pc, #620]	@ (8005008 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004d9c:	430b      	orrs	r3, r1
 8004d9e:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8004da0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004da8:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8004dac:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004dae:	2300      	movs	r3, #0
 8004db0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004db2:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004db6:	460b      	mov	r3, r1
 8004db8:	4313      	orrs	r3, r2
 8004dba:	d009      	beq.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8004dbc:	4b92      	ldr	r3, [pc, #584]	@ (8005008 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004dbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004dc0:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 8004dc4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004dc8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004dca:	4a8f      	ldr	r2, [pc, #572]	@ (8005008 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004dcc:	430b      	orrs	r3, r1
 8004dce:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004dd0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dd8:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8004ddc:	643b      	str	r3, [r7, #64]	@ 0x40
 8004dde:	2300      	movs	r3, #0
 8004de0:	647b      	str	r3, [r7, #68]	@ 0x44
 8004de2:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004de6:	460b      	mov	r3, r1
 8004de8:	4313      	orrs	r3, r2
 8004dea:	d00e      	beq.n	8004e0a <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004dec:	4b86      	ldr	r3, [pc, #536]	@ (8005008 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004dee:	691b      	ldr	r3, [r3, #16]
 8004df0:	4a85      	ldr	r2, [pc, #532]	@ (8005008 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004df2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004df6:	6113      	str	r3, [r2, #16]
 8004df8:	4b83      	ldr	r3, [pc, #524]	@ (8005008 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004dfa:	6919      	ldr	r1, [r3, #16]
 8004dfc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004e00:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004e04:	4a80      	ldr	r2, [pc, #512]	@ (8005008 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004e06:	430b      	orrs	r3, r1
 8004e08:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004e0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e12:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004e16:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004e18:	2300      	movs	r3, #0
 8004e1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004e1c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004e20:	460b      	mov	r3, r1
 8004e22:	4313      	orrs	r3, r2
 8004e24:	d009      	beq.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004e26:	4b78      	ldr	r3, [pc, #480]	@ (8005008 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004e28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e2a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004e2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004e32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e34:	4a74      	ldr	r2, [pc, #464]	@ (8005008 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004e36:	430b      	orrs	r3, r1
 8004e38:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004e3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e42:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004e46:	633b      	str	r3, [r7, #48]	@ 0x30
 8004e48:	2300      	movs	r3, #0
 8004e4a:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e4c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004e50:	460b      	mov	r3, r1
 8004e52:	4313      	orrs	r3, r2
 8004e54:	d00a      	beq.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004e56:	4b6c      	ldr	r3, [pc, #432]	@ (8005008 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004e58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e5a:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8004e5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004e62:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004e66:	4a68      	ldr	r2, [pc, #416]	@ (8005008 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004e68:	430b      	orrs	r3, r1
 8004e6a:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004e6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e74:	2100      	movs	r1, #0
 8004e76:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004e78:	f003 0301 	and.w	r3, r3, #1
 8004e7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004e7e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004e82:	460b      	mov	r3, r1
 8004e84:	4313      	orrs	r3, r2
 8004e86:	d011      	beq.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004e88:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004e8c:	3308      	adds	r3, #8
 8004e8e:	2100      	movs	r1, #0
 8004e90:	4618      	mov	r0, r3
 8004e92:	f000 fb79 	bl	8005588 <RCCEx_PLL2_Config>
 8004e96:	4603      	mov	r3, r0
 8004e98:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8004e9c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d003      	beq.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ea4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004ea8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004eac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eb4:	2100      	movs	r1, #0
 8004eb6:	6239      	str	r1, [r7, #32]
 8004eb8:	f003 0302 	and.w	r3, r3, #2
 8004ebc:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ebe:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004ec2:	460b      	mov	r3, r1
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	d011      	beq.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004ec8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004ecc:	3308      	adds	r3, #8
 8004ece:	2101      	movs	r1, #1
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	f000 fb59 	bl	8005588 <RCCEx_PLL2_Config>
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8004edc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d003      	beq.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ee4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004ee8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004eec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ef4:	2100      	movs	r1, #0
 8004ef6:	61b9      	str	r1, [r7, #24]
 8004ef8:	f003 0304 	and.w	r3, r3, #4
 8004efc:	61fb      	str	r3, [r7, #28]
 8004efe:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004f02:	460b      	mov	r3, r1
 8004f04:	4313      	orrs	r3, r2
 8004f06:	d011      	beq.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004f08:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004f0c:	3308      	adds	r3, #8
 8004f0e:	2102      	movs	r1, #2
 8004f10:	4618      	mov	r0, r3
 8004f12:	f000 fb39 	bl	8005588 <RCCEx_PLL2_Config>
 8004f16:	4603      	mov	r3, r0
 8004f18:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8004f1c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d003      	beq.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f24:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004f28:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004f2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f34:	2100      	movs	r1, #0
 8004f36:	6139      	str	r1, [r7, #16]
 8004f38:	f003 0308 	and.w	r3, r3, #8
 8004f3c:	617b      	str	r3, [r7, #20]
 8004f3e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004f42:	460b      	mov	r3, r1
 8004f44:	4313      	orrs	r3, r2
 8004f46:	d011      	beq.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004f48:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004f4c:	3328      	adds	r3, #40	@ 0x28
 8004f4e:	2100      	movs	r1, #0
 8004f50:	4618      	mov	r0, r3
 8004f52:	f000 fbcb 	bl	80056ec <RCCEx_PLL3_Config>
 8004f56:	4603      	mov	r3, r0
 8004f58:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 8004f5c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d003      	beq.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f64:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004f68:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004f6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f74:	2100      	movs	r1, #0
 8004f76:	60b9      	str	r1, [r7, #8]
 8004f78:	f003 0310 	and.w	r3, r3, #16
 8004f7c:	60fb      	str	r3, [r7, #12]
 8004f7e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004f82:	460b      	mov	r3, r1
 8004f84:	4313      	orrs	r3, r2
 8004f86:	d011      	beq.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004f88:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004f8c:	3328      	adds	r3, #40	@ 0x28
 8004f8e:	2101      	movs	r1, #1
 8004f90:	4618      	mov	r0, r3
 8004f92:	f000 fbab 	bl	80056ec <RCCEx_PLL3_Config>
 8004f96:	4603      	mov	r3, r0
 8004f98:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8004f9c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d003      	beq.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fa4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004fa8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004fac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fb4:	2100      	movs	r1, #0
 8004fb6:	6039      	str	r1, [r7, #0]
 8004fb8:	f003 0320 	and.w	r3, r3, #32
 8004fbc:	607b      	str	r3, [r7, #4]
 8004fbe:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004fc2:	460b      	mov	r3, r1
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	d011      	beq.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004fc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004fcc:	3328      	adds	r3, #40	@ 0x28
 8004fce:	2102      	movs	r1, #2
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	f000 fb8b 	bl	80056ec <RCCEx_PLL3_Config>
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8004fdc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d003      	beq.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fe4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004fe8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 8004fec:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d101      	bne.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	e000      	b.n	8004ffa <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8004ff8:	2301      	movs	r3, #1
}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8005000:	46bd      	mov	sp, r7
 8005002:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005006:	bf00      	nop
 8005008:	58024400 	.word	0x58024400

0800500c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8005010:	f7fe fda0 	bl	8003b54 <HAL_RCC_GetHCLKFreq>
 8005014:	4602      	mov	r2, r0
 8005016:	4b06      	ldr	r3, [pc, #24]	@ (8005030 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005018:	6a1b      	ldr	r3, [r3, #32]
 800501a:	091b      	lsrs	r3, r3, #4
 800501c:	f003 0307 	and.w	r3, r3, #7
 8005020:	4904      	ldr	r1, [pc, #16]	@ (8005034 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005022:	5ccb      	ldrb	r3, [r1, r3]
 8005024:	f003 031f 	and.w	r3, r3, #31
 8005028:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800502c:	4618      	mov	r0, r3
 800502e:	bd80      	pop	{r7, pc}
 8005030:	58024400 	.word	0x58024400
 8005034:	0800f234 	.word	0x0800f234

08005038 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005038:	b480      	push	{r7}
 800503a:	b089      	sub	sp, #36	@ 0x24
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005040:	4ba1      	ldr	r3, [pc, #644]	@ (80052c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005042:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005044:	f003 0303 	and.w	r3, r3, #3
 8005048:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800504a:	4b9f      	ldr	r3, [pc, #636]	@ (80052c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800504c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800504e:	0b1b      	lsrs	r3, r3, #12
 8005050:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005054:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005056:	4b9c      	ldr	r3, [pc, #624]	@ (80052c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005058:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800505a:	091b      	lsrs	r3, r3, #4
 800505c:	f003 0301 	and.w	r3, r3, #1
 8005060:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005062:	4b99      	ldr	r3, [pc, #612]	@ (80052c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005064:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005066:	08db      	lsrs	r3, r3, #3
 8005068:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800506c:	693a      	ldr	r2, [r7, #16]
 800506e:	fb02 f303 	mul.w	r3, r2, r3
 8005072:	ee07 3a90 	vmov	s15, r3
 8005076:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800507a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	2b00      	cmp	r3, #0
 8005082:	f000 8111 	beq.w	80052a8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005086:	69bb      	ldr	r3, [r7, #24]
 8005088:	2b02      	cmp	r3, #2
 800508a:	f000 8083 	beq.w	8005194 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800508e:	69bb      	ldr	r3, [r7, #24]
 8005090:	2b02      	cmp	r3, #2
 8005092:	f200 80a1 	bhi.w	80051d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005096:	69bb      	ldr	r3, [r7, #24]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d003      	beq.n	80050a4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800509c:	69bb      	ldr	r3, [r7, #24]
 800509e:	2b01      	cmp	r3, #1
 80050a0:	d056      	beq.n	8005150 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80050a2:	e099      	b.n	80051d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80050a4:	4b88      	ldr	r3, [pc, #544]	@ (80052c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f003 0320 	and.w	r3, r3, #32
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d02d      	beq.n	800510c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80050b0:	4b85      	ldr	r3, [pc, #532]	@ (80052c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	08db      	lsrs	r3, r3, #3
 80050b6:	f003 0303 	and.w	r3, r3, #3
 80050ba:	4a84      	ldr	r2, [pc, #528]	@ (80052cc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80050bc:	fa22 f303 	lsr.w	r3, r2, r3
 80050c0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	ee07 3a90 	vmov	s15, r3
 80050c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	ee07 3a90 	vmov	s15, r3
 80050d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050da:	4b7b      	ldr	r3, [pc, #492]	@ (80052c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80050dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050e2:	ee07 3a90 	vmov	s15, r3
 80050e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80050ee:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80052d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80050f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80050fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005102:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005106:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800510a:	e087      	b.n	800521c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	ee07 3a90 	vmov	s15, r3
 8005112:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005116:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80052d4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800511a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800511e:	4b6a      	ldr	r3, [pc, #424]	@ (80052c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005120:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005122:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005126:	ee07 3a90 	vmov	s15, r3
 800512a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800512e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005132:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80052d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005136:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800513a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800513e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005142:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005146:	ee67 7a27 	vmul.f32	s15, s14, s15
 800514a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800514e:	e065      	b.n	800521c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	ee07 3a90 	vmov	s15, r3
 8005156:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800515a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80052d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800515e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005162:	4b59      	ldr	r3, [pc, #356]	@ (80052c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005164:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005166:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800516a:	ee07 3a90 	vmov	s15, r3
 800516e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005172:	ed97 6a03 	vldr	s12, [r7, #12]
 8005176:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80052d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800517a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800517e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005182:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005186:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800518a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800518e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005192:	e043      	b.n	800521c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	ee07 3a90 	vmov	s15, r3
 800519a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800519e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80052dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80051a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051a6:	4b48      	ldr	r3, [pc, #288]	@ (80052c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80051a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051ae:	ee07 3a90 	vmov	s15, r3
 80051b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80051ba:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80052d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80051be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80051ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80051d6:	e021      	b.n	800521c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	ee07 3a90 	vmov	s15, r3
 80051de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051e2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80052d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80051e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051ea:	4b37      	ldr	r3, [pc, #220]	@ (80052c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80051ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051f2:	ee07 3a90 	vmov	s15, r3
 80051f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80051fe:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80052d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005202:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005206:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800520a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800520e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005212:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005216:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800521a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800521c:	4b2a      	ldr	r3, [pc, #168]	@ (80052c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800521e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005220:	0a5b      	lsrs	r3, r3, #9
 8005222:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005226:	ee07 3a90 	vmov	s15, r3
 800522a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800522e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005232:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005236:	edd7 6a07 	vldr	s13, [r7, #28]
 800523a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800523e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005242:	ee17 2a90 	vmov	r2, s15
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800524a:	4b1f      	ldr	r3, [pc, #124]	@ (80052c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800524c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800524e:	0c1b      	lsrs	r3, r3, #16
 8005250:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005254:	ee07 3a90 	vmov	s15, r3
 8005258:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800525c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005260:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005264:	edd7 6a07 	vldr	s13, [r7, #28]
 8005268:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800526c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005270:	ee17 2a90 	vmov	r2, s15
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005278:	4b13      	ldr	r3, [pc, #76]	@ (80052c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800527a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800527c:	0e1b      	lsrs	r3, r3, #24
 800527e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005282:	ee07 3a90 	vmov	s15, r3
 8005286:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800528a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800528e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005292:	edd7 6a07 	vldr	s13, [r7, #28]
 8005296:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800529a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800529e:	ee17 2a90 	vmov	r2, s15
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80052a6:	e008      	b.n	80052ba <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2200      	movs	r2, #0
 80052ac:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2200      	movs	r2, #0
 80052b2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2200      	movs	r2, #0
 80052b8:	609a      	str	r2, [r3, #8]
}
 80052ba:	bf00      	nop
 80052bc:	3724      	adds	r7, #36	@ 0x24
 80052be:	46bd      	mov	sp, r7
 80052c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c4:	4770      	bx	lr
 80052c6:	bf00      	nop
 80052c8:	58024400 	.word	0x58024400
 80052cc:	03d09000 	.word	0x03d09000
 80052d0:	46000000 	.word	0x46000000
 80052d4:	4c742400 	.word	0x4c742400
 80052d8:	4a742400 	.word	0x4a742400
 80052dc:	4bb71b00 	.word	0x4bb71b00

080052e0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80052e0:	b480      	push	{r7}
 80052e2:	b089      	sub	sp, #36	@ 0x24
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80052e8:	4ba1      	ldr	r3, [pc, #644]	@ (8005570 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052ec:	f003 0303 	and.w	r3, r3, #3
 80052f0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80052f2:	4b9f      	ldr	r3, [pc, #636]	@ (8005570 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052f6:	0d1b      	lsrs	r3, r3, #20
 80052f8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80052fc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80052fe:	4b9c      	ldr	r3, [pc, #624]	@ (8005570 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005300:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005302:	0a1b      	lsrs	r3, r3, #8
 8005304:	f003 0301 	and.w	r3, r3, #1
 8005308:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800530a:	4b99      	ldr	r3, [pc, #612]	@ (8005570 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800530c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800530e:	08db      	lsrs	r3, r3, #3
 8005310:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005314:	693a      	ldr	r2, [r7, #16]
 8005316:	fb02 f303 	mul.w	r3, r2, r3
 800531a:	ee07 3a90 	vmov	s15, r3
 800531e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005322:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	2b00      	cmp	r3, #0
 800532a:	f000 8111 	beq.w	8005550 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800532e:	69bb      	ldr	r3, [r7, #24]
 8005330:	2b02      	cmp	r3, #2
 8005332:	f000 8083 	beq.w	800543c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005336:	69bb      	ldr	r3, [r7, #24]
 8005338:	2b02      	cmp	r3, #2
 800533a:	f200 80a1 	bhi.w	8005480 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800533e:	69bb      	ldr	r3, [r7, #24]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d003      	beq.n	800534c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005344:	69bb      	ldr	r3, [r7, #24]
 8005346:	2b01      	cmp	r3, #1
 8005348:	d056      	beq.n	80053f8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800534a:	e099      	b.n	8005480 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800534c:	4b88      	ldr	r3, [pc, #544]	@ (8005570 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f003 0320 	and.w	r3, r3, #32
 8005354:	2b00      	cmp	r3, #0
 8005356:	d02d      	beq.n	80053b4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005358:	4b85      	ldr	r3, [pc, #532]	@ (8005570 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	08db      	lsrs	r3, r3, #3
 800535e:	f003 0303 	and.w	r3, r3, #3
 8005362:	4a84      	ldr	r2, [pc, #528]	@ (8005574 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005364:	fa22 f303 	lsr.w	r3, r2, r3
 8005368:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	ee07 3a90 	vmov	s15, r3
 8005370:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005374:	697b      	ldr	r3, [r7, #20]
 8005376:	ee07 3a90 	vmov	s15, r3
 800537a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800537e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005382:	4b7b      	ldr	r3, [pc, #492]	@ (8005570 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005384:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005386:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800538a:	ee07 3a90 	vmov	s15, r3
 800538e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005392:	ed97 6a03 	vldr	s12, [r7, #12]
 8005396:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005578 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800539a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800539e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80053a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053ae:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80053b2:	e087      	b.n	80054c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	ee07 3a90 	vmov	s15, r3
 80053ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053be:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800557c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80053c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053c6:	4b6a      	ldr	r3, [pc, #424]	@ (8005570 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80053c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053ce:	ee07 3a90 	vmov	s15, r3
 80053d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80053da:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005578 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80053de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80053ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80053f6:	e065      	b.n	80054c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	ee07 3a90 	vmov	s15, r3
 80053fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005402:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005580 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005406:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800540a:	4b59      	ldr	r3, [pc, #356]	@ (8005570 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800540c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800540e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005412:	ee07 3a90 	vmov	s15, r3
 8005416:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800541a:	ed97 6a03 	vldr	s12, [r7, #12]
 800541e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005578 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005422:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005426:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800542a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800542e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005432:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005436:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800543a:	e043      	b.n	80054c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800543c:	697b      	ldr	r3, [r7, #20]
 800543e:	ee07 3a90 	vmov	s15, r3
 8005442:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005446:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005584 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800544a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800544e:	4b48      	ldr	r3, [pc, #288]	@ (8005570 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005450:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005452:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005456:	ee07 3a90 	vmov	s15, r3
 800545a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800545e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005462:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005578 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005466:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800546a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800546e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005472:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005476:	ee67 7a27 	vmul.f32	s15, s14, s15
 800547a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800547e:	e021      	b.n	80054c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005480:	697b      	ldr	r3, [r7, #20]
 8005482:	ee07 3a90 	vmov	s15, r3
 8005486:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800548a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005580 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800548e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005492:	4b37      	ldr	r3, [pc, #220]	@ (8005570 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005496:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800549a:	ee07 3a90 	vmov	s15, r3
 800549e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80054a6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005578 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80054aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80054b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80054c2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80054c4:	4b2a      	ldr	r3, [pc, #168]	@ (8005570 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80054c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054c8:	0a5b      	lsrs	r3, r3, #9
 80054ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80054ce:	ee07 3a90 	vmov	s15, r3
 80054d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054d6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80054da:	ee37 7a87 	vadd.f32	s14, s15, s14
 80054de:	edd7 6a07 	vldr	s13, [r7, #28]
 80054e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80054e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80054ea:	ee17 2a90 	vmov	r2, s15
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80054f2:	4b1f      	ldr	r3, [pc, #124]	@ (8005570 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80054f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054f6:	0c1b      	lsrs	r3, r3, #16
 80054f8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80054fc:	ee07 3a90 	vmov	s15, r3
 8005500:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005504:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005508:	ee37 7a87 	vadd.f32	s14, s15, s14
 800550c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005510:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005514:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005518:	ee17 2a90 	vmov	r2, s15
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005520:	4b13      	ldr	r3, [pc, #76]	@ (8005570 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005522:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005524:	0e1b      	lsrs	r3, r3, #24
 8005526:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800552a:	ee07 3a90 	vmov	s15, r3
 800552e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005532:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005536:	ee37 7a87 	vadd.f32	s14, s15, s14
 800553a:	edd7 6a07 	vldr	s13, [r7, #28]
 800553e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005542:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005546:	ee17 2a90 	vmov	r2, s15
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800554e:	e008      	b.n	8005562 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2200      	movs	r2, #0
 8005554:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2200      	movs	r2, #0
 800555a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2200      	movs	r2, #0
 8005560:	609a      	str	r2, [r3, #8]
}
 8005562:	bf00      	nop
 8005564:	3724      	adds	r7, #36	@ 0x24
 8005566:	46bd      	mov	sp, r7
 8005568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556c:	4770      	bx	lr
 800556e:	bf00      	nop
 8005570:	58024400 	.word	0x58024400
 8005574:	03d09000 	.word	0x03d09000
 8005578:	46000000 	.word	0x46000000
 800557c:	4c742400 	.word	0x4c742400
 8005580:	4a742400 	.word	0x4a742400
 8005584:	4bb71b00 	.word	0x4bb71b00

08005588 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b084      	sub	sp, #16
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
 8005590:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005592:	2300      	movs	r3, #0
 8005594:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005596:	4b53      	ldr	r3, [pc, #332]	@ (80056e4 <RCCEx_PLL2_Config+0x15c>)
 8005598:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800559a:	f003 0303 	and.w	r3, r3, #3
 800559e:	2b03      	cmp	r3, #3
 80055a0:	d101      	bne.n	80055a6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80055a2:	2301      	movs	r3, #1
 80055a4:	e099      	b.n	80056da <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80055a6:	4b4f      	ldr	r3, [pc, #316]	@ (80056e4 <RCCEx_PLL2_Config+0x15c>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4a4e      	ldr	r2, [pc, #312]	@ (80056e4 <RCCEx_PLL2_Config+0x15c>)
 80055ac:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80055b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055b2:	f7fc f9cf 	bl	8001954 <HAL_GetTick>
 80055b6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80055b8:	e008      	b.n	80055cc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80055ba:	f7fc f9cb 	bl	8001954 <HAL_GetTick>
 80055be:	4602      	mov	r2, r0
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	1ad3      	subs	r3, r2, r3
 80055c4:	2b02      	cmp	r3, #2
 80055c6:	d901      	bls.n	80055cc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80055c8:	2303      	movs	r3, #3
 80055ca:	e086      	b.n	80056da <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80055cc:	4b45      	ldr	r3, [pc, #276]	@ (80056e4 <RCCEx_PLL2_Config+0x15c>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d1f0      	bne.n	80055ba <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80055d8:	4b42      	ldr	r3, [pc, #264]	@ (80056e4 <RCCEx_PLL2_Config+0x15c>)
 80055da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055dc:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	031b      	lsls	r3, r3, #12
 80055e6:	493f      	ldr	r1, [pc, #252]	@ (80056e4 <RCCEx_PLL2_Config+0x15c>)
 80055e8:	4313      	orrs	r3, r2
 80055ea:	628b      	str	r3, [r1, #40]	@ 0x28
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	3b01      	subs	r3, #1
 80055f2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	689b      	ldr	r3, [r3, #8]
 80055fa:	3b01      	subs	r3, #1
 80055fc:	025b      	lsls	r3, r3, #9
 80055fe:	b29b      	uxth	r3, r3
 8005600:	431a      	orrs	r2, r3
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	68db      	ldr	r3, [r3, #12]
 8005606:	3b01      	subs	r3, #1
 8005608:	041b      	lsls	r3, r3, #16
 800560a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800560e:	431a      	orrs	r2, r3
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	691b      	ldr	r3, [r3, #16]
 8005614:	3b01      	subs	r3, #1
 8005616:	061b      	lsls	r3, r3, #24
 8005618:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800561c:	4931      	ldr	r1, [pc, #196]	@ (80056e4 <RCCEx_PLL2_Config+0x15c>)
 800561e:	4313      	orrs	r3, r2
 8005620:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005622:	4b30      	ldr	r3, [pc, #192]	@ (80056e4 <RCCEx_PLL2_Config+0x15c>)
 8005624:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005626:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	695b      	ldr	r3, [r3, #20]
 800562e:	492d      	ldr	r1, [pc, #180]	@ (80056e4 <RCCEx_PLL2_Config+0x15c>)
 8005630:	4313      	orrs	r3, r2
 8005632:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005634:	4b2b      	ldr	r3, [pc, #172]	@ (80056e4 <RCCEx_PLL2_Config+0x15c>)
 8005636:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005638:	f023 0220 	bic.w	r2, r3, #32
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	699b      	ldr	r3, [r3, #24]
 8005640:	4928      	ldr	r1, [pc, #160]	@ (80056e4 <RCCEx_PLL2_Config+0x15c>)
 8005642:	4313      	orrs	r3, r2
 8005644:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005646:	4b27      	ldr	r3, [pc, #156]	@ (80056e4 <RCCEx_PLL2_Config+0x15c>)
 8005648:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800564a:	4a26      	ldr	r2, [pc, #152]	@ (80056e4 <RCCEx_PLL2_Config+0x15c>)
 800564c:	f023 0310 	bic.w	r3, r3, #16
 8005650:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005652:	4b24      	ldr	r3, [pc, #144]	@ (80056e4 <RCCEx_PLL2_Config+0x15c>)
 8005654:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005656:	4b24      	ldr	r3, [pc, #144]	@ (80056e8 <RCCEx_PLL2_Config+0x160>)
 8005658:	4013      	ands	r3, r2
 800565a:	687a      	ldr	r2, [r7, #4]
 800565c:	69d2      	ldr	r2, [r2, #28]
 800565e:	00d2      	lsls	r2, r2, #3
 8005660:	4920      	ldr	r1, [pc, #128]	@ (80056e4 <RCCEx_PLL2_Config+0x15c>)
 8005662:	4313      	orrs	r3, r2
 8005664:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005666:	4b1f      	ldr	r3, [pc, #124]	@ (80056e4 <RCCEx_PLL2_Config+0x15c>)
 8005668:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800566a:	4a1e      	ldr	r2, [pc, #120]	@ (80056e4 <RCCEx_PLL2_Config+0x15c>)
 800566c:	f043 0310 	orr.w	r3, r3, #16
 8005670:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d106      	bne.n	8005686 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005678:	4b1a      	ldr	r3, [pc, #104]	@ (80056e4 <RCCEx_PLL2_Config+0x15c>)
 800567a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800567c:	4a19      	ldr	r2, [pc, #100]	@ (80056e4 <RCCEx_PLL2_Config+0x15c>)
 800567e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005682:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005684:	e00f      	b.n	80056a6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	2b01      	cmp	r3, #1
 800568a:	d106      	bne.n	800569a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800568c:	4b15      	ldr	r3, [pc, #84]	@ (80056e4 <RCCEx_PLL2_Config+0x15c>)
 800568e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005690:	4a14      	ldr	r2, [pc, #80]	@ (80056e4 <RCCEx_PLL2_Config+0x15c>)
 8005692:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005696:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005698:	e005      	b.n	80056a6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800569a:	4b12      	ldr	r3, [pc, #72]	@ (80056e4 <RCCEx_PLL2_Config+0x15c>)
 800569c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800569e:	4a11      	ldr	r2, [pc, #68]	@ (80056e4 <RCCEx_PLL2_Config+0x15c>)
 80056a0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80056a4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80056a6:	4b0f      	ldr	r3, [pc, #60]	@ (80056e4 <RCCEx_PLL2_Config+0x15c>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4a0e      	ldr	r2, [pc, #56]	@ (80056e4 <RCCEx_PLL2_Config+0x15c>)
 80056ac:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80056b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056b2:	f7fc f94f 	bl	8001954 <HAL_GetTick>
 80056b6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80056b8:	e008      	b.n	80056cc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80056ba:	f7fc f94b 	bl	8001954 <HAL_GetTick>
 80056be:	4602      	mov	r2, r0
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	1ad3      	subs	r3, r2, r3
 80056c4:	2b02      	cmp	r3, #2
 80056c6:	d901      	bls.n	80056cc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80056c8:	2303      	movs	r3, #3
 80056ca:	e006      	b.n	80056da <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80056cc:	4b05      	ldr	r3, [pc, #20]	@ (80056e4 <RCCEx_PLL2_Config+0x15c>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d0f0      	beq.n	80056ba <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80056d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80056da:	4618      	mov	r0, r3
 80056dc:	3710      	adds	r7, #16
 80056de:	46bd      	mov	sp, r7
 80056e0:	bd80      	pop	{r7, pc}
 80056e2:	bf00      	nop
 80056e4:	58024400 	.word	0x58024400
 80056e8:	ffff0007 	.word	0xffff0007

080056ec <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b084      	sub	sp, #16
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
 80056f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80056f6:	2300      	movs	r3, #0
 80056f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80056fa:	4b53      	ldr	r3, [pc, #332]	@ (8005848 <RCCEx_PLL3_Config+0x15c>)
 80056fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056fe:	f003 0303 	and.w	r3, r3, #3
 8005702:	2b03      	cmp	r3, #3
 8005704:	d101      	bne.n	800570a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005706:	2301      	movs	r3, #1
 8005708:	e099      	b.n	800583e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800570a:	4b4f      	ldr	r3, [pc, #316]	@ (8005848 <RCCEx_PLL3_Config+0x15c>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4a4e      	ldr	r2, [pc, #312]	@ (8005848 <RCCEx_PLL3_Config+0x15c>)
 8005710:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005714:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005716:	f7fc f91d 	bl	8001954 <HAL_GetTick>
 800571a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800571c:	e008      	b.n	8005730 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800571e:	f7fc f919 	bl	8001954 <HAL_GetTick>
 8005722:	4602      	mov	r2, r0
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	1ad3      	subs	r3, r2, r3
 8005728:	2b02      	cmp	r3, #2
 800572a:	d901      	bls.n	8005730 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800572c:	2303      	movs	r3, #3
 800572e:	e086      	b.n	800583e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005730:	4b45      	ldr	r3, [pc, #276]	@ (8005848 <RCCEx_PLL3_Config+0x15c>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005738:	2b00      	cmp	r3, #0
 800573a:	d1f0      	bne.n	800571e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800573c:	4b42      	ldr	r3, [pc, #264]	@ (8005848 <RCCEx_PLL3_Config+0x15c>)
 800573e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005740:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	051b      	lsls	r3, r3, #20
 800574a:	493f      	ldr	r1, [pc, #252]	@ (8005848 <RCCEx_PLL3_Config+0x15c>)
 800574c:	4313      	orrs	r3, r2
 800574e:	628b      	str	r3, [r1, #40]	@ 0x28
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	3b01      	subs	r3, #1
 8005756:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	689b      	ldr	r3, [r3, #8]
 800575e:	3b01      	subs	r3, #1
 8005760:	025b      	lsls	r3, r3, #9
 8005762:	b29b      	uxth	r3, r3
 8005764:	431a      	orrs	r2, r3
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	68db      	ldr	r3, [r3, #12]
 800576a:	3b01      	subs	r3, #1
 800576c:	041b      	lsls	r3, r3, #16
 800576e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005772:	431a      	orrs	r2, r3
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	691b      	ldr	r3, [r3, #16]
 8005778:	3b01      	subs	r3, #1
 800577a:	061b      	lsls	r3, r3, #24
 800577c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005780:	4931      	ldr	r1, [pc, #196]	@ (8005848 <RCCEx_PLL3_Config+0x15c>)
 8005782:	4313      	orrs	r3, r2
 8005784:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005786:	4b30      	ldr	r3, [pc, #192]	@ (8005848 <RCCEx_PLL3_Config+0x15c>)
 8005788:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800578a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	695b      	ldr	r3, [r3, #20]
 8005792:	492d      	ldr	r1, [pc, #180]	@ (8005848 <RCCEx_PLL3_Config+0x15c>)
 8005794:	4313      	orrs	r3, r2
 8005796:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005798:	4b2b      	ldr	r3, [pc, #172]	@ (8005848 <RCCEx_PLL3_Config+0x15c>)
 800579a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800579c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	699b      	ldr	r3, [r3, #24]
 80057a4:	4928      	ldr	r1, [pc, #160]	@ (8005848 <RCCEx_PLL3_Config+0x15c>)
 80057a6:	4313      	orrs	r3, r2
 80057a8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80057aa:	4b27      	ldr	r3, [pc, #156]	@ (8005848 <RCCEx_PLL3_Config+0x15c>)
 80057ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057ae:	4a26      	ldr	r2, [pc, #152]	@ (8005848 <RCCEx_PLL3_Config+0x15c>)
 80057b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80057b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80057b6:	4b24      	ldr	r3, [pc, #144]	@ (8005848 <RCCEx_PLL3_Config+0x15c>)
 80057b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80057ba:	4b24      	ldr	r3, [pc, #144]	@ (800584c <RCCEx_PLL3_Config+0x160>)
 80057bc:	4013      	ands	r3, r2
 80057be:	687a      	ldr	r2, [r7, #4]
 80057c0:	69d2      	ldr	r2, [r2, #28]
 80057c2:	00d2      	lsls	r2, r2, #3
 80057c4:	4920      	ldr	r1, [pc, #128]	@ (8005848 <RCCEx_PLL3_Config+0x15c>)
 80057c6:	4313      	orrs	r3, r2
 80057c8:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80057ca:	4b1f      	ldr	r3, [pc, #124]	@ (8005848 <RCCEx_PLL3_Config+0x15c>)
 80057cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057ce:	4a1e      	ldr	r2, [pc, #120]	@ (8005848 <RCCEx_PLL3_Config+0x15c>)
 80057d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80057d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d106      	bne.n	80057ea <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80057dc:	4b1a      	ldr	r3, [pc, #104]	@ (8005848 <RCCEx_PLL3_Config+0x15c>)
 80057de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057e0:	4a19      	ldr	r2, [pc, #100]	@ (8005848 <RCCEx_PLL3_Config+0x15c>)
 80057e2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80057e6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80057e8:	e00f      	b.n	800580a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	2b01      	cmp	r3, #1
 80057ee:	d106      	bne.n	80057fe <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80057f0:	4b15      	ldr	r3, [pc, #84]	@ (8005848 <RCCEx_PLL3_Config+0x15c>)
 80057f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057f4:	4a14      	ldr	r2, [pc, #80]	@ (8005848 <RCCEx_PLL3_Config+0x15c>)
 80057f6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80057fa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80057fc:	e005      	b.n	800580a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80057fe:	4b12      	ldr	r3, [pc, #72]	@ (8005848 <RCCEx_PLL3_Config+0x15c>)
 8005800:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005802:	4a11      	ldr	r2, [pc, #68]	@ (8005848 <RCCEx_PLL3_Config+0x15c>)
 8005804:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005808:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800580a:	4b0f      	ldr	r3, [pc, #60]	@ (8005848 <RCCEx_PLL3_Config+0x15c>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4a0e      	ldr	r2, [pc, #56]	@ (8005848 <RCCEx_PLL3_Config+0x15c>)
 8005810:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005814:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005816:	f7fc f89d 	bl	8001954 <HAL_GetTick>
 800581a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800581c:	e008      	b.n	8005830 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800581e:	f7fc f899 	bl	8001954 <HAL_GetTick>
 8005822:	4602      	mov	r2, r0
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	1ad3      	subs	r3, r2, r3
 8005828:	2b02      	cmp	r3, #2
 800582a:	d901      	bls.n	8005830 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800582c:	2303      	movs	r3, #3
 800582e:	e006      	b.n	800583e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005830:	4b05      	ldr	r3, [pc, #20]	@ (8005848 <RCCEx_PLL3_Config+0x15c>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005838:	2b00      	cmp	r3, #0
 800583a:	d0f0      	beq.n	800581e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800583c:	7bfb      	ldrb	r3, [r7, #15]
}
 800583e:	4618      	mov	r0, r3
 8005840:	3710      	adds	r7, #16
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}
 8005846:	bf00      	nop
 8005848:	58024400 	.word	0x58024400
 800584c:	ffff0007 	.word	0xffff0007

08005850 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b082      	sub	sp, #8
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d101      	bne.n	8005862 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800585e:	2301      	movs	r3, #1
 8005860:	e049      	b.n	80058f6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005868:	b2db      	uxtb	r3, r3
 800586a:	2b00      	cmp	r3, #0
 800586c:	d106      	bne.n	800587c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2200      	movs	r2, #0
 8005872:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f000 f841 	bl	80058fe <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2202      	movs	r2, #2
 8005880:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681a      	ldr	r2, [r3, #0]
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	3304      	adds	r3, #4
 800588c:	4619      	mov	r1, r3
 800588e:	4610      	mov	r0, r2
 8005890:	f000 f9e8 	bl	8005c64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2201      	movs	r2, #1
 8005898:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2201      	movs	r2, #1
 80058a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2201      	movs	r2, #1
 80058a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2201      	movs	r2, #1
 80058b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2201      	movs	r2, #1
 80058b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2201      	movs	r2, #1
 80058c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2201      	movs	r2, #1
 80058c8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2201      	movs	r2, #1
 80058d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2201      	movs	r2, #1
 80058d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2201      	movs	r2, #1
 80058e0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2201      	movs	r2, #1
 80058e8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2201      	movs	r2, #1
 80058f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80058f4:	2300      	movs	r3, #0
}
 80058f6:	4618      	mov	r0, r3
 80058f8:	3708      	adds	r7, #8
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd80      	pop	{r7, pc}

080058fe <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80058fe:	b480      	push	{r7}
 8005900:	b083      	sub	sp, #12
 8005902:	af00      	add	r7, sp, #0
 8005904:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005906:	bf00      	nop
 8005908:	370c      	adds	r7, #12
 800590a:	46bd      	mov	sp, r7
 800590c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005910:	4770      	bx	lr
	...

08005914 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005914:	b480      	push	{r7}
 8005916:	b085      	sub	sp, #20
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005922:	b2db      	uxtb	r3, r3
 8005924:	2b01      	cmp	r3, #1
 8005926:	d001      	beq.n	800592c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005928:	2301      	movs	r3, #1
 800592a:	e054      	b.n	80059d6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2202      	movs	r2, #2
 8005930:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	68da      	ldr	r2, [r3, #12]
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f042 0201 	orr.w	r2, r2, #1
 8005942:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4a26      	ldr	r2, [pc, #152]	@ (80059e4 <HAL_TIM_Base_Start_IT+0xd0>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d022      	beq.n	8005994 <HAL_TIM_Base_Start_IT+0x80>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005956:	d01d      	beq.n	8005994 <HAL_TIM_Base_Start_IT+0x80>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4a22      	ldr	r2, [pc, #136]	@ (80059e8 <HAL_TIM_Base_Start_IT+0xd4>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d018      	beq.n	8005994 <HAL_TIM_Base_Start_IT+0x80>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4a21      	ldr	r2, [pc, #132]	@ (80059ec <HAL_TIM_Base_Start_IT+0xd8>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d013      	beq.n	8005994 <HAL_TIM_Base_Start_IT+0x80>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a1f      	ldr	r2, [pc, #124]	@ (80059f0 <HAL_TIM_Base_Start_IT+0xdc>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d00e      	beq.n	8005994 <HAL_TIM_Base_Start_IT+0x80>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a1e      	ldr	r2, [pc, #120]	@ (80059f4 <HAL_TIM_Base_Start_IT+0xe0>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d009      	beq.n	8005994 <HAL_TIM_Base_Start_IT+0x80>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4a1c      	ldr	r2, [pc, #112]	@ (80059f8 <HAL_TIM_Base_Start_IT+0xe4>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d004      	beq.n	8005994 <HAL_TIM_Base_Start_IT+0x80>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4a1b      	ldr	r2, [pc, #108]	@ (80059fc <HAL_TIM_Base_Start_IT+0xe8>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d115      	bne.n	80059c0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	689a      	ldr	r2, [r3, #8]
 800599a:	4b19      	ldr	r3, [pc, #100]	@ (8005a00 <HAL_TIM_Base_Start_IT+0xec>)
 800599c:	4013      	ands	r3, r2
 800599e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	2b06      	cmp	r3, #6
 80059a4:	d015      	beq.n	80059d2 <HAL_TIM_Base_Start_IT+0xbe>
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80059ac:	d011      	beq.n	80059d2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	681a      	ldr	r2, [r3, #0]
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f042 0201 	orr.w	r2, r2, #1
 80059bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059be:	e008      	b.n	80059d2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	681a      	ldr	r2, [r3, #0]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f042 0201 	orr.w	r2, r2, #1
 80059ce:	601a      	str	r2, [r3, #0]
 80059d0:	e000      	b.n	80059d4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059d2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80059d4:	2300      	movs	r3, #0
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	3714      	adds	r7, #20
 80059da:	46bd      	mov	sp, r7
 80059dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e0:	4770      	bx	lr
 80059e2:	bf00      	nop
 80059e4:	40010000 	.word	0x40010000
 80059e8:	40000400 	.word	0x40000400
 80059ec:	40000800 	.word	0x40000800
 80059f0:	40000c00 	.word	0x40000c00
 80059f4:	40010400 	.word	0x40010400
 80059f8:	40001800 	.word	0x40001800
 80059fc:	40014000 	.word	0x40014000
 8005a00:	00010007 	.word	0x00010007

08005a04 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b084      	sub	sp, #16
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	68db      	ldr	r3, [r3, #12]
 8005a12:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	691b      	ldr	r3, [r3, #16]
 8005a1a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	f003 0302 	and.w	r3, r3, #2
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d020      	beq.n	8005a68 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	f003 0302 	and.w	r3, r3, #2
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d01b      	beq.n	8005a68 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f06f 0202 	mvn.w	r2, #2
 8005a38:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2201      	movs	r2, #1
 8005a3e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	699b      	ldr	r3, [r3, #24]
 8005a46:	f003 0303 	and.w	r3, r3, #3
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d003      	beq.n	8005a56 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005a4e:	6878      	ldr	r0, [r7, #4]
 8005a50:	f000 f8e9 	bl	8005c26 <HAL_TIM_IC_CaptureCallback>
 8005a54:	e005      	b.n	8005a62 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	f000 f8db 	bl	8005c12 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a5c:	6878      	ldr	r0, [r7, #4]
 8005a5e:	f000 f8ec 	bl	8005c3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2200      	movs	r2, #0
 8005a66:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	f003 0304 	and.w	r3, r3, #4
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d020      	beq.n	8005ab4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	f003 0304 	and.w	r3, r3, #4
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d01b      	beq.n	8005ab4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f06f 0204 	mvn.w	r2, #4
 8005a84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2202      	movs	r2, #2
 8005a8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	699b      	ldr	r3, [r3, #24]
 8005a92:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d003      	beq.n	8005aa2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f000 f8c3 	bl	8005c26 <HAL_TIM_IC_CaptureCallback>
 8005aa0:	e005      	b.n	8005aae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f000 f8b5 	bl	8005c12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005aa8:	6878      	ldr	r0, [r7, #4]
 8005aaa:	f000 f8c6 	bl	8005c3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	f003 0308 	and.w	r3, r3, #8
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d020      	beq.n	8005b00 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	f003 0308 	and.w	r3, r3, #8
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d01b      	beq.n	8005b00 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f06f 0208 	mvn.w	r2, #8
 8005ad0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2204      	movs	r2, #4
 8005ad6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	69db      	ldr	r3, [r3, #28]
 8005ade:	f003 0303 	and.w	r3, r3, #3
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d003      	beq.n	8005aee <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	f000 f89d 	bl	8005c26 <HAL_TIM_IC_CaptureCallback>
 8005aec:	e005      	b.n	8005afa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	f000 f88f 	bl	8005c12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005af4:	6878      	ldr	r0, [r7, #4]
 8005af6:	f000 f8a0 	bl	8005c3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2200      	movs	r2, #0
 8005afe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	f003 0310 	and.w	r3, r3, #16
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d020      	beq.n	8005b4c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	f003 0310 	and.w	r3, r3, #16
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d01b      	beq.n	8005b4c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f06f 0210 	mvn.w	r2, #16
 8005b1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2208      	movs	r2, #8
 8005b22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	69db      	ldr	r3, [r3, #28]
 8005b2a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d003      	beq.n	8005b3a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f000 f877 	bl	8005c26 <HAL_TIM_IC_CaptureCallback>
 8005b38:	e005      	b.n	8005b46 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	f000 f869 	bl	8005c12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b40:	6878      	ldr	r0, [r7, #4]
 8005b42:	f000 f87a 	bl	8005c3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	f003 0301 	and.w	r3, r3, #1
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d00c      	beq.n	8005b70 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	f003 0301 	and.w	r3, r3, #1
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d007      	beq.n	8005b70 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f06f 0201 	mvn.w	r2, #1
 8005b68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005b6a:	6878      	ldr	r0, [r7, #4]
 8005b6c:	f7fb fab0 	bl	80010d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d104      	bne.n	8005b84 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d00c      	beq.n	8005b9e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d007      	beq.n	8005b9e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005b96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005b98:	6878      	ldr	r0, [r7, #4]
 8005b9a:	f000 f913 	bl	8005dc4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d00c      	beq.n	8005bc2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d007      	beq.n	8005bc2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005bba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005bbc:	6878      	ldr	r0, [r7, #4]
 8005bbe:	f000 f90b 	bl	8005dd8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d00c      	beq.n	8005be6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d007      	beq.n	8005be6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005bde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005be0:	6878      	ldr	r0, [r7, #4]
 8005be2:	f000 f834 	bl	8005c4e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	f003 0320 	and.w	r3, r3, #32
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d00c      	beq.n	8005c0a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	f003 0320 	and.w	r3, r3, #32
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d007      	beq.n	8005c0a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f06f 0220 	mvn.w	r2, #32
 8005c02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005c04:	6878      	ldr	r0, [r7, #4]
 8005c06:	f000 f8d3 	bl	8005db0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005c0a:	bf00      	nop
 8005c0c:	3710      	adds	r7, #16
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bd80      	pop	{r7, pc}

08005c12 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c12:	b480      	push	{r7}
 8005c14:	b083      	sub	sp, #12
 8005c16:	af00      	add	r7, sp, #0
 8005c18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005c1a:	bf00      	nop
 8005c1c:	370c      	adds	r7, #12
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c24:	4770      	bx	lr

08005c26 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005c26:	b480      	push	{r7}
 8005c28:	b083      	sub	sp, #12
 8005c2a:	af00      	add	r7, sp, #0
 8005c2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005c2e:	bf00      	nop
 8005c30:	370c      	adds	r7, #12
 8005c32:	46bd      	mov	sp, r7
 8005c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c38:	4770      	bx	lr

08005c3a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005c3a:	b480      	push	{r7}
 8005c3c:	b083      	sub	sp, #12
 8005c3e:	af00      	add	r7, sp, #0
 8005c40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005c42:	bf00      	nop
 8005c44:	370c      	adds	r7, #12
 8005c46:	46bd      	mov	sp, r7
 8005c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4c:	4770      	bx	lr

08005c4e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005c4e:	b480      	push	{r7}
 8005c50:	b083      	sub	sp, #12
 8005c52:	af00      	add	r7, sp, #0
 8005c54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005c56:	bf00      	nop
 8005c58:	370c      	adds	r7, #12
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c60:	4770      	bx	lr
	...

08005c64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005c64:	b480      	push	{r7}
 8005c66:	b085      	sub	sp, #20
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
 8005c6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	4a46      	ldr	r2, [pc, #280]	@ (8005d90 <TIM_Base_SetConfig+0x12c>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d013      	beq.n	8005ca4 <TIM_Base_SetConfig+0x40>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c82:	d00f      	beq.n	8005ca4 <TIM_Base_SetConfig+0x40>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	4a43      	ldr	r2, [pc, #268]	@ (8005d94 <TIM_Base_SetConfig+0x130>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d00b      	beq.n	8005ca4 <TIM_Base_SetConfig+0x40>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	4a42      	ldr	r2, [pc, #264]	@ (8005d98 <TIM_Base_SetConfig+0x134>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d007      	beq.n	8005ca4 <TIM_Base_SetConfig+0x40>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	4a41      	ldr	r2, [pc, #260]	@ (8005d9c <TIM_Base_SetConfig+0x138>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d003      	beq.n	8005ca4 <TIM_Base_SetConfig+0x40>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	4a40      	ldr	r2, [pc, #256]	@ (8005da0 <TIM_Base_SetConfig+0x13c>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d108      	bne.n	8005cb6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005caa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	685b      	ldr	r3, [r3, #4]
 8005cb0:	68fa      	ldr	r2, [r7, #12]
 8005cb2:	4313      	orrs	r3, r2
 8005cb4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	4a35      	ldr	r2, [pc, #212]	@ (8005d90 <TIM_Base_SetConfig+0x12c>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d01f      	beq.n	8005cfe <TIM_Base_SetConfig+0x9a>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005cc4:	d01b      	beq.n	8005cfe <TIM_Base_SetConfig+0x9a>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	4a32      	ldr	r2, [pc, #200]	@ (8005d94 <TIM_Base_SetConfig+0x130>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d017      	beq.n	8005cfe <TIM_Base_SetConfig+0x9a>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	4a31      	ldr	r2, [pc, #196]	@ (8005d98 <TIM_Base_SetConfig+0x134>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d013      	beq.n	8005cfe <TIM_Base_SetConfig+0x9a>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	4a30      	ldr	r2, [pc, #192]	@ (8005d9c <TIM_Base_SetConfig+0x138>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d00f      	beq.n	8005cfe <TIM_Base_SetConfig+0x9a>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	4a2f      	ldr	r2, [pc, #188]	@ (8005da0 <TIM_Base_SetConfig+0x13c>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d00b      	beq.n	8005cfe <TIM_Base_SetConfig+0x9a>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	4a2e      	ldr	r2, [pc, #184]	@ (8005da4 <TIM_Base_SetConfig+0x140>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d007      	beq.n	8005cfe <TIM_Base_SetConfig+0x9a>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	4a2d      	ldr	r2, [pc, #180]	@ (8005da8 <TIM_Base_SetConfig+0x144>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d003      	beq.n	8005cfe <TIM_Base_SetConfig+0x9a>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	4a2c      	ldr	r2, [pc, #176]	@ (8005dac <TIM_Base_SetConfig+0x148>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d108      	bne.n	8005d10 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	68db      	ldr	r3, [r3, #12]
 8005d0a:	68fa      	ldr	r2, [r7, #12]
 8005d0c:	4313      	orrs	r3, r2
 8005d0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	695b      	ldr	r3, [r3, #20]
 8005d1a:	4313      	orrs	r3, r2
 8005d1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	68fa      	ldr	r2, [r7, #12]
 8005d22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	689a      	ldr	r2, [r3, #8]
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	681a      	ldr	r2, [r3, #0]
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	4a16      	ldr	r2, [pc, #88]	@ (8005d90 <TIM_Base_SetConfig+0x12c>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d00f      	beq.n	8005d5c <TIM_Base_SetConfig+0xf8>
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	4a18      	ldr	r2, [pc, #96]	@ (8005da0 <TIM_Base_SetConfig+0x13c>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d00b      	beq.n	8005d5c <TIM_Base_SetConfig+0xf8>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	4a17      	ldr	r2, [pc, #92]	@ (8005da4 <TIM_Base_SetConfig+0x140>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d007      	beq.n	8005d5c <TIM_Base_SetConfig+0xf8>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	4a16      	ldr	r2, [pc, #88]	@ (8005da8 <TIM_Base_SetConfig+0x144>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d003      	beq.n	8005d5c <TIM_Base_SetConfig+0xf8>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	4a15      	ldr	r2, [pc, #84]	@ (8005dac <TIM_Base_SetConfig+0x148>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d103      	bne.n	8005d64 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	691a      	ldr	r2, [r3, #16]
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2201      	movs	r2, #1
 8005d68:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	691b      	ldr	r3, [r3, #16]
 8005d6e:	f003 0301 	and.w	r3, r3, #1
 8005d72:	2b01      	cmp	r3, #1
 8005d74:	d105      	bne.n	8005d82 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	691b      	ldr	r3, [r3, #16]
 8005d7a:	f023 0201 	bic.w	r2, r3, #1
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	611a      	str	r2, [r3, #16]
  }
}
 8005d82:	bf00      	nop
 8005d84:	3714      	adds	r7, #20
 8005d86:	46bd      	mov	sp, r7
 8005d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8c:	4770      	bx	lr
 8005d8e:	bf00      	nop
 8005d90:	40010000 	.word	0x40010000
 8005d94:	40000400 	.word	0x40000400
 8005d98:	40000800 	.word	0x40000800
 8005d9c:	40000c00 	.word	0x40000c00
 8005da0:	40010400 	.word	0x40010400
 8005da4:	40014000 	.word	0x40014000
 8005da8:	40014400 	.word	0x40014400
 8005dac:	40014800 	.word	0x40014800

08005db0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005db0:	b480      	push	{r7}
 8005db2:	b083      	sub	sp, #12
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005db8:	bf00      	nop
 8005dba:	370c      	adds	r7, #12
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc2:	4770      	bx	lr

08005dc4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b083      	sub	sp, #12
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005dcc:	bf00      	nop
 8005dce:	370c      	adds	r7, #12
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd6:	4770      	bx	lr

08005dd8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005dd8:	b480      	push	{r7}
 8005dda:	b083      	sub	sp, #12
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005de0:	bf00      	nop
 8005de2:	370c      	adds	r7, #12
 8005de4:	46bd      	mov	sp, r7
 8005de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dea:	4770      	bx	lr

08005dec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b082      	sub	sp, #8
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d101      	bne.n	8005dfe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	e042      	b.n	8005e84 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d106      	bne.n	8005e16 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e10:	6878      	ldr	r0, [r7, #4]
 8005e12:	f7fb fcbb 	bl	800178c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2224      	movs	r2, #36	@ 0x24
 8005e1a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	681a      	ldr	r2, [r3, #0]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f022 0201 	bic.w	r2, r2, #1
 8005e2c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d002      	beq.n	8005e3c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	f000 ff22 	bl	8006c80 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005e3c:	6878      	ldr	r0, [r7, #4]
 8005e3e:	f000 f8b3 	bl	8005fa8 <UART_SetConfig>
 8005e42:	4603      	mov	r3, r0
 8005e44:	2b01      	cmp	r3, #1
 8005e46:	d101      	bne.n	8005e4c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005e48:	2301      	movs	r3, #1
 8005e4a:	e01b      	b.n	8005e84 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	685a      	ldr	r2, [r3, #4]
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005e5a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	689a      	ldr	r2, [r3, #8]
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005e6a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	681a      	ldr	r2, [r3, #0]
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f042 0201 	orr.w	r2, r2, #1
 8005e7a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005e7c:	6878      	ldr	r0, [r7, #4]
 8005e7e:	f000 ffa1 	bl	8006dc4 <UART_CheckIdleState>
 8005e82:	4603      	mov	r3, r0
}
 8005e84:	4618      	mov	r0, r3
 8005e86:	3708      	adds	r7, #8
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	bd80      	pop	{r7, pc}

08005e8c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b08a      	sub	sp, #40	@ 0x28
 8005e90:	af02      	add	r7, sp, #8
 8005e92:	60f8      	str	r0, [r7, #12]
 8005e94:	60b9      	str	r1, [r7, #8]
 8005e96:	603b      	str	r3, [r7, #0]
 8005e98:	4613      	mov	r3, r2
 8005e9a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ea2:	2b20      	cmp	r3, #32
 8005ea4:	d17b      	bne.n	8005f9e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ea6:	68bb      	ldr	r3, [r7, #8]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d002      	beq.n	8005eb2 <HAL_UART_Transmit+0x26>
 8005eac:	88fb      	ldrh	r3, [r7, #6]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d101      	bne.n	8005eb6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	e074      	b.n	8005fa0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	2200      	movs	r2, #0
 8005eba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	2221      	movs	r2, #33	@ 0x21
 8005ec2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005ec6:	f7fb fd45 	bl	8001954 <HAL_GetTick>
 8005eca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	88fa      	ldrh	r2, [r7, #6]
 8005ed0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	88fa      	ldrh	r2, [r7, #6]
 8005ed8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	689b      	ldr	r3, [r3, #8]
 8005ee0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ee4:	d108      	bne.n	8005ef8 <HAL_UART_Transmit+0x6c>
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	691b      	ldr	r3, [r3, #16]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d104      	bne.n	8005ef8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005eee:	2300      	movs	r3, #0
 8005ef0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	61bb      	str	r3, [r7, #24]
 8005ef6:	e003      	b.n	8005f00 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005efc:	2300      	movs	r3, #0
 8005efe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005f00:	e030      	b.n	8005f64 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	9300      	str	r3, [sp, #0]
 8005f06:	697b      	ldr	r3, [r7, #20]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	2180      	movs	r1, #128	@ 0x80
 8005f0c:	68f8      	ldr	r0, [r7, #12]
 8005f0e:	f001 f803 	bl	8006f18 <UART_WaitOnFlagUntilTimeout>
 8005f12:	4603      	mov	r3, r0
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d005      	beq.n	8005f24 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	2220      	movs	r2, #32
 8005f1c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8005f20:	2303      	movs	r3, #3
 8005f22:	e03d      	b.n	8005fa0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005f24:	69fb      	ldr	r3, [r7, #28]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d10b      	bne.n	8005f42 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005f2a:	69bb      	ldr	r3, [r7, #24]
 8005f2c:	881b      	ldrh	r3, [r3, #0]
 8005f2e:	461a      	mov	r2, r3
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005f38:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005f3a:	69bb      	ldr	r3, [r7, #24]
 8005f3c:	3302      	adds	r3, #2
 8005f3e:	61bb      	str	r3, [r7, #24]
 8005f40:	e007      	b.n	8005f52 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005f42:	69fb      	ldr	r3, [r7, #28]
 8005f44:	781a      	ldrb	r2, [r3, #0]
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005f4c:	69fb      	ldr	r3, [r7, #28]
 8005f4e:	3301      	adds	r3, #1
 8005f50:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005f58:	b29b      	uxth	r3, r3
 8005f5a:	3b01      	subs	r3, #1
 8005f5c:	b29a      	uxth	r2, r3
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005f6a:	b29b      	uxth	r3, r3
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d1c8      	bne.n	8005f02 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	9300      	str	r3, [sp, #0]
 8005f74:	697b      	ldr	r3, [r7, #20]
 8005f76:	2200      	movs	r2, #0
 8005f78:	2140      	movs	r1, #64	@ 0x40
 8005f7a:	68f8      	ldr	r0, [r7, #12]
 8005f7c:	f000 ffcc 	bl	8006f18 <UART_WaitOnFlagUntilTimeout>
 8005f80:	4603      	mov	r3, r0
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d005      	beq.n	8005f92 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	2220      	movs	r2, #32
 8005f8a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8005f8e:	2303      	movs	r3, #3
 8005f90:	e006      	b.n	8005fa0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	2220      	movs	r2, #32
 8005f96:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	e000      	b.n	8005fa0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8005f9e:	2302      	movs	r3, #2
  }
}
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	3720      	adds	r7, #32
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bd80      	pop	{r7, pc}

08005fa8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005fa8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005fac:	b092      	sub	sp, #72	@ 0x48
 8005fae:	af00      	add	r7, sp, #0
 8005fb0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005fb8:	697b      	ldr	r3, [r7, #20]
 8005fba:	689a      	ldr	r2, [r3, #8]
 8005fbc:	697b      	ldr	r3, [r7, #20]
 8005fbe:	691b      	ldr	r3, [r3, #16]
 8005fc0:	431a      	orrs	r2, r3
 8005fc2:	697b      	ldr	r3, [r7, #20]
 8005fc4:	695b      	ldr	r3, [r3, #20]
 8005fc6:	431a      	orrs	r2, r3
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	69db      	ldr	r3, [r3, #28]
 8005fcc:	4313      	orrs	r3, r2
 8005fce:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005fd0:	697b      	ldr	r3, [r7, #20]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	681a      	ldr	r2, [r3, #0]
 8005fd6:	4bbe      	ldr	r3, [pc, #760]	@ (80062d0 <UART_SetConfig+0x328>)
 8005fd8:	4013      	ands	r3, r2
 8005fda:	697a      	ldr	r2, [r7, #20]
 8005fdc:	6812      	ldr	r2, [r2, #0]
 8005fde:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005fe0:	430b      	orrs	r3, r1
 8005fe2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005fe4:	697b      	ldr	r3, [r7, #20]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	685b      	ldr	r3, [r3, #4]
 8005fea:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005fee:	697b      	ldr	r3, [r7, #20]
 8005ff0:	68da      	ldr	r2, [r3, #12]
 8005ff2:	697b      	ldr	r3, [r7, #20]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	430a      	orrs	r2, r1
 8005ff8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005ffa:	697b      	ldr	r3, [r7, #20]
 8005ffc:	699b      	ldr	r3, [r3, #24]
 8005ffe:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4ab3      	ldr	r2, [pc, #716]	@ (80062d4 <UART_SetConfig+0x32c>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d004      	beq.n	8006014 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	6a1b      	ldr	r3, [r3, #32]
 800600e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006010:	4313      	orrs	r3, r2
 8006012:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006014:	697b      	ldr	r3, [r7, #20]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	689a      	ldr	r2, [r3, #8]
 800601a:	4baf      	ldr	r3, [pc, #700]	@ (80062d8 <UART_SetConfig+0x330>)
 800601c:	4013      	ands	r3, r2
 800601e:	697a      	ldr	r2, [r7, #20]
 8006020:	6812      	ldr	r2, [r2, #0]
 8006022:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006024:	430b      	orrs	r3, r1
 8006026:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006028:	697b      	ldr	r3, [r7, #20]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800602e:	f023 010f 	bic.w	r1, r3, #15
 8006032:	697b      	ldr	r3, [r7, #20]
 8006034:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006036:	697b      	ldr	r3, [r7, #20]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	430a      	orrs	r2, r1
 800603c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800603e:	697b      	ldr	r3, [r7, #20]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4aa6      	ldr	r2, [pc, #664]	@ (80062dc <UART_SetConfig+0x334>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d177      	bne.n	8006138 <UART_SetConfig+0x190>
 8006048:	4ba5      	ldr	r3, [pc, #660]	@ (80062e0 <UART_SetConfig+0x338>)
 800604a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800604c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006050:	2b28      	cmp	r3, #40	@ 0x28
 8006052:	d86d      	bhi.n	8006130 <UART_SetConfig+0x188>
 8006054:	a201      	add	r2, pc, #4	@ (adr r2, 800605c <UART_SetConfig+0xb4>)
 8006056:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800605a:	bf00      	nop
 800605c:	08006101 	.word	0x08006101
 8006060:	08006131 	.word	0x08006131
 8006064:	08006131 	.word	0x08006131
 8006068:	08006131 	.word	0x08006131
 800606c:	08006131 	.word	0x08006131
 8006070:	08006131 	.word	0x08006131
 8006074:	08006131 	.word	0x08006131
 8006078:	08006131 	.word	0x08006131
 800607c:	08006109 	.word	0x08006109
 8006080:	08006131 	.word	0x08006131
 8006084:	08006131 	.word	0x08006131
 8006088:	08006131 	.word	0x08006131
 800608c:	08006131 	.word	0x08006131
 8006090:	08006131 	.word	0x08006131
 8006094:	08006131 	.word	0x08006131
 8006098:	08006131 	.word	0x08006131
 800609c:	08006111 	.word	0x08006111
 80060a0:	08006131 	.word	0x08006131
 80060a4:	08006131 	.word	0x08006131
 80060a8:	08006131 	.word	0x08006131
 80060ac:	08006131 	.word	0x08006131
 80060b0:	08006131 	.word	0x08006131
 80060b4:	08006131 	.word	0x08006131
 80060b8:	08006131 	.word	0x08006131
 80060bc:	08006119 	.word	0x08006119
 80060c0:	08006131 	.word	0x08006131
 80060c4:	08006131 	.word	0x08006131
 80060c8:	08006131 	.word	0x08006131
 80060cc:	08006131 	.word	0x08006131
 80060d0:	08006131 	.word	0x08006131
 80060d4:	08006131 	.word	0x08006131
 80060d8:	08006131 	.word	0x08006131
 80060dc:	08006121 	.word	0x08006121
 80060e0:	08006131 	.word	0x08006131
 80060e4:	08006131 	.word	0x08006131
 80060e8:	08006131 	.word	0x08006131
 80060ec:	08006131 	.word	0x08006131
 80060f0:	08006131 	.word	0x08006131
 80060f4:	08006131 	.word	0x08006131
 80060f8:	08006131 	.word	0x08006131
 80060fc:	08006129 	.word	0x08006129
 8006100:	2301      	movs	r3, #1
 8006102:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006106:	e326      	b.n	8006756 <UART_SetConfig+0x7ae>
 8006108:	2304      	movs	r3, #4
 800610a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800610e:	e322      	b.n	8006756 <UART_SetConfig+0x7ae>
 8006110:	2308      	movs	r3, #8
 8006112:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006116:	e31e      	b.n	8006756 <UART_SetConfig+0x7ae>
 8006118:	2310      	movs	r3, #16
 800611a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800611e:	e31a      	b.n	8006756 <UART_SetConfig+0x7ae>
 8006120:	2320      	movs	r3, #32
 8006122:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006126:	e316      	b.n	8006756 <UART_SetConfig+0x7ae>
 8006128:	2340      	movs	r3, #64	@ 0x40
 800612a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800612e:	e312      	b.n	8006756 <UART_SetConfig+0x7ae>
 8006130:	2380      	movs	r3, #128	@ 0x80
 8006132:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006136:	e30e      	b.n	8006756 <UART_SetConfig+0x7ae>
 8006138:	697b      	ldr	r3, [r7, #20]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	4a69      	ldr	r2, [pc, #420]	@ (80062e4 <UART_SetConfig+0x33c>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d130      	bne.n	80061a4 <UART_SetConfig+0x1fc>
 8006142:	4b67      	ldr	r3, [pc, #412]	@ (80062e0 <UART_SetConfig+0x338>)
 8006144:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006146:	f003 0307 	and.w	r3, r3, #7
 800614a:	2b05      	cmp	r3, #5
 800614c:	d826      	bhi.n	800619c <UART_SetConfig+0x1f4>
 800614e:	a201      	add	r2, pc, #4	@ (adr r2, 8006154 <UART_SetConfig+0x1ac>)
 8006150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006154:	0800616d 	.word	0x0800616d
 8006158:	08006175 	.word	0x08006175
 800615c:	0800617d 	.word	0x0800617d
 8006160:	08006185 	.word	0x08006185
 8006164:	0800618d 	.word	0x0800618d
 8006168:	08006195 	.word	0x08006195
 800616c:	2300      	movs	r3, #0
 800616e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006172:	e2f0      	b.n	8006756 <UART_SetConfig+0x7ae>
 8006174:	2304      	movs	r3, #4
 8006176:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800617a:	e2ec      	b.n	8006756 <UART_SetConfig+0x7ae>
 800617c:	2308      	movs	r3, #8
 800617e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006182:	e2e8      	b.n	8006756 <UART_SetConfig+0x7ae>
 8006184:	2310      	movs	r3, #16
 8006186:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800618a:	e2e4      	b.n	8006756 <UART_SetConfig+0x7ae>
 800618c:	2320      	movs	r3, #32
 800618e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006192:	e2e0      	b.n	8006756 <UART_SetConfig+0x7ae>
 8006194:	2340      	movs	r3, #64	@ 0x40
 8006196:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800619a:	e2dc      	b.n	8006756 <UART_SetConfig+0x7ae>
 800619c:	2380      	movs	r3, #128	@ 0x80
 800619e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061a2:	e2d8      	b.n	8006756 <UART_SetConfig+0x7ae>
 80061a4:	697b      	ldr	r3, [r7, #20]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	4a4f      	ldr	r2, [pc, #316]	@ (80062e8 <UART_SetConfig+0x340>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d130      	bne.n	8006210 <UART_SetConfig+0x268>
 80061ae:	4b4c      	ldr	r3, [pc, #304]	@ (80062e0 <UART_SetConfig+0x338>)
 80061b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061b2:	f003 0307 	and.w	r3, r3, #7
 80061b6:	2b05      	cmp	r3, #5
 80061b8:	d826      	bhi.n	8006208 <UART_SetConfig+0x260>
 80061ba:	a201      	add	r2, pc, #4	@ (adr r2, 80061c0 <UART_SetConfig+0x218>)
 80061bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061c0:	080061d9 	.word	0x080061d9
 80061c4:	080061e1 	.word	0x080061e1
 80061c8:	080061e9 	.word	0x080061e9
 80061cc:	080061f1 	.word	0x080061f1
 80061d0:	080061f9 	.word	0x080061f9
 80061d4:	08006201 	.word	0x08006201
 80061d8:	2300      	movs	r3, #0
 80061da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061de:	e2ba      	b.n	8006756 <UART_SetConfig+0x7ae>
 80061e0:	2304      	movs	r3, #4
 80061e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061e6:	e2b6      	b.n	8006756 <UART_SetConfig+0x7ae>
 80061e8:	2308      	movs	r3, #8
 80061ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061ee:	e2b2      	b.n	8006756 <UART_SetConfig+0x7ae>
 80061f0:	2310      	movs	r3, #16
 80061f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061f6:	e2ae      	b.n	8006756 <UART_SetConfig+0x7ae>
 80061f8:	2320      	movs	r3, #32
 80061fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061fe:	e2aa      	b.n	8006756 <UART_SetConfig+0x7ae>
 8006200:	2340      	movs	r3, #64	@ 0x40
 8006202:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006206:	e2a6      	b.n	8006756 <UART_SetConfig+0x7ae>
 8006208:	2380      	movs	r3, #128	@ 0x80
 800620a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800620e:	e2a2      	b.n	8006756 <UART_SetConfig+0x7ae>
 8006210:	697b      	ldr	r3, [r7, #20]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4a35      	ldr	r2, [pc, #212]	@ (80062ec <UART_SetConfig+0x344>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d130      	bne.n	800627c <UART_SetConfig+0x2d4>
 800621a:	4b31      	ldr	r3, [pc, #196]	@ (80062e0 <UART_SetConfig+0x338>)
 800621c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800621e:	f003 0307 	and.w	r3, r3, #7
 8006222:	2b05      	cmp	r3, #5
 8006224:	d826      	bhi.n	8006274 <UART_SetConfig+0x2cc>
 8006226:	a201      	add	r2, pc, #4	@ (adr r2, 800622c <UART_SetConfig+0x284>)
 8006228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800622c:	08006245 	.word	0x08006245
 8006230:	0800624d 	.word	0x0800624d
 8006234:	08006255 	.word	0x08006255
 8006238:	0800625d 	.word	0x0800625d
 800623c:	08006265 	.word	0x08006265
 8006240:	0800626d 	.word	0x0800626d
 8006244:	2300      	movs	r3, #0
 8006246:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800624a:	e284      	b.n	8006756 <UART_SetConfig+0x7ae>
 800624c:	2304      	movs	r3, #4
 800624e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006252:	e280      	b.n	8006756 <UART_SetConfig+0x7ae>
 8006254:	2308      	movs	r3, #8
 8006256:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800625a:	e27c      	b.n	8006756 <UART_SetConfig+0x7ae>
 800625c:	2310      	movs	r3, #16
 800625e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006262:	e278      	b.n	8006756 <UART_SetConfig+0x7ae>
 8006264:	2320      	movs	r3, #32
 8006266:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800626a:	e274      	b.n	8006756 <UART_SetConfig+0x7ae>
 800626c:	2340      	movs	r3, #64	@ 0x40
 800626e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006272:	e270      	b.n	8006756 <UART_SetConfig+0x7ae>
 8006274:	2380      	movs	r3, #128	@ 0x80
 8006276:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800627a:	e26c      	b.n	8006756 <UART_SetConfig+0x7ae>
 800627c:	697b      	ldr	r3, [r7, #20]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4a1b      	ldr	r2, [pc, #108]	@ (80062f0 <UART_SetConfig+0x348>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d142      	bne.n	800630c <UART_SetConfig+0x364>
 8006286:	4b16      	ldr	r3, [pc, #88]	@ (80062e0 <UART_SetConfig+0x338>)
 8006288:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800628a:	f003 0307 	and.w	r3, r3, #7
 800628e:	2b05      	cmp	r3, #5
 8006290:	d838      	bhi.n	8006304 <UART_SetConfig+0x35c>
 8006292:	a201      	add	r2, pc, #4	@ (adr r2, 8006298 <UART_SetConfig+0x2f0>)
 8006294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006298:	080062b1 	.word	0x080062b1
 800629c:	080062b9 	.word	0x080062b9
 80062a0:	080062c1 	.word	0x080062c1
 80062a4:	080062c9 	.word	0x080062c9
 80062a8:	080062f5 	.word	0x080062f5
 80062ac:	080062fd 	.word	0x080062fd
 80062b0:	2300      	movs	r3, #0
 80062b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062b6:	e24e      	b.n	8006756 <UART_SetConfig+0x7ae>
 80062b8:	2304      	movs	r3, #4
 80062ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062be:	e24a      	b.n	8006756 <UART_SetConfig+0x7ae>
 80062c0:	2308      	movs	r3, #8
 80062c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062c6:	e246      	b.n	8006756 <UART_SetConfig+0x7ae>
 80062c8:	2310      	movs	r3, #16
 80062ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062ce:	e242      	b.n	8006756 <UART_SetConfig+0x7ae>
 80062d0:	cfff69f3 	.word	0xcfff69f3
 80062d4:	58000c00 	.word	0x58000c00
 80062d8:	11fff4ff 	.word	0x11fff4ff
 80062dc:	40011000 	.word	0x40011000
 80062e0:	58024400 	.word	0x58024400
 80062e4:	40004400 	.word	0x40004400
 80062e8:	40004800 	.word	0x40004800
 80062ec:	40004c00 	.word	0x40004c00
 80062f0:	40005000 	.word	0x40005000
 80062f4:	2320      	movs	r3, #32
 80062f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062fa:	e22c      	b.n	8006756 <UART_SetConfig+0x7ae>
 80062fc:	2340      	movs	r3, #64	@ 0x40
 80062fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006302:	e228      	b.n	8006756 <UART_SetConfig+0x7ae>
 8006304:	2380      	movs	r3, #128	@ 0x80
 8006306:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800630a:	e224      	b.n	8006756 <UART_SetConfig+0x7ae>
 800630c:	697b      	ldr	r3, [r7, #20]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4ab1      	ldr	r2, [pc, #708]	@ (80065d8 <UART_SetConfig+0x630>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d176      	bne.n	8006404 <UART_SetConfig+0x45c>
 8006316:	4bb1      	ldr	r3, [pc, #708]	@ (80065dc <UART_SetConfig+0x634>)
 8006318:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800631a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800631e:	2b28      	cmp	r3, #40	@ 0x28
 8006320:	d86c      	bhi.n	80063fc <UART_SetConfig+0x454>
 8006322:	a201      	add	r2, pc, #4	@ (adr r2, 8006328 <UART_SetConfig+0x380>)
 8006324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006328:	080063cd 	.word	0x080063cd
 800632c:	080063fd 	.word	0x080063fd
 8006330:	080063fd 	.word	0x080063fd
 8006334:	080063fd 	.word	0x080063fd
 8006338:	080063fd 	.word	0x080063fd
 800633c:	080063fd 	.word	0x080063fd
 8006340:	080063fd 	.word	0x080063fd
 8006344:	080063fd 	.word	0x080063fd
 8006348:	080063d5 	.word	0x080063d5
 800634c:	080063fd 	.word	0x080063fd
 8006350:	080063fd 	.word	0x080063fd
 8006354:	080063fd 	.word	0x080063fd
 8006358:	080063fd 	.word	0x080063fd
 800635c:	080063fd 	.word	0x080063fd
 8006360:	080063fd 	.word	0x080063fd
 8006364:	080063fd 	.word	0x080063fd
 8006368:	080063dd 	.word	0x080063dd
 800636c:	080063fd 	.word	0x080063fd
 8006370:	080063fd 	.word	0x080063fd
 8006374:	080063fd 	.word	0x080063fd
 8006378:	080063fd 	.word	0x080063fd
 800637c:	080063fd 	.word	0x080063fd
 8006380:	080063fd 	.word	0x080063fd
 8006384:	080063fd 	.word	0x080063fd
 8006388:	080063e5 	.word	0x080063e5
 800638c:	080063fd 	.word	0x080063fd
 8006390:	080063fd 	.word	0x080063fd
 8006394:	080063fd 	.word	0x080063fd
 8006398:	080063fd 	.word	0x080063fd
 800639c:	080063fd 	.word	0x080063fd
 80063a0:	080063fd 	.word	0x080063fd
 80063a4:	080063fd 	.word	0x080063fd
 80063a8:	080063ed 	.word	0x080063ed
 80063ac:	080063fd 	.word	0x080063fd
 80063b0:	080063fd 	.word	0x080063fd
 80063b4:	080063fd 	.word	0x080063fd
 80063b8:	080063fd 	.word	0x080063fd
 80063bc:	080063fd 	.word	0x080063fd
 80063c0:	080063fd 	.word	0x080063fd
 80063c4:	080063fd 	.word	0x080063fd
 80063c8:	080063f5 	.word	0x080063f5
 80063cc:	2301      	movs	r3, #1
 80063ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80063d2:	e1c0      	b.n	8006756 <UART_SetConfig+0x7ae>
 80063d4:	2304      	movs	r3, #4
 80063d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80063da:	e1bc      	b.n	8006756 <UART_SetConfig+0x7ae>
 80063dc:	2308      	movs	r3, #8
 80063de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80063e2:	e1b8      	b.n	8006756 <UART_SetConfig+0x7ae>
 80063e4:	2310      	movs	r3, #16
 80063e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80063ea:	e1b4      	b.n	8006756 <UART_SetConfig+0x7ae>
 80063ec:	2320      	movs	r3, #32
 80063ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80063f2:	e1b0      	b.n	8006756 <UART_SetConfig+0x7ae>
 80063f4:	2340      	movs	r3, #64	@ 0x40
 80063f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80063fa:	e1ac      	b.n	8006756 <UART_SetConfig+0x7ae>
 80063fc:	2380      	movs	r3, #128	@ 0x80
 80063fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006402:	e1a8      	b.n	8006756 <UART_SetConfig+0x7ae>
 8006404:	697b      	ldr	r3, [r7, #20]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	4a75      	ldr	r2, [pc, #468]	@ (80065e0 <UART_SetConfig+0x638>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d130      	bne.n	8006470 <UART_SetConfig+0x4c8>
 800640e:	4b73      	ldr	r3, [pc, #460]	@ (80065dc <UART_SetConfig+0x634>)
 8006410:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006412:	f003 0307 	and.w	r3, r3, #7
 8006416:	2b05      	cmp	r3, #5
 8006418:	d826      	bhi.n	8006468 <UART_SetConfig+0x4c0>
 800641a:	a201      	add	r2, pc, #4	@ (adr r2, 8006420 <UART_SetConfig+0x478>)
 800641c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006420:	08006439 	.word	0x08006439
 8006424:	08006441 	.word	0x08006441
 8006428:	08006449 	.word	0x08006449
 800642c:	08006451 	.word	0x08006451
 8006430:	08006459 	.word	0x08006459
 8006434:	08006461 	.word	0x08006461
 8006438:	2300      	movs	r3, #0
 800643a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800643e:	e18a      	b.n	8006756 <UART_SetConfig+0x7ae>
 8006440:	2304      	movs	r3, #4
 8006442:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006446:	e186      	b.n	8006756 <UART_SetConfig+0x7ae>
 8006448:	2308      	movs	r3, #8
 800644a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800644e:	e182      	b.n	8006756 <UART_SetConfig+0x7ae>
 8006450:	2310      	movs	r3, #16
 8006452:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006456:	e17e      	b.n	8006756 <UART_SetConfig+0x7ae>
 8006458:	2320      	movs	r3, #32
 800645a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800645e:	e17a      	b.n	8006756 <UART_SetConfig+0x7ae>
 8006460:	2340      	movs	r3, #64	@ 0x40
 8006462:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006466:	e176      	b.n	8006756 <UART_SetConfig+0x7ae>
 8006468:	2380      	movs	r3, #128	@ 0x80
 800646a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800646e:	e172      	b.n	8006756 <UART_SetConfig+0x7ae>
 8006470:	697b      	ldr	r3, [r7, #20]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4a5b      	ldr	r2, [pc, #364]	@ (80065e4 <UART_SetConfig+0x63c>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d130      	bne.n	80064dc <UART_SetConfig+0x534>
 800647a:	4b58      	ldr	r3, [pc, #352]	@ (80065dc <UART_SetConfig+0x634>)
 800647c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800647e:	f003 0307 	and.w	r3, r3, #7
 8006482:	2b05      	cmp	r3, #5
 8006484:	d826      	bhi.n	80064d4 <UART_SetConfig+0x52c>
 8006486:	a201      	add	r2, pc, #4	@ (adr r2, 800648c <UART_SetConfig+0x4e4>)
 8006488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800648c:	080064a5 	.word	0x080064a5
 8006490:	080064ad 	.word	0x080064ad
 8006494:	080064b5 	.word	0x080064b5
 8006498:	080064bd 	.word	0x080064bd
 800649c:	080064c5 	.word	0x080064c5
 80064a0:	080064cd 	.word	0x080064cd
 80064a4:	2300      	movs	r3, #0
 80064a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80064aa:	e154      	b.n	8006756 <UART_SetConfig+0x7ae>
 80064ac:	2304      	movs	r3, #4
 80064ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80064b2:	e150      	b.n	8006756 <UART_SetConfig+0x7ae>
 80064b4:	2308      	movs	r3, #8
 80064b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80064ba:	e14c      	b.n	8006756 <UART_SetConfig+0x7ae>
 80064bc:	2310      	movs	r3, #16
 80064be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80064c2:	e148      	b.n	8006756 <UART_SetConfig+0x7ae>
 80064c4:	2320      	movs	r3, #32
 80064c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80064ca:	e144      	b.n	8006756 <UART_SetConfig+0x7ae>
 80064cc:	2340      	movs	r3, #64	@ 0x40
 80064ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80064d2:	e140      	b.n	8006756 <UART_SetConfig+0x7ae>
 80064d4:	2380      	movs	r3, #128	@ 0x80
 80064d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80064da:	e13c      	b.n	8006756 <UART_SetConfig+0x7ae>
 80064dc:	697b      	ldr	r3, [r7, #20]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4a41      	ldr	r2, [pc, #260]	@ (80065e8 <UART_SetConfig+0x640>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	f040 8082 	bne.w	80065ec <UART_SetConfig+0x644>
 80064e8:	4b3c      	ldr	r3, [pc, #240]	@ (80065dc <UART_SetConfig+0x634>)
 80064ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064ec:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80064f0:	2b28      	cmp	r3, #40	@ 0x28
 80064f2:	d86d      	bhi.n	80065d0 <UART_SetConfig+0x628>
 80064f4:	a201      	add	r2, pc, #4	@ (adr r2, 80064fc <UART_SetConfig+0x554>)
 80064f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064fa:	bf00      	nop
 80064fc:	080065a1 	.word	0x080065a1
 8006500:	080065d1 	.word	0x080065d1
 8006504:	080065d1 	.word	0x080065d1
 8006508:	080065d1 	.word	0x080065d1
 800650c:	080065d1 	.word	0x080065d1
 8006510:	080065d1 	.word	0x080065d1
 8006514:	080065d1 	.word	0x080065d1
 8006518:	080065d1 	.word	0x080065d1
 800651c:	080065a9 	.word	0x080065a9
 8006520:	080065d1 	.word	0x080065d1
 8006524:	080065d1 	.word	0x080065d1
 8006528:	080065d1 	.word	0x080065d1
 800652c:	080065d1 	.word	0x080065d1
 8006530:	080065d1 	.word	0x080065d1
 8006534:	080065d1 	.word	0x080065d1
 8006538:	080065d1 	.word	0x080065d1
 800653c:	080065b1 	.word	0x080065b1
 8006540:	080065d1 	.word	0x080065d1
 8006544:	080065d1 	.word	0x080065d1
 8006548:	080065d1 	.word	0x080065d1
 800654c:	080065d1 	.word	0x080065d1
 8006550:	080065d1 	.word	0x080065d1
 8006554:	080065d1 	.word	0x080065d1
 8006558:	080065d1 	.word	0x080065d1
 800655c:	080065b9 	.word	0x080065b9
 8006560:	080065d1 	.word	0x080065d1
 8006564:	080065d1 	.word	0x080065d1
 8006568:	080065d1 	.word	0x080065d1
 800656c:	080065d1 	.word	0x080065d1
 8006570:	080065d1 	.word	0x080065d1
 8006574:	080065d1 	.word	0x080065d1
 8006578:	080065d1 	.word	0x080065d1
 800657c:	080065c1 	.word	0x080065c1
 8006580:	080065d1 	.word	0x080065d1
 8006584:	080065d1 	.word	0x080065d1
 8006588:	080065d1 	.word	0x080065d1
 800658c:	080065d1 	.word	0x080065d1
 8006590:	080065d1 	.word	0x080065d1
 8006594:	080065d1 	.word	0x080065d1
 8006598:	080065d1 	.word	0x080065d1
 800659c:	080065c9 	.word	0x080065c9
 80065a0:	2301      	movs	r3, #1
 80065a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065a6:	e0d6      	b.n	8006756 <UART_SetConfig+0x7ae>
 80065a8:	2304      	movs	r3, #4
 80065aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065ae:	e0d2      	b.n	8006756 <UART_SetConfig+0x7ae>
 80065b0:	2308      	movs	r3, #8
 80065b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065b6:	e0ce      	b.n	8006756 <UART_SetConfig+0x7ae>
 80065b8:	2310      	movs	r3, #16
 80065ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065be:	e0ca      	b.n	8006756 <UART_SetConfig+0x7ae>
 80065c0:	2320      	movs	r3, #32
 80065c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065c6:	e0c6      	b.n	8006756 <UART_SetConfig+0x7ae>
 80065c8:	2340      	movs	r3, #64	@ 0x40
 80065ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065ce:	e0c2      	b.n	8006756 <UART_SetConfig+0x7ae>
 80065d0:	2380      	movs	r3, #128	@ 0x80
 80065d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065d6:	e0be      	b.n	8006756 <UART_SetConfig+0x7ae>
 80065d8:	40011400 	.word	0x40011400
 80065dc:	58024400 	.word	0x58024400
 80065e0:	40007800 	.word	0x40007800
 80065e4:	40007c00 	.word	0x40007c00
 80065e8:	40011800 	.word	0x40011800
 80065ec:	697b      	ldr	r3, [r7, #20]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	4aad      	ldr	r2, [pc, #692]	@ (80068a8 <UART_SetConfig+0x900>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d176      	bne.n	80066e4 <UART_SetConfig+0x73c>
 80065f6:	4bad      	ldr	r3, [pc, #692]	@ (80068ac <UART_SetConfig+0x904>)
 80065f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065fa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80065fe:	2b28      	cmp	r3, #40	@ 0x28
 8006600:	d86c      	bhi.n	80066dc <UART_SetConfig+0x734>
 8006602:	a201      	add	r2, pc, #4	@ (adr r2, 8006608 <UART_SetConfig+0x660>)
 8006604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006608:	080066ad 	.word	0x080066ad
 800660c:	080066dd 	.word	0x080066dd
 8006610:	080066dd 	.word	0x080066dd
 8006614:	080066dd 	.word	0x080066dd
 8006618:	080066dd 	.word	0x080066dd
 800661c:	080066dd 	.word	0x080066dd
 8006620:	080066dd 	.word	0x080066dd
 8006624:	080066dd 	.word	0x080066dd
 8006628:	080066b5 	.word	0x080066b5
 800662c:	080066dd 	.word	0x080066dd
 8006630:	080066dd 	.word	0x080066dd
 8006634:	080066dd 	.word	0x080066dd
 8006638:	080066dd 	.word	0x080066dd
 800663c:	080066dd 	.word	0x080066dd
 8006640:	080066dd 	.word	0x080066dd
 8006644:	080066dd 	.word	0x080066dd
 8006648:	080066bd 	.word	0x080066bd
 800664c:	080066dd 	.word	0x080066dd
 8006650:	080066dd 	.word	0x080066dd
 8006654:	080066dd 	.word	0x080066dd
 8006658:	080066dd 	.word	0x080066dd
 800665c:	080066dd 	.word	0x080066dd
 8006660:	080066dd 	.word	0x080066dd
 8006664:	080066dd 	.word	0x080066dd
 8006668:	080066c5 	.word	0x080066c5
 800666c:	080066dd 	.word	0x080066dd
 8006670:	080066dd 	.word	0x080066dd
 8006674:	080066dd 	.word	0x080066dd
 8006678:	080066dd 	.word	0x080066dd
 800667c:	080066dd 	.word	0x080066dd
 8006680:	080066dd 	.word	0x080066dd
 8006684:	080066dd 	.word	0x080066dd
 8006688:	080066cd 	.word	0x080066cd
 800668c:	080066dd 	.word	0x080066dd
 8006690:	080066dd 	.word	0x080066dd
 8006694:	080066dd 	.word	0x080066dd
 8006698:	080066dd 	.word	0x080066dd
 800669c:	080066dd 	.word	0x080066dd
 80066a0:	080066dd 	.word	0x080066dd
 80066a4:	080066dd 	.word	0x080066dd
 80066a8:	080066d5 	.word	0x080066d5
 80066ac:	2301      	movs	r3, #1
 80066ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066b2:	e050      	b.n	8006756 <UART_SetConfig+0x7ae>
 80066b4:	2304      	movs	r3, #4
 80066b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066ba:	e04c      	b.n	8006756 <UART_SetConfig+0x7ae>
 80066bc:	2308      	movs	r3, #8
 80066be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066c2:	e048      	b.n	8006756 <UART_SetConfig+0x7ae>
 80066c4:	2310      	movs	r3, #16
 80066c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066ca:	e044      	b.n	8006756 <UART_SetConfig+0x7ae>
 80066cc:	2320      	movs	r3, #32
 80066ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066d2:	e040      	b.n	8006756 <UART_SetConfig+0x7ae>
 80066d4:	2340      	movs	r3, #64	@ 0x40
 80066d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066da:	e03c      	b.n	8006756 <UART_SetConfig+0x7ae>
 80066dc:	2380      	movs	r3, #128	@ 0x80
 80066de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066e2:	e038      	b.n	8006756 <UART_SetConfig+0x7ae>
 80066e4:	697b      	ldr	r3, [r7, #20]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	4a71      	ldr	r2, [pc, #452]	@ (80068b0 <UART_SetConfig+0x908>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d130      	bne.n	8006750 <UART_SetConfig+0x7a8>
 80066ee:	4b6f      	ldr	r3, [pc, #444]	@ (80068ac <UART_SetConfig+0x904>)
 80066f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80066f2:	f003 0307 	and.w	r3, r3, #7
 80066f6:	2b05      	cmp	r3, #5
 80066f8:	d826      	bhi.n	8006748 <UART_SetConfig+0x7a0>
 80066fa:	a201      	add	r2, pc, #4	@ (adr r2, 8006700 <UART_SetConfig+0x758>)
 80066fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006700:	08006719 	.word	0x08006719
 8006704:	08006721 	.word	0x08006721
 8006708:	08006729 	.word	0x08006729
 800670c:	08006731 	.word	0x08006731
 8006710:	08006739 	.word	0x08006739
 8006714:	08006741 	.word	0x08006741
 8006718:	2302      	movs	r3, #2
 800671a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800671e:	e01a      	b.n	8006756 <UART_SetConfig+0x7ae>
 8006720:	2304      	movs	r3, #4
 8006722:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006726:	e016      	b.n	8006756 <UART_SetConfig+0x7ae>
 8006728:	2308      	movs	r3, #8
 800672a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800672e:	e012      	b.n	8006756 <UART_SetConfig+0x7ae>
 8006730:	2310      	movs	r3, #16
 8006732:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006736:	e00e      	b.n	8006756 <UART_SetConfig+0x7ae>
 8006738:	2320      	movs	r3, #32
 800673a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800673e:	e00a      	b.n	8006756 <UART_SetConfig+0x7ae>
 8006740:	2340      	movs	r3, #64	@ 0x40
 8006742:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006746:	e006      	b.n	8006756 <UART_SetConfig+0x7ae>
 8006748:	2380      	movs	r3, #128	@ 0x80
 800674a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800674e:	e002      	b.n	8006756 <UART_SetConfig+0x7ae>
 8006750:	2380      	movs	r3, #128	@ 0x80
 8006752:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006756:	697b      	ldr	r3, [r7, #20]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	4a55      	ldr	r2, [pc, #340]	@ (80068b0 <UART_SetConfig+0x908>)
 800675c:	4293      	cmp	r3, r2
 800675e:	f040 80f8 	bne.w	8006952 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006762:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006766:	2b20      	cmp	r3, #32
 8006768:	dc46      	bgt.n	80067f8 <UART_SetConfig+0x850>
 800676a:	2b02      	cmp	r3, #2
 800676c:	db75      	blt.n	800685a <UART_SetConfig+0x8b2>
 800676e:	3b02      	subs	r3, #2
 8006770:	2b1e      	cmp	r3, #30
 8006772:	d872      	bhi.n	800685a <UART_SetConfig+0x8b2>
 8006774:	a201      	add	r2, pc, #4	@ (adr r2, 800677c <UART_SetConfig+0x7d4>)
 8006776:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800677a:	bf00      	nop
 800677c:	080067ff 	.word	0x080067ff
 8006780:	0800685b 	.word	0x0800685b
 8006784:	08006807 	.word	0x08006807
 8006788:	0800685b 	.word	0x0800685b
 800678c:	0800685b 	.word	0x0800685b
 8006790:	0800685b 	.word	0x0800685b
 8006794:	08006817 	.word	0x08006817
 8006798:	0800685b 	.word	0x0800685b
 800679c:	0800685b 	.word	0x0800685b
 80067a0:	0800685b 	.word	0x0800685b
 80067a4:	0800685b 	.word	0x0800685b
 80067a8:	0800685b 	.word	0x0800685b
 80067ac:	0800685b 	.word	0x0800685b
 80067b0:	0800685b 	.word	0x0800685b
 80067b4:	08006827 	.word	0x08006827
 80067b8:	0800685b 	.word	0x0800685b
 80067bc:	0800685b 	.word	0x0800685b
 80067c0:	0800685b 	.word	0x0800685b
 80067c4:	0800685b 	.word	0x0800685b
 80067c8:	0800685b 	.word	0x0800685b
 80067cc:	0800685b 	.word	0x0800685b
 80067d0:	0800685b 	.word	0x0800685b
 80067d4:	0800685b 	.word	0x0800685b
 80067d8:	0800685b 	.word	0x0800685b
 80067dc:	0800685b 	.word	0x0800685b
 80067e0:	0800685b 	.word	0x0800685b
 80067e4:	0800685b 	.word	0x0800685b
 80067e8:	0800685b 	.word	0x0800685b
 80067ec:	0800685b 	.word	0x0800685b
 80067f0:	0800685b 	.word	0x0800685b
 80067f4:	0800684d 	.word	0x0800684d
 80067f8:	2b40      	cmp	r3, #64	@ 0x40
 80067fa:	d02a      	beq.n	8006852 <UART_SetConfig+0x8aa>
 80067fc:	e02d      	b.n	800685a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80067fe:	f7fe fc05 	bl	800500c <HAL_RCCEx_GetD3PCLK1Freq>
 8006802:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006804:	e02f      	b.n	8006866 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006806:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800680a:	4618      	mov	r0, r3
 800680c:	f7fe fc14 	bl	8005038 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006810:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006812:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006814:	e027      	b.n	8006866 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006816:	f107 0318 	add.w	r3, r7, #24
 800681a:	4618      	mov	r0, r3
 800681c:	f7fe fd60 	bl	80052e0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006820:	69fb      	ldr	r3, [r7, #28]
 8006822:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006824:	e01f      	b.n	8006866 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006826:	4b21      	ldr	r3, [pc, #132]	@ (80068ac <UART_SetConfig+0x904>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f003 0320 	and.w	r3, r3, #32
 800682e:	2b00      	cmp	r3, #0
 8006830:	d009      	beq.n	8006846 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006832:	4b1e      	ldr	r3, [pc, #120]	@ (80068ac <UART_SetConfig+0x904>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	08db      	lsrs	r3, r3, #3
 8006838:	f003 0303 	and.w	r3, r3, #3
 800683c:	4a1d      	ldr	r2, [pc, #116]	@ (80068b4 <UART_SetConfig+0x90c>)
 800683e:	fa22 f303 	lsr.w	r3, r2, r3
 8006842:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006844:	e00f      	b.n	8006866 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8006846:	4b1b      	ldr	r3, [pc, #108]	@ (80068b4 <UART_SetConfig+0x90c>)
 8006848:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800684a:	e00c      	b.n	8006866 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800684c:	4b1a      	ldr	r3, [pc, #104]	@ (80068b8 <UART_SetConfig+0x910>)
 800684e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006850:	e009      	b.n	8006866 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006852:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006856:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006858:	e005      	b.n	8006866 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800685a:	2300      	movs	r3, #0
 800685c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800685e:	2301      	movs	r3, #1
 8006860:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006864:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006866:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006868:	2b00      	cmp	r3, #0
 800686a:	f000 81ee 	beq.w	8006c4a <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800686e:	697b      	ldr	r3, [r7, #20]
 8006870:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006872:	4a12      	ldr	r2, [pc, #72]	@ (80068bc <UART_SetConfig+0x914>)
 8006874:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006878:	461a      	mov	r2, r3
 800687a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800687c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006880:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006882:	697b      	ldr	r3, [r7, #20]
 8006884:	685a      	ldr	r2, [r3, #4]
 8006886:	4613      	mov	r3, r2
 8006888:	005b      	lsls	r3, r3, #1
 800688a:	4413      	add	r3, r2
 800688c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800688e:	429a      	cmp	r2, r3
 8006890:	d305      	bcc.n	800689e <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006892:	697b      	ldr	r3, [r7, #20]
 8006894:	685b      	ldr	r3, [r3, #4]
 8006896:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006898:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800689a:	429a      	cmp	r2, r3
 800689c:	d910      	bls.n	80068c0 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800689e:	2301      	movs	r3, #1
 80068a0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80068a4:	e1d1      	b.n	8006c4a <UART_SetConfig+0xca2>
 80068a6:	bf00      	nop
 80068a8:	40011c00 	.word	0x40011c00
 80068ac:	58024400 	.word	0x58024400
 80068b0:	58000c00 	.word	0x58000c00
 80068b4:	03d09000 	.word	0x03d09000
 80068b8:	003d0900 	.word	0x003d0900
 80068bc:	0800f244 	.word	0x0800f244
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80068c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80068c2:	2200      	movs	r2, #0
 80068c4:	60bb      	str	r3, [r7, #8]
 80068c6:	60fa      	str	r2, [r7, #12]
 80068c8:	697b      	ldr	r3, [r7, #20]
 80068ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068cc:	4ac0      	ldr	r2, [pc, #768]	@ (8006bd0 <UART_SetConfig+0xc28>)
 80068ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80068d2:	b29b      	uxth	r3, r3
 80068d4:	2200      	movs	r2, #0
 80068d6:	603b      	str	r3, [r7, #0]
 80068d8:	607a      	str	r2, [r7, #4]
 80068da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80068de:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80068e2:	f7f9 ff19 	bl	8000718 <__aeabi_uldivmod>
 80068e6:	4602      	mov	r2, r0
 80068e8:	460b      	mov	r3, r1
 80068ea:	4610      	mov	r0, r2
 80068ec:	4619      	mov	r1, r3
 80068ee:	f04f 0200 	mov.w	r2, #0
 80068f2:	f04f 0300 	mov.w	r3, #0
 80068f6:	020b      	lsls	r3, r1, #8
 80068f8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80068fc:	0202      	lsls	r2, r0, #8
 80068fe:	6979      	ldr	r1, [r7, #20]
 8006900:	6849      	ldr	r1, [r1, #4]
 8006902:	0849      	lsrs	r1, r1, #1
 8006904:	2000      	movs	r0, #0
 8006906:	460c      	mov	r4, r1
 8006908:	4605      	mov	r5, r0
 800690a:	eb12 0804 	adds.w	r8, r2, r4
 800690e:	eb43 0905 	adc.w	r9, r3, r5
 8006912:	697b      	ldr	r3, [r7, #20]
 8006914:	685b      	ldr	r3, [r3, #4]
 8006916:	2200      	movs	r2, #0
 8006918:	469a      	mov	sl, r3
 800691a:	4693      	mov	fp, r2
 800691c:	4652      	mov	r2, sl
 800691e:	465b      	mov	r3, fp
 8006920:	4640      	mov	r0, r8
 8006922:	4649      	mov	r1, r9
 8006924:	f7f9 fef8 	bl	8000718 <__aeabi_uldivmod>
 8006928:	4602      	mov	r2, r0
 800692a:	460b      	mov	r3, r1
 800692c:	4613      	mov	r3, r2
 800692e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006930:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006932:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006936:	d308      	bcc.n	800694a <UART_SetConfig+0x9a2>
 8006938:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800693a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800693e:	d204      	bcs.n	800694a <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8006940:	697b      	ldr	r3, [r7, #20]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006946:	60da      	str	r2, [r3, #12]
 8006948:	e17f      	b.n	8006c4a <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800694a:	2301      	movs	r3, #1
 800694c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006950:	e17b      	b.n	8006c4a <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006952:	697b      	ldr	r3, [r7, #20]
 8006954:	69db      	ldr	r3, [r3, #28]
 8006956:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800695a:	f040 80bd 	bne.w	8006ad8 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800695e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006962:	2b20      	cmp	r3, #32
 8006964:	dc48      	bgt.n	80069f8 <UART_SetConfig+0xa50>
 8006966:	2b00      	cmp	r3, #0
 8006968:	db7b      	blt.n	8006a62 <UART_SetConfig+0xaba>
 800696a:	2b20      	cmp	r3, #32
 800696c:	d879      	bhi.n	8006a62 <UART_SetConfig+0xaba>
 800696e:	a201      	add	r2, pc, #4	@ (adr r2, 8006974 <UART_SetConfig+0x9cc>)
 8006970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006974:	080069ff 	.word	0x080069ff
 8006978:	08006a07 	.word	0x08006a07
 800697c:	08006a63 	.word	0x08006a63
 8006980:	08006a63 	.word	0x08006a63
 8006984:	08006a0f 	.word	0x08006a0f
 8006988:	08006a63 	.word	0x08006a63
 800698c:	08006a63 	.word	0x08006a63
 8006990:	08006a63 	.word	0x08006a63
 8006994:	08006a1f 	.word	0x08006a1f
 8006998:	08006a63 	.word	0x08006a63
 800699c:	08006a63 	.word	0x08006a63
 80069a0:	08006a63 	.word	0x08006a63
 80069a4:	08006a63 	.word	0x08006a63
 80069a8:	08006a63 	.word	0x08006a63
 80069ac:	08006a63 	.word	0x08006a63
 80069b0:	08006a63 	.word	0x08006a63
 80069b4:	08006a2f 	.word	0x08006a2f
 80069b8:	08006a63 	.word	0x08006a63
 80069bc:	08006a63 	.word	0x08006a63
 80069c0:	08006a63 	.word	0x08006a63
 80069c4:	08006a63 	.word	0x08006a63
 80069c8:	08006a63 	.word	0x08006a63
 80069cc:	08006a63 	.word	0x08006a63
 80069d0:	08006a63 	.word	0x08006a63
 80069d4:	08006a63 	.word	0x08006a63
 80069d8:	08006a63 	.word	0x08006a63
 80069dc:	08006a63 	.word	0x08006a63
 80069e0:	08006a63 	.word	0x08006a63
 80069e4:	08006a63 	.word	0x08006a63
 80069e8:	08006a63 	.word	0x08006a63
 80069ec:	08006a63 	.word	0x08006a63
 80069f0:	08006a63 	.word	0x08006a63
 80069f4:	08006a55 	.word	0x08006a55
 80069f8:	2b40      	cmp	r3, #64	@ 0x40
 80069fa:	d02e      	beq.n	8006a5a <UART_SetConfig+0xab2>
 80069fc:	e031      	b.n	8006a62 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80069fe:	f7fd f8d9 	bl	8003bb4 <HAL_RCC_GetPCLK1Freq>
 8006a02:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006a04:	e033      	b.n	8006a6e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006a06:	f7fd f8eb 	bl	8003be0 <HAL_RCC_GetPCLK2Freq>
 8006a0a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006a0c:	e02f      	b.n	8006a6e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006a0e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006a12:	4618      	mov	r0, r3
 8006a14:	f7fe fb10 	bl	8005038 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006a18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a1c:	e027      	b.n	8006a6e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006a1e:	f107 0318 	add.w	r3, r7, #24
 8006a22:	4618      	mov	r0, r3
 8006a24:	f7fe fc5c 	bl	80052e0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006a28:	69fb      	ldr	r3, [r7, #28]
 8006a2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a2c:	e01f      	b.n	8006a6e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006a2e:	4b69      	ldr	r3, [pc, #420]	@ (8006bd4 <UART_SetConfig+0xc2c>)
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f003 0320 	and.w	r3, r3, #32
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d009      	beq.n	8006a4e <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006a3a:	4b66      	ldr	r3, [pc, #408]	@ (8006bd4 <UART_SetConfig+0xc2c>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	08db      	lsrs	r3, r3, #3
 8006a40:	f003 0303 	and.w	r3, r3, #3
 8006a44:	4a64      	ldr	r2, [pc, #400]	@ (8006bd8 <UART_SetConfig+0xc30>)
 8006a46:	fa22 f303 	lsr.w	r3, r2, r3
 8006a4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006a4c:	e00f      	b.n	8006a6e <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8006a4e:	4b62      	ldr	r3, [pc, #392]	@ (8006bd8 <UART_SetConfig+0xc30>)
 8006a50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a52:	e00c      	b.n	8006a6e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006a54:	4b61      	ldr	r3, [pc, #388]	@ (8006bdc <UART_SetConfig+0xc34>)
 8006a56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a58:	e009      	b.n	8006a6e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a5a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006a5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a60:	e005      	b.n	8006a6e <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8006a62:	2300      	movs	r3, #0
 8006a64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006a66:	2301      	movs	r3, #1
 8006a68:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006a6c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006a6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	f000 80ea 	beq.w	8006c4a <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006a76:	697b      	ldr	r3, [r7, #20]
 8006a78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a7a:	4a55      	ldr	r2, [pc, #340]	@ (8006bd0 <UART_SetConfig+0xc28>)
 8006a7c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006a80:	461a      	mov	r2, r3
 8006a82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a84:	fbb3 f3f2 	udiv	r3, r3, r2
 8006a88:	005a      	lsls	r2, r3, #1
 8006a8a:	697b      	ldr	r3, [r7, #20]
 8006a8c:	685b      	ldr	r3, [r3, #4]
 8006a8e:	085b      	lsrs	r3, r3, #1
 8006a90:	441a      	add	r2, r3
 8006a92:	697b      	ldr	r3, [r7, #20]
 8006a94:	685b      	ldr	r3, [r3, #4]
 8006a96:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a9a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a9e:	2b0f      	cmp	r3, #15
 8006aa0:	d916      	bls.n	8006ad0 <UART_SetConfig+0xb28>
 8006aa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006aa4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006aa8:	d212      	bcs.n	8006ad0 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006aaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006aac:	b29b      	uxth	r3, r3
 8006aae:	f023 030f 	bic.w	r3, r3, #15
 8006ab2:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006ab4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ab6:	085b      	lsrs	r3, r3, #1
 8006ab8:	b29b      	uxth	r3, r3
 8006aba:	f003 0307 	and.w	r3, r3, #7
 8006abe:	b29a      	uxth	r2, r3
 8006ac0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006ac2:	4313      	orrs	r3, r2
 8006ac4:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8006ac6:	697b      	ldr	r3, [r7, #20]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8006acc:	60da      	str	r2, [r3, #12]
 8006ace:	e0bc      	b.n	8006c4a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8006ad0:	2301      	movs	r3, #1
 8006ad2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006ad6:	e0b8      	b.n	8006c4a <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006ad8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006adc:	2b20      	cmp	r3, #32
 8006ade:	dc4b      	bgt.n	8006b78 <UART_SetConfig+0xbd0>
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	f2c0 8087 	blt.w	8006bf4 <UART_SetConfig+0xc4c>
 8006ae6:	2b20      	cmp	r3, #32
 8006ae8:	f200 8084 	bhi.w	8006bf4 <UART_SetConfig+0xc4c>
 8006aec:	a201      	add	r2, pc, #4	@ (adr r2, 8006af4 <UART_SetConfig+0xb4c>)
 8006aee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006af2:	bf00      	nop
 8006af4:	08006b7f 	.word	0x08006b7f
 8006af8:	08006b87 	.word	0x08006b87
 8006afc:	08006bf5 	.word	0x08006bf5
 8006b00:	08006bf5 	.word	0x08006bf5
 8006b04:	08006b8f 	.word	0x08006b8f
 8006b08:	08006bf5 	.word	0x08006bf5
 8006b0c:	08006bf5 	.word	0x08006bf5
 8006b10:	08006bf5 	.word	0x08006bf5
 8006b14:	08006b9f 	.word	0x08006b9f
 8006b18:	08006bf5 	.word	0x08006bf5
 8006b1c:	08006bf5 	.word	0x08006bf5
 8006b20:	08006bf5 	.word	0x08006bf5
 8006b24:	08006bf5 	.word	0x08006bf5
 8006b28:	08006bf5 	.word	0x08006bf5
 8006b2c:	08006bf5 	.word	0x08006bf5
 8006b30:	08006bf5 	.word	0x08006bf5
 8006b34:	08006baf 	.word	0x08006baf
 8006b38:	08006bf5 	.word	0x08006bf5
 8006b3c:	08006bf5 	.word	0x08006bf5
 8006b40:	08006bf5 	.word	0x08006bf5
 8006b44:	08006bf5 	.word	0x08006bf5
 8006b48:	08006bf5 	.word	0x08006bf5
 8006b4c:	08006bf5 	.word	0x08006bf5
 8006b50:	08006bf5 	.word	0x08006bf5
 8006b54:	08006bf5 	.word	0x08006bf5
 8006b58:	08006bf5 	.word	0x08006bf5
 8006b5c:	08006bf5 	.word	0x08006bf5
 8006b60:	08006bf5 	.word	0x08006bf5
 8006b64:	08006bf5 	.word	0x08006bf5
 8006b68:	08006bf5 	.word	0x08006bf5
 8006b6c:	08006bf5 	.word	0x08006bf5
 8006b70:	08006bf5 	.word	0x08006bf5
 8006b74:	08006be7 	.word	0x08006be7
 8006b78:	2b40      	cmp	r3, #64	@ 0x40
 8006b7a:	d037      	beq.n	8006bec <UART_SetConfig+0xc44>
 8006b7c:	e03a      	b.n	8006bf4 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b7e:	f7fd f819 	bl	8003bb4 <HAL_RCC_GetPCLK1Freq>
 8006b82:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006b84:	e03c      	b.n	8006c00 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b86:	f7fd f82b 	bl	8003be0 <HAL_RCC_GetPCLK2Freq>
 8006b8a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006b8c:	e038      	b.n	8006c00 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b8e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006b92:	4618      	mov	r0, r3
 8006b94:	f7fe fa50 	bl	8005038 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006b98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b9c:	e030      	b.n	8006c00 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006b9e:	f107 0318 	add.w	r3, r7, #24
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	f7fe fb9c 	bl	80052e0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006ba8:	69fb      	ldr	r3, [r7, #28]
 8006baa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006bac:	e028      	b.n	8006c00 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006bae:	4b09      	ldr	r3, [pc, #36]	@ (8006bd4 <UART_SetConfig+0xc2c>)
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f003 0320 	and.w	r3, r3, #32
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d012      	beq.n	8006be0 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006bba:	4b06      	ldr	r3, [pc, #24]	@ (8006bd4 <UART_SetConfig+0xc2c>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	08db      	lsrs	r3, r3, #3
 8006bc0:	f003 0303 	and.w	r3, r3, #3
 8006bc4:	4a04      	ldr	r2, [pc, #16]	@ (8006bd8 <UART_SetConfig+0xc30>)
 8006bc6:	fa22 f303 	lsr.w	r3, r2, r3
 8006bca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006bcc:	e018      	b.n	8006c00 <UART_SetConfig+0xc58>
 8006bce:	bf00      	nop
 8006bd0:	0800f244 	.word	0x0800f244
 8006bd4:	58024400 	.word	0x58024400
 8006bd8:	03d09000 	.word	0x03d09000
 8006bdc:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8006be0:	4b24      	ldr	r3, [pc, #144]	@ (8006c74 <UART_SetConfig+0xccc>)
 8006be2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006be4:	e00c      	b.n	8006c00 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006be6:	4b24      	ldr	r3, [pc, #144]	@ (8006c78 <UART_SetConfig+0xcd0>)
 8006be8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006bea:	e009      	b.n	8006c00 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006bec:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006bf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006bf2:	e005      	b.n	8006c00 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006bf8:	2301      	movs	r3, #1
 8006bfa:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006bfe:	bf00      	nop
    }

    if (pclk != 0U)
 8006c00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d021      	beq.n	8006c4a <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006c06:	697b      	ldr	r3, [r7, #20]
 8006c08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c0a:	4a1c      	ldr	r2, [pc, #112]	@ (8006c7c <UART_SetConfig+0xcd4>)
 8006c0c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006c10:	461a      	mov	r2, r3
 8006c12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c14:	fbb3 f2f2 	udiv	r2, r3, r2
 8006c18:	697b      	ldr	r3, [r7, #20]
 8006c1a:	685b      	ldr	r3, [r3, #4]
 8006c1c:	085b      	lsrs	r3, r3, #1
 8006c1e:	441a      	add	r2, r3
 8006c20:	697b      	ldr	r3, [r7, #20]
 8006c22:	685b      	ldr	r3, [r3, #4]
 8006c24:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c28:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c2c:	2b0f      	cmp	r3, #15
 8006c2e:	d909      	bls.n	8006c44 <UART_SetConfig+0xc9c>
 8006c30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c32:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006c36:	d205      	bcs.n	8006c44 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006c38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c3a:	b29a      	uxth	r2, r3
 8006c3c:	697b      	ldr	r3, [r7, #20]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	60da      	str	r2, [r3, #12]
 8006c42:	e002      	b.n	8006c4a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8006c44:	2301      	movs	r3, #1
 8006c46:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006c4a:	697b      	ldr	r3, [r7, #20]
 8006c4c:	2201      	movs	r2, #1
 8006c4e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006c52:	697b      	ldr	r3, [r7, #20]
 8006c54:	2201      	movs	r2, #1
 8006c56:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006c5a:	697b      	ldr	r3, [r7, #20]
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006c60:	697b      	ldr	r3, [r7, #20]
 8006c62:	2200      	movs	r2, #0
 8006c64:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006c66:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	3748      	adds	r7, #72	@ 0x48
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006c74:	03d09000 	.word	0x03d09000
 8006c78:	003d0900 	.word	0x003d0900
 8006c7c:	0800f244 	.word	0x0800f244

08006c80 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006c80:	b480      	push	{r7}
 8006c82:	b083      	sub	sp, #12
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c8c:	f003 0308 	and.w	r3, r3, #8
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d00a      	beq.n	8006caa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	685b      	ldr	r3, [r3, #4]
 8006c9a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	430a      	orrs	r2, r1
 8006ca8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cae:	f003 0301 	and.w	r3, r3, #1
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d00a      	beq.n	8006ccc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	685b      	ldr	r3, [r3, #4]
 8006cbc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	430a      	orrs	r2, r1
 8006cca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cd0:	f003 0302 	and.w	r3, r3, #2
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d00a      	beq.n	8006cee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	685b      	ldr	r3, [r3, #4]
 8006cde:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	430a      	orrs	r2, r1
 8006cec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cf2:	f003 0304 	and.w	r3, r3, #4
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d00a      	beq.n	8006d10 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	685b      	ldr	r3, [r3, #4]
 8006d00:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	430a      	orrs	r2, r1
 8006d0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d14:	f003 0310 	and.w	r3, r3, #16
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d00a      	beq.n	8006d32 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	689b      	ldr	r3, [r3, #8]
 8006d22:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	430a      	orrs	r2, r1
 8006d30:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d36:	f003 0320 	and.w	r3, r3, #32
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d00a      	beq.n	8006d54 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	689b      	ldr	r3, [r3, #8]
 8006d44:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	430a      	orrs	r2, r1
 8006d52:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d01a      	beq.n	8006d96 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	685b      	ldr	r3, [r3, #4]
 8006d66:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	430a      	orrs	r2, r1
 8006d74:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d7a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006d7e:	d10a      	bne.n	8006d96 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	685b      	ldr	r3, [r3, #4]
 8006d86:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	430a      	orrs	r2, r1
 8006d94:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d00a      	beq.n	8006db8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	685b      	ldr	r3, [r3, #4]
 8006da8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	430a      	orrs	r2, r1
 8006db6:	605a      	str	r2, [r3, #4]
  }
}
 8006db8:	bf00      	nop
 8006dba:	370c      	adds	r7, #12
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc2:	4770      	bx	lr

08006dc4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b098      	sub	sp, #96	@ 0x60
 8006dc8:	af02      	add	r7, sp, #8
 8006dca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2200      	movs	r2, #0
 8006dd0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006dd4:	f7fa fdbe 	bl	8001954 <HAL_GetTick>
 8006dd8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f003 0308 	and.w	r3, r3, #8
 8006de4:	2b08      	cmp	r3, #8
 8006de6:	d12f      	bne.n	8006e48 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006de8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006dec:	9300      	str	r3, [sp, #0]
 8006dee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006df0:	2200      	movs	r2, #0
 8006df2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006df6:	6878      	ldr	r0, [r7, #4]
 8006df8:	f000 f88e 	bl	8006f18 <UART_WaitOnFlagUntilTimeout>
 8006dfc:	4603      	mov	r3, r0
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d022      	beq.n	8006e48 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e0a:	e853 3f00 	ldrex	r3, [r3]
 8006e0e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006e10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e12:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006e16:	653b      	str	r3, [r7, #80]	@ 0x50
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	461a      	mov	r2, r3
 8006e1e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006e20:	647b      	str	r3, [r7, #68]	@ 0x44
 8006e22:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e24:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006e26:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006e28:	e841 2300 	strex	r3, r2, [r1]
 8006e2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006e2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d1e6      	bne.n	8006e02 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2220      	movs	r2, #32
 8006e38:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2200      	movs	r2, #0
 8006e40:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e44:	2303      	movs	r3, #3
 8006e46:	e063      	b.n	8006f10 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f003 0304 	and.w	r3, r3, #4
 8006e52:	2b04      	cmp	r3, #4
 8006e54:	d149      	bne.n	8006eea <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e56:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006e5a:	9300      	str	r3, [sp, #0]
 8006e5c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006e5e:	2200      	movs	r2, #0
 8006e60:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006e64:	6878      	ldr	r0, [r7, #4]
 8006e66:	f000 f857 	bl	8006f18 <UART_WaitOnFlagUntilTimeout>
 8006e6a:	4603      	mov	r3, r0
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d03c      	beq.n	8006eea <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e78:	e853 3f00 	ldrex	r3, [r3]
 8006e7c:	623b      	str	r3, [r7, #32]
   return(result);
 8006e7e:	6a3b      	ldr	r3, [r7, #32]
 8006e80:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006e84:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	461a      	mov	r2, r3
 8006e8c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006e8e:	633b      	str	r3, [r7, #48]	@ 0x30
 8006e90:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e92:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006e94:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006e96:	e841 2300 	strex	r3, r2, [r1]
 8006e9a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006e9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d1e6      	bne.n	8006e70 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	3308      	adds	r3, #8
 8006ea8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eaa:	693b      	ldr	r3, [r7, #16]
 8006eac:	e853 3f00 	ldrex	r3, [r3]
 8006eb0:	60fb      	str	r3, [r7, #12]
   return(result);
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	f023 0301 	bic.w	r3, r3, #1
 8006eb8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	3308      	adds	r3, #8
 8006ec0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006ec2:	61fa      	str	r2, [r7, #28]
 8006ec4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ec6:	69b9      	ldr	r1, [r7, #24]
 8006ec8:	69fa      	ldr	r2, [r7, #28]
 8006eca:	e841 2300 	strex	r3, r2, [r1]
 8006ece:	617b      	str	r3, [r7, #20]
   return(result);
 8006ed0:	697b      	ldr	r3, [r7, #20]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d1e5      	bne.n	8006ea2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2220      	movs	r2, #32
 8006eda:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006ee6:	2303      	movs	r3, #3
 8006ee8:	e012      	b.n	8006f10 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2220      	movs	r2, #32
 8006eee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2220      	movs	r2, #32
 8006ef6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2200      	movs	r2, #0
 8006efe:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2200      	movs	r2, #0
 8006f04:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2200      	movs	r2, #0
 8006f0a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006f0e:	2300      	movs	r3, #0
}
 8006f10:	4618      	mov	r0, r3
 8006f12:	3758      	adds	r7, #88	@ 0x58
 8006f14:	46bd      	mov	sp, r7
 8006f16:	bd80      	pop	{r7, pc}

08006f18 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b084      	sub	sp, #16
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	60f8      	str	r0, [r7, #12]
 8006f20:	60b9      	str	r1, [r7, #8]
 8006f22:	603b      	str	r3, [r7, #0]
 8006f24:	4613      	mov	r3, r2
 8006f26:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f28:	e04f      	b.n	8006fca <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f2a:	69bb      	ldr	r3, [r7, #24]
 8006f2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f30:	d04b      	beq.n	8006fca <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f32:	f7fa fd0f 	bl	8001954 <HAL_GetTick>
 8006f36:	4602      	mov	r2, r0
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	1ad3      	subs	r3, r2, r3
 8006f3c:	69ba      	ldr	r2, [r7, #24]
 8006f3e:	429a      	cmp	r2, r3
 8006f40:	d302      	bcc.n	8006f48 <UART_WaitOnFlagUntilTimeout+0x30>
 8006f42:	69bb      	ldr	r3, [r7, #24]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d101      	bne.n	8006f4c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006f48:	2303      	movs	r3, #3
 8006f4a:	e04e      	b.n	8006fea <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f003 0304 	and.w	r3, r3, #4
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d037      	beq.n	8006fca <UART_WaitOnFlagUntilTimeout+0xb2>
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	2b80      	cmp	r3, #128	@ 0x80
 8006f5e:	d034      	beq.n	8006fca <UART_WaitOnFlagUntilTimeout+0xb2>
 8006f60:	68bb      	ldr	r3, [r7, #8]
 8006f62:	2b40      	cmp	r3, #64	@ 0x40
 8006f64:	d031      	beq.n	8006fca <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	69db      	ldr	r3, [r3, #28]
 8006f6c:	f003 0308 	and.w	r3, r3, #8
 8006f70:	2b08      	cmp	r3, #8
 8006f72:	d110      	bne.n	8006f96 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	2208      	movs	r2, #8
 8006f7a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006f7c:	68f8      	ldr	r0, [r7, #12]
 8006f7e:	f000 f839 	bl	8006ff4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	2208      	movs	r2, #8
 8006f86:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006f92:	2301      	movs	r3, #1
 8006f94:	e029      	b.n	8006fea <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	69db      	ldr	r3, [r3, #28]
 8006f9c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006fa0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006fa4:	d111      	bne.n	8006fca <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006fae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006fb0:	68f8      	ldr	r0, [r7, #12]
 8006fb2:	f000 f81f 	bl	8006ff4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	2220      	movs	r2, #32
 8006fba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006fc6:	2303      	movs	r3, #3
 8006fc8:	e00f      	b.n	8006fea <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	69da      	ldr	r2, [r3, #28]
 8006fd0:	68bb      	ldr	r3, [r7, #8]
 8006fd2:	4013      	ands	r3, r2
 8006fd4:	68ba      	ldr	r2, [r7, #8]
 8006fd6:	429a      	cmp	r2, r3
 8006fd8:	bf0c      	ite	eq
 8006fda:	2301      	moveq	r3, #1
 8006fdc:	2300      	movne	r3, #0
 8006fde:	b2db      	uxtb	r3, r3
 8006fe0:	461a      	mov	r2, r3
 8006fe2:	79fb      	ldrb	r3, [r7, #7]
 8006fe4:	429a      	cmp	r2, r3
 8006fe6:	d0a0      	beq.n	8006f2a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006fe8:	2300      	movs	r3, #0
}
 8006fea:	4618      	mov	r0, r3
 8006fec:	3710      	adds	r7, #16
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	bd80      	pop	{r7, pc}
	...

08006ff4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006ff4:	b480      	push	{r7}
 8006ff6:	b095      	sub	sp, #84	@ 0x54
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007002:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007004:	e853 3f00 	ldrex	r3, [r3]
 8007008:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800700a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800700c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007010:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	461a      	mov	r2, r3
 8007018:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800701a:	643b      	str	r3, [r7, #64]	@ 0x40
 800701c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800701e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007020:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007022:	e841 2300 	strex	r3, r2, [r1]
 8007026:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007028:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800702a:	2b00      	cmp	r3, #0
 800702c:	d1e6      	bne.n	8006ffc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	3308      	adds	r3, #8
 8007034:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007036:	6a3b      	ldr	r3, [r7, #32]
 8007038:	e853 3f00 	ldrex	r3, [r3]
 800703c:	61fb      	str	r3, [r7, #28]
   return(result);
 800703e:	69fa      	ldr	r2, [r7, #28]
 8007040:	4b1e      	ldr	r3, [pc, #120]	@ (80070bc <UART_EndRxTransfer+0xc8>)
 8007042:	4013      	ands	r3, r2
 8007044:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	3308      	adds	r3, #8
 800704c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800704e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007050:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007052:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007054:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007056:	e841 2300 	strex	r3, r2, [r1]
 800705a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800705c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800705e:	2b00      	cmp	r3, #0
 8007060:	d1e5      	bne.n	800702e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007066:	2b01      	cmp	r3, #1
 8007068:	d118      	bne.n	800709c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	e853 3f00 	ldrex	r3, [r3]
 8007076:	60bb      	str	r3, [r7, #8]
   return(result);
 8007078:	68bb      	ldr	r3, [r7, #8]
 800707a:	f023 0310 	bic.w	r3, r3, #16
 800707e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	461a      	mov	r2, r3
 8007086:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007088:	61bb      	str	r3, [r7, #24]
 800708a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800708c:	6979      	ldr	r1, [r7, #20]
 800708e:	69ba      	ldr	r2, [r7, #24]
 8007090:	e841 2300 	strex	r3, r2, [r1]
 8007094:	613b      	str	r3, [r7, #16]
   return(result);
 8007096:	693b      	ldr	r3, [r7, #16]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d1e6      	bne.n	800706a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2220      	movs	r2, #32
 80070a0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2200      	movs	r2, #0
 80070a8:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2200      	movs	r2, #0
 80070ae:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80070b0:	bf00      	nop
 80070b2:	3754      	adds	r7, #84	@ 0x54
 80070b4:	46bd      	mov	sp, r7
 80070b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ba:	4770      	bx	lr
 80070bc:	effffffe 	.word	0xeffffffe

080070c0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80070c0:	b480      	push	{r7}
 80070c2:	b085      	sub	sp, #20
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80070ce:	2b01      	cmp	r3, #1
 80070d0:	d101      	bne.n	80070d6 <HAL_UARTEx_DisableFifoMode+0x16>
 80070d2:	2302      	movs	r3, #2
 80070d4:	e027      	b.n	8007126 <HAL_UARTEx_DisableFifoMode+0x66>
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2201      	movs	r2, #1
 80070da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2224      	movs	r2, #36	@ 0x24
 80070e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	681a      	ldr	r2, [r3, #0]
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f022 0201 	bic.w	r2, r2, #1
 80070fc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007104:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2200      	movs	r2, #0
 800710a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	68fa      	ldr	r2, [r7, #12]
 8007112:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2220      	movs	r2, #32
 8007118:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2200      	movs	r2, #0
 8007120:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007124:	2300      	movs	r3, #0
}
 8007126:	4618      	mov	r0, r3
 8007128:	3714      	adds	r7, #20
 800712a:	46bd      	mov	sp, r7
 800712c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007130:	4770      	bx	lr

08007132 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007132:	b580      	push	{r7, lr}
 8007134:	b084      	sub	sp, #16
 8007136:	af00      	add	r7, sp, #0
 8007138:	6078      	str	r0, [r7, #4]
 800713a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007142:	2b01      	cmp	r3, #1
 8007144:	d101      	bne.n	800714a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007146:	2302      	movs	r3, #2
 8007148:	e02d      	b.n	80071a6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2201      	movs	r2, #1
 800714e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2224      	movs	r2, #36	@ 0x24
 8007156:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	681a      	ldr	r2, [r3, #0]
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f022 0201 	bic.w	r2, r2, #1
 8007170:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	689b      	ldr	r3, [r3, #8]
 8007178:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	683a      	ldr	r2, [r7, #0]
 8007182:	430a      	orrs	r2, r1
 8007184:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007186:	6878      	ldr	r0, [r7, #4]
 8007188:	f000 f850 	bl	800722c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	68fa      	ldr	r2, [r7, #12]
 8007192:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2220      	movs	r2, #32
 8007198:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2200      	movs	r2, #0
 80071a0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80071a4:	2300      	movs	r3, #0
}
 80071a6:	4618      	mov	r0, r3
 80071a8:	3710      	adds	r7, #16
 80071aa:	46bd      	mov	sp, r7
 80071ac:	bd80      	pop	{r7, pc}

080071ae <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80071ae:	b580      	push	{r7, lr}
 80071b0:	b084      	sub	sp, #16
 80071b2:	af00      	add	r7, sp, #0
 80071b4:	6078      	str	r0, [r7, #4]
 80071b6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80071be:	2b01      	cmp	r3, #1
 80071c0:	d101      	bne.n	80071c6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80071c2:	2302      	movs	r3, #2
 80071c4:	e02d      	b.n	8007222 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2201      	movs	r2, #1
 80071ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2224      	movs	r2, #36	@ 0x24
 80071d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	681a      	ldr	r2, [r3, #0]
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f022 0201 	bic.w	r2, r2, #1
 80071ec:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	689b      	ldr	r3, [r3, #8]
 80071f4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	683a      	ldr	r2, [r7, #0]
 80071fe:	430a      	orrs	r2, r1
 8007200:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007202:	6878      	ldr	r0, [r7, #4]
 8007204:	f000 f812 	bl	800722c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	68fa      	ldr	r2, [r7, #12]
 800720e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2220      	movs	r2, #32
 8007214:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2200      	movs	r2, #0
 800721c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007220:	2300      	movs	r3, #0
}
 8007222:	4618      	mov	r0, r3
 8007224:	3710      	adds	r7, #16
 8007226:	46bd      	mov	sp, r7
 8007228:	bd80      	pop	{r7, pc}
	...

0800722c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800722c:	b480      	push	{r7}
 800722e:	b085      	sub	sp, #20
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007238:	2b00      	cmp	r3, #0
 800723a:	d108      	bne.n	800724e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2201      	movs	r2, #1
 8007240:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2201      	movs	r2, #1
 8007248:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800724c:	e031      	b.n	80072b2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800724e:	2310      	movs	r3, #16
 8007250:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007252:	2310      	movs	r3, #16
 8007254:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	689b      	ldr	r3, [r3, #8]
 800725c:	0e5b      	lsrs	r3, r3, #25
 800725e:	b2db      	uxtb	r3, r3
 8007260:	f003 0307 	and.w	r3, r3, #7
 8007264:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	689b      	ldr	r3, [r3, #8]
 800726c:	0f5b      	lsrs	r3, r3, #29
 800726e:	b2db      	uxtb	r3, r3
 8007270:	f003 0307 	and.w	r3, r3, #7
 8007274:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007276:	7bbb      	ldrb	r3, [r7, #14]
 8007278:	7b3a      	ldrb	r2, [r7, #12]
 800727a:	4911      	ldr	r1, [pc, #68]	@ (80072c0 <UARTEx_SetNbDataToProcess+0x94>)
 800727c:	5c8a      	ldrb	r2, [r1, r2]
 800727e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007282:	7b3a      	ldrb	r2, [r7, #12]
 8007284:	490f      	ldr	r1, [pc, #60]	@ (80072c4 <UARTEx_SetNbDataToProcess+0x98>)
 8007286:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007288:	fb93 f3f2 	sdiv	r3, r3, r2
 800728c:	b29a      	uxth	r2, r3
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007294:	7bfb      	ldrb	r3, [r7, #15]
 8007296:	7b7a      	ldrb	r2, [r7, #13]
 8007298:	4909      	ldr	r1, [pc, #36]	@ (80072c0 <UARTEx_SetNbDataToProcess+0x94>)
 800729a:	5c8a      	ldrb	r2, [r1, r2]
 800729c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80072a0:	7b7a      	ldrb	r2, [r7, #13]
 80072a2:	4908      	ldr	r1, [pc, #32]	@ (80072c4 <UARTEx_SetNbDataToProcess+0x98>)
 80072a4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80072a6:	fb93 f3f2 	sdiv	r3, r3, r2
 80072aa:	b29a      	uxth	r2, r3
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80072b2:	bf00      	nop
 80072b4:	3714      	adds	r7, #20
 80072b6:	46bd      	mov	sp, r7
 80072b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072bc:	4770      	bx	lr
 80072be:	bf00      	nop
 80072c0:	0800f25c 	.word	0x0800f25c
 80072c4:	0800f264 	.word	0x0800f264

080072c8 <__NVIC_SetPriority>:
{
 80072c8:	b480      	push	{r7}
 80072ca:	b083      	sub	sp, #12
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	4603      	mov	r3, r0
 80072d0:	6039      	str	r1, [r7, #0]
 80072d2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80072d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	db0a      	blt.n	80072f2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	b2da      	uxtb	r2, r3
 80072e0:	490c      	ldr	r1, [pc, #48]	@ (8007314 <__NVIC_SetPriority+0x4c>)
 80072e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80072e6:	0112      	lsls	r2, r2, #4
 80072e8:	b2d2      	uxtb	r2, r2
 80072ea:	440b      	add	r3, r1
 80072ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80072f0:	e00a      	b.n	8007308 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	b2da      	uxtb	r2, r3
 80072f6:	4908      	ldr	r1, [pc, #32]	@ (8007318 <__NVIC_SetPriority+0x50>)
 80072f8:	88fb      	ldrh	r3, [r7, #6]
 80072fa:	f003 030f 	and.w	r3, r3, #15
 80072fe:	3b04      	subs	r3, #4
 8007300:	0112      	lsls	r2, r2, #4
 8007302:	b2d2      	uxtb	r2, r2
 8007304:	440b      	add	r3, r1
 8007306:	761a      	strb	r2, [r3, #24]
}
 8007308:	bf00      	nop
 800730a:	370c      	adds	r7, #12
 800730c:	46bd      	mov	sp, r7
 800730e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007312:	4770      	bx	lr
 8007314:	e000e100 	.word	0xe000e100
 8007318:	e000ed00 	.word	0xe000ed00

0800731c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800731c:	b580      	push	{r7, lr}
 800731e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007320:	4b05      	ldr	r3, [pc, #20]	@ (8007338 <SysTick_Handler+0x1c>)
 8007322:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007324:	f002 f894 	bl	8009450 <xTaskGetSchedulerState>
 8007328:	4603      	mov	r3, r0
 800732a:	2b01      	cmp	r3, #1
 800732c:	d001      	beq.n	8007332 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800732e:	f002 ff8b 	bl	800a248 <xPortSysTickHandler>
  }
}
 8007332:	bf00      	nop
 8007334:	bd80      	pop	{r7, pc}
 8007336:	bf00      	nop
 8007338:	e000e010 	.word	0xe000e010

0800733c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800733c:	b580      	push	{r7, lr}
 800733e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007340:	2100      	movs	r1, #0
 8007342:	f06f 0004 	mvn.w	r0, #4
 8007346:	f7ff ffbf 	bl	80072c8 <__NVIC_SetPriority>
#endif
}
 800734a:	bf00      	nop
 800734c:	bd80      	pop	{r7, pc}
	...

08007350 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007350:	b480      	push	{r7}
 8007352:	b083      	sub	sp, #12
 8007354:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007356:	f3ef 8305 	mrs	r3, IPSR
 800735a:	603b      	str	r3, [r7, #0]
  return(result);
 800735c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800735e:	2b00      	cmp	r3, #0
 8007360:	d003      	beq.n	800736a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007362:	f06f 0305 	mvn.w	r3, #5
 8007366:	607b      	str	r3, [r7, #4]
 8007368:	e00c      	b.n	8007384 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800736a:	4b0a      	ldr	r3, [pc, #40]	@ (8007394 <osKernelInitialize+0x44>)
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d105      	bne.n	800737e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007372:	4b08      	ldr	r3, [pc, #32]	@ (8007394 <osKernelInitialize+0x44>)
 8007374:	2201      	movs	r2, #1
 8007376:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007378:	2300      	movs	r3, #0
 800737a:	607b      	str	r3, [r7, #4]
 800737c:	e002      	b.n	8007384 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800737e:	f04f 33ff 	mov.w	r3, #4294967295
 8007382:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007384:	687b      	ldr	r3, [r7, #4]
}
 8007386:	4618      	mov	r0, r3
 8007388:	370c      	adds	r7, #12
 800738a:	46bd      	mov	sp, r7
 800738c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007390:	4770      	bx	lr
 8007392:	bf00      	nop
 8007394:	24000348 	.word	0x24000348

08007398 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007398:	b580      	push	{r7, lr}
 800739a:	b082      	sub	sp, #8
 800739c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800739e:	f3ef 8305 	mrs	r3, IPSR
 80073a2:	603b      	str	r3, [r7, #0]
  return(result);
 80073a4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d003      	beq.n	80073b2 <osKernelStart+0x1a>
    stat = osErrorISR;
 80073aa:	f06f 0305 	mvn.w	r3, #5
 80073ae:	607b      	str	r3, [r7, #4]
 80073b0:	e010      	b.n	80073d4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80073b2:	4b0b      	ldr	r3, [pc, #44]	@ (80073e0 <osKernelStart+0x48>)
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	2b01      	cmp	r3, #1
 80073b8:	d109      	bne.n	80073ce <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80073ba:	f7ff ffbf 	bl	800733c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80073be:	4b08      	ldr	r3, [pc, #32]	@ (80073e0 <osKernelStart+0x48>)
 80073c0:	2202      	movs	r2, #2
 80073c2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80073c4:	f001 fb28 	bl	8008a18 <vTaskStartScheduler>
      stat = osOK;
 80073c8:	2300      	movs	r3, #0
 80073ca:	607b      	str	r3, [r7, #4]
 80073cc:	e002      	b.n	80073d4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80073ce:	f04f 33ff 	mov.w	r3, #4294967295
 80073d2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80073d4:	687b      	ldr	r3, [r7, #4]
}
 80073d6:	4618      	mov	r0, r3
 80073d8:	3708      	adds	r7, #8
 80073da:	46bd      	mov	sp, r7
 80073dc:	bd80      	pop	{r7, pc}
 80073de:	bf00      	nop
 80073e0:	24000348 	.word	0x24000348

080073e4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b08e      	sub	sp, #56	@ 0x38
 80073e8:	af04      	add	r7, sp, #16
 80073ea:	60f8      	str	r0, [r7, #12]
 80073ec:	60b9      	str	r1, [r7, #8]
 80073ee:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80073f0:	2300      	movs	r3, #0
 80073f2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80073f4:	f3ef 8305 	mrs	r3, IPSR
 80073f8:	617b      	str	r3, [r7, #20]
  return(result);
 80073fa:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d17e      	bne.n	80074fe <osThreadNew+0x11a>
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d07b      	beq.n	80074fe <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007406:	2380      	movs	r3, #128	@ 0x80
 8007408:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800740a:	2318      	movs	r3, #24
 800740c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800740e:	2300      	movs	r3, #0
 8007410:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8007412:	f04f 33ff 	mov.w	r3, #4294967295
 8007416:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d045      	beq.n	80074aa <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d002      	beq.n	800742c <osThreadNew+0x48>
        name = attr->name;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	699b      	ldr	r3, [r3, #24]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d002      	beq.n	800743a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	699b      	ldr	r3, [r3, #24]
 8007438:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800743a:	69fb      	ldr	r3, [r7, #28]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d008      	beq.n	8007452 <osThreadNew+0x6e>
 8007440:	69fb      	ldr	r3, [r7, #28]
 8007442:	2b38      	cmp	r3, #56	@ 0x38
 8007444:	d805      	bhi.n	8007452 <osThreadNew+0x6e>
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	685b      	ldr	r3, [r3, #4]
 800744a:	f003 0301 	and.w	r3, r3, #1
 800744e:	2b00      	cmp	r3, #0
 8007450:	d001      	beq.n	8007456 <osThreadNew+0x72>
        return (NULL);
 8007452:	2300      	movs	r3, #0
 8007454:	e054      	b.n	8007500 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	695b      	ldr	r3, [r3, #20]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d003      	beq.n	8007466 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	695b      	ldr	r3, [r3, #20]
 8007462:	089b      	lsrs	r3, r3, #2
 8007464:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	689b      	ldr	r3, [r3, #8]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d00e      	beq.n	800748c <osThreadNew+0xa8>
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	68db      	ldr	r3, [r3, #12]
 8007472:	2ba7      	cmp	r3, #167	@ 0xa7
 8007474:	d90a      	bls.n	800748c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800747a:	2b00      	cmp	r3, #0
 800747c:	d006      	beq.n	800748c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	695b      	ldr	r3, [r3, #20]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d002      	beq.n	800748c <osThreadNew+0xa8>
        mem = 1;
 8007486:	2301      	movs	r3, #1
 8007488:	61bb      	str	r3, [r7, #24]
 800748a:	e010      	b.n	80074ae <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	689b      	ldr	r3, [r3, #8]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d10c      	bne.n	80074ae <osThreadNew+0xca>
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	68db      	ldr	r3, [r3, #12]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d108      	bne.n	80074ae <osThreadNew+0xca>
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	691b      	ldr	r3, [r3, #16]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d104      	bne.n	80074ae <osThreadNew+0xca>
          mem = 0;
 80074a4:	2300      	movs	r3, #0
 80074a6:	61bb      	str	r3, [r7, #24]
 80074a8:	e001      	b.n	80074ae <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80074aa:	2300      	movs	r3, #0
 80074ac:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80074ae:	69bb      	ldr	r3, [r7, #24]
 80074b0:	2b01      	cmp	r3, #1
 80074b2:	d110      	bne.n	80074d6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80074b8:	687a      	ldr	r2, [r7, #4]
 80074ba:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80074bc:	9202      	str	r2, [sp, #8]
 80074be:	9301      	str	r3, [sp, #4]
 80074c0:	69fb      	ldr	r3, [r7, #28]
 80074c2:	9300      	str	r3, [sp, #0]
 80074c4:	68bb      	ldr	r3, [r7, #8]
 80074c6:	6a3a      	ldr	r2, [r7, #32]
 80074c8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80074ca:	68f8      	ldr	r0, [r7, #12]
 80074cc:	f001 f8b0 	bl	8008630 <xTaskCreateStatic>
 80074d0:	4603      	mov	r3, r0
 80074d2:	613b      	str	r3, [r7, #16]
 80074d4:	e013      	b.n	80074fe <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80074d6:	69bb      	ldr	r3, [r7, #24]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d110      	bne.n	80074fe <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80074dc:	6a3b      	ldr	r3, [r7, #32]
 80074de:	b29a      	uxth	r2, r3
 80074e0:	f107 0310 	add.w	r3, r7, #16
 80074e4:	9301      	str	r3, [sp, #4]
 80074e6:	69fb      	ldr	r3, [r7, #28]
 80074e8:	9300      	str	r3, [sp, #0]
 80074ea:	68bb      	ldr	r3, [r7, #8]
 80074ec:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80074ee:	68f8      	ldr	r0, [r7, #12]
 80074f0:	f001 f8fe 	bl	80086f0 <xTaskCreate>
 80074f4:	4603      	mov	r3, r0
 80074f6:	2b01      	cmp	r3, #1
 80074f8:	d001      	beq.n	80074fe <osThreadNew+0x11a>
            hTask = NULL;
 80074fa:	2300      	movs	r3, #0
 80074fc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80074fe:	693b      	ldr	r3, [r7, #16]
}
 8007500:	4618      	mov	r0, r3
 8007502:	3728      	adds	r7, #40	@ 0x28
 8007504:	46bd      	mov	sp, r7
 8007506:	bd80      	pop	{r7, pc}

08007508 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007508:	b580      	push	{r7, lr}
 800750a:	b084      	sub	sp, #16
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007510:	f3ef 8305 	mrs	r3, IPSR
 8007514:	60bb      	str	r3, [r7, #8]
  return(result);
 8007516:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007518:	2b00      	cmp	r3, #0
 800751a:	d003      	beq.n	8007524 <osDelay+0x1c>
    stat = osErrorISR;
 800751c:	f06f 0305 	mvn.w	r3, #5
 8007520:	60fb      	str	r3, [r7, #12]
 8007522:	e007      	b.n	8007534 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007524:	2300      	movs	r3, #0
 8007526:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d002      	beq.n	8007534 <osDelay+0x2c>
      vTaskDelay(ticks);
 800752e:	6878      	ldr	r0, [r7, #4]
 8007530:	f001 fa3c 	bl	80089ac <vTaskDelay>
    }
  }

  return (stat);
 8007534:	68fb      	ldr	r3, [r7, #12]
}
 8007536:	4618      	mov	r0, r3
 8007538:	3710      	adds	r7, #16
 800753a:	46bd      	mov	sp, r7
 800753c:	bd80      	pop	{r7, pc}
	...

08007540 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007540:	b480      	push	{r7}
 8007542:	b085      	sub	sp, #20
 8007544:	af00      	add	r7, sp, #0
 8007546:	60f8      	str	r0, [r7, #12]
 8007548:	60b9      	str	r1, [r7, #8]
 800754a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	4a07      	ldr	r2, [pc, #28]	@ (800756c <vApplicationGetIdleTaskMemory+0x2c>)
 8007550:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007552:	68bb      	ldr	r3, [r7, #8]
 8007554:	4a06      	ldr	r2, [pc, #24]	@ (8007570 <vApplicationGetIdleTaskMemory+0x30>)
 8007556:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2280      	movs	r2, #128	@ 0x80
 800755c:	601a      	str	r2, [r3, #0]
}
 800755e:	bf00      	nop
 8007560:	3714      	adds	r7, #20
 8007562:	46bd      	mov	sp, r7
 8007564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007568:	4770      	bx	lr
 800756a:	bf00      	nop
 800756c:	2400034c 	.word	0x2400034c
 8007570:	240003f4 	.word	0x240003f4

08007574 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007574:	b480      	push	{r7}
 8007576:	b085      	sub	sp, #20
 8007578:	af00      	add	r7, sp, #0
 800757a:	60f8      	str	r0, [r7, #12]
 800757c:	60b9      	str	r1, [r7, #8]
 800757e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	4a07      	ldr	r2, [pc, #28]	@ (80075a0 <vApplicationGetTimerTaskMemory+0x2c>)
 8007584:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007586:	68bb      	ldr	r3, [r7, #8]
 8007588:	4a06      	ldr	r2, [pc, #24]	@ (80075a4 <vApplicationGetTimerTaskMemory+0x30>)
 800758a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007592:	601a      	str	r2, [r3, #0]
}
 8007594:	bf00      	nop
 8007596:	3714      	adds	r7, #20
 8007598:	46bd      	mov	sp, r7
 800759a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759e:	4770      	bx	lr
 80075a0:	240005f4 	.word	0x240005f4
 80075a4:	2400069c 	.word	0x2400069c

080075a8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80075a8:	b480      	push	{r7}
 80075aa:	b083      	sub	sp, #12
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	f103 0208 	add.w	r2, r3, #8
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	f04f 32ff 	mov.w	r2, #4294967295
 80075c0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	f103 0208 	add.w	r2, r3, #8
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	f103 0208 	add.w	r2, r3, #8
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2200      	movs	r2, #0
 80075da:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80075dc:	bf00      	nop
 80075de:	370c      	adds	r7, #12
 80075e0:	46bd      	mov	sp, r7
 80075e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e6:	4770      	bx	lr

080075e8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80075e8:	b480      	push	{r7}
 80075ea:	b083      	sub	sp, #12
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2200      	movs	r2, #0
 80075f4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80075f6:	bf00      	nop
 80075f8:	370c      	adds	r7, #12
 80075fa:	46bd      	mov	sp, r7
 80075fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007600:	4770      	bx	lr

08007602 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007602:	b480      	push	{r7}
 8007604:	b085      	sub	sp, #20
 8007606:	af00      	add	r7, sp, #0
 8007608:	6078      	str	r0, [r7, #4]
 800760a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	685b      	ldr	r3, [r3, #4]
 8007610:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	68fa      	ldr	r2, [r7, #12]
 8007616:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	689a      	ldr	r2, [r3, #8]
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	689b      	ldr	r3, [r3, #8]
 8007624:	683a      	ldr	r2, [r7, #0]
 8007626:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	683a      	ldr	r2, [r7, #0]
 800762c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	687a      	ldr	r2, [r7, #4]
 8007632:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	1c5a      	adds	r2, r3, #1
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	601a      	str	r2, [r3, #0]
}
 800763e:	bf00      	nop
 8007640:	3714      	adds	r7, #20
 8007642:	46bd      	mov	sp, r7
 8007644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007648:	4770      	bx	lr

0800764a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800764a:	b480      	push	{r7}
 800764c:	b085      	sub	sp, #20
 800764e:	af00      	add	r7, sp, #0
 8007650:	6078      	str	r0, [r7, #4]
 8007652:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800765a:	68bb      	ldr	r3, [r7, #8]
 800765c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007660:	d103      	bne.n	800766a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	691b      	ldr	r3, [r3, #16]
 8007666:	60fb      	str	r3, [r7, #12]
 8007668:	e00c      	b.n	8007684 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	3308      	adds	r3, #8
 800766e:	60fb      	str	r3, [r7, #12]
 8007670:	e002      	b.n	8007678 <vListInsert+0x2e>
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	685b      	ldr	r3, [r3, #4]
 8007676:	60fb      	str	r3, [r7, #12]
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	685b      	ldr	r3, [r3, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	68ba      	ldr	r2, [r7, #8]
 8007680:	429a      	cmp	r2, r3
 8007682:	d2f6      	bcs.n	8007672 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	685a      	ldr	r2, [r3, #4]
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	685b      	ldr	r3, [r3, #4]
 8007690:	683a      	ldr	r2, [r7, #0]
 8007692:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	68fa      	ldr	r2, [r7, #12]
 8007698:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	683a      	ldr	r2, [r7, #0]
 800769e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	687a      	ldr	r2, [r7, #4]
 80076a4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	1c5a      	adds	r2, r3, #1
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	601a      	str	r2, [r3, #0]
}
 80076b0:	bf00      	nop
 80076b2:	3714      	adds	r7, #20
 80076b4:	46bd      	mov	sp, r7
 80076b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ba:	4770      	bx	lr

080076bc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80076bc:	b480      	push	{r7}
 80076be:	b085      	sub	sp, #20
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	691b      	ldr	r3, [r3, #16]
 80076c8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	685b      	ldr	r3, [r3, #4]
 80076ce:	687a      	ldr	r2, [r7, #4]
 80076d0:	6892      	ldr	r2, [r2, #8]
 80076d2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	689b      	ldr	r3, [r3, #8]
 80076d8:	687a      	ldr	r2, [r7, #4]
 80076da:	6852      	ldr	r2, [r2, #4]
 80076dc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	685b      	ldr	r3, [r3, #4]
 80076e2:	687a      	ldr	r2, [r7, #4]
 80076e4:	429a      	cmp	r2, r3
 80076e6:	d103      	bne.n	80076f0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	689a      	ldr	r2, [r3, #8]
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2200      	movs	r2, #0
 80076f4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	1e5a      	subs	r2, r3, #1
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	681b      	ldr	r3, [r3, #0]
}
 8007704:	4618      	mov	r0, r3
 8007706:	3714      	adds	r7, #20
 8007708:	46bd      	mov	sp, r7
 800770a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770e:	4770      	bx	lr

08007710 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b084      	sub	sp, #16
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
 8007718:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d10b      	bne.n	800773c <xQueueGenericReset+0x2c>
	__asm volatile
 8007724:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007728:	f383 8811 	msr	BASEPRI, r3
 800772c:	f3bf 8f6f 	isb	sy
 8007730:	f3bf 8f4f 	dsb	sy
 8007734:	60bb      	str	r3, [r7, #8]
}
 8007736:	bf00      	nop
 8007738:	bf00      	nop
 800773a:	e7fd      	b.n	8007738 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800773c:	f002 fcf4 	bl	800a128 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	681a      	ldr	r2, [r3, #0]
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007748:	68f9      	ldr	r1, [r7, #12]
 800774a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800774c:	fb01 f303 	mul.w	r3, r1, r3
 8007750:	441a      	add	r2, r3
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	2200      	movs	r2, #0
 800775a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	681a      	ldr	r2, [r3, #0]
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	681a      	ldr	r2, [r3, #0]
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800776c:	3b01      	subs	r3, #1
 800776e:	68f9      	ldr	r1, [r7, #12]
 8007770:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007772:	fb01 f303 	mul.w	r3, r1, r3
 8007776:	441a      	add	r2, r3
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	22ff      	movs	r2, #255	@ 0xff
 8007780:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	22ff      	movs	r2, #255	@ 0xff
 8007788:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d114      	bne.n	80077bc <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	691b      	ldr	r3, [r3, #16]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d01a      	beq.n	80077d0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	3310      	adds	r3, #16
 800779e:	4618      	mov	r0, r3
 80077a0:	f001 fc38 	bl	8009014 <xTaskRemoveFromEventList>
 80077a4:	4603      	mov	r3, r0
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d012      	beq.n	80077d0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80077aa:	4b0d      	ldr	r3, [pc, #52]	@ (80077e0 <xQueueGenericReset+0xd0>)
 80077ac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80077b0:	601a      	str	r2, [r3, #0]
 80077b2:	f3bf 8f4f 	dsb	sy
 80077b6:	f3bf 8f6f 	isb	sy
 80077ba:	e009      	b.n	80077d0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	3310      	adds	r3, #16
 80077c0:	4618      	mov	r0, r3
 80077c2:	f7ff fef1 	bl	80075a8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	3324      	adds	r3, #36	@ 0x24
 80077ca:	4618      	mov	r0, r3
 80077cc:	f7ff feec 	bl	80075a8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80077d0:	f002 fcdc 	bl	800a18c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80077d4:	2301      	movs	r3, #1
}
 80077d6:	4618      	mov	r0, r3
 80077d8:	3710      	adds	r7, #16
 80077da:	46bd      	mov	sp, r7
 80077dc:	bd80      	pop	{r7, pc}
 80077de:	bf00      	nop
 80077e0:	e000ed04 	.word	0xe000ed04

080077e4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b08e      	sub	sp, #56	@ 0x38
 80077e8:	af02      	add	r7, sp, #8
 80077ea:	60f8      	str	r0, [r7, #12]
 80077ec:	60b9      	str	r1, [r7, #8]
 80077ee:	607a      	str	r2, [r7, #4]
 80077f0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d10b      	bne.n	8007810 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80077f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077fc:	f383 8811 	msr	BASEPRI, r3
 8007800:	f3bf 8f6f 	isb	sy
 8007804:	f3bf 8f4f 	dsb	sy
 8007808:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800780a:	bf00      	nop
 800780c:	bf00      	nop
 800780e:	e7fd      	b.n	800780c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	2b00      	cmp	r3, #0
 8007814:	d10b      	bne.n	800782e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8007816:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800781a:	f383 8811 	msr	BASEPRI, r3
 800781e:	f3bf 8f6f 	isb	sy
 8007822:	f3bf 8f4f 	dsb	sy
 8007826:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007828:	bf00      	nop
 800782a:	bf00      	nop
 800782c:	e7fd      	b.n	800782a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d002      	beq.n	800783a <xQueueGenericCreateStatic+0x56>
 8007834:	68bb      	ldr	r3, [r7, #8]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d001      	beq.n	800783e <xQueueGenericCreateStatic+0x5a>
 800783a:	2301      	movs	r3, #1
 800783c:	e000      	b.n	8007840 <xQueueGenericCreateStatic+0x5c>
 800783e:	2300      	movs	r3, #0
 8007840:	2b00      	cmp	r3, #0
 8007842:	d10b      	bne.n	800785c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8007844:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007848:	f383 8811 	msr	BASEPRI, r3
 800784c:	f3bf 8f6f 	isb	sy
 8007850:	f3bf 8f4f 	dsb	sy
 8007854:	623b      	str	r3, [r7, #32]
}
 8007856:	bf00      	nop
 8007858:	bf00      	nop
 800785a:	e7fd      	b.n	8007858 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d102      	bne.n	8007868 <xQueueGenericCreateStatic+0x84>
 8007862:	68bb      	ldr	r3, [r7, #8]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d101      	bne.n	800786c <xQueueGenericCreateStatic+0x88>
 8007868:	2301      	movs	r3, #1
 800786a:	e000      	b.n	800786e <xQueueGenericCreateStatic+0x8a>
 800786c:	2300      	movs	r3, #0
 800786e:	2b00      	cmp	r3, #0
 8007870:	d10b      	bne.n	800788a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8007872:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007876:	f383 8811 	msr	BASEPRI, r3
 800787a:	f3bf 8f6f 	isb	sy
 800787e:	f3bf 8f4f 	dsb	sy
 8007882:	61fb      	str	r3, [r7, #28]
}
 8007884:	bf00      	nop
 8007886:	bf00      	nop
 8007888:	e7fd      	b.n	8007886 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800788a:	2350      	movs	r3, #80	@ 0x50
 800788c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800788e:	697b      	ldr	r3, [r7, #20]
 8007890:	2b50      	cmp	r3, #80	@ 0x50
 8007892:	d00b      	beq.n	80078ac <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8007894:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007898:	f383 8811 	msr	BASEPRI, r3
 800789c:	f3bf 8f6f 	isb	sy
 80078a0:	f3bf 8f4f 	dsb	sy
 80078a4:	61bb      	str	r3, [r7, #24]
}
 80078a6:	bf00      	nop
 80078a8:	bf00      	nop
 80078aa:	e7fd      	b.n	80078a8 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80078ac:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80078b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d00d      	beq.n	80078d4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80078b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078ba:	2201      	movs	r2, #1
 80078bc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80078c0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80078c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078c6:	9300      	str	r3, [sp, #0]
 80078c8:	4613      	mov	r3, r2
 80078ca:	687a      	ldr	r2, [r7, #4]
 80078cc:	68b9      	ldr	r1, [r7, #8]
 80078ce:	68f8      	ldr	r0, [r7, #12]
 80078d0:	f000 f840 	bl	8007954 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80078d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80078d6:	4618      	mov	r0, r3
 80078d8:	3730      	adds	r7, #48	@ 0x30
 80078da:	46bd      	mov	sp, r7
 80078dc:	bd80      	pop	{r7, pc}

080078de <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80078de:	b580      	push	{r7, lr}
 80078e0:	b08a      	sub	sp, #40	@ 0x28
 80078e2:	af02      	add	r7, sp, #8
 80078e4:	60f8      	str	r0, [r7, #12]
 80078e6:	60b9      	str	r1, [r7, #8]
 80078e8:	4613      	mov	r3, r2
 80078ea:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d10b      	bne.n	800790a <xQueueGenericCreate+0x2c>
	__asm volatile
 80078f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078f6:	f383 8811 	msr	BASEPRI, r3
 80078fa:	f3bf 8f6f 	isb	sy
 80078fe:	f3bf 8f4f 	dsb	sy
 8007902:	613b      	str	r3, [r7, #16]
}
 8007904:	bf00      	nop
 8007906:	bf00      	nop
 8007908:	e7fd      	b.n	8007906 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	68ba      	ldr	r2, [r7, #8]
 800790e:	fb02 f303 	mul.w	r3, r2, r3
 8007912:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007914:	69fb      	ldr	r3, [r7, #28]
 8007916:	3350      	adds	r3, #80	@ 0x50
 8007918:	4618      	mov	r0, r3
 800791a:	f002 fe0b 	bl	800a534 <pvPortMalloc>
 800791e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007920:	69bb      	ldr	r3, [r7, #24]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d011      	beq.n	800794a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007926:	69bb      	ldr	r3, [r7, #24]
 8007928:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800792a:	697b      	ldr	r3, [r7, #20]
 800792c:	3350      	adds	r3, #80	@ 0x50
 800792e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007930:	69bb      	ldr	r3, [r7, #24]
 8007932:	2200      	movs	r2, #0
 8007934:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007938:	79fa      	ldrb	r2, [r7, #7]
 800793a:	69bb      	ldr	r3, [r7, #24]
 800793c:	9300      	str	r3, [sp, #0]
 800793e:	4613      	mov	r3, r2
 8007940:	697a      	ldr	r2, [r7, #20]
 8007942:	68b9      	ldr	r1, [r7, #8]
 8007944:	68f8      	ldr	r0, [r7, #12]
 8007946:	f000 f805 	bl	8007954 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800794a:	69bb      	ldr	r3, [r7, #24]
	}
 800794c:	4618      	mov	r0, r3
 800794e:	3720      	adds	r7, #32
 8007950:	46bd      	mov	sp, r7
 8007952:	bd80      	pop	{r7, pc}

08007954 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007954:	b580      	push	{r7, lr}
 8007956:	b084      	sub	sp, #16
 8007958:	af00      	add	r7, sp, #0
 800795a:	60f8      	str	r0, [r7, #12]
 800795c:	60b9      	str	r1, [r7, #8]
 800795e:	607a      	str	r2, [r7, #4]
 8007960:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007962:	68bb      	ldr	r3, [r7, #8]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d103      	bne.n	8007970 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007968:	69bb      	ldr	r3, [r7, #24]
 800796a:	69ba      	ldr	r2, [r7, #24]
 800796c:	601a      	str	r2, [r3, #0]
 800796e:	e002      	b.n	8007976 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007970:	69bb      	ldr	r3, [r7, #24]
 8007972:	687a      	ldr	r2, [r7, #4]
 8007974:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007976:	69bb      	ldr	r3, [r7, #24]
 8007978:	68fa      	ldr	r2, [r7, #12]
 800797a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800797c:	69bb      	ldr	r3, [r7, #24]
 800797e:	68ba      	ldr	r2, [r7, #8]
 8007980:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007982:	2101      	movs	r1, #1
 8007984:	69b8      	ldr	r0, [r7, #24]
 8007986:	f7ff fec3 	bl	8007710 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800798a:	69bb      	ldr	r3, [r7, #24]
 800798c:	78fa      	ldrb	r2, [r7, #3]
 800798e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007992:	bf00      	nop
 8007994:	3710      	adds	r7, #16
 8007996:	46bd      	mov	sp, r7
 8007998:	bd80      	pop	{r7, pc}

0800799a <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800799a:	b580      	push	{r7, lr}
 800799c:	b086      	sub	sp, #24
 800799e:	af00      	add	r7, sp, #0
 80079a0:	6078      	str	r0, [r7, #4]
 80079a2:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d10b      	bne.n	80079c2 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 80079aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079ae:	f383 8811 	msr	BASEPRI, r3
 80079b2:	f3bf 8f6f 	isb	sy
 80079b6:	f3bf 8f4f 	dsb	sy
 80079ba:	613b      	str	r3, [r7, #16]
}
 80079bc:	bf00      	nop
 80079be:	bf00      	nop
 80079c0:	e7fd      	b.n	80079be <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80079c2:	683a      	ldr	r2, [r7, #0]
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	429a      	cmp	r2, r3
 80079c8:	d90b      	bls.n	80079e2 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 80079ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079ce:	f383 8811 	msr	BASEPRI, r3
 80079d2:	f3bf 8f6f 	isb	sy
 80079d6:	f3bf 8f4f 	dsb	sy
 80079da:	60fb      	str	r3, [r7, #12]
}
 80079dc:	bf00      	nop
 80079de:	bf00      	nop
 80079e0:	e7fd      	b.n	80079de <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80079e2:	2202      	movs	r2, #2
 80079e4:	2100      	movs	r1, #0
 80079e6:	6878      	ldr	r0, [r7, #4]
 80079e8:	f7ff ff79 	bl	80078de <xQueueGenericCreate>
 80079ec:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80079ee:	697b      	ldr	r3, [r7, #20]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d002      	beq.n	80079fa <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80079f4:	697b      	ldr	r3, [r7, #20]
 80079f6:	683a      	ldr	r2, [r7, #0]
 80079f8:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80079fa:	697b      	ldr	r3, [r7, #20]
	}
 80079fc:	4618      	mov	r0, r3
 80079fe:	3718      	adds	r7, #24
 8007a00:	46bd      	mov	sp, r7
 8007a02:	bd80      	pop	{r7, pc}

08007a04 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b08e      	sub	sp, #56	@ 0x38
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	60f8      	str	r0, [r7, #12]
 8007a0c:	60b9      	str	r1, [r7, #8]
 8007a0e:	607a      	str	r2, [r7, #4]
 8007a10:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007a12:	2300      	movs	r3, #0
 8007a14:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007a1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d10b      	bne.n	8007a38 <xQueueGenericSend+0x34>
	__asm volatile
 8007a20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a24:	f383 8811 	msr	BASEPRI, r3
 8007a28:	f3bf 8f6f 	isb	sy
 8007a2c:	f3bf 8f4f 	dsb	sy
 8007a30:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007a32:	bf00      	nop
 8007a34:	bf00      	nop
 8007a36:	e7fd      	b.n	8007a34 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007a38:	68bb      	ldr	r3, [r7, #8]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d103      	bne.n	8007a46 <xQueueGenericSend+0x42>
 8007a3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d101      	bne.n	8007a4a <xQueueGenericSend+0x46>
 8007a46:	2301      	movs	r3, #1
 8007a48:	e000      	b.n	8007a4c <xQueueGenericSend+0x48>
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d10b      	bne.n	8007a68 <xQueueGenericSend+0x64>
	__asm volatile
 8007a50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a54:	f383 8811 	msr	BASEPRI, r3
 8007a58:	f3bf 8f6f 	isb	sy
 8007a5c:	f3bf 8f4f 	dsb	sy
 8007a60:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007a62:	bf00      	nop
 8007a64:	bf00      	nop
 8007a66:	e7fd      	b.n	8007a64 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	2b02      	cmp	r3, #2
 8007a6c:	d103      	bne.n	8007a76 <xQueueGenericSend+0x72>
 8007a6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a72:	2b01      	cmp	r3, #1
 8007a74:	d101      	bne.n	8007a7a <xQueueGenericSend+0x76>
 8007a76:	2301      	movs	r3, #1
 8007a78:	e000      	b.n	8007a7c <xQueueGenericSend+0x78>
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d10b      	bne.n	8007a98 <xQueueGenericSend+0x94>
	__asm volatile
 8007a80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a84:	f383 8811 	msr	BASEPRI, r3
 8007a88:	f3bf 8f6f 	isb	sy
 8007a8c:	f3bf 8f4f 	dsb	sy
 8007a90:	623b      	str	r3, [r7, #32]
}
 8007a92:	bf00      	nop
 8007a94:	bf00      	nop
 8007a96:	e7fd      	b.n	8007a94 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007a98:	f001 fcda 	bl	8009450 <xTaskGetSchedulerState>
 8007a9c:	4603      	mov	r3, r0
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d102      	bne.n	8007aa8 <xQueueGenericSend+0xa4>
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d101      	bne.n	8007aac <xQueueGenericSend+0xa8>
 8007aa8:	2301      	movs	r3, #1
 8007aaa:	e000      	b.n	8007aae <xQueueGenericSend+0xaa>
 8007aac:	2300      	movs	r3, #0
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d10b      	bne.n	8007aca <xQueueGenericSend+0xc6>
	__asm volatile
 8007ab2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ab6:	f383 8811 	msr	BASEPRI, r3
 8007aba:	f3bf 8f6f 	isb	sy
 8007abe:	f3bf 8f4f 	dsb	sy
 8007ac2:	61fb      	str	r3, [r7, #28]
}
 8007ac4:	bf00      	nop
 8007ac6:	bf00      	nop
 8007ac8:	e7fd      	b.n	8007ac6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007aca:	f002 fb2d 	bl	800a128 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007ace:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ad0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007ad2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ad4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ad6:	429a      	cmp	r2, r3
 8007ad8:	d302      	bcc.n	8007ae0 <xQueueGenericSend+0xdc>
 8007ada:	683b      	ldr	r3, [r7, #0]
 8007adc:	2b02      	cmp	r3, #2
 8007ade:	d129      	bne.n	8007b34 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007ae0:	683a      	ldr	r2, [r7, #0]
 8007ae2:	68b9      	ldr	r1, [r7, #8]
 8007ae4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007ae6:	f000 fc0a 	bl	80082fe <prvCopyDataToQueue>
 8007aea:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007aec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007aee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d010      	beq.n	8007b16 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007af4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007af6:	3324      	adds	r3, #36	@ 0x24
 8007af8:	4618      	mov	r0, r3
 8007afa:	f001 fa8b 	bl	8009014 <xTaskRemoveFromEventList>
 8007afe:	4603      	mov	r3, r0
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d013      	beq.n	8007b2c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007b04:	4b3f      	ldr	r3, [pc, #252]	@ (8007c04 <xQueueGenericSend+0x200>)
 8007b06:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007b0a:	601a      	str	r2, [r3, #0]
 8007b0c:	f3bf 8f4f 	dsb	sy
 8007b10:	f3bf 8f6f 	isb	sy
 8007b14:	e00a      	b.n	8007b2c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007b16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d007      	beq.n	8007b2c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007b1c:	4b39      	ldr	r3, [pc, #228]	@ (8007c04 <xQueueGenericSend+0x200>)
 8007b1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007b22:	601a      	str	r2, [r3, #0]
 8007b24:	f3bf 8f4f 	dsb	sy
 8007b28:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007b2c:	f002 fb2e 	bl	800a18c <vPortExitCritical>
				return pdPASS;
 8007b30:	2301      	movs	r3, #1
 8007b32:	e063      	b.n	8007bfc <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d103      	bne.n	8007b42 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007b3a:	f002 fb27 	bl	800a18c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007b3e:	2300      	movs	r3, #0
 8007b40:	e05c      	b.n	8007bfc <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007b42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d106      	bne.n	8007b56 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007b48:	f107 0314 	add.w	r3, r7, #20
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	f001 fac7 	bl	80090e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007b52:	2301      	movs	r3, #1
 8007b54:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007b56:	f002 fb19 	bl	800a18c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007b5a:	f000 ffcd 	bl	8008af8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007b5e:	f002 fae3 	bl	800a128 <vPortEnterCritical>
 8007b62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b64:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007b68:	b25b      	sxtb	r3, r3
 8007b6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b6e:	d103      	bne.n	8007b78 <xQueueGenericSend+0x174>
 8007b70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b72:	2200      	movs	r2, #0
 8007b74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007b78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b7a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007b7e:	b25b      	sxtb	r3, r3
 8007b80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b84:	d103      	bne.n	8007b8e <xQueueGenericSend+0x18a>
 8007b86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b88:	2200      	movs	r2, #0
 8007b8a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007b8e:	f002 fafd 	bl	800a18c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007b92:	1d3a      	adds	r2, r7, #4
 8007b94:	f107 0314 	add.w	r3, r7, #20
 8007b98:	4611      	mov	r1, r2
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	f001 fab6 	bl	800910c <xTaskCheckForTimeOut>
 8007ba0:	4603      	mov	r3, r0
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d124      	bne.n	8007bf0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007ba6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007ba8:	f000 fca1 	bl	80084ee <prvIsQueueFull>
 8007bac:	4603      	mov	r3, r0
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d018      	beq.n	8007be4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007bb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bb4:	3310      	adds	r3, #16
 8007bb6:	687a      	ldr	r2, [r7, #4]
 8007bb8:	4611      	mov	r1, r2
 8007bba:	4618      	mov	r0, r3
 8007bbc:	f001 f9d8 	bl	8008f70 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007bc0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007bc2:	f000 fc2c 	bl	800841e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007bc6:	f000 ffdd 	bl	8008b84 <xTaskResumeAll>
 8007bca:	4603      	mov	r3, r0
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	f47f af7c 	bne.w	8007aca <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8007bd2:	4b0c      	ldr	r3, [pc, #48]	@ (8007c04 <xQueueGenericSend+0x200>)
 8007bd4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007bd8:	601a      	str	r2, [r3, #0]
 8007bda:	f3bf 8f4f 	dsb	sy
 8007bde:	f3bf 8f6f 	isb	sy
 8007be2:	e772      	b.n	8007aca <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007be4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007be6:	f000 fc1a 	bl	800841e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007bea:	f000 ffcb 	bl	8008b84 <xTaskResumeAll>
 8007bee:	e76c      	b.n	8007aca <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007bf0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007bf2:	f000 fc14 	bl	800841e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007bf6:	f000 ffc5 	bl	8008b84 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007bfa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	3738      	adds	r7, #56	@ 0x38
 8007c00:	46bd      	mov	sp, r7
 8007c02:	bd80      	pop	{r7, pc}
 8007c04:	e000ed04 	.word	0xe000ed04

08007c08 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b090      	sub	sp, #64	@ 0x40
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	60f8      	str	r0, [r7, #12]
 8007c10:	60b9      	str	r1, [r7, #8]
 8007c12:	607a      	str	r2, [r7, #4]
 8007c14:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8007c1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d10b      	bne.n	8007c38 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8007c20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c24:	f383 8811 	msr	BASEPRI, r3
 8007c28:	f3bf 8f6f 	isb	sy
 8007c2c:	f3bf 8f4f 	dsb	sy
 8007c30:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007c32:	bf00      	nop
 8007c34:	bf00      	nop
 8007c36:	e7fd      	b.n	8007c34 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007c38:	68bb      	ldr	r3, [r7, #8]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d103      	bne.n	8007c46 <xQueueGenericSendFromISR+0x3e>
 8007c3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d101      	bne.n	8007c4a <xQueueGenericSendFromISR+0x42>
 8007c46:	2301      	movs	r3, #1
 8007c48:	e000      	b.n	8007c4c <xQueueGenericSendFromISR+0x44>
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d10b      	bne.n	8007c68 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8007c50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c54:	f383 8811 	msr	BASEPRI, r3
 8007c58:	f3bf 8f6f 	isb	sy
 8007c5c:	f3bf 8f4f 	dsb	sy
 8007c60:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007c62:	bf00      	nop
 8007c64:	bf00      	nop
 8007c66:	e7fd      	b.n	8007c64 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	2b02      	cmp	r3, #2
 8007c6c:	d103      	bne.n	8007c76 <xQueueGenericSendFromISR+0x6e>
 8007c6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c72:	2b01      	cmp	r3, #1
 8007c74:	d101      	bne.n	8007c7a <xQueueGenericSendFromISR+0x72>
 8007c76:	2301      	movs	r3, #1
 8007c78:	e000      	b.n	8007c7c <xQueueGenericSendFromISR+0x74>
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d10b      	bne.n	8007c98 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8007c80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c84:	f383 8811 	msr	BASEPRI, r3
 8007c88:	f3bf 8f6f 	isb	sy
 8007c8c:	f3bf 8f4f 	dsb	sy
 8007c90:	623b      	str	r3, [r7, #32]
}
 8007c92:	bf00      	nop
 8007c94:	bf00      	nop
 8007c96:	e7fd      	b.n	8007c94 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007c98:	f002 fc0a 	bl	800a4b0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007c9c:	f3ef 8211 	mrs	r2, BASEPRI
 8007ca0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ca4:	f383 8811 	msr	BASEPRI, r3
 8007ca8:	f3bf 8f6f 	isb	sy
 8007cac:	f3bf 8f4f 	dsb	sy
 8007cb0:	61fa      	str	r2, [r7, #28]
 8007cb2:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007cb4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007cb6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007cb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007cbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007cc0:	429a      	cmp	r2, r3
 8007cc2:	d302      	bcc.n	8007cca <xQueueGenericSendFromISR+0xc2>
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	2b02      	cmp	r3, #2
 8007cc8:	d12f      	bne.n	8007d2a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007cca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ccc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007cd0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007cd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007cda:	683a      	ldr	r2, [r7, #0]
 8007cdc:	68b9      	ldr	r1, [r7, #8]
 8007cde:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007ce0:	f000 fb0d 	bl	80082fe <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007ce4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8007ce8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cec:	d112      	bne.n	8007d14 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007cee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d016      	beq.n	8007d24 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007cf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cf8:	3324      	adds	r3, #36	@ 0x24
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	f001 f98a 	bl	8009014 <xTaskRemoveFromEventList>
 8007d00:	4603      	mov	r3, r0
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d00e      	beq.n	8007d24 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d00b      	beq.n	8007d24 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2201      	movs	r2, #1
 8007d10:	601a      	str	r2, [r3, #0]
 8007d12:	e007      	b.n	8007d24 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007d14:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8007d18:	3301      	adds	r3, #1
 8007d1a:	b2db      	uxtb	r3, r3
 8007d1c:	b25a      	sxtb	r2, r3
 8007d1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d20:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8007d24:	2301      	movs	r3, #1
 8007d26:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8007d28:	e001      	b.n	8007d2e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007d2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d30:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007d32:	697b      	ldr	r3, [r7, #20]
 8007d34:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007d38:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007d3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	3740      	adds	r7, #64	@ 0x40
 8007d40:	46bd      	mov	sp, r7
 8007d42:	bd80      	pop	{r7, pc}

08007d44 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b08e      	sub	sp, #56	@ 0x38
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
 8007d4c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8007d52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d10b      	bne.n	8007d70 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8007d58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d5c:	f383 8811 	msr	BASEPRI, r3
 8007d60:	f3bf 8f6f 	isb	sy
 8007d64:	f3bf 8f4f 	dsb	sy
 8007d68:	623b      	str	r3, [r7, #32]
}
 8007d6a:	bf00      	nop
 8007d6c:	bf00      	nop
 8007d6e:	e7fd      	b.n	8007d6c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007d70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d00b      	beq.n	8007d90 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8007d78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d7c:	f383 8811 	msr	BASEPRI, r3
 8007d80:	f3bf 8f6f 	isb	sy
 8007d84:	f3bf 8f4f 	dsb	sy
 8007d88:	61fb      	str	r3, [r7, #28]
}
 8007d8a:	bf00      	nop
 8007d8c:	bf00      	nop
 8007d8e:	e7fd      	b.n	8007d8c <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8007d90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d103      	bne.n	8007da0 <xQueueGiveFromISR+0x5c>
 8007d98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d9a:	689b      	ldr	r3, [r3, #8]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d101      	bne.n	8007da4 <xQueueGiveFromISR+0x60>
 8007da0:	2301      	movs	r3, #1
 8007da2:	e000      	b.n	8007da6 <xQueueGiveFromISR+0x62>
 8007da4:	2300      	movs	r3, #0
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d10b      	bne.n	8007dc2 <xQueueGiveFromISR+0x7e>
	__asm volatile
 8007daa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dae:	f383 8811 	msr	BASEPRI, r3
 8007db2:	f3bf 8f6f 	isb	sy
 8007db6:	f3bf 8f4f 	dsb	sy
 8007dba:	61bb      	str	r3, [r7, #24]
}
 8007dbc:	bf00      	nop
 8007dbe:	bf00      	nop
 8007dc0:	e7fd      	b.n	8007dbe <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007dc2:	f002 fb75 	bl	800a4b0 <vPortValidateInterruptPriority>
	__asm volatile
 8007dc6:	f3ef 8211 	mrs	r2, BASEPRI
 8007dca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dce:	f383 8811 	msr	BASEPRI, r3
 8007dd2:	f3bf 8f6f 	isb	sy
 8007dd6:	f3bf 8f4f 	dsb	sy
 8007dda:	617a      	str	r2, [r7, #20]
 8007ddc:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8007dde:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007de0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007de2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007de4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007de6:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8007de8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007dec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007dee:	429a      	cmp	r2, r3
 8007df0:	d22b      	bcs.n	8007e4a <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007df2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007df4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007df8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007dfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dfe:	1c5a      	adds	r2, r3, #1
 8007e00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e02:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007e04:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007e08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e0c:	d112      	bne.n	8007e34 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007e0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d016      	beq.n	8007e44 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007e16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e18:	3324      	adds	r3, #36	@ 0x24
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	f001 f8fa 	bl	8009014 <xTaskRemoveFromEventList>
 8007e20:	4603      	mov	r3, r0
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d00e      	beq.n	8007e44 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007e26:	683b      	ldr	r3, [r7, #0]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d00b      	beq.n	8007e44 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	2201      	movs	r2, #1
 8007e30:	601a      	str	r2, [r3, #0]
 8007e32:	e007      	b.n	8007e44 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007e34:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007e38:	3301      	adds	r3, #1
 8007e3a:	b2db      	uxtb	r3, r3
 8007e3c:	b25a      	sxtb	r2, r3
 8007e3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e40:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8007e44:	2301      	movs	r3, #1
 8007e46:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e48:	e001      	b.n	8007e4e <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e50:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	f383 8811 	msr	BASEPRI, r3
}
 8007e58:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007e5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	3738      	adds	r7, #56	@ 0x38
 8007e60:	46bd      	mov	sp, r7
 8007e62:	bd80      	pop	{r7, pc}

08007e64 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b08c      	sub	sp, #48	@ 0x30
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	60f8      	str	r0, [r7, #12]
 8007e6c:	60b9      	str	r1, [r7, #8]
 8007e6e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007e70:	2300      	movs	r3, #0
 8007e72:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007e78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d10b      	bne.n	8007e96 <xQueueReceive+0x32>
	__asm volatile
 8007e7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e82:	f383 8811 	msr	BASEPRI, r3
 8007e86:	f3bf 8f6f 	isb	sy
 8007e8a:	f3bf 8f4f 	dsb	sy
 8007e8e:	623b      	str	r3, [r7, #32]
}
 8007e90:	bf00      	nop
 8007e92:	bf00      	nop
 8007e94:	e7fd      	b.n	8007e92 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007e96:	68bb      	ldr	r3, [r7, #8]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d103      	bne.n	8007ea4 <xQueueReceive+0x40>
 8007e9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d101      	bne.n	8007ea8 <xQueueReceive+0x44>
 8007ea4:	2301      	movs	r3, #1
 8007ea6:	e000      	b.n	8007eaa <xQueueReceive+0x46>
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d10b      	bne.n	8007ec6 <xQueueReceive+0x62>
	__asm volatile
 8007eae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007eb2:	f383 8811 	msr	BASEPRI, r3
 8007eb6:	f3bf 8f6f 	isb	sy
 8007eba:	f3bf 8f4f 	dsb	sy
 8007ebe:	61fb      	str	r3, [r7, #28]
}
 8007ec0:	bf00      	nop
 8007ec2:	bf00      	nop
 8007ec4:	e7fd      	b.n	8007ec2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007ec6:	f001 fac3 	bl	8009450 <xTaskGetSchedulerState>
 8007eca:	4603      	mov	r3, r0
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d102      	bne.n	8007ed6 <xQueueReceive+0x72>
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d101      	bne.n	8007eda <xQueueReceive+0x76>
 8007ed6:	2301      	movs	r3, #1
 8007ed8:	e000      	b.n	8007edc <xQueueReceive+0x78>
 8007eda:	2300      	movs	r3, #0
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d10b      	bne.n	8007ef8 <xQueueReceive+0x94>
	__asm volatile
 8007ee0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ee4:	f383 8811 	msr	BASEPRI, r3
 8007ee8:	f3bf 8f6f 	isb	sy
 8007eec:	f3bf 8f4f 	dsb	sy
 8007ef0:	61bb      	str	r3, [r7, #24]
}
 8007ef2:	bf00      	nop
 8007ef4:	bf00      	nop
 8007ef6:	e7fd      	b.n	8007ef4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007ef8:	f002 f916 	bl	800a128 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007efc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007efe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f00:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007f02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d01f      	beq.n	8007f48 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007f08:	68b9      	ldr	r1, [r7, #8]
 8007f0a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007f0c:	f000 fa61 	bl	80083d2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007f10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f12:	1e5a      	subs	r2, r3, #1
 8007f14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f16:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007f18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f1a:	691b      	ldr	r3, [r3, #16]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d00f      	beq.n	8007f40 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007f20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f22:	3310      	adds	r3, #16
 8007f24:	4618      	mov	r0, r3
 8007f26:	f001 f875 	bl	8009014 <xTaskRemoveFromEventList>
 8007f2a:	4603      	mov	r3, r0
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d007      	beq.n	8007f40 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007f30:	4b3c      	ldr	r3, [pc, #240]	@ (8008024 <xQueueReceive+0x1c0>)
 8007f32:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007f36:	601a      	str	r2, [r3, #0]
 8007f38:	f3bf 8f4f 	dsb	sy
 8007f3c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007f40:	f002 f924 	bl	800a18c <vPortExitCritical>
				return pdPASS;
 8007f44:	2301      	movs	r3, #1
 8007f46:	e069      	b.n	800801c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d103      	bne.n	8007f56 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007f4e:	f002 f91d 	bl	800a18c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007f52:	2300      	movs	r3, #0
 8007f54:	e062      	b.n	800801c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007f56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d106      	bne.n	8007f6a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007f5c:	f107 0310 	add.w	r3, r7, #16
 8007f60:	4618      	mov	r0, r3
 8007f62:	f001 f8bd 	bl	80090e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007f66:	2301      	movs	r3, #1
 8007f68:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007f6a:	f002 f90f 	bl	800a18c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007f6e:	f000 fdc3 	bl	8008af8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007f72:	f002 f8d9 	bl	800a128 <vPortEnterCritical>
 8007f76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f78:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007f7c:	b25b      	sxtb	r3, r3
 8007f7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f82:	d103      	bne.n	8007f8c <xQueueReceive+0x128>
 8007f84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f86:	2200      	movs	r2, #0
 8007f88:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007f8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f8e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007f92:	b25b      	sxtb	r3, r3
 8007f94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f98:	d103      	bne.n	8007fa2 <xQueueReceive+0x13e>
 8007f9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007fa2:	f002 f8f3 	bl	800a18c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007fa6:	1d3a      	adds	r2, r7, #4
 8007fa8:	f107 0310 	add.w	r3, r7, #16
 8007fac:	4611      	mov	r1, r2
 8007fae:	4618      	mov	r0, r3
 8007fb0:	f001 f8ac 	bl	800910c <xTaskCheckForTimeOut>
 8007fb4:	4603      	mov	r3, r0
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d123      	bne.n	8008002 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007fba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007fbc:	f000 fa81 	bl	80084c2 <prvIsQueueEmpty>
 8007fc0:	4603      	mov	r3, r0
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d017      	beq.n	8007ff6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007fc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fc8:	3324      	adds	r3, #36	@ 0x24
 8007fca:	687a      	ldr	r2, [r7, #4]
 8007fcc:	4611      	mov	r1, r2
 8007fce:	4618      	mov	r0, r3
 8007fd0:	f000 ffce 	bl	8008f70 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007fd4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007fd6:	f000 fa22 	bl	800841e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007fda:	f000 fdd3 	bl	8008b84 <xTaskResumeAll>
 8007fde:	4603      	mov	r3, r0
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d189      	bne.n	8007ef8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8007fe4:	4b0f      	ldr	r3, [pc, #60]	@ (8008024 <xQueueReceive+0x1c0>)
 8007fe6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007fea:	601a      	str	r2, [r3, #0]
 8007fec:	f3bf 8f4f 	dsb	sy
 8007ff0:	f3bf 8f6f 	isb	sy
 8007ff4:	e780      	b.n	8007ef8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007ff6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007ff8:	f000 fa11 	bl	800841e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007ffc:	f000 fdc2 	bl	8008b84 <xTaskResumeAll>
 8008000:	e77a      	b.n	8007ef8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008002:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008004:	f000 fa0b 	bl	800841e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008008:	f000 fdbc 	bl	8008b84 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800800c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800800e:	f000 fa58 	bl	80084c2 <prvIsQueueEmpty>
 8008012:	4603      	mov	r3, r0
 8008014:	2b00      	cmp	r3, #0
 8008016:	f43f af6f 	beq.w	8007ef8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800801a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800801c:	4618      	mov	r0, r3
 800801e:	3730      	adds	r7, #48	@ 0x30
 8008020:	46bd      	mov	sp, r7
 8008022:	bd80      	pop	{r7, pc}
 8008024:	e000ed04 	.word	0xe000ed04

08008028 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008028:	b580      	push	{r7, lr}
 800802a:	b08e      	sub	sp, #56	@ 0x38
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
 8008030:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8008032:	2300      	movs	r3, #0
 8008034:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800803a:	2300      	movs	r3, #0
 800803c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800803e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008040:	2b00      	cmp	r3, #0
 8008042:	d10b      	bne.n	800805c <xQueueSemaphoreTake+0x34>
	__asm volatile
 8008044:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008048:	f383 8811 	msr	BASEPRI, r3
 800804c:	f3bf 8f6f 	isb	sy
 8008050:	f3bf 8f4f 	dsb	sy
 8008054:	623b      	str	r3, [r7, #32]
}
 8008056:	bf00      	nop
 8008058:	bf00      	nop
 800805a:	e7fd      	b.n	8008058 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800805c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800805e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008060:	2b00      	cmp	r3, #0
 8008062:	d00b      	beq.n	800807c <xQueueSemaphoreTake+0x54>
	__asm volatile
 8008064:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008068:	f383 8811 	msr	BASEPRI, r3
 800806c:	f3bf 8f6f 	isb	sy
 8008070:	f3bf 8f4f 	dsb	sy
 8008074:	61fb      	str	r3, [r7, #28]
}
 8008076:	bf00      	nop
 8008078:	bf00      	nop
 800807a:	e7fd      	b.n	8008078 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800807c:	f001 f9e8 	bl	8009450 <xTaskGetSchedulerState>
 8008080:	4603      	mov	r3, r0
 8008082:	2b00      	cmp	r3, #0
 8008084:	d102      	bne.n	800808c <xQueueSemaphoreTake+0x64>
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d101      	bne.n	8008090 <xQueueSemaphoreTake+0x68>
 800808c:	2301      	movs	r3, #1
 800808e:	e000      	b.n	8008092 <xQueueSemaphoreTake+0x6a>
 8008090:	2300      	movs	r3, #0
 8008092:	2b00      	cmp	r3, #0
 8008094:	d10b      	bne.n	80080ae <xQueueSemaphoreTake+0x86>
	__asm volatile
 8008096:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800809a:	f383 8811 	msr	BASEPRI, r3
 800809e:	f3bf 8f6f 	isb	sy
 80080a2:	f3bf 8f4f 	dsb	sy
 80080a6:	61bb      	str	r3, [r7, #24]
}
 80080a8:	bf00      	nop
 80080aa:	bf00      	nop
 80080ac:	e7fd      	b.n	80080aa <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80080ae:	f002 f83b 	bl	800a128 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80080b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080b6:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80080b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d024      	beq.n	8008108 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80080be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080c0:	1e5a      	subs	r2, r3, #1
 80080c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080c4:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80080c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d104      	bne.n	80080d8 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80080ce:	f001 fb39 	bl	8009744 <pvTaskIncrementMutexHeldCount>
 80080d2:	4602      	mov	r2, r0
 80080d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080d6:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80080d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080da:	691b      	ldr	r3, [r3, #16]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d00f      	beq.n	8008100 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80080e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080e2:	3310      	adds	r3, #16
 80080e4:	4618      	mov	r0, r3
 80080e6:	f000 ff95 	bl	8009014 <xTaskRemoveFromEventList>
 80080ea:	4603      	mov	r3, r0
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d007      	beq.n	8008100 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80080f0:	4b54      	ldr	r3, [pc, #336]	@ (8008244 <xQueueSemaphoreTake+0x21c>)
 80080f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80080f6:	601a      	str	r2, [r3, #0]
 80080f8:	f3bf 8f4f 	dsb	sy
 80080fc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008100:	f002 f844 	bl	800a18c <vPortExitCritical>
				return pdPASS;
 8008104:	2301      	movs	r3, #1
 8008106:	e098      	b.n	800823a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008108:	683b      	ldr	r3, [r7, #0]
 800810a:	2b00      	cmp	r3, #0
 800810c:	d112      	bne.n	8008134 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800810e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008110:	2b00      	cmp	r3, #0
 8008112:	d00b      	beq.n	800812c <xQueueSemaphoreTake+0x104>
	__asm volatile
 8008114:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008118:	f383 8811 	msr	BASEPRI, r3
 800811c:	f3bf 8f6f 	isb	sy
 8008120:	f3bf 8f4f 	dsb	sy
 8008124:	617b      	str	r3, [r7, #20]
}
 8008126:	bf00      	nop
 8008128:	bf00      	nop
 800812a:	e7fd      	b.n	8008128 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800812c:	f002 f82e 	bl	800a18c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008130:	2300      	movs	r3, #0
 8008132:	e082      	b.n	800823a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008134:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008136:	2b00      	cmp	r3, #0
 8008138:	d106      	bne.n	8008148 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800813a:	f107 030c 	add.w	r3, r7, #12
 800813e:	4618      	mov	r0, r3
 8008140:	f000 ffce 	bl	80090e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008144:	2301      	movs	r3, #1
 8008146:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008148:	f002 f820 	bl	800a18c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800814c:	f000 fcd4 	bl	8008af8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008150:	f001 ffea 	bl	800a128 <vPortEnterCritical>
 8008154:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008156:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800815a:	b25b      	sxtb	r3, r3
 800815c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008160:	d103      	bne.n	800816a <xQueueSemaphoreTake+0x142>
 8008162:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008164:	2200      	movs	r2, #0
 8008166:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800816a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800816c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008170:	b25b      	sxtb	r3, r3
 8008172:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008176:	d103      	bne.n	8008180 <xQueueSemaphoreTake+0x158>
 8008178:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800817a:	2200      	movs	r2, #0
 800817c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008180:	f002 f804 	bl	800a18c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008184:	463a      	mov	r2, r7
 8008186:	f107 030c 	add.w	r3, r7, #12
 800818a:	4611      	mov	r1, r2
 800818c:	4618      	mov	r0, r3
 800818e:	f000 ffbd 	bl	800910c <xTaskCheckForTimeOut>
 8008192:	4603      	mov	r3, r0
 8008194:	2b00      	cmp	r3, #0
 8008196:	d132      	bne.n	80081fe <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008198:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800819a:	f000 f992 	bl	80084c2 <prvIsQueueEmpty>
 800819e:	4603      	mov	r3, r0
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d026      	beq.n	80081f2 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80081a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d109      	bne.n	80081c0 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80081ac:	f001 ffbc 	bl	800a128 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80081b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081b2:	689b      	ldr	r3, [r3, #8]
 80081b4:	4618      	mov	r0, r3
 80081b6:	f001 f969 	bl	800948c <xTaskPriorityInherit>
 80081ba:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80081bc:	f001 ffe6 	bl	800a18c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80081c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081c2:	3324      	adds	r3, #36	@ 0x24
 80081c4:	683a      	ldr	r2, [r7, #0]
 80081c6:	4611      	mov	r1, r2
 80081c8:	4618      	mov	r0, r3
 80081ca:	f000 fed1 	bl	8008f70 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80081ce:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80081d0:	f000 f925 	bl	800841e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80081d4:	f000 fcd6 	bl	8008b84 <xTaskResumeAll>
 80081d8:	4603      	mov	r3, r0
 80081da:	2b00      	cmp	r3, #0
 80081dc:	f47f af67 	bne.w	80080ae <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80081e0:	4b18      	ldr	r3, [pc, #96]	@ (8008244 <xQueueSemaphoreTake+0x21c>)
 80081e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80081e6:	601a      	str	r2, [r3, #0]
 80081e8:	f3bf 8f4f 	dsb	sy
 80081ec:	f3bf 8f6f 	isb	sy
 80081f0:	e75d      	b.n	80080ae <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80081f2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80081f4:	f000 f913 	bl	800841e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80081f8:	f000 fcc4 	bl	8008b84 <xTaskResumeAll>
 80081fc:	e757      	b.n	80080ae <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80081fe:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008200:	f000 f90d 	bl	800841e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008204:	f000 fcbe 	bl	8008b84 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008208:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800820a:	f000 f95a 	bl	80084c2 <prvIsQueueEmpty>
 800820e:	4603      	mov	r3, r0
 8008210:	2b00      	cmp	r3, #0
 8008212:	f43f af4c 	beq.w	80080ae <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8008216:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008218:	2b00      	cmp	r3, #0
 800821a:	d00d      	beq.n	8008238 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800821c:	f001 ff84 	bl	800a128 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008220:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008222:	f000 f854 	bl	80082ce <prvGetDisinheritPriorityAfterTimeout>
 8008226:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8008228:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800822a:	689b      	ldr	r3, [r3, #8]
 800822c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800822e:	4618      	mov	r0, r3
 8008230:	f001 fa04 	bl	800963c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008234:	f001 ffaa 	bl	800a18c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008238:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800823a:	4618      	mov	r0, r3
 800823c:	3738      	adds	r7, #56	@ 0x38
 800823e:	46bd      	mov	sp, r7
 8008240:	bd80      	pop	{r7, pc}
 8008242:	bf00      	nop
 8008244:	e000ed04 	.word	0xe000ed04

08008248 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8008248:	b580      	push	{r7, lr}
 800824a:	b084      	sub	sp, #16
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d10b      	bne.n	800826e <uxQueueMessagesWaiting+0x26>
	__asm volatile
 8008256:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800825a:	f383 8811 	msr	BASEPRI, r3
 800825e:	f3bf 8f6f 	isb	sy
 8008262:	f3bf 8f4f 	dsb	sy
 8008266:	60bb      	str	r3, [r7, #8]
}
 8008268:	bf00      	nop
 800826a:	bf00      	nop
 800826c:	e7fd      	b.n	800826a <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 800826e:	f001 ff5b 	bl	800a128 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008276:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8008278:	f001 ff88 	bl	800a18c <vPortExitCritical>

	return uxReturn;
 800827c:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800827e:	4618      	mov	r0, r3
 8008280:	3710      	adds	r7, #16
 8008282:	46bd      	mov	sp, r7
 8008284:	bd80      	pop	{r7, pc}

08008286 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8008286:	b580      	push	{r7, lr}
 8008288:	b084      	sub	sp, #16
 800828a:	af00      	add	r7, sp, #0
 800828c:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	2b00      	cmp	r3, #0
 8008296:	d10b      	bne.n	80082b0 <vQueueDelete+0x2a>
	__asm volatile
 8008298:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800829c:	f383 8811 	msr	BASEPRI, r3
 80082a0:	f3bf 8f6f 	isb	sy
 80082a4:	f3bf 8f4f 	dsb	sy
 80082a8:	60bb      	str	r3, [r7, #8]
}
 80082aa:	bf00      	nop
 80082ac:	bf00      	nop
 80082ae:	e7fd      	b.n	80082ac <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80082b0:	68f8      	ldr	r0, [r7, #12]
 80082b2:	f000 f95f 	bl	8008574 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d102      	bne.n	80082c6 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 80082c0:	68f8      	ldr	r0, [r7, #12]
 80082c2:	f002 fa05 	bl	800a6d0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80082c6:	bf00      	nop
 80082c8:	3710      	adds	r7, #16
 80082ca:	46bd      	mov	sp, r7
 80082cc:	bd80      	pop	{r7, pc}

080082ce <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80082ce:	b480      	push	{r7}
 80082d0:	b085      	sub	sp, #20
 80082d2:	af00      	add	r7, sp, #0
 80082d4:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d006      	beq.n	80082ec <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 80082e8:	60fb      	str	r3, [r7, #12]
 80082ea:	e001      	b.n	80082f0 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80082ec:	2300      	movs	r3, #0
 80082ee:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80082f0:	68fb      	ldr	r3, [r7, #12]
	}
 80082f2:	4618      	mov	r0, r3
 80082f4:	3714      	adds	r7, #20
 80082f6:	46bd      	mov	sp, r7
 80082f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fc:	4770      	bx	lr

080082fe <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80082fe:	b580      	push	{r7, lr}
 8008300:	b086      	sub	sp, #24
 8008302:	af00      	add	r7, sp, #0
 8008304:	60f8      	str	r0, [r7, #12]
 8008306:	60b9      	str	r1, [r7, #8]
 8008308:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800830a:	2300      	movs	r3, #0
 800830c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008312:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008318:	2b00      	cmp	r3, #0
 800831a:	d10d      	bne.n	8008338 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d14d      	bne.n	80083c0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	689b      	ldr	r3, [r3, #8]
 8008328:	4618      	mov	r0, r3
 800832a:	f001 f917 	bl	800955c <xTaskPriorityDisinherit>
 800832e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	2200      	movs	r2, #0
 8008334:	609a      	str	r2, [r3, #8]
 8008336:	e043      	b.n	80083c0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d119      	bne.n	8008372 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	6858      	ldr	r0, [r3, #4]
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008346:	461a      	mov	r2, r3
 8008348:	68b9      	ldr	r1, [r7, #8]
 800834a:	f003 fd8e 	bl	800be6a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	685a      	ldr	r2, [r3, #4]
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008356:	441a      	add	r2, r3
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	685a      	ldr	r2, [r3, #4]
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	689b      	ldr	r3, [r3, #8]
 8008364:	429a      	cmp	r2, r3
 8008366:	d32b      	bcc.n	80083c0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	681a      	ldr	r2, [r3, #0]
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	605a      	str	r2, [r3, #4]
 8008370:	e026      	b.n	80083c0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	68d8      	ldr	r0, [r3, #12]
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800837a:	461a      	mov	r2, r3
 800837c:	68b9      	ldr	r1, [r7, #8]
 800837e:	f003 fd74 	bl	800be6a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	68da      	ldr	r2, [r3, #12]
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800838a:	425b      	negs	r3, r3
 800838c:	441a      	add	r2, r3
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	68da      	ldr	r2, [r3, #12]
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	429a      	cmp	r2, r3
 800839c:	d207      	bcs.n	80083ae <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	689a      	ldr	r2, [r3, #8]
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083a6:	425b      	negs	r3, r3
 80083a8:	441a      	add	r2, r3
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	2b02      	cmp	r3, #2
 80083b2:	d105      	bne.n	80083c0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80083b4:	693b      	ldr	r3, [r7, #16]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d002      	beq.n	80083c0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80083ba:	693b      	ldr	r3, [r7, #16]
 80083bc:	3b01      	subs	r3, #1
 80083be:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80083c0:	693b      	ldr	r3, [r7, #16]
 80083c2:	1c5a      	adds	r2, r3, #1
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80083c8:	697b      	ldr	r3, [r7, #20]
}
 80083ca:	4618      	mov	r0, r3
 80083cc:	3718      	adds	r7, #24
 80083ce:	46bd      	mov	sp, r7
 80083d0:	bd80      	pop	{r7, pc}

080083d2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80083d2:	b580      	push	{r7, lr}
 80083d4:	b082      	sub	sp, #8
 80083d6:	af00      	add	r7, sp, #0
 80083d8:	6078      	str	r0, [r7, #4]
 80083da:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d018      	beq.n	8008416 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	68da      	ldr	r2, [r3, #12]
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083ec:	441a      	add	r2, r3
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	68da      	ldr	r2, [r3, #12]
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	689b      	ldr	r3, [r3, #8]
 80083fa:	429a      	cmp	r2, r3
 80083fc:	d303      	bcc.n	8008406 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681a      	ldr	r2, [r3, #0]
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	68d9      	ldr	r1, [r3, #12]
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800840e:	461a      	mov	r2, r3
 8008410:	6838      	ldr	r0, [r7, #0]
 8008412:	f003 fd2a 	bl	800be6a <memcpy>
	}
}
 8008416:	bf00      	nop
 8008418:	3708      	adds	r7, #8
 800841a:	46bd      	mov	sp, r7
 800841c:	bd80      	pop	{r7, pc}

0800841e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800841e:	b580      	push	{r7, lr}
 8008420:	b084      	sub	sp, #16
 8008422:	af00      	add	r7, sp, #0
 8008424:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008426:	f001 fe7f 	bl	800a128 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008430:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008432:	e011      	b.n	8008458 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008438:	2b00      	cmp	r3, #0
 800843a:	d012      	beq.n	8008462 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	3324      	adds	r3, #36	@ 0x24
 8008440:	4618      	mov	r0, r3
 8008442:	f000 fde7 	bl	8009014 <xTaskRemoveFromEventList>
 8008446:	4603      	mov	r3, r0
 8008448:	2b00      	cmp	r3, #0
 800844a:	d001      	beq.n	8008450 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800844c:	f000 fec2 	bl	80091d4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008450:	7bfb      	ldrb	r3, [r7, #15]
 8008452:	3b01      	subs	r3, #1
 8008454:	b2db      	uxtb	r3, r3
 8008456:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008458:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800845c:	2b00      	cmp	r3, #0
 800845e:	dce9      	bgt.n	8008434 <prvUnlockQueue+0x16>
 8008460:	e000      	b.n	8008464 <prvUnlockQueue+0x46>
					break;
 8008462:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	22ff      	movs	r2, #255	@ 0xff
 8008468:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800846c:	f001 fe8e 	bl	800a18c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008470:	f001 fe5a 	bl	800a128 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800847a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800847c:	e011      	b.n	80084a2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	691b      	ldr	r3, [r3, #16]
 8008482:	2b00      	cmp	r3, #0
 8008484:	d012      	beq.n	80084ac <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	3310      	adds	r3, #16
 800848a:	4618      	mov	r0, r3
 800848c:	f000 fdc2 	bl	8009014 <xTaskRemoveFromEventList>
 8008490:	4603      	mov	r3, r0
 8008492:	2b00      	cmp	r3, #0
 8008494:	d001      	beq.n	800849a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008496:	f000 fe9d 	bl	80091d4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800849a:	7bbb      	ldrb	r3, [r7, #14]
 800849c:	3b01      	subs	r3, #1
 800849e:	b2db      	uxtb	r3, r3
 80084a0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80084a2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	dce9      	bgt.n	800847e <prvUnlockQueue+0x60>
 80084aa:	e000      	b.n	80084ae <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80084ac:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	22ff      	movs	r2, #255	@ 0xff
 80084b2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80084b6:	f001 fe69 	bl	800a18c <vPortExitCritical>
}
 80084ba:	bf00      	nop
 80084bc:	3710      	adds	r7, #16
 80084be:	46bd      	mov	sp, r7
 80084c0:	bd80      	pop	{r7, pc}

080084c2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80084c2:	b580      	push	{r7, lr}
 80084c4:	b084      	sub	sp, #16
 80084c6:	af00      	add	r7, sp, #0
 80084c8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80084ca:	f001 fe2d 	bl	800a128 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d102      	bne.n	80084dc <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80084d6:	2301      	movs	r3, #1
 80084d8:	60fb      	str	r3, [r7, #12]
 80084da:	e001      	b.n	80084e0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80084dc:	2300      	movs	r3, #0
 80084de:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80084e0:	f001 fe54 	bl	800a18c <vPortExitCritical>

	return xReturn;
 80084e4:	68fb      	ldr	r3, [r7, #12]
}
 80084e6:	4618      	mov	r0, r3
 80084e8:	3710      	adds	r7, #16
 80084ea:	46bd      	mov	sp, r7
 80084ec:	bd80      	pop	{r7, pc}

080084ee <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80084ee:	b580      	push	{r7, lr}
 80084f0:	b084      	sub	sp, #16
 80084f2:	af00      	add	r7, sp, #0
 80084f4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80084f6:	f001 fe17 	bl	800a128 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008502:	429a      	cmp	r2, r3
 8008504:	d102      	bne.n	800850c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008506:	2301      	movs	r3, #1
 8008508:	60fb      	str	r3, [r7, #12]
 800850a:	e001      	b.n	8008510 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800850c:	2300      	movs	r3, #0
 800850e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008510:	f001 fe3c 	bl	800a18c <vPortExitCritical>

	return xReturn;
 8008514:	68fb      	ldr	r3, [r7, #12]
}
 8008516:	4618      	mov	r0, r3
 8008518:	3710      	adds	r7, #16
 800851a:	46bd      	mov	sp, r7
 800851c:	bd80      	pop	{r7, pc}
	...

08008520 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008520:	b480      	push	{r7}
 8008522:	b085      	sub	sp, #20
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
 8008528:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800852a:	2300      	movs	r3, #0
 800852c:	60fb      	str	r3, [r7, #12]
 800852e:	e014      	b.n	800855a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008530:	4a0f      	ldr	r2, [pc, #60]	@ (8008570 <vQueueAddToRegistry+0x50>)
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d10b      	bne.n	8008554 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800853c:	490c      	ldr	r1, [pc, #48]	@ (8008570 <vQueueAddToRegistry+0x50>)
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	683a      	ldr	r2, [r7, #0]
 8008542:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008546:	4a0a      	ldr	r2, [pc, #40]	@ (8008570 <vQueueAddToRegistry+0x50>)
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	00db      	lsls	r3, r3, #3
 800854c:	4413      	add	r3, r2
 800854e:	687a      	ldr	r2, [r7, #4]
 8008550:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008552:	e006      	b.n	8008562 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	3301      	adds	r3, #1
 8008558:	60fb      	str	r3, [r7, #12]
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	2b07      	cmp	r3, #7
 800855e:	d9e7      	bls.n	8008530 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008560:	bf00      	nop
 8008562:	bf00      	nop
 8008564:	3714      	adds	r7, #20
 8008566:	46bd      	mov	sp, r7
 8008568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856c:	4770      	bx	lr
 800856e:	bf00      	nop
 8008570:	24000a9c 	.word	0x24000a9c

08008574 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8008574:	b480      	push	{r7}
 8008576:	b085      	sub	sp, #20
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800857c:	2300      	movs	r3, #0
 800857e:	60fb      	str	r3, [r7, #12]
 8008580:	e016      	b.n	80085b0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8008582:	4a10      	ldr	r2, [pc, #64]	@ (80085c4 <vQueueUnregisterQueue+0x50>)
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	00db      	lsls	r3, r3, #3
 8008588:	4413      	add	r3, r2
 800858a:	685b      	ldr	r3, [r3, #4]
 800858c:	687a      	ldr	r2, [r7, #4]
 800858e:	429a      	cmp	r2, r3
 8008590:	d10b      	bne.n	80085aa <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8008592:	4a0c      	ldr	r2, [pc, #48]	@ (80085c4 <vQueueUnregisterQueue+0x50>)
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	2100      	movs	r1, #0
 8008598:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800859c:	4a09      	ldr	r2, [pc, #36]	@ (80085c4 <vQueueUnregisterQueue+0x50>)
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	00db      	lsls	r3, r3, #3
 80085a2:	4413      	add	r3, r2
 80085a4:	2200      	movs	r2, #0
 80085a6:	605a      	str	r2, [r3, #4]
				break;
 80085a8:	e006      	b.n	80085b8 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	3301      	adds	r3, #1
 80085ae:	60fb      	str	r3, [r7, #12]
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	2b07      	cmp	r3, #7
 80085b4:	d9e5      	bls.n	8008582 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80085b6:	bf00      	nop
 80085b8:	bf00      	nop
 80085ba:	3714      	adds	r7, #20
 80085bc:	46bd      	mov	sp, r7
 80085be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c2:	4770      	bx	lr
 80085c4:	24000a9c 	.word	0x24000a9c

080085c8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b086      	sub	sp, #24
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	60f8      	str	r0, [r7, #12]
 80085d0:	60b9      	str	r1, [r7, #8]
 80085d2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80085d8:	f001 fda6 	bl	800a128 <vPortEnterCritical>
 80085dc:	697b      	ldr	r3, [r7, #20]
 80085de:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80085e2:	b25b      	sxtb	r3, r3
 80085e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085e8:	d103      	bne.n	80085f2 <vQueueWaitForMessageRestricted+0x2a>
 80085ea:	697b      	ldr	r3, [r7, #20]
 80085ec:	2200      	movs	r2, #0
 80085ee:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80085f2:	697b      	ldr	r3, [r7, #20]
 80085f4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80085f8:	b25b      	sxtb	r3, r3
 80085fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085fe:	d103      	bne.n	8008608 <vQueueWaitForMessageRestricted+0x40>
 8008600:	697b      	ldr	r3, [r7, #20]
 8008602:	2200      	movs	r2, #0
 8008604:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008608:	f001 fdc0 	bl	800a18c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800860c:	697b      	ldr	r3, [r7, #20]
 800860e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008610:	2b00      	cmp	r3, #0
 8008612:	d106      	bne.n	8008622 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008614:	697b      	ldr	r3, [r7, #20]
 8008616:	3324      	adds	r3, #36	@ 0x24
 8008618:	687a      	ldr	r2, [r7, #4]
 800861a:	68b9      	ldr	r1, [r7, #8]
 800861c:	4618      	mov	r0, r3
 800861e:	f000 fccd 	bl	8008fbc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008622:	6978      	ldr	r0, [r7, #20]
 8008624:	f7ff fefb 	bl	800841e <prvUnlockQueue>
	}
 8008628:	bf00      	nop
 800862a:	3718      	adds	r7, #24
 800862c:	46bd      	mov	sp, r7
 800862e:	bd80      	pop	{r7, pc}

08008630 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008630:	b580      	push	{r7, lr}
 8008632:	b08e      	sub	sp, #56	@ 0x38
 8008634:	af04      	add	r7, sp, #16
 8008636:	60f8      	str	r0, [r7, #12]
 8008638:	60b9      	str	r1, [r7, #8]
 800863a:	607a      	str	r2, [r7, #4]
 800863c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800863e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008640:	2b00      	cmp	r3, #0
 8008642:	d10b      	bne.n	800865c <xTaskCreateStatic+0x2c>
	__asm volatile
 8008644:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008648:	f383 8811 	msr	BASEPRI, r3
 800864c:	f3bf 8f6f 	isb	sy
 8008650:	f3bf 8f4f 	dsb	sy
 8008654:	623b      	str	r3, [r7, #32]
}
 8008656:	bf00      	nop
 8008658:	bf00      	nop
 800865a:	e7fd      	b.n	8008658 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800865c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800865e:	2b00      	cmp	r3, #0
 8008660:	d10b      	bne.n	800867a <xTaskCreateStatic+0x4a>
	__asm volatile
 8008662:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008666:	f383 8811 	msr	BASEPRI, r3
 800866a:	f3bf 8f6f 	isb	sy
 800866e:	f3bf 8f4f 	dsb	sy
 8008672:	61fb      	str	r3, [r7, #28]
}
 8008674:	bf00      	nop
 8008676:	bf00      	nop
 8008678:	e7fd      	b.n	8008676 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800867a:	23a8      	movs	r3, #168	@ 0xa8
 800867c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800867e:	693b      	ldr	r3, [r7, #16]
 8008680:	2ba8      	cmp	r3, #168	@ 0xa8
 8008682:	d00b      	beq.n	800869c <xTaskCreateStatic+0x6c>
	__asm volatile
 8008684:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008688:	f383 8811 	msr	BASEPRI, r3
 800868c:	f3bf 8f6f 	isb	sy
 8008690:	f3bf 8f4f 	dsb	sy
 8008694:	61bb      	str	r3, [r7, #24]
}
 8008696:	bf00      	nop
 8008698:	bf00      	nop
 800869a:	e7fd      	b.n	8008698 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800869c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800869e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d01e      	beq.n	80086e2 <xTaskCreateStatic+0xb2>
 80086a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d01b      	beq.n	80086e2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80086aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086ac:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80086ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086b0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80086b2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80086b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086b6:	2202      	movs	r2, #2
 80086b8:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80086bc:	2300      	movs	r3, #0
 80086be:	9303      	str	r3, [sp, #12]
 80086c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086c2:	9302      	str	r3, [sp, #8]
 80086c4:	f107 0314 	add.w	r3, r7, #20
 80086c8:	9301      	str	r3, [sp, #4]
 80086ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086cc:	9300      	str	r3, [sp, #0]
 80086ce:	683b      	ldr	r3, [r7, #0]
 80086d0:	687a      	ldr	r2, [r7, #4]
 80086d2:	68b9      	ldr	r1, [r7, #8]
 80086d4:	68f8      	ldr	r0, [r7, #12]
 80086d6:	f000 f851 	bl	800877c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80086da:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80086dc:	f000 f8f6 	bl	80088cc <prvAddNewTaskToReadyList>
 80086e0:	e001      	b.n	80086e6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80086e2:	2300      	movs	r3, #0
 80086e4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80086e6:	697b      	ldr	r3, [r7, #20]
	}
 80086e8:	4618      	mov	r0, r3
 80086ea:	3728      	adds	r7, #40	@ 0x28
 80086ec:	46bd      	mov	sp, r7
 80086ee:	bd80      	pop	{r7, pc}

080086f0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80086f0:	b580      	push	{r7, lr}
 80086f2:	b08c      	sub	sp, #48	@ 0x30
 80086f4:	af04      	add	r7, sp, #16
 80086f6:	60f8      	str	r0, [r7, #12]
 80086f8:	60b9      	str	r1, [r7, #8]
 80086fa:	603b      	str	r3, [r7, #0]
 80086fc:	4613      	mov	r3, r2
 80086fe:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008700:	88fb      	ldrh	r3, [r7, #6]
 8008702:	009b      	lsls	r3, r3, #2
 8008704:	4618      	mov	r0, r3
 8008706:	f001 ff15 	bl	800a534 <pvPortMalloc>
 800870a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800870c:	697b      	ldr	r3, [r7, #20]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d00e      	beq.n	8008730 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008712:	20a8      	movs	r0, #168	@ 0xa8
 8008714:	f001 ff0e 	bl	800a534 <pvPortMalloc>
 8008718:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800871a:	69fb      	ldr	r3, [r7, #28]
 800871c:	2b00      	cmp	r3, #0
 800871e:	d003      	beq.n	8008728 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008720:	69fb      	ldr	r3, [r7, #28]
 8008722:	697a      	ldr	r2, [r7, #20]
 8008724:	631a      	str	r2, [r3, #48]	@ 0x30
 8008726:	e005      	b.n	8008734 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008728:	6978      	ldr	r0, [r7, #20]
 800872a:	f001 ffd1 	bl	800a6d0 <vPortFree>
 800872e:	e001      	b.n	8008734 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008730:	2300      	movs	r3, #0
 8008732:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008734:	69fb      	ldr	r3, [r7, #28]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d017      	beq.n	800876a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800873a:	69fb      	ldr	r3, [r7, #28]
 800873c:	2200      	movs	r2, #0
 800873e:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008742:	88fa      	ldrh	r2, [r7, #6]
 8008744:	2300      	movs	r3, #0
 8008746:	9303      	str	r3, [sp, #12]
 8008748:	69fb      	ldr	r3, [r7, #28]
 800874a:	9302      	str	r3, [sp, #8]
 800874c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800874e:	9301      	str	r3, [sp, #4]
 8008750:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008752:	9300      	str	r3, [sp, #0]
 8008754:	683b      	ldr	r3, [r7, #0]
 8008756:	68b9      	ldr	r1, [r7, #8]
 8008758:	68f8      	ldr	r0, [r7, #12]
 800875a:	f000 f80f 	bl	800877c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800875e:	69f8      	ldr	r0, [r7, #28]
 8008760:	f000 f8b4 	bl	80088cc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008764:	2301      	movs	r3, #1
 8008766:	61bb      	str	r3, [r7, #24]
 8008768:	e002      	b.n	8008770 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800876a:	f04f 33ff 	mov.w	r3, #4294967295
 800876e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008770:	69bb      	ldr	r3, [r7, #24]
	}
 8008772:	4618      	mov	r0, r3
 8008774:	3720      	adds	r7, #32
 8008776:	46bd      	mov	sp, r7
 8008778:	bd80      	pop	{r7, pc}
	...

0800877c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800877c:	b580      	push	{r7, lr}
 800877e:	b088      	sub	sp, #32
 8008780:	af00      	add	r7, sp, #0
 8008782:	60f8      	str	r0, [r7, #12]
 8008784:	60b9      	str	r1, [r7, #8]
 8008786:	607a      	str	r2, [r7, #4]
 8008788:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800878a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800878c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	009b      	lsls	r3, r3, #2
 8008792:	461a      	mov	r2, r3
 8008794:	21a5      	movs	r1, #165	@ 0xa5
 8008796:	f003 fa3f 	bl	800bc18 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800879a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800879c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800879e:	6879      	ldr	r1, [r7, #4]
 80087a0:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 80087a4:	440b      	add	r3, r1
 80087a6:	009b      	lsls	r3, r3, #2
 80087a8:	4413      	add	r3, r2
 80087aa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80087ac:	69bb      	ldr	r3, [r7, #24]
 80087ae:	f023 0307 	bic.w	r3, r3, #7
 80087b2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80087b4:	69bb      	ldr	r3, [r7, #24]
 80087b6:	f003 0307 	and.w	r3, r3, #7
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d00b      	beq.n	80087d6 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80087be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087c2:	f383 8811 	msr	BASEPRI, r3
 80087c6:	f3bf 8f6f 	isb	sy
 80087ca:	f3bf 8f4f 	dsb	sy
 80087ce:	617b      	str	r3, [r7, #20]
}
 80087d0:	bf00      	nop
 80087d2:	bf00      	nop
 80087d4:	e7fd      	b.n	80087d2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80087d6:	68bb      	ldr	r3, [r7, #8]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d01f      	beq.n	800881c <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80087dc:	2300      	movs	r3, #0
 80087de:	61fb      	str	r3, [r7, #28]
 80087e0:	e012      	b.n	8008808 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80087e2:	68ba      	ldr	r2, [r7, #8]
 80087e4:	69fb      	ldr	r3, [r7, #28]
 80087e6:	4413      	add	r3, r2
 80087e8:	7819      	ldrb	r1, [r3, #0]
 80087ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80087ec:	69fb      	ldr	r3, [r7, #28]
 80087ee:	4413      	add	r3, r2
 80087f0:	3334      	adds	r3, #52	@ 0x34
 80087f2:	460a      	mov	r2, r1
 80087f4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80087f6:	68ba      	ldr	r2, [r7, #8]
 80087f8:	69fb      	ldr	r3, [r7, #28]
 80087fa:	4413      	add	r3, r2
 80087fc:	781b      	ldrb	r3, [r3, #0]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d006      	beq.n	8008810 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008802:	69fb      	ldr	r3, [r7, #28]
 8008804:	3301      	adds	r3, #1
 8008806:	61fb      	str	r3, [r7, #28]
 8008808:	69fb      	ldr	r3, [r7, #28]
 800880a:	2b0f      	cmp	r3, #15
 800880c:	d9e9      	bls.n	80087e2 <prvInitialiseNewTask+0x66>
 800880e:	e000      	b.n	8008812 <prvInitialiseNewTask+0x96>
			{
				break;
 8008810:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008812:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008814:	2200      	movs	r2, #0
 8008816:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800881a:	e003      	b.n	8008824 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800881c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800881e:	2200      	movs	r2, #0
 8008820:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008824:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008826:	2b37      	cmp	r3, #55	@ 0x37
 8008828:	d901      	bls.n	800882e <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800882a:	2337      	movs	r3, #55	@ 0x37
 800882c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800882e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008830:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008832:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008834:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008836:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008838:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800883a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800883c:	2200      	movs	r2, #0
 800883e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008840:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008842:	3304      	adds	r3, #4
 8008844:	4618      	mov	r0, r3
 8008846:	f7fe fecf 	bl	80075e8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800884a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800884c:	3318      	adds	r3, #24
 800884e:	4618      	mov	r0, r3
 8008850:	f7fe feca 	bl	80075e8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008854:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008856:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008858:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800885a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800885c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008860:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008862:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008864:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008866:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008868:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800886a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800886c:	2200      	movs	r2, #0
 800886e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008872:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008874:	2200      	movs	r2, #0
 8008876:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800887a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800887c:	3354      	adds	r3, #84	@ 0x54
 800887e:	224c      	movs	r2, #76	@ 0x4c
 8008880:	2100      	movs	r1, #0
 8008882:	4618      	mov	r0, r3
 8008884:	f003 f9c8 	bl	800bc18 <memset>
 8008888:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800888a:	4a0d      	ldr	r2, [pc, #52]	@ (80088c0 <prvInitialiseNewTask+0x144>)
 800888c:	659a      	str	r2, [r3, #88]	@ 0x58
 800888e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008890:	4a0c      	ldr	r2, [pc, #48]	@ (80088c4 <prvInitialiseNewTask+0x148>)
 8008892:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008894:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008896:	4a0c      	ldr	r2, [pc, #48]	@ (80088c8 <prvInitialiseNewTask+0x14c>)
 8008898:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800889a:	683a      	ldr	r2, [r7, #0]
 800889c:	68f9      	ldr	r1, [r7, #12]
 800889e:	69b8      	ldr	r0, [r7, #24]
 80088a0:	f001 fb12 	bl	8009ec8 <pxPortInitialiseStack>
 80088a4:	4602      	mov	r2, r0
 80088a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088a8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80088aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d002      	beq.n	80088b6 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80088b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80088b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80088b6:	bf00      	nop
 80088b8:	3720      	adds	r7, #32
 80088ba:	46bd      	mov	sp, r7
 80088bc:	bd80      	pop	{r7, pc}
 80088be:	bf00      	nop
 80088c0:	24004d48 	.word	0x24004d48
 80088c4:	24004db0 	.word	0x24004db0
 80088c8:	24004e18 	.word	0x24004e18

080088cc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80088cc:	b580      	push	{r7, lr}
 80088ce:	b082      	sub	sp, #8
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80088d4:	f001 fc28 	bl	800a128 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80088d8:	4b2d      	ldr	r3, [pc, #180]	@ (8008990 <prvAddNewTaskToReadyList+0xc4>)
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	3301      	adds	r3, #1
 80088de:	4a2c      	ldr	r2, [pc, #176]	@ (8008990 <prvAddNewTaskToReadyList+0xc4>)
 80088e0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80088e2:	4b2c      	ldr	r3, [pc, #176]	@ (8008994 <prvAddNewTaskToReadyList+0xc8>)
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d109      	bne.n	80088fe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80088ea:	4a2a      	ldr	r2, [pc, #168]	@ (8008994 <prvAddNewTaskToReadyList+0xc8>)
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80088f0:	4b27      	ldr	r3, [pc, #156]	@ (8008990 <prvAddNewTaskToReadyList+0xc4>)
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	2b01      	cmp	r3, #1
 80088f6:	d110      	bne.n	800891a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80088f8:	f000 fce6 	bl	80092c8 <prvInitialiseTaskLists>
 80088fc:	e00d      	b.n	800891a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80088fe:	4b26      	ldr	r3, [pc, #152]	@ (8008998 <prvAddNewTaskToReadyList+0xcc>)
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d109      	bne.n	800891a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008906:	4b23      	ldr	r3, [pc, #140]	@ (8008994 <prvAddNewTaskToReadyList+0xc8>)
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008910:	429a      	cmp	r2, r3
 8008912:	d802      	bhi.n	800891a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008914:	4a1f      	ldr	r2, [pc, #124]	@ (8008994 <prvAddNewTaskToReadyList+0xc8>)
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800891a:	4b20      	ldr	r3, [pc, #128]	@ (800899c <prvAddNewTaskToReadyList+0xd0>)
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	3301      	adds	r3, #1
 8008920:	4a1e      	ldr	r2, [pc, #120]	@ (800899c <prvAddNewTaskToReadyList+0xd0>)
 8008922:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008924:	4b1d      	ldr	r3, [pc, #116]	@ (800899c <prvAddNewTaskToReadyList+0xd0>)
 8008926:	681a      	ldr	r2, [r3, #0]
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008930:	4b1b      	ldr	r3, [pc, #108]	@ (80089a0 <prvAddNewTaskToReadyList+0xd4>)
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	429a      	cmp	r2, r3
 8008936:	d903      	bls.n	8008940 <prvAddNewTaskToReadyList+0x74>
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800893c:	4a18      	ldr	r2, [pc, #96]	@ (80089a0 <prvAddNewTaskToReadyList+0xd4>)
 800893e:	6013      	str	r3, [r2, #0]
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008944:	4613      	mov	r3, r2
 8008946:	009b      	lsls	r3, r3, #2
 8008948:	4413      	add	r3, r2
 800894a:	009b      	lsls	r3, r3, #2
 800894c:	4a15      	ldr	r2, [pc, #84]	@ (80089a4 <prvAddNewTaskToReadyList+0xd8>)
 800894e:	441a      	add	r2, r3
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	3304      	adds	r3, #4
 8008954:	4619      	mov	r1, r3
 8008956:	4610      	mov	r0, r2
 8008958:	f7fe fe53 	bl	8007602 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800895c:	f001 fc16 	bl	800a18c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008960:	4b0d      	ldr	r3, [pc, #52]	@ (8008998 <prvAddNewTaskToReadyList+0xcc>)
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	2b00      	cmp	r3, #0
 8008966:	d00e      	beq.n	8008986 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008968:	4b0a      	ldr	r3, [pc, #40]	@ (8008994 <prvAddNewTaskToReadyList+0xc8>)
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008972:	429a      	cmp	r2, r3
 8008974:	d207      	bcs.n	8008986 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008976:	4b0c      	ldr	r3, [pc, #48]	@ (80089a8 <prvAddNewTaskToReadyList+0xdc>)
 8008978:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800897c:	601a      	str	r2, [r3, #0]
 800897e:	f3bf 8f4f 	dsb	sy
 8008982:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008986:	bf00      	nop
 8008988:	3708      	adds	r7, #8
 800898a:	46bd      	mov	sp, r7
 800898c:	bd80      	pop	{r7, pc}
 800898e:	bf00      	nop
 8008990:	24000fb0 	.word	0x24000fb0
 8008994:	24000adc 	.word	0x24000adc
 8008998:	24000fbc 	.word	0x24000fbc
 800899c:	24000fcc 	.word	0x24000fcc
 80089a0:	24000fb8 	.word	0x24000fb8
 80089a4:	24000ae0 	.word	0x24000ae0
 80089a8:	e000ed04 	.word	0xe000ed04

080089ac <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b084      	sub	sp, #16
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80089b4:	2300      	movs	r3, #0
 80089b6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d018      	beq.n	80089f0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80089be:	4b14      	ldr	r3, [pc, #80]	@ (8008a10 <vTaskDelay+0x64>)
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d00b      	beq.n	80089de <vTaskDelay+0x32>
	__asm volatile
 80089c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089ca:	f383 8811 	msr	BASEPRI, r3
 80089ce:	f3bf 8f6f 	isb	sy
 80089d2:	f3bf 8f4f 	dsb	sy
 80089d6:	60bb      	str	r3, [r7, #8]
}
 80089d8:	bf00      	nop
 80089da:	bf00      	nop
 80089dc:	e7fd      	b.n	80089da <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80089de:	f000 f88b 	bl	8008af8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80089e2:	2100      	movs	r1, #0
 80089e4:	6878      	ldr	r0, [r7, #4]
 80089e6:	f000 fec1 	bl	800976c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80089ea:	f000 f8cb 	bl	8008b84 <xTaskResumeAll>
 80089ee:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d107      	bne.n	8008a06 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80089f6:	4b07      	ldr	r3, [pc, #28]	@ (8008a14 <vTaskDelay+0x68>)
 80089f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80089fc:	601a      	str	r2, [r3, #0]
 80089fe:	f3bf 8f4f 	dsb	sy
 8008a02:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008a06:	bf00      	nop
 8008a08:	3710      	adds	r7, #16
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	bd80      	pop	{r7, pc}
 8008a0e:	bf00      	nop
 8008a10:	24000fd8 	.word	0x24000fd8
 8008a14:	e000ed04 	.word	0xe000ed04

08008a18 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	b08a      	sub	sp, #40	@ 0x28
 8008a1c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008a1e:	2300      	movs	r3, #0
 8008a20:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008a22:	2300      	movs	r3, #0
 8008a24:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008a26:	463a      	mov	r2, r7
 8008a28:	1d39      	adds	r1, r7, #4
 8008a2a:	f107 0308 	add.w	r3, r7, #8
 8008a2e:	4618      	mov	r0, r3
 8008a30:	f7fe fd86 	bl	8007540 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008a34:	6839      	ldr	r1, [r7, #0]
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	68ba      	ldr	r2, [r7, #8]
 8008a3a:	9202      	str	r2, [sp, #8]
 8008a3c:	9301      	str	r3, [sp, #4]
 8008a3e:	2300      	movs	r3, #0
 8008a40:	9300      	str	r3, [sp, #0]
 8008a42:	2300      	movs	r3, #0
 8008a44:	460a      	mov	r2, r1
 8008a46:	4924      	ldr	r1, [pc, #144]	@ (8008ad8 <vTaskStartScheduler+0xc0>)
 8008a48:	4824      	ldr	r0, [pc, #144]	@ (8008adc <vTaskStartScheduler+0xc4>)
 8008a4a:	f7ff fdf1 	bl	8008630 <xTaskCreateStatic>
 8008a4e:	4603      	mov	r3, r0
 8008a50:	4a23      	ldr	r2, [pc, #140]	@ (8008ae0 <vTaskStartScheduler+0xc8>)
 8008a52:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008a54:	4b22      	ldr	r3, [pc, #136]	@ (8008ae0 <vTaskStartScheduler+0xc8>)
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d002      	beq.n	8008a62 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008a5c:	2301      	movs	r3, #1
 8008a5e:	617b      	str	r3, [r7, #20]
 8008a60:	e001      	b.n	8008a66 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008a62:	2300      	movs	r3, #0
 8008a64:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008a66:	697b      	ldr	r3, [r7, #20]
 8008a68:	2b01      	cmp	r3, #1
 8008a6a:	d102      	bne.n	8008a72 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008a6c:	f000 fed2 	bl	8009814 <xTimerCreateTimerTask>
 8008a70:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008a72:	697b      	ldr	r3, [r7, #20]
 8008a74:	2b01      	cmp	r3, #1
 8008a76:	d11b      	bne.n	8008ab0 <vTaskStartScheduler+0x98>
	__asm volatile
 8008a78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a7c:	f383 8811 	msr	BASEPRI, r3
 8008a80:	f3bf 8f6f 	isb	sy
 8008a84:	f3bf 8f4f 	dsb	sy
 8008a88:	613b      	str	r3, [r7, #16]
}
 8008a8a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008a8c:	4b15      	ldr	r3, [pc, #84]	@ (8008ae4 <vTaskStartScheduler+0xcc>)
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	3354      	adds	r3, #84	@ 0x54
 8008a92:	4a15      	ldr	r2, [pc, #84]	@ (8008ae8 <vTaskStartScheduler+0xd0>)
 8008a94:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008a96:	4b15      	ldr	r3, [pc, #84]	@ (8008aec <vTaskStartScheduler+0xd4>)
 8008a98:	f04f 32ff 	mov.w	r2, #4294967295
 8008a9c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008a9e:	4b14      	ldr	r3, [pc, #80]	@ (8008af0 <vTaskStartScheduler+0xd8>)
 8008aa0:	2201      	movs	r2, #1
 8008aa2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008aa4:	4b13      	ldr	r3, [pc, #76]	@ (8008af4 <vTaskStartScheduler+0xdc>)
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008aaa:	f001 fa99 	bl	8009fe0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008aae:	e00f      	b.n	8008ad0 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008ab0:	697b      	ldr	r3, [r7, #20]
 8008ab2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ab6:	d10b      	bne.n	8008ad0 <vTaskStartScheduler+0xb8>
	__asm volatile
 8008ab8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008abc:	f383 8811 	msr	BASEPRI, r3
 8008ac0:	f3bf 8f6f 	isb	sy
 8008ac4:	f3bf 8f4f 	dsb	sy
 8008ac8:	60fb      	str	r3, [r7, #12]
}
 8008aca:	bf00      	nop
 8008acc:	bf00      	nop
 8008ace:	e7fd      	b.n	8008acc <vTaskStartScheduler+0xb4>
}
 8008ad0:	bf00      	nop
 8008ad2:	3718      	adds	r7, #24
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	bd80      	pop	{r7, pc}
 8008ad8:	0800f1e8 	.word	0x0800f1e8
 8008adc:	080091ed 	.word	0x080091ed
 8008ae0:	24000fd4 	.word	0x24000fd4
 8008ae4:	24000adc 	.word	0x24000adc
 8008ae8:	24000020 	.word	0x24000020
 8008aec:	24000fd0 	.word	0x24000fd0
 8008af0:	24000fbc 	.word	0x24000fbc
 8008af4:	24000fb4 	.word	0x24000fb4

08008af8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008af8:	b480      	push	{r7}
 8008afa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008afc:	4b04      	ldr	r3, [pc, #16]	@ (8008b10 <vTaskSuspendAll+0x18>)
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	3301      	adds	r3, #1
 8008b02:	4a03      	ldr	r2, [pc, #12]	@ (8008b10 <vTaskSuspendAll+0x18>)
 8008b04:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008b06:	bf00      	nop
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0e:	4770      	bx	lr
 8008b10:	24000fd8 	.word	0x24000fd8

08008b14 <prvGetExpectedIdleTime>:
/*----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

	static TickType_t prvGetExpectedIdleTime( void )
	{
 8008b14:	b480      	push	{r7}
 8008b16:	b083      	sub	sp, #12
 8008b18:	af00      	add	r7, sp, #0
	TickType_t xReturn;
	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	603b      	str	r3, [r7, #0]
		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
		task that are in the Ready state, even though the idle task is
		running. */
		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
		{
			if( uxTopReadyPriority > tskIDLE_PRIORITY )
 8008b1e:	4b14      	ldr	r3, [pc, #80]	@ (8008b70 <prvGetExpectedIdleTime+0x5c>)
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d001      	beq.n	8008b2a <prvGetExpectedIdleTime+0x16>
			{
				uxHigherPriorityReadyTasks = pdTRUE;
 8008b26:	2301      	movs	r3, #1
 8008b28:	603b      	str	r3, [r7, #0]
				uxHigherPriorityReadyTasks = pdTRUE;
			}
		}
		#endif

		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 8008b2a:	4b12      	ldr	r3, [pc, #72]	@ (8008b74 <prvGetExpectedIdleTime+0x60>)
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d002      	beq.n	8008b3a <prvGetExpectedIdleTime+0x26>
		{
			xReturn = 0;
 8008b34:	2300      	movs	r3, #0
 8008b36:	607b      	str	r3, [r7, #4]
 8008b38:	e012      	b.n	8008b60 <prvGetExpectedIdleTime+0x4c>
		}
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 8008b3a:	4b0f      	ldr	r3, [pc, #60]	@ (8008b78 <prvGetExpectedIdleTime+0x64>)
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	2b01      	cmp	r3, #1
 8008b40:	d902      	bls.n	8008b48 <prvGetExpectedIdleTime+0x34>
		{
			/* There are other idle priority tasks in the ready state.  If
			time slicing is used then the very next tick interrupt must be
			processed. */
			xReturn = 0;
 8008b42:	2300      	movs	r3, #0
 8008b44:	607b      	str	r3, [r7, #4]
 8008b46:	e00b      	b.n	8008b60 <prvGetExpectedIdleTime+0x4c>
		}
		else if( uxHigherPriorityReadyTasks != pdFALSE )
 8008b48:	683b      	ldr	r3, [r7, #0]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d002      	beq.n	8008b54 <prvGetExpectedIdleTime+0x40>
		{
			/* There are tasks in the Ready state that have a priority above the
			idle priority.  This path can only be reached if
			configUSE_PREEMPTION is 0. */
			xReturn = 0;
 8008b4e:	2300      	movs	r3, #0
 8008b50:	607b      	str	r3, [r7, #4]
 8008b52:	e005      	b.n	8008b60 <prvGetExpectedIdleTime+0x4c>
		}
		else
		{
			xReturn = xNextTaskUnblockTime - xTickCount;
 8008b54:	4b09      	ldr	r3, [pc, #36]	@ (8008b7c <prvGetExpectedIdleTime+0x68>)
 8008b56:	681a      	ldr	r2, [r3, #0]
 8008b58:	4b09      	ldr	r3, [pc, #36]	@ (8008b80 <prvGetExpectedIdleTime+0x6c>)
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	1ad3      	subs	r3, r2, r3
 8008b5e:	607b      	str	r3, [r7, #4]
		}

		return xReturn;
 8008b60:	687b      	ldr	r3, [r7, #4]
	}
 8008b62:	4618      	mov	r0, r3
 8008b64:	370c      	adds	r7, #12
 8008b66:	46bd      	mov	sp, r7
 8008b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6c:	4770      	bx	lr
 8008b6e:	bf00      	nop
 8008b70:	24000fb8 	.word	0x24000fb8
 8008b74:	24000adc 	.word	0x24000adc
 8008b78:	24000ae0 	.word	0x24000ae0
 8008b7c:	24000fd0 	.word	0x24000fd0
 8008b80:	24000fb4 	.word	0x24000fb4

08008b84 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b084      	sub	sp, #16
 8008b88:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008b8e:	2300      	movs	r3, #0
 8008b90:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008b92:	4b42      	ldr	r3, [pc, #264]	@ (8008c9c <xTaskResumeAll+0x118>)
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d10b      	bne.n	8008bb2 <xTaskResumeAll+0x2e>
	__asm volatile
 8008b9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b9e:	f383 8811 	msr	BASEPRI, r3
 8008ba2:	f3bf 8f6f 	isb	sy
 8008ba6:	f3bf 8f4f 	dsb	sy
 8008baa:	603b      	str	r3, [r7, #0]
}
 8008bac:	bf00      	nop
 8008bae:	bf00      	nop
 8008bb0:	e7fd      	b.n	8008bae <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008bb2:	f001 fab9 	bl	800a128 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008bb6:	4b39      	ldr	r3, [pc, #228]	@ (8008c9c <xTaskResumeAll+0x118>)
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	3b01      	subs	r3, #1
 8008bbc:	4a37      	ldr	r2, [pc, #220]	@ (8008c9c <xTaskResumeAll+0x118>)
 8008bbe:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008bc0:	4b36      	ldr	r3, [pc, #216]	@ (8008c9c <xTaskResumeAll+0x118>)
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d162      	bne.n	8008c8e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008bc8:	4b35      	ldr	r3, [pc, #212]	@ (8008ca0 <xTaskResumeAll+0x11c>)
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d05e      	beq.n	8008c8e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008bd0:	e02f      	b.n	8008c32 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008bd2:	4b34      	ldr	r3, [pc, #208]	@ (8008ca4 <xTaskResumeAll+0x120>)
 8008bd4:	68db      	ldr	r3, [r3, #12]
 8008bd6:	68db      	ldr	r3, [r3, #12]
 8008bd8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	3318      	adds	r3, #24
 8008bde:	4618      	mov	r0, r3
 8008be0:	f7fe fd6c 	bl	80076bc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	3304      	adds	r3, #4
 8008be8:	4618      	mov	r0, r3
 8008bea:	f7fe fd67 	bl	80076bc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008bf2:	4b2d      	ldr	r3, [pc, #180]	@ (8008ca8 <xTaskResumeAll+0x124>)
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	429a      	cmp	r2, r3
 8008bf8:	d903      	bls.n	8008c02 <xTaskResumeAll+0x7e>
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bfe:	4a2a      	ldr	r2, [pc, #168]	@ (8008ca8 <xTaskResumeAll+0x124>)
 8008c00:	6013      	str	r3, [r2, #0]
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c06:	4613      	mov	r3, r2
 8008c08:	009b      	lsls	r3, r3, #2
 8008c0a:	4413      	add	r3, r2
 8008c0c:	009b      	lsls	r3, r3, #2
 8008c0e:	4a27      	ldr	r2, [pc, #156]	@ (8008cac <xTaskResumeAll+0x128>)
 8008c10:	441a      	add	r2, r3
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	3304      	adds	r3, #4
 8008c16:	4619      	mov	r1, r3
 8008c18:	4610      	mov	r0, r2
 8008c1a:	f7fe fcf2 	bl	8007602 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c22:	4b23      	ldr	r3, [pc, #140]	@ (8008cb0 <xTaskResumeAll+0x12c>)
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c28:	429a      	cmp	r2, r3
 8008c2a:	d302      	bcc.n	8008c32 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8008c2c:	4b21      	ldr	r3, [pc, #132]	@ (8008cb4 <xTaskResumeAll+0x130>)
 8008c2e:	2201      	movs	r2, #1
 8008c30:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008c32:	4b1c      	ldr	r3, [pc, #112]	@ (8008ca4 <xTaskResumeAll+0x120>)
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d1cb      	bne.n	8008bd2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d001      	beq.n	8008c44 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008c40:	f000 fbe6 	bl	8009410 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008c44:	4b1c      	ldr	r3, [pc, #112]	@ (8008cb8 <xTaskResumeAll+0x134>)
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d010      	beq.n	8008c72 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008c50:	f000 f86e 	bl	8008d30 <xTaskIncrementTick>
 8008c54:	4603      	mov	r3, r0
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d002      	beq.n	8008c60 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8008c5a:	4b16      	ldr	r3, [pc, #88]	@ (8008cb4 <xTaskResumeAll+0x130>)
 8008c5c:	2201      	movs	r2, #1
 8008c5e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	3b01      	subs	r3, #1
 8008c64:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d1f1      	bne.n	8008c50 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8008c6c:	4b12      	ldr	r3, [pc, #72]	@ (8008cb8 <xTaskResumeAll+0x134>)
 8008c6e:	2200      	movs	r2, #0
 8008c70:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008c72:	4b10      	ldr	r3, [pc, #64]	@ (8008cb4 <xTaskResumeAll+0x130>)
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d009      	beq.n	8008c8e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008c7a:	2301      	movs	r3, #1
 8008c7c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008c7e:	4b0f      	ldr	r3, [pc, #60]	@ (8008cbc <xTaskResumeAll+0x138>)
 8008c80:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008c84:	601a      	str	r2, [r3, #0]
 8008c86:	f3bf 8f4f 	dsb	sy
 8008c8a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008c8e:	f001 fa7d 	bl	800a18c <vPortExitCritical>

	return xAlreadyYielded;
 8008c92:	68bb      	ldr	r3, [r7, #8]
}
 8008c94:	4618      	mov	r0, r3
 8008c96:	3710      	adds	r7, #16
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	bd80      	pop	{r7, pc}
 8008c9c:	24000fd8 	.word	0x24000fd8
 8008ca0:	24000fb0 	.word	0x24000fb0
 8008ca4:	24000f70 	.word	0x24000f70
 8008ca8:	24000fb8 	.word	0x24000fb8
 8008cac:	24000ae0 	.word	0x24000ae0
 8008cb0:	24000adc 	.word	0x24000adc
 8008cb4:	24000fc4 	.word	0x24000fc4
 8008cb8:	24000fc0 	.word	0x24000fc0
 8008cbc:	e000ed04 	.word	0xe000ed04

08008cc0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008cc0:	b480      	push	{r7}
 8008cc2:	b083      	sub	sp, #12
 8008cc4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008cc6:	4b05      	ldr	r3, [pc, #20]	@ (8008cdc <xTaskGetTickCount+0x1c>)
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008ccc:	687b      	ldr	r3, [r7, #4]
}
 8008cce:	4618      	mov	r0, r3
 8008cd0:	370c      	adds	r7, #12
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd8:	4770      	bx	lr
 8008cda:	bf00      	nop
 8008cdc:	24000fb4 	.word	0x24000fb4

08008ce0 <vTaskStepTick>:
implementations require configUSE_TICKLESS_IDLE to be set to a value other than
1. */
#if ( configUSE_TICKLESS_IDLE != 0 )

	void vTaskStepTick( const TickType_t xTicksToJump )
	{
 8008ce0:	b480      	push	{r7}
 8008ce2:	b085      	sub	sp, #20
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]
		/* Correct the tick count value after a period during which the tick
		was suppressed.  Note this does *not* call the tick hook function for
		each stepped tick. */
		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
 8008ce8:	4b0f      	ldr	r3, [pc, #60]	@ (8008d28 <vTaskStepTick+0x48>)
 8008cea:	681a      	ldr	r2, [r3, #0]
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	441a      	add	r2, r3
 8008cf0:	4b0e      	ldr	r3, [pc, #56]	@ (8008d2c <vTaskStepTick+0x4c>)
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	429a      	cmp	r2, r3
 8008cf6:	d90b      	bls.n	8008d10 <vTaskStepTick+0x30>
	__asm volatile
 8008cf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cfc:	f383 8811 	msr	BASEPRI, r3
 8008d00:	f3bf 8f6f 	isb	sy
 8008d04:	f3bf 8f4f 	dsb	sy
 8008d08:	60fb      	str	r3, [r7, #12]
}
 8008d0a:	bf00      	nop
 8008d0c:	bf00      	nop
 8008d0e:	e7fd      	b.n	8008d0c <vTaskStepTick+0x2c>
		xTickCount += xTicksToJump;
 8008d10:	4b05      	ldr	r3, [pc, #20]	@ (8008d28 <vTaskStepTick+0x48>)
 8008d12:	681a      	ldr	r2, [r3, #0]
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	4413      	add	r3, r2
 8008d18:	4a03      	ldr	r2, [pc, #12]	@ (8008d28 <vTaskStepTick+0x48>)
 8008d1a:	6013      	str	r3, [r2, #0]
		traceINCREASE_TICK_COUNT( xTicksToJump );
	}
 8008d1c:	bf00      	nop
 8008d1e:	3714      	adds	r7, #20
 8008d20:	46bd      	mov	sp, r7
 8008d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d26:	4770      	bx	lr
 8008d28:	24000fb4 	.word	0x24000fb4
 8008d2c:	24000fd0 	.word	0x24000fd0

08008d30 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b086      	sub	sp, #24
 8008d34:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008d36:	2300      	movs	r3, #0
 8008d38:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008d3a:	4b4f      	ldr	r3, [pc, #316]	@ (8008e78 <xTaskIncrementTick+0x148>)
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	f040 8090 	bne.w	8008e64 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008d44:	4b4d      	ldr	r3, [pc, #308]	@ (8008e7c <xTaskIncrementTick+0x14c>)
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	3301      	adds	r3, #1
 8008d4a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008d4c:	4a4b      	ldr	r2, [pc, #300]	@ (8008e7c <xTaskIncrementTick+0x14c>)
 8008d4e:	693b      	ldr	r3, [r7, #16]
 8008d50:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008d52:	693b      	ldr	r3, [r7, #16]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d121      	bne.n	8008d9c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8008d58:	4b49      	ldr	r3, [pc, #292]	@ (8008e80 <xTaskIncrementTick+0x150>)
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d00b      	beq.n	8008d7a <xTaskIncrementTick+0x4a>
	__asm volatile
 8008d62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d66:	f383 8811 	msr	BASEPRI, r3
 8008d6a:	f3bf 8f6f 	isb	sy
 8008d6e:	f3bf 8f4f 	dsb	sy
 8008d72:	603b      	str	r3, [r7, #0]
}
 8008d74:	bf00      	nop
 8008d76:	bf00      	nop
 8008d78:	e7fd      	b.n	8008d76 <xTaskIncrementTick+0x46>
 8008d7a:	4b41      	ldr	r3, [pc, #260]	@ (8008e80 <xTaskIncrementTick+0x150>)
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	60fb      	str	r3, [r7, #12]
 8008d80:	4b40      	ldr	r3, [pc, #256]	@ (8008e84 <xTaskIncrementTick+0x154>)
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	4a3e      	ldr	r2, [pc, #248]	@ (8008e80 <xTaskIncrementTick+0x150>)
 8008d86:	6013      	str	r3, [r2, #0]
 8008d88:	4a3e      	ldr	r2, [pc, #248]	@ (8008e84 <xTaskIncrementTick+0x154>)
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	6013      	str	r3, [r2, #0]
 8008d8e:	4b3e      	ldr	r3, [pc, #248]	@ (8008e88 <xTaskIncrementTick+0x158>)
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	3301      	adds	r3, #1
 8008d94:	4a3c      	ldr	r2, [pc, #240]	@ (8008e88 <xTaskIncrementTick+0x158>)
 8008d96:	6013      	str	r3, [r2, #0]
 8008d98:	f000 fb3a 	bl	8009410 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008d9c:	4b3b      	ldr	r3, [pc, #236]	@ (8008e8c <xTaskIncrementTick+0x15c>)
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	693a      	ldr	r2, [r7, #16]
 8008da2:	429a      	cmp	r2, r3
 8008da4:	d349      	bcc.n	8008e3a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008da6:	4b36      	ldr	r3, [pc, #216]	@ (8008e80 <xTaskIncrementTick+0x150>)
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d104      	bne.n	8008dba <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008db0:	4b36      	ldr	r3, [pc, #216]	@ (8008e8c <xTaskIncrementTick+0x15c>)
 8008db2:	f04f 32ff 	mov.w	r2, #4294967295
 8008db6:	601a      	str	r2, [r3, #0]
					break;
 8008db8:	e03f      	b.n	8008e3a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008dba:	4b31      	ldr	r3, [pc, #196]	@ (8008e80 <xTaskIncrementTick+0x150>)
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	68db      	ldr	r3, [r3, #12]
 8008dc0:	68db      	ldr	r3, [r3, #12]
 8008dc2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008dc4:	68bb      	ldr	r3, [r7, #8]
 8008dc6:	685b      	ldr	r3, [r3, #4]
 8008dc8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008dca:	693a      	ldr	r2, [r7, #16]
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	429a      	cmp	r2, r3
 8008dd0:	d203      	bcs.n	8008dda <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008dd2:	4a2e      	ldr	r2, [pc, #184]	@ (8008e8c <xTaskIncrementTick+0x15c>)
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008dd8:	e02f      	b.n	8008e3a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008dda:	68bb      	ldr	r3, [r7, #8]
 8008ddc:	3304      	adds	r3, #4
 8008dde:	4618      	mov	r0, r3
 8008de0:	f7fe fc6c 	bl	80076bc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008de4:	68bb      	ldr	r3, [r7, #8]
 8008de6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d004      	beq.n	8008df6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008dec:	68bb      	ldr	r3, [r7, #8]
 8008dee:	3318      	adds	r3, #24
 8008df0:	4618      	mov	r0, r3
 8008df2:	f7fe fc63 	bl	80076bc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008df6:	68bb      	ldr	r3, [r7, #8]
 8008df8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008dfa:	4b25      	ldr	r3, [pc, #148]	@ (8008e90 <xTaskIncrementTick+0x160>)
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	429a      	cmp	r2, r3
 8008e00:	d903      	bls.n	8008e0a <xTaskIncrementTick+0xda>
 8008e02:	68bb      	ldr	r3, [r7, #8]
 8008e04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e06:	4a22      	ldr	r2, [pc, #136]	@ (8008e90 <xTaskIncrementTick+0x160>)
 8008e08:	6013      	str	r3, [r2, #0]
 8008e0a:	68bb      	ldr	r3, [r7, #8]
 8008e0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e0e:	4613      	mov	r3, r2
 8008e10:	009b      	lsls	r3, r3, #2
 8008e12:	4413      	add	r3, r2
 8008e14:	009b      	lsls	r3, r3, #2
 8008e16:	4a1f      	ldr	r2, [pc, #124]	@ (8008e94 <xTaskIncrementTick+0x164>)
 8008e18:	441a      	add	r2, r3
 8008e1a:	68bb      	ldr	r3, [r7, #8]
 8008e1c:	3304      	adds	r3, #4
 8008e1e:	4619      	mov	r1, r3
 8008e20:	4610      	mov	r0, r2
 8008e22:	f7fe fbee 	bl	8007602 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008e26:	68bb      	ldr	r3, [r7, #8]
 8008e28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e2a:	4b1b      	ldr	r3, [pc, #108]	@ (8008e98 <xTaskIncrementTick+0x168>)
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e30:	429a      	cmp	r2, r3
 8008e32:	d3b8      	bcc.n	8008da6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8008e34:	2301      	movs	r3, #1
 8008e36:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008e38:	e7b5      	b.n	8008da6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008e3a:	4b17      	ldr	r3, [pc, #92]	@ (8008e98 <xTaskIncrementTick+0x168>)
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e40:	4914      	ldr	r1, [pc, #80]	@ (8008e94 <xTaskIncrementTick+0x164>)
 8008e42:	4613      	mov	r3, r2
 8008e44:	009b      	lsls	r3, r3, #2
 8008e46:	4413      	add	r3, r2
 8008e48:	009b      	lsls	r3, r3, #2
 8008e4a:	440b      	add	r3, r1
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	2b01      	cmp	r3, #1
 8008e50:	d901      	bls.n	8008e56 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8008e52:	2301      	movs	r3, #1
 8008e54:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008e56:	4b11      	ldr	r3, [pc, #68]	@ (8008e9c <xTaskIncrementTick+0x16c>)
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d007      	beq.n	8008e6e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8008e5e:	2301      	movs	r3, #1
 8008e60:	617b      	str	r3, [r7, #20]
 8008e62:	e004      	b.n	8008e6e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008e64:	4b0e      	ldr	r3, [pc, #56]	@ (8008ea0 <xTaskIncrementTick+0x170>)
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	3301      	adds	r3, #1
 8008e6a:	4a0d      	ldr	r2, [pc, #52]	@ (8008ea0 <xTaskIncrementTick+0x170>)
 8008e6c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008e6e:	697b      	ldr	r3, [r7, #20]
}
 8008e70:	4618      	mov	r0, r3
 8008e72:	3718      	adds	r7, #24
 8008e74:	46bd      	mov	sp, r7
 8008e76:	bd80      	pop	{r7, pc}
 8008e78:	24000fd8 	.word	0x24000fd8
 8008e7c:	24000fb4 	.word	0x24000fb4
 8008e80:	24000f68 	.word	0x24000f68
 8008e84:	24000f6c 	.word	0x24000f6c
 8008e88:	24000fc8 	.word	0x24000fc8
 8008e8c:	24000fd0 	.word	0x24000fd0
 8008e90:	24000fb8 	.word	0x24000fb8
 8008e94:	24000ae0 	.word	0x24000ae0
 8008e98:	24000adc 	.word	0x24000adc
 8008e9c:	24000fc4 	.word	0x24000fc4
 8008ea0:	24000fc0 	.word	0x24000fc0

08008ea4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008ea4:	b480      	push	{r7}
 8008ea6:	b085      	sub	sp, #20
 8008ea8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008eaa:	4b2b      	ldr	r3, [pc, #172]	@ (8008f58 <vTaskSwitchContext+0xb4>)
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d003      	beq.n	8008eba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008eb2:	4b2a      	ldr	r3, [pc, #168]	@ (8008f5c <vTaskSwitchContext+0xb8>)
 8008eb4:	2201      	movs	r2, #1
 8008eb6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008eb8:	e047      	b.n	8008f4a <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8008eba:	4b28      	ldr	r3, [pc, #160]	@ (8008f5c <vTaskSwitchContext+0xb8>)
 8008ebc:	2200      	movs	r2, #0
 8008ebe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ec0:	4b27      	ldr	r3, [pc, #156]	@ (8008f60 <vTaskSwitchContext+0xbc>)
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	60fb      	str	r3, [r7, #12]
 8008ec6:	e011      	b.n	8008eec <vTaskSwitchContext+0x48>
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d10b      	bne.n	8008ee6 <vTaskSwitchContext+0x42>
	__asm volatile
 8008ece:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ed2:	f383 8811 	msr	BASEPRI, r3
 8008ed6:	f3bf 8f6f 	isb	sy
 8008eda:	f3bf 8f4f 	dsb	sy
 8008ede:	607b      	str	r3, [r7, #4]
}
 8008ee0:	bf00      	nop
 8008ee2:	bf00      	nop
 8008ee4:	e7fd      	b.n	8008ee2 <vTaskSwitchContext+0x3e>
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	3b01      	subs	r3, #1
 8008eea:	60fb      	str	r3, [r7, #12]
 8008eec:	491d      	ldr	r1, [pc, #116]	@ (8008f64 <vTaskSwitchContext+0xc0>)
 8008eee:	68fa      	ldr	r2, [r7, #12]
 8008ef0:	4613      	mov	r3, r2
 8008ef2:	009b      	lsls	r3, r3, #2
 8008ef4:	4413      	add	r3, r2
 8008ef6:	009b      	lsls	r3, r3, #2
 8008ef8:	440b      	add	r3, r1
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d0e3      	beq.n	8008ec8 <vTaskSwitchContext+0x24>
 8008f00:	68fa      	ldr	r2, [r7, #12]
 8008f02:	4613      	mov	r3, r2
 8008f04:	009b      	lsls	r3, r3, #2
 8008f06:	4413      	add	r3, r2
 8008f08:	009b      	lsls	r3, r3, #2
 8008f0a:	4a16      	ldr	r2, [pc, #88]	@ (8008f64 <vTaskSwitchContext+0xc0>)
 8008f0c:	4413      	add	r3, r2
 8008f0e:	60bb      	str	r3, [r7, #8]
 8008f10:	68bb      	ldr	r3, [r7, #8]
 8008f12:	685b      	ldr	r3, [r3, #4]
 8008f14:	685a      	ldr	r2, [r3, #4]
 8008f16:	68bb      	ldr	r3, [r7, #8]
 8008f18:	605a      	str	r2, [r3, #4]
 8008f1a:	68bb      	ldr	r3, [r7, #8]
 8008f1c:	685a      	ldr	r2, [r3, #4]
 8008f1e:	68bb      	ldr	r3, [r7, #8]
 8008f20:	3308      	adds	r3, #8
 8008f22:	429a      	cmp	r2, r3
 8008f24:	d104      	bne.n	8008f30 <vTaskSwitchContext+0x8c>
 8008f26:	68bb      	ldr	r3, [r7, #8]
 8008f28:	685b      	ldr	r3, [r3, #4]
 8008f2a:	685a      	ldr	r2, [r3, #4]
 8008f2c:	68bb      	ldr	r3, [r7, #8]
 8008f2e:	605a      	str	r2, [r3, #4]
 8008f30:	68bb      	ldr	r3, [r7, #8]
 8008f32:	685b      	ldr	r3, [r3, #4]
 8008f34:	68db      	ldr	r3, [r3, #12]
 8008f36:	4a0c      	ldr	r2, [pc, #48]	@ (8008f68 <vTaskSwitchContext+0xc4>)
 8008f38:	6013      	str	r3, [r2, #0]
 8008f3a:	4a09      	ldr	r2, [pc, #36]	@ (8008f60 <vTaskSwitchContext+0xbc>)
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008f40:	4b09      	ldr	r3, [pc, #36]	@ (8008f68 <vTaskSwitchContext+0xc4>)
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	3354      	adds	r3, #84	@ 0x54
 8008f46:	4a09      	ldr	r2, [pc, #36]	@ (8008f6c <vTaskSwitchContext+0xc8>)
 8008f48:	6013      	str	r3, [r2, #0]
}
 8008f4a:	bf00      	nop
 8008f4c:	3714      	adds	r7, #20
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f54:	4770      	bx	lr
 8008f56:	bf00      	nop
 8008f58:	24000fd8 	.word	0x24000fd8
 8008f5c:	24000fc4 	.word	0x24000fc4
 8008f60:	24000fb8 	.word	0x24000fb8
 8008f64:	24000ae0 	.word	0x24000ae0
 8008f68:	24000adc 	.word	0x24000adc
 8008f6c:	24000020 	.word	0x24000020

08008f70 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008f70:	b580      	push	{r7, lr}
 8008f72:	b084      	sub	sp, #16
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	6078      	str	r0, [r7, #4]
 8008f78:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d10b      	bne.n	8008f98 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8008f80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f84:	f383 8811 	msr	BASEPRI, r3
 8008f88:	f3bf 8f6f 	isb	sy
 8008f8c:	f3bf 8f4f 	dsb	sy
 8008f90:	60fb      	str	r3, [r7, #12]
}
 8008f92:	bf00      	nop
 8008f94:	bf00      	nop
 8008f96:	e7fd      	b.n	8008f94 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008f98:	4b07      	ldr	r3, [pc, #28]	@ (8008fb8 <vTaskPlaceOnEventList+0x48>)
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	3318      	adds	r3, #24
 8008f9e:	4619      	mov	r1, r3
 8008fa0:	6878      	ldr	r0, [r7, #4]
 8008fa2:	f7fe fb52 	bl	800764a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008fa6:	2101      	movs	r1, #1
 8008fa8:	6838      	ldr	r0, [r7, #0]
 8008faa:	f000 fbdf 	bl	800976c <prvAddCurrentTaskToDelayedList>
}
 8008fae:	bf00      	nop
 8008fb0:	3710      	adds	r7, #16
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	bd80      	pop	{r7, pc}
 8008fb6:	bf00      	nop
 8008fb8:	24000adc 	.word	0x24000adc

08008fbc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	b086      	sub	sp, #24
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	60f8      	str	r0, [r7, #12]
 8008fc4:	60b9      	str	r1, [r7, #8]
 8008fc6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d10b      	bne.n	8008fe6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8008fce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fd2:	f383 8811 	msr	BASEPRI, r3
 8008fd6:	f3bf 8f6f 	isb	sy
 8008fda:	f3bf 8f4f 	dsb	sy
 8008fde:	617b      	str	r3, [r7, #20]
}
 8008fe0:	bf00      	nop
 8008fe2:	bf00      	nop
 8008fe4:	e7fd      	b.n	8008fe2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008fe6:	4b0a      	ldr	r3, [pc, #40]	@ (8009010 <vTaskPlaceOnEventListRestricted+0x54>)
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	3318      	adds	r3, #24
 8008fec:	4619      	mov	r1, r3
 8008fee:	68f8      	ldr	r0, [r7, #12]
 8008ff0:	f7fe fb07 	bl	8007602 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d002      	beq.n	8009000 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8008ffa:	f04f 33ff 	mov.w	r3, #4294967295
 8008ffe:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009000:	6879      	ldr	r1, [r7, #4]
 8009002:	68b8      	ldr	r0, [r7, #8]
 8009004:	f000 fbb2 	bl	800976c <prvAddCurrentTaskToDelayedList>
	}
 8009008:	bf00      	nop
 800900a:	3718      	adds	r7, #24
 800900c:	46bd      	mov	sp, r7
 800900e:	bd80      	pop	{r7, pc}
 8009010:	24000adc 	.word	0x24000adc

08009014 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009014:	b580      	push	{r7, lr}
 8009016:	b086      	sub	sp, #24
 8009018:	af00      	add	r7, sp, #0
 800901a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	68db      	ldr	r3, [r3, #12]
 8009020:	68db      	ldr	r3, [r3, #12]
 8009022:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009024:	693b      	ldr	r3, [r7, #16]
 8009026:	2b00      	cmp	r3, #0
 8009028:	d10b      	bne.n	8009042 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800902a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800902e:	f383 8811 	msr	BASEPRI, r3
 8009032:	f3bf 8f6f 	isb	sy
 8009036:	f3bf 8f4f 	dsb	sy
 800903a:	60fb      	str	r3, [r7, #12]
}
 800903c:	bf00      	nop
 800903e:	bf00      	nop
 8009040:	e7fd      	b.n	800903e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009042:	693b      	ldr	r3, [r7, #16]
 8009044:	3318      	adds	r3, #24
 8009046:	4618      	mov	r0, r3
 8009048:	f7fe fb38 	bl	80076bc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800904c:	4b1e      	ldr	r3, [pc, #120]	@ (80090c8 <xTaskRemoveFromEventList+0xb4>)
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d11f      	bne.n	8009094 <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009054:	693b      	ldr	r3, [r7, #16]
 8009056:	3304      	adds	r3, #4
 8009058:	4618      	mov	r0, r3
 800905a:	f7fe fb2f 	bl	80076bc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800905e:	693b      	ldr	r3, [r7, #16]
 8009060:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009062:	4b1a      	ldr	r3, [pc, #104]	@ (80090cc <xTaskRemoveFromEventList+0xb8>)
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	429a      	cmp	r2, r3
 8009068:	d903      	bls.n	8009072 <xTaskRemoveFromEventList+0x5e>
 800906a:	693b      	ldr	r3, [r7, #16]
 800906c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800906e:	4a17      	ldr	r2, [pc, #92]	@ (80090cc <xTaskRemoveFromEventList+0xb8>)
 8009070:	6013      	str	r3, [r2, #0]
 8009072:	693b      	ldr	r3, [r7, #16]
 8009074:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009076:	4613      	mov	r3, r2
 8009078:	009b      	lsls	r3, r3, #2
 800907a:	4413      	add	r3, r2
 800907c:	009b      	lsls	r3, r3, #2
 800907e:	4a14      	ldr	r2, [pc, #80]	@ (80090d0 <xTaskRemoveFromEventList+0xbc>)
 8009080:	441a      	add	r2, r3
 8009082:	693b      	ldr	r3, [r7, #16]
 8009084:	3304      	adds	r3, #4
 8009086:	4619      	mov	r1, r3
 8009088:	4610      	mov	r0, r2
 800908a:	f7fe faba 	bl	8007602 <vListInsertEnd>
			normally left unchanged, because it is automatically reset to a new
			value when the tick count equals xNextTaskUnblockTime.  However if
			tickless idling is used it might be more important to enter sleep mode
			at the earliest possible time - so reset xNextTaskUnblockTime here to
			ensure it is updated at the earliest possible time. */
			prvResetNextTaskUnblockTime();
 800908e:	f000 f9bf 	bl	8009410 <prvResetNextTaskUnblockTime>
 8009092:	e005      	b.n	80090a0 <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009094:	693b      	ldr	r3, [r7, #16]
 8009096:	3318      	adds	r3, #24
 8009098:	4619      	mov	r1, r3
 800909a:	480e      	ldr	r0, [pc, #56]	@ (80090d4 <xTaskRemoveFromEventList+0xc0>)
 800909c:	f7fe fab1 	bl	8007602 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80090a0:	693b      	ldr	r3, [r7, #16]
 80090a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80090a4:	4b0c      	ldr	r3, [pc, #48]	@ (80090d8 <xTaskRemoveFromEventList+0xc4>)
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090aa:	429a      	cmp	r2, r3
 80090ac:	d905      	bls.n	80090ba <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80090ae:	2301      	movs	r3, #1
 80090b0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80090b2:	4b0a      	ldr	r3, [pc, #40]	@ (80090dc <xTaskRemoveFromEventList+0xc8>)
 80090b4:	2201      	movs	r2, #1
 80090b6:	601a      	str	r2, [r3, #0]
 80090b8:	e001      	b.n	80090be <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 80090ba:	2300      	movs	r3, #0
 80090bc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80090be:	697b      	ldr	r3, [r7, #20]
}
 80090c0:	4618      	mov	r0, r3
 80090c2:	3718      	adds	r7, #24
 80090c4:	46bd      	mov	sp, r7
 80090c6:	bd80      	pop	{r7, pc}
 80090c8:	24000fd8 	.word	0x24000fd8
 80090cc:	24000fb8 	.word	0x24000fb8
 80090d0:	24000ae0 	.word	0x24000ae0
 80090d4:	24000f70 	.word	0x24000f70
 80090d8:	24000adc 	.word	0x24000adc
 80090dc:	24000fc4 	.word	0x24000fc4

080090e0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80090e0:	b480      	push	{r7}
 80090e2:	b083      	sub	sp, #12
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80090e8:	4b06      	ldr	r3, [pc, #24]	@ (8009104 <vTaskInternalSetTimeOutState+0x24>)
 80090ea:	681a      	ldr	r2, [r3, #0]
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80090f0:	4b05      	ldr	r3, [pc, #20]	@ (8009108 <vTaskInternalSetTimeOutState+0x28>)
 80090f2:	681a      	ldr	r2, [r3, #0]
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	605a      	str	r2, [r3, #4]
}
 80090f8:	bf00      	nop
 80090fa:	370c      	adds	r7, #12
 80090fc:	46bd      	mov	sp, r7
 80090fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009102:	4770      	bx	lr
 8009104:	24000fc8 	.word	0x24000fc8
 8009108:	24000fb4 	.word	0x24000fb4

0800910c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800910c:	b580      	push	{r7, lr}
 800910e:	b088      	sub	sp, #32
 8009110:	af00      	add	r7, sp, #0
 8009112:	6078      	str	r0, [r7, #4]
 8009114:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	2b00      	cmp	r3, #0
 800911a:	d10b      	bne.n	8009134 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800911c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009120:	f383 8811 	msr	BASEPRI, r3
 8009124:	f3bf 8f6f 	isb	sy
 8009128:	f3bf 8f4f 	dsb	sy
 800912c:	613b      	str	r3, [r7, #16]
}
 800912e:	bf00      	nop
 8009130:	bf00      	nop
 8009132:	e7fd      	b.n	8009130 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009134:	683b      	ldr	r3, [r7, #0]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d10b      	bne.n	8009152 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800913a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800913e:	f383 8811 	msr	BASEPRI, r3
 8009142:	f3bf 8f6f 	isb	sy
 8009146:	f3bf 8f4f 	dsb	sy
 800914a:	60fb      	str	r3, [r7, #12]
}
 800914c:	bf00      	nop
 800914e:	bf00      	nop
 8009150:	e7fd      	b.n	800914e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8009152:	f000 ffe9 	bl	800a128 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009156:	4b1d      	ldr	r3, [pc, #116]	@ (80091cc <xTaskCheckForTimeOut+0xc0>)
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	685b      	ldr	r3, [r3, #4]
 8009160:	69ba      	ldr	r2, [r7, #24]
 8009162:	1ad3      	subs	r3, r2, r3
 8009164:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009166:	683b      	ldr	r3, [r7, #0]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800916e:	d102      	bne.n	8009176 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009170:	2300      	movs	r3, #0
 8009172:	61fb      	str	r3, [r7, #28]
 8009174:	e023      	b.n	80091be <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681a      	ldr	r2, [r3, #0]
 800917a:	4b15      	ldr	r3, [pc, #84]	@ (80091d0 <xTaskCheckForTimeOut+0xc4>)
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	429a      	cmp	r2, r3
 8009180:	d007      	beq.n	8009192 <xTaskCheckForTimeOut+0x86>
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	685b      	ldr	r3, [r3, #4]
 8009186:	69ba      	ldr	r2, [r7, #24]
 8009188:	429a      	cmp	r2, r3
 800918a:	d302      	bcc.n	8009192 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800918c:	2301      	movs	r3, #1
 800918e:	61fb      	str	r3, [r7, #28]
 8009190:	e015      	b.n	80091be <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009192:	683b      	ldr	r3, [r7, #0]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	697a      	ldr	r2, [r7, #20]
 8009198:	429a      	cmp	r2, r3
 800919a:	d20b      	bcs.n	80091b4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800919c:	683b      	ldr	r3, [r7, #0]
 800919e:	681a      	ldr	r2, [r3, #0]
 80091a0:	697b      	ldr	r3, [r7, #20]
 80091a2:	1ad2      	subs	r2, r2, r3
 80091a4:	683b      	ldr	r3, [r7, #0]
 80091a6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80091a8:	6878      	ldr	r0, [r7, #4]
 80091aa:	f7ff ff99 	bl	80090e0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80091ae:	2300      	movs	r3, #0
 80091b0:	61fb      	str	r3, [r7, #28]
 80091b2:	e004      	b.n	80091be <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80091b4:	683b      	ldr	r3, [r7, #0]
 80091b6:	2200      	movs	r2, #0
 80091b8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80091ba:	2301      	movs	r3, #1
 80091bc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80091be:	f000 ffe5 	bl	800a18c <vPortExitCritical>

	return xReturn;
 80091c2:	69fb      	ldr	r3, [r7, #28]
}
 80091c4:	4618      	mov	r0, r3
 80091c6:	3720      	adds	r7, #32
 80091c8:	46bd      	mov	sp, r7
 80091ca:	bd80      	pop	{r7, pc}
 80091cc:	24000fb4 	.word	0x24000fb4
 80091d0:	24000fc8 	.word	0x24000fc8

080091d4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80091d4:	b480      	push	{r7}
 80091d6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80091d8:	4b03      	ldr	r3, [pc, #12]	@ (80091e8 <vTaskMissedYield+0x14>)
 80091da:	2201      	movs	r2, #1
 80091dc:	601a      	str	r2, [r3, #0]
}
 80091de:	bf00      	nop
 80091e0:	46bd      	mov	sp, r7
 80091e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e6:	4770      	bx	lr
 80091e8:	24000fc4 	.word	0x24000fc4

080091ec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80091ec:	b580      	push	{r7, lr}
 80091ee:	b084      	sub	sp, #16
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80091f4:	f000 f8a8 	bl	8009348 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80091f8:	4b18      	ldr	r3, [pc, #96]	@ (800925c <prvIdleTask+0x70>)
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	2b01      	cmp	r3, #1
 80091fe:	d907      	bls.n	8009210 <prvIdleTask+0x24>
			{
				taskYIELD();
 8009200:	4b17      	ldr	r3, [pc, #92]	@ (8009260 <prvIdleTask+0x74>)
 8009202:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009206:	601a      	str	r2, [r3, #0]
 8009208:	f3bf 8f4f 	dsb	sy
 800920c:	f3bf 8f6f 	isb	sy
			/* It is not desirable to suspend then resume the scheduler on
			each iteration of the idle task.  Therefore, a preliminary
			test of the expected idle time is performed without the
			scheduler suspended.  The result here is not necessarily
			valid. */
			xExpectedIdleTime = prvGetExpectedIdleTime();
 8009210:	f7ff fc80 	bl	8008b14 <prvGetExpectedIdleTime>
 8009214:	60f8      	str	r0, [r7, #12]

			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	2b01      	cmp	r3, #1
 800921a:	d9eb      	bls.n	80091f4 <prvIdleTask+0x8>
			{
				vTaskSuspendAll();
 800921c:	f7ff fc6c 	bl	8008af8 <vTaskSuspendAll>
				{
					/* Now the scheduler is suspended, the expected idle
					time can be sampled again, and this time its value can
					be used. */
					configASSERT( xNextTaskUnblockTime >= xTickCount );
 8009220:	4b10      	ldr	r3, [pc, #64]	@ (8009264 <prvIdleTask+0x78>)
 8009222:	681a      	ldr	r2, [r3, #0]
 8009224:	4b10      	ldr	r3, [pc, #64]	@ (8009268 <prvIdleTask+0x7c>)
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	429a      	cmp	r2, r3
 800922a:	d20b      	bcs.n	8009244 <prvIdleTask+0x58>
	__asm volatile
 800922c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009230:	f383 8811 	msr	BASEPRI, r3
 8009234:	f3bf 8f6f 	isb	sy
 8009238:	f3bf 8f4f 	dsb	sy
 800923c:	60bb      	str	r3, [r7, #8]
}
 800923e:	bf00      	nop
 8009240:	bf00      	nop
 8009242:	e7fd      	b.n	8009240 <prvIdleTask+0x54>
					xExpectedIdleTime = prvGetExpectedIdleTime();
 8009244:	f7ff fc66 	bl	8008b14 <prvGetExpectedIdleTime>
 8009248:	60f8      	str	r0, [r7, #12]
					/* Define the following macro to set xExpectedIdleTime to 0
					if the application does not want
					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );

					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	2b01      	cmp	r3, #1
 800924e:	d902      	bls.n	8009256 <prvIdleTask+0x6a>
					{
						traceLOW_POWER_IDLE_BEGIN();
						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
 8009250:	68f8      	ldr	r0, [r7, #12]
 8009252:	f001 f81b 	bl	800a28c <vPortSuppressTicksAndSleep>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}
				( void ) xTaskResumeAll();
 8009256:	f7ff fc95 	bl	8008b84 <xTaskResumeAll>
		prvCheckTasksWaitingTermination();
 800925a:	e7cb      	b.n	80091f4 <prvIdleTask+0x8>
 800925c:	24000ae0 	.word	0x24000ae0
 8009260:	e000ed04 	.word	0xe000ed04
 8009264:	24000fd0 	.word	0x24000fd0
 8009268:	24000fb4 	.word	0x24000fb4

0800926c <eTaskConfirmSleepModeStatus>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE != 0 )

	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
	{
 800926c:	b480      	push	{r7}
 800926e:	b083      	sub	sp, #12
 8009270:	af00      	add	r7, sp, #0
	/* The idle task exists in addition to the application tasks. */
	const UBaseType_t uxNonApplicationTasks = 1;
 8009272:	2301      	movs	r3, #1
 8009274:	603b      	str	r3, [r7, #0]
	eSleepModeStatus eReturn = eStandardSleep;
 8009276:	2301      	movs	r3, #1
 8009278:	71fb      	strb	r3, [r7, #7]

		/* This function must be called from a critical section. */

		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
 800927a:	4b0f      	ldr	r3, [pc, #60]	@ (80092b8 <eTaskConfirmSleepModeStatus+0x4c>)
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d002      	beq.n	8009288 <eTaskConfirmSleepModeStatus+0x1c>
		{
			/* A task was made ready while the scheduler was suspended. */
			eReturn = eAbortSleep;
 8009282:	2300      	movs	r3, #0
 8009284:	71fb      	strb	r3, [r7, #7]
 8009286:	e010      	b.n	80092aa <eTaskConfirmSleepModeStatus+0x3e>
		}
		else if( xYieldPending != pdFALSE )
 8009288:	4b0c      	ldr	r3, [pc, #48]	@ (80092bc <eTaskConfirmSleepModeStatus+0x50>)
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	2b00      	cmp	r3, #0
 800928e:	d002      	beq.n	8009296 <eTaskConfirmSleepModeStatus+0x2a>
		{
			/* A yield was pended while the scheduler was suspended. */
			eReturn = eAbortSleep;
 8009290:	2300      	movs	r3, #0
 8009292:	71fb      	strb	r3, [r7, #7]
 8009294:	e009      	b.n	80092aa <eTaskConfirmSleepModeStatus+0x3e>
		{
			/* If all the tasks are in the suspended list (which might mean they
			have an infinite block time rather than actually being suspended)
			then it is safe to turn all clocks off and just wait for external
			interrupts. */
			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicationTasks ) )
 8009296:	4b0a      	ldr	r3, [pc, #40]	@ (80092c0 <eTaskConfirmSleepModeStatus+0x54>)
 8009298:	681a      	ldr	r2, [r3, #0]
 800929a:	4b0a      	ldr	r3, [pc, #40]	@ (80092c4 <eTaskConfirmSleepModeStatus+0x58>)
 800929c:	6819      	ldr	r1, [r3, #0]
 800929e:	683b      	ldr	r3, [r7, #0]
 80092a0:	1acb      	subs	r3, r1, r3
 80092a2:	429a      	cmp	r2, r3
 80092a4:	d101      	bne.n	80092aa <eTaskConfirmSleepModeStatus+0x3e>
			{
				eReturn = eNoTasksWaitingTimeout;
 80092a6:	2302      	movs	r3, #2
 80092a8:	71fb      	strb	r3, [r7, #7]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		return eReturn;
 80092aa:	79fb      	ldrb	r3, [r7, #7]
	}
 80092ac:	4618      	mov	r0, r3
 80092ae:	370c      	adds	r7, #12
 80092b0:	46bd      	mov	sp, r7
 80092b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b6:	4770      	bx	lr
 80092b8:	24000f70 	.word	0x24000f70
 80092bc:	24000fc4 	.word	0x24000fc4
 80092c0:	24000f9c 	.word	0x24000f9c
 80092c4:	24000fb0 	.word	0x24000fb0

080092c8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80092c8:	b580      	push	{r7, lr}
 80092ca:	b082      	sub	sp, #8
 80092cc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80092ce:	2300      	movs	r3, #0
 80092d0:	607b      	str	r3, [r7, #4]
 80092d2:	e00c      	b.n	80092ee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80092d4:	687a      	ldr	r2, [r7, #4]
 80092d6:	4613      	mov	r3, r2
 80092d8:	009b      	lsls	r3, r3, #2
 80092da:	4413      	add	r3, r2
 80092dc:	009b      	lsls	r3, r3, #2
 80092de:	4a12      	ldr	r2, [pc, #72]	@ (8009328 <prvInitialiseTaskLists+0x60>)
 80092e0:	4413      	add	r3, r2
 80092e2:	4618      	mov	r0, r3
 80092e4:	f7fe f960 	bl	80075a8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	3301      	adds	r3, #1
 80092ec:	607b      	str	r3, [r7, #4]
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	2b37      	cmp	r3, #55	@ 0x37
 80092f2:	d9ef      	bls.n	80092d4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80092f4:	480d      	ldr	r0, [pc, #52]	@ (800932c <prvInitialiseTaskLists+0x64>)
 80092f6:	f7fe f957 	bl	80075a8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80092fa:	480d      	ldr	r0, [pc, #52]	@ (8009330 <prvInitialiseTaskLists+0x68>)
 80092fc:	f7fe f954 	bl	80075a8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009300:	480c      	ldr	r0, [pc, #48]	@ (8009334 <prvInitialiseTaskLists+0x6c>)
 8009302:	f7fe f951 	bl	80075a8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009306:	480c      	ldr	r0, [pc, #48]	@ (8009338 <prvInitialiseTaskLists+0x70>)
 8009308:	f7fe f94e 	bl	80075a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800930c:	480b      	ldr	r0, [pc, #44]	@ (800933c <prvInitialiseTaskLists+0x74>)
 800930e:	f7fe f94b 	bl	80075a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009312:	4b0b      	ldr	r3, [pc, #44]	@ (8009340 <prvInitialiseTaskLists+0x78>)
 8009314:	4a05      	ldr	r2, [pc, #20]	@ (800932c <prvInitialiseTaskLists+0x64>)
 8009316:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009318:	4b0a      	ldr	r3, [pc, #40]	@ (8009344 <prvInitialiseTaskLists+0x7c>)
 800931a:	4a05      	ldr	r2, [pc, #20]	@ (8009330 <prvInitialiseTaskLists+0x68>)
 800931c:	601a      	str	r2, [r3, #0]
}
 800931e:	bf00      	nop
 8009320:	3708      	adds	r7, #8
 8009322:	46bd      	mov	sp, r7
 8009324:	bd80      	pop	{r7, pc}
 8009326:	bf00      	nop
 8009328:	24000ae0 	.word	0x24000ae0
 800932c:	24000f40 	.word	0x24000f40
 8009330:	24000f54 	.word	0x24000f54
 8009334:	24000f70 	.word	0x24000f70
 8009338:	24000f84 	.word	0x24000f84
 800933c:	24000f9c 	.word	0x24000f9c
 8009340:	24000f68 	.word	0x24000f68
 8009344:	24000f6c 	.word	0x24000f6c

08009348 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009348:	b580      	push	{r7, lr}
 800934a:	b082      	sub	sp, #8
 800934c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800934e:	e019      	b.n	8009384 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009350:	f000 feea 	bl	800a128 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009354:	4b10      	ldr	r3, [pc, #64]	@ (8009398 <prvCheckTasksWaitingTermination+0x50>)
 8009356:	68db      	ldr	r3, [r3, #12]
 8009358:	68db      	ldr	r3, [r3, #12]
 800935a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	3304      	adds	r3, #4
 8009360:	4618      	mov	r0, r3
 8009362:	f7fe f9ab 	bl	80076bc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009366:	4b0d      	ldr	r3, [pc, #52]	@ (800939c <prvCheckTasksWaitingTermination+0x54>)
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	3b01      	subs	r3, #1
 800936c:	4a0b      	ldr	r2, [pc, #44]	@ (800939c <prvCheckTasksWaitingTermination+0x54>)
 800936e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009370:	4b0b      	ldr	r3, [pc, #44]	@ (80093a0 <prvCheckTasksWaitingTermination+0x58>)
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	3b01      	subs	r3, #1
 8009376:	4a0a      	ldr	r2, [pc, #40]	@ (80093a0 <prvCheckTasksWaitingTermination+0x58>)
 8009378:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800937a:	f000 ff07 	bl	800a18c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800937e:	6878      	ldr	r0, [r7, #4]
 8009380:	f000 f810 	bl	80093a4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009384:	4b06      	ldr	r3, [pc, #24]	@ (80093a0 <prvCheckTasksWaitingTermination+0x58>)
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	2b00      	cmp	r3, #0
 800938a:	d1e1      	bne.n	8009350 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800938c:	bf00      	nop
 800938e:	bf00      	nop
 8009390:	3708      	adds	r7, #8
 8009392:	46bd      	mov	sp, r7
 8009394:	bd80      	pop	{r7, pc}
 8009396:	bf00      	nop
 8009398:	24000f84 	.word	0x24000f84
 800939c:	24000fb0 	.word	0x24000fb0
 80093a0:	24000f98 	.word	0x24000f98

080093a4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80093a4:	b580      	push	{r7, lr}
 80093a6:	b084      	sub	sp, #16
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	3354      	adds	r3, #84	@ 0x54
 80093b0:	4618      	mov	r0, r3
 80093b2:	f002 fc7d 	bl	800bcb0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d108      	bne.n	80093d2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80093c4:	4618      	mov	r0, r3
 80093c6:	f001 f983 	bl	800a6d0 <vPortFree>
				vPortFree( pxTCB );
 80093ca:	6878      	ldr	r0, [r7, #4]
 80093cc:	f001 f980 	bl	800a6d0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80093d0:	e019      	b.n	8009406 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80093d8:	2b01      	cmp	r3, #1
 80093da:	d103      	bne.n	80093e4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80093dc:	6878      	ldr	r0, [r7, #4]
 80093de:	f001 f977 	bl	800a6d0 <vPortFree>
	}
 80093e2:	e010      	b.n	8009406 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80093ea:	2b02      	cmp	r3, #2
 80093ec:	d00b      	beq.n	8009406 <prvDeleteTCB+0x62>
	__asm volatile
 80093ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093f2:	f383 8811 	msr	BASEPRI, r3
 80093f6:	f3bf 8f6f 	isb	sy
 80093fa:	f3bf 8f4f 	dsb	sy
 80093fe:	60fb      	str	r3, [r7, #12]
}
 8009400:	bf00      	nop
 8009402:	bf00      	nop
 8009404:	e7fd      	b.n	8009402 <prvDeleteTCB+0x5e>
	}
 8009406:	bf00      	nop
 8009408:	3710      	adds	r7, #16
 800940a:	46bd      	mov	sp, r7
 800940c:	bd80      	pop	{r7, pc}
	...

08009410 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009410:	b480      	push	{r7}
 8009412:	b083      	sub	sp, #12
 8009414:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009416:	4b0c      	ldr	r3, [pc, #48]	@ (8009448 <prvResetNextTaskUnblockTime+0x38>)
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	2b00      	cmp	r3, #0
 800941e:	d104      	bne.n	800942a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009420:	4b0a      	ldr	r3, [pc, #40]	@ (800944c <prvResetNextTaskUnblockTime+0x3c>)
 8009422:	f04f 32ff 	mov.w	r2, #4294967295
 8009426:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009428:	e008      	b.n	800943c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800942a:	4b07      	ldr	r3, [pc, #28]	@ (8009448 <prvResetNextTaskUnblockTime+0x38>)
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	68db      	ldr	r3, [r3, #12]
 8009430:	68db      	ldr	r3, [r3, #12]
 8009432:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	685b      	ldr	r3, [r3, #4]
 8009438:	4a04      	ldr	r2, [pc, #16]	@ (800944c <prvResetNextTaskUnblockTime+0x3c>)
 800943a:	6013      	str	r3, [r2, #0]
}
 800943c:	bf00      	nop
 800943e:	370c      	adds	r7, #12
 8009440:	46bd      	mov	sp, r7
 8009442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009446:	4770      	bx	lr
 8009448:	24000f68 	.word	0x24000f68
 800944c:	24000fd0 	.word	0x24000fd0

08009450 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009450:	b480      	push	{r7}
 8009452:	b083      	sub	sp, #12
 8009454:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009456:	4b0b      	ldr	r3, [pc, #44]	@ (8009484 <xTaskGetSchedulerState+0x34>)
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	2b00      	cmp	r3, #0
 800945c:	d102      	bne.n	8009464 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800945e:	2301      	movs	r3, #1
 8009460:	607b      	str	r3, [r7, #4]
 8009462:	e008      	b.n	8009476 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009464:	4b08      	ldr	r3, [pc, #32]	@ (8009488 <xTaskGetSchedulerState+0x38>)
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	2b00      	cmp	r3, #0
 800946a:	d102      	bne.n	8009472 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800946c:	2302      	movs	r3, #2
 800946e:	607b      	str	r3, [r7, #4]
 8009470:	e001      	b.n	8009476 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009472:	2300      	movs	r3, #0
 8009474:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009476:	687b      	ldr	r3, [r7, #4]
	}
 8009478:	4618      	mov	r0, r3
 800947a:	370c      	adds	r7, #12
 800947c:	46bd      	mov	sp, r7
 800947e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009482:	4770      	bx	lr
 8009484:	24000fbc 	.word	0x24000fbc
 8009488:	24000fd8 	.word	0x24000fd8

0800948c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800948c:	b580      	push	{r7, lr}
 800948e:	b084      	sub	sp, #16
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009498:	2300      	movs	r3, #0
 800949a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d051      	beq.n	8009546 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80094a2:	68bb      	ldr	r3, [r7, #8]
 80094a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80094a6:	4b2a      	ldr	r3, [pc, #168]	@ (8009550 <xTaskPriorityInherit+0xc4>)
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094ac:	429a      	cmp	r2, r3
 80094ae:	d241      	bcs.n	8009534 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80094b0:	68bb      	ldr	r3, [r7, #8]
 80094b2:	699b      	ldr	r3, [r3, #24]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	db06      	blt.n	80094c6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80094b8:	4b25      	ldr	r3, [pc, #148]	@ (8009550 <xTaskPriorityInherit+0xc4>)
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094be:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80094c2:	68bb      	ldr	r3, [r7, #8]
 80094c4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80094c6:	68bb      	ldr	r3, [r7, #8]
 80094c8:	6959      	ldr	r1, [r3, #20]
 80094ca:	68bb      	ldr	r3, [r7, #8]
 80094cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80094ce:	4613      	mov	r3, r2
 80094d0:	009b      	lsls	r3, r3, #2
 80094d2:	4413      	add	r3, r2
 80094d4:	009b      	lsls	r3, r3, #2
 80094d6:	4a1f      	ldr	r2, [pc, #124]	@ (8009554 <xTaskPriorityInherit+0xc8>)
 80094d8:	4413      	add	r3, r2
 80094da:	4299      	cmp	r1, r3
 80094dc:	d122      	bne.n	8009524 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80094de:	68bb      	ldr	r3, [r7, #8]
 80094e0:	3304      	adds	r3, #4
 80094e2:	4618      	mov	r0, r3
 80094e4:	f7fe f8ea 	bl	80076bc <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80094e8:	4b19      	ldr	r3, [pc, #100]	@ (8009550 <xTaskPriorityInherit+0xc4>)
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80094ee:	68bb      	ldr	r3, [r7, #8]
 80094f0:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80094f2:	68bb      	ldr	r3, [r7, #8]
 80094f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80094f6:	4b18      	ldr	r3, [pc, #96]	@ (8009558 <xTaskPriorityInherit+0xcc>)
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	429a      	cmp	r2, r3
 80094fc:	d903      	bls.n	8009506 <xTaskPriorityInherit+0x7a>
 80094fe:	68bb      	ldr	r3, [r7, #8]
 8009500:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009502:	4a15      	ldr	r2, [pc, #84]	@ (8009558 <xTaskPriorityInherit+0xcc>)
 8009504:	6013      	str	r3, [r2, #0]
 8009506:	68bb      	ldr	r3, [r7, #8]
 8009508:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800950a:	4613      	mov	r3, r2
 800950c:	009b      	lsls	r3, r3, #2
 800950e:	4413      	add	r3, r2
 8009510:	009b      	lsls	r3, r3, #2
 8009512:	4a10      	ldr	r2, [pc, #64]	@ (8009554 <xTaskPriorityInherit+0xc8>)
 8009514:	441a      	add	r2, r3
 8009516:	68bb      	ldr	r3, [r7, #8]
 8009518:	3304      	adds	r3, #4
 800951a:	4619      	mov	r1, r3
 800951c:	4610      	mov	r0, r2
 800951e:	f7fe f870 	bl	8007602 <vListInsertEnd>
 8009522:	e004      	b.n	800952e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009524:	4b0a      	ldr	r3, [pc, #40]	@ (8009550 <xTaskPriorityInherit+0xc4>)
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800952a:	68bb      	ldr	r3, [r7, #8]
 800952c:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800952e:	2301      	movs	r3, #1
 8009530:	60fb      	str	r3, [r7, #12]
 8009532:	e008      	b.n	8009546 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009534:	68bb      	ldr	r3, [r7, #8]
 8009536:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009538:	4b05      	ldr	r3, [pc, #20]	@ (8009550 <xTaskPriorityInherit+0xc4>)
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800953e:	429a      	cmp	r2, r3
 8009540:	d201      	bcs.n	8009546 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009542:	2301      	movs	r3, #1
 8009544:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009546:	68fb      	ldr	r3, [r7, #12]
	}
 8009548:	4618      	mov	r0, r3
 800954a:	3710      	adds	r7, #16
 800954c:	46bd      	mov	sp, r7
 800954e:	bd80      	pop	{r7, pc}
 8009550:	24000adc 	.word	0x24000adc
 8009554:	24000ae0 	.word	0x24000ae0
 8009558:	24000fb8 	.word	0x24000fb8

0800955c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800955c:	b580      	push	{r7, lr}
 800955e:	b086      	sub	sp, #24
 8009560:	af00      	add	r7, sp, #0
 8009562:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009568:	2300      	movs	r3, #0
 800956a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	2b00      	cmp	r3, #0
 8009570:	d058      	beq.n	8009624 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009572:	4b2f      	ldr	r3, [pc, #188]	@ (8009630 <xTaskPriorityDisinherit+0xd4>)
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	693a      	ldr	r2, [r7, #16]
 8009578:	429a      	cmp	r2, r3
 800957a:	d00b      	beq.n	8009594 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800957c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009580:	f383 8811 	msr	BASEPRI, r3
 8009584:	f3bf 8f6f 	isb	sy
 8009588:	f3bf 8f4f 	dsb	sy
 800958c:	60fb      	str	r3, [r7, #12]
}
 800958e:	bf00      	nop
 8009590:	bf00      	nop
 8009592:	e7fd      	b.n	8009590 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009594:	693b      	ldr	r3, [r7, #16]
 8009596:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009598:	2b00      	cmp	r3, #0
 800959a:	d10b      	bne.n	80095b4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800959c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095a0:	f383 8811 	msr	BASEPRI, r3
 80095a4:	f3bf 8f6f 	isb	sy
 80095a8:	f3bf 8f4f 	dsb	sy
 80095ac:	60bb      	str	r3, [r7, #8]
}
 80095ae:	bf00      	nop
 80095b0:	bf00      	nop
 80095b2:	e7fd      	b.n	80095b0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80095b4:	693b      	ldr	r3, [r7, #16]
 80095b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80095b8:	1e5a      	subs	r2, r3, #1
 80095ba:	693b      	ldr	r3, [r7, #16]
 80095bc:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80095be:	693b      	ldr	r3, [r7, #16]
 80095c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80095c2:	693b      	ldr	r3, [r7, #16]
 80095c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80095c6:	429a      	cmp	r2, r3
 80095c8:	d02c      	beq.n	8009624 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80095ca:	693b      	ldr	r3, [r7, #16]
 80095cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d128      	bne.n	8009624 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80095d2:	693b      	ldr	r3, [r7, #16]
 80095d4:	3304      	adds	r3, #4
 80095d6:	4618      	mov	r0, r3
 80095d8:	f7fe f870 	bl	80076bc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80095dc:	693b      	ldr	r3, [r7, #16]
 80095de:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80095e0:	693b      	ldr	r3, [r7, #16]
 80095e2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80095e4:	693b      	ldr	r3, [r7, #16]
 80095e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095e8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80095ec:	693b      	ldr	r3, [r7, #16]
 80095ee:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80095f0:	693b      	ldr	r3, [r7, #16]
 80095f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80095f4:	4b0f      	ldr	r3, [pc, #60]	@ (8009634 <xTaskPriorityDisinherit+0xd8>)
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	429a      	cmp	r2, r3
 80095fa:	d903      	bls.n	8009604 <xTaskPriorityDisinherit+0xa8>
 80095fc:	693b      	ldr	r3, [r7, #16]
 80095fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009600:	4a0c      	ldr	r2, [pc, #48]	@ (8009634 <xTaskPriorityDisinherit+0xd8>)
 8009602:	6013      	str	r3, [r2, #0]
 8009604:	693b      	ldr	r3, [r7, #16]
 8009606:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009608:	4613      	mov	r3, r2
 800960a:	009b      	lsls	r3, r3, #2
 800960c:	4413      	add	r3, r2
 800960e:	009b      	lsls	r3, r3, #2
 8009610:	4a09      	ldr	r2, [pc, #36]	@ (8009638 <xTaskPriorityDisinherit+0xdc>)
 8009612:	441a      	add	r2, r3
 8009614:	693b      	ldr	r3, [r7, #16]
 8009616:	3304      	adds	r3, #4
 8009618:	4619      	mov	r1, r3
 800961a:	4610      	mov	r0, r2
 800961c:	f7fd fff1 	bl	8007602 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009620:	2301      	movs	r3, #1
 8009622:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009624:	697b      	ldr	r3, [r7, #20]
	}
 8009626:	4618      	mov	r0, r3
 8009628:	3718      	adds	r7, #24
 800962a:	46bd      	mov	sp, r7
 800962c:	bd80      	pop	{r7, pc}
 800962e:	bf00      	nop
 8009630:	24000adc 	.word	0x24000adc
 8009634:	24000fb8 	.word	0x24000fb8
 8009638:	24000ae0 	.word	0x24000ae0

0800963c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800963c:	b580      	push	{r7, lr}
 800963e:	b088      	sub	sp, #32
 8009640:	af00      	add	r7, sp, #0
 8009642:	6078      	str	r0, [r7, #4]
 8009644:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800964a:	2301      	movs	r3, #1
 800964c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	2b00      	cmp	r3, #0
 8009652:	d06c      	beq.n	800972e <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009654:	69bb      	ldr	r3, [r7, #24]
 8009656:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009658:	2b00      	cmp	r3, #0
 800965a:	d10b      	bne.n	8009674 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800965c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009660:	f383 8811 	msr	BASEPRI, r3
 8009664:	f3bf 8f6f 	isb	sy
 8009668:	f3bf 8f4f 	dsb	sy
 800966c:	60fb      	str	r3, [r7, #12]
}
 800966e:	bf00      	nop
 8009670:	bf00      	nop
 8009672:	e7fd      	b.n	8009670 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009674:	69bb      	ldr	r3, [r7, #24]
 8009676:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009678:	683a      	ldr	r2, [r7, #0]
 800967a:	429a      	cmp	r2, r3
 800967c:	d902      	bls.n	8009684 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800967e:	683b      	ldr	r3, [r7, #0]
 8009680:	61fb      	str	r3, [r7, #28]
 8009682:	e002      	b.n	800968a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8009684:	69bb      	ldr	r3, [r7, #24]
 8009686:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009688:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800968a:	69bb      	ldr	r3, [r7, #24]
 800968c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800968e:	69fa      	ldr	r2, [r7, #28]
 8009690:	429a      	cmp	r2, r3
 8009692:	d04c      	beq.n	800972e <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009694:	69bb      	ldr	r3, [r7, #24]
 8009696:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009698:	697a      	ldr	r2, [r7, #20]
 800969a:	429a      	cmp	r2, r3
 800969c:	d147      	bne.n	800972e <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800969e:	4b26      	ldr	r3, [pc, #152]	@ (8009738 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	69ba      	ldr	r2, [r7, #24]
 80096a4:	429a      	cmp	r2, r3
 80096a6:	d10b      	bne.n	80096c0 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 80096a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096ac:	f383 8811 	msr	BASEPRI, r3
 80096b0:	f3bf 8f6f 	isb	sy
 80096b4:	f3bf 8f4f 	dsb	sy
 80096b8:	60bb      	str	r3, [r7, #8]
}
 80096ba:	bf00      	nop
 80096bc:	bf00      	nop
 80096be:	e7fd      	b.n	80096bc <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80096c0:	69bb      	ldr	r3, [r7, #24]
 80096c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096c4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80096c6:	69bb      	ldr	r3, [r7, #24]
 80096c8:	69fa      	ldr	r2, [r7, #28]
 80096ca:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80096cc:	69bb      	ldr	r3, [r7, #24]
 80096ce:	699b      	ldr	r3, [r3, #24]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	db04      	blt.n	80096de <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80096d4:	69fb      	ldr	r3, [r7, #28]
 80096d6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80096da:	69bb      	ldr	r3, [r7, #24]
 80096dc:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80096de:	69bb      	ldr	r3, [r7, #24]
 80096e0:	6959      	ldr	r1, [r3, #20]
 80096e2:	693a      	ldr	r2, [r7, #16]
 80096e4:	4613      	mov	r3, r2
 80096e6:	009b      	lsls	r3, r3, #2
 80096e8:	4413      	add	r3, r2
 80096ea:	009b      	lsls	r3, r3, #2
 80096ec:	4a13      	ldr	r2, [pc, #76]	@ (800973c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80096ee:	4413      	add	r3, r2
 80096f0:	4299      	cmp	r1, r3
 80096f2:	d11c      	bne.n	800972e <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80096f4:	69bb      	ldr	r3, [r7, #24]
 80096f6:	3304      	adds	r3, #4
 80096f8:	4618      	mov	r0, r3
 80096fa:	f7fd ffdf 	bl	80076bc <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80096fe:	69bb      	ldr	r3, [r7, #24]
 8009700:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009702:	4b0f      	ldr	r3, [pc, #60]	@ (8009740 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	429a      	cmp	r2, r3
 8009708:	d903      	bls.n	8009712 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800970a:	69bb      	ldr	r3, [r7, #24]
 800970c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800970e:	4a0c      	ldr	r2, [pc, #48]	@ (8009740 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8009710:	6013      	str	r3, [r2, #0]
 8009712:	69bb      	ldr	r3, [r7, #24]
 8009714:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009716:	4613      	mov	r3, r2
 8009718:	009b      	lsls	r3, r3, #2
 800971a:	4413      	add	r3, r2
 800971c:	009b      	lsls	r3, r3, #2
 800971e:	4a07      	ldr	r2, [pc, #28]	@ (800973c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009720:	441a      	add	r2, r3
 8009722:	69bb      	ldr	r3, [r7, #24]
 8009724:	3304      	adds	r3, #4
 8009726:	4619      	mov	r1, r3
 8009728:	4610      	mov	r0, r2
 800972a:	f7fd ff6a 	bl	8007602 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800972e:	bf00      	nop
 8009730:	3720      	adds	r7, #32
 8009732:	46bd      	mov	sp, r7
 8009734:	bd80      	pop	{r7, pc}
 8009736:	bf00      	nop
 8009738:	24000adc 	.word	0x24000adc
 800973c:	24000ae0 	.word	0x24000ae0
 8009740:	24000fb8 	.word	0x24000fb8

08009744 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8009744:	b480      	push	{r7}
 8009746:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009748:	4b07      	ldr	r3, [pc, #28]	@ (8009768 <pvTaskIncrementMutexHeldCount+0x24>)
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	2b00      	cmp	r3, #0
 800974e:	d004      	beq.n	800975a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009750:	4b05      	ldr	r3, [pc, #20]	@ (8009768 <pvTaskIncrementMutexHeldCount+0x24>)
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009756:	3201      	adds	r2, #1
 8009758:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800975a:	4b03      	ldr	r3, [pc, #12]	@ (8009768 <pvTaskIncrementMutexHeldCount+0x24>)
 800975c:	681b      	ldr	r3, [r3, #0]
	}
 800975e:	4618      	mov	r0, r3
 8009760:	46bd      	mov	sp, r7
 8009762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009766:	4770      	bx	lr
 8009768:	24000adc 	.word	0x24000adc

0800976c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800976c:	b580      	push	{r7, lr}
 800976e:	b084      	sub	sp, #16
 8009770:	af00      	add	r7, sp, #0
 8009772:	6078      	str	r0, [r7, #4]
 8009774:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009776:	4b21      	ldr	r3, [pc, #132]	@ (80097fc <prvAddCurrentTaskToDelayedList+0x90>)
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800977c:	4b20      	ldr	r3, [pc, #128]	@ (8009800 <prvAddCurrentTaskToDelayedList+0x94>)
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	3304      	adds	r3, #4
 8009782:	4618      	mov	r0, r3
 8009784:	f7fd ff9a 	bl	80076bc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800978e:	d10a      	bne.n	80097a6 <prvAddCurrentTaskToDelayedList+0x3a>
 8009790:	683b      	ldr	r3, [r7, #0]
 8009792:	2b00      	cmp	r3, #0
 8009794:	d007      	beq.n	80097a6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009796:	4b1a      	ldr	r3, [pc, #104]	@ (8009800 <prvAddCurrentTaskToDelayedList+0x94>)
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	3304      	adds	r3, #4
 800979c:	4619      	mov	r1, r3
 800979e:	4819      	ldr	r0, [pc, #100]	@ (8009804 <prvAddCurrentTaskToDelayedList+0x98>)
 80097a0:	f7fd ff2f 	bl	8007602 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80097a4:	e026      	b.n	80097f4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80097a6:	68fa      	ldr	r2, [r7, #12]
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	4413      	add	r3, r2
 80097ac:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80097ae:	4b14      	ldr	r3, [pc, #80]	@ (8009800 <prvAddCurrentTaskToDelayedList+0x94>)
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	68ba      	ldr	r2, [r7, #8]
 80097b4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80097b6:	68ba      	ldr	r2, [r7, #8]
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	429a      	cmp	r2, r3
 80097bc:	d209      	bcs.n	80097d2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80097be:	4b12      	ldr	r3, [pc, #72]	@ (8009808 <prvAddCurrentTaskToDelayedList+0x9c>)
 80097c0:	681a      	ldr	r2, [r3, #0]
 80097c2:	4b0f      	ldr	r3, [pc, #60]	@ (8009800 <prvAddCurrentTaskToDelayedList+0x94>)
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	3304      	adds	r3, #4
 80097c8:	4619      	mov	r1, r3
 80097ca:	4610      	mov	r0, r2
 80097cc:	f7fd ff3d 	bl	800764a <vListInsert>
}
 80097d0:	e010      	b.n	80097f4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80097d2:	4b0e      	ldr	r3, [pc, #56]	@ (800980c <prvAddCurrentTaskToDelayedList+0xa0>)
 80097d4:	681a      	ldr	r2, [r3, #0]
 80097d6:	4b0a      	ldr	r3, [pc, #40]	@ (8009800 <prvAddCurrentTaskToDelayedList+0x94>)
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	3304      	adds	r3, #4
 80097dc:	4619      	mov	r1, r3
 80097de:	4610      	mov	r0, r2
 80097e0:	f7fd ff33 	bl	800764a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80097e4:	4b0a      	ldr	r3, [pc, #40]	@ (8009810 <prvAddCurrentTaskToDelayedList+0xa4>)
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	68ba      	ldr	r2, [r7, #8]
 80097ea:	429a      	cmp	r2, r3
 80097ec:	d202      	bcs.n	80097f4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80097ee:	4a08      	ldr	r2, [pc, #32]	@ (8009810 <prvAddCurrentTaskToDelayedList+0xa4>)
 80097f0:	68bb      	ldr	r3, [r7, #8]
 80097f2:	6013      	str	r3, [r2, #0]
}
 80097f4:	bf00      	nop
 80097f6:	3710      	adds	r7, #16
 80097f8:	46bd      	mov	sp, r7
 80097fa:	bd80      	pop	{r7, pc}
 80097fc:	24000fb4 	.word	0x24000fb4
 8009800:	24000adc 	.word	0x24000adc
 8009804:	24000f9c 	.word	0x24000f9c
 8009808:	24000f6c 	.word	0x24000f6c
 800980c:	24000f68 	.word	0x24000f68
 8009810:	24000fd0 	.word	0x24000fd0

08009814 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009814:	b580      	push	{r7, lr}
 8009816:	b08a      	sub	sp, #40	@ 0x28
 8009818:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800981a:	2300      	movs	r3, #0
 800981c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800981e:	f000 fb13 	bl	8009e48 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009822:	4b1d      	ldr	r3, [pc, #116]	@ (8009898 <xTimerCreateTimerTask+0x84>)
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	2b00      	cmp	r3, #0
 8009828:	d021      	beq.n	800986e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800982a:	2300      	movs	r3, #0
 800982c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800982e:	2300      	movs	r3, #0
 8009830:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009832:	1d3a      	adds	r2, r7, #4
 8009834:	f107 0108 	add.w	r1, r7, #8
 8009838:	f107 030c 	add.w	r3, r7, #12
 800983c:	4618      	mov	r0, r3
 800983e:	f7fd fe99 	bl	8007574 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009842:	6879      	ldr	r1, [r7, #4]
 8009844:	68bb      	ldr	r3, [r7, #8]
 8009846:	68fa      	ldr	r2, [r7, #12]
 8009848:	9202      	str	r2, [sp, #8]
 800984a:	9301      	str	r3, [sp, #4]
 800984c:	2302      	movs	r3, #2
 800984e:	9300      	str	r3, [sp, #0]
 8009850:	2300      	movs	r3, #0
 8009852:	460a      	mov	r2, r1
 8009854:	4911      	ldr	r1, [pc, #68]	@ (800989c <xTimerCreateTimerTask+0x88>)
 8009856:	4812      	ldr	r0, [pc, #72]	@ (80098a0 <xTimerCreateTimerTask+0x8c>)
 8009858:	f7fe feea 	bl	8008630 <xTaskCreateStatic>
 800985c:	4603      	mov	r3, r0
 800985e:	4a11      	ldr	r2, [pc, #68]	@ (80098a4 <xTimerCreateTimerTask+0x90>)
 8009860:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009862:	4b10      	ldr	r3, [pc, #64]	@ (80098a4 <xTimerCreateTimerTask+0x90>)
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	2b00      	cmp	r3, #0
 8009868:	d001      	beq.n	800986e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800986a:	2301      	movs	r3, #1
 800986c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800986e:	697b      	ldr	r3, [r7, #20]
 8009870:	2b00      	cmp	r3, #0
 8009872:	d10b      	bne.n	800988c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8009874:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009878:	f383 8811 	msr	BASEPRI, r3
 800987c:	f3bf 8f6f 	isb	sy
 8009880:	f3bf 8f4f 	dsb	sy
 8009884:	613b      	str	r3, [r7, #16]
}
 8009886:	bf00      	nop
 8009888:	bf00      	nop
 800988a:	e7fd      	b.n	8009888 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800988c:	697b      	ldr	r3, [r7, #20]
}
 800988e:	4618      	mov	r0, r3
 8009890:	3718      	adds	r7, #24
 8009892:	46bd      	mov	sp, r7
 8009894:	bd80      	pop	{r7, pc}
 8009896:	bf00      	nop
 8009898:	2400100c 	.word	0x2400100c
 800989c:	0800f1f0 	.word	0x0800f1f0
 80098a0:	080099e1 	.word	0x080099e1
 80098a4:	24001010 	.word	0x24001010

080098a8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80098a8:	b580      	push	{r7, lr}
 80098aa:	b08a      	sub	sp, #40	@ 0x28
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	60f8      	str	r0, [r7, #12]
 80098b0:	60b9      	str	r1, [r7, #8]
 80098b2:	607a      	str	r2, [r7, #4]
 80098b4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80098b6:	2300      	movs	r3, #0
 80098b8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d10b      	bne.n	80098d8 <xTimerGenericCommand+0x30>
	__asm volatile
 80098c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098c4:	f383 8811 	msr	BASEPRI, r3
 80098c8:	f3bf 8f6f 	isb	sy
 80098cc:	f3bf 8f4f 	dsb	sy
 80098d0:	623b      	str	r3, [r7, #32]
}
 80098d2:	bf00      	nop
 80098d4:	bf00      	nop
 80098d6:	e7fd      	b.n	80098d4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80098d8:	4b19      	ldr	r3, [pc, #100]	@ (8009940 <xTimerGenericCommand+0x98>)
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d02a      	beq.n	8009936 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80098e0:	68bb      	ldr	r3, [r7, #8]
 80098e2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80098ec:	68bb      	ldr	r3, [r7, #8]
 80098ee:	2b05      	cmp	r3, #5
 80098f0:	dc18      	bgt.n	8009924 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80098f2:	f7ff fdad 	bl	8009450 <xTaskGetSchedulerState>
 80098f6:	4603      	mov	r3, r0
 80098f8:	2b02      	cmp	r3, #2
 80098fa:	d109      	bne.n	8009910 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80098fc:	4b10      	ldr	r3, [pc, #64]	@ (8009940 <xTimerGenericCommand+0x98>)
 80098fe:	6818      	ldr	r0, [r3, #0]
 8009900:	f107 0110 	add.w	r1, r7, #16
 8009904:	2300      	movs	r3, #0
 8009906:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009908:	f7fe f87c 	bl	8007a04 <xQueueGenericSend>
 800990c:	6278      	str	r0, [r7, #36]	@ 0x24
 800990e:	e012      	b.n	8009936 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009910:	4b0b      	ldr	r3, [pc, #44]	@ (8009940 <xTimerGenericCommand+0x98>)
 8009912:	6818      	ldr	r0, [r3, #0]
 8009914:	f107 0110 	add.w	r1, r7, #16
 8009918:	2300      	movs	r3, #0
 800991a:	2200      	movs	r2, #0
 800991c:	f7fe f872 	bl	8007a04 <xQueueGenericSend>
 8009920:	6278      	str	r0, [r7, #36]	@ 0x24
 8009922:	e008      	b.n	8009936 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009924:	4b06      	ldr	r3, [pc, #24]	@ (8009940 <xTimerGenericCommand+0x98>)
 8009926:	6818      	ldr	r0, [r3, #0]
 8009928:	f107 0110 	add.w	r1, r7, #16
 800992c:	2300      	movs	r3, #0
 800992e:	683a      	ldr	r2, [r7, #0]
 8009930:	f7fe f96a 	bl	8007c08 <xQueueGenericSendFromISR>
 8009934:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009938:	4618      	mov	r0, r3
 800993a:	3728      	adds	r7, #40	@ 0x28
 800993c:	46bd      	mov	sp, r7
 800993e:	bd80      	pop	{r7, pc}
 8009940:	2400100c 	.word	0x2400100c

08009944 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009944:	b580      	push	{r7, lr}
 8009946:	b088      	sub	sp, #32
 8009948:	af02      	add	r7, sp, #8
 800994a:	6078      	str	r0, [r7, #4]
 800994c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800994e:	4b23      	ldr	r3, [pc, #140]	@ (80099dc <prvProcessExpiredTimer+0x98>)
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	68db      	ldr	r3, [r3, #12]
 8009954:	68db      	ldr	r3, [r3, #12]
 8009956:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009958:	697b      	ldr	r3, [r7, #20]
 800995a:	3304      	adds	r3, #4
 800995c:	4618      	mov	r0, r3
 800995e:	f7fd fead 	bl	80076bc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009962:	697b      	ldr	r3, [r7, #20]
 8009964:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009968:	f003 0304 	and.w	r3, r3, #4
 800996c:	2b00      	cmp	r3, #0
 800996e:	d023      	beq.n	80099b8 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009970:	697b      	ldr	r3, [r7, #20]
 8009972:	699a      	ldr	r2, [r3, #24]
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	18d1      	adds	r1, r2, r3
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	683a      	ldr	r2, [r7, #0]
 800997c:	6978      	ldr	r0, [r7, #20]
 800997e:	f000 f8d5 	bl	8009b2c <prvInsertTimerInActiveList>
 8009982:	4603      	mov	r3, r0
 8009984:	2b00      	cmp	r3, #0
 8009986:	d020      	beq.n	80099ca <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009988:	2300      	movs	r3, #0
 800998a:	9300      	str	r3, [sp, #0]
 800998c:	2300      	movs	r3, #0
 800998e:	687a      	ldr	r2, [r7, #4]
 8009990:	2100      	movs	r1, #0
 8009992:	6978      	ldr	r0, [r7, #20]
 8009994:	f7ff ff88 	bl	80098a8 <xTimerGenericCommand>
 8009998:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800999a:	693b      	ldr	r3, [r7, #16]
 800999c:	2b00      	cmp	r3, #0
 800999e:	d114      	bne.n	80099ca <prvProcessExpiredTimer+0x86>
	__asm volatile
 80099a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099a4:	f383 8811 	msr	BASEPRI, r3
 80099a8:	f3bf 8f6f 	isb	sy
 80099ac:	f3bf 8f4f 	dsb	sy
 80099b0:	60fb      	str	r3, [r7, #12]
}
 80099b2:	bf00      	nop
 80099b4:	bf00      	nop
 80099b6:	e7fd      	b.n	80099b4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80099b8:	697b      	ldr	r3, [r7, #20]
 80099ba:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80099be:	f023 0301 	bic.w	r3, r3, #1
 80099c2:	b2da      	uxtb	r2, r3
 80099c4:	697b      	ldr	r3, [r7, #20]
 80099c6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80099ca:	697b      	ldr	r3, [r7, #20]
 80099cc:	6a1b      	ldr	r3, [r3, #32]
 80099ce:	6978      	ldr	r0, [r7, #20]
 80099d0:	4798      	blx	r3
}
 80099d2:	bf00      	nop
 80099d4:	3718      	adds	r7, #24
 80099d6:	46bd      	mov	sp, r7
 80099d8:	bd80      	pop	{r7, pc}
 80099da:	bf00      	nop
 80099dc:	24001004 	.word	0x24001004

080099e0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b084      	sub	sp, #16
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80099e8:	f107 0308 	add.w	r3, r7, #8
 80099ec:	4618      	mov	r0, r3
 80099ee:	f000 f859 	bl	8009aa4 <prvGetNextExpireTime>
 80099f2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80099f4:	68bb      	ldr	r3, [r7, #8]
 80099f6:	4619      	mov	r1, r3
 80099f8:	68f8      	ldr	r0, [r7, #12]
 80099fa:	f000 f805 	bl	8009a08 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80099fe:	f000 f8d7 	bl	8009bb0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009a02:	bf00      	nop
 8009a04:	e7f0      	b.n	80099e8 <prvTimerTask+0x8>
	...

08009a08 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009a08:	b580      	push	{r7, lr}
 8009a0a:	b084      	sub	sp, #16
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	6078      	str	r0, [r7, #4]
 8009a10:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009a12:	f7ff f871 	bl	8008af8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009a16:	f107 0308 	add.w	r3, r7, #8
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	f000 f866 	bl	8009aec <prvSampleTimeNow>
 8009a20:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009a22:	68bb      	ldr	r3, [r7, #8]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d130      	bne.n	8009a8a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009a28:	683b      	ldr	r3, [r7, #0]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d10a      	bne.n	8009a44 <prvProcessTimerOrBlockTask+0x3c>
 8009a2e:	687a      	ldr	r2, [r7, #4]
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	429a      	cmp	r2, r3
 8009a34:	d806      	bhi.n	8009a44 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009a36:	f7ff f8a5 	bl	8008b84 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009a3a:	68f9      	ldr	r1, [r7, #12]
 8009a3c:	6878      	ldr	r0, [r7, #4]
 8009a3e:	f7ff ff81 	bl	8009944 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009a42:	e024      	b.n	8009a8e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009a44:	683b      	ldr	r3, [r7, #0]
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d008      	beq.n	8009a5c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009a4a:	4b13      	ldr	r3, [pc, #76]	@ (8009a98 <prvProcessTimerOrBlockTask+0x90>)
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d101      	bne.n	8009a58 <prvProcessTimerOrBlockTask+0x50>
 8009a54:	2301      	movs	r3, #1
 8009a56:	e000      	b.n	8009a5a <prvProcessTimerOrBlockTask+0x52>
 8009a58:	2300      	movs	r3, #0
 8009a5a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009a5c:	4b0f      	ldr	r3, [pc, #60]	@ (8009a9c <prvProcessTimerOrBlockTask+0x94>)
 8009a5e:	6818      	ldr	r0, [r3, #0]
 8009a60:	687a      	ldr	r2, [r7, #4]
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	1ad3      	subs	r3, r2, r3
 8009a66:	683a      	ldr	r2, [r7, #0]
 8009a68:	4619      	mov	r1, r3
 8009a6a:	f7fe fdad 	bl	80085c8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009a6e:	f7ff f889 	bl	8008b84 <xTaskResumeAll>
 8009a72:	4603      	mov	r3, r0
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d10a      	bne.n	8009a8e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009a78:	4b09      	ldr	r3, [pc, #36]	@ (8009aa0 <prvProcessTimerOrBlockTask+0x98>)
 8009a7a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009a7e:	601a      	str	r2, [r3, #0]
 8009a80:	f3bf 8f4f 	dsb	sy
 8009a84:	f3bf 8f6f 	isb	sy
}
 8009a88:	e001      	b.n	8009a8e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009a8a:	f7ff f87b 	bl	8008b84 <xTaskResumeAll>
}
 8009a8e:	bf00      	nop
 8009a90:	3710      	adds	r7, #16
 8009a92:	46bd      	mov	sp, r7
 8009a94:	bd80      	pop	{r7, pc}
 8009a96:	bf00      	nop
 8009a98:	24001008 	.word	0x24001008
 8009a9c:	2400100c 	.word	0x2400100c
 8009aa0:	e000ed04 	.word	0xe000ed04

08009aa4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009aa4:	b480      	push	{r7}
 8009aa6:	b085      	sub	sp, #20
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009aac:	4b0e      	ldr	r3, [pc, #56]	@ (8009ae8 <prvGetNextExpireTime+0x44>)
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d101      	bne.n	8009aba <prvGetNextExpireTime+0x16>
 8009ab6:	2201      	movs	r2, #1
 8009ab8:	e000      	b.n	8009abc <prvGetNextExpireTime+0x18>
 8009aba:	2200      	movs	r2, #0
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d105      	bne.n	8009ad4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009ac8:	4b07      	ldr	r3, [pc, #28]	@ (8009ae8 <prvGetNextExpireTime+0x44>)
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	68db      	ldr	r3, [r3, #12]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	60fb      	str	r3, [r7, #12]
 8009ad2:	e001      	b.n	8009ad8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009ad4:	2300      	movs	r3, #0
 8009ad6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009ad8:	68fb      	ldr	r3, [r7, #12]
}
 8009ada:	4618      	mov	r0, r3
 8009adc:	3714      	adds	r7, #20
 8009ade:	46bd      	mov	sp, r7
 8009ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae4:	4770      	bx	lr
 8009ae6:	bf00      	nop
 8009ae8:	24001004 	.word	0x24001004

08009aec <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009aec:	b580      	push	{r7, lr}
 8009aee:	b084      	sub	sp, #16
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009af4:	f7ff f8e4 	bl	8008cc0 <xTaskGetTickCount>
 8009af8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009afa:	4b0b      	ldr	r3, [pc, #44]	@ (8009b28 <prvSampleTimeNow+0x3c>)
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	68fa      	ldr	r2, [r7, #12]
 8009b00:	429a      	cmp	r2, r3
 8009b02:	d205      	bcs.n	8009b10 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009b04:	f000 f93a 	bl	8009d7c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	2201      	movs	r2, #1
 8009b0c:	601a      	str	r2, [r3, #0]
 8009b0e:	e002      	b.n	8009b16 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	2200      	movs	r2, #0
 8009b14:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009b16:	4a04      	ldr	r2, [pc, #16]	@ (8009b28 <prvSampleTimeNow+0x3c>)
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009b1c:	68fb      	ldr	r3, [r7, #12]
}
 8009b1e:	4618      	mov	r0, r3
 8009b20:	3710      	adds	r7, #16
 8009b22:	46bd      	mov	sp, r7
 8009b24:	bd80      	pop	{r7, pc}
 8009b26:	bf00      	nop
 8009b28:	24001014 	.word	0x24001014

08009b2c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009b2c:	b580      	push	{r7, lr}
 8009b2e:	b086      	sub	sp, #24
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	60f8      	str	r0, [r7, #12]
 8009b34:	60b9      	str	r1, [r7, #8]
 8009b36:	607a      	str	r2, [r7, #4]
 8009b38:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009b3a:	2300      	movs	r3, #0
 8009b3c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	68ba      	ldr	r2, [r7, #8]
 8009b42:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	68fa      	ldr	r2, [r7, #12]
 8009b48:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009b4a:	68ba      	ldr	r2, [r7, #8]
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	429a      	cmp	r2, r3
 8009b50:	d812      	bhi.n	8009b78 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009b52:	687a      	ldr	r2, [r7, #4]
 8009b54:	683b      	ldr	r3, [r7, #0]
 8009b56:	1ad2      	subs	r2, r2, r3
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	699b      	ldr	r3, [r3, #24]
 8009b5c:	429a      	cmp	r2, r3
 8009b5e:	d302      	bcc.n	8009b66 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009b60:	2301      	movs	r3, #1
 8009b62:	617b      	str	r3, [r7, #20]
 8009b64:	e01b      	b.n	8009b9e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009b66:	4b10      	ldr	r3, [pc, #64]	@ (8009ba8 <prvInsertTimerInActiveList+0x7c>)
 8009b68:	681a      	ldr	r2, [r3, #0]
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	3304      	adds	r3, #4
 8009b6e:	4619      	mov	r1, r3
 8009b70:	4610      	mov	r0, r2
 8009b72:	f7fd fd6a 	bl	800764a <vListInsert>
 8009b76:	e012      	b.n	8009b9e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009b78:	687a      	ldr	r2, [r7, #4]
 8009b7a:	683b      	ldr	r3, [r7, #0]
 8009b7c:	429a      	cmp	r2, r3
 8009b7e:	d206      	bcs.n	8009b8e <prvInsertTimerInActiveList+0x62>
 8009b80:	68ba      	ldr	r2, [r7, #8]
 8009b82:	683b      	ldr	r3, [r7, #0]
 8009b84:	429a      	cmp	r2, r3
 8009b86:	d302      	bcc.n	8009b8e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009b88:	2301      	movs	r3, #1
 8009b8a:	617b      	str	r3, [r7, #20]
 8009b8c:	e007      	b.n	8009b9e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009b8e:	4b07      	ldr	r3, [pc, #28]	@ (8009bac <prvInsertTimerInActiveList+0x80>)
 8009b90:	681a      	ldr	r2, [r3, #0]
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	3304      	adds	r3, #4
 8009b96:	4619      	mov	r1, r3
 8009b98:	4610      	mov	r0, r2
 8009b9a:	f7fd fd56 	bl	800764a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009b9e:	697b      	ldr	r3, [r7, #20]
}
 8009ba0:	4618      	mov	r0, r3
 8009ba2:	3718      	adds	r7, #24
 8009ba4:	46bd      	mov	sp, r7
 8009ba6:	bd80      	pop	{r7, pc}
 8009ba8:	24001008 	.word	0x24001008
 8009bac:	24001004 	.word	0x24001004

08009bb0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009bb0:	b580      	push	{r7, lr}
 8009bb2:	b08e      	sub	sp, #56	@ 0x38
 8009bb4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009bb6:	e0ce      	b.n	8009d56 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	da19      	bge.n	8009bf2 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009bbe:	1d3b      	adds	r3, r7, #4
 8009bc0:	3304      	adds	r3, #4
 8009bc2:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009bc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d10b      	bne.n	8009be2 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8009bca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bce:	f383 8811 	msr	BASEPRI, r3
 8009bd2:	f3bf 8f6f 	isb	sy
 8009bd6:	f3bf 8f4f 	dsb	sy
 8009bda:	61fb      	str	r3, [r7, #28]
}
 8009bdc:	bf00      	nop
 8009bde:	bf00      	nop
 8009be0:	e7fd      	b.n	8009bde <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009be2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009be8:	6850      	ldr	r0, [r2, #4]
 8009bea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009bec:	6892      	ldr	r2, [r2, #8]
 8009bee:	4611      	mov	r1, r2
 8009bf0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	f2c0 80ae 	blt.w	8009d56 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009bfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c00:	695b      	ldr	r3, [r3, #20]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d004      	beq.n	8009c10 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009c06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c08:	3304      	adds	r3, #4
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	f7fd fd56 	bl	80076bc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009c10:	463b      	mov	r3, r7
 8009c12:	4618      	mov	r0, r3
 8009c14:	f7ff ff6a 	bl	8009aec <prvSampleTimeNow>
 8009c18:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	2b09      	cmp	r3, #9
 8009c1e:	f200 8097 	bhi.w	8009d50 <prvProcessReceivedCommands+0x1a0>
 8009c22:	a201      	add	r2, pc, #4	@ (adr r2, 8009c28 <prvProcessReceivedCommands+0x78>)
 8009c24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c28:	08009c51 	.word	0x08009c51
 8009c2c:	08009c51 	.word	0x08009c51
 8009c30:	08009c51 	.word	0x08009c51
 8009c34:	08009cc7 	.word	0x08009cc7
 8009c38:	08009cdb 	.word	0x08009cdb
 8009c3c:	08009d27 	.word	0x08009d27
 8009c40:	08009c51 	.word	0x08009c51
 8009c44:	08009c51 	.word	0x08009c51
 8009c48:	08009cc7 	.word	0x08009cc7
 8009c4c:	08009cdb 	.word	0x08009cdb
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009c50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c52:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009c56:	f043 0301 	orr.w	r3, r3, #1
 8009c5a:	b2da      	uxtb	r2, r3
 8009c5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c5e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009c62:	68ba      	ldr	r2, [r7, #8]
 8009c64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c66:	699b      	ldr	r3, [r3, #24]
 8009c68:	18d1      	adds	r1, r2, r3
 8009c6a:	68bb      	ldr	r3, [r7, #8]
 8009c6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009c6e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009c70:	f7ff ff5c 	bl	8009b2c <prvInsertTimerInActiveList>
 8009c74:	4603      	mov	r3, r0
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d06c      	beq.n	8009d54 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009c7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c7c:	6a1b      	ldr	r3, [r3, #32]
 8009c7e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009c80:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009c82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c84:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009c88:	f003 0304 	and.w	r3, r3, #4
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d061      	beq.n	8009d54 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009c90:	68ba      	ldr	r2, [r7, #8]
 8009c92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c94:	699b      	ldr	r3, [r3, #24]
 8009c96:	441a      	add	r2, r3
 8009c98:	2300      	movs	r3, #0
 8009c9a:	9300      	str	r3, [sp, #0]
 8009c9c:	2300      	movs	r3, #0
 8009c9e:	2100      	movs	r1, #0
 8009ca0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009ca2:	f7ff fe01 	bl	80098a8 <xTimerGenericCommand>
 8009ca6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009ca8:	6a3b      	ldr	r3, [r7, #32]
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d152      	bne.n	8009d54 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8009cae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cb2:	f383 8811 	msr	BASEPRI, r3
 8009cb6:	f3bf 8f6f 	isb	sy
 8009cba:	f3bf 8f4f 	dsb	sy
 8009cbe:	61bb      	str	r3, [r7, #24]
}
 8009cc0:	bf00      	nop
 8009cc2:	bf00      	nop
 8009cc4:	e7fd      	b.n	8009cc2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009cc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cc8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009ccc:	f023 0301 	bic.w	r3, r3, #1
 8009cd0:	b2da      	uxtb	r2, r3
 8009cd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cd4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009cd8:	e03d      	b.n	8009d56 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009cda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cdc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009ce0:	f043 0301 	orr.w	r3, r3, #1
 8009ce4:	b2da      	uxtb	r2, r3
 8009ce6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ce8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009cec:	68ba      	ldr	r2, [r7, #8]
 8009cee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cf0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009cf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cf4:	699b      	ldr	r3, [r3, #24]
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d10b      	bne.n	8009d12 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8009cfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cfe:	f383 8811 	msr	BASEPRI, r3
 8009d02:	f3bf 8f6f 	isb	sy
 8009d06:	f3bf 8f4f 	dsb	sy
 8009d0a:	617b      	str	r3, [r7, #20]
}
 8009d0c:	bf00      	nop
 8009d0e:	bf00      	nop
 8009d10:	e7fd      	b.n	8009d0e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009d12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d14:	699a      	ldr	r2, [r3, #24]
 8009d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d18:	18d1      	adds	r1, r2, r3
 8009d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d1c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009d1e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009d20:	f7ff ff04 	bl	8009b2c <prvInsertTimerInActiveList>
					break;
 8009d24:	e017      	b.n	8009d56 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009d26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d28:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009d2c:	f003 0302 	and.w	r3, r3, #2
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d103      	bne.n	8009d3c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8009d34:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009d36:	f000 fccb 	bl	800a6d0 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009d3a:	e00c      	b.n	8009d56 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009d3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d3e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009d42:	f023 0301 	bic.w	r3, r3, #1
 8009d46:	b2da      	uxtb	r2, r3
 8009d48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d4a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009d4e:	e002      	b.n	8009d56 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8009d50:	bf00      	nop
 8009d52:	e000      	b.n	8009d56 <prvProcessReceivedCommands+0x1a6>
					break;
 8009d54:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009d56:	4b08      	ldr	r3, [pc, #32]	@ (8009d78 <prvProcessReceivedCommands+0x1c8>)
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	1d39      	adds	r1, r7, #4
 8009d5c:	2200      	movs	r2, #0
 8009d5e:	4618      	mov	r0, r3
 8009d60:	f7fe f880 	bl	8007e64 <xQueueReceive>
 8009d64:	4603      	mov	r3, r0
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	f47f af26 	bne.w	8009bb8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009d6c:	bf00      	nop
 8009d6e:	bf00      	nop
 8009d70:	3730      	adds	r7, #48	@ 0x30
 8009d72:	46bd      	mov	sp, r7
 8009d74:	bd80      	pop	{r7, pc}
 8009d76:	bf00      	nop
 8009d78:	2400100c 	.word	0x2400100c

08009d7c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009d7c:	b580      	push	{r7, lr}
 8009d7e:	b088      	sub	sp, #32
 8009d80:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009d82:	e049      	b.n	8009e18 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009d84:	4b2e      	ldr	r3, [pc, #184]	@ (8009e40 <prvSwitchTimerLists+0xc4>)
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	68db      	ldr	r3, [r3, #12]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d8e:	4b2c      	ldr	r3, [pc, #176]	@ (8009e40 <prvSwitchTimerLists+0xc4>)
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	68db      	ldr	r3, [r3, #12]
 8009d94:	68db      	ldr	r3, [r3, #12]
 8009d96:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	3304      	adds	r3, #4
 8009d9c:	4618      	mov	r0, r3
 8009d9e:	f7fd fc8d 	bl	80076bc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	6a1b      	ldr	r3, [r3, #32]
 8009da6:	68f8      	ldr	r0, [r7, #12]
 8009da8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009db0:	f003 0304 	and.w	r3, r3, #4
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d02f      	beq.n	8009e18 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	699b      	ldr	r3, [r3, #24]
 8009dbc:	693a      	ldr	r2, [r7, #16]
 8009dbe:	4413      	add	r3, r2
 8009dc0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009dc2:	68ba      	ldr	r2, [r7, #8]
 8009dc4:	693b      	ldr	r3, [r7, #16]
 8009dc6:	429a      	cmp	r2, r3
 8009dc8:	d90e      	bls.n	8009de8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	68ba      	ldr	r2, [r7, #8]
 8009dce:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	68fa      	ldr	r2, [r7, #12]
 8009dd4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009dd6:	4b1a      	ldr	r3, [pc, #104]	@ (8009e40 <prvSwitchTimerLists+0xc4>)
 8009dd8:	681a      	ldr	r2, [r3, #0]
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	3304      	adds	r3, #4
 8009dde:	4619      	mov	r1, r3
 8009de0:	4610      	mov	r0, r2
 8009de2:	f7fd fc32 	bl	800764a <vListInsert>
 8009de6:	e017      	b.n	8009e18 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009de8:	2300      	movs	r3, #0
 8009dea:	9300      	str	r3, [sp, #0]
 8009dec:	2300      	movs	r3, #0
 8009dee:	693a      	ldr	r2, [r7, #16]
 8009df0:	2100      	movs	r1, #0
 8009df2:	68f8      	ldr	r0, [r7, #12]
 8009df4:	f7ff fd58 	bl	80098a8 <xTimerGenericCommand>
 8009df8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d10b      	bne.n	8009e18 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8009e00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e04:	f383 8811 	msr	BASEPRI, r3
 8009e08:	f3bf 8f6f 	isb	sy
 8009e0c:	f3bf 8f4f 	dsb	sy
 8009e10:	603b      	str	r3, [r7, #0]
}
 8009e12:	bf00      	nop
 8009e14:	bf00      	nop
 8009e16:	e7fd      	b.n	8009e14 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009e18:	4b09      	ldr	r3, [pc, #36]	@ (8009e40 <prvSwitchTimerLists+0xc4>)
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d1b0      	bne.n	8009d84 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009e22:	4b07      	ldr	r3, [pc, #28]	@ (8009e40 <prvSwitchTimerLists+0xc4>)
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009e28:	4b06      	ldr	r3, [pc, #24]	@ (8009e44 <prvSwitchTimerLists+0xc8>)
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	4a04      	ldr	r2, [pc, #16]	@ (8009e40 <prvSwitchTimerLists+0xc4>)
 8009e2e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009e30:	4a04      	ldr	r2, [pc, #16]	@ (8009e44 <prvSwitchTimerLists+0xc8>)
 8009e32:	697b      	ldr	r3, [r7, #20]
 8009e34:	6013      	str	r3, [r2, #0]
}
 8009e36:	bf00      	nop
 8009e38:	3718      	adds	r7, #24
 8009e3a:	46bd      	mov	sp, r7
 8009e3c:	bd80      	pop	{r7, pc}
 8009e3e:	bf00      	nop
 8009e40:	24001004 	.word	0x24001004
 8009e44:	24001008 	.word	0x24001008

08009e48 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009e48:	b580      	push	{r7, lr}
 8009e4a:	b082      	sub	sp, #8
 8009e4c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009e4e:	f000 f96b 	bl	800a128 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009e52:	4b15      	ldr	r3, [pc, #84]	@ (8009ea8 <prvCheckForValidListAndQueue+0x60>)
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d120      	bne.n	8009e9c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009e5a:	4814      	ldr	r0, [pc, #80]	@ (8009eac <prvCheckForValidListAndQueue+0x64>)
 8009e5c:	f7fd fba4 	bl	80075a8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009e60:	4813      	ldr	r0, [pc, #76]	@ (8009eb0 <prvCheckForValidListAndQueue+0x68>)
 8009e62:	f7fd fba1 	bl	80075a8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009e66:	4b13      	ldr	r3, [pc, #76]	@ (8009eb4 <prvCheckForValidListAndQueue+0x6c>)
 8009e68:	4a10      	ldr	r2, [pc, #64]	@ (8009eac <prvCheckForValidListAndQueue+0x64>)
 8009e6a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009e6c:	4b12      	ldr	r3, [pc, #72]	@ (8009eb8 <prvCheckForValidListAndQueue+0x70>)
 8009e6e:	4a10      	ldr	r2, [pc, #64]	@ (8009eb0 <prvCheckForValidListAndQueue+0x68>)
 8009e70:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009e72:	2300      	movs	r3, #0
 8009e74:	9300      	str	r3, [sp, #0]
 8009e76:	4b11      	ldr	r3, [pc, #68]	@ (8009ebc <prvCheckForValidListAndQueue+0x74>)
 8009e78:	4a11      	ldr	r2, [pc, #68]	@ (8009ec0 <prvCheckForValidListAndQueue+0x78>)
 8009e7a:	2110      	movs	r1, #16
 8009e7c:	200a      	movs	r0, #10
 8009e7e:	f7fd fcb1 	bl	80077e4 <xQueueGenericCreateStatic>
 8009e82:	4603      	mov	r3, r0
 8009e84:	4a08      	ldr	r2, [pc, #32]	@ (8009ea8 <prvCheckForValidListAndQueue+0x60>)
 8009e86:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009e88:	4b07      	ldr	r3, [pc, #28]	@ (8009ea8 <prvCheckForValidListAndQueue+0x60>)
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d005      	beq.n	8009e9c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009e90:	4b05      	ldr	r3, [pc, #20]	@ (8009ea8 <prvCheckForValidListAndQueue+0x60>)
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	490b      	ldr	r1, [pc, #44]	@ (8009ec4 <prvCheckForValidListAndQueue+0x7c>)
 8009e96:	4618      	mov	r0, r3
 8009e98:	f7fe fb42 	bl	8008520 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009e9c:	f000 f976 	bl	800a18c <vPortExitCritical>
}
 8009ea0:	bf00      	nop
 8009ea2:	46bd      	mov	sp, r7
 8009ea4:	bd80      	pop	{r7, pc}
 8009ea6:	bf00      	nop
 8009ea8:	2400100c 	.word	0x2400100c
 8009eac:	24000fdc 	.word	0x24000fdc
 8009eb0:	24000ff0 	.word	0x24000ff0
 8009eb4:	24001004 	.word	0x24001004
 8009eb8:	24001008 	.word	0x24001008
 8009ebc:	240010b8 	.word	0x240010b8
 8009ec0:	24001018 	.word	0x24001018
 8009ec4:	0800f1f8 	.word	0x0800f1f8

08009ec8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009ec8:	b480      	push	{r7}
 8009eca:	b085      	sub	sp, #20
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	60f8      	str	r0, [r7, #12]
 8009ed0:	60b9      	str	r1, [r7, #8]
 8009ed2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	3b04      	subs	r3, #4
 8009ed8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009ee0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	3b04      	subs	r3, #4
 8009ee6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009ee8:	68bb      	ldr	r3, [r7, #8]
 8009eea:	f023 0201 	bic.w	r2, r3, #1
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	3b04      	subs	r3, #4
 8009ef6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009ef8:	4a0c      	ldr	r2, [pc, #48]	@ (8009f2c <pxPortInitialiseStack+0x64>)
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	3b14      	subs	r3, #20
 8009f02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009f04:	687a      	ldr	r2, [r7, #4]
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	3b04      	subs	r3, #4
 8009f0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	f06f 0202 	mvn.w	r2, #2
 8009f16:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	3b20      	subs	r3, #32
 8009f1c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009f1e:	68fb      	ldr	r3, [r7, #12]
}
 8009f20:	4618      	mov	r0, r3
 8009f22:	3714      	adds	r7, #20
 8009f24:	46bd      	mov	sp, r7
 8009f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2a:	4770      	bx	lr
 8009f2c:	08009f31 	.word	0x08009f31

08009f30 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009f30:	b480      	push	{r7}
 8009f32:	b085      	sub	sp, #20
 8009f34:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009f36:	2300      	movs	r3, #0
 8009f38:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009f3a:	4b13      	ldr	r3, [pc, #76]	@ (8009f88 <prvTaskExitError+0x58>)
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f42:	d00b      	beq.n	8009f5c <prvTaskExitError+0x2c>
	__asm volatile
 8009f44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f48:	f383 8811 	msr	BASEPRI, r3
 8009f4c:	f3bf 8f6f 	isb	sy
 8009f50:	f3bf 8f4f 	dsb	sy
 8009f54:	60fb      	str	r3, [r7, #12]
}
 8009f56:	bf00      	nop
 8009f58:	bf00      	nop
 8009f5a:	e7fd      	b.n	8009f58 <prvTaskExitError+0x28>
	__asm volatile
 8009f5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f60:	f383 8811 	msr	BASEPRI, r3
 8009f64:	f3bf 8f6f 	isb	sy
 8009f68:	f3bf 8f4f 	dsb	sy
 8009f6c:	60bb      	str	r3, [r7, #8]
}
 8009f6e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009f70:	bf00      	nop
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d0fc      	beq.n	8009f72 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009f78:	bf00      	nop
 8009f7a:	bf00      	nop
 8009f7c:	3714      	adds	r7, #20
 8009f7e:	46bd      	mov	sp, r7
 8009f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f84:	4770      	bx	lr
 8009f86:	bf00      	nop
 8009f88:	24000010 	.word	0x24000010
 8009f8c:	00000000 	.word	0x00000000

08009f90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009f90:	4b07      	ldr	r3, [pc, #28]	@ (8009fb0 <pxCurrentTCBConst2>)
 8009f92:	6819      	ldr	r1, [r3, #0]
 8009f94:	6808      	ldr	r0, [r1, #0]
 8009f96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f9a:	f380 8809 	msr	PSP, r0
 8009f9e:	f3bf 8f6f 	isb	sy
 8009fa2:	f04f 0000 	mov.w	r0, #0
 8009fa6:	f380 8811 	msr	BASEPRI, r0
 8009faa:	4770      	bx	lr
 8009fac:	f3af 8000 	nop.w

08009fb0 <pxCurrentTCBConst2>:
 8009fb0:	24000adc 	.word	0x24000adc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009fb4:	bf00      	nop
 8009fb6:	bf00      	nop

08009fb8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009fb8:	4808      	ldr	r0, [pc, #32]	@ (8009fdc <prvPortStartFirstTask+0x24>)
 8009fba:	6800      	ldr	r0, [r0, #0]
 8009fbc:	6800      	ldr	r0, [r0, #0]
 8009fbe:	f380 8808 	msr	MSP, r0
 8009fc2:	f04f 0000 	mov.w	r0, #0
 8009fc6:	f380 8814 	msr	CONTROL, r0
 8009fca:	b662      	cpsie	i
 8009fcc:	b661      	cpsie	f
 8009fce:	f3bf 8f4f 	dsb	sy
 8009fd2:	f3bf 8f6f 	isb	sy
 8009fd6:	df00      	svc	0
 8009fd8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009fda:	bf00      	nop
 8009fdc:	e000ed08 	.word	0xe000ed08

08009fe0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009fe0:	b580      	push	{r7, lr}
 8009fe2:	b086      	sub	sp, #24
 8009fe4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009fe6:	4b47      	ldr	r3, [pc, #284]	@ (800a104 <xPortStartScheduler+0x124>)
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	4a47      	ldr	r2, [pc, #284]	@ (800a108 <xPortStartScheduler+0x128>)
 8009fec:	4293      	cmp	r3, r2
 8009fee:	d10b      	bne.n	800a008 <xPortStartScheduler+0x28>
	__asm volatile
 8009ff0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ff4:	f383 8811 	msr	BASEPRI, r3
 8009ff8:	f3bf 8f6f 	isb	sy
 8009ffc:	f3bf 8f4f 	dsb	sy
 800a000:	613b      	str	r3, [r7, #16]
}
 800a002:	bf00      	nop
 800a004:	bf00      	nop
 800a006:	e7fd      	b.n	800a004 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a008:	4b3e      	ldr	r3, [pc, #248]	@ (800a104 <xPortStartScheduler+0x124>)
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	4a3f      	ldr	r2, [pc, #252]	@ (800a10c <xPortStartScheduler+0x12c>)
 800a00e:	4293      	cmp	r3, r2
 800a010:	d10b      	bne.n	800a02a <xPortStartScheduler+0x4a>
	__asm volatile
 800a012:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a016:	f383 8811 	msr	BASEPRI, r3
 800a01a:	f3bf 8f6f 	isb	sy
 800a01e:	f3bf 8f4f 	dsb	sy
 800a022:	60fb      	str	r3, [r7, #12]
}
 800a024:	bf00      	nop
 800a026:	bf00      	nop
 800a028:	e7fd      	b.n	800a026 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a02a:	4b39      	ldr	r3, [pc, #228]	@ (800a110 <xPortStartScheduler+0x130>)
 800a02c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a02e:	697b      	ldr	r3, [r7, #20]
 800a030:	781b      	ldrb	r3, [r3, #0]
 800a032:	b2db      	uxtb	r3, r3
 800a034:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a036:	697b      	ldr	r3, [r7, #20]
 800a038:	22ff      	movs	r2, #255	@ 0xff
 800a03a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a03c:	697b      	ldr	r3, [r7, #20]
 800a03e:	781b      	ldrb	r3, [r3, #0]
 800a040:	b2db      	uxtb	r3, r3
 800a042:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a044:	78fb      	ldrb	r3, [r7, #3]
 800a046:	b2db      	uxtb	r3, r3
 800a048:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a04c:	b2da      	uxtb	r2, r3
 800a04e:	4b31      	ldr	r3, [pc, #196]	@ (800a114 <xPortStartScheduler+0x134>)
 800a050:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a052:	4b31      	ldr	r3, [pc, #196]	@ (800a118 <xPortStartScheduler+0x138>)
 800a054:	2207      	movs	r2, #7
 800a056:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a058:	e009      	b.n	800a06e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800a05a:	4b2f      	ldr	r3, [pc, #188]	@ (800a118 <xPortStartScheduler+0x138>)
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	3b01      	subs	r3, #1
 800a060:	4a2d      	ldr	r2, [pc, #180]	@ (800a118 <xPortStartScheduler+0x138>)
 800a062:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a064:	78fb      	ldrb	r3, [r7, #3]
 800a066:	b2db      	uxtb	r3, r3
 800a068:	005b      	lsls	r3, r3, #1
 800a06a:	b2db      	uxtb	r3, r3
 800a06c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a06e:	78fb      	ldrb	r3, [r7, #3]
 800a070:	b2db      	uxtb	r3, r3
 800a072:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a076:	2b80      	cmp	r3, #128	@ 0x80
 800a078:	d0ef      	beq.n	800a05a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a07a:	4b27      	ldr	r3, [pc, #156]	@ (800a118 <xPortStartScheduler+0x138>)
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	f1c3 0307 	rsb	r3, r3, #7
 800a082:	2b04      	cmp	r3, #4
 800a084:	d00b      	beq.n	800a09e <xPortStartScheduler+0xbe>
	__asm volatile
 800a086:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a08a:	f383 8811 	msr	BASEPRI, r3
 800a08e:	f3bf 8f6f 	isb	sy
 800a092:	f3bf 8f4f 	dsb	sy
 800a096:	60bb      	str	r3, [r7, #8]
}
 800a098:	bf00      	nop
 800a09a:	bf00      	nop
 800a09c:	e7fd      	b.n	800a09a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a09e:	4b1e      	ldr	r3, [pc, #120]	@ (800a118 <xPortStartScheduler+0x138>)
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	021b      	lsls	r3, r3, #8
 800a0a4:	4a1c      	ldr	r2, [pc, #112]	@ (800a118 <xPortStartScheduler+0x138>)
 800a0a6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a0a8:	4b1b      	ldr	r3, [pc, #108]	@ (800a118 <xPortStartScheduler+0x138>)
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a0b0:	4a19      	ldr	r2, [pc, #100]	@ (800a118 <xPortStartScheduler+0x138>)
 800a0b2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	b2da      	uxtb	r2, r3
 800a0b8:	697b      	ldr	r3, [r7, #20]
 800a0ba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a0bc:	4b17      	ldr	r3, [pc, #92]	@ (800a11c <xPortStartScheduler+0x13c>)
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	4a16      	ldr	r2, [pc, #88]	@ (800a11c <xPortStartScheduler+0x13c>)
 800a0c2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800a0c6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a0c8:	4b14      	ldr	r3, [pc, #80]	@ (800a11c <xPortStartScheduler+0x13c>)
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	4a13      	ldr	r2, [pc, #76]	@ (800a11c <xPortStartScheduler+0x13c>)
 800a0ce:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800a0d2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a0d4:	f000 f9a6 	bl	800a424 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a0d8:	4b11      	ldr	r3, [pc, #68]	@ (800a120 <xPortStartScheduler+0x140>)
 800a0da:	2200      	movs	r2, #0
 800a0dc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a0de:	f000 f9dd 	bl	800a49c <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a0e2:	4b10      	ldr	r3, [pc, #64]	@ (800a124 <xPortStartScheduler+0x144>)
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	4a0f      	ldr	r2, [pc, #60]	@ (800a124 <xPortStartScheduler+0x144>)
 800a0e8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800a0ec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a0ee:	f7ff ff63 	bl	8009fb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a0f2:	f7fe fed7 	bl	8008ea4 <vTaskSwitchContext>
	prvTaskExitError();
 800a0f6:	f7ff ff1b 	bl	8009f30 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a0fa:	2300      	movs	r3, #0
}
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	3718      	adds	r7, #24
 800a100:	46bd      	mov	sp, r7
 800a102:	bd80      	pop	{r7, pc}
 800a104:	e000ed00 	.word	0xe000ed00
 800a108:	410fc271 	.word	0x410fc271
 800a10c:	410fc270 	.word	0x410fc270
 800a110:	e000e400 	.word	0xe000e400
 800a114:	24001114 	.word	0x24001114
 800a118:	24001118 	.word	0x24001118
 800a11c:	e000ed20 	.word	0xe000ed20
 800a120:	24000010 	.word	0x24000010
 800a124:	e000ef34 	.word	0xe000ef34

0800a128 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a128:	b480      	push	{r7}
 800a12a:	b083      	sub	sp, #12
 800a12c:	af00      	add	r7, sp, #0
	__asm volatile
 800a12e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a132:	f383 8811 	msr	BASEPRI, r3
 800a136:	f3bf 8f6f 	isb	sy
 800a13a:	f3bf 8f4f 	dsb	sy
 800a13e:	607b      	str	r3, [r7, #4]
}
 800a140:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a142:	4b10      	ldr	r3, [pc, #64]	@ (800a184 <vPortEnterCritical+0x5c>)
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	3301      	adds	r3, #1
 800a148:	4a0e      	ldr	r2, [pc, #56]	@ (800a184 <vPortEnterCritical+0x5c>)
 800a14a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a14c:	4b0d      	ldr	r3, [pc, #52]	@ (800a184 <vPortEnterCritical+0x5c>)
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	2b01      	cmp	r3, #1
 800a152:	d110      	bne.n	800a176 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a154:	4b0c      	ldr	r3, [pc, #48]	@ (800a188 <vPortEnterCritical+0x60>)
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	b2db      	uxtb	r3, r3
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d00b      	beq.n	800a176 <vPortEnterCritical+0x4e>
	__asm volatile
 800a15e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a162:	f383 8811 	msr	BASEPRI, r3
 800a166:	f3bf 8f6f 	isb	sy
 800a16a:	f3bf 8f4f 	dsb	sy
 800a16e:	603b      	str	r3, [r7, #0]
}
 800a170:	bf00      	nop
 800a172:	bf00      	nop
 800a174:	e7fd      	b.n	800a172 <vPortEnterCritical+0x4a>
	}
}
 800a176:	bf00      	nop
 800a178:	370c      	adds	r7, #12
 800a17a:	46bd      	mov	sp, r7
 800a17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a180:	4770      	bx	lr
 800a182:	bf00      	nop
 800a184:	24000010 	.word	0x24000010
 800a188:	e000ed04 	.word	0xe000ed04

0800a18c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a18c:	b480      	push	{r7}
 800a18e:	b083      	sub	sp, #12
 800a190:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a192:	4b12      	ldr	r3, [pc, #72]	@ (800a1dc <vPortExitCritical+0x50>)
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	2b00      	cmp	r3, #0
 800a198:	d10b      	bne.n	800a1b2 <vPortExitCritical+0x26>
	__asm volatile
 800a19a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a19e:	f383 8811 	msr	BASEPRI, r3
 800a1a2:	f3bf 8f6f 	isb	sy
 800a1a6:	f3bf 8f4f 	dsb	sy
 800a1aa:	607b      	str	r3, [r7, #4]
}
 800a1ac:	bf00      	nop
 800a1ae:	bf00      	nop
 800a1b0:	e7fd      	b.n	800a1ae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a1b2:	4b0a      	ldr	r3, [pc, #40]	@ (800a1dc <vPortExitCritical+0x50>)
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	3b01      	subs	r3, #1
 800a1b8:	4a08      	ldr	r2, [pc, #32]	@ (800a1dc <vPortExitCritical+0x50>)
 800a1ba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a1bc:	4b07      	ldr	r3, [pc, #28]	@ (800a1dc <vPortExitCritical+0x50>)
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d105      	bne.n	800a1d0 <vPortExitCritical+0x44>
 800a1c4:	2300      	movs	r3, #0
 800a1c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a1c8:	683b      	ldr	r3, [r7, #0]
 800a1ca:	f383 8811 	msr	BASEPRI, r3
}
 800a1ce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a1d0:	bf00      	nop
 800a1d2:	370c      	adds	r7, #12
 800a1d4:	46bd      	mov	sp, r7
 800a1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1da:	4770      	bx	lr
 800a1dc:	24000010 	.word	0x24000010

0800a1e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a1e0:	f3ef 8009 	mrs	r0, PSP
 800a1e4:	f3bf 8f6f 	isb	sy
 800a1e8:	4b15      	ldr	r3, [pc, #84]	@ (800a240 <pxCurrentTCBConst>)
 800a1ea:	681a      	ldr	r2, [r3, #0]
 800a1ec:	f01e 0f10 	tst.w	lr, #16
 800a1f0:	bf08      	it	eq
 800a1f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a1f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1fa:	6010      	str	r0, [r2, #0]
 800a1fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a200:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800a204:	f380 8811 	msr	BASEPRI, r0
 800a208:	f3bf 8f4f 	dsb	sy
 800a20c:	f3bf 8f6f 	isb	sy
 800a210:	f7fe fe48 	bl	8008ea4 <vTaskSwitchContext>
 800a214:	f04f 0000 	mov.w	r0, #0
 800a218:	f380 8811 	msr	BASEPRI, r0
 800a21c:	bc09      	pop	{r0, r3}
 800a21e:	6819      	ldr	r1, [r3, #0]
 800a220:	6808      	ldr	r0, [r1, #0]
 800a222:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a226:	f01e 0f10 	tst.w	lr, #16
 800a22a:	bf08      	it	eq
 800a22c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a230:	f380 8809 	msr	PSP, r0
 800a234:	f3bf 8f6f 	isb	sy
 800a238:	4770      	bx	lr
 800a23a:	bf00      	nop
 800a23c:	f3af 8000 	nop.w

0800a240 <pxCurrentTCBConst>:
 800a240:	24000adc 	.word	0x24000adc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a244:	bf00      	nop
 800a246:	bf00      	nop

0800a248 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a248:	b580      	push	{r7, lr}
 800a24a:	b082      	sub	sp, #8
 800a24c:	af00      	add	r7, sp, #0
	__asm volatile
 800a24e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a252:	f383 8811 	msr	BASEPRI, r3
 800a256:	f3bf 8f6f 	isb	sy
 800a25a:	f3bf 8f4f 	dsb	sy
 800a25e:	607b      	str	r3, [r7, #4]
}
 800a260:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a262:	f7fe fd65 	bl	8008d30 <xTaskIncrementTick>
 800a266:	4603      	mov	r3, r0
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d003      	beq.n	800a274 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a26c:	4b06      	ldr	r3, [pc, #24]	@ (800a288 <xPortSysTickHandler+0x40>)
 800a26e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a272:	601a      	str	r2, [r3, #0]
 800a274:	2300      	movs	r3, #0
 800a276:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a278:	683b      	ldr	r3, [r7, #0]
 800a27a:	f383 8811 	msr	BASEPRI, r3
}
 800a27e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a280:	bf00      	nop
 800a282:	3708      	adds	r7, #8
 800a284:	46bd      	mov	sp, r7
 800a286:	bd80      	pop	{r7, pc}
 800a288:	e000ed04 	.word	0xe000ed04

0800a28c <vPortSuppressTicksAndSleep>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE == 1 )

	__attribute__((weak)) void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
	{
 800a28c:	b580      	push	{r7, lr}
 800a28e:	b088      	sub	sp, #32
 800a290:	af00      	add	r7, sp, #0
 800a292:	6078      	str	r0, [r7, #4]
	uint32_t ulReloadValue, ulCompleteTickPeriods, ulCompletedSysTickDecrements;
	TickType_t xModifiableIdleTime;

		/* Make sure the SysTick reload value does not overflow the counter. */
		if( xExpectedIdleTime > xMaximumPossibleSuppressedTicks )
 800a294:	4b5d      	ldr	r3, [pc, #372]	@ (800a40c <vPortSuppressTicksAndSleep+0x180>)
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	687a      	ldr	r2, [r7, #4]
 800a29a:	429a      	cmp	r2, r3
 800a29c:	d902      	bls.n	800a2a4 <vPortSuppressTicksAndSleep+0x18>
		{
			xExpectedIdleTime = xMaximumPossibleSuppressedTicks;
 800a29e:	4b5b      	ldr	r3, [pc, #364]	@ (800a40c <vPortSuppressTicksAndSleep+0x180>)
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	607b      	str	r3, [r7, #4]

		/* Stop the SysTick momentarily.  The time the SysTick is stopped for
		is accounted for as best it can be, but using the tickless mode will
		inevitably result in some tiny drift of the time maintained by the
		kernel with respect to calendar time. */
		portNVIC_SYSTICK_CTRL_REG &= ~portNVIC_SYSTICK_ENABLE_BIT;
 800a2a4:	4b5a      	ldr	r3, [pc, #360]	@ (800a410 <vPortSuppressTicksAndSleep+0x184>)
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	4a59      	ldr	r2, [pc, #356]	@ (800a410 <vPortSuppressTicksAndSleep+0x184>)
 800a2aa:	f023 0301 	bic.w	r3, r3, #1
 800a2ae:	6013      	str	r3, [r2, #0]

		/* Calculate the reload value required to wait xExpectedIdleTime
		tick periods.  -1 is used because this code will execute part way
		through one of the tick periods. */
		ulReloadValue = portNVIC_SYSTICK_CURRENT_VALUE_REG + ( ulTimerCountsForOneTick * ( xExpectedIdleTime - 1UL ) );
 800a2b0:	4b58      	ldr	r3, [pc, #352]	@ (800a414 <vPortSuppressTicksAndSleep+0x188>)
 800a2b2:	681a      	ldr	r2, [r3, #0]
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	3b01      	subs	r3, #1
 800a2b8:	4957      	ldr	r1, [pc, #348]	@ (800a418 <vPortSuppressTicksAndSleep+0x18c>)
 800a2ba:	6809      	ldr	r1, [r1, #0]
 800a2bc:	fb01 f303 	mul.w	r3, r1, r3
 800a2c0:	4413      	add	r3, r2
 800a2c2:	61fb      	str	r3, [r7, #28]
		if( ulReloadValue > ulStoppedTimerCompensation )
 800a2c4:	4b55      	ldr	r3, [pc, #340]	@ (800a41c <vPortSuppressTicksAndSleep+0x190>)
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	69fa      	ldr	r2, [r7, #28]
 800a2ca:	429a      	cmp	r2, r3
 800a2cc:	d904      	bls.n	800a2d8 <vPortSuppressTicksAndSleep+0x4c>
		{
			ulReloadValue -= ulStoppedTimerCompensation;
 800a2ce:	4b53      	ldr	r3, [pc, #332]	@ (800a41c <vPortSuppressTicksAndSleep+0x190>)
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	69fa      	ldr	r2, [r7, #28]
 800a2d4:	1ad3      	subs	r3, r2, r3
 800a2d6:	61fb      	str	r3, [r7, #28]
		}

		/* Enter a critical section but don't use the taskENTER_CRITICAL()
		method as that will mask interrupts that should exit sleep mode. */
		__asm volatile( "cpsid i" ::: "memory" );
 800a2d8:	b672      	cpsid	i
		__asm volatile( "dsb" );
 800a2da:	f3bf 8f4f 	dsb	sy
		__asm volatile( "isb" );
 800a2de:	f3bf 8f6f 	isb	sy

		/* If a context switch is pending or a task is waiting for the scheduler
		to be unsuspended then abandon the low power entry. */
		if( eTaskConfirmSleepModeStatus() == eAbortSleep )
 800a2e2:	f7fe ffc3 	bl	800926c <eTaskConfirmSleepModeStatus>
 800a2e6:	4603      	mov	r3, r0
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d110      	bne.n	800a30e <vPortSuppressTicksAndSleep+0x82>
		{
			/* Restart from whatever is left in the count register to complete
			this tick period. */
			portNVIC_SYSTICK_LOAD_REG = portNVIC_SYSTICK_CURRENT_VALUE_REG;
 800a2ec:	4b49      	ldr	r3, [pc, #292]	@ (800a414 <vPortSuppressTicksAndSleep+0x188>)
 800a2ee:	4a4c      	ldr	r2, [pc, #304]	@ (800a420 <vPortSuppressTicksAndSleep+0x194>)
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	6013      	str	r3, [r2, #0]

			/* Restart SysTick. */
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 800a2f4:	4b46      	ldr	r3, [pc, #280]	@ (800a410 <vPortSuppressTicksAndSleep+0x184>)
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	4a45      	ldr	r2, [pc, #276]	@ (800a410 <vPortSuppressTicksAndSleep+0x184>)
 800a2fa:	f043 0301 	orr.w	r3, r3, #1
 800a2fe:	6013      	str	r3, [r2, #0]

			/* Reset the reload register to the value required for normal tick
			periods. */
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 800a300:	4b45      	ldr	r3, [pc, #276]	@ (800a418 <vPortSuppressTicksAndSleep+0x18c>)
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	4a46      	ldr	r2, [pc, #280]	@ (800a420 <vPortSuppressTicksAndSleep+0x194>)
 800a306:	3b01      	subs	r3, #1
 800a308:	6013      	str	r3, [r2, #0]

			/* Re-enable interrupts - see comments above the cpsid instruction()
			above. */
			__asm volatile( "cpsie i" ::: "memory" );
 800a30a:	b662      	cpsie	i
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;

			/* Exit with interrupts enabled. */
			__asm volatile( "cpsie i" ::: "memory" );
		}
	}
 800a30c:	e079      	b.n	800a402 <vPortSuppressTicksAndSleep+0x176>
			portNVIC_SYSTICK_LOAD_REG = ulReloadValue;
 800a30e:	4a44      	ldr	r2, [pc, #272]	@ (800a420 <vPortSuppressTicksAndSleep+0x194>)
 800a310:	69fb      	ldr	r3, [r7, #28]
 800a312:	6013      	str	r3, [r2, #0]
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a314:	4b3f      	ldr	r3, [pc, #252]	@ (800a414 <vPortSuppressTicksAndSleep+0x188>)
 800a316:	2200      	movs	r2, #0
 800a318:	601a      	str	r2, [r3, #0]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 800a31a:	4b3d      	ldr	r3, [pc, #244]	@ (800a410 <vPortSuppressTicksAndSleep+0x184>)
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	4a3c      	ldr	r2, [pc, #240]	@ (800a410 <vPortSuppressTicksAndSleep+0x184>)
 800a320:	f043 0301 	orr.w	r3, r3, #1
 800a324:	6013      	str	r3, [r2, #0]
			xModifiableIdleTime = xExpectedIdleTime;
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	613b      	str	r3, [r7, #16]
			configPRE_SLEEP_PROCESSING( xModifiableIdleTime );
 800a32a:	2300      	movs	r3, #0
 800a32c:	613b      	str	r3, [r7, #16]
 800a32e:	6938      	ldr	r0, [r7, #16]
 800a330:	f7f6 fba2 	bl	8000a78 <PreSleepProcessing>
			if( xModifiableIdleTime > 0 )
 800a334:	693b      	ldr	r3, [r7, #16]
 800a336:	2b00      	cmp	r3, #0
 800a338:	d004      	beq.n	800a344 <vPortSuppressTicksAndSleep+0xb8>
				__asm volatile( "dsb" ::: "memory" );
 800a33a:	f3bf 8f4f 	dsb	sy
				__asm volatile( "wfi" );
 800a33e:	bf30      	wfi
				__asm volatile( "isb" );
 800a340:	f3bf 8f6f 	isb	sy
			configPOST_SLEEP_PROCESSING( xExpectedIdleTime );
 800a344:	6878      	ldr	r0, [r7, #4]
 800a346:	f7f6 fba1 	bl	8000a8c <PostSleepProcessing>
			__asm volatile( "cpsie i" ::: "memory" );
 800a34a:	b662      	cpsie	i
			__asm volatile( "dsb" );
 800a34c:	f3bf 8f4f 	dsb	sy
			__asm volatile( "isb" );
 800a350:	f3bf 8f6f 	isb	sy
			__asm volatile( "cpsid i" ::: "memory" );
 800a354:	b672      	cpsid	i
			__asm volatile( "dsb" );
 800a356:	f3bf 8f4f 	dsb	sy
			__asm volatile( "isb" );
 800a35a:	f3bf 8f6f 	isb	sy
			portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT );
 800a35e:	4b2c      	ldr	r3, [pc, #176]	@ (800a410 <vPortSuppressTicksAndSleep+0x184>)
 800a360:	2206      	movs	r2, #6
 800a362:	601a      	str	r2, [r3, #0]
			if( ( portNVIC_SYSTICK_CTRL_REG & portNVIC_SYSTICK_COUNT_FLAG_BIT ) != 0 )
 800a364:	4b2a      	ldr	r3, [pc, #168]	@ (800a410 <vPortSuppressTicksAndSleep+0x184>)
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d01d      	beq.n	800a3ac <vPortSuppressTicksAndSleep+0x120>
				ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL ) - ( ulReloadValue - portNVIC_SYSTICK_CURRENT_VALUE_REG );
 800a370:	4b29      	ldr	r3, [pc, #164]	@ (800a418 <vPortSuppressTicksAndSleep+0x18c>)
 800a372:	681a      	ldr	r2, [r3, #0]
 800a374:	4b27      	ldr	r3, [pc, #156]	@ (800a414 <vPortSuppressTicksAndSleep+0x188>)
 800a376:	6819      	ldr	r1, [r3, #0]
 800a378:	69fb      	ldr	r3, [r7, #28]
 800a37a:	1acb      	subs	r3, r1, r3
 800a37c:	4413      	add	r3, r2
 800a37e:	3b01      	subs	r3, #1
 800a380:	617b      	str	r3, [r7, #20]
				if( ( ulCalculatedLoadValue < ulStoppedTimerCompensation ) || ( ulCalculatedLoadValue > ulTimerCountsForOneTick ) )
 800a382:	4b26      	ldr	r3, [pc, #152]	@ (800a41c <vPortSuppressTicksAndSleep+0x190>)
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	697a      	ldr	r2, [r7, #20]
 800a388:	429a      	cmp	r2, r3
 800a38a:	d304      	bcc.n	800a396 <vPortSuppressTicksAndSleep+0x10a>
 800a38c:	4b22      	ldr	r3, [pc, #136]	@ (800a418 <vPortSuppressTicksAndSleep+0x18c>)
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	697a      	ldr	r2, [r7, #20]
 800a392:	429a      	cmp	r2, r3
 800a394:	d903      	bls.n	800a39e <vPortSuppressTicksAndSleep+0x112>
					ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL );
 800a396:	4b20      	ldr	r3, [pc, #128]	@ (800a418 <vPortSuppressTicksAndSleep+0x18c>)
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	3b01      	subs	r3, #1
 800a39c:	617b      	str	r3, [r7, #20]
				portNVIC_SYSTICK_LOAD_REG = ulCalculatedLoadValue;
 800a39e:	4a20      	ldr	r2, [pc, #128]	@ (800a420 <vPortSuppressTicksAndSleep+0x194>)
 800a3a0:	697b      	ldr	r3, [r7, #20]
 800a3a2:	6013      	str	r3, [r2, #0]
				ulCompleteTickPeriods = xExpectedIdleTime - 1UL;
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	3b01      	subs	r3, #1
 800a3a8:	61bb      	str	r3, [r7, #24]
 800a3aa:	e018      	b.n	800a3de <vPortSuppressTicksAndSleep+0x152>
				ulCompletedSysTickDecrements = ( xExpectedIdleTime * ulTimerCountsForOneTick ) - portNVIC_SYSTICK_CURRENT_VALUE_REG;
 800a3ac:	4b1a      	ldr	r3, [pc, #104]	@ (800a418 <vPortSuppressTicksAndSleep+0x18c>)
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	687a      	ldr	r2, [r7, #4]
 800a3b2:	fb03 f202 	mul.w	r2, r3, r2
 800a3b6:	4b17      	ldr	r3, [pc, #92]	@ (800a414 <vPortSuppressTicksAndSleep+0x188>)
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	1ad3      	subs	r3, r2, r3
 800a3bc:	60fb      	str	r3, [r7, #12]
				ulCompleteTickPeriods = ulCompletedSysTickDecrements / ulTimerCountsForOneTick;
 800a3be:	4b16      	ldr	r3, [pc, #88]	@ (800a418 <vPortSuppressTicksAndSleep+0x18c>)
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	68fa      	ldr	r2, [r7, #12]
 800a3c4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a3c8:	61bb      	str	r3, [r7, #24]
				portNVIC_SYSTICK_LOAD_REG = ( ( ulCompleteTickPeriods + 1UL ) * ulTimerCountsForOneTick ) - ulCompletedSysTickDecrements;
 800a3ca:	69bb      	ldr	r3, [r7, #24]
 800a3cc:	3301      	adds	r3, #1
 800a3ce:	4a12      	ldr	r2, [pc, #72]	@ (800a418 <vPortSuppressTicksAndSleep+0x18c>)
 800a3d0:	6812      	ldr	r2, [r2, #0]
 800a3d2:	fb03 f202 	mul.w	r2, r3, r2
 800a3d6:	4912      	ldr	r1, [pc, #72]	@ (800a420 <vPortSuppressTicksAndSleep+0x194>)
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	1ad3      	subs	r3, r2, r3
 800a3dc:	600b      	str	r3, [r1, #0]
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a3de:	4b0d      	ldr	r3, [pc, #52]	@ (800a414 <vPortSuppressTicksAndSleep+0x188>)
 800a3e0:	2200      	movs	r2, #0
 800a3e2:	601a      	str	r2, [r3, #0]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 800a3e4:	4b0a      	ldr	r3, [pc, #40]	@ (800a410 <vPortSuppressTicksAndSleep+0x184>)
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	4a09      	ldr	r2, [pc, #36]	@ (800a410 <vPortSuppressTicksAndSleep+0x184>)
 800a3ea:	f043 0301 	orr.w	r3, r3, #1
 800a3ee:	6013      	str	r3, [r2, #0]
			vTaskStepTick( ulCompleteTickPeriods );
 800a3f0:	69b8      	ldr	r0, [r7, #24]
 800a3f2:	f7fe fc75 	bl	8008ce0 <vTaskStepTick>
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 800a3f6:	4b08      	ldr	r3, [pc, #32]	@ (800a418 <vPortSuppressTicksAndSleep+0x18c>)
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	4a09      	ldr	r2, [pc, #36]	@ (800a420 <vPortSuppressTicksAndSleep+0x194>)
 800a3fc:	3b01      	subs	r3, #1
 800a3fe:	6013      	str	r3, [r2, #0]
			__asm volatile( "cpsie i" ::: "memory" );
 800a400:	b662      	cpsie	i
	}
 800a402:	bf00      	nop
 800a404:	3720      	adds	r7, #32
 800a406:	46bd      	mov	sp, r7
 800a408:	bd80      	pop	{r7, pc}
 800a40a:	bf00      	nop
 800a40c:	2400110c 	.word	0x2400110c
 800a410:	e000e010 	.word	0xe000e010
 800a414:	e000e018 	.word	0xe000e018
 800a418:	24001108 	.word	0x24001108
 800a41c:	24001110 	.word	0x24001110
 800a420:	e000e014 	.word	0xe000e014

0800a424 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a424:	b480      	push	{r7}
 800a426:	af00      	add	r7, sp, #0
	/* Calculate the constants required to configure the tick interrupt. */
	#if( configUSE_TICKLESS_IDLE == 1 )
	{
		ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
 800a428:	4b14      	ldr	r3, [pc, #80]	@ (800a47c <vPortSetupTimerInterrupt+0x58>)
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	4a14      	ldr	r2, [pc, #80]	@ (800a480 <vPortSetupTimerInterrupt+0x5c>)
 800a42e:	fba2 2303 	umull	r2, r3, r2, r3
 800a432:	099b      	lsrs	r3, r3, #6
 800a434:	4a13      	ldr	r2, [pc, #76]	@ (800a484 <vPortSetupTimerInterrupt+0x60>)
 800a436:	6013      	str	r3, [r2, #0]
		xMaximumPossibleSuppressedTicks = portMAX_24_BIT_NUMBER / ulTimerCountsForOneTick;
 800a438:	4b12      	ldr	r3, [pc, #72]	@ (800a484 <vPortSetupTimerInterrupt+0x60>)
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 800a440:	fbb2 f3f3 	udiv	r3, r2, r3
 800a444:	4a10      	ldr	r2, [pc, #64]	@ (800a488 <vPortSetupTimerInterrupt+0x64>)
 800a446:	6013      	str	r3, [r2, #0]
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 800a448:	4b10      	ldr	r3, [pc, #64]	@ (800a48c <vPortSetupTimerInterrupt+0x68>)
 800a44a:	222d      	movs	r2, #45	@ 0x2d
 800a44c:	601a      	str	r2, [r3, #0]
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a44e:	4b10      	ldr	r3, [pc, #64]	@ (800a490 <vPortSetupTimerInterrupt+0x6c>)
 800a450:	2200      	movs	r2, #0
 800a452:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a454:	4b0f      	ldr	r3, [pc, #60]	@ (800a494 <vPortSetupTimerInterrupt+0x70>)
 800a456:	2200      	movs	r2, #0
 800a458:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a45a:	4b08      	ldr	r3, [pc, #32]	@ (800a47c <vPortSetupTimerInterrupt+0x58>)
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	4a08      	ldr	r2, [pc, #32]	@ (800a480 <vPortSetupTimerInterrupt+0x5c>)
 800a460:	fba2 2303 	umull	r2, r3, r2, r3
 800a464:	099b      	lsrs	r3, r3, #6
 800a466:	4a0c      	ldr	r2, [pc, #48]	@ (800a498 <vPortSetupTimerInterrupt+0x74>)
 800a468:	3b01      	subs	r3, #1
 800a46a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a46c:	4b08      	ldr	r3, [pc, #32]	@ (800a490 <vPortSetupTimerInterrupt+0x6c>)
 800a46e:	2207      	movs	r2, #7
 800a470:	601a      	str	r2, [r3, #0]
}
 800a472:	bf00      	nop
 800a474:	46bd      	mov	sp, r7
 800a476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a47a:	4770      	bx	lr
 800a47c:	24000000 	.word	0x24000000
 800a480:	10624dd3 	.word	0x10624dd3
 800a484:	24001108 	.word	0x24001108
 800a488:	2400110c 	.word	0x2400110c
 800a48c:	24001110 	.word	0x24001110
 800a490:	e000e010 	.word	0xe000e010
 800a494:	e000e018 	.word	0xe000e018
 800a498:	e000e014 	.word	0xe000e014

0800a49c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a49c:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800a4ac <vPortEnableVFP+0x10>
 800a4a0:	6801      	ldr	r1, [r0, #0]
 800a4a2:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800a4a6:	6001      	str	r1, [r0, #0]
 800a4a8:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a4aa:	bf00      	nop
 800a4ac:	e000ed88 	.word	0xe000ed88

0800a4b0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a4b0:	b480      	push	{r7}
 800a4b2:	b085      	sub	sp, #20
 800a4b4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a4b6:	f3ef 8305 	mrs	r3, IPSR
 800a4ba:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	2b0f      	cmp	r3, #15
 800a4c0:	d915      	bls.n	800a4ee <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a4c2:	4a18      	ldr	r2, [pc, #96]	@ (800a524 <vPortValidateInterruptPriority+0x74>)
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	4413      	add	r3, r2
 800a4c8:	781b      	ldrb	r3, [r3, #0]
 800a4ca:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a4cc:	4b16      	ldr	r3, [pc, #88]	@ (800a528 <vPortValidateInterruptPriority+0x78>)
 800a4ce:	781b      	ldrb	r3, [r3, #0]
 800a4d0:	7afa      	ldrb	r2, [r7, #11]
 800a4d2:	429a      	cmp	r2, r3
 800a4d4:	d20b      	bcs.n	800a4ee <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800a4d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4da:	f383 8811 	msr	BASEPRI, r3
 800a4de:	f3bf 8f6f 	isb	sy
 800a4e2:	f3bf 8f4f 	dsb	sy
 800a4e6:	607b      	str	r3, [r7, #4]
}
 800a4e8:	bf00      	nop
 800a4ea:	bf00      	nop
 800a4ec:	e7fd      	b.n	800a4ea <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a4ee:	4b0f      	ldr	r3, [pc, #60]	@ (800a52c <vPortValidateInterruptPriority+0x7c>)
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800a4f6:	4b0e      	ldr	r3, [pc, #56]	@ (800a530 <vPortValidateInterruptPriority+0x80>)
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	429a      	cmp	r2, r3
 800a4fc:	d90b      	bls.n	800a516 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800a4fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a502:	f383 8811 	msr	BASEPRI, r3
 800a506:	f3bf 8f6f 	isb	sy
 800a50a:	f3bf 8f4f 	dsb	sy
 800a50e:	603b      	str	r3, [r7, #0]
}
 800a510:	bf00      	nop
 800a512:	bf00      	nop
 800a514:	e7fd      	b.n	800a512 <vPortValidateInterruptPriority+0x62>
	}
 800a516:	bf00      	nop
 800a518:	3714      	adds	r7, #20
 800a51a:	46bd      	mov	sp, r7
 800a51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a520:	4770      	bx	lr
 800a522:	bf00      	nop
 800a524:	e000e3f0 	.word	0xe000e3f0
 800a528:	24001114 	.word	0x24001114
 800a52c:	e000ed0c 	.word	0xe000ed0c
 800a530:	24001118 	.word	0x24001118

0800a534 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a534:	b580      	push	{r7, lr}
 800a536:	b08a      	sub	sp, #40	@ 0x28
 800a538:	af00      	add	r7, sp, #0
 800a53a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a53c:	2300      	movs	r3, #0
 800a53e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a540:	f7fe fada 	bl	8008af8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a544:	4b5c      	ldr	r3, [pc, #368]	@ (800a6b8 <pvPortMalloc+0x184>)
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d101      	bne.n	800a550 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a54c:	f000 f924 	bl	800a798 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a550:	4b5a      	ldr	r3, [pc, #360]	@ (800a6bc <pvPortMalloc+0x188>)
 800a552:	681a      	ldr	r2, [r3, #0]
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	4013      	ands	r3, r2
 800a558:	2b00      	cmp	r3, #0
 800a55a:	f040 8095 	bne.w	800a688 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	2b00      	cmp	r3, #0
 800a562:	d01e      	beq.n	800a5a2 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800a564:	2208      	movs	r2, #8
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	4413      	add	r3, r2
 800a56a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	f003 0307 	and.w	r3, r3, #7
 800a572:	2b00      	cmp	r3, #0
 800a574:	d015      	beq.n	800a5a2 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	f023 0307 	bic.w	r3, r3, #7
 800a57c:	3308      	adds	r3, #8
 800a57e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	f003 0307 	and.w	r3, r3, #7
 800a586:	2b00      	cmp	r3, #0
 800a588:	d00b      	beq.n	800a5a2 <pvPortMalloc+0x6e>
	__asm volatile
 800a58a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a58e:	f383 8811 	msr	BASEPRI, r3
 800a592:	f3bf 8f6f 	isb	sy
 800a596:	f3bf 8f4f 	dsb	sy
 800a59a:	617b      	str	r3, [r7, #20]
}
 800a59c:	bf00      	nop
 800a59e:	bf00      	nop
 800a5a0:	e7fd      	b.n	800a59e <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d06f      	beq.n	800a688 <pvPortMalloc+0x154>
 800a5a8:	4b45      	ldr	r3, [pc, #276]	@ (800a6c0 <pvPortMalloc+0x18c>)
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	687a      	ldr	r2, [r7, #4]
 800a5ae:	429a      	cmp	r2, r3
 800a5b0:	d86a      	bhi.n	800a688 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a5b2:	4b44      	ldr	r3, [pc, #272]	@ (800a6c4 <pvPortMalloc+0x190>)
 800a5b4:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a5b6:	4b43      	ldr	r3, [pc, #268]	@ (800a6c4 <pvPortMalloc+0x190>)
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a5bc:	e004      	b.n	800a5c8 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800a5be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5c0:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a5c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a5c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5ca:	685b      	ldr	r3, [r3, #4]
 800a5cc:	687a      	ldr	r2, [r7, #4]
 800a5ce:	429a      	cmp	r2, r3
 800a5d0:	d903      	bls.n	800a5da <pvPortMalloc+0xa6>
 800a5d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d1f1      	bne.n	800a5be <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a5da:	4b37      	ldr	r3, [pc, #220]	@ (800a6b8 <pvPortMalloc+0x184>)
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a5e0:	429a      	cmp	r2, r3
 800a5e2:	d051      	beq.n	800a688 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a5e4:	6a3b      	ldr	r3, [r7, #32]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	2208      	movs	r2, #8
 800a5ea:	4413      	add	r3, r2
 800a5ec:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a5ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5f0:	681a      	ldr	r2, [r3, #0]
 800a5f2:	6a3b      	ldr	r3, [r7, #32]
 800a5f4:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a5f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5f8:	685a      	ldr	r2, [r3, #4]
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	1ad2      	subs	r2, r2, r3
 800a5fe:	2308      	movs	r3, #8
 800a600:	005b      	lsls	r3, r3, #1
 800a602:	429a      	cmp	r2, r3
 800a604:	d920      	bls.n	800a648 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a606:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	4413      	add	r3, r2
 800a60c:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a60e:	69bb      	ldr	r3, [r7, #24]
 800a610:	f003 0307 	and.w	r3, r3, #7
 800a614:	2b00      	cmp	r3, #0
 800a616:	d00b      	beq.n	800a630 <pvPortMalloc+0xfc>
	__asm volatile
 800a618:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a61c:	f383 8811 	msr	BASEPRI, r3
 800a620:	f3bf 8f6f 	isb	sy
 800a624:	f3bf 8f4f 	dsb	sy
 800a628:	613b      	str	r3, [r7, #16]
}
 800a62a:	bf00      	nop
 800a62c:	bf00      	nop
 800a62e:	e7fd      	b.n	800a62c <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a632:	685a      	ldr	r2, [r3, #4]
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	1ad2      	subs	r2, r2, r3
 800a638:	69bb      	ldr	r3, [r7, #24]
 800a63a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a63c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a63e:	687a      	ldr	r2, [r7, #4]
 800a640:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a642:	69b8      	ldr	r0, [r7, #24]
 800a644:	f000 f90a 	bl	800a85c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a648:	4b1d      	ldr	r3, [pc, #116]	@ (800a6c0 <pvPortMalloc+0x18c>)
 800a64a:	681a      	ldr	r2, [r3, #0]
 800a64c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a64e:	685b      	ldr	r3, [r3, #4]
 800a650:	1ad3      	subs	r3, r2, r3
 800a652:	4a1b      	ldr	r2, [pc, #108]	@ (800a6c0 <pvPortMalloc+0x18c>)
 800a654:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a656:	4b1a      	ldr	r3, [pc, #104]	@ (800a6c0 <pvPortMalloc+0x18c>)
 800a658:	681a      	ldr	r2, [r3, #0]
 800a65a:	4b1b      	ldr	r3, [pc, #108]	@ (800a6c8 <pvPortMalloc+0x194>)
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	429a      	cmp	r2, r3
 800a660:	d203      	bcs.n	800a66a <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a662:	4b17      	ldr	r3, [pc, #92]	@ (800a6c0 <pvPortMalloc+0x18c>)
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	4a18      	ldr	r2, [pc, #96]	@ (800a6c8 <pvPortMalloc+0x194>)
 800a668:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a66a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a66c:	685a      	ldr	r2, [r3, #4]
 800a66e:	4b13      	ldr	r3, [pc, #76]	@ (800a6bc <pvPortMalloc+0x188>)
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	431a      	orrs	r2, r3
 800a674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a676:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a67a:	2200      	movs	r2, #0
 800a67c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a67e:	4b13      	ldr	r3, [pc, #76]	@ (800a6cc <pvPortMalloc+0x198>)
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	3301      	adds	r3, #1
 800a684:	4a11      	ldr	r2, [pc, #68]	@ (800a6cc <pvPortMalloc+0x198>)
 800a686:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a688:	f7fe fa7c 	bl	8008b84 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a68c:	69fb      	ldr	r3, [r7, #28]
 800a68e:	f003 0307 	and.w	r3, r3, #7
 800a692:	2b00      	cmp	r3, #0
 800a694:	d00b      	beq.n	800a6ae <pvPortMalloc+0x17a>
	__asm volatile
 800a696:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a69a:	f383 8811 	msr	BASEPRI, r3
 800a69e:	f3bf 8f6f 	isb	sy
 800a6a2:	f3bf 8f4f 	dsb	sy
 800a6a6:	60fb      	str	r3, [r7, #12]
}
 800a6a8:	bf00      	nop
 800a6aa:	bf00      	nop
 800a6ac:	e7fd      	b.n	800a6aa <pvPortMalloc+0x176>
	return pvReturn;
 800a6ae:	69fb      	ldr	r3, [r7, #28]
}
 800a6b0:	4618      	mov	r0, r3
 800a6b2:	3728      	adds	r7, #40	@ 0x28
 800a6b4:	46bd      	mov	sp, r7
 800a6b6:	bd80      	pop	{r7, pc}
 800a6b8:	24004d24 	.word	0x24004d24
 800a6bc:	24004d38 	.word	0x24004d38
 800a6c0:	24004d28 	.word	0x24004d28
 800a6c4:	24004d1c 	.word	0x24004d1c
 800a6c8:	24004d2c 	.word	0x24004d2c
 800a6cc:	24004d30 	.word	0x24004d30

0800a6d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a6d0:	b580      	push	{r7, lr}
 800a6d2:	b086      	sub	sp, #24
 800a6d4:	af00      	add	r7, sp, #0
 800a6d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d04f      	beq.n	800a782 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a6e2:	2308      	movs	r3, #8
 800a6e4:	425b      	negs	r3, r3
 800a6e6:	697a      	ldr	r2, [r7, #20]
 800a6e8:	4413      	add	r3, r2
 800a6ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a6ec:	697b      	ldr	r3, [r7, #20]
 800a6ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a6f0:	693b      	ldr	r3, [r7, #16]
 800a6f2:	685a      	ldr	r2, [r3, #4]
 800a6f4:	4b25      	ldr	r3, [pc, #148]	@ (800a78c <vPortFree+0xbc>)
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	4013      	ands	r3, r2
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d10b      	bne.n	800a716 <vPortFree+0x46>
	__asm volatile
 800a6fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a702:	f383 8811 	msr	BASEPRI, r3
 800a706:	f3bf 8f6f 	isb	sy
 800a70a:	f3bf 8f4f 	dsb	sy
 800a70e:	60fb      	str	r3, [r7, #12]
}
 800a710:	bf00      	nop
 800a712:	bf00      	nop
 800a714:	e7fd      	b.n	800a712 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a716:	693b      	ldr	r3, [r7, #16]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d00b      	beq.n	800a736 <vPortFree+0x66>
	__asm volatile
 800a71e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a722:	f383 8811 	msr	BASEPRI, r3
 800a726:	f3bf 8f6f 	isb	sy
 800a72a:	f3bf 8f4f 	dsb	sy
 800a72e:	60bb      	str	r3, [r7, #8]
}
 800a730:	bf00      	nop
 800a732:	bf00      	nop
 800a734:	e7fd      	b.n	800a732 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a736:	693b      	ldr	r3, [r7, #16]
 800a738:	685a      	ldr	r2, [r3, #4]
 800a73a:	4b14      	ldr	r3, [pc, #80]	@ (800a78c <vPortFree+0xbc>)
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	4013      	ands	r3, r2
 800a740:	2b00      	cmp	r3, #0
 800a742:	d01e      	beq.n	800a782 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a744:	693b      	ldr	r3, [r7, #16]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d11a      	bne.n	800a782 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a74c:	693b      	ldr	r3, [r7, #16]
 800a74e:	685a      	ldr	r2, [r3, #4]
 800a750:	4b0e      	ldr	r3, [pc, #56]	@ (800a78c <vPortFree+0xbc>)
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	43db      	mvns	r3, r3
 800a756:	401a      	ands	r2, r3
 800a758:	693b      	ldr	r3, [r7, #16]
 800a75a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a75c:	f7fe f9cc 	bl	8008af8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a760:	693b      	ldr	r3, [r7, #16]
 800a762:	685a      	ldr	r2, [r3, #4]
 800a764:	4b0a      	ldr	r3, [pc, #40]	@ (800a790 <vPortFree+0xc0>)
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	4413      	add	r3, r2
 800a76a:	4a09      	ldr	r2, [pc, #36]	@ (800a790 <vPortFree+0xc0>)
 800a76c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a76e:	6938      	ldr	r0, [r7, #16]
 800a770:	f000 f874 	bl	800a85c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a774:	4b07      	ldr	r3, [pc, #28]	@ (800a794 <vPortFree+0xc4>)
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	3301      	adds	r3, #1
 800a77a:	4a06      	ldr	r2, [pc, #24]	@ (800a794 <vPortFree+0xc4>)
 800a77c:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a77e:	f7fe fa01 	bl	8008b84 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a782:	bf00      	nop
 800a784:	3718      	adds	r7, #24
 800a786:	46bd      	mov	sp, r7
 800a788:	bd80      	pop	{r7, pc}
 800a78a:	bf00      	nop
 800a78c:	24004d38 	.word	0x24004d38
 800a790:	24004d28 	.word	0x24004d28
 800a794:	24004d34 	.word	0x24004d34

0800a798 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a798:	b480      	push	{r7}
 800a79a:	b085      	sub	sp, #20
 800a79c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a79e:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800a7a2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a7a4:	4b27      	ldr	r3, [pc, #156]	@ (800a844 <prvHeapInit+0xac>)
 800a7a6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	f003 0307 	and.w	r3, r3, #7
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d00c      	beq.n	800a7cc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	3307      	adds	r3, #7
 800a7b6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	f023 0307 	bic.w	r3, r3, #7
 800a7be:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a7c0:	68ba      	ldr	r2, [r7, #8]
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	1ad3      	subs	r3, r2, r3
 800a7c6:	4a1f      	ldr	r2, [pc, #124]	@ (800a844 <prvHeapInit+0xac>)
 800a7c8:	4413      	add	r3, r2
 800a7ca:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a7d0:	4a1d      	ldr	r2, [pc, #116]	@ (800a848 <prvHeapInit+0xb0>)
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a7d6:	4b1c      	ldr	r3, [pc, #112]	@ (800a848 <prvHeapInit+0xb0>)
 800a7d8:	2200      	movs	r2, #0
 800a7da:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	68ba      	ldr	r2, [r7, #8]
 800a7e0:	4413      	add	r3, r2
 800a7e2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a7e4:	2208      	movs	r2, #8
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	1a9b      	subs	r3, r3, r2
 800a7ea:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	f023 0307 	bic.w	r3, r3, #7
 800a7f2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	4a15      	ldr	r2, [pc, #84]	@ (800a84c <prvHeapInit+0xb4>)
 800a7f8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a7fa:	4b14      	ldr	r3, [pc, #80]	@ (800a84c <prvHeapInit+0xb4>)
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	2200      	movs	r2, #0
 800a800:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a802:	4b12      	ldr	r3, [pc, #72]	@ (800a84c <prvHeapInit+0xb4>)
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	2200      	movs	r2, #0
 800a808:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a80e:	683b      	ldr	r3, [r7, #0]
 800a810:	68fa      	ldr	r2, [r7, #12]
 800a812:	1ad2      	subs	r2, r2, r3
 800a814:	683b      	ldr	r3, [r7, #0]
 800a816:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a818:	4b0c      	ldr	r3, [pc, #48]	@ (800a84c <prvHeapInit+0xb4>)
 800a81a:	681a      	ldr	r2, [r3, #0]
 800a81c:	683b      	ldr	r3, [r7, #0]
 800a81e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a820:	683b      	ldr	r3, [r7, #0]
 800a822:	685b      	ldr	r3, [r3, #4]
 800a824:	4a0a      	ldr	r2, [pc, #40]	@ (800a850 <prvHeapInit+0xb8>)
 800a826:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a828:	683b      	ldr	r3, [r7, #0]
 800a82a:	685b      	ldr	r3, [r3, #4]
 800a82c:	4a09      	ldr	r2, [pc, #36]	@ (800a854 <prvHeapInit+0xbc>)
 800a82e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a830:	4b09      	ldr	r3, [pc, #36]	@ (800a858 <prvHeapInit+0xc0>)
 800a832:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a836:	601a      	str	r2, [r3, #0]
}
 800a838:	bf00      	nop
 800a83a:	3714      	adds	r7, #20
 800a83c:	46bd      	mov	sp, r7
 800a83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a842:	4770      	bx	lr
 800a844:	2400111c 	.word	0x2400111c
 800a848:	24004d1c 	.word	0x24004d1c
 800a84c:	24004d24 	.word	0x24004d24
 800a850:	24004d2c 	.word	0x24004d2c
 800a854:	24004d28 	.word	0x24004d28
 800a858:	24004d38 	.word	0x24004d38

0800a85c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a85c:	b480      	push	{r7}
 800a85e:	b085      	sub	sp, #20
 800a860:	af00      	add	r7, sp, #0
 800a862:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a864:	4b28      	ldr	r3, [pc, #160]	@ (800a908 <prvInsertBlockIntoFreeList+0xac>)
 800a866:	60fb      	str	r3, [r7, #12]
 800a868:	e002      	b.n	800a870 <prvInsertBlockIntoFreeList+0x14>
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	60fb      	str	r3, [r7, #12]
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	687a      	ldr	r2, [r7, #4]
 800a876:	429a      	cmp	r2, r3
 800a878:	d8f7      	bhi.n	800a86a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	685b      	ldr	r3, [r3, #4]
 800a882:	68ba      	ldr	r2, [r7, #8]
 800a884:	4413      	add	r3, r2
 800a886:	687a      	ldr	r2, [r7, #4]
 800a888:	429a      	cmp	r2, r3
 800a88a:	d108      	bne.n	800a89e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	685a      	ldr	r2, [r3, #4]
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	685b      	ldr	r3, [r3, #4]
 800a894:	441a      	add	r2, r3
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	685b      	ldr	r3, [r3, #4]
 800a8a6:	68ba      	ldr	r2, [r7, #8]
 800a8a8:	441a      	add	r2, r3
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	429a      	cmp	r2, r3
 800a8b0:	d118      	bne.n	800a8e4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	681a      	ldr	r2, [r3, #0]
 800a8b6:	4b15      	ldr	r3, [pc, #84]	@ (800a90c <prvInsertBlockIntoFreeList+0xb0>)
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	429a      	cmp	r2, r3
 800a8bc:	d00d      	beq.n	800a8da <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	685a      	ldr	r2, [r3, #4]
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	685b      	ldr	r3, [r3, #4]
 800a8c8:	441a      	add	r2, r3
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	681a      	ldr	r2, [r3, #0]
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	601a      	str	r2, [r3, #0]
 800a8d8:	e008      	b.n	800a8ec <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a8da:	4b0c      	ldr	r3, [pc, #48]	@ (800a90c <prvInsertBlockIntoFreeList+0xb0>)
 800a8dc:	681a      	ldr	r2, [r3, #0]
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	601a      	str	r2, [r3, #0]
 800a8e2:	e003      	b.n	800a8ec <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	681a      	ldr	r2, [r3, #0]
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a8ec:	68fa      	ldr	r2, [r7, #12]
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	429a      	cmp	r2, r3
 800a8f2:	d002      	beq.n	800a8fa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	687a      	ldr	r2, [r7, #4]
 800a8f8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a8fa:	bf00      	nop
 800a8fc:	3714      	adds	r7, #20
 800a8fe:	46bd      	mov	sp, r7
 800a900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a904:	4770      	bx	lr
 800a906:	bf00      	nop
 800a908:	24004d1c 	.word	0x24004d1c
 800a90c:	24004d24 	.word	0x24004d24

0800a910 <_ZdlPvj>:
 800a910:	f000 b815 	b.w	800a93e <_ZdlPv>

0800a914 <_ZdaPv>:
 800a914:	f000 b813 	b.w	800a93e <_ZdlPv>

0800a918 <_Znwj>:
 800a918:	2801      	cmp	r0, #1
 800a91a:	bf38      	it	cc
 800a91c:	2001      	movcc	r0, #1
 800a91e:	b510      	push	{r4, lr}
 800a920:	4604      	mov	r4, r0
 800a922:	4620      	mov	r0, r4
 800a924:	f000 f83c 	bl	800a9a0 <malloc>
 800a928:	b100      	cbz	r0, 800a92c <_Znwj+0x14>
 800a92a:	bd10      	pop	{r4, pc}
 800a92c:	f000 f80a 	bl	800a944 <_ZSt15get_new_handlerv>
 800a930:	b908      	cbnz	r0, 800a936 <_Znwj+0x1e>
 800a932:	f000 f80f 	bl	800a954 <abort>
 800a936:	4780      	blx	r0
 800a938:	e7f3      	b.n	800a922 <_Znwj+0xa>

0800a93a <_Znaj>:
 800a93a:	f7ff bfed 	b.w	800a918 <_Znwj>

0800a93e <_ZdlPv>:
 800a93e:	f000 b837 	b.w	800a9b0 <free>
	...

0800a944 <_ZSt15get_new_handlerv>:
 800a944:	4b02      	ldr	r3, [pc, #8]	@ (800a950 <_ZSt15get_new_handlerv+0xc>)
 800a946:	6818      	ldr	r0, [r3, #0]
 800a948:	f3bf 8f5b 	dmb	ish
 800a94c:	4770      	bx	lr
 800a94e:	bf00      	nop
 800a950:	24004d3c 	.word	0x24004d3c

0800a954 <abort>:
 800a954:	b508      	push	{r3, lr}
 800a956:	2006      	movs	r0, #6
 800a958:	f001 f98e 	bl	800bc78 <raise>
 800a95c:	2001      	movs	r0, #1
 800a95e:	f7f6 fca5 	bl	80012ac <_exit>
	...

0800a964 <__assert_func>:
 800a964:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a966:	4614      	mov	r4, r2
 800a968:	461a      	mov	r2, r3
 800a96a:	4b09      	ldr	r3, [pc, #36]	@ (800a990 <__assert_func+0x2c>)
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	4605      	mov	r5, r0
 800a970:	68d8      	ldr	r0, [r3, #12]
 800a972:	b954      	cbnz	r4, 800a98a <__assert_func+0x26>
 800a974:	4b07      	ldr	r3, [pc, #28]	@ (800a994 <__assert_func+0x30>)
 800a976:	461c      	mov	r4, r3
 800a978:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a97c:	9100      	str	r1, [sp, #0]
 800a97e:	462b      	mov	r3, r5
 800a980:	4905      	ldr	r1, [pc, #20]	@ (800a998 <__assert_func+0x34>)
 800a982:	f000 ffb1 	bl	800b8e8 <fiprintf>
 800a986:	f7ff ffe5 	bl	800a954 <abort>
 800a98a:	4b04      	ldr	r3, [pc, #16]	@ (800a99c <__assert_func+0x38>)
 800a98c:	e7f4      	b.n	800a978 <__assert_func+0x14>
 800a98e:	bf00      	nop
 800a990:	24000020 	.word	0x24000020
 800a994:	0800f2a7 	.word	0x0800f2a7
 800a998:	0800f279 	.word	0x0800f279
 800a99c:	0800f26c 	.word	0x0800f26c

0800a9a0 <malloc>:
 800a9a0:	4b02      	ldr	r3, [pc, #8]	@ (800a9ac <malloc+0xc>)
 800a9a2:	4601      	mov	r1, r0
 800a9a4:	6818      	ldr	r0, [r3, #0]
 800a9a6:	f000 b82d 	b.w	800aa04 <_malloc_r>
 800a9aa:	bf00      	nop
 800a9ac:	24000020 	.word	0x24000020

0800a9b0 <free>:
 800a9b0:	4b02      	ldr	r3, [pc, #8]	@ (800a9bc <free+0xc>)
 800a9b2:	4601      	mov	r1, r0
 800a9b4:	6818      	ldr	r0, [r3, #0]
 800a9b6:	f002 b84d 	b.w	800ca54 <_free_r>
 800a9ba:	bf00      	nop
 800a9bc:	24000020 	.word	0x24000020

0800a9c0 <sbrk_aligned>:
 800a9c0:	b570      	push	{r4, r5, r6, lr}
 800a9c2:	4e0f      	ldr	r6, [pc, #60]	@ (800aa00 <sbrk_aligned+0x40>)
 800a9c4:	460c      	mov	r4, r1
 800a9c6:	6831      	ldr	r1, [r6, #0]
 800a9c8:	4605      	mov	r5, r0
 800a9ca:	b911      	cbnz	r1, 800a9d2 <sbrk_aligned+0x12>
 800a9cc:	f001 f9fe 	bl	800bdcc <_sbrk_r>
 800a9d0:	6030      	str	r0, [r6, #0]
 800a9d2:	4621      	mov	r1, r4
 800a9d4:	4628      	mov	r0, r5
 800a9d6:	f001 f9f9 	bl	800bdcc <_sbrk_r>
 800a9da:	1c43      	adds	r3, r0, #1
 800a9dc:	d103      	bne.n	800a9e6 <sbrk_aligned+0x26>
 800a9de:	f04f 34ff 	mov.w	r4, #4294967295
 800a9e2:	4620      	mov	r0, r4
 800a9e4:	bd70      	pop	{r4, r5, r6, pc}
 800a9e6:	1cc4      	adds	r4, r0, #3
 800a9e8:	f024 0403 	bic.w	r4, r4, #3
 800a9ec:	42a0      	cmp	r0, r4
 800a9ee:	d0f8      	beq.n	800a9e2 <sbrk_aligned+0x22>
 800a9f0:	1a21      	subs	r1, r4, r0
 800a9f2:	4628      	mov	r0, r5
 800a9f4:	f001 f9ea 	bl	800bdcc <_sbrk_r>
 800a9f8:	3001      	adds	r0, #1
 800a9fa:	d1f2      	bne.n	800a9e2 <sbrk_aligned+0x22>
 800a9fc:	e7ef      	b.n	800a9de <sbrk_aligned+0x1e>
 800a9fe:	bf00      	nop
 800aa00:	24004d40 	.word	0x24004d40

0800aa04 <_malloc_r>:
 800aa04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa08:	1ccd      	adds	r5, r1, #3
 800aa0a:	f025 0503 	bic.w	r5, r5, #3
 800aa0e:	3508      	adds	r5, #8
 800aa10:	2d0c      	cmp	r5, #12
 800aa12:	bf38      	it	cc
 800aa14:	250c      	movcc	r5, #12
 800aa16:	2d00      	cmp	r5, #0
 800aa18:	4606      	mov	r6, r0
 800aa1a:	db01      	blt.n	800aa20 <_malloc_r+0x1c>
 800aa1c:	42a9      	cmp	r1, r5
 800aa1e:	d904      	bls.n	800aa2a <_malloc_r+0x26>
 800aa20:	230c      	movs	r3, #12
 800aa22:	6033      	str	r3, [r6, #0]
 800aa24:	2000      	movs	r0, #0
 800aa26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa2a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ab00 <_malloc_r+0xfc>
 800aa2e:	f000 f869 	bl	800ab04 <__malloc_lock>
 800aa32:	f8d8 3000 	ldr.w	r3, [r8]
 800aa36:	461c      	mov	r4, r3
 800aa38:	bb44      	cbnz	r4, 800aa8c <_malloc_r+0x88>
 800aa3a:	4629      	mov	r1, r5
 800aa3c:	4630      	mov	r0, r6
 800aa3e:	f7ff ffbf 	bl	800a9c0 <sbrk_aligned>
 800aa42:	1c43      	adds	r3, r0, #1
 800aa44:	4604      	mov	r4, r0
 800aa46:	d158      	bne.n	800aafa <_malloc_r+0xf6>
 800aa48:	f8d8 4000 	ldr.w	r4, [r8]
 800aa4c:	4627      	mov	r7, r4
 800aa4e:	2f00      	cmp	r7, #0
 800aa50:	d143      	bne.n	800aada <_malloc_r+0xd6>
 800aa52:	2c00      	cmp	r4, #0
 800aa54:	d04b      	beq.n	800aaee <_malloc_r+0xea>
 800aa56:	6823      	ldr	r3, [r4, #0]
 800aa58:	4639      	mov	r1, r7
 800aa5a:	4630      	mov	r0, r6
 800aa5c:	eb04 0903 	add.w	r9, r4, r3
 800aa60:	f001 f9b4 	bl	800bdcc <_sbrk_r>
 800aa64:	4581      	cmp	r9, r0
 800aa66:	d142      	bne.n	800aaee <_malloc_r+0xea>
 800aa68:	6821      	ldr	r1, [r4, #0]
 800aa6a:	1a6d      	subs	r5, r5, r1
 800aa6c:	4629      	mov	r1, r5
 800aa6e:	4630      	mov	r0, r6
 800aa70:	f7ff ffa6 	bl	800a9c0 <sbrk_aligned>
 800aa74:	3001      	adds	r0, #1
 800aa76:	d03a      	beq.n	800aaee <_malloc_r+0xea>
 800aa78:	6823      	ldr	r3, [r4, #0]
 800aa7a:	442b      	add	r3, r5
 800aa7c:	6023      	str	r3, [r4, #0]
 800aa7e:	f8d8 3000 	ldr.w	r3, [r8]
 800aa82:	685a      	ldr	r2, [r3, #4]
 800aa84:	bb62      	cbnz	r2, 800aae0 <_malloc_r+0xdc>
 800aa86:	f8c8 7000 	str.w	r7, [r8]
 800aa8a:	e00f      	b.n	800aaac <_malloc_r+0xa8>
 800aa8c:	6822      	ldr	r2, [r4, #0]
 800aa8e:	1b52      	subs	r2, r2, r5
 800aa90:	d420      	bmi.n	800aad4 <_malloc_r+0xd0>
 800aa92:	2a0b      	cmp	r2, #11
 800aa94:	d917      	bls.n	800aac6 <_malloc_r+0xc2>
 800aa96:	1961      	adds	r1, r4, r5
 800aa98:	42a3      	cmp	r3, r4
 800aa9a:	6025      	str	r5, [r4, #0]
 800aa9c:	bf18      	it	ne
 800aa9e:	6059      	strne	r1, [r3, #4]
 800aaa0:	6863      	ldr	r3, [r4, #4]
 800aaa2:	bf08      	it	eq
 800aaa4:	f8c8 1000 	streq.w	r1, [r8]
 800aaa8:	5162      	str	r2, [r4, r5]
 800aaaa:	604b      	str	r3, [r1, #4]
 800aaac:	4630      	mov	r0, r6
 800aaae:	f000 f82f 	bl	800ab10 <__malloc_unlock>
 800aab2:	f104 000b 	add.w	r0, r4, #11
 800aab6:	1d23      	adds	r3, r4, #4
 800aab8:	f020 0007 	bic.w	r0, r0, #7
 800aabc:	1ac2      	subs	r2, r0, r3
 800aabe:	bf1c      	itt	ne
 800aac0:	1a1b      	subne	r3, r3, r0
 800aac2:	50a3      	strne	r3, [r4, r2]
 800aac4:	e7af      	b.n	800aa26 <_malloc_r+0x22>
 800aac6:	6862      	ldr	r2, [r4, #4]
 800aac8:	42a3      	cmp	r3, r4
 800aaca:	bf0c      	ite	eq
 800aacc:	f8c8 2000 	streq.w	r2, [r8]
 800aad0:	605a      	strne	r2, [r3, #4]
 800aad2:	e7eb      	b.n	800aaac <_malloc_r+0xa8>
 800aad4:	4623      	mov	r3, r4
 800aad6:	6864      	ldr	r4, [r4, #4]
 800aad8:	e7ae      	b.n	800aa38 <_malloc_r+0x34>
 800aada:	463c      	mov	r4, r7
 800aadc:	687f      	ldr	r7, [r7, #4]
 800aade:	e7b6      	b.n	800aa4e <_malloc_r+0x4a>
 800aae0:	461a      	mov	r2, r3
 800aae2:	685b      	ldr	r3, [r3, #4]
 800aae4:	42a3      	cmp	r3, r4
 800aae6:	d1fb      	bne.n	800aae0 <_malloc_r+0xdc>
 800aae8:	2300      	movs	r3, #0
 800aaea:	6053      	str	r3, [r2, #4]
 800aaec:	e7de      	b.n	800aaac <_malloc_r+0xa8>
 800aaee:	230c      	movs	r3, #12
 800aaf0:	6033      	str	r3, [r6, #0]
 800aaf2:	4630      	mov	r0, r6
 800aaf4:	f000 f80c 	bl	800ab10 <__malloc_unlock>
 800aaf8:	e794      	b.n	800aa24 <_malloc_r+0x20>
 800aafa:	6005      	str	r5, [r0, #0]
 800aafc:	e7d6      	b.n	800aaac <_malloc_r+0xa8>
 800aafe:	bf00      	nop
 800ab00:	24004d44 	.word	0x24004d44

0800ab04 <__malloc_lock>:
 800ab04:	4801      	ldr	r0, [pc, #4]	@ (800ab0c <__malloc_lock+0x8>)
 800ab06:	f001 b9ae 	b.w	800be66 <__retarget_lock_acquire_recursive>
 800ab0a:	bf00      	nop
 800ab0c:	24004e88 	.word	0x24004e88

0800ab10 <__malloc_unlock>:
 800ab10:	4801      	ldr	r0, [pc, #4]	@ (800ab18 <__malloc_unlock+0x8>)
 800ab12:	f001 b9a9 	b.w	800be68 <__retarget_lock_release_recursive>
 800ab16:	bf00      	nop
 800ab18:	24004e88 	.word	0x24004e88

0800ab1c <__cvt>:
 800ab1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ab1e:	ed2d 8b02 	vpush	{d8}
 800ab22:	eeb0 8b40 	vmov.f64	d8, d0
 800ab26:	b085      	sub	sp, #20
 800ab28:	4617      	mov	r7, r2
 800ab2a:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800ab2c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ab2e:	ee18 2a90 	vmov	r2, s17
 800ab32:	f025 0520 	bic.w	r5, r5, #32
 800ab36:	2a00      	cmp	r2, #0
 800ab38:	bfb6      	itet	lt
 800ab3a:	222d      	movlt	r2, #45	@ 0x2d
 800ab3c:	2200      	movge	r2, #0
 800ab3e:	eeb1 8b40 	vneglt.f64	d8, d0
 800ab42:	2d46      	cmp	r5, #70	@ 0x46
 800ab44:	460c      	mov	r4, r1
 800ab46:	701a      	strb	r2, [r3, #0]
 800ab48:	d004      	beq.n	800ab54 <__cvt+0x38>
 800ab4a:	2d45      	cmp	r5, #69	@ 0x45
 800ab4c:	d100      	bne.n	800ab50 <__cvt+0x34>
 800ab4e:	3401      	adds	r4, #1
 800ab50:	2102      	movs	r1, #2
 800ab52:	e000      	b.n	800ab56 <__cvt+0x3a>
 800ab54:	2103      	movs	r1, #3
 800ab56:	ab03      	add	r3, sp, #12
 800ab58:	9301      	str	r3, [sp, #4]
 800ab5a:	ab02      	add	r3, sp, #8
 800ab5c:	9300      	str	r3, [sp, #0]
 800ab5e:	4622      	mov	r2, r4
 800ab60:	4633      	mov	r3, r6
 800ab62:	eeb0 0b48 	vmov.f64	d0, d8
 800ab66:	f001 fa1f 	bl	800bfa8 <_dtoa_r>
 800ab6a:	2d47      	cmp	r5, #71	@ 0x47
 800ab6c:	d114      	bne.n	800ab98 <__cvt+0x7c>
 800ab6e:	07fb      	lsls	r3, r7, #31
 800ab70:	d50a      	bpl.n	800ab88 <__cvt+0x6c>
 800ab72:	1902      	adds	r2, r0, r4
 800ab74:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800ab78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab7c:	bf08      	it	eq
 800ab7e:	9203      	streq	r2, [sp, #12]
 800ab80:	2130      	movs	r1, #48	@ 0x30
 800ab82:	9b03      	ldr	r3, [sp, #12]
 800ab84:	4293      	cmp	r3, r2
 800ab86:	d319      	bcc.n	800abbc <__cvt+0xa0>
 800ab88:	9b03      	ldr	r3, [sp, #12]
 800ab8a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ab8c:	1a1b      	subs	r3, r3, r0
 800ab8e:	6013      	str	r3, [r2, #0]
 800ab90:	b005      	add	sp, #20
 800ab92:	ecbd 8b02 	vpop	{d8}
 800ab96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ab98:	2d46      	cmp	r5, #70	@ 0x46
 800ab9a:	eb00 0204 	add.w	r2, r0, r4
 800ab9e:	d1e9      	bne.n	800ab74 <__cvt+0x58>
 800aba0:	7803      	ldrb	r3, [r0, #0]
 800aba2:	2b30      	cmp	r3, #48	@ 0x30
 800aba4:	d107      	bne.n	800abb6 <__cvt+0x9a>
 800aba6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800abaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800abae:	bf1c      	itt	ne
 800abb0:	f1c4 0401 	rsbne	r4, r4, #1
 800abb4:	6034      	strne	r4, [r6, #0]
 800abb6:	6833      	ldr	r3, [r6, #0]
 800abb8:	441a      	add	r2, r3
 800abba:	e7db      	b.n	800ab74 <__cvt+0x58>
 800abbc:	1c5c      	adds	r4, r3, #1
 800abbe:	9403      	str	r4, [sp, #12]
 800abc0:	7019      	strb	r1, [r3, #0]
 800abc2:	e7de      	b.n	800ab82 <__cvt+0x66>

0800abc4 <__exponent>:
 800abc4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800abc6:	2900      	cmp	r1, #0
 800abc8:	bfba      	itte	lt
 800abca:	4249      	neglt	r1, r1
 800abcc:	232d      	movlt	r3, #45	@ 0x2d
 800abce:	232b      	movge	r3, #43	@ 0x2b
 800abd0:	2909      	cmp	r1, #9
 800abd2:	7002      	strb	r2, [r0, #0]
 800abd4:	7043      	strb	r3, [r0, #1]
 800abd6:	dd29      	ble.n	800ac2c <__exponent+0x68>
 800abd8:	f10d 0307 	add.w	r3, sp, #7
 800abdc:	461d      	mov	r5, r3
 800abde:	270a      	movs	r7, #10
 800abe0:	461a      	mov	r2, r3
 800abe2:	fbb1 f6f7 	udiv	r6, r1, r7
 800abe6:	fb07 1416 	mls	r4, r7, r6, r1
 800abea:	3430      	adds	r4, #48	@ 0x30
 800abec:	f802 4c01 	strb.w	r4, [r2, #-1]
 800abf0:	460c      	mov	r4, r1
 800abf2:	2c63      	cmp	r4, #99	@ 0x63
 800abf4:	f103 33ff 	add.w	r3, r3, #4294967295
 800abf8:	4631      	mov	r1, r6
 800abfa:	dcf1      	bgt.n	800abe0 <__exponent+0x1c>
 800abfc:	3130      	adds	r1, #48	@ 0x30
 800abfe:	1e94      	subs	r4, r2, #2
 800ac00:	f803 1c01 	strb.w	r1, [r3, #-1]
 800ac04:	1c41      	adds	r1, r0, #1
 800ac06:	4623      	mov	r3, r4
 800ac08:	42ab      	cmp	r3, r5
 800ac0a:	d30a      	bcc.n	800ac22 <__exponent+0x5e>
 800ac0c:	f10d 0309 	add.w	r3, sp, #9
 800ac10:	1a9b      	subs	r3, r3, r2
 800ac12:	42ac      	cmp	r4, r5
 800ac14:	bf88      	it	hi
 800ac16:	2300      	movhi	r3, #0
 800ac18:	3302      	adds	r3, #2
 800ac1a:	4403      	add	r3, r0
 800ac1c:	1a18      	subs	r0, r3, r0
 800ac1e:	b003      	add	sp, #12
 800ac20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac22:	f813 6b01 	ldrb.w	r6, [r3], #1
 800ac26:	f801 6f01 	strb.w	r6, [r1, #1]!
 800ac2a:	e7ed      	b.n	800ac08 <__exponent+0x44>
 800ac2c:	2330      	movs	r3, #48	@ 0x30
 800ac2e:	3130      	adds	r1, #48	@ 0x30
 800ac30:	7083      	strb	r3, [r0, #2]
 800ac32:	70c1      	strb	r1, [r0, #3]
 800ac34:	1d03      	adds	r3, r0, #4
 800ac36:	e7f1      	b.n	800ac1c <__exponent+0x58>

0800ac38 <_printf_float>:
 800ac38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac3c:	b08d      	sub	sp, #52	@ 0x34
 800ac3e:	460c      	mov	r4, r1
 800ac40:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800ac44:	4616      	mov	r6, r2
 800ac46:	461f      	mov	r7, r3
 800ac48:	4605      	mov	r5, r0
 800ac4a:	f001 f81d 	bl	800bc88 <_localeconv_r>
 800ac4e:	f8d0 b000 	ldr.w	fp, [r0]
 800ac52:	4658      	mov	r0, fp
 800ac54:	f7f5 fb9c 	bl	8000390 <strlen>
 800ac58:	2300      	movs	r3, #0
 800ac5a:	930a      	str	r3, [sp, #40]	@ 0x28
 800ac5c:	f8d8 3000 	ldr.w	r3, [r8]
 800ac60:	f894 9018 	ldrb.w	r9, [r4, #24]
 800ac64:	6822      	ldr	r2, [r4, #0]
 800ac66:	9005      	str	r0, [sp, #20]
 800ac68:	3307      	adds	r3, #7
 800ac6a:	f023 0307 	bic.w	r3, r3, #7
 800ac6e:	f103 0108 	add.w	r1, r3, #8
 800ac72:	f8c8 1000 	str.w	r1, [r8]
 800ac76:	ed93 0b00 	vldr	d0, [r3]
 800ac7a:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 800aed8 <_printf_float+0x2a0>
 800ac7e:	eeb0 7bc0 	vabs.f64	d7, d0
 800ac82:	eeb4 7b46 	vcmp.f64	d7, d6
 800ac86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac8a:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800ac8e:	dd24      	ble.n	800acda <_printf_float+0xa2>
 800ac90:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800ac94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac98:	d502      	bpl.n	800aca0 <_printf_float+0x68>
 800ac9a:	232d      	movs	r3, #45	@ 0x2d
 800ac9c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800aca0:	498f      	ldr	r1, [pc, #572]	@ (800aee0 <_printf_float+0x2a8>)
 800aca2:	4b90      	ldr	r3, [pc, #576]	@ (800aee4 <_printf_float+0x2ac>)
 800aca4:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 800aca8:	bf94      	ite	ls
 800acaa:	4688      	movls	r8, r1
 800acac:	4698      	movhi	r8, r3
 800acae:	f022 0204 	bic.w	r2, r2, #4
 800acb2:	2303      	movs	r3, #3
 800acb4:	6123      	str	r3, [r4, #16]
 800acb6:	6022      	str	r2, [r4, #0]
 800acb8:	f04f 0a00 	mov.w	sl, #0
 800acbc:	9700      	str	r7, [sp, #0]
 800acbe:	4633      	mov	r3, r6
 800acc0:	aa0b      	add	r2, sp, #44	@ 0x2c
 800acc2:	4621      	mov	r1, r4
 800acc4:	4628      	mov	r0, r5
 800acc6:	f000 f9d1 	bl	800b06c <_printf_common>
 800acca:	3001      	adds	r0, #1
 800accc:	f040 8089 	bne.w	800ade2 <_printf_float+0x1aa>
 800acd0:	f04f 30ff 	mov.w	r0, #4294967295
 800acd4:	b00d      	add	sp, #52	@ 0x34
 800acd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acda:	eeb4 0b40 	vcmp.f64	d0, d0
 800acde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ace2:	d709      	bvc.n	800acf8 <_printf_float+0xc0>
 800ace4:	ee10 3a90 	vmov	r3, s1
 800ace8:	2b00      	cmp	r3, #0
 800acea:	bfbc      	itt	lt
 800acec:	232d      	movlt	r3, #45	@ 0x2d
 800acee:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800acf2:	497d      	ldr	r1, [pc, #500]	@ (800aee8 <_printf_float+0x2b0>)
 800acf4:	4b7d      	ldr	r3, [pc, #500]	@ (800aeec <_printf_float+0x2b4>)
 800acf6:	e7d5      	b.n	800aca4 <_printf_float+0x6c>
 800acf8:	6863      	ldr	r3, [r4, #4]
 800acfa:	1c59      	adds	r1, r3, #1
 800acfc:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 800ad00:	d139      	bne.n	800ad76 <_printf_float+0x13e>
 800ad02:	2306      	movs	r3, #6
 800ad04:	6063      	str	r3, [r4, #4]
 800ad06:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800ad0a:	2300      	movs	r3, #0
 800ad0c:	6022      	str	r2, [r4, #0]
 800ad0e:	9303      	str	r3, [sp, #12]
 800ad10:	ab0a      	add	r3, sp, #40	@ 0x28
 800ad12:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800ad16:	ab09      	add	r3, sp, #36	@ 0x24
 800ad18:	9300      	str	r3, [sp, #0]
 800ad1a:	6861      	ldr	r1, [r4, #4]
 800ad1c:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800ad20:	4628      	mov	r0, r5
 800ad22:	f7ff fefb 	bl	800ab1c <__cvt>
 800ad26:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800ad2a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ad2c:	4680      	mov	r8, r0
 800ad2e:	d129      	bne.n	800ad84 <_printf_float+0x14c>
 800ad30:	1cc8      	adds	r0, r1, #3
 800ad32:	db02      	blt.n	800ad3a <_printf_float+0x102>
 800ad34:	6863      	ldr	r3, [r4, #4]
 800ad36:	4299      	cmp	r1, r3
 800ad38:	dd41      	ble.n	800adbe <_printf_float+0x186>
 800ad3a:	f1a9 0902 	sub.w	r9, r9, #2
 800ad3e:	fa5f f989 	uxtb.w	r9, r9
 800ad42:	3901      	subs	r1, #1
 800ad44:	464a      	mov	r2, r9
 800ad46:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800ad4a:	9109      	str	r1, [sp, #36]	@ 0x24
 800ad4c:	f7ff ff3a 	bl	800abc4 <__exponent>
 800ad50:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ad52:	1813      	adds	r3, r2, r0
 800ad54:	2a01      	cmp	r2, #1
 800ad56:	4682      	mov	sl, r0
 800ad58:	6123      	str	r3, [r4, #16]
 800ad5a:	dc02      	bgt.n	800ad62 <_printf_float+0x12a>
 800ad5c:	6822      	ldr	r2, [r4, #0]
 800ad5e:	07d2      	lsls	r2, r2, #31
 800ad60:	d501      	bpl.n	800ad66 <_printf_float+0x12e>
 800ad62:	3301      	adds	r3, #1
 800ad64:	6123      	str	r3, [r4, #16]
 800ad66:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d0a6      	beq.n	800acbc <_printf_float+0x84>
 800ad6e:	232d      	movs	r3, #45	@ 0x2d
 800ad70:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ad74:	e7a2      	b.n	800acbc <_printf_float+0x84>
 800ad76:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800ad7a:	d1c4      	bne.n	800ad06 <_printf_float+0xce>
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d1c2      	bne.n	800ad06 <_printf_float+0xce>
 800ad80:	2301      	movs	r3, #1
 800ad82:	e7bf      	b.n	800ad04 <_printf_float+0xcc>
 800ad84:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800ad88:	d9db      	bls.n	800ad42 <_printf_float+0x10a>
 800ad8a:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800ad8e:	d118      	bne.n	800adc2 <_printf_float+0x18a>
 800ad90:	2900      	cmp	r1, #0
 800ad92:	6863      	ldr	r3, [r4, #4]
 800ad94:	dd0b      	ble.n	800adae <_printf_float+0x176>
 800ad96:	6121      	str	r1, [r4, #16]
 800ad98:	b913      	cbnz	r3, 800ada0 <_printf_float+0x168>
 800ad9a:	6822      	ldr	r2, [r4, #0]
 800ad9c:	07d0      	lsls	r0, r2, #31
 800ad9e:	d502      	bpl.n	800ada6 <_printf_float+0x16e>
 800ada0:	3301      	adds	r3, #1
 800ada2:	440b      	add	r3, r1
 800ada4:	6123      	str	r3, [r4, #16]
 800ada6:	65a1      	str	r1, [r4, #88]	@ 0x58
 800ada8:	f04f 0a00 	mov.w	sl, #0
 800adac:	e7db      	b.n	800ad66 <_printf_float+0x12e>
 800adae:	b913      	cbnz	r3, 800adb6 <_printf_float+0x17e>
 800adb0:	6822      	ldr	r2, [r4, #0]
 800adb2:	07d2      	lsls	r2, r2, #31
 800adb4:	d501      	bpl.n	800adba <_printf_float+0x182>
 800adb6:	3302      	adds	r3, #2
 800adb8:	e7f4      	b.n	800ada4 <_printf_float+0x16c>
 800adba:	2301      	movs	r3, #1
 800adbc:	e7f2      	b.n	800ada4 <_printf_float+0x16c>
 800adbe:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800adc2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800adc4:	4299      	cmp	r1, r3
 800adc6:	db05      	blt.n	800add4 <_printf_float+0x19c>
 800adc8:	6823      	ldr	r3, [r4, #0]
 800adca:	6121      	str	r1, [r4, #16]
 800adcc:	07d8      	lsls	r0, r3, #31
 800adce:	d5ea      	bpl.n	800ada6 <_printf_float+0x16e>
 800add0:	1c4b      	adds	r3, r1, #1
 800add2:	e7e7      	b.n	800ada4 <_printf_float+0x16c>
 800add4:	2900      	cmp	r1, #0
 800add6:	bfd4      	ite	le
 800add8:	f1c1 0202 	rsble	r2, r1, #2
 800addc:	2201      	movgt	r2, #1
 800adde:	4413      	add	r3, r2
 800ade0:	e7e0      	b.n	800ada4 <_printf_float+0x16c>
 800ade2:	6823      	ldr	r3, [r4, #0]
 800ade4:	055a      	lsls	r2, r3, #21
 800ade6:	d407      	bmi.n	800adf8 <_printf_float+0x1c0>
 800ade8:	6923      	ldr	r3, [r4, #16]
 800adea:	4642      	mov	r2, r8
 800adec:	4631      	mov	r1, r6
 800adee:	4628      	mov	r0, r5
 800adf0:	47b8      	blx	r7
 800adf2:	3001      	adds	r0, #1
 800adf4:	d12a      	bne.n	800ae4c <_printf_float+0x214>
 800adf6:	e76b      	b.n	800acd0 <_printf_float+0x98>
 800adf8:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800adfc:	f240 80e0 	bls.w	800afc0 <_printf_float+0x388>
 800ae00:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800ae04:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ae08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae0c:	d133      	bne.n	800ae76 <_printf_float+0x23e>
 800ae0e:	4a38      	ldr	r2, [pc, #224]	@ (800aef0 <_printf_float+0x2b8>)
 800ae10:	2301      	movs	r3, #1
 800ae12:	4631      	mov	r1, r6
 800ae14:	4628      	mov	r0, r5
 800ae16:	47b8      	blx	r7
 800ae18:	3001      	adds	r0, #1
 800ae1a:	f43f af59 	beq.w	800acd0 <_printf_float+0x98>
 800ae1e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800ae22:	4543      	cmp	r3, r8
 800ae24:	db02      	blt.n	800ae2c <_printf_float+0x1f4>
 800ae26:	6823      	ldr	r3, [r4, #0]
 800ae28:	07d8      	lsls	r0, r3, #31
 800ae2a:	d50f      	bpl.n	800ae4c <_printf_float+0x214>
 800ae2c:	9b05      	ldr	r3, [sp, #20]
 800ae2e:	465a      	mov	r2, fp
 800ae30:	4631      	mov	r1, r6
 800ae32:	4628      	mov	r0, r5
 800ae34:	47b8      	blx	r7
 800ae36:	3001      	adds	r0, #1
 800ae38:	f43f af4a 	beq.w	800acd0 <_printf_float+0x98>
 800ae3c:	f04f 0900 	mov.w	r9, #0
 800ae40:	f108 38ff 	add.w	r8, r8, #4294967295
 800ae44:	f104 0a1a 	add.w	sl, r4, #26
 800ae48:	45c8      	cmp	r8, r9
 800ae4a:	dc09      	bgt.n	800ae60 <_printf_float+0x228>
 800ae4c:	6823      	ldr	r3, [r4, #0]
 800ae4e:	079b      	lsls	r3, r3, #30
 800ae50:	f100 8107 	bmi.w	800b062 <_printf_float+0x42a>
 800ae54:	68e0      	ldr	r0, [r4, #12]
 800ae56:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ae58:	4298      	cmp	r0, r3
 800ae5a:	bfb8      	it	lt
 800ae5c:	4618      	movlt	r0, r3
 800ae5e:	e739      	b.n	800acd4 <_printf_float+0x9c>
 800ae60:	2301      	movs	r3, #1
 800ae62:	4652      	mov	r2, sl
 800ae64:	4631      	mov	r1, r6
 800ae66:	4628      	mov	r0, r5
 800ae68:	47b8      	blx	r7
 800ae6a:	3001      	adds	r0, #1
 800ae6c:	f43f af30 	beq.w	800acd0 <_printf_float+0x98>
 800ae70:	f109 0901 	add.w	r9, r9, #1
 800ae74:	e7e8      	b.n	800ae48 <_printf_float+0x210>
 800ae76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	dc3b      	bgt.n	800aef4 <_printf_float+0x2bc>
 800ae7c:	4a1c      	ldr	r2, [pc, #112]	@ (800aef0 <_printf_float+0x2b8>)
 800ae7e:	2301      	movs	r3, #1
 800ae80:	4631      	mov	r1, r6
 800ae82:	4628      	mov	r0, r5
 800ae84:	47b8      	blx	r7
 800ae86:	3001      	adds	r0, #1
 800ae88:	f43f af22 	beq.w	800acd0 <_printf_float+0x98>
 800ae8c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800ae90:	ea59 0303 	orrs.w	r3, r9, r3
 800ae94:	d102      	bne.n	800ae9c <_printf_float+0x264>
 800ae96:	6823      	ldr	r3, [r4, #0]
 800ae98:	07d9      	lsls	r1, r3, #31
 800ae9a:	d5d7      	bpl.n	800ae4c <_printf_float+0x214>
 800ae9c:	9b05      	ldr	r3, [sp, #20]
 800ae9e:	465a      	mov	r2, fp
 800aea0:	4631      	mov	r1, r6
 800aea2:	4628      	mov	r0, r5
 800aea4:	47b8      	blx	r7
 800aea6:	3001      	adds	r0, #1
 800aea8:	f43f af12 	beq.w	800acd0 <_printf_float+0x98>
 800aeac:	f04f 0a00 	mov.w	sl, #0
 800aeb0:	f104 0b1a 	add.w	fp, r4, #26
 800aeb4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aeb6:	425b      	negs	r3, r3
 800aeb8:	4553      	cmp	r3, sl
 800aeba:	dc01      	bgt.n	800aec0 <_printf_float+0x288>
 800aebc:	464b      	mov	r3, r9
 800aebe:	e794      	b.n	800adea <_printf_float+0x1b2>
 800aec0:	2301      	movs	r3, #1
 800aec2:	465a      	mov	r2, fp
 800aec4:	4631      	mov	r1, r6
 800aec6:	4628      	mov	r0, r5
 800aec8:	47b8      	blx	r7
 800aeca:	3001      	adds	r0, #1
 800aecc:	f43f af00 	beq.w	800acd0 <_printf_float+0x98>
 800aed0:	f10a 0a01 	add.w	sl, sl, #1
 800aed4:	e7ee      	b.n	800aeb4 <_printf_float+0x27c>
 800aed6:	bf00      	nop
 800aed8:	ffffffff 	.word	0xffffffff
 800aedc:	7fefffff 	.word	0x7fefffff
 800aee0:	0800f2a8 	.word	0x0800f2a8
 800aee4:	0800f2ac 	.word	0x0800f2ac
 800aee8:	0800f2b0 	.word	0x0800f2b0
 800aeec:	0800f2b4 	.word	0x0800f2b4
 800aef0:	0800f2b8 	.word	0x0800f2b8
 800aef4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800aef6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800aefa:	4553      	cmp	r3, sl
 800aefc:	bfa8      	it	ge
 800aefe:	4653      	movge	r3, sl
 800af00:	2b00      	cmp	r3, #0
 800af02:	4699      	mov	r9, r3
 800af04:	dc37      	bgt.n	800af76 <_printf_float+0x33e>
 800af06:	2300      	movs	r3, #0
 800af08:	9307      	str	r3, [sp, #28]
 800af0a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800af0e:	f104 021a 	add.w	r2, r4, #26
 800af12:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800af14:	9907      	ldr	r1, [sp, #28]
 800af16:	9306      	str	r3, [sp, #24]
 800af18:	eba3 0309 	sub.w	r3, r3, r9
 800af1c:	428b      	cmp	r3, r1
 800af1e:	dc31      	bgt.n	800af84 <_printf_float+0x34c>
 800af20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af22:	459a      	cmp	sl, r3
 800af24:	dc3b      	bgt.n	800af9e <_printf_float+0x366>
 800af26:	6823      	ldr	r3, [r4, #0]
 800af28:	07da      	lsls	r2, r3, #31
 800af2a:	d438      	bmi.n	800af9e <_printf_float+0x366>
 800af2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af2e:	ebaa 0903 	sub.w	r9, sl, r3
 800af32:	9b06      	ldr	r3, [sp, #24]
 800af34:	ebaa 0303 	sub.w	r3, sl, r3
 800af38:	4599      	cmp	r9, r3
 800af3a:	bfa8      	it	ge
 800af3c:	4699      	movge	r9, r3
 800af3e:	f1b9 0f00 	cmp.w	r9, #0
 800af42:	dc34      	bgt.n	800afae <_printf_float+0x376>
 800af44:	f04f 0800 	mov.w	r8, #0
 800af48:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800af4c:	f104 0b1a 	add.w	fp, r4, #26
 800af50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af52:	ebaa 0303 	sub.w	r3, sl, r3
 800af56:	eba3 0309 	sub.w	r3, r3, r9
 800af5a:	4543      	cmp	r3, r8
 800af5c:	f77f af76 	ble.w	800ae4c <_printf_float+0x214>
 800af60:	2301      	movs	r3, #1
 800af62:	465a      	mov	r2, fp
 800af64:	4631      	mov	r1, r6
 800af66:	4628      	mov	r0, r5
 800af68:	47b8      	blx	r7
 800af6a:	3001      	adds	r0, #1
 800af6c:	f43f aeb0 	beq.w	800acd0 <_printf_float+0x98>
 800af70:	f108 0801 	add.w	r8, r8, #1
 800af74:	e7ec      	b.n	800af50 <_printf_float+0x318>
 800af76:	4642      	mov	r2, r8
 800af78:	4631      	mov	r1, r6
 800af7a:	4628      	mov	r0, r5
 800af7c:	47b8      	blx	r7
 800af7e:	3001      	adds	r0, #1
 800af80:	d1c1      	bne.n	800af06 <_printf_float+0x2ce>
 800af82:	e6a5      	b.n	800acd0 <_printf_float+0x98>
 800af84:	2301      	movs	r3, #1
 800af86:	4631      	mov	r1, r6
 800af88:	4628      	mov	r0, r5
 800af8a:	9206      	str	r2, [sp, #24]
 800af8c:	47b8      	blx	r7
 800af8e:	3001      	adds	r0, #1
 800af90:	f43f ae9e 	beq.w	800acd0 <_printf_float+0x98>
 800af94:	9b07      	ldr	r3, [sp, #28]
 800af96:	9a06      	ldr	r2, [sp, #24]
 800af98:	3301      	adds	r3, #1
 800af9a:	9307      	str	r3, [sp, #28]
 800af9c:	e7b9      	b.n	800af12 <_printf_float+0x2da>
 800af9e:	9b05      	ldr	r3, [sp, #20]
 800afa0:	465a      	mov	r2, fp
 800afa2:	4631      	mov	r1, r6
 800afa4:	4628      	mov	r0, r5
 800afa6:	47b8      	blx	r7
 800afa8:	3001      	adds	r0, #1
 800afaa:	d1bf      	bne.n	800af2c <_printf_float+0x2f4>
 800afac:	e690      	b.n	800acd0 <_printf_float+0x98>
 800afae:	9a06      	ldr	r2, [sp, #24]
 800afb0:	464b      	mov	r3, r9
 800afb2:	4442      	add	r2, r8
 800afb4:	4631      	mov	r1, r6
 800afb6:	4628      	mov	r0, r5
 800afb8:	47b8      	blx	r7
 800afba:	3001      	adds	r0, #1
 800afbc:	d1c2      	bne.n	800af44 <_printf_float+0x30c>
 800afbe:	e687      	b.n	800acd0 <_printf_float+0x98>
 800afc0:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800afc4:	f1b9 0f01 	cmp.w	r9, #1
 800afc8:	dc01      	bgt.n	800afce <_printf_float+0x396>
 800afca:	07db      	lsls	r3, r3, #31
 800afcc:	d536      	bpl.n	800b03c <_printf_float+0x404>
 800afce:	2301      	movs	r3, #1
 800afd0:	4642      	mov	r2, r8
 800afd2:	4631      	mov	r1, r6
 800afd4:	4628      	mov	r0, r5
 800afd6:	47b8      	blx	r7
 800afd8:	3001      	adds	r0, #1
 800afda:	f43f ae79 	beq.w	800acd0 <_printf_float+0x98>
 800afde:	9b05      	ldr	r3, [sp, #20]
 800afe0:	465a      	mov	r2, fp
 800afe2:	4631      	mov	r1, r6
 800afe4:	4628      	mov	r0, r5
 800afe6:	47b8      	blx	r7
 800afe8:	3001      	adds	r0, #1
 800afea:	f43f ae71 	beq.w	800acd0 <_printf_float+0x98>
 800afee:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800aff2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800aff6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800affa:	f109 39ff 	add.w	r9, r9, #4294967295
 800affe:	d018      	beq.n	800b032 <_printf_float+0x3fa>
 800b000:	464b      	mov	r3, r9
 800b002:	f108 0201 	add.w	r2, r8, #1
 800b006:	4631      	mov	r1, r6
 800b008:	4628      	mov	r0, r5
 800b00a:	47b8      	blx	r7
 800b00c:	3001      	adds	r0, #1
 800b00e:	d10c      	bne.n	800b02a <_printf_float+0x3f2>
 800b010:	e65e      	b.n	800acd0 <_printf_float+0x98>
 800b012:	2301      	movs	r3, #1
 800b014:	465a      	mov	r2, fp
 800b016:	4631      	mov	r1, r6
 800b018:	4628      	mov	r0, r5
 800b01a:	47b8      	blx	r7
 800b01c:	3001      	adds	r0, #1
 800b01e:	f43f ae57 	beq.w	800acd0 <_printf_float+0x98>
 800b022:	f108 0801 	add.w	r8, r8, #1
 800b026:	45c8      	cmp	r8, r9
 800b028:	dbf3      	blt.n	800b012 <_printf_float+0x3da>
 800b02a:	4653      	mov	r3, sl
 800b02c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800b030:	e6dc      	b.n	800adec <_printf_float+0x1b4>
 800b032:	f04f 0800 	mov.w	r8, #0
 800b036:	f104 0b1a 	add.w	fp, r4, #26
 800b03a:	e7f4      	b.n	800b026 <_printf_float+0x3ee>
 800b03c:	2301      	movs	r3, #1
 800b03e:	4642      	mov	r2, r8
 800b040:	e7e1      	b.n	800b006 <_printf_float+0x3ce>
 800b042:	2301      	movs	r3, #1
 800b044:	464a      	mov	r2, r9
 800b046:	4631      	mov	r1, r6
 800b048:	4628      	mov	r0, r5
 800b04a:	47b8      	blx	r7
 800b04c:	3001      	adds	r0, #1
 800b04e:	f43f ae3f 	beq.w	800acd0 <_printf_float+0x98>
 800b052:	f108 0801 	add.w	r8, r8, #1
 800b056:	68e3      	ldr	r3, [r4, #12]
 800b058:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b05a:	1a5b      	subs	r3, r3, r1
 800b05c:	4543      	cmp	r3, r8
 800b05e:	dcf0      	bgt.n	800b042 <_printf_float+0x40a>
 800b060:	e6f8      	b.n	800ae54 <_printf_float+0x21c>
 800b062:	f04f 0800 	mov.w	r8, #0
 800b066:	f104 0919 	add.w	r9, r4, #25
 800b06a:	e7f4      	b.n	800b056 <_printf_float+0x41e>

0800b06c <_printf_common>:
 800b06c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b070:	4616      	mov	r6, r2
 800b072:	4698      	mov	r8, r3
 800b074:	688a      	ldr	r2, [r1, #8]
 800b076:	690b      	ldr	r3, [r1, #16]
 800b078:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b07c:	4293      	cmp	r3, r2
 800b07e:	bfb8      	it	lt
 800b080:	4613      	movlt	r3, r2
 800b082:	6033      	str	r3, [r6, #0]
 800b084:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b088:	4607      	mov	r7, r0
 800b08a:	460c      	mov	r4, r1
 800b08c:	b10a      	cbz	r2, 800b092 <_printf_common+0x26>
 800b08e:	3301      	adds	r3, #1
 800b090:	6033      	str	r3, [r6, #0]
 800b092:	6823      	ldr	r3, [r4, #0]
 800b094:	0699      	lsls	r1, r3, #26
 800b096:	bf42      	ittt	mi
 800b098:	6833      	ldrmi	r3, [r6, #0]
 800b09a:	3302      	addmi	r3, #2
 800b09c:	6033      	strmi	r3, [r6, #0]
 800b09e:	6825      	ldr	r5, [r4, #0]
 800b0a0:	f015 0506 	ands.w	r5, r5, #6
 800b0a4:	d106      	bne.n	800b0b4 <_printf_common+0x48>
 800b0a6:	f104 0a19 	add.w	sl, r4, #25
 800b0aa:	68e3      	ldr	r3, [r4, #12]
 800b0ac:	6832      	ldr	r2, [r6, #0]
 800b0ae:	1a9b      	subs	r3, r3, r2
 800b0b0:	42ab      	cmp	r3, r5
 800b0b2:	dc26      	bgt.n	800b102 <_printf_common+0x96>
 800b0b4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b0b8:	6822      	ldr	r2, [r4, #0]
 800b0ba:	3b00      	subs	r3, #0
 800b0bc:	bf18      	it	ne
 800b0be:	2301      	movne	r3, #1
 800b0c0:	0692      	lsls	r2, r2, #26
 800b0c2:	d42b      	bmi.n	800b11c <_printf_common+0xb0>
 800b0c4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b0c8:	4641      	mov	r1, r8
 800b0ca:	4638      	mov	r0, r7
 800b0cc:	47c8      	blx	r9
 800b0ce:	3001      	adds	r0, #1
 800b0d0:	d01e      	beq.n	800b110 <_printf_common+0xa4>
 800b0d2:	6823      	ldr	r3, [r4, #0]
 800b0d4:	6922      	ldr	r2, [r4, #16]
 800b0d6:	f003 0306 	and.w	r3, r3, #6
 800b0da:	2b04      	cmp	r3, #4
 800b0dc:	bf02      	ittt	eq
 800b0de:	68e5      	ldreq	r5, [r4, #12]
 800b0e0:	6833      	ldreq	r3, [r6, #0]
 800b0e2:	1aed      	subeq	r5, r5, r3
 800b0e4:	68a3      	ldr	r3, [r4, #8]
 800b0e6:	bf0c      	ite	eq
 800b0e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b0ec:	2500      	movne	r5, #0
 800b0ee:	4293      	cmp	r3, r2
 800b0f0:	bfc4      	itt	gt
 800b0f2:	1a9b      	subgt	r3, r3, r2
 800b0f4:	18ed      	addgt	r5, r5, r3
 800b0f6:	2600      	movs	r6, #0
 800b0f8:	341a      	adds	r4, #26
 800b0fa:	42b5      	cmp	r5, r6
 800b0fc:	d11a      	bne.n	800b134 <_printf_common+0xc8>
 800b0fe:	2000      	movs	r0, #0
 800b100:	e008      	b.n	800b114 <_printf_common+0xa8>
 800b102:	2301      	movs	r3, #1
 800b104:	4652      	mov	r2, sl
 800b106:	4641      	mov	r1, r8
 800b108:	4638      	mov	r0, r7
 800b10a:	47c8      	blx	r9
 800b10c:	3001      	adds	r0, #1
 800b10e:	d103      	bne.n	800b118 <_printf_common+0xac>
 800b110:	f04f 30ff 	mov.w	r0, #4294967295
 800b114:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b118:	3501      	adds	r5, #1
 800b11a:	e7c6      	b.n	800b0aa <_printf_common+0x3e>
 800b11c:	18e1      	adds	r1, r4, r3
 800b11e:	1c5a      	adds	r2, r3, #1
 800b120:	2030      	movs	r0, #48	@ 0x30
 800b122:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b126:	4422      	add	r2, r4
 800b128:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b12c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b130:	3302      	adds	r3, #2
 800b132:	e7c7      	b.n	800b0c4 <_printf_common+0x58>
 800b134:	2301      	movs	r3, #1
 800b136:	4622      	mov	r2, r4
 800b138:	4641      	mov	r1, r8
 800b13a:	4638      	mov	r0, r7
 800b13c:	47c8      	blx	r9
 800b13e:	3001      	adds	r0, #1
 800b140:	d0e6      	beq.n	800b110 <_printf_common+0xa4>
 800b142:	3601      	adds	r6, #1
 800b144:	e7d9      	b.n	800b0fa <_printf_common+0x8e>
	...

0800b148 <_printf_i>:
 800b148:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b14c:	7e0f      	ldrb	r7, [r1, #24]
 800b14e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b150:	2f78      	cmp	r7, #120	@ 0x78
 800b152:	4691      	mov	r9, r2
 800b154:	4680      	mov	r8, r0
 800b156:	460c      	mov	r4, r1
 800b158:	469a      	mov	sl, r3
 800b15a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b15e:	d807      	bhi.n	800b170 <_printf_i+0x28>
 800b160:	2f62      	cmp	r7, #98	@ 0x62
 800b162:	d80a      	bhi.n	800b17a <_printf_i+0x32>
 800b164:	2f00      	cmp	r7, #0
 800b166:	f000 80d2 	beq.w	800b30e <_printf_i+0x1c6>
 800b16a:	2f58      	cmp	r7, #88	@ 0x58
 800b16c:	f000 80b9 	beq.w	800b2e2 <_printf_i+0x19a>
 800b170:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b174:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b178:	e03a      	b.n	800b1f0 <_printf_i+0xa8>
 800b17a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b17e:	2b15      	cmp	r3, #21
 800b180:	d8f6      	bhi.n	800b170 <_printf_i+0x28>
 800b182:	a101      	add	r1, pc, #4	@ (adr r1, 800b188 <_printf_i+0x40>)
 800b184:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b188:	0800b1e1 	.word	0x0800b1e1
 800b18c:	0800b1f5 	.word	0x0800b1f5
 800b190:	0800b171 	.word	0x0800b171
 800b194:	0800b171 	.word	0x0800b171
 800b198:	0800b171 	.word	0x0800b171
 800b19c:	0800b171 	.word	0x0800b171
 800b1a0:	0800b1f5 	.word	0x0800b1f5
 800b1a4:	0800b171 	.word	0x0800b171
 800b1a8:	0800b171 	.word	0x0800b171
 800b1ac:	0800b171 	.word	0x0800b171
 800b1b0:	0800b171 	.word	0x0800b171
 800b1b4:	0800b2f5 	.word	0x0800b2f5
 800b1b8:	0800b21f 	.word	0x0800b21f
 800b1bc:	0800b2af 	.word	0x0800b2af
 800b1c0:	0800b171 	.word	0x0800b171
 800b1c4:	0800b171 	.word	0x0800b171
 800b1c8:	0800b317 	.word	0x0800b317
 800b1cc:	0800b171 	.word	0x0800b171
 800b1d0:	0800b21f 	.word	0x0800b21f
 800b1d4:	0800b171 	.word	0x0800b171
 800b1d8:	0800b171 	.word	0x0800b171
 800b1dc:	0800b2b7 	.word	0x0800b2b7
 800b1e0:	6833      	ldr	r3, [r6, #0]
 800b1e2:	1d1a      	adds	r2, r3, #4
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	6032      	str	r2, [r6, #0]
 800b1e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b1ec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b1f0:	2301      	movs	r3, #1
 800b1f2:	e09d      	b.n	800b330 <_printf_i+0x1e8>
 800b1f4:	6833      	ldr	r3, [r6, #0]
 800b1f6:	6820      	ldr	r0, [r4, #0]
 800b1f8:	1d19      	adds	r1, r3, #4
 800b1fa:	6031      	str	r1, [r6, #0]
 800b1fc:	0606      	lsls	r6, r0, #24
 800b1fe:	d501      	bpl.n	800b204 <_printf_i+0xbc>
 800b200:	681d      	ldr	r5, [r3, #0]
 800b202:	e003      	b.n	800b20c <_printf_i+0xc4>
 800b204:	0645      	lsls	r5, r0, #25
 800b206:	d5fb      	bpl.n	800b200 <_printf_i+0xb8>
 800b208:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b20c:	2d00      	cmp	r5, #0
 800b20e:	da03      	bge.n	800b218 <_printf_i+0xd0>
 800b210:	232d      	movs	r3, #45	@ 0x2d
 800b212:	426d      	negs	r5, r5
 800b214:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b218:	4859      	ldr	r0, [pc, #356]	@ (800b380 <_printf_i+0x238>)
 800b21a:	230a      	movs	r3, #10
 800b21c:	e011      	b.n	800b242 <_printf_i+0xfa>
 800b21e:	6821      	ldr	r1, [r4, #0]
 800b220:	6833      	ldr	r3, [r6, #0]
 800b222:	0608      	lsls	r0, r1, #24
 800b224:	f853 5b04 	ldr.w	r5, [r3], #4
 800b228:	d402      	bmi.n	800b230 <_printf_i+0xe8>
 800b22a:	0649      	lsls	r1, r1, #25
 800b22c:	bf48      	it	mi
 800b22e:	b2ad      	uxthmi	r5, r5
 800b230:	2f6f      	cmp	r7, #111	@ 0x6f
 800b232:	4853      	ldr	r0, [pc, #332]	@ (800b380 <_printf_i+0x238>)
 800b234:	6033      	str	r3, [r6, #0]
 800b236:	bf14      	ite	ne
 800b238:	230a      	movne	r3, #10
 800b23a:	2308      	moveq	r3, #8
 800b23c:	2100      	movs	r1, #0
 800b23e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b242:	6866      	ldr	r6, [r4, #4]
 800b244:	60a6      	str	r6, [r4, #8]
 800b246:	2e00      	cmp	r6, #0
 800b248:	bfa2      	ittt	ge
 800b24a:	6821      	ldrge	r1, [r4, #0]
 800b24c:	f021 0104 	bicge.w	r1, r1, #4
 800b250:	6021      	strge	r1, [r4, #0]
 800b252:	b90d      	cbnz	r5, 800b258 <_printf_i+0x110>
 800b254:	2e00      	cmp	r6, #0
 800b256:	d04b      	beq.n	800b2f0 <_printf_i+0x1a8>
 800b258:	4616      	mov	r6, r2
 800b25a:	fbb5 f1f3 	udiv	r1, r5, r3
 800b25e:	fb03 5711 	mls	r7, r3, r1, r5
 800b262:	5dc7      	ldrb	r7, [r0, r7]
 800b264:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b268:	462f      	mov	r7, r5
 800b26a:	42bb      	cmp	r3, r7
 800b26c:	460d      	mov	r5, r1
 800b26e:	d9f4      	bls.n	800b25a <_printf_i+0x112>
 800b270:	2b08      	cmp	r3, #8
 800b272:	d10b      	bne.n	800b28c <_printf_i+0x144>
 800b274:	6823      	ldr	r3, [r4, #0]
 800b276:	07df      	lsls	r7, r3, #31
 800b278:	d508      	bpl.n	800b28c <_printf_i+0x144>
 800b27a:	6923      	ldr	r3, [r4, #16]
 800b27c:	6861      	ldr	r1, [r4, #4]
 800b27e:	4299      	cmp	r1, r3
 800b280:	bfde      	ittt	le
 800b282:	2330      	movle	r3, #48	@ 0x30
 800b284:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b288:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b28c:	1b92      	subs	r2, r2, r6
 800b28e:	6122      	str	r2, [r4, #16]
 800b290:	f8cd a000 	str.w	sl, [sp]
 800b294:	464b      	mov	r3, r9
 800b296:	aa03      	add	r2, sp, #12
 800b298:	4621      	mov	r1, r4
 800b29a:	4640      	mov	r0, r8
 800b29c:	f7ff fee6 	bl	800b06c <_printf_common>
 800b2a0:	3001      	adds	r0, #1
 800b2a2:	d14a      	bne.n	800b33a <_printf_i+0x1f2>
 800b2a4:	f04f 30ff 	mov.w	r0, #4294967295
 800b2a8:	b004      	add	sp, #16
 800b2aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2ae:	6823      	ldr	r3, [r4, #0]
 800b2b0:	f043 0320 	orr.w	r3, r3, #32
 800b2b4:	6023      	str	r3, [r4, #0]
 800b2b6:	4833      	ldr	r0, [pc, #204]	@ (800b384 <_printf_i+0x23c>)
 800b2b8:	2778      	movs	r7, #120	@ 0x78
 800b2ba:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b2be:	6823      	ldr	r3, [r4, #0]
 800b2c0:	6831      	ldr	r1, [r6, #0]
 800b2c2:	061f      	lsls	r7, r3, #24
 800b2c4:	f851 5b04 	ldr.w	r5, [r1], #4
 800b2c8:	d402      	bmi.n	800b2d0 <_printf_i+0x188>
 800b2ca:	065f      	lsls	r7, r3, #25
 800b2cc:	bf48      	it	mi
 800b2ce:	b2ad      	uxthmi	r5, r5
 800b2d0:	6031      	str	r1, [r6, #0]
 800b2d2:	07d9      	lsls	r1, r3, #31
 800b2d4:	bf44      	itt	mi
 800b2d6:	f043 0320 	orrmi.w	r3, r3, #32
 800b2da:	6023      	strmi	r3, [r4, #0]
 800b2dc:	b11d      	cbz	r5, 800b2e6 <_printf_i+0x19e>
 800b2de:	2310      	movs	r3, #16
 800b2e0:	e7ac      	b.n	800b23c <_printf_i+0xf4>
 800b2e2:	4827      	ldr	r0, [pc, #156]	@ (800b380 <_printf_i+0x238>)
 800b2e4:	e7e9      	b.n	800b2ba <_printf_i+0x172>
 800b2e6:	6823      	ldr	r3, [r4, #0]
 800b2e8:	f023 0320 	bic.w	r3, r3, #32
 800b2ec:	6023      	str	r3, [r4, #0]
 800b2ee:	e7f6      	b.n	800b2de <_printf_i+0x196>
 800b2f0:	4616      	mov	r6, r2
 800b2f2:	e7bd      	b.n	800b270 <_printf_i+0x128>
 800b2f4:	6833      	ldr	r3, [r6, #0]
 800b2f6:	6825      	ldr	r5, [r4, #0]
 800b2f8:	6961      	ldr	r1, [r4, #20]
 800b2fa:	1d18      	adds	r0, r3, #4
 800b2fc:	6030      	str	r0, [r6, #0]
 800b2fe:	062e      	lsls	r6, r5, #24
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	d501      	bpl.n	800b308 <_printf_i+0x1c0>
 800b304:	6019      	str	r1, [r3, #0]
 800b306:	e002      	b.n	800b30e <_printf_i+0x1c6>
 800b308:	0668      	lsls	r0, r5, #25
 800b30a:	d5fb      	bpl.n	800b304 <_printf_i+0x1bc>
 800b30c:	8019      	strh	r1, [r3, #0]
 800b30e:	2300      	movs	r3, #0
 800b310:	6123      	str	r3, [r4, #16]
 800b312:	4616      	mov	r6, r2
 800b314:	e7bc      	b.n	800b290 <_printf_i+0x148>
 800b316:	6833      	ldr	r3, [r6, #0]
 800b318:	1d1a      	adds	r2, r3, #4
 800b31a:	6032      	str	r2, [r6, #0]
 800b31c:	681e      	ldr	r6, [r3, #0]
 800b31e:	6862      	ldr	r2, [r4, #4]
 800b320:	2100      	movs	r1, #0
 800b322:	4630      	mov	r0, r6
 800b324:	f7f4 ffe4 	bl	80002f0 <memchr>
 800b328:	b108      	cbz	r0, 800b32e <_printf_i+0x1e6>
 800b32a:	1b80      	subs	r0, r0, r6
 800b32c:	6060      	str	r0, [r4, #4]
 800b32e:	6863      	ldr	r3, [r4, #4]
 800b330:	6123      	str	r3, [r4, #16]
 800b332:	2300      	movs	r3, #0
 800b334:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b338:	e7aa      	b.n	800b290 <_printf_i+0x148>
 800b33a:	6923      	ldr	r3, [r4, #16]
 800b33c:	4632      	mov	r2, r6
 800b33e:	4649      	mov	r1, r9
 800b340:	4640      	mov	r0, r8
 800b342:	47d0      	blx	sl
 800b344:	3001      	adds	r0, #1
 800b346:	d0ad      	beq.n	800b2a4 <_printf_i+0x15c>
 800b348:	6823      	ldr	r3, [r4, #0]
 800b34a:	079b      	lsls	r3, r3, #30
 800b34c:	d413      	bmi.n	800b376 <_printf_i+0x22e>
 800b34e:	68e0      	ldr	r0, [r4, #12]
 800b350:	9b03      	ldr	r3, [sp, #12]
 800b352:	4298      	cmp	r0, r3
 800b354:	bfb8      	it	lt
 800b356:	4618      	movlt	r0, r3
 800b358:	e7a6      	b.n	800b2a8 <_printf_i+0x160>
 800b35a:	2301      	movs	r3, #1
 800b35c:	4632      	mov	r2, r6
 800b35e:	4649      	mov	r1, r9
 800b360:	4640      	mov	r0, r8
 800b362:	47d0      	blx	sl
 800b364:	3001      	adds	r0, #1
 800b366:	d09d      	beq.n	800b2a4 <_printf_i+0x15c>
 800b368:	3501      	adds	r5, #1
 800b36a:	68e3      	ldr	r3, [r4, #12]
 800b36c:	9903      	ldr	r1, [sp, #12]
 800b36e:	1a5b      	subs	r3, r3, r1
 800b370:	42ab      	cmp	r3, r5
 800b372:	dcf2      	bgt.n	800b35a <_printf_i+0x212>
 800b374:	e7eb      	b.n	800b34e <_printf_i+0x206>
 800b376:	2500      	movs	r5, #0
 800b378:	f104 0619 	add.w	r6, r4, #25
 800b37c:	e7f5      	b.n	800b36a <_printf_i+0x222>
 800b37e:	bf00      	nop
 800b380:	0800f2ba 	.word	0x0800f2ba
 800b384:	0800f2cb 	.word	0x0800f2cb

0800b388 <_scanf_float>:
 800b388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b38c:	b087      	sub	sp, #28
 800b38e:	4617      	mov	r7, r2
 800b390:	9303      	str	r3, [sp, #12]
 800b392:	688b      	ldr	r3, [r1, #8]
 800b394:	1e5a      	subs	r2, r3, #1
 800b396:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800b39a:	bf81      	itttt	hi
 800b39c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800b3a0:	eb03 0b05 	addhi.w	fp, r3, r5
 800b3a4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800b3a8:	608b      	strhi	r3, [r1, #8]
 800b3aa:	680b      	ldr	r3, [r1, #0]
 800b3ac:	460a      	mov	r2, r1
 800b3ae:	f04f 0500 	mov.w	r5, #0
 800b3b2:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800b3b6:	f842 3b1c 	str.w	r3, [r2], #28
 800b3ba:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800b3be:	4680      	mov	r8, r0
 800b3c0:	460c      	mov	r4, r1
 800b3c2:	bf98      	it	ls
 800b3c4:	f04f 0b00 	movls.w	fp, #0
 800b3c8:	9201      	str	r2, [sp, #4]
 800b3ca:	4616      	mov	r6, r2
 800b3cc:	46aa      	mov	sl, r5
 800b3ce:	46a9      	mov	r9, r5
 800b3d0:	9502      	str	r5, [sp, #8]
 800b3d2:	68a2      	ldr	r2, [r4, #8]
 800b3d4:	b152      	cbz	r2, 800b3ec <_scanf_float+0x64>
 800b3d6:	683b      	ldr	r3, [r7, #0]
 800b3d8:	781b      	ldrb	r3, [r3, #0]
 800b3da:	2b4e      	cmp	r3, #78	@ 0x4e
 800b3dc:	d864      	bhi.n	800b4a8 <_scanf_float+0x120>
 800b3de:	2b40      	cmp	r3, #64	@ 0x40
 800b3e0:	d83c      	bhi.n	800b45c <_scanf_float+0xd4>
 800b3e2:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800b3e6:	b2c8      	uxtb	r0, r1
 800b3e8:	280e      	cmp	r0, #14
 800b3ea:	d93a      	bls.n	800b462 <_scanf_float+0xda>
 800b3ec:	f1b9 0f00 	cmp.w	r9, #0
 800b3f0:	d003      	beq.n	800b3fa <_scanf_float+0x72>
 800b3f2:	6823      	ldr	r3, [r4, #0]
 800b3f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b3f8:	6023      	str	r3, [r4, #0]
 800b3fa:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b3fe:	f1ba 0f01 	cmp.w	sl, #1
 800b402:	f200 8117 	bhi.w	800b634 <_scanf_float+0x2ac>
 800b406:	9b01      	ldr	r3, [sp, #4]
 800b408:	429e      	cmp	r6, r3
 800b40a:	f200 8108 	bhi.w	800b61e <_scanf_float+0x296>
 800b40e:	2001      	movs	r0, #1
 800b410:	b007      	add	sp, #28
 800b412:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b416:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800b41a:	2a0d      	cmp	r2, #13
 800b41c:	d8e6      	bhi.n	800b3ec <_scanf_float+0x64>
 800b41e:	a101      	add	r1, pc, #4	@ (adr r1, 800b424 <_scanf_float+0x9c>)
 800b420:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b424:	0800b56b 	.word	0x0800b56b
 800b428:	0800b3ed 	.word	0x0800b3ed
 800b42c:	0800b3ed 	.word	0x0800b3ed
 800b430:	0800b3ed 	.word	0x0800b3ed
 800b434:	0800b5cb 	.word	0x0800b5cb
 800b438:	0800b5a3 	.word	0x0800b5a3
 800b43c:	0800b3ed 	.word	0x0800b3ed
 800b440:	0800b3ed 	.word	0x0800b3ed
 800b444:	0800b579 	.word	0x0800b579
 800b448:	0800b3ed 	.word	0x0800b3ed
 800b44c:	0800b3ed 	.word	0x0800b3ed
 800b450:	0800b3ed 	.word	0x0800b3ed
 800b454:	0800b3ed 	.word	0x0800b3ed
 800b458:	0800b531 	.word	0x0800b531
 800b45c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800b460:	e7db      	b.n	800b41a <_scanf_float+0x92>
 800b462:	290e      	cmp	r1, #14
 800b464:	d8c2      	bhi.n	800b3ec <_scanf_float+0x64>
 800b466:	a001      	add	r0, pc, #4	@ (adr r0, 800b46c <_scanf_float+0xe4>)
 800b468:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800b46c:	0800b521 	.word	0x0800b521
 800b470:	0800b3ed 	.word	0x0800b3ed
 800b474:	0800b521 	.word	0x0800b521
 800b478:	0800b5b7 	.word	0x0800b5b7
 800b47c:	0800b3ed 	.word	0x0800b3ed
 800b480:	0800b4c9 	.word	0x0800b4c9
 800b484:	0800b507 	.word	0x0800b507
 800b488:	0800b507 	.word	0x0800b507
 800b48c:	0800b507 	.word	0x0800b507
 800b490:	0800b507 	.word	0x0800b507
 800b494:	0800b507 	.word	0x0800b507
 800b498:	0800b507 	.word	0x0800b507
 800b49c:	0800b507 	.word	0x0800b507
 800b4a0:	0800b507 	.word	0x0800b507
 800b4a4:	0800b507 	.word	0x0800b507
 800b4a8:	2b6e      	cmp	r3, #110	@ 0x6e
 800b4aa:	d809      	bhi.n	800b4c0 <_scanf_float+0x138>
 800b4ac:	2b60      	cmp	r3, #96	@ 0x60
 800b4ae:	d8b2      	bhi.n	800b416 <_scanf_float+0x8e>
 800b4b0:	2b54      	cmp	r3, #84	@ 0x54
 800b4b2:	d07b      	beq.n	800b5ac <_scanf_float+0x224>
 800b4b4:	2b59      	cmp	r3, #89	@ 0x59
 800b4b6:	d199      	bne.n	800b3ec <_scanf_float+0x64>
 800b4b8:	2d07      	cmp	r5, #7
 800b4ba:	d197      	bne.n	800b3ec <_scanf_float+0x64>
 800b4bc:	2508      	movs	r5, #8
 800b4be:	e02c      	b.n	800b51a <_scanf_float+0x192>
 800b4c0:	2b74      	cmp	r3, #116	@ 0x74
 800b4c2:	d073      	beq.n	800b5ac <_scanf_float+0x224>
 800b4c4:	2b79      	cmp	r3, #121	@ 0x79
 800b4c6:	e7f6      	b.n	800b4b6 <_scanf_float+0x12e>
 800b4c8:	6821      	ldr	r1, [r4, #0]
 800b4ca:	05c8      	lsls	r0, r1, #23
 800b4cc:	d51b      	bpl.n	800b506 <_scanf_float+0x17e>
 800b4ce:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800b4d2:	6021      	str	r1, [r4, #0]
 800b4d4:	f109 0901 	add.w	r9, r9, #1
 800b4d8:	f1bb 0f00 	cmp.w	fp, #0
 800b4dc:	d003      	beq.n	800b4e6 <_scanf_float+0x15e>
 800b4de:	3201      	adds	r2, #1
 800b4e0:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b4e4:	60a2      	str	r2, [r4, #8]
 800b4e6:	68a3      	ldr	r3, [r4, #8]
 800b4e8:	3b01      	subs	r3, #1
 800b4ea:	60a3      	str	r3, [r4, #8]
 800b4ec:	6923      	ldr	r3, [r4, #16]
 800b4ee:	3301      	adds	r3, #1
 800b4f0:	6123      	str	r3, [r4, #16]
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	3b01      	subs	r3, #1
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	607b      	str	r3, [r7, #4]
 800b4fa:	f340 8087 	ble.w	800b60c <_scanf_float+0x284>
 800b4fe:	683b      	ldr	r3, [r7, #0]
 800b500:	3301      	adds	r3, #1
 800b502:	603b      	str	r3, [r7, #0]
 800b504:	e765      	b.n	800b3d2 <_scanf_float+0x4a>
 800b506:	eb1a 0105 	adds.w	r1, sl, r5
 800b50a:	f47f af6f 	bne.w	800b3ec <_scanf_float+0x64>
 800b50e:	6822      	ldr	r2, [r4, #0]
 800b510:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800b514:	6022      	str	r2, [r4, #0]
 800b516:	460d      	mov	r5, r1
 800b518:	468a      	mov	sl, r1
 800b51a:	f806 3b01 	strb.w	r3, [r6], #1
 800b51e:	e7e2      	b.n	800b4e6 <_scanf_float+0x15e>
 800b520:	6822      	ldr	r2, [r4, #0]
 800b522:	0610      	lsls	r0, r2, #24
 800b524:	f57f af62 	bpl.w	800b3ec <_scanf_float+0x64>
 800b528:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800b52c:	6022      	str	r2, [r4, #0]
 800b52e:	e7f4      	b.n	800b51a <_scanf_float+0x192>
 800b530:	f1ba 0f00 	cmp.w	sl, #0
 800b534:	d10e      	bne.n	800b554 <_scanf_float+0x1cc>
 800b536:	f1b9 0f00 	cmp.w	r9, #0
 800b53a:	d10e      	bne.n	800b55a <_scanf_float+0x1d2>
 800b53c:	6822      	ldr	r2, [r4, #0]
 800b53e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800b542:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800b546:	d108      	bne.n	800b55a <_scanf_float+0x1d2>
 800b548:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b54c:	6022      	str	r2, [r4, #0]
 800b54e:	f04f 0a01 	mov.w	sl, #1
 800b552:	e7e2      	b.n	800b51a <_scanf_float+0x192>
 800b554:	f1ba 0f02 	cmp.w	sl, #2
 800b558:	d055      	beq.n	800b606 <_scanf_float+0x27e>
 800b55a:	2d01      	cmp	r5, #1
 800b55c:	d002      	beq.n	800b564 <_scanf_float+0x1dc>
 800b55e:	2d04      	cmp	r5, #4
 800b560:	f47f af44 	bne.w	800b3ec <_scanf_float+0x64>
 800b564:	3501      	adds	r5, #1
 800b566:	b2ed      	uxtb	r5, r5
 800b568:	e7d7      	b.n	800b51a <_scanf_float+0x192>
 800b56a:	f1ba 0f01 	cmp.w	sl, #1
 800b56e:	f47f af3d 	bne.w	800b3ec <_scanf_float+0x64>
 800b572:	f04f 0a02 	mov.w	sl, #2
 800b576:	e7d0      	b.n	800b51a <_scanf_float+0x192>
 800b578:	b97d      	cbnz	r5, 800b59a <_scanf_float+0x212>
 800b57a:	f1b9 0f00 	cmp.w	r9, #0
 800b57e:	f47f af38 	bne.w	800b3f2 <_scanf_float+0x6a>
 800b582:	6822      	ldr	r2, [r4, #0]
 800b584:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800b588:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800b58c:	f040 8101 	bne.w	800b792 <_scanf_float+0x40a>
 800b590:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b594:	6022      	str	r2, [r4, #0]
 800b596:	2501      	movs	r5, #1
 800b598:	e7bf      	b.n	800b51a <_scanf_float+0x192>
 800b59a:	2d03      	cmp	r5, #3
 800b59c:	d0e2      	beq.n	800b564 <_scanf_float+0x1dc>
 800b59e:	2d05      	cmp	r5, #5
 800b5a0:	e7de      	b.n	800b560 <_scanf_float+0x1d8>
 800b5a2:	2d02      	cmp	r5, #2
 800b5a4:	f47f af22 	bne.w	800b3ec <_scanf_float+0x64>
 800b5a8:	2503      	movs	r5, #3
 800b5aa:	e7b6      	b.n	800b51a <_scanf_float+0x192>
 800b5ac:	2d06      	cmp	r5, #6
 800b5ae:	f47f af1d 	bne.w	800b3ec <_scanf_float+0x64>
 800b5b2:	2507      	movs	r5, #7
 800b5b4:	e7b1      	b.n	800b51a <_scanf_float+0x192>
 800b5b6:	6822      	ldr	r2, [r4, #0]
 800b5b8:	0591      	lsls	r1, r2, #22
 800b5ba:	f57f af17 	bpl.w	800b3ec <_scanf_float+0x64>
 800b5be:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800b5c2:	6022      	str	r2, [r4, #0]
 800b5c4:	f8cd 9008 	str.w	r9, [sp, #8]
 800b5c8:	e7a7      	b.n	800b51a <_scanf_float+0x192>
 800b5ca:	6822      	ldr	r2, [r4, #0]
 800b5cc:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800b5d0:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800b5d4:	d006      	beq.n	800b5e4 <_scanf_float+0x25c>
 800b5d6:	0550      	lsls	r0, r2, #21
 800b5d8:	f57f af08 	bpl.w	800b3ec <_scanf_float+0x64>
 800b5dc:	f1b9 0f00 	cmp.w	r9, #0
 800b5e0:	f000 80d7 	beq.w	800b792 <_scanf_float+0x40a>
 800b5e4:	0591      	lsls	r1, r2, #22
 800b5e6:	bf58      	it	pl
 800b5e8:	9902      	ldrpl	r1, [sp, #8]
 800b5ea:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b5ee:	bf58      	it	pl
 800b5f0:	eba9 0101 	subpl.w	r1, r9, r1
 800b5f4:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800b5f8:	bf58      	it	pl
 800b5fa:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800b5fe:	6022      	str	r2, [r4, #0]
 800b600:	f04f 0900 	mov.w	r9, #0
 800b604:	e789      	b.n	800b51a <_scanf_float+0x192>
 800b606:	f04f 0a03 	mov.w	sl, #3
 800b60a:	e786      	b.n	800b51a <_scanf_float+0x192>
 800b60c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800b610:	4639      	mov	r1, r7
 800b612:	4640      	mov	r0, r8
 800b614:	4798      	blx	r3
 800b616:	2800      	cmp	r0, #0
 800b618:	f43f aedb 	beq.w	800b3d2 <_scanf_float+0x4a>
 800b61c:	e6e6      	b.n	800b3ec <_scanf_float+0x64>
 800b61e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b622:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b626:	463a      	mov	r2, r7
 800b628:	4640      	mov	r0, r8
 800b62a:	4798      	blx	r3
 800b62c:	6923      	ldr	r3, [r4, #16]
 800b62e:	3b01      	subs	r3, #1
 800b630:	6123      	str	r3, [r4, #16]
 800b632:	e6e8      	b.n	800b406 <_scanf_float+0x7e>
 800b634:	1e6b      	subs	r3, r5, #1
 800b636:	2b06      	cmp	r3, #6
 800b638:	d824      	bhi.n	800b684 <_scanf_float+0x2fc>
 800b63a:	2d02      	cmp	r5, #2
 800b63c:	d836      	bhi.n	800b6ac <_scanf_float+0x324>
 800b63e:	9b01      	ldr	r3, [sp, #4]
 800b640:	429e      	cmp	r6, r3
 800b642:	f67f aee4 	bls.w	800b40e <_scanf_float+0x86>
 800b646:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b64a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b64e:	463a      	mov	r2, r7
 800b650:	4640      	mov	r0, r8
 800b652:	4798      	blx	r3
 800b654:	6923      	ldr	r3, [r4, #16]
 800b656:	3b01      	subs	r3, #1
 800b658:	6123      	str	r3, [r4, #16]
 800b65a:	e7f0      	b.n	800b63e <_scanf_float+0x2b6>
 800b65c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b660:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800b664:	463a      	mov	r2, r7
 800b666:	4640      	mov	r0, r8
 800b668:	4798      	blx	r3
 800b66a:	6923      	ldr	r3, [r4, #16]
 800b66c:	3b01      	subs	r3, #1
 800b66e:	6123      	str	r3, [r4, #16]
 800b670:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b674:	fa5f fa8a 	uxtb.w	sl, sl
 800b678:	f1ba 0f02 	cmp.w	sl, #2
 800b67c:	d1ee      	bne.n	800b65c <_scanf_float+0x2d4>
 800b67e:	3d03      	subs	r5, #3
 800b680:	b2ed      	uxtb	r5, r5
 800b682:	1b76      	subs	r6, r6, r5
 800b684:	6823      	ldr	r3, [r4, #0]
 800b686:	05da      	lsls	r2, r3, #23
 800b688:	d530      	bpl.n	800b6ec <_scanf_float+0x364>
 800b68a:	055b      	lsls	r3, r3, #21
 800b68c:	d511      	bpl.n	800b6b2 <_scanf_float+0x32a>
 800b68e:	9b01      	ldr	r3, [sp, #4]
 800b690:	429e      	cmp	r6, r3
 800b692:	f67f aebc 	bls.w	800b40e <_scanf_float+0x86>
 800b696:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b69a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b69e:	463a      	mov	r2, r7
 800b6a0:	4640      	mov	r0, r8
 800b6a2:	4798      	blx	r3
 800b6a4:	6923      	ldr	r3, [r4, #16]
 800b6a6:	3b01      	subs	r3, #1
 800b6a8:	6123      	str	r3, [r4, #16]
 800b6aa:	e7f0      	b.n	800b68e <_scanf_float+0x306>
 800b6ac:	46aa      	mov	sl, r5
 800b6ae:	46b3      	mov	fp, r6
 800b6b0:	e7de      	b.n	800b670 <_scanf_float+0x2e8>
 800b6b2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800b6b6:	6923      	ldr	r3, [r4, #16]
 800b6b8:	2965      	cmp	r1, #101	@ 0x65
 800b6ba:	f103 33ff 	add.w	r3, r3, #4294967295
 800b6be:	f106 35ff 	add.w	r5, r6, #4294967295
 800b6c2:	6123      	str	r3, [r4, #16]
 800b6c4:	d00c      	beq.n	800b6e0 <_scanf_float+0x358>
 800b6c6:	2945      	cmp	r1, #69	@ 0x45
 800b6c8:	d00a      	beq.n	800b6e0 <_scanf_float+0x358>
 800b6ca:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b6ce:	463a      	mov	r2, r7
 800b6d0:	4640      	mov	r0, r8
 800b6d2:	4798      	blx	r3
 800b6d4:	6923      	ldr	r3, [r4, #16]
 800b6d6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800b6da:	3b01      	subs	r3, #1
 800b6dc:	1eb5      	subs	r5, r6, #2
 800b6de:	6123      	str	r3, [r4, #16]
 800b6e0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b6e4:	463a      	mov	r2, r7
 800b6e6:	4640      	mov	r0, r8
 800b6e8:	4798      	blx	r3
 800b6ea:	462e      	mov	r6, r5
 800b6ec:	6822      	ldr	r2, [r4, #0]
 800b6ee:	f012 0210 	ands.w	r2, r2, #16
 800b6f2:	d001      	beq.n	800b6f8 <_scanf_float+0x370>
 800b6f4:	2000      	movs	r0, #0
 800b6f6:	e68b      	b.n	800b410 <_scanf_float+0x88>
 800b6f8:	7032      	strb	r2, [r6, #0]
 800b6fa:	6823      	ldr	r3, [r4, #0]
 800b6fc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800b700:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b704:	d11a      	bne.n	800b73c <_scanf_float+0x3b4>
 800b706:	9b02      	ldr	r3, [sp, #8]
 800b708:	454b      	cmp	r3, r9
 800b70a:	eba3 0209 	sub.w	r2, r3, r9
 800b70e:	d121      	bne.n	800b754 <_scanf_float+0x3cc>
 800b710:	9901      	ldr	r1, [sp, #4]
 800b712:	2200      	movs	r2, #0
 800b714:	4640      	mov	r0, r8
 800b716:	f002 fc49 	bl	800dfac <_strtod_r>
 800b71a:	9b03      	ldr	r3, [sp, #12]
 800b71c:	6821      	ldr	r1, [r4, #0]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	f011 0f02 	tst.w	r1, #2
 800b724:	f103 0204 	add.w	r2, r3, #4
 800b728:	d01f      	beq.n	800b76a <_scanf_float+0x3e2>
 800b72a:	9903      	ldr	r1, [sp, #12]
 800b72c:	600a      	str	r2, [r1, #0]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	ed83 0b00 	vstr	d0, [r3]
 800b734:	68e3      	ldr	r3, [r4, #12]
 800b736:	3301      	adds	r3, #1
 800b738:	60e3      	str	r3, [r4, #12]
 800b73a:	e7db      	b.n	800b6f4 <_scanf_float+0x36c>
 800b73c:	9b04      	ldr	r3, [sp, #16]
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d0e6      	beq.n	800b710 <_scanf_float+0x388>
 800b742:	9905      	ldr	r1, [sp, #20]
 800b744:	230a      	movs	r3, #10
 800b746:	3101      	adds	r1, #1
 800b748:	4640      	mov	r0, r8
 800b74a:	f002 fcaf 	bl	800e0ac <_strtol_r>
 800b74e:	9b04      	ldr	r3, [sp, #16]
 800b750:	9e05      	ldr	r6, [sp, #20]
 800b752:	1ac2      	subs	r2, r0, r3
 800b754:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800b758:	429e      	cmp	r6, r3
 800b75a:	bf28      	it	cs
 800b75c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800b760:	490d      	ldr	r1, [pc, #52]	@ (800b798 <_scanf_float+0x410>)
 800b762:	4630      	mov	r0, r6
 800b764:	f000 f960 	bl	800ba28 <siprintf>
 800b768:	e7d2      	b.n	800b710 <_scanf_float+0x388>
 800b76a:	f011 0f04 	tst.w	r1, #4
 800b76e:	9903      	ldr	r1, [sp, #12]
 800b770:	600a      	str	r2, [r1, #0]
 800b772:	d1dc      	bne.n	800b72e <_scanf_float+0x3a6>
 800b774:	eeb4 0b40 	vcmp.f64	d0, d0
 800b778:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b77c:	681d      	ldr	r5, [r3, #0]
 800b77e:	d705      	bvc.n	800b78c <_scanf_float+0x404>
 800b780:	4806      	ldr	r0, [pc, #24]	@ (800b79c <_scanf_float+0x414>)
 800b782:	f000 fb81 	bl	800be88 <nanf>
 800b786:	ed85 0a00 	vstr	s0, [r5]
 800b78a:	e7d3      	b.n	800b734 <_scanf_float+0x3ac>
 800b78c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800b790:	e7f9      	b.n	800b786 <_scanf_float+0x3fe>
 800b792:	f04f 0900 	mov.w	r9, #0
 800b796:	e630      	b.n	800b3fa <_scanf_float+0x72>
 800b798:	0800f2dc 	.word	0x0800f2dc
 800b79c:	0800f2a7 	.word	0x0800f2a7

0800b7a0 <std>:
 800b7a0:	2300      	movs	r3, #0
 800b7a2:	b510      	push	{r4, lr}
 800b7a4:	4604      	mov	r4, r0
 800b7a6:	e9c0 3300 	strd	r3, r3, [r0]
 800b7aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b7ae:	6083      	str	r3, [r0, #8]
 800b7b0:	8181      	strh	r1, [r0, #12]
 800b7b2:	6643      	str	r3, [r0, #100]	@ 0x64
 800b7b4:	81c2      	strh	r2, [r0, #14]
 800b7b6:	6183      	str	r3, [r0, #24]
 800b7b8:	4619      	mov	r1, r3
 800b7ba:	2208      	movs	r2, #8
 800b7bc:	305c      	adds	r0, #92	@ 0x5c
 800b7be:	f000 fa2b 	bl	800bc18 <memset>
 800b7c2:	4b0d      	ldr	r3, [pc, #52]	@ (800b7f8 <std+0x58>)
 800b7c4:	6263      	str	r3, [r4, #36]	@ 0x24
 800b7c6:	4b0d      	ldr	r3, [pc, #52]	@ (800b7fc <std+0x5c>)
 800b7c8:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b7ca:	4b0d      	ldr	r3, [pc, #52]	@ (800b800 <std+0x60>)
 800b7cc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b7ce:	4b0d      	ldr	r3, [pc, #52]	@ (800b804 <std+0x64>)
 800b7d0:	6323      	str	r3, [r4, #48]	@ 0x30
 800b7d2:	4b0d      	ldr	r3, [pc, #52]	@ (800b808 <std+0x68>)
 800b7d4:	6224      	str	r4, [r4, #32]
 800b7d6:	429c      	cmp	r4, r3
 800b7d8:	d006      	beq.n	800b7e8 <std+0x48>
 800b7da:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b7de:	4294      	cmp	r4, r2
 800b7e0:	d002      	beq.n	800b7e8 <std+0x48>
 800b7e2:	33d0      	adds	r3, #208	@ 0xd0
 800b7e4:	429c      	cmp	r4, r3
 800b7e6:	d105      	bne.n	800b7f4 <std+0x54>
 800b7e8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b7ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b7f0:	f000 bb38 	b.w	800be64 <__retarget_lock_init_recursive>
 800b7f4:	bd10      	pop	{r4, pc}
 800b7f6:	bf00      	nop
 800b7f8:	0800ba69 	.word	0x0800ba69
 800b7fc:	0800ba8b 	.word	0x0800ba8b
 800b800:	0800bac3 	.word	0x0800bac3
 800b804:	0800bae7 	.word	0x0800bae7
 800b808:	24004d48 	.word	0x24004d48

0800b80c <stdio_exit_handler>:
 800b80c:	4a02      	ldr	r2, [pc, #8]	@ (800b818 <stdio_exit_handler+0xc>)
 800b80e:	4903      	ldr	r1, [pc, #12]	@ (800b81c <stdio_exit_handler+0x10>)
 800b810:	4803      	ldr	r0, [pc, #12]	@ (800b820 <stdio_exit_handler+0x14>)
 800b812:	f000 b87b 	b.w	800b90c <_fwalk_sglue>
 800b816:	bf00      	nop
 800b818:	24000014 	.word	0x24000014
 800b81c:	0800e6ed 	.word	0x0800e6ed
 800b820:	24000024 	.word	0x24000024

0800b824 <cleanup_stdio>:
 800b824:	6841      	ldr	r1, [r0, #4]
 800b826:	4b0c      	ldr	r3, [pc, #48]	@ (800b858 <cleanup_stdio+0x34>)
 800b828:	4299      	cmp	r1, r3
 800b82a:	b510      	push	{r4, lr}
 800b82c:	4604      	mov	r4, r0
 800b82e:	d001      	beq.n	800b834 <cleanup_stdio+0x10>
 800b830:	f002 ff5c 	bl	800e6ec <_fflush_r>
 800b834:	68a1      	ldr	r1, [r4, #8]
 800b836:	4b09      	ldr	r3, [pc, #36]	@ (800b85c <cleanup_stdio+0x38>)
 800b838:	4299      	cmp	r1, r3
 800b83a:	d002      	beq.n	800b842 <cleanup_stdio+0x1e>
 800b83c:	4620      	mov	r0, r4
 800b83e:	f002 ff55 	bl	800e6ec <_fflush_r>
 800b842:	68e1      	ldr	r1, [r4, #12]
 800b844:	4b06      	ldr	r3, [pc, #24]	@ (800b860 <cleanup_stdio+0x3c>)
 800b846:	4299      	cmp	r1, r3
 800b848:	d004      	beq.n	800b854 <cleanup_stdio+0x30>
 800b84a:	4620      	mov	r0, r4
 800b84c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b850:	f002 bf4c 	b.w	800e6ec <_fflush_r>
 800b854:	bd10      	pop	{r4, pc}
 800b856:	bf00      	nop
 800b858:	24004d48 	.word	0x24004d48
 800b85c:	24004db0 	.word	0x24004db0
 800b860:	24004e18 	.word	0x24004e18

0800b864 <global_stdio_init.part.0>:
 800b864:	b510      	push	{r4, lr}
 800b866:	4b0b      	ldr	r3, [pc, #44]	@ (800b894 <global_stdio_init.part.0+0x30>)
 800b868:	4c0b      	ldr	r4, [pc, #44]	@ (800b898 <global_stdio_init.part.0+0x34>)
 800b86a:	4a0c      	ldr	r2, [pc, #48]	@ (800b89c <global_stdio_init.part.0+0x38>)
 800b86c:	601a      	str	r2, [r3, #0]
 800b86e:	4620      	mov	r0, r4
 800b870:	2200      	movs	r2, #0
 800b872:	2104      	movs	r1, #4
 800b874:	f7ff ff94 	bl	800b7a0 <std>
 800b878:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b87c:	2201      	movs	r2, #1
 800b87e:	2109      	movs	r1, #9
 800b880:	f7ff ff8e 	bl	800b7a0 <std>
 800b884:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b888:	2202      	movs	r2, #2
 800b88a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b88e:	2112      	movs	r1, #18
 800b890:	f7ff bf86 	b.w	800b7a0 <std>
 800b894:	24004e80 	.word	0x24004e80
 800b898:	24004d48 	.word	0x24004d48
 800b89c:	0800b80d 	.word	0x0800b80d

0800b8a0 <__sfp_lock_acquire>:
 800b8a0:	4801      	ldr	r0, [pc, #4]	@ (800b8a8 <__sfp_lock_acquire+0x8>)
 800b8a2:	f000 bae0 	b.w	800be66 <__retarget_lock_acquire_recursive>
 800b8a6:	bf00      	nop
 800b8a8:	24004e89 	.word	0x24004e89

0800b8ac <__sfp_lock_release>:
 800b8ac:	4801      	ldr	r0, [pc, #4]	@ (800b8b4 <__sfp_lock_release+0x8>)
 800b8ae:	f000 badb 	b.w	800be68 <__retarget_lock_release_recursive>
 800b8b2:	bf00      	nop
 800b8b4:	24004e89 	.word	0x24004e89

0800b8b8 <__sinit>:
 800b8b8:	b510      	push	{r4, lr}
 800b8ba:	4604      	mov	r4, r0
 800b8bc:	f7ff fff0 	bl	800b8a0 <__sfp_lock_acquire>
 800b8c0:	6a23      	ldr	r3, [r4, #32]
 800b8c2:	b11b      	cbz	r3, 800b8cc <__sinit+0x14>
 800b8c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b8c8:	f7ff bff0 	b.w	800b8ac <__sfp_lock_release>
 800b8cc:	4b04      	ldr	r3, [pc, #16]	@ (800b8e0 <__sinit+0x28>)
 800b8ce:	6223      	str	r3, [r4, #32]
 800b8d0:	4b04      	ldr	r3, [pc, #16]	@ (800b8e4 <__sinit+0x2c>)
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d1f5      	bne.n	800b8c4 <__sinit+0xc>
 800b8d8:	f7ff ffc4 	bl	800b864 <global_stdio_init.part.0>
 800b8dc:	e7f2      	b.n	800b8c4 <__sinit+0xc>
 800b8de:	bf00      	nop
 800b8e0:	0800b825 	.word	0x0800b825
 800b8e4:	24004e80 	.word	0x24004e80

0800b8e8 <fiprintf>:
 800b8e8:	b40e      	push	{r1, r2, r3}
 800b8ea:	b503      	push	{r0, r1, lr}
 800b8ec:	4601      	mov	r1, r0
 800b8ee:	ab03      	add	r3, sp, #12
 800b8f0:	4805      	ldr	r0, [pc, #20]	@ (800b908 <fiprintf+0x20>)
 800b8f2:	f853 2b04 	ldr.w	r2, [r3], #4
 800b8f6:	6800      	ldr	r0, [r0, #0]
 800b8f8:	9301      	str	r3, [sp, #4]
 800b8fa:	f002 fd5b 	bl	800e3b4 <_vfiprintf_r>
 800b8fe:	b002      	add	sp, #8
 800b900:	f85d eb04 	ldr.w	lr, [sp], #4
 800b904:	b003      	add	sp, #12
 800b906:	4770      	bx	lr
 800b908:	24000020 	.word	0x24000020

0800b90c <_fwalk_sglue>:
 800b90c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b910:	4607      	mov	r7, r0
 800b912:	4688      	mov	r8, r1
 800b914:	4614      	mov	r4, r2
 800b916:	2600      	movs	r6, #0
 800b918:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b91c:	f1b9 0901 	subs.w	r9, r9, #1
 800b920:	d505      	bpl.n	800b92e <_fwalk_sglue+0x22>
 800b922:	6824      	ldr	r4, [r4, #0]
 800b924:	2c00      	cmp	r4, #0
 800b926:	d1f7      	bne.n	800b918 <_fwalk_sglue+0xc>
 800b928:	4630      	mov	r0, r6
 800b92a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b92e:	89ab      	ldrh	r3, [r5, #12]
 800b930:	2b01      	cmp	r3, #1
 800b932:	d907      	bls.n	800b944 <_fwalk_sglue+0x38>
 800b934:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b938:	3301      	adds	r3, #1
 800b93a:	d003      	beq.n	800b944 <_fwalk_sglue+0x38>
 800b93c:	4629      	mov	r1, r5
 800b93e:	4638      	mov	r0, r7
 800b940:	47c0      	blx	r8
 800b942:	4306      	orrs	r6, r0
 800b944:	3568      	adds	r5, #104	@ 0x68
 800b946:	e7e9      	b.n	800b91c <_fwalk_sglue+0x10>

0800b948 <iprintf>:
 800b948:	b40f      	push	{r0, r1, r2, r3}
 800b94a:	b507      	push	{r0, r1, r2, lr}
 800b94c:	4906      	ldr	r1, [pc, #24]	@ (800b968 <iprintf+0x20>)
 800b94e:	ab04      	add	r3, sp, #16
 800b950:	6808      	ldr	r0, [r1, #0]
 800b952:	f853 2b04 	ldr.w	r2, [r3], #4
 800b956:	6881      	ldr	r1, [r0, #8]
 800b958:	9301      	str	r3, [sp, #4]
 800b95a:	f002 fd2b 	bl	800e3b4 <_vfiprintf_r>
 800b95e:	b003      	add	sp, #12
 800b960:	f85d eb04 	ldr.w	lr, [sp], #4
 800b964:	b004      	add	sp, #16
 800b966:	4770      	bx	lr
 800b968:	24000020 	.word	0x24000020

0800b96c <_puts_r>:
 800b96c:	6a03      	ldr	r3, [r0, #32]
 800b96e:	b570      	push	{r4, r5, r6, lr}
 800b970:	6884      	ldr	r4, [r0, #8]
 800b972:	4605      	mov	r5, r0
 800b974:	460e      	mov	r6, r1
 800b976:	b90b      	cbnz	r3, 800b97c <_puts_r+0x10>
 800b978:	f7ff ff9e 	bl	800b8b8 <__sinit>
 800b97c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b97e:	07db      	lsls	r3, r3, #31
 800b980:	d405      	bmi.n	800b98e <_puts_r+0x22>
 800b982:	89a3      	ldrh	r3, [r4, #12]
 800b984:	0598      	lsls	r0, r3, #22
 800b986:	d402      	bmi.n	800b98e <_puts_r+0x22>
 800b988:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b98a:	f000 fa6c 	bl	800be66 <__retarget_lock_acquire_recursive>
 800b98e:	89a3      	ldrh	r3, [r4, #12]
 800b990:	0719      	lsls	r1, r3, #28
 800b992:	d502      	bpl.n	800b99a <_puts_r+0x2e>
 800b994:	6923      	ldr	r3, [r4, #16]
 800b996:	2b00      	cmp	r3, #0
 800b998:	d135      	bne.n	800ba06 <_puts_r+0x9a>
 800b99a:	4621      	mov	r1, r4
 800b99c:	4628      	mov	r0, r5
 800b99e:	f000 f8e5 	bl	800bb6c <__swsetup_r>
 800b9a2:	b380      	cbz	r0, 800ba06 <_puts_r+0x9a>
 800b9a4:	f04f 35ff 	mov.w	r5, #4294967295
 800b9a8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b9aa:	07da      	lsls	r2, r3, #31
 800b9ac:	d405      	bmi.n	800b9ba <_puts_r+0x4e>
 800b9ae:	89a3      	ldrh	r3, [r4, #12]
 800b9b0:	059b      	lsls	r3, r3, #22
 800b9b2:	d402      	bmi.n	800b9ba <_puts_r+0x4e>
 800b9b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b9b6:	f000 fa57 	bl	800be68 <__retarget_lock_release_recursive>
 800b9ba:	4628      	mov	r0, r5
 800b9bc:	bd70      	pop	{r4, r5, r6, pc}
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	da04      	bge.n	800b9cc <_puts_r+0x60>
 800b9c2:	69a2      	ldr	r2, [r4, #24]
 800b9c4:	429a      	cmp	r2, r3
 800b9c6:	dc17      	bgt.n	800b9f8 <_puts_r+0x8c>
 800b9c8:	290a      	cmp	r1, #10
 800b9ca:	d015      	beq.n	800b9f8 <_puts_r+0x8c>
 800b9cc:	6823      	ldr	r3, [r4, #0]
 800b9ce:	1c5a      	adds	r2, r3, #1
 800b9d0:	6022      	str	r2, [r4, #0]
 800b9d2:	7019      	strb	r1, [r3, #0]
 800b9d4:	68a3      	ldr	r3, [r4, #8]
 800b9d6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b9da:	3b01      	subs	r3, #1
 800b9dc:	60a3      	str	r3, [r4, #8]
 800b9de:	2900      	cmp	r1, #0
 800b9e0:	d1ed      	bne.n	800b9be <_puts_r+0x52>
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	da11      	bge.n	800ba0a <_puts_r+0x9e>
 800b9e6:	4622      	mov	r2, r4
 800b9e8:	210a      	movs	r1, #10
 800b9ea:	4628      	mov	r0, r5
 800b9ec:	f000 f87f 	bl	800baee <__swbuf_r>
 800b9f0:	3001      	adds	r0, #1
 800b9f2:	d0d7      	beq.n	800b9a4 <_puts_r+0x38>
 800b9f4:	250a      	movs	r5, #10
 800b9f6:	e7d7      	b.n	800b9a8 <_puts_r+0x3c>
 800b9f8:	4622      	mov	r2, r4
 800b9fa:	4628      	mov	r0, r5
 800b9fc:	f000 f877 	bl	800baee <__swbuf_r>
 800ba00:	3001      	adds	r0, #1
 800ba02:	d1e7      	bne.n	800b9d4 <_puts_r+0x68>
 800ba04:	e7ce      	b.n	800b9a4 <_puts_r+0x38>
 800ba06:	3e01      	subs	r6, #1
 800ba08:	e7e4      	b.n	800b9d4 <_puts_r+0x68>
 800ba0a:	6823      	ldr	r3, [r4, #0]
 800ba0c:	1c5a      	adds	r2, r3, #1
 800ba0e:	6022      	str	r2, [r4, #0]
 800ba10:	220a      	movs	r2, #10
 800ba12:	701a      	strb	r2, [r3, #0]
 800ba14:	e7ee      	b.n	800b9f4 <_puts_r+0x88>
	...

0800ba18 <puts>:
 800ba18:	4b02      	ldr	r3, [pc, #8]	@ (800ba24 <puts+0xc>)
 800ba1a:	4601      	mov	r1, r0
 800ba1c:	6818      	ldr	r0, [r3, #0]
 800ba1e:	f7ff bfa5 	b.w	800b96c <_puts_r>
 800ba22:	bf00      	nop
 800ba24:	24000020 	.word	0x24000020

0800ba28 <siprintf>:
 800ba28:	b40e      	push	{r1, r2, r3}
 800ba2a:	b500      	push	{lr}
 800ba2c:	b09c      	sub	sp, #112	@ 0x70
 800ba2e:	ab1d      	add	r3, sp, #116	@ 0x74
 800ba30:	9002      	str	r0, [sp, #8]
 800ba32:	9006      	str	r0, [sp, #24]
 800ba34:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800ba38:	4809      	ldr	r0, [pc, #36]	@ (800ba60 <siprintf+0x38>)
 800ba3a:	9107      	str	r1, [sp, #28]
 800ba3c:	9104      	str	r1, [sp, #16]
 800ba3e:	4909      	ldr	r1, [pc, #36]	@ (800ba64 <siprintf+0x3c>)
 800ba40:	f853 2b04 	ldr.w	r2, [r3], #4
 800ba44:	9105      	str	r1, [sp, #20]
 800ba46:	6800      	ldr	r0, [r0, #0]
 800ba48:	9301      	str	r3, [sp, #4]
 800ba4a:	a902      	add	r1, sp, #8
 800ba4c:	f002 fb8c 	bl	800e168 <_svfiprintf_r>
 800ba50:	9b02      	ldr	r3, [sp, #8]
 800ba52:	2200      	movs	r2, #0
 800ba54:	701a      	strb	r2, [r3, #0]
 800ba56:	b01c      	add	sp, #112	@ 0x70
 800ba58:	f85d eb04 	ldr.w	lr, [sp], #4
 800ba5c:	b003      	add	sp, #12
 800ba5e:	4770      	bx	lr
 800ba60:	24000020 	.word	0x24000020
 800ba64:	ffff0208 	.word	0xffff0208

0800ba68 <__sread>:
 800ba68:	b510      	push	{r4, lr}
 800ba6a:	460c      	mov	r4, r1
 800ba6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba70:	f000 f986 	bl	800bd80 <_read_r>
 800ba74:	2800      	cmp	r0, #0
 800ba76:	bfab      	itete	ge
 800ba78:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ba7a:	89a3      	ldrhlt	r3, [r4, #12]
 800ba7c:	181b      	addge	r3, r3, r0
 800ba7e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ba82:	bfac      	ite	ge
 800ba84:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ba86:	81a3      	strhlt	r3, [r4, #12]
 800ba88:	bd10      	pop	{r4, pc}

0800ba8a <__swrite>:
 800ba8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba8e:	461f      	mov	r7, r3
 800ba90:	898b      	ldrh	r3, [r1, #12]
 800ba92:	05db      	lsls	r3, r3, #23
 800ba94:	4605      	mov	r5, r0
 800ba96:	460c      	mov	r4, r1
 800ba98:	4616      	mov	r6, r2
 800ba9a:	d505      	bpl.n	800baa8 <__swrite+0x1e>
 800ba9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800baa0:	2302      	movs	r3, #2
 800baa2:	2200      	movs	r2, #0
 800baa4:	f000 f95a 	bl	800bd5c <_lseek_r>
 800baa8:	89a3      	ldrh	r3, [r4, #12]
 800baaa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800baae:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800bab2:	81a3      	strh	r3, [r4, #12]
 800bab4:	4632      	mov	r2, r6
 800bab6:	463b      	mov	r3, r7
 800bab8:	4628      	mov	r0, r5
 800baba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800babe:	f000 b995 	b.w	800bdec <_write_r>

0800bac2 <__sseek>:
 800bac2:	b510      	push	{r4, lr}
 800bac4:	460c      	mov	r4, r1
 800bac6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800baca:	f000 f947 	bl	800bd5c <_lseek_r>
 800bace:	1c43      	adds	r3, r0, #1
 800bad0:	89a3      	ldrh	r3, [r4, #12]
 800bad2:	bf15      	itete	ne
 800bad4:	6560      	strne	r0, [r4, #84]	@ 0x54
 800bad6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800bada:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800bade:	81a3      	strheq	r3, [r4, #12]
 800bae0:	bf18      	it	ne
 800bae2:	81a3      	strhne	r3, [r4, #12]
 800bae4:	bd10      	pop	{r4, pc}

0800bae6 <__sclose>:
 800bae6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800baea:	f000 b8d1 	b.w	800bc90 <_close_r>

0800baee <__swbuf_r>:
 800baee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800baf0:	460e      	mov	r6, r1
 800baf2:	4614      	mov	r4, r2
 800baf4:	4605      	mov	r5, r0
 800baf6:	b118      	cbz	r0, 800bb00 <__swbuf_r+0x12>
 800baf8:	6a03      	ldr	r3, [r0, #32]
 800bafa:	b90b      	cbnz	r3, 800bb00 <__swbuf_r+0x12>
 800bafc:	f7ff fedc 	bl	800b8b8 <__sinit>
 800bb00:	69a3      	ldr	r3, [r4, #24]
 800bb02:	60a3      	str	r3, [r4, #8]
 800bb04:	89a3      	ldrh	r3, [r4, #12]
 800bb06:	071a      	lsls	r2, r3, #28
 800bb08:	d501      	bpl.n	800bb0e <__swbuf_r+0x20>
 800bb0a:	6923      	ldr	r3, [r4, #16]
 800bb0c:	b943      	cbnz	r3, 800bb20 <__swbuf_r+0x32>
 800bb0e:	4621      	mov	r1, r4
 800bb10:	4628      	mov	r0, r5
 800bb12:	f000 f82b 	bl	800bb6c <__swsetup_r>
 800bb16:	b118      	cbz	r0, 800bb20 <__swbuf_r+0x32>
 800bb18:	f04f 37ff 	mov.w	r7, #4294967295
 800bb1c:	4638      	mov	r0, r7
 800bb1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bb20:	6823      	ldr	r3, [r4, #0]
 800bb22:	6922      	ldr	r2, [r4, #16]
 800bb24:	1a98      	subs	r0, r3, r2
 800bb26:	6963      	ldr	r3, [r4, #20]
 800bb28:	b2f6      	uxtb	r6, r6
 800bb2a:	4283      	cmp	r3, r0
 800bb2c:	4637      	mov	r7, r6
 800bb2e:	dc05      	bgt.n	800bb3c <__swbuf_r+0x4e>
 800bb30:	4621      	mov	r1, r4
 800bb32:	4628      	mov	r0, r5
 800bb34:	f002 fdda 	bl	800e6ec <_fflush_r>
 800bb38:	2800      	cmp	r0, #0
 800bb3a:	d1ed      	bne.n	800bb18 <__swbuf_r+0x2a>
 800bb3c:	68a3      	ldr	r3, [r4, #8]
 800bb3e:	3b01      	subs	r3, #1
 800bb40:	60a3      	str	r3, [r4, #8]
 800bb42:	6823      	ldr	r3, [r4, #0]
 800bb44:	1c5a      	adds	r2, r3, #1
 800bb46:	6022      	str	r2, [r4, #0]
 800bb48:	701e      	strb	r6, [r3, #0]
 800bb4a:	6962      	ldr	r2, [r4, #20]
 800bb4c:	1c43      	adds	r3, r0, #1
 800bb4e:	429a      	cmp	r2, r3
 800bb50:	d004      	beq.n	800bb5c <__swbuf_r+0x6e>
 800bb52:	89a3      	ldrh	r3, [r4, #12]
 800bb54:	07db      	lsls	r3, r3, #31
 800bb56:	d5e1      	bpl.n	800bb1c <__swbuf_r+0x2e>
 800bb58:	2e0a      	cmp	r6, #10
 800bb5a:	d1df      	bne.n	800bb1c <__swbuf_r+0x2e>
 800bb5c:	4621      	mov	r1, r4
 800bb5e:	4628      	mov	r0, r5
 800bb60:	f002 fdc4 	bl	800e6ec <_fflush_r>
 800bb64:	2800      	cmp	r0, #0
 800bb66:	d0d9      	beq.n	800bb1c <__swbuf_r+0x2e>
 800bb68:	e7d6      	b.n	800bb18 <__swbuf_r+0x2a>
	...

0800bb6c <__swsetup_r>:
 800bb6c:	b538      	push	{r3, r4, r5, lr}
 800bb6e:	4b29      	ldr	r3, [pc, #164]	@ (800bc14 <__swsetup_r+0xa8>)
 800bb70:	4605      	mov	r5, r0
 800bb72:	6818      	ldr	r0, [r3, #0]
 800bb74:	460c      	mov	r4, r1
 800bb76:	b118      	cbz	r0, 800bb80 <__swsetup_r+0x14>
 800bb78:	6a03      	ldr	r3, [r0, #32]
 800bb7a:	b90b      	cbnz	r3, 800bb80 <__swsetup_r+0x14>
 800bb7c:	f7ff fe9c 	bl	800b8b8 <__sinit>
 800bb80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bb84:	0719      	lsls	r1, r3, #28
 800bb86:	d422      	bmi.n	800bbce <__swsetup_r+0x62>
 800bb88:	06da      	lsls	r2, r3, #27
 800bb8a:	d407      	bmi.n	800bb9c <__swsetup_r+0x30>
 800bb8c:	2209      	movs	r2, #9
 800bb8e:	602a      	str	r2, [r5, #0]
 800bb90:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bb94:	81a3      	strh	r3, [r4, #12]
 800bb96:	f04f 30ff 	mov.w	r0, #4294967295
 800bb9a:	e033      	b.n	800bc04 <__swsetup_r+0x98>
 800bb9c:	0758      	lsls	r0, r3, #29
 800bb9e:	d512      	bpl.n	800bbc6 <__swsetup_r+0x5a>
 800bba0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bba2:	b141      	cbz	r1, 800bbb6 <__swsetup_r+0x4a>
 800bba4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bba8:	4299      	cmp	r1, r3
 800bbaa:	d002      	beq.n	800bbb2 <__swsetup_r+0x46>
 800bbac:	4628      	mov	r0, r5
 800bbae:	f000 ff51 	bl	800ca54 <_free_r>
 800bbb2:	2300      	movs	r3, #0
 800bbb4:	6363      	str	r3, [r4, #52]	@ 0x34
 800bbb6:	89a3      	ldrh	r3, [r4, #12]
 800bbb8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800bbbc:	81a3      	strh	r3, [r4, #12]
 800bbbe:	2300      	movs	r3, #0
 800bbc0:	6063      	str	r3, [r4, #4]
 800bbc2:	6923      	ldr	r3, [r4, #16]
 800bbc4:	6023      	str	r3, [r4, #0]
 800bbc6:	89a3      	ldrh	r3, [r4, #12]
 800bbc8:	f043 0308 	orr.w	r3, r3, #8
 800bbcc:	81a3      	strh	r3, [r4, #12]
 800bbce:	6923      	ldr	r3, [r4, #16]
 800bbd0:	b94b      	cbnz	r3, 800bbe6 <__swsetup_r+0x7a>
 800bbd2:	89a3      	ldrh	r3, [r4, #12]
 800bbd4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800bbd8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bbdc:	d003      	beq.n	800bbe6 <__swsetup_r+0x7a>
 800bbde:	4621      	mov	r1, r4
 800bbe0:	4628      	mov	r0, r5
 800bbe2:	f002 fdd1 	bl	800e788 <__smakebuf_r>
 800bbe6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bbea:	f013 0201 	ands.w	r2, r3, #1
 800bbee:	d00a      	beq.n	800bc06 <__swsetup_r+0x9a>
 800bbf0:	2200      	movs	r2, #0
 800bbf2:	60a2      	str	r2, [r4, #8]
 800bbf4:	6962      	ldr	r2, [r4, #20]
 800bbf6:	4252      	negs	r2, r2
 800bbf8:	61a2      	str	r2, [r4, #24]
 800bbfa:	6922      	ldr	r2, [r4, #16]
 800bbfc:	b942      	cbnz	r2, 800bc10 <__swsetup_r+0xa4>
 800bbfe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800bc02:	d1c5      	bne.n	800bb90 <__swsetup_r+0x24>
 800bc04:	bd38      	pop	{r3, r4, r5, pc}
 800bc06:	0799      	lsls	r1, r3, #30
 800bc08:	bf58      	it	pl
 800bc0a:	6962      	ldrpl	r2, [r4, #20]
 800bc0c:	60a2      	str	r2, [r4, #8]
 800bc0e:	e7f4      	b.n	800bbfa <__swsetup_r+0x8e>
 800bc10:	2000      	movs	r0, #0
 800bc12:	e7f7      	b.n	800bc04 <__swsetup_r+0x98>
 800bc14:	24000020 	.word	0x24000020

0800bc18 <memset>:
 800bc18:	4402      	add	r2, r0
 800bc1a:	4603      	mov	r3, r0
 800bc1c:	4293      	cmp	r3, r2
 800bc1e:	d100      	bne.n	800bc22 <memset+0xa>
 800bc20:	4770      	bx	lr
 800bc22:	f803 1b01 	strb.w	r1, [r3], #1
 800bc26:	e7f9      	b.n	800bc1c <memset+0x4>

0800bc28 <_raise_r>:
 800bc28:	291f      	cmp	r1, #31
 800bc2a:	b538      	push	{r3, r4, r5, lr}
 800bc2c:	4605      	mov	r5, r0
 800bc2e:	460c      	mov	r4, r1
 800bc30:	d904      	bls.n	800bc3c <_raise_r+0x14>
 800bc32:	2316      	movs	r3, #22
 800bc34:	6003      	str	r3, [r0, #0]
 800bc36:	f04f 30ff 	mov.w	r0, #4294967295
 800bc3a:	bd38      	pop	{r3, r4, r5, pc}
 800bc3c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800bc3e:	b112      	cbz	r2, 800bc46 <_raise_r+0x1e>
 800bc40:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bc44:	b94b      	cbnz	r3, 800bc5a <_raise_r+0x32>
 800bc46:	4628      	mov	r0, r5
 800bc48:	f000 f8be 	bl	800bdc8 <_getpid_r>
 800bc4c:	4622      	mov	r2, r4
 800bc4e:	4601      	mov	r1, r0
 800bc50:	4628      	mov	r0, r5
 800bc52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bc56:	f000 b8a5 	b.w	800bda4 <_kill_r>
 800bc5a:	2b01      	cmp	r3, #1
 800bc5c:	d00a      	beq.n	800bc74 <_raise_r+0x4c>
 800bc5e:	1c59      	adds	r1, r3, #1
 800bc60:	d103      	bne.n	800bc6a <_raise_r+0x42>
 800bc62:	2316      	movs	r3, #22
 800bc64:	6003      	str	r3, [r0, #0]
 800bc66:	2001      	movs	r0, #1
 800bc68:	e7e7      	b.n	800bc3a <_raise_r+0x12>
 800bc6a:	2100      	movs	r1, #0
 800bc6c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800bc70:	4620      	mov	r0, r4
 800bc72:	4798      	blx	r3
 800bc74:	2000      	movs	r0, #0
 800bc76:	e7e0      	b.n	800bc3a <_raise_r+0x12>

0800bc78 <raise>:
 800bc78:	4b02      	ldr	r3, [pc, #8]	@ (800bc84 <raise+0xc>)
 800bc7a:	4601      	mov	r1, r0
 800bc7c:	6818      	ldr	r0, [r3, #0]
 800bc7e:	f7ff bfd3 	b.w	800bc28 <_raise_r>
 800bc82:	bf00      	nop
 800bc84:	24000020 	.word	0x24000020

0800bc88 <_localeconv_r>:
 800bc88:	4800      	ldr	r0, [pc, #0]	@ (800bc8c <_localeconv_r+0x4>)
 800bc8a:	4770      	bx	lr
 800bc8c:	24000160 	.word	0x24000160

0800bc90 <_close_r>:
 800bc90:	b538      	push	{r3, r4, r5, lr}
 800bc92:	4d06      	ldr	r5, [pc, #24]	@ (800bcac <_close_r+0x1c>)
 800bc94:	2300      	movs	r3, #0
 800bc96:	4604      	mov	r4, r0
 800bc98:	4608      	mov	r0, r1
 800bc9a:	602b      	str	r3, [r5, #0]
 800bc9c:	f7f5 fb4a 	bl	8001334 <_close>
 800bca0:	1c43      	adds	r3, r0, #1
 800bca2:	d102      	bne.n	800bcaa <_close_r+0x1a>
 800bca4:	682b      	ldr	r3, [r5, #0]
 800bca6:	b103      	cbz	r3, 800bcaa <_close_r+0x1a>
 800bca8:	6023      	str	r3, [r4, #0]
 800bcaa:	bd38      	pop	{r3, r4, r5, pc}
 800bcac:	24004e84 	.word	0x24004e84

0800bcb0 <_reclaim_reent>:
 800bcb0:	4b29      	ldr	r3, [pc, #164]	@ (800bd58 <_reclaim_reent+0xa8>)
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	4283      	cmp	r3, r0
 800bcb6:	b570      	push	{r4, r5, r6, lr}
 800bcb8:	4604      	mov	r4, r0
 800bcba:	d04b      	beq.n	800bd54 <_reclaim_reent+0xa4>
 800bcbc:	69c3      	ldr	r3, [r0, #28]
 800bcbe:	b1ab      	cbz	r3, 800bcec <_reclaim_reent+0x3c>
 800bcc0:	68db      	ldr	r3, [r3, #12]
 800bcc2:	b16b      	cbz	r3, 800bce0 <_reclaim_reent+0x30>
 800bcc4:	2500      	movs	r5, #0
 800bcc6:	69e3      	ldr	r3, [r4, #28]
 800bcc8:	68db      	ldr	r3, [r3, #12]
 800bcca:	5959      	ldr	r1, [r3, r5]
 800bccc:	2900      	cmp	r1, #0
 800bcce:	d13b      	bne.n	800bd48 <_reclaim_reent+0x98>
 800bcd0:	3504      	adds	r5, #4
 800bcd2:	2d80      	cmp	r5, #128	@ 0x80
 800bcd4:	d1f7      	bne.n	800bcc6 <_reclaim_reent+0x16>
 800bcd6:	69e3      	ldr	r3, [r4, #28]
 800bcd8:	4620      	mov	r0, r4
 800bcda:	68d9      	ldr	r1, [r3, #12]
 800bcdc:	f000 feba 	bl	800ca54 <_free_r>
 800bce0:	69e3      	ldr	r3, [r4, #28]
 800bce2:	6819      	ldr	r1, [r3, #0]
 800bce4:	b111      	cbz	r1, 800bcec <_reclaim_reent+0x3c>
 800bce6:	4620      	mov	r0, r4
 800bce8:	f000 feb4 	bl	800ca54 <_free_r>
 800bcec:	6961      	ldr	r1, [r4, #20]
 800bcee:	b111      	cbz	r1, 800bcf6 <_reclaim_reent+0x46>
 800bcf0:	4620      	mov	r0, r4
 800bcf2:	f000 feaf 	bl	800ca54 <_free_r>
 800bcf6:	69e1      	ldr	r1, [r4, #28]
 800bcf8:	b111      	cbz	r1, 800bd00 <_reclaim_reent+0x50>
 800bcfa:	4620      	mov	r0, r4
 800bcfc:	f000 feaa 	bl	800ca54 <_free_r>
 800bd00:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800bd02:	b111      	cbz	r1, 800bd0a <_reclaim_reent+0x5a>
 800bd04:	4620      	mov	r0, r4
 800bd06:	f000 fea5 	bl	800ca54 <_free_r>
 800bd0a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bd0c:	b111      	cbz	r1, 800bd14 <_reclaim_reent+0x64>
 800bd0e:	4620      	mov	r0, r4
 800bd10:	f000 fea0 	bl	800ca54 <_free_r>
 800bd14:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800bd16:	b111      	cbz	r1, 800bd1e <_reclaim_reent+0x6e>
 800bd18:	4620      	mov	r0, r4
 800bd1a:	f000 fe9b 	bl	800ca54 <_free_r>
 800bd1e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800bd20:	b111      	cbz	r1, 800bd28 <_reclaim_reent+0x78>
 800bd22:	4620      	mov	r0, r4
 800bd24:	f000 fe96 	bl	800ca54 <_free_r>
 800bd28:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800bd2a:	b111      	cbz	r1, 800bd32 <_reclaim_reent+0x82>
 800bd2c:	4620      	mov	r0, r4
 800bd2e:	f000 fe91 	bl	800ca54 <_free_r>
 800bd32:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800bd34:	b111      	cbz	r1, 800bd3c <_reclaim_reent+0x8c>
 800bd36:	4620      	mov	r0, r4
 800bd38:	f000 fe8c 	bl	800ca54 <_free_r>
 800bd3c:	6a23      	ldr	r3, [r4, #32]
 800bd3e:	b14b      	cbz	r3, 800bd54 <_reclaim_reent+0xa4>
 800bd40:	4620      	mov	r0, r4
 800bd42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bd46:	4718      	bx	r3
 800bd48:	680e      	ldr	r6, [r1, #0]
 800bd4a:	4620      	mov	r0, r4
 800bd4c:	f000 fe82 	bl	800ca54 <_free_r>
 800bd50:	4631      	mov	r1, r6
 800bd52:	e7bb      	b.n	800bccc <_reclaim_reent+0x1c>
 800bd54:	bd70      	pop	{r4, r5, r6, pc}
 800bd56:	bf00      	nop
 800bd58:	24000020 	.word	0x24000020

0800bd5c <_lseek_r>:
 800bd5c:	b538      	push	{r3, r4, r5, lr}
 800bd5e:	4d07      	ldr	r5, [pc, #28]	@ (800bd7c <_lseek_r+0x20>)
 800bd60:	4604      	mov	r4, r0
 800bd62:	4608      	mov	r0, r1
 800bd64:	4611      	mov	r1, r2
 800bd66:	2200      	movs	r2, #0
 800bd68:	602a      	str	r2, [r5, #0]
 800bd6a:	461a      	mov	r2, r3
 800bd6c:	f7f5 fb09 	bl	8001382 <_lseek>
 800bd70:	1c43      	adds	r3, r0, #1
 800bd72:	d102      	bne.n	800bd7a <_lseek_r+0x1e>
 800bd74:	682b      	ldr	r3, [r5, #0]
 800bd76:	b103      	cbz	r3, 800bd7a <_lseek_r+0x1e>
 800bd78:	6023      	str	r3, [r4, #0]
 800bd7a:	bd38      	pop	{r3, r4, r5, pc}
 800bd7c:	24004e84 	.word	0x24004e84

0800bd80 <_read_r>:
 800bd80:	b538      	push	{r3, r4, r5, lr}
 800bd82:	4d07      	ldr	r5, [pc, #28]	@ (800bda0 <_read_r+0x20>)
 800bd84:	4604      	mov	r4, r0
 800bd86:	4608      	mov	r0, r1
 800bd88:	4611      	mov	r1, r2
 800bd8a:	2200      	movs	r2, #0
 800bd8c:	602a      	str	r2, [r5, #0]
 800bd8e:	461a      	mov	r2, r3
 800bd90:	f7f5 fa97 	bl	80012c2 <_read>
 800bd94:	1c43      	adds	r3, r0, #1
 800bd96:	d102      	bne.n	800bd9e <_read_r+0x1e>
 800bd98:	682b      	ldr	r3, [r5, #0]
 800bd9a:	b103      	cbz	r3, 800bd9e <_read_r+0x1e>
 800bd9c:	6023      	str	r3, [r4, #0]
 800bd9e:	bd38      	pop	{r3, r4, r5, pc}
 800bda0:	24004e84 	.word	0x24004e84

0800bda4 <_kill_r>:
 800bda4:	b538      	push	{r3, r4, r5, lr}
 800bda6:	4d07      	ldr	r5, [pc, #28]	@ (800bdc4 <_kill_r+0x20>)
 800bda8:	2300      	movs	r3, #0
 800bdaa:	4604      	mov	r4, r0
 800bdac:	4608      	mov	r0, r1
 800bdae:	4611      	mov	r1, r2
 800bdb0:	602b      	str	r3, [r5, #0]
 800bdb2:	f7f5 fa6b 	bl	800128c <_kill>
 800bdb6:	1c43      	adds	r3, r0, #1
 800bdb8:	d102      	bne.n	800bdc0 <_kill_r+0x1c>
 800bdba:	682b      	ldr	r3, [r5, #0]
 800bdbc:	b103      	cbz	r3, 800bdc0 <_kill_r+0x1c>
 800bdbe:	6023      	str	r3, [r4, #0]
 800bdc0:	bd38      	pop	{r3, r4, r5, pc}
 800bdc2:	bf00      	nop
 800bdc4:	24004e84 	.word	0x24004e84

0800bdc8 <_getpid_r>:
 800bdc8:	f7f5 ba58 	b.w	800127c <_getpid>

0800bdcc <_sbrk_r>:
 800bdcc:	b538      	push	{r3, r4, r5, lr}
 800bdce:	4d06      	ldr	r5, [pc, #24]	@ (800bde8 <_sbrk_r+0x1c>)
 800bdd0:	2300      	movs	r3, #0
 800bdd2:	4604      	mov	r4, r0
 800bdd4:	4608      	mov	r0, r1
 800bdd6:	602b      	str	r3, [r5, #0]
 800bdd8:	f7f5 fae0 	bl	800139c <_sbrk>
 800bddc:	1c43      	adds	r3, r0, #1
 800bdde:	d102      	bne.n	800bde6 <_sbrk_r+0x1a>
 800bde0:	682b      	ldr	r3, [r5, #0]
 800bde2:	b103      	cbz	r3, 800bde6 <_sbrk_r+0x1a>
 800bde4:	6023      	str	r3, [r4, #0]
 800bde6:	bd38      	pop	{r3, r4, r5, pc}
 800bde8:	24004e84 	.word	0x24004e84

0800bdec <_write_r>:
 800bdec:	b538      	push	{r3, r4, r5, lr}
 800bdee:	4d07      	ldr	r5, [pc, #28]	@ (800be0c <_write_r+0x20>)
 800bdf0:	4604      	mov	r4, r0
 800bdf2:	4608      	mov	r0, r1
 800bdf4:	4611      	mov	r1, r2
 800bdf6:	2200      	movs	r2, #0
 800bdf8:	602a      	str	r2, [r5, #0]
 800bdfa:	461a      	mov	r2, r3
 800bdfc:	f7f5 fa7e 	bl	80012fc <_write>
 800be00:	1c43      	adds	r3, r0, #1
 800be02:	d102      	bne.n	800be0a <_write_r+0x1e>
 800be04:	682b      	ldr	r3, [r5, #0]
 800be06:	b103      	cbz	r3, 800be0a <_write_r+0x1e>
 800be08:	6023      	str	r3, [r4, #0]
 800be0a:	bd38      	pop	{r3, r4, r5, pc}
 800be0c:	24004e84 	.word	0x24004e84

0800be10 <__errno>:
 800be10:	4b01      	ldr	r3, [pc, #4]	@ (800be18 <__errno+0x8>)
 800be12:	6818      	ldr	r0, [r3, #0]
 800be14:	4770      	bx	lr
 800be16:	bf00      	nop
 800be18:	24000020 	.word	0x24000020

0800be1c <__libc_init_array>:
 800be1c:	b570      	push	{r4, r5, r6, lr}
 800be1e:	4d0d      	ldr	r5, [pc, #52]	@ (800be54 <__libc_init_array+0x38>)
 800be20:	4c0d      	ldr	r4, [pc, #52]	@ (800be58 <__libc_init_array+0x3c>)
 800be22:	1b64      	subs	r4, r4, r5
 800be24:	10a4      	asrs	r4, r4, #2
 800be26:	2600      	movs	r6, #0
 800be28:	42a6      	cmp	r6, r4
 800be2a:	d109      	bne.n	800be40 <__libc_init_array+0x24>
 800be2c:	4d0b      	ldr	r5, [pc, #44]	@ (800be5c <__libc_init_array+0x40>)
 800be2e:	4c0c      	ldr	r4, [pc, #48]	@ (800be60 <__libc_init_array+0x44>)
 800be30:	f003 f8e0 	bl	800eff4 <_init>
 800be34:	1b64      	subs	r4, r4, r5
 800be36:	10a4      	asrs	r4, r4, #2
 800be38:	2600      	movs	r6, #0
 800be3a:	42a6      	cmp	r6, r4
 800be3c:	d105      	bne.n	800be4a <__libc_init_array+0x2e>
 800be3e:	bd70      	pop	{r4, r5, r6, pc}
 800be40:	f855 3b04 	ldr.w	r3, [r5], #4
 800be44:	4798      	blx	r3
 800be46:	3601      	adds	r6, #1
 800be48:	e7ee      	b.n	800be28 <__libc_init_array+0xc>
 800be4a:	f855 3b04 	ldr.w	r3, [r5], #4
 800be4e:	4798      	blx	r3
 800be50:	3601      	adds	r6, #1
 800be52:	e7f2      	b.n	800be3a <__libc_init_array+0x1e>
 800be54:	0800f6a4 	.word	0x0800f6a4
 800be58:	0800f6a4 	.word	0x0800f6a4
 800be5c:	0800f6a4 	.word	0x0800f6a4
 800be60:	0800f6a8 	.word	0x0800f6a8

0800be64 <__retarget_lock_init_recursive>:
 800be64:	4770      	bx	lr

0800be66 <__retarget_lock_acquire_recursive>:
 800be66:	4770      	bx	lr

0800be68 <__retarget_lock_release_recursive>:
 800be68:	4770      	bx	lr

0800be6a <memcpy>:
 800be6a:	440a      	add	r2, r1
 800be6c:	4291      	cmp	r1, r2
 800be6e:	f100 33ff 	add.w	r3, r0, #4294967295
 800be72:	d100      	bne.n	800be76 <memcpy+0xc>
 800be74:	4770      	bx	lr
 800be76:	b510      	push	{r4, lr}
 800be78:	f811 4b01 	ldrb.w	r4, [r1], #1
 800be7c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800be80:	4291      	cmp	r1, r2
 800be82:	d1f9      	bne.n	800be78 <memcpy+0xe>
 800be84:	bd10      	pop	{r4, pc}
	...

0800be88 <nanf>:
 800be88:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800be90 <nanf+0x8>
 800be8c:	4770      	bx	lr
 800be8e:	bf00      	nop
 800be90:	7fc00000 	.word	0x7fc00000

0800be94 <quorem>:
 800be94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be98:	6903      	ldr	r3, [r0, #16]
 800be9a:	690c      	ldr	r4, [r1, #16]
 800be9c:	42a3      	cmp	r3, r4
 800be9e:	4607      	mov	r7, r0
 800bea0:	db7e      	blt.n	800bfa0 <quorem+0x10c>
 800bea2:	3c01      	subs	r4, #1
 800bea4:	f101 0814 	add.w	r8, r1, #20
 800bea8:	00a3      	lsls	r3, r4, #2
 800beaa:	f100 0514 	add.w	r5, r0, #20
 800beae:	9300      	str	r3, [sp, #0]
 800beb0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800beb4:	9301      	str	r3, [sp, #4]
 800beb6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800beba:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bebe:	3301      	adds	r3, #1
 800bec0:	429a      	cmp	r2, r3
 800bec2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bec6:	fbb2 f6f3 	udiv	r6, r2, r3
 800beca:	d32e      	bcc.n	800bf2a <quorem+0x96>
 800becc:	f04f 0a00 	mov.w	sl, #0
 800bed0:	46c4      	mov	ip, r8
 800bed2:	46ae      	mov	lr, r5
 800bed4:	46d3      	mov	fp, sl
 800bed6:	f85c 3b04 	ldr.w	r3, [ip], #4
 800beda:	b298      	uxth	r0, r3
 800bedc:	fb06 a000 	mla	r0, r6, r0, sl
 800bee0:	0c02      	lsrs	r2, r0, #16
 800bee2:	0c1b      	lsrs	r3, r3, #16
 800bee4:	fb06 2303 	mla	r3, r6, r3, r2
 800bee8:	f8de 2000 	ldr.w	r2, [lr]
 800beec:	b280      	uxth	r0, r0
 800beee:	b292      	uxth	r2, r2
 800bef0:	1a12      	subs	r2, r2, r0
 800bef2:	445a      	add	r2, fp
 800bef4:	f8de 0000 	ldr.w	r0, [lr]
 800bef8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800befc:	b29b      	uxth	r3, r3
 800befe:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800bf02:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800bf06:	b292      	uxth	r2, r2
 800bf08:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800bf0c:	45e1      	cmp	r9, ip
 800bf0e:	f84e 2b04 	str.w	r2, [lr], #4
 800bf12:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800bf16:	d2de      	bcs.n	800bed6 <quorem+0x42>
 800bf18:	9b00      	ldr	r3, [sp, #0]
 800bf1a:	58eb      	ldr	r3, [r5, r3]
 800bf1c:	b92b      	cbnz	r3, 800bf2a <quorem+0x96>
 800bf1e:	9b01      	ldr	r3, [sp, #4]
 800bf20:	3b04      	subs	r3, #4
 800bf22:	429d      	cmp	r5, r3
 800bf24:	461a      	mov	r2, r3
 800bf26:	d32f      	bcc.n	800bf88 <quorem+0xf4>
 800bf28:	613c      	str	r4, [r7, #16]
 800bf2a:	4638      	mov	r0, r7
 800bf2c:	f001 f8a0 	bl	800d070 <__mcmp>
 800bf30:	2800      	cmp	r0, #0
 800bf32:	db25      	blt.n	800bf80 <quorem+0xec>
 800bf34:	4629      	mov	r1, r5
 800bf36:	2000      	movs	r0, #0
 800bf38:	f858 2b04 	ldr.w	r2, [r8], #4
 800bf3c:	f8d1 c000 	ldr.w	ip, [r1]
 800bf40:	fa1f fe82 	uxth.w	lr, r2
 800bf44:	fa1f f38c 	uxth.w	r3, ip
 800bf48:	eba3 030e 	sub.w	r3, r3, lr
 800bf4c:	4403      	add	r3, r0
 800bf4e:	0c12      	lsrs	r2, r2, #16
 800bf50:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800bf54:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800bf58:	b29b      	uxth	r3, r3
 800bf5a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bf5e:	45c1      	cmp	r9, r8
 800bf60:	f841 3b04 	str.w	r3, [r1], #4
 800bf64:	ea4f 4022 	mov.w	r0, r2, asr #16
 800bf68:	d2e6      	bcs.n	800bf38 <quorem+0xa4>
 800bf6a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bf6e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bf72:	b922      	cbnz	r2, 800bf7e <quorem+0xea>
 800bf74:	3b04      	subs	r3, #4
 800bf76:	429d      	cmp	r5, r3
 800bf78:	461a      	mov	r2, r3
 800bf7a:	d30b      	bcc.n	800bf94 <quorem+0x100>
 800bf7c:	613c      	str	r4, [r7, #16]
 800bf7e:	3601      	adds	r6, #1
 800bf80:	4630      	mov	r0, r6
 800bf82:	b003      	add	sp, #12
 800bf84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf88:	6812      	ldr	r2, [r2, #0]
 800bf8a:	3b04      	subs	r3, #4
 800bf8c:	2a00      	cmp	r2, #0
 800bf8e:	d1cb      	bne.n	800bf28 <quorem+0x94>
 800bf90:	3c01      	subs	r4, #1
 800bf92:	e7c6      	b.n	800bf22 <quorem+0x8e>
 800bf94:	6812      	ldr	r2, [r2, #0]
 800bf96:	3b04      	subs	r3, #4
 800bf98:	2a00      	cmp	r2, #0
 800bf9a:	d1ef      	bne.n	800bf7c <quorem+0xe8>
 800bf9c:	3c01      	subs	r4, #1
 800bf9e:	e7ea      	b.n	800bf76 <quorem+0xe2>
 800bfa0:	2000      	movs	r0, #0
 800bfa2:	e7ee      	b.n	800bf82 <quorem+0xee>
 800bfa4:	0000      	movs	r0, r0
	...

0800bfa8 <_dtoa_r>:
 800bfa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfac:	ed2d 8b02 	vpush	{d8}
 800bfb0:	69c7      	ldr	r7, [r0, #28]
 800bfb2:	b091      	sub	sp, #68	@ 0x44
 800bfb4:	ed8d 0b02 	vstr	d0, [sp, #8]
 800bfb8:	ec55 4b10 	vmov	r4, r5, d0
 800bfbc:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800bfbe:	9107      	str	r1, [sp, #28]
 800bfc0:	4681      	mov	r9, r0
 800bfc2:	9209      	str	r2, [sp, #36]	@ 0x24
 800bfc4:	930d      	str	r3, [sp, #52]	@ 0x34
 800bfc6:	b97f      	cbnz	r7, 800bfe8 <_dtoa_r+0x40>
 800bfc8:	2010      	movs	r0, #16
 800bfca:	f7fe fce9 	bl	800a9a0 <malloc>
 800bfce:	4602      	mov	r2, r0
 800bfd0:	f8c9 001c 	str.w	r0, [r9, #28]
 800bfd4:	b920      	cbnz	r0, 800bfe0 <_dtoa_r+0x38>
 800bfd6:	4ba0      	ldr	r3, [pc, #640]	@ (800c258 <_dtoa_r+0x2b0>)
 800bfd8:	21ef      	movs	r1, #239	@ 0xef
 800bfda:	48a0      	ldr	r0, [pc, #640]	@ (800c25c <_dtoa_r+0x2b4>)
 800bfdc:	f7fe fcc2 	bl	800a964 <__assert_func>
 800bfe0:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800bfe4:	6007      	str	r7, [r0, #0]
 800bfe6:	60c7      	str	r7, [r0, #12]
 800bfe8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800bfec:	6819      	ldr	r1, [r3, #0]
 800bfee:	b159      	cbz	r1, 800c008 <_dtoa_r+0x60>
 800bff0:	685a      	ldr	r2, [r3, #4]
 800bff2:	604a      	str	r2, [r1, #4]
 800bff4:	2301      	movs	r3, #1
 800bff6:	4093      	lsls	r3, r2
 800bff8:	608b      	str	r3, [r1, #8]
 800bffa:	4648      	mov	r0, r9
 800bffc:	f000 fdb4 	bl	800cb68 <_Bfree>
 800c000:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800c004:	2200      	movs	r2, #0
 800c006:	601a      	str	r2, [r3, #0]
 800c008:	1e2b      	subs	r3, r5, #0
 800c00a:	bfbb      	ittet	lt
 800c00c:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800c010:	9303      	strlt	r3, [sp, #12]
 800c012:	2300      	movge	r3, #0
 800c014:	2201      	movlt	r2, #1
 800c016:	bfac      	ite	ge
 800c018:	6033      	strge	r3, [r6, #0]
 800c01a:	6032      	strlt	r2, [r6, #0]
 800c01c:	4b90      	ldr	r3, [pc, #576]	@ (800c260 <_dtoa_r+0x2b8>)
 800c01e:	9e03      	ldr	r6, [sp, #12]
 800c020:	43b3      	bics	r3, r6
 800c022:	d110      	bne.n	800c046 <_dtoa_r+0x9e>
 800c024:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c026:	f242 730f 	movw	r3, #9999	@ 0x270f
 800c02a:	6013      	str	r3, [r2, #0]
 800c02c:	f3c6 0313 	ubfx	r3, r6, #0, #20
 800c030:	4323      	orrs	r3, r4
 800c032:	f000 84de 	beq.w	800c9f2 <_dtoa_r+0xa4a>
 800c036:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c038:	4f8a      	ldr	r7, [pc, #552]	@ (800c264 <_dtoa_r+0x2bc>)
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	f000 84e0 	beq.w	800ca00 <_dtoa_r+0xa58>
 800c040:	1cfb      	adds	r3, r7, #3
 800c042:	f000 bcdb 	b.w	800c9fc <_dtoa_r+0xa54>
 800c046:	ed9d 8b02 	vldr	d8, [sp, #8]
 800c04a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800c04e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c052:	d10a      	bne.n	800c06a <_dtoa_r+0xc2>
 800c054:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c056:	2301      	movs	r3, #1
 800c058:	6013      	str	r3, [r2, #0]
 800c05a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c05c:	b113      	cbz	r3, 800c064 <_dtoa_r+0xbc>
 800c05e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800c060:	4b81      	ldr	r3, [pc, #516]	@ (800c268 <_dtoa_r+0x2c0>)
 800c062:	6013      	str	r3, [r2, #0]
 800c064:	4f81      	ldr	r7, [pc, #516]	@ (800c26c <_dtoa_r+0x2c4>)
 800c066:	f000 bccb 	b.w	800ca00 <_dtoa_r+0xa58>
 800c06a:	aa0e      	add	r2, sp, #56	@ 0x38
 800c06c:	a90f      	add	r1, sp, #60	@ 0x3c
 800c06e:	4648      	mov	r0, r9
 800c070:	eeb0 0b48 	vmov.f64	d0, d8
 800c074:	f001 f91c 	bl	800d2b0 <__d2b>
 800c078:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800c07c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c07e:	9001      	str	r0, [sp, #4]
 800c080:	2b00      	cmp	r3, #0
 800c082:	d045      	beq.n	800c110 <_dtoa_r+0x168>
 800c084:	eeb0 7b48 	vmov.f64	d7, d8
 800c088:	ee18 1a90 	vmov	r1, s17
 800c08c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800c090:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800c094:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800c098:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800c09c:	2500      	movs	r5, #0
 800c09e:	ee07 1a90 	vmov	s15, r1
 800c0a2:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800c0a6:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800c240 <_dtoa_r+0x298>
 800c0aa:	ee37 7b46 	vsub.f64	d7, d7, d6
 800c0ae:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800c248 <_dtoa_r+0x2a0>
 800c0b2:	eea7 6b05 	vfma.f64	d6, d7, d5
 800c0b6:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800c250 <_dtoa_r+0x2a8>
 800c0ba:	ee07 3a90 	vmov	s15, r3
 800c0be:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800c0c2:	eeb0 7b46 	vmov.f64	d7, d6
 800c0c6:	eea4 7b05 	vfma.f64	d7, d4, d5
 800c0ca:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800c0ce:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800c0d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c0d6:	ee16 8a90 	vmov	r8, s13
 800c0da:	d508      	bpl.n	800c0ee <_dtoa_r+0x146>
 800c0dc:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800c0e0:	eeb4 6b47 	vcmp.f64	d6, d7
 800c0e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c0e8:	bf18      	it	ne
 800c0ea:	f108 38ff 	addne.w	r8, r8, #4294967295
 800c0ee:	f1b8 0f16 	cmp.w	r8, #22
 800c0f2:	d82b      	bhi.n	800c14c <_dtoa_r+0x1a4>
 800c0f4:	495e      	ldr	r1, [pc, #376]	@ (800c270 <_dtoa_r+0x2c8>)
 800c0f6:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800c0fa:	ed91 7b00 	vldr	d7, [r1]
 800c0fe:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800c102:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c106:	d501      	bpl.n	800c10c <_dtoa_r+0x164>
 800c108:	f108 38ff 	add.w	r8, r8, #4294967295
 800c10c:	2100      	movs	r1, #0
 800c10e:	e01e      	b.n	800c14e <_dtoa_r+0x1a6>
 800c110:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c112:	4413      	add	r3, r2
 800c114:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 800c118:	2920      	cmp	r1, #32
 800c11a:	bfc1      	itttt	gt
 800c11c:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 800c120:	408e      	lslgt	r6, r1
 800c122:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800c126:	fa24 f101 	lsrgt.w	r1, r4, r1
 800c12a:	bfd6      	itet	le
 800c12c:	f1c1 0120 	rsble	r1, r1, #32
 800c130:	4331      	orrgt	r1, r6
 800c132:	fa04 f101 	lslle.w	r1, r4, r1
 800c136:	ee07 1a90 	vmov	s15, r1
 800c13a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800c13e:	3b01      	subs	r3, #1
 800c140:	ee17 1a90 	vmov	r1, s15
 800c144:	2501      	movs	r5, #1
 800c146:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800c14a:	e7a8      	b.n	800c09e <_dtoa_r+0xf6>
 800c14c:	2101      	movs	r1, #1
 800c14e:	1ad2      	subs	r2, r2, r3
 800c150:	1e53      	subs	r3, r2, #1
 800c152:	9306      	str	r3, [sp, #24]
 800c154:	bf45      	ittet	mi
 800c156:	f1c2 0301 	rsbmi	r3, r2, #1
 800c15a:	9305      	strmi	r3, [sp, #20]
 800c15c:	2300      	movpl	r3, #0
 800c15e:	2300      	movmi	r3, #0
 800c160:	bf4c      	ite	mi
 800c162:	9306      	strmi	r3, [sp, #24]
 800c164:	9305      	strpl	r3, [sp, #20]
 800c166:	f1b8 0f00 	cmp.w	r8, #0
 800c16a:	910c      	str	r1, [sp, #48]	@ 0x30
 800c16c:	db18      	blt.n	800c1a0 <_dtoa_r+0x1f8>
 800c16e:	9b06      	ldr	r3, [sp, #24]
 800c170:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800c174:	4443      	add	r3, r8
 800c176:	9306      	str	r3, [sp, #24]
 800c178:	2300      	movs	r3, #0
 800c17a:	9a07      	ldr	r2, [sp, #28]
 800c17c:	2a09      	cmp	r2, #9
 800c17e:	d849      	bhi.n	800c214 <_dtoa_r+0x26c>
 800c180:	2a05      	cmp	r2, #5
 800c182:	bfc4      	itt	gt
 800c184:	3a04      	subgt	r2, #4
 800c186:	9207      	strgt	r2, [sp, #28]
 800c188:	9a07      	ldr	r2, [sp, #28]
 800c18a:	f1a2 0202 	sub.w	r2, r2, #2
 800c18e:	bfcc      	ite	gt
 800c190:	2400      	movgt	r4, #0
 800c192:	2401      	movle	r4, #1
 800c194:	2a03      	cmp	r2, #3
 800c196:	d848      	bhi.n	800c22a <_dtoa_r+0x282>
 800c198:	e8df f002 	tbb	[pc, r2]
 800c19c:	3a2c2e0b 	.word	0x3a2c2e0b
 800c1a0:	9b05      	ldr	r3, [sp, #20]
 800c1a2:	2200      	movs	r2, #0
 800c1a4:	eba3 0308 	sub.w	r3, r3, r8
 800c1a8:	9305      	str	r3, [sp, #20]
 800c1aa:	920a      	str	r2, [sp, #40]	@ 0x28
 800c1ac:	f1c8 0300 	rsb	r3, r8, #0
 800c1b0:	e7e3      	b.n	800c17a <_dtoa_r+0x1d2>
 800c1b2:	2200      	movs	r2, #0
 800c1b4:	9208      	str	r2, [sp, #32]
 800c1b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c1b8:	2a00      	cmp	r2, #0
 800c1ba:	dc39      	bgt.n	800c230 <_dtoa_r+0x288>
 800c1bc:	f04f 0b01 	mov.w	fp, #1
 800c1c0:	46da      	mov	sl, fp
 800c1c2:	465a      	mov	r2, fp
 800c1c4:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800c1c8:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800c1cc:	2100      	movs	r1, #0
 800c1ce:	2004      	movs	r0, #4
 800c1d0:	f100 0614 	add.w	r6, r0, #20
 800c1d4:	4296      	cmp	r6, r2
 800c1d6:	d930      	bls.n	800c23a <_dtoa_r+0x292>
 800c1d8:	6079      	str	r1, [r7, #4]
 800c1da:	4648      	mov	r0, r9
 800c1dc:	9304      	str	r3, [sp, #16]
 800c1de:	f000 fc83 	bl	800cae8 <_Balloc>
 800c1e2:	9b04      	ldr	r3, [sp, #16]
 800c1e4:	4607      	mov	r7, r0
 800c1e6:	2800      	cmp	r0, #0
 800c1e8:	d146      	bne.n	800c278 <_dtoa_r+0x2d0>
 800c1ea:	4b22      	ldr	r3, [pc, #136]	@ (800c274 <_dtoa_r+0x2cc>)
 800c1ec:	4602      	mov	r2, r0
 800c1ee:	f240 11af 	movw	r1, #431	@ 0x1af
 800c1f2:	e6f2      	b.n	800bfda <_dtoa_r+0x32>
 800c1f4:	2201      	movs	r2, #1
 800c1f6:	e7dd      	b.n	800c1b4 <_dtoa_r+0x20c>
 800c1f8:	2200      	movs	r2, #0
 800c1fa:	9208      	str	r2, [sp, #32]
 800c1fc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c1fe:	eb08 0b02 	add.w	fp, r8, r2
 800c202:	f10b 0a01 	add.w	sl, fp, #1
 800c206:	4652      	mov	r2, sl
 800c208:	2a01      	cmp	r2, #1
 800c20a:	bfb8      	it	lt
 800c20c:	2201      	movlt	r2, #1
 800c20e:	e7db      	b.n	800c1c8 <_dtoa_r+0x220>
 800c210:	2201      	movs	r2, #1
 800c212:	e7f2      	b.n	800c1fa <_dtoa_r+0x252>
 800c214:	2401      	movs	r4, #1
 800c216:	2200      	movs	r2, #0
 800c218:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800c21c:	f04f 3bff 	mov.w	fp, #4294967295
 800c220:	2100      	movs	r1, #0
 800c222:	46da      	mov	sl, fp
 800c224:	2212      	movs	r2, #18
 800c226:	9109      	str	r1, [sp, #36]	@ 0x24
 800c228:	e7ce      	b.n	800c1c8 <_dtoa_r+0x220>
 800c22a:	2201      	movs	r2, #1
 800c22c:	9208      	str	r2, [sp, #32]
 800c22e:	e7f5      	b.n	800c21c <_dtoa_r+0x274>
 800c230:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 800c234:	46da      	mov	sl, fp
 800c236:	465a      	mov	r2, fp
 800c238:	e7c6      	b.n	800c1c8 <_dtoa_r+0x220>
 800c23a:	3101      	adds	r1, #1
 800c23c:	0040      	lsls	r0, r0, #1
 800c23e:	e7c7      	b.n	800c1d0 <_dtoa_r+0x228>
 800c240:	636f4361 	.word	0x636f4361
 800c244:	3fd287a7 	.word	0x3fd287a7
 800c248:	8b60c8b3 	.word	0x8b60c8b3
 800c24c:	3fc68a28 	.word	0x3fc68a28
 800c250:	509f79fb 	.word	0x509f79fb
 800c254:	3fd34413 	.word	0x3fd34413
 800c258:	0800f2ee 	.word	0x0800f2ee
 800c25c:	0800f305 	.word	0x0800f305
 800c260:	7ff00000 	.word	0x7ff00000
 800c264:	0800f2ea 	.word	0x0800f2ea
 800c268:	0800f2b9 	.word	0x0800f2b9
 800c26c:	0800f2b8 	.word	0x0800f2b8
 800c270:	0800f400 	.word	0x0800f400
 800c274:	0800f35d 	.word	0x0800f35d
 800c278:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800c27c:	f1ba 0f0e 	cmp.w	sl, #14
 800c280:	6010      	str	r0, [r2, #0]
 800c282:	d86f      	bhi.n	800c364 <_dtoa_r+0x3bc>
 800c284:	2c00      	cmp	r4, #0
 800c286:	d06d      	beq.n	800c364 <_dtoa_r+0x3bc>
 800c288:	f1b8 0f00 	cmp.w	r8, #0
 800c28c:	f340 80c2 	ble.w	800c414 <_dtoa_r+0x46c>
 800c290:	4aca      	ldr	r2, [pc, #808]	@ (800c5bc <_dtoa_r+0x614>)
 800c292:	f008 010f 	and.w	r1, r8, #15
 800c296:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800c29a:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800c29e:	ed92 7b00 	vldr	d7, [r2]
 800c2a2:	ea4f 1128 	mov.w	r1, r8, asr #4
 800c2a6:	f000 80a9 	beq.w	800c3fc <_dtoa_r+0x454>
 800c2aa:	4ac5      	ldr	r2, [pc, #788]	@ (800c5c0 <_dtoa_r+0x618>)
 800c2ac:	ed92 6b08 	vldr	d6, [r2, #32]
 800c2b0:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800c2b4:	ed8d 6b02 	vstr	d6, [sp, #8]
 800c2b8:	f001 010f 	and.w	r1, r1, #15
 800c2bc:	2203      	movs	r2, #3
 800c2be:	48c0      	ldr	r0, [pc, #768]	@ (800c5c0 <_dtoa_r+0x618>)
 800c2c0:	2900      	cmp	r1, #0
 800c2c2:	f040 809d 	bne.w	800c400 <_dtoa_r+0x458>
 800c2c6:	ed9d 6b02 	vldr	d6, [sp, #8]
 800c2ca:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800c2ce:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c2d2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800c2d4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c2d8:	2900      	cmp	r1, #0
 800c2da:	f000 80c1 	beq.w	800c460 <_dtoa_r+0x4b8>
 800c2de:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800c2e2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800c2e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c2ea:	f140 80b9 	bpl.w	800c460 <_dtoa_r+0x4b8>
 800c2ee:	f1ba 0f00 	cmp.w	sl, #0
 800c2f2:	f000 80b5 	beq.w	800c460 <_dtoa_r+0x4b8>
 800c2f6:	f1bb 0f00 	cmp.w	fp, #0
 800c2fa:	dd31      	ble.n	800c360 <_dtoa_r+0x3b8>
 800c2fc:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800c300:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c304:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c308:	f108 31ff 	add.w	r1, r8, #4294967295
 800c30c:	9104      	str	r1, [sp, #16]
 800c30e:	3201      	adds	r2, #1
 800c310:	465c      	mov	r4, fp
 800c312:	ed9d 6b02 	vldr	d6, [sp, #8]
 800c316:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800c31a:	ee07 2a90 	vmov	s15, r2
 800c31e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800c322:	eea7 5b06 	vfma.f64	d5, d7, d6
 800c326:	ee15 2a90 	vmov	r2, s11
 800c32a:	ec51 0b15 	vmov	r0, r1, d5
 800c32e:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800c332:	2c00      	cmp	r4, #0
 800c334:	f040 8098 	bne.w	800c468 <_dtoa_r+0x4c0>
 800c338:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800c33c:	ee36 6b47 	vsub.f64	d6, d6, d7
 800c340:	ec41 0b17 	vmov	d7, r0, r1
 800c344:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c348:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c34c:	f300 8261 	bgt.w	800c812 <_dtoa_r+0x86a>
 800c350:	eeb1 7b47 	vneg.f64	d7, d7
 800c354:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c358:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c35c:	f100 80f5 	bmi.w	800c54a <_dtoa_r+0x5a2>
 800c360:	ed8d 8b02 	vstr	d8, [sp, #8]
 800c364:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800c366:	2a00      	cmp	r2, #0
 800c368:	f2c0 812c 	blt.w	800c5c4 <_dtoa_r+0x61c>
 800c36c:	f1b8 0f0e 	cmp.w	r8, #14
 800c370:	f300 8128 	bgt.w	800c5c4 <_dtoa_r+0x61c>
 800c374:	4b91      	ldr	r3, [pc, #580]	@ (800c5bc <_dtoa_r+0x614>)
 800c376:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800c37a:	ed93 6b00 	vldr	d6, [r3]
 800c37e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c380:	2b00      	cmp	r3, #0
 800c382:	da03      	bge.n	800c38c <_dtoa_r+0x3e4>
 800c384:	f1ba 0f00 	cmp.w	sl, #0
 800c388:	f340 80d2 	ble.w	800c530 <_dtoa_r+0x588>
 800c38c:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800c390:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c394:	463e      	mov	r6, r7
 800c396:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800c39a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800c39e:	ee15 3a10 	vmov	r3, s10
 800c3a2:	3330      	adds	r3, #48	@ 0x30
 800c3a4:	f806 3b01 	strb.w	r3, [r6], #1
 800c3a8:	1bf3      	subs	r3, r6, r7
 800c3aa:	459a      	cmp	sl, r3
 800c3ac:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800c3b0:	eea3 7b46 	vfms.f64	d7, d3, d6
 800c3b4:	f040 80f8 	bne.w	800c5a8 <_dtoa_r+0x600>
 800c3b8:	ee37 7b07 	vadd.f64	d7, d7, d7
 800c3bc:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800c3c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c3c4:	f300 80dd 	bgt.w	800c582 <_dtoa_r+0x5da>
 800c3c8:	eeb4 7b46 	vcmp.f64	d7, d6
 800c3cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c3d0:	d104      	bne.n	800c3dc <_dtoa_r+0x434>
 800c3d2:	ee15 3a10 	vmov	r3, s10
 800c3d6:	07db      	lsls	r3, r3, #31
 800c3d8:	f100 80d3 	bmi.w	800c582 <_dtoa_r+0x5da>
 800c3dc:	9901      	ldr	r1, [sp, #4]
 800c3de:	4648      	mov	r0, r9
 800c3e0:	f000 fbc2 	bl	800cb68 <_Bfree>
 800c3e4:	2300      	movs	r3, #0
 800c3e6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c3e8:	7033      	strb	r3, [r6, #0]
 800c3ea:	f108 0301 	add.w	r3, r8, #1
 800c3ee:	6013      	str	r3, [r2, #0]
 800c3f0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	f000 8304 	beq.w	800ca00 <_dtoa_r+0xa58>
 800c3f8:	601e      	str	r6, [r3, #0]
 800c3fa:	e301      	b.n	800ca00 <_dtoa_r+0xa58>
 800c3fc:	2202      	movs	r2, #2
 800c3fe:	e75e      	b.n	800c2be <_dtoa_r+0x316>
 800c400:	07cc      	lsls	r4, r1, #31
 800c402:	d504      	bpl.n	800c40e <_dtoa_r+0x466>
 800c404:	ed90 6b00 	vldr	d6, [r0]
 800c408:	3201      	adds	r2, #1
 800c40a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c40e:	1049      	asrs	r1, r1, #1
 800c410:	3008      	adds	r0, #8
 800c412:	e755      	b.n	800c2c0 <_dtoa_r+0x318>
 800c414:	d022      	beq.n	800c45c <_dtoa_r+0x4b4>
 800c416:	f1c8 0100 	rsb	r1, r8, #0
 800c41a:	4a68      	ldr	r2, [pc, #416]	@ (800c5bc <_dtoa_r+0x614>)
 800c41c:	f001 000f 	and.w	r0, r1, #15
 800c420:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800c424:	ed92 7b00 	vldr	d7, [r2]
 800c428:	ee28 7b07 	vmul.f64	d7, d8, d7
 800c42c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c430:	4863      	ldr	r0, [pc, #396]	@ (800c5c0 <_dtoa_r+0x618>)
 800c432:	1109      	asrs	r1, r1, #4
 800c434:	2400      	movs	r4, #0
 800c436:	2202      	movs	r2, #2
 800c438:	b929      	cbnz	r1, 800c446 <_dtoa_r+0x49e>
 800c43a:	2c00      	cmp	r4, #0
 800c43c:	f43f af49 	beq.w	800c2d2 <_dtoa_r+0x32a>
 800c440:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c444:	e745      	b.n	800c2d2 <_dtoa_r+0x32a>
 800c446:	07ce      	lsls	r6, r1, #31
 800c448:	d505      	bpl.n	800c456 <_dtoa_r+0x4ae>
 800c44a:	ed90 6b00 	vldr	d6, [r0]
 800c44e:	3201      	adds	r2, #1
 800c450:	2401      	movs	r4, #1
 800c452:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c456:	1049      	asrs	r1, r1, #1
 800c458:	3008      	adds	r0, #8
 800c45a:	e7ed      	b.n	800c438 <_dtoa_r+0x490>
 800c45c:	2202      	movs	r2, #2
 800c45e:	e738      	b.n	800c2d2 <_dtoa_r+0x32a>
 800c460:	f8cd 8010 	str.w	r8, [sp, #16]
 800c464:	4654      	mov	r4, sl
 800c466:	e754      	b.n	800c312 <_dtoa_r+0x36a>
 800c468:	4a54      	ldr	r2, [pc, #336]	@ (800c5bc <_dtoa_r+0x614>)
 800c46a:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800c46e:	ed12 4b02 	vldr	d4, [r2, #-8]
 800c472:	9a08      	ldr	r2, [sp, #32]
 800c474:	ec41 0b17 	vmov	d7, r0, r1
 800c478:	443c      	add	r4, r7
 800c47a:	b34a      	cbz	r2, 800c4d0 <_dtoa_r+0x528>
 800c47c:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 800c480:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 800c484:	463e      	mov	r6, r7
 800c486:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800c48a:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800c48e:	ee35 7b47 	vsub.f64	d7, d5, d7
 800c492:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800c496:	ee14 2a90 	vmov	r2, s9
 800c49a:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800c49e:	3230      	adds	r2, #48	@ 0x30
 800c4a0:	ee36 6b45 	vsub.f64	d6, d6, d5
 800c4a4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c4a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c4ac:	f806 2b01 	strb.w	r2, [r6], #1
 800c4b0:	d438      	bmi.n	800c524 <_dtoa_r+0x57c>
 800c4b2:	ee32 5b46 	vsub.f64	d5, d2, d6
 800c4b6:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800c4ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c4be:	d462      	bmi.n	800c586 <_dtoa_r+0x5de>
 800c4c0:	42a6      	cmp	r6, r4
 800c4c2:	f43f af4d 	beq.w	800c360 <_dtoa_r+0x3b8>
 800c4c6:	ee27 7b03 	vmul.f64	d7, d7, d3
 800c4ca:	ee26 6b03 	vmul.f64	d6, d6, d3
 800c4ce:	e7e0      	b.n	800c492 <_dtoa_r+0x4ea>
 800c4d0:	4621      	mov	r1, r4
 800c4d2:	463e      	mov	r6, r7
 800c4d4:	ee27 7b04 	vmul.f64	d7, d7, d4
 800c4d8:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800c4dc:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800c4e0:	ee14 2a90 	vmov	r2, s9
 800c4e4:	3230      	adds	r2, #48	@ 0x30
 800c4e6:	f806 2b01 	strb.w	r2, [r6], #1
 800c4ea:	42a6      	cmp	r6, r4
 800c4ec:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800c4f0:	ee36 6b45 	vsub.f64	d6, d6, d5
 800c4f4:	d119      	bne.n	800c52a <_dtoa_r+0x582>
 800c4f6:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800c4fa:	ee37 4b05 	vadd.f64	d4, d7, d5
 800c4fe:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800c502:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c506:	dc3e      	bgt.n	800c586 <_dtoa_r+0x5de>
 800c508:	ee35 5b47 	vsub.f64	d5, d5, d7
 800c50c:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800c510:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c514:	f57f af24 	bpl.w	800c360 <_dtoa_r+0x3b8>
 800c518:	460e      	mov	r6, r1
 800c51a:	3901      	subs	r1, #1
 800c51c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c520:	2b30      	cmp	r3, #48	@ 0x30
 800c522:	d0f9      	beq.n	800c518 <_dtoa_r+0x570>
 800c524:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800c528:	e758      	b.n	800c3dc <_dtoa_r+0x434>
 800c52a:	ee26 6b03 	vmul.f64	d6, d6, d3
 800c52e:	e7d5      	b.n	800c4dc <_dtoa_r+0x534>
 800c530:	d10b      	bne.n	800c54a <_dtoa_r+0x5a2>
 800c532:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800c536:	ee26 6b07 	vmul.f64	d6, d6, d7
 800c53a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c53e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c542:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c546:	f2c0 8161 	blt.w	800c80c <_dtoa_r+0x864>
 800c54a:	2400      	movs	r4, #0
 800c54c:	4625      	mov	r5, r4
 800c54e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c550:	43db      	mvns	r3, r3
 800c552:	9304      	str	r3, [sp, #16]
 800c554:	463e      	mov	r6, r7
 800c556:	f04f 0800 	mov.w	r8, #0
 800c55a:	4621      	mov	r1, r4
 800c55c:	4648      	mov	r0, r9
 800c55e:	f000 fb03 	bl	800cb68 <_Bfree>
 800c562:	2d00      	cmp	r5, #0
 800c564:	d0de      	beq.n	800c524 <_dtoa_r+0x57c>
 800c566:	f1b8 0f00 	cmp.w	r8, #0
 800c56a:	d005      	beq.n	800c578 <_dtoa_r+0x5d0>
 800c56c:	45a8      	cmp	r8, r5
 800c56e:	d003      	beq.n	800c578 <_dtoa_r+0x5d0>
 800c570:	4641      	mov	r1, r8
 800c572:	4648      	mov	r0, r9
 800c574:	f000 faf8 	bl	800cb68 <_Bfree>
 800c578:	4629      	mov	r1, r5
 800c57a:	4648      	mov	r0, r9
 800c57c:	f000 faf4 	bl	800cb68 <_Bfree>
 800c580:	e7d0      	b.n	800c524 <_dtoa_r+0x57c>
 800c582:	f8cd 8010 	str.w	r8, [sp, #16]
 800c586:	4633      	mov	r3, r6
 800c588:	461e      	mov	r6, r3
 800c58a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c58e:	2a39      	cmp	r2, #57	@ 0x39
 800c590:	d106      	bne.n	800c5a0 <_dtoa_r+0x5f8>
 800c592:	429f      	cmp	r7, r3
 800c594:	d1f8      	bne.n	800c588 <_dtoa_r+0x5e0>
 800c596:	9a04      	ldr	r2, [sp, #16]
 800c598:	3201      	adds	r2, #1
 800c59a:	9204      	str	r2, [sp, #16]
 800c59c:	2230      	movs	r2, #48	@ 0x30
 800c59e:	703a      	strb	r2, [r7, #0]
 800c5a0:	781a      	ldrb	r2, [r3, #0]
 800c5a2:	3201      	adds	r2, #1
 800c5a4:	701a      	strb	r2, [r3, #0]
 800c5a6:	e7bd      	b.n	800c524 <_dtoa_r+0x57c>
 800c5a8:	ee27 7b04 	vmul.f64	d7, d7, d4
 800c5ac:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c5b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c5b4:	f47f aeef 	bne.w	800c396 <_dtoa_r+0x3ee>
 800c5b8:	e710      	b.n	800c3dc <_dtoa_r+0x434>
 800c5ba:	bf00      	nop
 800c5bc:	0800f400 	.word	0x0800f400
 800c5c0:	0800f3d8 	.word	0x0800f3d8
 800c5c4:	9908      	ldr	r1, [sp, #32]
 800c5c6:	2900      	cmp	r1, #0
 800c5c8:	f000 80e3 	beq.w	800c792 <_dtoa_r+0x7ea>
 800c5cc:	9907      	ldr	r1, [sp, #28]
 800c5ce:	2901      	cmp	r1, #1
 800c5d0:	f300 80c8 	bgt.w	800c764 <_dtoa_r+0x7bc>
 800c5d4:	2d00      	cmp	r5, #0
 800c5d6:	f000 80c1 	beq.w	800c75c <_dtoa_r+0x7b4>
 800c5da:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800c5de:	9e05      	ldr	r6, [sp, #20]
 800c5e0:	461c      	mov	r4, r3
 800c5e2:	9304      	str	r3, [sp, #16]
 800c5e4:	9b05      	ldr	r3, [sp, #20]
 800c5e6:	4413      	add	r3, r2
 800c5e8:	9305      	str	r3, [sp, #20]
 800c5ea:	9b06      	ldr	r3, [sp, #24]
 800c5ec:	2101      	movs	r1, #1
 800c5ee:	4413      	add	r3, r2
 800c5f0:	4648      	mov	r0, r9
 800c5f2:	9306      	str	r3, [sp, #24]
 800c5f4:	f000 fbb6 	bl	800cd64 <__i2b>
 800c5f8:	9b04      	ldr	r3, [sp, #16]
 800c5fa:	4605      	mov	r5, r0
 800c5fc:	b166      	cbz	r6, 800c618 <_dtoa_r+0x670>
 800c5fe:	9a06      	ldr	r2, [sp, #24]
 800c600:	2a00      	cmp	r2, #0
 800c602:	dd09      	ble.n	800c618 <_dtoa_r+0x670>
 800c604:	42b2      	cmp	r2, r6
 800c606:	9905      	ldr	r1, [sp, #20]
 800c608:	bfa8      	it	ge
 800c60a:	4632      	movge	r2, r6
 800c60c:	1a89      	subs	r1, r1, r2
 800c60e:	9105      	str	r1, [sp, #20]
 800c610:	9906      	ldr	r1, [sp, #24]
 800c612:	1ab6      	subs	r6, r6, r2
 800c614:	1a8a      	subs	r2, r1, r2
 800c616:	9206      	str	r2, [sp, #24]
 800c618:	b1fb      	cbz	r3, 800c65a <_dtoa_r+0x6b2>
 800c61a:	9a08      	ldr	r2, [sp, #32]
 800c61c:	2a00      	cmp	r2, #0
 800c61e:	f000 80bc 	beq.w	800c79a <_dtoa_r+0x7f2>
 800c622:	b19c      	cbz	r4, 800c64c <_dtoa_r+0x6a4>
 800c624:	4629      	mov	r1, r5
 800c626:	4622      	mov	r2, r4
 800c628:	4648      	mov	r0, r9
 800c62a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c62c:	f000 fc5a 	bl	800cee4 <__pow5mult>
 800c630:	9a01      	ldr	r2, [sp, #4]
 800c632:	4601      	mov	r1, r0
 800c634:	4605      	mov	r5, r0
 800c636:	4648      	mov	r0, r9
 800c638:	f000 fbaa 	bl	800cd90 <__multiply>
 800c63c:	9901      	ldr	r1, [sp, #4]
 800c63e:	9004      	str	r0, [sp, #16]
 800c640:	4648      	mov	r0, r9
 800c642:	f000 fa91 	bl	800cb68 <_Bfree>
 800c646:	9a04      	ldr	r2, [sp, #16]
 800c648:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c64a:	9201      	str	r2, [sp, #4]
 800c64c:	1b1a      	subs	r2, r3, r4
 800c64e:	d004      	beq.n	800c65a <_dtoa_r+0x6b2>
 800c650:	9901      	ldr	r1, [sp, #4]
 800c652:	4648      	mov	r0, r9
 800c654:	f000 fc46 	bl	800cee4 <__pow5mult>
 800c658:	9001      	str	r0, [sp, #4]
 800c65a:	2101      	movs	r1, #1
 800c65c:	4648      	mov	r0, r9
 800c65e:	f000 fb81 	bl	800cd64 <__i2b>
 800c662:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c664:	4604      	mov	r4, r0
 800c666:	2b00      	cmp	r3, #0
 800c668:	f000 81d0 	beq.w	800ca0c <_dtoa_r+0xa64>
 800c66c:	461a      	mov	r2, r3
 800c66e:	4601      	mov	r1, r0
 800c670:	4648      	mov	r0, r9
 800c672:	f000 fc37 	bl	800cee4 <__pow5mult>
 800c676:	9b07      	ldr	r3, [sp, #28]
 800c678:	2b01      	cmp	r3, #1
 800c67a:	4604      	mov	r4, r0
 800c67c:	f300 8095 	bgt.w	800c7aa <_dtoa_r+0x802>
 800c680:	9b02      	ldr	r3, [sp, #8]
 800c682:	2b00      	cmp	r3, #0
 800c684:	f040 808b 	bne.w	800c79e <_dtoa_r+0x7f6>
 800c688:	9b03      	ldr	r3, [sp, #12]
 800c68a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800c68e:	2a00      	cmp	r2, #0
 800c690:	f040 8087 	bne.w	800c7a2 <_dtoa_r+0x7fa>
 800c694:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800c698:	0d12      	lsrs	r2, r2, #20
 800c69a:	0512      	lsls	r2, r2, #20
 800c69c:	2a00      	cmp	r2, #0
 800c69e:	f000 8082 	beq.w	800c7a6 <_dtoa_r+0x7fe>
 800c6a2:	9b05      	ldr	r3, [sp, #20]
 800c6a4:	3301      	adds	r3, #1
 800c6a6:	9305      	str	r3, [sp, #20]
 800c6a8:	9b06      	ldr	r3, [sp, #24]
 800c6aa:	3301      	adds	r3, #1
 800c6ac:	9306      	str	r3, [sp, #24]
 800c6ae:	2301      	movs	r3, #1
 800c6b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c6b2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	f000 81af 	beq.w	800ca18 <_dtoa_r+0xa70>
 800c6ba:	6922      	ldr	r2, [r4, #16]
 800c6bc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800c6c0:	6910      	ldr	r0, [r2, #16]
 800c6c2:	f000 fb03 	bl	800cccc <__hi0bits>
 800c6c6:	f1c0 0020 	rsb	r0, r0, #32
 800c6ca:	9b06      	ldr	r3, [sp, #24]
 800c6cc:	4418      	add	r0, r3
 800c6ce:	f010 001f 	ands.w	r0, r0, #31
 800c6d2:	d076      	beq.n	800c7c2 <_dtoa_r+0x81a>
 800c6d4:	f1c0 0220 	rsb	r2, r0, #32
 800c6d8:	2a04      	cmp	r2, #4
 800c6da:	dd69      	ble.n	800c7b0 <_dtoa_r+0x808>
 800c6dc:	9b05      	ldr	r3, [sp, #20]
 800c6de:	f1c0 001c 	rsb	r0, r0, #28
 800c6e2:	4403      	add	r3, r0
 800c6e4:	9305      	str	r3, [sp, #20]
 800c6e6:	9b06      	ldr	r3, [sp, #24]
 800c6e8:	4406      	add	r6, r0
 800c6ea:	4403      	add	r3, r0
 800c6ec:	9306      	str	r3, [sp, #24]
 800c6ee:	9b05      	ldr	r3, [sp, #20]
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	dd05      	ble.n	800c700 <_dtoa_r+0x758>
 800c6f4:	9901      	ldr	r1, [sp, #4]
 800c6f6:	461a      	mov	r2, r3
 800c6f8:	4648      	mov	r0, r9
 800c6fa:	f000 fc4d 	bl	800cf98 <__lshift>
 800c6fe:	9001      	str	r0, [sp, #4]
 800c700:	9b06      	ldr	r3, [sp, #24]
 800c702:	2b00      	cmp	r3, #0
 800c704:	dd05      	ble.n	800c712 <_dtoa_r+0x76a>
 800c706:	4621      	mov	r1, r4
 800c708:	461a      	mov	r2, r3
 800c70a:	4648      	mov	r0, r9
 800c70c:	f000 fc44 	bl	800cf98 <__lshift>
 800c710:	4604      	mov	r4, r0
 800c712:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c714:	2b00      	cmp	r3, #0
 800c716:	d056      	beq.n	800c7c6 <_dtoa_r+0x81e>
 800c718:	9801      	ldr	r0, [sp, #4]
 800c71a:	4621      	mov	r1, r4
 800c71c:	f000 fca8 	bl	800d070 <__mcmp>
 800c720:	2800      	cmp	r0, #0
 800c722:	da50      	bge.n	800c7c6 <_dtoa_r+0x81e>
 800c724:	f108 33ff 	add.w	r3, r8, #4294967295
 800c728:	9304      	str	r3, [sp, #16]
 800c72a:	9901      	ldr	r1, [sp, #4]
 800c72c:	2300      	movs	r3, #0
 800c72e:	220a      	movs	r2, #10
 800c730:	4648      	mov	r0, r9
 800c732:	f000 fa3b 	bl	800cbac <__multadd>
 800c736:	9b08      	ldr	r3, [sp, #32]
 800c738:	9001      	str	r0, [sp, #4]
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	f000 816e 	beq.w	800ca1c <_dtoa_r+0xa74>
 800c740:	4629      	mov	r1, r5
 800c742:	2300      	movs	r3, #0
 800c744:	220a      	movs	r2, #10
 800c746:	4648      	mov	r0, r9
 800c748:	f000 fa30 	bl	800cbac <__multadd>
 800c74c:	f1bb 0f00 	cmp.w	fp, #0
 800c750:	4605      	mov	r5, r0
 800c752:	dc64      	bgt.n	800c81e <_dtoa_r+0x876>
 800c754:	9b07      	ldr	r3, [sp, #28]
 800c756:	2b02      	cmp	r3, #2
 800c758:	dc3e      	bgt.n	800c7d8 <_dtoa_r+0x830>
 800c75a:	e060      	b.n	800c81e <_dtoa_r+0x876>
 800c75c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c75e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800c762:	e73c      	b.n	800c5de <_dtoa_r+0x636>
 800c764:	f10a 34ff 	add.w	r4, sl, #4294967295
 800c768:	42a3      	cmp	r3, r4
 800c76a:	bfbf      	itttt	lt
 800c76c:	1ae2      	sublt	r2, r4, r3
 800c76e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800c770:	189b      	addlt	r3, r3, r2
 800c772:	930a      	strlt	r3, [sp, #40]	@ 0x28
 800c774:	bfae      	itee	ge
 800c776:	1b1c      	subge	r4, r3, r4
 800c778:	4623      	movlt	r3, r4
 800c77a:	2400      	movlt	r4, #0
 800c77c:	f1ba 0f00 	cmp.w	sl, #0
 800c780:	bfb5      	itete	lt
 800c782:	9a05      	ldrlt	r2, [sp, #20]
 800c784:	9e05      	ldrge	r6, [sp, #20]
 800c786:	eba2 060a 	sublt.w	r6, r2, sl
 800c78a:	4652      	movge	r2, sl
 800c78c:	bfb8      	it	lt
 800c78e:	2200      	movlt	r2, #0
 800c790:	e727      	b.n	800c5e2 <_dtoa_r+0x63a>
 800c792:	9e05      	ldr	r6, [sp, #20]
 800c794:	9d08      	ldr	r5, [sp, #32]
 800c796:	461c      	mov	r4, r3
 800c798:	e730      	b.n	800c5fc <_dtoa_r+0x654>
 800c79a:	461a      	mov	r2, r3
 800c79c:	e758      	b.n	800c650 <_dtoa_r+0x6a8>
 800c79e:	2300      	movs	r3, #0
 800c7a0:	e786      	b.n	800c6b0 <_dtoa_r+0x708>
 800c7a2:	9b02      	ldr	r3, [sp, #8]
 800c7a4:	e784      	b.n	800c6b0 <_dtoa_r+0x708>
 800c7a6:	920b      	str	r2, [sp, #44]	@ 0x2c
 800c7a8:	e783      	b.n	800c6b2 <_dtoa_r+0x70a>
 800c7aa:	2300      	movs	r3, #0
 800c7ac:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c7ae:	e784      	b.n	800c6ba <_dtoa_r+0x712>
 800c7b0:	d09d      	beq.n	800c6ee <_dtoa_r+0x746>
 800c7b2:	9b05      	ldr	r3, [sp, #20]
 800c7b4:	321c      	adds	r2, #28
 800c7b6:	4413      	add	r3, r2
 800c7b8:	9305      	str	r3, [sp, #20]
 800c7ba:	9b06      	ldr	r3, [sp, #24]
 800c7bc:	4416      	add	r6, r2
 800c7be:	4413      	add	r3, r2
 800c7c0:	e794      	b.n	800c6ec <_dtoa_r+0x744>
 800c7c2:	4602      	mov	r2, r0
 800c7c4:	e7f5      	b.n	800c7b2 <_dtoa_r+0x80a>
 800c7c6:	f1ba 0f00 	cmp.w	sl, #0
 800c7ca:	f8cd 8010 	str.w	r8, [sp, #16]
 800c7ce:	46d3      	mov	fp, sl
 800c7d0:	dc21      	bgt.n	800c816 <_dtoa_r+0x86e>
 800c7d2:	9b07      	ldr	r3, [sp, #28]
 800c7d4:	2b02      	cmp	r3, #2
 800c7d6:	dd1e      	ble.n	800c816 <_dtoa_r+0x86e>
 800c7d8:	f1bb 0f00 	cmp.w	fp, #0
 800c7dc:	f47f aeb7 	bne.w	800c54e <_dtoa_r+0x5a6>
 800c7e0:	4621      	mov	r1, r4
 800c7e2:	465b      	mov	r3, fp
 800c7e4:	2205      	movs	r2, #5
 800c7e6:	4648      	mov	r0, r9
 800c7e8:	f000 f9e0 	bl	800cbac <__multadd>
 800c7ec:	4601      	mov	r1, r0
 800c7ee:	4604      	mov	r4, r0
 800c7f0:	9801      	ldr	r0, [sp, #4]
 800c7f2:	f000 fc3d 	bl	800d070 <__mcmp>
 800c7f6:	2800      	cmp	r0, #0
 800c7f8:	f77f aea9 	ble.w	800c54e <_dtoa_r+0x5a6>
 800c7fc:	463e      	mov	r6, r7
 800c7fe:	2331      	movs	r3, #49	@ 0x31
 800c800:	f806 3b01 	strb.w	r3, [r6], #1
 800c804:	9b04      	ldr	r3, [sp, #16]
 800c806:	3301      	adds	r3, #1
 800c808:	9304      	str	r3, [sp, #16]
 800c80a:	e6a4      	b.n	800c556 <_dtoa_r+0x5ae>
 800c80c:	f8cd 8010 	str.w	r8, [sp, #16]
 800c810:	4654      	mov	r4, sl
 800c812:	4625      	mov	r5, r4
 800c814:	e7f2      	b.n	800c7fc <_dtoa_r+0x854>
 800c816:	9b08      	ldr	r3, [sp, #32]
 800c818:	2b00      	cmp	r3, #0
 800c81a:	f000 8103 	beq.w	800ca24 <_dtoa_r+0xa7c>
 800c81e:	2e00      	cmp	r6, #0
 800c820:	dd05      	ble.n	800c82e <_dtoa_r+0x886>
 800c822:	4629      	mov	r1, r5
 800c824:	4632      	mov	r2, r6
 800c826:	4648      	mov	r0, r9
 800c828:	f000 fbb6 	bl	800cf98 <__lshift>
 800c82c:	4605      	mov	r5, r0
 800c82e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c830:	2b00      	cmp	r3, #0
 800c832:	d058      	beq.n	800c8e6 <_dtoa_r+0x93e>
 800c834:	6869      	ldr	r1, [r5, #4]
 800c836:	4648      	mov	r0, r9
 800c838:	f000 f956 	bl	800cae8 <_Balloc>
 800c83c:	4606      	mov	r6, r0
 800c83e:	b928      	cbnz	r0, 800c84c <_dtoa_r+0x8a4>
 800c840:	4b82      	ldr	r3, [pc, #520]	@ (800ca4c <_dtoa_r+0xaa4>)
 800c842:	4602      	mov	r2, r0
 800c844:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c848:	f7ff bbc7 	b.w	800bfda <_dtoa_r+0x32>
 800c84c:	692a      	ldr	r2, [r5, #16]
 800c84e:	3202      	adds	r2, #2
 800c850:	0092      	lsls	r2, r2, #2
 800c852:	f105 010c 	add.w	r1, r5, #12
 800c856:	300c      	adds	r0, #12
 800c858:	f7ff fb07 	bl	800be6a <memcpy>
 800c85c:	2201      	movs	r2, #1
 800c85e:	4631      	mov	r1, r6
 800c860:	4648      	mov	r0, r9
 800c862:	f000 fb99 	bl	800cf98 <__lshift>
 800c866:	1c7b      	adds	r3, r7, #1
 800c868:	9305      	str	r3, [sp, #20]
 800c86a:	eb07 030b 	add.w	r3, r7, fp
 800c86e:	9309      	str	r3, [sp, #36]	@ 0x24
 800c870:	9b02      	ldr	r3, [sp, #8]
 800c872:	f003 0301 	and.w	r3, r3, #1
 800c876:	46a8      	mov	r8, r5
 800c878:	9308      	str	r3, [sp, #32]
 800c87a:	4605      	mov	r5, r0
 800c87c:	9b05      	ldr	r3, [sp, #20]
 800c87e:	9801      	ldr	r0, [sp, #4]
 800c880:	4621      	mov	r1, r4
 800c882:	f103 3bff 	add.w	fp, r3, #4294967295
 800c886:	f7ff fb05 	bl	800be94 <quorem>
 800c88a:	4641      	mov	r1, r8
 800c88c:	9002      	str	r0, [sp, #8]
 800c88e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800c892:	9801      	ldr	r0, [sp, #4]
 800c894:	f000 fbec 	bl	800d070 <__mcmp>
 800c898:	462a      	mov	r2, r5
 800c89a:	9006      	str	r0, [sp, #24]
 800c89c:	4621      	mov	r1, r4
 800c89e:	4648      	mov	r0, r9
 800c8a0:	f000 fc02 	bl	800d0a8 <__mdiff>
 800c8a4:	68c2      	ldr	r2, [r0, #12]
 800c8a6:	4606      	mov	r6, r0
 800c8a8:	b9fa      	cbnz	r2, 800c8ea <_dtoa_r+0x942>
 800c8aa:	4601      	mov	r1, r0
 800c8ac:	9801      	ldr	r0, [sp, #4]
 800c8ae:	f000 fbdf 	bl	800d070 <__mcmp>
 800c8b2:	4602      	mov	r2, r0
 800c8b4:	4631      	mov	r1, r6
 800c8b6:	4648      	mov	r0, r9
 800c8b8:	920a      	str	r2, [sp, #40]	@ 0x28
 800c8ba:	f000 f955 	bl	800cb68 <_Bfree>
 800c8be:	9b07      	ldr	r3, [sp, #28]
 800c8c0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c8c2:	9e05      	ldr	r6, [sp, #20]
 800c8c4:	ea43 0102 	orr.w	r1, r3, r2
 800c8c8:	9b08      	ldr	r3, [sp, #32]
 800c8ca:	4319      	orrs	r1, r3
 800c8cc:	d10f      	bne.n	800c8ee <_dtoa_r+0x946>
 800c8ce:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800c8d2:	d028      	beq.n	800c926 <_dtoa_r+0x97e>
 800c8d4:	9b06      	ldr	r3, [sp, #24]
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	dd02      	ble.n	800c8e0 <_dtoa_r+0x938>
 800c8da:	9b02      	ldr	r3, [sp, #8]
 800c8dc:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800c8e0:	f88b a000 	strb.w	sl, [fp]
 800c8e4:	e639      	b.n	800c55a <_dtoa_r+0x5b2>
 800c8e6:	4628      	mov	r0, r5
 800c8e8:	e7bd      	b.n	800c866 <_dtoa_r+0x8be>
 800c8ea:	2201      	movs	r2, #1
 800c8ec:	e7e2      	b.n	800c8b4 <_dtoa_r+0x90c>
 800c8ee:	9b06      	ldr	r3, [sp, #24]
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	db04      	blt.n	800c8fe <_dtoa_r+0x956>
 800c8f4:	9907      	ldr	r1, [sp, #28]
 800c8f6:	430b      	orrs	r3, r1
 800c8f8:	9908      	ldr	r1, [sp, #32]
 800c8fa:	430b      	orrs	r3, r1
 800c8fc:	d120      	bne.n	800c940 <_dtoa_r+0x998>
 800c8fe:	2a00      	cmp	r2, #0
 800c900:	ddee      	ble.n	800c8e0 <_dtoa_r+0x938>
 800c902:	9901      	ldr	r1, [sp, #4]
 800c904:	2201      	movs	r2, #1
 800c906:	4648      	mov	r0, r9
 800c908:	f000 fb46 	bl	800cf98 <__lshift>
 800c90c:	4621      	mov	r1, r4
 800c90e:	9001      	str	r0, [sp, #4]
 800c910:	f000 fbae 	bl	800d070 <__mcmp>
 800c914:	2800      	cmp	r0, #0
 800c916:	dc03      	bgt.n	800c920 <_dtoa_r+0x978>
 800c918:	d1e2      	bne.n	800c8e0 <_dtoa_r+0x938>
 800c91a:	f01a 0f01 	tst.w	sl, #1
 800c91e:	d0df      	beq.n	800c8e0 <_dtoa_r+0x938>
 800c920:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800c924:	d1d9      	bne.n	800c8da <_dtoa_r+0x932>
 800c926:	2339      	movs	r3, #57	@ 0x39
 800c928:	f88b 3000 	strb.w	r3, [fp]
 800c92c:	4633      	mov	r3, r6
 800c92e:	461e      	mov	r6, r3
 800c930:	3b01      	subs	r3, #1
 800c932:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c936:	2a39      	cmp	r2, #57	@ 0x39
 800c938:	d053      	beq.n	800c9e2 <_dtoa_r+0xa3a>
 800c93a:	3201      	adds	r2, #1
 800c93c:	701a      	strb	r2, [r3, #0]
 800c93e:	e60c      	b.n	800c55a <_dtoa_r+0x5b2>
 800c940:	2a00      	cmp	r2, #0
 800c942:	dd07      	ble.n	800c954 <_dtoa_r+0x9ac>
 800c944:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800c948:	d0ed      	beq.n	800c926 <_dtoa_r+0x97e>
 800c94a:	f10a 0301 	add.w	r3, sl, #1
 800c94e:	f88b 3000 	strb.w	r3, [fp]
 800c952:	e602      	b.n	800c55a <_dtoa_r+0x5b2>
 800c954:	9b05      	ldr	r3, [sp, #20]
 800c956:	9a05      	ldr	r2, [sp, #20]
 800c958:	f803 ac01 	strb.w	sl, [r3, #-1]
 800c95c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c95e:	4293      	cmp	r3, r2
 800c960:	d029      	beq.n	800c9b6 <_dtoa_r+0xa0e>
 800c962:	9901      	ldr	r1, [sp, #4]
 800c964:	2300      	movs	r3, #0
 800c966:	220a      	movs	r2, #10
 800c968:	4648      	mov	r0, r9
 800c96a:	f000 f91f 	bl	800cbac <__multadd>
 800c96e:	45a8      	cmp	r8, r5
 800c970:	9001      	str	r0, [sp, #4]
 800c972:	f04f 0300 	mov.w	r3, #0
 800c976:	f04f 020a 	mov.w	r2, #10
 800c97a:	4641      	mov	r1, r8
 800c97c:	4648      	mov	r0, r9
 800c97e:	d107      	bne.n	800c990 <_dtoa_r+0x9e8>
 800c980:	f000 f914 	bl	800cbac <__multadd>
 800c984:	4680      	mov	r8, r0
 800c986:	4605      	mov	r5, r0
 800c988:	9b05      	ldr	r3, [sp, #20]
 800c98a:	3301      	adds	r3, #1
 800c98c:	9305      	str	r3, [sp, #20]
 800c98e:	e775      	b.n	800c87c <_dtoa_r+0x8d4>
 800c990:	f000 f90c 	bl	800cbac <__multadd>
 800c994:	4629      	mov	r1, r5
 800c996:	4680      	mov	r8, r0
 800c998:	2300      	movs	r3, #0
 800c99a:	220a      	movs	r2, #10
 800c99c:	4648      	mov	r0, r9
 800c99e:	f000 f905 	bl	800cbac <__multadd>
 800c9a2:	4605      	mov	r5, r0
 800c9a4:	e7f0      	b.n	800c988 <_dtoa_r+0x9e0>
 800c9a6:	f1bb 0f00 	cmp.w	fp, #0
 800c9aa:	bfcc      	ite	gt
 800c9ac:	465e      	movgt	r6, fp
 800c9ae:	2601      	movle	r6, #1
 800c9b0:	443e      	add	r6, r7
 800c9b2:	f04f 0800 	mov.w	r8, #0
 800c9b6:	9901      	ldr	r1, [sp, #4]
 800c9b8:	2201      	movs	r2, #1
 800c9ba:	4648      	mov	r0, r9
 800c9bc:	f000 faec 	bl	800cf98 <__lshift>
 800c9c0:	4621      	mov	r1, r4
 800c9c2:	9001      	str	r0, [sp, #4]
 800c9c4:	f000 fb54 	bl	800d070 <__mcmp>
 800c9c8:	2800      	cmp	r0, #0
 800c9ca:	dcaf      	bgt.n	800c92c <_dtoa_r+0x984>
 800c9cc:	d102      	bne.n	800c9d4 <_dtoa_r+0xa2c>
 800c9ce:	f01a 0f01 	tst.w	sl, #1
 800c9d2:	d1ab      	bne.n	800c92c <_dtoa_r+0x984>
 800c9d4:	4633      	mov	r3, r6
 800c9d6:	461e      	mov	r6, r3
 800c9d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c9dc:	2a30      	cmp	r2, #48	@ 0x30
 800c9de:	d0fa      	beq.n	800c9d6 <_dtoa_r+0xa2e>
 800c9e0:	e5bb      	b.n	800c55a <_dtoa_r+0x5b2>
 800c9e2:	429f      	cmp	r7, r3
 800c9e4:	d1a3      	bne.n	800c92e <_dtoa_r+0x986>
 800c9e6:	9b04      	ldr	r3, [sp, #16]
 800c9e8:	3301      	adds	r3, #1
 800c9ea:	9304      	str	r3, [sp, #16]
 800c9ec:	2331      	movs	r3, #49	@ 0x31
 800c9ee:	703b      	strb	r3, [r7, #0]
 800c9f0:	e5b3      	b.n	800c55a <_dtoa_r+0x5b2>
 800c9f2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c9f4:	4f16      	ldr	r7, [pc, #88]	@ (800ca50 <_dtoa_r+0xaa8>)
 800c9f6:	b11b      	cbz	r3, 800ca00 <_dtoa_r+0xa58>
 800c9f8:	f107 0308 	add.w	r3, r7, #8
 800c9fc:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800c9fe:	6013      	str	r3, [r2, #0]
 800ca00:	4638      	mov	r0, r7
 800ca02:	b011      	add	sp, #68	@ 0x44
 800ca04:	ecbd 8b02 	vpop	{d8}
 800ca08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca0c:	9b07      	ldr	r3, [sp, #28]
 800ca0e:	2b01      	cmp	r3, #1
 800ca10:	f77f ae36 	ble.w	800c680 <_dtoa_r+0x6d8>
 800ca14:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ca16:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ca18:	2001      	movs	r0, #1
 800ca1a:	e656      	b.n	800c6ca <_dtoa_r+0x722>
 800ca1c:	f1bb 0f00 	cmp.w	fp, #0
 800ca20:	f77f aed7 	ble.w	800c7d2 <_dtoa_r+0x82a>
 800ca24:	463e      	mov	r6, r7
 800ca26:	9801      	ldr	r0, [sp, #4]
 800ca28:	4621      	mov	r1, r4
 800ca2a:	f7ff fa33 	bl	800be94 <quorem>
 800ca2e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800ca32:	f806 ab01 	strb.w	sl, [r6], #1
 800ca36:	1bf2      	subs	r2, r6, r7
 800ca38:	4593      	cmp	fp, r2
 800ca3a:	ddb4      	ble.n	800c9a6 <_dtoa_r+0x9fe>
 800ca3c:	9901      	ldr	r1, [sp, #4]
 800ca3e:	2300      	movs	r3, #0
 800ca40:	220a      	movs	r2, #10
 800ca42:	4648      	mov	r0, r9
 800ca44:	f000 f8b2 	bl	800cbac <__multadd>
 800ca48:	9001      	str	r0, [sp, #4]
 800ca4a:	e7ec      	b.n	800ca26 <_dtoa_r+0xa7e>
 800ca4c:	0800f35d 	.word	0x0800f35d
 800ca50:	0800f2e1 	.word	0x0800f2e1

0800ca54 <_free_r>:
 800ca54:	b538      	push	{r3, r4, r5, lr}
 800ca56:	4605      	mov	r5, r0
 800ca58:	2900      	cmp	r1, #0
 800ca5a:	d041      	beq.n	800cae0 <_free_r+0x8c>
 800ca5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ca60:	1f0c      	subs	r4, r1, #4
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	bfb8      	it	lt
 800ca66:	18e4      	addlt	r4, r4, r3
 800ca68:	f7fe f84c 	bl	800ab04 <__malloc_lock>
 800ca6c:	4a1d      	ldr	r2, [pc, #116]	@ (800cae4 <_free_r+0x90>)
 800ca6e:	6813      	ldr	r3, [r2, #0]
 800ca70:	b933      	cbnz	r3, 800ca80 <_free_r+0x2c>
 800ca72:	6063      	str	r3, [r4, #4]
 800ca74:	6014      	str	r4, [r2, #0]
 800ca76:	4628      	mov	r0, r5
 800ca78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ca7c:	f7fe b848 	b.w	800ab10 <__malloc_unlock>
 800ca80:	42a3      	cmp	r3, r4
 800ca82:	d908      	bls.n	800ca96 <_free_r+0x42>
 800ca84:	6820      	ldr	r0, [r4, #0]
 800ca86:	1821      	adds	r1, r4, r0
 800ca88:	428b      	cmp	r3, r1
 800ca8a:	bf01      	itttt	eq
 800ca8c:	6819      	ldreq	r1, [r3, #0]
 800ca8e:	685b      	ldreq	r3, [r3, #4]
 800ca90:	1809      	addeq	r1, r1, r0
 800ca92:	6021      	streq	r1, [r4, #0]
 800ca94:	e7ed      	b.n	800ca72 <_free_r+0x1e>
 800ca96:	461a      	mov	r2, r3
 800ca98:	685b      	ldr	r3, [r3, #4]
 800ca9a:	b10b      	cbz	r3, 800caa0 <_free_r+0x4c>
 800ca9c:	42a3      	cmp	r3, r4
 800ca9e:	d9fa      	bls.n	800ca96 <_free_r+0x42>
 800caa0:	6811      	ldr	r1, [r2, #0]
 800caa2:	1850      	adds	r0, r2, r1
 800caa4:	42a0      	cmp	r0, r4
 800caa6:	d10b      	bne.n	800cac0 <_free_r+0x6c>
 800caa8:	6820      	ldr	r0, [r4, #0]
 800caaa:	4401      	add	r1, r0
 800caac:	1850      	adds	r0, r2, r1
 800caae:	4283      	cmp	r3, r0
 800cab0:	6011      	str	r1, [r2, #0]
 800cab2:	d1e0      	bne.n	800ca76 <_free_r+0x22>
 800cab4:	6818      	ldr	r0, [r3, #0]
 800cab6:	685b      	ldr	r3, [r3, #4]
 800cab8:	6053      	str	r3, [r2, #4]
 800caba:	4408      	add	r0, r1
 800cabc:	6010      	str	r0, [r2, #0]
 800cabe:	e7da      	b.n	800ca76 <_free_r+0x22>
 800cac0:	d902      	bls.n	800cac8 <_free_r+0x74>
 800cac2:	230c      	movs	r3, #12
 800cac4:	602b      	str	r3, [r5, #0]
 800cac6:	e7d6      	b.n	800ca76 <_free_r+0x22>
 800cac8:	6820      	ldr	r0, [r4, #0]
 800caca:	1821      	adds	r1, r4, r0
 800cacc:	428b      	cmp	r3, r1
 800cace:	bf04      	itt	eq
 800cad0:	6819      	ldreq	r1, [r3, #0]
 800cad2:	685b      	ldreq	r3, [r3, #4]
 800cad4:	6063      	str	r3, [r4, #4]
 800cad6:	bf04      	itt	eq
 800cad8:	1809      	addeq	r1, r1, r0
 800cada:	6021      	streq	r1, [r4, #0]
 800cadc:	6054      	str	r4, [r2, #4]
 800cade:	e7ca      	b.n	800ca76 <_free_r+0x22>
 800cae0:	bd38      	pop	{r3, r4, r5, pc}
 800cae2:	bf00      	nop
 800cae4:	24004d44 	.word	0x24004d44

0800cae8 <_Balloc>:
 800cae8:	b570      	push	{r4, r5, r6, lr}
 800caea:	69c6      	ldr	r6, [r0, #28]
 800caec:	4604      	mov	r4, r0
 800caee:	460d      	mov	r5, r1
 800caf0:	b976      	cbnz	r6, 800cb10 <_Balloc+0x28>
 800caf2:	2010      	movs	r0, #16
 800caf4:	f7fd ff54 	bl	800a9a0 <malloc>
 800caf8:	4602      	mov	r2, r0
 800cafa:	61e0      	str	r0, [r4, #28]
 800cafc:	b920      	cbnz	r0, 800cb08 <_Balloc+0x20>
 800cafe:	4b18      	ldr	r3, [pc, #96]	@ (800cb60 <_Balloc+0x78>)
 800cb00:	4818      	ldr	r0, [pc, #96]	@ (800cb64 <_Balloc+0x7c>)
 800cb02:	216b      	movs	r1, #107	@ 0x6b
 800cb04:	f7fd ff2e 	bl	800a964 <__assert_func>
 800cb08:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cb0c:	6006      	str	r6, [r0, #0]
 800cb0e:	60c6      	str	r6, [r0, #12]
 800cb10:	69e6      	ldr	r6, [r4, #28]
 800cb12:	68f3      	ldr	r3, [r6, #12]
 800cb14:	b183      	cbz	r3, 800cb38 <_Balloc+0x50>
 800cb16:	69e3      	ldr	r3, [r4, #28]
 800cb18:	68db      	ldr	r3, [r3, #12]
 800cb1a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cb1e:	b9b8      	cbnz	r0, 800cb50 <_Balloc+0x68>
 800cb20:	2101      	movs	r1, #1
 800cb22:	fa01 f605 	lsl.w	r6, r1, r5
 800cb26:	1d72      	adds	r2, r6, #5
 800cb28:	0092      	lsls	r2, r2, #2
 800cb2a:	4620      	mov	r0, r4
 800cb2c:	f001 fec0 	bl	800e8b0 <_calloc_r>
 800cb30:	b160      	cbz	r0, 800cb4c <_Balloc+0x64>
 800cb32:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cb36:	e00e      	b.n	800cb56 <_Balloc+0x6e>
 800cb38:	2221      	movs	r2, #33	@ 0x21
 800cb3a:	2104      	movs	r1, #4
 800cb3c:	4620      	mov	r0, r4
 800cb3e:	f001 feb7 	bl	800e8b0 <_calloc_r>
 800cb42:	69e3      	ldr	r3, [r4, #28]
 800cb44:	60f0      	str	r0, [r6, #12]
 800cb46:	68db      	ldr	r3, [r3, #12]
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d1e4      	bne.n	800cb16 <_Balloc+0x2e>
 800cb4c:	2000      	movs	r0, #0
 800cb4e:	bd70      	pop	{r4, r5, r6, pc}
 800cb50:	6802      	ldr	r2, [r0, #0]
 800cb52:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cb56:	2300      	movs	r3, #0
 800cb58:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cb5c:	e7f7      	b.n	800cb4e <_Balloc+0x66>
 800cb5e:	bf00      	nop
 800cb60:	0800f2ee 	.word	0x0800f2ee
 800cb64:	0800f36e 	.word	0x0800f36e

0800cb68 <_Bfree>:
 800cb68:	b570      	push	{r4, r5, r6, lr}
 800cb6a:	69c6      	ldr	r6, [r0, #28]
 800cb6c:	4605      	mov	r5, r0
 800cb6e:	460c      	mov	r4, r1
 800cb70:	b976      	cbnz	r6, 800cb90 <_Bfree+0x28>
 800cb72:	2010      	movs	r0, #16
 800cb74:	f7fd ff14 	bl	800a9a0 <malloc>
 800cb78:	4602      	mov	r2, r0
 800cb7a:	61e8      	str	r0, [r5, #28]
 800cb7c:	b920      	cbnz	r0, 800cb88 <_Bfree+0x20>
 800cb7e:	4b09      	ldr	r3, [pc, #36]	@ (800cba4 <_Bfree+0x3c>)
 800cb80:	4809      	ldr	r0, [pc, #36]	@ (800cba8 <_Bfree+0x40>)
 800cb82:	218f      	movs	r1, #143	@ 0x8f
 800cb84:	f7fd feee 	bl	800a964 <__assert_func>
 800cb88:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cb8c:	6006      	str	r6, [r0, #0]
 800cb8e:	60c6      	str	r6, [r0, #12]
 800cb90:	b13c      	cbz	r4, 800cba2 <_Bfree+0x3a>
 800cb92:	69eb      	ldr	r3, [r5, #28]
 800cb94:	6862      	ldr	r2, [r4, #4]
 800cb96:	68db      	ldr	r3, [r3, #12]
 800cb98:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cb9c:	6021      	str	r1, [r4, #0]
 800cb9e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cba2:	bd70      	pop	{r4, r5, r6, pc}
 800cba4:	0800f2ee 	.word	0x0800f2ee
 800cba8:	0800f36e 	.word	0x0800f36e

0800cbac <__multadd>:
 800cbac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cbb0:	690d      	ldr	r5, [r1, #16]
 800cbb2:	4607      	mov	r7, r0
 800cbb4:	460c      	mov	r4, r1
 800cbb6:	461e      	mov	r6, r3
 800cbb8:	f101 0c14 	add.w	ip, r1, #20
 800cbbc:	2000      	movs	r0, #0
 800cbbe:	f8dc 3000 	ldr.w	r3, [ip]
 800cbc2:	b299      	uxth	r1, r3
 800cbc4:	fb02 6101 	mla	r1, r2, r1, r6
 800cbc8:	0c1e      	lsrs	r6, r3, #16
 800cbca:	0c0b      	lsrs	r3, r1, #16
 800cbcc:	fb02 3306 	mla	r3, r2, r6, r3
 800cbd0:	b289      	uxth	r1, r1
 800cbd2:	3001      	adds	r0, #1
 800cbd4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cbd8:	4285      	cmp	r5, r0
 800cbda:	f84c 1b04 	str.w	r1, [ip], #4
 800cbde:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cbe2:	dcec      	bgt.n	800cbbe <__multadd+0x12>
 800cbe4:	b30e      	cbz	r6, 800cc2a <__multadd+0x7e>
 800cbe6:	68a3      	ldr	r3, [r4, #8]
 800cbe8:	42ab      	cmp	r3, r5
 800cbea:	dc19      	bgt.n	800cc20 <__multadd+0x74>
 800cbec:	6861      	ldr	r1, [r4, #4]
 800cbee:	4638      	mov	r0, r7
 800cbf0:	3101      	adds	r1, #1
 800cbf2:	f7ff ff79 	bl	800cae8 <_Balloc>
 800cbf6:	4680      	mov	r8, r0
 800cbf8:	b928      	cbnz	r0, 800cc06 <__multadd+0x5a>
 800cbfa:	4602      	mov	r2, r0
 800cbfc:	4b0c      	ldr	r3, [pc, #48]	@ (800cc30 <__multadd+0x84>)
 800cbfe:	480d      	ldr	r0, [pc, #52]	@ (800cc34 <__multadd+0x88>)
 800cc00:	21ba      	movs	r1, #186	@ 0xba
 800cc02:	f7fd feaf 	bl	800a964 <__assert_func>
 800cc06:	6922      	ldr	r2, [r4, #16]
 800cc08:	3202      	adds	r2, #2
 800cc0a:	f104 010c 	add.w	r1, r4, #12
 800cc0e:	0092      	lsls	r2, r2, #2
 800cc10:	300c      	adds	r0, #12
 800cc12:	f7ff f92a 	bl	800be6a <memcpy>
 800cc16:	4621      	mov	r1, r4
 800cc18:	4638      	mov	r0, r7
 800cc1a:	f7ff ffa5 	bl	800cb68 <_Bfree>
 800cc1e:	4644      	mov	r4, r8
 800cc20:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cc24:	3501      	adds	r5, #1
 800cc26:	615e      	str	r6, [r3, #20]
 800cc28:	6125      	str	r5, [r4, #16]
 800cc2a:	4620      	mov	r0, r4
 800cc2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc30:	0800f35d 	.word	0x0800f35d
 800cc34:	0800f36e 	.word	0x0800f36e

0800cc38 <__s2b>:
 800cc38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cc3c:	460c      	mov	r4, r1
 800cc3e:	4615      	mov	r5, r2
 800cc40:	461f      	mov	r7, r3
 800cc42:	2209      	movs	r2, #9
 800cc44:	3308      	adds	r3, #8
 800cc46:	4606      	mov	r6, r0
 800cc48:	fb93 f3f2 	sdiv	r3, r3, r2
 800cc4c:	2100      	movs	r1, #0
 800cc4e:	2201      	movs	r2, #1
 800cc50:	429a      	cmp	r2, r3
 800cc52:	db09      	blt.n	800cc68 <__s2b+0x30>
 800cc54:	4630      	mov	r0, r6
 800cc56:	f7ff ff47 	bl	800cae8 <_Balloc>
 800cc5a:	b940      	cbnz	r0, 800cc6e <__s2b+0x36>
 800cc5c:	4602      	mov	r2, r0
 800cc5e:	4b19      	ldr	r3, [pc, #100]	@ (800ccc4 <__s2b+0x8c>)
 800cc60:	4819      	ldr	r0, [pc, #100]	@ (800ccc8 <__s2b+0x90>)
 800cc62:	21d3      	movs	r1, #211	@ 0xd3
 800cc64:	f7fd fe7e 	bl	800a964 <__assert_func>
 800cc68:	0052      	lsls	r2, r2, #1
 800cc6a:	3101      	adds	r1, #1
 800cc6c:	e7f0      	b.n	800cc50 <__s2b+0x18>
 800cc6e:	9b08      	ldr	r3, [sp, #32]
 800cc70:	6143      	str	r3, [r0, #20]
 800cc72:	2d09      	cmp	r5, #9
 800cc74:	f04f 0301 	mov.w	r3, #1
 800cc78:	6103      	str	r3, [r0, #16]
 800cc7a:	dd16      	ble.n	800ccaa <__s2b+0x72>
 800cc7c:	f104 0909 	add.w	r9, r4, #9
 800cc80:	46c8      	mov	r8, r9
 800cc82:	442c      	add	r4, r5
 800cc84:	f818 3b01 	ldrb.w	r3, [r8], #1
 800cc88:	4601      	mov	r1, r0
 800cc8a:	3b30      	subs	r3, #48	@ 0x30
 800cc8c:	220a      	movs	r2, #10
 800cc8e:	4630      	mov	r0, r6
 800cc90:	f7ff ff8c 	bl	800cbac <__multadd>
 800cc94:	45a0      	cmp	r8, r4
 800cc96:	d1f5      	bne.n	800cc84 <__s2b+0x4c>
 800cc98:	f1a5 0408 	sub.w	r4, r5, #8
 800cc9c:	444c      	add	r4, r9
 800cc9e:	1b2d      	subs	r5, r5, r4
 800cca0:	1963      	adds	r3, r4, r5
 800cca2:	42bb      	cmp	r3, r7
 800cca4:	db04      	blt.n	800ccb0 <__s2b+0x78>
 800cca6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ccaa:	340a      	adds	r4, #10
 800ccac:	2509      	movs	r5, #9
 800ccae:	e7f6      	b.n	800cc9e <__s2b+0x66>
 800ccb0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ccb4:	4601      	mov	r1, r0
 800ccb6:	3b30      	subs	r3, #48	@ 0x30
 800ccb8:	220a      	movs	r2, #10
 800ccba:	4630      	mov	r0, r6
 800ccbc:	f7ff ff76 	bl	800cbac <__multadd>
 800ccc0:	e7ee      	b.n	800cca0 <__s2b+0x68>
 800ccc2:	bf00      	nop
 800ccc4:	0800f35d 	.word	0x0800f35d
 800ccc8:	0800f36e 	.word	0x0800f36e

0800cccc <__hi0bits>:
 800cccc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800ccd0:	4603      	mov	r3, r0
 800ccd2:	bf36      	itet	cc
 800ccd4:	0403      	lslcc	r3, r0, #16
 800ccd6:	2000      	movcs	r0, #0
 800ccd8:	2010      	movcc	r0, #16
 800ccda:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ccde:	bf3c      	itt	cc
 800cce0:	021b      	lslcc	r3, r3, #8
 800cce2:	3008      	addcc	r0, #8
 800cce4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cce8:	bf3c      	itt	cc
 800ccea:	011b      	lslcc	r3, r3, #4
 800ccec:	3004      	addcc	r0, #4
 800ccee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ccf2:	bf3c      	itt	cc
 800ccf4:	009b      	lslcc	r3, r3, #2
 800ccf6:	3002      	addcc	r0, #2
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	db05      	blt.n	800cd08 <__hi0bits+0x3c>
 800ccfc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800cd00:	f100 0001 	add.w	r0, r0, #1
 800cd04:	bf08      	it	eq
 800cd06:	2020      	moveq	r0, #32
 800cd08:	4770      	bx	lr

0800cd0a <__lo0bits>:
 800cd0a:	6803      	ldr	r3, [r0, #0]
 800cd0c:	4602      	mov	r2, r0
 800cd0e:	f013 0007 	ands.w	r0, r3, #7
 800cd12:	d00b      	beq.n	800cd2c <__lo0bits+0x22>
 800cd14:	07d9      	lsls	r1, r3, #31
 800cd16:	d421      	bmi.n	800cd5c <__lo0bits+0x52>
 800cd18:	0798      	lsls	r0, r3, #30
 800cd1a:	bf49      	itett	mi
 800cd1c:	085b      	lsrmi	r3, r3, #1
 800cd1e:	089b      	lsrpl	r3, r3, #2
 800cd20:	2001      	movmi	r0, #1
 800cd22:	6013      	strmi	r3, [r2, #0]
 800cd24:	bf5c      	itt	pl
 800cd26:	6013      	strpl	r3, [r2, #0]
 800cd28:	2002      	movpl	r0, #2
 800cd2a:	4770      	bx	lr
 800cd2c:	b299      	uxth	r1, r3
 800cd2e:	b909      	cbnz	r1, 800cd34 <__lo0bits+0x2a>
 800cd30:	0c1b      	lsrs	r3, r3, #16
 800cd32:	2010      	movs	r0, #16
 800cd34:	b2d9      	uxtb	r1, r3
 800cd36:	b909      	cbnz	r1, 800cd3c <__lo0bits+0x32>
 800cd38:	3008      	adds	r0, #8
 800cd3a:	0a1b      	lsrs	r3, r3, #8
 800cd3c:	0719      	lsls	r1, r3, #28
 800cd3e:	bf04      	itt	eq
 800cd40:	091b      	lsreq	r3, r3, #4
 800cd42:	3004      	addeq	r0, #4
 800cd44:	0799      	lsls	r1, r3, #30
 800cd46:	bf04      	itt	eq
 800cd48:	089b      	lsreq	r3, r3, #2
 800cd4a:	3002      	addeq	r0, #2
 800cd4c:	07d9      	lsls	r1, r3, #31
 800cd4e:	d403      	bmi.n	800cd58 <__lo0bits+0x4e>
 800cd50:	085b      	lsrs	r3, r3, #1
 800cd52:	f100 0001 	add.w	r0, r0, #1
 800cd56:	d003      	beq.n	800cd60 <__lo0bits+0x56>
 800cd58:	6013      	str	r3, [r2, #0]
 800cd5a:	4770      	bx	lr
 800cd5c:	2000      	movs	r0, #0
 800cd5e:	4770      	bx	lr
 800cd60:	2020      	movs	r0, #32
 800cd62:	4770      	bx	lr

0800cd64 <__i2b>:
 800cd64:	b510      	push	{r4, lr}
 800cd66:	460c      	mov	r4, r1
 800cd68:	2101      	movs	r1, #1
 800cd6a:	f7ff febd 	bl	800cae8 <_Balloc>
 800cd6e:	4602      	mov	r2, r0
 800cd70:	b928      	cbnz	r0, 800cd7e <__i2b+0x1a>
 800cd72:	4b05      	ldr	r3, [pc, #20]	@ (800cd88 <__i2b+0x24>)
 800cd74:	4805      	ldr	r0, [pc, #20]	@ (800cd8c <__i2b+0x28>)
 800cd76:	f240 1145 	movw	r1, #325	@ 0x145
 800cd7a:	f7fd fdf3 	bl	800a964 <__assert_func>
 800cd7e:	2301      	movs	r3, #1
 800cd80:	6144      	str	r4, [r0, #20]
 800cd82:	6103      	str	r3, [r0, #16]
 800cd84:	bd10      	pop	{r4, pc}
 800cd86:	bf00      	nop
 800cd88:	0800f35d 	.word	0x0800f35d
 800cd8c:	0800f36e 	.word	0x0800f36e

0800cd90 <__multiply>:
 800cd90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd94:	4614      	mov	r4, r2
 800cd96:	690a      	ldr	r2, [r1, #16]
 800cd98:	6923      	ldr	r3, [r4, #16]
 800cd9a:	429a      	cmp	r2, r3
 800cd9c:	bfa8      	it	ge
 800cd9e:	4623      	movge	r3, r4
 800cda0:	460f      	mov	r7, r1
 800cda2:	bfa4      	itt	ge
 800cda4:	460c      	movge	r4, r1
 800cda6:	461f      	movge	r7, r3
 800cda8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800cdac:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800cdb0:	68a3      	ldr	r3, [r4, #8]
 800cdb2:	6861      	ldr	r1, [r4, #4]
 800cdb4:	eb0a 0609 	add.w	r6, sl, r9
 800cdb8:	42b3      	cmp	r3, r6
 800cdba:	b085      	sub	sp, #20
 800cdbc:	bfb8      	it	lt
 800cdbe:	3101      	addlt	r1, #1
 800cdc0:	f7ff fe92 	bl	800cae8 <_Balloc>
 800cdc4:	b930      	cbnz	r0, 800cdd4 <__multiply+0x44>
 800cdc6:	4602      	mov	r2, r0
 800cdc8:	4b44      	ldr	r3, [pc, #272]	@ (800cedc <__multiply+0x14c>)
 800cdca:	4845      	ldr	r0, [pc, #276]	@ (800cee0 <__multiply+0x150>)
 800cdcc:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800cdd0:	f7fd fdc8 	bl	800a964 <__assert_func>
 800cdd4:	f100 0514 	add.w	r5, r0, #20
 800cdd8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800cddc:	462b      	mov	r3, r5
 800cdde:	2200      	movs	r2, #0
 800cde0:	4543      	cmp	r3, r8
 800cde2:	d321      	bcc.n	800ce28 <__multiply+0x98>
 800cde4:	f107 0114 	add.w	r1, r7, #20
 800cde8:	f104 0214 	add.w	r2, r4, #20
 800cdec:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800cdf0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800cdf4:	9302      	str	r3, [sp, #8]
 800cdf6:	1b13      	subs	r3, r2, r4
 800cdf8:	3b15      	subs	r3, #21
 800cdfa:	f023 0303 	bic.w	r3, r3, #3
 800cdfe:	3304      	adds	r3, #4
 800ce00:	f104 0715 	add.w	r7, r4, #21
 800ce04:	42ba      	cmp	r2, r7
 800ce06:	bf38      	it	cc
 800ce08:	2304      	movcc	r3, #4
 800ce0a:	9301      	str	r3, [sp, #4]
 800ce0c:	9b02      	ldr	r3, [sp, #8]
 800ce0e:	9103      	str	r1, [sp, #12]
 800ce10:	428b      	cmp	r3, r1
 800ce12:	d80c      	bhi.n	800ce2e <__multiply+0x9e>
 800ce14:	2e00      	cmp	r6, #0
 800ce16:	dd03      	ble.n	800ce20 <__multiply+0x90>
 800ce18:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d05b      	beq.n	800ced8 <__multiply+0x148>
 800ce20:	6106      	str	r6, [r0, #16]
 800ce22:	b005      	add	sp, #20
 800ce24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce28:	f843 2b04 	str.w	r2, [r3], #4
 800ce2c:	e7d8      	b.n	800cde0 <__multiply+0x50>
 800ce2e:	f8b1 a000 	ldrh.w	sl, [r1]
 800ce32:	f1ba 0f00 	cmp.w	sl, #0
 800ce36:	d024      	beq.n	800ce82 <__multiply+0xf2>
 800ce38:	f104 0e14 	add.w	lr, r4, #20
 800ce3c:	46a9      	mov	r9, r5
 800ce3e:	f04f 0c00 	mov.w	ip, #0
 800ce42:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ce46:	f8d9 3000 	ldr.w	r3, [r9]
 800ce4a:	fa1f fb87 	uxth.w	fp, r7
 800ce4e:	b29b      	uxth	r3, r3
 800ce50:	fb0a 330b 	mla	r3, sl, fp, r3
 800ce54:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800ce58:	f8d9 7000 	ldr.w	r7, [r9]
 800ce5c:	4463      	add	r3, ip
 800ce5e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ce62:	fb0a c70b 	mla	r7, sl, fp, ip
 800ce66:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800ce6a:	b29b      	uxth	r3, r3
 800ce6c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ce70:	4572      	cmp	r2, lr
 800ce72:	f849 3b04 	str.w	r3, [r9], #4
 800ce76:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ce7a:	d8e2      	bhi.n	800ce42 <__multiply+0xb2>
 800ce7c:	9b01      	ldr	r3, [sp, #4]
 800ce7e:	f845 c003 	str.w	ip, [r5, r3]
 800ce82:	9b03      	ldr	r3, [sp, #12]
 800ce84:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ce88:	3104      	adds	r1, #4
 800ce8a:	f1b9 0f00 	cmp.w	r9, #0
 800ce8e:	d021      	beq.n	800ced4 <__multiply+0x144>
 800ce90:	682b      	ldr	r3, [r5, #0]
 800ce92:	f104 0c14 	add.w	ip, r4, #20
 800ce96:	46ae      	mov	lr, r5
 800ce98:	f04f 0a00 	mov.w	sl, #0
 800ce9c:	f8bc b000 	ldrh.w	fp, [ip]
 800cea0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800cea4:	fb09 770b 	mla	r7, r9, fp, r7
 800cea8:	4457      	add	r7, sl
 800ceaa:	b29b      	uxth	r3, r3
 800ceac:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ceb0:	f84e 3b04 	str.w	r3, [lr], #4
 800ceb4:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ceb8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cebc:	f8be 3000 	ldrh.w	r3, [lr]
 800cec0:	fb09 330a 	mla	r3, r9, sl, r3
 800cec4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800cec8:	4562      	cmp	r2, ip
 800ceca:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cece:	d8e5      	bhi.n	800ce9c <__multiply+0x10c>
 800ced0:	9f01      	ldr	r7, [sp, #4]
 800ced2:	51eb      	str	r3, [r5, r7]
 800ced4:	3504      	adds	r5, #4
 800ced6:	e799      	b.n	800ce0c <__multiply+0x7c>
 800ced8:	3e01      	subs	r6, #1
 800ceda:	e79b      	b.n	800ce14 <__multiply+0x84>
 800cedc:	0800f35d 	.word	0x0800f35d
 800cee0:	0800f36e 	.word	0x0800f36e

0800cee4 <__pow5mult>:
 800cee4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cee8:	4615      	mov	r5, r2
 800ceea:	f012 0203 	ands.w	r2, r2, #3
 800ceee:	4607      	mov	r7, r0
 800cef0:	460e      	mov	r6, r1
 800cef2:	d007      	beq.n	800cf04 <__pow5mult+0x20>
 800cef4:	4c25      	ldr	r4, [pc, #148]	@ (800cf8c <__pow5mult+0xa8>)
 800cef6:	3a01      	subs	r2, #1
 800cef8:	2300      	movs	r3, #0
 800cefa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cefe:	f7ff fe55 	bl	800cbac <__multadd>
 800cf02:	4606      	mov	r6, r0
 800cf04:	10ad      	asrs	r5, r5, #2
 800cf06:	d03d      	beq.n	800cf84 <__pow5mult+0xa0>
 800cf08:	69fc      	ldr	r4, [r7, #28]
 800cf0a:	b97c      	cbnz	r4, 800cf2c <__pow5mult+0x48>
 800cf0c:	2010      	movs	r0, #16
 800cf0e:	f7fd fd47 	bl	800a9a0 <malloc>
 800cf12:	4602      	mov	r2, r0
 800cf14:	61f8      	str	r0, [r7, #28]
 800cf16:	b928      	cbnz	r0, 800cf24 <__pow5mult+0x40>
 800cf18:	4b1d      	ldr	r3, [pc, #116]	@ (800cf90 <__pow5mult+0xac>)
 800cf1a:	481e      	ldr	r0, [pc, #120]	@ (800cf94 <__pow5mult+0xb0>)
 800cf1c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800cf20:	f7fd fd20 	bl	800a964 <__assert_func>
 800cf24:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cf28:	6004      	str	r4, [r0, #0]
 800cf2a:	60c4      	str	r4, [r0, #12]
 800cf2c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800cf30:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cf34:	b94c      	cbnz	r4, 800cf4a <__pow5mult+0x66>
 800cf36:	f240 2171 	movw	r1, #625	@ 0x271
 800cf3a:	4638      	mov	r0, r7
 800cf3c:	f7ff ff12 	bl	800cd64 <__i2b>
 800cf40:	2300      	movs	r3, #0
 800cf42:	f8c8 0008 	str.w	r0, [r8, #8]
 800cf46:	4604      	mov	r4, r0
 800cf48:	6003      	str	r3, [r0, #0]
 800cf4a:	f04f 0900 	mov.w	r9, #0
 800cf4e:	07eb      	lsls	r3, r5, #31
 800cf50:	d50a      	bpl.n	800cf68 <__pow5mult+0x84>
 800cf52:	4631      	mov	r1, r6
 800cf54:	4622      	mov	r2, r4
 800cf56:	4638      	mov	r0, r7
 800cf58:	f7ff ff1a 	bl	800cd90 <__multiply>
 800cf5c:	4631      	mov	r1, r6
 800cf5e:	4680      	mov	r8, r0
 800cf60:	4638      	mov	r0, r7
 800cf62:	f7ff fe01 	bl	800cb68 <_Bfree>
 800cf66:	4646      	mov	r6, r8
 800cf68:	106d      	asrs	r5, r5, #1
 800cf6a:	d00b      	beq.n	800cf84 <__pow5mult+0xa0>
 800cf6c:	6820      	ldr	r0, [r4, #0]
 800cf6e:	b938      	cbnz	r0, 800cf80 <__pow5mult+0x9c>
 800cf70:	4622      	mov	r2, r4
 800cf72:	4621      	mov	r1, r4
 800cf74:	4638      	mov	r0, r7
 800cf76:	f7ff ff0b 	bl	800cd90 <__multiply>
 800cf7a:	6020      	str	r0, [r4, #0]
 800cf7c:	f8c0 9000 	str.w	r9, [r0]
 800cf80:	4604      	mov	r4, r0
 800cf82:	e7e4      	b.n	800cf4e <__pow5mult+0x6a>
 800cf84:	4630      	mov	r0, r6
 800cf86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cf8a:	bf00      	nop
 800cf8c:	0800f3c8 	.word	0x0800f3c8
 800cf90:	0800f2ee 	.word	0x0800f2ee
 800cf94:	0800f36e 	.word	0x0800f36e

0800cf98 <__lshift>:
 800cf98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cf9c:	460c      	mov	r4, r1
 800cf9e:	6849      	ldr	r1, [r1, #4]
 800cfa0:	6923      	ldr	r3, [r4, #16]
 800cfa2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cfa6:	68a3      	ldr	r3, [r4, #8]
 800cfa8:	4607      	mov	r7, r0
 800cfaa:	4691      	mov	r9, r2
 800cfac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cfb0:	f108 0601 	add.w	r6, r8, #1
 800cfb4:	42b3      	cmp	r3, r6
 800cfb6:	db0b      	blt.n	800cfd0 <__lshift+0x38>
 800cfb8:	4638      	mov	r0, r7
 800cfba:	f7ff fd95 	bl	800cae8 <_Balloc>
 800cfbe:	4605      	mov	r5, r0
 800cfc0:	b948      	cbnz	r0, 800cfd6 <__lshift+0x3e>
 800cfc2:	4602      	mov	r2, r0
 800cfc4:	4b28      	ldr	r3, [pc, #160]	@ (800d068 <__lshift+0xd0>)
 800cfc6:	4829      	ldr	r0, [pc, #164]	@ (800d06c <__lshift+0xd4>)
 800cfc8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800cfcc:	f7fd fcca 	bl	800a964 <__assert_func>
 800cfd0:	3101      	adds	r1, #1
 800cfd2:	005b      	lsls	r3, r3, #1
 800cfd4:	e7ee      	b.n	800cfb4 <__lshift+0x1c>
 800cfd6:	2300      	movs	r3, #0
 800cfd8:	f100 0114 	add.w	r1, r0, #20
 800cfdc:	f100 0210 	add.w	r2, r0, #16
 800cfe0:	4618      	mov	r0, r3
 800cfe2:	4553      	cmp	r3, sl
 800cfe4:	db33      	blt.n	800d04e <__lshift+0xb6>
 800cfe6:	6920      	ldr	r0, [r4, #16]
 800cfe8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cfec:	f104 0314 	add.w	r3, r4, #20
 800cff0:	f019 091f 	ands.w	r9, r9, #31
 800cff4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cff8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800cffc:	d02b      	beq.n	800d056 <__lshift+0xbe>
 800cffe:	f1c9 0e20 	rsb	lr, r9, #32
 800d002:	468a      	mov	sl, r1
 800d004:	2200      	movs	r2, #0
 800d006:	6818      	ldr	r0, [r3, #0]
 800d008:	fa00 f009 	lsl.w	r0, r0, r9
 800d00c:	4310      	orrs	r0, r2
 800d00e:	f84a 0b04 	str.w	r0, [sl], #4
 800d012:	f853 2b04 	ldr.w	r2, [r3], #4
 800d016:	459c      	cmp	ip, r3
 800d018:	fa22 f20e 	lsr.w	r2, r2, lr
 800d01c:	d8f3      	bhi.n	800d006 <__lshift+0x6e>
 800d01e:	ebac 0304 	sub.w	r3, ip, r4
 800d022:	3b15      	subs	r3, #21
 800d024:	f023 0303 	bic.w	r3, r3, #3
 800d028:	3304      	adds	r3, #4
 800d02a:	f104 0015 	add.w	r0, r4, #21
 800d02e:	4584      	cmp	ip, r0
 800d030:	bf38      	it	cc
 800d032:	2304      	movcc	r3, #4
 800d034:	50ca      	str	r2, [r1, r3]
 800d036:	b10a      	cbz	r2, 800d03c <__lshift+0xa4>
 800d038:	f108 0602 	add.w	r6, r8, #2
 800d03c:	3e01      	subs	r6, #1
 800d03e:	4638      	mov	r0, r7
 800d040:	612e      	str	r6, [r5, #16]
 800d042:	4621      	mov	r1, r4
 800d044:	f7ff fd90 	bl	800cb68 <_Bfree>
 800d048:	4628      	mov	r0, r5
 800d04a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d04e:	f842 0f04 	str.w	r0, [r2, #4]!
 800d052:	3301      	adds	r3, #1
 800d054:	e7c5      	b.n	800cfe2 <__lshift+0x4a>
 800d056:	3904      	subs	r1, #4
 800d058:	f853 2b04 	ldr.w	r2, [r3], #4
 800d05c:	f841 2f04 	str.w	r2, [r1, #4]!
 800d060:	459c      	cmp	ip, r3
 800d062:	d8f9      	bhi.n	800d058 <__lshift+0xc0>
 800d064:	e7ea      	b.n	800d03c <__lshift+0xa4>
 800d066:	bf00      	nop
 800d068:	0800f35d 	.word	0x0800f35d
 800d06c:	0800f36e 	.word	0x0800f36e

0800d070 <__mcmp>:
 800d070:	690a      	ldr	r2, [r1, #16]
 800d072:	4603      	mov	r3, r0
 800d074:	6900      	ldr	r0, [r0, #16]
 800d076:	1a80      	subs	r0, r0, r2
 800d078:	b530      	push	{r4, r5, lr}
 800d07a:	d10e      	bne.n	800d09a <__mcmp+0x2a>
 800d07c:	3314      	adds	r3, #20
 800d07e:	3114      	adds	r1, #20
 800d080:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d084:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d088:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d08c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d090:	4295      	cmp	r5, r2
 800d092:	d003      	beq.n	800d09c <__mcmp+0x2c>
 800d094:	d205      	bcs.n	800d0a2 <__mcmp+0x32>
 800d096:	f04f 30ff 	mov.w	r0, #4294967295
 800d09a:	bd30      	pop	{r4, r5, pc}
 800d09c:	42a3      	cmp	r3, r4
 800d09e:	d3f3      	bcc.n	800d088 <__mcmp+0x18>
 800d0a0:	e7fb      	b.n	800d09a <__mcmp+0x2a>
 800d0a2:	2001      	movs	r0, #1
 800d0a4:	e7f9      	b.n	800d09a <__mcmp+0x2a>
	...

0800d0a8 <__mdiff>:
 800d0a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0ac:	4689      	mov	r9, r1
 800d0ae:	4606      	mov	r6, r0
 800d0b0:	4611      	mov	r1, r2
 800d0b2:	4648      	mov	r0, r9
 800d0b4:	4614      	mov	r4, r2
 800d0b6:	f7ff ffdb 	bl	800d070 <__mcmp>
 800d0ba:	1e05      	subs	r5, r0, #0
 800d0bc:	d112      	bne.n	800d0e4 <__mdiff+0x3c>
 800d0be:	4629      	mov	r1, r5
 800d0c0:	4630      	mov	r0, r6
 800d0c2:	f7ff fd11 	bl	800cae8 <_Balloc>
 800d0c6:	4602      	mov	r2, r0
 800d0c8:	b928      	cbnz	r0, 800d0d6 <__mdiff+0x2e>
 800d0ca:	4b3f      	ldr	r3, [pc, #252]	@ (800d1c8 <__mdiff+0x120>)
 800d0cc:	f240 2137 	movw	r1, #567	@ 0x237
 800d0d0:	483e      	ldr	r0, [pc, #248]	@ (800d1cc <__mdiff+0x124>)
 800d0d2:	f7fd fc47 	bl	800a964 <__assert_func>
 800d0d6:	2301      	movs	r3, #1
 800d0d8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d0dc:	4610      	mov	r0, r2
 800d0de:	b003      	add	sp, #12
 800d0e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0e4:	bfbc      	itt	lt
 800d0e6:	464b      	movlt	r3, r9
 800d0e8:	46a1      	movlt	r9, r4
 800d0ea:	4630      	mov	r0, r6
 800d0ec:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d0f0:	bfba      	itte	lt
 800d0f2:	461c      	movlt	r4, r3
 800d0f4:	2501      	movlt	r5, #1
 800d0f6:	2500      	movge	r5, #0
 800d0f8:	f7ff fcf6 	bl	800cae8 <_Balloc>
 800d0fc:	4602      	mov	r2, r0
 800d0fe:	b918      	cbnz	r0, 800d108 <__mdiff+0x60>
 800d100:	4b31      	ldr	r3, [pc, #196]	@ (800d1c8 <__mdiff+0x120>)
 800d102:	f240 2145 	movw	r1, #581	@ 0x245
 800d106:	e7e3      	b.n	800d0d0 <__mdiff+0x28>
 800d108:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d10c:	6926      	ldr	r6, [r4, #16]
 800d10e:	60c5      	str	r5, [r0, #12]
 800d110:	f109 0310 	add.w	r3, r9, #16
 800d114:	f109 0514 	add.w	r5, r9, #20
 800d118:	f104 0e14 	add.w	lr, r4, #20
 800d11c:	f100 0b14 	add.w	fp, r0, #20
 800d120:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d124:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d128:	9301      	str	r3, [sp, #4]
 800d12a:	46d9      	mov	r9, fp
 800d12c:	f04f 0c00 	mov.w	ip, #0
 800d130:	9b01      	ldr	r3, [sp, #4]
 800d132:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d136:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d13a:	9301      	str	r3, [sp, #4]
 800d13c:	fa1f f38a 	uxth.w	r3, sl
 800d140:	4619      	mov	r1, r3
 800d142:	b283      	uxth	r3, r0
 800d144:	1acb      	subs	r3, r1, r3
 800d146:	0c00      	lsrs	r0, r0, #16
 800d148:	4463      	add	r3, ip
 800d14a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d14e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d152:	b29b      	uxth	r3, r3
 800d154:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d158:	4576      	cmp	r6, lr
 800d15a:	f849 3b04 	str.w	r3, [r9], #4
 800d15e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d162:	d8e5      	bhi.n	800d130 <__mdiff+0x88>
 800d164:	1b33      	subs	r3, r6, r4
 800d166:	3b15      	subs	r3, #21
 800d168:	f023 0303 	bic.w	r3, r3, #3
 800d16c:	3415      	adds	r4, #21
 800d16e:	3304      	adds	r3, #4
 800d170:	42a6      	cmp	r6, r4
 800d172:	bf38      	it	cc
 800d174:	2304      	movcc	r3, #4
 800d176:	441d      	add	r5, r3
 800d178:	445b      	add	r3, fp
 800d17a:	461e      	mov	r6, r3
 800d17c:	462c      	mov	r4, r5
 800d17e:	4544      	cmp	r4, r8
 800d180:	d30e      	bcc.n	800d1a0 <__mdiff+0xf8>
 800d182:	f108 0103 	add.w	r1, r8, #3
 800d186:	1b49      	subs	r1, r1, r5
 800d188:	f021 0103 	bic.w	r1, r1, #3
 800d18c:	3d03      	subs	r5, #3
 800d18e:	45a8      	cmp	r8, r5
 800d190:	bf38      	it	cc
 800d192:	2100      	movcc	r1, #0
 800d194:	440b      	add	r3, r1
 800d196:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d19a:	b191      	cbz	r1, 800d1c2 <__mdiff+0x11a>
 800d19c:	6117      	str	r7, [r2, #16]
 800d19e:	e79d      	b.n	800d0dc <__mdiff+0x34>
 800d1a0:	f854 1b04 	ldr.w	r1, [r4], #4
 800d1a4:	46e6      	mov	lr, ip
 800d1a6:	0c08      	lsrs	r0, r1, #16
 800d1a8:	fa1c fc81 	uxtah	ip, ip, r1
 800d1ac:	4471      	add	r1, lr
 800d1ae:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d1b2:	b289      	uxth	r1, r1
 800d1b4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d1b8:	f846 1b04 	str.w	r1, [r6], #4
 800d1bc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d1c0:	e7dd      	b.n	800d17e <__mdiff+0xd6>
 800d1c2:	3f01      	subs	r7, #1
 800d1c4:	e7e7      	b.n	800d196 <__mdiff+0xee>
 800d1c6:	bf00      	nop
 800d1c8:	0800f35d 	.word	0x0800f35d
 800d1cc:	0800f36e 	.word	0x0800f36e

0800d1d0 <__ulp>:
 800d1d0:	b082      	sub	sp, #8
 800d1d2:	ed8d 0b00 	vstr	d0, [sp]
 800d1d6:	9a01      	ldr	r2, [sp, #4]
 800d1d8:	4b0f      	ldr	r3, [pc, #60]	@ (800d218 <__ulp+0x48>)
 800d1da:	4013      	ands	r3, r2
 800d1dc:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	dc08      	bgt.n	800d1f6 <__ulp+0x26>
 800d1e4:	425b      	negs	r3, r3
 800d1e6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800d1ea:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d1ee:	da04      	bge.n	800d1fa <__ulp+0x2a>
 800d1f0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800d1f4:	4113      	asrs	r3, r2
 800d1f6:	2200      	movs	r2, #0
 800d1f8:	e008      	b.n	800d20c <__ulp+0x3c>
 800d1fa:	f1a2 0314 	sub.w	r3, r2, #20
 800d1fe:	2b1e      	cmp	r3, #30
 800d200:	bfda      	itte	le
 800d202:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800d206:	40da      	lsrle	r2, r3
 800d208:	2201      	movgt	r2, #1
 800d20a:	2300      	movs	r3, #0
 800d20c:	4619      	mov	r1, r3
 800d20e:	4610      	mov	r0, r2
 800d210:	ec41 0b10 	vmov	d0, r0, r1
 800d214:	b002      	add	sp, #8
 800d216:	4770      	bx	lr
 800d218:	7ff00000 	.word	0x7ff00000

0800d21c <__b2d>:
 800d21c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d220:	6906      	ldr	r6, [r0, #16]
 800d222:	f100 0814 	add.w	r8, r0, #20
 800d226:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800d22a:	1f37      	subs	r7, r6, #4
 800d22c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800d230:	4610      	mov	r0, r2
 800d232:	f7ff fd4b 	bl	800cccc <__hi0bits>
 800d236:	f1c0 0320 	rsb	r3, r0, #32
 800d23a:	280a      	cmp	r0, #10
 800d23c:	600b      	str	r3, [r1, #0]
 800d23e:	491b      	ldr	r1, [pc, #108]	@ (800d2ac <__b2d+0x90>)
 800d240:	dc15      	bgt.n	800d26e <__b2d+0x52>
 800d242:	f1c0 0c0b 	rsb	ip, r0, #11
 800d246:	fa22 f30c 	lsr.w	r3, r2, ip
 800d24a:	45b8      	cmp	r8, r7
 800d24c:	ea43 0501 	orr.w	r5, r3, r1
 800d250:	bf34      	ite	cc
 800d252:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d256:	2300      	movcs	r3, #0
 800d258:	3015      	adds	r0, #21
 800d25a:	fa02 f000 	lsl.w	r0, r2, r0
 800d25e:	fa23 f30c 	lsr.w	r3, r3, ip
 800d262:	4303      	orrs	r3, r0
 800d264:	461c      	mov	r4, r3
 800d266:	ec45 4b10 	vmov	d0, r4, r5
 800d26a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d26e:	45b8      	cmp	r8, r7
 800d270:	bf3a      	itte	cc
 800d272:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d276:	f1a6 0708 	subcc.w	r7, r6, #8
 800d27a:	2300      	movcs	r3, #0
 800d27c:	380b      	subs	r0, #11
 800d27e:	d012      	beq.n	800d2a6 <__b2d+0x8a>
 800d280:	f1c0 0120 	rsb	r1, r0, #32
 800d284:	fa23 f401 	lsr.w	r4, r3, r1
 800d288:	4082      	lsls	r2, r0
 800d28a:	4322      	orrs	r2, r4
 800d28c:	4547      	cmp	r7, r8
 800d28e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800d292:	bf8c      	ite	hi
 800d294:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800d298:	2200      	movls	r2, #0
 800d29a:	4083      	lsls	r3, r0
 800d29c:	40ca      	lsrs	r2, r1
 800d29e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800d2a2:	4313      	orrs	r3, r2
 800d2a4:	e7de      	b.n	800d264 <__b2d+0x48>
 800d2a6:	ea42 0501 	orr.w	r5, r2, r1
 800d2aa:	e7db      	b.n	800d264 <__b2d+0x48>
 800d2ac:	3ff00000 	.word	0x3ff00000

0800d2b0 <__d2b>:
 800d2b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d2b4:	460f      	mov	r7, r1
 800d2b6:	2101      	movs	r1, #1
 800d2b8:	ec59 8b10 	vmov	r8, r9, d0
 800d2bc:	4616      	mov	r6, r2
 800d2be:	f7ff fc13 	bl	800cae8 <_Balloc>
 800d2c2:	4604      	mov	r4, r0
 800d2c4:	b930      	cbnz	r0, 800d2d4 <__d2b+0x24>
 800d2c6:	4602      	mov	r2, r0
 800d2c8:	4b23      	ldr	r3, [pc, #140]	@ (800d358 <__d2b+0xa8>)
 800d2ca:	4824      	ldr	r0, [pc, #144]	@ (800d35c <__d2b+0xac>)
 800d2cc:	f240 310f 	movw	r1, #783	@ 0x30f
 800d2d0:	f7fd fb48 	bl	800a964 <__assert_func>
 800d2d4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d2d8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d2dc:	b10d      	cbz	r5, 800d2e2 <__d2b+0x32>
 800d2de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d2e2:	9301      	str	r3, [sp, #4]
 800d2e4:	f1b8 0300 	subs.w	r3, r8, #0
 800d2e8:	d023      	beq.n	800d332 <__d2b+0x82>
 800d2ea:	4668      	mov	r0, sp
 800d2ec:	9300      	str	r3, [sp, #0]
 800d2ee:	f7ff fd0c 	bl	800cd0a <__lo0bits>
 800d2f2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d2f6:	b1d0      	cbz	r0, 800d32e <__d2b+0x7e>
 800d2f8:	f1c0 0320 	rsb	r3, r0, #32
 800d2fc:	fa02 f303 	lsl.w	r3, r2, r3
 800d300:	430b      	orrs	r3, r1
 800d302:	40c2      	lsrs	r2, r0
 800d304:	6163      	str	r3, [r4, #20]
 800d306:	9201      	str	r2, [sp, #4]
 800d308:	9b01      	ldr	r3, [sp, #4]
 800d30a:	61a3      	str	r3, [r4, #24]
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	bf0c      	ite	eq
 800d310:	2201      	moveq	r2, #1
 800d312:	2202      	movne	r2, #2
 800d314:	6122      	str	r2, [r4, #16]
 800d316:	b1a5      	cbz	r5, 800d342 <__d2b+0x92>
 800d318:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d31c:	4405      	add	r5, r0
 800d31e:	603d      	str	r5, [r7, #0]
 800d320:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d324:	6030      	str	r0, [r6, #0]
 800d326:	4620      	mov	r0, r4
 800d328:	b003      	add	sp, #12
 800d32a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d32e:	6161      	str	r1, [r4, #20]
 800d330:	e7ea      	b.n	800d308 <__d2b+0x58>
 800d332:	a801      	add	r0, sp, #4
 800d334:	f7ff fce9 	bl	800cd0a <__lo0bits>
 800d338:	9b01      	ldr	r3, [sp, #4]
 800d33a:	6163      	str	r3, [r4, #20]
 800d33c:	3020      	adds	r0, #32
 800d33e:	2201      	movs	r2, #1
 800d340:	e7e8      	b.n	800d314 <__d2b+0x64>
 800d342:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d346:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d34a:	6038      	str	r0, [r7, #0]
 800d34c:	6918      	ldr	r0, [r3, #16]
 800d34e:	f7ff fcbd 	bl	800cccc <__hi0bits>
 800d352:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d356:	e7e5      	b.n	800d324 <__d2b+0x74>
 800d358:	0800f35d 	.word	0x0800f35d
 800d35c:	0800f36e 	.word	0x0800f36e

0800d360 <__ratio>:
 800d360:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d364:	4688      	mov	r8, r1
 800d366:	4669      	mov	r1, sp
 800d368:	4681      	mov	r9, r0
 800d36a:	f7ff ff57 	bl	800d21c <__b2d>
 800d36e:	a901      	add	r1, sp, #4
 800d370:	4640      	mov	r0, r8
 800d372:	ec55 4b10 	vmov	r4, r5, d0
 800d376:	f7ff ff51 	bl	800d21c <__b2d>
 800d37a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800d37e:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800d382:	1ad2      	subs	r2, r2, r3
 800d384:	e9dd 3100 	ldrd	r3, r1, [sp]
 800d388:	1a5b      	subs	r3, r3, r1
 800d38a:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 800d38e:	ec57 6b10 	vmov	r6, r7, d0
 800d392:	2b00      	cmp	r3, #0
 800d394:	bfd6      	itet	le
 800d396:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d39a:	462a      	movgt	r2, r5
 800d39c:	463a      	movle	r2, r7
 800d39e:	46ab      	mov	fp, r5
 800d3a0:	46a2      	mov	sl, r4
 800d3a2:	bfce      	itee	gt
 800d3a4:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800d3a8:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 800d3ac:	ee00 3a90 	vmovle	s1, r3
 800d3b0:	ec4b ab17 	vmov	d7, sl, fp
 800d3b4:	ee87 0b00 	vdiv.f64	d0, d7, d0
 800d3b8:	b003      	add	sp, #12
 800d3ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d3be <__copybits>:
 800d3be:	3901      	subs	r1, #1
 800d3c0:	b570      	push	{r4, r5, r6, lr}
 800d3c2:	1149      	asrs	r1, r1, #5
 800d3c4:	6914      	ldr	r4, [r2, #16]
 800d3c6:	3101      	adds	r1, #1
 800d3c8:	f102 0314 	add.w	r3, r2, #20
 800d3cc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d3d0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d3d4:	1f05      	subs	r5, r0, #4
 800d3d6:	42a3      	cmp	r3, r4
 800d3d8:	d30c      	bcc.n	800d3f4 <__copybits+0x36>
 800d3da:	1aa3      	subs	r3, r4, r2
 800d3dc:	3b11      	subs	r3, #17
 800d3de:	f023 0303 	bic.w	r3, r3, #3
 800d3e2:	3211      	adds	r2, #17
 800d3e4:	42a2      	cmp	r2, r4
 800d3e6:	bf88      	it	hi
 800d3e8:	2300      	movhi	r3, #0
 800d3ea:	4418      	add	r0, r3
 800d3ec:	2300      	movs	r3, #0
 800d3ee:	4288      	cmp	r0, r1
 800d3f0:	d305      	bcc.n	800d3fe <__copybits+0x40>
 800d3f2:	bd70      	pop	{r4, r5, r6, pc}
 800d3f4:	f853 6b04 	ldr.w	r6, [r3], #4
 800d3f8:	f845 6f04 	str.w	r6, [r5, #4]!
 800d3fc:	e7eb      	b.n	800d3d6 <__copybits+0x18>
 800d3fe:	f840 3b04 	str.w	r3, [r0], #4
 800d402:	e7f4      	b.n	800d3ee <__copybits+0x30>

0800d404 <__any_on>:
 800d404:	f100 0214 	add.w	r2, r0, #20
 800d408:	6900      	ldr	r0, [r0, #16]
 800d40a:	114b      	asrs	r3, r1, #5
 800d40c:	4298      	cmp	r0, r3
 800d40e:	b510      	push	{r4, lr}
 800d410:	db11      	blt.n	800d436 <__any_on+0x32>
 800d412:	dd0a      	ble.n	800d42a <__any_on+0x26>
 800d414:	f011 011f 	ands.w	r1, r1, #31
 800d418:	d007      	beq.n	800d42a <__any_on+0x26>
 800d41a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d41e:	fa24 f001 	lsr.w	r0, r4, r1
 800d422:	fa00 f101 	lsl.w	r1, r0, r1
 800d426:	428c      	cmp	r4, r1
 800d428:	d10b      	bne.n	800d442 <__any_on+0x3e>
 800d42a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d42e:	4293      	cmp	r3, r2
 800d430:	d803      	bhi.n	800d43a <__any_on+0x36>
 800d432:	2000      	movs	r0, #0
 800d434:	bd10      	pop	{r4, pc}
 800d436:	4603      	mov	r3, r0
 800d438:	e7f7      	b.n	800d42a <__any_on+0x26>
 800d43a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d43e:	2900      	cmp	r1, #0
 800d440:	d0f5      	beq.n	800d42e <__any_on+0x2a>
 800d442:	2001      	movs	r0, #1
 800d444:	e7f6      	b.n	800d434 <__any_on+0x30>

0800d446 <sulp>:
 800d446:	b570      	push	{r4, r5, r6, lr}
 800d448:	4604      	mov	r4, r0
 800d44a:	460d      	mov	r5, r1
 800d44c:	4616      	mov	r6, r2
 800d44e:	ec45 4b10 	vmov	d0, r4, r5
 800d452:	f7ff febd 	bl	800d1d0 <__ulp>
 800d456:	b17e      	cbz	r6, 800d478 <sulp+0x32>
 800d458:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800d45c:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800d460:	2b00      	cmp	r3, #0
 800d462:	dd09      	ble.n	800d478 <sulp+0x32>
 800d464:	051b      	lsls	r3, r3, #20
 800d466:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 800d46a:	2000      	movs	r0, #0
 800d46c:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 800d470:	ec41 0b17 	vmov	d7, r0, r1
 800d474:	ee20 0b07 	vmul.f64	d0, d0, d7
 800d478:	bd70      	pop	{r4, r5, r6, pc}
 800d47a:	0000      	movs	r0, r0
 800d47c:	0000      	movs	r0, r0
	...

0800d480 <_strtod_l>:
 800d480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d484:	ed2d 8b0a 	vpush	{d8-d12}
 800d488:	b097      	sub	sp, #92	@ 0x5c
 800d48a:	4688      	mov	r8, r1
 800d48c:	920e      	str	r2, [sp, #56]	@ 0x38
 800d48e:	2200      	movs	r2, #0
 800d490:	9212      	str	r2, [sp, #72]	@ 0x48
 800d492:	9005      	str	r0, [sp, #20]
 800d494:	f04f 0a00 	mov.w	sl, #0
 800d498:	f04f 0b00 	mov.w	fp, #0
 800d49c:	460a      	mov	r2, r1
 800d49e:	9211      	str	r2, [sp, #68]	@ 0x44
 800d4a0:	7811      	ldrb	r1, [r2, #0]
 800d4a2:	292b      	cmp	r1, #43	@ 0x2b
 800d4a4:	d04c      	beq.n	800d540 <_strtod_l+0xc0>
 800d4a6:	d839      	bhi.n	800d51c <_strtod_l+0x9c>
 800d4a8:	290d      	cmp	r1, #13
 800d4aa:	d833      	bhi.n	800d514 <_strtod_l+0x94>
 800d4ac:	2908      	cmp	r1, #8
 800d4ae:	d833      	bhi.n	800d518 <_strtod_l+0x98>
 800d4b0:	2900      	cmp	r1, #0
 800d4b2:	d03c      	beq.n	800d52e <_strtod_l+0xae>
 800d4b4:	2200      	movs	r2, #0
 800d4b6:	9208      	str	r2, [sp, #32]
 800d4b8:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 800d4ba:	782a      	ldrb	r2, [r5, #0]
 800d4bc:	2a30      	cmp	r2, #48	@ 0x30
 800d4be:	f040 80b5 	bne.w	800d62c <_strtod_l+0x1ac>
 800d4c2:	786a      	ldrb	r2, [r5, #1]
 800d4c4:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d4c8:	2a58      	cmp	r2, #88	@ 0x58
 800d4ca:	d170      	bne.n	800d5ae <_strtod_l+0x12e>
 800d4cc:	9302      	str	r3, [sp, #8]
 800d4ce:	9b08      	ldr	r3, [sp, #32]
 800d4d0:	9301      	str	r3, [sp, #4]
 800d4d2:	ab12      	add	r3, sp, #72	@ 0x48
 800d4d4:	9300      	str	r3, [sp, #0]
 800d4d6:	4a8b      	ldr	r2, [pc, #556]	@ (800d704 <_strtod_l+0x284>)
 800d4d8:	9805      	ldr	r0, [sp, #20]
 800d4da:	ab13      	add	r3, sp, #76	@ 0x4c
 800d4dc:	a911      	add	r1, sp, #68	@ 0x44
 800d4de:	f001 fa63 	bl	800e9a8 <__gethex>
 800d4e2:	f010 060f 	ands.w	r6, r0, #15
 800d4e6:	4604      	mov	r4, r0
 800d4e8:	d005      	beq.n	800d4f6 <_strtod_l+0x76>
 800d4ea:	2e06      	cmp	r6, #6
 800d4ec:	d12a      	bne.n	800d544 <_strtod_l+0xc4>
 800d4ee:	3501      	adds	r5, #1
 800d4f0:	2300      	movs	r3, #0
 800d4f2:	9511      	str	r5, [sp, #68]	@ 0x44
 800d4f4:	9308      	str	r3, [sp, #32]
 800d4f6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	f040 852f 	bne.w	800df5c <_strtod_l+0xadc>
 800d4fe:	9b08      	ldr	r3, [sp, #32]
 800d500:	ec4b ab10 	vmov	d0, sl, fp
 800d504:	b1cb      	cbz	r3, 800d53a <_strtod_l+0xba>
 800d506:	eeb1 0b40 	vneg.f64	d0, d0
 800d50a:	b017      	add	sp, #92	@ 0x5c
 800d50c:	ecbd 8b0a 	vpop	{d8-d12}
 800d510:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d514:	2920      	cmp	r1, #32
 800d516:	d1cd      	bne.n	800d4b4 <_strtod_l+0x34>
 800d518:	3201      	adds	r2, #1
 800d51a:	e7c0      	b.n	800d49e <_strtod_l+0x1e>
 800d51c:	292d      	cmp	r1, #45	@ 0x2d
 800d51e:	d1c9      	bne.n	800d4b4 <_strtod_l+0x34>
 800d520:	2101      	movs	r1, #1
 800d522:	9108      	str	r1, [sp, #32]
 800d524:	1c51      	adds	r1, r2, #1
 800d526:	9111      	str	r1, [sp, #68]	@ 0x44
 800d528:	7852      	ldrb	r2, [r2, #1]
 800d52a:	2a00      	cmp	r2, #0
 800d52c:	d1c4      	bne.n	800d4b8 <_strtod_l+0x38>
 800d52e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d530:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800d534:	2b00      	cmp	r3, #0
 800d536:	f040 850f 	bne.w	800df58 <_strtod_l+0xad8>
 800d53a:	ec4b ab10 	vmov	d0, sl, fp
 800d53e:	e7e4      	b.n	800d50a <_strtod_l+0x8a>
 800d540:	2100      	movs	r1, #0
 800d542:	e7ee      	b.n	800d522 <_strtod_l+0xa2>
 800d544:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800d546:	b13a      	cbz	r2, 800d558 <_strtod_l+0xd8>
 800d548:	2135      	movs	r1, #53	@ 0x35
 800d54a:	a814      	add	r0, sp, #80	@ 0x50
 800d54c:	f7ff ff37 	bl	800d3be <__copybits>
 800d550:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800d552:	9805      	ldr	r0, [sp, #20]
 800d554:	f7ff fb08 	bl	800cb68 <_Bfree>
 800d558:	1e73      	subs	r3, r6, #1
 800d55a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800d55c:	2b04      	cmp	r3, #4
 800d55e:	d806      	bhi.n	800d56e <_strtod_l+0xee>
 800d560:	e8df f003 	tbb	[pc, r3]
 800d564:	201d0314 	.word	0x201d0314
 800d568:	14          	.byte	0x14
 800d569:	00          	.byte	0x00
 800d56a:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 800d56e:	05e3      	lsls	r3, r4, #23
 800d570:	bf48      	it	mi
 800d572:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800d576:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d57a:	0d1b      	lsrs	r3, r3, #20
 800d57c:	051b      	lsls	r3, r3, #20
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d1b9      	bne.n	800d4f6 <_strtod_l+0x76>
 800d582:	f7fe fc45 	bl	800be10 <__errno>
 800d586:	2322      	movs	r3, #34	@ 0x22
 800d588:	6003      	str	r3, [r0, #0]
 800d58a:	e7b4      	b.n	800d4f6 <_strtod_l+0x76>
 800d58c:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 800d590:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800d594:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800d598:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800d59c:	e7e7      	b.n	800d56e <_strtod_l+0xee>
 800d59e:	f8df b16c 	ldr.w	fp, [pc, #364]	@ 800d70c <_strtod_l+0x28c>
 800d5a2:	e7e4      	b.n	800d56e <_strtod_l+0xee>
 800d5a4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800d5a8:	f04f 3aff 	mov.w	sl, #4294967295
 800d5ac:	e7df      	b.n	800d56e <_strtod_l+0xee>
 800d5ae:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d5b0:	1c5a      	adds	r2, r3, #1
 800d5b2:	9211      	str	r2, [sp, #68]	@ 0x44
 800d5b4:	785b      	ldrb	r3, [r3, #1]
 800d5b6:	2b30      	cmp	r3, #48	@ 0x30
 800d5b8:	d0f9      	beq.n	800d5ae <_strtod_l+0x12e>
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d09b      	beq.n	800d4f6 <_strtod_l+0x76>
 800d5be:	2301      	movs	r3, #1
 800d5c0:	2600      	movs	r6, #0
 800d5c2:	9307      	str	r3, [sp, #28]
 800d5c4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d5c6:	930a      	str	r3, [sp, #40]	@ 0x28
 800d5c8:	46b1      	mov	r9, r6
 800d5ca:	4635      	mov	r5, r6
 800d5cc:	220a      	movs	r2, #10
 800d5ce:	9811      	ldr	r0, [sp, #68]	@ 0x44
 800d5d0:	7804      	ldrb	r4, [r0, #0]
 800d5d2:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 800d5d6:	b2d9      	uxtb	r1, r3
 800d5d8:	2909      	cmp	r1, #9
 800d5da:	d929      	bls.n	800d630 <_strtod_l+0x1b0>
 800d5dc:	494a      	ldr	r1, [pc, #296]	@ (800d708 <_strtod_l+0x288>)
 800d5de:	2201      	movs	r2, #1
 800d5e0:	f001 f928 	bl	800e834 <strncmp>
 800d5e4:	b378      	cbz	r0, 800d646 <_strtod_l+0x1c6>
 800d5e6:	2000      	movs	r0, #0
 800d5e8:	4622      	mov	r2, r4
 800d5ea:	462b      	mov	r3, r5
 800d5ec:	4607      	mov	r7, r0
 800d5ee:	9006      	str	r0, [sp, #24]
 800d5f0:	2a65      	cmp	r2, #101	@ 0x65
 800d5f2:	d001      	beq.n	800d5f8 <_strtod_l+0x178>
 800d5f4:	2a45      	cmp	r2, #69	@ 0x45
 800d5f6:	d117      	bne.n	800d628 <_strtod_l+0x1a8>
 800d5f8:	b91b      	cbnz	r3, 800d602 <_strtod_l+0x182>
 800d5fa:	9b07      	ldr	r3, [sp, #28]
 800d5fc:	4303      	orrs	r3, r0
 800d5fe:	d096      	beq.n	800d52e <_strtod_l+0xae>
 800d600:	2300      	movs	r3, #0
 800d602:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 800d606:	f108 0201 	add.w	r2, r8, #1
 800d60a:	9211      	str	r2, [sp, #68]	@ 0x44
 800d60c:	f898 2001 	ldrb.w	r2, [r8, #1]
 800d610:	2a2b      	cmp	r2, #43	@ 0x2b
 800d612:	d06b      	beq.n	800d6ec <_strtod_l+0x26c>
 800d614:	2a2d      	cmp	r2, #45	@ 0x2d
 800d616:	d071      	beq.n	800d6fc <_strtod_l+0x27c>
 800d618:	f04f 0e00 	mov.w	lr, #0
 800d61c:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 800d620:	2c09      	cmp	r4, #9
 800d622:	d979      	bls.n	800d718 <_strtod_l+0x298>
 800d624:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800d628:	2400      	movs	r4, #0
 800d62a:	e094      	b.n	800d756 <_strtod_l+0x2d6>
 800d62c:	2300      	movs	r3, #0
 800d62e:	e7c7      	b.n	800d5c0 <_strtod_l+0x140>
 800d630:	2d08      	cmp	r5, #8
 800d632:	f100 0001 	add.w	r0, r0, #1
 800d636:	bfd4      	ite	le
 800d638:	fb02 3909 	mlale	r9, r2, r9, r3
 800d63c:	fb02 3606 	mlagt	r6, r2, r6, r3
 800d640:	3501      	adds	r5, #1
 800d642:	9011      	str	r0, [sp, #68]	@ 0x44
 800d644:	e7c3      	b.n	800d5ce <_strtod_l+0x14e>
 800d646:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d648:	1c5a      	adds	r2, r3, #1
 800d64a:	9211      	str	r2, [sp, #68]	@ 0x44
 800d64c:	785a      	ldrb	r2, [r3, #1]
 800d64e:	b375      	cbz	r5, 800d6ae <_strtod_l+0x22e>
 800d650:	4607      	mov	r7, r0
 800d652:	462b      	mov	r3, r5
 800d654:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800d658:	2909      	cmp	r1, #9
 800d65a:	d913      	bls.n	800d684 <_strtod_l+0x204>
 800d65c:	2101      	movs	r1, #1
 800d65e:	9106      	str	r1, [sp, #24]
 800d660:	e7c6      	b.n	800d5f0 <_strtod_l+0x170>
 800d662:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d664:	1c5a      	adds	r2, r3, #1
 800d666:	9211      	str	r2, [sp, #68]	@ 0x44
 800d668:	785a      	ldrb	r2, [r3, #1]
 800d66a:	3001      	adds	r0, #1
 800d66c:	2a30      	cmp	r2, #48	@ 0x30
 800d66e:	d0f8      	beq.n	800d662 <_strtod_l+0x1e2>
 800d670:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800d674:	2b08      	cmp	r3, #8
 800d676:	f200 8476 	bhi.w	800df66 <_strtod_l+0xae6>
 800d67a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d67c:	930a      	str	r3, [sp, #40]	@ 0x28
 800d67e:	4607      	mov	r7, r0
 800d680:	2000      	movs	r0, #0
 800d682:	4603      	mov	r3, r0
 800d684:	3a30      	subs	r2, #48	@ 0x30
 800d686:	f100 0101 	add.w	r1, r0, #1
 800d68a:	d023      	beq.n	800d6d4 <_strtod_l+0x254>
 800d68c:	440f      	add	r7, r1
 800d68e:	eb00 0c03 	add.w	ip, r0, r3
 800d692:	4619      	mov	r1, r3
 800d694:	240a      	movs	r4, #10
 800d696:	4561      	cmp	r1, ip
 800d698:	d10b      	bne.n	800d6b2 <_strtod_l+0x232>
 800d69a:	1c5c      	adds	r4, r3, #1
 800d69c:	4403      	add	r3, r0
 800d69e:	2b08      	cmp	r3, #8
 800d6a0:	4404      	add	r4, r0
 800d6a2:	dc11      	bgt.n	800d6c8 <_strtod_l+0x248>
 800d6a4:	230a      	movs	r3, #10
 800d6a6:	fb03 2909 	mla	r9, r3, r9, r2
 800d6aa:	2100      	movs	r1, #0
 800d6ac:	e013      	b.n	800d6d6 <_strtod_l+0x256>
 800d6ae:	4628      	mov	r0, r5
 800d6b0:	e7dc      	b.n	800d66c <_strtod_l+0x1ec>
 800d6b2:	2908      	cmp	r1, #8
 800d6b4:	f101 0101 	add.w	r1, r1, #1
 800d6b8:	dc02      	bgt.n	800d6c0 <_strtod_l+0x240>
 800d6ba:	fb04 f909 	mul.w	r9, r4, r9
 800d6be:	e7ea      	b.n	800d696 <_strtod_l+0x216>
 800d6c0:	2910      	cmp	r1, #16
 800d6c2:	bfd8      	it	le
 800d6c4:	4366      	mulle	r6, r4
 800d6c6:	e7e6      	b.n	800d696 <_strtod_l+0x216>
 800d6c8:	2b0f      	cmp	r3, #15
 800d6ca:	dcee      	bgt.n	800d6aa <_strtod_l+0x22a>
 800d6cc:	230a      	movs	r3, #10
 800d6ce:	fb03 2606 	mla	r6, r3, r6, r2
 800d6d2:	e7ea      	b.n	800d6aa <_strtod_l+0x22a>
 800d6d4:	461c      	mov	r4, r3
 800d6d6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d6d8:	1c5a      	adds	r2, r3, #1
 800d6da:	9211      	str	r2, [sp, #68]	@ 0x44
 800d6dc:	785a      	ldrb	r2, [r3, #1]
 800d6de:	4608      	mov	r0, r1
 800d6e0:	4623      	mov	r3, r4
 800d6e2:	e7b7      	b.n	800d654 <_strtod_l+0x1d4>
 800d6e4:	2301      	movs	r3, #1
 800d6e6:	2700      	movs	r7, #0
 800d6e8:	9306      	str	r3, [sp, #24]
 800d6ea:	e786      	b.n	800d5fa <_strtod_l+0x17a>
 800d6ec:	f04f 0e00 	mov.w	lr, #0
 800d6f0:	f108 0202 	add.w	r2, r8, #2
 800d6f4:	9211      	str	r2, [sp, #68]	@ 0x44
 800d6f6:	f898 2002 	ldrb.w	r2, [r8, #2]
 800d6fa:	e78f      	b.n	800d61c <_strtod_l+0x19c>
 800d6fc:	f04f 0e01 	mov.w	lr, #1
 800d700:	e7f6      	b.n	800d6f0 <_strtod_l+0x270>
 800d702:	bf00      	nop
 800d704:	0800f4e0 	.word	0x0800f4e0
 800d708:	0800f4c8 	.word	0x0800f4c8
 800d70c:	7ff00000 	.word	0x7ff00000
 800d710:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800d712:	1c54      	adds	r4, r2, #1
 800d714:	9411      	str	r4, [sp, #68]	@ 0x44
 800d716:	7852      	ldrb	r2, [r2, #1]
 800d718:	2a30      	cmp	r2, #48	@ 0x30
 800d71a:	d0f9      	beq.n	800d710 <_strtod_l+0x290>
 800d71c:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 800d720:	2c08      	cmp	r4, #8
 800d722:	d881      	bhi.n	800d628 <_strtod_l+0x1a8>
 800d724:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 800d728:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800d72a:	9209      	str	r2, [sp, #36]	@ 0x24
 800d72c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800d72e:	1c51      	adds	r1, r2, #1
 800d730:	9111      	str	r1, [sp, #68]	@ 0x44
 800d732:	7852      	ldrb	r2, [r2, #1]
 800d734:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 800d738:	2c09      	cmp	r4, #9
 800d73a:	d938      	bls.n	800d7ae <_strtod_l+0x32e>
 800d73c:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 800d73e:	1b0c      	subs	r4, r1, r4
 800d740:	2c08      	cmp	r4, #8
 800d742:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 800d746:	dc02      	bgt.n	800d74e <_strtod_l+0x2ce>
 800d748:	4564      	cmp	r4, ip
 800d74a:	bfa8      	it	ge
 800d74c:	4664      	movge	r4, ip
 800d74e:	f1be 0f00 	cmp.w	lr, #0
 800d752:	d000      	beq.n	800d756 <_strtod_l+0x2d6>
 800d754:	4264      	negs	r4, r4
 800d756:	2b00      	cmp	r3, #0
 800d758:	d14e      	bne.n	800d7f8 <_strtod_l+0x378>
 800d75a:	9b07      	ldr	r3, [sp, #28]
 800d75c:	4318      	orrs	r0, r3
 800d75e:	f47f aeca 	bne.w	800d4f6 <_strtod_l+0x76>
 800d762:	9b06      	ldr	r3, [sp, #24]
 800d764:	2b00      	cmp	r3, #0
 800d766:	f47f aee2 	bne.w	800d52e <_strtod_l+0xae>
 800d76a:	2a69      	cmp	r2, #105	@ 0x69
 800d76c:	d027      	beq.n	800d7be <_strtod_l+0x33e>
 800d76e:	dc24      	bgt.n	800d7ba <_strtod_l+0x33a>
 800d770:	2a49      	cmp	r2, #73	@ 0x49
 800d772:	d024      	beq.n	800d7be <_strtod_l+0x33e>
 800d774:	2a4e      	cmp	r2, #78	@ 0x4e
 800d776:	f47f aeda 	bne.w	800d52e <_strtod_l+0xae>
 800d77a:	4997      	ldr	r1, [pc, #604]	@ (800d9d8 <_strtod_l+0x558>)
 800d77c:	a811      	add	r0, sp, #68	@ 0x44
 800d77e:	f001 fb35 	bl	800edec <__match>
 800d782:	2800      	cmp	r0, #0
 800d784:	f43f aed3 	beq.w	800d52e <_strtod_l+0xae>
 800d788:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d78a:	781b      	ldrb	r3, [r3, #0]
 800d78c:	2b28      	cmp	r3, #40	@ 0x28
 800d78e:	d12d      	bne.n	800d7ec <_strtod_l+0x36c>
 800d790:	4992      	ldr	r1, [pc, #584]	@ (800d9dc <_strtod_l+0x55c>)
 800d792:	aa14      	add	r2, sp, #80	@ 0x50
 800d794:	a811      	add	r0, sp, #68	@ 0x44
 800d796:	f001 fb3d 	bl	800ee14 <__hexnan>
 800d79a:	2805      	cmp	r0, #5
 800d79c:	d126      	bne.n	800d7ec <_strtod_l+0x36c>
 800d79e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800d7a0:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 800d7a4:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800d7a8:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800d7ac:	e6a3      	b.n	800d4f6 <_strtod_l+0x76>
 800d7ae:	240a      	movs	r4, #10
 800d7b0:	fb04 2c0c 	mla	ip, r4, ip, r2
 800d7b4:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 800d7b8:	e7b8      	b.n	800d72c <_strtod_l+0x2ac>
 800d7ba:	2a6e      	cmp	r2, #110	@ 0x6e
 800d7bc:	e7db      	b.n	800d776 <_strtod_l+0x2f6>
 800d7be:	4988      	ldr	r1, [pc, #544]	@ (800d9e0 <_strtod_l+0x560>)
 800d7c0:	a811      	add	r0, sp, #68	@ 0x44
 800d7c2:	f001 fb13 	bl	800edec <__match>
 800d7c6:	2800      	cmp	r0, #0
 800d7c8:	f43f aeb1 	beq.w	800d52e <_strtod_l+0xae>
 800d7cc:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d7ce:	4985      	ldr	r1, [pc, #532]	@ (800d9e4 <_strtod_l+0x564>)
 800d7d0:	3b01      	subs	r3, #1
 800d7d2:	a811      	add	r0, sp, #68	@ 0x44
 800d7d4:	9311      	str	r3, [sp, #68]	@ 0x44
 800d7d6:	f001 fb09 	bl	800edec <__match>
 800d7da:	b910      	cbnz	r0, 800d7e2 <_strtod_l+0x362>
 800d7dc:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d7de:	3301      	adds	r3, #1
 800d7e0:	9311      	str	r3, [sp, #68]	@ 0x44
 800d7e2:	f8df b214 	ldr.w	fp, [pc, #532]	@ 800d9f8 <_strtod_l+0x578>
 800d7e6:	f04f 0a00 	mov.w	sl, #0
 800d7ea:	e684      	b.n	800d4f6 <_strtod_l+0x76>
 800d7ec:	487e      	ldr	r0, [pc, #504]	@ (800d9e8 <_strtod_l+0x568>)
 800d7ee:	f001 f857 	bl	800e8a0 <nan>
 800d7f2:	ec5b ab10 	vmov	sl, fp, d0
 800d7f6:	e67e      	b.n	800d4f6 <_strtod_l+0x76>
 800d7f8:	ee07 9a90 	vmov	s15, r9
 800d7fc:	1be2      	subs	r2, r4, r7
 800d7fe:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800d802:	2d00      	cmp	r5, #0
 800d804:	bf08      	it	eq
 800d806:	461d      	moveq	r5, r3
 800d808:	2b10      	cmp	r3, #16
 800d80a:	9209      	str	r2, [sp, #36]	@ 0x24
 800d80c:	461a      	mov	r2, r3
 800d80e:	bfa8      	it	ge
 800d810:	2210      	movge	r2, #16
 800d812:	2b09      	cmp	r3, #9
 800d814:	ec5b ab17 	vmov	sl, fp, d7
 800d818:	dc15      	bgt.n	800d846 <_strtod_l+0x3c6>
 800d81a:	1be1      	subs	r1, r4, r7
 800d81c:	2900      	cmp	r1, #0
 800d81e:	f43f ae6a 	beq.w	800d4f6 <_strtod_l+0x76>
 800d822:	eba4 0107 	sub.w	r1, r4, r7
 800d826:	dd72      	ble.n	800d90e <_strtod_l+0x48e>
 800d828:	2916      	cmp	r1, #22
 800d82a:	dc59      	bgt.n	800d8e0 <_strtod_l+0x460>
 800d82c:	4b6f      	ldr	r3, [pc, #444]	@ (800d9ec <_strtod_l+0x56c>)
 800d82e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d830:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d834:	ed93 7b00 	vldr	d7, [r3]
 800d838:	ec4b ab16 	vmov	d6, sl, fp
 800d83c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d840:	ec5b ab17 	vmov	sl, fp, d7
 800d844:	e657      	b.n	800d4f6 <_strtod_l+0x76>
 800d846:	4969      	ldr	r1, [pc, #420]	@ (800d9ec <_strtod_l+0x56c>)
 800d848:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800d84c:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 800d850:	ee06 6a90 	vmov	s13, r6
 800d854:	2b0f      	cmp	r3, #15
 800d856:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 800d85a:	eea7 6b05 	vfma.f64	d6, d7, d5
 800d85e:	ec5b ab16 	vmov	sl, fp, d6
 800d862:	ddda      	ble.n	800d81a <_strtod_l+0x39a>
 800d864:	1a9a      	subs	r2, r3, r2
 800d866:	1be1      	subs	r1, r4, r7
 800d868:	440a      	add	r2, r1
 800d86a:	2a00      	cmp	r2, #0
 800d86c:	f340 8094 	ble.w	800d998 <_strtod_l+0x518>
 800d870:	f012 000f 	ands.w	r0, r2, #15
 800d874:	d00a      	beq.n	800d88c <_strtod_l+0x40c>
 800d876:	495d      	ldr	r1, [pc, #372]	@ (800d9ec <_strtod_l+0x56c>)
 800d878:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800d87c:	ed91 7b00 	vldr	d7, [r1]
 800d880:	ec4b ab16 	vmov	d6, sl, fp
 800d884:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d888:	ec5b ab17 	vmov	sl, fp, d7
 800d88c:	f032 020f 	bics.w	r2, r2, #15
 800d890:	d073      	beq.n	800d97a <_strtod_l+0x4fa>
 800d892:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 800d896:	dd47      	ble.n	800d928 <_strtod_l+0x4a8>
 800d898:	2400      	movs	r4, #0
 800d89a:	4625      	mov	r5, r4
 800d89c:	9407      	str	r4, [sp, #28]
 800d89e:	4626      	mov	r6, r4
 800d8a0:	9a05      	ldr	r2, [sp, #20]
 800d8a2:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800d9f8 <_strtod_l+0x578>
 800d8a6:	2322      	movs	r3, #34	@ 0x22
 800d8a8:	6013      	str	r3, [r2, #0]
 800d8aa:	f04f 0a00 	mov.w	sl, #0
 800d8ae:	9b07      	ldr	r3, [sp, #28]
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	f43f ae20 	beq.w	800d4f6 <_strtod_l+0x76>
 800d8b6:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800d8b8:	9805      	ldr	r0, [sp, #20]
 800d8ba:	f7ff f955 	bl	800cb68 <_Bfree>
 800d8be:	9805      	ldr	r0, [sp, #20]
 800d8c0:	4631      	mov	r1, r6
 800d8c2:	f7ff f951 	bl	800cb68 <_Bfree>
 800d8c6:	9805      	ldr	r0, [sp, #20]
 800d8c8:	4629      	mov	r1, r5
 800d8ca:	f7ff f94d 	bl	800cb68 <_Bfree>
 800d8ce:	9907      	ldr	r1, [sp, #28]
 800d8d0:	9805      	ldr	r0, [sp, #20]
 800d8d2:	f7ff f949 	bl	800cb68 <_Bfree>
 800d8d6:	9805      	ldr	r0, [sp, #20]
 800d8d8:	4621      	mov	r1, r4
 800d8da:	f7ff f945 	bl	800cb68 <_Bfree>
 800d8de:	e60a      	b.n	800d4f6 <_strtod_l+0x76>
 800d8e0:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 800d8e4:	1be0      	subs	r0, r4, r7
 800d8e6:	4281      	cmp	r1, r0
 800d8e8:	dbbc      	blt.n	800d864 <_strtod_l+0x3e4>
 800d8ea:	4a40      	ldr	r2, [pc, #256]	@ (800d9ec <_strtod_l+0x56c>)
 800d8ec:	f1c3 030f 	rsb	r3, r3, #15
 800d8f0:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800d8f4:	ed91 7b00 	vldr	d7, [r1]
 800d8f8:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d8fa:	ec4b ab16 	vmov	d6, sl, fp
 800d8fe:	1acb      	subs	r3, r1, r3
 800d900:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800d904:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d908:	ed92 6b00 	vldr	d6, [r2]
 800d90c:	e796      	b.n	800d83c <_strtod_l+0x3bc>
 800d90e:	3116      	adds	r1, #22
 800d910:	dba8      	blt.n	800d864 <_strtod_l+0x3e4>
 800d912:	4b36      	ldr	r3, [pc, #216]	@ (800d9ec <_strtod_l+0x56c>)
 800d914:	1b3c      	subs	r4, r7, r4
 800d916:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800d91a:	ed94 7b00 	vldr	d7, [r4]
 800d91e:	ec4b ab16 	vmov	d6, sl, fp
 800d922:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800d926:	e78b      	b.n	800d840 <_strtod_l+0x3c0>
 800d928:	2000      	movs	r0, #0
 800d92a:	ec4b ab17 	vmov	d7, sl, fp
 800d92e:	4e30      	ldr	r6, [pc, #192]	@ (800d9f0 <_strtod_l+0x570>)
 800d930:	1112      	asrs	r2, r2, #4
 800d932:	4601      	mov	r1, r0
 800d934:	2a01      	cmp	r2, #1
 800d936:	dc23      	bgt.n	800d980 <_strtod_l+0x500>
 800d938:	b108      	cbz	r0, 800d93e <_strtod_l+0x4be>
 800d93a:	ec5b ab17 	vmov	sl, fp, d7
 800d93e:	4a2c      	ldr	r2, [pc, #176]	@ (800d9f0 <_strtod_l+0x570>)
 800d940:	482c      	ldr	r0, [pc, #176]	@ (800d9f4 <_strtod_l+0x574>)
 800d942:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800d946:	ed92 7b00 	vldr	d7, [r2]
 800d94a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800d94e:	ec4b ab16 	vmov	d6, sl, fp
 800d952:	4a29      	ldr	r2, [pc, #164]	@ (800d9f8 <_strtod_l+0x578>)
 800d954:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d958:	ee17 1a90 	vmov	r1, s15
 800d95c:	400a      	ands	r2, r1
 800d95e:	4282      	cmp	r2, r0
 800d960:	ec5b ab17 	vmov	sl, fp, d7
 800d964:	d898      	bhi.n	800d898 <_strtod_l+0x418>
 800d966:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 800d96a:	4282      	cmp	r2, r0
 800d96c:	bf86      	itte	hi
 800d96e:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 800d9fc <_strtod_l+0x57c>
 800d972:	f04f 3aff 	movhi.w	sl, #4294967295
 800d976:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 800d97a:	2200      	movs	r2, #0
 800d97c:	9206      	str	r2, [sp, #24]
 800d97e:	e076      	b.n	800da6e <_strtod_l+0x5ee>
 800d980:	f012 0f01 	tst.w	r2, #1
 800d984:	d004      	beq.n	800d990 <_strtod_l+0x510>
 800d986:	ed96 6b00 	vldr	d6, [r6]
 800d98a:	2001      	movs	r0, #1
 800d98c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d990:	3101      	adds	r1, #1
 800d992:	1052      	asrs	r2, r2, #1
 800d994:	3608      	adds	r6, #8
 800d996:	e7cd      	b.n	800d934 <_strtod_l+0x4b4>
 800d998:	d0ef      	beq.n	800d97a <_strtod_l+0x4fa>
 800d99a:	4252      	negs	r2, r2
 800d99c:	f012 000f 	ands.w	r0, r2, #15
 800d9a0:	d00a      	beq.n	800d9b8 <_strtod_l+0x538>
 800d9a2:	4912      	ldr	r1, [pc, #72]	@ (800d9ec <_strtod_l+0x56c>)
 800d9a4:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800d9a8:	ed91 7b00 	vldr	d7, [r1]
 800d9ac:	ec4b ab16 	vmov	d6, sl, fp
 800d9b0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800d9b4:	ec5b ab17 	vmov	sl, fp, d7
 800d9b8:	1112      	asrs	r2, r2, #4
 800d9ba:	d0de      	beq.n	800d97a <_strtod_l+0x4fa>
 800d9bc:	2a1f      	cmp	r2, #31
 800d9be:	dd1f      	ble.n	800da00 <_strtod_l+0x580>
 800d9c0:	2400      	movs	r4, #0
 800d9c2:	4625      	mov	r5, r4
 800d9c4:	9407      	str	r4, [sp, #28]
 800d9c6:	4626      	mov	r6, r4
 800d9c8:	9a05      	ldr	r2, [sp, #20]
 800d9ca:	2322      	movs	r3, #34	@ 0x22
 800d9cc:	f04f 0a00 	mov.w	sl, #0
 800d9d0:	f04f 0b00 	mov.w	fp, #0
 800d9d4:	6013      	str	r3, [r2, #0]
 800d9d6:	e76a      	b.n	800d8ae <_strtod_l+0x42e>
 800d9d8:	0800f2b5 	.word	0x0800f2b5
 800d9dc:	0800f4cc 	.word	0x0800f4cc
 800d9e0:	0800f2ad 	.word	0x0800f2ad
 800d9e4:	0800f2e4 	.word	0x0800f2e4
 800d9e8:	0800f2a7 	.word	0x0800f2a7
 800d9ec:	0800f400 	.word	0x0800f400
 800d9f0:	0800f3d8 	.word	0x0800f3d8
 800d9f4:	7ca00000 	.word	0x7ca00000
 800d9f8:	7ff00000 	.word	0x7ff00000
 800d9fc:	7fefffff 	.word	0x7fefffff
 800da00:	f012 0110 	ands.w	r1, r2, #16
 800da04:	bf18      	it	ne
 800da06:	216a      	movne	r1, #106	@ 0x6a
 800da08:	9106      	str	r1, [sp, #24]
 800da0a:	ec4b ab17 	vmov	d7, sl, fp
 800da0e:	49b0      	ldr	r1, [pc, #704]	@ (800dcd0 <_strtod_l+0x850>)
 800da10:	2000      	movs	r0, #0
 800da12:	07d6      	lsls	r6, r2, #31
 800da14:	d504      	bpl.n	800da20 <_strtod_l+0x5a0>
 800da16:	ed91 6b00 	vldr	d6, [r1]
 800da1a:	2001      	movs	r0, #1
 800da1c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800da20:	1052      	asrs	r2, r2, #1
 800da22:	f101 0108 	add.w	r1, r1, #8
 800da26:	d1f4      	bne.n	800da12 <_strtod_l+0x592>
 800da28:	b108      	cbz	r0, 800da2e <_strtod_l+0x5ae>
 800da2a:	ec5b ab17 	vmov	sl, fp, d7
 800da2e:	9a06      	ldr	r2, [sp, #24]
 800da30:	b1b2      	cbz	r2, 800da60 <_strtod_l+0x5e0>
 800da32:	f3cb 510a 	ubfx	r1, fp, #20, #11
 800da36:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 800da3a:	2a00      	cmp	r2, #0
 800da3c:	4658      	mov	r0, fp
 800da3e:	dd0f      	ble.n	800da60 <_strtod_l+0x5e0>
 800da40:	2a1f      	cmp	r2, #31
 800da42:	dd55      	ble.n	800daf0 <_strtod_l+0x670>
 800da44:	2a34      	cmp	r2, #52	@ 0x34
 800da46:	bfde      	ittt	le
 800da48:	f04f 32ff 	movle.w	r2, #4294967295
 800da4c:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 800da50:	408a      	lslle	r2, r1
 800da52:	f04f 0a00 	mov.w	sl, #0
 800da56:	bfcc      	ite	gt
 800da58:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800da5c:	ea02 0b00 	andle.w	fp, r2, r0
 800da60:	ec4b ab17 	vmov	d7, sl, fp
 800da64:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800da68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da6c:	d0a8      	beq.n	800d9c0 <_strtod_l+0x540>
 800da6e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800da70:	9805      	ldr	r0, [sp, #20]
 800da72:	f8cd 9000 	str.w	r9, [sp]
 800da76:	462a      	mov	r2, r5
 800da78:	f7ff f8de 	bl	800cc38 <__s2b>
 800da7c:	9007      	str	r0, [sp, #28]
 800da7e:	2800      	cmp	r0, #0
 800da80:	f43f af0a 	beq.w	800d898 <_strtod_l+0x418>
 800da84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800da86:	1b3f      	subs	r7, r7, r4
 800da88:	2b00      	cmp	r3, #0
 800da8a:	bfb4      	ite	lt
 800da8c:	463b      	movlt	r3, r7
 800da8e:	2300      	movge	r3, #0
 800da90:	930a      	str	r3, [sp, #40]	@ 0x28
 800da92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800da94:	ed9f bb8a 	vldr	d11, [pc, #552]	@ 800dcc0 <_strtod_l+0x840>
 800da98:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800da9c:	2400      	movs	r4, #0
 800da9e:	930d      	str	r3, [sp, #52]	@ 0x34
 800daa0:	4625      	mov	r5, r4
 800daa2:	9b07      	ldr	r3, [sp, #28]
 800daa4:	9805      	ldr	r0, [sp, #20]
 800daa6:	6859      	ldr	r1, [r3, #4]
 800daa8:	f7ff f81e 	bl	800cae8 <_Balloc>
 800daac:	4606      	mov	r6, r0
 800daae:	2800      	cmp	r0, #0
 800dab0:	f43f aef6 	beq.w	800d8a0 <_strtod_l+0x420>
 800dab4:	9b07      	ldr	r3, [sp, #28]
 800dab6:	691a      	ldr	r2, [r3, #16]
 800dab8:	ec4b ab19 	vmov	d9, sl, fp
 800dabc:	3202      	adds	r2, #2
 800dabe:	f103 010c 	add.w	r1, r3, #12
 800dac2:	0092      	lsls	r2, r2, #2
 800dac4:	300c      	adds	r0, #12
 800dac6:	f7fe f9d0 	bl	800be6a <memcpy>
 800daca:	eeb0 0b49 	vmov.f64	d0, d9
 800dace:	9805      	ldr	r0, [sp, #20]
 800dad0:	aa14      	add	r2, sp, #80	@ 0x50
 800dad2:	a913      	add	r1, sp, #76	@ 0x4c
 800dad4:	f7ff fbec 	bl	800d2b0 <__d2b>
 800dad8:	9012      	str	r0, [sp, #72]	@ 0x48
 800dada:	2800      	cmp	r0, #0
 800dadc:	f43f aee0 	beq.w	800d8a0 <_strtod_l+0x420>
 800dae0:	9805      	ldr	r0, [sp, #20]
 800dae2:	2101      	movs	r1, #1
 800dae4:	f7ff f93e 	bl	800cd64 <__i2b>
 800dae8:	4605      	mov	r5, r0
 800daea:	b940      	cbnz	r0, 800dafe <_strtod_l+0x67e>
 800daec:	2500      	movs	r5, #0
 800daee:	e6d7      	b.n	800d8a0 <_strtod_l+0x420>
 800daf0:	f04f 31ff 	mov.w	r1, #4294967295
 800daf4:	fa01 f202 	lsl.w	r2, r1, r2
 800daf8:	ea02 0a0a 	and.w	sl, r2, sl
 800dafc:	e7b0      	b.n	800da60 <_strtod_l+0x5e0>
 800dafe:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 800db00:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800db02:	2f00      	cmp	r7, #0
 800db04:	bfab      	itete	ge
 800db06:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 800db08:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 800db0a:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 800db0e:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 800db12:	bfac      	ite	ge
 800db14:	eb07 0903 	addge.w	r9, r7, r3
 800db18:	eba3 0807 	sublt.w	r8, r3, r7
 800db1c:	9b06      	ldr	r3, [sp, #24]
 800db1e:	1aff      	subs	r7, r7, r3
 800db20:	4417      	add	r7, r2
 800db22:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 800db26:	4a6b      	ldr	r2, [pc, #428]	@ (800dcd4 <_strtod_l+0x854>)
 800db28:	3f01      	subs	r7, #1
 800db2a:	4297      	cmp	r7, r2
 800db2c:	da51      	bge.n	800dbd2 <_strtod_l+0x752>
 800db2e:	1bd1      	subs	r1, r2, r7
 800db30:	291f      	cmp	r1, #31
 800db32:	eba3 0301 	sub.w	r3, r3, r1
 800db36:	f04f 0201 	mov.w	r2, #1
 800db3a:	dc3e      	bgt.n	800dbba <_strtod_l+0x73a>
 800db3c:	408a      	lsls	r2, r1
 800db3e:	920c      	str	r2, [sp, #48]	@ 0x30
 800db40:	2200      	movs	r2, #0
 800db42:	920b      	str	r2, [sp, #44]	@ 0x2c
 800db44:	eb09 0703 	add.w	r7, r9, r3
 800db48:	4498      	add	r8, r3
 800db4a:	9b06      	ldr	r3, [sp, #24]
 800db4c:	45b9      	cmp	r9, r7
 800db4e:	4498      	add	r8, r3
 800db50:	464b      	mov	r3, r9
 800db52:	bfa8      	it	ge
 800db54:	463b      	movge	r3, r7
 800db56:	4543      	cmp	r3, r8
 800db58:	bfa8      	it	ge
 800db5a:	4643      	movge	r3, r8
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	bfc2      	ittt	gt
 800db60:	1aff      	subgt	r7, r7, r3
 800db62:	eba8 0803 	subgt.w	r8, r8, r3
 800db66:	eba9 0903 	subgt.w	r9, r9, r3
 800db6a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	dd16      	ble.n	800db9e <_strtod_l+0x71e>
 800db70:	4629      	mov	r1, r5
 800db72:	9805      	ldr	r0, [sp, #20]
 800db74:	461a      	mov	r2, r3
 800db76:	f7ff f9b5 	bl	800cee4 <__pow5mult>
 800db7a:	4605      	mov	r5, r0
 800db7c:	2800      	cmp	r0, #0
 800db7e:	d0b5      	beq.n	800daec <_strtod_l+0x66c>
 800db80:	4601      	mov	r1, r0
 800db82:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800db84:	9805      	ldr	r0, [sp, #20]
 800db86:	f7ff f903 	bl	800cd90 <__multiply>
 800db8a:	900f      	str	r0, [sp, #60]	@ 0x3c
 800db8c:	2800      	cmp	r0, #0
 800db8e:	f43f ae87 	beq.w	800d8a0 <_strtod_l+0x420>
 800db92:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800db94:	9805      	ldr	r0, [sp, #20]
 800db96:	f7fe ffe7 	bl	800cb68 <_Bfree>
 800db9a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800db9c:	9312      	str	r3, [sp, #72]	@ 0x48
 800db9e:	2f00      	cmp	r7, #0
 800dba0:	dc1b      	bgt.n	800dbda <_strtod_l+0x75a>
 800dba2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	dd21      	ble.n	800dbec <_strtod_l+0x76c>
 800dba8:	4631      	mov	r1, r6
 800dbaa:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800dbac:	9805      	ldr	r0, [sp, #20]
 800dbae:	f7ff f999 	bl	800cee4 <__pow5mult>
 800dbb2:	4606      	mov	r6, r0
 800dbb4:	b9d0      	cbnz	r0, 800dbec <_strtod_l+0x76c>
 800dbb6:	2600      	movs	r6, #0
 800dbb8:	e672      	b.n	800d8a0 <_strtod_l+0x420>
 800dbba:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 800dbbe:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 800dbc2:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 800dbc6:	37e2      	adds	r7, #226	@ 0xe2
 800dbc8:	fa02 f107 	lsl.w	r1, r2, r7
 800dbcc:	910b      	str	r1, [sp, #44]	@ 0x2c
 800dbce:	920c      	str	r2, [sp, #48]	@ 0x30
 800dbd0:	e7b8      	b.n	800db44 <_strtod_l+0x6c4>
 800dbd2:	2200      	movs	r2, #0
 800dbd4:	920b      	str	r2, [sp, #44]	@ 0x2c
 800dbd6:	2201      	movs	r2, #1
 800dbd8:	e7f9      	b.n	800dbce <_strtod_l+0x74e>
 800dbda:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800dbdc:	9805      	ldr	r0, [sp, #20]
 800dbde:	463a      	mov	r2, r7
 800dbe0:	f7ff f9da 	bl	800cf98 <__lshift>
 800dbe4:	9012      	str	r0, [sp, #72]	@ 0x48
 800dbe6:	2800      	cmp	r0, #0
 800dbe8:	d1db      	bne.n	800dba2 <_strtod_l+0x722>
 800dbea:	e659      	b.n	800d8a0 <_strtod_l+0x420>
 800dbec:	f1b8 0f00 	cmp.w	r8, #0
 800dbf0:	dd07      	ble.n	800dc02 <_strtod_l+0x782>
 800dbf2:	4631      	mov	r1, r6
 800dbf4:	9805      	ldr	r0, [sp, #20]
 800dbf6:	4642      	mov	r2, r8
 800dbf8:	f7ff f9ce 	bl	800cf98 <__lshift>
 800dbfc:	4606      	mov	r6, r0
 800dbfe:	2800      	cmp	r0, #0
 800dc00:	d0d9      	beq.n	800dbb6 <_strtod_l+0x736>
 800dc02:	f1b9 0f00 	cmp.w	r9, #0
 800dc06:	dd08      	ble.n	800dc1a <_strtod_l+0x79a>
 800dc08:	4629      	mov	r1, r5
 800dc0a:	9805      	ldr	r0, [sp, #20]
 800dc0c:	464a      	mov	r2, r9
 800dc0e:	f7ff f9c3 	bl	800cf98 <__lshift>
 800dc12:	4605      	mov	r5, r0
 800dc14:	2800      	cmp	r0, #0
 800dc16:	f43f ae43 	beq.w	800d8a0 <_strtod_l+0x420>
 800dc1a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800dc1c:	9805      	ldr	r0, [sp, #20]
 800dc1e:	4632      	mov	r2, r6
 800dc20:	f7ff fa42 	bl	800d0a8 <__mdiff>
 800dc24:	4604      	mov	r4, r0
 800dc26:	2800      	cmp	r0, #0
 800dc28:	f43f ae3a 	beq.w	800d8a0 <_strtod_l+0x420>
 800dc2c:	2300      	movs	r3, #0
 800dc2e:	f8d0 800c 	ldr.w	r8, [r0, #12]
 800dc32:	60c3      	str	r3, [r0, #12]
 800dc34:	4629      	mov	r1, r5
 800dc36:	f7ff fa1b 	bl	800d070 <__mcmp>
 800dc3a:	2800      	cmp	r0, #0
 800dc3c:	da4e      	bge.n	800dcdc <_strtod_l+0x85c>
 800dc3e:	ea58 080a 	orrs.w	r8, r8, sl
 800dc42:	d174      	bne.n	800dd2e <_strtod_l+0x8ae>
 800dc44:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	d170      	bne.n	800dd2e <_strtod_l+0x8ae>
 800dc4c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800dc50:	0d1b      	lsrs	r3, r3, #20
 800dc52:	051b      	lsls	r3, r3, #20
 800dc54:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800dc58:	d969      	bls.n	800dd2e <_strtod_l+0x8ae>
 800dc5a:	6963      	ldr	r3, [r4, #20]
 800dc5c:	b913      	cbnz	r3, 800dc64 <_strtod_l+0x7e4>
 800dc5e:	6923      	ldr	r3, [r4, #16]
 800dc60:	2b01      	cmp	r3, #1
 800dc62:	dd64      	ble.n	800dd2e <_strtod_l+0x8ae>
 800dc64:	4621      	mov	r1, r4
 800dc66:	2201      	movs	r2, #1
 800dc68:	9805      	ldr	r0, [sp, #20]
 800dc6a:	f7ff f995 	bl	800cf98 <__lshift>
 800dc6e:	4629      	mov	r1, r5
 800dc70:	4604      	mov	r4, r0
 800dc72:	f7ff f9fd 	bl	800d070 <__mcmp>
 800dc76:	2800      	cmp	r0, #0
 800dc78:	dd59      	ble.n	800dd2e <_strtod_l+0x8ae>
 800dc7a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800dc7e:	9a06      	ldr	r2, [sp, #24]
 800dc80:	0d1b      	lsrs	r3, r3, #20
 800dc82:	051b      	lsls	r3, r3, #20
 800dc84:	2a00      	cmp	r2, #0
 800dc86:	d070      	beq.n	800dd6a <_strtod_l+0x8ea>
 800dc88:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800dc8c:	d86d      	bhi.n	800dd6a <_strtod_l+0x8ea>
 800dc8e:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800dc92:	f67f ae99 	bls.w	800d9c8 <_strtod_l+0x548>
 800dc96:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 800dcc8 <_strtod_l+0x848>
 800dc9a:	ec4b ab16 	vmov	d6, sl, fp
 800dc9e:	4b0e      	ldr	r3, [pc, #56]	@ (800dcd8 <_strtod_l+0x858>)
 800dca0:	ee26 7b07 	vmul.f64	d7, d6, d7
 800dca4:	ee17 2a90 	vmov	r2, s15
 800dca8:	4013      	ands	r3, r2
 800dcaa:	ec5b ab17 	vmov	sl, fp, d7
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	f47f ae01 	bne.w	800d8b6 <_strtod_l+0x436>
 800dcb4:	9a05      	ldr	r2, [sp, #20]
 800dcb6:	2322      	movs	r3, #34	@ 0x22
 800dcb8:	6013      	str	r3, [r2, #0]
 800dcba:	e5fc      	b.n	800d8b6 <_strtod_l+0x436>
 800dcbc:	f3af 8000 	nop.w
 800dcc0:	ffc00000 	.word	0xffc00000
 800dcc4:	41dfffff 	.word	0x41dfffff
 800dcc8:	00000000 	.word	0x00000000
 800dccc:	39500000 	.word	0x39500000
 800dcd0:	0800f4f8 	.word	0x0800f4f8
 800dcd4:	fffffc02 	.word	0xfffffc02
 800dcd8:	7ff00000 	.word	0x7ff00000
 800dcdc:	46d9      	mov	r9, fp
 800dcde:	d15d      	bne.n	800dd9c <_strtod_l+0x91c>
 800dce0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800dce4:	f1b8 0f00 	cmp.w	r8, #0
 800dce8:	d02a      	beq.n	800dd40 <_strtod_l+0x8c0>
 800dcea:	4aab      	ldr	r2, [pc, #684]	@ (800df98 <_strtod_l+0xb18>)
 800dcec:	4293      	cmp	r3, r2
 800dcee:	d12a      	bne.n	800dd46 <_strtod_l+0x8c6>
 800dcf0:	9b06      	ldr	r3, [sp, #24]
 800dcf2:	4652      	mov	r2, sl
 800dcf4:	b1fb      	cbz	r3, 800dd36 <_strtod_l+0x8b6>
 800dcf6:	4ba9      	ldr	r3, [pc, #676]	@ (800df9c <_strtod_l+0xb1c>)
 800dcf8:	ea0b 0303 	and.w	r3, fp, r3
 800dcfc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800dd00:	f04f 31ff 	mov.w	r1, #4294967295
 800dd04:	d81a      	bhi.n	800dd3c <_strtod_l+0x8bc>
 800dd06:	0d1b      	lsrs	r3, r3, #20
 800dd08:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800dd0c:	fa01 f303 	lsl.w	r3, r1, r3
 800dd10:	429a      	cmp	r2, r3
 800dd12:	d118      	bne.n	800dd46 <_strtod_l+0x8c6>
 800dd14:	4ba2      	ldr	r3, [pc, #648]	@ (800dfa0 <_strtod_l+0xb20>)
 800dd16:	4599      	cmp	r9, r3
 800dd18:	d102      	bne.n	800dd20 <_strtod_l+0x8a0>
 800dd1a:	3201      	adds	r2, #1
 800dd1c:	f43f adc0 	beq.w	800d8a0 <_strtod_l+0x420>
 800dd20:	4b9e      	ldr	r3, [pc, #632]	@ (800df9c <_strtod_l+0xb1c>)
 800dd22:	ea09 0303 	and.w	r3, r9, r3
 800dd26:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 800dd2a:	f04f 0a00 	mov.w	sl, #0
 800dd2e:	9b06      	ldr	r3, [sp, #24]
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d1b0      	bne.n	800dc96 <_strtod_l+0x816>
 800dd34:	e5bf      	b.n	800d8b6 <_strtod_l+0x436>
 800dd36:	f04f 33ff 	mov.w	r3, #4294967295
 800dd3a:	e7e9      	b.n	800dd10 <_strtod_l+0x890>
 800dd3c:	460b      	mov	r3, r1
 800dd3e:	e7e7      	b.n	800dd10 <_strtod_l+0x890>
 800dd40:	ea53 030a 	orrs.w	r3, r3, sl
 800dd44:	d099      	beq.n	800dc7a <_strtod_l+0x7fa>
 800dd46:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dd48:	b1c3      	cbz	r3, 800dd7c <_strtod_l+0x8fc>
 800dd4a:	ea13 0f09 	tst.w	r3, r9
 800dd4e:	d0ee      	beq.n	800dd2e <_strtod_l+0x8ae>
 800dd50:	9a06      	ldr	r2, [sp, #24]
 800dd52:	4650      	mov	r0, sl
 800dd54:	4659      	mov	r1, fp
 800dd56:	f1b8 0f00 	cmp.w	r8, #0
 800dd5a:	d013      	beq.n	800dd84 <_strtod_l+0x904>
 800dd5c:	f7ff fb73 	bl	800d446 <sulp>
 800dd60:	ee39 7b00 	vadd.f64	d7, d9, d0
 800dd64:	ec5b ab17 	vmov	sl, fp, d7
 800dd68:	e7e1      	b.n	800dd2e <_strtod_l+0x8ae>
 800dd6a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800dd6e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800dd72:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800dd76:	f04f 3aff 	mov.w	sl, #4294967295
 800dd7a:	e7d8      	b.n	800dd2e <_strtod_l+0x8ae>
 800dd7c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800dd7e:	ea13 0f0a 	tst.w	r3, sl
 800dd82:	e7e4      	b.n	800dd4e <_strtod_l+0x8ce>
 800dd84:	f7ff fb5f 	bl	800d446 <sulp>
 800dd88:	ee39 0b40 	vsub.f64	d0, d9, d0
 800dd8c:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800dd90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd94:	ec5b ab10 	vmov	sl, fp, d0
 800dd98:	d1c9      	bne.n	800dd2e <_strtod_l+0x8ae>
 800dd9a:	e615      	b.n	800d9c8 <_strtod_l+0x548>
 800dd9c:	4629      	mov	r1, r5
 800dd9e:	4620      	mov	r0, r4
 800dda0:	f7ff fade 	bl	800d360 <__ratio>
 800dda4:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 800dda8:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800ddac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ddb0:	d85d      	bhi.n	800de6e <_strtod_l+0x9ee>
 800ddb2:	f1b8 0f00 	cmp.w	r8, #0
 800ddb6:	d164      	bne.n	800de82 <_strtod_l+0xa02>
 800ddb8:	f1ba 0f00 	cmp.w	sl, #0
 800ddbc:	d14b      	bne.n	800de56 <_strtod_l+0x9d6>
 800ddbe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ddc2:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d160      	bne.n	800de8c <_strtod_l+0xa0c>
 800ddca:	eeb4 0bc8 	vcmpe.f64	d0, d8
 800ddce:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800ddd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ddd6:	d401      	bmi.n	800dddc <_strtod_l+0x95c>
 800ddd8:	ee20 8b08 	vmul.f64	d8, d0, d8
 800dddc:	eeb1 ab48 	vneg.f64	d10, d8
 800dde0:	486e      	ldr	r0, [pc, #440]	@ (800df9c <_strtod_l+0xb1c>)
 800dde2:	4970      	ldr	r1, [pc, #448]	@ (800dfa4 <_strtod_l+0xb24>)
 800dde4:	ea09 0700 	and.w	r7, r9, r0
 800dde8:	428f      	cmp	r7, r1
 800ddea:	ec53 2b1a 	vmov	r2, r3, d10
 800ddee:	d17d      	bne.n	800deec <_strtod_l+0xa6c>
 800ddf0:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 800ddf4:	ec4b ab1c 	vmov	d12, sl, fp
 800ddf8:	eeb0 0b4c 	vmov.f64	d0, d12
 800ddfc:	f7ff f9e8 	bl	800d1d0 <__ulp>
 800de00:	4866      	ldr	r0, [pc, #408]	@ (800df9c <_strtod_l+0xb1c>)
 800de02:	eea0 cb0a 	vfma.f64	d12, d0, d10
 800de06:	ee1c 3a90 	vmov	r3, s25
 800de0a:	4a67      	ldr	r2, [pc, #412]	@ (800dfa8 <_strtod_l+0xb28>)
 800de0c:	ea03 0100 	and.w	r1, r3, r0
 800de10:	4291      	cmp	r1, r2
 800de12:	ec5b ab1c 	vmov	sl, fp, d12
 800de16:	d93c      	bls.n	800de92 <_strtod_l+0xa12>
 800de18:	ee19 2a90 	vmov	r2, s19
 800de1c:	4b60      	ldr	r3, [pc, #384]	@ (800dfa0 <_strtod_l+0xb20>)
 800de1e:	429a      	cmp	r2, r3
 800de20:	d104      	bne.n	800de2c <_strtod_l+0x9ac>
 800de22:	ee19 3a10 	vmov	r3, s18
 800de26:	3301      	adds	r3, #1
 800de28:	f43f ad3a 	beq.w	800d8a0 <_strtod_l+0x420>
 800de2c:	f8df b170 	ldr.w	fp, [pc, #368]	@ 800dfa0 <_strtod_l+0xb20>
 800de30:	f04f 3aff 	mov.w	sl, #4294967295
 800de34:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800de36:	9805      	ldr	r0, [sp, #20]
 800de38:	f7fe fe96 	bl	800cb68 <_Bfree>
 800de3c:	9805      	ldr	r0, [sp, #20]
 800de3e:	4631      	mov	r1, r6
 800de40:	f7fe fe92 	bl	800cb68 <_Bfree>
 800de44:	9805      	ldr	r0, [sp, #20]
 800de46:	4629      	mov	r1, r5
 800de48:	f7fe fe8e 	bl	800cb68 <_Bfree>
 800de4c:	9805      	ldr	r0, [sp, #20]
 800de4e:	4621      	mov	r1, r4
 800de50:	f7fe fe8a 	bl	800cb68 <_Bfree>
 800de54:	e625      	b.n	800daa2 <_strtod_l+0x622>
 800de56:	f1ba 0f01 	cmp.w	sl, #1
 800de5a:	d103      	bne.n	800de64 <_strtod_l+0x9e4>
 800de5c:	f1bb 0f00 	cmp.w	fp, #0
 800de60:	f43f adb2 	beq.w	800d9c8 <_strtod_l+0x548>
 800de64:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800de68:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800de6c:	e7b8      	b.n	800dde0 <_strtod_l+0x960>
 800de6e:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800de72:	ee20 8b08 	vmul.f64	d8, d0, d8
 800de76:	f1b8 0f00 	cmp.w	r8, #0
 800de7a:	d0af      	beq.n	800dddc <_strtod_l+0x95c>
 800de7c:	eeb0 ab48 	vmov.f64	d10, d8
 800de80:	e7ae      	b.n	800dde0 <_strtod_l+0x960>
 800de82:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 800de86:	eeb0 8b4a 	vmov.f64	d8, d10
 800de8a:	e7a9      	b.n	800dde0 <_strtod_l+0x960>
 800de8c:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800de90:	e7a6      	b.n	800dde0 <_strtod_l+0x960>
 800de92:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800de96:	9b06      	ldr	r3, [sp, #24]
 800de98:	46d9      	mov	r9, fp
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	d1ca      	bne.n	800de34 <_strtod_l+0x9b4>
 800de9e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800dea2:	0d1b      	lsrs	r3, r3, #20
 800dea4:	051b      	lsls	r3, r3, #20
 800dea6:	429f      	cmp	r7, r3
 800dea8:	d1c4      	bne.n	800de34 <_strtod_l+0x9b4>
 800deaa:	ec51 0b18 	vmov	r0, r1, d8
 800deae:	f7f2 fc4b 	bl	8000748 <__aeabi_d2lz>
 800deb2:	f7f2 fc03 	bl	80006bc <__aeabi_l2d>
 800deb6:	f3cb 0913 	ubfx	r9, fp, #0, #20
 800deba:	ec41 0b17 	vmov	d7, r0, r1
 800debe:	ea49 090a 	orr.w	r9, r9, sl
 800dec2:	ea59 0908 	orrs.w	r9, r9, r8
 800dec6:	ee38 8b47 	vsub.f64	d8, d8, d7
 800deca:	d03c      	beq.n	800df46 <_strtod_l+0xac6>
 800decc:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 800df80 <_strtod_l+0xb00>
 800ded0:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800ded4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ded8:	f53f aced 	bmi.w	800d8b6 <_strtod_l+0x436>
 800dedc:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 800df88 <_strtod_l+0xb08>
 800dee0:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800dee4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dee8:	dda4      	ble.n	800de34 <_strtod_l+0x9b4>
 800deea:	e4e4      	b.n	800d8b6 <_strtod_l+0x436>
 800deec:	9906      	ldr	r1, [sp, #24]
 800deee:	b1e1      	cbz	r1, 800df2a <_strtod_l+0xaaa>
 800def0:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 800def4:	d819      	bhi.n	800df2a <_strtod_l+0xaaa>
 800def6:	eeb4 8bcb 	vcmpe.f64	d8, d11
 800defa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800defe:	d811      	bhi.n	800df24 <_strtod_l+0xaa4>
 800df00:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 800df04:	ee18 3a10 	vmov	r3, s16
 800df08:	2b01      	cmp	r3, #1
 800df0a:	bf38      	it	cc
 800df0c:	2301      	movcc	r3, #1
 800df0e:	ee08 3a10 	vmov	s16, r3
 800df12:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 800df16:	f1b8 0f00 	cmp.w	r8, #0
 800df1a:	d111      	bne.n	800df40 <_strtod_l+0xac0>
 800df1c:	eeb1 7b48 	vneg.f64	d7, d8
 800df20:	ec53 2b17 	vmov	r2, r3, d7
 800df24:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 800df28:	1bcb      	subs	r3, r1, r7
 800df2a:	eeb0 0b49 	vmov.f64	d0, d9
 800df2e:	ec43 2b1a 	vmov	d10, r2, r3
 800df32:	f7ff f94d 	bl	800d1d0 <__ulp>
 800df36:	eeaa 9b00 	vfma.f64	d9, d10, d0
 800df3a:	ec5b ab19 	vmov	sl, fp, d9
 800df3e:	e7aa      	b.n	800de96 <_strtod_l+0xa16>
 800df40:	eeb0 7b48 	vmov.f64	d7, d8
 800df44:	e7ec      	b.n	800df20 <_strtod_l+0xaa0>
 800df46:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 800df90 <_strtod_l+0xb10>
 800df4a:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800df4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df52:	f57f af6f 	bpl.w	800de34 <_strtod_l+0x9b4>
 800df56:	e4ae      	b.n	800d8b6 <_strtod_l+0x436>
 800df58:	2300      	movs	r3, #0
 800df5a:	9308      	str	r3, [sp, #32]
 800df5c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800df5e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800df60:	6013      	str	r3, [r2, #0]
 800df62:	f7ff bacc 	b.w	800d4fe <_strtod_l+0x7e>
 800df66:	2a65      	cmp	r2, #101	@ 0x65
 800df68:	f43f abbc 	beq.w	800d6e4 <_strtod_l+0x264>
 800df6c:	2a45      	cmp	r2, #69	@ 0x45
 800df6e:	f43f abb9 	beq.w	800d6e4 <_strtod_l+0x264>
 800df72:	2301      	movs	r3, #1
 800df74:	9306      	str	r3, [sp, #24]
 800df76:	f7ff bbf0 	b.w	800d75a <_strtod_l+0x2da>
 800df7a:	bf00      	nop
 800df7c:	f3af 8000 	nop.w
 800df80:	94a03595 	.word	0x94a03595
 800df84:	3fdfffff 	.word	0x3fdfffff
 800df88:	35afe535 	.word	0x35afe535
 800df8c:	3fe00000 	.word	0x3fe00000
 800df90:	94a03595 	.word	0x94a03595
 800df94:	3fcfffff 	.word	0x3fcfffff
 800df98:	000fffff 	.word	0x000fffff
 800df9c:	7ff00000 	.word	0x7ff00000
 800dfa0:	7fefffff 	.word	0x7fefffff
 800dfa4:	7fe00000 	.word	0x7fe00000
 800dfa8:	7c9fffff 	.word	0x7c9fffff

0800dfac <_strtod_r>:
 800dfac:	4b01      	ldr	r3, [pc, #4]	@ (800dfb4 <_strtod_r+0x8>)
 800dfae:	f7ff ba67 	b.w	800d480 <_strtod_l>
 800dfb2:	bf00      	nop
 800dfb4:	24000070 	.word	0x24000070

0800dfb8 <_strtol_l.constprop.0>:
 800dfb8:	2b24      	cmp	r3, #36	@ 0x24
 800dfba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dfbe:	4686      	mov	lr, r0
 800dfc0:	4690      	mov	r8, r2
 800dfc2:	d801      	bhi.n	800dfc8 <_strtol_l.constprop.0+0x10>
 800dfc4:	2b01      	cmp	r3, #1
 800dfc6:	d106      	bne.n	800dfd6 <_strtol_l.constprop.0+0x1e>
 800dfc8:	f7fd ff22 	bl	800be10 <__errno>
 800dfcc:	2316      	movs	r3, #22
 800dfce:	6003      	str	r3, [r0, #0]
 800dfd0:	2000      	movs	r0, #0
 800dfd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dfd6:	4834      	ldr	r0, [pc, #208]	@ (800e0a8 <_strtol_l.constprop.0+0xf0>)
 800dfd8:	460d      	mov	r5, r1
 800dfda:	462a      	mov	r2, r5
 800dfdc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800dfe0:	5d06      	ldrb	r6, [r0, r4]
 800dfe2:	f016 0608 	ands.w	r6, r6, #8
 800dfe6:	d1f8      	bne.n	800dfda <_strtol_l.constprop.0+0x22>
 800dfe8:	2c2d      	cmp	r4, #45	@ 0x2d
 800dfea:	d12d      	bne.n	800e048 <_strtol_l.constprop.0+0x90>
 800dfec:	782c      	ldrb	r4, [r5, #0]
 800dfee:	2601      	movs	r6, #1
 800dff0:	1c95      	adds	r5, r2, #2
 800dff2:	f033 0210 	bics.w	r2, r3, #16
 800dff6:	d109      	bne.n	800e00c <_strtol_l.constprop.0+0x54>
 800dff8:	2c30      	cmp	r4, #48	@ 0x30
 800dffa:	d12a      	bne.n	800e052 <_strtol_l.constprop.0+0x9a>
 800dffc:	782a      	ldrb	r2, [r5, #0]
 800dffe:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800e002:	2a58      	cmp	r2, #88	@ 0x58
 800e004:	d125      	bne.n	800e052 <_strtol_l.constprop.0+0x9a>
 800e006:	786c      	ldrb	r4, [r5, #1]
 800e008:	2310      	movs	r3, #16
 800e00a:	3502      	adds	r5, #2
 800e00c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800e010:	f10c 3cff 	add.w	ip, ip, #4294967295
 800e014:	2200      	movs	r2, #0
 800e016:	fbbc f9f3 	udiv	r9, ip, r3
 800e01a:	4610      	mov	r0, r2
 800e01c:	fb03 ca19 	mls	sl, r3, r9, ip
 800e020:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800e024:	2f09      	cmp	r7, #9
 800e026:	d81b      	bhi.n	800e060 <_strtol_l.constprop.0+0xa8>
 800e028:	463c      	mov	r4, r7
 800e02a:	42a3      	cmp	r3, r4
 800e02c:	dd27      	ble.n	800e07e <_strtol_l.constprop.0+0xc6>
 800e02e:	1c57      	adds	r7, r2, #1
 800e030:	d007      	beq.n	800e042 <_strtol_l.constprop.0+0x8a>
 800e032:	4581      	cmp	r9, r0
 800e034:	d320      	bcc.n	800e078 <_strtol_l.constprop.0+0xc0>
 800e036:	d101      	bne.n	800e03c <_strtol_l.constprop.0+0x84>
 800e038:	45a2      	cmp	sl, r4
 800e03a:	db1d      	blt.n	800e078 <_strtol_l.constprop.0+0xc0>
 800e03c:	fb00 4003 	mla	r0, r0, r3, r4
 800e040:	2201      	movs	r2, #1
 800e042:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e046:	e7eb      	b.n	800e020 <_strtol_l.constprop.0+0x68>
 800e048:	2c2b      	cmp	r4, #43	@ 0x2b
 800e04a:	bf04      	itt	eq
 800e04c:	782c      	ldrbeq	r4, [r5, #0]
 800e04e:	1c95      	addeq	r5, r2, #2
 800e050:	e7cf      	b.n	800dff2 <_strtol_l.constprop.0+0x3a>
 800e052:	2b00      	cmp	r3, #0
 800e054:	d1da      	bne.n	800e00c <_strtol_l.constprop.0+0x54>
 800e056:	2c30      	cmp	r4, #48	@ 0x30
 800e058:	bf0c      	ite	eq
 800e05a:	2308      	moveq	r3, #8
 800e05c:	230a      	movne	r3, #10
 800e05e:	e7d5      	b.n	800e00c <_strtol_l.constprop.0+0x54>
 800e060:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800e064:	2f19      	cmp	r7, #25
 800e066:	d801      	bhi.n	800e06c <_strtol_l.constprop.0+0xb4>
 800e068:	3c37      	subs	r4, #55	@ 0x37
 800e06a:	e7de      	b.n	800e02a <_strtol_l.constprop.0+0x72>
 800e06c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800e070:	2f19      	cmp	r7, #25
 800e072:	d804      	bhi.n	800e07e <_strtol_l.constprop.0+0xc6>
 800e074:	3c57      	subs	r4, #87	@ 0x57
 800e076:	e7d8      	b.n	800e02a <_strtol_l.constprop.0+0x72>
 800e078:	f04f 32ff 	mov.w	r2, #4294967295
 800e07c:	e7e1      	b.n	800e042 <_strtol_l.constprop.0+0x8a>
 800e07e:	1c53      	adds	r3, r2, #1
 800e080:	d108      	bne.n	800e094 <_strtol_l.constprop.0+0xdc>
 800e082:	2322      	movs	r3, #34	@ 0x22
 800e084:	f8ce 3000 	str.w	r3, [lr]
 800e088:	4660      	mov	r0, ip
 800e08a:	f1b8 0f00 	cmp.w	r8, #0
 800e08e:	d0a0      	beq.n	800dfd2 <_strtol_l.constprop.0+0x1a>
 800e090:	1e69      	subs	r1, r5, #1
 800e092:	e006      	b.n	800e0a2 <_strtol_l.constprop.0+0xea>
 800e094:	b106      	cbz	r6, 800e098 <_strtol_l.constprop.0+0xe0>
 800e096:	4240      	negs	r0, r0
 800e098:	f1b8 0f00 	cmp.w	r8, #0
 800e09c:	d099      	beq.n	800dfd2 <_strtol_l.constprop.0+0x1a>
 800e09e:	2a00      	cmp	r2, #0
 800e0a0:	d1f6      	bne.n	800e090 <_strtol_l.constprop.0+0xd8>
 800e0a2:	f8c8 1000 	str.w	r1, [r8]
 800e0a6:	e794      	b.n	800dfd2 <_strtol_l.constprop.0+0x1a>
 800e0a8:	0800f521 	.word	0x0800f521

0800e0ac <_strtol_r>:
 800e0ac:	f7ff bf84 	b.w	800dfb8 <_strtol_l.constprop.0>

0800e0b0 <__ssputs_r>:
 800e0b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e0b4:	688e      	ldr	r6, [r1, #8]
 800e0b6:	461f      	mov	r7, r3
 800e0b8:	42be      	cmp	r6, r7
 800e0ba:	680b      	ldr	r3, [r1, #0]
 800e0bc:	4682      	mov	sl, r0
 800e0be:	460c      	mov	r4, r1
 800e0c0:	4690      	mov	r8, r2
 800e0c2:	d82d      	bhi.n	800e120 <__ssputs_r+0x70>
 800e0c4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e0c8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e0cc:	d026      	beq.n	800e11c <__ssputs_r+0x6c>
 800e0ce:	6965      	ldr	r5, [r4, #20]
 800e0d0:	6909      	ldr	r1, [r1, #16]
 800e0d2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e0d6:	eba3 0901 	sub.w	r9, r3, r1
 800e0da:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e0de:	1c7b      	adds	r3, r7, #1
 800e0e0:	444b      	add	r3, r9
 800e0e2:	106d      	asrs	r5, r5, #1
 800e0e4:	429d      	cmp	r5, r3
 800e0e6:	bf38      	it	cc
 800e0e8:	461d      	movcc	r5, r3
 800e0ea:	0553      	lsls	r3, r2, #21
 800e0ec:	d527      	bpl.n	800e13e <__ssputs_r+0x8e>
 800e0ee:	4629      	mov	r1, r5
 800e0f0:	f7fc fc88 	bl	800aa04 <_malloc_r>
 800e0f4:	4606      	mov	r6, r0
 800e0f6:	b360      	cbz	r0, 800e152 <__ssputs_r+0xa2>
 800e0f8:	6921      	ldr	r1, [r4, #16]
 800e0fa:	464a      	mov	r2, r9
 800e0fc:	f7fd feb5 	bl	800be6a <memcpy>
 800e100:	89a3      	ldrh	r3, [r4, #12]
 800e102:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800e106:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e10a:	81a3      	strh	r3, [r4, #12]
 800e10c:	6126      	str	r6, [r4, #16]
 800e10e:	6165      	str	r5, [r4, #20]
 800e110:	444e      	add	r6, r9
 800e112:	eba5 0509 	sub.w	r5, r5, r9
 800e116:	6026      	str	r6, [r4, #0]
 800e118:	60a5      	str	r5, [r4, #8]
 800e11a:	463e      	mov	r6, r7
 800e11c:	42be      	cmp	r6, r7
 800e11e:	d900      	bls.n	800e122 <__ssputs_r+0x72>
 800e120:	463e      	mov	r6, r7
 800e122:	6820      	ldr	r0, [r4, #0]
 800e124:	4632      	mov	r2, r6
 800e126:	4641      	mov	r1, r8
 800e128:	f000 fb6a 	bl	800e800 <memmove>
 800e12c:	68a3      	ldr	r3, [r4, #8]
 800e12e:	1b9b      	subs	r3, r3, r6
 800e130:	60a3      	str	r3, [r4, #8]
 800e132:	6823      	ldr	r3, [r4, #0]
 800e134:	4433      	add	r3, r6
 800e136:	6023      	str	r3, [r4, #0]
 800e138:	2000      	movs	r0, #0
 800e13a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e13e:	462a      	mov	r2, r5
 800e140:	f000 ff15 	bl	800ef6e <_realloc_r>
 800e144:	4606      	mov	r6, r0
 800e146:	2800      	cmp	r0, #0
 800e148:	d1e0      	bne.n	800e10c <__ssputs_r+0x5c>
 800e14a:	6921      	ldr	r1, [r4, #16]
 800e14c:	4650      	mov	r0, sl
 800e14e:	f7fe fc81 	bl	800ca54 <_free_r>
 800e152:	230c      	movs	r3, #12
 800e154:	f8ca 3000 	str.w	r3, [sl]
 800e158:	89a3      	ldrh	r3, [r4, #12]
 800e15a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e15e:	81a3      	strh	r3, [r4, #12]
 800e160:	f04f 30ff 	mov.w	r0, #4294967295
 800e164:	e7e9      	b.n	800e13a <__ssputs_r+0x8a>
	...

0800e168 <_svfiprintf_r>:
 800e168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e16c:	4698      	mov	r8, r3
 800e16e:	898b      	ldrh	r3, [r1, #12]
 800e170:	061b      	lsls	r3, r3, #24
 800e172:	b09d      	sub	sp, #116	@ 0x74
 800e174:	4607      	mov	r7, r0
 800e176:	460d      	mov	r5, r1
 800e178:	4614      	mov	r4, r2
 800e17a:	d510      	bpl.n	800e19e <_svfiprintf_r+0x36>
 800e17c:	690b      	ldr	r3, [r1, #16]
 800e17e:	b973      	cbnz	r3, 800e19e <_svfiprintf_r+0x36>
 800e180:	2140      	movs	r1, #64	@ 0x40
 800e182:	f7fc fc3f 	bl	800aa04 <_malloc_r>
 800e186:	6028      	str	r0, [r5, #0]
 800e188:	6128      	str	r0, [r5, #16]
 800e18a:	b930      	cbnz	r0, 800e19a <_svfiprintf_r+0x32>
 800e18c:	230c      	movs	r3, #12
 800e18e:	603b      	str	r3, [r7, #0]
 800e190:	f04f 30ff 	mov.w	r0, #4294967295
 800e194:	b01d      	add	sp, #116	@ 0x74
 800e196:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e19a:	2340      	movs	r3, #64	@ 0x40
 800e19c:	616b      	str	r3, [r5, #20]
 800e19e:	2300      	movs	r3, #0
 800e1a0:	9309      	str	r3, [sp, #36]	@ 0x24
 800e1a2:	2320      	movs	r3, #32
 800e1a4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e1a8:	f8cd 800c 	str.w	r8, [sp, #12]
 800e1ac:	2330      	movs	r3, #48	@ 0x30
 800e1ae:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800e34c <_svfiprintf_r+0x1e4>
 800e1b2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e1b6:	f04f 0901 	mov.w	r9, #1
 800e1ba:	4623      	mov	r3, r4
 800e1bc:	469a      	mov	sl, r3
 800e1be:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e1c2:	b10a      	cbz	r2, 800e1c8 <_svfiprintf_r+0x60>
 800e1c4:	2a25      	cmp	r2, #37	@ 0x25
 800e1c6:	d1f9      	bne.n	800e1bc <_svfiprintf_r+0x54>
 800e1c8:	ebba 0b04 	subs.w	fp, sl, r4
 800e1cc:	d00b      	beq.n	800e1e6 <_svfiprintf_r+0x7e>
 800e1ce:	465b      	mov	r3, fp
 800e1d0:	4622      	mov	r2, r4
 800e1d2:	4629      	mov	r1, r5
 800e1d4:	4638      	mov	r0, r7
 800e1d6:	f7ff ff6b 	bl	800e0b0 <__ssputs_r>
 800e1da:	3001      	adds	r0, #1
 800e1dc:	f000 80a7 	beq.w	800e32e <_svfiprintf_r+0x1c6>
 800e1e0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e1e2:	445a      	add	r2, fp
 800e1e4:	9209      	str	r2, [sp, #36]	@ 0x24
 800e1e6:	f89a 3000 	ldrb.w	r3, [sl]
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	f000 809f 	beq.w	800e32e <_svfiprintf_r+0x1c6>
 800e1f0:	2300      	movs	r3, #0
 800e1f2:	f04f 32ff 	mov.w	r2, #4294967295
 800e1f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e1fa:	f10a 0a01 	add.w	sl, sl, #1
 800e1fe:	9304      	str	r3, [sp, #16]
 800e200:	9307      	str	r3, [sp, #28]
 800e202:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e206:	931a      	str	r3, [sp, #104]	@ 0x68
 800e208:	4654      	mov	r4, sl
 800e20a:	2205      	movs	r2, #5
 800e20c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e210:	484e      	ldr	r0, [pc, #312]	@ (800e34c <_svfiprintf_r+0x1e4>)
 800e212:	f7f2 f86d 	bl	80002f0 <memchr>
 800e216:	9a04      	ldr	r2, [sp, #16]
 800e218:	b9d8      	cbnz	r0, 800e252 <_svfiprintf_r+0xea>
 800e21a:	06d0      	lsls	r0, r2, #27
 800e21c:	bf44      	itt	mi
 800e21e:	2320      	movmi	r3, #32
 800e220:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e224:	0711      	lsls	r1, r2, #28
 800e226:	bf44      	itt	mi
 800e228:	232b      	movmi	r3, #43	@ 0x2b
 800e22a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e22e:	f89a 3000 	ldrb.w	r3, [sl]
 800e232:	2b2a      	cmp	r3, #42	@ 0x2a
 800e234:	d015      	beq.n	800e262 <_svfiprintf_r+0xfa>
 800e236:	9a07      	ldr	r2, [sp, #28]
 800e238:	4654      	mov	r4, sl
 800e23a:	2000      	movs	r0, #0
 800e23c:	f04f 0c0a 	mov.w	ip, #10
 800e240:	4621      	mov	r1, r4
 800e242:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e246:	3b30      	subs	r3, #48	@ 0x30
 800e248:	2b09      	cmp	r3, #9
 800e24a:	d94b      	bls.n	800e2e4 <_svfiprintf_r+0x17c>
 800e24c:	b1b0      	cbz	r0, 800e27c <_svfiprintf_r+0x114>
 800e24e:	9207      	str	r2, [sp, #28]
 800e250:	e014      	b.n	800e27c <_svfiprintf_r+0x114>
 800e252:	eba0 0308 	sub.w	r3, r0, r8
 800e256:	fa09 f303 	lsl.w	r3, r9, r3
 800e25a:	4313      	orrs	r3, r2
 800e25c:	9304      	str	r3, [sp, #16]
 800e25e:	46a2      	mov	sl, r4
 800e260:	e7d2      	b.n	800e208 <_svfiprintf_r+0xa0>
 800e262:	9b03      	ldr	r3, [sp, #12]
 800e264:	1d19      	adds	r1, r3, #4
 800e266:	681b      	ldr	r3, [r3, #0]
 800e268:	9103      	str	r1, [sp, #12]
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	bfbb      	ittet	lt
 800e26e:	425b      	neglt	r3, r3
 800e270:	f042 0202 	orrlt.w	r2, r2, #2
 800e274:	9307      	strge	r3, [sp, #28]
 800e276:	9307      	strlt	r3, [sp, #28]
 800e278:	bfb8      	it	lt
 800e27a:	9204      	strlt	r2, [sp, #16]
 800e27c:	7823      	ldrb	r3, [r4, #0]
 800e27e:	2b2e      	cmp	r3, #46	@ 0x2e
 800e280:	d10a      	bne.n	800e298 <_svfiprintf_r+0x130>
 800e282:	7863      	ldrb	r3, [r4, #1]
 800e284:	2b2a      	cmp	r3, #42	@ 0x2a
 800e286:	d132      	bne.n	800e2ee <_svfiprintf_r+0x186>
 800e288:	9b03      	ldr	r3, [sp, #12]
 800e28a:	1d1a      	adds	r2, r3, #4
 800e28c:	681b      	ldr	r3, [r3, #0]
 800e28e:	9203      	str	r2, [sp, #12]
 800e290:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e294:	3402      	adds	r4, #2
 800e296:	9305      	str	r3, [sp, #20]
 800e298:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800e35c <_svfiprintf_r+0x1f4>
 800e29c:	7821      	ldrb	r1, [r4, #0]
 800e29e:	2203      	movs	r2, #3
 800e2a0:	4650      	mov	r0, sl
 800e2a2:	f7f2 f825 	bl	80002f0 <memchr>
 800e2a6:	b138      	cbz	r0, 800e2b8 <_svfiprintf_r+0x150>
 800e2a8:	9b04      	ldr	r3, [sp, #16]
 800e2aa:	eba0 000a 	sub.w	r0, r0, sl
 800e2ae:	2240      	movs	r2, #64	@ 0x40
 800e2b0:	4082      	lsls	r2, r0
 800e2b2:	4313      	orrs	r3, r2
 800e2b4:	3401      	adds	r4, #1
 800e2b6:	9304      	str	r3, [sp, #16]
 800e2b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e2bc:	4824      	ldr	r0, [pc, #144]	@ (800e350 <_svfiprintf_r+0x1e8>)
 800e2be:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e2c2:	2206      	movs	r2, #6
 800e2c4:	f7f2 f814 	bl	80002f0 <memchr>
 800e2c8:	2800      	cmp	r0, #0
 800e2ca:	d036      	beq.n	800e33a <_svfiprintf_r+0x1d2>
 800e2cc:	4b21      	ldr	r3, [pc, #132]	@ (800e354 <_svfiprintf_r+0x1ec>)
 800e2ce:	bb1b      	cbnz	r3, 800e318 <_svfiprintf_r+0x1b0>
 800e2d0:	9b03      	ldr	r3, [sp, #12]
 800e2d2:	3307      	adds	r3, #7
 800e2d4:	f023 0307 	bic.w	r3, r3, #7
 800e2d8:	3308      	adds	r3, #8
 800e2da:	9303      	str	r3, [sp, #12]
 800e2dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e2de:	4433      	add	r3, r6
 800e2e0:	9309      	str	r3, [sp, #36]	@ 0x24
 800e2e2:	e76a      	b.n	800e1ba <_svfiprintf_r+0x52>
 800e2e4:	fb0c 3202 	mla	r2, ip, r2, r3
 800e2e8:	460c      	mov	r4, r1
 800e2ea:	2001      	movs	r0, #1
 800e2ec:	e7a8      	b.n	800e240 <_svfiprintf_r+0xd8>
 800e2ee:	2300      	movs	r3, #0
 800e2f0:	3401      	adds	r4, #1
 800e2f2:	9305      	str	r3, [sp, #20]
 800e2f4:	4619      	mov	r1, r3
 800e2f6:	f04f 0c0a 	mov.w	ip, #10
 800e2fa:	4620      	mov	r0, r4
 800e2fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e300:	3a30      	subs	r2, #48	@ 0x30
 800e302:	2a09      	cmp	r2, #9
 800e304:	d903      	bls.n	800e30e <_svfiprintf_r+0x1a6>
 800e306:	2b00      	cmp	r3, #0
 800e308:	d0c6      	beq.n	800e298 <_svfiprintf_r+0x130>
 800e30a:	9105      	str	r1, [sp, #20]
 800e30c:	e7c4      	b.n	800e298 <_svfiprintf_r+0x130>
 800e30e:	fb0c 2101 	mla	r1, ip, r1, r2
 800e312:	4604      	mov	r4, r0
 800e314:	2301      	movs	r3, #1
 800e316:	e7f0      	b.n	800e2fa <_svfiprintf_r+0x192>
 800e318:	ab03      	add	r3, sp, #12
 800e31a:	9300      	str	r3, [sp, #0]
 800e31c:	462a      	mov	r2, r5
 800e31e:	4b0e      	ldr	r3, [pc, #56]	@ (800e358 <_svfiprintf_r+0x1f0>)
 800e320:	a904      	add	r1, sp, #16
 800e322:	4638      	mov	r0, r7
 800e324:	f7fc fc88 	bl	800ac38 <_printf_float>
 800e328:	1c42      	adds	r2, r0, #1
 800e32a:	4606      	mov	r6, r0
 800e32c:	d1d6      	bne.n	800e2dc <_svfiprintf_r+0x174>
 800e32e:	89ab      	ldrh	r3, [r5, #12]
 800e330:	065b      	lsls	r3, r3, #25
 800e332:	f53f af2d 	bmi.w	800e190 <_svfiprintf_r+0x28>
 800e336:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e338:	e72c      	b.n	800e194 <_svfiprintf_r+0x2c>
 800e33a:	ab03      	add	r3, sp, #12
 800e33c:	9300      	str	r3, [sp, #0]
 800e33e:	462a      	mov	r2, r5
 800e340:	4b05      	ldr	r3, [pc, #20]	@ (800e358 <_svfiprintf_r+0x1f0>)
 800e342:	a904      	add	r1, sp, #16
 800e344:	4638      	mov	r0, r7
 800e346:	f7fc feff 	bl	800b148 <_printf_i>
 800e34a:	e7ed      	b.n	800e328 <_svfiprintf_r+0x1c0>
 800e34c:	0800f621 	.word	0x0800f621
 800e350:	0800f62b 	.word	0x0800f62b
 800e354:	0800ac39 	.word	0x0800ac39
 800e358:	0800e0b1 	.word	0x0800e0b1
 800e35c:	0800f627 	.word	0x0800f627

0800e360 <__sfputc_r>:
 800e360:	6893      	ldr	r3, [r2, #8]
 800e362:	3b01      	subs	r3, #1
 800e364:	2b00      	cmp	r3, #0
 800e366:	b410      	push	{r4}
 800e368:	6093      	str	r3, [r2, #8]
 800e36a:	da08      	bge.n	800e37e <__sfputc_r+0x1e>
 800e36c:	6994      	ldr	r4, [r2, #24]
 800e36e:	42a3      	cmp	r3, r4
 800e370:	db01      	blt.n	800e376 <__sfputc_r+0x16>
 800e372:	290a      	cmp	r1, #10
 800e374:	d103      	bne.n	800e37e <__sfputc_r+0x1e>
 800e376:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e37a:	f7fd bbb8 	b.w	800baee <__swbuf_r>
 800e37e:	6813      	ldr	r3, [r2, #0]
 800e380:	1c58      	adds	r0, r3, #1
 800e382:	6010      	str	r0, [r2, #0]
 800e384:	7019      	strb	r1, [r3, #0]
 800e386:	4608      	mov	r0, r1
 800e388:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e38c:	4770      	bx	lr

0800e38e <__sfputs_r>:
 800e38e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e390:	4606      	mov	r6, r0
 800e392:	460f      	mov	r7, r1
 800e394:	4614      	mov	r4, r2
 800e396:	18d5      	adds	r5, r2, r3
 800e398:	42ac      	cmp	r4, r5
 800e39a:	d101      	bne.n	800e3a0 <__sfputs_r+0x12>
 800e39c:	2000      	movs	r0, #0
 800e39e:	e007      	b.n	800e3b0 <__sfputs_r+0x22>
 800e3a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e3a4:	463a      	mov	r2, r7
 800e3a6:	4630      	mov	r0, r6
 800e3a8:	f7ff ffda 	bl	800e360 <__sfputc_r>
 800e3ac:	1c43      	adds	r3, r0, #1
 800e3ae:	d1f3      	bne.n	800e398 <__sfputs_r+0xa>
 800e3b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e3b4 <_vfiprintf_r>:
 800e3b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3b8:	460d      	mov	r5, r1
 800e3ba:	b09d      	sub	sp, #116	@ 0x74
 800e3bc:	4614      	mov	r4, r2
 800e3be:	4698      	mov	r8, r3
 800e3c0:	4606      	mov	r6, r0
 800e3c2:	b118      	cbz	r0, 800e3cc <_vfiprintf_r+0x18>
 800e3c4:	6a03      	ldr	r3, [r0, #32]
 800e3c6:	b90b      	cbnz	r3, 800e3cc <_vfiprintf_r+0x18>
 800e3c8:	f7fd fa76 	bl	800b8b8 <__sinit>
 800e3cc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e3ce:	07d9      	lsls	r1, r3, #31
 800e3d0:	d405      	bmi.n	800e3de <_vfiprintf_r+0x2a>
 800e3d2:	89ab      	ldrh	r3, [r5, #12]
 800e3d4:	059a      	lsls	r2, r3, #22
 800e3d6:	d402      	bmi.n	800e3de <_vfiprintf_r+0x2a>
 800e3d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e3da:	f7fd fd44 	bl	800be66 <__retarget_lock_acquire_recursive>
 800e3de:	89ab      	ldrh	r3, [r5, #12]
 800e3e0:	071b      	lsls	r3, r3, #28
 800e3e2:	d501      	bpl.n	800e3e8 <_vfiprintf_r+0x34>
 800e3e4:	692b      	ldr	r3, [r5, #16]
 800e3e6:	b99b      	cbnz	r3, 800e410 <_vfiprintf_r+0x5c>
 800e3e8:	4629      	mov	r1, r5
 800e3ea:	4630      	mov	r0, r6
 800e3ec:	f7fd fbbe 	bl	800bb6c <__swsetup_r>
 800e3f0:	b170      	cbz	r0, 800e410 <_vfiprintf_r+0x5c>
 800e3f2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e3f4:	07dc      	lsls	r4, r3, #31
 800e3f6:	d504      	bpl.n	800e402 <_vfiprintf_r+0x4e>
 800e3f8:	f04f 30ff 	mov.w	r0, #4294967295
 800e3fc:	b01d      	add	sp, #116	@ 0x74
 800e3fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e402:	89ab      	ldrh	r3, [r5, #12]
 800e404:	0598      	lsls	r0, r3, #22
 800e406:	d4f7      	bmi.n	800e3f8 <_vfiprintf_r+0x44>
 800e408:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e40a:	f7fd fd2d 	bl	800be68 <__retarget_lock_release_recursive>
 800e40e:	e7f3      	b.n	800e3f8 <_vfiprintf_r+0x44>
 800e410:	2300      	movs	r3, #0
 800e412:	9309      	str	r3, [sp, #36]	@ 0x24
 800e414:	2320      	movs	r3, #32
 800e416:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e41a:	f8cd 800c 	str.w	r8, [sp, #12]
 800e41e:	2330      	movs	r3, #48	@ 0x30
 800e420:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e5d0 <_vfiprintf_r+0x21c>
 800e424:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e428:	f04f 0901 	mov.w	r9, #1
 800e42c:	4623      	mov	r3, r4
 800e42e:	469a      	mov	sl, r3
 800e430:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e434:	b10a      	cbz	r2, 800e43a <_vfiprintf_r+0x86>
 800e436:	2a25      	cmp	r2, #37	@ 0x25
 800e438:	d1f9      	bne.n	800e42e <_vfiprintf_r+0x7a>
 800e43a:	ebba 0b04 	subs.w	fp, sl, r4
 800e43e:	d00b      	beq.n	800e458 <_vfiprintf_r+0xa4>
 800e440:	465b      	mov	r3, fp
 800e442:	4622      	mov	r2, r4
 800e444:	4629      	mov	r1, r5
 800e446:	4630      	mov	r0, r6
 800e448:	f7ff ffa1 	bl	800e38e <__sfputs_r>
 800e44c:	3001      	adds	r0, #1
 800e44e:	f000 80a7 	beq.w	800e5a0 <_vfiprintf_r+0x1ec>
 800e452:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e454:	445a      	add	r2, fp
 800e456:	9209      	str	r2, [sp, #36]	@ 0x24
 800e458:	f89a 3000 	ldrb.w	r3, [sl]
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	f000 809f 	beq.w	800e5a0 <_vfiprintf_r+0x1ec>
 800e462:	2300      	movs	r3, #0
 800e464:	f04f 32ff 	mov.w	r2, #4294967295
 800e468:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e46c:	f10a 0a01 	add.w	sl, sl, #1
 800e470:	9304      	str	r3, [sp, #16]
 800e472:	9307      	str	r3, [sp, #28]
 800e474:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e478:	931a      	str	r3, [sp, #104]	@ 0x68
 800e47a:	4654      	mov	r4, sl
 800e47c:	2205      	movs	r2, #5
 800e47e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e482:	4853      	ldr	r0, [pc, #332]	@ (800e5d0 <_vfiprintf_r+0x21c>)
 800e484:	f7f1 ff34 	bl	80002f0 <memchr>
 800e488:	9a04      	ldr	r2, [sp, #16]
 800e48a:	b9d8      	cbnz	r0, 800e4c4 <_vfiprintf_r+0x110>
 800e48c:	06d1      	lsls	r1, r2, #27
 800e48e:	bf44      	itt	mi
 800e490:	2320      	movmi	r3, #32
 800e492:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e496:	0713      	lsls	r3, r2, #28
 800e498:	bf44      	itt	mi
 800e49a:	232b      	movmi	r3, #43	@ 0x2b
 800e49c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e4a0:	f89a 3000 	ldrb.w	r3, [sl]
 800e4a4:	2b2a      	cmp	r3, #42	@ 0x2a
 800e4a6:	d015      	beq.n	800e4d4 <_vfiprintf_r+0x120>
 800e4a8:	9a07      	ldr	r2, [sp, #28]
 800e4aa:	4654      	mov	r4, sl
 800e4ac:	2000      	movs	r0, #0
 800e4ae:	f04f 0c0a 	mov.w	ip, #10
 800e4b2:	4621      	mov	r1, r4
 800e4b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e4b8:	3b30      	subs	r3, #48	@ 0x30
 800e4ba:	2b09      	cmp	r3, #9
 800e4bc:	d94b      	bls.n	800e556 <_vfiprintf_r+0x1a2>
 800e4be:	b1b0      	cbz	r0, 800e4ee <_vfiprintf_r+0x13a>
 800e4c0:	9207      	str	r2, [sp, #28]
 800e4c2:	e014      	b.n	800e4ee <_vfiprintf_r+0x13a>
 800e4c4:	eba0 0308 	sub.w	r3, r0, r8
 800e4c8:	fa09 f303 	lsl.w	r3, r9, r3
 800e4cc:	4313      	orrs	r3, r2
 800e4ce:	9304      	str	r3, [sp, #16]
 800e4d0:	46a2      	mov	sl, r4
 800e4d2:	e7d2      	b.n	800e47a <_vfiprintf_r+0xc6>
 800e4d4:	9b03      	ldr	r3, [sp, #12]
 800e4d6:	1d19      	adds	r1, r3, #4
 800e4d8:	681b      	ldr	r3, [r3, #0]
 800e4da:	9103      	str	r1, [sp, #12]
 800e4dc:	2b00      	cmp	r3, #0
 800e4de:	bfbb      	ittet	lt
 800e4e0:	425b      	neglt	r3, r3
 800e4e2:	f042 0202 	orrlt.w	r2, r2, #2
 800e4e6:	9307      	strge	r3, [sp, #28]
 800e4e8:	9307      	strlt	r3, [sp, #28]
 800e4ea:	bfb8      	it	lt
 800e4ec:	9204      	strlt	r2, [sp, #16]
 800e4ee:	7823      	ldrb	r3, [r4, #0]
 800e4f0:	2b2e      	cmp	r3, #46	@ 0x2e
 800e4f2:	d10a      	bne.n	800e50a <_vfiprintf_r+0x156>
 800e4f4:	7863      	ldrb	r3, [r4, #1]
 800e4f6:	2b2a      	cmp	r3, #42	@ 0x2a
 800e4f8:	d132      	bne.n	800e560 <_vfiprintf_r+0x1ac>
 800e4fa:	9b03      	ldr	r3, [sp, #12]
 800e4fc:	1d1a      	adds	r2, r3, #4
 800e4fe:	681b      	ldr	r3, [r3, #0]
 800e500:	9203      	str	r2, [sp, #12]
 800e502:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e506:	3402      	adds	r4, #2
 800e508:	9305      	str	r3, [sp, #20]
 800e50a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e5e0 <_vfiprintf_r+0x22c>
 800e50e:	7821      	ldrb	r1, [r4, #0]
 800e510:	2203      	movs	r2, #3
 800e512:	4650      	mov	r0, sl
 800e514:	f7f1 feec 	bl	80002f0 <memchr>
 800e518:	b138      	cbz	r0, 800e52a <_vfiprintf_r+0x176>
 800e51a:	9b04      	ldr	r3, [sp, #16]
 800e51c:	eba0 000a 	sub.w	r0, r0, sl
 800e520:	2240      	movs	r2, #64	@ 0x40
 800e522:	4082      	lsls	r2, r0
 800e524:	4313      	orrs	r3, r2
 800e526:	3401      	adds	r4, #1
 800e528:	9304      	str	r3, [sp, #16]
 800e52a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e52e:	4829      	ldr	r0, [pc, #164]	@ (800e5d4 <_vfiprintf_r+0x220>)
 800e530:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e534:	2206      	movs	r2, #6
 800e536:	f7f1 fedb 	bl	80002f0 <memchr>
 800e53a:	2800      	cmp	r0, #0
 800e53c:	d03f      	beq.n	800e5be <_vfiprintf_r+0x20a>
 800e53e:	4b26      	ldr	r3, [pc, #152]	@ (800e5d8 <_vfiprintf_r+0x224>)
 800e540:	bb1b      	cbnz	r3, 800e58a <_vfiprintf_r+0x1d6>
 800e542:	9b03      	ldr	r3, [sp, #12]
 800e544:	3307      	adds	r3, #7
 800e546:	f023 0307 	bic.w	r3, r3, #7
 800e54a:	3308      	adds	r3, #8
 800e54c:	9303      	str	r3, [sp, #12]
 800e54e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e550:	443b      	add	r3, r7
 800e552:	9309      	str	r3, [sp, #36]	@ 0x24
 800e554:	e76a      	b.n	800e42c <_vfiprintf_r+0x78>
 800e556:	fb0c 3202 	mla	r2, ip, r2, r3
 800e55a:	460c      	mov	r4, r1
 800e55c:	2001      	movs	r0, #1
 800e55e:	e7a8      	b.n	800e4b2 <_vfiprintf_r+0xfe>
 800e560:	2300      	movs	r3, #0
 800e562:	3401      	adds	r4, #1
 800e564:	9305      	str	r3, [sp, #20]
 800e566:	4619      	mov	r1, r3
 800e568:	f04f 0c0a 	mov.w	ip, #10
 800e56c:	4620      	mov	r0, r4
 800e56e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e572:	3a30      	subs	r2, #48	@ 0x30
 800e574:	2a09      	cmp	r2, #9
 800e576:	d903      	bls.n	800e580 <_vfiprintf_r+0x1cc>
 800e578:	2b00      	cmp	r3, #0
 800e57a:	d0c6      	beq.n	800e50a <_vfiprintf_r+0x156>
 800e57c:	9105      	str	r1, [sp, #20]
 800e57e:	e7c4      	b.n	800e50a <_vfiprintf_r+0x156>
 800e580:	fb0c 2101 	mla	r1, ip, r1, r2
 800e584:	4604      	mov	r4, r0
 800e586:	2301      	movs	r3, #1
 800e588:	e7f0      	b.n	800e56c <_vfiprintf_r+0x1b8>
 800e58a:	ab03      	add	r3, sp, #12
 800e58c:	9300      	str	r3, [sp, #0]
 800e58e:	462a      	mov	r2, r5
 800e590:	4b12      	ldr	r3, [pc, #72]	@ (800e5dc <_vfiprintf_r+0x228>)
 800e592:	a904      	add	r1, sp, #16
 800e594:	4630      	mov	r0, r6
 800e596:	f7fc fb4f 	bl	800ac38 <_printf_float>
 800e59a:	4607      	mov	r7, r0
 800e59c:	1c78      	adds	r0, r7, #1
 800e59e:	d1d6      	bne.n	800e54e <_vfiprintf_r+0x19a>
 800e5a0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e5a2:	07d9      	lsls	r1, r3, #31
 800e5a4:	d405      	bmi.n	800e5b2 <_vfiprintf_r+0x1fe>
 800e5a6:	89ab      	ldrh	r3, [r5, #12]
 800e5a8:	059a      	lsls	r2, r3, #22
 800e5aa:	d402      	bmi.n	800e5b2 <_vfiprintf_r+0x1fe>
 800e5ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e5ae:	f7fd fc5b 	bl	800be68 <__retarget_lock_release_recursive>
 800e5b2:	89ab      	ldrh	r3, [r5, #12]
 800e5b4:	065b      	lsls	r3, r3, #25
 800e5b6:	f53f af1f 	bmi.w	800e3f8 <_vfiprintf_r+0x44>
 800e5ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e5bc:	e71e      	b.n	800e3fc <_vfiprintf_r+0x48>
 800e5be:	ab03      	add	r3, sp, #12
 800e5c0:	9300      	str	r3, [sp, #0]
 800e5c2:	462a      	mov	r2, r5
 800e5c4:	4b05      	ldr	r3, [pc, #20]	@ (800e5dc <_vfiprintf_r+0x228>)
 800e5c6:	a904      	add	r1, sp, #16
 800e5c8:	4630      	mov	r0, r6
 800e5ca:	f7fc fdbd 	bl	800b148 <_printf_i>
 800e5ce:	e7e4      	b.n	800e59a <_vfiprintf_r+0x1e6>
 800e5d0:	0800f621 	.word	0x0800f621
 800e5d4:	0800f62b 	.word	0x0800f62b
 800e5d8:	0800ac39 	.word	0x0800ac39
 800e5dc:	0800e38f 	.word	0x0800e38f
 800e5e0:	0800f627 	.word	0x0800f627

0800e5e4 <__sflush_r>:
 800e5e4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e5e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e5ec:	0716      	lsls	r6, r2, #28
 800e5ee:	4605      	mov	r5, r0
 800e5f0:	460c      	mov	r4, r1
 800e5f2:	d454      	bmi.n	800e69e <__sflush_r+0xba>
 800e5f4:	684b      	ldr	r3, [r1, #4]
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	dc02      	bgt.n	800e600 <__sflush_r+0x1c>
 800e5fa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	dd48      	ble.n	800e692 <__sflush_r+0xae>
 800e600:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e602:	2e00      	cmp	r6, #0
 800e604:	d045      	beq.n	800e692 <__sflush_r+0xae>
 800e606:	2300      	movs	r3, #0
 800e608:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e60c:	682f      	ldr	r7, [r5, #0]
 800e60e:	6a21      	ldr	r1, [r4, #32]
 800e610:	602b      	str	r3, [r5, #0]
 800e612:	d030      	beq.n	800e676 <__sflush_r+0x92>
 800e614:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e616:	89a3      	ldrh	r3, [r4, #12]
 800e618:	0759      	lsls	r1, r3, #29
 800e61a:	d505      	bpl.n	800e628 <__sflush_r+0x44>
 800e61c:	6863      	ldr	r3, [r4, #4]
 800e61e:	1ad2      	subs	r2, r2, r3
 800e620:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e622:	b10b      	cbz	r3, 800e628 <__sflush_r+0x44>
 800e624:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e626:	1ad2      	subs	r2, r2, r3
 800e628:	2300      	movs	r3, #0
 800e62a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e62c:	6a21      	ldr	r1, [r4, #32]
 800e62e:	4628      	mov	r0, r5
 800e630:	47b0      	blx	r6
 800e632:	1c43      	adds	r3, r0, #1
 800e634:	89a3      	ldrh	r3, [r4, #12]
 800e636:	d106      	bne.n	800e646 <__sflush_r+0x62>
 800e638:	6829      	ldr	r1, [r5, #0]
 800e63a:	291d      	cmp	r1, #29
 800e63c:	d82b      	bhi.n	800e696 <__sflush_r+0xb2>
 800e63e:	4a2a      	ldr	r2, [pc, #168]	@ (800e6e8 <__sflush_r+0x104>)
 800e640:	410a      	asrs	r2, r1
 800e642:	07d6      	lsls	r6, r2, #31
 800e644:	d427      	bmi.n	800e696 <__sflush_r+0xb2>
 800e646:	2200      	movs	r2, #0
 800e648:	6062      	str	r2, [r4, #4]
 800e64a:	04d9      	lsls	r1, r3, #19
 800e64c:	6922      	ldr	r2, [r4, #16]
 800e64e:	6022      	str	r2, [r4, #0]
 800e650:	d504      	bpl.n	800e65c <__sflush_r+0x78>
 800e652:	1c42      	adds	r2, r0, #1
 800e654:	d101      	bne.n	800e65a <__sflush_r+0x76>
 800e656:	682b      	ldr	r3, [r5, #0]
 800e658:	b903      	cbnz	r3, 800e65c <__sflush_r+0x78>
 800e65a:	6560      	str	r0, [r4, #84]	@ 0x54
 800e65c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e65e:	602f      	str	r7, [r5, #0]
 800e660:	b1b9      	cbz	r1, 800e692 <__sflush_r+0xae>
 800e662:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e666:	4299      	cmp	r1, r3
 800e668:	d002      	beq.n	800e670 <__sflush_r+0x8c>
 800e66a:	4628      	mov	r0, r5
 800e66c:	f7fe f9f2 	bl	800ca54 <_free_r>
 800e670:	2300      	movs	r3, #0
 800e672:	6363      	str	r3, [r4, #52]	@ 0x34
 800e674:	e00d      	b.n	800e692 <__sflush_r+0xae>
 800e676:	2301      	movs	r3, #1
 800e678:	4628      	mov	r0, r5
 800e67a:	47b0      	blx	r6
 800e67c:	4602      	mov	r2, r0
 800e67e:	1c50      	adds	r0, r2, #1
 800e680:	d1c9      	bne.n	800e616 <__sflush_r+0x32>
 800e682:	682b      	ldr	r3, [r5, #0]
 800e684:	2b00      	cmp	r3, #0
 800e686:	d0c6      	beq.n	800e616 <__sflush_r+0x32>
 800e688:	2b1d      	cmp	r3, #29
 800e68a:	d001      	beq.n	800e690 <__sflush_r+0xac>
 800e68c:	2b16      	cmp	r3, #22
 800e68e:	d11e      	bne.n	800e6ce <__sflush_r+0xea>
 800e690:	602f      	str	r7, [r5, #0]
 800e692:	2000      	movs	r0, #0
 800e694:	e022      	b.n	800e6dc <__sflush_r+0xf8>
 800e696:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e69a:	b21b      	sxth	r3, r3
 800e69c:	e01b      	b.n	800e6d6 <__sflush_r+0xf2>
 800e69e:	690f      	ldr	r7, [r1, #16]
 800e6a0:	2f00      	cmp	r7, #0
 800e6a2:	d0f6      	beq.n	800e692 <__sflush_r+0xae>
 800e6a4:	0793      	lsls	r3, r2, #30
 800e6a6:	680e      	ldr	r6, [r1, #0]
 800e6a8:	bf08      	it	eq
 800e6aa:	694b      	ldreq	r3, [r1, #20]
 800e6ac:	600f      	str	r7, [r1, #0]
 800e6ae:	bf18      	it	ne
 800e6b0:	2300      	movne	r3, #0
 800e6b2:	eba6 0807 	sub.w	r8, r6, r7
 800e6b6:	608b      	str	r3, [r1, #8]
 800e6b8:	f1b8 0f00 	cmp.w	r8, #0
 800e6bc:	dde9      	ble.n	800e692 <__sflush_r+0xae>
 800e6be:	6a21      	ldr	r1, [r4, #32]
 800e6c0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e6c2:	4643      	mov	r3, r8
 800e6c4:	463a      	mov	r2, r7
 800e6c6:	4628      	mov	r0, r5
 800e6c8:	47b0      	blx	r6
 800e6ca:	2800      	cmp	r0, #0
 800e6cc:	dc08      	bgt.n	800e6e0 <__sflush_r+0xfc>
 800e6ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e6d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e6d6:	81a3      	strh	r3, [r4, #12]
 800e6d8:	f04f 30ff 	mov.w	r0, #4294967295
 800e6dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e6e0:	4407      	add	r7, r0
 800e6e2:	eba8 0800 	sub.w	r8, r8, r0
 800e6e6:	e7e7      	b.n	800e6b8 <__sflush_r+0xd4>
 800e6e8:	dfbffffe 	.word	0xdfbffffe

0800e6ec <_fflush_r>:
 800e6ec:	b538      	push	{r3, r4, r5, lr}
 800e6ee:	690b      	ldr	r3, [r1, #16]
 800e6f0:	4605      	mov	r5, r0
 800e6f2:	460c      	mov	r4, r1
 800e6f4:	b913      	cbnz	r3, 800e6fc <_fflush_r+0x10>
 800e6f6:	2500      	movs	r5, #0
 800e6f8:	4628      	mov	r0, r5
 800e6fa:	bd38      	pop	{r3, r4, r5, pc}
 800e6fc:	b118      	cbz	r0, 800e706 <_fflush_r+0x1a>
 800e6fe:	6a03      	ldr	r3, [r0, #32]
 800e700:	b90b      	cbnz	r3, 800e706 <_fflush_r+0x1a>
 800e702:	f7fd f8d9 	bl	800b8b8 <__sinit>
 800e706:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	d0f3      	beq.n	800e6f6 <_fflush_r+0xa>
 800e70e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e710:	07d0      	lsls	r0, r2, #31
 800e712:	d404      	bmi.n	800e71e <_fflush_r+0x32>
 800e714:	0599      	lsls	r1, r3, #22
 800e716:	d402      	bmi.n	800e71e <_fflush_r+0x32>
 800e718:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e71a:	f7fd fba4 	bl	800be66 <__retarget_lock_acquire_recursive>
 800e71e:	4628      	mov	r0, r5
 800e720:	4621      	mov	r1, r4
 800e722:	f7ff ff5f 	bl	800e5e4 <__sflush_r>
 800e726:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e728:	07da      	lsls	r2, r3, #31
 800e72a:	4605      	mov	r5, r0
 800e72c:	d4e4      	bmi.n	800e6f8 <_fflush_r+0xc>
 800e72e:	89a3      	ldrh	r3, [r4, #12]
 800e730:	059b      	lsls	r3, r3, #22
 800e732:	d4e1      	bmi.n	800e6f8 <_fflush_r+0xc>
 800e734:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e736:	f7fd fb97 	bl	800be68 <__retarget_lock_release_recursive>
 800e73a:	e7dd      	b.n	800e6f8 <_fflush_r+0xc>

0800e73c <__swhatbuf_r>:
 800e73c:	b570      	push	{r4, r5, r6, lr}
 800e73e:	460c      	mov	r4, r1
 800e740:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e744:	2900      	cmp	r1, #0
 800e746:	b096      	sub	sp, #88	@ 0x58
 800e748:	4615      	mov	r5, r2
 800e74a:	461e      	mov	r6, r3
 800e74c:	da0d      	bge.n	800e76a <__swhatbuf_r+0x2e>
 800e74e:	89a3      	ldrh	r3, [r4, #12]
 800e750:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e754:	f04f 0100 	mov.w	r1, #0
 800e758:	bf14      	ite	ne
 800e75a:	2340      	movne	r3, #64	@ 0x40
 800e75c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e760:	2000      	movs	r0, #0
 800e762:	6031      	str	r1, [r6, #0]
 800e764:	602b      	str	r3, [r5, #0]
 800e766:	b016      	add	sp, #88	@ 0x58
 800e768:	bd70      	pop	{r4, r5, r6, pc}
 800e76a:	466a      	mov	r2, sp
 800e76c:	f000 f874 	bl	800e858 <_fstat_r>
 800e770:	2800      	cmp	r0, #0
 800e772:	dbec      	blt.n	800e74e <__swhatbuf_r+0x12>
 800e774:	9901      	ldr	r1, [sp, #4]
 800e776:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e77a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e77e:	4259      	negs	r1, r3
 800e780:	4159      	adcs	r1, r3
 800e782:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e786:	e7eb      	b.n	800e760 <__swhatbuf_r+0x24>

0800e788 <__smakebuf_r>:
 800e788:	898b      	ldrh	r3, [r1, #12]
 800e78a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e78c:	079d      	lsls	r5, r3, #30
 800e78e:	4606      	mov	r6, r0
 800e790:	460c      	mov	r4, r1
 800e792:	d507      	bpl.n	800e7a4 <__smakebuf_r+0x1c>
 800e794:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e798:	6023      	str	r3, [r4, #0]
 800e79a:	6123      	str	r3, [r4, #16]
 800e79c:	2301      	movs	r3, #1
 800e79e:	6163      	str	r3, [r4, #20]
 800e7a0:	b003      	add	sp, #12
 800e7a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e7a4:	ab01      	add	r3, sp, #4
 800e7a6:	466a      	mov	r2, sp
 800e7a8:	f7ff ffc8 	bl	800e73c <__swhatbuf_r>
 800e7ac:	9f00      	ldr	r7, [sp, #0]
 800e7ae:	4605      	mov	r5, r0
 800e7b0:	4639      	mov	r1, r7
 800e7b2:	4630      	mov	r0, r6
 800e7b4:	f7fc f926 	bl	800aa04 <_malloc_r>
 800e7b8:	b948      	cbnz	r0, 800e7ce <__smakebuf_r+0x46>
 800e7ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e7be:	059a      	lsls	r2, r3, #22
 800e7c0:	d4ee      	bmi.n	800e7a0 <__smakebuf_r+0x18>
 800e7c2:	f023 0303 	bic.w	r3, r3, #3
 800e7c6:	f043 0302 	orr.w	r3, r3, #2
 800e7ca:	81a3      	strh	r3, [r4, #12]
 800e7cc:	e7e2      	b.n	800e794 <__smakebuf_r+0xc>
 800e7ce:	89a3      	ldrh	r3, [r4, #12]
 800e7d0:	6020      	str	r0, [r4, #0]
 800e7d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e7d6:	81a3      	strh	r3, [r4, #12]
 800e7d8:	9b01      	ldr	r3, [sp, #4]
 800e7da:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e7de:	b15b      	cbz	r3, 800e7f8 <__smakebuf_r+0x70>
 800e7e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e7e4:	4630      	mov	r0, r6
 800e7e6:	f000 f849 	bl	800e87c <_isatty_r>
 800e7ea:	b128      	cbz	r0, 800e7f8 <__smakebuf_r+0x70>
 800e7ec:	89a3      	ldrh	r3, [r4, #12]
 800e7ee:	f023 0303 	bic.w	r3, r3, #3
 800e7f2:	f043 0301 	orr.w	r3, r3, #1
 800e7f6:	81a3      	strh	r3, [r4, #12]
 800e7f8:	89a3      	ldrh	r3, [r4, #12]
 800e7fa:	431d      	orrs	r5, r3
 800e7fc:	81a5      	strh	r5, [r4, #12]
 800e7fe:	e7cf      	b.n	800e7a0 <__smakebuf_r+0x18>

0800e800 <memmove>:
 800e800:	4288      	cmp	r0, r1
 800e802:	b510      	push	{r4, lr}
 800e804:	eb01 0402 	add.w	r4, r1, r2
 800e808:	d902      	bls.n	800e810 <memmove+0x10>
 800e80a:	4284      	cmp	r4, r0
 800e80c:	4623      	mov	r3, r4
 800e80e:	d807      	bhi.n	800e820 <memmove+0x20>
 800e810:	1e43      	subs	r3, r0, #1
 800e812:	42a1      	cmp	r1, r4
 800e814:	d008      	beq.n	800e828 <memmove+0x28>
 800e816:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e81a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e81e:	e7f8      	b.n	800e812 <memmove+0x12>
 800e820:	4402      	add	r2, r0
 800e822:	4601      	mov	r1, r0
 800e824:	428a      	cmp	r2, r1
 800e826:	d100      	bne.n	800e82a <memmove+0x2a>
 800e828:	bd10      	pop	{r4, pc}
 800e82a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e82e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e832:	e7f7      	b.n	800e824 <memmove+0x24>

0800e834 <strncmp>:
 800e834:	b510      	push	{r4, lr}
 800e836:	b16a      	cbz	r2, 800e854 <strncmp+0x20>
 800e838:	3901      	subs	r1, #1
 800e83a:	1884      	adds	r4, r0, r2
 800e83c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e840:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800e844:	429a      	cmp	r2, r3
 800e846:	d103      	bne.n	800e850 <strncmp+0x1c>
 800e848:	42a0      	cmp	r0, r4
 800e84a:	d001      	beq.n	800e850 <strncmp+0x1c>
 800e84c:	2a00      	cmp	r2, #0
 800e84e:	d1f5      	bne.n	800e83c <strncmp+0x8>
 800e850:	1ad0      	subs	r0, r2, r3
 800e852:	bd10      	pop	{r4, pc}
 800e854:	4610      	mov	r0, r2
 800e856:	e7fc      	b.n	800e852 <strncmp+0x1e>

0800e858 <_fstat_r>:
 800e858:	b538      	push	{r3, r4, r5, lr}
 800e85a:	4d07      	ldr	r5, [pc, #28]	@ (800e878 <_fstat_r+0x20>)
 800e85c:	2300      	movs	r3, #0
 800e85e:	4604      	mov	r4, r0
 800e860:	4608      	mov	r0, r1
 800e862:	4611      	mov	r1, r2
 800e864:	602b      	str	r3, [r5, #0]
 800e866:	f7f2 fd71 	bl	800134c <_fstat>
 800e86a:	1c43      	adds	r3, r0, #1
 800e86c:	d102      	bne.n	800e874 <_fstat_r+0x1c>
 800e86e:	682b      	ldr	r3, [r5, #0]
 800e870:	b103      	cbz	r3, 800e874 <_fstat_r+0x1c>
 800e872:	6023      	str	r3, [r4, #0]
 800e874:	bd38      	pop	{r3, r4, r5, pc}
 800e876:	bf00      	nop
 800e878:	24004e84 	.word	0x24004e84

0800e87c <_isatty_r>:
 800e87c:	b538      	push	{r3, r4, r5, lr}
 800e87e:	4d06      	ldr	r5, [pc, #24]	@ (800e898 <_isatty_r+0x1c>)
 800e880:	2300      	movs	r3, #0
 800e882:	4604      	mov	r4, r0
 800e884:	4608      	mov	r0, r1
 800e886:	602b      	str	r3, [r5, #0]
 800e888:	f7f2 fd70 	bl	800136c <_isatty>
 800e88c:	1c43      	adds	r3, r0, #1
 800e88e:	d102      	bne.n	800e896 <_isatty_r+0x1a>
 800e890:	682b      	ldr	r3, [r5, #0]
 800e892:	b103      	cbz	r3, 800e896 <_isatty_r+0x1a>
 800e894:	6023      	str	r3, [r4, #0]
 800e896:	bd38      	pop	{r3, r4, r5, pc}
 800e898:	24004e84 	.word	0x24004e84
 800e89c:	00000000 	.word	0x00000000

0800e8a0 <nan>:
 800e8a0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800e8a8 <nan+0x8>
 800e8a4:	4770      	bx	lr
 800e8a6:	bf00      	nop
 800e8a8:	00000000 	.word	0x00000000
 800e8ac:	7ff80000 	.word	0x7ff80000

0800e8b0 <_calloc_r>:
 800e8b0:	b570      	push	{r4, r5, r6, lr}
 800e8b2:	fba1 5402 	umull	r5, r4, r1, r2
 800e8b6:	b93c      	cbnz	r4, 800e8c8 <_calloc_r+0x18>
 800e8b8:	4629      	mov	r1, r5
 800e8ba:	f7fc f8a3 	bl	800aa04 <_malloc_r>
 800e8be:	4606      	mov	r6, r0
 800e8c0:	b928      	cbnz	r0, 800e8ce <_calloc_r+0x1e>
 800e8c2:	2600      	movs	r6, #0
 800e8c4:	4630      	mov	r0, r6
 800e8c6:	bd70      	pop	{r4, r5, r6, pc}
 800e8c8:	220c      	movs	r2, #12
 800e8ca:	6002      	str	r2, [r0, #0]
 800e8cc:	e7f9      	b.n	800e8c2 <_calloc_r+0x12>
 800e8ce:	462a      	mov	r2, r5
 800e8d0:	4621      	mov	r1, r4
 800e8d2:	f7fd f9a1 	bl	800bc18 <memset>
 800e8d6:	e7f5      	b.n	800e8c4 <_calloc_r+0x14>

0800e8d8 <rshift>:
 800e8d8:	6903      	ldr	r3, [r0, #16]
 800e8da:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800e8de:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e8e2:	ea4f 1261 	mov.w	r2, r1, asr #5
 800e8e6:	f100 0414 	add.w	r4, r0, #20
 800e8ea:	dd45      	ble.n	800e978 <rshift+0xa0>
 800e8ec:	f011 011f 	ands.w	r1, r1, #31
 800e8f0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800e8f4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800e8f8:	d10c      	bne.n	800e914 <rshift+0x3c>
 800e8fa:	f100 0710 	add.w	r7, r0, #16
 800e8fe:	4629      	mov	r1, r5
 800e900:	42b1      	cmp	r1, r6
 800e902:	d334      	bcc.n	800e96e <rshift+0x96>
 800e904:	1a9b      	subs	r3, r3, r2
 800e906:	009b      	lsls	r3, r3, #2
 800e908:	1eea      	subs	r2, r5, #3
 800e90a:	4296      	cmp	r6, r2
 800e90c:	bf38      	it	cc
 800e90e:	2300      	movcc	r3, #0
 800e910:	4423      	add	r3, r4
 800e912:	e015      	b.n	800e940 <rshift+0x68>
 800e914:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800e918:	f1c1 0820 	rsb	r8, r1, #32
 800e91c:	40cf      	lsrs	r7, r1
 800e91e:	f105 0e04 	add.w	lr, r5, #4
 800e922:	46a1      	mov	r9, r4
 800e924:	4576      	cmp	r6, lr
 800e926:	46f4      	mov	ip, lr
 800e928:	d815      	bhi.n	800e956 <rshift+0x7e>
 800e92a:	1a9a      	subs	r2, r3, r2
 800e92c:	0092      	lsls	r2, r2, #2
 800e92e:	3a04      	subs	r2, #4
 800e930:	3501      	adds	r5, #1
 800e932:	42ae      	cmp	r6, r5
 800e934:	bf38      	it	cc
 800e936:	2200      	movcc	r2, #0
 800e938:	18a3      	adds	r3, r4, r2
 800e93a:	50a7      	str	r7, [r4, r2]
 800e93c:	b107      	cbz	r7, 800e940 <rshift+0x68>
 800e93e:	3304      	adds	r3, #4
 800e940:	1b1a      	subs	r2, r3, r4
 800e942:	42a3      	cmp	r3, r4
 800e944:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800e948:	bf08      	it	eq
 800e94a:	2300      	moveq	r3, #0
 800e94c:	6102      	str	r2, [r0, #16]
 800e94e:	bf08      	it	eq
 800e950:	6143      	streq	r3, [r0, #20]
 800e952:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e956:	f8dc c000 	ldr.w	ip, [ip]
 800e95a:	fa0c fc08 	lsl.w	ip, ip, r8
 800e95e:	ea4c 0707 	orr.w	r7, ip, r7
 800e962:	f849 7b04 	str.w	r7, [r9], #4
 800e966:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e96a:	40cf      	lsrs	r7, r1
 800e96c:	e7da      	b.n	800e924 <rshift+0x4c>
 800e96e:	f851 cb04 	ldr.w	ip, [r1], #4
 800e972:	f847 cf04 	str.w	ip, [r7, #4]!
 800e976:	e7c3      	b.n	800e900 <rshift+0x28>
 800e978:	4623      	mov	r3, r4
 800e97a:	e7e1      	b.n	800e940 <rshift+0x68>

0800e97c <__hexdig_fun>:
 800e97c:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800e980:	2b09      	cmp	r3, #9
 800e982:	d802      	bhi.n	800e98a <__hexdig_fun+0xe>
 800e984:	3820      	subs	r0, #32
 800e986:	b2c0      	uxtb	r0, r0
 800e988:	4770      	bx	lr
 800e98a:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800e98e:	2b05      	cmp	r3, #5
 800e990:	d801      	bhi.n	800e996 <__hexdig_fun+0x1a>
 800e992:	3847      	subs	r0, #71	@ 0x47
 800e994:	e7f7      	b.n	800e986 <__hexdig_fun+0xa>
 800e996:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800e99a:	2b05      	cmp	r3, #5
 800e99c:	d801      	bhi.n	800e9a2 <__hexdig_fun+0x26>
 800e99e:	3827      	subs	r0, #39	@ 0x27
 800e9a0:	e7f1      	b.n	800e986 <__hexdig_fun+0xa>
 800e9a2:	2000      	movs	r0, #0
 800e9a4:	4770      	bx	lr
	...

0800e9a8 <__gethex>:
 800e9a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9ac:	b085      	sub	sp, #20
 800e9ae:	468a      	mov	sl, r1
 800e9b0:	9302      	str	r3, [sp, #8]
 800e9b2:	680b      	ldr	r3, [r1, #0]
 800e9b4:	9001      	str	r0, [sp, #4]
 800e9b6:	4690      	mov	r8, r2
 800e9b8:	1c9c      	adds	r4, r3, #2
 800e9ba:	46a1      	mov	r9, r4
 800e9bc:	f814 0b01 	ldrb.w	r0, [r4], #1
 800e9c0:	2830      	cmp	r0, #48	@ 0x30
 800e9c2:	d0fa      	beq.n	800e9ba <__gethex+0x12>
 800e9c4:	eba9 0303 	sub.w	r3, r9, r3
 800e9c8:	f1a3 0b02 	sub.w	fp, r3, #2
 800e9cc:	f7ff ffd6 	bl	800e97c <__hexdig_fun>
 800e9d0:	4605      	mov	r5, r0
 800e9d2:	2800      	cmp	r0, #0
 800e9d4:	d168      	bne.n	800eaa8 <__gethex+0x100>
 800e9d6:	49a0      	ldr	r1, [pc, #640]	@ (800ec58 <__gethex+0x2b0>)
 800e9d8:	2201      	movs	r2, #1
 800e9da:	4648      	mov	r0, r9
 800e9dc:	f7ff ff2a 	bl	800e834 <strncmp>
 800e9e0:	4607      	mov	r7, r0
 800e9e2:	2800      	cmp	r0, #0
 800e9e4:	d167      	bne.n	800eab6 <__gethex+0x10e>
 800e9e6:	f899 0001 	ldrb.w	r0, [r9, #1]
 800e9ea:	4626      	mov	r6, r4
 800e9ec:	f7ff ffc6 	bl	800e97c <__hexdig_fun>
 800e9f0:	2800      	cmp	r0, #0
 800e9f2:	d062      	beq.n	800eaba <__gethex+0x112>
 800e9f4:	4623      	mov	r3, r4
 800e9f6:	7818      	ldrb	r0, [r3, #0]
 800e9f8:	2830      	cmp	r0, #48	@ 0x30
 800e9fa:	4699      	mov	r9, r3
 800e9fc:	f103 0301 	add.w	r3, r3, #1
 800ea00:	d0f9      	beq.n	800e9f6 <__gethex+0x4e>
 800ea02:	f7ff ffbb 	bl	800e97c <__hexdig_fun>
 800ea06:	fab0 f580 	clz	r5, r0
 800ea0a:	096d      	lsrs	r5, r5, #5
 800ea0c:	f04f 0b01 	mov.w	fp, #1
 800ea10:	464a      	mov	r2, r9
 800ea12:	4616      	mov	r6, r2
 800ea14:	3201      	adds	r2, #1
 800ea16:	7830      	ldrb	r0, [r6, #0]
 800ea18:	f7ff ffb0 	bl	800e97c <__hexdig_fun>
 800ea1c:	2800      	cmp	r0, #0
 800ea1e:	d1f8      	bne.n	800ea12 <__gethex+0x6a>
 800ea20:	498d      	ldr	r1, [pc, #564]	@ (800ec58 <__gethex+0x2b0>)
 800ea22:	2201      	movs	r2, #1
 800ea24:	4630      	mov	r0, r6
 800ea26:	f7ff ff05 	bl	800e834 <strncmp>
 800ea2a:	2800      	cmp	r0, #0
 800ea2c:	d13f      	bne.n	800eaae <__gethex+0x106>
 800ea2e:	b944      	cbnz	r4, 800ea42 <__gethex+0x9a>
 800ea30:	1c74      	adds	r4, r6, #1
 800ea32:	4622      	mov	r2, r4
 800ea34:	4616      	mov	r6, r2
 800ea36:	3201      	adds	r2, #1
 800ea38:	7830      	ldrb	r0, [r6, #0]
 800ea3a:	f7ff ff9f 	bl	800e97c <__hexdig_fun>
 800ea3e:	2800      	cmp	r0, #0
 800ea40:	d1f8      	bne.n	800ea34 <__gethex+0x8c>
 800ea42:	1ba4      	subs	r4, r4, r6
 800ea44:	00a7      	lsls	r7, r4, #2
 800ea46:	7833      	ldrb	r3, [r6, #0]
 800ea48:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800ea4c:	2b50      	cmp	r3, #80	@ 0x50
 800ea4e:	d13e      	bne.n	800eace <__gethex+0x126>
 800ea50:	7873      	ldrb	r3, [r6, #1]
 800ea52:	2b2b      	cmp	r3, #43	@ 0x2b
 800ea54:	d033      	beq.n	800eabe <__gethex+0x116>
 800ea56:	2b2d      	cmp	r3, #45	@ 0x2d
 800ea58:	d034      	beq.n	800eac4 <__gethex+0x11c>
 800ea5a:	1c71      	adds	r1, r6, #1
 800ea5c:	2400      	movs	r4, #0
 800ea5e:	7808      	ldrb	r0, [r1, #0]
 800ea60:	f7ff ff8c 	bl	800e97c <__hexdig_fun>
 800ea64:	1e43      	subs	r3, r0, #1
 800ea66:	b2db      	uxtb	r3, r3
 800ea68:	2b18      	cmp	r3, #24
 800ea6a:	d830      	bhi.n	800eace <__gethex+0x126>
 800ea6c:	f1a0 0210 	sub.w	r2, r0, #16
 800ea70:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ea74:	f7ff ff82 	bl	800e97c <__hexdig_fun>
 800ea78:	f100 3cff 	add.w	ip, r0, #4294967295
 800ea7c:	fa5f fc8c 	uxtb.w	ip, ip
 800ea80:	f1bc 0f18 	cmp.w	ip, #24
 800ea84:	f04f 030a 	mov.w	r3, #10
 800ea88:	d91e      	bls.n	800eac8 <__gethex+0x120>
 800ea8a:	b104      	cbz	r4, 800ea8e <__gethex+0xe6>
 800ea8c:	4252      	negs	r2, r2
 800ea8e:	4417      	add	r7, r2
 800ea90:	f8ca 1000 	str.w	r1, [sl]
 800ea94:	b1ed      	cbz	r5, 800ead2 <__gethex+0x12a>
 800ea96:	f1bb 0f00 	cmp.w	fp, #0
 800ea9a:	bf0c      	ite	eq
 800ea9c:	2506      	moveq	r5, #6
 800ea9e:	2500      	movne	r5, #0
 800eaa0:	4628      	mov	r0, r5
 800eaa2:	b005      	add	sp, #20
 800eaa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eaa8:	2500      	movs	r5, #0
 800eaaa:	462c      	mov	r4, r5
 800eaac:	e7b0      	b.n	800ea10 <__gethex+0x68>
 800eaae:	2c00      	cmp	r4, #0
 800eab0:	d1c7      	bne.n	800ea42 <__gethex+0x9a>
 800eab2:	4627      	mov	r7, r4
 800eab4:	e7c7      	b.n	800ea46 <__gethex+0x9e>
 800eab6:	464e      	mov	r6, r9
 800eab8:	462f      	mov	r7, r5
 800eaba:	2501      	movs	r5, #1
 800eabc:	e7c3      	b.n	800ea46 <__gethex+0x9e>
 800eabe:	2400      	movs	r4, #0
 800eac0:	1cb1      	adds	r1, r6, #2
 800eac2:	e7cc      	b.n	800ea5e <__gethex+0xb6>
 800eac4:	2401      	movs	r4, #1
 800eac6:	e7fb      	b.n	800eac0 <__gethex+0x118>
 800eac8:	fb03 0002 	mla	r0, r3, r2, r0
 800eacc:	e7ce      	b.n	800ea6c <__gethex+0xc4>
 800eace:	4631      	mov	r1, r6
 800ead0:	e7de      	b.n	800ea90 <__gethex+0xe8>
 800ead2:	eba6 0309 	sub.w	r3, r6, r9
 800ead6:	3b01      	subs	r3, #1
 800ead8:	4629      	mov	r1, r5
 800eada:	2b07      	cmp	r3, #7
 800eadc:	dc0a      	bgt.n	800eaf4 <__gethex+0x14c>
 800eade:	9801      	ldr	r0, [sp, #4]
 800eae0:	f7fe f802 	bl	800cae8 <_Balloc>
 800eae4:	4604      	mov	r4, r0
 800eae6:	b940      	cbnz	r0, 800eafa <__gethex+0x152>
 800eae8:	4b5c      	ldr	r3, [pc, #368]	@ (800ec5c <__gethex+0x2b4>)
 800eaea:	4602      	mov	r2, r0
 800eaec:	21e4      	movs	r1, #228	@ 0xe4
 800eaee:	485c      	ldr	r0, [pc, #368]	@ (800ec60 <__gethex+0x2b8>)
 800eaf0:	f7fb ff38 	bl	800a964 <__assert_func>
 800eaf4:	3101      	adds	r1, #1
 800eaf6:	105b      	asrs	r3, r3, #1
 800eaf8:	e7ef      	b.n	800eada <__gethex+0x132>
 800eafa:	f100 0a14 	add.w	sl, r0, #20
 800eafe:	2300      	movs	r3, #0
 800eb00:	4655      	mov	r5, sl
 800eb02:	469b      	mov	fp, r3
 800eb04:	45b1      	cmp	r9, r6
 800eb06:	d337      	bcc.n	800eb78 <__gethex+0x1d0>
 800eb08:	f845 bb04 	str.w	fp, [r5], #4
 800eb0c:	eba5 050a 	sub.w	r5, r5, sl
 800eb10:	10ad      	asrs	r5, r5, #2
 800eb12:	6125      	str	r5, [r4, #16]
 800eb14:	4658      	mov	r0, fp
 800eb16:	f7fe f8d9 	bl	800cccc <__hi0bits>
 800eb1a:	016d      	lsls	r5, r5, #5
 800eb1c:	f8d8 6000 	ldr.w	r6, [r8]
 800eb20:	1a2d      	subs	r5, r5, r0
 800eb22:	42b5      	cmp	r5, r6
 800eb24:	dd54      	ble.n	800ebd0 <__gethex+0x228>
 800eb26:	1bad      	subs	r5, r5, r6
 800eb28:	4629      	mov	r1, r5
 800eb2a:	4620      	mov	r0, r4
 800eb2c:	f7fe fc6a 	bl	800d404 <__any_on>
 800eb30:	4681      	mov	r9, r0
 800eb32:	b178      	cbz	r0, 800eb54 <__gethex+0x1ac>
 800eb34:	1e6b      	subs	r3, r5, #1
 800eb36:	1159      	asrs	r1, r3, #5
 800eb38:	f003 021f 	and.w	r2, r3, #31
 800eb3c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800eb40:	f04f 0901 	mov.w	r9, #1
 800eb44:	fa09 f202 	lsl.w	r2, r9, r2
 800eb48:	420a      	tst	r2, r1
 800eb4a:	d003      	beq.n	800eb54 <__gethex+0x1ac>
 800eb4c:	454b      	cmp	r3, r9
 800eb4e:	dc36      	bgt.n	800ebbe <__gethex+0x216>
 800eb50:	f04f 0902 	mov.w	r9, #2
 800eb54:	4629      	mov	r1, r5
 800eb56:	4620      	mov	r0, r4
 800eb58:	f7ff febe 	bl	800e8d8 <rshift>
 800eb5c:	442f      	add	r7, r5
 800eb5e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800eb62:	42bb      	cmp	r3, r7
 800eb64:	da42      	bge.n	800ebec <__gethex+0x244>
 800eb66:	9801      	ldr	r0, [sp, #4]
 800eb68:	4621      	mov	r1, r4
 800eb6a:	f7fd fffd 	bl	800cb68 <_Bfree>
 800eb6e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800eb70:	2300      	movs	r3, #0
 800eb72:	6013      	str	r3, [r2, #0]
 800eb74:	25a3      	movs	r5, #163	@ 0xa3
 800eb76:	e793      	b.n	800eaa0 <__gethex+0xf8>
 800eb78:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800eb7c:	2a2e      	cmp	r2, #46	@ 0x2e
 800eb7e:	d012      	beq.n	800eba6 <__gethex+0x1fe>
 800eb80:	2b20      	cmp	r3, #32
 800eb82:	d104      	bne.n	800eb8e <__gethex+0x1e6>
 800eb84:	f845 bb04 	str.w	fp, [r5], #4
 800eb88:	f04f 0b00 	mov.w	fp, #0
 800eb8c:	465b      	mov	r3, fp
 800eb8e:	7830      	ldrb	r0, [r6, #0]
 800eb90:	9303      	str	r3, [sp, #12]
 800eb92:	f7ff fef3 	bl	800e97c <__hexdig_fun>
 800eb96:	9b03      	ldr	r3, [sp, #12]
 800eb98:	f000 000f 	and.w	r0, r0, #15
 800eb9c:	4098      	lsls	r0, r3
 800eb9e:	ea4b 0b00 	orr.w	fp, fp, r0
 800eba2:	3304      	adds	r3, #4
 800eba4:	e7ae      	b.n	800eb04 <__gethex+0x15c>
 800eba6:	45b1      	cmp	r9, r6
 800eba8:	d8ea      	bhi.n	800eb80 <__gethex+0x1d8>
 800ebaa:	492b      	ldr	r1, [pc, #172]	@ (800ec58 <__gethex+0x2b0>)
 800ebac:	9303      	str	r3, [sp, #12]
 800ebae:	2201      	movs	r2, #1
 800ebb0:	4630      	mov	r0, r6
 800ebb2:	f7ff fe3f 	bl	800e834 <strncmp>
 800ebb6:	9b03      	ldr	r3, [sp, #12]
 800ebb8:	2800      	cmp	r0, #0
 800ebba:	d1e1      	bne.n	800eb80 <__gethex+0x1d8>
 800ebbc:	e7a2      	b.n	800eb04 <__gethex+0x15c>
 800ebbe:	1ea9      	subs	r1, r5, #2
 800ebc0:	4620      	mov	r0, r4
 800ebc2:	f7fe fc1f 	bl	800d404 <__any_on>
 800ebc6:	2800      	cmp	r0, #0
 800ebc8:	d0c2      	beq.n	800eb50 <__gethex+0x1a8>
 800ebca:	f04f 0903 	mov.w	r9, #3
 800ebce:	e7c1      	b.n	800eb54 <__gethex+0x1ac>
 800ebd0:	da09      	bge.n	800ebe6 <__gethex+0x23e>
 800ebd2:	1b75      	subs	r5, r6, r5
 800ebd4:	4621      	mov	r1, r4
 800ebd6:	9801      	ldr	r0, [sp, #4]
 800ebd8:	462a      	mov	r2, r5
 800ebda:	f7fe f9dd 	bl	800cf98 <__lshift>
 800ebde:	1b7f      	subs	r7, r7, r5
 800ebe0:	4604      	mov	r4, r0
 800ebe2:	f100 0a14 	add.w	sl, r0, #20
 800ebe6:	f04f 0900 	mov.w	r9, #0
 800ebea:	e7b8      	b.n	800eb5e <__gethex+0x1b6>
 800ebec:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800ebf0:	42bd      	cmp	r5, r7
 800ebf2:	dd6f      	ble.n	800ecd4 <__gethex+0x32c>
 800ebf4:	1bed      	subs	r5, r5, r7
 800ebf6:	42ae      	cmp	r6, r5
 800ebf8:	dc34      	bgt.n	800ec64 <__gethex+0x2bc>
 800ebfa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ebfe:	2b02      	cmp	r3, #2
 800ec00:	d022      	beq.n	800ec48 <__gethex+0x2a0>
 800ec02:	2b03      	cmp	r3, #3
 800ec04:	d024      	beq.n	800ec50 <__gethex+0x2a8>
 800ec06:	2b01      	cmp	r3, #1
 800ec08:	d115      	bne.n	800ec36 <__gethex+0x28e>
 800ec0a:	42ae      	cmp	r6, r5
 800ec0c:	d113      	bne.n	800ec36 <__gethex+0x28e>
 800ec0e:	2e01      	cmp	r6, #1
 800ec10:	d10b      	bne.n	800ec2a <__gethex+0x282>
 800ec12:	9a02      	ldr	r2, [sp, #8]
 800ec14:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ec18:	6013      	str	r3, [r2, #0]
 800ec1a:	2301      	movs	r3, #1
 800ec1c:	6123      	str	r3, [r4, #16]
 800ec1e:	f8ca 3000 	str.w	r3, [sl]
 800ec22:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ec24:	2562      	movs	r5, #98	@ 0x62
 800ec26:	601c      	str	r4, [r3, #0]
 800ec28:	e73a      	b.n	800eaa0 <__gethex+0xf8>
 800ec2a:	1e71      	subs	r1, r6, #1
 800ec2c:	4620      	mov	r0, r4
 800ec2e:	f7fe fbe9 	bl	800d404 <__any_on>
 800ec32:	2800      	cmp	r0, #0
 800ec34:	d1ed      	bne.n	800ec12 <__gethex+0x26a>
 800ec36:	9801      	ldr	r0, [sp, #4]
 800ec38:	4621      	mov	r1, r4
 800ec3a:	f7fd ff95 	bl	800cb68 <_Bfree>
 800ec3e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ec40:	2300      	movs	r3, #0
 800ec42:	6013      	str	r3, [r2, #0]
 800ec44:	2550      	movs	r5, #80	@ 0x50
 800ec46:	e72b      	b.n	800eaa0 <__gethex+0xf8>
 800ec48:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ec4a:	2b00      	cmp	r3, #0
 800ec4c:	d1f3      	bne.n	800ec36 <__gethex+0x28e>
 800ec4e:	e7e0      	b.n	800ec12 <__gethex+0x26a>
 800ec50:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ec52:	2b00      	cmp	r3, #0
 800ec54:	d1dd      	bne.n	800ec12 <__gethex+0x26a>
 800ec56:	e7ee      	b.n	800ec36 <__gethex+0x28e>
 800ec58:	0800f4c8 	.word	0x0800f4c8
 800ec5c:	0800f35d 	.word	0x0800f35d
 800ec60:	0800f63a 	.word	0x0800f63a
 800ec64:	1e6f      	subs	r7, r5, #1
 800ec66:	f1b9 0f00 	cmp.w	r9, #0
 800ec6a:	d130      	bne.n	800ecce <__gethex+0x326>
 800ec6c:	b127      	cbz	r7, 800ec78 <__gethex+0x2d0>
 800ec6e:	4639      	mov	r1, r7
 800ec70:	4620      	mov	r0, r4
 800ec72:	f7fe fbc7 	bl	800d404 <__any_on>
 800ec76:	4681      	mov	r9, r0
 800ec78:	117a      	asrs	r2, r7, #5
 800ec7a:	2301      	movs	r3, #1
 800ec7c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800ec80:	f007 071f 	and.w	r7, r7, #31
 800ec84:	40bb      	lsls	r3, r7
 800ec86:	4213      	tst	r3, r2
 800ec88:	4629      	mov	r1, r5
 800ec8a:	4620      	mov	r0, r4
 800ec8c:	bf18      	it	ne
 800ec8e:	f049 0902 	orrne.w	r9, r9, #2
 800ec92:	f7ff fe21 	bl	800e8d8 <rshift>
 800ec96:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800ec9a:	1b76      	subs	r6, r6, r5
 800ec9c:	2502      	movs	r5, #2
 800ec9e:	f1b9 0f00 	cmp.w	r9, #0
 800eca2:	d047      	beq.n	800ed34 <__gethex+0x38c>
 800eca4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800eca8:	2b02      	cmp	r3, #2
 800ecaa:	d015      	beq.n	800ecd8 <__gethex+0x330>
 800ecac:	2b03      	cmp	r3, #3
 800ecae:	d017      	beq.n	800ece0 <__gethex+0x338>
 800ecb0:	2b01      	cmp	r3, #1
 800ecb2:	d109      	bne.n	800ecc8 <__gethex+0x320>
 800ecb4:	f019 0f02 	tst.w	r9, #2
 800ecb8:	d006      	beq.n	800ecc8 <__gethex+0x320>
 800ecba:	f8da 3000 	ldr.w	r3, [sl]
 800ecbe:	ea49 0903 	orr.w	r9, r9, r3
 800ecc2:	f019 0f01 	tst.w	r9, #1
 800ecc6:	d10e      	bne.n	800ece6 <__gethex+0x33e>
 800ecc8:	f045 0510 	orr.w	r5, r5, #16
 800eccc:	e032      	b.n	800ed34 <__gethex+0x38c>
 800ecce:	f04f 0901 	mov.w	r9, #1
 800ecd2:	e7d1      	b.n	800ec78 <__gethex+0x2d0>
 800ecd4:	2501      	movs	r5, #1
 800ecd6:	e7e2      	b.n	800ec9e <__gethex+0x2f6>
 800ecd8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ecda:	f1c3 0301 	rsb	r3, r3, #1
 800ecde:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ece0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ece2:	2b00      	cmp	r3, #0
 800ece4:	d0f0      	beq.n	800ecc8 <__gethex+0x320>
 800ece6:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ecea:	f104 0314 	add.w	r3, r4, #20
 800ecee:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800ecf2:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800ecf6:	f04f 0c00 	mov.w	ip, #0
 800ecfa:	4618      	mov	r0, r3
 800ecfc:	f853 2b04 	ldr.w	r2, [r3], #4
 800ed00:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ed04:	d01b      	beq.n	800ed3e <__gethex+0x396>
 800ed06:	3201      	adds	r2, #1
 800ed08:	6002      	str	r2, [r0, #0]
 800ed0a:	2d02      	cmp	r5, #2
 800ed0c:	f104 0314 	add.w	r3, r4, #20
 800ed10:	d13c      	bne.n	800ed8c <__gethex+0x3e4>
 800ed12:	f8d8 2000 	ldr.w	r2, [r8]
 800ed16:	3a01      	subs	r2, #1
 800ed18:	42b2      	cmp	r2, r6
 800ed1a:	d109      	bne.n	800ed30 <__gethex+0x388>
 800ed1c:	1171      	asrs	r1, r6, #5
 800ed1e:	2201      	movs	r2, #1
 800ed20:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ed24:	f006 061f 	and.w	r6, r6, #31
 800ed28:	fa02 f606 	lsl.w	r6, r2, r6
 800ed2c:	421e      	tst	r6, r3
 800ed2e:	d13a      	bne.n	800eda6 <__gethex+0x3fe>
 800ed30:	f045 0520 	orr.w	r5, r5, #32
 800ed34:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ed36:	601c      	str	r4, [r3, #0]
 800ed38:	9b02      	ldr	r3, [sp, #8]
 800ed3a:	601f      	str	r7, [r3, #0]
 800ed3c:	e6b0      	b.n	800eaa0 <__gethex+0xf8>
 800ed3e:	4299      	cmp	r1, r3
 800ed40:	f843 cc04 	str.w	ip, [r3, #-4]
 800ed44:	d8d9      	bhi.n	800ecfa <__gethex+0x352>
 800ed46:	68a3      	ldr	r3, [r4, #8]
 800ed48:	459b      	cmp	fp, r3
 800ed4a:	db17      	blt.n	800ed7c <__gethex+0x3d4>
 800ed4c:	6861      	ldr	r1, [r4, #4]
 800ed4e:	9801      	ldr	r0, [sp, #4]
 800ed50:	3101      	adds	r1, #1
 800ed52:	f7fd fec9 	bl	800cae8 <_Balloc>
 800ed56:	4681      	mov	r9, r0
 800ed58:	b918      	cbnz	r0, 800ed62 <__gethex+0x3ba>
 800ed5a:	4b1a      	ldr	r3, [pc, #104]	@ (800edc4 <__gethex+0x41c>)
 800ed5c:	4602      	mov	r2, r0
 800ed5e:	2184      	movs	r1, #132	@ 0x84
 800ed60:	e6c5      	b.n	800eaee <__gethex+0x146>
 800ed62:	6922      	ldr	r2, [r4, #16]
 800ed64:	3202      	adds	r2, #2
 800ed66:	f104 010c 	add.w	r1, r4, #12
 800ed6a:	0092      	lsls	r2, r2, #2
 800ed6c:	300c      	adds	r0, #12
 800ed6e:	f7fd f87c 	bl	800be6a <memcpy>
 800ed72:	4621      	mov	r1, r4
 800ed74:	9801      	ldr	r0, [sp, #4]
 800ed76:	f7fd fef7 	bl	800cb68 <_Bfree>
 800ed7a:	464c      	mov	r4, r9
 800ed7c:	6923      	ldr	r3, [r4, #16]
 800ed7e:	1c5a      	adds	r2, r3, #1
 800ed80:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ed84:	6122      	str	r2, [r4, #16]
 800ed86:	2201      	movs	r2, #1
 800ed88:	615a      	str	r2, [r3, #20]
 800ed8a:	e7be      	b.n	800ed0a <__gethex+0x362>
 800ed8c:	6922      	ldr	r2, [r4, #16]
 800ed8e:	455a      	cmp	r2, fp
 800ed90:	dd0b      	ble.n	800edaa <__gethex+0x402>
 800ed92:	2101      	movs	r1, #1
 800ed94:	4620      	mov	r0, r4
 800ed96:	f7ff fd9f 	bl	800e8d8 <rshift>
 800ed9a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ed9e:	3701      	adds	r7, #1
 800eda0:	42bb      	cmp	r3, r7
 800eda2:	f6ff aee0 	blt.w	800eb66 <__gethex+0x1be>
 800eda6:	2501      	movs	r5, #1
 800eda8:	e7c2      	b.n	800ed30 <__gethex+0x388>
 800edaa:	f016 061f 	ands.w	r6, r6, #31
 800edae:	d0fa      	beq.n	800eda6 <__gethex+0x3fe>
 800edb0:	4453      	add	r3, sl
 800edb2:	f1c6 0620 	rsb	r6, r6, #32
 800edb6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800edba:	f7fd ff87 	bl	800cccc <__hi0bits>
 800edbe:	42b0      	cmp	r0, r6
 800edc0:	dbe7      	blt.n	800ed92 <__gethex+0x3ea>
 800edc2:	e7f0      	b.n	800eda6 <__gethex+0x3fe>
 800edc4:	0800f35d 	.word	0x0800f35d

0800edc8 <L_shift>:
 800edc8:	f1c2 0208 	rsb	r2, r2, #8
 800edcc:	0092      	lsls	r2, r2, #2
 800edce:	b570      	push	{r4, r5, r6, lr}
 800edd0:	f1c2 0620 	rsb	r6, r2, #32
 800edd4:	6843      	ldr	r3, [r0, #4]
 800edd6:	6804      	ldr	r4, [r0, #0]
 800edd8:	fa03 f506 	lsl.w	r5, r3, r6
 800eddc:	432c      	orrs	r4, r5
 800edde:	40d3      	lsrs	r3, r2
 800ede0:	6004      	str	r4, [r0, #0]
 800ede2:	f840 3f04 	str.w	r3, [r0, #4]!
 800ede6:	4288      	cmp	r0, r1
 800ede8:	d3f4      	bcc.n	800edd4 <L_shift+0xc>
 800edea:	bd70      	pop	{r4, r5, r6, pc}

0800edec <__match>:
 800edec:	b530      	push	{r4, r5, lr}
 800edee:	6803      	ldr	r3, [r0, #0]
 800edf0:	3301      	adds	r3, #1
 800edf2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800edf6:	b914      	cbnz	r4, 800edfe <__match+0x12>
 800edf8:	6003      	str	r3, [r0, #0]
 800edfa:	2001      	movs	r0, #1
 800edfc:	bd30      	pop	{r4, r5, pc}
 800edfe:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ee02:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800ee06:	2d19      	cmp	r5, #25
 800ee08:	bf98      	it	ls
 800ee0a:	3220      	addls	r2, #32
 800ee0c:	42a2      	cmp	r2, r4
 800ee0e:	d0f0      	beq.n	800edf2 <__match+0x6>
 800ee10:	2000      	movs	r0, #0
 800ee12:	e7f3      	b.n	800edfc <__match+0x10>

0800ee14 <__hexnan>:
 800ee14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee18:	680b      	ldr	r3, [r1, #0]
 800ee1a:	6801      	ldr	r1, [r0, #0]
 800ee1c:	115e      	asrs	r6, r3, #5
 800ee1e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ee22:	f013 031f 	ands.w	r3, r3, #31
 800ee26:	b087      	sub	sp, #28
 800ee28:	bf18      	it	ne
 800ee2a:	3604      	addne	r6, #4
 800ee2c:	2500      	movs	r5, #0
 800ee2e:	1f37      	subs	r7, r6, #4
 800ee30:	4682      	mov	sl, r0
 800ee32:	4690      	mov	r8, r2
 800ee34:	9301      	str	r3, [sp, #4]
 800ee36:	f846 5c04 	str.w	r5, [r6, #-4]
 800ee3a:	46b9      	mov	r9, r7
 800ee3c:	463c      	mov	r4, r7
 800ee3e:	9502      	str	r5, [sp, #8]
 800ee40:	46ab      	mov	fp, r5
 800ee42:	784a      	ldrb	r2, [r1, #1]
 800ee44:	1c4b      	adds	r3, r1, #1
 800ee46:	9303      	str	r3, [sp, #12]
 800ee48:	b342      	cbz	r2, 800ee9c <__hexnan+0x88>
 800ee4a:	4610      	mov	r0, r2
 800ee4c:	9105      	str	r1, [sp, #20]
 800ee4e:	9204      	str	r2, [sp, #16]
 800ee50:	f7ff fd94 	bl	800e97c <__hexdig_fun>
 800ee54:	2800      	cmp	r0, #0
 800ee56:	d151      	bne.n	800eefc <__hexnan+0xe8>
 800ee58:	9a04      	ldr	r2, [sp, #16]
 800ee5a:	9905      	ldr	r1, [sp, #20]
 800ee5c:	2a20      	cmp	r2, #32
 800ee5e:	d818      	bhi.n	800ee92 <__hexnan+0x7e>
 800ee60:	9b02      	ldr	r3, [sp, #8]
 800ee62:	459b      	cmp	fp, r3
 800ee64:	dd13      	ble.n	800ee8e <__hexnan+0x7a>
 800ee66:	454c      	cmp	r4, r9
 800ee68:	d206      	bcs.n	800ee78 <__hexnan+0x64>
 800ee6a:	2d07      	cmp	r5, #7
 800ee6c:	dc04      	bgt.n	800ee78 <__hexnan+0x64>
 800ee6e:	462a      	mov	r2, r5
 800ee70:	4649      	mov	r1, r9
 800ee72:	4620      	mov	r0, r4
 800ee74:	f7ff ffa8 	bl	800edc8 <L_shift>
 800ee78:	4544      	cmp	r4, r8
 800ee7a:	d952      	bls.n	800ef22 <__hexnan+0x10e>
 800ee7c:	2300      	movs	r3, #0
 800ee7e:	f1a4 0904 	sub.w	r9, r4, #4
 800ee82:	f844 3c04 	str.w	r3, [r4, #-4]
 800ee86:	f8cd b008 	str.w	fp, [sp, #8]
 800ee8a:	464c      	mov	r4, r9
 800ee8c:	461d      	mov	r5, r3
 800ee8e:	9903      	ldr	r1, [sp, #12]
 800ee90:	e7d7      	b.n	800ee42 <__hexnan+0x2e>
 800ee92:	2a29      	cmp	r2, #41	@ 0x29
 800ee94:	d157      	bne.n	800ef46 <__hexnan+0x132>
 800ee96:	3102      	adds	r1, #2
 800ee98:	f8ca 1000 	str.w	r1, [sl]
 800ee9c:	f1bb 0f00 	cmp.w	fp, #0
 800eea0:	d051      	beq.n	800ef46 <__hexnan+0x132>
 800eea2:	454c      	cmp	r4, r9
 800eea4:	d206      	bcs.n	800eeb4 <__hexnan+0xa0>
 800eea6:	2d07      	cmp	r5, #7
 800eea8:	dc04      	bgt.n	800eeb4 <__hexnan+0xa0>
 800eeaa:	462a      	mov	r2, r5
 800eeac:	4649      	mov	r1, r9
 800eeae:	4620      	mov	r0, r4
 800eeb0:	f7ff ff8a 	bl	800edc8 <L_shift>
 800eeb4:	4544      	cmp	r4, r8
 800eeb6:	d936      	bls.n	800ef26 <__hexnan+0x112>
 800eeb8:	f1a8 0204 	sub.w	r2, r8, #4
 800eebc:	4623      	mov	r3, r4
 800eebe:	f853 1b04 	ldr.w	r1, [r3], #4
 800eec2:	f842 1f04 	str.w	r1, [r2, #4]!
 800eec6:	429f      	cmp	r7, r3
 800eec8:	d2f9      	bcs.n	800eebe <__hexnan+0xaa>
 800eeca:	1b3b      	subs	r3, r7, r4
 800eecc:	f023 0303 	bic.w	r3, r3, #3
 800eed0:	3304      	adds	r3, #4
 800eed2:	3401      	adds	r4, #1
 800eed4:	3e03      	subs	r6, #3
 800eed6:	42b4      	cmp	r4, r6
 800eed8:	bf88      	it	hi
 800eeda:	2304      	movhi	r3, #4
 800eedc:	4443      	add	r3, r8
 800eede:	2200      	movs	r2, #0
 800eee0:	f843 2b04 	str.w	r2, [r3], #4
 800eee4:	429f      	cmp	r7, r3
 800eee6:	d2fb      	bcs.n	800eee0 <__hexnan+0xcc>
 800eee8:	683b      	ldr	r3, [r7, #0]
 800eeea:	b91b      	cbnz	r3, 800eef4 <__hexnan+0xe0>
 800eeec:	4547      	cmp	r7, r8
 800eeee:	d128      	bne.n	800ef42 <__hexnan+0x12e>
 800eef0:	2301      	movs	r3, #1
 800eef2:	603b      	str	r3, [r7, #0]
 800eef4:	2005      	movs	r0, #5
 800eef6:	b007      	add	sp, #28
 800eef8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eefc:	3501      	adds	r5, #1
 800eefe:	2d08      	cmp	r5, #8
 800ef00:	f10b 0b01 	add.w	fp, fp, #1
 800ef04:	dd06      	ble.n	800ef14 <__hexnan+0x100>
 800ef06:	4544      	cmp	r4, r8
 800ef08:	d9c1      	bls.n	800ee8e <__hexnan+0x7a>
 800ef0a:	2300      	movs	r3, #0
 800ef0c:	f844 3c04 	str.w	r3, [r4, #-4]
 800ef10:	2501      	movs	r5, #1
 800ef12:	3c04      	subs	r4, #4
 800ef14:	6822      	ldr	r2, [r4, #0]
 800ef16:	f000 000f 	and.w	r0, r0, #15
 800ef1a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800ef1e:	6020      	str	r0, [r4, #0]
 800ef20:	e7b5      	b.n	800ee8e <__hexnan+0x7a>
 800ef22:	2508      	movs	r5, #8
 800ef24:	e7b3      	b.n	800ee8e <__hexnan+0x7a>
 800ef26:	9b01      	ldr	r3, [sp, #4]
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	d0dd      	beq.n	800eee8 <__hexnan+0xd4>
 800ef2c:	f1c3 0320 	rsb	r3, r3, #32
 800ef30:	f04f 32ff 	mov.w	r2, #4294967295
 800ef34:	40da      	lsrs	r2, r3
 800ef36:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800ef3a:	4013      	ands	r3, r2
 800ef3c:	f846 3c04 	str.w	r3, [r6, #-4]
 800ef40:	e7d2      	b.n	800eee8 <__hexnan+0xd4>
 800ef42:	3f04      	subs	r7, #4
 800ef44:	e7d0      	b.n	800eee8 <__hexnan+0xd4>
 800ef46:	2004      	movs	r0, #4
 800ef48:	e7d5      	b.n	800eef6 <__hexnan+0xe2>

0800ef4a <__ascii_mbtowc>:
 800ef4a:	b082      	sub	sp, #8
 800ef4c:	b901      	cbnz	r1, 800ef50 <__ascii_mbtowc+0x6>
 800ef4e:	a901      	add	r1, sp, #4
 800ef50:	b142      	cbz	r2, 800ef64 <__ascii_mbtowc+0x1a>
 800ef52:	b14b      	cbz	r3, 800ef68 <__ascii_mbtowc+0x1e>
 800ef54:	7813      	ldrb	r3, [r2, #0]
 800ef56:	600b      	str	r3, [r1, #0]
 800ef58:	7812      	ldrb	r2, [r2, #0]
 800ef5a:	1e10      	subs	r0, r2, #0
 800ef5c:	bf18      	it	ne
 800ef5e:	2001      	movne	r0, #1
 800ef60:	b002      	add	sp, #8
 800ef62:	4770      	bx	lr
 800ef64:	4610      	mov	r0, r2
 800ef66:	e7fb      	b.n	800ef60 <__ascii_mbtowc+0x16>
 800ef68:	f06f 0001 	mvn.w	r0, #1
 800ef6c:	e7f8      	b.n	800ef60 <__ascii_mbtowc+0x16>

0800ef6e <_realloc_r>:
 800ef6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef72:	4680      	mov	r8, r0
 800ef74:	4615      	mov	r5, r2
 800ef76:	460c      	mov	r4, r1
 800ef78:	b921      	cbnz	r1, 800ef84 <_realloc_r+0x16>
 800ef7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ef7e:	4611      	mov	r1, r2
 800ef80:	f7fb bd40 	b.w	800aa04 <_malloc_r>
 800ef84:	b92a      	cbnz	r2, 800ef92 <_realloc_r+0x24>
 800ef86:	f7fd fd65 	bl	800ca54 <_free_r>
 800ef8a:	2400      	movs	r4, #0
 800ef8c:	4620      	mov	r0, r4
 800ef8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef92:	f000 f827 	bl	800efe4 <_malloc_usable_size_r>
 800ef96:	4285      	cmp	r5, r0
 800ef98:	4606      	mov	r6, r0
 800ef9a:	d802      	bhi.n	800efa2 <_realloc_r+0x34>
 800ef9c:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800efa0:	d8f4      	bhi.n	800ef8c <_realloc_r+0x1e>
 800efa2:	4629      	mov	r1, r5
 800efa4:	4640      	mov	r0, r8
 800efa6:	f7fb fd2d 	bl	800aa04 <_malloc_r>
 800efaa:	4607      	mov	r7, r0
 800efac:	2800      	cmp	r0, #0
 800efae:	d0ec      	beq.n	800ef8a <_realloc_r+0x1c>
 800efb0:	42b5      	cmp	r5, r6
 800efb2:	462a      	mov	r2, r5
 800efb4:	4621      	mov	r1, r4
 800efb6:	bf28      	it	cs
 800efb8:	4632      	movcs	r2, r6
 800efba:	f7fc ff56 	bl	800be6a <memcpy>
 800efbe:	4621      	mov	r1, r4
 800efc0:	4640      	mov	r0, r8
 800efc2:	f7fd fd47 	bl	800ca54 <_free_r>
 800efc6:	463c      	mov	r4, r7
 800efc8:	e7e0      	b.n	800ef8c <_realloc_r+0x1e>

0800efca <__ascii_wctomb>:
 800efca:	4603      	mov	r3, r0
 800efcc:	4608      	mov	r0, r1
 800efce:	b141      	cbz	r1, 800efe2 <__ascii_wctomb+0x18>
 800efd0:	2aff      	cmp	r2, #255	@ 0xff
 800efd2:	d904      	bls.n	800efde <__ascii_wctomb+0x14>
 800efd4:	228a      	movs	r2, #138	@ 0x8a
 800efd6:	601a      	str	r2, [r3, #0]
 800efd8:	f04f 30ff 	mov.w	r0, #4294967295
 800efdc:	4770      	bx	lr
 800efde:	700a      	strb	r2, [r1, #0]
 800efe0:	2001      	movs	r0, #1
 800efe2:	4770      	bx	lr

0800efe4 <_malloc_usable_size_r>:
 800efe4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800efe8:	1f18      	subs	r0, r3, #4
 800efea:	2b00      	cmp	r3, #0
 800efec:	bfbc      	itt	lt
 800efee:	580b      	ldrlt	r3, [r1, r0]
 800eff0:	18c0      	addlt	r0, r0, r3
 800eff2:	4770      	bx	lr

0800eff4 <_init>:
 800eff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eff6:	bf00      	nop
 800eff8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800effa:	bc08      	pop	{r3}
 800effc:	469e      	mov	lr, r3
 800effe:	4770      	bx	lr

0800f000 <_fini>:
 800f000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f002:	bf00      	nop
 800f004:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f006:	bc08      	pop	{r3}
 800f008:	469e      	mov	lr, r3
 800f00a:	4770      	bx	lr
