
Radio_main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d2c4  080002b0  080002b0  000012b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004e8  0800d578  0800d578  0000e578  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800da60  0800da60  0000ea60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800da68  0800da68  0000ea68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800da6c  0800da6c  0000ea6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001dc  24000000  0800da70  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004c48  240001dc  0800dc4c  0000f1dc  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24004e24  0800dc4c  0000fe24  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000f1dc  2**0
                  CONTENTS, READONLY
 10 .debug_info   00021dc8  00000000  00000000  0000f20a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000440b  00000000  00000000  00030fd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001990  00000000  00000000  000353e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000013bf  00000000  00000000  00036d70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00034ada  00000000  00000000  0003812f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00020fc7  00000000  00000000  0006cc09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0014cb77  00000000  00000000  0008dbd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001da747  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007eac  00000000  00000000  001da78c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000008b  00000000  00000000  001e2638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	@ (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	@ (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	240001dc 	.word	0x240001dc
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0800d55c 	.word	0x0800d55c

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	@ (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	@ (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	@ (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	240001e0 	.word	0x240001e0
 80002ec:	0800d55c 	.word	0x0800d55c

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <strlen>:
 8000390:	4603      	mov	r3, r0
 8000392:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000396:	2a00      	cmp	r2, #0
 8000398:	d1fb      	bne.n	8000392 <strlen+0x2>
 800039a:	1a18      	subs	r0, r3, r0
 800039c:	3801      	subs	r0, #1
 800039e:	4770      	bx	lr

080003a0 <__aeabi_drsub>:
 80003a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003a4:	e002      	b.n	80003ac <__adddf3>
 80003a6:	bf00      	nop

080003a8 <__aeabi_dsub>:
 80003a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003ac <__adddf3>:
 80003ac:	b530      	push	{r4, r5, lr}
 80003ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003b6:	ea94 0f05 	teq	r4, r5
 80003ba:	bf08      	it	eq
 80003bc:	ea90 0f02 	teqeq	r0, r2
 80003c0:	bf1f      	itttt	ne
 80003c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d2:	f000 80e2 	beq.w	800059a <__adddf3+0x1ee>
 80003d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003de:	bfb8      	it	lt
 80003e0:	426d      	neglt	r5, r5
 80003e2:	dd0c      	ble.n	80003fe <__adddf3+0x52>
 80003e4:	442c      	add	r4, r5
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	ea82 0000 	eor.w	r0, r2, r0
 80003f2:	ea83 0101 	eor.w	r1, r3, r1
 80003f6:	ea80 0202 	eor.w	r2, r0, r2
 80003fa:	ea81 0303 	eor.w	r3, r1, r3
 80003fe:	2d36      	cmp	r5, #54	@ 0x36
 8000400:	bf88      	it	hi
 8000402:	bd30      	pophi	{r4, r5, pc}
 8000404:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000408:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800040c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000410:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000414:	d002      	beq.n	800041c <__adddf3+0x70>
 8000416:	4240      	negs	r0, r0
 8000418:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800041c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000420:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000424:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000428:	d002      	beq.n	8000430 <__adddf3+0x84>
 800042a:	4252      	negs	r2, r2
 800042c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000430:	ea94 0f05 	teq	r4, r5
 8000434:	f000 80a7 	beq.w	8000586 <__adddf3+0x1da>
 8000438:	f1a4 0401 	sub.w	r4, r4, #1
 800043c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000440:	db0d      	blt.n	800045e <__adddf3+0xb2>
 8000442:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000446:	fa22 f205 	lsr.w	r2, r2, r5
 800044a:	1880      	adds	r0, r0, r2
 800044c:	f141 0100 	adc.w	r1, r1, #0
 8000450:	fa03 f20e 	lsl.w	r2, r3, lr
 8000454:	1880      	adds	r0, r0, r2
 8000456:	fa43 f305 	asr.w	r3, r3, r5
 800045a:	4159      	adcs	r1, r3
 800045c:	e00e      	b.n	800047c <__adddf3+0xd0>
 800045e:	f1a5 0520 	sub.w	r5, r5, #32
 8000462:	f10e 0e20 	add.w	lr, lr, #32
 8000466:	2a01      	cmp	r2, #1
 8000468:	fa03 fc0e 	lsl.w	ip, r3, lr
 800046c:	bf28      	it	cs
 800046e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000472:	fa43 f305 	asr.w	r3, r3, r5
 8000476:	18c0      	adds	r0, r0, r3
 8000478:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800047c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000480:	d507      	bpl.n	8000492 <__adddf3+0xe6>
 8000482:	f04f 0e00 	mov.w	lr, #0
 8000486:	f1dc 0c00 	rsbs	ip, ip, #0
 800048a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800048e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000492:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000496:	d31b      	bcc.n	80004d0 <__adddf3+0x124>
 8000498:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800049c:	d30c      	bcc.n	80004b8 <__adddf3+0x10c>
 800049e:	0849      	lsrs	r1, r1, #1
 80004a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004a8:	f104 0401 	add.w	r4, r4, #1
 80004ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004b4:	f080 809a 	bcs.w	80005ec <__adddf3+0x240>
 80004b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004bc:	bf08      	it	eq
 80004be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004c2:	f150 0000 	adcs.w	r0, r0, #0
 80004c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ca:	ea41 0105 	orr.w	r1, r1, r5
 80004ce:	bd30      	pop	{r4, r5, pc}
 80004d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004d4:	4140      	adcs	r0, r0
 80004d6:	eb41 0101 	adc.w	r1, r1, r1
 80004da:	3c01      	subs	r4, #1
 80004dc:	bf28      	it	cs
 80004de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004e2:	d2e9      	bcs.n	80004b8 <__adddf3+0x10c>
 80004e4:	f091 0f00 	teq	r1, #0
 80004e8:	bf04      	itt	eq
 80004ea:	4601      	moveq	r1, r0
 80004ec:	2000      	moveq	r0, #0
 80004ee:	fab1 f381 	clz	r3, r1
 80004f2:	bf08      	it	eq
 80004f4:	3320      	addeq	r3, #32
 80004f6:	f1a3 030b 	sub.w	r3, r3, #11
 80004fa:	f1b3 0220 	subs.w	r2, r3, #32
 80004fe:	da0c      	bge.n	800051a <__adddf3+0x16e>
 8000500:	320c      	adds	r2, #12
 8000502:	dd08      	ble.n	8000516 <__adddf3+0x16a>
 8000504:	f102 0c14 	add.w	ip, r2, #20
 8000508:	f1c2 020c 	rsb	r2, r2, #12
 800050c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000510:	fa21 f102 	lsr.w	r1, r1, r2
 8000514:	e00c      	b.n	8000530 <__adddf3+0x184>
 8000516:	f102 0214 	add.w	r2, r2, #20
 800051a:	bfd8      	it	le
 800051c:	f1c2 0c20 	rsble	ip, r2, #32
 8000520:	fa01 f102 	lsl.w	r1, r1, r2
 8000524:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000528:	bfdc      	itt	le
 800052a:	ea41 010c 	orrle.w	r1, r1, ip
 800052e:	4090      	lslle	r0, r2
 8000530:	1ae4      	subs	r4, r4, r3
 8000532:	bfa2      	ittt	ge
 8000534:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000538:	4329      	orrge	r1, r5
 800053a:	bd30      	popge	{r4, r5, pc}
 800053c:	ea6f 0404 	mvn.w	r4, r4
 8000540:	3c1f      	subs	r4, #31
 8000542:	da1c      	bge.n	800057e <__adddf3+0x1d2>
 8000544:	340c      	adds	r4, #12
 8000546:	dc0e      	bgt.n	8000566 <__adddf3+0x1ba>
 8000548:	f104 0414 	add.w	r4, r4, #20
 800054c:	f1c4 0220 	rsb	r2, r4, #32
 8000550:	fa20 f004 	lsr.w	r0, r0, r4
 8000554:	fa01 f302 	lsl.w	r3, r1, r2
 8000558:	ea40 0003 	orr.w	r0, r0, r3
 800055c:	fa21 f304 	lsr.w	r3, r1, r4
 8000560:	ea45 0103 	orr.w	r1, r5, r3
 8000564:	bd30      	pop	{r4, r5, pc}
 8000566:	f1c4 040c 	rsb	r4, r4, #12
 800056a:	f1c4 0220 	rsb	r2, r4, #32
 800056e:	fa20 f002 	lsr.w	r0, r0, r2
 8000572:	fa01 f304 	lsl.w	r3, r1, r4
 8000576:	ea40 0003 	orr.w	r0, r0, r3
 800057a:	4629      	mov	r1, r5
 800057c:	bd30      	pop	{r4, r5, pc}
 800057e:	fa21 f004 	lsr.w	r0, r1, r4
 8000582:	4629      	mov	r1, r5
 8000584:	bd30      	pop	{r4, r5, pc}
 8000586:	f094 0f00 	teq	r4, #0
 800058a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800058e:	bf06      	itte	eq
 8000590:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000594:	3401      	addeq	r4, #1
 8000596:	3d01      	subne	r5, #1
 8000598:	e74e      	b.n	8000438 <__adddf3+0x8c>
 800059a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800059e:	bf18      	it	ne
 80005a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005a4:	d029      	beq.n	80005fa <__adddf3+0x24e>
 80005a6:	ea94 0f05 	teq	r4, r5
 80005aa:	bf08      	it	eq
 80005ac:	ea90 0f02 	teqeq	r0, r2
 80005b0:	d005      	beq.n	80005be <__adddf3+0x212>
 80005b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005b6:	bf04      	itt	eq
 80005b8:	4619      	moveq	r1, r3
 80005ba:	4610      	moveq	r0, r2
 80005bc:	bd30      	pop	{r4, r5, pc}
 80005be:	ea91 0f03 	teq	r1, r3
 80005c2:	bf1e      	ittt	ne
 80005c4:	2100      	movne	r1, #0
 80005c6:	2000      	movne	r0, #0
 80005c8:	bd30      	popne	{r4, r5, pc}
 80005ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ce:	d105      	bne.n	80005dc <__adddf3+0x230>
 80005d0:	0040      	lsls	r0, r0, #1
 80005d2:	4149      	adcs	r1, r1
 80005d4:	bf28      	it	cs
 80005d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005da:	bd30      	pop	{r4, r5, pc}
 80005dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005e0:	bf3c      	itt	cc
 80005e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005e6:	bd30      	popcc	{r4, r5, pc}
 80005e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005f4:	f04f 0000 	mov.w	r0, #0
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005fe:	bf1a      	itte	ne
 8000600:	4619      	movne	r1, r3
 8000602:	4610      	movne	r0, r2
 8000604:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000608:	bf1c      	itt	ne
 800060a:	460b      	movne	r3, r1
 800060c:	4602      	movne	r2, r0
 800060e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000612:	bf06      	itte	eq
 8000614:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000618:	ea91 0f03 	teqeq	r1, r3
 800061c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000620:	bd30      	pop	{r4, r5, pc}
 8000622:	bf00      	nop

08000624 <__aeabi_ui2d>:
 8000624:	f090 0f00 	teq	r0, #0
 8000628:	bf04      	itt	eq
 800062a:	2100      	moveq	r1, #0
 800062c:	4770      	bxeq	lr
 800062e:	b530      	push	{r4, r5, lr}
 8000630:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000634:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000638:	f04f 0500 	mov.w	r5, #0
 800063c:	f04f 0100 	mov.w	r1, #0
 8000640:	e750      	b.n	80004e4 <__adddf3+0x138>
 8000642:	bf00      	nop

08000644 <__aeabi_i2d>:
 8000644:	f090 0f00 	teq	r0, #0
 8000648:	bf04      	itt	eq
 800064a:	2100      	moveq	r1, #0
 800064c:	4770      	bxeq	lr
 800064e:	b530      	push	{r4, r5, lr}
 8000650:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000654:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000658:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800065c:	bf48      	it	mi
 800065e:	4240      	negmi	r0, r0
 8000660:	f04f 0100 	mov.w	r1, #0
 8000664:	e73e      	b.n	80004e4 <__adddf3+0x138>
 8000666:	bf00      	nop

08000668 <__aeabi_f2d>:
 8000668:	0042      	lsls	r2, r0, #1
 800066a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800066e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000672:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000676:	bf1f      	itttt	ne
 8000678:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800067c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000680:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000684:	4770      	bxne	lr
 8000686:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800068a:	bf08      	it	eq
 800068c:	4770      	bxeq	lr
 800068e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000692:	bf04      	itt	eq
 8000694:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000698:	4770      	bxeq	lr
 800069a:	b530      	push	{r4, r5, lr}
 800069c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006a8:	e71c      	b.n	80004e4 <__adddf3+0x138>
 80006aa:	bf00      	nop

080006ac <__aeabi_ul2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f04f 0500 	mov.w	r5, #0
 80006ba:	e00a      	b.n	80006d2 <__aeabi_l2d+0x16>

080006bc <__aeabi_l2d>:
 80006bc:	ea50 0201 	orrs.w	r2, r0, r1
 80006c0:	bf08      	it	eq
 80006c2:	4770      	bxeq	lr
 80006c4:	b530      	push	{r4, r5, lr}
 80006c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ca:	d502      	bpl.n	80006d2 <__aeabi_l2d+0x16>
 80006cc:	4240      	negs	r0, r0
 80006ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006de:	f43f aed8 	beq.w	8000492 <__adddf3+0xe6>
 80006e2:	f04f 0203 	mov.w	r2, #3
 80006e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ea:	bf18      	it	ne
 80006ec:	3203      	addne	r2, #3
 80006ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006f2:	bf18      	it	ne
 80006f4:	3203      	addne	r2, #3
 80006f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006fa:	f1c2 0320 	rsb	r3, r2, #32
 80006fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000702:	fa20 f002 	lsr.w	r0, r0, r2
 8000706:	fa01 fe03 	lsl.w	lr, r1, r3
 800070a:	ea40 000e 	orr.w	r0, r0, lr
 800070e:	fa21 f102 	lsr.w	r1, r1, r2
 8000712:	4414      	add	r4, r2
 8000714:	e6bd      	b.n	8000492 <__adddf3+0xe6>
 8000716:	bf00      	nop

08000718 <__aeabi_uldivmod>:
 8000718:	b953      	cbnz	r3, 8000730 <__aeabi_uldivmod+0x18>
 800071a:	b94a      	cbnz	r2, 8000730 <__aeabi_uldivmod+0x18>
 800071c:	2900      	cmp	r1, #0
 800071e:	bf08      	it	eq
 8000720:	2800      	cmpeq	r0, #0
 8000722:	bf1c      	itt	ne
 8000724:	f04f 31ff 	movne.w	r1, #4294967295
 8000728:	f04f 30ff 	movne.w	r0, #4294967295
 800072c:	f000 b9a2 	b.w	8000a74 <__aeabi_idiv0>
 8000730:	f1ad 0c08 	sub.w	ip, sp, #8
 8000734:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000738:	f000 f83e 	bl	80007b8 <__udivmoddi4>
 800073c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000740:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000744:	b004      	add	sp, #16
 8000746:	4770      	bx	lr

08000748 <__aeabi_d2lz>:
 8000748:	b508      	push	{r3, lr}
 800074a:	4602      	mov	r2, r0
 800074c:	460b      	mov	r3, r1
 800074e:	ec43 2b17 	vmov	d7, r2, r3
 8000752:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000756:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800075a:	d403      	bmi.n	8000764 <__aeabi_d2lz+0x1c>
 800075c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000760:	f000 b80a 	b.w	8000778 <__aeabi_d2ulz>
 8000764:	eeb1 7b47 	vneg.f64	d7, d7
 8000768:	ec51 0b17 	vmov	r0, r1, d7
 800076c:	f000 f804 	bl	8000778 <__aeabi_d2ulz>
 8000770:	4240      	negs	r0, r0
 8000772:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000776:	bd08      	pop	{r3, pc}

08000778 <__aeabi_d2ulz>:
 8000778:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 80007a8 <__aeabi_d2ulz+0x30>
 800077c:	ec41 0b17 	vmov	d7, r0, r1
 8000780:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 80007b0 <__aeabi_d2ulz+0x38>
 8000784:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000788:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800078c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000790:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000794:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000798:	ee16 1a10 	vmov	r1, s12
 800079c:	ee17 0a90 	vmov	r0, s15
 80007a0:	4770      	bx	lr
 80007a2:	bf00      	nop
 80007a4:	f3af 8000 	nop.w
 80007a8:	00000000 	.word	0x00000000
 80007ac:	3df00000 	.word	0x3df00000
 80007b0:	00000000 	.word	0x00000000
 80007b4:	41f00000 	.word	0x41f00000

080007b8 <__udivmoddi4>:
 80007b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007bc:	9d08      	ldr	r5, [sp, #32]
 80007be:	460c      	mov	r4, r1
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d14e      	bne.n	8000862 <__udivmoddi4+0xaa>
 80007c4:	4694      	mov	ip, r2
 80007c6:	458c      	cmp	ip, r1
 80007c8:	4686      	mov	lr, r0
 80007ca:	fab2 f282 	clz	r2, r2
 80007ce:	d962      	bls.n	8000896 <__udivmoddi4+0xde>
 80007d0:	b14a      	cbz	r2, 80007e6 <__udivmoddi4+0x2e>
 80007d2:	f1c2 0320 	rsb	r3, r2, #32
 80007d6:	4091      	lsls	r1, r2
 80007d8:	fa20 f303 	lsr.w	r3, r0, r3
 80007dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80007e0:	4319      	orrs	r1, r3
 80007e2:	fa00 fe02 	lsl.w	lr, r0, r2
 80007e6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80007ea:	fa1f f68c 	uxth.w	r6, ip
 80007ee:	fbb1 f4f7 	udiv	r4, r1, r7
 80007f2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80007f6:	fb07 1114 	mls	r1, r7, r4, r1
 80007fa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007fe:	fb04 f106 	mul.w	r1, r4, r6
 8000802:	4299      	cmp	r1, r3
 8000804:	d90a      	bls.n	800081c <__udivmoddi4+0x64>
 8000806:	eb1c 0303 	adds.w	r3, ip, r3
 800080a:	f104 30ff 	add.w	r0, r4, #4294967295
 800080e:	f080 8112 	bcs.w	8000a36 <__udivmoddi4+0x27e>
 8000812:	4299      	cmp	r1, r3
 8000814:	f240 810f 	bls.w	8000a36 <__udivmoddi4+0x27e>
 8000818:	3c02      	subs	r4, #2
 800081a:	4463      	add	r3, ip
 800081c:	1a59      	subs	r1, r3, r1
 800081e:	fa1f f38e 	uxth.w	r3, lr
 8000822:	fbb1 f0f7 	udiv	r0, r1, r7
 8000826:	fb07 1110 	mls	r1, r7, r0, r1
 800082a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800082e:	fb00 f606 	mul.w	r6, r0, r6
 8000832:	429e      	cmp	r6, r3
 8000834:	d90a      	bls.n	800084c <__udivmoddi4+0x94>
 8000836:	eb1c 0303 	adds.w	r3, ip, r3
 800083a:	f100 31ff 	add.w	r1, r0, #4294967295
 800083e:	f080 80fc 	bcs.w	8000a3a <__udivmoddi4+0x282>
 8000842:	429e      	cmp	r6, r3
 8000844:	f240 80f9 	bls.w	8000a3a <__udivmoddi4+0x282>
 8000848:	4463      	add	r3, ip
 800084a:	3802      	subs	r0, #2
 800084c:	1b9b      	subs	r3, r3, r6
 800084e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000852:	2100      	movs	r1, #0
 8000854:	b11d      	cbz	r5, 800085e <__udivmoddi4+0xa6>
 8000856:	40d3      	lsrs	r3, r2
 8000858:	2200      	movs	r2, #0
 800085a:	e9c5 3200 	strd	r3, r2, [r5]
 800085e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000862:	428b      	cmp	r3, r1
 8000864:	d905      	bls.n	8000872 <__udivmoddi4+0xba>
 8000866:	b10d      	cbz	r5, 800086c <__udivmoddi4+0xb4>
 8000868:	e9c5 0100 	strd	r0, r1, [r5]
 800086c:	2100      	movs	r1, #0
 800086e:	4608      	mov	r0, r1
 8000870:	e7f5      	b.n	800085e <__udivmoddi4+0xa6>
 8000872:	fab3 f183 	clz	r1, r3
 8000876:	2900      	cmp	r1, #0
 8000878:	d146      	bne.n	8000908 <__udivmoddi4+0x150>
 800087a:	42a3      	cmp	r3, r4
 800087c:	d302      	bcc.n	8000884 <__udivmoddi4+0xcc>
 800087e:	4290      	cmp	r0, r2
 8000880:	f0c0 80f0 	bcc.w	8000a64 <__udivmoddi4+0x2ac>
 8000884:	1a86      	subs	r6, r0, r2
 8000886:	eb64 0303 	sbc.w	r3, r4, r3
 800088a:	2001      	movs	r0, #1
 800088c:	2d00      	cmp	r5, #0
 800088e:	d0e6      	beq.n	800085e <__udivmoddi4+0xa6>
 8000890:	e9c5 6300 	strd	r6, r3, [r5]
 8000894:	e7e3      	b.n	800085e <__udivmoddi4+0xa6>
 8000896:	2a00      	cmp	r2, #0
 8000898:	f040 8090 	bne.w	80009bc <__udivmoddi4+0x204>
 800089c:	eba1 040c 	sub.w	r4, r1, ip
 80008a0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008a4:	fa1f f78c 	uxth.w	r7, ip
 80008a8:	2101      	movs	r1, #1
 80008aa:	fbb4 f6f8 	udiv	r6, r4, r8
 80008ae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008b2:	fb08 4416 	mls	r4, r8, r6, r4
 80008b6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008ba:	fb07 f006 	mul.w	r0, r7, r6
 80008be:	4298      	cmp	r0, r3
 80008c0:	d908      	bls.n	80008d4 <__udivmoddi4+0x11c>
 80008c2:	eb1c 0303 	adds.w	r3, ip, r3
 80008c6:	f106 34ff 	add.w	r4, r6, #4294967295
 80008ca:	d202      	bcs.n	80008d2 <__udivmoddi4+0x11a>
 80008cc:	4298      	cmp	r0, r3
 80008ce:	f200 80cd 	bhi.w	8000a6c <__udivmoddi4+0x2b4>
 80008d2:	4626      	mov	r6, r4
 80008d4:	1a1c      	subs	r4, r3, r0
 80008d6:	fa1f f38e 	uxth.w	r3, lr
 80008da:	fbb4 f0f8 	udiv	r0, r4, r8
 80008de:	fb08 4410 	mls	r4, r8, r0, r4
 80008e2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008e6:	fb00 f707 	mul.w	r7, r0, r7
 80008ea:	429f      	cmp	r7, r3
 80008ec:	d908      	bls.n	8000900 <__udivmoddi4+0x148>
 80008ee:	eb1c 0303 	adds.w	r3, ip, r3
 80008f2:	f100 34ff 	add.w	r4, r0, #4294967295
 80008f6:	d202      	bcs.n	80008fe <__udivmoddi4+0x146>
 80008f8:	429f      	cmp	r7, r3
 80008fa:	f200 80b0 	bhi.w	8000a5e <__udivmoddi4+0x2a6>
 80008fe:	4620      	mov	r0, r4
 8000900:	1bdb      	subs	r3, r3, r7
 8000902:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000906:	e7a5      	b.n	8000854 <__udivmoddi4+0x9c>
 8000908:	f1c1 0620 	rsb	r6, r1, #32
 800090c:	408b      	lsls	r3, r1
 800090e:	fa22 f706 	lsr.w	r7, r2, r6
 8000912:	431f      	orrs	r7, r3
 8000914:	fa20 fc06 	lsr.w	ip, r0, r6
 8000918:	fa04 f301 	lsl.w	r3, r4, r1
 800091c:	ea43 030c 	orr.w	r3, r3, ip
 8000920:	40f4      	lsrs	r4, r6
 8000922:	fa00 f801 	lsl.w	r8, r0, r1
 8000926:	0c38      	lsrs	r0, r7, #16
 8000928:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800092c:	fbb4 fef0 	udiv	lr, r4, r0
 8000930:	fa1f fc87 	uxth.w	ip, r7
 8000934:	fb00 441e 	mls	r4, r0, lr, r4
 8000938:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800093c:	fb0e f90c 	mul.w	r9, lr, ip
 8000940:	45a1      	cmp	r9, r4
 8000942:	fa02 f201 	lsl.w	r2, r2, r1
 8000946:	d90a      	bls.n	800095e <__udivmoddi4+0x1a6>
 8000948:	193c      	adds	r4, r7, r4
 800094a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800094e:	f080 8084 	bcs.w	8000a5a <__udivmoddi4+0x2a2>
 8000952:	45a1      	cmp	r9, r4
 8000954:	f240 8081 	bls.w	8000a5a <__udivmoddi4+0x2a2>
 8000958:	f1ae 0e02 	sub.w	lr, lr, #2
 800095c:	443c      	add	r4, r7
 800095e:	eba4 0409 	sub.w	r4, r4, r9
 8000962:	fa1f f983 	uxth.w	r9, r3
 8000966:	fbb4 f3f0 	udiv	r3, r4, r0
 800096a:	fb00 4413 	mls	r4, r0, r3, r4
 800096e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000972:	fb03 fc0c 	mul.w	ip, r3, ip
 8000976:	45a4      	cmp	ip, r4
 8000978:	d907      	bls.n	800098a <__udivmoddi4+0x1d2>
 800097a:	193c      	adds	r4, r7, r4
 800097c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000980:	d267      	bcs.n	8000a52 <__udivmoddi4+0x29a>
 8000982:	45a4      	cmp	ip, r4
 8000984:	d965      	bls.n	8000a52 <__udivmoddi4+0x29a>
 8000986:	3b02      	subs	r3, #2
 8000988:	443c      	add	r4, r7
 800098a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800098e:	fba0 9302 	umull	r9, r3, r0, r2
 8000992:	eba4 040c 	sub.w	r4, r4, ip
 8000996:	429c      	cmp	r4, r3
 8000998:	46ce      	mov	lr, r9
 800099a:	469c      	mov	ip, r3
 800099c:	d351      	bcc.n	8000a42 <__udivmoddi4+0x28a>
 800099e:	d04e      	beq.n	8000a3e <__udivmoddi4+0x286>
 80009a0:	b155      	cbz	r5, 80009b8 <__udivmoddi4+0x200>
 80009a2:	ebb8 030e 	subs.w	r3, r8, lr
 80009a6:	eb64 040c 	sbc.w	r4, r4, ip
 80009aa:	fa04 f606 	lsl.w	r6, r4, r6
 80009ae:	40cb      	lsrs	r3, r1
 80009b0:	431e      	orrs	r6, r3
 80009b2:	40cc      	lsrs	r4, r1
 80009b4:	e9c5 6400 	strd	r6, r4, [r5]
 80009b8:	2100      	movs	r1, #0
 80009ba:	e750      	b.n	800085e <__udivmoddi4+0xa6>
 80009bc:	f1c2 0320 	rsb	r3, r2, #32
 80009c0:	fa20 f103 	lsr.w	r1, r0, r3
 80009c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80009c8:	fa24 f303 	lsr.w	r3, r4, r3
 80009cc:	4094      	lsls	r4, r2
 80009ce:	430c      	orrs	r4, r1
 80009d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009d4:	fa00 fe02 	lsl.w	lr, r0, r2
 80009d8:	fa1f f78c 	uxth.w	r7, ip
 80009dc:	fbb3 f0f8 	udiv	r0, r3, r8
 80009e0:	fb08 3110 	mls	r1, r8, r0, r3
 80009e4:	0c23      	lsrs	r3, r4, #16
 80009e6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009ea:	fb00 f107 	mul.w	r1, r0, r7
 80009ee:	4299      	cmp	r1, r3
 80009f0:	d908      	bls.n	8000a04 <__udivmoddi4+0x24c>
 80009f2:	eb1c 0303 	adds.w	r3, ip, r3
 80009f6:	f100 36ff 	add.w	r6, r0, #4294967295
 80009fa:	d22c      	bcs.n	8000a56 <__udivmoddi4+0x29e>
 80009fc:	4299      	cmp	r1, r3
 80009fe:	d92a      	bls.n	8000a56 <__udivmoddi4+0x29e>
 8000a00:	3802      	subs	r0, #2
 8000a02:	4463      	add	r3, ip
 8000a04:	1a5b      	subs	r3, r3, r1
 8000a06:	b2a4      	uxth	r4, r4
 8000a08:	fbb3 f1f8 	udiv	r1, r3, r8
 8000a0c:	fb08 3311 	mls	r3, r8, r1, r3
 8000a10:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a14:	fb01 f307 	mul.w	r3, r1, r7
 8000a18:	42a3      	cmp	r3, r4
 8000a1a:	d908      	bls.n	8000a2e <__udivmoddi4+0x276>
 8000a1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a20:	f101 36ff 	add.w	r6, r1, #4294967295
 8000a24:	d213      	bcs.n	8000a4e <__udivmoddi4+0x296>
 8000a26:	42a3      	cmp	r3, r4
 8000a28:	d911      	bls.n	8000a4e <__udivmoddi4+0x296>
 8000a2a:	3902      	subs	r1, #2
 8000a2c:	4464      	add	r4, ip
 8000a2e:	1ae4      	subs	r4, r4, r3
 8000a30:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000a34:	e739      	b.n	80008aa <__udivmoddi4+0xf2>
 8000a36:	4604      	mov	r4, r0
 8000a38:	e6f0      	b.n	800081c <__udivmoddi4+0x64>
 8000a3a:	4608      	mov	r0, r1
 8000a3c:	e706      	b.n	800084c <__udivmoddi4+0x94>
 8000a3e:	45c8      	cmp	r8, r9
 8000a40:	d2ae      	bcs.n	80009a0 <__udivmoddi4+0x1e8>
 8000a42:	ebb9 0e02 	subs.w	lr, r9, r2
 8000a46:	eb63 0c07 	sbc.w	ip, r3, r7
 8000a4a:	3801      	subs	r0, #1
 8000a4c:	e7a8      	b.n	80009a0 <__udivmoddi4+0x1e8>
 8000a4e:	4631      	mov	r1, r6
 8000a50:	e7ed      	b.n	8000a2e <__udivmoddi4+0x276>
 8000a52:	4603      	mov	r3, r0
 8000a54:	e799      	b.n	800098a <__udivmoddi4+0x1d2>
 8000a56:	4630      	mov	r0, r6
 8000a58:	e7d4      	b.n	8000a04 <__udivmoddi4+0x24c>
 8000a5a:	46d6      	mov	lr, sl
 8000a5c:	e77f      	b.n	800095e <__udivmoddi4+0x1a6>
 8000a5e:	4463      	add	r3, ip
 8000a60:	3802      	subs	r0, #2
 8000a62:	e74d      	b.n	8000900 <__udivmoddi4+0x148>
 8000a64:	4606      	mov	r6, r0
 8000a66:	4623      	mov	r3, r4
 8000a68:	4608      	mov	r0, r1
 8000a6a:	e70f      	b.n	800088c <__udivmoddi4+0xd4>
 8000a6c:	3e02      	subs	r6, #2
 8000a6e:	4463      	add	r3, ip
 8000a70:	e730      	b.n	80008d4 <__udivmoddi4+0x11c>
 8000a72:	bf00      	nop

08000a74 <__aeabi_idiv0>:
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <PreSleepProcessing>:

void MX_FREERTOS_Init(void); /* (MISRA C 2004 rule 8.1) */

/* USER CODE BEGIN PREPOSTSLEEP */
__weak void PreSleepProcessing(uint32_t ulExpectedIdleTime)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b083      	sub	sp, #12
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
/* place for user code */
}
 8000a80:	bf00      	nop
 8000a82:	370c      	adds	r7, #12
 8000a84:	46bd      	mov	sp, r7
 8000a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8a:	4770      	bx	lr

08000a8c <PostSleepProcessing>:

__weak void PostSleepProcessing(uint32_t ulExpectedIdleTime)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b083      	sub	sp, #12
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
/* place for user code */
}
 8000a94:	bf00      	nop
 8000a96:	370c      	adds	r7, #12
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9e:	4770      	bx	lr

08000aa0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000aa4:	4a04      	ldr	r2, [pc, #16]	@ (8000ab8 <MX_FREERTOS_Init+0x18>)
 8000aa6:	2100      	movs	r1, #0
 8000aa8:	4804      	ldr	r0, [pc, #16]	@ (8000abc <MX_FREERTOS_Init+0x1c>)
 8000aaa:	f005 fb11 	bl	80060d0 <osThreadNew>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	4a03      	ldr	r2, [pc, #12]	@ (8000ac0 <MX_FREERTOS_Init+0x20>)
 8000ab2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000ab4:	bf00      	nop
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	0800d5d4 	.word	0x0800d5d4
 8000abc:	08000ac5 	.word	0x08000ac5
 8000ac0:	240001f8 	.word	0x240001f8

08000ac4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000acc:	2001      	movs	r0, #1
 8000ace:	f005 fb91 	bl	80061f4 <osDelay>
 8000ad2:	e7fb      	b.n	8000acc <StartDefaultTask+0x8>

08000ad4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b088      	sub	sp, #32
 8000ad8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ada:	f107 030c 	add.w	r3, r7, #12
 8000ade:	2200      	movs	r2, #0
 8000ae0:	601a      	str	r2, [r3, #0]
 8000ae2:	605a      	str	r2, [r3, #4]
 8000ae4:	609a      	str	r2, [r3, #8]
 8000ae6:	60da      	str	r2, [r3, #12]
 8000ae8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aea:	4b1b      	ldr	r3, [pc, #108]	@ (8000b58 <MX_GPIO_Init+0x84>)
 8000aec:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000af0:	4a19      	ldr	r2, [pc, #100]	@ (8000b58 <MX_GPIO_Init+0x84>)
 8000af2:	f043 0302 	orr.w	r3, r3, #2
 8000af6:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000afa:	4b17      	ldr	r3, [pc, #92]	@ (8000b58 <MX_GPIO_Init+0x84>)
 8000afc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000b00:	f003 0302 	and.w	r3, r3, #2
 8000b04:	60bb      	str	r3, [r7, #8]
 8000b06:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b08:	4b13      	ldr	r3, [pc, #76]	@ (8000b58 <MX_GPIO_Init+0x84>)
 8000b0a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000b0e:	4a12      	ldr	r2, [pc, #72]	@ (8000b58 <MX_GPIO_Init+0x84>)
 8000b10:	f043 0301 	orr.w	r3, r3, #1
 8000b14:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000b18:	4b0f      	ldr	r3, [pc, #60]	@ (8000b58 <MX_GPIO_Init+0x84>)
 8000b1a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000b1e:	f003 0301 	and.w	r3, r3, #1
 8000b22:	607b      	str	r3, [r7, #4]
 8000b24:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = esp32i2cInterruptReqest_Pin;
 8000b26:	2320      	movs	r3, #32
 8000b28:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000b2a:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8000b2e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b30:	2300      	movs	r3, #0
 8000b32:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(esp32i2cInterruptReqest_GPIO_Port, &GPIO_InitStruct);
 8000b34:	f107 030c 	add.w	r3, r7, #12
 8000b38:	4619      	mov	r1, r3
 8000b3a:	4808      	ldr	r0, [pc, #32]	@ (8000b5c <MX_GPIO_Init+0x88>)
 8000b3c:	f000 fd02 	bl	8001544 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000b40:	2200      	movs	r2, #0
 8000b42:	2105      	movs	r1, #5
 8000b44:	2017      	movs	r0, #23
 8000b46:	f000 fcd5 	bl	80014f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000b4a:	2017      	movs	r0, #23
 8000b4c:	f000 fcec 	bl	8001528 <HAL_NVIC_EnableIRQ>

}
 8000b50:	bf00      	nop
 8000b52:	3720      	adds	r7, #32
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	58024400 	.word	0x58024400
 8000b5c:	58020400 	.word	0x58020400

08000b60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b64:	f000 fbb2 	bl	80012cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b68:	f000 f80e 	bl	8000b88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b6c:	f7ff ffb2 	bl	8000ad4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000b70:	f000 facc 	bl	800110c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  //printf("Radio main firmware version: %.2f\r\n", FW_VERSION);
  initTaskFunctions();
 8000b74:	f000 fa94 	bl	80010a0 <initTaskFunctions>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000b78:	f005 fa60 	bl	800603c <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000b7c:	f7ff ff90 	bl	8000aa0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000b80:	f005 fa80 	bl	8006084 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b84:	bf00      	nop
 8000b86:	e7fd      	b.n	8000b84 <main+0x24>

08000b88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b09c      	sub	sp, #112	@ 0x70
 8000b8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b8e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b92:	224c      	movs	r2, #76	@ 0x4c
 8000b94:	2100      	movs	r1, #0
 8000b96:	4618      	mov	r0, r3
 8000b98:	f009 fa08 	bl	8009fac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b9c:	1d3b      	adds	r3, r7, #4
 8000b9e:	2220      	movs	r2, #32
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f009 fa02 	bl	8009fac <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000ba8:	4b30      	ldr	r3, [pc, #192]	@ (8000c6c <SystemClock_Config+0xe4>)
 8000baa:	f04f 32ff 	mov.w	r2, #4294967295
 8000bae:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000bb2:	2002      	movs	r0, #2
 8000bb4:	f000 fea8 	bl	8001908 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000bb8:	2300      	movs	r3, #0
 8000bba:	603b      	str	r3, [r7, #0]
 8000bbc:	4b2c      	ldr	r3, [pc, #176]	@ (8000c70 <SystemClock_Config+0xe8>)
 8000bbe:	699b      	ldr	r3, [r3, #24]
 8000bc0:	4a2b      	ldr	r2, [pc, #172]	@ (8000c70 <SystemClock_Config+0xe8>)
 8000bc2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000bc6:	6193      	str	r3, [r2, #24]
 8000bc8:	4b29      	ldr	r3, [pc, #164]	@ (8000c70 <SystemClock_Config+0xe8>)
 8000bca:	699b      	ldr	r3, [r3, #24]
 8000bcc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000bd0:	603b      	str	r3, [r7, #0]
 8000bd2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000bd4:	bf00      	nop
 8000bd6:	4b26      	ldr	r3, [pc, #152]	@ (8000c70 <SystemClock_Config+0xe8>)
 8000bd8:	699b      	ldr	r3, [r3, #24]
 8000bda:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000bde:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000be2:	d1f8      	bne.n	8000bd6 <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000be4:	2302      	movs	r3, #2
 8000be6:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000be8:	2301      	movs	r3, #1
 8000bea:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8000bec:	2340      	movs	r3, #64	@ 0x40
 8000bee:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bf0:	2302      	movs	r3, #2
 8000bf2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000bf8:	2304      	movs	r3, #4
 8000bfa:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 35;
 8000bfc:	2323      	movs	r3, #35	@ 0x23
 8000bfe:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000c00:	2302      	movs	r3, #2
 8000c02:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000c04:	2302      	movs	r3, #2
 8000c06:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c08:	2302      	movs	r3, #2
 8000c0a:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000c0c:	230c      	movs	r3, #12
 8000c0e:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000c10:	2300      	movs	r3, #0
 8000c12:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000c14:	2300      	movs	r3, #0
 8000c16:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c18:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f000 fead 	bl	800197c <HAL_RCC_OscConfig>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d001      	beq.n	8000c2c <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000c28:	f000 f836 	bl	8000c98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c2c:	233f      	movs	r3, #63	@ 0x3f
 8000c2e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c30:	2303      	movs	r3, #3
 8000c32:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000c34:	2300      	movs	r3, #0
 8000c36:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000c3c:	2340      	movs	r3, #64	@ 0x40
 8000c3e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000c40:	2340      	movs	r3, #64	@ 0x40
 8000c42:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000c44:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c48:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000c4a:	2340      	movs	r3, #64	@ 0x40
 8000c4c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000c4e:	1d3b      	adds	r3, r7, #4
 8000c50:	2106      	movs	r1, #6
 8000c52:	4618      	mov	r0, r3
 8000c54:	f001 fac4 	bl	80021e0 <HAL_RCC_ClockConfig>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <SystemClock_Config+0xda>
  {
    Error_Handler();
 8000c5e:	f000 f81b 	bl	8000c98 <Error_Handler>
  }
}
 8000c62:	bf00      	nop
 8000c64:	3770      	adds	r7, #112	@ 0x70
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	58024400 	.word	0x58024400
 8000c70:	58024800 	.word	0x58024800

08000c74 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a04      	ldr	r2, [pc, #16]	@ (8000c94 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c82:	4293      	cmp	r3, r2
 8000c84:	d101      	bne.n	8000c8a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c86:	f000 fb5d 	bl	8001344 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c8a:	bf00      	nop
 8000c8c:	3708      	adds	r7, #8
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	40010000 	.word	0x40010000

08000c98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c9c:	b672      	cpsid	i
}
 8000c9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ca0:	bf00      	nop
 8000ca2:	e7fd      	b.n	8000ca0 <Error_Handler+0x8>

08000ca4 <__io_putchar>:

#include <printfRedirect.h>


//printf to uart redirection
void __io_putchar(uint8_t ch) {
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	4603      	mov	r3, r0
 8000cac:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart1, &ch, 1, 0xffff);
 8000cae:	1df9      	adds	r1, r7, #7
 8000cb0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	4803      	ldr	r0, [pc, #12]	@ (8000cc4 <__io_putchar+0x20>)
 8000cb8:	f003 ff5e 	bl	8004b78 <HAL_UART_Transmit>
}
 8000cbc:	bf00      	nop
 8000cbe:	3708      	adds	r7, #8
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	2400024c 	.word	0x2400024c

08000cc8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cce:	4b0c      	ldr	r3, [pc, #48]	@ (8000d00 <HAL_MspInit+0x38>)
 8000cd0:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000cd4:	4a0a      	ldr	r2, [pc, #40]	@ (8000d00 <HAL_MspInit+0x38>)
 8000cd6:	f043 0302 	orr.w	r3, r3, #2
 8000cda:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8000cde:	4b08      	ldr	r3, [pc, #32]	@ (8000d00 <HAL_MspInit+0x38>)
 8000ce0:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000ce4:	f003 0302 	and.w	r3, r3, #2
 8000ce8:	607b      	str	r3, [r7, #4]
 8000cea:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000cec:	2200      	movs	r2, #0
 8000cee:	210f      	movs	r1, #15
 8000cf0:	f06f 0001 	mvn.w	r0, #1
 8000cf4:	f000 fbfe 	bl	80014f4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cf8:	bf00      	nop
 8000cfa:	3708      	adds	r7, #8
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	58024400 	.word	0x58024400

08000d04 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b08e      	sub	sp, #56	@ 0x38
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	2b0f      	cmp	r3, #15
 8000d10:	d844      	bhi.n	8000d9c <HAL_InitTick+0x98>
  {
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0U);
 8000d12:	2200      	movs	r2, #0
 8000d14:	6879      	ldr	r1, [r7, #4]
 8000d16:	2019      	movs	r0, #25
 8000d18:	f000 fbec 	bl	80014f4 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000d1c:	2019      	movs	r0, #25
 8000d1e:	f000 fc03 	bl	8001528 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8000d22:	4a24      	ldr	r2, [pc, #144]	@ (8000db4 <HAL_InitTick+0xb0>)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000d28:	4b23      	ldr	r3, [pc, #140]	@ (8000db8 <HAL_InitTick+0xb4>)
 8000d2a:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8000d2e:	4a22      	ldr	r2, [pc, #136]	@ (8000db8 <HAL_InitTick+0xb4>)
 8000d30:	f043 0301 	orr.w	r3, r3, #1
 8000d34:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 8000d38:	4b1f      	ldr	r3, [pc, #124]	@ (8000db8 <HAL_InitTick+0xb4>)
 8000d3a:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8000d3e:	f003 0301 	and.w	r3, r3, #1
 8000d42:	60bb      	str	r3, [r7, #8]
 8000d44:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d46:	f107 020c 	add.w	r2, r7, #12
 8000d4a:	f107 0310 	add.w	r3, r7, #16
 8000d4e:	4611      	mov	r1, r2
 8000d50:	4618      	mov	r0, r3
 8000d52:	f001 fdd1 	bl	80028f8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000d56:	f001 fdb9 	bl	80028cc <HAL_RCC_GetPCLK2Freq>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	005b      	lsls	r3, r3, #1
 8000d5e:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000d62:	4a16      	ldr	r2, [pc, #88]	@ (8000dbc <HAL_InitTick+0xb8>)
 8000d64:	fba2 2303 	umull	r2, r3, r2, r3
 8000d68:	0c9b      	lsrs	r3, r3, #18
 8000d6a:	3b01      	subs	r3, #1
 8000d6c:	633b      	str	r3, [r7, #48]	@ 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000d6e:	4b14      	ldr	r3, [pc, #80]	@ (8000dc0 <HAL_InitTick+0xbc>)
 8000d70:	4a14      	ldr	r2, [pc, #80]	@ (8000dc4 <HAL_InitTick+0xc0>)
 8000d72:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000d74:	4b12      	ldr	r3, [pc, #72]	@ (8000dc0 <HAL_InitTick+0xbc>)
 8000d76:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000d7a:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000d7c:	4a10      	ldr	r2, [pc, #64]	@ (8000dc0 <HAL_InitTick+0xbc>)
 8000d7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000d80:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000d82:	4b0f      	ldr	r3, [pc, #60]	@ (8000dc0 <HAL_InitTick+0xbc>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d88:	4b0d      	ldr	r3, [pc, #52]	@ (8000dc0 <HAL_InitTick+0xbc>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000d8e:	480c      	ldr	r0, [pc, #48]	@ (8000dc0 <HAL_InitTick+0xbc>)
 8000d90:	f003 fbd4 	bl	800453c <HAL_TIM_Base_Init>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d107      	bne.n	8000daa <HAL_InitTick+0xa6>
 8000d9a:	e001      	b.n	8000da0 <HAL_InitTick+0x9c>
    return HAL_ERROR;
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	e005      	b.n	8000dac <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000da0:	4807      	ldr	r0, [pc, #28]	@ (8000dc0 <HAL_InitTick+0xbc>)
 8000da2:	f003 fc2d 	bl	8004600 <HAL_TIM_Base_Start_IT>
 8000da6:	4603      	mov	r3, r0
 8000da8:	e000      	b.n	8000dac <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 8000daa:	2301      	movs	r3, #1
}
 8000dac:	4618      	mov	r0, r3
 8000dae:	3738      	adds	r7, #56	@ 0x38
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	24000008 	.word	0x24000008
 8000db8:	58024400 	.word	0x58024400
 8000dbc:	431bde83 	.word	0x431bde83
 8000dc0:	240001fc 	.word	0x240001fc
 8000dc4:	40010000 	.word	0x40010000

08000dc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000dcc:	bf00      	nop
 8000dce:	e7fd      	b.n	8000dcc <NMI_Handler+0x4>

08000dd0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dd4:	bf00      	nop
 8000dd6:	e7fd      	b.n	8000dd4 <HardFault_Handler+0x4>

08000dd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ddc:	bf00      	nop
 8000dde:	e7fd      	b.n	8000ddc <MemManage_Handler+0x4>

08000de0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000de4:	bf00      	nop
 8000de6:	e7fd      	b.n	8000de4 <BusFault_Handler+0x4>

08000de8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dec:	bf00      	nop
 8000dee:	e7fd      	b.n	8000dec <UsageFault_Handler+0x4>

08000df0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000df4:	bf00      	nop
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr

08000dfe <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000dfe:	b580      	push	{r7, lr}
 8000e00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(esp32i2cInterruptReqest_Pin);
 8000e02:	2020      	movs	r0, #32
 8000e04:	f000 fd66 	bl	80018d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000e08:	bf00      	nop
 8000e0a:	bd80      	pop	{r7, pc}

08000e0c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e10:	4802      	ldr	r0, [pc, #8]	@ (8000e1c <TIM1_UP_IRQHandler+0x10>)
 8000e12:	f003 fc6d 	bl	80046f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000e16:	bf00      	nop
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	240001fc 	.word	0x240001fc

08000e20 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  return 1;
 8000e24:	2301      	movs	r3, #1
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr

08000e30 <_kill>:

int _kill(int pid, int sig)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
 8000e38:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000e3a:	f009 f95f 	bl	800a0fc <__errno>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2216      	movs	r2, #22
 8000e42:	601a      	str	r2, [r3, #0]
  return -1;
 8000e44:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	3708      	adds	r7, #8
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}

08000e50 <_exit>:

void _exit (int status)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000e58:	f04f 31ff 	mov.w	r1, #4294967295
 8000e5c:	6878      	ldr	r0, [r7, #4]
 8000e5e:	f7ff ffe7 	bl	8000e30 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000e62:	bf00      	nop
 8000e64:	e7fd      	b.n	8000e62 <_exit+0x12>

08000e66 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e66:	b580      	push	{r7, lr}
 8000e68:	b086      	sub	sp, #24
 8000e6a:	af00      	add	r7, sp, #0
 8000e6c:	60f8      	str	r0, [r7, #12]
 8000e6e:	60b9      	str	r1, [r7, #8]
 8000e70:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e72:	2300      	movs	r3, #0
 8000e74:	617b      	str	r3, [r7, #20]
 8000e76:	e00a      	b.n	8000e8e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000e78:	f3af 8000 	nop.w
 8000e7c:	4601      	mov	r1, r0
 8000e7e:	68bb      	ldr	r3, [r7, #8]
 8000e80:	1c5a      	adds	r2, r3, #1
 8000e82:	60ba      	str	r2, [r7, #8]
 8000e84:	b2ca      	uxtb	r2, r1
 8000e86:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	3301      	adds	r3, #1
 8000e8c:	617b      	str	r3, [r7, #20]
 8000e8e:	697a      	ldr	r2, [r7, #20]
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	429a      	cmp	r2, r3
 8000e94:	dbf0      	blt.n	8000e78 <_read+0x12>
  }

  return len;
 8000e96:	687b      	ldr	r3, [r7, #4]
}
 8000e98:	4618      	mov	r0, r3
 8000e9a:	3718      	adds	r7, #24
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}

08000ea0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b086      	sub	sp, #24
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	60f8      	str	r0, [r7, #12]
 8000ea8:	60b9      	str	r1, [r7, #8]
 8000eaa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eac:	2300      	movs	r3, #0
 8000eae:	617b      	str	r3, [r7, #20]
 8000eb0:	e009      	b.n	8000ec6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000eb2:	68bb      	ldr	r3, [r7, #8]
 8000eb4:	1c5a      	adds	r2, r3, #1
 8000eb6:	60ba      	str	r2, [r7, #8]
 8000eb8:	781b      	ldrb	r3, [r3, #0]
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f7ff fef2 	bl	8000ca4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	3301      	adds	r3, #1
 8000ec4:	617b      	str	r3, [r7, #20]
 8000ec6:	697a      	ldr	r2, [r7, #20]
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	429a      	cmp	r2, r3
 8000ecc:	dbf1      	blt.n	8000eb2 <_write+0x12>
  }
  return len;
 8000ece:	687b      	ldr	r3, [r7, #4]
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	3718      	adds	r7, #24
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}

08000ed8 <_close>:

int _close(int file)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b083      	sub	sp, #12
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ee0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	370c      	adds	r7, #12
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr

08000ef0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b083      	sub	sp, #12
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
 8000ef8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000f00:	605a      	str	r2, [r3, #4]
  return 0;
 8000f02:	2300      	movs	r3, #0
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	370c      	adds	r7, #12
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr

08000f10 <_isatty>:

int _isatty(int file)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b083      	sub	sp, #12
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000f18:	2301      	movs	r3, #1
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	370c      	adds	r7, #12
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr

08000f26 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f26:	b480      	push	{r7}
 8000f28:	b085      	sub	sp, #20
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	60f8      	str	r0, [r7, #12]
 8000f2e:	60b9      	str	r1, [r7, #8]
 8000f30:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000f32:	2300      	movs	r3, #0
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	3714      	adds	r7, #20
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr

08000f40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b086      	sub	sp, #24
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f48:	4a14      	ldr	r2, [pc, #80]	@ (8000f9c <_sbrk+0x5c>)
 8000f4a:	4b15      	ldr	r3, [pc, #84]	@ (8000fa0 <_sbrk+0x60>)
 8000f4c:	1ad3      	subs	r3, r2, r3
 8000f4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f54:	4b13      	ldr	r3, [pc, #76]	@ (8000fa4 <_sbrk+0x64>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d102      	bne.n	8000f62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f5c:	4b11      	ldr	r3, [pc, #68]	@ (8000fa4 <_sbrk+0x64>)
 8000f5e:	4a12      	ldr	r2, [pc, #72]	@ (8000fa8 <_sbrk+0x68>)
 8000f60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f62:	4b10      	ldr	r3, [pc, #64]	@ (8000fa4 <_sbrk+0x64>)
 8000f64:	681a      	ldr	r2, [r3, #0]
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	4413      	add	r3, r2
 8000f6a:	693a      	ldr	r2, [r7, #16]
 8000f6c:	429a      	cmp	r2, r3
 8000f6e:	d207      	bcs.n	8000f80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f70:	f009 f8c4 	bl	800a0fc <__errno>
 8000f74:	4603      	mov	r3, r0
 8000f76:	220c      	movs	r2, #12
 8000f78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f7a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f7e:	e009      	b.n	8000f94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f80:	4b08      	ldr	r3, [pc, #32]	@ (8000fa4 <_sbrk+0x64>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f86:	4b07      	ldr	r3, [pc, #28]	@ (8000fa4 <_sbrk+0x64>)
 8000f88:	681a      	ldr	r2, [r3, #0]
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	4413      	add	r3, r2
 8000f8e:	4a05      	ldr	r2, [pc, #20]	@ (8000fa4 <_sbrk+0x64>)
 8000f90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f92:	68fb      	ldr	r3, [r7, #12]
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	3718      	adds	r7, #24
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	24100000 	.word	0x24100000
 8000fa0:	00000400 	.word	0x00000400
 8000fa4:	24000248 	.word	0x24000248
 8000fa8:	24004e28 	.word	0x24004e28

08000fac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000fb0:	4b32      	ldr	r3, [pc, #200]	@ (800107c <SystemInit+0xd0>)
 8000fb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000fb6:	4a31      	ldr	r2, [pc, #196]	@ (800107c <SystemInit+0xd0>)
 8000fb8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000fbc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000fc0:	4b2f      	ldr	r3, [pc, #188]	@ (8001080 <SystemInit+0xd4>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f003 030f 	and.w	r3, r3, #15
 8000fc8:	2b02      	cmp	r3, #2
 8000fca:	d807      	bhi.n	8000fdc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000fcc:	4b2c      	ldr	r3, [pc, #176]	@ (8001080 <SystemInit+0xd4>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f023 030f 	bic.w	r3, r3, #15
 8000fd4:	4a2a      	ldr	r2, [pc, #168]	@ (8001080 <SystemInit+0xd4>)
 8000fd6:	f043 0303 	orr.w	r3, r3, #3
 8000fda:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000fdc:	4b29      	ldr	r3, [pc, #164]	@ (8001084 <SystemInit+0xd8>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a28      	ldr	r2, [pc, #160]	@ (8001084 <SystemInit+0xd8>)
 8000fe2:	f043 0301 	orr.w	r3, r3, #1
 8000fe6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000fe8:	4b26      	ldr	r3, [pc, #152]	@ (8001084 <SystemInit+0xd8>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000fee:	4b25      	ldr	r3, [pc, #148]	@ (8001084 <SystemInit+0xd8>)
 8000ff0:	681a      	ldr	r2, [r3, #0]
 8000ff2:	4924      	ldr	r1, [pc, #144]	@ (8001084 <SystemInit+0xd8>)
 8000ff4:	4b24      	ldr	r3, [pc, #144]	@ (8001088 <SystemInit+0xdc>)
 8000ff6:	4013      	ands	r3, r2
 8000ff8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ffa:	4b21      	ldr	r3, [pc, #132]	@ (8001080 <SystemInit+0xd4>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f003 030c 	and.w	r3, r3, #12
 8001002:	2b00      	cmp	r3, #0
 8001004:	d007      	beq.n	8001016 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001006:	4b1e      	ldr	r3, [pc, #120]	@ (8001080 <SystemInit+0xd4>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f023 030f 	bic.w	r3, r3, #15
 800100e:	4a1c      	ldr	r2, [pc, #112]	@ (8001080 <SystemInit+0xd4>)
 8001010:	f043 0303 	orr.w	r3, r3, #3
 8001014:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8001016:	4b1b      	ldr	r3, [pc, #108]	@ (8001084 <SystemInit+0xd8>)
 8001018:	2200      	movs	r2, #0
 800101a:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 800101c:	4b19      	ldr	r3, [pc, #100]	@ (8001084 <SystemInit+0xd8>)
 800101e:	2200      	movs	r2, #0
 8001020:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8001022:	4b18      	ldr	r3, [pc, #96]	@ (8001084 <SystemInit+0xd8>)
 8001024:	2200      	movs	r2, #0
 8001026:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001028:	4b16      	ldr	r3, [pc, #88]	@ (8001084 <SystemInit+0xd8>)
 800102a:	4a18      	ldr	r2, [pc, #96]	@ (800108c <SystemInit+0xe0>)
 800102c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800102e:	4b15      	ldr	r3, [pc, #84]	@ (8001084 <SystemInit+0xd8>)
 8001030:	4a17      	ldr	r2, [pc, #92]	@ (8001090 <SystemInit+0xe4>)
 8001032:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001034:	4b13      	ldr	r3, [pc, #76]	@ (8001084 <SystemInit+0xd8>)
 8001036:	4a17      	ldr	r2, [pc, #92]	@ (8001094 <SystemInit+0xe8>)
 8001038:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800103a:	4b12      	ldr	r3, [pc, #72]	@ (8001084 <SystemInit+0xd8>)
 800103c:	2200      	movs	r2, #0
 800103e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001040:	4b10      	ldr	r3, [pc, #64]	@ (8001084 <SystemInit+0xd8>)
 8001042:	4a14      	ldr	r2, [pc, #80]	@ (8001094 <SystemInit+0xe8>)
 8001044:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001046:	4b0f      	ldr	r3, [pc, #60]	@ (8001084 <SystemInit+0xd8>)
 8001048:	2200      	movs	r2, #0
 800104a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800104c:	4b0d      	ldr	r3, [pc, #52]	@ (8001084 <SystemInit+0xd8>)
 800104e:	4a11      	ldr	r2, [pc, #68]	@ (8001094 <SystemInit+0xe8>)
 8001050:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001052:	4b0c      	ldr	r3, [pc, #48]	@ (8001084 <SystemInit+0xd8>)
 8001054:	2200      	movs	r2, #0
 8001056:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001058:	4b0a      	ldr	r3, [pc, #40]	@ (8001084 <SystemInit+0xd8>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a09      	ldr	r2, [pc, #36]	@ (8001084 <SystemInit+0xd8>)
 800105e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001062:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001064:	4b07      	ldr	r3, [pc, #28]	@ (8001084 <SystemInit+0xd8>)
 8001066:	2200      	movs	r2, #0
 8001068:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800106a:	4b0b      	ldr	r3, [pc, #44]	@ (8001098 <SystemInit+0xec>)
 800106c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001070:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001072:	bf00      	nop
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr
 800107c:	e000ed00 	.word	0xe000ed00
 8001080:	52002000 	.word	0x52002000
 8001084:	58024400 	.word	0x58024400
 8001088:	eaf6ed7f 	.word	0xeaf6ed7f
 800108c:	02020200 	.word	0x02020200
 8001090:	01ff0000 	.word	0x01ff0000
 8001094:	01010280 	.word	0x01010280
 8001098:	52004000 	.word	0x52004000
 800109c:	00000000 	.word	0x00000000

080010a0 <initTaskFunctions>:
#include "comunicationProtocol.h"
#include "comunicationStructures.h"
#include "comunication_calculate_checksum.h"


void initTaskFunctions(void){
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
	printf("Radio main firmware version: %.2f\r\n", FW_VERSION);
 80010a4:	a305      	add	r3, pc, #20	@ (adr r3, 80010bc <initTaskFunctions+0x1c>)
 80010a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010aa:	4803      	ldr	r0, [pc, #12]	@ (80010b8 <initTaskFunctions+0x18>)
 80010ac:	f008 fe16 	bl	8009cdc <iprintf>

}
 80010b0:	bf00      	nop
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	f3af 8000 	nop.w
 80010b8:	0800d584 	.word	0x0800d584
 80010bc:	9999999a 	.word	0x9999999a
 80010c0:	3fb99999 	.word	0x3fb99999

080010c4 <HAL_GPIO_EXTI_Callback>:


#define I2C_SLAVE_TRANSMIT_REQUEST_STARTED		GPIO_PIN_RESET
#define I2C_SLAVE_TRANSMIT_REQUEST_STOPPED		GPIO_PIN_SET
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	4603      	mov	r3, r0
 80010cc:	80fb      	strh	r3, [r7, #6]
  //static bool esp32i2cRequestState;
	GPIO_PinState state = 	HAL_GPIO_ReadPin(esp32i2cInterruptReqest_GPIO_Port, esp32i2cInterruptReqest_Pin);
 80010ce:	2120      	movs	r1, #32
 80010d0:	480b      	ldr	r0, [pc, #44]	@ (8001100 <HAL_GPIO_EXTI_Callback+0x3c>)
 80010d2:	f000 fbe7 	bl	80018a4 <HAL_GPIO_ReadPin>
 80010d6:	4603      	mov	r3, r0
 80010d8:	73fb      	strb	r3, [r7, #15]
	switch(state){
 80010da:	7bfb      	ldrb	r3, [r7, #15]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d002      	beq.n	80010e6 <HAL_GPIO_EXTI_Callback+0x22>
 80010e0:	2b01      	cmp	r3, #1
 80010e2:	d005      	beq.n	80010f0 <HAL_GPIO_EXTI_Callback+0x2c>
  }

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80010e4:	e007      	b.n	80010f6 <HAL_GPIO_EXTI_Callback+0x32>
  		printf("started\r\n");
 80010e6:	4807      	ldr	r0, [pc, #28]	@ (8001104 <HAL_GPIO_EXTI_Callback+0x40>)
 80010e8:	f008 fe60 	bl	8009dac <puts>
  		break;
 80010ec:	bf00      	nop
}
 80010ee:	e002      	b.n	80010f6 <HAL_GPIO_EXTI_Callback+0x32>
  		printf("halt\r\n");
 80010f0:	4805      	ldr	r0, [pc, #20]	@ (8001108 <HAL_GPIO_EXTI_Callback+0x44>)
 80010f2:	f008 fe5b 	bl	8009dac <puts>
}
 80010f6:	bf00      	nop
 80010f8:	3710      	adds	r7, #16
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	58020400 	.word	0x58020400
 8001104:	0800d5a8 	.word	0x0800d5a8
 8001108:	0800d5b4 	.word	0x0800d5b4

0800110c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001110:	4b22      	ldr	r3, [pc, #136]	@ (800119c <MX_USART1_UART_Init+0x90>)
 8001112:	4a23      	ldr	r2, [pc, #140]	@ (80011a0 <MX_USART1_UART_Init+0x94>)
 8001114:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001116:	4b21      	ldr	r3, [pc, #132]	@ (800119c <MX_USART1_UART_Init+0x90>)
 8001118:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800111c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800111e:	4b1f      	ldr	r3, [pc, #124]	@ (800119c <MX_USART1_UART_Init+0x90>)
 8001120:	2200      	movs	r2, #0
 8001122:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001124:	4b1d      	ldr	r3, [pc, #116]	@ (800119c <MX_USART1_UART_Init+0x90>)
 8001126:	2200      	movs	r2, #0
 8001128:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800112a:	4b1c      	ldr	r3, [pc, #112]	@ (800119c <MX_USART1_UART_Init+0x90>)
 800112c:	2200      	movs	r2, #0
 800112e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001130:	4b1a      	ldr	r3, [pc, #104]	@ (800119c <MX_USART1_UART_Init+0x90>)
 8001132:	220c      	movs	r2, #12
 8001134:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001136:	4b19      	ldr	r3, [pc, #100]	@ (800119c <MX_USART1_UART_Init+0x90>)
 8001138:	2200      	movs	r2, #0
 800113a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800113c:	4b17      	ldr	r3, [pc, #92]	@ (800119c <MX_USART1_UART_Init+0x90>)
 800113e:	2200      	movs	r2, #0
 8001140:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001142:	4b16      	ldr	r3, [pc, #88]	@ (800119c <MX_USART1_UART_Init+0x90>)
 8001144:	2200      	movs	r2, #0
 8001146:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001148:	4b14      	ldr	r3, [pc, #80]	@ (800119c <MX_USART1_UART_Init+0x90>)
 800114a:	2200      	movs	r2, #0
 800114c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800114e:	4b13      	ldr	r3, [pc, #76]	@ (800119c <MX_USART1_UART_Init+0x90>)
 8001150:	2200      	movs	r2, #0
 8001152:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001154:	4811      	ldr	r0, [pc, #68]	@ (800119c <MX_USART1_UART_Init+0x90>)
 8001156:	f003 fcbf 	bl	8004ad8 <HAL_UART_Init>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001160:	f7ff fd9a 	bl	8000c98 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001164:	2100      	movs	r1, #0
 8001166:	480d      	ldr	r0, [pc, #52]	@ (800119c <MX_USART1_UART_Init+0x90>)
 8001168:	f004 fe59 	bl	8005e1e <HAL_UARTEx_SetTxFifoThreshold>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001172:	f7ff fd91 	bl	8000c98 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001176:	2100      	movs	r1, #0
 8001178:	4808      	ldr	r0, [pc, #32]	@ (800119c <MX_USART1_UART_Init+0x90>)
 800117a:	f004 fe8e 	bl	8005e9a <HAL_UARTEx_SetRxFifoThreshold>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001184:	f7ff fd88 	bl	8000c98 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001188:	4804      	ldr	r0, [pc, #16]	@ (800119c <MX_USART1_UART_Init+0x90>)
 800118a:	f004 fe0f 	bl	8005dac <HAL_UARTEx_DisableFifoMode>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001194:	f7ff fd80 	bl	8000c98 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001198:	bf00      	nop
 800119a:	bd80      	pop	{r7, pc}
 800119c:	2400024c 	.word	0x2400024c
 80011a0:	40011000 	.word	0x40011000

080011a4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b0ba      	sub	sp, #232	@ 0xe8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ac:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80011b0:	2200      	movs	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]
 80011b4:	605a      	str	r2, [r3, #4]
 80011b6:	609a      	str	r2, [r3, #8]
 80011b8:	60da      	str	r2, [r3, #12]
 80011ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011bc:	f107 0310 	add.w	r3, r7, #16
 80011c0:	22c0      	movs	r2, #192	@ 0xc0
 80011c2:	2100      	movs	r1, #0
 80011c4:	4618      	mov	r0, r3
 80011c6:	f008 fef1 	bl	8009fac <memset>
  if(uartHandle->Instance==USART1)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4a27      	ldr	r2, [pc, #156]	@ (800126c <HAL_UART_MspInit+0xc8>)
 80011d0:	4293      	cmp	r3, r2
 80011d2:	d146      	bne.n	8001262 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80011d4:	f04f 0201 	mov.w	r2, #1
 80011d8:	f04f 0300 	mov.w	r3, #0
 80011dc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 80011e0:	2300      	movs	r3, #0
 80011e2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011e6:	f107 0310 	add.w	r3, r7, #16
 80011ea:	4618      	mov	r0, r3
 80011ec:	f001 fbc6 	bl	800297c <HAL_RCCEx_PeriphCLKConfig>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80011f6:	f7ff fd4f 	bl	8000c98 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80011fa:	4b1d      	ldr	r3, [pc, #116]	@ (8001270 <HAL_UART_MspInit+0xcc>)
 80011fc:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8001200:	4a1b      	ldr	r2, [pc, #108]	@ (8001270 <HAL_UART_MspInit+0xcc>)
 8001202:	f043 0310 	orr.w	r3, r3, #16
 8001206:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 800120a:	4b19      	ldr	r3, [pc, #100]	@ (8001270 <HAL_UART_MspInit+0xcc>)
 800120c:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8001210:	f003 0310 	and.w	r3, r3, #16
 8001214:	60fb      	str	r3, [r7, #12]
 8001216:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001218:	4b15      	ldr	r3, [pc, #84]	@ (8001270 <HAL_UART_MspInit+0xcc>)
 800121a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800121e:	4a14      	ldr	r2, [pc, #80]	@ (8001270 <HAL_UART_MspInit+0xcc>)
 8001220:	f043 0302 	orr.w	r3, r3, #2
 8001224:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001228:	4b11      	ldr	r3, [pc, #68]	@ (8001270 <HAL_UART_MspInit+0xcc>)
 800122a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800122e:	f003 0302 	and.w	r3, r3, #2
 8001232:	60bb      	str	r3, [r7, #8]
 8001234:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = dbg_UART_TX_Pin|dbg_UART_RX_Pin;
 8001236:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800123a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800123e:	2302      	movs	r3, #2
 8001240:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001244:	2300      	movs	r3, #0
 8001246:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800124a:	2300      	movs	r3, #0
 800124c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001250:	2304      	movs	r3, #4
 8001252:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001256:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800125a:	4619      	mov	r1, r3
 800125c:	4805      	ldr	r0, [pc, #20]	@ (8001274 <HAL_UART_MspInit+0xd0>)
 800125e:	f000 f971 	bl	8001544 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001262:	bf00      	nop
 8001264:	37e8      	adds	r7, #232	@ 0xe8
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	40011000 	.word	0x40011000
 8001270:	58024400 	.word	0x58024400
 8001274:	58020400 	.word	0x58020400

08001278 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001278:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80012b0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800127c:	f7ff fe96 	bl	8000fac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001280:	480c      	ldr	r0, [pc, #48]	@ (80012b4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001282:	490d      	ldr	r1, [pc, #52]	@ (80012b8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001284:	4a0d      	ldr	r2, [pc, #52]	@ (80012bc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001286:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001288:	e002      	b.n	8001290 <LoopCopyDataInit>

0800128a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800128a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800128c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800128e:	3304      	adds	r3, #4

08001290 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001290:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001292:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001294:	d3f9      	bcc.n	800128a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001296:	4a0a      	ldr	r2, [pc, #40]	@ (80012c0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001298:	4c0a      	ldr	r4, [pc, #40]	@ (80012c4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800129a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800129c:	e001      	b.n	80012a2 <LoopFillZerobss>

0800129e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800129e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012a0:	3204      	adds	r2, #4

080012a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012a4:	d3fb      	bcc.n	800129e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012a6:	f008 ff2f 	bl	800a108 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012aa:	f7ff fc59 	bl	8000b60 <main>
  bx  lr
 80012ae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80012b0:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 80012b4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80012b8:	240001dc 	.word	0x240001dc
  ldr r2, =_sidata
 80012bc:	0800da70 	.word	0x0800da70
  ldr r2, =_sbss
 80012c0:	240001dc 	.word	0x240001dc
  ldr r4, =_ebss
 80012c4:	24004e24 	.word	0x24004e24

080012c8 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012c8:	e7fe      	b.n	80012c8 <ADC_IRQHandler>
	...

080012cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012d2:	2003      	movs	r0, #3
 80012d4:	f000 f903 	bl	80014de <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80012d8:	f001 f938 	bl	800254c <HAL_RCC_GetSysClockFreq>
 80012dc:	4602      	mov	r2, r0
 80012de:	4b15      	ldr	r3, [pc, #84]	@ (8001334 <HAL_Init+0x68>)
 80012e0:	699b      	ldr	r3, [r3, #24]
 80012e2:	0a1b      	lsrs	r3, r3, #8
 80012e4:	f003 030f 	and.w	r3, r3, #15
 80012e8:	4913      	ldr	r1, [pc, #76]	@ (8001338 <HAL_Init+0x6c>)
 80012ea:	5ccb      	ldrb	r3, [r1, r3]
 80012ec:	f003 031f 	and.w	r3, r3, #31
 80012f0:	fa22 f303 	lsr.w	r3, r2, r3
 80012f4:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80012f6:	4b0f      	ldr	r3, [pc, #60]	@ (8001334 <HAL_Init+0x68>)
 80012f8:	699b      	ldr	r3, [r3, #24]
 80012fa:	f003 030f 	and.w	r3, r3, #15
 80012fe:	4a0e      	ldr	r2, [pc, #56]	@ (8001338 <HAL_Init+0x6c>)
 8001300:	5cd3      	ldrb	r3, [r2, r3]
 8001302:	f003 031f 	and.w	r3, r3, #31
 8001306:	687a      	ldr	r2, [r7, #4]
 8001308:	fa22 f303 	lsr.w	r3, r2, r3
 800130c:	4a0b      	ldr	r2, [pc, #44]	@ (800133c <HAL_Init+0x70>)
 800130e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001310:	4a0b      	ldr	r2, [pc, #44]	@ (8001340 <HAL_Init+0x74>)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001316:	200f      	movs	r0, #15
 8001318:	f7ff fcf4 	bl	8000d04 <HAL_InitTick>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001322:	2301      	movs	r3, #1
 8001324:	e002      	b.n	800132c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001326:	f7ff fccf 	bl	8000cc8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800132a:	2300      	movs	r3, #0
}
 800132c:	4618      	mov	r0, r3
 800132e:	3708      	adds	r7, #8
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	58024400 	.word	0x58024400
 8001338:	0800d5f8 	.word	0x0800d5f8
 800133c:	24000004 	.word	0x24000004
 8001340:	24000000 	.word	0x24000000

08001344 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001348:	4b06      	ldr	r3, [pc, #24]	@ (8001364 <HAL_IncTick+0x20>)
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	461a      	mov	r2, r3
 800134e:	4b06      	ldr	r3, [pc, #24]	@ (8001368 <HAL_IncTick+0x24>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4413      	add	r3, r2
 8001354:	4a04      	ldr	r2, [pc, #16]	@ (8001368 <HAL_IncTick+0x24>)
 8001356:	6013      	str	r3, [r2, #0]
}
 8001358:	bf00      	nop
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	2400000c 	.word	0x2400000c
 8001368:	240002e0 	.word	0x240002e0

0800136c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  return uwTick;
 8001370:	4b03      	ldr	r3, [pc, #12]	@ (8001380 <HAL_GetTick+0x14>)
 8001372:	681b      	ldr	r3, [r3, #0]
}
 8001374:	4618      	mov	r0, r3
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	240002e0 	.word	0x240002e0

08001384 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001384:	b480      	push	{r7}
 8001386:	b085      	sub	sp, #20
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	f003 0307 	and.w	r3, r3, #7
 8001392:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001394:	4b0b      	ldr	r3, [pc, #44]	@ (80013c4 <__NVIC_SetPriorityGrouping+0x40>)
 8001396:	68db      	ldr	r3, [r3, #12]
 8001398:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800139a:	68ba      	ldr	r2, [r7, #8]
 800139c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80013a0:	4013      	ands	r3, r2
 80013a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013a8:	68bb      	ldr	r3, [r7, #8]
 80013aa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80013ac:	4b06      	ldr	r3, [pc, #24]	@ (80013c8 <__NVIC_SetPriorityGrouping+0x44>)
 80013ae:	4313      	orrs	r3, r2
 80013b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013b2:	4a04      	ldr	r2, [pc, #16]	@ (80013c4 <__NVIC_SetPriorityGrouping+0x40>)
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	60d3      	str	r3, [r2, #12]
}
 80013b8:	bf00      	nop
 80013ba:	3714      	adds	r7, #20
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr
 80013c4:	e000ed00 	.word	0xe000ed00
 80013c8:	05fa0000 	.word	0x05fa0000

080013cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013d0:	4b04      	ldr	r3, [pc, #16]	@ (80013e4 <__NVIC_GetPriorityGrouping+0x18>)
 80013d2:	68db      	ldr	r3, [r3, #12]
 80013d4:	0a1b      	lsrs	r3, r3, #8
 80013d6:	f003 0307 	and.w	r3, r3, #7
}
 80013da:	4618      	mov	r0, r3
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr
 80013e4:	e000ed00 	.word	0xe000ed00

080013e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b083      	sub	sp, #12
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	4603      	mov	r3, r0
 80013f0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80013f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	db0b      	blt.n	8001412 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013fa:	88fb      	ldrh	r3, [r7, #6]
 80013fc:	f003 021f 	and.w	r2, r3, #31
 8001400:	4907      	ldr	r1, [pc, #28]	@ (8001420 <__NVIC_EnableIRQ+0x38>)
 8001402:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001406:	095b      	lsrs	r3, r3, #5
 8001408:	2001      	movs	r0, #1
 800140a:	fa00 f202 	lsl.w	r2, r0, r2
 800140e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001412:	bf00      	nop
 8001414:	370c      	adds	r7, #12
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop
 8001420:	e000e100 	.word	0xe000e100

08001424 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001424:	b480      	push	{r7}
 8001426:	b083      	sub	sp, #12
 8001428:	af00      	add	r7, sp, #0
 800142a:	4603      	mov	r3, r0
 800142c:	6039      	str	r1, [r7, #0]
 800142e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001430:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001434:	2b00      	cmp	r3, #0
 8001436:	db0a      	blt.n	800144e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	b2da      	uxtb	r2, r3
 800143c:	490c      	ldr	r1, [pc, #48]	@ (8001470 <__NVIC_SetPriority+0x4c>)
 800143e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001442:	0112      	lsls	r2, r2, #4
 8001444:	b2d2      	uxtb	r2, r2
 8001446:	440b      	add	r3, r1
 8001448:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800144c:	e00a      	b.n	8001464 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	b2da      	uxtb	r2, r3
 8001452:	4908      	ldr	r1, [pc, #32]	@ (8001474 <__NVIC_SetPriority+0x50>)
 8001454:	88fb      	ldrh	r3, [r7, #6]
 8001456:	f003 030f 	and.w	r3, r3, #15
 800145a:	3b04      	subs	r3, #4
 800145c:	0112      	lsls	r2, r2, #4
 800145e:	b2d2      	uxtb	r2, r2
 8001460:	440b      	add	r3, r1
 8001462:	761a      	strb	r2, [r3, #24]
}
 8001464:	bf00      	nop
 8001466:	370c      	adds	r7, #12
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr
 8001470:	e000e100 	.word	0xe000e100
 8001474:	e000ed00 	.word	0xe000ed00

08001478 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001478:	b480      	push	{r7}
 800147a:	b089      	sub	sp, #36	@ 0x24
 800147c:	af00      	add	r7, sp, #0
 800147e:	60f8      	str	r0, [r7, #12]
 8001480:	60b9      	str	r1, [r7, #8]
 8001482:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	f003 0307 	and.w	r3, r3, #7
 800148a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800148c:	69fb      	ldr	r3, [r7, #28]
 800148e:	f1c3 0307 	rsb	r3, r3, #7
 8001492:	2b04      	cmp	r3, #4
 8001494:	bf28      	it	cs
 8001496:	2304      	movcs	r3, #4
 8001498:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	3304      	adds	r3, #4
 800149e:	2b06      	cmp	r3, #6
 80014a0:	d902      	bls.n	80014a8 <NVIC_EncodePriority+0x30>
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	3b03      	subs	r3, #3
 80014a6:	e000      	b.n	80014aa <NVIC_EncodePriority+0x32>
 80014a8:	2300      	movs	r3, #0
 80014aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014ac:	f04f 32ff 	mov.w	r2, #4294967295
 80014b0:	69bb      	ldr	r3, [r7, #24]
 80014b2:	fa02 f303 	lsl.w	r3, r2, r3
 80014b6:	43da      	mvns	r2, r3
 80014b8:	68bb      	ldr	r3, [r7, #8]
 80014ba:	401a      	ands	r2, r3
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014c0:	f04f 31ff 	mov.w	r1, #4294967295
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	fa01 f303 	lsl.w	r3, r1, r3
 80014ca:	43d9      	mvns	r1, r3
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014d0:	4313      	orrs	r3, r2
         );
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	3724      	adds	r7, #36	@ 0x24
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr

080014de <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014de:	b580      	push	{r7, lr}
 80014e0:	b082      	sub	sp, #8
 80014e2:	af00      	add	r7, sp, #0
 80014e4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014e6:	6878      	ldr	r0, [r7, #4]
 80014e8:	f7ff ff4c 	bl	8001384 <__NVIC_SetPriorityGrouping>
}
 80014ec:	bf00      	nop
 80014ee:	3708      	adds	r7, #8
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}

080014f4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b086      	sub	sp, #24
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	4603      	mov	r3, r0
 80014fc:	60b9      	str	r1, [r7, #8]
 80014fe:	607a      	str	r2, [r7, #4]
 8001500:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001502:	f7ff ff63 	bl	80013cc <__NVIC_GetPriorityGrouping>
 8001506:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001508:	687a      	ldr	r2, [r7, #4]
 800150a:	68b9      	ldr	r1, [r7, #8]
 800150c:	6978      	ldr	r0, [r7, #20]
 800150e:	f7ff ffb3 	bl	8001478 <NVIC_EncodePriority>
 8001512:	4602      	mov	r2, r0
 8001514:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001518:	4611      	mov	r1, r2
 800151a:	4618      	mov	r0, r3
 800151c:	f7ff ff82 	bl	8001424 <__NVIC_SetPriority>
}
 8001520:	bf00      	nop
 8001522:	3718      	adds	r7, #24
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}

08001528 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
 800152e:	4603      	mov	r3, r0
 8001530:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001532:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001536:	4618      	mov	r0, r3
 8001538:	f7ff ff56 	bl	80013e8 <__NVIC_EnableIRQ>
}
 800153c:	bf00      	nop
 800153e:	3708      	adds	r7, #8
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}

08001544 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001544:	b480      	push	{r7}
 8001546:	b089      	sub	sp, #36	@ 0x24
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
 800154c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800154e:	2300      	movs	r3, #0
 8001550:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001552:	4b89      	ldr	r3, [pc, #548]	@ (8001778 <HAL_GPIO_Init+0x234>)
 8001554:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001556:	e194      	b.n	8001882 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	681a      	ldr	r2, [r3, #0]
 800155c:	2101      	movs	r1, #1
 800155e:	69fb      	ldr	r3, [r7, #28]
 8001560:	fa01 f303 	lsl.w	r3, r1, r3
 8001564:	4013      	ands	r3, r2
 8001566:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	2b00      	cmp	r3, #0
 800156c:	f000 8186 	beq.w	800187c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f003 0303 	and.w	r3, r3, #3
 8001578:	2b01      	cmp	r3, #1
 800157a:	d005      	beq.n	8001588 <HAL_GPIO_Init+0x44>
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	f003 0303 	and.w	r3, r3, #3
 8001584:	2b02      	cmp	r3, #2
 8001586:	d130      	bne.n	80015ea <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	689b      	ldr	r3, [r3, #8]
 800158c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800158e:	69fb      	ldr	r3, [r7, #28]
 8001590:	005b      	lsls	r3, r3, #1
 8001592:	2203      	movs	r2, #3
 8001594:	fa02 f303 	lsl.w	r3, r2, r3
 8001598:	43db      	mvns	r3, r3
 800159a:	69ba      	ldr	r2, [r7, #24]
 800159c:	4013      	ands	r3, r2
 800159e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	68da      	ldr	r2, [r3, #12]
 80015a4:	69fb      	ldr	r3, [r7, #28]
 80015a6:	005b      	lsls	r3, r3, #1
 80015a8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ac:	69ba      	ldr	r2, [r7, #24]
 80015ae:	4313      	orrs	r3, r2
 80015b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	69ba      	ldr	r2, [r7, #24]
 80015b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80015be:	2201      	movs	r2, #1
 80015c0:	69fb      	ldr	r3, [r7, #28]
 80015c2:	fa02 f303 	lsl.w	r3, r2, r3
 80015c6:	43db      	mvns	r3, r3
 80015c8:	69ba      	ldr	r2, [r7, #24]
 80015ca:	4013      	ands	r3, r2
 80015cc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	091b      	lsrs	r3, r3, #4
 80015d4:	f003 0201 	and.w	r2, r3, #1
 80015d8:	69fb      	ldr	r3, [r7, #28]
 80015da:	fa02 f303 	lsl.w	r3, r2, r3
 80015de:	69ba      	ldr	r2, [r7, #24]
 80015e0:	4313      	orrs	r3, r2
 80015e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	69ba      	ldr	r2, [r7, #24]
 80015e8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	f003 0303 	and.w	r3, r3, #3
 80015f2:	2b03      	cmp	r3, #3
 80015f4:	d017      	beq.n	8001626 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	68db      	ldr	r3, [r3, #12]
 80015fa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80015fc:	69fb      	ldr	r3, [r7, #28]
 80015fe:	005b      	lsls	r3, r3, #1
 8001600:	2203      	movs	r2, #3
 8001602:	fa02 f303 	lsl.w	r3, r2, r3
 8001606:	43db      	mvns	r3, r3
 8001608:	69ba      	ldr	r2, [r7, #24]
 800160a:	4013      	ands	r3, r2
 800160c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	689a      	ldr	r2, [r3, #8]
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	005b      	lsls	r3, r3, #1
 8001616:	fa02 f303 	lsl.w	r3, r2, r3
 800161a:	69ba      	ldr	r2, [r7, #24]
 800161c:	4313      	orrs	r3, r2
 800161e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	69ba      	ldr	r2, [r7, #24]
 8001624:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	f003 0303 	and.w	r3, r3, #3
 800162e:	2b02      	cmp	r3, #2
 8001630:	d123      	bne.n	800167a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	08da      	lsrs	r2, r3, #3
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	3208      	adds	r2, #8
 800163a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800163e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001640:	69fb      	ldr	r3, [r7, #28]
 8001642:	f003 0307 	and.w	r3, r3, #7
 8001646:	009b      	lsls	r3, r3, #2
 8001648:	220f      	movs	r2, #15
 800164a:	fa02 f303 	lsl.w	r3, r2, r3
 800164e:	43db      	mvns	r3, r3
 8001650:	69ba      	ldr	r2, [r7, #24]
 8001652:	4013      	ands	r3, r2
 8001654:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	691a      	ldr	r2, [r3, #16]
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	f003 0307 	and.w	r3, r3, #7
 8001660:	009b      	lsls	r3, r3, #2
 8001662:	fa02 f303 	lsl.w	r3, r2, r3
 8001666:	69ba      	ldr	r2, [r7, #24]
 8001668:	4313      	orrs	r3, r2
 800166a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800166c:	69fb      	ldr	r3, [r7, #28]
 800166e:	08da      	lsrs	r2, r3, #3
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	3208      	adds	r2, #8
 8001674:	69b9      	ldr	r1, [r7, #24]
 8001676:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001680:	69fb      	ldr	r3, [r7, #28]
 8001682:	005b      	lsls	r3, r3, #1
 8001684:	2203      	movs	r2, #3
 8001686:	fa02 f303 	lsl.w	r3, r2, r3
 800168a:	43db      	mvns	r3, r3
 800168c:	69ba      	ldr	r2, [r7, #24]
 800168e:	4013      	ands	r3, r2
 8001690:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	f003 0203 	and.w	r2, r3, #3
 800169a:	69fb      	ldr	r3, [r7, #28]
 800169c:	005b      	lsls	r3, r3, #1
 800169e:	fa02 f303 	lsl.w	r3, r2, r3
 80016a2:	69ba      	ldr	r2, [r7, #24]
 80016a4:	4313      	orrs	r3, r2
 80016a6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	69ba      	ldr	r2, [r7, #24]
 80016ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	f000 80e0 	beq.w	800187c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016bc:	4b2f      	ldr	r3, [pc, #188]	@ (800177c <HAL_GPIO_Init+0x238>)
 80016be:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80016c2:	4a2e      	ldr	r2, [pc, #184]	@ (800177c <HAL_GPIO_Init+0x238>)
 80016c4:	f043 0302 	orr.w	r3, r3, #2
 80016c8:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 80016cc:	4b2b      	ldr	r3, [pc, #172]	@ (800177c <HAL_GPIO_Init+0x238>)
 80016ce:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80016d2:	f003 0302 	and.w	r3, r3, #2
 80016d6:	60fb      	str	r3, [r7, #12]
 80016d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80016da:	4a29      	ldr	r2, [pc, #164]	@ (8001780 <HAL_GPIO_Init+0x23c>)
 80016dc:	69fb      	ldr	r3, [r7, #28]
 80016de:	089b      	lsrs	r3, r3, #2
 80016e0:	3302      	adds	r3, #2
 80016e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80016e8:	69fb      	ldr	r3, [r7, #28]
 80016ea:	f003 0303 	and.w	r3, r3, #3
 80016ee:	009b      	lsls	r3, r3, #2
 80016f0:	220f      	movs	r2, #15
 80016f2:	fa02 f303 	lsl.w	r3, r2, r3
 80016f6:	43db      	mvns	r3, r3
 80016f8:	69ba      	ldr	r2, [r7, #24]
 80016fa:	4013      	ands	r3, r2
 80016fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	4a20      	ldr	r2, [pc, #128]	@ (8001784 <HAL_GPIO_Init+0x240>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d052      	beq.n	80017ac <HAL_GPIO_Init+0x268>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	4a1f      	ldr	r2, [pc, #124]	@ (8001788 <HAL_GPIO_Init+0x244>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d031      	beq.n	8001772 <HAL_GPIO_Init+0x22e>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	4a1e      	ldr	r2, [pc, #120]	@ (800178c <HAL_GPIO_Init+0x248>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d02b      	beq.n	800176e <HAL_GPIO_Init+0x22a>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	4a1d      	ldr	r2, [pc, #116]	@ (8001790 <HAL_GPIO_Init+0x24c>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d025      	beq.n	800176a <HAL_GPIO_Init+0x226>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	4a1c      	ldr	r2, [pc, #112]	@ (8001794 <HAL_GPIO_Init+0x250>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d01f      	beq.n	8001766 <HAL_GPIO_Init+0x222>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	4a1b      	ldr	r2, [pc, #108]	@ (8001798 <HAL_GPIO_Init+0x254>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d019      	beq.n	8001762 <HAL_GPIO_Init+0x21e>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	4a1a      	ldr	r2, [pc, #104]	@ (800179c <HAL_GPIO_Init+0x258>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d013      	beq.n	800175e <HAL_GPIO_Init+0x21a>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	4a19      	ldr	r2, [pc, #100]	@ (80017a0 <HAL_GPIO_Init+0x25c>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d00d      	beq.n	800175a <HAL_GPIO_Init+0x216>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	4a18      	ldr	r2, [pc, #96]	@ (80017a4 <HAL_GPIO_Init+0x260>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d007      	beq.n	8001756 <HAL_GPIO_Init+0x212>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	4a17      	ldr	r2, [pc, #92]	@ (80017a8 <HAL_GPIO_Init+0x264>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d101      	bne.n	8001752 <HAL_GPIO_Init+0x20e>
 800174e:	2309      	movs	r3, #9
 8001750:	e02d      	b.n	80017ae <HAL_GPIO_Init+0x26a>
 8001752:	230a      	movs	r3, #10
 8001754:	e02b      	b.n	80017ae <HAL_GPIO_Init+0x26a>
 8001756:	2308      	movs	r3, #8
 8001758:	e029      	b.n	80017ae <HAL_GPIO_Init+0x26a>
 800175a:	2307      	movs	r3, #7
 800175c:	e027      	b.n	80017ae <HAL_GPIO_Init+0x26a>
 800175e:	2306      	movs	r3, #6
 8001760:	e025      	b.n	80017ae <HAL_GPIO_Init+0x26a>
 8001762:	2305      	movs	r3, #5
 8001764:	e023      	b.n	80017ae <HAL_GPIO_Init+0x26a>
 8001766:	2304      	movs	r3, #4
 8001768:	e021      	b.n	80017ae <HAL_GPIO_Init+0x26a>
 800176a:	2303      	movs	r3, #3
 800176c:	e01f      	b.n	80017ae <HAL_GPIO_Init+0x26a>
 800176e:	2302      	movs	r3, #2
 8001770:	e01d      	b.n	80017ae <HAL_GPIO_Init+0x26a>
 8001772:	2301      	movs	r3, #1
 8001774:	e01b      	b.n	80017ae <HAL_GPIO_Init+0x26a>
 8001776:	bf00      	nop
 8001778:	58000080 	.word	0x58000080
 800177c:	58024400 	.word	0x58024400
 8001780:	58000400 	.word	0x58000400
 8001784:	58020000 	.word	0x58020000
 8001788:	58020400 	.word	0x58020400
 800178c:	58020800 	.word	0x58020800
 8001790:	58020c00 	.word	0x58020c00
 8001794:	58021000 	.word	0x58021000
 8001798:	58021400 	.word	0x58021400
 800179c:	58021800 	.word	0x58021800
 80017a0:	58021c00 	.word	0x58021c00
 80017a4:	58022000 	.word	0x58022000
 80017a8:	58022400 	.word	0x58022400
 80017ac:	2300      	movs	r3, #0
 80017ae:	69fa      	ldr	r2, [r7, #28]
 80017b0:	f002 0203 	and.w	r2, r2, #3
 80017b4:	0092      	lsls	r2, r2, #2
 80017b6:	4093      	lsls	r3, r2
 80017b8:	69ba      	ldr	r2, [r7, #24]
 80017ba:	4313      	orrs	r3, r2
 80017bc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80017be:	4938      	ldr	r1, [pc, #224]	@ (80018a0 <HAL_GPIO_Init+0x35c>)
 80017c0:	69fb      	ldr	r3, [r7, #28]
 80017c2:	089b      	lsrs	r3, r3, #2
 80017c4:	3302      	adds	r3, #2
 80017c6:	69ba      	ldr	r2, [r7, #24]
 80017c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80017cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	43db      	mvns	r3, r3
 80017d8:	69ba      	ldr	r2, [r7, #24]
 80017da:	4013      	ands	r3, r2
 80017dc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d003      	beq.n	80017f2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80017ea:	69ba      	ldr	r2, [r7, #24]
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	4313      	orrs	r3, r2
 80017f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80017f2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80017f6:	69bb      	ldr	r3, [r7, #24]
 80017f8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80017fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	43db      	mvns	r3, r3
 8001806:	69ba      	ldr	r2, [r7, #24]
 8001808:	4013      	ands	r3, r2
 800180a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001814:	2b00      	cmp	r3, #0
 8001816:	d003      	beq.n	8001820 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001818:	69ba      	ldr	r2, [r7, #24]
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	4313      	orrs	r3, r2
 800181e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001820:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001824:	69bb      	ldr	r3, [r7, #24]
 8001826:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	43db      	mvns	r3, r3
 8001832:	69ba      	ldr	r2, [r7, #24]
 8001834:	4013      	ands	r3, r2
 8001836:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001840:	2b00      	cmp	r3, #0
 8001842:	d003      	beq.n	800184c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001844:	69ba      	ldr	r2, [r7, #24]
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	4313      	orrs	r3, r2
 800184a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	69ba      	ldr	r2, [r7, #24]
 8001850:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	43db      	mvns	r3, r3
 800185c:	69ba      	ldr	r2, [r7, #24]
 800185e:	4013      	ands	r3, r2
 8001860:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800186a:	2b00      	cmp	r3, #0
 800186c:	d003      	beq.n	8001876 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800186e:	69ba      	ldr	r2, [r7, #24]
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	4313      	orrs	r3, r2
 8001874:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	69ba      	ldr	r2, [r7, #24]
 800187a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800187c:	69fb      	ldr	r3, [r7, #28]
 800187e:	3301      	adds	r3, #1
 8001880:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	69fb      	ldr	r3, [r7, #28]
 8001888:	fa22 f303 	lsr.w	r3, r2, r3
 800188c:	2b00      	cmp	r3, #0
 800188e:	f47f ae63 	bne.w	8001558 <HAL_GPIO_Init+0x14>
  }
}
 8001892:	bf00      	nop
 8001894:	bf00      	nop
 8001896:	3724      	adds	r7, #36	@ 0x24
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr
 80018a0:	58000400 	.word	0x58000400

080018a4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b085      	sub	sp, #20
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
 80018ac:	460b      	mov	r3, r1
 80018ae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	691a      	ldr	r2, [r3, #16]
 80018b4:	887b      	ldrh	r3, [r7, #2]
 80018b6:	4013      	ands	r3, r2
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d002      	beq.n	80018c2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80018bc:	2301      	movs	r3, #1
 80018be:	73fb      	strb	r3, [r7, #15]
 80018c0:	e001      	b.n	80018c6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80018c2:	2300      	movs	r3, #0
 80018c4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80018c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	3714      	adds	r7, #20
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr

080018d4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	4603      	mov	r3, r0
 80018dc:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80018de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018e2:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80018e6:	88fb      	ldrh	r3, [r7, #6]
 80018e8:	4013      	ands	r3, r2
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d008      	beq.n	8001900 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80018ee:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80018f2:	88fb      	ldrh	r3, [r7, #6]
 80018f4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80018f8:	88fb      	ldrh	r3, [r7, #6]
 80018fa:	4618      	mov	r0, r3
 80018fc:	f7ff fbe2 	bl	80010c4 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8001900:	bf00      	nop
 8001902:	3708      	adds	r7, #8
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}

08001908 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b084      	sub	sp, #16
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8001910:	4b19      	ldr	r3, [pc, #100]	@ (8001978 <HAL_PWREx_ConfigSupply+0x70>)
 8001912:	68db      	ldr	r3, [r3, #12]
 8001914:	f003 0304 	and.w	r3, r3, #4
 8001918:	2b04      	cmp	r3, #4
 800191a:	d00a      	beq.n	8001932 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800191c:	4b16      	ldr	r3, [pc, #88]	@ (8001978 <HAL_PWREx_ConfigSupply+0x70>)
 800191e:	68db      	ldr	r3, [r3, #12]
 8001920:	f003 0307 	and.w	r3, r3, #7
 8001924:	687a      	ldr	r2, [r7, #4]
 8001926:	429a      	cmp	r2, r3
 8001928:	d001      	beq.n	800192e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	e01f      	b.n	800196e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800192e:	2300      	movs	r3, #0
 8001930:	e01d      	b.n	800196e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001932:	4b11      	ldr	r3, [pc, #68]	@ (8001978 <HAL_PWREx_ConfigSupply+0x70>)
 8001934:	68db      	ldr	r3, [r3, #12]
 8001936:	f023 0207 	bic.w	r2, r3, #7
 800193a:	490f      	ldr	r1, [pc, #60]	@ (8001978 <HAL_PWREx_ConfigSupply+0x70>)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	4313      	orrs	r3, r2
 8001940:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001942:	f7ff fd13 	bl	800136c <HAL_GetTick>
 8001946:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001948:	e009      	b.n	800195e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800194a:	f7ff fd0f 	bl	800136c <HAL_GetTick>
 800194e:	4602      	mov	r2, r0
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	1ad3      	subs	r3, r2, r3
 8001954:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001958:	d901      	bls.n	800195e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	e007      	b.n	800196e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800195e:	4b06      	ldr	r3, [pc, #24]	@ (8001978 <HAL_PWREx_ConfigSupply+0x70>)
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001966:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800196a:	d1ee      	bne.n	800194a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800196c:	2300      	movs	r3, #0
}
 800196e:	4618      	mov	r0, r3
 8001970:	3710      	adds	r7, #16
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	58024800 	.word	0x58024800

0800197c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b08c      	sub	sp, #48	@ 0x30
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d102      	bne.n	8001990 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	f000 bc1f 	b.w	80021ce <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f003 0301 	and.w	r3, r3, #1
 8001998:	2b00      	cmp	r3, #0
 800199a:	f000 80b3 	beq.w	8001b04 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800199e:	4b95      	ldr	r3, [pc, #596]	@ (8001bf4 <HAL_RCC_OscConfig+0x278>)
 80019a0:	691b      	ldr	r3, [r3, #16]
 80019a2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80019a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80019a8:	4b92      	ldr	r3, [pc, #584]	@ (8001bf4 <HAL_RCC_OscConfig+0x278>)
 80019aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019ac:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80019ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019b0:	2b10      	cmp	r3, #16
 80019b2:	d007      	beq.n	80019c4 <HAL_RCC_OscConfig+0x48>
 80019b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019b6:	2b18      	cmp	r3, #24
 80019b8:	d112      	bne.n	80019e0 <HAL_RCC_OscConfig+0x64>
 80019ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019bc:	f003 0303 	and.w	r3, r3, #3
 80019c0:	2b02      	cmp	r3, #2
 80019c2:	d10d      	bne.n	80019e0 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019c4:	4b8b      	ldr	r3, [pc, #556]	@ (8001bf4 <HAL_RCC_OscConfig+0x278>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	f000 8098 	beq.w	8001b02 <HAL_RCC_OscConfig+0x186>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	f040 8093 	bne.w	8001b02 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80019dc:	2301      	movs	r3, #1
 80019de:	e3f6      	b.n	80021ce <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80019e8:	d106      	bne.n	80019f8 <HAL_RCC_OscConfig+0x7c>
 80019ea:	4b82      	ldr	r3, [pc, #520]	@ (8001bf4 <HAL_RCC_OscConfig+0x278>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a81      	ldr	r2, [pc, #516]	@ (8001bf4 <HAL_RCC_OscConfig+0x278>)
 80019f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019f4:	6013      	str	r3, [r2, #0]
 80019f6:	e058      	b.n	8001aaa <HAL_RCC_OscConfig+0x12e>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d112      	bne.n	8001a26 <HAL_RCC_OscConfig+0xaa>
 8001a00:	4b7c      	ldr	r3, [pc, #496]	@ (8001bf4 <HAL_RCC_OscConfig+0x278>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a7b      	ldr	r2, [pc, #492]	@ (8001bf4 <HAL_RCC_OscConfig+0x278>)
 8001a06:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a0a:	6013      	str	r3, [r2, #0]
 8001a0c:	4b79      	ldr	r3, [pc, #484]	@ (8001bf4 <HAL_RCC_OscConfig+0x278>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a78      	ldr	r2, [pc, #480]	@ (8001bf4 <HAL_RCC_OscConfig+0x278>)
 8001a12:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001a16:	6013      	str	r3, [r2, #0]
 8001a18:	4b76      	ldr	r3, [pc, #472]	@ (8001bf4 <HAL_RCC_OscConfig+0x278>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a75      	ldr	r2, [pc, #468]	@ (8001bf4 <HAL_RCC_OscConfig+0x278>)
 8001a1e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a22:	6013      	str	r3, [r2, #0]
 8001a24:	e041      	b.n	8001aaa <HAL_RCC_OscConfig+0x12e>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001a2e:	d112      	bne.n	8001a56 <HAL_RCC_OscConfig+0xda>
 8001a30:	4b70      	ldr	r3, [pc, #448]	@ (8001bf4 <HAL_RCC_OscConfig+0x278>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a6f      	ldr	r2, [pc, #444]	@ (8001bf4 <HAL_RCC_OscConfig+0x278>)
 8001a36:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a3a:	6013      	str	r3, [r2, #0]
 8001a3c:	4b6d      	ldr	r3, [pc, #436]	@ (8001bf4 <HAL_RCC_OscConfig+0x278>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a6c      	ldr	r2, [pc, #432]	@ (8001bf4 <HAL_RCC_OscConfig+0x278>)
 8001a42:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001a46:	6013      	str	r3, [r2, #0]
 8001a48:	4b6a      	ldr	r3, [pc, #424]	@ (8001bf4 <HAL_RCC_OscConfig+0x278>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a69      	ldr	r2, [pc, #420]	@ (8001bf4 <HAL_RCC_OscConfig+0x278>)
 8001a4e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a52:	6013      	str	r3, [r2, #0]
 8001a54:	e029      	b.n	8001aaa <HAL_RCC_OscConfig+0x12e>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8001a5e:	d112      	bne.n	8001a86 <HAL_RCC_OscConfig+0x10a>
 8001a60:	4b64      	ldr	r3, [pc, #400]	@ (8001bf4 <HAL_RCC_OscConfig+0x278>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a63      	ldr	r2, [pc, #396]	@ (8001bf4 <HAL_RCC_OscConfig+0x278>)
 8001a66:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a6a:	6013      	str	r3, [r2, #0]
 8001a6c:	4b61      	ldr	r3, [pc, #388]	@ (8001bf4 <HAL_RCC_OscConfig+0x278>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a60      	ldr	r2, [pc, #384]	@ (8001bf4 <HAL_RCC_OscConfig+0x278>)
 8001a72:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001a76:	6013      	str	r3, [r2, #0]
 8001a78:	4b5e      	ldr	r3, [pc, #376]	@ (8001bf4 <HAL_RCC_OscConfig+0x278>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a5d      	ldr	r2, [pc, #372]	@ (8001bf4 <HAL_RCC_OscConfig+0x278>)
 8001a7e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a82:	6013      	str	r3, [r2, #0]
 8001a84:	e011      	b.n	8001aaa <HAL_RCC_OscConfig+0x12e>
 8001a86:	4b5b      	ldr	r3, [pc, #364]	@ (8001bf4 <HAL_RCC_OscConfig+0x278>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a5a      	ldr	r2, [pc, #360]	@ (8001bf4 <HAL_RCC_OscConfig+0x278>)
 8001a8c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a90:	6013      	str	r3, [r2, #0]
 8001a92:	4b58      	ldr	r3, [pc, #352]	@ (8001bf4 <HAL_RCC_OscConfig+0x278>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a57      	ldr	r2, [pc, #348]	@ (8001bf4 <HAL_RCC_OscConfig+0x278>)
 8001a98:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a9c:	6013      	str	r3, [r2, #0]
 8001a9e:	4b55      	ldr	r3, [pc, #340]	@ (8001bf4 <HAL_RCC_OscConfig+0x278>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a54      	ldr	r2, [pc, #336]	@ (8001bf4 <HAL_RCC_OscConfig+0x278>)
 8001aa4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001aa8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d013      	beq.n	8001ada <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ab2:	f7ff fc5b 	bl	800136c <HAL_GetTick>
 8001ab6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001ab8:	e008      	b.n	8001acc <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001aba:	f7ff fc57 	bl	800136c <HAL_GetTick>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ac2:	1ad3      	subs	r3, r2, r3
 8001ac4:	2b64      	cmp	r3, #100	@ 0x64
 8001ac6:	d901      	bls.n	8001acc <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8001ac8:	2303      	movs	r3, #3
 8001aca:	e380      	b.n	80021ce <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001acc:	4b49      	ldr	r3, [pc, #292]	@ (8001bf4 <HAL_RCC_OscConfig+0x278>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d0f0      	beq.n	8001aba <HAL_RCC_OscConfig+0x13e>
 8001ad8:	e014      	b.n	8001b04 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ada:	f7ff fc47 	bl	800136c <HAL_GetTick>
 8001ade:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001ae0:	e008      	b.n	8001af4 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ae2:	f7ff fc43 	bl	800136c <HAL_GetTick>
 8001ae6:	4602      	mov	r2, r0
 8001ae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aea:	1ad3      	subs	r3, r2, r3
 8001aec:	2b64      	cmp	r3, #100	@ 0x64
 8001aee:	d901      	bls.n	8001af4 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8001af0:	2303      	movs	r3, #3
 8001af2:	e36c      	b.n	80021ce <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001af4:	4b3f      	ldr	r3, [pc, #252]	@ (8001bf4 <HAL_RCC_OscConfig+0x278>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d1f0      	bne.n	8001ae2 <HAL_RCC_OscConfig+0x166>
 8001b00:	e000      	b.n	8001b04 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b02:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f003 0302 	and.w	r3, r3, #2
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	f000 808c 	beq.w	8001c2a <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b12:	4b38      	ldr	r3, [pc, #224]	@ (8001bf4 <HAL_RCC_OscConfig+0x278>)
 8001b14:	691b      	ldr	r3, [r3, #16]
 8001b16:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001b1a:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001b1c:	4b35      	ldr	r3, [pc, #212]	@ (8001bf4 <HAL_RCC_OscConfig+0x278>)
 8001b1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b20:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001b22:	6a3b      	ldr	r3, [r7, #32]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d007      	beq.n	8001b38 <HAL_RCC_OscConfig+0x1bc>
 8001b28:	6a3b      	ldr	r3, [r7, #32]
 8001b2a:	2b18      	cmp	r3, #24
 8001b2c:	d137      	bne.n	8001b9e <HAL_RCC_OscConfig+0x222>
 8001b2e:	69fb      	ldr	r3, [r7, #28]
 8001b30:	f003 0303 	and.w	r3, r3, #3
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d132      	bne.n	8001b9e <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b38:	4b2e      	ldr	r3, [pc, #184]	@ (8001bf4 <HAL_RCC_OscConfig+0x278>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f003 0304 	and.w	r3, r3, #4
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d005      	beq.n	8001b50 <HAL_RCC_OscConfig+0x1d4>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	68db      	ldr	r3, [r3, #12]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d101      	bne.n	8001b50 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e33e      	b.n	80021ce <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001b50:	4b28      	ldr	r3, [pc, #160]	@ (8001bf4 <HAL_RCC_OscConfig+0x278>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f023 0219 	bic.w	r2, r3, #25
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	68db      	ldr	r3, [r3, #12]
 8001b5c:	4925      	ldr	r1, [pc, #148]	@ (8001bf4 <HAL_RCC_OscConfig+0x278>)
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b62:	f7ff fc03 	bl	800136c <HAL_GetTick>
 8001b66:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b68:	e008      	b.n	8001b7c <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b6a:	f7ff fbff 	bl	800136c <HAL_GetTick>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b72:	1ad3      	subs	r3, r2, r3
 8001b74:	2b02      	cmp	r3, #2
 8001b76:	d901      	bls.n	8001b7c <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001b78:	2303      	movs	r3, #3
 8001b7a:	e328      	b.n	80021ce <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b7c:	4b1d      	ldr	r3, [pc, #116]	@ (8001bf4 <HAL_RCC_OscConfig+0x278>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f003 0304 	and.w	r3, r3, #4
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d0f0      	beq.n	8001b6a <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b88:	4b1a      	ldr	r3, [pc, #104]	@ (8001bf4 <HAL_RCC_OscConfig+0x278>)
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	691b      	ldr	r3, [r3, #16]
 8001b94:	061b      	lsls	r3, r3, #24
 8001b96:	4917      	ldr	r1, [pc, #92]	@ (8001bf4 <HAL_RCC_OscConfig+0x278>)
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b9c:	e045      	b.n	8001c2a <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	68db      	ldr	r3, [r3, #12]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d028      	beq.n	8001bf8 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001ba6:	4b13      	ldr	r3, [pc, #76]	@ (8001bf4 <HAL_RCC_OscConfig+0x278>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f023 0219 	bic.w	r2, r3, #25
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	68db      	ldr	r3, [r3, #12]
 8001bb2:	4910      	ldr	r1, [pc, #64]	@ (8001bf4 <HAL_RCC_OscConfig+0x278>)
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bb8:	f7ff fbd8 	bl	800136c <HAL_GetTick>
 8001bbc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001bbe:	e008      	b.n	8001bd2 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bc0:	f7ff fbd4 	bl	800136c <HAL_GetTick>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bc8:	1ad3      	subs	r3, r2, r3
 8001bca:	2b02      	cmp	r3, #2
 8001bcc:	d901      	bls.n	8001bd2 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8001bce:	2303      	movs	r3, #3
 8001bd0:	e2fd      	b.n	80021ce <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001bd2:	4b08      	ldr	r3, [pc, #32]	@ (8001bf4 <HAL_RCC_OscConfig+0x278>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 0304 	and.w	r3, r3, #4
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d0f0      	beq.n	8001bc0 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bde:	4b05      	ldr	r3, [pc, #20]	@ (8001bf4 <HAL_RCC_OscConfig+0x278>)
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	691b      	ldr	r3, [r3, #16]
 8001bea:	061b      	lsls	r3, r3, #24
 8001bec:	4901      	ldr	r1, [pc, #4]	@ (8001bf4 <HAL_RCC_OscConfig+0x278>)
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	604b      	str	r3, [r1, #4]
 8001bf2:	e01a      	b.n	8001c2a <HAL_RCC_OscConfig+0x2ae>
 8001bf4:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bf8:	4b97      	ldr	r3, [pc, #604]	@ (8001e58 <HAL_RCC_OscConfig+0x4dc>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a96      	ldr	r2, [pc, #600]	@ (8001e58 <HAL_RCC_OscConfig+0x4dc>)
 8001bfe:	f023 0301 	bic.w	r3, r3, #1
 8001c02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c04:	f7ff fbb2 	bl	800136c <HAL_GetTick>
 8001c08:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001c0a:	e008      	b.n	8001c1e <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c0c:	f7ff fbae 	bl	800136c <HAL_GetTick>
 8001c10:	4602      	mov	r2, r0
 8001c12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	2b02      	cmp	r3, #2
 8001c18:	d901      	bls.n	8001c1e <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	e2d7      	b.n	80021ce <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001c1e:	4b8e      	ldr	r3, [pc, #568]	@ (8001e58 <HAL_RCC_OscConfig+0x4dc>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 0304 	and.w	r3, r3, #4
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d1f0      	bne.n	8001c0c <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f003 0310 	and.w	r3, r3, #16
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d06a      	beq.n	8001d0c <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c36:	4b88      	ldr	r3, [pc, #544]	@ (8001e58 <HAL_RCC_OscConfig+0x4dc>)
 8001c38:	691b      	ldr	r3, [r3, #16]
 8001c3a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001c3e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001c40:	4b85      	ldr	r3, [pc, #532]	@ (8001e58 <HAL_RCC_OscConfig+0x4dc>)
 8001c42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c44:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001c46:	69bb      	ldr	r3, [r7, #24]
 8001c48:	2b08      	cmp	r3, #8
 8001c4a:	d007      	beq.n	8001c5c <HAL_RCC_OscConfig+0x2e0>
 8001c4c:	69bb      	ldr	r3, [r7, #24]
 8001c4e:	2b18      	cmp	r3, #24
 8001c50:	d11b      	bne.n	8001c8a <HAL_RCC_OscConfig+0x30e>
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	f003 0303 	and.w	r3, r3, #3
 8001c58:	2b01      	cmp	r3, #1
 8001c5a:	d116      	bne.n	8001c8a <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001c5c:	4b7e      	ldr	r3, [pc, #504]	@ (8001e58 <HAL_RCC_OscConfig+0x4dc>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d005      	beq.n	8001c74 <HAL_RCC_OscConfig+0x2f8>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	69db      	ldr	r3, [r3, #28]
 8001c6c:	2b80      	cmp	r3, #128	@ 0x80
 8001c6e:	d001      	beq.n	8001c74 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8001c70:	2301      	movs	r3, #1
 8001c72:	e2ac      	b.n	80021ce <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001c74:	4b78      	ldr	r3, [pc, #480]	@ (8001e58 <HAL_RCC_OscConfig+0x4dc>)
 8001c76:	68db      	ldr	r3, [r3, #12]
 8001c78:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6a1b      	ldr	r3, [r3, #32]
 8001c80:	061b      	lsls	r3, r3, #24
 8001c82:	4975      	ldr	r1, [pc, #468]	@ (8001e58 <HAL_RCC_OscConfig+0x4dc>)
 8001c84:	4313      	orrs	r3, r2
 8001c86:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001c88:	e040      	b.n	8001d0c <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	69db      	ldr	r3, [r3, #28]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d023      	beq.n	8001cda <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001c92:	4b71      	ldr	r3, [pc, #452]	@ (8001e58 <HAL_RCC_OscConfig+0x4dc>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a70      	ldr	r2, [pc, #448]	@ (8001e58 <HAL_RCC_OscConfig+0x4dc>)
 8001c98:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c9e:	f7ff fb65 	bl	800136c <HAL_GetTick>
 8001ca2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001ca4:	e008      	b.n	8001cb8 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001ca6:	f7ff fb61 	bl	800136c <HAL_GetTick>
 8001caa:	4602      	mov	r2, r0
 8001cac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cae:	1ad3      	subs	r3, r2, r3
 8001cb0:	2b02      	cmp	r3, #2
 8001cb2:	d901      	bls.n	8001cb8 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8001cb4:	2303      	movs	r3, #3
 8001cb6:	e28a      	b.n	80021ce <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001cb8:	4b67      	ldr	r3, [pc, #412]	@ (8001e58 <HAL_RCC_OscConfig+0x4dc>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d0f0      	beq.n	8001ca6 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001cc4:	4b64      	ldr	r3, [pc, #400]	@ (8001e58 <HAL_RCC_OscConfig+0x4dc>)
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6a1b      	ldr	r3, [r3, #32]
 8001cd0:	061b      	lsls	r3, r3, #24
 8001cd2:	4961      	ldr	r1, [pc, #388]	@ (8001e58 <HAL_RCC_OscConfig+0x4dc>)
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	60cb      	str	r3, [r1, #12]
 8001cd8:	e018      	b.n	8001d0c <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001cda:	4b5f      	ldr	r3, [pc, #380]	@ (8001e58 <HAL_RCC_OscConfig+0x4dc>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a5e      	ldr	r2, [pc, #376]	@ (8001e58 <HAL_RCC_OscConfig+0x4dc>)
 8001ce0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001ce4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ce6:	f7ff fb41 	bl	800136c <HAL_GetTick>
 8001cea:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001cec:	e008      	b.n	8001d00 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001cee:	f7ff fb3d 	bl	800136c <HAL_GetTick>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cf6:	1ad3      	subs	r3, r2, r3
 8001cf8:	2b02      	cmp	r3, #2
 8001cfa:	d901      	bls.n	8001d00 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8001cfc:	2303      	movs	r3, #3
 8001cfe:	e266      	b.n	80021ce <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001d00:	4b55      	ldr	r3, [pc, #340]	@ (8001e58 <HAL_RCC_OscConfig+0x4dc>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d1f0      	bne.n	8001cee <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f003 0308 	and.w	r3, r3, #8
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d036      	beq.n	8001d86 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	695b      	ldr	r3, [r3, #20]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d019      	beq.n	8001d54 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d20:	4b4d      	ldr	r3, [pc, #308]	@ (8001e58 <HAL_RCC_OscConfig+0x4dc>)
 8001d22:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001d24:	4a4c      	ldr	r2, [pc, #304]	@ (8001e58 <HAL_RCC_OscConfig+0x4dc>)
 8001d26:	f043 0301 	orr.w	r3, r3, #1
 8001d2a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d2c:	f7ff fb1e 	bl	800136c <HAL_GetTick>
 8001d30:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001d32:	e008      	b.n	8001d46 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d34:	f7ff fb1a 	bl	800136c <HAL_GetTick>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	2b02      	cmp	r3, #2
 8001d40:	d901      	bls.n	8001d46 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8001d42:	2303      	movs	r3, #3
 8001d44:	e243      	b.n	80021ce <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001d46:	4b44      	ldr	r3, [pc, #272]	@ (8001e58 <HAL_RCC_OscConfig+0x4dc>)
 8001d48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001d4a:	f003 0302 	and.w	r3, r3, #2
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d0f0      	beq.n	8001d34 <HAL_RCC_OscConfig+0x3b8>
 8001d52:	e018      	b.n	8001d86 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d54:	4b40      	ldr	r3, [pc, #256]	@ (8001e58 <HAL_RCC_OscConfig+0x4dc>)
 8001d56:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001d58:	4a3f      	ldr	r2, [pc, #252]	@ (8001e58 <HAL_RCC_OscConfig+0x4dc>)
 8001d5a:	f023 0301 	bic.w	r3, r3, #1
 8001d5e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d60:	f7ff fb04 	bl	800136c <HAL_GetTick>
 8001d64:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001d66:	e008      	b.n	8001d7a <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d68:	f7ff fb00 	bl	800136c <HAL_GetTick>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d70:	1ad3      	subs	r3, r2, r3
 8001d72:	2b02      	cmp	r3, #2
 8001d74:	d901      	bls.n	8001d7a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001d76:	2303      	movs	r3, #3
 8001d78:	e229      	b.n	80021ce <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001d7a:	4b37      	ldr	r3, [pc, #220]	@ (8001e58 <HAL_RCC_OscConfig+0x4dc>)
 8001d7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001d7e:	f003 0302 	and.w	r3, r3, #2
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d1f0      	bne.n	8001d68 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f003 0320 	and.w	r3, r3, #32
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d036      	beq.n	8001e00 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	699b      	ldr	r3, [r3, #24]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d019      	beq.n	8001dce <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001d9a:	4b2f      	ldr	r3, [pc, #188]	@ (8001e58 <HAL_RCC_OscConfig+0x4dc>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a2e      	ldr	r2, [pc, #184]	@ (8001e58 <HAL_RCC_OscConfig+0x4dc>)
 8001da0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001da4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001da6:	f7ff fae1 	bl	800136c <HAL_GetTick>
 8001daa:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001dac:	e008      	b.n	8001dc0 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001dae:	f7ff fadd 	bl	800136c <HAL_GetTick>
 8001db2:	4602      	mov	r2, r0
 8001db4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001db6:	1ad3      	subs	r3, r2, r3
 8001db8:	2b02      	cmp	r3, #2
 8001dba:	d901      	bls.n	8001dc0 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8001dbc:	2303      	movs	r3, #3
 8001dbe:	e206      	b.n	80021ce <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001dc0:	4b25      	ldr	r3, [pc, #148]	@ (8001e58 <HAL_RCC_OscConfig+0x4dc>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d0f0      	beq.n	8001dae <HAL_RCC_OscConfig+0x432>
 8001dcc:	e018      	b.n	8001e00 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001dce:	4b22      	ldr	r3, [pc, #136]	@ (8001e58 <HAL_RCC_OscConfig+0x4dc>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a21      	ldr	r2, [pc, #132]	@ (8001e58 <HAL_RCC_OscConfig+0x4dc>)
 8001dd4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001dd8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001dda:	f7ff fac7 	bl	800136c <HAL_GetTick>
 8001dde:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001de0:	e008      	b.n	8001df4 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001de2:	f7ff fac3 	bl	800136c <HAL_GetTick>
 8001de6:	4602      	mov	r2, r0
 8001de8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dea:	1ad3      	subs	r3, r2, r3
 8001dec:	2b02      	cmp	r3, #2
 8001dee:	d901      	bls.n	8001df4 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8001df0:	2303      	movs	r3, #3
 8001df2:	e1ec      	b.n	80021ce <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001df4:	4b18      	ldr	r3, [pc, #96]	@ (8001e58 <HAL_RCC_OscConfig+0x4dc>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d1f0      	bne.n	8001de2 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f003 0304 	and.w	r3, r3, #4
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	f000 80af 	beq.w	8001f6c <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001e0e:	4b13      	ldr	r3, [pc, #76]	@ (8001e5c <HAL_RCC_OscConfig+0x4e0>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a12      	ldr	r2, [pc, #72]	@ (8001e5c <HAL_RCC_OscConfig+0x4e0>)
 8001e14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e18:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001e1a:	f7ff faa7 	bl	800136c <HAL_GetTick>
 8001e1e:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001e20:	e008      	b.n	8001e34 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e22:	f7ff faa3 	bl	800136c <HAL_GetTick>
 8001e26:	4602      	mov	r2, r0
 8001e28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e2a:	1ad3      	subs	r3, r2, r3
 8001e2c:	2b64      	cmp	r3, #100	@ 0x64
 8001e2e:	d901      	bls.n	8001e34 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8001e30:	2303      	movs	r3, #3
 8001e32:	e1cc      	b.n	80021ce <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001e34:	4b09      	ldr	r3, [pc, #36]	@ (8001e5c <HAL_RCC_OscConfig+0x4e0>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d0f0      	beq.n	8001e22 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d10b      	bne.n	8001e60 <HAL_RCC_OscConfig+0x4e4>
 8001e48:	4b03      	ldr	r3, [pc, #12]	@ (8001e58 <HAL_RCC_OscConfig+0x4dc>)
 8001e4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e4c:	4a02      	ldr	r2, [pc, #8]	@ (8001e58 <HAL_RCC_OscConfig+0x4dc>)
 8001e4e:	f043 0301 	orr.w	r3, r3, #1
 8001e52:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e54:	e05b      	b.n	8001f0e <HAL_RCC_OscConfig+0x592>
 8001e56:	bf00      	nop
 8001e58:	58024400 	.word	0x58024400
 8001e5c:	58024800 	.word	0x58024800
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d112      	bne.n	8001e8e <HAL_RCC_OscConfig+0x512>
 8001e68:	4b9d      	ldr	r3, [pc, #628]	@ (80020e0 <HAL_RCC_OscConfig+0x764>)
 8001e6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e6c:	4a9c      	ldr	r2, [pc, #624]	@ (80020e0 <HAL_RCC_OscConfig+0x764>)
 8001e6e:	f023 0301 	bic.w	r3, r3, #1
 8001e72:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e74:	4b9a      	ldr	r3, [pc, #616]	@ (80020e0 <HAL_RCC_OscConfig+0x764>)
 8001e76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e78:	4a99      	ldr	r2, [pc, #612]	@ (80020e0 <HAL_RCC_OscConfig+0x764>)
 8001e7a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001e7e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e80:	4b97      	ldr	r3, [pc, #604]	@ (80020e0 <HAL_RCC_OscConfig+0x764>)
 8001e82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e84:	4a96      	ldr	r2, [pc, #600]	@ (80020e0 <HAL_RCC_OscConfig+0x764>)
 8001e86:	f023 0304 	bic.w	r3, r3, #4
 8001e8a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e8c:	e03f      	b.n	8001f0e <HAL_RCC_OscConfig+0x592>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	689b      	ldr	r3, [r3, #8]
 8001e92:	2b05      	cmp	r3, #5
 8001e94:	d112      	bne.n	8001ebc <HAL_RCC_OscConfig+0x540>
 8001e96:	4b92      	ldr	r3, [pc, #584]	@ (80020e0 <HAL_RCC_OscConfig+0x764>)
 8001e98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e9a:	4a91      	ldr	r2, [pc, #580]	@ (80020e0 <HAL_RCC_OscConfig+0x764>)
 8001e9c:	f043 0304 	orr.w	r3, r3, #4
 8001ea0:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ea2:	4b8f      	ldr	r3, [pc, #572]	@ (80020e0 <HAL_RCC_OscConfig+0x764>)
 8001ea4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ea6:	4a8e      	ldr	r2, [pc, #568]	@ (80020e0 <HAL_RCC_OscConfig+0x764>)
 8001ea8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001eac:	6713      	str	r3, [r2, #112]	@ 0x70
 8001eae:	4b8c      	ldr	r3, [pc, #560]	@ (80020e0 <HAL_RCC_OscConfig+0x764>)
 8001eb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001eb2:	4a8b      	ldr	r2, [pc, #556]	@ (80020e0 <HAL_RCC_OscConfig+0x764>)
 8001eb4:	f043 0301 	orr.w	r3, r3, #1
 8001eb8:	6713      	str	r3, [r2, #112]	@ 0x70
 8001eba:	e028      	b.n	8001f0e <HAL_RCC_OscConfig+0x592>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	2b85      	cmp	r3, #133	@ 0x85
 8001ec2:	d112      	bne.n	8001eea <HAL_RCC_OscConfig+0x56e>
 8001ec4:	4b86      	ldr	r3, [pc, #536]	@ (80020e0 <HAL_RCC_OscConfig+0x764>)
 8001ec6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ec8:	4a85      	ldr	r2, [pc, #532]	@ (80020e0 <HAL_RCC_OscConfig+0x764>)
 8001eca:	f043 0304 	orr.w	r3, r3, #4
 8001ece:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ed0:	4b83      	ldr	r3, [pc, #524]	@ (80020e0 <HAL_RCC_OscConfig+0x764>)
 8001ed2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ed4:	4a82      	ldr	r2, [pc, #520]	@ (80020e0 <HAL_RCC_OscConfig+0x764>)
 8001ed6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001eda:	6713      	str	r3, [r2, #112]	@ 0x70
 8001edc:	4b80      	ldr	r3, [pc, #512]	@ (80020e0 <HAL_RCC_OscConfig+0x764>)
 8001ede:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ee0:	4a7f      	ldr	r2, [pc, #508]	@ (80020e0 <HAL_RCC_OscConfig+0x764>)
 8001ee2:	f043 0301 	orr.w	r3, r3, #1
 8001ee6:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ee8:	e011      	b.n	8001f0e <HAL_RCC_OscConfig+0x592>
 8001eea:	4b7d      	ldr	r3, [pc, #500]	@ (80020e0 <HAL_RCC_OscConfig+0x764>)
 8001eec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001eee:	4a7c      	ldr	r2, [pc, #496]	@ (80020e0 <HAL_RCC_OscConfig+0x764>)
 8001ef0:	f023 0301 	bic.w	r3, r3, #1
 8001ef4:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ef6:	4b7a      	ldr	r3, [pc, #488]	@ (80020e0 <HAL_RCC_OscConfig+0x764>)
 8001ef8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001efa:	4a79      	ldr	r2, [pc, #484]	@ (80020e0 <HAL_RCC_OscConfig+0x764>)
 8001efc:	f023 0304 	bic.w	r3, r3, #4
 8001f00:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f02:	4b77      	ldr	r3, [pc, #476]	@ (80020e0 <HAL_RCC_OscConfig+0x764>)
 8001f04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f06:	4a76      	ldr	r2, [pc, #472]	@ (80020e0 <HAL_RCC_OscConfig+0x764>)
 8001f08:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001f0c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d015      	beq.n	8001f42 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f16:	f7ff fa29 	bl	800136c <HAL_GetTick>
 8001f1a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001f1c:	e00a      	b.n	8001f34 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f1e:	f7ff fa25 	bl	800136c <HAL_GetTick>
 8001f22:	4602      	mov	r2, r0
 8001f24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f26:	1ad3      	subs	r3, r2, r3
 8001f28:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d901      	bls.n	8001f34 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8001f30:	2303      	movs	r3, #3
 8001f32:	e14c      	b.n	80021ce <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001f34:	4b6a      	ldr	r3, [pc, #424]	@ (80020e0 <HAL_RCC_OscConfig+0x764>)
 8001f36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f38:	f003 0302 	and.w	r3, r3, #2
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d0ee      	beq.n	8001f1e <HAL_RCC_OscConfig+0x5a2>
 8001f40:	e014      	b.n	8001f6c <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f42:	f7ff fa13 	bl	800136c <HAL_GetTick>
 8001f46:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001f48:	e00a      	b.n	8001f60 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f4a:	f7ff fa0f 	bl	800136c <HAL_GetTick>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f52:	1ad3      	subs	r3, r2, r3
 8001f54:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d901      	bls.n	8001f60 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8001f5c:	2303      	movs	r3, #3
 8001f5e:	e136      	b.n	80021ce <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001f60:	4b5f      	ldr	r3, [pc, #380]	@ (80020e0 <HAL_RCC_OscConfig+0x764>)
 8001f62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f64:	f003 0302 	and.w	r3, r3, #2
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d1ee      	bne.n	8001f4a <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	f000 812b 	beq.w	80021cc <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001f76:	4b5a      	ldr	r3, [pc, #360]	@ (80020e0 <HAL_RCC_OscConfig+0x764>)
 8001f78:	691b      	ldr	r3, [r3, #16]
 8001f7a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001f7e:	2b18      	cmp	r3, #24
 8001f80:	f000 80bb 	beq.w	80020fa <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f88:	2b02      	cmp	r3, #2
 8001f8a:	f040 8095 	bne.w	80020b8 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f8e:	4b54      	ldr	r3, [pc, #336]	@ (80020e0 <HAL_RCC_OscConfig+0x764>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a53      	ldr	r2, [pc, #332]	@ (80020e0 <HAL_RCC_OscConfig+0x764>)
 8001f94:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001f98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f9a:	f7ff f9e7 	bl	800136c <HAL_GetTick>
 8001f9e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001fa0:	e008      	b.n	8001fb4 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fa2:	f7ff f9e3 	bl	800136c <HAL_GetTick>
 8001fa6:	4602      	mov	r2, r0
 8001fa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001faa:	1ad3      	subs	r3, r2, r3
 8001fac:	2b02      	cmp	r3, #2
 8001fae:	d901      	bls.n	8001fb4 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8001fb0:	2303      	movs	r3, #3
 8001fb2:	e10c      	b.n	80021ce <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001fb4:	4b4a      	ldr	r3, [pc, #296]	@ (80020e0 <HAL_RCC_OscConfig+0x764>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d1f0      	bne.n	8001fa2 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fc0:	4b47      	ldr	r3, [pc, #284]	@ (80020e0 <HAL_RCC_OscConfig+0x764>)
 8001fc2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001fc4:	4b47      	ldr	r3, [pc, #284]	@ (80020e4 <HAL_RCC_OscConfig+0x768>)
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	687a      	ldr	r2, [r7, #4]
 8001fca:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8001fcc:	687a      	ldr	r2, [r7, #4]
 8001fce:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001fd0:	0112      	lsls	r2, r2, #4
 8001fd2:	430a      	orrs	r2, r1
 8001fd4:	4942      	ldr	r1, [pc, #264]	@ (80020e0 <HAL_RCC_OscConfig+0x764>)
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	628b      	str	r3, [r1, #40]	@ 0x28
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fde:	3b01      	subs	r3, #1
 8001fe0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fe8:	3b01      	subs	r3, #1
 8001fea:	025b      	lsls	r3, r3, #9
 8001fec:	b29b      	uxth	r3, r3
 8001fee:	431a      	orrs	r2, r3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ff4:	3b01      	subs	r3, #1
 8001ff6:	041b      	lsls	r3, r3, #16
 8001ff8:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8001ffc:	431a      	orrs	r2, r3
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002002:	3b01      	subs	r3, #1
 8002004:	061b      	lsls	r3, r3, #24
 8002006:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800200a:	4935      	ldr	r1, [pc, #212]	@ (80020e0 <HAL_RCC_OscConfig+0x764>)
 800200c:	4313      	orrs	r3, r2
 800200e:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002010:	4b33      	ldr	r3, [pc, #204]	@ (80020e0 <HAL_RCC_OscConfig+0x764>)
 8002012:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002014:	4a32      	ldr	r2, [pc, #200]	@ (80020e0 <HAL_RCC_OscConfig+0x764>)
 8002016:	f023 0301 	bic.w	r3, r3, #1
 800201a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800201c:	4b30      	ldr	r3, [pc, #192]	@ (80020e0 <HAL_RCC_OscConfig+0x764>)
 800201e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002020:	4b31      	ldr	r3, [pc, #196]	@ (80020e8 <HAL_RCC_OscConfig+0x76c>)
 8002022:	4013      	ands	r3, r2
 8002024:	687a      	ldr	r2, [r7, #4]
 8002026:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002028:	00d2      	lsls	r2, r2, #3
 800202a:	492d      	ldr	r1, [pc, #180]	@ (80020e0 <HAL_RCC_OscConfig+0x764>)
 800202c:	4313      	orrs	r3, r2
 800202e:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002030:	4b2b      	ldr	r3, [pc, #172]	@ (80020e0 <HAL_RCC_OscConfig+0x764>)
 8002032:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002034:	f023 020c 	bic.w	r2, r3, #12
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800203c:	4928      	ldr	r1, [pc, #160]	@ (80020e0 <HAL_RCC_OscConfig+0x764>)
 800203e:	4313      	orrs	r3, r2
 8002040:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002042:	4b27      	ldr	r3, [pc, #156]	@ (80020e0 <HAL_RCC_OscConfig+0x764>)
 8002044:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002046:	f023 0202 	bic.w	r2, r3, #2
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800204e:	4924      	ldr	r1, [pc, #144]	@ (80020e0 <HAL_RCC_OscConfig+0x764>)
 8002050:	4313      	orrs	r3, r2
 8002052:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002054:	4b22      	ldr	r3, [pc, #136]	@ (80020e0 <HAL_RCC_OscConfig+0x764>)
 8002056:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002058:	4a21      	ldr	r2, [pc, #132]	@ (80020e0 <HAL_RCC_OscConfig+0x764>)
 800205a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800205e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002060:	4b1f      	ldr	r3, [pc, #124]	@ (80020e0 <HAL_RCC_OscConfig+0x764>)
 8002062:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002064:	4a1e      	ldr	r2, [pc, #120]	@ (80020e0 <HAL_RCC_OscConfig+0x764>)
 8002066:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800206a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800206c:	4b1c      	ldr	r3, [pc, #112]	@ (80020e0 <HAL_RCC_OscConfig+0x764>)
 800206e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002070:	4a1b      	ldr	r2, [pc, #108]	@ (80020e0 <HAL_RCC_OscConfig+0x764>)
 8002072:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002076:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002078:	4b19      	ldr	r3, [pc, #100]	@ (80020e0 <HAL_RCC_OscConfig+0x764>)
 800207a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800207c:	4a18      	ldr	r2, [pc, #96]	@ (80020e0 <HAL_RCC_OscConfig+0x764>)
 800207e:	f043 0301 	orr.w	r3, r3, #1
 8002082:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002084:	4b16      	ldr	r3, [pc, #88]	@ (80020e0 <HAL_RCC_OscConfig+0x764>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a15      	ldr	r2, [pc, #84]	@ (80020e0 <HAL_RCC_OscConfig+0x764>)
 800208a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800208e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002090:	f7ff f96c 	bl	800136c <HAL_GetTick>
 8002094:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002096:	e008      	b.n	80020aa <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002098:	f7ff f968 	bl	800136c <HAL_GetTick>
 800209c:	4602      	mov	r2, r0
 800209e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	2b02      	cmp	r3, #2
 80020a4:	d901      	bls.n	80020aa <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 80020a6:	2303      	movs	r3, #3
 80020a8:	e091      	b.n	80021ce <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80020aa:	4b0d      	ldr	r3, [pc, #52]	@ (80020e0 <HAL_RCC_OscConfig+0x764>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d0f0      	beq.n	8002098 <HAL_RCC_OscConfig+0x71c>
 80020b6:	e089      	b.n	80021cc <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020b8:	4b09      	ldr	r3, [pc, #36]	@ (80020e0 <HAL_RCC_OscConfig+0x764>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a08      	ldr	r2, [pc, #32]	@ (80020e0 <HAL_RCC_OscConfig+0x764>)
 80020be:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80020c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020c4:	f7ff f952 	bl	800136c <HAL_GetTick>
 80020c8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80020ca:	e00f      	b.n	80020ec <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020cc:	f7ff f94e 	bl	800136c <HAL_GetTick>
 80020d0:	4602      	mov	r2, r0
 80020d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	2b02      	cmp	r3, #2
 80020d8:	d908      	bls.n	80020ec <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 80020da:	2303      	movs	r3, #3
 80020dc:	e077      	b.n	80021ce <HAL_RCC_OscConfig+0x852>
 80020de:	bf00      	nop
 80020e0:	58024400 	.word	0x58024400
 80020e4:	fffffc0c 	.word	0xfffffc0c
 80020e8:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80020ec:	4b3a      	ldr	r3, [pc, #232]	@ (80021d8 <HAL_RCC_OscConfig+0x85c>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d1e9      	bne.n	80020cc <HAL_RCC_OscConfig+0x750>
 80020f8:	e068      	b.n	80021cc <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80020fa:	4b37      	ldr	r3, [pc, #220]	@ (80021d8 <HAL_RCC_OscConfig+0x85c>)
 80020fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020fe:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002100:	4b35      	ldr	r3, [pc, #212]	@ (80021d8 <HAL_RCC_OscConfig+0x85c>)
 8002102:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002104:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800210a:	2b01      	cmp	r3, #1
 800210c:	d031      	beq.n	8002172 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	f003 0203 	and.w	r2, r3, #3
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002118:	429a      	cmp	r2, r3
 800211a:	d12a      	bne.n	8002172 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	091b      	lsrs	r3, r3, #4
 8002120:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002128:	429a      	cmp	r2, r3
 800212a:	d122      	bne.n	8002172 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002136:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002138:	429a      	cmp	r2, r3
 800213a:	d11a      	bne.n	8002172 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	0a5b      	lsrs	r3, r3, #9
 8002140:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002148:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800214a:	429a      	cmp	r2, r3
 800214c:	d111      	bne.n	8002172 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	0c1b      	lsrs	r3, r3, #16
 8002152:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800215a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800215c:	429a      	cmp	r2, r3
 800215e:	d108      	bne.n	8002172 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	0e1b      	lsrs	r3, r3, #24
 8002164:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800216c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800216e:	429a      	cmp	r2, r3
 8002170:	d001      	beq.n	8002176 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e02b      	b.n	80021ce <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002176:	4b18      	ldr	r3, [pc, #96]	@ (80021d8 <HAL_RCC_OscConfig+0x85c>)
 8002178:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800217a:	08db      	lsrs	r3, r3, #3
 800217c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002180:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002186:	693a      	ldr	r2, [r7, #16]
 8002188:	429a      	cmp	r2, r3
 800218a:	d01f      	beq.n	80021cc <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800218c:	4b12      	ldr	r3, [pc, #72]	@ (80021d8 <HAL_RCC_OscConfig+0x85c>)
 800218e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002190:	4a11      	ldr	r2, [pc, #68]	@ (80021d8 <HAL_RCC_OscConfig+0x85c>)
 8002192:	f023 0301 	bic.w	r3, r3, #1
 8002196:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002198:	f7ff f8e8 	bl	800136c <HAL_GetTick>
 800219c:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800219e:	bf00      	nop
 80021a0:	f7ff f8e4 	bl	800136c <HAL_GetTick>
 80021a4:	4602      	mov	r2, r0
 80021a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d0f9      	beq.n	80021a0 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80021ac:	4b0a      	ldr	r3, [pc, #40]	@ (80021d8 <HAL_RCC_OscConfig+0x85c>)
 80021ae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80021b0:	4b0a      	ldr	r3, [pc, #40]	@ (80021dc <HAL_RCC_OscConfig+0x860>)
 80021b2:	4013      	ands	r3, r2
 80021b4:	687a      	ldr	r2, [r7, #4]
 80021b6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80021b8:	00d2      	lsls	r2, r2, #3
 80021ba:	4907      	ldr	r1, [pc, #28]	@ (80021d8 <HAL_RCC_OscConfig+0x85c>)
 80021bc:	4313      	orrs	r3, r2
 80021be:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80021c0:	4b05      	ldr	r3, [pc, #20]	@ (80021d8 <HAL_RCC_OscConfig+0x85c>)
 80021c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021c4:	4a04      	ldr	r2, [pc, #16]	@ (80021d8 <HAL_RCC_OscConfig+0x85c>)
 80021c6:	f043 0301 	orr.w	r3, r3, #1
 80021ca:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80021cc:	2300      	movs	r3, #0
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3730      	adds	r7, #48	@ 0x30
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	58024400 	.word	0x58024400
 80021dc:	ffff0007 	.word	0xffff0007

080021e0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b086      	sub	sp, #24
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
 80021e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d101      	bne.n	80021f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021f0:	2301      	movs	r3, #1
 80021f2:	e19c      	b.n	800252e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80021f4:	4b8a      	ldr	r3, [pc, #552]	@ (8002420 <HAL_RCC_ClockConfig+0x240>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 030f 	and.w	r3, r3, #15
 80021fc:	683a      	ldr	r2, [r7, #0]
 80021fe:	429a      	cmp	r2, r3
 8002200:	d910      	bls.n	8002224 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002202:	4b87      	ldr	r3, [pc, #540]	@ (8002420 <HAL_RCC_ClockConfig+0x240>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f023 020f 	bic.w	r2, r3, #15
 800220a:	4985      	ldr	r1, [pc, #532]	@ (8002420 <HAL_RCC_ClockConfig+0x240>)
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	4313      	orrs	r3, r2
 8002210:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002212:	4b83      	ldr	r3, [pc, #524]	@ (8002420 <HAL_RCC_ClockConfig+0x240>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f003 030f 	and.w	r3, r3, #15
 800221a:	683a      	ldr	r2, [r7, #0]
 800221c:	429a      	cmp	r2, r3
 800221e:	d001      	beq.n	8002224 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002220:	2301      	movs	r3, #1
 8002222:	e184      	b.n	800252e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f003 0304 	and.w	r3, r3, #4
 800222c:	2b00      	cmp	r3, #0
 800222e:	d010      	beq.n	8002252 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	691a      	ldr	r2, [r3, #16]
 8002234:	4b7b      	ldr	r3, [pc, #492]	@ (8002424 <HAL_RCC_ClockConfig+0x244>)
 8002236:	699b      	ldr	r3, [r3, #24]
 8002238:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800223c:	429a      	cmp	r2, r3
 800223e:	d908      	bls.n	8002252 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002240:	4b78      	ldr	r3, [pc, #480]	@ (8002424 <HAL_RCC_ClockConfig+0x244>)
 8002242:	699b      	ldr	r3, [r3, #24]
 8002244:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	691b      	ldr	r3, [r3, #16]
 800224c:	4975      	ldr	r1, [pc, #468]	@ (8002424 <HAL_RCC_ClockConfig+0x244>)
 800224e:	4313      	orrs	r3, r2
 8002250:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 0308 	and.w	r3, r3, #8
 800225a:	2b00      	cmp	r3, #0
 800225c:	d010      	beq.n	8002280 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	695a      	ldr	r2, [r3, #20]
 8002262:	4b70      	ldr	r3, [pc, #448]	@ (8002424 <HAL_RCC_ClockConfig+0x244>)
 8002264:	69db      	ldr	r3, [r3, #28]
 8002266:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800226a:	429a      	cmp	r2, r3
 800226c:	d908      	bls.n	8002280 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800226e:	4b6d      	ldr	r3, [pc, #436]	@ (8002424 <HAL_RCC_ClockConfig+0x244>)
 8002270:	69db      	ldr	r3, [r3, #28]
 8002272:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	695b      	ldr	r3, [r3, #20]
 800227a:	496a      	ldr	r1, [pc, #424]	@ (8002424 <HAL_RCC_ClockConfig+0x244>)
 800227c:	4313      	orrs	r3, r2
 800227e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 0310 	and.w	r3, r3, #16
 8002288:	2b00      	cmp	r3, #0
 800228a:	d010      	beq.n	80022ae <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	699a      	ldr	r2, [r3, #24]
 8002290:	4b64      	ldr	r3, [pc, #400]	@ (8002424 <HAL_RCC_ClockConfig+0x244>)
 8002292:	69db      	ldr	r3, [r3, #28]
 8002294:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002298:	429a      	cmp	r2, r3
 800229a:	d908      	bls.n	80022ae <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800229c:	4b61      	ldr	r3, [pc, #388]	@ (8002424 <HAL_RCC_ClockConfig+0x244>)
 800229e:	69db      	ldr	r3, [r3, #28]
 80022a0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	699b      	ldr	r3, [r3, #24]
 80022a8:	495e      	ldr	r1, [pc, #376]	@ (8002424 <HAL_RCC_ClockConfig+0x244>)
 80022aa:	4313      	orrs	r3, r2
 80022ac:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 0320 	and.w	r3, r3, #32
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d010      	beq.n	80022dc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	69da      	ldr	r2, [r3, #28]
 80022be:	4b59      	ldr	r3, [pc, #356]	@ (8002424 <HAL_RCC_ClockConfig+0x244>)
 80022c0:	6a1b      	ldr	r3, [r3, #32]
 80022c2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80022c6:	429a      	cmp	r2, r3
 80022c8:	d908      	bls.n	80022dc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80022ca:	4b56      	ldr	r3, [pc, #344]	@ (8002424 <HAL_RCC_ClockConfig+0x244>)
 80022cc:	6a1b      	ldr	r3, [r3, #32]
 80022ce:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	69db      	ldr	r3, [r3, #28]
 80022d6:	4953      	ldr	r1, [pc, #332]	@ (8002424 <HAL_RCC_ClockConfig+0x244>)
 80022d8:	4313      	orrs	r3, r2
 80022da:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f003 0302 	and.w	r3, r3, #2
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d010      	beq.n	800230a <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	68da      	ldr	r2, [r3, #12]
 80022ec:	4b4d      	ldr	r3, [pc, #308]	@ (8002424 <HAL_RCC_ClockConfig+0x244>)
 80022ee:	699b      	ldr	r3, [r3, #24]
 80022f0:	f003 030f 	and.w	r3, r3, #15
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d908      	bls.n	800230a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022f8:	4b4a      	ldr	r3, [pc, #296]	@ (8002424 <HAL_RCC_ClockConfig+0x244>)
 80022fa:	699b      	ldr	r3, [r3, #24]
 80022fc:	f023 020f 	bic.w	r2, r3, #15
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	4947      	ldr	r1, [pc, #284]	@ (8002424 <HAL_RCC_ClockConfig+0x244>)
 8002306:	4313      	orrs	r3, r2
 8002308:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 0301 	and.w	r3, r3, #1
 8002312:	2b00      	cmp	r3, #0
 8002314:	d055      	beq.n	80023c2 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002316:	4b43      	ldr	r3, [pc, #268]	@ (8002424 <HAL_RCC_ClockConfig+0x244>)
 8002318:	699b      	ldr	r3, [r3, #24]
 800231a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	4940      	ldr	r1, [pc, #256]	@ (8002424 <HAL_RCC_ClockConfig+0x244>)
 8002324:	4313      	orrs	r3, r2
 8002326:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	2b02      	cmp	r3, #2
 800232e:	d107      	bne.n	8002340 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002330:	4b3c      	ldr	r3, [pc, #240]	@ (8002424 <HAL_RCC_ClockConfig+0x244>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002338:	2b00      	cmp	r3, #0
 800233a:	d121      	bne.n	8002380 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	e0f6      	b.n	800252e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	2b03      	cmp	r3, #3
 8002346:	d107      	bne.n	8002358 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002348:	4b36      	ldr	r3, [pc, #216]	@ (8002424 <HAL_RCC_ClockConfig+0x244>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002350:	2b00      	cmp	r3, #0
 8002352:	d115      	bne.n	8002380 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002354:	2301      	movs	r3, #1
 8002356:	e0ea      	b.n	800252e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	2b01      	cmp	r3, #1
 800235e:	d107      	bne.n	8002370 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002360:	4b30      	ldr	r3, [pc, #192]	@ (8002424 <HAL_RCC_ClockConfig+0x244>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002368:	2b00      	cmp	r3, #0
 800236a:	d109      	bne.n	8002380 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	e0de      	b.n	800252e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002370:	4b2c      	ldr	r3, [pc, #176]	@ (8002424 <HAL_RCC_ClockConfig+0x244>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 0304 	and.w	r3, r3, #4
 8002378:	2b00      	cmp	r3, #0
 800237a:	d101      	bne.n	8002380 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	e0d6      	b.n	800252e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002380:	4b28      	ldr	r3, [pc, #160]	@ (8002424 <HAL_RCC_ClockConfig+0x244>)
 8002382:	691b      	ldr	r3, [r3, #16]
 8002384:	f023 0207 	bic.w	r2, r3, #7
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	4925      	ldr	r1, [pc, #148]	@ (8002424 <HAL_RCC_ClockConfig+0x244>)
 800238e:	4313      	orrs	r3, r2
 8002390:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002392:	f7fe ffeb 	bl	800136c <HAL_GetTick>
 8002396:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002398:	e00a      	b.n	80023b0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800239a:	f7fe ffe7 	bl	800136c <HAL_GetTick>
 800239e:	4602      	mov	r2, r0
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	1ad3      	subs	r3, r2, r3
 80023a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d901      	bls.n	80023b0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80023ac:	2303      	movs	r3, #3
 80023ae:	e0be      	b.n	800252e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023b0:	4b1c      	ldr	r3, [pc, #112]	@ (8002424 <HAL_RCC_ClockConfig+0x244>)
 80023b2:	691b      	ldr	r3, [r3, #16]
 80023b4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	00db      	lsls	r3, r3, #3
 80023be:	429a      	cmp	r2, r3
 80023c0:	d1eb      	bne.n	800239a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 0302 	and.w	r3, r3, #2
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d010      	beq.n	80023f0 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	68da      	ldr	r2, [r3, #12]
 80023d2:	4b14      	ldr	r3, [pc, #80]	@ (8002424 <HAL_RCC_ClockConfig+0x244>)
 80023d4:	699b      	ldr	r3, [r3, #24]
 80023d6:	f003 030f 	and.w	r3, r3, #15
 80023da:	429a      	cmp	r2, r3
 80023dc:	d208      	bcs.n	80023f0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023de:	4b11      	ldr	r3, [pc, #68]	@ (8002424 <HAL_RCC_ClockConfig+0x244>)
 80023e0:	699b      	ldr	r3, [r3, #24]
 80023e2:	f023 020f 	bic.w	r2, r3, #15
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	68db      	ldr	r3, [r3, #12]
 80023ea:	490e      	ldr	r1, [pc, #56]	@ (8002424 <HAL_RCC_ClockConfig+0x244>)
 80023ec:	4313      	orrs	r3, r2
 80023ee:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80023f0:	4b0b      	ldr	r3, [pc, #44]	@ (8002420 <HAL_RCC_ClockConfig+0x240>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f003 030f 	and.w	r3, r3, #15
 80023f8:	683a      	ldr	r2, [r7, #0]
 80023fa:	429a      	cmp	r2, r3
 80023fc:	d214      	bcs.n	8002428 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023fe:	4b08      	ldr	r3, [pc, #32]	@ (8002420 <HAL_RCC_ClockConfig+0x240>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f023 020f 	bic.w	r2, r3, #15
 8002406:	4906      	ldr	r1, [pc, #24]	@ (8002420 <HAL_RCC_ClockConfig+0x240>)
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	4313      	orrs	r3, r2
 800240c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800240e:	4b04      	ldr	r3, [pc, #16]	@ (8002420 <HAL_RCC_ClockConfig+0x240>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 030f 	and.w	r3, r3, #15
 8002416:	683a      	ldr	r2, [r7, #0]
 8002418:	429a      	cmp	r2, r3
 800241a:	d005      	beq.n	8002428 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	e086      	b.n	800252e <HAL_RCC_ClockConfig+0x34e>
 8002420:	52002000 	.word	0x52002000
 8002424:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 0304 	and.w	r3, r3, #4
 8002430:	2b00      	cmp	r3, #0
 8002432:	d010      	beq.n	8002456 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	691a      	ldr	r2, [r3, #16]
 8002438:	4b3f      	ldr	r3, [pc, #252]	@ (8002538 <HAL_RCC_ClockConfig+0x358>)
 800243a:	699b      	ldr	r3, [r3, #24]
 800243c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002440:	429a      	cmp	r2, r3
 8002442:	d208      	bcs.n	8002456 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002444:	4b3c      	ldr	r3, [pc, #240]	@ (8002538 <HAL_RCC_ClockConfig+0x358>)
 8002446:	699b      	ldr	r3, [r3, #24]
 8002448:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	691b      	ldr	r3, [r3, #16]
 8002450:	4939      	ldr	r1, [pc, #228]	@ (8002538 <HAL_RCC_ClockConfig+0x358>)
 8002452:	4313      	orrs	r3, r2
 8002454:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 0308 	and.w	r3, r3, #8
 800245e:	2b00      	cmp	r3, #0
 8002460:	d010      	beq.n	8002484 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	695a      	ldr	r2, [r3, #20]
 8002466:	4b34      	ldr	r3, [pc, #208]	@ (8002538 <HAL_RCC_ClockConfig+0x358>)
 8002468:	69db      	ldr	r3, [r3, #28]
 800246a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800246e:	429a      	cmp	r2, r3
 8002470:	d208      	bcs.n	8002484 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002472:	4b31      	ldr	r3, [pc, #196]	@ (8002538 <HAL_RCC_ClockConfig+0x358>)
 8002474:	69db      	ldr	r3, [r3, #28]
 8002476:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	695b      	ldr	r3, [r3, #20]
 800247e:	492e      	ldr	r1, [pc, #184]	@ (8002538 <HAL_RCC_ClockConfig+0x358>)
 8002480:	4313      	orrs	r3, r2
 8002482:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 0310 	and.w	r3, r3, #16
 800248c:	2b00      	cmp	r3, #0
 800248e:	d010      	beq.n	80024b2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	699a      	ldr	r2, [r3, #24]
 8002494:	4b28      	ldr	r3, [pc, #160]	@ (8002538 <HAL_RCC_ClockConfig+0x358>)
 8002496:	69db      	ldr	r3, [r3, #28]
 8002498:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800249c:	429a      	cmp	r2, r3
 800249e:	d208      	bcs.n	80024b2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80024a0:	4b25      	ldr	r3, [pc, #148]	@ (8002538 <HAL_RCC_ClockConfig+0x358>)
 80024a2:	69db      	ldr	r3, [r3, #28]
 80024a4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	699b      	ldr	r3, [r3, #24]
 80024ac:	4922      	ldr	r1, [pc, #136]	@ (8002538 <HAL_RCC_ClockConfig+0x358>)
 80024ae:	4313      	orrs	r3, r2
 80024b0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 0320 	and.w	r3, r3, #32
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d010      	beq.n	80024e0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	69da      	ldr	r2, [r3, #28]
 80024c2:	4b1d      	ldr	r3, [pc, #116]	@ (8002538 <HAL_RCC_ClockConfig+0x358>)
 80024c4:	6a1b      	ldr	r3, [r3, #32]
 80024c6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80024ca:	429a      	cmp	r2, r3
 80024cc:	d208      	bcs.n	80024e0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80024ce:	4b1a      	ldr	r3, [pc, #104]	@ (8002538 <HAL_RCC_ClockConfig+0x358>)
 80024d0:	6a1b      	ldr	r3, [r3, #32]
 80024d2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	69db      	ldr	r3, [r3, #28]
 80024da:	4917      	ldr	r1, [pc, #92]	@ (8002538 <HAL_RCC_ClockConfig+0x358>)
 80024dc:	4313      	orrs	r3, r2
 80024de:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80024e0:	f000 f834 	bl	800254c <HAL_RCC_GetSysClockFreq>
 80024e4:	4602      	mov	r2, r0
 80024e6:	4b14      	ldr	r3, [pc, #80]	@ (8002538 <HAL_RCC_ClockConfig+0x358>)
 80024e8:	699b      	ldr	r3, [r3, #24]
 80024ea:	0a1b      	lsrs	r3, r3, #8
 80024ec:	f003 030f 	and.w	r3, r3, #15
 80024f0:	4912      	ldr	r1, [pc, #72]	@ (800253c <HAL_RCC_ClockConfig+0x35c>)
 80024f2:	5ccb      	ldrb	r3, [r1, r3]
 80024f4:	f003 031f 	and.w	r3, r3, #31
 80024f8:	fa22 f303 	lsr.w	r3, r2, r3
 80024fc:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80024fe:	4b0e      	ldr	r3, [pc, #56]	@ (8002538 <HAL_RCC_ClockConfig+0x358>)
 8002500:	699b      	ldr	r3, [r3, #24]
 8002502:	f003 030f 	and.w	r3, r3, #15
 8002506:	4a0d      	ldr	r2, [pc, #52]	@ (800253c <HAL_RCC_ClockConfig+0x35c>)
 8002508:	5cd3      	ldrb	r3, [r2, r3]
 800250a:	f003 031f 	and.w	r3, r3, #31
 800250e:	693a      	ldr	r2, [r7, #16]
 8002510:	fa22 f303 	lsr.w	r3, r2, r3
 8002514:	4a0a      	ldr	r2, [pc, #40]	@ (8002540 <HAL_RCC_ClockConfig+0x360>)
 8002516:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002518:	4a0a      	ldr	r2, [pc, #40]	@ (8002544 <HAL_RCC_ClockConfig+0x364>)
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800251e:	4b0a      	ldr	r3, [pc, #40]	@ (8002548 <HAL_RCC_ClockConfig+0x368>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4618      	mov	r0, r3
 8002524:	f7fe fbee 	bl	8000d04 <HAL_InitTick>
 8002528:	4603      	mov	r3, r0
 800252a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800252c:	7bfb      	ldrb	r3, [r7, #15]
}
 800252e:	4618      	mov	r0, r3
 8002530:	3718      	adds	r7, #24
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	58024400 	.word	0x58024400
 800253c:	0800d5f8 	.word	0x0800d5f8
 8002540:	24000004 	.word	0x24000004
 8002544:	24000000 	.word	0x24000000
 8002548:	24000008 	.word	0x24000008

0800254c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800254c:	b480      	push	{r7}
 800254e:	b089      	sub	sp, #36	@ 0x24
 8002550:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002552:	4bb3      	ldr	r3, [pc, #716]	@ (8002820 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002554:	691b      	ldr	r3, [r3, #16]
 8002556:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800255a:	2b18      	cmp	r3, #24
 800255c:	f200 8155 	bhi.w	800280a <HAL_RCC_GetSysClockFreq+0x2be>
 8002560:	a201      	add	r2, pc, #4	@ (adr r2, 8002568 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002562:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002566:	bf00      	nop
 8002568:	080025cd 	.word	0x080025cd
 800256c:	0800280b 	.word	0x0800280b
 8002570:	0800280b 	.word	0x0800280b
 8002574:	0800280b 	.word	0x0800280b
 8002578:	0800280b 	.word	0x0800280b
 800257c:	0800280b 	.word	0x0800280b
 8002580:	0800280b 	.word	0x0800280b
 8002584:	0800280b 	.word	0x0800280b
 8002588:	080025f3 	.word	0x080025f3
 800258c:	0800280b 	.word	0x0800280b
 8002590:	0800280b 	.word	0x0800280b
 8002594:	0800280b 	.word	0x0800280b
 8002598:	0800280b 	.word	0x0800280b
 800259c:	0800280b 	.word	0x0800280b
 80025a0:	0800280b 	.word	0x0800280b
 80025a4:	0800280b 	.word	0x0800280b
 80025a8:	080025f9 	.word	0x080025f9
 80025ac:	0800280b 	.word	0x0800280b
 80025b0:	0800280b 	.word	0x0800280b
 80025b4:	0800280b 	.word	0x0800280b
 80025b8:	0800280b 	.word	0x0800280b
 80025bc:	0800280b 	.word	0x0800280b
 80025c0:	0800280b 	.word	0x0800280b
 80025c4:	0800280b 	.word	0x0800280b
 80025c8:	080025ff 	.word	0x080025ff
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80025cc:	4b94      	ldr	r3, [pc, #592]	@ (8002820 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f003 0320 	and.w	r3, r3, #32
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d009      	beq.n	80025ec <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80025d8:	4b91      	ldr	r3, [pc, #580]	@ (8002820 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	08db      	lsrs	r3, r3, #3
 80025de:	f003 0303 	and.w	r3, r3, #3
 80025e2:	4a90      	ldr	r2, [pc, #576]	@ (8002824 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80025e4:	fa22 f303 	lsr.w	r3, r2, r3
 80025e8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80025ea:	e111      	b.n	8002810 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80025ec:	4b8d      	ldr	r3, [pc, #564]	@ (8002824 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80025ee:	61bb      	str	r3, [r7, #24]
      break;
 80025f0:	e10e      	b.n	8002810 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80025f2:	4b8d      	ldr	r3, [pc, #564]	@ (8002828 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80025f4:	61bb      	str	r3, [r7, #24]
      break;
 80025f6:	e10b      	b.n	8002810 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80025f8:	4b8c      	ldr	r3, [pc, #560]	@ (800282c <HAL_RCC_GetSysClockFreq+0x2e0>)
 80025fa:	61bb      	str	r3, [r7, #24]
      break;
 80025fc:	e108      	b.n	8002810 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80025fe:	4b88      	ldr	r3, [pc, #544]	@ (8002820 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002600:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002602:	f003 0303 	and.w	r3, r3, #3
 8002606:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002608:	4b85      	ldr	r3, [pc, #532]	@ (8002820 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800260a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800260c:	091b      	lsrs	r3, r3, #4
 800260e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002612:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002614:	4b82      	ldr	r3, [pc, #520]	@ (8002820 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002616:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002618:	f003 0301 	and.w	r3, r3, #1
 800261c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800261e:	4b80      	ldr	r3, [pc, #512]	@ (8002820 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002620:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002622:	08db      	lsrs	r3, r3, #3
 8002624:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002628:	68fa      	ldr	r2, [r7, #12]
 800262a:	fb02 f303 	mul.w	r3, r2, r3
 800262e:	ee07 3a90 	vmov	s15, r3
 8002632:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002636:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	2b00      	cmp	r3, #0
 800263e:	f000 80e1 	beq.w	8002804 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	2b02      	cmp	r3, #2
 8002646:	f000 8083 	beq.w	8002750 <HAL_RCC_GetSysClockFreq+0x204>
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	2b02      	cmp	r3, #2
 800264e:	f200 80a1 	bhi.w	8002794 <HAL_RCC_GetSysClockFreq+0x248>
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d003      	beq.n	8002660 <HAL_RCC_GetSysClockFreq+0x114>
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	2b01      	cmp	r3, #1
 800265c:	d056      	beq.n	800270c <HAL_RCC_GetSysClockFreq+0x1c0>
 800265e:	e099      	b.n	8002794 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002660:	4b6f      	ldr	r3, [pc, #444]	@ (8002820 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f003 0320 	and.w	r3, r3, #32
 8002668:	2b00      	cmp	r3, #0
 800266a:	d02d      	beq.n	80026c8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800266c:	4b6c      	ldr	r3, [pc, #432]	@ (8002820 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	08db      	lsrs	r3, r3, #3
 8002672:	f003 0303 	and.w	r3, r3, #3
 8002676:	4a6b      	ldr	r2, [pc, #428]	@ (8002824 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002678:	fa22 f303 	lsr.w	r3, r2, r3
 800267c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	ee07 3a90 	vmov	s15, r3
 8002684:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	ee07 3a90 	vmov	s15, r3
 800268e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002692:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002696:	4b62      	ldr	r3, [pc, #392]	@ (8002820 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800269a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800269e:	ee07 3a90 	vmov	s15, r3
 80026a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80026a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80026aa:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8002830 <HAL_RCC_GetSysClockFreq+0x2e4>
 80026ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80026b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80026b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80026ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80026be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026c2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80026c6:	e087      	b.n	80027d8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	ee07 3a90 	vmov	s15, r3
 80026ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026d2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8002834 <HAL_RCC_GetSysClockFreq+0x2e8>
 80026d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80026da:	4b51      	ldr	r3, [pc, #324]	@ (8002820 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026e2:	ee07 3a90 	vmov	s15, r3
 80026e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80026ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80026ee:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8002830 <HAL_RCC_GetSysClockFreq+0x2e4>
 80026f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80026f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80026fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80026fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002702:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002706:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800270a:	e065      	b.n	80027d8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	ee07 3a90 	vmov	s15, r3
 8002712:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002716:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8002838 <HAL_RCC_GetSysClockFreq+0x2ec>
 800271a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800271e:	4b40      	ldr	r3, [pc, #256]	@ (8002820 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002722:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002726:	ee07 3a90 	vmov	s15, r3
 800272a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800272e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002732:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8002830 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002736:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800273a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800273e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002742:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002746:	ee67 7a27 	vmul.f32	s15, s14, s15
 800274a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800274e:	e043      	b.n	80027d8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	ee07 3a90 	vmov	s15, r3
 8002756:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800275a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800283c <HAL_RCC_GetSysClockFreq+0x2f0>
 800275e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002762:	4b2f      	ldr	r3, [pc, #188]	@ (8002820 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002766:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800276a:	ee07 3a90 	vmov	s15, r3
 800276e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002772:	ed97 6a02 	vldr	s12, [r7, #8]
 8002776:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8002830 <HAL_RCC_GetSysClockFreq+0x2e4>
 800277a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800277e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002782:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002786:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800278a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800278e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002792:	e021      	b.n	80027d8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	ee07 3a90 	vmov	s15, r3
 800279a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800279e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002838 <HAL_RCC_GetSysClockFreq+0x2ec>
 80027a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80027a6:	4b1e      	ldr	r3, [pc, #120]	@ (8002820 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027ae:	ee07 3a90 	vmov	s15, r3
 80027b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80027b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80027ba:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8002830 <HAL_RCC_GetSysClockFreq+0x2e4>
 80027be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80027c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80027c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80027ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80027ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027d2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80027d6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80027d8:	4b11      	ldr	r3, [pc, #68]	@ (8002820 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027dc:	0a5b      	lsrs	r3, r3, #9
 80027de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80027e2:	3301      	adds	r3, #1
 80027e4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	ee07 3a90 	vmov	s15, r3
 80027ec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80027f0:	edd7 6a07 	vldr	s13, [r7, #28]
 80027f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80027f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80027fc:	ee17 3a90 	vmov	r3, s15
 8002800:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002802:	e005      	b.n	8002810 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002804:	2300      	movs	r3, #0
 8002806:	61bb      	str	r3, [r7, #24]
      break;
 8002808:	e002      	b.n	8002810 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800280a:	4b07      	ldr	r3, [pc, #28]	@ (8002828 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800280c:	61bb      	str	r3, [r7, #24]
      break;
 800280e:	bf00      	nop
  }

  return sysclockfreq;
 8002810:	69bb      	ldr	r3, [r7, #24]
}
 8002812:	4618      	mov	r0, r3
 8002814:	3724      	adds	r7, #36	@ 0x24
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr
 800281e:	bf00      	nop
 8002820:	58024400 	.word	0x58024400
 8002824:	03d09000 	.word	0x03d09000
 8002828:	003d0900 	.word	0x003d0900
 800282c:	016e3600 	.word	0x016e3600
 8002830:	46000000 	.word	0x46000000
 8002834:	4c742400 	.word	0x4c742400
 8002838:	4a742400 	.word	0x4a742400
 800283c:	4bb71b00 	.word	0x4bb71b00

08002840 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b082      	sub	sp, #8
 8002844:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8002846:	f7ff fe81 	bl	800254c <HAL_RCC_GetSysClockFreq>
 800284a:	4602      	mov	r2, r0
 800284c:	4b10      	ldr	r3, [pc, #64]	@ (8002890 <HAL_RCC_GetHCLKFreq+0x50>)
 800284e:	699b      	ldr	r3, [r3, #24]
 8002850:	0a1b      	lsrs	r3, r3, #8
 8002852:	f003 030f 	and.w	r3, r3, #15
 8002856:	490f      	ldr	r1, [pc, #60]	@ (8002894 <HAL_RCC_GetHCLKFreq+0x54>)
 8002858:	5ccb      	ldrb	r3, [r1, r3]
 800285a:	f003 031f 	and.w	r3, r3, #31
 800285e:	fa22 f303 	lsr.w	r3, r2, r3
 8002862:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8002864:	4b0a      	ldr	r3, [pc, #40]	@ (8002890 <HAL_RCC_GetHCLKFreq+0x50>)
 8002866:	699b      	ldr	r3, [r3, #24]
 8002868:	f003 030f 	and.w	r3, r3, #15
 800286c:	4a09      	ldr	r2, [pc, #36]	@ (8002894 <HAL_RCC_GetHCLKFreq+0x54>)
 800286e:	5cd3      	ldrb	r3, [r2, r3]
 8002870:	f003 031f 	and.w	r3, r3, #31
 8002874:	687a      	ldr	r2, [r7, #4]
 8002876:	fa22 f303 	lsr.w	r3, r2, r3
 800287a:	4a07      	ldr	r2, [pc, #28]	@ (8002898 <HAL_RCC_GetHCLKFreq+0x58>)
 800287c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800287e:	4a07      	ldr	r2, [pc, #28]	@ (800289c <HAL_RCC_GetHCLKFreq+0x5c>)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002884:	4b04      	ldr	r3, [pc, #16]	@ (8002898 <HAL_RCC_GetHCLKFreq+0x58>)
 8002886:	681b      	ldr	r3, [r3, #0]
}
 8002888:	4618      	mov	r0, r3
 800288a:	3708      	adds	r7, #8
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}
 8002890:	58024400 	.word	0x58024400
 8002894:	0800d5f8 	.word	0x0800d5f8
 8002898:	24000004 	.word	0x24000004
 800289c:	24000000 	.word	0x24000000

080028a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 80028a4:	f7ff ffcc 	bl	8002840 <HAL_RCC_GetHCLKFreq>
 80028a8:	4602      	mov	r2, r0
 80028aa:	4b06      	ldr	r3, [pc, #24]	@ (80028c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80028ac:	69db      	ldr	r3, [r3, #28]
 80028ae:	091b      	lsrs	r3, r3, #4
 80028b0:	f003 0307 	and.w	r3, r3, #7
 80028b4:	4904      	ldr	r1, [pc, #16]	@ (80028c8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80028b6:	5ccb      	ldrb	r3, [r1, r3]
 80028b8:	f003 031f 	and.w	r3, r3, #31
 80028bc:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	bd80      	pop	{r7, pc}
 80028c4:	58024400 	.word	0x58024400
 80028c8:	0800d5f8 	.word	0x0800d5f8

080028cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 80028d0:	f7ff ffb6 	bl	8002840 <HAL_RCC_GetHCLKFreq>
 80028d4:	4602      	mov	r2, r0
 80028d6:	4b06      	ldr	r3, [pc, #24]	@ (80028f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80028d8:	69db      	ldr	r3, [r3, #28]
 80028da:	0a1b      	lsrs	r3, r3, #8
 80028dc:	f003 0307 	and.w	r3, r3, #7
 80028e0:	4904      	ldr	r1, [pc, #16]	@ (80028f4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80028e2:	5ccb      	ldrb	r3, [r1, r3]
 80028e4:	f003 031f 	and.w	r3, r3, #31
 80028e8:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	bd80      	pop	{r7, pc}
 80028f0:	58024400 	.word	0x58024400
 80028f4:	0800d5f8 	.word	0x0800d5f8

080028f8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b083      	sub	sp, #12
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
 8002900:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	223f      	movs	r2, #63	@ 0x3f
 8002906:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002908:	4b1a      	ldr	r3, [pc, #104]	@ (8002974 <HAL_RCC_GetClockConfig+0x7c>)
 800290a:	691b      	ldr	r3, [r3, #16]
 800290c:	f003 0207 	and.w	r2, r3, #7
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	605a      	str	r2, [r3, #4]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
#else
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE);
 8002914:	4b17      	ldr	r3, [pc, #92]	@ (8002974 <HAL_RCC_GetClockConfig+0x7c>)
 8002916:	699b      	ldr	r3, [r3, #24]
 8002918:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE);
 8002920:	4b14      	ldr	r3, [pc, #80]	@ (8002974 <HAL_RCC_GetClockConfig+0x7c>)
 8002922:	699b      	ldr	r3, [r3, #24]
 8002924:	f003 020f 	and.w	r2, r3, #15
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE);
 800292c:	4b11      	ldr	r3, [pc, #68]	@ (8002974 <HAL_RCC_GetClockConfig+0x7c>)
 800292e:	699b      	ldr	r3, [r3, #24]
 8002930:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1);
 8002938:	4b0e      	ldr	r3, [pc, #56]	@ (8002974 <HAL_RCC_GetClockConfig+0x7c>)
 800293a:	69db      	ldr	r3, [r3, #28]
 800293c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2);
 8002944:	4b0b      	ldr	r3, [pc, #44]	@ (8002974 <HAL_RCC_GetClockConfig+0x7c>)
 8002946:	69db      	ldr	r3, [r3, #28]
 8002948:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
 8002950:	4b08      	ldr	r3, [pc, #32]	@ (8002974 <HAL_RCC_GetClockConfig+0x7c>)
 8002952:	6a1b      	ldr	r3, [r3, #32]
 8002954:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	61da      	str	r2, [r3, #28]
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800295c:	4b06      	ldr	r3, [pc, #24]	@ (8002978 <HAL_RCC_GetClockConfig+0x80>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f003 020f 	and.w	r2, r3, #15
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	601a      	str	r2, [r3, #0]
}
 8002968:	bf00      	nop
 800296a:	370c      	adds	r7, #12
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr
 8002974:	58024400 	.word	0x58024400
 8002978:	52002000 	.word	0x52002000

0800297c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800297c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002980:	b0c8      	sub	sp, #288	@ 0x120
 8002982:	af00      	add	r7, sp, #0
 8002984:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002988:	2300      	movs	r3, #0
 800298a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800298e:	2300      	movs	r3, #0
 8002990:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002994:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800299c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80029a0:	2500      	movs	r5, #0
 80029a2:	ea54 0305 	orrs.w	r3, r4, r5
 80029a6:	d049      	beq.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80029a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80029ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80029ae:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80029b2:	d02f      	beq.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80029b4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80029b8:	d828      	bhi.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0x90>
 80029ba:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80029be:	d01a      	beq.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80029c0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80029c4:	d822      	bhi.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0x90>
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d003      	beq.n	80029d2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80029ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80029ce:	d007      	beq.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80029d0:	e01c      	b.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80029d2:	4ba7      	ldr	r3, [pc, #668]	@ (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80029d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029d6:	4aa6      	ldr	r2, [pc, #664]	@ (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80029d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80029dc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80029de:	e01a      	b.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80029e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80029e4:	3308      	adds	r3, #8
 80029e6:	2102      	movs	r1, #2
 80029e8:	4618      	mov	r0, r3
 80029ea:	f001 fc43 	bl	8004274 <RCCEx_PLL2_Config>
 80029ee:	4603      	mov	r3, r0
 80029f0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80029f4:	e00f      	b.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80029f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80029fa:	3328      	adds	r3, #40	@ 0x28
 80029fc:	2102      	movs	r1, #2
 80029fe:	4618      	mov	r0, r3
 8002a00:	f001 fcea 	bl	80043d8 <RCCEx_PLL3_Config>
 8002a04:	4603      	mov	r3, r0
 8002a06:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002a0a:	e004      	b.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8002a12:	e000      	b.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002a14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a16:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d10a      	bne.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002a1e:	4b94      	ldr	r3, [pc, #592]	@ (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002a20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a22:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8002a26:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002a2a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a2c:	4a90      	ldr	r2, [pc, #576]	@ (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002a2e:	430b      	orrs	r3, r1
 8002a30:	6513      	str	r3, [r2, #80]	@ 0x50
 8002a32:	e003      	b.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a34:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8002a38:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002a3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a44:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8002a48:	f04f 0900 	mov.w	r9, #0
 8002a4c:	ea58 0309 	orrs.w	r3, r8, r9
 8002a50:	d047      	beq.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8002a52:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002a56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a58:	2b04      	cmp	r3, #4
 8002a5a:	d82a      	bhi.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002a5c:	a201      	add	r2, pc, #4	@ (adr r2, 8002a64 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002a5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a62:	bf00      	nop
 8002a64:	08002a79 	.word	0x08002a79
 8002a68:	08002a87 	.word	0x08002a87
 8002a6c:	08002a9d 	.word	0x08002a9d
 8002a70:	08002abb 	.word	0x08002abb
 8002a74:	08002abb 	.word	0x08002abb
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a78:	4b7d      	ldr	r3, [pc, #500]	@ (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002a7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a7c:	4a7c      	ldr	r2, [pc, #496]	@ (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002a7e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a82:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002a84:	e01a      	b.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002a86:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002a8a:	3308      	adds	r3, #8
 8002a8c:	2100      	movs	r1, #0
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f001 fbf0 	bl	8004274 <RCCEx_PLL2_Config>
 8002a94:	4603      	mov	r3, r0
 8002a96:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002a9a:	e00f      	b.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002a9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002aa0:	3328      	adds	r3, #40	@ 0x28
 8002aa2:	2100      	movs	r1, #0
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f001 fc97 	bl	80043d8 <RCCEx_PLL3_Config>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002ab0:	e004      	b.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8002ab8:	e000      	b.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8002aba:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002abc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d10a      	bne.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002ac4:	4b6a      	ldr	r3, [pc, #424]	@ (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002ac6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ac8:	f023 0107 	bic.w	r1, r3, #7
 8002acc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002ad0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ad2:	4a67      	ldr	r2, [pc, #412]	@ (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002ad4:	430b      	orrs	r3, r1
 8002ad6:	6513      	str	r3, [r2, #80]	@ 0x50
 8002ad8:	e003      	b.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ada:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8002ade:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8002ae2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aea:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8002aee:	f04f 0b00 	mov.w	fp, #0
 8002af2:	ea5a 030b 	orrs.w	r3, sl, fp
 8002af6:	d054      	beq.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8002af8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002afc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002afe:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8002b02:	d036      	beq.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8002b04:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8002b08:	d82f      	bhi.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002b0a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002b0e:	d032      	beq.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8002b10:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002b14:	d829      	bhi.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002b16:	2bc0      	cmp	r3, #192	@ 0xc0
 8002b18:	d02f      	beq.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8002b1a:	2bc0      	cmp	r3, #192	@ 0xc0
 8002b1c:	d825      	bhi.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002b1e:	2b80      	cmp	r3, #128	@ 0x80
 8002b20:	d018      	beq.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8002b22:	2b80      	cmp	r3, #128	@ 0x80
 8002b24:	d821      	bhi.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d002      	beq.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8002b2a:	2b40      	cmp	r3, #64	@ 0x40
 8002b2c:	d007      	beq.n	8002b3e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8002b2e:	e01c      	b.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b30:	4b4f      	ldr	r3, [pc, #316]	@ (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002b32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b34:	4a4e      	ldr	r2, [pc, #312]	@ (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002b36:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b3a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8002b3c:	e01e      	b.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002b3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002b42:	3308      	adds	r3, #8
 8002b44:	2100      	movs	r1, #0
 8002b46:	4618      	mov	r0, r3
 8002b48:	f001 fb94 	bl	8004274 <RCCEx_PLL2_Config>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8002b52:	e013      	b.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002b54:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002b58:	3328      	adds	r3, #40	@ 0x28
 8002b5a:	2100      	movs	r1, #0
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f001 fc3b 	bl	80043d8 <RCCEx_PLL3_Config>
 8002b62:	4603      	mov	r3, r0
 8002b64:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8002b68:	e008      	b.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8002b70:	e004      	b.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8002b72:	bf00      	nop
 8002b74:	e002      	b.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8002b76:	bf00      	nop
 8002b78:	e000      	b.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8002b7a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b7c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d10a      	bne.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8002b84:	4b3a      	ldr	r3, [pc, #232]	@ (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002b86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b88:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8002b8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002b90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b92:	4a37      	ldr	r2, [pc, #220]	@ (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002b94:	430b      	orrs	r3, r1
 8002b96:	6513      	str	r3, [r2, #80]	@ 0x50
 8002b98:	e003      	b.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b9a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8002b9e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8002ba2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002baa:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8002bae:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002bb8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8002bbc:	460b      	mov	r3, r1
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	d05c      	beq.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 8002bc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002bc6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bc8:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8002bcc:	d03b      	beq.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002bce:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8002bd2:	d834      	bhi.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8002bd4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002bd8:	d037      	beq.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8002bda:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002bde:	d82e      	bhi.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8002be0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8002be4:	d033      	beq.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8002be6:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8002bea:	d828      	bhi.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8002bec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002bf0:	d01a      	beq.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8002bf2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002bf6:	d822      	bhi.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d003      	beq.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x288>
 8002bfc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002c00:	d007      	beq.n	8002c12 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8002c02:	e01c      	b.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c04:	4b1a      	ldr	r3, [pc, #104]	@ (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002c06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c08:	4a19      	ldr	r2, [pc, #100]	@ (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002c0a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c0e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8002c10:	e01e      	b.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002c12:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002c16:	3308      	adds	r3, #8
 8002c18:	2100      	movs	r1, #0
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f001 fb2a 	bl	8004274 <RCCEx_PLL2_Config>
 8002c20:	4603      	mov	r3, r0
 8002c22:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8002c26:	e013      	b.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002c28:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002c2c:	3328      	adds	r3, #40	@ 0x28
 8002c2e:	2100      	movs	r1, #0
 8002c30:	4618      	mov	r0, r3
 8002c32:	f001 fbd1 	bl	80043d8 <RCCEx_PLL3_Config>
 8002c36:	4603      	mov	r3, r0
 8002c38:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8002c3c:	e008      	b.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8002c44:	e004      	b.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8002c46:	bf00      	nop
 8002c48:	e002      	b.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8002c4a:	bf00      	nop
 8002c4c:	e000      	b.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8002c4e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c50:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d10d      	bne.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8002c58:	4b05      	ldr	r3, [pc, #20]	@ (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002c5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c5c:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8002c60:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002c64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c66:	4a02      	ldr	r2, [pc, #8]	@ (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002c68:	430b      	orrs	r3, r1
 8002c6a:	6513      	str	r3, [r2, #80]	@ 0x50
 8002c6c:	e006      	b.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x300>
 8002c6e:	bf00      	nop
 8002c70:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c74:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8002c78:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8002c7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c84:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8002c88:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8002c92:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8002c96:	460b      	mov	r3, r1
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	d03a      	beq.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8002c9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002ca0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ca2:	2b30      	cmp	r3, #48	@ 0x30
 8002ca4:	d01f      	beq.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8002ca6:	2b30      	cmp	r3, #48	@ 0x30
 8002ca8:	d819      	bhi.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0x362>
 8002caa:	2b20      	cmp	r3, #32
 8002cac:	d00c      	beq.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8002cae:	2b20      	cmp	r3, #32
 8002cb0:	d815      	bhi.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0x362>
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d019      	beq.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8002cb6:	2b10      	cmp	r3, #16
 8002cb8:	d111      	bne.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002cba:	4bae      	ldr	r3, [pc, #696]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002cbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cbe:	4aad      	ldr	r2, [pc, #692]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002cc0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002cc4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8002cc6:	e011      	b.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002cc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002ccc:	3308      	adds	r3, #8
 8002cce:	2102      	movs	r1, #2
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f001 facf 	bl	8004274 <RCCEx_PLL2_Config>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8002cdc:	e006      	b.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8002ce4:	e002      	b.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8002ce6:	bf00      	nop
 8002ce8:	e000      	b.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8002cea:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002cec:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d10a      	bne.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8002cf4:	4b9f      	ldr	r3, [pc, #636]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002cf6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cf8:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8002cfc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002d00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d02:	4a9c      	ldr	r2, [pc, #624]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002d04:	430b      	orrs	r3, r1
 8002d06:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002d08:	e003      	b.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d0a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8002d0e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002d12:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d1a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8002d1e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8002d22:	2300      	movs	r3, #0
 8002d24:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8002d28:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8002d2c:	460b      	mov	r3, r1
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	d051      	beq.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8002d32:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002d36:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002d38:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002d3c:	d035      	beq.n	8002daa <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002d3e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002d42:	d82e      	bhi.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8002d44:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002d48:	d031      	beq.n	8002dae <HAL_RCCEx_PeriphCLKConfig+0x432>
 8002d4a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002d4e:	d828      	bhi.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8002d50:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d54:	d01a      	beq.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x410>
 8002d56:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d5a:	d822      	bhi.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d003      	beq.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8002d60:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d64:	d007      	beq.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8002d66:	e01c      	b.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d68:	4b82      	ldr	r3, [pc, #520]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002d6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d6c:	4a81      	ldr	r2, [pc, #516]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002d6e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d72:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002d74:	e01c      	b.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002d76:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002d7a:	3308      	adds	r3, #8
 8002d7c:	2100      	movs	r1, #0
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f001 fa78 	bl	8004274 <RCCEx_PLL2_Config>
 8002d84:	4603      	mov	r3, r0
 8002d86:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002d8a:	e011      	b.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002d8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002d90:	3328      	adds	r3, #40	@ 0x28
 8002d92:	2100      	movs	r1, #0
 8002d94:	4618      	mov	r0, r3
 8002d96:	f001 fb1f 	bl	80043d8 <RCCEx_PLL3_Config>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002da0:	e006      	b.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8002da8:	e002      	b.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8002daa:	bf00      	nop
 8002dac:	e000      	b.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8002dae:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002db0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d10a      	bne.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002db8:	4b6e      	ldr	r3, [pc, #440]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002dba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002dbc:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8002dc0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002dc4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002dc6:	4a6b      	ldr	r2, [pc, #428]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002dc8:	430b      	orrs	r3, r1
 8002dca:	6513      	str	r3, [r2, #80]	@ 0x50
 8002dcc:	e003      	b.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dce:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8002dd2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002dd6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dde:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8002de2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002de6:	2300      	movs	r3, #0
 8002de8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8002dec:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8002df0:	460b      	mov	r3, r1
 8002df2:	4313      	orrs	r3, r2
 8002df4:	d053      	beq.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8002df6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002dfa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002dfc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002e00:	d033      	beq.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8002e02:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002e06:	d82c      	bhi.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8002e08:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002e0c:	d02f      	beq.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8002e0e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002e12:	d826      	bhi.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8002e14:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002e18:	d02b      	beq.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8002e1a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002e1e:	d820      	bhi.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8002e20:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002e24:	d012      	beq.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8002e26:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002e2a:	d81a      	bhi.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d022      	beq.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8002e30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e34:	d115      	bne.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002e36:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002e3a:	3308      	adds	r3, #8
 8002e3c:	2101      	movs	r1, #1
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f001 fa18 	bl	8004274 <RCCEx_PLL2_Config>
 8002e44:	4603      	mov	r3, r0
 8002e46:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002e4a:	e015      	b.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002e4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002e50:	3328      	adds	r3, #40	@ 0x28
 8002e52:	2101      	movs	r1, #1
 8002e54:	4618      	mov	r0, r3
 8002e56:	f001 fabf 	bl	80043d8 <RCCEx_PLL3_Config>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002e60:	e00a      	b.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8002e68:	e006      	b.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8002e6a:	bf00      	nop
 8002e6c:	e004      	b.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8002e6e:	bf00      	nop
 8002e70:	e002      	b.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8002e72:	bf00      	nop
 8002e74:	e000      	b.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8002e76:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e78:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d10a      	bne.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002e80:	4b3c      	ldr	r3, [pc, #240]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002e82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e84:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8002e88:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002e8c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002e8e:	4a39      	ldr	r2, [pc, #228]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002e90:	430b      	orrs	r3, r1
 8002e92:	6513      	str	r3, [r2, #80]	@ 0x50
 8002e94:	e003      	b.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e96:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8002e9a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002e9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ea6:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8002eaa:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002eae:	2300      	movs	r3, #0
 8002eb0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002eb4:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8002eb8:	460b      	mov	r3, r1
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	d060      	beq.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8002ebe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002ec2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002ec6:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8002eca:	d039      	beq.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8002ecc:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8002ed0:	d832      	bhi.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002ed2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002ed6:	d035      	beq.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8002ed8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002edc:	d82c      	bhi.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002ede:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ee2:	d031      	beq.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8002ee4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ee8:	d826      	bhi.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002eea:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002eee:	d02d      	beq.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8002ef0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002ef4:	d820      	bhi.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002ef6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002efa:	d012      	beq.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8002efc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002f00:	d81a      	bhi.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d024      	beq.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8002f06:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002f0a:	d115      	bne.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002f0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002f10:	3308      	adds	r3, #8
 8002f12:	2101      	movs	r1, #1
 8002f14:	4618      	mov	r0, r3
 8002f16:	f001 f9ad 	bl	8004274 <RCCEx_PLL2_Config>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002f20:	e017      	b.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002f22:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002f26:	3328      	adds	r3, #40	@ 0x28
 8002f28:	2101      	movs	r1, #1
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f001 fa54 	bl	80043d8 <RCCEx_PLL3_Config>
 8002f30:	4603      	mov	r3, r0
 8002f32:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002f36:	e00c      	b.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8002f3e:	e008      	b.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002f40:	bf00      	nop
 8002f42:	e006      	b.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002f44:	bf00      	nop
 8002f46:	e004      	b.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002f48:	bf00      	nop
 8002f4a:	e002      	b.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002f4c:	bf00      	nop
 8002f4e:	e000      	b.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002f50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f52:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d10e      	bne.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002f5a:	4b06      	ldr	r3, [pc, #24]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002f5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f5e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8002f62:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002f66:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002f6a:	4a02      	ldr	r2, [pc, #8]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002f6c:	430b      	orrs	r3, r1
 8002f6e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002f70:	e006      	b.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8002f72:	bf00      	nop
 8002f74:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f78:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8002f7c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002f80:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f88:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8002f8c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002f90:	2300      	movs	r3, #0
 8002f92:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8002f96:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002f9a:	460b      	mov	r3, r1
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	d037      	beq.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8002fa0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002fa4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002fa6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002faa:	d00e      	beq.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8002fac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002fb0:	d816      	bhi.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d018      	beq.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8002fb6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002fba:	d111      	bne.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002fbc:	4bc4      	ldr	r3, [pc, #784]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002fbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fc0:	4ac3      	ldr	r2, [pc, #780]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002fc2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002fc6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002fc8:	e00f      	b.n	8002fea <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002fca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002fce:	3308      	adds	r3, #8
 8002fd0:	2101      	movs	r1, #1
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f001 f94e 	bl	8004274 <RCCEx_PLL2_Config>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002fde:	e004      	b.n	8002fea <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8002fe6:	e000      	b.n	8002fea <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8002fe8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002fea:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d10a      	bne.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002ff2:	4bb7      	ldr	r3, [pc, #732]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002ff4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ff6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8002ffa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002ffe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003000:	4ab3      	ldr	r2, [pc, #716]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003002:	430b      	orrs	r3, r1
 8003004:	6513      	str	r3, [r2, #80]	@ 0x50
 8003006:	e003      	b.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003008:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800300c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003010:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003018:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800301c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003020:	2300      	movs	r3, #0
 8003022:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003026:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800302a:	460b      	mov	r3, r1
 800302c:	4313      	orrs	r3, r2
 800302e:	d039      	beq.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003030:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003034:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003036:	2b03      	cmp	r3, #3
 8003038:	d81c      	bhi.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800303a:	a201      	add	r2, pc, #4	@ (adr r2, 8003040 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800303c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003040:	0800307d 	.word	0x0800307d
 8003044:	08003051 	.word	0x08003051
 8003048:	0800305f 	.word	0x0800305f
 800304c:	0800307d 	.word	0x0800307d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003050:	4b9f      	ldr	r3, [pc, #636]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003052:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003054:	4a9e      	ldr	r2, [pc, #632]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003056:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800305a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800305c:	e00f      	b.n	800307e <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800305e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003062:	3308      	adds	r3, #8
 8003064:	2102      	movs	r1, #2
 8003066:	4618      	mov	r0, r3
 8003068:	f001 f904 	bl	8004274 <RCCEx_PLL2_Config>
 800306c:	4603      	mov	r3, r0
 800306e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003072:	e004      	b.n	800307e <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800307a:	e000      	b.n	800307e <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800307c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800307e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003082:	2b00      	cmp	r3, #0
 8003084:	d10a      	bne.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003086:	4b92      	ldr	r3, [pc, #584]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003088:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800308a:	f023 0103 	bic.w	r1, r3, #3
 800308e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003092:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003094:	4a8e      	ldr	r2, [pc, #568]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003096:	430b      	orrs	r3, r1
 8003098:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800309a:	e003      	b.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800309c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80030a0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80030a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80030a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030ac:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80030b0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80030b4:	2300      	movs	r3, #0
 80030b6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80030ba:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80030be:	460b      	mov	r3, r1
 80030c0:	4313      	orrs	r3, r2
 80030c2:	f000 8099 	beq.w	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80030c6:	4b83      	ldr	r3, [pc, #524]	@ (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a82      	ldr	r2, [pc, #520]	@ (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80030cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030d0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80030d2:	f7fe f94b 	bl	800136c <HAL_GetTick>
 80030d6:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80030da:	e00b      	b.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030dc:	f7fe f946 	bl	800136c <HAL_GetTick>
 80030e0:	4602      	mov	r2, r0
 80030e2:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80030e6:	1ad3      	subs	r3, r2, r3
 80030e8:	2b64      	cmp	r3, #100	@ 0x64
 80030ea:	d903      	bls.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80030ec:	2303      	movs	r3, #3
 80030ee:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80030f2:	e005      	b.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80030f4:	4b77      	ldr	r3, [pc, #476]	@ (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d0ed      	beq.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8003100:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003104:	2b00      	cmp	r3, #0
 8003106:	d173      	bne.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003108:	4b71      	ldr	r3, [pc, #452]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800310a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800310c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003110:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003114:	4053      	eors	r3, r2
 8003116:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800311a:	2b00      	cmp	r3, #0
 800311c:	d015      	beq.n	800314a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800311e:	4b6c      	ldr	r3, [pc, #432]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003120:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003122:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003126:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800312a:	4b69      	ldr	r3, [pc, #420]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800312c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800312e:	4a68      	ldr	r2, [pc, #416]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003130:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003134:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003136:	4b66      	ldr	r3, [pc, #408]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003138:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800313a:	4a65      	ldr	r2, [pc, #404]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800313c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003140:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003142:	4a63      	ldr	r2, [pc, #396]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003144:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003148:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800314a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800314e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003152:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003156:	d118      	bne.n	800318a <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003158:	f7fe f908 	bl	800136c <HAL_GetTick>
 800315c:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003160:	e00d      	b.n	800317e <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003162:	f7fe f903 	bl	800136c <HAL_GetTick>
 8003166:	4602      	mov	r2, r0
 8003168:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800316c:	1ad2      	subs	r2, r2, r3
 800316e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003172:	429a      	cmp	r2, r3
 8003174:	d903      	bls.n	800317e <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8003176:	2303      	movs	r3, #3
 8003178:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 800317c:	e005      	b.n	800318a <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800317e:	4b54      	ldr	r3, [pc, #336]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003180:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003182:	f003 0302 	and.w	r3, r3, #2
 8003186:	2b00      	cmp	r3, #0
 8003188:	d0eb      	beq.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800318a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800318e:	2b00      	cmp	r3, #0
 8003190:	d129      	bne.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003192:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003196:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800319a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800319e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80031a2:	d10e      	bne.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0x846>
 80031a4:	4b4a      	ldr	r3, [pc, #296]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80031a6:	691b      	ldr	r3, [r3, #16]
 80031a8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80031ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80031b0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80031b4:	091a      	lsrs	r2, r3, #4
 80031b6:	4b48      	ldr	r3, [pc, #288]	@ (80032d8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80031b8:	4013      	ands	r3, r2
 80031ba:	4a45      	ldr	r2, [pc, #276]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80031bc:	430b      	orrs	r3, r1
 80031be:	6113      	str	r3, [r2, #16]
 80031c0:	e005      	b.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x852>
 80031c2:	4b43      	ldr	r3, [pc, #268]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80031c4:	691b      	ldr	r3, [r3, #16]
 80031c6:	4a42      	ldr	r2, [pc, #264]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80031c8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80031cc:	6113      	str	r3, [r2, #16]
 80031ce:	4b40      	ldr	r3, [pc, #256]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80031d0:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80031d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80031d6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80031da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031de:	4a3c      	ldr	r2, [pc, #240]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80031e0:	430b      	orrs	r3, r1
 80031e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80031e4:	e008      	b.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80031e6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80031ea:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 80031ee:	e003      	b.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031f0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80031f4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80031f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80031fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003200:	f002 0301 	and.w	r3, r2, #1
 8003204:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003208:	2300      	movs	r3, #0
 800320a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800320e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003212:	460b      	mov	r3, r1
 8003214:	4313      	orrs	r3, r2
 8003216:	f000 8090 	beq.w	800333a <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800321a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800321e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003222:	2b28      	cmp	r3, #40	@ 0x28
 8003224:	d870      	bhi.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8003226:	a201      	add	r2, pc, #4	@ (adr r2, 800322c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8003228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800322c:	08003311 	.word	0x08003311
 8003230:	08003309 	.word	0x08003309
 8003234:	08003309 	.word	0x08003309
 8003238:	08003309 	.word	0x08003309
 800323c:	08003309 	.word	0x08003309
 8003240:	08003309 	.word	0x08003309
 8003244:	08003309 	.word	0x08003309
 8003248:	08003309 	.word	0x08003309
 800324c:	080032dd 	.word	0x080032dd
 8003250:	08003309 	.word	0x08003309
 8003254:	08003309 	.word	0x08003309
 8003258:	08003309 	.word	0x08003309
 800325c:	08003309 	.word	0x08003309
 8003260:	08003309 	.word	0x08003309
 8003264:	08003309 	.word	0x08003309
 8003268:	08003309 	.word	0x08003309
 800326c:	080032f3 	.word	0x080032f3
 8003270:	08003309 	.word	0x08003309
 8003274:	08003309 	.word	0x08003309
 8003278:	08003309 	.word	0x08003309
 800327c:	08003309 	.word	0x08003309
 8003280:	08003309 	.word	0x08003309
 8003284:	08003309 	.word	0x08003309
 8003288:	08003309 	.word	0x08003309
 800328c:	08003311 	.word	0x08003311
 8003290:	08003309 	.word	0x08003309
 8003294:	08003309 	.word	0x08003309
 8003298:	08003309 	.word	0x08003309
 800329c:	08003309 	.word	0x08003309
 80032a0:	08003309 	.word	0x08003309
 80032a4:	08003309 	.word	0x08003309
 80032a8:	08003309 	.word	0x08003309
 80032ac:	08003311 	.word	0x08003311
 80032b0:	08003309 	.word	0x08003309
 80032b4:	08003309 	.word	0x08003309
 80032b8:	08003309 	.word	0x08003309
 80032bc:	08003309 	.word	0x08003309
 80032c0:	08003309 	.word	0x08003309
 80032c4:	08003309 	.word	0x08003309
 80032c8:	08003309 	.word	0x08003309
 80032cc:	08003311 	.word	0x08003311
 80032d0:	58024400 	.word	0x58024400
 80032d4:	58024800 	.word	0x58024800
 80032d8:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80032dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80032e0:	3308      	adds	r3, #8
 80032e2:	2101      	movs	r1, #1
 80032e4:	4618      	mov	r0, r3
 80032e6:	f000 ffc5 	bl	8004274 <RCCEx_PLL2_Config>
 80032ea:	4603      	mov	r3, r0
 80032ec:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80032f0:	e00f      	b.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80032f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80032f6:	3328      	adds	r3, #40	@ 0x28
 80032f8:	2101      	movs	r1, #1
 80032fa:	4618      	mov	r0, r3
 80032fc:	f001 f86c 	bl	80043d8 <RCCEx_PLL3_Config>
 8003300:	4603      	mov	r3, r0
 8003302:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003306:	e004      	b.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003308:	2301      	movs	r3, #1
 800330a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800330e:	e000      	b.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8003310:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003312:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003316:	2b00      	cmp	r3, #0
 8003318:	d10b      	bne.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800331a:	4bc0      	ldr	r3, [pc, #768]	@ (800361c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800331c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800331e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003322:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003326:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800332a:	4abc      	ldr	r2, [pc, #752]	@ (800361c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800332c:	430b      	orrs	r3, r1
 800332e:	6553      	str	r3, [r2, #84]	@ 0x54
 8003330:	e003      	b.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003332:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003336:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800333a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800333e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003342:	f002 0302 	and.w	r3, r2, #2
 8003346:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800334a:	2300      	movs	r3, #0
 800334c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003350:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003354:	460b      	mov	r3, r1
 8003356:	4313      	orrs	r3, r2
 8003358:	d043      	beq.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800335a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800335e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003362:	2b05      	cmp	r3, #5
 8003364:	d824      	bhi.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8003366:	a201      	add	r2, pc, #4	@ (adr r2, 800336c <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8003368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800336c:	080033b9 	.word	0x080033b9
 8003370:	08003385 	.word	0x08003385
 8003374:	0800339b 	.word	0x0800339b
 8003378:	080033b9 	.word	0x080033b9
 800337c:	080033b9 	.word	0x080033b9
 8003380:	080033b9 	.word	0x080033b9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003384:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003388:	3308      	adds	r3, #8
 800338a:	2101      	movs	r1, #1
 800338c:	4618      	mov	r0, r3
 800338e:	f000 ff71 	bl	8004274 <RCCEx_PLL2_Config>
 8003392:	4603      	mov	r3, r0
 8003394:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003398:	e00f      	b.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800339a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800339e:	3328      	adds	r3, #40	@ 0x28
 80033a0:	2101      	movs	r1, #1
 80033a2:	4618      	mov	r0, r3
 80033a4:	f001 f818 	bl	80043d8 <RCCEx_PLL3_Config>
 80033a8:	4603      	mov	r3, r0
 80033aa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80033ae:	e004      	b.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80033b6:	e000      	b.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 80033b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033ba:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d10b      	bne.n	80033da <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80033c2:	4b96      	ldr	r3, [pc, #600]	@ (800361c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80033c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033c6:	f023 0107 	bic.w	r1, r3, #7
 80033ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80033ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80033d2:	4a92      	ldr	r2, [pc, #584]	@ (800361c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80033d4:	430b      	orrs	r3, r1
 80033d6:	6553      	str	r3, [r2, #84]	@ 0x54
 80033d8:	e003      	b.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033da:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80033de:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80033e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80033e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033ea:	f002 0304 	and.w	r3, r2, #4
 80033ee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80033f2:	2300      	movs	r3, #0
 80033f4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80033f8:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80033fc:	460b      	mov	r3, r1
 80033fe:	4313      	orrs	r3, r2
 8003400:	d043      	beq.n	800348a <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003402:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003406:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800340a:	2b05      	cmp	r3, #5
 800340c:	d824      	bhi.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 800340e:	a201      	add	r2, pc, #4	@ (adr r2, 8003414 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8003410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003414:	08003461 	.word	0x08003461
 8003418:	0800342d 	.word	0x0800342d
 800341c:	08003443 	.word	0x08003443
 8003420:	08003461 	.word	0x08003461
 8003424:	08003461 	.word	0x08003461
 8003428:	08003461 	.word	0x08003461
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800342c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003430:	3308      	adds	r3, #8
 8003432:	2101      	movs	r1, #1
 8003434:	4618      	mov	r0, r3
 8003436:	f000 ff1d 	bl	8004274 <RCCEx_PLL2_Config>
 800343a:	4603      	mov	r3, r0
 800343c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003440:	e00f      	b.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003442:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003446:	3328      	adds	r3, #40	@ 0x28
 8003448:	2101      	movs	r1, #1
 800344a:	4618      	mov	r0, r3
 800344c:	f000 ffc4 	bl	80043d8 <RCCEx_PLL3_Config>
 8003450:	4603      	mov	r3, r0
 8003452:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003456:	e004      	b.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003458:	2301      	movs	r3, #1
 800345a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800345e:	e000      	b.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8003460:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003462:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003466:	2b00      	cmp	r3, #0
 8003468:	d10b      	bne.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800346a:	4b6c      	ldr	r3, [pc, #432]	@ (800361c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800346c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800346e:	f023 0107 	bic.w	r1, r3, #7
 8003472:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003476:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800347a:	4a68      	ldr	r2, [pc, #416]	@ (800361c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800347c:	430b      	orrs	r3, r1
 800347e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003480:	e003      	b.n	800348a <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003482:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003486:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800348a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800348e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003492:	f002 0320 	and.w	r3, r2, #32
 8003496:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800349a:	2300      	movs	r3, #0
 800349c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80034a0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80034a4:	460b      	mov	r3, r1
 80034a6:	4313      	orrs	r3, r2
 80034a8:	d055      	beq.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80034aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80034ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80034b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80034b6:	d033      	beq.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80034b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80034bc:	d82c      	bhi.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80034be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034c2:	d02f      	beq.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80034c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034c8:	d826      	bhi.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80034ca:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80034ce:	d02b      	beq.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80034d0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80034d4:	d820      	bhi.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80034d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80034da:	d012      	beq.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 80034dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80034e0:	d81a      	bhi.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d022      	beq.n	800352c <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 80034e6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80034ea:	d115      	bne.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80034ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80034f0:	3308      	adds	r3, #8
 80034f2:	2100      	movs	r1, #0
 80034f4:	4618      	mov	r0, r3
 80034f6:	f000 febd 	bl	8004274 <RCCEx_PLL2_Config>
 80034fa:	4603      	mov	r3, r0
 80034fc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003500:	e015      	b.n	800352e <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003502:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003506:	3328      	adds	r3, #40	@ 0x28
 8003508:	2102      	movs	r1, #2
 800350a:	4618      	mov	r0, r3
 800350c:	f000 ff64 	bl	80043d8 <RCCEx_PLL3_Config>
 8003510:	4603      	mov	r3, r0
 8003512:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003516:	e00a      	b.n	800352e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800351e:	e006      	b.n	800352e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003520:	bf00      	nop
 8003522:	e004      	b.n	800352e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003524:	bf00      	nop
 8003526:	e002      	b.n	800352e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003528:	bf00      	nop
 800352a:	e000      	b.n	800352e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800352c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800352e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003532:	2b00      	cmp	r3, #0
 8003534:	d10b      	bne.n	800354e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003536:	4b39      	ldr	r3, [pc, #228]	@ (800361c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003538:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800353a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800353e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003542:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003546:	4a35      	ldr	r2, [pc, #212]	@ (800361c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003548:	430b      	orrs	r3, r1
 800354a:	6553      	str	r3, [r2, #84]	@ 0x54
 800354c:	e003      	b.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800354e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003552:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003556:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800355a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800355e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8003562:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003566:	2300      	movs	r3, #0
 8003568:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800356c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8003570:	460b      	mov	r3, r1
 8003572:	4313      	orrs	r3, r2
 8003574:	d058      	beq.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003576:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800357a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800357e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003582:	d033      	beq.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8003584:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003588:	d82c      	bhi.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800358a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800358e:	d02f      	beq.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8003590:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003594:	d826      	bhi.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003596:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800359a:	d02b      	beq.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800359c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80035a0:	d820      	bhi.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80035a2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80035a6:	d012      	beq.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0xc52>
 80035a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80035ac:	d81a      	bhi.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d022      	beq.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 80035b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80035b6:	d115      	bne.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80035b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80035bc:	3308      	adds	r3, #8
 80035be:	2100      	movs	r1, #0
 80035c0:	4618      	mov	r0, r3
 80035c2:	f000 fe57 	bl	8004274 <RCCEx_PLL2_Config>
 80035c6:	4603      	mov	r3, r0
 80035c8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80035cc:	e015      	b.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80035ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80035d2:	3328      	adds	r3, #40	@ 0x28
 80035d4:	2102      	movs	r1, #2
 80035d6:	4618      	mov	r0, r3
 80035d8:	f000 fefe 	bl	80043d8 <RCCEx_PLL3_Config>
 80035dc:	4603      	mov	r3, r0
 80035de:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80035e2:	e00a      	b.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80035e4:	2301      	movs	r3, #1
 80035e6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80035ea:	e006      	b.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80035ec:	bf00      	nop
 80035ee:	e004      	b.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80035f0:	bf00      	nop
 80035f2:	e002      	b.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80035f4:	bf00      	nop
 80035f6:	e000      	b.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80035f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035fa:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d10e      	bne.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003602:	4b06      	ldr	r3, [pc, #24]	@ (800361c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003604:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003606:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800360a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800360e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003612:	4a02      	ldr	r2, [pc, #8]	@ (800361c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003614:	430b      	orrs	r3, r1
 8003616:	6593      	str	r3, [r2, #88]	@ 0x58
 8003618:	e006      	b.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800361a:	bf00      	nop
 800361c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003620:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003624:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003628:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800362c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003630:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8003634:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003638:	2300      	movs	r3, #0
 800363a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800363e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8003642:	460b      	mov	r3, r1
 8003644:	4313      	orrs	r3, r2
 8003646:	d055      	beq.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003648:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800364c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003650:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003654:	d033      	beq.n	80036be <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8003656:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800365a:	d82c      	bhi.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800365c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003660:	d02f      	beq.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8003662:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003666:	d826      	bhi.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003668:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800366c:	d02b      	beq.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800366e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003672:	d820      	bhi.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003674:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003678:	d012      	beq.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800367a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800367e:	d81a      	bhi.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003680:	2b00      	cmp	r3, #0
 8003682:	d022      	beq.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8003684:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003688:	d115      	bne.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800368a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800368e:	3308      	adds	r3, #8
 8003690:	2100      	movs	r1, #0
 8003692:	4618      	mov	r0, r3
 8003694:	f000 fdee 	bl	8004274 <RCCEx_PLL2_Config>
 8003698:	4603      	mov	r3, r0
 800369a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800369e:	e015      	b.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80036a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80036a4:	3328      	adds	r3, #40	@ 0x28
 80036a6:	2102      	movs	r1, #2
 80036a8:	4618      	mov	r0, r3
 80036aa:	f000 fe95 	bl	80043d8 <RCCEx_PLL3_Config>
 80036ae:	4603      	mov	r3, r0
 80036b0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80036b4:	e00a      	b.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80036bc:	e006      	b.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80036be:	bf00      	nop
 80036c0:	e004      	b.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80036c2:	bf00      	nop
 80036c4:	e002      	b.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80036c6:	bf00      	nop
 80036c8:	e000      	b.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80036ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036cc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d10b      	bne.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80036d4:	4ba1      	ldr	r3, [pc, #644]	@ (800395c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80036d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036d8:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80036dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80036e0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80036e4:	4a9d      	ldr	r2, [pc, #628]	@ (800395c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80036e6:	430b      	orrs	r3, r1
 80036e8:	6593      	str	r3, [r2, #88]	@ 0x58
 80036ea:	e003      	b.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036ec:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80036f0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80036f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80036f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036fc:	f002 0308 	and.w	r3, r2, #8
 8003700:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003704:	2300      	movs	r3, #0
 8003706:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800370a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800370e:	460b      	mov	r3, r1
 8003710:	4313      	orrs	r3, r2
 8003712:	d01e      	beq.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8003714:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003718:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800371c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003720:	d10c      	bne.n	800373c <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003722:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003726:	3328      	adds	r3, #40	@ 0x28
 8003728:	2102      	movs	r1, #2
 800372a:	4618      	mov	r0, r3
 800372c:	f000 fe54 	bl	80043d8 <RCCEx_PLL3_Config>
 8003730:	4603      	mov	r3, r0
 8003732:	2b00      	cmp	r3, #0
 8003734:	d002      	beq.n	800373c <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800373c:	4b87      	ldr	r3, [pc, #540]	@ (800395c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800373e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003740:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003744:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003748:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800374c:	4a83      	ldr	r2, [pc, #524]	@ (800395c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800374e:	430b      	orrs	r3, r1
 8003750:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003752:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800375a:	f002 0310 	and.w	r3, r2, #16
 800375e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003762:	2300      	movs	r3, #0
 8003764:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003768:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800376c:	460b      	mov	r3, r1
 800376e:	4313      	orrs	r3, r2
 8003770:	d01e      	beq.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003772:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003776:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800377a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800377e:	d10c      	bne.n	800379a <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003780:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003784:	3328      	adds	r3, #40	@ 0x28
 8003786:	2102      	movs	r1, #2
 8003788:	4618      	mov	r0, r3
 800378a:	f000 fe25 	bl	80043d8 <RCCEx_PLL3_Config>
 800378e:	4603      	mov	r3, r0
 8003790:	2b00      	cmp	r3, #0
 8003792:	d002      	beq.n	800379a <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8003794:	2301      	movs	r3, #1
 8003796:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800379a:	4b70      	ldr	r3, [pc, #448]	@ (800395c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800379c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800379e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80037a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80037a6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80037aa:	4a6c      	ldr	r2, [pc, #432]	@ (800395c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80037ac:	430b      	orrs	r3, r1
 80037ae:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80037b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80037b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037b8:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80037bc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80037c0:	2300      	movs	r3, #0
 80037c2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80037c6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80037ca:	460b      	mov	r3, r1
 80037cc:	4313      	orrs	r3, r2
 80037ce:	d03e      	beq.n	800384e <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80037d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80037d4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80037d8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80037dc:	d022      	beq.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 80037de:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80037e2:	d81b      	bhi.n	800381c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d003      	beq.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 80037e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037ec:	d00b      	beq.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 80037ee:	e015      	b.n	800381c <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80037f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80037f4:	3308      	adds	r3, #8
 80037f6:	2100      	movs	r1, #0
 80037f8:	4618      	mov	r0, r3
 80037fa:	f000 fd3b 	bl	8004274 <RCCEx_PLL2_Config>
 80037fe:	4603      	mov	r3, r0
 8003800:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003804:	e00f      	b.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003806:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800380a:	3328      	adds	r3, #40	@ 0x28
 800380c:	2102      	movs	r1, #2
 800380e:	4618      	mov	r0, r3
 8003810:	f000 fde2 	bl	80043d8 <RCCEx_PLL3_Config>
 8003814:	4603      	mov	r3, r0
 8003816:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800381a:	e004      	b.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003822:	e000      	b.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8003824:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003826:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800382a:	2b00      	cmp	r3, #0
 800382c:	d10b      	bne.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800382e:	4b4b      	ldr	r3, [pc, #300]	@ (800395c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003830:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003832:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8003836:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800383a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800383e:	4a47      	ldr	r2, [pc, #284]	@ (800395c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003840:	430b      	orrs	r3, r1
 8003842:	6593      	str	r3, [r2, #88]	@ 0x58
 8003844:	e003      	b.n	800384e <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003846:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800384a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800384e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003856:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800385a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800385c:	2300      	movs	r3, #0
 800385e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003860:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8003864:	460b      	mov	r3, r1
 8003866:	4313      	orrs	r3, r2
 8003868:	d03b      	beq.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800386a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800386e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003872:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003876:	d01f      	beq.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8003878:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800387c:	d818      	bhi.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800387e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003882:	d003      	beq.n	800388c <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8003884:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003888:	d007      	beq.n	800389a <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 800388a:	e011      	b.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800388c:	4b33      	ldr	r3, [pc, #204]	@ (800395c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800388e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003890:	4a32      	ldr	r2, [pc, #200]	@ (800395c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003892:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003896:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003898:	e00f      	b.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800389a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800389e:	3328      	adds	r3, #40	@ 0x28
 80038a0:	2101      	movs	r1, #1
 80038a2:	4618      	mov	r0, r3
 80038a4:	f000 fd98 	bl	80043d8 <RCCEx_PLL3_Config>
 80038a8:	4603      	mov	r3, r0
 80038aa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 80038ae:	e004      	b.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038b0:	2301      	movs	r3, #1
 80038b2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80038b6:	e000      	b.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 80038b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038ba:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d10b      	bne.n	80038da <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80038c2:	4b26      	ldr	r3, [pc, #152]	@ (800395c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80038c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038c6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80038ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80038ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038d2:	4a22      	ldr	r2, [pc, #136]	@ (800395c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80038d4:	430b      	orrs	r3, r1
 80038d6:	6553      	str	r3, [r2, #84]	@ 0x54
 80038d8:	e003      	b.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038da:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80038de:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80038e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80038e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038ea:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80038ee:	673b      	str	r3, [r7, #112]	@ 0x70
 80038f0:	2300      	movs	r3, #0
 80038f2:	677b      	str	r3, [r7, #116]	@ 0x74
 80038f4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80038f8:	460b      	mov	r3, r1
 80038fa:	4313      	orrs	r3, r2
 80038fc:	d034      	beq.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80038fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003902:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003904:	2b00      	cmp	r3, #0
 8003906:	d003      	beq.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8003908:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800390c:	d007      	beq.n	800391e <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 800390e:	e011      	b.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003910:	4b12      	ldr	r3, [pc, #72]	@ (800395c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003912:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003914:	4a11      	ldr	r2, [pc, #68]	@ (800395c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003916:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800391a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800391c:	e00e      	b.n	800393c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800391e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003922:	3308      	adds	r3, #8
 8003924:	2102      	movs	r1, #2
 8003926:	4618      	mov	r0, r3
 8003928:	f000 fca4 	bl	8004274 <RCCEx_PLL2_Config>
 800392c:	4603      	mov	r3, r0
 800392e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003932:	e003      	b.n	800393c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800393a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800393c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003940:	2b00      	cmp	r3, #0
 8003942:	d10d      	bne.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003944:	4b05      	ldr	r3, [pc, #20]	@ (800395c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003946:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003948:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800394c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003950:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003952:	4a02      	ldr	r2, [pc, #8]	@ (800395c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003954:	430b      	orrs	r3, r1
 8003956:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003958:	e006      	b.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 800395a:	bf00      	nop
 800395c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003960:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003964:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003968:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800396c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003970:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8003974:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003976:	2300      	movs	r3, #0
 8003978:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800397a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800397e:	460b      	mov	r3, r1
 8003980:	4313      	orrs	r3, r2
 8003982:	d00c      	beq.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003984:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003988:	3328      	adds	r3, #40	@ 0x28
 800398a:	2102      	movs	r1, #2
 800398c:	4618      	mov	r0, r3
 800398e:	f000 fd23 	bl	80043d8 <RCCEx_PLL3_Config>
 8003992:	4603      	mov	r3, r0
 8003994:	2b00      	cmp	r3, #0
 8003996:	d002      	beq.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800399e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80039a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039a6:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80039aa:	663b      	str	r3, [r7, #96]	@ 0x60
 80039ac:	2300      	movs	r3, #0
 80039ae:	667b      	str	r3, [r7, #100]	@ 0x64
 80039b0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80039b4:	460b      	mov	r3, r1
 80039b6:	4313      	orrs	r3, r2
 80039b8:	d038      	beq.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 80039ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80039be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039c2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80039c6:	d018      	beq.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x107e>
 80039c8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80039cc:	d811      	bhi.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 80039ce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80039d2:	d014      	beq.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x1082>
 80039d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80039d8:	d80b      	bhi.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d011      	beq.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 80039de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80039e2:	d106      	bne.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039e4:	4bc3      	ldr	r3, [pc, #780]	@ (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80039e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039e8:	4ac2      	ldr	r2, [pc, #776]	@ (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80039ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80039ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80039f0:	e008      	b.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80039f8:	e004      	b.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80039fa:	bf00      	nop
 80039fc:	e002      	b.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80039fe:	bf00      	nop
 8003a00:	e000      	b.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8003a02:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a04:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d10b      	bne.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003a0c:	4bb9      	ldr	r3, [pc, #740]	@ (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003a0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a10:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003a14:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003a18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a1c:	4ab5      	ldr	r2, [pc, #724]	@ (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003a1e:	430b      	orrs	r3, r1
 8003a20:	6553      	str	r3, [r2, #84]	@ 0x54
 8003a22:	e003      	b.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a24:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003a28:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003a2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a34:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8003a38:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003a3e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8003a42:	460b      	mov	r3, r1
 8003a44:	4313      	orrs	r3, r2
 8003a46:	d009      	beq.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003a48:	4baa      	ldr	r3, [pc, #680]	@ (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003a4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a4c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8003a50:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003a54:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003a56:	4aa7      	ldr	r2, [pc, #668]	@ (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003a58:	430b      	orrs	r3, r1
 8003a5a:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003a5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a64:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8003a68:	653b      	str	r3, [r7, #80]	@ 0x50
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	657b      	str	r3, [r7, #84]	@ 0x54
 8003a6e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8003a72:	460b      	mov	r3, r1
 8003a74:	4313      	orrs	r3, r2
 8003a76:	d009      	beq.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003a78:	4b9e      	ldr	r3, [pc, #632]	@ (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003a7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a7c:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8003a80:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003a84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a86:	4a9b      	ldr	r2, [pc, #620]	@ (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003a88:	430b      	orrs	r3, r1
 8003a8a:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8003a8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a94:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8003a98:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003a9e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8003aa2:	460b      	mov	r3, r1
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	d009      	beq.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8003aa8:	4b92      	ldr	r3, [pc, #584]	@ (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003aaa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003aac:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 8003ab0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003ab4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ab6:	4a8f      	ldr	r2, [pc, #572]	@ (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003ab8:	430b      	orrs	r3, r1
 8003aba:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003abc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ac4:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8003ac8:	643b      	str	r3, [r7, #64]	@ 0x40
 8003aca:	2300      	movs	r3, #0
 8003acc:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ace:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8003ad2:	460b      	mov	r3, r1
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	d00e      	beq.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003ad8:	4b86      	ldr	r3, [pc, #536]	@ (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003ada:	691b      	ldr	r3, [r3, #16]
 8003adc:	4a85      	ldr	r2, [pc, #532]	@ (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003ade:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003ae2:	6113      	str	r3, [r2, #16]
 8003ae4:	4b83      	ldr	r3, [pc, #524]	@ (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003ae6:	6919      	ldr	r1, [r3, #16]
 8003ae8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003aec:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8003af0:	4a80      	ldr	r2, [pc, #512]	@ (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003af2:	430b      	orrs	r3, r1
 8003af4:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003af6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003afe:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8003b02:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003b04:	2300      	movs	r3, #0
 8003b06:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003b08:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8003b0c:	460b      	mov	r3, r1
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	d009      	beq.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003b12:	4b78      	ldr	r3, [pc, #480]	@ (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003b14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b16:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003b1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003b1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b20:	4a74      	ldr	r2, [pc, #464]	@ (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003b22:	430b      	orrs	r3, r1
 8003b24:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003b26:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b2e:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8003b32:	633b      	str	r3, [r7, #48]	@ 0x30
 8003b34:	2300      	movs	r3, #0
 8003b36:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b38:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8003b3c:	460b      	mov	r3, r1
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	d00a      	beq.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003b42:	4b6c      	ldr	r3, [pc, #432]	@ (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003b44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b46:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8003b4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003b4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b52:	4a68      	ldr	r2, [pc, #416]	@ (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003b54:	430b      	orrs	r3, r1
 8003b56:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8003b58:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b60:	2100      	movs	r1, #0
 8003b62:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003b64:	f003 0301 	and.w	r3, r3, #1
 8003b68:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003b6a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8003b6e:	460b      	mov	r3, r1
 8003b70:	4313      	orrs	r3, r2
 8003b72:	d011      	beq.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003b74:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003b78:	3308      	adds	r3, #8
 8003b7a:	2100      	movs	r1, #0
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f000 fb79 	bl	8004274 <RCCEx_PLL2_Config>
 8003b82:	4603      	mov	r3, r0
 8003b84:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8003b88:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d003      	beq.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b90:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003b94:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003b98:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ba0:	2100      	movs	r1, #0
 8003ba2:	6239      	str	r1, [r7, #32]
 8003ba4:	f003 0302 	and.w	r3, r3, #2
 8003ba8:	627b      	str	r3, [r7, #36]	@ 0x24
 8003baa:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003bae:	460b      	mov	r3, r1
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	d011      	beq.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003bb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003bb8:	3308      	adds	r3, #8
 8003bba:	2101      	movs	r1, #1
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f000 fb59 	bl	8004274 <RCCEx_PLL2_Config>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8003bc8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d003      	beq.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bd0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003bd4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8003bd8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003be0:	2100      	movs	r1, #0
 8003be2:	61b9      	str	r1, [r7, #24]
 8003be4:	f003 0304 	and.w	r3, r3, #4
 8003be8:	61fb      	str	r3, [r7, #28]
 8003bea:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003bee:	460b      	mov	r3, r1
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	d011      	beq.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003bf4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003bf8:	3308      	adds	r3, #8
 8003bfa:	2102      	movs	r1, #2
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	f000 fb39 	bl	8004274 <RCCEx_PLL2_Config>
 8003c02:	4603      	mov	r3, r0
 8003c04:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8003c08:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d003      	beq.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c10:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003c14:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8003c18:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c20:	2100      	movs	r1, #0
 8003c22:	6139      	str	r1, [r7, #16]
 8003c24:	f003 0308 	and.w	r3, r3, #8
 8003c28:	617b      	str	r3, [r7, #20]
 8003c2a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003c2e:	460b      	mov	r3, r1
 8003c30:	4313      	orrs	r3, r2
 8003c32:	d011      	beq.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003c34:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003c38:	3328      	adds	r3, #40	@ 0x28
 8003c3a:	2100      	movs	r1, #0
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f000 fbcb 	bl	80043d8 <RCCEx_PLL3_Config>
 8003c42:	4603      	mov	r3, r0
 8003c44:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 8003c48:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d003      	beq.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c50:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003c54:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8003c58:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c60:	2100      	movs	r1, #0
 8003c62:	60b9      	str	r1, [r7, #8]
 8003c64:	f003 0310 	and.w	r3, r3, #16
 8003c68:	60fb      	str	r3, [r7, #12]
 8003c6a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003c6e:	460b      	mov	r3, r1
 8003c70:	4313      	orrs	r3, r2
 8003c72:	d011      	beq.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003c74:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003c78:	3328      	adds	r3, #40	@ 0x28
 8003c7a:	2101      	movs	r1, #1
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	f000 fbab 	bl	80043d8 <RCCEx_PLL3_Config>
 8003c82:	4603      	mov	r3, r0
 8003c84:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8003c88:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d003      	beq.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c90:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003c94:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8003c98:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ca0:	2100      	movs	r1, #0
 8003ca2:	6039      	str	r1, [r7, #0]
 8003ca4:	f003 0320 	and.w	r3, r3, #32
 8003ca8:	607b      	str	r3, [r7, #4]
 8003caa:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003cae:	460b      	mov	r3, r1
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	d011      	beq.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003cb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003cb8:	3328      	adds	r3, #40	@ 0x28
 8003cba:	2102      	movs	r1, #2
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f000 fb8b 	bl	80043d8 <RCCEx_PLL3_Config>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8003cc8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d003      	beq.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cd0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003cd4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 8003cd8:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d101      	bne.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	e000      	b.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8003ce4:	2301      	movs	r3, #1
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8003cec:	46bd      	mov	sp, r7
 8003cee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003cf2:	bf00      	nop
 8003cf4:	58024400 	.word	0x58024400

08003cf8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8003cfc:	f7fe fda0 	bl	8002840 <HAL_RCC_GetHCLKFreq>
 8003d00:	4602      	mov	r2, r0
 8003d02:	4b06      	ldr	r3, [pc, #24]	@ (8003d1c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003d04:	6a1b      	ldr	r3, [r3, #32]
 8003d06:	091b      	lsrs	r3, r3, #4
 8003d08:	f003 0307 	and.w	r3, r3, #7
 8003d0c:	4904      	ldr	r1, [pc, #16]	@ (8003d20 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003d0e:	5ccb      	ldrb	r3, [r1, r3]
 8003d10:	f003 031f 	and.w	r3, r3, #31
 8003d14:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	bd80      	pop	{r7, pc}
 8003d1c:	58024400 	.word	0x58024400
 8003d20:	0800d5f8 	.word	0x0800d5f8

08003d24 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b089      	sub	sp, #36	@ 0x24
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003d2c:	4ba1      	ldr	r3, [pc, #644]	@ (8003fb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003d2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d30:	f003 0303 	and.w	r3, r3, #3
 8003d34:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8003d36:	4b9f      	ldr	r3, [pc, #636]	@ (8003fb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003d38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d3a:	0b1b      	lsrs	r3, r3, #12
 8003d3c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003d40:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003d42:	4b9c      	ldr	r3, [pc, #624]	@ (8003fb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003d44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d46:	091b      	lsrs	r3, r3, #4
 8003d48:	f003 0301 	and.w	r3, r3, #1
 8003d4c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8003d4e:	4b99      	ldr	r3, [pc, #612]	@ (8003fb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003d50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d52:	08db      	lsrs	r3, r3, #3
 8003d54:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003d58:	693a      	ldr	r2, [r7, #16]
 8003d5a:	fb02 f303 	mul.w	r3, r2, r3
 8003d5e:	ee07 3a90 	vmov	s15, r3
 8003d62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d66:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	f000 8111 	beq.w	8003f94 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8003d72:	69bb      	ldr	r3, [r7, #24]
 8003d74:	2b02      	cmp	r3, #2
 8003d76:	f000 8083 	beq.w	8003e80 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8003d7a:	69bb      	ldr	r3, [r7, #24]
 8003d7c:	2b02      	cmp	r3, #2
 8003d7e:	f200 80a1 	bhi.w	8003ec4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8003d82:	69bb      	ldr	r3, [r7, #24]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d003      	beq.n	8003d90 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003d88:	69bb      	ldr	r3, [r7, #24]
 8003d8a:	2b01      	cmp	r3, #1
 8003d8c:	d056      	beq.n	8003e3c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003d8e:	e099      	b.n	8003ec4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003d90:	4b88      	ldr	r3, [pc, #544]	@ (8003fb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f003 0320 	and.w	r3, r3, #32
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d02d      	beq.n	8003df8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003d9c:	4b85      	ldr	r3, [pc, #532]	@ (8003fb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	08db      	lsrs	r3, r3, #3
 8003da2:	f003 0303 	and.w	r3, r3, #3
 8003da6:	4a84      	ldr	r2, [pc, #528]	@ (8003fb8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003da8:	fa22 f303 	lsr.w	r3, r2, r3
 8003dac:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	ee07 3a90 	vmov	s15, r3
 8003db4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	ee07 3a90 	vmov	s15, r3
 8003dbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003dc6:	4b7b      	ldr	r3, [pc, #492]	@ (8003fb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003dc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003dce:	ee07 3a90 	vmov	s15, r3
 8003dd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003dd6:	ed97 6a03 	vldr	s12, [r7, #12]
 8003dda:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8003fbc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003dde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003de2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003de6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003dea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003dee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003df2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003df6:	e087      	b.n	8003f08 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	ee07 3a90 	vmov	s15, r3
 8003dfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e02:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8003fc0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8003e06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e0a:	4b6a      	ldr	r3, [pc, #424]	@ (8003fb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003e0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e12:	ee07 3a90 	vmov	s15, r3
 8003e16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003e1e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8003fbc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003e22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003e2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e36:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003e3a:	e065      	b.n	8003f08 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	ee07 3a90 	vmov	s15, r3
 8003e42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e46:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8003fc4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003e4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e4e:	4b59      	ldr	r3, [pc, #356]	@ (8003fb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003e50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e56:	ee07 3a90 	vmov	s15, r3
 8003e5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003e62:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8003fbc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003e66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003e72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e7a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003e7e:	e043      	b.n	8003f08 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	ee07 3a90 	vmov	s15, r3
 8003e86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e8a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8003fc8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8003e8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e92:	4b48      	ldr	r3, [pc, #288]	@ (8003fb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003e94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e9a:	ee07 3a90 	vmov	s15, r3
 8003e9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ea2:	ed97 6a03 	vldr	s12, [r7, #12]
 8003ea6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8003fbc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003eaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003eae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003eb2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003eb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003eba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ebe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003ec2:	e021      	b.n	8003f08 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	ee07 3a90 	vmov	s15, r3
 8003eca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ece:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8003fc4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003ed2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ed6:	4b37      	ldr	r3, [pc, #220]	@ (8003fb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ed8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003eda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ede:	ee07 3a90 	vmov	s15, r3
 8003ee2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ee6:	ed97 6a03 	vldr	s12, [r7, #12]
 8003eea:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8003fbc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003eee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ef2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ef6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003efa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003efe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f02:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003f06:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8003f08:	4b2a      	ldr	r3, [pc, #168]	@ (8003fb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f0c:	0a5b      	lsrs	r3, r3, #9
 8003f0e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003f12:	ee07 3a90 	vmov	s15, r3
 8003f16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f1a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003f1e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003f22:	edd7 6a07 	vldr	s13, [r7, #28]
 8003f26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f2e:	ee17 2a90 	vmov	r2, s15
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8003f36:	4b1f      	ldr	r3, [pc, #124]	@ (8003fb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f3a:	0c1b      	lsrs	r3, r3, #16
 8003f3c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003f40:	ee07 3a90 	vmov	s15, r3
 8003f44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f48:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003f4c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003f50:	edd7 6a07 	vldr	s13, [r7, #28]
 8003f54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f5c:	ee17 2a90 	vmov	r2, s15
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8003f64:	4b13      	ldr	r3, [pc, #76]	@ (8003fb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f68:	0e1b      	lsrs	r3, r3, #24
 8003f6a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003f6e:	ee07 3a90 	vmov	s15, r3
 8003f72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f76:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003f7a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003f7e:	edd7 6a07 	vldr	s13, [r7, #28]
 8003f82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f8a:	ee17 2a90 	vmov	r2, s15
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003f92:	e008      	b.n	8003fa6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2200      	movs	r2, #0
 8003f98:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	609a      	str	r2, [r3, #8]
}
 8003fa6:	bf00      	nop
 8003fa8:	3724      	adds	r7, #36	@ 0x24
 8003faa:	46bd      	mov	sp, r7
 8003fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb0:	4770      	bx	lr
 8003fb2:	bf00      	nop
 8003fb4:	58024400 	.word	0x58024400
 8003fb8:	03d09000 	.word	0x03d09000
 8003fbc:	46000000 	.word	0x46000000
 8003fc0:	4c742400 	.word	0x4c742400
 8003fc4:	4a742400 	.word	0x4a742400
 8003fc8:	4bb71b00 	.word	0x4bb71b00

08003fcc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b089      	sub	sp, #36	@ 0x24
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003fd4:	4ba1      	ldr	r3, [pc, #644]	@ (800425c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003fd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fd8:	f003 0303 	and.w	r3, r3, #3
 8003fdc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8003fde:	4b9f      	ldr	r3, [pc, #636]	@ (800425c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003fe0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fe2:	0d1b      	lsrs	r3, r3, #20
 8003fe4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003fe8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003fea:	4b9c      	ldr	r3, [pc, #624]	@ (800425c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003fec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fee:	0a1b      	lsrs	r3, r3, #8
 8003ff0:	f003 0301 	and.w	r3, r3, #1
 8003ff4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8003ff6:	4b99      	ldr	r3, [pc, #612]	@ (800425c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ff8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ffa:	08db      	lsrs	r3, r3, #3
 8003ffc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004000:	693a      	ldr	r2, [r7, #16]
 8004002:	fb02 f303 	mul.w	r3, r2, r3
 8004006:	ee07 3a90 	vmov	s15, r3
 800400a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800400e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	2b00      	cmp	r3, #0
 8004016:	f000 8111 	beq.w	800423c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800401a:	69bb      	ldr	r3, [r7, #24]
 800401c:	2b02      	cmp	r3, #2
 800401e:	f000 8083 	beq.w	8004128 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004022:	69bb      	ldr	r3, [r7, #24]
 8004024:	2b02      	cmp	r3, #2
 8004026:	f200 80a1 	bhi.w	800416c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800402a:	69bb      	ldr	r3, [r7, #24]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d003      	beq.n	8004038 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004030:	69bb      	ldr	r3, [r7, #24]
 8004032:	2b01      	cmp	r3, #1
 8004034:	d056      	beq.n	80040e4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004036:	e099      	b.n	800416c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004038:	4b88      	ldr	r3, [pc, #544]	@ (800425c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f003 0320 	and.w	r3, r3, #32
 8004040:	2b00      	cmp	r3, #0
 8004042:	d02d      	beq.n	80040a0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004044:	4b85      	ldr	r3, [pc, #532]	@ (800425c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	08db      	lsrs	r3, r3, #3
 800404a:	f003 0303 	and.w	r3, r3, #3
 800404e:	4a84      	ldr	r2, [pc, #528]	@ (8004260 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004050:	fa22 f303 	lsr.w	r3, r2, r3
 8004054:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	ee07 3a90 	vmov	s15, r3
 800405c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	ee07 3a90 	vmov	s15, r3
 8004066:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800406a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800406e:	4b7b      	ldr	r3, [pc, #492]	@ (800425c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004070:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004072:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004076:	ee07 3a90 	vmov	s15, r3
 800407a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800407e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004082:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004264 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004086:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800408a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800408e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004092:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004096:	ee67 7a27 	vmul.f32	s15, s14, s15
 800409a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800409e:	e087      	b.n	80041b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	ee07 3a90 	vmov	s15, r3
 80040a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040aa:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004268 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80040ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040b2:	4b6a      	ldr	r3, [pc, #424]	@ (800425c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80040b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040ba:	ee07 3a90 	vmov	s15, r3
 80040be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80040c6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004264 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80040ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80040ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80040d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80040e2:	e065      	b.n	80041b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	ee07 3a90 	vmov	s15, r3
 80040ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040ee:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800426c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80040f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040f6:	4b59      	ldr	r3, [pc, #356]	@ (800425c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80040f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040fe:	ee07 3a90 	vmov	s15, r3
 8004102:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004106:	ed97 6a03 	vldr	s12, [r7, #12]
 800410a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004264 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800410e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004112:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004116:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800411a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800411e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004122:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004126:	e043      	b.n	80041b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	ee07 3a90 	vmov	s15, r3
 800412e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004132:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004270 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004136:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800413a:	4b48      	ldr	r3, [pc, #288]	@ (800425c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800413c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800413e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004142:	ee07 3a90 	vmov	s15, r3
 8004146:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800414a:	ed97 6a03 	vldr	s12, [r7, #12]
 800414e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004264 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004152:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004156:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800415a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800415e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004162:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004166:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800416a:	e021      	b.n	80041b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	ee07 3a90 	vmov	s15, r3
 8004172:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004176:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800426c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800417a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800417e:	4b37      	ldr	r3, [pc, #220]	@ (800425c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004180:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004182:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004186:	ee07 3a90 	vmov	s15, r3
 800418a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800418e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004192:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004264 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004196:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800419a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800419e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80041a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80041a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80041ae:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80041b0:	4b2a      	ldr	r3, [pc, #168]	@ (800425c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80041b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041b4:	0a5b      	lsrs	r3, r3, #9
 80041b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80041ba:	ee07 3a90 	vmov	s15, r3
 80041be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041c2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80041c6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80041ca:	edd7 6a07 	vldr	s13, [r7, #28]
 80041ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80041d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80041d6:	ee17 2a90 	vmov	r2, s15
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80041de:	4b1f      	ldr	r3, [pc, #124]	@ (800425c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80041e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041e2:	0c1b      	lsrs	r3, r3, #16
 80041e4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80041e8:	ee07 3a90 	vmov	s15, r3
 80041ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041f0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80041f4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80041f8:	edd7 6a07 	vldr	s13, [r7, #28]
 80041fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004200:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004204:	ee17 2a90 	vmov	r2, s15
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800420c:	4b13      	ldr	r3, [pc, #76]	@ (800425c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800420e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004210:	0e1b      	lsrs	r3, r3, #24
 8004212:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004216:	ee07 3a90 	vmov	s15, r3
 800421a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800421e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004222:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004226:	edd7 6a07 	vldr	s13, [r7, #28]
 800422a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800422e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004232:	ee17 2a90 	vmov	r2, s15
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800423a:	e008      	b.n	800424e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2200      	movs	r2, #0
 8004240:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2200      	movs	r2, #0
 8004246:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2200      	movs	r2, #0
 800424c:	609a      	str	r2, [r3, #8]
}
 800424e:	bf00      	nop
 8004250:	3724      	adds	r7, #36	@ 0x24
 8004252:	46bd      	mov	sp, r7
 8004254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004258:	4770      	bx	lr
 800425a:	bf00      	nop
 800425c:	58024400 	.word	0x58024400
 8004260:	03d09000 	.word	0x03d09000
 8004264:	46000000 	.word	0x46000000
 8004268:	4c742400 	.word	0x4c742400
 800426c:	4a742400 	.word	0x4a742400
 8004270:	4bb71b00 	.word	0x4bb71b00

08004274 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b084      	sub	sp, #16
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
 800427c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800427e:	2300      	movs	r3, #0
 8004280:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004282:	4b53      	ldr	r3, [pc, #332]	@ (80043d0 <RCCEx_PLL2_Config+0x15c>)
 8004284:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004286:	f003 0303 	and.w	r3, r3, #3
 800428a:	2b03      	cmp	r3, #3
 800428c:	d101      	bne.n	8004292 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	e099      	b.n	80043c6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004292:	4b4f      	ldr	r3, [pc, #316]	@ (80043d0 <RCCEx_PLL2_Config+0x15c>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a4e      	ldr	r2, [pc, #312]	@ (80043d0 <RCCEx_PLL2_Config+0x15c>)
 8004298:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800429c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800429e:	f7fd f865 	bl	800136c <HAL_GetTick>
 80042a2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80042a4:	e008      	b.n	80042b8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80042a6:	f7fd f861 	bl	800136c <HAL_GetTick>
 80042aa:	4602      	mov	r2, r0
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	1ad3      	subs	r3, r2, r3
 80042b0:	2b02      	cmp	r3, #2
 80042b2:	d901      	bls.n	80042b8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80042b4:	2303      	movs	r3, #3
 80042b6:	e086      	b.n	80043c6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80042b8:	4b45      	ldr	r3, [pc, #276]	@ (80043d0 <RCCEx_PLL2_Config+0x15c>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d1f0      	bne.n	80042a6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80042c4:	4b42      	ldr	r3, [pc, #264]	@ (80043d0 <RCCEx_PLL2_Config+0x15c>)
 80042c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042c8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	031b      	lsls	r3, r3, #12
 80042d2:	493f      	ldr	r1, [pc, #252]	@ (80043d0 <RCCEx_PLL2_Config+0x15c>)
 80042d4:	4313      	orrs	r3, r2
 80042d6:	628b      	str	r3, [r1, #40]	@ 0x28
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	3b01      	subs	r3, #1
 80042de:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	3b01      	subs	r3, #1
 80042e8:	025b      	lsls	r3, r3, #9
 80042ea:	b29b      	uxth	r3, r3
 80042ec:	431a      	orrs	r2, r3
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	68db      	ldr	r3, [r3, #12]
 80042f2:	3b01      	subs	r3, #1
 80042f4:	041b      	lsls	r3, r3, #16
 80042f6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80042fa:	431a      	orrs	r2, r3
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	691b      	ldr	r3, [r3, #16]
 8004300:	3b01      	subs	r3, #1
 8004302:	061b      	lsls	r3, r3, #24
 8004304:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004308:	4931      	ldr	r1, [pc, #196]	@ (80043d0 <RCCEx_PLL2_Config+0x15c>)
 800430a:	4313      	orrs	r3, r2
 800430c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800430e:	4b30      	ldr	r3, [pc, #192]	@ (80043d0 <RCCEx_PLL2_Config+0x15c>)
 8004310:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004312:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	695b      	ldr	r3, [r3, #20]
 800431a:	492d      	ldr	r1, [pc, #180]	@ (80043d0 <RCCEx_PLL2_Config+0x15c>)
 800431c:	4313      	orrs	r3, r2
 800431e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004320:	4b2b      	ldr	r3, [pc, #172]	@ (80043d0 <RCCEx_PLL2_Config+0x15c>)
 8004322:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004324:	f023 0220 	bic.w	r2, r3, #32
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	699b      	ldr	r3, [r3, #24]
 800432c:	4928      	ldr	r1, [pc, #160]	@ (80043d0 <RCCEx_PLL2_Config+0x15c>)
 800432e:	4313      	orrs	r3, r2
 8004330:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004332:	4b27      	ldr	r3, [pc, #156]	@ (80043d0 <RCCEx_PLL2_Config+0x15c>)
 8004334:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004336:	4a26      	ldr	r2, [pc, #152]	@ (80043d0 <RCCEx_PLL2_Config+0x15c>)
 8004338:	f023 0310 	bic.w	r3, r3, #16
 800433c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800433e:	4b24      	ldr	r3, [pc, #144]	@ (80043d0 <RCCEx_PLL2_Config+0x15c>)
 8004340:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004342:	4b24      	ldr	r3, [pc, #144]	@ (80043d4 <RCCEx_PLL2_Config+0x160>)
 8004344:	4013      	ands	r3, r2
 8004346:	687a      	ldr	r2, [r7, #4]
 8004348:	69d2      	ldr	r2, [r2, #28]
 800434a:	00d2      	lsls	r2, r2, #3
 800434c:	4920      	ldr	r1, [pc, #128]	@ (80043d0 <RCCEx_PLL2_Config+0x15c>)
 800434e:	4313      	orrs	r3, r2
 8004350:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004352:	4b1f      	ldr	r3, [pc, #124]	@ (80043d0 <RCCEx_PLL2_Config+0x15c>)
 8004354:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004356:	4a1e      	ldr	r2, [pc, #120]	@ (80043d0 <RCCEx_PLL2_Config+0x15c>)
 8004358:	f043 0310 	orr.w	r3, r3, #16
 800435c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d106      	bne.n	8004372 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004364:	4b1a      	ldr	r3, [pc, #104]	@ (80043d0 <RCCEx_PLL2_Config+0x15c>)
 8004366:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004368:	4a19      	ldr	r2, [pc, #100]	@ (80043d0 <RCCEx_PLL2_Config+0x15c>)
 800436a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800436e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004370:	e00f      	b.n	8004392 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	2b01      	cmp	r3, #1
 8004376:	d106      	bne.n	8004386 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004378:	4b15      	ldr	r3, [pc, #84]	@ (80043d0 <RCCEx_PLL2_Config+0x15c>)
 800437a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800437c:	4a14      	ldr	r2, [pc, #80]	@ (80043d0 <RCCEx_PLL2_Config+0x15c>)
 800437e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004382:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004384:	e005      	b.n	8004392 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004386:	4b12      	ldr	r3, [pc, #72]	@ (80043d0 <RCCEx_PLL2_Config+0x15c>)
 8004388:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800438a:	4a11      	ldr	r2, [pc, #68]	@ (80043d0 <RCCEx_PLL2_Config+0x15c>)
 800438c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004390:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004392:	4b0f      	ldr	r3, [pc, #60]	@ (80043d0 <RCCEx_PLL2_Config+0x15c>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a0e      	ldr	r2, [pc, #56]	@ (80043d0 <RCCEx_PLL2_Config+0x15c>)
 8004398:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800439c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800439e:	f7fc ffe5 	bl	800136c <HAL_GetTick>
 80043a2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80043a4:	e008      	b.n	80043b8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80043a6:	f7fc ffe1 	bl	800136c <HAL_GetTick>
 80043aa:	4602      	mov	r2, r0
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	1ad3      	subs	r3, r2, r3
 80043b0:	2b02      	cmp	r3, #2
 80043b2:	d901      	bls.n	80043b8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80043b4:	2303      	movs	r3, #3
 80043b6:	e006      	b.n	80043c6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80043b8:	4b05      	ldr	r3, [pc, #20]	@ (80043d0 <RCCEx_PLL2_Config+0x15c>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d0f0      	beq.n	80043a6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80043c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	3710      	adds	r7, #16
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}
 80043ce:	bf00      	nop
 80043d0:	58024400 	.word	0x58024400
 80043d4:	ffff0007 	.word	0xffff0007

080043d8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b084      	sub	sp, #16
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
 80043e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80043e2:	2300      	movs	r3, #0
 80043e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80043e6:	4b53      	ldr	r3, [pc, #332]	@ (8004534 <RCCEx_PLL3_Config+0x15c>)
 80043e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043ea:	f003 0303 	and.w	r3, r3, #3
 80043ee:	2b03      	cmp	r3, #3
 80043f0:	d101      	bne.n	80043f6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
 80043f4:	e099      	b.n	800452a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80043f6:	4b4f      	ldr	r3, [pc, #316]	@ (8004534 <RCCEx_PLL3_Config+0x15c>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a4e      	ldr	r2, [pc, #312]	@ (8004534 <RCCEx_PLL3_Config+0x15c>)
 80043fc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004400:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004402:	f7fc ffb3 	bl	800136c <HAL_GetTick>
 8004406:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004408:	e008      	b.n	800441c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800440a:	f7fc ffaf 	bl	800136c <HAL_GetTick>
 800440e:	4602      	mov	r2, r0
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	1ad3      	subs	r3, r2, r3
 8004414:	2b02      	cmp	r3, #2
 8004416:	d901      	bls.n	800441c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004418:	2303      	movs	r3, #3
 800441a:	e086      	b.n	800452a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800441c:	4b45      	ldr	r3, [pc, #276]	@ (8004534 <RCCEx_PLL3_Config+0x15c>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004424:	2b00      	cmp	r3, #0
 8004426:	d1f0      	bne.n	800440a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004428:	4b42      	ldr	r3, [pc, #264]	@ (8004534 <RCCEx_PLL3_Config+0x15c>)
 800442a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800442c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	051b      	lsls	r3, r3, #20
 8004436:	493f      	ldr	r1, [pc, #252]	@ (8004534 <RCCEx_PLL3_Config+0x15c>)
 8004438:	4313      	orrs	r3, r2
 800443a:	628b      	str	r3, [r1, #40]	@ 0x28
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	3b01      	subs	r3, #1
 8004442:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	689b      	ldr	r3, [r3, #8]
 800444a:	3b01      	subs	r3, #1
 800444c:	025b      	lsls	r3, r3, #9
 800444e:	b29b      	uxth	r3, r3
 8004450:	431a      	orrs	r2, r3
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	68db      	ldr	r3, [r3, #12]
 8004456:	3b01      	subs	r3, #1
 8004458:	041b      	lsls	r3, r3, #16
 800445a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800445e:	431a      	orrs	r2, r3
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	691b      	ldr	r3, [r3, #16]
 8004464:	3b01      	subs	r3, #1
 8004466:	061b      	lsls	r3, r3, #24
 8004468:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800446c:	4931      	ldr	r1, [pc, #196]	@ (8004534 <RCCEx_PLL3_Config+0x15c>)
 800446e:	4313      	orrs	r3, r2
 8004470:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004472:	4b30      	ldr	r3, [pc, #192]	@ (8004534 <RCCEx_PLL3_Config+0x15c>)
 8004474:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004476:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	695b      	ldr	r3, [r3, #20]
 800447e:	492d      	ldr	r1, [pc, #180]	@ (8004534 <RCCEx_PLL3_Config+0x15c>)
 8004480:	4313      	orrs	r3, r2
 8004482:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004484:	4b2b      	ldr	r3, [pc, #172]	@ (8004534 <RCCEx_PLL3_Config+0x15c>)
 8004486:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004488:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	699b      	ldr	r3, [r3, #24]
 8004490:	4928      	ldr	r1, [pc, #160]	@ (8004534 <RCCEx_PLL3_Config+0x15c>)
 8004492:	4313      	orrs	r3, r2
 8004494:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004496:	4b27      	ldr	r3, [pc, #156]	@ (8004534 <RCCEx_PLL3_Config+0x15c>)
 8004498:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800449a:	4a26      	ldr	r2, [pc, #152]	@ (8004534 <RCCEx_PLL3_Config+0x15c>)
 800449c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80044a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80044a2:	4b24      	ldr	r3, [pc, #144]	@ (8004534 <RCCEx_PLL3_Config+0x15c>)
 80044a4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80044a6:	4b24      	ldr	r3, [pc, #144]	@ (8004538 <RCCEx_PLL3_Config+0x160>)
 80044a8:	4013      	ands	r3, r2
 80044aa:	687a      	ldr	r2, [r7, #4]
 80044ac:	69d2      	ldr	r2, [r2, #28]
 80044ae:	00d2      	lsls	r2, r2, #3
 80044b0:	4920      	ldr	r1, [pc, #128]	@ (8004534 <RCCEx_PLL3_Config+0x15c>)
 80044b2:	4313      	orrs	r3, r2
 80044b4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80044b6:	4b1f      	ldr	r3, [pc, #124]	@ (8004534 <RCCEx_PLL3_Config+0x15c>)
 80044b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044ba:	4a1e      	ldr	r2, [pc, #120]	@ (8004534 <RCCEx_PLL3_Config+0x15c>)
 80044bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80044c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d106      	bne.n	80044d6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80044c8:	4b1a      	ldr	r3, [pc, #104]	@ (8004534 <RCCEx_PLL3_Config+0x15c>)
 80044ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044cc:	4a19      	ldr	r2, [pc, #100]	@ (8004534 <RCCEx_PLL3_Config+0x15c>)
 80044ce:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80044d2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80044d4:	e00f      	b.n	80044f6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	2b01      	cmp	r3, #1
 80044da:	d106      	bne.n	80044ea <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80044dc:	4b15      	ldr	r3, [pc, #84]	@ (8004534 <RCCEx_PLL3_Config+0x15c>)
 80044de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044e0:	4a14      	ldr	r2, [pc, #80]	@ (8004534 <RCCEx_PLL3_Config+0x15c>)
 80044e2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80044e6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80044e8:	e005      	b.n	80044f6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80044ea:	4b12      	ldr	r3, [pc, #72]	@ (8004534 <RCCEx_PLL3_Config+0x15c>)
 80044ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044ee:	4a11      	ldr	r2, [pc, #68]	@ (8004534 <RCCEx_PLL3_Config+0x15c>)
 80044f0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80044f4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80044f6:	4b0f      	ldr	r3, [pc, #60]	@ (8004534 <RCCEx_PLL3_Config+0x15c>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a0e      	ldr	r2, [pc, #56]	@ (8004534 <RCCEx_PLL3_Config+0x15c>)
 80044fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004500:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004502:	f7fc ff33 	bl	800136c <HAL_GetTick>
 8004506:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004508:	e008      	b.n	800451c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800450a:	f7fc ff2f 	bl	800136c <HAL_GetTick>
 800450e:	4602      	mov	r2, r0
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	1ad3      	subs	r3, r2, r3
 8004514:	2b02      	cmp	r3, #2
 8004516:	d901      	bls.n	800451c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004518:	2303      	movs	r3, #3
 800451a:	e006      	b.n	800452a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800451c:	4b05      	ldr	r3, [pc, #20]	@ (8004534 <RCCEx_PLL3_Config+0x15c>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004524:	2b00      	cmp	r3, #0
 8004526:	d0f0      	beq.n	800450a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004528:	7bfb      	ldrb	r3, [r7, #15]
}
 800452a:	4618      	mov	r0, r3
 800452c:	3710      	adds	r7, #16
 800452e:	46bd      	mov	sp, r7
 8004530:	bd80      	pop	{r7, pc}
 8004532:	bf00      	nop
 8004534:	58024400 	.word	0x58024400
 8004538:	ffff0007 	.word	0xffff0007

0800453c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b082      	sub	sp, #8
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d101      	bne.n	800454e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800454a:	2301      	movs	r3, #1
 800454c:	e049      	b.n	80045e2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004554:	b2db      	uxtb	r3, r3
 8004556:	2b00      	cmp	r3, #0
 8004558:	d106      	bne.n	8004568 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2200      	movs	r2, #0
 800455e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	f000 f841 	bl	80045ea <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2202      	movs	r2, #2
 800456c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681a      	ldr	r2, [r3, #0]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	3304      	adds	r3, #4
 8004578:	4619      	mov	r1, r3
 800457a:	4610      	mov	r0, r2
 800457c:	f000 f9e8 	bl	8004950 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2201      	movs	r2, #1
 8004584:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2201      	movs	r2, #1
 800458c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2201      	movs	r2, #1
 8004594:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2201      	movs	r2, #1
 800459c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2201      	movs	r2, #1
 80045a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2201      	movs	r2, #1
 80045ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2201      	movs	r2, #1
 80045b4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2201      	movs	r2, #1
 80045bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2201      	movs	r2, #1
 80045c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2201      	movs	r2, #1
 80045cc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2201      	movs	r2, #1
 80045d4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2201      	movs	r2, #1
 80045dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80045e0:	2300      	movs	r3, #0
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	3708      	adds	r7, #8
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}

080045ea <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80045ea:	b480      	push	{r7}
 80045ec:	b083      	sub	sp, #12
 80045ee:	af00      	add	r7, sp, #0
 80045f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80045f2:	bf00      	nop
 80045f4:	370c      	adds	r7, #12
 80045f6:	46bd      	mov	sp, r7
 80045f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fc:	4770      	bx	lr
	...

08004600 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004600:	b480      	push	{r7}
 8004602:	b085      	sub	sp, #20
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800460e:	b2db      	uxtb	r3, r3
 8004610:	2b01      	cmp	r3, #1
 8004612:	d001      	beq.n	8004618 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004614:	2301      	movs	r3, #1
 8004616:	e054      	b.n	80046c2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2202      	movs	r2, #2
 800461c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	68da      	ldr	r2, [r3, #12]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f042 0201 	orr.w	r2, r2, #1
 800462e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a26      	ldr	r2, [pc, #152]	@ (80046d0 <HAL_TIM_Base_Start_IT+0xd0>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d022      	beq.n	8004680 <HAL_TIM_Base_Start_IT+0x80>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004642:	d01d      	beq.n	8004680 <HAL_TIM_Base_Start_IT+0x80>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a22      	ldr	r2, [pc, #136]	@ (80046d4 <HAL_TIM_Base_Start_IT+0xd4>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d018      	beq.n	8004680 <HAL_TIM_Base_Start_IT+0x80>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a21      	ldr	r2, [pc, #132]	@ (80046d8 <HAL_TIM_Base_Start_IT+0xd8>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d013      	beq.n	8004680 <HAL_TIM_Base_Start_IT+0x80>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a1f      	ldr	r2, [pc, #124]	@ (80046dc <HAL_TIM_Base_Start_IT+0xdc>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d00e      	beq.n	8004680 <HAL_TIM_Base_Start_IT+0x80>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a1e      	ldr	r2, [pc, #120]	@ (80046e0 <HAL_TIM_Base_Start_IT+0xe0>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d009      	beq.n	8004680 <HAL_TIM_Base_Start_IT+0x80>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a1c      	ldr	r2, [pc, #112]	@ (80046e4 <HAL_TIM_Base_Start_IT+0xe4>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d004      	beq.n	8004680 <HAL_TIM_Base_Start_IT+0x80>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a1b      	ldr	r2, [pc, #108]	@ (80046e8 <HAL_TIM_Base_Start_IT+0xe8>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d115      	bne.n	80046ac <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	689a      	ldr	r2, [r3, #8]
 8004686:	4b19      	ldr	r3, [pc, #100]	@ (80046ec <HAL_TIM_Base_Start_IT+0xec>)
 8004688:	4013      	ands	r3, r2
 800468a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2b06      	cmp	r3, #6
 8004690:	d015      	beq.n	80046be <HAL_TIM_Base_Start_IT+0xbe>
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004698:	d011      	beq.n	80046be <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	681a      	ldr	r2, [r3, #0]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f042 0201 	orr.w	r2, r2, #1
 80046a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046aa:	e008      	b.n	80046be <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	681a      	ldr	r2, [r3, #0]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f042 0201 	orr.w	r2, r2, #1
 80046ba:	601a      	str	r2, [r3, #0]
 80046bc:	e000      	b.n	80046c0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046be:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80046c0:	2300      	movs	r3, #0
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	3714      	adds	r7, #20
 80046c6:	46bd      	mov	sp, r7
 80046c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046cc:	4770      	bx	lr
 80046ce:	bf00      	nop
 80046d0:	40010000 	.word	0x40010000
 80046d4:	40000400 	.word	0x40000400
 80046d8:	40000800 	.word	0x40000800
 80046dc:	40000c00 	.word	0x40000c00
 80046e0:	40010400 	.word	0x40010400
 80046e4:	40001800 	.word	0x40001800
 80046e8:	40014000 	.word	0x40014000
 80046ec:	00010007 	.word	0x00010007

080046f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b084      	sub	sp, #16
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	68db      	ldr	r3, [r3, #12]
 80046fe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	691b      	ldr	r3, [r3, #16]
 8004706:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	f003 0302 	and.w	r3, r3, #2
 800470e:	2b00      	cmp	r3, #0
 8004710:	d020      	beq.n	8004754 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	f003 0302 	and.w	r3, r3, #2
 8004718:	2b00      	cmp	r3, #0
 800471a:	d01b      	beq.n	8004754 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f06f 0202 	mvn.w	r2, #2
 8004724:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2201      	movs	r2, #1
 800472a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	699b      	ldr	r3, [r3, #24]
 8004732:	f003 0303 	and.w	r3, r3, #3
 8004736:	2b00      	cmp	r3, #0
 8004738:	d003      	beq.n	8004742 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f000 f8e9 	bl	8004912 <HAL_TIM_IC_CaptureCallback>
 8004740:	e005      	b.n	800474e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f000 f8db 	bl	80048fe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004748:	6878      	ldr	r0, [r7, #4]
 800474a:	f000 f8ec 	bl	8004926 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2200      	movs	r2, #0
 8004752:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	f003 0304 	and.w	r3, r3, #4
 800475a:	2b00      	cmp	r3, #0
 800475c:	d020      	beq.n	80047a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	f003 0304 	and.w	r3, r3, #4
 8004764:	2b00      	cmp	r3, #0
 8004766:	d01b      	beq.n	80047a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f06f 0204 	mvn.w	r2, #4
 8004770:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2202      	movs	r2, #2
 8004776:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	699b      	ldr	r3, [r3, #24]
 800477e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004782:	2b00      	cmp	r3, #0
 8004784:	d003      	beq.n	800478e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	f000 f8c3 	bl	8004912 <HAL_TIM_IC_CaptureCallback>
 800478c:	e005      	b.n	800479a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	f000 f8b5 	bl	80048fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004794:	6878      	ldr	r0, [r7, #4]
 8004796:	f000 f8c6 	bl	8004926 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2200      	movs	r2, #0
 800479e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	f003 0308 	and.w	r3, r3, #8
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d020      	beq.n	80047ec <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	f003 0308 	and.w	r3, r3, #8
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d01b      	beq.n	80047ec <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f06f 0208 	mvn.w	r2, #8
 80047bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2204      	movs	r2, #4
 80047c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	69db      	ldr	r3, [r3, #28]
 80047ca:	f003 0303 	and.w	r3, r3, #3
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d003      	beq.n	80047da <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047d2:	6878      	ldr	r0, [r7, #4]
 80047d4:	f000 f89d 	bl	8004912 <HAL_TIM_IC_CaptureCallback>
 80047d8:	e005      	b.n	80047e6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	f000 f88f 	bl	80048fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047e0:	6878      	ldr	r0, [r7, #4]
 80047e2:	f000 f8a0 	bl	8004926 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2200      	movs	r2, #0
 80047ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	f003 0310 	and.w	r3, r3, #16
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d020      	beq.n	8004838 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	f003 0310 	and.w	r3, r3, #16
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d01b      	beq.n	8004838 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f06f 0210 	mvn.w	r2, #16
 8004808:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2208      	movs	r2, #8
 800480e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	69db      	ldr	r3, [r3, #28]
 8004816:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800481a:	2b00      	cmp	r3, #0
 800481c:	d003      	beq.n	8004826 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800481e:	6878      	ldr	r0, [r7, #4]
 8004820:	f000 f877 	bl	8004912 <HAL_TIM_IC_CaptureCallback>
 8004824:	e005      	b.n	8004832 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004826:	6878      	ldr	r0, [r7, #4]
 8004828:	f000 f869 	bl	80048fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800482c:	6878      	ldr	r0, [r7, #4]
 800482e:	f000 f87a 	bl	8004926 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2200      	movs	r2, #0
 8004836:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	f003 0301 	and.w	r3, r3, #1
 800483e:	2b00      	cmp	r3, #0
 8004840:	d00c      	beq.n	800485c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	f003 0301 	and.w	r3, r3, #1
 8004848:	2b00      	cmp	r3, #0
 800484a:	d007      	beq.n	800485c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f06f 0201 	mvn.w	r2, #1
 8004854:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004856:	6878      	ldr	r0, [r7, #4]
 8004858:	f7fc fa0c 	bl	8000c74 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004862:	2b00      	cmp	r3, #0
 8004864:	d104      	bne.n	8004870 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800486c:	2b00      	cmp	r3, #0
 800486e:	d00c      	beq.n	800488a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004876:	2b00      	cmp	r3, #0
 8004878:	d007      	beq.n	800488a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004882:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004884:	6878      	ldr	r0, [r7, #4]
 8004886:	f000 f913 	bl	8004ab0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004890:	2b00      	cmp	r3, #0
 8004892:	d00c      	beq.n	80048ae <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800489a:	2b00      	cmp	r3, #0
 800489c:	d007      	beq.n	80048ae <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80048a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80048a8:	6878      	ldr	r0, [r7, #4]
 80048aa:	f000 f90b 	bl	8004ac4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d00c      	beq.n	80048d2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d007      	beq.n	80048d2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80048ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80048cc:	6878      	ldr	r0, [r7, #4]
 80048ce:	f000 f834 	bl	800493a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	f003 0320 	and.w	r3, r3, #32
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d00c      	beq.n	80048f6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	f003 0320 	and.w	r3, r3, #32
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d007      	beq.n	80048f6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f06f 0220 	mvn.w	r2, #32
 80048ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80048f0:	6878      	ldr	r0, [r7, #4]
 80048f2:	f000 f8d3 	bl	8004a9c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80048f6:	bf00      	nop
 80048f8:	3710      	adds	r7, #16
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bd80      	pop	{r7, pc}

080048fe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80048fe:	b480      	push	{r7}
 8004900:	b083      	sub	sp, #12
 8004902:	af00      	add	r7, sp, #0
 8004904:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004906:	bf00      	nop
 8004908:	370c      	adds	r7, #12
 800490a:	46bd      	mov	sp, r7
 800490c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004910:	4770      	bx	lr

08004912 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004912:	b480      	push	{r7}
 8004914:	b083      	sub	sp, #12
 8004916:	af00      	add	r7, sp, #0
 8004918:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800491a:	bf00      	nop
 800491c:	370c      	adds	r7, #12
 800491e:	46bd      	mov	sp, r7
 8004920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004924:	4770      	bx	lr

08004926 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004926:	b480      	push	{r7}
 8004928:	b083      	sub	sp, #12
 800492a:	af00      	add	r7, sp, #0
 800492c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800492e:	bf00      	nop
 8004930:	370c      	adds	r7, #12
 8004932:	46bd      	mov	sp, r7
 8004934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004938:	4770      	bx	lr

0800493a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800493a:	b480      	push	{r7}
 800493c:	b083      	sub	sp, #12
 800493e:	af00      	add	r7, sp, #0
 8004940:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004942:	bf00      	nop
 8004944:	370c      	adds	r7, #12
 8004946:	46bd      	mov	sp, r7
 8004948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494c:	4770      	bx	lr
	...

08004950 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004950:	b480      	push	{r7}
 8004952:	b085      	sub	sp, #20
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
 8004958:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	4a46      	ldr	r2, [pc, #280]	@ (8004a7c <TIM_Base_SetConfig+0x12c>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d013      	beq.n	8004990 <TIM_Base_SetConfig+0x40>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800496e:	d00f      	beq.n	8004990 <TIM_Base_SetConfig+0x40>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	4a43      	ldr	r2, [pc, #268]	@ (8004a80 <TIM_Base_SetConfig+0x130>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d00b      	beq.n	8004990 <TIM_Base_SetConfig+0x40>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	4a42      	ldr	r2, [pc, #264]	@ (8004a84 <TIM_Base_SetConfig+0x134>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d007      	beq.n	8004990 <TIM_Base_SetConfig+0x40>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	4a41      	ldr	r2, [pc, #260]	@ (8004a88 <TIM_Base_SetConfig+0x138>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d003      	beq.n	8004990 <TIM_Base_SetConfig+0x40>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	4a40      	ldr	r2, [pc, #256]	@ (8004a8c <TIM_Base_SetConfig+0x13c>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d108      	bne.n	80049a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004996:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	68fa      	ldr	r2, [r7, #12]
 800499e:	4313      	orrs	r3, r2
 80049a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	4a35      	ldr	r2, [pc, #212]	@ (8004a7c <TIM_Base_SetConfig+0x12c>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d01f      	beq.n	80049ea <TIM_Base_SetConfig+0x9a>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049b0:	d01b      	beq.n	80049ea <TIM_Base_SetConfig+0x9a>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	4a32      	ldr	r2, [pc, #200]	@ (8004a80 <TIM_Base_SetConfig+0x130>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d017      	beq.n	80049ea <TIM_Base_SetConfig+0x9a>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	4a31      	ldr	r2, [pc, #196]	@ (8004a84 <TIM_Base_SetConfig+0x134>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d013      	beq.n	80049ea <TIM_Base_SetConfig+0x9a>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	4a30      	ldr	r2, [pc, #192]	@ (8004a88 <TIM_Base_SetConfig+0x138>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d00f      	beq.n	80049ea <TIM_Base_SetConfig+0x9a>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	4a2f      	ldr	r2, [pc, #188]	@ (8004a8c <TIM_Base_SetConfig+0x13c>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d00b      	beq.n	80049ea <TIM_Base_SetConfig+0x9a>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	4a2e      	ldr	r2, [pc, #184]	@ (8004a90 <TIM_Base_SetConfig+0x140>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d007      	beq.n	80049ea <TIM_Base_SetConfig+0x9a>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	4a2d      	ldr	r2, [pc, #180]	@ (8004a94 <TIM_Base_SetConfig+0x144>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d003      	beq.n	80049ea <TIM_Base_SetConfig+0x9a>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	4a2c      	ldr	r2, [pc, #176]	@ (8004a98 <TIM_Base_SetConfig+0x148>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d108      	bne.n	80049fc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80049f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	68db      	ldr	r3, [r3, #12]
 80049f6:	68fa      	ldr	r2, [r7, #12]
 80049f8:	4313      	orrs	r3, r2
 80049fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	695b      	ldr	r3, [r3, #20]
 8004a06:	4313      	orrs	r3, r2
 8004a08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	68fa      	ldr	r2, [r7, #12]
 8004a0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	689a      	ldr	r2, [r3, #8]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	681a      	ldr	r2, [r3, #0]
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	4a16      	ldr	r2, [pc, #88]	@ (8004a7c <TIM_Base_SetConfig+0x12c>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d00f      	beq.n	8004a48 <TIM_Base_SetConfig+0xf8>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	4a18      	ldr	r2, [pc, #96]	@ (8004a8c <TIM_Base_SetConfig+0x13c>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d00b      	beq.n	8004a48 <TIM_Base_SetConfig+0xf8>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	4a17      	ldr	r2, [pc, #92]	@ (8004a90 <TIM_Base_SetConfig+0x140>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d007      	beq.n	8004a48 <TIM_Base_SetConfig+0xf8>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	4a16      	ldr	r2, [pc, #88]	@ (8004a94 <TIM_Base_SetConfig+0x144>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d003      	beq.n	8004a48 <TIM_Base_SetConfig+0xf8>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	4a15      	ldr	r2, [pc, #84]	@ (8004a98 <TIM_Base_SetConfig+0x148>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d103      	bne.n	8004a50 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	691a      	ldr	r2, [r3, #16]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2201      	movs	r2, #1
 8004a54:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	691b      	ldr	r3, [r3, #16]
 8004a5a:	f003 0301 	and.w	r3, r3, #1
 8004a5e:	2b01      	cmp	r3, #1
 8004a60:	d105      	bne.n	8004a6e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	691b      	ldr	r3, [r3, #16]
 8004a66:	f023 0201 	bic.w	r2, r3, #1
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	611a      	str	r2, [r3, #16]
  }
}
 8004a6e:	bf00      	nop
 8004a70:	3714      	adds	r7, #20
 8004a72:	46bd      	mov	sp, r7
 8004a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a78:	4770      	bx	lr
 8004a7a:	bf00      	nop
 8004a7c:	40010000 	.word	0x40010000
 8004a80:	40000400 	.word	0x40000400
 8004a84:	40000800 	.word	0x40000800
 8004a88:	40000c00 	.word	0x40000c00
 8004a8c:	40010400 	.word	0x40010400
 8004a90:	40014000 	.word	0x40014000
 8004a94:	40014400 	.word	0x40014400
 8004a98:	40014800 	.word	0x40014800

08004a9c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b083      	sub	sp, #12
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004aa4:	bf00      	nop
 8004aa6:	370c      	adds	r7, #12
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aae:	4770      	bx	lr

08004ab0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b083      	sub	sp, #12
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004ab8:	bf00      	nop
 8004aba:	370c      	adds	r7, #12
 8004abc:	46bd      	mov	sp, r7
 8004abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac2:	4770      	bx	lr

08004ac4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b083      	sub	sp, #12
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004acc:	bf00      	nop
 8004ace:	370c      	adds	r7, #12
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad6:	4770      	bx	lr

08004ad8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b082      	sub	sp, #8
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d101      	bne.n	8004aea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	e042      	b.n	8004b70 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d106      	bne.n	8004b02 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2200      	movs	r2, #0
 8004af8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004afc:	6878      	ldr	r0, [r7, #4]
 8004afe:	f7fc fb51 	bl	80011a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2224      	movs	r2, #36	@ 0x24
 8004b06:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	681a      	ldr	r2, [r3, #0]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f022 0201 	bic.w	r2, r2, #1
 8004b18:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d002      	beq.n	8004b28 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	f000 ff22 	bl	800596c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004b28:	6878      	ldr	r0, [r7, #4]
 8004b2a:	f000 f8b3 	bl	8004c94 <UART_SetConfig>
 8004b2e:	4603      	mov	r3, r0
 8004b30:	2b01      	cmp	r3, #1
 8004b32:	d101      	bne.n	8004b38 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004b34:	2301      	movs	r3, #1
 8004b36:	e01b      	b.n	8004b70 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	685a      	ldr	r2, [r3, #4]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004b46:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	689a      	ldr	r2, [r3, #8]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004b56:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	681a      	ldr	r2, [r3, #0]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f042 0201 	orr.w	r2, r2, #1
 8004b66:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004b68:	6878      	ldr	r0, [r7, #4]
 8004b6a:	f000 ffa1 	bl	8005ab0 <UART_CheckIdleState>
 8004b6e:	4603      	mov	r3, r0
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	3708      	adds	r7, #8
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bd80      	pop	{r7, pc}

08004b78 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b08a      	sub	sp, #40	@ 0x28
 8004b7c:	af02      	add	r7, sp, #8
 8004b7e:	60f8      	str	r0, [r7, #12]
 8004b80:	60b9      	str	r1, [r7, #8]
 8004b82:	603b      	str	r3, [r7, #0]
 8004b84:	4613      	mov	r3, r2
 8004b86:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b8e:	2b20      	cmp	r3, #32
 8004b90:	d17b      	bne.n	8004c8a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d002      	beq.n	8004b9e <HAL_UART_Transmit+0x26>
 8004b98:	88fb      	ldrh	r3, [r7, #6]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d101      	bne.n	8004ba2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e074      	b.n	8004c8c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	2221      	movs	r2, #33	@ 0x21
 8004bae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004bb2:	f7fc fbdb 	bl	800136c <HAL_GetTick>
 8004bb6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	88fa      	ldrh	r2, [r7, #6]
 8004bbc:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	88fa      	ldrh	r2, [r7, #6]
 8004bc4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	689b      	ldr	r3, [r3, #8]
 8004bcc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004bd0:	d108      	bne.n	8004be4 <HAL_UART_Transmit+0x6c>
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	691b      	ldr	r3, [r3, #16]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d104      	bne.n	8004be4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004bda:	2300      	movs	r3, #0
 8004bdc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	61bb      	str	r3, [r7, #24]
 8004be2:	e003      	b.n	8004bec <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004be8:	2300      	movs	r3, #0
 8004bea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004bec:	e030      	b.n	8004c50 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	9300      	str	r3, [sp, #0]
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	2180      	movs	r1, #128	@ 0x80
 8004bf8:	68f8      	ldr	r0, [r7, #12]
 8004bfa:	f001 f803 	bl	8005c04 <UART_WaitOnFlagUntilTimeout>
 8004bfe:	4603      	mov	r3, r0
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d005      	beq.n	8004c10 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	2220      	movs	r2, #32
 8004c08:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8004c0c:	2303      	movs	r3, #3
 8004c0e:	e03d      	b.n	8004c8c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8004c10:	69fb      	ldr	r3, [r7, #28]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d10b      	bne.n	8004c2e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004c16:	69bb      	ldr	r3, [r7, #24]
 8004c18:	881b      	ldrh	r3, [r3, #0]
 8004c1a:	461a      	mov	r2, r3
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c24:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004c26:	69bb      	ldr	r3, [r7, #24]
 8004c28:	3302      	adds	r3, #2
 8004c2a:	61bb      	str	r3, [r7, #24]
 8004c2c:	e007      	b.n	8004c3e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004c2e:	69fb      	ldr	r3, [r7, #28]
 8004c30:	781a      	ldrb	r2, [r3, #0]
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004c38:	69fb      	ldr	r3, [r7, #28]
 8004c3a:	3301      	adds	r3, #1
 8004c3c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004c44:	b29b      	uxth	r3, r3
 8004c46:	3b01      	subs	r3, #1
 8004c48:	b29a      	uxth	r2, r3
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004c56:	b29b      	uxth	r3, r3
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d1c8      	bne.n	8004bee <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	9300      	str	r3, [sp, #0]
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	2200      	movs	r2, #0
 8004c64:	2140      	movs	r1, #64	@ 0x40
 8004c66:	68f8      	ldr	r0, [r7, #12]
 8004c68:	f000 ffcc 	bl	8005c04 <UART_WaitOnFlagUntilTimeout>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d005      	beq.n	8004c7e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	2220      	movs	r2, #32
 8004c76:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8004c7a:	2303      	movs	r3, #3
 8004c7c:	e006      	b.n	8004c8c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	2220      	movs	r2, #32
 8004c82:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8004c86:	2300      	movs	r3, #0
 8004c88:	e000      	b.n	8004c8c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8004c8a:	2302      	movs	r3, #2
  }
}
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	3720      	adds	r7, #32
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bd80      	pop	{r7, pc}

08004c94 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c98:	b092      	sub	sp, #72	@ 0x48
 8004c9a:	af00      	add	r7, sp, #0
 8004c9c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	689a      	ldr	r2, [r3, #8]
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	691b      	ldr	r3, [r3, #16]
 8004cac:	431a      	orrs	r2, r3
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	695b      	ldr	r3, [r3, #20]
 8004cb2:	431a      	orrs	r2, r3
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	69db      	ldr	r3, [r3, #28]
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	681a      	ldr	r2, [r3, #0]
 8004cc2:	4bbe      	ldr	r3, [pc, #760]	@ (8004fbc <UART_SetConfig+0x328>)
 8004cc4:	4013      	ands	r3, r2
 8004cc6:	697a      	ldr	r2, [r7, #20]
 8004cc8:	6812      	ldr	r2, [r2, #0]
 8004cca:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004ccc:	430b      	orrs	r3, r1
 8004cce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	68da      	ldr	r2, [r3, #12]
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	430a      	orrs	r2, r1
 8004ce4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	699b      	ldr	r3, [r3, #24]
 8004cea:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4ab3      	ldr	r2, [pc, #716]	@ (8004fc0 <UART_SetConfig+0x32c>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d004      	beq.n	8004d00 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	6a1b      	ldr	r3, [r3, #32]
 8004cfa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004d00:	697b      	ldr	r3, [r7, #20]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	689a      	ldr	r2, [r3, #8]
 8004d06:	4baf      	ldr	r3, [pc, #700]	@ (8004fc4 <UART_SetConfig+0x330>)
 8004d08:	4013      	ands	r3, r2
 8004d0a:	697a      	ldr	r2, [r7, #20]
 8004d0c:	6812      	ldr	r2, [r2, #0]
 8004d0e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004d10:	430b      	orrs	r3, r1
 8004d12:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004d14:	697b      	ldr	r3, [r7, #20]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d1a:	f023 010f 	bic.w	r1, r3, #15
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	430a      	orrs	r2, r1
 8004d28:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4aa6      	ldr	r2, [pc, #664]	@ (8004fc8 <UART_SetConfig+0x334>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d177      	bne.n	8004e24 <UART_SetConfig+0x190>
 8004d34:	4ba5      	ldr	r3, [pc, #660]	@ (8004fcc <UART_SetConfig+0x338>)
 8004d36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d38:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004d3c:	2b28      	cmp	r3, #40	@ 0x28
 8004d3e:	d86d      	bhi.n	8004e1c <UART_SetConfig+0x188>
 8004d40:	a201      	add	r2, pc, #4	@ (adr r2, 8004d48 <UART_SetConfig+0xb4>)
 8004d42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d46:	bf00      	nop
 8004d48:	08004ded 	.word	0x08004ded
 8004d4c:	08004e1d 	.word	0x08004e1d
 8004d50:	08004e1d 	.word	0x08004e1d
 8004d54:	08004e1d 	.word	0x08004e1d
 8004d58:	08004e1d 	.word	0x08004e1d
 8004d5c:	08004e1d 	.word	0x08004e1d
 8004d60:	08004e1d 	.word	0x08004e1d
 8004d64:	08004e1d 	.word	0x08004e1d
 8004d68:	08004df5 	.word	0x08004df5
 8004d6c:	08004e1d 	.word	0x08004e1d
 8004d70:	08004e1d 	.word	0x08004e1d
 8004d74:	08004e1d 	.word	0x08004e1d
 8004d78:	08004e1d 	.word	0x08004e1d
 8004d7c:	08004e1d 	.word	0x08004e1d
 8004d80:	08004e1d 	.word	0x08004e1d
 8004d84:	08004e1d 	.word	0x08004e1d
 8004d88:	08004dfd 	.word	0x08004dfd
 8004d8c:	08004e1d 	.word	0x08004e1d
 8004d90:	08004e1d 	.word	0x08004e1d
 8004d94:	08004e1d 	.word	0x08004e1d
 8004d98:	08004e1d 	.word	0x08004e1d
 8004d9c:	08004e1d 	.word	0x08004e1d
 8004da0:	08004e1d 	.word	0x08004e1d
 8004da4:	08004e1d 	.word	0x08004e1d
 8004da8:	08004e05 	.word	0x08004e05
 8004dac:	08004e1d 	.word	0x08004e1d
 8004db0:	08004e1d 	.word	0x08004e1d
 8004db4:	08004e1d 	.word	0x08004e1d
 8004db8:	08004e1d 	.word	0x08004e1d
 8004dbc:	08004e1d 	.word	0x08004e1d
 8004dc0:	08004e1d 	.word	0x08004e1d
 8004dc4:	08004e1d 	.word	0x08004e1d
 8004dc8:	08004e0d 	.word	0x08004e0d
 8004dcc:	08004e1d 	.word	0x08004e1d
 8004dd0:	08004e1d 	.word	0x08004e1d
 8004dd4:	08004e1d 	.word	0x08004e1d
 8004dd8:	08004e1d 	.word	0x08004e1d
 8004ddc:	08004e1d 	.word	0x08004e1d
 8004de0:	08004e1d 	.word	0x08004e1d
 8004de4:	08004e1d 	.word	0x08004e1d
 8004de8:	08004e15 	.word	0x08004e15
 8004dec:	2301      	movs	r3, #1
 8004dee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004df2:	e326      	b.n	8005442 <UART_SetConfig+0x7ae>
 8004df4:	2304      	movs	r3, #4
 8004df6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004dfa:	e322      	b.n	8005442 <UART_SetConfig+0x7ae>
 8004dfc:	2308      	movs	r3, #8
 8004dfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004e02:	e31e      	b.n	8005442 <UART_SetConfig+0x7ae>
 8004e04:	2310      	movs	r3, #16
 8004e06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004e0a:	e31a      	b.n	8005442 <UART_SetConfig+0x7ae>
 8004e0c:	2320      	movs	r3, #32
 8004e0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004e12:	e316      	b.n	8005442 <UART_SetConfig+0x7ae>
 8004e14:	2340      	movs	r3, #64	@ 0x40
 8004e16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004e1a:	e312      	b.n	8005442 <UART_SetConfig+0x7ae>
 8004e1c:	2380      	movs	r3, #128	@ 0x80
 8004e1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004e22:	e30e      	b.n	8005442 <UART_SetConfig+0x7ae>
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a69      	ldr	r2, [pc, #420]	@ (8004fd0 <UART_SetConfig+0x33c>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d130      	bne.n	8004e90 <UART_SetConfig+0x1fc>
 8004e2e:	4b67      	ldr	r3, [pc, #412]	@ (8004fcc <UART_SetConfig+0x338>)
 8004e30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e32:	f003 0307 	and.w	r3, r3, #7
 8004e36:	2b05      	cmp	r3, #5
 8004e38:	d826      	bhi.n	8004e88 <UART_SetConfig+0x1f4>
 8004e3a:	a201      	add	r2, pc, #4	@ (adr r2, 8004e40 <UART_SetConfig+0x1ac>)
 8004e3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e40:	08004e59 	.word	0x08004e59
 8004e44:	08004e61 	.word	0x08004e61
 8004e48:	08004e69 	.word	0x08004e69
 8004e4c:	08004e71 	.word	0x08004e71
 8004e50:	08004e79 	.word	0x08004e79
 8004e54:	08004e81 	.word	0x08004e81
 8004e58:	2300      	movs	r3, #0
 8004e5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004e5e:	e2f0      	b.n	8005442 <UART_SetConfig+0x7ae>
 8004e60:	2304      	movs	r3, #4
 8004e62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004e66:	e2ec      	b.n	8005442 <UART_SetConfig+0x7ae>
 8004e68:	2308      	movs	r3, #8
 8004e6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004e6e:	e2e8      	b.n	8005442 <UART_SetConfig+0x7ae>
 8004e70:	2310      	movs	r3, #16
 8004e72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004e76:	e2e4      	b.n	8005442 <UART_SetConfig+0x7ae>
 8004e78:	2320      	movs	r3, #32
 8004e7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004e7e:	e2e0      	b.n	8005442 <UART_SetConfig+0x7ae>
 8004e80:	2340      	movs	r3, #64	@ 0x40
 8004e82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004e86:	e2dc      	b.n	8005442 <UART_SetConfig+0x7ae>
 8004e88:	2380      	movs	r3, #128	@ 0x80
 8004e8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004e8e:	e2d8      	b.n	8005442 <UART_SetConfig+0x7ae>
 8004e90:	697b      	ldr	r3, [r7, #20]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a4f      	ldr	r2, [pc, #316]	@ (8004fd4 <UART_SetConfig+0x340>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d130      	bne.n	8004efc <UART_SetConfig+0x268>
 8004e9a:	4b4c      	ldr	r3, [pc, #304]	@ (8004fcc <UART_SetConfig+0x338>)
 8004e9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e9e:	f003 0307 	and.w	r3, r3, #7
 8004ea2:	2b05      	cmp	r3, #5
 8004ea4:	d826      	bhi.n	8004ef4 <UART_SetConfig+0x260>
 8004ea6:	a201      	add	r2, pc, #4	@ (adr r2, 8004eac <UART_SetConfig+0x218>)
 8004ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eac:	08004ec5 	.word	0x08004ec5
 8004eb0:	08004ecd 	.word	0x08004ecd
 8004eb4:	08004ed5 	.word	0x08004ed5
 8004eb8:	08004edd 	.word	0x08004edd
 8004ebc:	08004ee5 	.word	0x08004ee5
 8004ec0:	08004eed 	.word	0x08004eed
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004eca:	e2ba      	b.n	8005442 <UART_SetConfig+0x7ae>
 8004ecc:	2304      	movs	r3, #4
 8004ece:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ed2:	e2b6      	b.n	8005442 <UART_SetConfig+0x7ae>
 8004ed4:	2308      	movs	r3, #8
 8004ed6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004eda:	e2b2      	b.n	8005442 <UART_SetConfig+0x7ae>
 8004edc:	2310      	movs	r3, #16
 8004ede:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ee2:	e2ae      	b.n	8005442 <UART_SetConfig+0x7ae>
 8004ee4:	2320      	movs	r3, #32
 8004ee6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004eea:	e2aa      	b.n	8005442 <UART_SetConfig+0x7ae>
 8004eec:	2340      	movs	r3, #64	@ 0x40
 8004eee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ef2:	e2a6      	b.n	8005442 <UART_SetConfig+0x7ae>
 8004ef4:	2380      	movs	r3, #128	@ 0x80
 8004ef6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004efa:	e2a2      	b.n	8005442 <UART_SetConfig+0x7ae>
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a35      	ldr	r2, [pc, #212]	@ (8004fd8 <UART_SetConfig+0x344>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d130      	bne.n	8004f68 <UART_SetConfig+0x2d4>
 8004f06:	4b31      	ldr	r3, [pc, #196]	@ (8004fcc <UART_SetConfig+0x338>)
 8004f08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f0a:	f003 0307 	and.w	r3, r3, #7
 8004f0e:	2b05      	cmp	r3, #5
 8004f10:	d826      	bhi.n	8004f60 <UART_SetConfig+0x2cc>
 8004f12:	a201      	add	r2, pc, #4	@ (adr r2, 8004f18 <UART_SetConfig+0x284>)
 8004f14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f18:	08004f31 	.word	0x08004f31
 8004f1c:	08004f39 	.word	0x08004f39
 8004f20:	08004f41 	.word	0x08004f41
 8004f24:	08004f49 	.word	0x08004f49
 8004f28:	08004f51 	.word	0x08004f51
 8004f2c:	08004f59 	.word	0x08004f59
 8004f30:	2300      	movs	r3, #0
 8004f32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f36:	e284      	b.n	8005442 <UART_SetConfig+0x7ae>
 8004f38:	2304      	movs	r3, #4
 8004f3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f3e:	e280      	b.n	8005442 <UART_SetConfig+0x7ae>
 8004f40:	2308      	movs	r3, #8
 8004f42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f46:	e27c      	b.n	8005442 <UART_SetConfig+0x7ae>
 8004f48:	2310      	movs	r3, #16
 8004f4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f4e:	e278      	b.n	8005442 <UART_SetConfig+0x7ae>
 8004f50:	2320      	movs	r3, #32
 8004f52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f56:	e274      	b.n	8005442 <UART_SetConfig+0x7ae>
 8004f58:	2340      	movs	r3, #64	@ 0x40
 8004f5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f5e:	e270      	b.n	8005442 <UART_SetConfig+0x7ae>
 8004f60:	2380      	movs	r3, #128	@ 0x80
 8004f62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f66:	e26c      	b.n	8005442 <UART_SetConfig+0x7ae>
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a1b      	ldr	r2, [pc, #108]	@ (8004fdc <UART_SetConfig+0x348>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d142      	bne.n	8004ff8 <UART_SetConfig+0x364>
 8004f72:	4b16      	ldr	r3, [pc, #88]	@ (8004fcc <UART_SetConfig+0x338>)
 8004f74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f76:	f003 0307 	and.w	r3, r3, #7
 8004f7a:	2b05      	cmp	r3, #5
 8004f7c:	d838      	bhi.n	8004ff0 <UART_SetConfig+0x35c>
 8004f7e:	a201      	add	r2, pc, #4	@ (adr r2, 8004f84 <UART_SetConfig+0x2f0>)
 8004f80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f84:	08004f9d 	.word	0x08004f9d
 8004f88:	08004fa5 	.word	0x08004fa5
 8004f8c:	08004fad 	.word	0x08004fad
 8004f90:	08004fb5 	.word	0x08004fb5
 8004f94:	08004fe1 	.word	0x08004fe1
 8004f98:	08004fe9 	.word	0x08004fe9
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004fa2:	e24e      	b.n	8005442 <UART_SetConfig+0x7ae>
 8004fa4:	2304      	movs	r3, #4
 8004fa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004faa:	e24a      	b.n	8005442 <UART_SetConfig+0x7ae>
 8004fac:	2308      	movs	r3, #8
 8004fae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004fb2:	e246      	b.n	8005442 <UART_SetConfig+0x7ae>
 8004fb4:	2310      	movs	r3, #16
 8004fb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004fba:	e242      	b.n	8005442 <UART_SetConfig+0x7ae>
 8004fbc:	cfff69f3 	.word	0xcfff69f3
 8004fc0:	58000c00 	.word	0x58000c00
 8004fc4:	11fff4ff 	.word	0x11fff4ff
 8004fc8:	40011000 	.word	0x40011000
 8004fcc:	58024400 	.word	0x58024400
 8004fd0:	40004400 	.word	0x40004400
 8004fd4:	40004800 	.word	0x40004800
 8004fd8:	40004c00 	.word	0x40004c00
 8004fdc:	40005000 	.word	0x40005000
 8004fe0:	2320      	movs	r3, #32
 8004fe2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004fe6:	e22c      	b.n	8005442 <UART_SetConfig+0x7ae>
 8004fe8:	2340      	movs	r3, #64	@ 0x40
 8004fea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004fee:	e228      	b.n	8005442 <UART_SetConfig+0x7ae>
 8004ff0:	2380      	movs	r3, #128	@ 0x80
 8004ff2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ff6:	e224      	b.n	8005442 <UART_SetConfig+0x7ae>
 8004ff8:	697b      	ldr	r3, [r7, #20]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4ab1      	ldr	r2, [pc, #708]	@ (80052c4 <UART_SetConfig+0x630>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d176      	bne.n	80050f0 <UART_SetConfig+0x45c>
 8005002:	4bb1      	ldr	r3, [pc, #708]	@ (80052c8 <UART_SetConfig+0x634>)
 8005004:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005006:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800500a:	2b28      	cmp	r3, #40	@ 0x28
 800500c:	d86c      	bhi.n	80050e8 <UART_SetConfig+0x454>
 800500e:	a201      	add	r2, pc, #4	@ (adr r2, 8005014 <UART_SetConfig+0x380>)
 8005010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005014:	080050b9 	.word	0x080050b9
 8005018:	080050e9 	.word	0x080050e9
 800501c:	080050e9 	.word	0x080050e9
 8005020:	080050e9 	.word	0x080050e9
 8005024:	080050e9 	.word	0x080050e9
 8005028:	080050e9 	.word	0x080050e9
 800502c:	080050e9 	.word	0x080050e9
 8005030:	080050e9 	.word	0x080050e9
 8005034:	080050c1 	.word	0x080050c1
 8005038:	080050e9 	.word	0x080050e9
 800503c:	080050e9 	.word	0x080050e9
 8005040:	080050e9 	.word	0x080050e9
 8005044:	080050e9 	.word	0x080050e9
 8005048:	080050e9 	.word	0x080050e9
 800504c:	080050e9 	.word	0x080050e9
 8005050:	080050e9 	.word	0x080050e9
 8005054:	080050c9 	.word	0x080050c9
 8005058:	080050e9 	.word	0x080050e9
 800505c:	080050e9 	.word	0x080050e9
 8005060:	080050e9 	.word	0x080050e9
 8005064:	080050e9 	.word	0x080050e9
 8005068:	080050e9 	.word	0x080050e9
 800506c:	080050e9 	.word	0x080050e9
 8005070:	080050e9 	.word	0x080050e9
 8005074:	080050d1 	.word	0x080050d1
 8005078:	080050e9 	.word	0x080050e9
 800507c:	080050e9 	.word	0x080050e9
 8005080:	080050e9 	.word	0x080050e9
 8005084:	080050e9 	.word	0x080050e9
 8005088:	080050e9 	.word	0x080050e9
 800508c:	080050e9 	.word	0x080050e9
 8005090:	080050e9 	.word	0x080050e9
 8005094:	080050d9 	.word	0x080050d9
 8005098:	080050e9 	.word	0x080050e9
 800509c:	080050e9 	.word	0x080050e9
 80050a0:	080050e9 	.word	0x080050e9
 80050a4:	080050e9 	.word	0x080050e9
 80050a8:	080050e9 	.word	0x080050e9
 80050ac:	080050e9 	.word	0x080050e9
 80050b0:	080050e9 	.word	0x080050e9
 80050b4:	080050e1 	.word	0x080050e1
 80050b8:	2301      	movs	r3, #1
 80050ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050be:	e1c0      	b.n	8005442 <UART_SetConfig+0x7ae>
 80050c0:	2304      	movs	r3, #4
 80050c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050c6:	e1bc      	b.n	8005442 <UART_SetConfig+0x7ae>
 80050c8:	2308      	movs	r3, #8
 80050ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050ce:	e1b8      	b.n	8005442 <UART_SetConfig+0x7ae>
 80050d0:	2310      	movs	r3, #16
 80050d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050d6:	e1b4      	b.n	8005442 <UART_SetConfig+0x7ae>
 80050d8:	2320      	movs	r3, #32
 80050da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050de:	e1b0      	b.n	8005442 <UART_SetConfig+0x7ae>
 80050e0:	2340      	movs	r3, #64	@ 0x40
 80050e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050e6:	e1ac      	b.n	8005442 <UART_SetConfig+0x7ae>
 80050e8:	2380      	movs	r3, #128	@ 0x80
 80050ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050ee:	e1a8      	b.n	8005442 <UART_SetConfig+0x7ae>
 80050f0:	697b      	ldr	r3, [r7, #20]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a75      	ldr	r2, [pc, #468]	@ (80052cc <UART_SetConfig+0x638>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d130      	bne.n	800515c <UART_SetConfig+0x4c8>
 80050fa:	4b73      	ldr	r3, [pc, #460]	@ (80052c8 <UART_SetConfig+0x634>)
 80050fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050fe:	f003 0307 	and.w	r3, r3, #7
 8005102:	2b05      	cmp	r3, #5
 8005104:	d826      	bhi.n	8005154 <UART_SetConfig+0x4c0>
 8005106:	a201      	add	r2, pc, #4	@ (adr r2, 800510c <UART_SetConfig+0x478>)
 8005108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800510c:	08005125 	.word	0x08005125
 8005110:	0800512d 	.word	0x0800512d
 8005114:	08005135 	.word	0x08005135
 8005118:	0800513d 	.word	0x0800513d
 800511c:	08005145 	.word	0x08005145
 8005120:	0800514d 	.word	0x0800514d
 8005124:	2300      	movs	r3, #0
 8005126:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800512a:	e18a      	b.n	8005442 <UART_SetConfig+0x7ae>
 800512c:	2304      	movs	r3, #4
 800512e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005132:	e186      	b.n	8005442 <UART_SetConfig+0x7ae>
 8005134:	2308      	movs	r3, #8
 8005136:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800513a:	e182      	b.n	8005442 <UART_SetConfig+0x7ae>
 800513c:	2310      	movs	r3, #16
 800513e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005142:	e17e      	b.n	8005442 <UART_SetConfig+0x7ae>
 8005144:	2320      	movs	r3, #32
 8005146:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800514a:	e17a      	b.n	8005442 <UART_SetConfig+0x7ae>
 800514c:	2340      	movs	r3, #64	@ 0x40
 800514e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005152:	e176      	b.n	8005442 <UART_SetConfig+0x7ae>
 8005154:	2380      	movs	r3, #128	@ 0x80
 8005156:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800515a:	e172      	b.n	8005442 <UART_SetConfig+0x7ae>
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a5b      	ldr	r2, [pc, #364]	@ (80052d0 <UART_SetConfig+0x63c>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d130      	bne.n	80051c8 <UART_SetConfig+0x534>
 8005166:	4b58      	ldr	r3, [pc, #352]	@ (80052c8 <UART_SetConfig+0x634>)
 8005168:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800516a:	f003 0307 	and.w	r3, r3, #7
 800516e:	2b05      	cmp	r3, #5
 8005170:	d826      	bhi.n	80051c0 <UART_SetConfig+0x52c>
 8005172:	a201      	add	r2, pc, #4	@ (adr r2, 8005178 <UART_SetConfig+0x4e4>)
 8005174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005178:	08005191 	.word	0x08005191
 800517c:	08005199 	.word	0x08005199
 8005180:	080051a1 	.word	0x080051a1
 8005184:	080051a9 	.word	0x080051a9
 8005188:	080051b1 	.word	0x080051b1
 800518c:	080051b9 	.word	0x080051b9
 8005190:	2300      	movs	r3, #0
 8005192:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005196:	e154      	b.n	8005442 <UART_SetConfig+0x7ae>
 8005198:	2304      	movs	r3, #4
 800519a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800519e:	e150      	b.n	8005442 <UART_SetConfig+0x7ae>
 80051a0:	2308      	movs	r3, #8
 80051a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051a6:	e14c      	b.n	8005442 <UART_SetConfig+0x7ae>
 80051a8:	2310      	movs	r3, #16
 80051aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051ae:	e148      	b.n	8005442 <UART_SetConfig+0x7ae>
 80051b0:	2320      	movs	r3, #32
 80051b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051b6:	e144      	b.n	8005442 <UART_SetConfig+0x7ae>
 80051b8:	2340      	movs	r3, #64	@ 0x40
 80051ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051be:	e140      	b.n	8005442 <UART_SetConfig+0x7ae>
 80051c0:	2380      	movs	r3, #128	@ 0x80
 80051c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051c6:	e13c      	b.n	8005442 <UART_SetConfig+0x7ae>
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a41      	ldr	r2, [pc, #260]	@ (80052d4 <UART_SetConfig+0x640>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	f040 8082 	bne.w	80052d8 <UART_SetConfig+0x644>
 80051d4:	4b3c      	ldr	r3, [pc, #240]	@ (80052c8 <UART_SetConfig+0x634>)
 80051d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051d8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80051dc:	2b28      	cmp	r3, #40	@ 0x28
 80051de:	d86d      	bhi.n	80052bc <UART_SetConfig+0x628>
 80051e0:	a201      	add	r2, pc, #4	@ (adr r2, 80051e8 <UART_SetConfig+0x554>)
 80051e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051e6:	bf00      	nop
 80051e8:	0800528d 	.word	0x0800528d
 80051ec:	080052bd 	.word	0x080052bd
 80051f0:	080052bd 	.word	0x080052bd
 80051f4:	080052bd 	.word	0x080052bd
 80051f8:	080052bd 	.word	0x080052bd
 80051fc:	080052bd 	.word	0x080052bd
 8005200:	080052bd 	.word	0x080052bd
 8005204:	080052bd 	.word	0x080052bd
 8005208:	08005295 	.word	0x08005295
 800520c:	080052bd 	.word	0x080052bd
 8005210:	080052bd 	.word	0x080052bd
 8005214:	080052bd 	.word	0x080052bd
 8005218:	080052bd 	.word	0x080052bd
 800521c:	080052bd 	.word	0x080052bd
 8005220:	080052bd 	.word	0x080052bd
 8005224:	080052bd 	.word	0x080052bd
 8005228:	0800529d 	.word	0x0800529d
 800522c:	080052bd 	.word	0x080052bd
 8005230:	080052bd 	.word	0x080052bd
 8005234:	080052bd 	.word	0x080052bd
 8005238:	080052bd 	.word	0x080052bd
 800523c:	080052bd 	.word	0x080052bd
 8005240:	080052bd 	.word	0x080052bd
 8005244:	080052bd 	.word	0x080052bd
 8005248:	080052a5 	.word	0x080052a5
 800524c:	080052bd 	.word	0x080052bd
 8005250:	080052bd 	.word	0x080052bd
 8005254:	080052bd 	.word	0x080052bd
 8005258:	080052bd 	.word	0x080052bd
 800525c:	080052bd 	.word	0x080052bd
 8005260:	080052bd 	.word	0x080052bd
 8005264:	080052bd 	.word	0x080052bd
 8005268:	080052ad 	.word	0x080052ad
 800526c:	080052bd 	.word	0x080052bd
 8005270:	080052bd 	.word	0x080052bd
 8005274:	080052bd 	.word	0x080052bd
 8005278:	080052bd 	.word	0x080052bd
 800527c:	080052bd 	.word	0x080052bd
 8005280:	080052bd 	.word	0x080052bd
 8005284:	080052bd 	.word	0x080052bd
 8005288:	080052b5 	.word	0x080052b5
 800528c:	2301      	movs	r3, #1
 800528e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005292:	e0d6      	b.n	8005442 <UART_SetConfig+0x7ae>
 8005294:	2304      	movs	r3, #4
 8005296:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800529a:	e0d2      	b.n	8005442 <UART_SetConfig+0x7ae>
 800529c:	2308      	movs	r3, #8
 800529e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052a2:	e0ce      	b.n	8005442 <UART_SetConfig+0x7ae>
 80052a4:	2310      	movs	r3, #16
 80052a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052aa:	e0ca      	b.n	8005442 <UART_SetConfig+0x7ae>
 80052ac:	2320      	movs	r3, #32
 80052ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052b2:	e0c6      	b.n	8005442 <UART_SetConfig+0x7ae>
 80052b4:	2340      	movs	r3, #64	@ 0x40
 80052b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052ba:	e0c2      	b.n	8005442 <UART_SetConfig+0x7ae>
 80052bc:	2380      	movs	r3, #128	@ 0x80
 80052be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052c2:	e0be      	b.n	8005442 <UART_SetConfig+0x7ae>
 80052c4:	40011400 	.word	0x40011400
 80052c8:	58024400 	.word	0x58024400
 80052cc:	40007800 	.word	0x40007800
 80052d0:	40007c00 	.word	0x40007c00
 80052d4:	40011800 	.word	0x40011800
 80052d8:	697b      	ldr	r3, [r7, #20]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4aad      	ldr	r2, [pc, #692]	@ (8005594 <UART_SetConfig+0x900>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d176      	bne.n	80053d0 <UART_SetConfig+0x73c>
 80052e2:	4bad      	ldr	r3, [pc, #692]	@ (8005598 <UART_SetConfig+0x904>)
 80052e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052e6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80052ea:	2b28      	cmp	r3, #40	@ 0x28
 80052ec:	d86c      	bhi.n	80053c8 <UART_SetConfig+0x734>
 80052ee:	a201      	add	r2, pc, #4	@ (adr r2, 80052f4 <UART_SetConfig+0x660>)
 80052f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052f4:	08005399 	.word	0x08005399
 80052f8:	080053c9 	.word	0x080053c9
 80052fc:	080053c9 	.word	0x080053c9
 8005300:	080053c9 	.word	0x080053c9
 8005304:	080053c9 	.word	0x080053c9
 8005308:	080053c9 	.word	0x080053c9
 800530c:	080053c9 	.word	0x080053c9
 8005310:	080053c9 	.word	0x080053c9
 8005314:	080053a1 	.word	0x080053a1
 8005318:	080053c9 	.word	0x080053c9
 800531c:	080053c9 	.word	0x080053c9
 8005320:	080053c9 	.word	0x080053c9
 8005324:	080053c9 	.word	0x080053c9
 8005328:	080053c9 	.word	0x080053c9
 800532c:	080053c9 	.word	0x080053c9
 8005330:	080053c9 	.word	0x080053c9
 8005334:	080053a9 	.word	0x080053a9
 8005338:	080053c9 	.word	0x080053c9
 800533c:	080053c9 	.word	0x080053c9
 8005340:	080053c9 	.word	0x080053c9
 8005344:	080053c9 	.word	0x080053c9
 8005348:	080053c9 	.word	0x080053c9
 800534c:	080053c9 	.word	0x080053c9
 8005350:	080053c9 	.word	0x080053c9
 8005354:	080053b1 	.word	0x080053b1
 8005358:	080053c9 	.word	0x080053c9
 800535c:	080053c9 	.word	0x080053c9
 8005360:	080053c9 	.word	0x080053c9
 8005364:	080053c9 	.word	0x080053c9
 8005368:	080053c9 	.word	0x080053c9
 800536c:	080053c9 	.word	0x080053c9
 8005370:	080053c9 	.word	0x080053c9
 8005374:	080053b9 	.word	0x080053b9
 8005378:	080053c9 	.word	0x080053c9
 800537c:	080053c9 	.word	0x080053c9
 8005380:	080053c9 	.word	0x080053c9
 8005384:	080053c9 	.word	0x080053c9
 8005388:	080053c9 	.word	0x080053c9
 800538c:	080053c9 	.word	0x080053c9
 8005390:	080053c9 	.word	0x080053c9
 8005394:	080053c1 	.word	0x080053c1
 8005398:	2301      	movs	r3, #1
 800539a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800539e:	e050      	b.n	8005442 <UART_SetConfig+0x7ae>
 80053a0:	2304      	movs	r3, #4
 80053a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053a6:	e04c      	b.n	8005442 <UART_SetConfig+0x7ae>
 80053a8:	2308      	movs	r3, #8
 80053aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053ae:	e048      	b.n	8005442 <UART_SetConfig+0x7ae>
 80053b0:	2310      	movs	r3, #16
 80053b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053b6:	e044      	b.n	8005442 <UART_SetConfig+0x7ae>
 80053b8:	2320      	movs	r3, #32
 80053ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053be:	e040      	b.n	8005442 <UART_SetConfig+0x7ae>
 80053c0:	2340      	movs	r3, #64	@ 0x40
 80053c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053c6:	e03c      	b.n	8005442 <UART_SetConfig+0x7ae>
 80053c8:	2380      	movs	r3, #128	@ 0x80
 80053ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053ce:	e038      	b.n	8005442 <UART_SetConfig+0x7ae>
 80053d0:	697b      	ldr	r3, [r7, #20]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a71      	ldr	r2, [pc, #452]	@ (800559c <UART_SetConfig+0x908>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d130      	bne.n	800543c <UART_SetConfig+0x7a8>
 80053da:	4b6f      	ldr	r3, [pc, #444]	@ (8005598 <UART_SetConfig+0x904>)
 80053dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053de:	f003 0307 	and.w	r3, r3, #7
 80053e2:	2b05      	cmp	r3, #5
 80053e4:	d826      	bhi.n	8005434 <UART_SetConfig+0x7a0>
 80053e6:	a201      	add	r2, pc, #4	@ (adr r2, 80053ec <UART_SetConfig+0x758>)
 80053e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053ec:	08005405 	.word	0x08005405
 80053f0:	0800540d 	.word	0x0800540d
 80053f4:	08005415 	.word	0x08005415
 80053f8:	0800541d 	.word	0x0800541d
 80053fc:	08005425 	.word	0x08005425
 8005400:	0800542d 	.word	0x0800542d
 8005404:	2302      	movs	r3, #2
 8005406:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800540a:	e01a      	b.n	8005442 <UART_SetConfig+0x7ae>
 800540c:	2304      	movs	r3, #4
 800540e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005412:	e016      	b.n	8005442 <UART_SetConfig+0x7ae>
 8005414:	2308      	movs	r3, #8
 8005416:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800541a:	e012      	b.n	8005442 <UART_SetConfig+0x7ae>
 800541c:	2310      	movs	r3, #16
 800541e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005422:	e00e      	b.n	8005442 <UART_SetConfig+0x7ae>
 8005424:	2320      	movs	r3, #32
 8005426:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800542a:	e00a      	b.n	8005442 <UART_SetConfig+0x7ae>
 800542c:	2340      	movs	r3, #64	@ 0x40
 800542e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005432:	e006      	b.n	8005442 <UART_SetConfig+0x7ae>
 8005434:	2380      	movs	r3, #128	@ 0x80
 8005436:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800543a:	e002      	b.n	8005442 <UART_SetConfig+0x7ae>
 800543c:	2380      	movs	r3, #128	@ 0x80
 800543e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a55      	ldr	r2, [pc, #340]	@ (800559c <UART_SetConfig+0x908>)
 8005448:	4293      	cmp	r3, r2
 800544a:	f040 80f8 	bne.w	800563e <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800544e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005452:	2b20      	cmp	r3, #32
 8005454:	dc46      	bgt.n	80054e4 <UART_SetConfig+0x850>
 8005456:	2b02      	cmp	r3, #2
 8005458:	db75      	blt.n	8005546 <UART_SetConfig+0x8b2>
 800545a:	3b02      	subs	r3, #2
 800545c:	2b1e      	cmp	r3, #30
 800545e:	d872      	bhi.n	8005546 <UART_SetConfig+0x8b2>
 8005460:	a201      	add	r2, pc, #4	@ (adr r2, 8005468 <UART_SetConfig+0x7d4>)
 8005462:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005466:	bf00      	nop
 8005468:	080054eb 	.word	0x080054eb
 800546c:	08005547 	.word	0x08005547
 8005470:	080054f3 	.word	0x080054f3
 8005474:	08005547 	.word	0x08005547
 8005478:	08005547 	.word	0x08005547
 800547c:	08005547 	.word	0x08005547
 8005480:	08005503 	.word	0x08005503
 8005484:	08005547 	.word	0x08005547
 8005488:	08005547 	.word	0x08005547
 800548c:	08005547 	.word	0x08005547
 8005490:	08005547 	.word	0x08005547
 8005494:	08005547 	.word	0x08005547
 8005498:	08005547 	.word	0x08005547
 800549c:	08005547 	.word	0x08005547
 80054a0:	08005513 	.word	0x08005513
 80054a4:	08005547 	.word	0x08005547
 80054a8:	08005547 	.word	0x08005547
 80054ac:	08005547 	.word	0x08005547
 80054b0:	08005547 	.word	0x08005547
 80054b4:	08005547 	.word	0x08005547
 80054b8:	08005547 	.word	0x08005547
 80054bc:	08005547 	.word	0x08005547
 80054c0:	08005547 	.word	0x08005547
 80054c4:	08005547 	.word	0x08005547
 80054c8:	08005547 	.word	0x08005547
 80054cc:	08005547 	.word	0x08005547
 80054d0:	08005547 	.word	0x08005547
 80054d4:	08005547 	.word	0x08005547
 80054d8:	08005547 	.word	0x08005547
 80054dc:	08005547 	.word	0x08005547
 80054e0:	08005539 	.word	0x08005539
 80054e4:	2b40      	cmp	r3, #64	@ 0x40
 80054e6:	d02a      	beq.n	800553e <UART_SetConfig+0x8aa>
 80054e8:	e02d      	b.n	8005546 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80054ea:	f7fe fc05 	bl	8003cf8 <HAL_RCCEx_GetD3PCLK1Freq>
 80054ee:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80054f0:	e02f      	b.n	8005552 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80054f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80054f6:	4618      	mov	r0, r3
 80054f8:	f7fe fc14 	bl	8003d24 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80054fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005500:	e027      	b.n	8005552 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005502:	f107 0318 	add.w	r3, r7, #24
 8005506:	4618      	mov	r0, r3
 8005508:	f7fe fd60 	bl	8003fcc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800550c:	69fb      	ldr	r3, [r7, #28]
 800550e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005510:	e01f      	b.n	8005552 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005512:	4b21      	ldr	r3, [pc, #132]	@ (8005598 <UART_SetConfig+0x904>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f003 0320 	and.w	r3, r3, #32
 800551a:	2b00      	cmp	r3, #0
 800551c:	d009      	beq.n	8005532 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800551e:	4b1e      	ldr	r3, [pc, #120]	@ (8005598 <UART_SetConfig+0x904>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	08db      	lsrs	r3, r3, #3
 8005524:	f003 0303 	and.w	r3, r3, #3
 8005528:	4a1d      	ldr	r2, [pc, #116]	@ (80055a0 <UART_SetConfig+0x90c>)
 800552a:	fa22 f303 	lsr.w	r3, r2, r3
 800552e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005530:	e00f      	b.n	8005552 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8005532:	4b1b      	ldr	r3, [pc, #108]	@ (80055a0 <UART_SetConfig+0x90c>)
 8005534:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005536:	e00c      	b.n	8005552 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005538:	4b1a      	ldr	r3, [pc, #104]	@ (80055a4 <UART_SetConfig+0x910>)
 800553a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800553c:	e009      	b.n	8005552 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800553e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005542:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005544:	e005      	b.n	8005552 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8005546:	2300      	movs	r3, #0
 8005548:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800554a:	2301      	movs	r3, #1
 800554c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005550:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005552:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005554:	2b00      	cmp	r3, #0
 8005556:	f000 81ee 	beq.w	8005936 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800555e:	4a12      	ldr	r2, [pc, #72]	@ (80055a8 <UART_SetConfig+0x914>)
 8005560:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005564:	461a      	mov	r2, r3
 8005566:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005568:	fbb3 f3f2 	udiv	r3, r3, r2
 800556c:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	685a      	ldr	r2, [r3, #4]
 8005572:	4613      	mov	r3, r2
 8005574:	005b      	lsls	r3, r3, #1
 8005576:	4413      	add	r3, r2
 8005578:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800557a:	429a      	cmp	r2, r3
 800557c:	d305      	bcc.n	800558a <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	685b      	ldr	r3, [r3, #4]
 8005582:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005584:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005586:	429a      	cmp	r2, r3
 8005588:	d910      	bls.n	80055ac <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800558a:	2301      	movs	r3, #1
 800558c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005590:	e1d1      	b.n	8005936 <UART_SetConfig+0xca2>
 8005592:	bf00      	nop
 8005594:	40011c00 	.word	0x40011c00
 8005598:	58024400 	.word	0x58024400
 800559c:	58000c00 	.word	0x58000c00
 80055a0:	03d09000 	.word	0x03d09000
 80055a4:	003d0900 	.word	0x003d0900
 80055a8:	0800d608 	.word	0x0800d608
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80055ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80055ae:	2200      	movs	r2, #0
 80055b0:	60bb      	str	r3, [r7, #8]
 80055b2:	60fa      	str	r2, [r7, #12]
 80055b4:	697b      	ldr	r3, [r7, #20]
 80055b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055b8:	4ac0      	ldr	r2, [pc, #768]	@ (80058bc <UART_SetConfig+0xc28>)
 80055ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80055be:	b29b      	uxth	r3, r3
 80055c0:	2200      	movs	r2, #0
 80055c2:	603b      	str	r3, [r7, #0]
 80055c4:	607a      	str	r2, [r7, #4]
 80055c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80055ca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80055ce:	f7fb f8a3 	bl	8000718 <__aeabi_uldivmod>
 80055d2:	4602      	mov	r2, r0
 80055d4:	460b      	mov	r3, r1
 80055d6:	4610      	mov	r0, r2
 80055d8:	4619      	mov	r1, r3
 80055da:	f04f 0200 	mov.w	r2, #0
 80055de:	f04f 0300 	mov.w	r3, #0
 80055e2:	020b      	lsls	r3, r1, #8
 80055e4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80055e8:	0202      	lsls	r2, r0, #8
 80055ea:	6979      	ldr	r1, [r7, #20]
 80055ec:	6849      	ldr	r1, [r1, #4]
 80055ee:	0849      	lsrs	r1, r1, #1
 80055f0:	2000      	movs	r0, #0
 80055f2:	460c      	mov	r4, r1
 80055f4:	4605      	mov	r5, r0
 80055f6:	eb12 0804 	adds.w	r8, r2, r4
 80055fa:	eb43 0905 	adc.w	r9, r3, r5
 80055fe:	697b      	ldr	r3, [r7, #20]
 8005600:	685b      	ldr	r3, [r3, #4]
 8005602:	2200      	movs	r2, #0
 8005604:	469a      	mov	sl, r3
 8005606:	4693      	mov	fp, r2
 8005608:	4652      	mov	r2, sl
 800560a:	465b      	mov	r3, fp
 800560c:	4640      	mov	r0, r8
 800560e:	4649      	mov	r1, r9
 8005610:	f7fb f882 	bl	8000718 <__aeabi_uldivmod>
 8005614:	4602      	mov	r2, r0
 8005616:	460b      	mov	r3, r1
 8005618:	4613      	mov	r3, r2
 800561a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800561c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800561e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005622:	d308      	bcc.n	8005636 <UART_SetConfig+0x9a2>
 8005624:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005626:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800562a:	d204      	bcs.n	8005636 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800562c:	697b      	ldr	r3, [r7, #20]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005632:	60da      	str	r2, [r3, #12]
 8005634:	e17f      	b.n	8005936 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8005636:	2301      	movs	r3, #1
 8005638:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800563c:	e17b      	b.n	8005936 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	69db      	ldr	r3, [r3, #28]
 8005642:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005646:	f040 80bd 	bne.w	80057c4 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800564a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800564e:	2b20      	cmp	r3, #32
 8005650:	dc48      	bgt.n	80056e4 <UART_SetConfig+0xa50>
 8005652:	2b00      	cmp	r3, #0
 8005654:	db7b      	blt.n	800574e <UART_SetConfig+0xaba>
 8005656:	2b20      	cmp	r3, #32
 8005658:	d879      	bhi.n	800574e <UART_SetConfig+0xaba>
 800565a:	a201      	add	r2, pc, #4	@ (adr r2, 8005660 <UART_SetConfig+0x9cc>)
 800565c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005660:	080056eb 	.word	0x080056eb
 8005664:	080056f3 	.word	0x080056f3
 8005668:	0800574f 	.word	0x0800574f
 800566c:	0800574f 	.word	0x0800574f
 8005670:	080056fb 	.word	0x080056fb
 8005674:	0800574f 	.word	0x0800574f
 8005678:	0800574f 	.word	0x0800574f
 800567c:	0800574f 	.word	0x0800574f
 8005680:	0800570b 	.word	0x0800570b
 8005684:	0800574f 	.word	0x0800574f
 8005688:	0800574f 	.word	0x0800574f
 800568c:	0800574f 	.word	0x0800574f
 8005690:	0800574f 	.word	0x0800574f
 8005694:	0800574f 	.word	0x0800574f
 8005698:	0800574f 	.word	0x0800574f
 800569c:	0800574f 	.word	0x0800574f
 80056a0:	0800571b 	.word	0x0800571b
 80056a4:	0800574f 	.word	0x0800574f
 80056a8:	0800574f 	.word	0x0800574f
 80056ac:	0800574f 	.word	0x0800574f
 80056b0:	0800574f 	.word	0x0800574f
 80056b4:	0800574f 	.word	0x0800574f
 80056b8:	0800574f 	.word	0x0800574f
 80056bc:	0800574f 	.word	0x0800574f
 80056c0:	0800574f 	.word	0x0800574f
 80056c4:	0800574f 	.word	0x0800574f
 80056c8:	0800574f 	.word	0x0800574f
 80056cc:	0800574f 	.word	0x0800574f
 80056d0:	0800574f 	.word	0x0800574f
 80056d4:	0800574f 	.word	0x0800574f
 80056d8:	0800574f 	.word	0x0800574f
 80056dc:	0800574f 	.word	0x0800574f
 80056e0:	08005741 	.word	0x08005741
 80056e4:	2b40      	cmp	r3, #64	@ 0x40
 80056e6:	d02e      	beq.n	8005746 <UART_SetConfig+0xab2>
 80056e8:	e031      	b.n	800574e <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80056ea:	f7fd f8d9 	bl	80028a0 <HAL_RCC_GetPCLK1Freq>
 80056ee:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80056f0:	e033      	b.n	800575a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80056f2:	f7fd f8eb 	bl	80028cc <HAL_RCC_GetPCLK2Freq>
 80056f6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80056f8:	e02f      	b.n	800575a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80056fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80056fe:	4618      	mov	r0, r3
 8005700:	f7fe fb10 	bl	8003d24 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005704:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005706:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005708:	e027      	b.n	800575a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800570a:	f107 0318 	add.w	r3, r7, #24
 800570e:	4618      	mov	r0, r3
 8005710:	f7fe fc5c 	bl	8003fcc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005714:	69fb      	ldr	r3, [r7, #28]
 8005716:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005718:	e01f      	b.n	800575a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800571a:	4b69      	ldr	r3, [pc, #420]	@ (80058c0 <UART_SetConfig+0xc2c>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f003 0320 	and.w	r3, r3, #32
 8005722:	2b00      	cmp	r3, #0
 8005724:	d009      	beq.n	800573a <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005726:	4b66      	ldr	r3, [pc, #408]	@ (80058c0 <UART_SetConfig+0xc2c>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	08db      	lsrs	r3, r3, #3
 800572c:	f003 0303 	and.w	r3, r3, #3
 8005730:	4a64      	ldr	r2, [pc, #400]	@ (80058c4 <UART_SetConfig+0xc30>)
 8005732:	fa22 f303 	lsr.w	r3, r2, r3
 8005736:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005738:	e00f      	b.n	800575a <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800573a:	4b62      	ldr	r3, [pc, #392]	@ (80058c4 <UART_SetConfig+0xc30>)
 800573c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800573e:	e00c      	b.n	800575a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005740:	4b61      	ldr	r3, [pc, #388]	@ (80058c8 <UART_SetConfig+0xc34>)
 8005742:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005744:	e009      	b.n	800575a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005746:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800574a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800574c:	e005      	b.n	800575a <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800574e:	2300      	movs	r3, #0
 8005750:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005752:	2301      	movs	r3, #1
 8005754:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005758:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800575a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800575c:	2b00      	cmp	r3, #0
 800575e:	f000 80ea 	beq.w	8005936 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005766:	4a55      	ldr	r2, [pc, #340]	@ (80058bc <UART_SetConfig+0xc28>)
 8005768:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800576c:	461a      	mov	r2, r3
 800576e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005770:	fbb3 f3f2 	udiv	r3, r3, r2
 8005774:	005a      	lsls	r2, r3, #1
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	085b      	lsrs	r3, r3, #1
 800577c:	441a      	add	r2, r3
 800577e:	697b      	ldr	r3, [r7, #20]
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	fbb2 f3f3 	udiv	r3, r2, r3
 8005786:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005788:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800578a:	2b0f      	cmp	r3, #15
 800578c:	d916      	bls.n	80057bc <UART_SetConfig+0xb28>
 800578e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005790:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005794:	d212      	bcs.n	80057bc <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005796:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005798:	b29b      	uxth	r3, r3
 800579a:	f023 030f 	bic.w	r3, r3, #15
 800579e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80057a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057a2:	085b      	lsrs	r3, r3, #1
 80057a4:	b29b      	uxth	r3, r3
 80057a6:	f003 0307 	and.w	r3, r3, #7
 80057aa:	b29a      	uxth	r2, r3
 80057ac:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80057ae:	4313      	orrs	r3, r2
 80057b0:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80057b8:	60da      	str	r2, [r3, #12]
 80057ba:	e0bc      	b.n	8005936 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80057bc:	2301      	movs	r3, #1
 80057be:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80057c2:	e0b8      	b.n	8005936 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80057c4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80057c8:	2b20      	cmp	r3, #32
 80057ca:	dc4b      	bgt.n	8005864 <UART_SetConfig+0xbd0>
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	f2c0 8087 	blt.w	80058e0 <UART_SetConfig+0xc4c>
 80057d2:	2b20      	cmp	r3, #32
 80057d4:	f200 8084 	bhi.w	80058e0 <UART_SetConfig+0xc4c>
 80057d8:	a201      	add	r2, pc, #4	@ (adr r2, 80057e0 <UART_SetConfig+0xb4c>)
 80057da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057de:	bf00      	nop
 80057e0:	0800586b 	.word	0x0800586b
 80057e4:	08005873 	.word	0x08005873
 80057e8:	080058e1 	.word	0x080058e1
 80057ec:	080058e1 	.word	0x080058e1
 80057f0:	0800587b 	.word	0x0800587b
 80057f4:	080058e1 	.word	0x080058e1
 80057f8:	080058e1 	.word	0x080058e1
 80057fc:	080058e1 	.word	0x080058e1
 8005800:	0800588b 	.word	0x0800588b
 8005804:	080058e1 	.word	0x080058e1
 8005808:	080058e1 	.word	0x080058e1
 800580c:	080058e1 	.word	0x080058e1
 8005810:	080058e1 	.word	0x080058e1
 8005814:	080058e1 	.word	0x080058e1
 8005818:	080058e1 	.word	0x080058e1
 800581c:	080058e1 	.word	0x080058e1
 8005820:	0800589b 	.word	0x0800589b
 8005824:	080058e1 	.word	0x080058e1
 8005828:	080058e1 	.word	0x080058e1
 800582c:	080058e1 	.word	0x080058e1
 8005830:	080058e1 	.word	0x080058e1
 8005834:	080058e1 	.word	0x080058e1
 8005838:	080058e1 	.word	0x080058e1
 800583c:	080058e1 	.word	0x080058e1
 8005840:	080058e1 	.word	0x080058e1
 8005844:	080058e1 	.word	0x080058e1
 8005848:	080058e1 	.word	0x080058e1
 800584c:	080058e1 	.word	0x080058e1
 8005850:	080058e1 	.word	0x080058e1
 8005854:	080058e1 	.word	0x080058e1
 8005858:	080058e1 	.word	0x080058e1
 800585c:	080058e1 	.word	0x080058e1
 8005860:	080058d3 	.word	0x080058d3
 8005864:	2b40      	cmp	r3, #64	@ 0x40
 8005866:	d037      	beq.n	80058d8 <UART_SetConfig+0xc44>
 8005868:	e03a      	b.n	80058e0 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800586a:	f7fd f819 	bl	80028a0 <HAL_RCC_GetPCLK1Freq>
 800586e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005870:	e03c      	b.n	80058ec <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005872:	f7fd f82b 	bl	80028cc <HAL_RCC_GetPCLK2Freq>
 8005876:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005878:	e038      	b.n	80058ec <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800587a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800587e:	4618      	mov	r0, r3
 8005880:	f7fe fa50 	bl	8003d24 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005884:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005886:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005888:	e030      	b.n	80058ec <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800588a:	f107 0318 	add.w	r3, r7, #24
 800588e:	4618      	mov	r0, r3
 8005890:	f7fe fb9c 	bl	8003fcc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005894:	69fb      	ldr	r3, [r7, #28]
 8005896:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005898:	e028      	b.n	80058ec <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800589a:	4b09      	ldr	r3, [pc, #36]	@ (80058c0 <UART_SetConfig+0xc2c>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f003 0320 	and.w	r3, r3, #32
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d012      	beq.n	80058cc <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80058a6:	4b06      	ldr	r3, [pc, #24]	@ (80058c0 <UART_SetConfig+0xc2c>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	08db      	lsrs	r3, r3, #3
 80058ac:	f003 0303 	and.w	r3, r3, #3
 80058b0:	4a04      	ldr	r2, [pc, #16]	@ (80058c4 <UART_SetConfig+0xc30>)
 80058b2:	fa22 f303 	lsr.w	r3, r2, r3
 80058b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80058b8:	e018      	b.n	80058ec <UART_SetConfig+0xc58>
 80058ba:	bf00      	nop
 80058bc:	0800d608 	.word	0x0800d608
 80058c0:	58024400 	.word	0x58024400
 80058c4:	03d09000 	.word	0x03d09000
 80058c8:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 80058cc:	4b24      	ldr	r3, [pc, #144]	@ (8005960 <UART_SetConfig+0xccc>)
 80058ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80058d0:	e00c      	b.n	80058ec <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80058d2:	4b24      	ldr	r3, [pc, #144]	@ (8005964 <UART_SetConfig+0xcd0>)
 80058d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80058d6:	e009      	b.n	80058ec <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80058d8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80058dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80058de:	e005      	b.n	80058ec <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 80058e0:	2300      	movs	r3, #0
 80058e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80058e4:	2301      	movs	r3, #1
 80058e6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80058ea:	bf00      	nop
    }

    if (pclk != 0U)
 80058ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d021      	beq.n	8005936 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058f6:	4a1c      	ldr	r2, [pc, #112]	@ (8005968 <UART_SetConfig+0xcd4>)
 80058f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80058fc:	461a      	mov	r2, r3
 80058fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005900:	fbb3 f2f2 	udiv	r2, r3, r2
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	685b      	ldr	r3, [r3, #4]
 8005908:	085b      	lsrs	r3, r3, #1
 800590a:	441a      	add	r2, r3
 800590c:	697b      	ldr	r3, [r7, #20]
 800590e:	685b      	ldr	r3, [r3, #4]
 8005910:	fbb2 f3f3 	udiv	r3, r2, r3
 8005914:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005916:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005918:	2b0f      	cmp	r3, #15
 800591a:	d909      	bls.n	8005930 <UART_SetConfig+0xc9c>
 800591c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800591e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005922:	d205      	bcs.n	8005930 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005924:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005926:	b29a      	uxth	r2, r3
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	60da      	str	r2, [r3, #12]
 800592e:	e002      	b.n	8005936 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8005930:	2301      	movs	r3, #1
 8005932:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005936:	697b      	ldr	r3, [r7, #20]
 8005938:	2201      	movs	r2, #1
 800593a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	2201      	movs	r2, #1
 8005942:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	2200      	movs	r2, #0
 800594a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800594c:	697b      	ldr	r3, [r7, #20]
 800594e:	2200      	movs	r2, #0
 8005950:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005952:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8005956:	4618      	mov	r0, r3
 8005958:	3748      	adds	r7, #72	@ 0x48
 800595a:	46bd      	mov	sp, r7
 800595c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005960:	03d09000 	.word	0x03d09000
 8005964:	003d0900 	.word	0x003d0900
 8005968:	0800d608 	.word	0x0800d608

0800596c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800596c:	b480      	push	{r7}
 800596e:	b083      	sub	sp, #12
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005978:	f003 0308 	and.w	r3, r3, #8
 800597c:	2b00      	cmp	r3, #0
 800597e:	d00a      	beq.n	8005996 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	685b      	ldr	r3, [r3, #4]
 8005986:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	430a      	orrs	r2, r1
 8005994:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800599a:	f003 0301 	and.w	r3, r3, #1
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d00a      	beq.n	80059b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	685b      	ldr	r3, [r3, #4]
 80059a8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	430a      	orrs	r2, r1
 80059b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059bc:	f003 0302 	and.w	r3, r3, #2
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d00a      	beq.n	80059da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	685b      	ldr	r3, [r3, #4]
 80059ca:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	430a      	orrs	r2, r1
 80059d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059de:	f003 0304 	and.w	r3, r3, #4
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d00a      	beq.n	80059fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	685b      	ldr	r3, [r3, #4]
 80059ec:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	430a      	orrs	r2, r1
 80059fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a00:	f003 0310 	and.w	r3, r3, #16
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d00a      	beq.n	8005a1e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	689b      	ldr	r3, [r3, #8]
 8005a0e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	430a      	orrs	r2, r1
 8005a1c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a22:	f003 0320 	and.w	r3, r3, #32
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d00a      	beq.n	8005a40 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	689b      	ldr	r3, [r3, #8]
 8005a30:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	430a      	orrs	r2, r1
 8005a3e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d01a      	beq.n	8005a82 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	685b      	ldr	r3, [r3, #4]
 8005a52:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	430a      	orrs	r2, r1
 8005a60:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a66:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005a6a:	d10a      	bne.n	8005a82 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	685b      	ldr	r3, [r3, #4]
 8005a72:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	430a      	orrs	r2, r1
 8005a80:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d00a      	beq.n	8005aa4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	685b      	ldr	r3, [r3, #4]
 8005a94:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	430a      	orrs	r2, r1
 8005aa2:	605a      	str	r2, [r3, #4]
  }
}
 8005aa4:	bf00      	nop
 8005aa6:	370c      	adds	r7, #12
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aae:	4770      	bx	lr

08005ab0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b098      	sub	sp, #96	@ 0x60
 8005ab4:	af02      	add	r7, sp, #8
 8005ab6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2200      	movs	r2, #0
 8005abc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005ac0:	f7fb fc54 	bl	800136c <HAL_GetTick>
 8005ac4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f003 0308 	and.w	r3, r3, #8
 8005ad0:	2b08      	cmp	r3, #8
 8005ad2:	d12f      	bne.n	8005b34 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ad4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005ad8:	9300      	str	r3, [sp, #0]
 8005ada:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005adc:	2200      	movs	r2, #0
 8005ade:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005ae2:	6878      	ldr	r0, [r7, #4]
 8005ae4:	f000 f88e 	bl	8005c04 <UART_WaitOnFlagUntilTimeout>
 8005ae8:	4603      	mov	r3, r0
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d022      	beq.n	8005b34 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005af4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005af6:	e853 3f00 	ldrex	r3, [r3]
 8005afa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005afc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005afe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005b02:	653b      	str	r3, [r7, #80]	@ 0x50
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	461a      	mov	r2, r3
 8005b0a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005b0c:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b0e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b10:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005b12:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005b14:	e841 2300 	strex	r3, r2, [r1]
 8005b18:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005b1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d1e6      	bne.n	8005aee <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2220      	movs	r2, #32
 8005b24:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b30:	2303      	movs	r3, #3
 8005b32:	e063      	b.n	8005bfc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f003 0304 	and.w	r3, r3, #4
 8005b3e:	2b04      	cmp	r3, #4
 8005b40:	d149      	bne.n	8005bd6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b42:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005b46:	9300      	str	r3, [sp, #0]
 8005b48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005b50:	6878      	ldr	r0, [r7, #4]
 8005b52:	f000 f857 	bl	8005c04 <UART_WaitOnFlagUntilTimeout>
 8005b56:	4603      	mov	r3, r0
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d03c      	beq.n	8005bd6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b64:	e853 3f00 	ldrex	r3, [r3]
 8005b68:	623b      	str	r3, [r7, #32]
   return(result);
 8005b6a:	6a3b      	ldr	r3, [r7, #32]
 8005b6c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005b70:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	461a      	mov	r2, r3
 8005b78:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005b7a:	633b      	str	r3, [r7, #48]	@ 0x30
 8005b7c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b7e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005b80:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b82:	e841 2300 	strex	r3, r2, [r1]
 8005b86:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005b88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d1e6      	bne.n	8005b5c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	3308      	adds	r3, #8
 8005b94:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b96:	693b      	ldr	r3, [r7, #16]
 8005b98:	e853 3f00 	ldrex	r3, [r3]
 8005b9c:	60fb      	str	r3, [r7, #12]
   return(result);
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	f023 0301 	bic.w	r3, r3, #1
 8005ba4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	3308      	adds	r3, #8
 8005bac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005bae:	61fa      	str	r2, [r7, #28]
 8005bb0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bb2:	69b9      	ldr	r1, [r7, #24]
 8005bb4:	69fa      	ldr	r2, [r7, #28]
 8005bb6:	e841 2300 	strex	r3, r2, [r1]
 8005bba:	617b      	str	r3, [r7, #20]
   return(result);
 8005bbc:	697b      	ldr	r3, [r7, #20]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d1e5      	bne.n	8005b8e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2220      	movs	r2, #32
 8005bc6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005bd2:	2303      	movs	r3, #3
 8005bd4:	e012      	b.n	8005bfc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2220      	movs	r2, #32
 8005bda:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2220      	movs	r2, #32
 8005be2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2200      	movs	r2, #0
 8005bea:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2200      	movs	r2, #0
 8005bf0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005bfa:	2300      	movs	r3, #0
}
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	3758      	adds	r7, #88	@ 0x58
 8005c00:	46bd      	mov	sp, r7
 8005c02:	bd80      	pop	{r7, pc}

08005c04 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b084      	sub	sp, #16
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	60f8      	str	r0, [r7, #12]
 8005c0c:	60b9      	str	r1, [r7, #8]
 8005c0e:	603b      	str	r3, [r7, #0]
 8005c10:	4613      	mov	r3, r2
 8005c12:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c14:	e04f      	b.n	8005cb6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c16:	69bb      	ldr	r3, [r7, #24]
 8005c18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c1c:	d04b      	beq.n	8005cb6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c1e:	f7fb fba5 	bl	800136c <HAL_GetTick>
 8005c22:	4602      	mov	r2, r0
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	1ad3      	subs	r3, r2, r3
 8005c28:	69ba      	ldr	r2, [r7, #24]
 8005c2a:	429a      	cmp	r2, r3
 8005c2c:	d302      	bcc.n	8005c34 <UART_WaitOnFlagUntilTimeout+0x30>
 8005c2e:	69bb      	ldr	r3, [r7, #24]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d101      	bne.n	8005c38 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005c34:	2303      	movs	r3, #3
 8005c36:	e04e      	b.n	8005cd6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f003 0304 	and.w	r3, r3, #4
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d037      	beq.n	8005cb6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	2b80      	cmp	r3, #128	@ 0x80
 8005c4a:	d034      	beq.n	8005cb6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	2b40      	cmp	r3, #64	@ 0x40
 8005c50:	d031      	beq.n	8005cb6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	69db      	ldr	r3, [r3, #28]
 8005c58:	f003 0308 	and.w	r3, r3, #8
 8005c5c:	2b08      	cmp	r3, #8
 8005c5e:	d110      	bne.n	8005c82 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	2208      	movs	r2, #8
 8005c66:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005c68:	68f8      	ldr	r0, [r7, #12]
 8005c6a:	f000 f839 	bl	8005ce0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	2208      	movs	r2, #8
 8005c72:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	2200      	movs	r2, #0
 8005c7a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005c7e:	2301      	movs	r3, #1
 8005c80:	e029      	b.n	8005cd6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	69db      	ldr	r3, [r3, #28]
 8005c88:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005c8c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005c90:	d111      	bne.n	8005cb6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005c9a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005c9c:	68f8      	ldr	r0, [r7, #12]
 8005c9e:	f000 f81f 	bl	8005ce0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	2220      	movs	r2, #32
 8005ca6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	2200      	movs	r2, #0
 8005cae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005cb2:	2303      	movs	r3, #3
 8005cb4:	e00f      	b.n	8005cd6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	69da      	ldr	r2, [r3, #28]
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	4013      	ands	r3, r2
 8005cc0:	68ba      	ldr	r2, [r7, #8]
 8005cc2:	429a      	cmp	r2, r3
 8005cc4:	bf0c      	ite	eq
 8005cc6:	2301      	moveq	r3, #1
 8005cc8:	2300      	movne	r3, #0
 8005cca:	b2db      	uxtb	r3, r3
 8005ccc:	461a      	mov	r2, r3
 8005cce:	79fb      	ldrb	r3, [r7, #7]
 8005cd0:	429a      	cmp	r2, r3
 8005cd2:	d0a0      	beq.n	8005c16 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005cd4:	2300      	movs	r3, #0
}
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	3710      	adds	r7, #16
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	bd80      	pop	{r7, pc}
	...

08005ce0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b095      	sub	sp, #84	@ 0x54
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005cf0:	e853 3f00 	ldrex	r3, [r3]
 8005cf4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005cf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cf8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005cfc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	461a      	mov	r2, r3
 8005d04:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d06:	643b      	str	r3, [r7, #64]	@ 0x40
 8005d08:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d0a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005d0c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005d0e:	e841 2300 	strex	r3, r2, [r1]
 8005d12:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005d14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d1e6      	bne.n	8005ce8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	3308      	adds	r3, #8
 8005d20:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d22:	6a3b      	ldr	r3, [r7, #32]
 8005d24:	e853 3f00 	ldrex	r3, [r3]
 8005d28:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d2a:	69fa      	ldr	r2, [r7, #28]
 8005d2c:	4b1e      	ldr	r3, [pc, #120]	@ (8005da8 <UART_EndRxTransfer+0xc8>)
 8005d2e:	4013      	ands	r3, r2
 8005d30:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	3308      	adds	r3, #8
 8005d38:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005d3a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005d3c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d3e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005d40:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005d42:	e841 2300 	strex	r3, r2, [r1]
 8005d46:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005d48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d1e5      	bne.n	8005d1a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005d52:	2b01      	cmp	r3, #1
 8005d54:	d118      	bne.n	8005d88 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	e853 3f00 	ldrex	r3, [r3]
 8005d62:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	f023 0310 	bic.w	r3, r3, #16
 8005d6a:	647b      	str	r3, [r7, #68]	@ 0x44
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	461a      	mov	r2, r3
 8005d72:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005d74:	61bb      	str	r3, [r7, #24]
 8005d76:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d78:	6979      	ldr	r1, [r7, #20]
 8005d7a:	69ba      	ldr	r2, [r7, #24]
 8005d7c:	e841 2300 	strex	r3, r2, [r1]
 8005d80:	613b      	str	r3, [r7, #16]
   return(result);
 8005d82:	693b      	ldr	r3, [r7, #16]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d1e6      	bne.n	8005d56 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2220      	movs	r2, #32
 8005d8c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2200      	movs	r2, #0
 8005d94:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005d9c:	bf00      	nop
 8005d9e:	3754      	adds	r7, #84	@ 0x54
 8005da0:	46bd      	mov	sp, r7
 8005da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da6:	4770      	bx	lr
 8005da8:	effffffe 	.word	0xeffffffe

08005dac <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005dac:	b480      	push	{r7}
 8005dae:	b085      	sub	sp, #20
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005dba:	2b01      	cmp	r3, #1
 8005dbc:	d101      	bne.n	8005dc2 <HAL_UARTEx_DisableFifoMode+0x16>
 8005dbe:	2302      	movs	r3, #2
 8005dc0:	e027      	b.n	8005e12 <HAL_UARTEx_DisableFifoMode+0x66>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2201      	movs	r2, #1
 8005dc6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2224      	movs	r2, #36	@ 0x24
 8005dce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	681a      	ldr	r2, [r3, #0]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f022 0201 	bic.w	r2, r2, #1
 8005de8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005df0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2200      	movs	r2, #0
 8005df6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	68fa      	ldr	r2, [r7, #12]
 8005dfe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2220      	movs	r2, #32
 8005e04:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005e10:	2300      	movs	r3, #0
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	3714      	adds	r7, #20
 8005e16:	46bd      	mov	sp, r7
 8005e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1c:	4770      	bx	lr

08005e1e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005e1e:	b580      	push	{r7, lr}
 8005e20:	b084      	sub	sp, #16
 8005e22:	af00      	add	r7, sp, #0
 8005e24:	6078      	str	r0, [r7, #4]
 8005e26:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005e2e:	2b01      	cmp	r3, #1
 8005e30:	d101      	bne.n	8005e36 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005e32:	2302      	movs	r3, #2
 8005e34:	e02d      	b.n	8005e92 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2201      	movs	r2, #1
 8005e3a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2224      	movs	r2, #36	@ 0x24
 8005e42:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	681a      	ldr	r2, [r3, #0]
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f022 0201 	bic.w	r2, r2, #1
 8005e5c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	689b      	ldr	r3, [r3, #8]
 8005e64:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	683a      	ldr	r2, [r7, #0]
 8005e6e:	430a      	orrs	r2, r1
 8005e70:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005e72:	6878      	ldr	r0, [r7, #4]
 8005e74:	f000 f850 	bl	8005f18 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	68fa      	ldr	r2, [r7, #12]
 8005e7e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2220      	movs	r2, #32
 8005e84:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005e90:	2300      	movs	r3, #0
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	3710      	adds	r7, #16
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bd80      	pop	{r7, pc}

08005e9a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005e9a:	b580      	push	{r7, lr}
 8005e9c:	b084      	sub	sp, #16
 8005e9e:	af00      	add	r7, sp, #0
 8005ea0:	6078      	str	r0, [r7, #4]
 8005ea2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005eaa:	2b01      	cmp	r3, #1
 8005eac:	d101      	bne.n	8005eb2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005eae:	2302      	movs	r3, #2
 8005eb0:	e02d      	b.n	8005f0e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2201      	movs	r2, #1
 8005eb6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2224      	movs	r2, #36	@ 0x24
 8005ebe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	681a      	ldr	r2, [r3, #0]
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f022 0201 	bic.w	r2, r2, #1
 8005ed8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	689b      	ldr	r3, [r3, #8]
 8005ee0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	683a      	ldr	r2, [r7, #0]
 8005eea:	430a      	orrs	r2, r1
 8005eec:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005eee:	6878      	ldr	r0, [r7, #4]
 8005ef0:	f000 f812 	bl	8005f18 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	68fa      	ldr	r2, [r7, #12]
 8005efa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2220      	movs	r2, #32
 8005f00:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2200      	movs	r2, #0
 8005f08:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005f0c:	2300      	movs	r3, #0
}
 8005f0e:	4618      	mov	r0, r3
 8005f10:	3710      	adds	r7, #16
 8005f12:	46bd      	mov	sp, r7
 8005f14:	bd80      	pop	{r7, pc}
	...

08005f18 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005f18:	b480      	push	{r7}
 8005f1a:	b085      	sub	sp, #20
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d108      	bne.n	8005f3a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2201      	movs	r2, #1
 8005f2c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2201      	movs	r2, #1
 8005f34:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005f38:	e031      	b.n	8005f9e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005f3a:	2310      	movs	r3, #16
 8005f3c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005f3e:	2310      	movs	r3, #16
 8005f40:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	689b      	ldr	r3, [r3, #8]
 8005f48:	0e5b      	lsrs	r3, r3, #25
 8005f4a:	b2db      	uxtb	r3, r3
 8005f4c:	f003 0307 	and.w	r3, r3, #7
 8005f50:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	689b      	ldr	r3, [r3, #8]
 8005f58:	0f5b      	lsrs	r3, r3, #29
 8005f5a:	b2db      	uxtb	r3, r3
 8005f5c:	f003 0307 	and.w	r3, r3, #7
 8005f60:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005f62:	7bbb      	ldrb	r3, [r7, #14]
 8005f64:	7b3a      	ldrb	r2, [r7, #12]
 8005f66:	4911      	ldr	r1, [pc, #68]	@ (8005fac <UARTEx_SetNbDataToProcess+0x94>)
 8005f68:	5c8a      	ldrb	r2, [r1, r2]
 8005f6a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005f6e:	7b3a      	ldrb	r2, [r7, #12]
 8005f70:	490f      	ldr	r1, [pc, #60]	@ (8005fb0 <UARTEx_SetNbDataToProcess+0x98>)
 8005f72:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005f74:	fb93 f3f2 	sdiv	r3, r3, r2
 8005f78:	b29a      	uxth	r2, r3
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005f80:	7bfb      	ldrb	r3, [r7, #15]
 8005f82:	7b7a      	ldrb	r2, [r7, #13]
 8005f84:	4909      	ldr	r1, [pc, #36]	@ (8005fac <UARTEx_SetNbDataToProcess+0x94>)
 8005f86:	5c8a      	ldrb	r2, [r1, r2]
 8005f88:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005f8c:	7b7a      	ldrb	r2, [r7, #13]
 8005f8e:	4908      	ldr	r1, [pc, #32]	@ (8005fb0 <UARTEx_SetNbDataToProcess+0x98>)
 8005f90:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005f92:	fb93 f3f2 	sdiv	r3, r3, r2
 8005f96:	b29a      	uxth	r2, r3
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8005f9e:	bf00      	nop
 8005fa0:	3714      	adds	r7, #20
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa8:	4770      	bx	lr
 8005faa:	bf00      	nop
 8005fac:	0800d620 	.word	0x0800d620
 8005fb0:	0800d628 	.word	0x0800d628

08005fb4 <__NVIC_SetPriority>:
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b083      	sub	sp, #12
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	4603      	mov	r3, r0
 8005fbc:	6039      	str	r1, [r7, #0]
 8005fbe:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005fc0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	db0a      	blt.n	8005fde <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	b2da      	uxtb	r2, r3
 8005fcc:	490c      	ldr	r1, [pc, #48]	@ (8006000 <__NVIC_SetPriority+0x4c>)
 8005fce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005fd2:	0112      	lsls	r2, r2, #4
 8005fd4:	b2d2      	uxtb	r2, r2
 8005fd6:	440b      	add	r3, r1
 8005fd8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005fdc:	e00a      	b.n	8005ff4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	b2da      	uxtb	r2, r3
 8005fe2:	4908      	ldr	r1, [pc, #32]	@ (8006004 <__NVIC_SetPriority+0x50>)
 8005fe4:	88fb      	ldrh	r3, [r7, #6]
 8005fe6:	f003 030f 	and.w	r3, r3, #15
 8005fea:	3b04      	subs	r3, #4
 8005fec:	0112      	lsls	r2, r2, #4
 8005fee:	b2d2      	uxtb	r2, r2
 8005ff0:	440b      	add	r3, r1
 8005ff2:	761a      	strb	r2, [r3, #24]
}
 8005ff4:	bf00      	nop
 8005ff6:	370c      	adds	r7, #12
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffe:	4770      	bx	lr
 8006000:	e000e100 	.word	0xe000e100
 8006004:	e000ed00 	.word	0xe000ed00

08006008 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006008:	b580      	push	{r7, lr}
 800600a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800600c:	4b05      	ldr	r3, [pc, #20]	@ (8006024 <SysTick_Handler+0x1c>)
 800600e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006010:	f001 fdfe 	bl	8007c10 <xTaskGetSchedulerState>
 8006014:	4603      	mov	r3, r0
 8006016:	2b01      	cmp	r3, #1
 8006018:	d001      	beq.n	800601e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800601a:	f002 fbf5 	bl	8008808 <xPortSysTickHandler>
  }
}
 800601e:	bf00      	nop
 8006020:	bd80      	pop	{r7, pc}
 8006022:	bf00      	nop
 8006024:	e000e010 	.word	0xe000e010

08006028 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006028:	b580      	push	{r7, lr}
 800602a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800602c:	2100      	movs	r1, #0
 800602e:	f06f 0004 	mvn.w	r0, #4
 8006032:	f7ff ffbf 	bl	8005fb4 <__NVIC_SetPriority>
#endif
}
 8006036:	bf00      	nop
 8006038:	bd80      	pop	{r7, pc}
	...

0800603c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800603c:	b480      	push	{r7}
 800603e:	b083      	sub	sp, #12
 8006040:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006042:	f3ef 8305 	mrs	r3, IPSR
 8006046:	603b      	str	r3, [r7, #0]
  return(result);
 8006048:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800604a:	2b00      	cmp	r3, #0
 800604c:	d003      	beq.n	8006056 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800604e:	f06f 0305 	mvn.w	r3, #5
 8006052:	607b      	str	r3, [r7, #4]
 8006054:	e00c      	b.n	8006070 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006056:	4b0a      	ldr	r3, [pc, #40]	@ (8006080 <osKernelInitialize+0x44>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d105      	bne.n	800606a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800605e:	4b08      	ldr	r3, [pc, #32]	@ (8006080 <osKernelInitialize+0x44>)
 8006060:	2201      	movs	r2, #1
 8006062:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006064:	2300      	movs	r3, #0
 8006066:	607b      	str	r3, [r7, #4]
 8006068:	e002      	b.n	8006070 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800606a:	f04f 33ff 	mov.w	r3, #4294967295
 800606e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006070:	687b      	ldr	r3, [r7, #4]
}
 8006072:	4618      	mov	r0, r3
 8006074:	370c      	adds	r7, #12
 8006076:	46bd      	mov	sp, r7
 8006078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607c:	4770      	bx	lr
 800607e:	bf00      	nop
 8006080:	240002e4 	.word	0x240002e4

08006084 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006084:	b580      	push	{r7, lr}
 8006086:	b082      	sub	sp, #8
 8006088:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800608a:	f3ef 8305 	mrs	r3, IPSR
 800608e:	603b      	str	r3, [r7, #0]
  return(result);
 8006090:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006092:	2b00      	cmp	r3, #0
 8006094:	d003      	beq.n	800609e <osKernelStart+0x1a>
    stat = osErrorISR;
 8006096:	f06f 0305 	mvn.w	r3, #5
 800609a:	607b      	str	r3, [r7, #4]
 800609c:	e010      	b.n	80060c0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800609e:	4b0b      	ldr	r3, [pc, #44]	@ (80060cc <osKernelStart+0x48>)
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	2b01      	cmp	r3, #1
 80060a4:	d109      	bne.n	80060ba <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80060a6:	f7ff ffbf 	bl	8006028 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80060aa:	4b08      	ldr	r3, [pc, #32]	@ (80060cc <osKernelStart+0x48>)
 80060ac:	2202      	movs	r2, #2
 80060ae:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80060b0:	f001 f892 	bl	80071d8 <vTaskStartScheduler>
      stat = osOK;
 80060b4:	2300      	movs	r3, #0
 80060b6:	607b      	str	r3, [r7, #4]
 80060b8:	e002      	b.n	80060c0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80060ba:	f04f 33ff 	mov.w	r3, #4294967295
 80060be:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80060c0:	687b      	ldr	r3, [r7, #4]
}
 80060c2:	4618      	mov	r0, r3
 80060c4:	3708      	adds	r7, #8
 80060c6:	46bd      	mov	sp, r7
 80060c8:	bd80      	pop	{r7, pc}
 80060ca:	bf00      	nop
 80060cc:	240002e4 	.word	0x240002e4

080060d0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b08e      	sub	sp, #56	@ 0x38
 80060d4:	af04      	add	r7, sp, #16
 80060d6:	60f8      	str	r0, [r7, #12]
 80060d8:	60b9      	str	r1, [r7, #8]
 80060da:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80060dc:	2300      	movs	r3, #0
 80060de:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80060e0:	f3ef 8305 	mrs	r3, IPSR
 80060e4:	617b      	str	r3, [r7, #20]
  return(result);
 80060e6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d17e      	bne.n	80061ea <osThreadNew+0x11a>
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d07b      	beq.n	80061ea <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80060f2:	2380      	movs	r3, #128	@ 0x80
 80060f4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80060f6:	2318      	movs	r3, #24
 80060f8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80060fa:	2300      	movs	r3, #0
 80060fc:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80060fe:	f04f 33ff 	mov.w	r3, #4294967295
 8006102:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d045      	beq.n	8006196 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d002      	beq.n	8006118 <osThreadNew+0x48>
        name = attr->name;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	699b      	ldr	r3, [r3, #24]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d002      	beq.n	8006126 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	699b      	ldr	r3, [r3, #24]
 8006124:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006126:	69fb      	ldr	r3, [r7, #28]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d008      	beq.n	800613e <osThreadNew+0x6e>
 800612c:	69fb      	ldr	r3, [r7, #28]
 800612e:	2b38      	cmp	r3, #56	@ 0x38
 8006130:	d805      	bhi.n	800613e <osThreadNew+0x6e>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	685b      	ldr	r3, [r3, #4]
 8006136:	f003 0301 	and.w	r3, r3, #1
 800613a:	2b00      	cmp	r3, #0
 800613c:	d001      	beq.n	8006142 <osThreadNew+0x72>
        return (NULL);
 800613e:	2300      	movs	r3, #0
 8006140:	e054      	b.n	80061ec <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	695b      	ldr	r3, [r3, #20]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d003      	beq.n	8006152 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	695b      	ldr	r3, [r3, #20]
 800614e:	089b      	lsrs	r3, r3, #2
 8006150:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	689b      	ldr	r3, [r3, #8]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d00e      	beq.n	8006178 <osThreadNew+0xa8>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	68db      	ldr	r3, [r3, #12]
 800615e:	2ba7      	cmp	r3, #167	@ 0xa7
 8006160:	d90a      	bls.n	8006178 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006166:	2b00      	cmp	r3, #0
 8006168:	d006      	beq.n	8006178 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	695b      	ldr	r3, [r3, #20]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d002      	beq.n	8006178 <osThreadNew+0xa8>
        mem = 1;
 8006172:	2301      	movs	r3, #1
 8006174:	61bb      	str	r3, [r7, #24]
 8006176:	e010      	b.n	800619a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	689b      	ldr	r3, [r3, #8]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d10c      	bne.n	800619a <osThreadNew+0xca>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	68db      	ldr	r3, [r3, #12]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d108      	bne.n	800619a <osThreadNew+0xca>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	691b      	ldr	r3, [r3, #16]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d104      	bne.n	800619a <osThreadNew+0xca>
          mem = 0;
 8006190:	2300      	movs	r3, #0
 8006192:	61bb      	str	r3, [r7, #24]
 8006194:	e001      	b.n	800619a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006196:	2300      	movs	r3, #0
 8006198:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800619a:	69bb      	ldr	r3, [r7, #24]
 800619c:	2b01      	cmp	r3, #1
 800619e:	d110      	bne.n	80061c2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80061a4:	687a      	ldr	r2, [r7, #4]
 80061a6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80061a8:	9202      	str	r2, [sp, #8]
 80061aa:	9301      	str	r3, [sp, #4]
 80061ac:	69fb      	ldr	r3, [r7, #28]
 80061ae:	9300      	str	r3, [sp, #0]
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	6a3a      	ldr	r2, [r7, #32]
 80061b4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80061b6:	68f8      	ldr	r0, [r7, #12]
 80061b8:	f000 fe1a 	bl	8006df0 <xTaskCreateStatic>
 80061bc:	4603      	mov	r3, r0
 80061be:	613b      	str	r3, [r7, #16]
 80061c0:	e013      	b.n	80061ea <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80061c2:	69bb      	ldr	r3, [r7, #24]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d110      	bne.n	80061ea <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80061c8:	6a3b      	ldr	r3, [r7, #32]
 80061ca:	b29a      	uxth	r2, r3
 80061cc:	f107 0310 	add.w	r3, r7, #16
 80061d0:	9301      	str	r3, [sp, #4]
 80061d2:	69fb      	ldr	r3, [r7, #28]
 80061d4:	9300      	str	r3, [sp, #0]
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80061da:	68f8      	ldr	r0, [r7, #12]
 80061dc:	f000 fe68 	bl	8006eb0 <xTaskCreate>
 80061e0:	4603      	mov	r3, r0
 80061e2:	2b01      	cmp	r3, #1
 80061e4:	d001      	beq.n	80061ea <osThreadNew+0x11a>
            hTask = NULL;
 80061e6:	2300      	movs	r3, #0
 80061e8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80061ea:	693b      	ldr	r3, [r7, #16]
}
 80061ec:	4618      	mov	r0, r3
 80061ee:	3728      	adds	r7, #40	@ 0x28
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bd80      	pop	{r7, pc}

080061f4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b084      	sub	sp, #16
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80061fc:	f3ef 8305 	mrs	r3, IPSR
 8006200:	60bb      	str	r3, [r7, #8]
  return(result);
 8006202:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006204:	2b00      	cmp	r3, #0
 8006206:	d003      	beq.n	8006210 <osDelay+0x1c>
    stat = osErrorISR;
 8006208:	f06f 0305 	mvn.w	r3, #5
 800620c:	60fb      	str	r3, [r7, #12]
 800620e:	e007      	b.n	8006220 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006210:	2300      	movs	r3, #0
 8006212:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d002      	beq.n	8006220 <osDelay+0x2c>
      vTaskDelay(ticks);
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	f000 ffa6 	bl	800716c <vTaskDelay>
    }
  }

  return (stat);
 8006220:	68fb      	ldr	r3, [r7, #12]
}
 8006222:	4618      	mov	r0, r3
 8006224:	3710      	adds	r7, #16
 8006226:	46bd      	mov	sp, r7
 8006228:	bd80      	pop	{r7, pc}
	...

0800622c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800622c:	b480      	push	{r7}
 800622e:	b085      	sub	sp, #20
 8006230:	af00      	add	r7, sp, #0
 8006232:	60f8      	str	r0, [r7, #12]
 8006234:	60b9      	str	r1, [r7, #8]
 8006236:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	4a07      	ldr	r2, [pc, #28]	@ (8006258 <vApplicationGetIdleTaskMemory+0x2c>)
 800623c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	4a06      	ldr	r2, [pc, #24]	@ (800625c <vApplicationGetIdleTaskMemory+0x30>)
 8006242:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2280      	movs	r2, #128	@ 0x80
 8006248:	601a      	str	r2, [r3, #0]
}
 800624a:	bf00      	nop
 800624c:	3714      	adds	r7, #20
 800624e:	46bd      	mov	sp, r7
 8006250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006254:	4770      	bx	lr
 8006256:	bf00      	nop
 8006258:	240002e8 	.word	0x240002e8
 800625c:	24000390 	.word	0x24000390

08006260 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006260:	b480      	push	{r7}
 8006262:	b085      	sub	sp, #20
 8006264:	af00      	add	r7, sp, #0
 8006266:	60f8      	str	r0, [r7, #12]
 8006268:	60b9      	str	r1, [r7, #8]
 800626a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	4a07      	ldr	r2, [pc, #28]	@ (800628c <vApplicationGetTimerTaskMemory+0x2c>)
 8006270:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	4a06      	ldr	r2, [pc, #24]	@ (8006290 <vApplicationGetTimerTaskMemory+0x30>)
 8006276:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800627e:	601a      	str	r2, [r3, #0]
}
 8006280:	bf00      	nop
 8006282:	3714      	adds	r7, #20
 8006284:	46bd      	mov	sp, r7
 8006286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628a:	4770      	bx	lr
 800628c:	24000590 	.word	0x24000590
 8006290:	24000638 	.word	0x24000638

08006294 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006294:	b480      	push	{r7}
 8006296:	b083      	sub	sp, #12
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	f103 0208 	add.w	r2, r3, #8
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	f04f 32ff 	mov.w	r2, #4294967295
 80062ac:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	f103 0208 	add.w	r2, r3, #8
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	f103 0208 	add.w	r2, r3, #8
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2200      	movs	r2, #0
 80062c6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80062c8:	bf00      	nop
 80062ca:	370c      	adds	r7, #12
 80062cc:	46bd      	mov	sp, r7
 80062ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d2:	4770      	bx	lr

080062d4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80062d4:	b480      	push	{r7}
 80062d6:	b083      	sub	sp, #12
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2200      	movs	r2, #0
 80062e0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80062e2:	bf00      	nop
 80062e4:	370c      	adds	r7, #12
 80062e6:	46bd      	mov	sp, r7
 80062e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ec:	4770      	bx	lr

080062ee <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80062ee:	b480      	push	{r7}
 80062f0:	b085      	sub	sp, #20
 80062f2:	af00      	add	r7, sp, #0
 80062f4:	6078      	str	r0, [r7, #4]
 80062f6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	685b      	ldr	r3, [r3, #4]
 80062fc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	68fa      	ldr	r2, [r7, #12]
 8006302:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	689a      	ldr	r2, [r3, #8]
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	689b      	ldr	r3, [r3, #8]
 8006310:	683a      	ldr	r2, [r7, #0]
 8006312:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	683a      	ldr	r2, [r7, #0]
 8006318:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	687a      	ldr	r2, [r7, #4]
 800631e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	1c5a      	adds	r2, r3, #1
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	601a      	str	r2, [r3, #0]
}
 800632a:	bf00      	nop
 800632c:	3714      	adds	r7, #20
 800632e:	46bd      	mov	sp, r7
 8006330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006334:	4770      	bx	lr

08006336 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006336:	b480      	push	{r7}
 8006338:	b085      	sub	sp, #20
 800633a:	af00      	add	r7, sp, #0
 800633c:	6078      	str	r0, [r7, #4]
 800633e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006346:	68bb      	ldr	r3, [r7, #8]
 8006348:	f1b3 3fff 	cmp.w	r3, #4294967295
 800634c:	d103      	bne.n	8006356 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	691b      	ldr	r3, [r3, #16]
 8006352:	60fb      	str	r3, [r7, #12]
 8006354:	e00c      	b.n	8006370 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	3308      	adds	r3, #8
 800635a:	60fb      	str	r3, [r7, #12]
 800635c:	e002      	b.n	8006364 <vListInsert+0x2e>
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	685b      	ldr	r3, [r3, #4]
 8006362:	60fb      	str	r3, [r7, #12]
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	685b      	ldr	r3, [r3, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	68ba      	ldr	r2, [r7, #8]
 800636c:	429a      	cmp	r2, r3
 800636e:	d2f6      	bcs.n	800635e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	685a      	ldr	r2, [r3, #4]
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	685b      	ldr	r3, [r3, #4]
 800637c:	683a      	ldr	r2, [r7, #0]
 800637e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	68fa      	ldr	r2, [r7, #12]
 8006384:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	683a      	ldr	r2, [r7, #0]
 800638a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	687a      	ldr	r2, [r7, #4]
 8006390:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	1c5a      	adds	r2, r3, #1
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	601a      	str	r2, [r3, #0]
}
 800639c:	bf00      	nop
 800639e:	3714      	adds	r7, #20
 80063a0:	46bd      	mov	sp, r7
 80063a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a6:	4770      	bx	lr

080063a8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80063a8:	b480      	push	{r7}
 80063aa:	b085      	sub	sp, #20
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	691b      	ldr	r3, [r3, #16]
 80063b4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	685b      	ldr	r3, [r3, #4]
 80063ba:	687a      	ldr	r2, [r7, #4]
 80063bc:	6892      	ldr	r2, [r2, #8]
 80063be:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	689b      	ldr	r3, [r3, #8]
 80063c4:	687a      	ldr	r2, [r7, #4]
 80063c6:	6852      	ldr	r2, [r2, #4]
 80063c8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	685b      	ldr	r3, [r3, #4]
 80063ce:	687a      	ldr	r2, [r7, #4]
 80063d0:	429a      	cmp	r2, r3
 80063d2:	d103      	bne.n	80063dc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	689a      	ldr	r2, [r3, #8]
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2200      	movs	r2, #0
 80063e0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	1e5a      	subs	r2, r3, #1
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
}
 80063f0:	4618      	mov	r0, r3
 80063f2:	3714      	adds	r7, #20
 80063f4:	46bd      	mov	sp, r7
 80063f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fa:	4770      	bx	lr

080063fc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b084      	sub	sp, #16
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
 8006404:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d10b      	bne.n	8006428 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006410:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006414:	f383 8811 	msr	BASEPRI, r3
 8006418:	f3bf 8f6f 	isb	sy
 800641c:	f3bf 8f4f 	dsb	sy
 8006420:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006422:	bf00      	nop
 8006424:	bf00      	nop
 8006426:	e7fd      	b.n	8006424 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006428:	f002 f95e 	bl	80086e8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681a      	ldr	r2, [r3, #0]
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006434:	68f9      	ldr	r1, [r7, #12]
 8006436:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006438:	fb01 f303 	mul.w	r3, r1, r3
 800643c:	441a      	add	r2, r3
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	2200      	movs	r2, #0
 8006446:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681a      	ldr	r2, [r3, #0]
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681a      	ldr	r2, [r3, #0]
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006458:	3b01      	subs	r3, #1
 800645a:	68f9      	ldr	r1, [r7, #12]
 800645c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800645e:	fb01 f303 	mul.w	r3, r1, r3
 8006462:	441a      	add	r2, r3
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	22ff      	movs	r2, #255	@ 0xff
 800646c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	22ff      	movs	r2, #255	@ 0xff
 8006474:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d114      	bne.n	80064a8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	691b      	ldr	r3, [r3, #16]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d01a      	beq.n	80064bc <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	3310      	adds	r3, #16
 800648a:	4618      	mov	r0, r3
 800648c:	f001 f9a2 	bl	80077d4 <xTaskRemoveFromEventList>
 8006490:	4603      	mov	r3, r0
 8006492:	2b00      	cmp	r3, #0
 8006494:	d012      	beq.n	80064bc <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006496:	4b0d      	ldr	r3, [pc, #52]	@ (80064cc <xQueueGenericReset+0xd0>)
 8006498:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800649c:	601a      	str	r2, [r3, #0]
 800649e:	f3bf 8f4f 	dsb	sy
 80064a2:	f3bf 8f6f 	isb	sy
 80064a6:	e009      	b.n	80064bc <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	3310      	adds	r3, #16
 80064ac:	4618      	mov	r0, r3
 80064ae:	f7ff fef1 	bl	8006294 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	3324      	adds	r3, #36	@ 0x24
 80064b6:	4618      	mov	r0, r3
 80064b8:	f7ff feec 	bl	8006294 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80064bc:	f002 f946 	bl	800874c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80064c0:	2301      	movs	r3, #1
}
 80064c2:	4618      	mov	r0, r3
 80064c4:	3710      	adds	r7, #16
 80064c6:	46bd      	mov	sp, r7
 80064c8:	bd80      	pop	{r7, pc}
 80064ca:	bf00      	nop
 80064cc:	e000ed04 	.word	0xe000ed04

080064d0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b08e      	sub	sp, #56	@ 0x38
 80064d4:	af02      	add	r7, sp, #8
 80064d6:	60f8      	str	r0, [r7, #12]
 80064d8:	60b9      	str	r1, [r7, #8]
 80064da:	607a      	str	r2, [r7, #4]
 80064dc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d10b      	bne.n	80064fc <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80064e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064e8:	f383 8811 	msr	BASEPRI, r3
 80064ec:	f3bf 8f6f 	isb	sy
 80064f0:	f3bf 8f4f 	dsb	sy
 80064f4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80064f6:	bf00      	nop
 80064f8:	bf00      	nop
 80064fa:	e7fd      	b.n	80064f8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d10b      	bne.n	800651a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8006502:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006506:	f383 8811 	msr	BASEPRI, r3
 800650a:	f3bf 8f6f 	isb	sy
 800650e:	f3bf 8f4f 	dsb	sy
 8006512:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006514:	bf00      	nop
 8006516:	bf00      	nop
 8006518:	e7fd      	b.n	8006516 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d002      	beq.n	8006526 <xQueueGenericCreateStatic+0x56>
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d001      	beq.n	800652a <xQueueGenericCreateStatic+0x5a>
 8006526:	2301      	movs	r3, #1
 8006528:	e000      	b.n	800652c <xQueueGenericCreateStatic+0x5c>
 800652a:	2300      	movs	r3, #0
 800652c:	2b00      	cmp	r3, #0
 800652e:	d10b      	bne.n	8006548 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8006530:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006534:	f383 8811 	msr	BASEPRI, r3
 8006538:	f3bf 8f6f 	isb	sy
 800653c:	f3bf 8f4f 	dsb	sy
 8006540:	623b      	str	r3, [r7, #32]
}
 8006542:	bf00      	nop
 8006544:	bf00      	nop
 8006546:	e7fd      	b.n	8006544 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d102      	bne.n	8006554 <xQueueGenericCreateStatic+0x84>
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d101      	bne.n	8006558 <xQueueGenericCreateStatic+0x88>
 8006554:	2301      	movs	r3, #1
 8006556:	e000      	b.n	800655a <xQueueGenericCreateStatic+0x8a>
 8006558:	2300      	movs	r3, #0
 800655a:	2b00      	cmp	r3, #0
 800655c:	d10b      	bne.n	8006576 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800655e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006562:	f383 8811 	msr	BASEPRI, r3
 8006566:	f3bf 8f6f 	isb	sy
 800656a:	f3bf 8f4f 	dsb	sy
 800656e:	61fb      	str	r3, [r7, #28]
}
 8006570:	bf00      	nop
 8006572:	bf00      	nop
 8006574:	e7fd      	b.n	8006572 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006576:	2350      	movs	r3, #80	@ 0x50
 8006578:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800657a:	697b      	ldr	r3, [r7, #20]
 800657c:	2b50      	cmp	r3, #80	@ 0x50
 800657e:	d00b      	beq.n	8006598 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8006580:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006584:	f383 8811 	msr	BASEPRI, r3
 8006588:	f3bf 8f6f 	isb	sy
 800658c:	f3bf 8f4f 	dsb	sy
 8006590:	61bb      	str	r3, [r7, #24]
}
 8006592:	bf00      	nop
 8006594:	bf00      	nop
 8006596:	e7fd      	b.n	8006594 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006598:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800659e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d00d      	beq.n	80065c0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80065a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065a6:	2201      	movs	r2, #1
 80065a8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80065ac:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80065b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065b2:	9300      	str	r3, [sp, #0]
 80065b4:	4613      	mov	r3, r2
 80065b6:	687a      	ldr	r2, [r7, #4]
 80065b8:	68b9      	ldr	r1, [r7, #8]
 80065ba:	68f8      	ldr	r0, [r7, #12]
 80065bc:	f000 f805 	bl	80065ca <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80065c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80065c2:	4618      	mov	r0, r3
 80065c4:	3730      	adds	r7, #48	@ 0x30
 80065c6:	46bd      	mov	sp, r7
 80065c8:	bd80      	pop	{r7, pc}

080065ca <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80065ca:	b580      	push	{r7, lr}
 80065cc:	b084      	sub	sp, #16
 80065ce:	af00      	add	r7, sp, #0
 80065d0:	60f8      	str	r0, [r7, #12]
 80065d2:	60b9      	str	r1, [r7, #8]
 80065d4:	607a      	str	r2, [r7, #4]
 80065d6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d103      	bne.n	80065e6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80065de:	69bb      	ldr	r3, [r7, #24]
 80065e0:	69ba      	ldr	r2, [r7, #24]
 80065e2:	601a      	str	r2, [r3, #0]
 80065e4:	e002      	b.n	80065ec <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80065e6:	69bb      	ldr	r3, [r7, #24]
 80065e8:	687a      	ldr	r2, [r7, #4]
 80065ea:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80065ec:	69bb      	ldr	r3, [r7, #24]
 80065ee:	68fa      	ldr	r2, [r7, #12]
 80065f0:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80065f2:	69bb      	ldr	r3, [r7, #24]
 80065f4:	68ba      	ldr	r2, [r7, #8]
 80065f6:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80065f8:	2101      	movs	r1, #1
 80065fa:	69b8      	ldr	r0, [r7, #24]
 80065fc:	f7ff fefe 	bl	80063fc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006600:	69bb      	ldr	r3, [r7, #24]
 8006602:	78fa      	ldrb	r2, [r7, #3]
 8006604:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006608:	bf00      	nop
 800660a:	3710      	adds	r7, #16
 800660c:	46bd      	mov	sp, r7
 800660e:	bd80      	pop	{r7, pc}

08006610 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b08e      	sub	sp, #56	@ 0x38
 8006614:	af00      	add	r7, sp, #0
 8006616:	60f8      	str	r0, [r7, #12]
 8006618:	60b9      	str	r1, [r7, #8]
 800661a:	607a      	str	r2, [r7, #4]
 800661c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800661e:	2300      	movs	r3, #0
 8006620:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006626:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006628:	2b00      	cmp	r3, #0
 800662a:	d10b      	bne.n	8006644 <xQueueGenericSend+0x34>
	__asm volatile
 800662c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006630:	f383 8811 	msr	BASEPRI, r3
 8006634:	f3bf 8f6f 	isb	sy
 8006638:	f3bf 8f4f 	dsb	sy
 800663c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800663e:	bf00      	nop
 8006640:	bf00      	nop
 8006642:	e7fd      	b.n	8006640 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d103      	bne.n	8006652 <xQueueGenericSend+0x42>
 800664a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800664c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800664e:	2b00      	cmp	r3, #0
 8006650:	d101      	bne.n	8006656 <xQueueGenericSend+0x46>
 8006652:	2301      	movs	r3, #1
 8006654:	e000      	b.n	8006658 <xQueueGenericSend+0x48>
 8006656:	2300      	movs	r3, #0
 8006658:	2b00      	cmp	r3, #0
 800665a:	d10b      	bne.n	8006674 <xQueueGenericSend+0x64>
	__asm volatile
 800665c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006660:	f383 8811 	msr	BASEPRI, r3
 8006664:	f3bf 8f6f 	isb	sy
 8006668:	f3bf 8f4f 	dsb	sy
 800666c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800666e:	bf00      	nop
 8006670:	bf00      	nop
 8006672:	e7fd      	b.n	8006670 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	2b02      	cmp	r3, #2
 8006678:	d103      	bne.n	8006682 <xQueueGenericSend+0x72>
 800667a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800667c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800667e:	2b01      	cmp	r3, #1
 8006680:	d101      	bne.n	8006686 <xQueueGenericSend+0x76>
 8006682:	2301      	movs	r3, #1
 8006684:	e000      	b.n	8006688 <xQueueGenericSend+0x78>
 8006686:	2300      	movs	r3, #0
 8006688:	2b00      	cmp	r3, #0
 800668a:	d10b      	bne.n	80066a4 <xQueueGenericSend+0x94>
	__asm volatile
 800668c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006690:	f383 8811 	msr	BASEPRI, r3
 8006694:	f3bf 8f6f 	isb	sy
 8006698:	f3bf 8f4f 	dsb	sy
 800669c:	623b      	str	r3, [r7, #32]
}
 800669e:	bf00      	nop
 80066a0:	bf00      	nop
 80066a2:	e7fd      	b.n	80066a0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80066a4:	f001 fab4 	bl	8007c10 <xTaskGetSchedulerState>
 80066a8:	4603      	mov	r3, r0
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d102      	bne.n	80066b4 <xQueueGenericSend+0xa4>
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d101      	bne.n	80066b8 <xQueueGenericSend+0xa8>
 80066b4:	2301      	movs	r3, #1
 80066b6:	e000      	b.n	80066ba <xQueueGenericSend+0xaa>
 80066b8:	2300      	movs	r3, #0
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d10b      	bne.n	80066d6 <xQueueGenericSend+0xc6>
	__asm volatile
 80066be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066c2:	f383 8811 	msr	BASEPRI, r3
 80066c6:	f3bf 8f6f 	isb	sy
 80066ca:	f3bf 8f4f 	dsb	sy
 80066ce:	61fb      	str	r3, [r7, #28]
}
 80066d0:	bf00      	nop
 80066d2:	bf00      	nop
 80066d4:	e7fd      	b.n	80066d2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80066d6:	f002 f807 	bl	80086e8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80066da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80066de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066e2:	429a      	cmp	r2, r3
 80066e4:	d302      	bcc.n	80066ec <xQueueGenericSend+0xdc>
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	2b02      	cmp	r3, #2
 80066ea:	d129      	bne.n	8006740 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80066ec:	683a      	ldr	r2, [r7, #0]
 80066ee:	68b9      	ldr	r1, [r7, #8]
 80066f0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80066f2:	f000 fa0f 	bl	8006b14 <prvCopyDataToQueue>
 80066f6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80066f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d010      	beq.n	8006722 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006700:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006702:	3324      	adds	r3, #36	@ 0x24
 8006704:	4618      	mov	r0, r3
 8006706:	f001 f865 	bl	80077d4 <xTaskRemoveFromEventList>
 800670a:	4603      	mov	r3, r0
 800670c:	2b00      	cmp	r3, #0
 800670e:	d013      	beq.n	8006738 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006710:	4b3f      	ldr	r3, [pc, #252]	@ (8006810 <xQueueGenericSend+0x200>)
 8006712:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006716:	601a      	str	r2, [r3, #0]
 8006718:	f3bf 8f4f 	dsb	sy
 800671c:	f3bf 8f6f 	isb	sy
 8006720:	e00a      	b.n	8006738 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006722:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006724:	2b00      	cmp	r3, #0
 8006726:	d007      	beq.n	8006738 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006728:	4b39      	ldr	r3, [pc, #228]	@ (8006810 <xQueueGenericSend+0x200>)
 800672a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800672e:	601a      	str	r2, [r3, #0]
 8006730:	f3bf 8f4f 	dsb	sy
 8006734:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006738:	f002 f808 	bl	800874c <vPortExitCritical>
				return pdPASS;
 800673c:	2301      	movs	r3, #1
 800673e:	e063      	b.n	8006808 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d103      	bne.n	800674e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006746:	f002 f801 	bl	800874c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800674a:	2300      	movs	r3, #0
 800674c:	e05c      	b.n	8006808 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800674e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006750:	2b00      	cmp	r3, #0
 8006752:	d106      	bne.n	8006762 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006754:	f107 0314 	add.w	r3, r7, #20
 8006758:	4618      	mov	r0, r3
 800675a:	f001 f8a1 	bl	80078a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800675e:	2301      	movs	r3, #1
 8006760:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006762:	f001 fff3 	bl	800874c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006766:	f000 fda7 	bl	80072b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800676a:	f001 ffbd 	bl	80086e8 <vPortEnterCritical>
 800676e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006770:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006774:	b25b      	sxtb	r3, r3
 8006776:	f1b3 3fff 	cmp.w	r3, #4294967295
 800677a:	d103      	bne.n	8006784 <xQueueGenericSend+0x174>
 800677c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800677e:	2200      	movs	r2, #0
 8006780:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006784:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006786:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800678a:	b25b      	sxtb	r3, r3
 800678c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006790:	d103      	bne.n	800679a <xQueueGenericSend+0x18a>
 8006792:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006794:	2200      	movs	r2, #0
 8006796:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800679a:	f001 ffd7 	bl	800874c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800679e:	1d3a      	adds	r2, r7, #4
 80067a0:	f107 0314 	add.w	r3, r7, #20
 80067a4:	4611      	mov	r1, r2
 80067a6:	4618      	mov	r0, r3
 80067a8:	f001 f890 	bl	80078cc <xTaskCheckForTimeOut>
 80067ac:	4603      	mov	r3, r0
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d124      	bne.n	80067fc <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80067b2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80067b4:	f000 faa6 	bl	8006d04 <prvIsQueueFull>
 80067b8:	4603      	mov	r3, r0
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d018      	beq.n	80067f0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80067be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067c0:	3310      	adds	r3, #16
 80067c2:	687a      	ldr	r2, [r7, #4]
 80067c4:	4611      	mov	r1, r2
 80067c6:	4618      	mov	r0, r3
 80067c8:	f000 ffb2 	bl	8007730 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80067cc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80067ce:	f000 fa31 	bl	8006c34 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80067d2:	f000 fdb7 	bl	8007344 <xTaskResumeAll>
 80067d6:	4603      	mov	r3, r0
 80067d8:	2b00      	cmp	r3, #0
 80067da:	f47f af7c 	bne.w	80066d6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80067de:	4b0c      	ldr	r3, [pc, #48]	@ (8006810 <xQueueGenericSend+0x200>)
 80067e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80067e4:	601a      	str	r2, [r3, #0]
 80067e6:	f3bf 8f4f 	dsb	sy
 80067ea:	f3bf 8f6f 	isb	sy
 80067ee:	e772      	b.n	80066d6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80067f0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80067f2:	f000 fa1f 	bl	8006c34 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80067f6:	f000 fda5 	bl	8007344 <xTaskResumeAll>
 80067fa:	e76c      	b.n	80066d6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80067fc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80067fe:	f000 fa19 	bl	8006c34 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006802:	f000 fd9f 	bl	8007344 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006806:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006808:	4618      	mov	r0, r3
 800680a:	3738      	adds	r7, #56	@ 0x38
 800680c:	46bd      	mov	sp, r7
 800680e:	bd80      	pop	{r7, pc}
 8006810:	e000ed04 	.word	0xe000ed04

08006814 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b090      	sub	sp, #64	@ 0x40
 8006818:	af00      	add	r7, sp, #0
 800681a:	60f8      	str	r0, [r7, #12]
 800681c:	60b9      	str	r1, [r7, #8]
 800681e:	607a      	str	r2, [r7, #4]
 8006820:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8006826:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006828:	2b00      	cmp	r3, #0
 800682a:	d10b      	bne.n	8006844 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800682c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006830:	f383 8811 	msr	BASEPRI, r3
 8006834:	f3bf 8f6f 	isb	sy
 8006838:	f3bf 8f4f 	dsb	sy
 800683c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800683e:	bf00      	nop
 8006840:	bf00      	nop
 8006842:	e7fd      	b.n	8006840 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006844:	68bb      	ldr	r3, [r7, #8]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d103      	bne.n	8006852 <xQueueGenericSendFromISR+0x3e>
 800684a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800684c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800684e:	2b00      	cmp	r3, #0
 8006850:	d101      	bne.n	8006856 <xQueueGenericSendFromISR+0x42>
 8006852:	2301      	movs	r3, #1
 8006854:	e000      	b.n	8006858 <xQueueGenericSendFromISR+0x44>
 8006856:	2300      	movs	r3, #0
 8006858:	2b00      	cmp	r3, #0
 800685a:	d10b      	bne.n	8006874 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800685c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006860:	f383 8811 	msr	BASEPRI, r3
 8006864:	f3bf 8f6f 	isb	sy
 8006868:	f3bf 8f4f 	dsb	sy
 800686c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800686e:	bf00      	nop
 8006870:	bf00      	nop
 8006872:	e7fd      	b.n	8006870 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	2b02      	cmp	r3, #2
 8006878:	d103      	bne.n	8006882 <xQueueGenericSendFromISR+0x6e>
 800687a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800687c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800687e:	2b01      	cmp	r3, #1
 8006880:	d101      	bne.n	8006886 <xQueueGenericSendFromISR+0x72>
 8006882:	2301      	movs	r3, #1
 8006884:	e000      	b.n	8006888 <xQueueGenericSendFromISR+0x74>
 8006886:	2300      	movs	r3, #0
 8006888:	2b00      	cmp	r3, #0
 800688a:	d10b      	bne.n	80068a4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800688c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006890:	f383 8811 	msr	BASEPRI, r3
 8006894:	f3bf 8f6f 	isb	sy
 8006898:	f3bf 8f4f 	dsb	sy
 800689c:	623b      	str	r3, [r7, #32]
}
 800689e:	bf00      	nop
 80068a0:	bf00      	nop
 80068a2:	e7fd      	b.n	80068a0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80068a4:	f002 f8e4 	bl	8008a70 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80068a8:	f3ef 8211 	mrs	r2, BASEPRI
 80068ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068b0:	f383 8811 	msr	BASEPRI, r3
 80068b4:	f3bf 8f6f 	isb	sy
 80068b8:	f3bf 8f4f 	dsb	sy
 80068bc:	61fa      	str	r2, [r7, #28]
 80068be:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80068c0:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80068c2:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80068c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068c6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80068c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068cc:	429a      	cmp	r2, r3
 80068ce:	d302      	bcc.n	80068d6 <xQueueGenericSendFromISR+0xc2>
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	2b02      	cmp	r3, #2
 80068d4:	d12f      	bne.n	8006936 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80068d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068d8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80068dc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80068e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80068e6:	683a      	ldr	r2, [r7, #0]
 80068e8:	68b9      	ldr	r1, [r7, #8]
 80068ea:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80068ec:	f000 f912 	bl	8006b14 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80068f0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80068f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068f8:	d112      	bne.n	8006920 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80068fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d016      	beq.n	8006930 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006902:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006904:	3324      	adds	r3, #36	@ 0x24
 8006906:	4618      	mov	r0, r3
 8006908:	f000 ff64 	bl	80077d4 <xTaskRemoveFromEventList>
 800690c:	4603      	mov	r3, r0
 800690e:	2b00      	cmp	r3, #0
 8006910:	d00e      	beq.n	8006930 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d00b      	beq.n	8006930 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2201      	movs	r2, #1
 800691c:	601a      	str	r2, [r3, #0]
 800691e:	e007      	b.n	8006930 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006920:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006924:	3301      	adds	r3, #1
 8006926:	b2db      	uxtb	r3, r3
 8006928:	b25a      	sxtb	r2, r3
 800692a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800692c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006930:	2301      	movs	r3, #1
 8006932:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8006934:	e001      	b.n	800693a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006936:	2300      	movs	r3, #0
 8006938:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800693a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800693c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800693e:	697b      	ldr	r3, [r7, #20]
 8006940:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006944:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006946:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8006948:	4618      	mov	r0, r3
 800694a:	3740      	adds	r7, #64	@ 0x40
 800694c:	46bd      	mov	sp, r7
 800694e:	bd80      	pop	{r7, pc}

08006950 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b08c      	sub	sp, #48	@ 0x30
 8006954:	af00      	add	r7, sp, #0
 8006956:	60f8      	str	r0, [r7, #12]
 8006958:	60b9      	str	r1, [r7, #8]
 800695a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800695c:	2300      	movs	r3, #0
 800695e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006964:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006966:	2b00      	cmp	r3, #0
 8006968:	d10b      	bne.n	8006982 <xQueueReceive+0x32>
	__asm volatile
 800696a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800696e:	f383 8811 	msr	BASEPRI, r3
 8006972:	f3bf 8f6f 	isb	sy
 8006976:	f3bf 8f4f 	dsb	sy
 800697a:	623b      	str	r3, [r7, #32]
}
 800697c:	bf00      	nop
 800697e:	bf00      	nop
 8006980:	e7fd      	b.n	800697e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d103      	bne.n	8006990 <xQueueReceive+0x40>
 8006988:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800698a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800698c:	2b00      	cmp	r3, #0
 800698e:	d101      	bne.n	8006994 <xQueueReceive+0x44>
 8006990:	2301      	movs	r3, #1
 8006992:	e000      	b.n	8006996 <xQueueReceive+0x46>
 8006994:	2300      	movs	r3, #0
 8006996:	2b00      	cmp	r3, #0
 8006998:	d10b      	bne.n	80069b2 <xQueueReceive+0x62>
	__asm volatile
 800699a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800699e:	f383 8811 	msr	BASEPRI, r3
 80069a2:	f3bf 8f6f 	isb	sy
 80069a6:	f3bf 8f4f 	dsb	sy
 80069aa:	61fb      	str	r3, [r7, #28]
}
 80069ac:	bf00      	nop
 80069ae:	bf00      	nop
 80069b0:	e7fd      	b.n	80069ae <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80069b2:	f001 f92d 	bl	8007c10 <xTaskGetSchedulerState>
 80069b6:	4603      	mov	r3, r0
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d102      	bne.n	80069c2 <xQueueReceive+0x72>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d101      	bne.n	80069c6 <xQueueReceive+0x76>
 80069c2:	2301      	movs	r3, #1
 80069c4:	e000      	b.n	80069c8 <xQueueReceive+0x78>
 80069c6:	2300      	movs	r3, #0
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d10b      	bne.n	80069e4 <xQueueReceive+0x94>
	__asm volatile
 80069cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069d0:	f383 8811 	msr	BASEPRI, r3
 80069d4:	f3bf 8f6f 	isb	sy
 80069d8:	f3bf 8f4f 	dsb	sy
 80069dc:	61bb      	str	r3, [r7, #24]
}
 80069de:	bf00      	nop
 80069e0:	bf00      	nop
 80069e2:	e7fd      	b.n	80069e0 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80069e4:	f001 fe80 	bl	80086e8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80069e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069ec:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80069ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d01f      	beq.n	8006a34 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80069f4:	68b9      	ldr	r1, [r7, #8]
 80069f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80069f8:	f000 f8f6 	bl	8006be8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80069fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069fe:	1e5a      	subs	r2, r3, #1
 8006a00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a02:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006a04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a06:	691b      	ldr	r3, [r3, #16]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d00f      	beq.n	8006a2c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006a0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a0e:	3310      	adds	r3, #16
 8006a10:	4618      	mov	r0, r3
 8006a12:	f000 fedf 	bl	80077d4 <xTaskRemoveFromEventList>
 8006a16:	4603      	mov	r3, r0
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d007      	beq.n	8006a2c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006a1c:	4b3c      	ldr	r3, [pc, #240]	@ (8006b10 <xQueueReceive+0x1c0>)
 8006a1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006a22:	601a      	str	r2, [r3, #0]
 8006a24:	f3bf 8f4f 	dsb	sy
 8006a28:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006a2c:	f001 fe8e 	bl	800874c <vPortExitCritical>
				return pdPASS;
 8006a30:	2301      	movs	r3, #1
 8006a32:	e069      	b.n	8006b08 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d103      	bne.n	8006a42 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006a3a:	f001 fe87 	bl	800874c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006a3e:	2300      	movs	r3, #0
 8006a40:	e062      	b.n	8006b08 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006a42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d106      	bne.n	8006a56 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006a48:	f107 0310 	add.w	r3, r7, #16
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	f000 ff27 	bl	80078a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006a52:	2301      	movs	r3, #1
 8006a54:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006a56:	f001 fe79 	bl	800874c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006a5a:	f000 fc2d 	bl	80072b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006a5e:	f001 fe43 	bl	80086e8 <vPortEnterCritical>
 8006a62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a64:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006a68:	b25b      	sxtb	r3, r3
 8006a6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a6e:	d103      	bne.n	8006a78 <xQueueReceive+0x128>
 8006a70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a72:	2200      	movs	r2, #0
 8006a74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006a78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a7a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006a7e:	b25b      	sxtb	r3, r3
 8006a80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a84:	d103      	bne.n	8006a8e <xQueueReceive+0x13e>
 8006a86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a88:	2200      	movs	r2, #0
 8006a8a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006a8e:	f001 fe5d 	bl	800874c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006a92:	1d3a      	adds	r2, r7, #4
 8006a94:	f107 0310 	add.w	r3, r7, #16
 8006a98:	4611      	mov	r1, r2
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	f000 ff16 	bl	80078cc <xTaskCheckForTimeOut>
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d123      	bne.n	8006aee <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006aa6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006aa8:	f000 f916 	bl	8006cd8 <prvIsQueueEmpty>
 8006aac:	4603      	mov	r3, r0
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d017      	beq.n	8006ae2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006ab2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ab4:	3324      	adds	r3, #36	@ 0x24
 8006ab6:	687a      	ldr	r2, [r7, #4]
 8006ab8:	4611      	mov	r1, r2
 8006aba:	4618      	mov	r0, r3
 8006abc:	f000 fe38 	bl	8007730 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006ac0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006ac2:	f000 f8b7 	bl	8006c34 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006ac6:	f000 fc3d 	bl	8007344 <xTaskResumeAll>
 8006aca:	4603      	mov	r3, r0
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d189      	bne.n	80069e4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8006ad0:	4b0f      	ldr	r3, [pc, #60]	@ (8006b10 <xQueueReceive+0x1c0>)
 8006ad2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006ad6:	601a      	str	r2, [r3, #0]
 8006ad8:	f3bf 8f4f 	dsb	sy
 8006adc:	f3bf 8f6f 	isb	sy
 8006ae0:	e780      	b.n	80069e4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006ae2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006ae4:	f000 f8a6 	bl	8006c34 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006ae8:	f000 fc2c 	bl	8007344 <xTaskResumeAll>
 8006aec:	e77a      	b.n	80069e4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006aee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006af0:	f000 f8a0 	bl	8006c34 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006af4:	f000 fc26 	bl	8007344 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006af8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006afa:	f000 f8ed 	bl	8006cd8 <prvIsQueueEmpty>
 8006afe:	4603      	mov	r3, r0
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	f43f af6f 	beq.w	80069e4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006b06:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006b08:	4618      	mov	r0, r3
 8006b0a:	3730      	adds	r7, #48	@ 0x30
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	bd80      	pop	{r7, pc}
 8006b10:	e000ed04 	.word	0xe000ed04

08006b14 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b086      	sub	sp, #24
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	60f8      	str	r0, [r7, #12]
 8006b1c:	60b9      	str	r1, [r7, #8]
 8006b1e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006b20:	2300      	movs	r3, #0
 8006b22:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b28:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d10d      	bne.n	8006b4e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d14d      	bne.n	8006bd6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	689b      	ldr	r3, [r3, #8]
 8006b3e:	4618      	mov	r0, r3
 8006b40:	f001 f884 	bl	8007c4c <xTaskPriorityDisinherit>
 8006b44:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	2200      	movs	r2, #0
 8006b4a:	609a      	str	r2, [r3, #8]
 8006b4c:	e043      	b.n	8006bd6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d119      	bne.n	8006b88 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	6858      	ldr	r0, [r3, #4]
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b5c:	461a      	mov	r2, r3
 8006b5e:	68b9      	ldr	r1, [r7, #8]
 8006b60:	f003 faf9 	bl	800a156 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	685a      	ldr	r2, [r3, #4]
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b6c:	441a      	add	r2, r3
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	685a      	ldr	r2, [r3, #4]
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	689b      	ldr	r3, [r3, #8]
 8006b7a:	429a      	cmp	r2, r3
 8006b7c:	d32b      	bcc.n	8006bd6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681a      	ldr	r2, [r3, #0]
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	605a      	str	r2, [r3, #4]
 8006b86:	e026      	b.n	8006bd6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	68d8      	ldr	r0, [r3, #12]
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b90:	461a      	mov	r2, r3
 8006b92:	68b9      	ldr	r1, [r7, #8]
 8006b94:	f003 fadf 	bl	800a156 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	68da      	ldr	r2, [r3, #12]
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ba0:	425b      	negs	r3, r3
 8006ba2:	441a      	add	r2, r3
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	68da      	ldr	r2, [r3, #12]
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	429a      	cmp	r2, r3
 8006bb2:	d207      	bcs.n	8006bc4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	689a      	ldr	r2, [r3, #8]
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bbc:	425b      	negs	r3, r3
 8006bbe:	441a      	add	r2, r3
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2b02      	cmp	r3, #2
 8006bc8:	d105      	bne.n	8006bd6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006bca:	693b      	ldr	r3, [r7, #16]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d002      	beq.n	8006bd6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006bd0:	693b      	ldr	r3, [r7, #16]
 8006bd2:	3b01      	subs	r3, #1
 8006bd4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006bd6:	693b      	ldr	r3, [r7, #16]
 8006bd8:	1c5a      	adds	r2, r3, #1
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8006bde:	697b      	ldr	r3, [r7, #20]
}
 8006be0:	4618      	mov	r0, r3
 8006be2:	3718      	adds	r7, #24
 8006be4:	46bd      	mov	sp, r7
 8006be6:	bd80      	pop	{r7, pc}

08006be8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b082      	sub	sp, #8
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
 8006bf0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d018      	beq.n	8006c2c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	68da      	ldr	r2, [r3, #12]
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c02:	441a      	add	r2, r3
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	68da      	ldr	r2, [r3, #12]
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	689b      	ldr	r3, [r3, #8]
 8006c10:	429a      	cmp	r2, r3
 8006c12:	d303      	bcc.n	8006c1c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681a      	ldr	r2, [r3, #0]
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	68d9      	ldr	r1, [r3, #12]
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c24:	461a      	mov	r2, r3
 8006c26:	6838      	ldr	r0, [r7, #0]
 8006c28:	f003 fa95 	bl	800a156 <memcpy>
	}
}
 8006c2c:	bf00      	nop
 8006c2e:	3708      	adds	r7, #8
 8006c30:	46bd      	mov	sp, r7
 8006c32:	bd80      	pop	{r7, pc}

08006c34 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b084      	sub	sp, #16
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006c3c:	f001 fd54 	bl	80086e8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006c46:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006c48:	e011      	b.n	8006c6e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d012      	beq.n	8006c78 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	3324      	adds	r3, #36	@ 0x24
 8006c56:	4618      	mov	r0, r3
 8006c58:	f000 fdbc 	bl	80077d4 <xTaskRemoveFromEventList>
 8006c5c:	4603      	mov	r3, r0
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d001      	beq.n	8006c66 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006c62:	f000 fe97 	bl	8007994 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006c66:	7bfb      	ldrb	r3, [r7, #15]
 8006c68:	3b01      	subs	r3, #1
 8006c6a:	b2db      	uxtb	r3, r3
 8006c6c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006c6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	dce9      	bgt.n	8006c4a <prvUnlockQueue+0x16>
 8006c76:	e000      	b.n	8006c7a <prvUnlockQueue+0x46>
					break;
 8006c78:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	22ff      	movs	r2, #255	@ 0xff
 8006c7e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8006c82:	f001 fd63 	bl	800874c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006c86:	f001 fd2f 	bl	80086e8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006c90:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006c92:	e011      	b.n	8006cb8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	691b      	ldr	r3, [r3, #16]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d012      	beq.n	8006cc2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	3310      	adds	r3, #16
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	f000 fd97 	bl	80077d4 <xTaskRemoveFromEventList>
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d001      	beq.n	8006cb0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006cac:	f000 fe72 	bl	8007994 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006cb0:	7bbb      	ldrb	r3, [r7, #14]
 8006cb2:	3b01      	subs	r3, #1
 8006cb4:	b2db      	uxtb	r3, r3
 8006cb6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006cb8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	dce9      	bgt.n	8006c94 <prvUnlockQueue+0x60>
 8006cc0:	e000      	b.n	8006cc4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006cc2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	22ff      	movs	r2, #255	@ 0xff
 8006cc8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8006ccc:	f001 fd3e 	bl	800874c <vPortExitCritical>
}
 8006cd0:	bf00      	nop
 8006cd2:	3710      	adds	r7, #16
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	bd80      	pop	{r7, pc}

08006cd8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b084      	sub	sp, #16
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006ce0:	f001 fd02 	bl	80086e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d102      	bne.n	8006cf2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006cec:	2301      	movs	r3, #1
 8006cee:	60fb      	str	r3, [r7, #12]
 8006cf0:	e001      	b.n	8006cf6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006cf6:	f001 fd29 	bl	800874c <vPortExitCritical>

	return xReturn;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
}
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	3710      	adds	r7, #16
 8006d00:	46bd      	mov	sp, r7
 8006d02:	bd80      	pop	{r7, pc}

08006d04 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b084      	sub	sp, #16
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006d0c:	f001 fcec 	bl	80086e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d18:	429a      	cmp	r2, r3
 8006d1a:	d102      	bne.n	8006d22 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006d1c:	2301      	movs	r3, #1
 8006d1e:	60fb      	str	r3, [r7, #12]
 8006d20:	e001      	b.n	8006d26 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006d22:	2300      	movs	r3, #0
 8006d24:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006d26:	f001 fd11 	bl	800874c <vPortExitCritical>

	return xReturn;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
}
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	3710      	adds	r7, #16
 8006d30:	46bd      	mov	sp, r7
 8006d32:	bd80      	pop	{r7, pc}

08006d34 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006d34:	b480      	push	{r7}
 8006d36:	b085      	sub	sp, #20
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
 8006d3c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006d3e:	2300      	movs	r3, #0
 8006d40:	60fb      	str	r3, [r7, #12]
 8006d42:	e014      	b.n	8006d6e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006d44:	4a0f      	ldr	r2, [pc, #60]	@ (8006d84 <vQueueAddToRegistry+0x50>)
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d10b      	bne.n	8006d68 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006d50:	490c      	ldr	r1, [pc, #48]	@ (8006d84 <vQueueAddToRegistry+0x50>)
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	683a      	ldr	r2, [r7, #0]
 8006d56:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006d5a:	4a0a      	ldr	r2, [pc, #40]	@ (8006d84 <vQueueAddToRegistry+0x50>)
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	00db      	lsls	r3, r3, #3
 8006d60:	4413      	add	r3, r2
 8006d62:	687a      	ldr	r2, [r7, #4]
 8006d64:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006d66:	e006      	b.n	8006d76 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	3301      	adds	r3, #1
 8006d6c:	60fb      	str	r3, [r7, #12]
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	2b07      	cmp	r3, #7
 8006d72:	d9e7      	bls.n	8006d44 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006d74:	bf00      	nop
 8006d76:	bf00      	nop
 8006d78:	3714      	adds	r7, #20
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d80:	4770      	bx	lr
 8006d82:	bf00      	nop
 8006d84:	24000a38 	.word	0x24000a38

08006d88 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b086      	sub	sp, #24
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	60f8      	str	r0, [r7, #12]
 8006d90:	60b9      	str	r1, [r7, #8]
 8006d92:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006d98:	f001 fca6 	bl	80086e8 <vPortEnterCritical>
 8006d9c:	697b      	ldr	r3, [r7, #20]
 8006d9e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006da2:	b25b      	sxtb	r3, r3
 8006da4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006da8:	d103      	bne.n	8006db2 <vQueueWaitForMessageRestricted+0x2a>
 8006daa:	697b      	ldr	r3, [r7, #20]
 8006dac:	2200      	movs	r2, #0
 8006dae:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006db2:	697b      	ldr	r3, [r7, #20]
 8006db4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006db8:	b25b      	sxtb	r3, r3
 8006dba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dbe:	d103      	bne.n	8006dc8 <vQueueWaitForMessageRestricted+0x40>
 8006dc0:	697b      	ldr	r3, [r7, #20]
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006dc8:	f001 fcc0 	bl	800874c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006dcc:	697b      	ldr	r3, [r7, #20]
 8006dce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d106      	bne.n	8006de2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006dd4:	697b      	ldr	r3, [r7, #20]
 8006dd6:	3324      	adds	r3, #36	@ 0x24
 8006dd8:	687a      	ldr	r2, [r7, #4]
 8006dda:	68b9      	ldr	r1, [r7, #8]
 8006ddc:	4618      	mov	r0, r3
 8006dde:	f000 fccd 	bl	800777c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006de2:	6978      	ldr	r0, [r7, #20]
 8006de4:	f7ff ff26 	bl	8006c34 <prvUnlockQueue>
	}
 8006de8:	bf00      	nop
 8006dea:	3718      	adds	r7, #24
 8006dec:	46bd      	mov	sp, r7
 8006dee:	bd80      	pop	{r7, pc}

08006df0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b08e      	sub	sp, #56	@ 0x38
 8006df4:	af04      	add	r7, sp, #16
 8006df6:	60f8      	str	r0, [r7, #12]
 8006df8:	60b9      	str	r1, [r7, #8]
 8006dfa:	607a      	str	r2, [r7, #4]
 8006dfc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006dfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d10b      	bne.n	8006e1c <xTaskCreateStatic+0x2c>
	__asm volatile
 8006e04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e08:	f383 8811 	msr	BASEPRI, r3
 8006e0c:	f3bf 8f6f 	isb	sy
 8006e10:	f3bf 8f4f 	dsb	sy
 8006e14:	623b      	str	r3, [r7, #32]
}
 8006e16:	bf00      	nop
 8006e18:	bf00      	nop
 8006e1a:	e7fd      	b.n	8006e18 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006e1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d10b      	bne.n	8006e3a <xTaskCreateStatic+0x4a>
	__asm volatile
 8006e22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e26:	f383 8811 	msr	BASEPRI, r3
 8006e2a:	f3bf 8f6f 	isb	sy
 8006e2e:	f3bf 8f4f 	dsb	sy
 8006e32:	61fb      	str	r3, [r7, #28]
}
 8006e34:	bf00      	nop
 8006e36:	bf00      	nop
 8006e38:	e7fd      	b.n	8006e36 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006e3a:	23a8      	movs	r3, #168	@ 0xa8
 8006e3c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006e3e:	693b      	ldr	r3, [r7, #16]
 8006e40:	2ba8      	cmp	r3, #168	@ 0xa8
 8006e42:	d00b      	beq.n	8006e5c <xTaskCreateStatic+0x6c>
	__asm volatile
 8006e44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e48:	f383 8811 	msr	BASEPRI, r3
 8006e4c:	f3bf 8f6f 	isb	sy
 8006e50:	f3bf 8f4f 	dsb	sy
 8006e54:	61bb      	str	r3, [r7, #24]
}
 8006e56:	bf00      	nop
 8006e58:	bf00      	nop
 8006e5a:	e7fd      	b.n	8006e58 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006e5c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006e5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d01e      	beq.n	8006ea2 <xTaskCreateStatic+0xb2>
 8006e64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d01b      	beq.n	8006ea2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006e6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e6c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e70:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006e72:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e76:	2202      	movs	r2, #2
 8006e78:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	9303      	str	r3, [sp, #12]
 8006e80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e82:	9302      	str	r3, [sp, #8]
 8006e84:	f107 0314 	add.w	r3, r7, #20
 8006e88:	9301      	str	r3, [sp, #4]
 8006e8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e8c:	9300      	str	r3, [sp, #0]
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	687a      	ldr	r2, [r7, #4]
 8006e92:	68b9      	ldr	r1, [r7, #8]
 8006e94:	68f8      	ldr	r0, [r7, #12]
 8006e96:	f000 f851 	bl	8006f3c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006e9a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006e9c:	f000 f8f6 	bl	800708c <prvAddNewTaskToReadyList>
 8006ea0:	e001      	b.n	8006ea6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006ea6:	697b      	ldr	r3, [r7, #20]
	}
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	3728      	adds	r7, #40	@ 0x28
 8006eac:	46bd      	mov	sp, r7
 8006eae:	bd80      	pop	{r7, pc}

08006eb0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b08c      	sub	sp, #48	@ 0x30
 8006eb4:	af04      	add	r7, sp, #16
 8006eb6:	60f8      	str	r0, [r7, #12]
 8006eb8:	60b9      	str	r1, [r7, #8]
 8006eba:	603b      	str	r3, [r7, #0]
 8006ebc:	4613      	mov	r3, r2
 8006ebe:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006ec0:	88fb      	ldrh	r3, [r7, #6]
 8006ec2:	009b      	lsls	r3, r3, #2
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	f001 fe15 	bl	8008af4 <pvPortMalloc>
 8006eca:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006ecc:	697b      	ldr	r3, [r7, #20]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d00e      	beq.n	8006ef0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006ed2:	20a8      	movs	r0, #168	@ 0xa8
 8006ed4:	f001 fe0e 	bl	8008af4 <pvPortMalloc>
 8006ed8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006eda:	69fb      	ldr	r3, [r7, #28]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d003      	beq.n	8006ee8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006ee0:	69fb      	ldr	r3, [r7, #28]
 8006ee2:	697a      	ldr	r2, [r7, #20]
 8006ee4:	631a      	str	r2, [r3, #48]	@ 0x30
 8006ee6:	e005      	b.n	8006ef4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006ee8:	6978      	ldr	r0, [r7, #20]
 8006eea:	f001 fed1 	bl	8008c90 <vPortFree>
 8006eee:	e001      	b.n	8006ef4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006ef4:	69fb      	ldr	r3, [r7, #28]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d017      	beq.n	8006f2a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006efa:	69fb      	ldr	r3, [r7, #28]
 8006efc:	2200      	movs	r2, #0
 8006efe:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006f02:	88fa      	ldrh	r2, [r7, #6]
 8006f04:	2300      	movs	r3, #0
 8006f06:	9303      	str	r3, [sp, #12]
 8006f08:	69fb      	ldr	r3, [r7, #28]
 8006f0a:	9302      	str	r3, [sp, #8]
 8006f0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f0e:	9301      	str	r3, [sp, #4]
 8006f10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f12:	9300      	str	r3, [sp, #0]
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	68b9      	ldr	r1, [r7, #8]
 8006f18:	68f8      	ldr	r0, [r7, #12]
 8006f1a:	f000 f80f 	bl	8006f3c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006f1e:	69f8      	ldr	r0, [r7, #28]
 8006f20:	f000 f8b4 	bl	800708c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006f24:	2301      	movs	r3, #1
 8006f26:	61bb      	str	r3, [r7, #24]
 8006f28:	e002      	b.n	8006f30 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006f2a:	f04f 33ff 	mov.w	r3, #4294967295
 8006f2e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006f30:	69bb      	ldr	r3, [r7, #24]
	}
 8006f32:	4618      	mov	r0, r3
 8006f34:	3720      	adds	r7, #32
 8006f36:	46bd      	mov	sp, r7
 8006f38:	bd80      	pop	{r7, pc}
	...

08006f3c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b088      	sub	sp, #32
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	60f8      	str	r0, [r7, #12]
 8006f44:	60b9      	str	r1, [r7, #8]
 8006f46:	607a      	str	r2, [r7, #4]
 8006f48:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006f4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f4c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	009b      	lsls	r3, r3, #2
 8006f52:	461a      	mov	r2, r3
 8006f54:	21a5      	movs	r1, #165	@ 0xa5
 8006f56:	f003 f829 	bl	8009fac <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006f5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f5c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006f5e:	6879      	ldr	r1, [r7, #4]
 8006f60:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8006f64:	440b      	add	r3, r1
 8006f66:	009b      	lsls	r3, r3, #2
 8006f68:	4413      	add	r3, r2
 8006f6a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006f6c:	69bb      	ldr	r3, [r7, #24]
 8006f6e:	f023 0307 	bic.w	r3, r3, #7
 8006f72:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006f74:	69bb      	ldr	r3, [r7, #24]
 8006f76:	f003 0307 	and.w	r3, r3, #7
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d00b      	beq.n	8006f96 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8006f7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f82:	f383 8811 	msr	BASEPRI, r3
 8006f86:	f3bf 8f6f 	isb	sy
 8006f8a:	f3bf 8f4f 	dsb	sy
 8006f8e:	617b      	str	r3, [r7, #20]
}
 8006f90:	bf00      	nop
 8006f92:	bf00      	nop
 8006f94:	e7fd      	b.n	8006f92 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006f96:	68bb      	ldr	r3, [r7, #8]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d01f      	beq.n	8006fdc <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	61fb      	str	r3, [r7, #28]
 8006fa0:	e012      	b.n	8006fc8 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006fa2:	68ba      	ldr	r2, [r7, #8]
 8006fa4:	69fb      	ldr	r3, [r7, #28]
 8006fa6:	4413      	add	r3, r2
 8006fa8:	7819      	ldrb	r1, [r3, #0]
 8006faa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006fac:	69fb      	ldr	r3, [r7, #28]
 8006fae:	4413      	add	r3, r2
 8006fb0:	3334      	adds	r3, #52	@ 0x34
 8006fb2:	460a      	mov	r2, r1
 8006fb4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006fb6:	68ba      	ldr	r2, [r7, #8]
 8006fb8:	69fb      	ldr	r3, [r7, #28]
 8006fba:	4413      	add	r3, r2
 8006fbc:	781b      	ldrb	r3, [r3, #0]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d006      	beq.n	8006fd0 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006fc2:	69fb      	ldr	r3, [r7, #28]
 8006fc4:	3301      	adds	r3, #1
 8006fc6:	61fb      	str	r3, [r7, #28]
 8006fc8:	69fb      	ldr	r3, [r7, #28]
 8006fca:	2b0f      	cmp	r3, #15
 8006fcc:	d9e9      	bls.n	8006fa2 <prvInitialiseNewTask+0x66>
 8006fce:	e000      	b.n	8006fd2 <prvInitialiseNewTask+0x96>
			{
				break;
 8006fd0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006fd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006fda:	e003      	b.n	8006fe4 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006fdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fde:	2200      	movs	r2, #0
 8006fe0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006fe4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fe6:	2b37      	cmp	r3, #55	@ 0x37
 8006fe8:	d901      	bls.n	8006fee <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006fea:	2337      	movs	r3, #55	@ 0x37
 8006fec:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006fee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ff0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006ff2:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006ff4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ff6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006ff8:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006ffa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007000:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007002:	3304      	adds	r3, #4
 8007004:	4618      	mov	r0, r3
 8007006:	f7ff f965 	bl	80062d4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800700a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800700c:	3318      	adds	r3, #24
 800700e:	4618      	mov	r0, r3
 8007010:	f7ff f960 	bl	80062d4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007014:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007016:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007018:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800701a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800701c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007020:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007022:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007024:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007026:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007028:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800702a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800702c:	2200      	movs	r2, #0
 800702e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007032:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007034:	2200      	movs	r2, #0
 8007036:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800703a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800703c:	3354      	adds	r3, #84	@ 0x54
 800703e:	224c      	movs	r2, #76	@ 0x4c
 8007040:	2100      	movs	r1, #0
 8007042:	4618      	mov	r0, r3
 8007044:	f002 ffb2 	bl	8009fac <memset>
 8007048:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800704a:	4a0d      	ldr	r2, [pc, #52]	@ (8007080 <prvInitialiseNewTask+0x144>)
 800704c:	659a      	str	r2, [r3, #88]	@ 0x58
 800704e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007050:	4a0c      	ldr	r2, [pc, #48]	@ (8007084 <prvInitialiseNewTask+0x148>)
 8007052:	65da      	str	r2, [r3, #92]	@ 0x5c
 8007054:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007056:	4a0c      	ldr	r2, [pc, #48]	@ (8007088 <prvInitialiseNewTask+0x14c>)
 8007058:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800705a:	683a      	ldr	r2, [r7, #0]
 800705c:	68f9      	ldr	r1, [r7, #12]
 800705e:	69b8      	ldr	r0, [r7, #24]
 8007060:	f001 fa12 	bl	8008488 <pxPortInitialiseStack>
 8007064:	4602      	mov	r2, r0
 8007066:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007068:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800706a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800706c:	2b00      	cmp	r3, #0
 800706e:	d002      	beq.n	8007076 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007070:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007072:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007074:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007076:	bf00      	nop
 8007078:	3720      	adds	r7, #32
 800707a:	46bd      	mov	sp, r7
 800707c:	bd80      	pop	{r7, pc}
 800707e:	bf00      	nop
 8007080:	24004cd8 	.word	0x24004cd8
 8007084:	24004d40 	.word	0x24004d40
 8007088:	24004da8 	.word	0x24004da8

0800708c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b082      	sub	sp, #8
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007094:	f001 fb28 	bl	80086e8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007098:	4b2d      	ldr	r3, [pc, #180]	@ (8007150 <prvAddNewTaskToReadyList+0xc4>)
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	3301      	adds	r3, #1
 800709e:	4a2c      	ldr	r2, [pc, #176]	@ (8007150 <prvAddNewTaskToReadyList+0xc4>)
 80070a0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80070a2:	4b2c      	ldr	r3, [pc, #176]	@ (8007154 <prvAddNewTaskToReadyList+0xc8>)
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d109      	bne.n	80070be <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80070aa:	4a2a      	ldr	r2, [pc, #168]	@ (8007154 <prvAddNewTaskToReadyList+0xc8>)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80070b0:	4b27      	ldr	r3, [pc, #156]	@ (8007150 <prvAddNewTaskToReadyList+0xc4>)
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	2b01      	cmp	r3, #1
 80070b6:	d110      	bne.n	80070da <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80070b8:	f000 fce6 	bl	8007a88 <prvInitialiseTaskLists>
 80070bc:	e00d      	b.n	80070da <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80070be:	4b26      	ldr	r3, [pc, #152]	@ (8007158 <prvAddNewTaskToReadyList+0xcc>)
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d109      	bne.n	80070da <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80070c6:	4b23      	ldr	r3, [pc, #140]	@ (8007154 <prvAddNewTaskToReadyList+0xc8>)
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070d0:	429a      	cmp	r2, r3
 80070d2:	d802      	bhi.n	80070da <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80070d4:	4a1f      	ldr	r2, [pc, #124]	@ (8007154 <prvAddNewTaskToReadyList+0xc8>)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80070da:	4b20      	ldr	r3, [pc, #128]	@ (800715c <prvAddNewTaskToReadyList+0xd0>)
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	3301      	adds	r3, #1
 80070e0:	4a1e      	ldr	r2, [pc, #120]	@ (800715c <prvAddNewTaskToReadyList+0xd0>)
 80070e2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80070e4:	4b1d      	ldr	r3, [pc, #116]	@ (800715c <prvAddNewTaskToReadyList+0xd0>)
 80070e6:	681a      	ldr	r2, [r3, #0]
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80070f0:	4b1b      	ldr	r3, [pc, #108]	@ (8007160 <prvAddNewTaskToReadyList+0xd4>)
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	429a      	cmp	r2, r3
 80070f6:	d903      	bls.n	8007100 <prvAddNewTaskToReadyList+0x74>
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070fc:	4a18      	ldr	r2, [pc, #96]	@ (8007160 <prvAddNewTaskToReadyList+0xd4>)
 80070fe:	6013      	str	r3, [r2, #0]
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007104:	4613      	mov	r3, r2
 8007106:	009b      	lsls	r3, r3, #2
 8007108:	4413      	add	r3, r2
 800710a:	009b      	lsls	r3, r3, #2
 800710c:	4a15      	ldr	r2, [pc, #84]	@ (8007164 <prvAddNewTaskToReadyList+0xd8>)
 800710e:	441a      	add	r2, r3
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	3304      	adds	r3, #4
 8007114:	4619      	mov	r1, r3
 8007116:	4610      	mov	r0, r2
 8007118:	f7ff f8e9 	bl	80062ee <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800711c:	f001 fb16 	bl	800874c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007120:	4b0d      	ldr	r3, [pc, #52]	@ (8007158 <prvAddNewTaskToReadyList+0xcc>)
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d00e      	beq.n	8007146 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007128:	4b0a      	ldr	r3, [pc, #40]	@ (8007154 <prvAddNewTaskToReadyList+0xc8>)
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007132:	429a      	cmp	r2, r3
 8007134:	d207      	bcs.n	8007146 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007136:	4b0c      	ldr	r3, [pc, #48]	@ (8007168 <prvAddNewTaskToReadyList+0xdc>)
 8007138:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800713c:	601a      	str	r2, [r3, #0]
 800713e:	f3bf 8f4f 	dsb	sy
 8007142:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007146:	bf00      	nop
 8007148:	3708      	adds	r7, #8
 800714a:	46bd      	mov	sp, r7
 800714c:	bd80      	pop	{r7, pc}
 800714e:	bf00      	nop
 8007150:	24000f4c 	.word	0x24000f4c
 8007154:	24000a78 	.word	0x24000a78
 8007158:	24000f58 	.word	0x24000f58
 800715c:	24000f68 	.word	0x24000f68
 8007160:	24000f54 	.word	0x24000f54
 8007164:	24000a7c 	.word	0x24000a7c
 8007168:	e000ed04 	.word	0xe000ed04

0800716c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800716c:	b580      	push	{r7, lr}
 800716e:	b084      	sub	sp, #16
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007174:	2300      	movs	r3, #0
 8007176:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d018      	beq.n	80071b0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800717e:	4b14      	ldr	r3, [pc, #80]	@ (80071d0 <vTaskDelay+0x64>)
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d00b      	beq.n	800719e <vTaskDelay+0x32>
	__asm volatile
 8007186:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800718a:	f383 8811 	msr	BASEPRI, r3
 800718e:	f3bf 8f6f 	isb	sy
 8007192:	f3bf 8f4f 	dsb	sy
 8007196:	60bb      	str	r3, [r7, #8]
}
 8007198:	bf00      	nop
 800719a:	bf00      	nop
 800719c:	e7fd      	b.n	800719a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800719e:	f000 f88b 	bl	80072b8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80071a2:	2100      	movs	r1, #0
 80071a4:	6878      	ldr	r0, [r7, #4]
 80071a6:	f000 fdc1 	bl	8007d2c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80071aa:	f000 f8cb 	bl	8007344 <xTaskResumeAll>
 80071ae:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d107      	bne.n	80071c6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80071b6:	4b07      	ldr	r3, [pc, #28]	@ (80071d4 <vTaskDelay+0x68>)
 80071b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80071bc:	601a      	str	r2, [r3, #0]
 80071be:	f3bf 8f4f 	dsb	sy
 80071c2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80071c6:	bf00      	nop
 80071c8:	3710      	adds	r7, #16
 80071ca:	46bd      	mov	sp, r7
 80071cc:	bd80      	pop	{r7, pc}
 80071ce:	bf00      	nop
 80071d0:	24000f74 	.word	0x24000f74
 80071d4:	e000ed04 	.word	0xe000ed04

080071d8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b08a      	sub	sp, #40	@ 0x28
 80071dc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80071de:	2300      	movs	r3, #0
 80071e0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80071e2:	2300      	movs	r3, #0
 80071e4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80071e6:	463a      	mov	r2, r7
 80071e8:	1d39      	adds	r1, r7, #4
 80071ea:	f107 0308 	add.w	r3, r7, #8
 80071ee:	4618      	mov	r0, r3
 80071f0:	f7ff f81c 	bl	800622c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80071f4:	6839      	ldr	r1, [r7, #0]
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	68ba      	ldr	r2, [r7, #8]
 80071fa:	9202      	str	r2, [sp, #8]
 80071fc:	9301      	str	r3, [sp, #4]
 80071fe:	2300      	movs	r3, #0
 8007200:	9300      	str	r3, [sp, #0]
 8007202:	2300      	movs	r3, #0
 8007204:	460a      	mov	r2, r1
 8007206:	4924      	ldr	r1, [pc, #144]	@ (8007298 <vTaskStartScheduler+0xc0>)
 8007208:	4824      	ldr	r0, [pc, #144]	@ (800729c <vTaskStartScheduler+0xc4>)
 800720a:	f7ff fdf1 	bl	8006df0 <xTaskCreateStatic>
 800720e:	4603      	mov	r3, r0
 8007210:	4a23      	ldr	r2, [pc, #140]	@ (80072a0 <vTaskStartScheduler+0xc8>)
 8007212:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007214:	4b22      	ldr	r3, [pc, #136]	@ (80072a0 <vTaskStartScheduler+0xc8>)
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d002      	beq.n	8007222 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800721c:	2301      	movs	r3, #1
 800721e:	617b      	str	r3, [r7, #20]
 8007220:	e001      	b.n	8007226 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007222:	2300      	movs	r3, #0
 8007224:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007226:	697b      	ldr	r3, [r7, #20]
 8007228:	2b01      	cmp	r3, #1
 800722a:	d102      	bne.n	8007232 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800722c:	f000 fdd2 	bl	8007dd4 <xTimerCreateTimerTask>
 8007230:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007232:	697b      	ldr	r3, [r7, #20]
 8007234:	2b01      	cmp	r3, #1
 8007236:	d11b      	bne.n	8007270 <vTaskStartScheduler+0x98>
	__asm volatile
 8007238:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800723c:	f383 8811 	msr	BASEPRI, r3
 8007240:	f3bf 8f6f 	isb	sy
 8007244:	f3bf 8f4f 	dsb	sy
 8007248:	613b      	str	r3, [r7, #16]
}
 800724a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800724c:	4b15      	ldr	r3, [pc, #84]	@ (80072a4 <vTaskStartScheduler+0xcc>)
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	3354      	adds	r3, #84	@ 0x54
 8007252:	4a15      	ldr	r2, [pc, #84]	@ (80072a8 <vTaskStartScheduler+0xd0>)
 8007254:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007256:	4b15      	ldr	r3, [pc, #84]	@ (80072ac <vTaskStartScheduler+0xd4>)
 8007258:	f04f 32ff 	mov.w	r2, #4294967295
 800725c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800725e:	4b14      	ldr	r3, [pc, #80]	@ (80072b0 <vTaskStartScheduler+0xd8>)
 8007260:	2201      	movs	r2, #1
 8007262:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007264:	4b13      	ldr	r3, [pc, #76]	@ (80072b4 <vTaskStartScheduler+0xdc>)
 8007266:	2200      	movs	r2, #0
 8007268:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800726a:	f001 f999 	bl	80085a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800726e:	e00f      	b.n	8007290 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007270:	697b      	ldr	r3, [r7, #20]
 8007272:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007276:	d10b      	bne.n	8007290 <vTaskStartScheduler+0xb8>
	__asm volatile
 8007278:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800727c:	f383 8811 	msr	BASEPRI, r3
 8007280:	f3bf 8f6f 	isb	sy
 8007284:	f3bf 8f4f 	dsb	sy
 8007288:	60fb      	str	r3, [r7, #12]
}
 800728a:	bf00      	nop
 800728c:	bf00      	nop
 800728e:	e7fd      	b.n	800728c <vTaskStartScheduler+0xb4>
}
 8007290:	bf00      	nop
 8007292:	3718      	adds	r7, #24
 8007294:	46bd      	mov	sp, r7
 8007296:	bd80      	pop	{r7, pc}
 8007298:	0800d5bc 	.word	0x0800d5bc
 800729c:	080079ad 	.word	0x080079ad
 80072a0:	24000f70 	.word	0x24000f70
 80072a4:	24000a78 	.word	0x24000a78
 80072a8:	24000020 	.word	0x24000020
 80072ac:	24000f6c 	.word	0x24000f6c
 80072b0:	24000f58 	.word	0x24000f58
 80072b4:	24000f50 	.word	0x24000f50

080072b8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80072b8:	b480      	push	{r7}
 80072ba:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80072bc:	4b04      	ldr	r3, [pc, #16]	@ (80072d0 <vTaskSuspendAll+0x18>)
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	3301      	adds	r3, #1
 80072c2:	4a03      	ldr	r2, [pc, #12]	@ (80072d0 <vTaskSuspendAll+0x18>)
 80072c4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80072c6:	bf00      	nop
 80072c8:	46bd      	mov	sp, r7
 80072ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ce:	4770      	bx	lr
 80072d0:	24000f74 	.word	0x24000f74

080072d4 <prvGetExpectedIdleTime>:
/*----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

	static TickType_t prvGetExpectedIdleTime( void )
	{
 80072d4:	b480      	push	{r7}
 80072d6:	b083      	sub	sp, #12
 80072d8:	af00      	add	r7, sp, #0
	TickType_t xReturn;
	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
 80072da:	2300      	movs	r3, #0
 80072dc:	603b      	str	r3, [r7, #0]
		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
		task that are in the Ready state, even though the idle task is
		running. */
		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
		{
			if( uxTopReadyPriority > tskIDLE_PRIORITY )
 80072de:	4b14      	ldr	r3, [pc, #80]	@ (8007330 <prvGetExpectedIdleTime+0x5c>)
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d001      	beq.n	80072ea <prvGetExpectedIdleTime+0x16>
			{
				uxHigherPriorityReadyTasks = pdTRUE;
 80072e6:	2301      	movs	r3, #1
 80072e8:	603b      	str	r3, [r7, #0]
				uxHigherPriorityReadyTasks = pdTRUE;
			}
		}
		#endif

		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 80072ea:	4b12      	ldr	r3, [pc, #72]	@ (8007334 <prvGetExpectedIdleTime+0x60>)
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d002      	beq.n	80072fa <prvGetExpectedIdleTime+0x26>
		{
			xReturn = 0;
 80072f4:	2300      	movs	r3, #0
 80072f6:	607b      	str	r3, [r7, #4]
 80072f8:	e012      	b.n	8007320 <prvGetExpectedIdleTime+0x4c>
		}
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 80072fa:	4b0f      	ldr	r3, [pc, #60]	@ (8007338 <prvGetExpectedIdleTime+0x64>)
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	2b01      	cmp	r3, #1
 8007300:	d902      	bls.n	8007308 <prvGetExpectedIdleTime+0x34>
		{
			/* There are other idle priority tasks in the ready state.  If
			time slicing is used then the very next tick interrupt must be
			processed. */
			xReturn = 0;
 8007302:	2300      	movs	r3, #0
 8007304:	607b      	str	r3, [r7, #4]
 8007306:	e00b      	b.n	8007320 <prvGetExpectedIdleTime+0x4c>
		}
		else if( uxHigherPriorityReadyTasks != pdFALSE )
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d002      	beq.n	8007314 <prvGetExpectedIdleTime+0x40>
		{
			/* There are tasks in the Ready state that have a priority above the
			idle priority.  This path can only be reached if
			configUSE_PREEMPTION is 0. */
			xReturn = 0;
 800730e:	2300      	movs	r3, #0
 8007310:	607b      	str	r3, [r7, #4]
 8007312:	e005      	b.n	8007320 <prvGetExpectedIdleTime+0x4c>
		}
		else
		{
			xReturn = xNextTaskUnblockTime - xTickCount;
 8007314:	4b09      	ldr	r3, [pc, #36]	@ (800733c <prvGetExpectedIdleTime+0x68>)
 8007316:	681a      	ldr	r2, [r3, #0]
 8007318:	4b09      	ldr	r3, [pc, #36]	@ (8007340 <prvGetExpectedIdleTime+0x6c>)
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	1ad3      	subs	r3, r2, r3
 800731e:	607b      	str	r3, [r7, #4]
		}

		return xReturn;
 8007320:	687b      	ldr	r3, [r7, #4]
	}
 8007322:	4618      	mov	r0, r3
 8007324:	370c      	adds	r7, #12
 8007326:	46bd      	mov	sp, r7
 8007328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732c:	4770      	bx	lr
 800732e:	bf00      	nop
 8007330:	24000f54 	.word	0x24000f54
 8007334:	24000a78 	.word	0x24000a78
 8007338:	24000a7c 	.word	0x24000a7c
 800733c:	24000f6c 	.word	0x24000f6c
 8007340:	24000f50 	.word	0x24000f50

08007344 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b084      	sub	sp, #16
 8007348:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800734a:	2300      	movs	r3, #0
 800734c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800734e:	2300      	movs	r3, #0
 8007350:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007352:	4b42      	ldr	r3, [pc, #264]	@ (800745c <xTaskResumeAll+0x118>)
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d10b      	bne.n	8007372 <xTaskResumeAll+0x2e>
	__asm volatile
 800735a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800735e:	f383 8811 	msr	BASEPRI, r3
 8007362:	f3bf 8f6f 	isb	sy
 8007366:	f3bf 8f4f 	dsb	sy
 800736a:	603b      	str	r3, [r7, #0]
}
 800736c:	bf00      	nop
 800736e:	bf00      	nop
 8007370:	e7fd      	b.n	800736e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007372:	f001 f9b9 	bl	80086e8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007376:	4b39      	ldr	r3, [pc, #228]	@ (800745c <xTaskResumeAll+0x118>)
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	3b01      	subs	r3, #1
 800737c:	4a37      	ldr	r2, [pc, #220]	@ (800745c <xTaskResumeAll+0x118>)
 800737e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007380:	4b36      	ldr	r3, [pc, #216]	@ (800745c <xTaskResumeAll+0x118>)
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d162      	bne.n	800744e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007388:	4b35      	ldr	r3, [pc, #212]	@ (8007460 <xTaskResumeAll+0x11c>)
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d05e      	beq.n	800744e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007390:	e02f      	b.n	80073f2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007392:	4b34      	ldr	r3, [pc, #208]	@ (8007464 <xTaskResumeAll+0x120>)
 8007394:	68db      	ldr	r3, [r3, #12]
 8007396:	68db      	ldr	r3, [r3, #12]
 8007398:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	3318      	adds	r3, #24
 800739e:	4618      	mov	r0, r3
 80073a0:	f7ff f802 	bl	80063a8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	3304      	adds	r3, #4
 80073a8:	4618      	mov	r0, r3
 80073aa:	f7fe fffd 	bl	80063a8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073b2:	4b2d      	ldr	r3, [pc, #180]	@ (8007468 <xTaskResumeAll+0x124>)
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	429a      	cmp	r2, r3
 80073b8:	d903      	bls.n	80073c2 <xTaskResumeAll+0x7e>
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073be:	4a2a      	ldr	r2, [pc, #168]	@ (8007468 <xTaskResumeAll+0x124>)
 80073c0:	6013      	str	r3, [r2, #0]
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073c6:	4613      	mov	r3, r2
 80073c8:	009b      	lsls	r3, r3, #2
 80073ca:	4413      	add	r3, r2
 80073cc:	009b      	lsls	r3, r3, #2
 80073ce:	4a27      	ldr	r2, [pc, #156]	@ (800746c <xTaskResumeAll+0x128>)
 80073d0:	441a      	add	r2, r3
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	3304      	adds	r3, #4
 80073d6:	4619      	mov	r1, r3
 80073d8:	4610      	mov	r0, r2
 80073da:	f7fe ff88 	bl	80062ee <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073e2:	4b23      	ldr	r3, [pc, #140]	@ (8007470 <xTaskResumeAll+0x12c>)
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073e8:	429a      	cmp	r2, r3
 80073ea:	d302      	bcc.n	80073f2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80073ec:	4b21      	ldr	r3, [pc, #132]	@ (8007474 <xTaskResumeAll+0x130>)
 80073ee:	2201      	movs	r2, #1
 80073f0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80073f2:	4b1c      	ldr	r3, [pc, #112]	@ (8007464 <xTaskResumeAll+0x120>)
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d1cb      	bne.n	8007392 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d001      	beq.n	8007404 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007400:	f000 fbe6 	bl	8007bd0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007404:	4b1c      	ldr	r3, [pc, #112]	@ (8007478 <xTaskResumeAll+0x134>)
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d010      	beq.n	8007432 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007410:	f000 f86e 	bl	80074f0 <xTaskIncrementTick>
 8007414:	4603      	mov	r3, r0
 8007416:	2b00      	cmp	r3, #0
 8007418:	d002      	beq.n	8007420 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800741a:	4b16      	ldr	r3, [pc, #88]	@ (8007474 <xTaskResumeAll+0x130>)
 800741c:	2201      	movs	r2, #1
 800741e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	3b01      	subs	r3, #1
 8007424:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d1f1      	bne.n	8007410 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800742c:	4b12      	ldr	r3, [pc, #72]	@ (8007478 <xTaskResumeAll+0x134>)
 800742e:	2200      	movs	r2, #0
 8007430:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007432:	4b10      	ldr	r3, [pc, #64]	@ (8007474 <xTaskResumeAll+0x130>)
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d009      	beq.n	800744e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800743a:	2301      	movs	r3, #1
 800743c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800743e:	4b0f      	ldr	r3, [pc, #60]	@ (800747c <xTaskResumeAll+0x138>)
 8007440:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007444:	601a      	str	r2, [r3, #0]
 8007446:	f3bf 8f4f 	dsb	sy
 800744a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800744e:	f001 f97d 	bl	800874c <vPortExitCritical>

	return xAlreadyYielded;
 8007452:	68bb      	ldr	r3, [r7, #8]
}
 8007454:	4618      	mov	r0, r3
 8007456:	3710      	adds	r7, #16
 8007458:	46bd      	mov	sp, r7
 800745a:	bd80      	pop	{r7, pc}
 800745c:	24000f74 	.word	0x24000f74
 8007460:	24000f4c 	.word	0x24000f4c
 8007464:	24000f0c 	.word	0x24000f0c
 8007468:	24000f54 	.word	0x24000f54
 800746c:	24000a7c 	.word	0x24000a7c
 8007470:	24000a78 	.word	0x24000a78
 8007474:	24000f60 	.word	0x24000f60
 8007478:	24000f5c 	.word	0x24000f5c
 800747c:	e000ed04 	.word	0xe000ed04

08007480 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007480:	b480      	push	{r7}
 8007482:	b083      	sub	sp, #12
 8007484:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007486:	4b05      	ldr	r3, [pc, #20]	@ (800749c <xTaskGetTickCount+0x1c>)
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800748c:	687b      	ldr	r3, [r7, #4]
}
 800748e:	4618      	mov	r0, r3
 8007490:	370c      	adds	r7, #12
 8007492:	46bd      	mov	sp, r7
 8007494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007498:	4770      	bx	lr
 800749a:	bf00      	nop
 800749c:	24000f50 	.word	0x24000f50

080074a0 <vTaskStepTick>:
implementations require configUSE_TICKLESS_IDLE to be set to a value other than
1. */
#if ( configUSE_TICKLESS_IDLE != 0 )

	void vTaskStepTick( const TickType_t xTicksToJump )
	{
 80074a0:	b480      	push	{r7}
 80074a2:	b085      	sub	sp, #20
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
		/* Correct the tick count value after a period during which the tick
		was suppressed.  Note this does *not* call the tick hook function for
		each stepped tick. */
		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
 80074a8:	4b0f      	ldr	r3, [pc, #60]	@ (80074e8 <vTaskStepTick+0x48>)
 80074aa:	681a      	ldr	r2, [r3, #0]
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	441a      	add	r2, r3
 80074b0:	4b0e      	ldr	r3, [pc, #56]	@ (80074ec <vTaskStepTick+0x4c>)
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	429a      	cmp	r2, r3
 80074b6:	d90b      	bls.n	80074d0 <vTaskStepTick+0x30>
	__asm volatile
 80074b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074bc:	f383 8811 	msr	BASEPRI, r3
 80074c0:	f3bf 8f6f 	isb	sy
 80074c4:	f3bf 8f4f 	dsb	sy
 80074c8:	60fb      	str	r3, [r7, #12]
}
 80074ca:	bf00      	nop
 80074cc:	bf00      	nop
 80074ce:	e7fd      	b.n	80074cc <vTaskStepTick+0x2c>
		xTickCount += xTicksToJump;
 80074d0:	4b05      	ldr	r3, [pc, #20]	@ (80074e8 <vTaskStepTick+0x48>)
 80074d2:	681a      	ldr	r2, [r3, #0]
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	4413      	add	r3, r2
 80074d8:	4a03      	ldr	r2, [pc, #12]	@ (80074e8 <vTaskStepTick+0x48>)
 80074da:	6013      	str	r3, [r2, #0]
		traceINCREASE_TICK_COUNT( xTicksToJump );
	}
 80074dc:	bf00      	nop
 80074de:	3714      	adds	r7, #20
 80074e0:	46bd      	mov	sp, r7
 80074e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e6:	4770      	bx	lr
 80074e8:	24000f50 	.word	0x24000f50
 80074ec:	24000f6c 	.word	0x24000f6c

080074f0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b086      	sub	sp, #24
 80074f4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80074f6:	2300      	movs	r3, #0
 80074f8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80074fa:	4b4f      	ldr	r3, [pc, #316]	@ (8007638 <xTaskIncrementTick+0x148>)
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	f040 8090 	bne.w	8007624 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007504:	4b4d      	ldr	r3, [pc, #308]	@ (800763c <xTaskIncrementTick+0x14c>)
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	3301      	adds	r3, #1
 800750a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800750c:	4a4b      	ldr	r2, [pc, #300]	@ (800763c <xTaskIncrementTick+0x14c>)
 800750e:	693b      	ldr	r3, [r7, #16]
 8007510:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007512:	693b      	ldr	r3, [r7, #16]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d121      	bne.n	800755c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007518:	4b49      	ldr	r3, [pc, #292]	@ (8007640 <xTaskIncrementTick+0x150>)
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d00b      	beq.n	800753a <xTaskIncrementTick+0x4a>
	__asm volatile
 8007522:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007526:	f383 8811 	msr	BASEPRI, r3
 800752a:	f3bf 8f6f 	isb	sy
 800752e:	f3bf 8f4f 	dsb	sy
 8007532:	603b      	str	r3, [r7, #0]
}
 8007534:	bf00      	nop
 8007536:	bf00      	nop
 8007538:	e7fd      	b.n	8007536 <xTaskIncrementTick+0x46>
 800753a:	4b41      	ldr	r3, [pc, #260]	@ (8007640 <xTaskIncrementTick+0x150>)
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	60fb      	str	r3, [r7, #12]
 8007540:	4b40      	ldr	r3, [pc, #256]	@ (8007644 <xTaskIncrementTick+0x154>)
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	4a3e      	ldr	r2, [pc, #248]	@ (8007640 <xTaskIncrementTick+0x150>)
 8007546:	6013      	str	r3, [r2, #0]
 8007548:	4a3e      	ldr	r2, [pc, #248]	@ (8007644 <xTaskIncrementTick+0x154>)
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	6013      	str	r3, [r2, #0]
 800754e:	4b3e      	ldr	r3, [pc, #248]	@ (8007648 <xTaskIncrementTick+0x158>)
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	3301      	adds	r3, #1
 8007554:	4a3c      	ldr	r2, [pc, #240]	@ (8007648 <xTaskIncrementTick+0x158>)
 8007556:	6013      	str	r3, [r2, #0]
 8007558:	f000 fb3a 	bl	8007bd0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800755c:	4b3b      	ldr	r3, [pc, #236]	@ (800764c <xTaskIncrementTick+0x15c>)
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	693a      	ldr	r2, [r7, #16]
 8007562:	429a      	cmp	r2, r3
 8007564:	d349      	bcc.n	80075fa <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007566:	4b36      	ldr	r3, [pc, #216]	@ (8007640 <xTaskIncrementTick+0x150>)
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d104      	bne.n	800757a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007570:	4b36      	ldr	r3, [pc, #216]	@ (800764c <xTaskIncrementTick+0x15c>)
 8007572:	f04f 32ff 	mov.w	r2, #4294967295
 8007576:	601a      	str	r2, [r3, #0]
					break;
 8007578:	e03f      	b.n	80075fa <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800757a:	4b31      	ldr	r3, [pc, #196]	@ (8007640 <xTaskIncrementTick+0x150>)
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	68db      	ldr	r3, [r3, #12]
 8007580:	68db      	ldr	r3, [r3, #12]
 8007582:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007584:	68bb      	ldr	r3, [r7, #8]
 8007586:	685b      	ldr	r3, [r3, #4]
 8007588:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800758a:	693a      	ldr	r2, [r7, #16]
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	429a      	cmp	r2, r3
 8007590:	d203      	bcs.n	800759a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007592:	4a2e      	ldr	r2, [pc, #184]	@ (800764c <xTaskIncrementTick+0x15c>)
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007598:	e02f      	b.n	80075fa <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800759a:	68bb      	ldr	r3, [r7, #8]
 800759c:	3304      	adds	r3, #4
 800759e:	4618      	mov	r0, r3
 80075a0:	f7fe ff02 	bl	80063a8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80075a4:	68bb      	ldr	r3, [r7, #8]
 80075a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d004      	beq.n	80075b6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80075ac:	68bb      	ldr	r3, [r7, #8]
 80075ae:	3318      	adds	r3, #24
 80075b0:	4618      	mov	r0, r3
 80075b2:	f7fe fef9 	bl	80063a8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80075b6:	68bb      	ldr	r3, [r7, #8]
 80075b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075ba:	4b25      	ldr	r3, [pc, #148]	@ (8007650 <xTaskIncrementTick+0x160>)
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	429a      	cmp	r2, r3
 80075c0:	d903      	bls.n	80075ca <xTaskIncrementTick+0xda>
 80075c2:	68bb      	ldr	r3, [r7, #8]
 80075c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075c6:	4a22      	ldr	r2, [pc, #136]	@ (8007650 <xTaskIncrementTick+0x160>)
 80075c8:	6013      	str	r3, [r2, #0]
 80075ca:	68bb      	ldr	r3, [r7, #8]
 80075cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075ce:	4613      	mov	r3, r2
 80075d0:	009b      	lsls	r3, r3, #2
 80075d2:	4413      	add	r3, r2
 80075d4:	009b      	lsls	r3, r3, #2
 80075d6:	4a1f      	ldr	r2, [pc, #124]	@ (8007654 <xTaskIncrementTick+0x164>)
 80075d8:	441a      	add	r2, r3
 80075da:	68bb      	ldr	r3, [r7, #8]
 80075dc:	3304      	adds	r3, #4
 80075de:	4619      	mov	r1, r3
 80075e0:	4610      	mov	r0, r2
 80075e2:	f7fe fe84 	bl	80062ee <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80075e6:	68bb      	ldr	r3, [r7, #8]
 80075e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075ea:	4b1b      	ldr	r3, [pc, #108]	@ (8007658 <xTaskIncrementTick+0x168>)
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075f0:	429a      	cmp	r2, r3
 80075f2:	d3b8      	bcc.n	8007566 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80075f4:	2301      	movs	r3, #1
 80075f6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80075f8:	e7b5      	b.n	8007566 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80075fa:	4b17      	ldr	r3, [pc, #92]	@ (8007658 <xTaskIncrementTick+0x168>)
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007600:	4914      	ldr	r1, [pc, #80]	@ (8007654 <xTaskIncrementTick+0x164>)
 8007602:	4613      	mov	r3, r2
 8007604:	009b      	lsls	r3, r3, #2
 8007606:	4413      	add	r3, r2
 8007608:	009b      	lsls	r3, r3, #2
 800760a:	440b      	add	r3, r1
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	2b01      	cmp	r3, #1
 8007610:	d901      	bls.n	8007616 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8007612:	2301      	movs	r3, #1
 8007614:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007616:	4b11      	ldr	r3, [pc, #68]	@ (800765c <xTaskIncrementTick+0x16c>)
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d007      	beq.n	800762e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800761e:	2301      	movs	r3, #1
 8007620:	617b      	str	r3, [r7, #20]
 8007622:	e004      	b.n	800762e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007624:	4b0e      	ldr	r3, [pc, #56]	@ (8007660 <xTaskIncrementTick+0x170>)
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	3301      	adds	r3, #1
 800762a:	4a0d      	ldr	r2, [pc, #52]	@ (8007660 <xTaskIncrementTick+0x170>)
 800762c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800762e:	697b      	ldr	r3, [r7, #20]
}
 8007630:	4618      	mov	r0, r3
 8007632:	3718      	adds	r7, #24
 8007634:	46bd      	mov	sp, r7
 8007636:	bd80      	pop	{r7, pc}
 8007638:	24000f74 	.word	0x24000f74
 800763c:	24000f50 	.word	0x24000f50
 8007640:	24000f04 	.word	0x24000f04
 8007644:	24000f08 	.word	0x24000f08
 8007648:	24000f64 	.word	0x24000f64
 800764c:	24000f6c 	.word	0x24000f6c
 8007650:	24000f54 	.word	0x24000f54
 8007654:	24000a7c 	.word	0x24000a7c
 8007658:	24000a78 	.word	0x24000a78
 800765c:	24000f60 	.word	0x24000f60
 8007660:	24000f5c 	.word	0x24000f5c

08007664 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007664:	b480      	push	{r7}
 8007666:	b085      	sub	sp, #20
 8007668:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800766a:	4b2b      	ldr	r3, [pc, #172]	@ (8007718 <vTaskSwitchContext+0xb4>)
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d003      	beq.n	800767a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007672:	4b2a      	ldr	r3, [pc, #168]	@ (800771c <vTaskSwitchContext+0xb8>)
 8007674:	2201      	movs	r2, #1
 8007676:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007678:	e047      	b.n	800770a <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800767a:	4b28      	ldr	r3, [pc, #160]	@ (800771c <vTaskSwitchContext+0xb8>)
 800767c:	2200      	movs	r2, #0
 800767e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007680:	4b27      	ldr	r3, [pc, #156]	@ (8007720 <vTaskSwitchContext+0xbc>)
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	60fb      	str	r3, [r7, #12]
 8007686:	e011      	b.n	80076ac <vTaskSwitchContext+0x48>
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d10b      	bne.n	80076a6 <vTaskSwitchContext+0x42>
	__asm volatile
 800768e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007692:	f383 8811 	msr	BASEPRI, r3
 8007696:	f3bf 8f6f 	isb	sy
 800769a:	f3bf 8f4f 	dsb	sy
 800769e:	607b      	str	r3, [r7, #4]
}
 80076a0:	bf00      	nop
 80076a2:	bf00      	nop
 80076a4:	e7fd      	b.n	80076a2 <vTaskSwitchContext+0x3e>
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	3b01      	subs	r3, #1
 80076aa:	60fb      	str	r3, [r7, #12]
 80076ac:	491d      	ldr	r1, [pc, #116]	@ (8007724 <vTaskSwitchContext+0xc0>)
 80076ae:	68fa      	ldr	r2, [r7, #12]
 80076b0:	4613      	mov	r3, r2
 80076b2:	009b      	lsls	r3, r3, #2
 80076b4:	4413      	add	r3, r2
 80076b6:	009b      	lsls	r3, r3, #2
 80076b8:	440b      	add	r3, r1
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d0e3      	beq.n	8007688 <vTaskSwitchContext+0x24>
 80076c0:	68fa      	ldr	r2, [r7, #12]
 80076c2:	4613      	mov	r3, r2
 80076c4:	009b      	lsls	r3, r3, #2
 80076c6:	4413      	add	r3, r2
 80076c8:	009b      	lsls	r3, r3, #2
 80076ca:	4a16      	ldr	r2, [pc, #88]	@ (8007724 <vTaskSwitchContext+0xc0>)
 80076cc:	4413      	add	r3, r2
 80076ce:	60bb      	str	r3, [r7, #8]
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	685b      	ldr	r3, [r3, #4]
 80076d4:	685a      	ldr	r2, [r3, #4]
 80076d6:	68bb      	ldr	r3, [r7, #8]
 80076d8:	605a      	str	r2, [r3, #4]
 80076da:	68bb      	ldr	r3, [r7, #8]
 80076dc:	685a      	ldr	r2, [r3, #4]
 80076de:	68bb      	ldr	r3, [r7, #8]
 80076e0:	3308      	adds	r3, #8
 80076e2:	429a      	cmp	r2, r3
 80076e4:	d104      	bne.n	80076f0 <vTaskSwitchContext+0x8c>
 80076e6:	68bb      	ldr	r3, [r7, #8]
 80076e8:	685b      	ldr	r3, [r3, #4]
 80076ea:	685a      	ldr	r2, [r3, #4]
 80076ec:	68bb      	ldr	r3, [r7, #8]
 80076ee:	605a      	str	r2, [r3, #4]
 80076f0:	68bb      	ldr	r3, [r7, #8]
 80076f2:	685b      	ldr	r3, [r3, #4]
 80076f4:	68db      	ldr	r3, [r3, #12]
 80076f6:	4a0c      	ldr	r2, [pc, #48]	@ (8007728 <vTaskSwitchContext+0xc4>)
 80076f8:	6013      	str	r3, [r2, #0]
 80076fa:	4a09      	ldr	r2, [pc, #36]	@ (8007720 <vTaskSwitchContext+0xbc>)
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007700:	4b09      	ldr	r3, [pc, #36]	@ (8007728 <vTaskSwitchContext+0xc4>)
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	3354      	adds	r3, #84	@ 0x54
 8007706:	4a09      	ldr	r2, [pc, #36]	@ (800772c <vTaskSwitchContext+0xc8>)
 8007708:	6013      	str	r3, [r2, #0]
}
 800770a:	bf00      	nop
 800770c:	3714      	adds	r7, #20
 800770e:	46bd      	mov	sp, r7
 8007710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007714:	4770      	bx	lr
 8007716:	bf00      	nop
 8007718:	24000f74 	.word	0x24000f74
 800771c:	24000f60 	.word	0x24000f60
 8007720:	24000f54 	.word	0x24000f54
 8007724:	24000a7c 	.word	0x24000a7c
 8007728:	24000a78 	.word	0x24000a78
 800772c:	24000020 	.word	0x24000020

08007730 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b084      	sub	sp, #16
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
 8007738:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d10b      	bne.n	8007758 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8007740:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007744:	f383 8811 	msr	BASEPRI, r3
 8007748:	f3bf 8f6f 	isb	sy
 800774c:	f3bf 8f4f 	dsb	sy
 8007750:	60fb      	str	r3, [r7, #12]
}
 8007752:	bf00      	nop
 8007754:	bf00      	nop
 8007756:	e7fd      	b.n	8007754 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007758:	4b07      	ldr	r3, [pc, #28]	@ (8007778 <vTaskPlaceOnEventList+0x48>)
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	3318      	adds	r3, #24
 800775e:	4619      	mov	r1, r3
 8007760:	6878      	ldr	r0, [r7, #4]
 8007762:	f7fe fde8 	bl	8006336 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007766:	2101      	movs	r1, #1
 8007768:	6838      	ldr	r0, [r7, #0]
 800776a:	f000 fadf 	bl	8007d2c <prvAddCurrentTaskToDelayedList>
}
 800776e:	bf00      	nop
 8007770:	3710      	adds	r7, #16
 8007772:	46bd      	mov	sp, r7
 8007774:	bd80      	pop	{r7, pc}
 8007776:	bf00      	nop
 8007778:	24000a78 	.word	0x24000a78

0800777c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800777c:	b580      	push	{r7, lr}
 800777e:	b086      	sub	sp, #24
 8007780:	af00      	add	r7, sp, #0
 8007782:	60f8      	str	r0, [r7, #12]
 8007784:	60b9      	str	r1, [r7, #8]
 8007786:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	2b00      	cmp	r3, #0
 800778c:	d10b      	bne.n	80077a6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800778e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007792:	f383 8811 	msr	BASEPRI, r3
 8007796:	f3bf 8f6f 	isb	sy
 800779a:	f3bf 8f4f 	dsb	sy
 800779e:	617b      	str	r3, [r7, #20]
}
 80077a0:	bf00      	nop
 80077a2:	bf00      	nop
 80077a4:	e7fd      	b.n	80077a2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80077a6:	4b0a      	ldr	r3, [pc, #40]	@ (80077d0 <vTaskPlaceOnEventListRestricted+0x54>)
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	3318      	adds	r3, #24
 80077ac:	4619      	mov	r1, r3
 80077ae:	68f8      	ldr	r0, [r7, #12]
 80077b0:	f7fe fd9d 	bl	80062ee <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d002      	beq.n	80077c0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80077ba:	f04f 33ff 	mov.w	r3, #4294967295
 80077be:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80077c0:	6879      	ldr	r1, [r7, #4]
 80077c2:	68b8      	ldr	r0, [r7, #8]
 80077c4:	f000 fab2 	bl	8007d2c <prvAddCurrentTaskToDelayedList>
	}
 80077c8:	bf00      	nop
 80077ca:	3718      	adds	r7, #24
 80077cc:	46bd      	mov	sp, r7
 80077ce:	bd80      	pop	{r7, pc}
 80077d0:	24000a78 	.word	0x24000a78

080077d4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b086      	sub	sp, #24
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	68db      	ldr	r3, [r3, #12]
 80077e0:	68db      	ldr	r3, [r3, #12]
 80077e2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80077e4:	693b      	ldr	r3, [r7, #16]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d10b      	bne.n	8007802 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80077ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077ee:	f383 8811 	msr	BASEPRI, r3
 80077f2:	f3bf 8f6f 	isb	sy
 80077f6:	f3bf 8f4f 	dsb	sy
 80077fa:	60fb      	str	r3, [r7, #12]
}
 80077fc:	bf00      	nop
 80077fe:	bf00      	nop
 8007800:	e7fd      	b.n	80077fe <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007802:	693b      	ldr	r3, [r7, #16]
 8007804:	3318      	adds	r3, #24
 8007806:	4618      	mov	r0, r3
 8007808:	f7fe fdce 	bl	80063a8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800780c:	4b1e      	ldr	r3, [pc, #120]	@ (8007888 <xTaskRemoveFromEventList+0xb4>)
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d11f      	bne.n	8007854 <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007814:	693b      	ldr	r3, [r7, #16]
 8007816:	3304      	adds	r3, #4
 8007818:	4618      	mov	r0, r3
 800781a:	f7fe fdc5 	bl	80063a8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800781e:	693b      	ldr	r3, [r7, #16]
 8007820:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007822:	4b1a      	ldr	r3, [pc, #104]	@ (800788c <xTaskRemoveFromEventList+0xb8>)
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	429a      	cmp	r2, r3
 8007828:	d903      	bls.n	8007832 <xTaskRemoveFromEventList+0x5e>
 800782a:	693b      	ldr	r3, [r7, #16]
 800782c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800782e:	4a17      	ldr	r2, [pc, #92]	@ (800788c <xTaskRemoveFromEventList+0xb8>)
 8007830:	6013      	str	r3, [r2, #0]
 8007832:	693b      	ldr	r3, [r7, #16]
 8007834:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007836:	4613      	mov	r3, r2
 8007838:	009b      	lsls	r3, r3, #2
 800783a:	4413      	add	r3, r2
 800783c:	009b      	lsls	r3, r3, #2
 800783e:	4a14      	ldr	r2, [pc, #80]	@ (8007890 <xTaskRemoveFromEventList+0xbc>)
 8007840:	441a      	add	r2, r3
 8007842:	693b      	ldr	r3, [r7, #16]
 8007844:	3304      	adds	r3, #4
 8007846:	4619      	mov	r1, r3
 8007848:	4610      	mov	r0, r2
 800784a:	f7fe fd50 	bl	80062ee <vListInsertEnd>
			normally left unchanged, because it is automatically reset to a new
			value when the tick count equals xNextTaskUnblockTime.  However if
			tickless idling is used it might be more important to enter sleep mode
			at the earliest possible time - so reset xNextTaskUnblockTime here to
			ensure it is updated at the earliest possible time. */
			prvResetNextTaskUnblockTime();
 800784e:	f000 f9bf 	bl	8007bd0 <prvResetNextTaskUnblockTime>
 8007852:	e005      	b.n	8007860 <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007854:	693b      	ldr	r3, [r7, #16]
 8007856:	3318      	adds	r3, #24
 8007858:	4619      	mov	r1, r3
 800785a:	480e      	ldr	r0, [pc, #56]	@ (8007894 <xTaskRemoveFromEventList+0xc0>)
 800785c:	f7fe fd47 	bl	80062ee <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007860:	693b      	ldr	r3, [r7, #16]
 8007862:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007864:	4b0c      	ldr	r3, [pc, #48]	@ (8007898 <xTaskRemoveFromEventList+0xc4>)
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800786a:	429a      	cmp	r2, r3
 800786c:	d905      	bls.n	800787a <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800786e:	2301      	movs	r3, #1
 8007870:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007872:	4b0a      	ldr	r3, [pc, #40]	@ (800789c <xTaskRemoveFromEventList+0xc8>)
 8007874:	2201      	movs	r2, #1
 8007876:	601a      	str	r2, [r3, #0]
 8007878:	e001      	b.n	800787e <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 800787a:	2300      	movs	r3, #0
 800787c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800787e:	697b      	ldr	r3, [r7, #20]
}
 8007880:	4618      	mov	r0, r3
 8007882:	3718      	adds	r7, #24
 8007884:	46bd      	mov	sp, r7
 8007886:	bd80      	pop	{r7, pc}
 8007888:	24000f74 	.word	0x24000f74
 800788c:	24000f54 	.word	0x24000f54
 8007890:	24000a7c 	.word	0x24000a7c
 8007894:	24000f0c 	.word	0x24000f0c
 8007898:	24000a78 	.word	0x24000a78
 800789c:	24000f60 	.word	0x24000f60

080078a0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80078a0:	b480      	push	{r7}
 80078a2:	b083      	sub	sp, #12
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80078a8:	4b06      	ldr	r3, [pc, #24]	@ (80078c4 <vTaskInternalSetTimeOutState+0x24>)
 80078aa:	681a      	ldr	r2, [r3, #0]
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80078b0:	4b05      	ldr	r3, [pc, #20]	@ (80078c8 <vTaskInternalSetTimeOutState+0x28>)
 80078b2:	681a      	ldr	r2, [r3, #0]
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	605a      	str	r2, [r3, #4]
}
 80078b8:	bf00      	nop
 80078ba:	370c      	adds	r7, #12
 80078bc:	46bd      	mov	sp, r7
 80078be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c2:	4770      	bx	lr
 80078c4:	24000f64 	.word	0x24000f64
 80078c8:	24000f50 	.word	0x24000f50

080078cc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b088      	sub	sp, #32
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
 80078d4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d10b      	bne.n	80078f4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80078dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078e0:	f383 8811 	msr	BASEPRI, r3
 80078e4:	f3bf 8f6f 	isb	sy
 80078e8:	f3bf 8f4f 	dsb	sy
 80078ec:	613b      	str	r3, [r7, #16]
}
 80078ee:	bf00      	nop
 80078f0:	bf00      	nop
 80078f2:	e7fd      	b.n	80078f0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d10b      	bne.n	8007912 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80078fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078fe:	f383 8811 	msr	BASEPRI, r3
 8007902:	f3bf 8f6f 	isb	sy
 8007906:	f3bf 8f4f 	dsb	sy
 800790a:	60fb      	str	r3, [r7, #12]
}
 800790c:	bf00      	nop
 800790e:	bf00      	nop
 8007910:	e7fd      	b.n	800790e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8007912:	f000 fee9 	bl	80086e8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007916:	4b1d      	ldr	r3, [pc, #116]	@ (800798c <xTaskCheckForTimeOut+0xc0>)
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	685b      	ldr	r3, [r3, #4]
 8007920:	69ba      	ldr	r2, [r7, #24]
 8007922:	1ad3      	subs	r3, r2, r3
 8007924:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800792e:	d102      	bne.n	8007936 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007930:	2300      	movs	r3, #0
 8007932:	61fb      	str	r3, [r7, #28]
 8007934:	e023      	b.n	800797e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681a      	ldr	r2, [r3, #0]
 800793a:	4b15      	ldr	r3, [pc, #84]	@ (8007990 <xTaskCheckForTimeOut+0xc4>)
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	429a      	cmp	r2, r3
 8007940:	d007      	beq.n	8007952 <xTaskCheckForTimeOut+0x86>
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	685b      	ldr	r3, [r3, #4]
 8007946:	69ba      	ldr	r2, [r7, #24]
 8007948:	429a      	cmp	r2, r3
 800794a:	d302      	bcc.n	8007952 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800794c:	2301      	movs	r3, #1
 800794e:	61fb      	str	r3, [r7, #28]
 8007950:	e015      	b.n	800797e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	697a      	ldr	r2, [r7, #20]
 8007958:	429a      	cmp	r2, r3
 800795a:	d20b      	bcs.n	8007974 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	681a      	ldr	r2, [r3, #0]
 8007960:	697b      	ldr	r3, [r7, #20]
 8007962:	1ad2      	subs	r2, r2, r3
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007968:	6878      	ldr	r0, [r7, #4]
 800796a:	f7ff ff99 	bl	80078a0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800796e:	2300      	movs	r3, #0
 8007970:	61fb      	str	r3, [r7, #28]
 8007972:	e004      	b.n	800797e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	2200      	movs	r2, #0
 8007978:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800797a:	2301      	movs	r3, #1
 800797c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800797e:	f000 fee5 	bl	800874c <vPortExitCritical>

	return xReturn;
 8007982:	69fb      	ldr	r3, [r7, #28]
}
 8007984:	4618      	mov	r0, r3
 8007986:	3720      	adds	r7, #32
 8007988:	46bd      	mov	sp, r7
 800798a:	bd80      	pop	{r7, pc}
 800798c:	24000f50 	.word	0x24000f50
 8007990:	24000f64 	.word	0x24000f64

08007994 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007994:	b480      	push	{r7}
 8007996:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007998:	4b03      	ldr	r3, [pc, #12]	@ (80079a8 <vTaskMissedYield+0x14>)
 800799a:	2201      	movs	r2, #1
 800799c:	601a      	str	r2, [r3, #0]
}
 800799e:	bf00      	nop
 80079a0:	46bd      	mov	sp, r7
 80079a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a6:	4770      	bx	lr
 80079a8:	24000f60 	.word	0x24000f60

080079ac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b084      	sub	sp, #16
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80079b4:	f000 f8a8 	bl	8007b08 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80079b8:	4b18      	ldr	r3, [pc, #96]	@ (8007a1c <prvIdleTask+0x70>)
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	2b01      	cmp	r3, #1
 80079be:	d907      	bls.n	80079d0 <prvIdleTask+0x24>
			{
				taskYIELD();
 80079c0:	4b17      	ldr	r3, [pc, #92]	@ (8007a20 <prvIdleTask+0x74>)
 80079c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80079c6:	601a      	str	r2, [r3, #0]
 80079c8:	f3bf 8f4f 	dsb	sy
 80079cc:	f3bf 8f6f 	isb	sy
			/* It is not desirable to suspend then resume the scheduler on
			each iteration of the idle task.  Therefore, a preliminary
			test of the expected idle time is performed without the
			scheduler suspended.  The result here is not necessarily
			valid. */
			xExpectedIdleTime = prvGetExpectedIdleTime();
 80079d0:	f7ff fc80 	bl	80072d4 <prvGetExpectedIdleTime>
 80079d4:	60f8      	str	r0, [r7, #12]

			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	2b01      	cmp	r3, #1
 80079da:	d9eb      	bls.n	80079b4 <prvIdleTask+0x8>
			{
				vTaskSuspendAll();
 80079dc:	f7ff fc6c 	bl	80072b8 <vTaskSuspendAll>
				{
					/* Now the scheduler is suspended, the expected idle
					time can be sampled again, and this time its value can
					be used. */
					configASSERT( xNextTaskUnblockTime >= xTickCount );
 80079e0:	4b10      	ldr	r3, [pc, #64]	@ (8007a24 <prvIdleTask+0x78>)
 80079e2:	681a      	ldr	r2, [r3, #0]
 80079e4:	4b10      	ldr	r3, [pc, #64]	@ (8007a28 <prvIdleTask+0x7c>)
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	429a      	cmp	r2, r3
 80079ea:	d20b      	bcs.n	8007a04 <prvIdleTask+0x58>
	__asm volatile
 80079ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079f0:	f383 8811 	msr	BASEPRI, r3
 80079f4:	f3bf 8f6f 	isb	sy
 80079f8:	f3bf 8f4f 	dsb	sy
 80079fc:	60bb      	str	r3, [r7, #8]
}
 80079fe:	bf00      	nop
 8007a00:	bf00      	nop
 8007a02:	e7fd      	b.n	8007a00 <prvIdleTask+0x54>
					xExpectedIdleTime = prvGetExpectedIdleTime();
 8007a04:	f7ff fc66 	bl	80072d4 <prvGetExpectedIdleTime>
 8007a08:	60f8      	str	r0, [r7, #12]
					/* Define the following macro to set xExpectedIdleTime to 0
					if the application does not want
					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );

					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	2b01      	cmp	r3, #1
 8007a0e:	d902      	bls.n	8007a16 <prvIdleTask+0x6a>
					{
						traceLOW_POWER_IDLE_BEGIN();
						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
 8007a10:	68f8      	ldr	r0, [r7, #12]
 8007a12:	f000 ff1b 	bl	800884c <vPortSuppressTicksAndSleep>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}
				( void ) xTaskResumeAll();
 8007a16:	f7ff fc95 	bl	8007344 <xTaskResumeAll>
		prvCheckTasksWaitingTermination();
 8007a1a:	e7cb      	b.n	80079b4 <prvIdleTask+0x8>
 8007a1c:	24000a7c 	.word	0x24000a7c
 8007a20:	e000ed04 	.word	0xe000ed04
 8007a24:	24000f6c 	.word	0x24000f6c
 8007a28:	24000f50 	.word	0x24000f50

08007a2c <eTaskConfirmSleepModeStatus>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE != 0 )

	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
	{
 8007a2c:	b480      	push	{r7}
 8007a2e:	b083      	sub	sp, #12
 8007a30:	af00      	add	r7, sp, #0
	/* The idle task exists in addition to the application tasks. */
	const UBaseType_t uxNonApplicationTasks = 1;
 8007a32:	2301      	movs	r3, #1
 8007a34:	603b      	str	r3, [r7, #0]
	eSleepModeStatus eReturn = eStandardSleep;
 8007a36:	2301      	movs	r3, #1
 8007a38:	71fb      	strb	r3, [r7, #7]

		/* This function must be called from a critical section. */

		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
 8007a3a:	4b0f      	ldr	r3, [pc, #60]	@ (8007a78 <eTaskConfirmSleepModeStatus+0x4c>)
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d002      	beq.n	8007a48 <eTaskConfirmSleepModeStatus+0x1c>
		{
			/* A task was made ready while the scheduler was suspended. */
			eReturn = eAbortSleep;
 8007a42:	2300      	movs	r3, #0
 8007a44:	71fb      	strb	r3, [r7, #7]
 8007a46:	e010      	b.n	8007a6a <eTaskConfirmSleepModeStatus+0x3e>
		}
		else if( xYieldPending != pdFALSE )
 8007a48:	4b0c      	ldr	r3, [pc, #48]	@ (8007a7c <eTaskConfirmSleepModeStatus+0x50>)
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d002      	beq.n	8007a56 <eTaskConfirmSleepModeStatus+0x2a>
		{
			/* A yield was pended while the scheduler was suspended. */
			eReturn = eAbortSleep;
 8007a50:	2300      	movs	r3, #0
 8007a52:	71fb      	strb	r3, [r7, #7]
 8007a54:	e009      	b.n	8007a6a <eTaskConfirmSleepModeStatus+0x3e>
		{
			/* If all the tasks are in the suspended list (which might mean they
			have an infinite block time rather than actually being suspended)
			then it is safe to turn all clocks off and just wait for external
			interrupts. */
			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicationTasks ) )
 8007a56:	4b0a      	ldr	r3, [pc, #40]	@ (8007a80 <eTaskConfirmSleepModeStatus+0x54>)
 8007a58:	681a      	ldr	r2, [r3, #0]
 8007a5a:	4b0a      	ldr	r3, [pc, #40]	@ (8007a84 <eTaskConfirmSleepModeStatus+0x58>)
 8007a5c:	6819      	ldr	r1, [r3, #0]
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	1acb      	subs	r3, r1, r3
 8007a62:	429a      	cmp	r2, r3
 8007a64:	d101      	bne.n	8007a6a <eTaskConfirmSleepModeStatus+0x3e>
			{
				eReturn = eNoTasksWaitingTimeout;
 8007a66:	2302      	movs	r3, #2
 8007a68:	71fb      	strb	r3, [r7, #7]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		return eReturn;
 8007a6a:	79fb      	ldrb	r3, [r7, #7]
	}
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	370c      	adds	r7, #12
 8007a70:	46bd      	mov	sp, r7
 8007a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a76:	4770      	bx	lr
 8007a78:	24000f0c 	.word	0x24000f0c
 8007a7c:	24000f60 	.word	0x24000f60
 8007a80:	24000f38 	.word	0x24000f38
 8007a84:	24000f4c 	.word	0x24000f4c

08007a88 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b082      	sub	sp, #8
 8007a8c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007a8e:	2300      	movs	r3, #0
 8007a90:	607b      	str	r3, [r7, #4]
 8007a92:	e00c      	b.n	8007aae <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007a94:	687a      	ldr	r2, [r7, #4]
 8007a96:	4613      	mov	r3, r2
 8007a98:	009b      	lsls	r3, r3, #2
 8007a9a:	4413      	add	r3, r2
 8007a9c:	009b      	lsls	r3, r3, #2
 8007a9e:	4a12      	ldr	r2, [pc, #72]	@ (8007ae8 <prvInitialiseTaskLists+0x60>)
 8007aa0:	4413      	add	r3, r2
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	f7fe fbf6 	bl	8006294 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	3301      	adds	r3, #1
 8007aac:	607b      	str	r3, [r7, #4]
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	2b37      	cmp	r3, #55	@ 0x37
 8007ab2:	d9ef      	bls.n	8007a94 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007ab4:	480d      	ldr	r0, [pc, #52]	@ (8007aec <prvInitialiseTaskLists+0x64>)
 8007ab6:	f7fe fbed 	bl	8006294 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007aba:	480d      	ldr	r0, [pc, #52]	@ (8007af0 <prvInitialiseTaskLists+0x68>)
 8007abc:	f7fe fbea 	bl	8006294 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007ac0:	480c      	ldr	r0, [pc, #48]	@ (8007af4 <prvInitialiseTaskLists+0x6c>)
 8007ac2:	f7fe fbe7 	bl	8006294 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007ac6:	480c      	ldr	r0, [pc, #48]	@ (8007af8 <prvInitialiseTaskLists+0x70>)
 8007ac8:	f7fe fbe4 	bl	8006294 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007acc:	480b      	ldr	r0, [pc, #44]	@ (8007afc <prvInitialiseTaskLists+0x74>)
 8007ace:	f7fe fbe1 	bl	8006294 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007ad2:	4b0b      	ldr	r3, [pc, #44]	@ (8007b00 <prvInitialiseTaskLists+0x78>)
 8007ad4:	4a05      	ldr	r2, [pc, #20]	@ (8007aec <prvInitialiseTaskLists+0x64>)
 8007ad6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007ad8:	4b0a      	ldr	r3, [pc, #40]	@ (8007b04 <prvInitialiseTaskLists+0x7c>)
 8007ada:	4a05      	ldr	r2, [pc, #20]	@ (8007af0 <prvInitialiseTaskLists+0x68>)
 8007adc:	601a      	str	r2, [r3, #0]
}
 8007ade:	bf00      	nop
 8007ae0:	3708      	adds	r7, #8
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	bd80      	pop	{r7, pc}
 8007ae6:	bf00      	nop
 8007ae8:	24000a7c 	.word	0x24000a7c
 8007aec:	24000edc 	.word	0x24000edc
 8007af0:	24000ef0 	.word	0x24000ef0
 8007af4:	24000f0c 	.word	0x24000f0c
 8007af8:	24000f20 	.word	0x24000f20
 8007afc:	24000f38 	.word	0x24000f38
 8007b00:	24000f04 	.word	0x24000f04
 8007b04:	24000f08 	.word	0x24000f08

08007b08 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b082      	sub	sp, #8
 8007b0c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007b0e:	e019      	b.n	8007b44 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007b10:	f000 fdea 	bl	80086e8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b14:	4b10      	ldr	r3, [pc, #64]	@ (8007b58 <prvCheckTasksWaitingTermination+0x50>)
 8007b16:	68db      	ldr	r3, [r3, #12]
 8007b18:	68db      	ldr	r3, [r3, #12]
 8007b1a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	3304      	adds	r3, #4
 8007b20:	4618      	mov	r0, r3
 8007b22:	f7fe fc41 	bl	80063a8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007b26:	4b0d      	ldr	r3, [pc, #52]	@ (8007b5c <prvCheckTasksWaitingTermination+0x54>)
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	3b01      	subs	r3, #1
 8007b2c:	4a0b      	ldr	r2, [pc, #44]	@ (8007b5c <prvCheckTasksWaitingTermination+0x54>)
 8007b2e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007b30:	4b0b      	ldr	r3, [pc, #44]	@ (8007b60 <prvCheckTasksWaitingTermination+0x58>)
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	3b01      	subs	r3, #1
 8007b36:	4a0a      	ldr	r2, [pc, #40]	@ (8007b60 <prvCheckTasksWaitingTermination+0x58>)
 8007b38:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007b3a:	f000 fe07 	bl	800874c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007b3e:	6878      	ldr	r0, [r7, #4]
 8007b40:	f000 f810 	bl	8007b64 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007b44:	4b06      	ldr	r3, [pc, #24]	@ (8007b60 <prvCheckTasksWaitingTermination+0x58>)
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d1e1      	bne.n	8007b10 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007b4c:	bf00      	nop
 8007b4e:	bf00      	nop
 8007b50:	3708      	adds	r7, #8
 8007b52:	46bd      	mov	sp, r7
 8007b54:	bd80      	pop	{r7, pc}
 8007b56:	bf00      	nop
 8007b58:	24000f20 	.word	0x24000f20
 8007b5c:	24000f4c 	.word	0x24000f4c
 8007b60:	24000f34 	.word	0x24000f34

08007b64 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b084      	sub	sp, #16
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	3354      	adds	r3, #84	@ 0x54
 8007b70:	4618      	mov	r0, r3
 8007b72:	f002 fa37 	bl	8009fe4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d108      	bne.n	8007b92 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b84:	4618      	mov	r0, r3
 8007b86:	f001 f883 	bl	8008c90 <vPortFree>
				vPortFree( pxTCB );
 8007b8a:	6878      	ldr	r0, [r7, #4]
 8007b8c:	f001 f880 	bl	8008c90 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007b90:	e019      	b.n	8007bc6 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007b98:	2b01      	cmp	r3, #1
 8007b9a:	d103      	bne.n	8007ba4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007b9c:	6878      	ldr	r0, [r7, #4]
 8007b9e:	f001 f877 	bl	8008c90 <vPortFree>
	}
 8007ba2:	e010      	b.n	8007bc6 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007baa:	2b02      	cmp	r3, #2
 8007bac:	d00b      	beq.n	8007bc6 <prvDeleteTCB+0x62>
	__asm volatile
 8007bae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bb2:	f383 8811 	msr	BASEPRI, r3
 8007bb6:	f3bf 8f6f 	isb	sy
 8007bba:	f3bf 8f4f 	dsb	sy
 8007bbe:	60fb      	str	r3, [r7, #12]
}
 8007bc0:	bf00      	nop
 8007bc2:	bf00      	nop
 8007bc4:	e7fd      	b.n	8007bc2 <prvDeleteTCB+0x5e>
	}
 8007bc6:	bf00      	nop
 8007bc8:	3710      	adds	r7, #16
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	bd80      	pop	{r7, pc}
	...

08007bd0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007bd0:	b480      	push	{r7}
 8007bd2:	b083      	sub	sp, #12
 8007bd4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007bd6:	4b0c      	ldr	r3, [pc, #48]	@ (8007c08 <prvResetNextTaskUnblockTime+0x38>)
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d104      	bne.n	8007bea <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007be0:	4b0a      	ldr	r3, [pc, #40]	@ (8007c0c <prvResetNextTaskUnblockTime+0x3c>)
 8007be2:	f04f 32ff 	mov.w	r2, #4294967295
 8007be6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007be8:	e008      	b.n	8007bfc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007bea:	4b07      	ldr	r3, [pc, #28]	@ (8007c08 <prvResetNextTaskUnblockTime+0x38>)
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	68db      	ldr	r3, [r3, #12]
 8007bf0:	68db      	ldr	r3, [r3, #12]
 8007bf2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	685b      	ldr	r3, [r3, #4]
 8007bf8:	4a04      	ldr	r2, [pc, #16]	@ (8007c0c <prvResetNextTaskUnblockTime+0x3c>)
 8007bfa:	6013      	str	r3, [r2, #0]
}
 8007bfc:	bf00      	nop
 8007bfe:	370c      	adds	r7, #12
 8007c00:	46bd      	mov	sp, r7
 8007c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c06:	4770      	bx	lr
 8007c08:	24000f04 	.word	0x24000f04
 8007c0c:	24000f6c 	.word	0x24000f6c

08007c10 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007c10:	b480      	push	{r7}
 8007c12:	b083      	sub	sp, #12
 8007c14:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007c16:	4b0b      	ldr	r3, [pc, #44]	@ (8007c44 <xTaskGetSchedulerState+0x34>)
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d102      	bne.n	8007c24 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007c1e:	2301      	movs	r3, #1
 8007c20:	607b      	str	r3, [r7, #4]
 8007c22:	e008      	b.n	8007c36 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007c24:	4b08      	ldr	r3, [pc, #32]	@ (8007c48 <xTaskGetSchedulerState+0x38>)
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d102      	bne.n	8007c32 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007c2c:	2302      	movs	r3, #2
 8007c2e:	607b      	str	r3, [r7, #4]
 8007c30:	e001      	b.n	8007c36 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007c32:	2300      	movs	r3, #0
 8007c34:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007c36:	687b      	ldr	r3, [r7, #4]
	}
 8007c38:	4618      	mov	r0, r3
 8007c3a:	370c      	adds	r7, #12
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c42:	4770      	bx	lr
 8007c44:	24000f58 	.word	0x24000f58
 8007c48:	24000f74 	.word	0x24000f74

08007c4c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b086      	sub	sp, #24
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007c58:	2300      	movs	r3, #0
 8007c5a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d058      	beq.n	8007d14 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007c62:	4b2f      	ldr	r3, [pc, #188]	@ (8007d20 <xTaskPriorityDisinherit+0xd4>)
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	693a      	ldr	r2, [r7, #16]
 8007c68:	429a      	cmp	r2, r3
 8007c6a:	d00b      	beq.n	8007c84 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8007c6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c70:	f383 8811 	msr	BASEPRI, r3
 8007c74:	f3bf 8f6f 	isb	sy
 8007c78:	f3bf 8f4f 	dsb	sy
 8007c7c:	60fb      	str	r3, [r7, #12]
}
 8007c7e:	bf00      	nop
 8007c80:	bf00      	nop
 8007c82:	e7fd      	b.n	8007c80 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007c84:	693b      	ldr	r3, [r7, #16]
 8007c86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d10b      	bne.n	8007ca4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8007c8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c90:	f383 8811 	msr	BASEPRI, r3
 8007c94:	f3bf 8f6f 	isb	sy
 8007c98:	f3bf 8f4f 	dsb	sy
 8007c9c:	60bb      	str	r3, [r7, #8]
}
 8007c9e:	bf00      	nop
 8007ca0:	bf00      	nop
 8007ca2:	e7fd      	b.n	8007ca0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8007ca4:	693b      	ldr	r3, [r7, #16]
 8007ca6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ca8:	1e5a      	subs	r2, r3, #1
 8007caa:	693b      	ldr	r3, [r7, #16]
 8007cac:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007cae:	693b      	ldr	r3, [r7, #16]
 8007cb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007cb2:	693b      	ldr	r3, [r7, #16]
 8007cb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007cb6:	429a      	cmp	r2, r3
 8007cb8:	d02c      	beq.n	8007d14 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007cba:	693b      	ldr	r3, [r7, #16]
 8007cbc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d128      	bne.n	8007d14 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007cc2:	693b      	ldr	r3, [r7, #16]
 8007cc4:	3304      	adds	r3, #4
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	f7fe fb6e 	bl	80063a8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007ccc:	693b      	ldr	r3, [r7, #16]
 8007cce:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007cd0:	693b      	ldr	r3, [r7, #16]
 8007cd2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007cd4:	693b      	ldr	r3, [r7, #16]
 8007cd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cd8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007cdc:	693b      	ldr	r3, [r7, #16]
 8007cde:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007ce0:	693b      	ldr	r3, [r7, #16]
 8007ce2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ce4:	4b0f      	ldr	r3, [pc, #60]	@ (8007d24 <xTaskPriorityDisinherit+0xd8>)
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	429a      	cmp	r2, r3
 8007cea:	d903      	bls.n	8007cf4 <xTaskPriorityDisinherit+0xa8>
 8007cec:	693b      	ldr	r3, [r7, #16]
 8007cee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cf0:	4a0c      	ldr	r2, [pc, #48]	@ (8007d24 <xTaskPriorityDisinherit+0xd8>)
 8007cf2:	6013      	str	r3, [r2, #0]
 8007cf4:	693b      	ldr	r3, [r7, #16]
 8007cf6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007cf8:	4613      	mov	r3, r2
 8007cfa:	009b      	lsls	r3, r3, #2
 8007cfc:	4413      	add	r3, r2
 8007cfe:	009b      	lsls	r3, r3, #2
 8007d00:	4a09      	ldr	r2, [pc, #36]	@ (8007d28 <xTaskPriorityDisinherit+0xdc>)
 8007d02:	441a      	add	r2, r3
 8007d04:	693b      	ldr	r3, [r7, #16]
 8007d06:	3304      	adds	r3, #4
 8007d08:	4619      	mov	r1, r3
 8007d0a:	4610      	mov	r0, r2
 8007d0c:	f7fe faef 	bl	80062ee <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007d10:	2301      	movs	r3, #1
 8007d12:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007d14:	697b      	ldr	r3, [r7, #20]
	}
 8007d16:	4618      	mov	r0, r3
 8007d18:	3718      	adds	r7, #24
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	bd80      	pop	{r7, pc}
 8007d1e:	bf00      	nop
 8007d20:	24000a78 	.word	0x24000a78
 8007d24:	24000f54 	.word	0x24000f54
 8007d28:	24000a7c 	.word	0x24000a7c

08007d2c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b084      	sub	sp, #16
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
 8007d34:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007d36:	4b21      	ldr	r3, [pc, #132]	@ (8007dbc <prvAddCurrentTaskToDelayedList+0x90>)
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007d3c:	4b20      	ldr	r3, [pc, #128]	@ (8007dc0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	3304      	adds	r3, #4
 8007d42:	4618      	mov	r0, r3
 8007d44:	f7fe fb30 	bl	80063a8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d4e:	d10a      	bne.n	8007d66 <prvAddCurrentTaskToDelayedList+0x3a>
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d007      	beq.n	8007d66 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007d56:	4b1a      	ldr	r3, [pc, #104]	@ (8007dc0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	3304      	adds	r3, #4
 8007d5c:	4619      	mov	r1, r3
 8007d5e:	4819      	ldr	r0, [pc, #100]	@ (8007dc4 <prvAddCurrentTaskToDelayedList+0x98>)
 8007d60:	f7fe fac5 	bl	80062ee <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007d64:	e026      	b.n	8007db4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007d66:	68fa      	ldr	r2, [r7, #12]
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	4413      	add	r3, r2
 8007d6c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007d6e:	4b14      	ldr	r3, [pc, #80]	@ (8007dc0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	68ba      	ldr	r2, [r7, #8]
 8007d74:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007d76:	68ba      	ldr	r2, [r7, #8]
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	429a      	cmp	r2, r3
 8007d7c:	d209      	bcs.n	8007d92 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007d7e:	4b12      	ldr	r3, [pc, #72]	@ (8007dc8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007d80:	681a      	ldr	r2, [r3, #0]
 8007d82:	4b0f      	ldr	r3, [pc, #60]	@ (8007dc0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	3304      	adds	r3, #4
 8007d88:	4619      	mov	r1, r3
 8007d8a:	4610      	mov	r0, r2
 8007d8c:	f7fe fad3 	bl	8006336 <vListInsert>
}
 8007d90:	e010      	b.n	8007db4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007d92:	4b0e      	ldr	r3, [pc, #56]	@ (8007dcc <prvAddCurrentTaskToDelayedList+0xa0>)
 8007d94:	681a      	ldr	r2, [r3, #0]
 8007d96:	4b0a      	ldr	r3, [pc, #40]	@ (8007dc0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	3304      	adds	r3, #4
 8007d9c:	4619      	mov	r1, r3
 8007d9e:	4610      	mov	r0, r2
 8007da0:	f7fe fac9 	bl	8006336 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007da4:	4b0a      	ldr	r3, [pc, #40]	@ (8007dd0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	68ba      	ldr	r2, [r7, #8]
 8007daa:	429a      	cmp	r2, r3
 8007dac:	d202      	bcs.n	8007db4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007dae:	4a08      	ldr	r2, [pc, #32]	@ (8007dd0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007db0:	68bb      	ldr	r3, [r7, #8]
 8007db2:	6013      	str	r3, [r2, #0]
}
 8007db4:	bf00      	nop
 8007db6:	3710      	adds	r7, #16
 8007db8:	46bd      	mov	sp, r7
 8007dba:	bd80      	pop	{r7, pc}
 8007dbc:	24000f50 	.word	0x24000f50
 8007dc0:	24000a78 	.word	0x24000a78
 8007dc4:	24000f38 	.word	0x24000f38
 8007dc8:	24000f08 	.word	0x24000f08
 8007dcc:	24000f04 	.word	0x24000f04
 8007dd0:	24000f6c 	.word	0x24000f6c

08007dd4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b08a      	sub	sp, #40	@ 0x28
 8007dd8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007dda:	2300      	movs	r3, #0
 8007ddc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007dde:	f000 fb13 	bl	8008408 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007de2:	4b1d      	ldr	r3, [pc, #116]	@ (8007e58 <xTimerCreateTimerTask+0x84>)
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d021      	beq.n	8007e2e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007dea:	2300      	movs	r3, #0
 8007dec:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007dee:	2300      	movs	r3, #0
 8007df0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007df2:	1d3a      	adds	r2, r7, #4
 8007df4:	f107 0108 	add.w	r1, r7, #8
 8007df8:	f107 030c 	add.w	r3, r7, #12
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	f7fe fa2f 	bl	8006260 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007e02:	6879      	ldr	r1, [r7, #4]
 8007e04:	68bb      	ldr	r3, [r7, #8]
 8007e06:	68fa      	ldr	r2, [r7, #12]
 8007e08:	9202      	str	r2, [sp, #8]
 8007e0a:	9301      	str	r3, [sp, #4]
 8007e0c:	2302      	movs	r3, #2
 8007e0e:	9300      	str	r3, [sp, #0]
 8007e10:	2300      	movs	r3, #0
 8007e12:	460a      	mov	r2, r1
 8007e14:	4911      	ldr	r1, [pc, #68]	@ (8007e5c <xTimerCreateTimerTask+0x88>)
 8007e16:	4812      	ldr	r0, [pc, #72]	@ (8007e60 <xTimerCreateTimerTask+0x8c>)
 8007e18:	f7fe ffea 	bl	8006df0 <xTaskCreateStatic>
 8007e1c:	4603      	mov	r3, r0
 8007e1e:	4a11      	ldr	r2, [pc, #68]	@ (8007e64 <xTimerCreateTimerTask+0x90>)
 8007e20:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007e22:	4b10      	ldr	r3, [pc, #64]	@ (8007e64 <xTimerCreateTimerTask+0x90>)
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d001      	beq.n	8007e2e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007e2a:	2301      	movs	r3, #1
 8007e2c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007e2e:	697b      	ldr	r3, [r7, #20]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d10b      	bne.n	8007e4c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8007e34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e38:	f383 8811 	msr	BASEPRI, r3
 8007e3c:	f3bf 8f6f 	isb	sy
 8007e40:	f3bf 8f4f 	dsb	sy
 8007e44:	613b      	str	r3, [r7, #16]
}
 8007e46:	bf00      	nop
 8007e48:	bf00      	nop
 8007e4a:	e7fd      	b.n	8007e48 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007e4c:	697b      	ldr	r3, [r7, #20]
}
 8007e4e:	4618      	mov	r0, r3
 8007e50:	3718      	adds	r7, #24
 8007e52:	46bd      	mov	sp, r7
 8007e54:	bd80      	pop	{r7, pc}
 8007e56:	bf00      	nop
 8007e58:	24000fa8 	.word	0x24000fa8
 8007e5c:	0800d5c4 	.word	0x0800d5c4
 8007e60:	08007fa1 	.word	0x08007fa1
 8007e64:	24000fac 	.word	0x24000fac

08007e68 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b08a      	sub	sp, #40	@ 0x28
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	60f8      	str	r0, [r7, #12]
 8007e70:	60b9      	str	r1, [r7, #8]
 8007e72:	607a      	str	r2, [r7, #4]
 8007e74:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007e76:	2300      	movs	r3, #0
 8007e78:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d10b      	bne.n	8007e98 <xTimerGenericCommand+0x30>
	__asm volatile
 8007e80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e84:	f383 8811 	msr	BASEPRI, r3
 8007e88:	f3bf 8f6f 	isb	sy
 8007e8c:	f3bf 8f4f 	dsb	sy
 8007e90:	623b      	str	r3, [r7, #32]
}
 8007e92:	bf00      	nop
 8007e94:	bf00      	nop
 8007e96:	e7fd      	b.n	8007e94 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007e98:	4b19      	ldr	r3, [pc, #100]	@ (8007f00 <xTimerGenericCommand+0x98>)
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d02a      	beq.n	8007ef6 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007ea0:	68bb      	ldr	r3, [r7, #8]
 8007ea2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007eac:	68bb      	ldr	r3, [r7, #8]
 8007eae:	2b05      	cmp	r3, #5
 8007eb0:	dc18      	bgt.n	8007ee4 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007eb2:	f7ff fead 	bl	8007c10 <xTaskGetSchedulerState>
 8007eb6:	4603      	mov	r3, r0
 8007eb8:	2b02      	cmp	r3, #2
 8007eba:	d109      	bne.n	8007ed0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007ebc:	4b10      	ldr	r3, [pc, #64]	@ (8007f00 <xTimerGenericCommand+0x98>)
 8007ebe:	6818      	ldr	r0, [r3, #0]
 8007ec0:	f107 0110 	add.w	r1, r7, #16
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007ec8:	f7fe fba2 	bl	8006610 <xQueueGenericSend>
 8007ecc:	6278      	str	r0, [r7, #36]	@ 0x24
 8007ece:	e012      	b.n	8007ef6 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007ed0:	4b0b      	ldr	r3, [pc, #44]	@ (8007f00 <xTimerGenericCommand+0x98>)
 8007ed2:	6818      	ldr	r0, [r3, #0]
 8007ed4:	f107 0110 	add.w	r1, r7, #16
 8007ed8:	2300      	movs	r3, #0
 8007eda:	2200      	movs	r2, #0
 8007edc:	f7fe fb98 	bl	8006610 <xQueueGenericSend>
 8007ee0:	6278      	str	r0, [r7, #36]	@ 0x24
 8007ee2:	e008      	b.n	8007ef6 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007ee4:	4b06      	ldr	r3, [pc, #24]	@ (8007f00 <xTimerGenericCommand+0x98>)
 8007ee6:	6818      	ldr	r0, [r3, #0]
 8007ee8:	f107 0110 	add.w	r1, r7, #16
 8007eec:	2300      	movs	r3, #0
 8007eee:	683a      	ldr	r2, [r7, #0]
 8007ef0:	f7fe fc90 	bl	8006814 <xQueueGenericSendFromISR>
 8007ef4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007ef8:	4618      	mov	r0, r3
 8007efa:	3728      	adds	r7, #40	@ 0x28
 8007efc:	46bd      	mov	sp, r7
 8007efe:	bd80      	pop	{r7, pc}
 8007f00:	24000fa8 	.word	0x24000fa8

08007f04 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b088      	sub	sp, #32
 8007f08:	af02      	add	r7, sp, #8
 8007f0a:	6078      	str	r0, [r7, #4]
 8007f0c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f0e:	4b23      	ldr	r3, [pc, #140]	@ (8007f9c <prvProcessExpiredTimer+0x98>)
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	68db      	ldr	r3, [r3, #12]
 8007f14:	68db      	ldr	r3, [r3, #12]
 8007f16:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007f18:	697b      	ldr	r3, [r7, #20]
 8007f1a:	3304      	adds	r3, #4
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	f7fe fa43 	bl	80063a8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007f22:	697b      	ldr	r3, [r7, #20]
 8007f24:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007f28:	f003 0304 	and.w	r3, r3, #4
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d023      	beq.n	8007f78 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007f30:	697b      	ldr	r3, [r7, #20]
 8007f32:	699a      	ldr	r2, [r3, #24]
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	18d1      	adds	r1, r2, r3
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	683a      	ldr	r2, [r7, #0]
 8007f3c:	6978      	ldr	r0, [r7, #20]
 8007f3e:	f000 f8d5 	bl	80080ec <prvInsertTimerInActiveList>
 8007f42:	4603      	mov	r3, r0
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d020      	beq.n	8007f8a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007f48:	2300      	movs	r3, #0
 8007f4a:	9300      	str	r3, [sp, #0]
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	687a      	ldr	r2, [r7, #4]
 8007f50:	2100      	movs	r1, #0
 8007f52:	6978      	ldr	r0, [r7, #20]
 8007f54:	f7ff ff88 	bl	8007e68 <xTimerGenericCommand>
 8007f58:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007f5a:	693b      	ldr	r3, [r7, #16]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d114      	bne.n	8007f8a <prvProcessExpiredTimer+0x86>
	__asm volatile
 8007f60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f64:	f383 8811 	msr	BASEPRI, r3
 8007f68:	f3bf 8f6f 	isb	sy
 8007f6c:	f3bf 8f4f 	dsb	sy
 8007f70:	60fb      	str	r3, [r7, #12]
}
 8007f72:	bf00      	nop
 8007f74:	bf00      	nop
 8007f76:	e7fd      	b.n	8007f74 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007f78:	697b      	ldr	r3, [r7, #20]
 8007f7a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007f7e:	f023 0301 	bic.w	r3, r3, #1
 8007f82:	b2da      	uxtb	r2, r3
 8007f84:	697b      	ldr	r3, [r7, #20]
 8007f86:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007f8a:	697b      	ldr	r3, [r7, #20]
 8007f8c:	6a1b      	ldr	r3, [r3, #32]
 8007f8e:	6978      	ldr	r0, [r7, #20]
 8007f90:	4798      	blx	r3
}
 8007f92:	bf00      	nop
 8007f94:	3718      	adds	r7, #24
 8007f96:	46bd      	mov	sp, r7
 8007f98:	bd80      	pop	{r7, pc}
 8007f9a:	bf00      	nop
 8007f9c:	24000fa0 	.word	0x24000fa0

08007fa0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b084      	sub	sp, #16
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007fa8:	f107 0308 	add.w	r3, r7, #8
 8007fac:	4618      	mov	r0, r3
 8007fae:	f000 f859 	bl	8008064 <prvGetNextExpireTime>
 8007fb2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007fb4:	68bb      	ldr	r3, [r7, #8]
 8007fb6:	4619      	mov	r1, r3
 8007fb8:	68f8      	ldr	r0, [r7, #12]
 8007fba:	f000 f805 	bl	8007fc8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007fbe:	f000 f8d7 	bl	8008170 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007fc2:	bf00      	nop
 8007fc4:	e7f0      	b.n	8007fa8 <prvTimerTask+0x8>
	...

08007fc8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b084      	sub	sp, #16
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
 8007fd0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007fd2:	f7ff f971 	bl	80072b8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007fd6:	f107 0308 	add.w	r3, r7, #8
 8007fda:	4618      	mov	r0, r3
 8007fdc:	f000 f866 	bl	80080ac <prvSampleTimeNow>
 8007fe0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007fe2:	68bb      	ldr	r3, [r7, #8]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d130      	bne.n	800804a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d10a      	bne.n	8008004 <prvProcessTimerOrBlockTask+0x3c>
 8007fee:	687a      	ldr	r2, [r7, #4]
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	429a      	cmp	r2, r3
 8007ff4:	d806      	bhi.n	8008004 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007ff6:	f7ff f9a5 	bl	8007344 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007ffa:	68f9      	ldr	r1, [r7, #12]
 8007ffc:	6878      	ldr	r0, [r7, #4]
 8007ffe:	f7ff ff81 	bl	8007f04 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008002:	e024      	b.n	800804e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008004:	683b      	ldr	r3, [r7, #0]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d008      	beq.n	800801c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800800a:	4b13      	ldr	r3, [pc, #76]	@ (8008058 <prvProcessTimerOrBlockTask+0x90>)
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d101      	bne.n	8008018 <prvProcessTimerOrBlockTask+0x50>
 8008014:	2301      	movs	r3, #1
 8008016:	e000      	b.n	800801a <prvProcessTimerOrBlockTask+0x52>
 8008018:	2300      	movs	r3, #0
 800801a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800801c:	4b0f      	ldr	r3, [pc, #60]	@ (800805c <prvProcessTimerOrBlockTask+0x94>)
 800801e:	6818      	ldr	r0, [r3, #0]
 8008020:	687a      	ldr	r2, [r7, #4]
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	1ad3      	subs	r3, r2, r3
 8008026:	683a      	ldr	r2, [r7, #0]
 8008028:	4619      	mov	r1, r3
 800802a:	f7fe fead 	bl	8006d88 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800802e:	f7ff f989 	bl	8007344 <xTaskResumeAll>
 8008032:	4603      	mov	r3, r0
 8008034:	2b00      	cmp	r3, #0
 8008036:	d10a      	bne.n	800804e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008038:	4b09      	ldr	r3, [pc, #36]	@ (8008060 <prvProcessTimerOrBlockTask+0x98>)
 800803a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800803e:	601a      	str	r2, [r3, #0]
 8008040:	f3bf 8f4f 	dsb	sy
 8008044:	f3bf 8f6f 	isb	sy
}
 8008048:	e001      	b.n	800804e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800804a:	f7ff f97b 	bl	8007344 <xTaskResumeAll>
}
 800804e:	bf00      	nop
 8008050:	3710      	adds	r7, #16
 8008052:	46bd      	mov	sp, r7
 8008054:	bd80      	pop	{r7, pc}
 8008056:	bf00      	nop
 8008058:	24000fa4 	.word	0x24000fa4
 800805c:	24000fa8 	.word	0x24000fa8
 8008060:	e000ed04 	.word	0xe000ed04

08008064 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008064:	b480      	push	{r7}
 8008066:	b085      	sub	sp, #20
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800806c:	4b0e      	ldr	r3, [pc, #56]	@ (80080a8 <prvGetNextExpireTime+0x44>)
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d101      	bne.n	800807a <prvGetNextExpireTime+0x16>
 8008076:	2201      	movs	r2, #1
 8008078:	e000      	b.n	800807c <prvGetNextExpireTime+0x18>
 800807a:	2200      	movs	r2, #0
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	2b00      	cmp	r3, #0
 8008086:	d105      	bne.n	8008094 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008088:	4b07      	ldr	r3, [pc, #28]	@ (80080a8 <prvGetNextExpireTime+0x44>)
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	68db      	ldr	r3, [r3, #12]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	60fb      	str	r3, [r7, #12]
 8008092:	e001      	b.n	8008098 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008094:	2300      	movs	r3, #0
 8008096:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008098:	68fb      	ldr	r3, [r7, #12]
}
 800809a:	4618      	mov	r0, r3
 800809c:	3714      	adds	r7, #20
 800809e:	46bd      	mov	sp, r7
 80080a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a4:	4770      	bx	lr
 80080a6:	bf00      	nop
 80080a8:	24000fa0 	.word	0x24000fa0

080080ac <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b084      	sub	sp, #16
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80080b4:	f7ff f9e4 	bl	8007480 <xTaskGetTickCount>
 80080b8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80080ba:	4b0b      	ldr	r3, [pc, #44]	@ (80080e8 <prvSampleTimeNow+0x3c>)
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	68fa      	ldr	r2, [r7, #12]
 80080c0:	429a      	cmp	r2, r3
 80080c2:	d205      	bcs.n	80080d0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80080c4:	f000 f93a 	bl	800833c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2201      	movs	r2, #1
 80080cc:	601a      	str	r2, [r3, #0]
 80080ce:	e002      	b.n	80080d6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2200      	movs	r2, #0
 80080d4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80080d6:	4a04      	ldr	r2, [pc, #16]	@ (80080e8 <prvSampleTimeNow+0x3c>)
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80080dc:	68fb      	ldr	r3, [r7, #12]
}
 80080de:	4618      	mov	r0, r3
 80080e0:	3710      	adds	r7, #16
 80080e2:	46bd      	mov	sp, r7
 80080e4:	bd80      	pop	{r7, pc}
 80080e6:	bf00      	nop
 80080e8:	24000fb0 	.word	0x24000fb0

080080ec <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b086      	sub	sp, #24
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	60f8      	str	r0, [r7, #12]
 80080f4:	60b9      	str	r1, [r7, #8]
 80080f6:	607a      	str	r2, [r7, #4]
 80080f8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80080fa:	2300      	movs	r3, #0
 80080fc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	68ba      	ldr	r2, [r7, #8]
 8008102:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	68fa      	ldr	r2, [r7, #12]
 8008108:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800810a:	68ba      	ldr	r2, [r7, #8]
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	429a      	cmp	r2, r3
 8008110:	d812      	bhi.n	8008138 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008112:	687a      	ldr	r2, [r7, #4]
 8008114:	683b      	ldr	r3, [r7, #0]
 8008116:	1ad2      	subs	r2, r2, r3
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	699b      	ldr	r3, [r3, #24]
 800811c:	429a      	cmp	r2, r3
 800811e:	d302      	bcc.n	8008126 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008120:	2301      	movs	r3, #1
 8008122:	617b      	str	r3, [r7, #20]
 8008124:	e01b      	b.n	800815e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008126:	4b10      	ldr	r3, [pc, #64]	@ (8008168 <prvInsertTimerInActiveList+0x7c>)
 8008128:	681a      	ldr	r2, [r3, #0]
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	3304      	adds	r3, #4
 800812e:	4619      	mov	r1, r3
 8008130:	4610      	mov	r0, r2
 8008132:	f7fe f900 	bl	8006336 <vListInsert>
 8008136:	e012      	b.n	800815e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008138:	687a      	ldr	r2, [r7, #4]
 800813a:	683b      	ldr	r3, [r7, #0]
 800813c:	429a      	cmp	r2, r3
 800813e:	d206      	bcs.n	800814e <prvInsertTimerInActiveList+0x62>
 8008140:	68ba      	ldr	r2, [r7, #8]
 8008142:	683b      	ldr	r3, [r7, #0]
 8008144:	429a      	cmp	r2, r3
 8008146:	d302      	bcc.n	800814e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008148:	2301      	movs	r3, #1
 800814a:	617b      	str	r3, [r7, #20]
 800814c:	e007      	b.n	800815e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800814e:	4b07      	ldr	r3, [pc, #28]	@ (800816c <prvInsertTimerInActiveList+0x80>)
 8008150:	681a      	ldr	r2, [r3, #0]
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	3304      	adds	r3, #4
 8008156:	4619      	mov	r1, r3
 8008158:	4610      	mov	r0, r2
 800815a:	f7fe f8ec 	bl	8006336 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800815e:	697b      	ldr	r3, [r7, #20]
}
 8008160:	4618      	mov	r0, r3
 8008162:	3718      	adds	r7, #24
 8008164:	46bd      	mov	sp, r7
 8008166:	bd80      	pop	{r7, pc}
 8008168:	24000fa4 	.word	0x24000fa4
 800816c:	24000fa0 	.word	0x24000fa0

08008170 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b08e      	sub	sp, #56	@ 0x38
 8008174:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008176:	e0ce      	b.n	8008316 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2b00      	cmp	r3, #0
 800817c:	da19      	bge.n	80081b2 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800817e:	1d3b      	adds	r3, r7, #4
 8008180:	3304      	adds	r3, #4
 8008182:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008184:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008186:	2b00      	cmp	r3, #0
 8008188:	d10b      	bne.n	80081a2 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800818a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800818e:	f383 8811 	msr	BASEPRI, r3
 8008192:	f3bf 8f6f 	isb	sy
 8008196:	f3bf 8f4f 	dsb	sy
 800819a:	61fb      	str	r3, [r7, #28]
}
 800819c:	bf00      	nop
 800819e:	bf00      	nop
 80081a0:	e7fd      	b.n	800819e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80081a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80081a8:	6850      	ldr	r0, [r2, #4]
 80081aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80081ac:	6892      	ldr	r2, [r2, #8]
 80081ae:	4611      	mov	r1, r2
 80081b0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	f2c0 80ae 	blt.w	8008316 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80081be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081c0:	695b      	ldr	r3, [r3, #20]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d004      	beq.n	80081d0 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80081c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081c8:	3304      	adds	r3, #4
 80081ca:	4618      	mov	r0, r3
 80081cc:	f7fe f8ec 	bl	80063a8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80081d0:	463b      	mov	r3, r7
 80081d2:	4618      	mov	r0, r3
 80081d4:	f7ff ff6a 	bl	80080ac <prvSampleTimeNow>
 80081d8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	2b09      	cmp	r3, #9
 80081de:	f200 8097 	bhi.w	8008310 <prvProcessReceivedCommands+0x1a0>
 80081e2:	a201      	add	r2, pc, #4	@ (adr r2, 80081e8 <prvProcessReceivedCommands+0x78>)
 80081e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081e8:	08008211 	.word	0x08008211
 80081ec:	08008211 	.word	0x08008211
 80081f0:	08008211 	.word	0x08008211
 80081f4:	08008287 	.word	0x08008287
 80081f8:	0800829b 	.word	0x0800829b
 80081fc:	080082e7 	.word	0x080082e7
 8008200:	08008211 	.word	0x08008211
 8008204:	08008211 	.word	0x08008211
 8008208:	08008287 	.word	0x08008287
 800820c:	0800829b 	.word	0x0800829b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008210:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008212:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008216:	f043 0301 	orr.w	r3, r3, #1
 800821a:	b2da      	uxtb	r2, r3
 800821c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800821e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008222:	68ba      	ldr	r2, [r7, #8]
 8008224:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008226:	699b      	ldr	r3, [r3, #24]
 8008228:	18d1      	adds	r1, r2, r3
 800822a:	68bb      	ldr	r3, [r7, #8]
 800822c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800822e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008230:	f7ff ff5c 	bl	80080ec <prvInsertTimerInActiveList>
 8008234:	4603      	mov	r3, r0
 8008236:	2b00      	cmp	r3, #0
 8008238:	d06c      	beq.n	8008314 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800823a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800823c:	6a1b      	ldr	r3, [r3, #32]
 800823e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008240:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008242:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008244:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008248:	f003 0304 	and.w	r3, r3, #4
 800824c:	2b00      	cmp	r3, #0
 800824e:	d061      	beq.n	8008314 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008250:	68ba      	ldr	r2, [r7, #8]
 8008252:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008254:	699b      	ldr	r3, [r3, #24]
 8008256:	441a      	add	r2, r3
 8008258:	2300      	movs	r3, #0
 800825a:	9300      	str	r3, [sp, #0]
 800825c:	2300      	movs	r3, #0
 800825e:	2100      	movs	r1, #0
 8008260:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008262:	f7ff fe01 	bl	8007e68 <xTimerGenericCommand>
 8008266:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008268:	6a3b      	ldr	r3, [r7, #32]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d152      	bne.n	8008314 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800826e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008272:	f383 8811 	msr	BASEPRI, r3
 8008276:	f3bf 8f6f 	isb	sy
 800827a:	f3bf 8f4f 	dsb	sy
 800827e:	61bb      	str	r3, [r7, #24]
}
 8008280:	bf00      	nop
 8008282:	bf00      	nop
 8008284:	e7fd      	b.n	8008282 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008286:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008288:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800828c:	f023 0301 	bic.w	r3, r3, #1
 8008290:	b2da      	uxtb	r2, r3
 8008292:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008294:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008298:	e03d      	b.n	8008316 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800829a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800829c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80082a0:	f043 0301 	orr.w	r3, r3, #1
 80082a4:	b2da      	uxtb	r2, r3
 80082a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082a8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80082ac:	68ba      	ldr	r2, [r7, #8]
 80082ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082b0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80082b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082b4:	699b      	ldr	r3, [r3, #24]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d10b      	bne.n	80082d2 <prvProcessReceivedCommands+0x162>
	__asm volatile
 80082ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082be:	f383 8811 	msr	BASEPRI, r3
 80082c2:	f3bf 8f6f 	isb	sy
 80082c6:	f3bf 8f4f 	dsb	sy
 80082ca:	617b      	str	r3, [r7, #20]
}
 80082cc:	bf00      	nop
 80082ce:	bf00      	nop
 80082d0:	e7fd      	b.n	80082ce <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80082d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082d4:	699a      	ldr	r2, [r3, #24]
 80082d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082d8:	18d1      	adds	r1, r2, r3
 80082da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80082de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80082e0:	f7ff ff04 	bl	80080ec <prvInsertTimerInActiveList>
					break;
 80082e4:	e017      	b.n	8008316 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80082e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082e8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80082ec:	f003 0302 	and.w	r3, r3, #2
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d103      	bne.n	80082fc <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80082f4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80082f6:	f000 fccb 	bl	8008c90 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80082fa:	e00c      	b.n	8008316 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80082fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082fe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008302:	f023 0301 	bic.w	r3, r3, #1
 8008306:	b2da      	uxtb	r2, r3
 8008308:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800830a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800830e:	e002      	b.n	8008316 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8008310:	bf00      	nop
 8008312:	e000      	b.n	8008316 <prvProcessReceivedCommands+0x1a6>
					break;
 8008314:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008316:	4b08      	ldr	r3, [pc, #32]	@ (8008338 <prvProcessReceivedCommands+0x1c8>)
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	1d39      	adds	r1, r7, #4
 800831c:	2200      	movs	r2, #0
 800831e:	4618      	mov	r0, r3
 8008320:	f7fe fb16 	bl	8006950 <xQueueReceive>
 8008324:	4603      	mov	r3, r0
 8008326:	2b00      	cmp	r3, #0
 8008328:	f47f af26 	bne.w	8008178 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800832c:	bf00      	nop
 800832e:	bf00      	nop
 8008330:	3730      	adds	r7, #48	@ 0x30
 8008332:	46bd      	mov	sp, r7
 8008334:	bd80      	pop	{r7, pc}
 8008336:	bf00      	nop
 8008338:	24000fa8 	.word	0x24000fa8

0800833c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800833c:	b580      	push	{r7, lr}
 800833e:	b088      	sub	sp, #32
 8008340:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008342:	e049      	b.n	80083d8 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008344:	4b2e      	ldr	r3, [pc, #184]	@ (8008400 <prvSwitchTimerLists+0xc4>)
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	68db      	ldr	r3, [r3, #12]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800834e:	4b2c      	ldr	r3, [pc, #176]	@ (8008400 <prvSwitchTimerLists+0xc4>)
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	68db      	ldr	r3, [r3, #12]
 8008354:	68db      	ldr	r3, [r3, #12]
 8008356:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	3304      	adds	r3, #4
 800835c:	4618      	mov	r0, r3
 800835e:	f7fe f823 	bl	80063a8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	6a1b      	ldr	r3, [r3, #32]
 8008366:	68f8      	ldr	r0, [r7, #12]
 8008368:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008370:	f003 0304 	and.w	r3, r3, #4
 8008374:	2b00      	cmp	r3, #0
 8008376:	d02f      	beq.n	80083d8 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	699b      	ldr	r3, [r3, #24]
 800837c:	693a      	ldr	r2, [r7, #16]
 800837e:	4413      	add	r3, r2
 8008380:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008382:	68ba      	ldr	r2, [r7, #8]
 8008384:	693b      	ldr	r3, [r7, #16]
 8008386:	429a      	cmp	r2, r3
 8008388:	d90e      	bls.n	80083a8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	68ba      	ldr	r2, [r7, #8]
 800838e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	68fa      	ldr	r2, [r7, #12]
 8008394:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008396:	4b1a      	ldr	r3, [pc, #104]	@ (8008400 <prvSwitchTimerLists+0xc4>)
 8008398:	681a      	ldr	r2, [r3, #0]
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	3304      	adds	r3, #4
 800839e:	4619      	mov	r1, r3
 80083a0:	4610      	mov	r0, r2
 80083a2:	f7fd ffc8 	bl	8006336 <vListInsert>
 80083a6:	e017      	b.n	80083d8 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80083a8:	2300      	movs	r3, #0
 80083aa:	9300      	str	r3, [sp, #0]
 80083ac:	2300      	movs	r3, #0
 80083ae:	693a      	ldr	r2, [r7, #16]
 80083b0:	2100      	movs	r1, #0
 80083b2:	68f8      	ldr	r0, [r7, #12]
 80083b4:	f7ff fd58 	bl	8007e68 <xTimerGenericCommand>
 80083b8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d10b      	bne.n	80083d8 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80083c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083c4:	f383 8811 	msr	BASEPRI, r3
 80083c8:	f3bf 8f6f 	isb	sy
 80083cc:	f3bf 8f4f 	dsb	sy
 80083d0:	603b      	str	r3, [r7, #0]
}
 80083d2:	bf00      	nop
 80083d4:	bf00      	nop
 80083d6:	e7fd      	b.n	80083d4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80083d8:	4b09      	ldr	r3, [pc, #36]	@ (8008400 <prvSwitchTimerLists+0xc4>)
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d1b0      	bne.n	8008344 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80083e2:	4b07      	ldr	r3, [pc, #28]	@ (8008400 <prvSwitchTimerLists+0xc4>)
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80083e8:	4b06      	ldr	r3, [pc, #24]	@ (8008404 <prvSwitchTimerLists+0xc8>)
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	4a04      	ldr	r2, [pc, #16]	@ (8008400 <prvSwitchTimerLists+0xc4>)
 80083ee:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80083f0:	4a04      	ldr	r2, [pc, #16]	@ (8008404 <prvSwitchTimerLists+0xc8>)
 80083f2:	697b      	ldr	r3, [r7, #20]
 80083f4:	6013      	str	r3, [r2, #0]
}
 80083f6:	bf00      	nop
 80083f8:	3718      	adds	r7, #24
 80083fa:	46bd      	mov	sp, r7
 80083fc:	bd80      	pop	{r7, pc}
 80083fe:	bf00      	nop
 8008400:	24000fa0 	.word	0x24000fa0
 8008404:	24000fa4 	.word	0x24000fa4

08008408 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008408:	b580      	push	{r7, lr}
 800840a:	b082      	sub	sp, #8
 800840c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800840e:	f000 f96b 	bl	80086e8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008412:	4b15      	ldr	r3, [pc, #84]	@ (8008468 <prvCheckForValidListAndQueue+0x60>)
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d120      	bne.n	800845c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800841a:	4814      	ldr	r0, [pc, #80]	@ (800846c <prvCheckForValidListAndQueue+0x64>)
 800841c:	f7fd ff3a 	bl	8006294 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008420:	4813      	ldr	r0, [pc, #76]	@ (8008470 <prvCheckForValidListAndQueue+0x68>)
 8008422:	f7fd ff37 	bl	8006294 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008426:	4b13      	ldr	r3, [pc, #76]	@ (8008474 <prvCheckForValidListAndQueue+0x6c>)
 8008428:	4a10      	ldr	r2, [pc, #64]	@ (800846c <prvCheckForValidListAndQueue+0x64>)
 800842a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800842c:	4b12      	ldr	r3, [pc, #72]	@ (8008478 <prvCheckForValidListAndQueue+0x70>)
 800842e:	4a10      	ldr	r2, [pc, #64]	@ (8008470 <prvCheckForValidListAndQueue+0x68>)
 8008430:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008432:	2300      	movs	r3, #0
 8008434:	9300      	str	r3, [sp, #0]
 8008436:	4b11      	ldr	r3, [pc, #68]	@ (800847c <prvCheckForValidListAndQueue+0x74>)
 8008438:	4a11      	ldr	r2, [pc, #68]	@ (8008480 <prvCheckForValidListAndQueue+0x78>)
 800843a:	2110      	movs	r1, #16
 800843c:	200a      	movs	r0, #10
 800843e:	f7fe f847 	bl	80064d0 <xQueueGenericCreateStatic>
 8008442:	4603      	mov	r3, r0
 8008444:	4a08      	ldr	r2, [pc, #32]	@ (8008468 <prvCheckForValidListAndQueue+0x60>)
 8008446:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008448:	4b07      	ldr	r3, [pc, #28]	@ (8008468 <prvCheckForValidListAndQueue+0x60>)
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	2b00      	cmp	r3, #0
 800844e:	d005      	beq.n	800845c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008450:	4b05      	ldr	r3, [pc, #20]	@ (8008468 <prvCheckForValidListAndQueue+0x60>)
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	490b      	ldr	r1, [pc, #44]	@ (8008484 <prvCheckForValidListAndQueue+0x7c>)
 8008456:	4618      	mov	r0, r3
 8008458:	f7fe fc6c 	bl	8006d34 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800845c:	f000 f976 	bl	800874c <vPortExitCritical>
}
 8008460:	bf00      	nop
 8008462:	46bd      	mov	sp, r7
 8008464:	bd80      	pop	{r7, pc}
 8008466:	bf00      	nop
 8008468:	24000fa8 	.word	0x24000fa8
 800846c:	24000f78 	.word	0x24000f78
 8008470:	24000f8c 	.word	0x24000f8c
 8008474:	24000fa0 	.word	0x24000fa0
 8008478:	24000fa4 	.word	0x24000fa4
 800847c:	24001054 	.word	0x24001054
 8008480:	24000fb4 	.word	0x24000fb4
 8008484:	0800d5cc 	.word	0x0800d5cc

08008488 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008488:	b480      	push	{r7}
 800848a:	b085      	sub	sp, #20
 800848c:	af00      	add	r7, sp, #0
 800848e:	60f8      	str	r0, [r7, #12]
 8008490:	60b9      	str	r1, [r7, #8]
 8008492:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	3b04      	subs	r3, #4
 8008498:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80084a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	3b04      	subs	r3, #4
 80084a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80084a8:	68bb      	ldr	r3, [r7, #8]
 80084aa:	f023 0201 	bic.w	r2, r3, #1
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	3b04      	subs	r3, #4
 80084b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80084b8:	4a0c      	ldr	r2, [pc, #48]	@ (80084ec <pxPortInitialiseStack+0x64>)
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	3b14      	subs	r3, #20
 80084c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80084c4:	687a      	ldr	r2, [r7, #4]
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	3b04      	subs	r3, #4
 80084ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	f06f 0202 	mvn.w	r2, #2
 80084d6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	3b20      	subs	r3, #32
 80084dc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80084de:	68fb      	ldr	r3, [r7, #12]
}
 80084e0:	4618      	mov	r0, r3
 80084e2:	3714      	adds	r7, #20
 80084e4:	46bd      	mov	sp, r7
 80084e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ea:	4770      	bx	lr
 80084ec:	080084f1 	.word	0x080084f1

080084f0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80084f0:	b480      	push	{r7}
 80084f2:	b085      	sub	sp, #20
 80084f4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80084f6:	2300      	movs	r3, #0
 80084f8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80084fa:	4b13      	ldr	r3, [pc, #76]	@ (8008548 <prvTaskExitError+0x58>)
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008502:	d00b      	beq.n	800851c <prvTaskExitError+0x2c>
	__asm volatile
 8008504:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008508:	f383 8811 	msr	BASEPRI, r3
 800850c:	f3bf 8f6f 	isb	sy
 8008510:	f3bf 8f4f 	dsb	sy
 8008514:	60fb      	str	r3, [r7, #12]
}
 8008516:	bf00      	nop
 8008518:	bf00      	nop
 800851a:	e7fd      	b.n	8008518 <prvTaskExitError+0x28>
	__asm volatile
 800851c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008520:	f383 8811 	msr	BASEPRI, r3
 8008524:	f3bf 8f6f 	isb	sy
 8008528:	f3bf 8f4f 	dsb	sy
 800852c:	60bb      	str	r3, [r7, #8]
}
 800852e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008530:	bf00      	nop
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d0fc      	beq.n	8008532 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008538:	bf00      	nop
 800853a:	bf00      	nop
 800853c:	3714      	adds	r7, #20
 800853e:	46bd      	mov	sp, r7
 8008540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008544:	4770      	bx	lr
 8008546:	bf00      	nop
 8008548:	24000010 	.word	0x24000010
 800854c:	00000000 	.word	0x00000000

08008550 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008550:	4b07      	ldr	r3, [pc, #28]	@ (8008570 <pxCurrentTCBConst2>)
 8008552:	6819      	ldr	r1, [r3, #0]
 8008554:	6808      	ldr	r0, [r1, #0]
 8008556:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800855a:	f380 8809 	msr	PSP, r0
 800855e:	f3bf 8f6f 	isb	sy
 8008562:	f04f 0000 	mov.w	r0, #0
 8008566:	f380 8811 	msr	BASEPRI, r0
 800856a:	4770      	bx	lr
 800856c:	f3af 8000 	nop.w

08008570 <pxCurrentTCBConst2>:
 8008570:	24000a78 	.word	0x24000a78
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008574:	bf00      	nop
 8008576:	bf00      	nop

08008578 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008578:	4808      	ldr	r0, [pc, #32]	@ (800859c <prvPortStartFirstTask+0x24>)
 800857a:	6800      	ldr	r0, [r0, #0]
 800857c:	6800      	ldr	r0, [r0, #0]
 800857e:	f380 8808 	msr	MSP, r0
 8008582:	f04f 0000 	mov.w	r0, #0
 8008586:	f380 8814 	msr	CONTROL, r0
 800858a:	b662      	cpsie	i
 800858c:	b661      	cpsie	f
 800858e:	f3bf 8f4f 	dsb	sy
 8008592:	f3bf 8f6f 	isb	sy
 8008596:	df00      	svc	0
 8008598:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800859a:	bf00      	nop
 800859c:	e000ed08 	.word	0xe000ed08

080085a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b086      	sub	sp, #24
 80085a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80085a6:	4b47      	ldr	r3, [pc, #284]	@ (80086c4 <xPortStartScheduler+0x124>)
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	4a47      	ldr	r2, [pc, #284]	@ (80086c8 <xPortStartScheduler+0x128>)
 80085ac:	4293      	cmp	r3, r2
 80085ae:	d10b      	bne.n	80085c8 <xPortStartScheduler+0x28>
	__asm volatile
 80085b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085b4:	f383 8811 	msr	BASEPRI, r3
 80085b8:	f3bf 8f6f 	isb	sy
 80085bc:	f3bf 8f4f 	dsb	sy
 80085c0:	613b      	str	r3, [r7, #16]
}
 80085c2:	bf00      	nop
 80085c4:	bf00      	nop
 80085c6:	e7fd      	b.n	80085c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80085c8:	4b3e      	ldr	r3, [pc, #248]	@ (80086c4 <xPortStartScheduler+0x124>)
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	4a3f      	ldr	r2, [pc, #252]	@ (80086cc <xPortStartScheduler+0x12c>)
 80085ce:	4293      	cmp	r3, r2
 80085d0:	d10b      	bne.n	80085ea <xPortStartScheduler+0x4a>
	__asm volatile
 80085d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085d6:	f383 8811 	msr	BASEPRI, r3
 80085da:	f3bf 8f6f 	isb	sy
 80085de:	f3bf 8f4f 	dsb	sy
 80085e2:	60fb      	str	r3, [r7, #12]
}
 80085e4:	bf00      	nop
 80085e6:	bf00      	nop
 80085e8:	e7fd      	b.n	80085e6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80085ea:	4b39      	ldr	r3, [pc, #228]	@ (80086d0 <xPortStartScheduler+0x130>)
 80085ec:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80085ee:	697b      	ldr	r3, [r7, #20]
 80085f0:	781b      	ldrb	r3, [r3, #0]
 80085f2:	b2db      	uxtb	r3, r3
 80085f4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80085f6:	697b      	ldr	r3, [r7, #20]
 80085f8:	22ff      	movs	r2, #255	@ 0xff
 80085fa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80085fc:	697b      	ldr	r3, [r7, #20]
 80085fe:	781b      	ldrb	r3, [r3, #0]
 8008600:	b2db      	uxtb	r3, r3
 8008602:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008604:	78fb      	ldrb	r3, [r7, #3]
 8008606:	b2db      	uxtb	r3, r3
 8008608:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800860c:	b2da      	uxtb	r2, r3
 800860e:	4b31      	ldr	r3, [pc, #196]	@ (80086d4 <xPortStartScheduler+0x134>)
 8008610:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008612:	4b31      	ldr	r3, [pc, #196]	@ (80086d8 <xPortStartScheduler+0x138>)
 8008614:	2207      	movs	r2, #7
 8008616:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008618:	e009      	b.n	800862e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800861a:	4b2f      	ldr	r3, [pc, #188]	@ (80086d8 <xPortStartScheduler+0x138>)
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	3b01      	subs	r3, #1
 8008620:	4a2d      	ldr	r2, [pc, #180]	@ (80086d8 <xPortStartScheduler+0x138>)
 8008622:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008624:	78fb      	ldrb	r3, [r7, #3]
 8008626:	b2db      	uxtb	r3, r3
 8008628:	005b      	lsls	r3, r3, #1
 800862a:	b2db      	uxtb	r3, r3
 800862c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800862e:	78fb      	ldrb	r3, [r7, #3]
 8008630:	b2db      	uxtb	r3, r3
 8008632:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008636:	2b80      	cmp	r3, #128	@ 0x80
 8008638:	d0ef      	beq.n	800861a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800863a:	4b27      	ldr	r3, [pc, #156]	@ (80086d8 <xPortStartScheduler+0x138>)
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	f1c3 0307 	rsb	r3, r3, #7
 8008642:	2b04      	cmp	r3, #4
 8008644:	d00b      	beq.n	800865e <xPortStartScheduler+0xbe>
	__asm volatile
 8008646:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800864a:	f383 8811 	msr	BASEPRI, r3
 800864e:	f3bf 8f6f 	isb	sy
 8008652:	f3bf 8f4f 	dsb	sy
 8008656:	60bb      	str	r3, [r7, #8]
}
 8008658:	bf00      	nop
 800865a:	bf00      	nop
 800865c:	e7fd      	b.n	800865a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800865e:	4b1e      	ldr	r3, [pc, #120]	@ (80086d8 <xPortStartScheduler+0x138>)
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	021b      	lsls	r3, r3, #8
 8008664:	4a1c      	ldr	r2, [pc, #112]	@ (80086d8 <xPortStartScheduler+0x138>)
 8008666:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008668:	4b1b      	ldr	r3, [pc, #108]	@ (80086d8 <xPortStartScheduler+0x138>)
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008670:	4a19      	ldr	r2, [pc, #100]	@ (80086d8 <xPortStartScheduler+0x138>)
 8008672:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	b2da      	uxtb	r2, r3
 8008678:	697b      	ldr	r3, [r7, #20]
 800867a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800867c:	4b17      	ldr	r3, [pc, #92]	@ (80086dc <xPortStartScheduler+0x13c>)
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	4a16      	ldr	r2, [pc, #88]	@ (80086dc <xPortStartScheduler+0x13c>)
 8008682:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008686:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008688:	4b14      	ldr	r3, [pc, #80]	@ (80086dc <xPortStartScheduler+0x13c>)
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	4a13      	ldr	r2, [pc, #76]	@ (80086dc <xPortStartScheduler+0x13c>)
 800868e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008692:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008694:	f000 f9a6 	bl	80089e4 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008698:	4b11      	ldr	r3, [pc, #68]	@ (80086e0 <xPortStartScheduler+0x140>)
 800869a:	2200      	movs	r2, #0
 800869c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800869e:	f000 f9dd 	bl	8008a5c <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80086a2:	4b10      	ldr	r3, [pc, #64]	@ (80086e4 <xPortStartScheduler+0x144>)
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	4a0f      	ldr	r2, [pc, #60]	@ (80086e4 <xPortStartScheduler+0x144>)
 80086a8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80086ac:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80086ae:	f7ff ff63 	bl	8008578 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80086b2:	f7fe ffd7 	bl	8007664 <vTaskSwitchContext>
	prvTaskExitError();
 80086b6:	f7ff ff1b 	bl	80084f0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80086ba:	2300      	movs	r3, #0
}
 80086bc:	4618      	mov	r0, r3
 80086be:	3718      	adds	r7, #24
 80086c0:	46bd      	mov	sp, r7
 80086c2:	bd80      	pop	{r7, pc}
 80086c4:	e000ed00 	.word	0xe000ed00
 80086c8:	410fc271 	.word	0x410fc271
 80086cc:	410fc270 	.word	0x410fc270
 80086d0:	e000e400 	.word	0xe000e400
 80086d4:	240010b0 	.word	0x240010b0
 80086d8:	240010b4 	.word	0x240010b4
 80086dc:	e000ed20 	.word	0xe000ed20
 80086e0:	24000010 	.word	0x24000010
 80086e4:	e000ef34 	.word	0xe000ef34

080086e8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80086e8:	b480      	push	{r7}
 80086ea:	b083      	sub	sp, #12
 80086ec:	af00      	add	r7, sp, #0
	__asm volatile
 80086ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086f2:	f383 8811 	msr	BASEPRI, r3
 80086f6:	f3bf 8f6f 	isb	sy
 80086fa:	f3bf 8f4f 	dsb	sy
 80086fe:	607b      	str	r3, [r7, #4]
}
 8008700:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008702:	4b10      	ldr	r3, [pc, #64]	@ (8008744 <vPortEnterCritical+0x5c>)
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	3301      	adds	r3, #1
 8008708:	4a0e      	ldr	r2, [pc, #56]	@ (8008744 <vPortEnterCritical+0x5c>)
 800870a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800870c:	4b0d      	ldr	r3, [pc, #52]	@ (8008744 <vPortEnterCritical+0x5c>)
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	2b01      	cmp	r3, #1
 8008712:	d110      	bne.n	8008736 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008714:	4b0c      	ldr	r3, [pc, #48]	@ (8008748 <vPortEnterCritical+0x60>)
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	b2db      	uxtb	r3, r3
 800871a:	2b00      	cmp	r3, #0
 800871c:	d00b      	beq.n	8008736 <vPortEnterCritical+0x4e>
	__asm volatile
 800871e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008722:	f383 8811 	msr	BASEPRI, r3
 8008726:	f3bf 8f6f 	isb	sy
 800872a:	f3bf 8f4f 	dsb	sy
 800872e:	603b      	str	r3, [r7, #0]
}
 8008730:	bf00      	nop
 8008732:	bf00      	nop
 8008734:	e7fd      	b.n	8008732 <vPortEnterCritical+0x4a>
	}
}
 8008736:	bf00      	nop
 8008738:	370c      	adds	r7, #12
 800873a:	46bd      	mov	sp, r7
 800873c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008740:	4770      	bx	lr
 8008742:	bf00      	nop
 8008744:	24000010 	.word	0x24000010
 8008748:	e000ed04 	.word	0xe000ed04

0800874c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800874c:	b480      	push	{r7}
 800874e:	b083      	sub	sp, #12
 8008750:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008752:	4b12      	ldr	r3, [pc, #72]	@ (800879c <vPortExitCritical+0x50>)
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	2b00      	cmp	r3, #0
 8008758:	d10b      	bne.n	8008772 <vPortExitCritical+0x26>
	__asm volatile
 800875a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800875e:	f383 8811 	msr	BASEPRI, r3
 8008762:	f3bf 8f6f 	isb	sy
 8008766:	f3bf 8f4f 	dsb	sy
 800876a:	607b      	str	r3, [r7, #4]
}
 800876c:	bf00      	nop
 800876e:	bf00      	nop
 8008770:	e7fd      	b.n	800876e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008772:	4b0a      	ldr	r3, [pc, #40]	@ (800879c <vPortExitCritical+0x50>)
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	3b01      	subs	r3, #1
 8008778:	4a08      	ldr	r2, [pc, #32]	@ (800879c <vPortExitCritical+0x50>)
 800877a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800877c:	4b07      	ldr	r3, [pc, #28]	@ (800879c <vPortExitCritical+0x50>)
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d105      	bne.n	8008790 <vPortExitCritical+0x44>
 8008784:	2300      	movs	r3, #0
 8008786:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008788:	683b      	ldr	r3, [r7, #0]
 800878a:	f383 8811 	msr	BASEPRI, r3
}
 800878e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008790:	bf00      	nop
 8008792:	370c      	adds	r7, #12
 8008794:	46bd      	mov	sp, r7
 8008796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879a:	4770      	bx	lr
 800879c:	24000010 	.word	0x24000010

080087a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80087a0:	f3ef 8009 	mrs	r0, PSP
 80087a4:	f3bf 8f6f 	isb	sy
 80087a8:	4b15      	ldr	r3, [pc, #84]	@ (8008800 <pxCurrentTCBConst>)
 80087aa:	681a      	ldr	r2, [r3, #0]
 80087ac:	f01e 0f10 	tst.w	lr, #16
 80087b0:	bf08      	it	eq
 80087b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80087b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087ba:	6010      	str	r0, [r2, #0]
 80087bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80087c0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80087c4:	f380 8811 	msr	BASEPRI, r0
 80087c8:	f3bf 8f4f 	dsb	sy
 80087cc:	f3bf 8f6f 	isb	sy
 80087d0:	f7fe ff48 	bl	8007664 <vTaskSwitchContext>
 80087d4:	f04f 0000 	mov.w	r0, #0
 80087d8:	f380 8811 	msr	BASEPRI, r0
 80087dc:	bc09      	pop	{r0, r3}
 80087de:	6819      	ldr	r1, [r3, #0]
 80087e0:	6808      	ldr	r0, [r1, #0]
 80087e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087e6:	f01e 0f10 	tst.w	lr, #16
 80087ea:	bf08      	it	eq
 80087ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80087f0:	f380 8809 	msr	PSP, r0
 80087f4:	f3bf 8f6f 	isb	sy
 80087f8:	4770      	bx	lr
 80087fa:	bf00      	nop
 80087fc:	f3af 8000 	nop.w

08008800 <pxCurrentTCBConst>:
 8008800:	24000a78 	.word	0x24000a78
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008804:	bf00      	nop
 8008806:	bf00      	nop

08008808 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008808:	b580      	push	{r7, lr}
 800880a:	b082      	sub	sp, #8
 800880c:	af00      	add	r7, sp, #0
	__asm volatile
 800880e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008812:	f383 8811 	msr	BASEPRI, r3
 8008816:	f3bf 8f6f 	isb	sy
 800881a:	f3bf 8f4f 	dsb	sy
 800881e:	607b      	str	r3, [r7, #4]
}
 8008820:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008822:	f7fe fe65 	bl	80074f0 <xTaskIncrementTick>
 8008826:	4603      	mov	r3, r0
 8008828:	2b00      	cmp	r3, #0
 800882a:	d003      	beq.n	8008834 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800882c:	4b06      	ldr	r3, [pc, #24]	@ (8008848 <xPortSysTickHandler+0x40>)
 800882e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008832:	601a      	str	r2, [r3, #0]
 8008834:	2300      	movs	r3, #0
 8008836:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008838:	683b      	ldr	r3, [r7, #0]
 800883a:	f383 8811 	msr	BASEPRI, r3
}
 800883e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008840:	bf00      	nop
 8008842:	3708      	adds	r7, #8
 8008844:	46bd      	mov	sp, r7
 8008846:	bd80      	pop	{r7, pc}
 8008848:	e000ed04 	.word	0xe000ed04

0800884c <vPortSuppressTicksAndSleep>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE == 1 )

	__attribute__((weak)) void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
	{
 800884c:	b580      	push	{r7, lr}
 800884e:	b088      	sub	sp, #32
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
	uint32_t ulReloadValue, ulCompleteTickPeriods, ulCompletedSysTickDecrements;
	TickType_t xModifiableIdleTime;

		/* Make sure the SysTick reload value does not overflow the counter. */
		if( xExpectedIdleTime > xMaximumPossibleSuppressedTicks )
 8008854:	4b5d      	ldr	r3, [pc, #372]	@ (80089cc <vPortSuppressTicksAndSleep+0x180>)
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	687a      	ldr	r2, [r7, #4]
 800885a:	429a      	cmp	r2, r3
 800885c:	d902      	bls.n	8008864 <vPortSuppressTicksAndSleep+0x18>
		{
			xExpectedIdleTime = xMaximumPossibleSuppressedTicks;
 800885e:	4b5b      	ldr	r3, [pc, #364]	@ (80089cc <vPortSuppressTicksAndSleep+0x180>)
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	607b      	str	r3, [r7, #4]

		/* Stop the SysTick momentarily.  The time the SysTick is stopped for
		is accounted for as best it can be, but using the tickless mode will
		inevitably result in some tiny drift of the time maintained by the
		kernel with respect to calendar time. */
		portNVIC_SYSTICK_CTRL_REG &= ~portNVIC_SYSTICK_ENABLE_BIT;
 8008864:	4b5a      	ldr	r3, [pc, #360]	@ (80089d0 <vPortSuppressTicksAndSleep+0x184>)
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	4a59      	ldr	r2, [pc, #356]	@ (80089d0 <vPortSuppressTicksAndSleep+0x184>)
 800886a:	f023 0301 	bic.w	r3, r3, #1
 800886e:	6013      	str	r3, [r2, #0]

		/* Calculate the reload value required to wait xExpectedIdleTime
		tick periods.  -1 is used because this code will execute part way
		through one of the tick periods. */
		ulReloadValue = portNVIC_SYSTICK_CURRENT_VALUE_REG + ( ulTimerCountsForOneTick * ( xExpectedIdleTime - 1UL ) );
 8008870:	4b58      	ldr	r3, [pc, #352]	@ (80089d4 <vPortSuppressTicksAndSleep+0x188>)
 8008872:	681a      	ldr	r2, [r3, #0]
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	3b01      	subs	r3, #1
 8008878:	4957      	ldr	r1, [pc, #348]	@ (80089d8 <vPortSuppressTicksAndSleep+0x18c>)
 800887a:	6809      	ldr	r1, [r1, #0]
 800887c:	fb01 f303 	mul.w	r3, r1, r3
 8008880:	4413      	add	r3, r2
 8008882:	61fb      	str	r3, [r7, #28]
		if( ulReloadValue > ulStoppedTimerCompensation )
 8008884:	4b55      	ldr	r3, [pc, #340]	@ (80089dc <vPortSuppressTicksAndSleep+0x190>)
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	69fa      	ldr	r2, [r7, #28]
 800888a:	429a      	cmp	r2, r3
 800888c:	d904      	bls.n	8008898 <vPortSuppressTicksAndSleep+0x4c>
		{
			ulReloadValue -= ulStoppedTimerCompensation;
 800888e:	4b53      	ldr	r3, [pc, #332]	@ (80089dc <vPortSuppressTicksAndSleep+0x190>)
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	69fa      	ldr	r2, [r7, #28]
 8008894:	1ad3      	subs	r3, r2, r3
 8008896:	61fb      	str	r3, [r7, #28]
		}

		/* Enter a critical section but don't use the taskENTER_CRITICAL()
		method as that will mask interrupts that should exit sleep mode. */
		__asm volatile( "cpsid i" ::: "memory" );
 8008898:	b672      	cpsid	i
		__asm volatile( "dsb" );
 800889a:	f3bf 8f4f 	dsb	sy
		__asm volatile( "isb" );
 800889e:	f3bf 8f6f 	isb	sy

		/* If a context switch is pending or a task is waiting for the scheduler
		to be unsuspended then abandon the low power entry. */
		if( eTaskConfirmSleepModeStatus() == eAbortSleep )
 80088a2:	f7ff f8c3 	bl	8007a2c <eTaskConfirmSleepModeStatus>
 80088a6:	4603      	mov	r3, r0
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d110      	bne.n	80088ce <vPortSuppressTicksAndSleep+0x82>
		{
			/* Restart from whatever is left in the count register to complete
			this tick period. */
			portNVIC_SYSTICK_LOAD_REG = portNVIC_SYSTICK_CURRENT_VALUE_REG;
 80088ac:	4b49      	ldr	r3, [pc, #292]	@ (80089d4 <vPortSuppressTicksAndSleep+0x188>)
 80088ae:	4a4c      	ldr	r2, [pc, #304]	@ (80089e0 <vPortSuppressTicksAndSleep+0x194>)
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	6013      	str	r3, [r2, #0]

			/* Restart SysTick. */
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 80088b4:	4b46      	ldr	r3, [pc, #280]	@ (80089d0 <vPortSuppressTicksAndSleep+0x184>)
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	4a45      	ldr	r2, [pc, #276]	@ (80089d0 <vPortSuppressTicksAndSleep+0x184>)
 80088ba:	f043 0301 	orr.w	r3, r3, #1
 80088be:	6013      	str	r3, [r2, #0]

			/* Reset the reload register to the value required for normal tick
			periods. */
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 80088c0:	4b45      	ldr	r3, [pc, #276]	@ (80089d8 <vPortSuppressTicksAndSleep+0x18c>)
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	4a46      	ldr	r2, [pc, #280]	@ (80089e0 <vPortSuppressTicksAndSleep+0x194>)
 80088c6:	3b01      	subs	r3, #1
 80088c8:	6013      	str	r3, [r2, #0]

			/* Re-enable interrupts - see comments above the cpsid instruction()
			above. */
			__asm volatile( "cpsie i" ::: "memory" );
 80088ca:	b662      	cpsie	i
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;

			/* Exit with interrupts enabled. */
			__asm volatile( "cpsie i" ::: "memory" );
		}
	}
 80088cc:	e079      	b.n	80089c2 <vPortSuppressTicksAndSleep+0x176>
			portNVIC_SYSTICK_LOAD_REG = ulReloadValue;
 80088ce:	4a44      	ldr	r2, [pc, #272]	@ (80089e0 <vPortSuppressTicksAndSleep+0x194>)
 80088d0:	69fb      	ldr	r3, [r7, #28]
 80088d2:	6013      	str	r3, [r2, #0]
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80088d4:	4b3f      	ldr	r3, [pc, #252]	@ (80089d4 <vPortSuppressTicksAndSleep+0x188>)
 80088d6:	2200      	movs	r2, #0
 80088d8:	601a      	str	r2, [r3, #0]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 80088da:	4b3d      	ldr	r3, [pc, #244]	@ (80089d0 <vPortSuppressTicksAndSleep+0x184>)
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	4a3c      	ldr	r2, [pc, #240]	@ (80089d0 <vPortSuppressTicksAndSleep+0x184>)
 80088e0:	f043 0301 	orr.w	r3, r3, #1
 80088e4:	6013      	str	r3, [r2, #0]
			xModifiableIdleTime = xExpectedIdleTime;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	613b      	str	r3, [r7, #16]
			configPRE_SLEEP_PROCESSING( xModifiableIdleTime );
 80088ea:	2300      	movs	r3, #0
 80088ec:	613b      	str	r3, [r7, #16]
 80088ee:	6938      	ldr	r0, [r7, #16]
 80088f0:	f7f8 f8c2 	bl	8000a78 <PreSleepProcessing>
			if( xModifiableIdleTime > 0 )
 80088f4:	693b      	ldr	r3, [r7, #16]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d004      	beq.n	8008904 <vPortSuppressTicksAndSleep+0xb8>
				__asm volatile( "dsb" ::: "memory" );
 80088fa:	f3bf 8f4f 	dsb	sy
				__asm volatile( "wfi" );
 80088fe:	bf30      	wfi
				__asm volatile( "isb" );
 8008900:	f3bf 8f6f 	isb	sy
			configPOST_SLEEP_PROCESSING( xExpectedIdleTime );
 8008904:	6878      	ldr	r0, [r7, #4]
 8008906:	f7f8 f8c1 	bl	8000a8c <PostSleepProcessing>
			__asm volatile( "cpsie i" ::: "memory" );
 800890a:	b662      	cpsie	i
			__asm volatile( "dsb" );
 800890c:	f3bf 8f4f 	dsb	sy
			__asm volatile( "isb" );
 8008910:	f3bf 8f6f 	isb	sy
			__asm volatile( "cpsid i" ::: "memory" );
 8008914:	b672      	cpsid	i
			__asm volatile( "dsb" );
 8008916:	f3bf 8f4f 	dsb	sy
			__asm volatile( "isb" );
 800891a:	f3bf 8f6f 	isb	sy
			portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT );
 800891e:	4b2c      	ldr	r3, [pc, #176]	@ (80089d0 <vPortSuppressTicksAndSleep+0x184>)
 8008920:	2206      	movs	r2, #6
 8008922:	601a      	str	r2, [r3, #0]
			if( ( portNVIC_SYSTICK_CTRL_REG & portNVIC_SYSTICK_COUNT_FLAG_BIT ) != 0 )
 8008924:	4b2a      	ldr	r3, [pc, #168]	@ (80089d0 <vPortSuppressTicksAndSleep+0x184>)
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800892c:	2b00      	cmp	r3, #0
 800892e:	d01d      	beq.n	800896c <vPortSuppressTicksAndSleep+0x120>
				ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL ) - ( ulReloadValue - portNVIC_SYSTICK_CURRENT_VALUE_REG );
 8008930:	4b29      	ldr	r3, [pc, #164]	@ (80089d8 <vPortSuppressTicksAndSleep+0x18c>)
 8008932:	681a      	ldr	r2, [r3, #0]
 8008934:	4b27      	ldr	r3, [pc, #156]	@ (80089d4 <vPortSuppressTicksAndSleep+0x188>)
 8008936:	6819      	ldr	r1, [r3, #0]
 8008938:	69fb      	ldr	r3, [r7, #28]
 800893a:	1acb      	subs	r3, r1, r3
 800893c:	4413      	add	r3, r2
 800893e:	3b01      	subs	r3, #1
 8008940:	617b      	str	r3, [r7, #20]
				if( ( ulCalculatedLoadValue < ulStoppedTimerCompensation ) || ( ulCalculatedLoadValue > ulTimerCountsForOneTick ) )
 8008942:	4b26      	ldr	r3, [pc, #152]	@ (80089dc <vPortSuppressTicksAndSleep+0x190>)
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	697a      	ldr	r2, [r7, #20]
 8008948:	429a      	cmp	r2, r3
 800894a:	d304      	bcc.n	8008956 <vPortSuppressTicksAndSleep+0x10a>
 800894c:	4b22      	ldr	r3, [pc, #136]	@ (80089d8 <vPortSuppressTicksAndSleep+0x18c>)
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	697a      	ldr	r2, [r7, #20]
 8008952:	429a      	cmp	r2, r3
 8008954:	d903      	bls.n	800895e <vPortSuppressTicksAndSleep+0x112>
					ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL );
 8008956:	4b20      	ldr	r3, [pc, #128]	@ (80089d8 <vPortSuppressTicksAndSleep+0x18c>)
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	3b01      	subs	r3, #1
 800895c:	617b      	str	r3, [r7, #20]
				portNVIC_SYSTICK_LOAD_REG = ulCalculatedLoadValue;
 800895e:	4a20      	ldr	r2, [pc, #128]	@ (80089e0 <vPortSuppressTicksAndSleep+0x194>)
 8008960:	697b      	ldr	r3, [r7, #20]
 8008962:	6013      	str	r3, [r2, #0]
				ulCompleteTickPeriods = xExpectedIdleTime - 1UL;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	3b01      	subs	r3, #1
 8008968:	61bb      	str	r3, [r7, #24]
 800896a:	e018      	b.n	800899e <vPortSuppressTicksAndSleep+0x152>
				ulCompletedSysTickDecrements = ( xExpectedIdleTime * ulTimerCountsForOneTick ) - portNVIC_SYSTICK_CURRENT_VALUE_REG;
 800896c:	4b1a      	ldr	r3, [pc, #104]	@ (80089d8 <vPortSuppressTicksAndSleep+0x18c>)
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	687a      	ldr	r2, [r7, #4]
 8008972:	fb03 f202 	mul.w	r2, r3, r2
 8008976:	4b17      	ldr	r3, [pc, #92]	@ (80089d4 <vPortSuppressTicksAndSleep+0x188>)
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	1ad3      	subs	r3, r2, r3
 800897c:	60fb      	str	r3, [r7, #12]
				ulCompleteTickPeriods = ulCompletedSysTickDecrements / ulTimerCountsForOneTick;
 800897e:	4b16      	ldr	r3, [pc, #88]	@ (80089d8 <vPortSuppressTicksAndSleep+0x18c>)
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	68fa      	ldr	r2, [r7, #12]
 8008984:	fbb2 f3f3 	udiv	r3, r2, r3
 8008988:	61bb      	str	r3, [r7, #24]
				portNVIC_SYSTICK_LOAD_REG = ( ( ulCompleteTickPeriods + 1UL ) * ulTimerCountsForOneTick ) - ulCompletedSysTickDecrements;
 800898a:	69bb      	ldr	r3, [r7, #24]
 800898c:	3301      	adds	r3, #1
 800898e:	4a12      	ldr	r2, [pc, #72]	@ (80089d8 <vPortSuppressTicksAndSleep+0x18c>)
 8008990:	6812      	ldr	r2, [r2, #0]
 8008992:	fb03 f202 	mul.w	r2, r3, r2
 8008996:	4912      	ldr	r1, [pc, #72]	@ (80089e0 <vPortSuppressTicksAndSleep+0x194>)
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	1ad3      	subs	r3, r2, r3
 800899c:	600b      	str	r3, [r1, #0]
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800899e:	4b0d      	ldr	r3, [pc, #52]	@ (80089d4 <vPortSuppressTicksAndSleep+0x188>)
 80089a0:	2200      	movs	r2, #0
 80089a2:	601a      	str	r2, [r3, #0]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 80089a4:	4b0a      	ldr	r3, [pc, #40]	@ (80089d0 <vPortSuppressTicksAndSleep+0x184>)
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	4a09      	ldr	r2, [pc, #36]	@ (80089d0 <vPortSuppressTicksAndSleep+0x184>)
 80089aa:	f043 0301 	orr.w	r3, r3, #1
 80089ae:	6013      	str	r3, [r2, #0]
			vTaskStepTick( ulCompleteTickPeriods );
 80089b0:	69b8      	ldr	r0, [r7, #24]
 80089b2:	f7fe fd75 	bl	80074a0 <vTaskStepTick>
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 80089b6:	4b08      	ldr	r3, [pc, #32]	@ (80089d8 <vPortSuppressTicksAndSleep+0x18c>)
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	4a09      	ldr	r2, [pc, #36]	@ (80089e0 <vPortSuppressTicksAndSleep+0x194>)
 80089bc:	3b01      	subs	r3, #1
 80089be:	6013      	str	r3, [r2, #0]
			__asm volatile( "cpsie i" ::: "memory" );
 80089c0:	b662      	cpsie	i
	}
 80089c2:	bf00      	nop
 80089c4:	3720      	adds	r7, #32
 80089c6:	46bd      	mov	sp, r7
 80089c8:	bd80      	pop	{r7, pc}
 80089ca:	bf00      	nop
 80089cc:	240010a8 	.word	0x240010a8
 80089d0:	e000e010 	.word	0xe000e010
 80089d4:	e000e018 	.word	0xe000e018
 80089d8:	240010a4 	.word	0x240010a4
 80089dc:	240010ac 	.word	0x240010ac
 80089e0:	e000e014 	.word	0xe000e014

080089e4 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80089e4:	b480      	push	{r7}
 80089e6:	af00      	add	r7, sp, #0
	/* Calculate the constants required to configure the tick interrupt. */
	#if( configUSE_TICKLESS_IDLE == 1 )
	{
		ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
 80089e8:	4b14      	ldr	r3, [pc, #80]	@ (8008a3c <vPortSetupTimerInterrupt+0x58>)
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	4a14      	ldr	r2, [pc, #80]	@ (8008a40 <vPortSetupTimerInterrupt+0x5c>)
 80089ee:	fba2 2303 	umull	r2, r3, r2, r3
 80089f2:	099b      	lsrs	r3, r3, #6
 80089f4:	4a13      	ldr	r2, [pc, #76]	@ (8008a44 <vPortSetupTimerInterrupt+0x60>)
 80089f6:	6013      	str	r3, [r2, #0]
		xMaximumPossibleSuppressedTicks = portMAX_24_BIT_NUMBER / ulTimerCountsForOneTick;
 80089f8:	4b12      	ldr	r3, [pc, #72]	@ (8008a44 <vPortSetupTimerInterrupt+0x60>)
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 8008a00:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a04:	4a10      	ldr	r2, [pc, #64]	@ (8008a48 <vPortSetupTimerInterrupt+0x64>)
 8008a06:	6013      	str	r3, [r2, #0]
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 8008a08:	4b10      	ldr	r3, [pc, #64]	@ (8008a4c <vPortSetupTimerInterrupt+0x68>)
 8008a0a:	222d      	movs	r2, #45	@ 0x2d
 8008a0c:	601a      	str	r2, [r3, #0]
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008a0e:	4b10      	ldr	r3, [pc, #64]	@ (8008a50 <vPortSetupTimerInterrupt+0x6c>)
 8008a10:	2200      	movs	r2, #0
 8008a12:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008a14:	4b0f      	ldr	r3, [pc, #60]	@ (8008a54 <vPortSetupTimerInterrupt+0x70>)
 8008a16:	2200      	movs	r2, #0
 8008a18:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008a1a:	4b08      	ldr	r3, [pc, #32]	@ (8008a3c <vPortSetupTimerInterrupt+0x58>)
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	4a08      	ldr	r2, [pc, #32]	@ (8008a40 <vPortSetupTimerInterrupt+0x5c>)
 8008a20:	fba2 2303 	umull	r2, r3, r2, r3
 8008a24:	099b      	lsrs	r3, r3, #6
 8008a26:	4a0c      	ldr	r2, [pc, #48]	@ (8008a58 <vPortSetupTimerInterrupt+0x74>)
 8008a28:	3b01      	subs	r3, #1
 8008a2a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008a2c:	4b08      	ldr	r3, [pc, #32]	@ (8008a50 <vPortSetupTimerInterrupt+0x6c>)
 8008a2e:	2207      	movs	r2, #7
 8008a30:	601a      	str	r2, [r3, #0]
}
 8008a32:	bf00      	nop
 8008a34:	46bd      	mov	sp, r7
 8008a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3a:	4770      	bx	lr
 8008a3c:	24000000 	.word	0x24000000
 8008a40:	10624dd3 	.word	0x10624dd3
 8008a44:	240010a4 	.word	0x240010a4
 8008a48:	240010a8 	.word	0x240010a8
 8008a4c:	240010ac 	.word	0x240010ac
 8008a50:	e000e010 	.word	0xe000e010
 8008a54:	e000e018 	.word	0xe000e018
 8008a58:	e000e014 	.word	0xe000e014

08008a5c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008a5c:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008a6c <vPortEnableVFP+0x10>
 8008a60:	6801      	ldr	r1, [r0, #0]
 8008a62:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8008a66:	6001      	str	r1, [r0, #0]
 8008a68:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008a6a:	bf00      	nop
 8008a6c:	e000ed88 	.word	0xe000ed88

08008a70 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008a70:	b480      	push	{r7}
 8008a72:	b085      	sub	sp, #20
 8008a74:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008a76:	f3ef 8305 	mrs	r3, IPSR
 8008a7a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	2b0f      	cmp	r3, #15
 8008a80:	d915      	bls.n	8008aae <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008a82:	4a18      	ldr	r2, [pc, #96]	@ (8008ae4 <vPortValidateInterruptPriority+0x74>)
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	4413      	add	r3, r2
 8008a88:	781b      	ldrb	r3, [r3, #0]
 8008a8a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008a8c:	4b16      	ldr	r3, [pc, #88]	@ (8008ae8 <vPortValidateInterruptPriority+0x78>)
 8008a8e:	781b      	ldrb	r3, [r3, #0]
 8008a90:	7afa      	ldrb	r2, [r7, #11]
 8008a92:	429a      	cmp	r2, r3
 8008a94:	d20b      	bcs.n	8008aae <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8008a96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a9a:	f383 8811 	msr	BASEPRI, r3
 8008a9e:	f3bf 8f6f 	isb	sy
 8008aa2:	f3bf 8f4f 	dsb	sy
 8008aa6:	607b      	str	r3, [r7, #4]
}
 8008aa8:	bf00      	nop
 8008aaa:	bf00      	nop
 8008aac:	e7fd      	b.n	8008aaa <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008aae:	4b0f      	ldr	r3, [pc, #60]	@ (8008aec <vPortValidateInterruptPriority+0x7c>)
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008ab6:	4b0e      	ldr	r3, [pc, #56]	@ (8008af0 <vPortValidateInterruptPriority+0x80>)
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	429a      	cmp	r2, r3
 8008abc:	d90b      	bls.n	8008ad6 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8008abe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ac2:	f383 8811 	msr	BASEPRI, r3
 8008ac6:	f3bf 8f6f 	isb	sy
 8008aca:	f3bf 8f4f 	dsb	sy
 8008ace:	603b      	str	r3, [r7, #0]
}
 8008ad0:	bf00      	nop
 8008ad2:	bf00      	nop
 8008ad4:	e7fd      	b.n	8008ad2 <vPortValidateInterruptPriority+0x62>
	}
 8008ad6:	bf00      	nop
 8008ad8:	3714      	adds	r7, #20
 8008ada:	46bd      	mov	sp, r7
 8008adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae0:	4770      	bx	lr
 8008ae2:	bf00      	nop
 8008ae4:	e000e3f0 	.word	0xe000e3f0
 8008ae8:	240010b0 	.word	0x240010b0
 8008aec:	e000ed0c 	.word	0xe000ed0c
 8008af0:	240010b4 	.word	0x240010b4

08008af4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b08a      	sub	sp, #40	@ 0x28
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008afc:	2300      	movs	r3, #0
 8008afe:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008b00:	f7fe fbda 	bl	80072b8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008b04:	4b5c      	ldr	r3, [pc, #368]	@ (8008c78 <pvPortMalloc+0x184>)
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d101      	bne.n	8008b10 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008b0c:	f000 f924 	bl	8008d58 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008b10:	4b5a      	ldr	r3, [pc, #360]	@ (8008c7c <pvPortMalloc+0x188>)
 8008b12:	681a      	ldr	r2, [r3, #0]
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	4013      	ands	r3, r2
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	f040 8095 	bne.w	8008c48 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d01e      	beq.n	8008b62 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8008b24:	2208      	movs	r2, #8
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	4413      	add	r3, r2
 8008b2a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	f003 0307 	and.w	r3, r3, #7
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d015      	beq.n	8008b62 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	f023 0307 	bic.w	r3, r3, #7
 8008b3c:	3308      	adds	r3, #8
 8008b3e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	f003 0307 	and.w	r3, r3, #7
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d00b      	beq.n	8008b62 <pvPortMalloc+0x6e>
	__asm volatile
 8008b4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b4e:	f383 8811 	msr	BASEPRI, r3
 8008b52:	f3bf 8f6f 	isb	sy
 8008b56:	f3bf 8f4f 	dsb	sy
 8008b5a:	617b      	str	r3, [r7, #20]
}
 8008b5c:	bf00      	nop
 8008b5e:	bf00      	nop
 8008b60:	e7fd      	b.n	8008b5e <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d06f      	beq.n	8008c48 <pvPortMalloc+0x154>
 8008b68:	4b45      	ldr	r3, [pc, #276]	@ (8008c80 <pvPortMalloc+0x18c>)
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	687a      	ldr	r2, [r7, #4]
 8008b6e:	429a      	cmp	r2, r3
 8008b70:	d86a      	bhi.n	8008c48 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008b72:	4b44      	ldr	r3, [pc, #272]	@ (8008c84 <pvPortMalloc+0x190>)
 8008b74:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008b76:	4b43      	ldr	r3, [pc, #268]	@ (8008c84 <pvPortMalloc+0x190>)
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008b7c:	e004      	b.n	8008b88 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008b7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b80:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008b88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b8a:	685b      	ldr	r3, [r3, #4]
 8008b8c:	687a      	ldr	r2, [r7, #4]
 8008b8e:	429a      	cmp	r2, r3
 8008b90:	d903      	bls.n	8008b9a <pvPortMalloc+0xa6>
 8008b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d1f1      	bne.n	8008b7e <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008b9a:	4b37      	ldr	r3, [pc, #220]	@ (8008c78 <pvPortMalloc+0x184>)
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008ba0:	429a      	cmp	r2, r3
 8008ba2:	d051      	beq.n	8008c48 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008ba4:	6a3b      	ldr	r3, [r7, #32]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	2208      	movs	r2, #8
 8008baa:	4413      	add	r3, r2
 8008bac:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bb0:	681a      	ldr	r2, [r3, #0]
 8008bb2:	6a3b      	ldr	r3, [r7, #32]
 8008bb4:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bb8:	685a      	ldr	r2, [r3, #4]
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	1ad2      	subs	r2, r2, r3
 8008bbe:	2308      	movs	r3, #8
 8008bc0:	005b      	lsls	r3, r3, #1
 8008bc2:	429a      	cmp	r2, r3
 8008bc4:	d920      	bls.n	8008c08 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008bc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	4413      	add	r3, r2
 8008bcc:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008bce:	69bb      	ldr	r3, [r7, #24]
 8008bd0:	f003 0307 	and.w	r3, r3, #7
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d00b      	beq.n	8008bf0 <pvPortMalloc+0xfc>
	__asm volatile
 8008bd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bdc:	f383 8811 	msr	BASEPRI, r3
 8008be0:	f3bf 8f6f 	isb	sy
 8008be4:	f3bf 8f4f 	dsb	sy
 8008be8:	613b      	str	r3, [r7, #16]
}
 8008bea:	bf00      	nop
 8008bec:	bf00      	nop
 8008bee:	e7fd      	b.n	8008bec <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bf2:	685a      	ldr	r2, [r3, #4]
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	1ad2      	subs	r2, r2, r3
 8008bf8:	69bb      	ldr	r3, [r7, #24]
 8008bfa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008bfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bfe:	687a      	ldr	r2, [r7, #4]
 8008c00:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008c02:	69b8      	ldr	r0, [r7, #24]
 8008c04:	f000 f90a 	bl	8008e1c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008c08:	4b1d      	ldr	r3, [pc, #116]	@ (8008c80 <pvPortMalloc+0x18c>)
 8008c0a:	681a      	ldr	r2, [r3, #0]
 8008c0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c0e:	685b      	ldr	r3, [r3, #4]
 8008c10:	1ad3      	subs	r3, r2, r3
 8008c12:	4a1b      	ldr	r2, [pc, #108]	@ (8008c80 <pvPortMalloc+0x18c>)
 8008c14:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008c16:	4b1a      	ldr	r3, [pc, #104]	@ (8008c80 <pvPortMalloc+0x18c>)
 8008c18:	681a      	ldr	r2, [r3, #0]
 8008c1a:	4b1b      	ldr	r3, [pc, #108]	@ (8008c88 <pvPortMalloc+0x194>)
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	429a      	cmp	r2, r3
 8008c20:	d203      	bcs.n	8008c2a <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008c22:	4b17      	ldr	r3, [pc, #92]	@ (8008c80 <pvPortMalloc+0x18c>)
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	4a18      	ldr	r2, [pc, #96]	@ (8008c88 <pvPortMalloc+0x194>)
 8008c28:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c2c:	685a      	ldr	r2, [r3, #4]
 8008c2e:	4b13      	ldr	r3, [pc, #76]	@ (8008c7c <pvPortMalloc+0x188>)
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	431a      	orrs	r2, r3
 8008c34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c36:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008c38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008c3e:	4b13      	ldr	r3, [pc, #76]	@ (8008c8c <pvPortMalloc+0x198>)
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	3301      	adds	r3, #1
 8008c44:	4a11      	ldr	r2, [pc, #68]	@ (8008c8c <pvPortMalloc+0x198>)
 8008c46:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008c48:	f7fe fb7c 	bl	8007344 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008c4c:	69fb      	ldr	r3, [r7, #28]
 8008c4e:	f003 0307 	and.w	r3, r3, #7
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d00b      	beq.n	8008c6e <pvPortMalloc+0x17a>
	__asm volatile
 8008c56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c5a:	f383 8811 	msr	BASEPRI, r3
 8008c5e:	f3bf 8f6f 	isb	sy
 8008c62:	f3bf 8f4f 	dsb	sy
 8008c66:	60fb      	str	r3, [r7, #12]
}
 8008c68:	bf00      	nop
 8008c6a:	bf00      	nop
 8008c6c:	e7fd      	b.n	8008c6a <pvPortMalloc+0x176>
	return pvReturn;
 8008c6e:	69fb      	ldr	r3, [r7, #28]
}
 8008c70:	4618      	mov	r0, r3
 8008c72:	3728      	adds	r7, #40	@ 0x28
 8008c74:	46bd      	mov	sp, r7
 8008c76:	bd80      	pop	{r7, pc}
 8008c78:	24004cc0 	.word	0x24004cc0
 8008c7c:	24004cd4 	.word	0x24004cd4
 8008c80:	24004cc4 	.word	0x24004cc4
 8008c84:	24004cb8 	.word	0x24004cb8
 8008c88:	24004cc8 	.word	0x24004cc8
 8008c8c:	24004ccc 	.word	0x24004ccc

08008c90 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008c90:	b580      	push	{r7, lr}
 8008c92:	b086      	sub	sp, #24
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d04f      	beq.n	8008d42 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008ca2:	2308      	movs	r3, #8
 8008ca4:	425b      	negs	r3, r3
 8008ca6:	697a      	ldr	r2, [r7, #20]
 8008ca8:	4413      	add	r3, r2
 8008caa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008cac:	697b      	ldr	r3, [r7, #20]
 8008cae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008cb0:	693b      	ldr	r3, [r7, #16]
 8008cb2:	685a      	ldr	r2, [r3, #4]
 8008cb4:	4b25      	ldr	r3, [pc, #148]	@ (8008d4c <vPortFree+0xbc>)
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	4013      	ands	r3, r2
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d10b      	bne.n	8008cd6 <vPortFree+0x46>
	__asm volatile
 8008cbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cc2:	f383 8811 	msr	BASEPRI, r3
 8008cc6:	f3bf 8f6f 	isb	sy
 8008cca:	f3bf 8f4f 	dsb	sy
 8008cce:	60fb      	str	r3, [r7, #12]
}
 8008cd0:	bf00      	nop
 8008cd2:	bf00      	nop
 8008cd4:	e7fd      	b.n	8008cd2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008cd6:	693b      	ldr	r3, [r7, #16]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d00b      	beq.n	8008cf6 <vPortFree+0x66>
	__asm volatile
 8008cde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ce2:	f383 8811 	msr	BASEPRI, r3
 8008ce6:	f3bf 8f6f 	isb	sy
 8008cea:	f3bf 8f4f 	dsb	sy
 8008cee:	60bb      	str	r3, [r7, #8]
}
 8008cf0:	bf00      	nop
 8008cf2:	bf00      	nop
 8008cf4:	e7fd      	b.n	8008cf2 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008cf6:	693b      	ldr	r3, [r7, #16]
 8008cf8:	685a      	ldr	r2, [r3, #4]
 8008cfa:	4b14      	ldr	r3, [pc, #80]	@ (8008d4c <vPortFree+0xbc>)
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	4013      	ands	r3, r2
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d01e      	beq.n	8008d42 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008d04:	693b      	ldr	r3, [r7, #16]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d11a      	bne.n	8008d42 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008d0c:	693b      	ldr	r3, [r7, #16]
 8008d0e:	685a      	ldr	r2, [r3, #4]
 8008d10:	4b0e      	ldr	r3, [pc, #56]	@ (8008d4c <vPortFree+0xbc>)
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	43db      	mvns	r3, r3
 8008d16:	401a      	ands	r2, r3
 8008d18:	693b      	ldr	r3, [r7, #16]
 8008d1a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008d1c:	f7fe facc 	bl	80072b8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008d20:	693b      	ldr	r3, [r7, #16]
 8008d22:	685a      	ldr	r2, [r3, #4]
 8008d24:	4b0a      	ldr	r3, [pc, #40]	@ (8008d50 <vPortFree+0xc0>)
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	4413      	add	r3, r2
 8008d2a:	4a09      	ldr	r2, [pc, #36]	@ (8008d50 <vPortFree+0xc0>)
 8008d2c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008d2e:	6938      	ldr	r0, [r7, #16]
 8008d30:	f000 f874 	bl	8008e1c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008d34:	4b07      	ldr	r3, [pc, #28]	@ (8008d54 <vPortFree+0xc4>)
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	3301      	adds	r3, #1
 8008d3a:	4a06      	ldr	r2, [pc, #24]	@ (8008d54 <vPortFree+0xc4>)
 8008d3c:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008d3e:	f7fe fb01 	bl	8007344 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008d42:	bf00      	nop
 8008d44:	3718      	adds	r7, #24
 8008d46:	46bd      	mov	sp, r7
 8008d48:	bd80      	pop	{r7, pc}
 8008d4a:	bf00      	nop
 8008d4c:	24004cd4 	.word	0x24004cd4
 8008d50:	24004cc4 	.word	0x24004cc4
 8008d54:	24004cd0 	.word	0x24004cd0

08008d58 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008d58:	b480      	push	{r7}
 8008d5a:	b085      	sub	sp, #20
 8008d5c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008d5e:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8008d62:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008d64:	4b27      	ldr	r3, [pc, #156]	@ (8008e04 <prvHeapInit+0xac>)
 8008d66:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	f003 0307 	and.w	r3, r3, #7
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d00c      	beq.n	8008d8c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	3307      	adds	r3, #7
 8008d76:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	f023 0307 	bic.w	r3, r3, #7
 8008d7e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008d80:	68ba      	ldr	r2, [r7, #8]
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	1ad3      	subs	r3, r2, r3
 8008d86:	4a1f      	ldr	r2, [pc, #124]	@ (8008e04 <prvHeapInit+0xac>)
 8008d88:	4413      	add	r3, r2
 8008d8a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008d90:	4a1d      	ldr	r2, [pc, #116]	@ (8008e08 <prvHeapInit+0xb0>)
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008d96:	4b1c      	ldr	r3, [pc, #112]	@ (8008e08 <prvHeapInit+0xb0>)
 8008d98:	2200      	movs	r2, #0
 8008d9a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	68ba      	ldr	r2, [r7, #8]
 8008da0:	4413      	add	r3, r2
 8008da2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008da4:	2208      	movs	r2, #8
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	1a9b      	subs	r3, r3, r2
 8008daa:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	f023 0307 	bic.w	r3, r3, #7
 8008db2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	4a15      	ldr	r2, [pc, #84]	@ (8008e0c <prvHeapInit+0xb4>)
 8008db8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008dba:	4b14      	ldr	r3, [pc, #80]	@ (8008e0c <prvHeapInit+0xb4>)
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	2200      	movs	r2, #0
 8008dc0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008dc2:	4b12      	ldr	r3, [pc, #72]	@ (8008e0c <prvHeapInit+0xb4>)
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	2200      	movs	r2, #0
 8008dc8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008dce:	683b      	ldr	r3, [r7, #0]
 8008dd0:	68fa      	ldr	r2, [r7, #12]
 8008dd2:	1ad2      	subs	r2, r2, r3
 8008dd4:	683b      	ldr	r3, [r7, #0]
 8008dd6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008dd8:	4b0c      	ldr	r3, [pc, #48]	@ (8008e0c <prvHeapInit+0xb4>)
 8008dda:	681a      	ldr	r2, [r3, #0]
 8008ddc:	683b      	ldr	r3, [r7, #0]
 8008dde:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008de0:	683b      	ldr	r3, [r7, #0]
 8008de2:	685b      	ldr	r3, [r3, #4]
 8008de4:	4a0a      	ldr	r2, [pc, #40]	@ (8008e10 <prvHeapInit+0xb8>)
 8008de6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008de8:	683b      	ldr	r3, [r7, #0]
 8008dea:	685b      	ldr	r3, [r3, #4]
 8008dec:	4a09      	ldr	r2, [pc, #36]	@ (8008e14 <prvHeapInit+0xbc>)
 8008dee:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008df0:	4b09      	ldr	r3, [pc, #36]	@ (8008e18 <prvHeapInit+0xc0>)
 8008df2:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008df6:	601a      	str	r2, [r3, #0]
}
 8008df8:	bf00      	nop
 8008dfa:	3714      	adds	r7, #20
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e02:	4770      	bx	lr
 8008e04:	240010b8 	.word	0x240010b8
 8008e08:	24004cb8 	.word	0x24004cb8
 8008e0c:	24004cc0 	.word	0x24004cc0
 8008e10:	24004cc8 	.word	0x24004cc8
 8008e14:	24004cc4 	.word	0x24004cc4
 8008e18:	24004cd4 	.word	0x24004cd4

08008e1c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008e1c:	b480      	push	{r7}
 8008e1e:	b085      	sub	sp, #20
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008e24:	4b28      	ldr	r3, [pc, #160]	@ (8008ec8 <prvInsertBlockIntoFreeList+0xac>)
 8008e26:	60fb      	str	r3, [r7, #12]
 8008e28:	e002      	b.n	8008e30 <prvInsertBlockIntoFreeList+0x14>
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	60fb      	str	r3, [r7, #12]
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	687a      	ldr	r2, [r7, #4]
 8008e36:	429a      	cmp	r2, r3
 8008e38:	d8f7      	bhi.n	8008e2a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	685b      	ldr	r3, [r3, #4]
 8008e42:	68ba      	ldr	r2, [r7, #8]
 8008e44:	4413      	add	r3, r2
 8008e46:	687a      	ldr	r2, [r7, #4]
 8008e48:	429a      	cmp	r2, r3
 8008e4a:	d108      	bne.n	8008e5e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	685a      	ldr	r2, [r3, #4]
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	685b      	ldr	r3, [r3, #4]
 8008e54:	441a      	add	r2, r3
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	685b      	ldr	r3, [r3, #4]
 8008e66:	68ba      	ldr	r2, [r7, #8]
 8008e68:	441a      	add	r2, r3
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	429a      	cmp	r2, r3
 8008e70:	d118      	bne.n	8008ea4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	681a      	ldr	r2, [r3, #0]
 8008e76:	4b15      	ldr	r3, [pc, #84]	@ (8008ecc <prvInsertBlockIntoFreeList+0xb0>)
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	429a      	cmp	r2, r3
 8008e7c:	d00d      	beq.n	8008e9a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	685a      	ldr	r2, [r3, #4]
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	685b      	ldr	r3, [r3, #4]
 8008e88:	441a      	add	r2, r3
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	681a      	ldr	r2, [r3, #0]
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	601a      	str	r2, [r3, #0]
 8008e98:	e008      	b.n	8008eac <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008e9a:	4b0c      	ldr	r3, [pc, #48]	@ (8008ecc <prvInsertBlockIntoFreeList+0xb0>)
 8008e9c:	681a      	ldr	r2, [r3, #0]
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	601a      	str	r2, [r3, #0]
 8008ea2:	e003      	b.n	8008eac <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	681a      	ldr	r2, [r3, #0]
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008eac:	68fa      	ldr	r2, [r7, #12]
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	429a      	cmp	r2, r3
 8008eb2:	d002      	beq.n	8008eba <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	687a      	ldr	r2, [r7, #4]
 8008eb8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008eba:	bf00      	nop
 8008ebc:	3714      	adds	r7, #20
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec4:	4770      	bx	lr
 8008ec6:	bf00      	nop
 8008ec8:	24004cb8 	.word	0x24004cb8
 8008ecc:	24004cc0 	.word	0x24004cc0

08008ed0 <__cvt>:
 8008ed0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008ed2:	ed2d 8b02 	vpush	{d8}
 8008ed6:	eeb0 8b40 	vmov.f64	d8, d0
 8008eda:	b085      	sub	sp, #20
 8008edc:	4617      	mov	r7, r2
 8008ede:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8008ee0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008ee2:	ee18 2a90 	vmov	r2, s17
 8008ee6:	f025 0520 	bic.w	r5, r5, #32
 8008eea:	2a00      	cmp	r2, #0
 8008eec:	bfb6      	itet	lt
 8008eee:	222d      	movlt	r2, #45	@ 0x2d
 8008ef0:	2200      	movge	r2, #0
 8008ef2:	eeb1 8b40 	vneglt.f64	d8, d0
 8008ef6:	2d46      	cmp	r5, #70	@ 0x46
 8008ef8:	460c      	mov	r4, r1
 8008efa:	701a      	strb	r2, [r3, #0]
 8008efc:	d004      	beq.n	8008f08 <__cvt+0x38>
 8008efe:	2d45      	cmp	r5, #69	@ 0x45
 8008f00:	d100      	bne.n	8008f04 <__cvt+0x34>
 8008f02:	3401      	adds	r4, #1
 8008f04:	2102      	movs	r1, #2
 8008f06:	e000      	b.n	8008f0a <__cvt+0x3a>
 8008f08:	2103      	movs	r1, #3
 8008f0a:	ab03      	add	r3, sp, #12
 8008f0c:	9301      	str	r3, [sp, #4]
 8008f0e:	ab02      	add	r3, sp, #8
 8008f10:	9300      	str	r3, [sp, #0]
 8008f12:	4622      	mov	r2, r4
 8008f14:	4633      	mov	r3, r6
 8008f16:	eeb0 0b48 	vmov.f64	d0, d8
 8008f1a:	f001 f9b9 	bl	800a290 <_dtoa_r>
 8008f1e:	2d47      	cmp	r5, #71	@ 0x47
 8008f20:	d114      	bne.n	8008f4c <__cvt+0x7c>
 8008f22:	07fb      	lsls	r3, r7, #31
 8008f24:	d50a      	bpl.n	8008f3c <__cvt+0x6c>
 8008f26:	1902      	adds	r2, r0, r4
 8008f28:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8008f2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f30:	bf08      	it	eq
 8008f32:	9203      	streq	r2, [sp, #12]
 8008f34:	2130      	movs	r1, #48	@ 0x30
 8008f36:	9b03      	ldr	r3, [sp, #12]
 8008f38:	4293      	cmp	r3, r2
 8008f3a:	d319      	bcc.n	8008f70 <__cvt+0xa0>
 8008f3c:	9b03      	ldr	r3, [sp, #12]
 8008f3e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008f40:	1a1b      	subs	r3, r3, r0
 8008f42:	6013      	str	r3, [r2, #0]
 8008f44:	b005      	add	sp, #20
 8008f46:	ecbd 8b02 	vpop	{d8}
 8008f4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f4c:	2d46      	cmp	r5, #70	@ 0x46
 8008f4e:	eb00 0204 	add.w	r2, r0, r4
 8008f52:	d1e9      	bne.n	8008f28 <__cvt+0x58>
 8008f54:	7803      	ldrb	r3, [r0, #0]
 8008f56:	2b30      	cmp	r3, #48	@ 0x30
 8008f58:	d107      	bne.n	8008f6a <__cvt+0x9a>
 8008f5a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8008f5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f62:	bf1c      	itt	ne
 8008f64:	f1c4 0401 	rsbne	r4, r4, #1
 8008f68:	6034      	strne	r4, [r6, #0]
 8008f6a:	6833      	ldr	r3, [r6, #0]
 8008f6c:	441a      	add	r2, r3
 8008f6e:	e7db      	b.n	8008f28 <__cvt+0x58>
 8008f70:	1c5c      	adds	r4, r3, #1
 8008f72:	9403      	str	r4, [sp, #12]
 8008f74:	7019      	strb	r1, [r3, #0]
 8008f76:	e7de      	b.n	8008f36 <__cvt+0x66>

08008f78 <__exponent>:
 8008f78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008f7a:	2900      	cmp	r1, #0
 8008f7c:	bfba      	itte	lt
 8008f7e:	4249      	neglt	r1, r1
 8008f80:	232d      	movlt	r3, #45	@ 0x2d
 8008f82:	232b      	movge	r3, #43	@ 0x2b
 8008f84:	2909      	cmp	r1, #9
 8008f86:	7002      	strb	r2, [r0, #0]
 8008f88:	7043      	strb	r3, [r0, #1]
 8008f8a:	dd29      	ble.n	8008fe0 <__exponent+0x68>
 8008f8c:	f10d 0307 	add.w	r3, sp, #7
 8008f90:	461d      	mov	r5, r3
 8008f92:	270a      	movs	r7, #10
 8008f94:	461a      	mov	r2, r3
 8008f96:	fbb1 f6f7 	udiv	r6, r1, r7
 8008f9a:	fb07 1416 	mls	r4, r7, r6, r1
 8008f9e:	3430      	adds	r4, #48	@ 0x30
 8008fa0:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008fa4:	460c      	mov	r4, r1
 8008fa6:	2c63      	cmp	r4, #99	@ 0x63
 8008fa8:	f103 33ff 	add.w	r3, r3, #4294967295
 8008fac:	4631      	mov	r1, r6
 8008fae:	dcf1      	bgt.n	8008f94 <__exponent+0x1c>
 8008fb0:	3130      	adds	r1, #48	@ 0x30
 8008fb2:	1e94      	subs	r4, r2, #2
 8008fb4:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008fb8:	1c41      	adds	r1, r0, #1
 8008fba:	4623      	mov	r3, r4
 8008fbc:	42ab      	cmp	r3, r5
 8008fbe:	d30a      	bcc.n	8008fd6 <__exponent+0x5e>
 8008fc0:	f10d 0309 	add.w	r3, sp, #9
 8008fc4:	1a9b      	subs	r3, r3, r2
 8008fc6:	42ac      	cmp	r4, r5
 8008fc8:	bf88      	it	hi
 8008fca:	2300      	movhi	r3, #0
 8008fcc:	3302      	adds	r3, #2
 8008fce:	4403      	add	r3, r0
 8008fd0:	1a18      	subs	r0, r3, r0
 8008fd2:	b003      	add	sp, #12
 8008fd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008fd6:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008fda:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008fde:	e7ed      	b.n	8008fbc <__exponent+0x44>
 8008fe0:	2330      	movs	r3, #48	@ 0x30
 8008fe2:	3130      	adds	r1, #48	@ 0x30
 8008fe4:	7083      	strb	r3, [r0, #2]
 8008fe6:	70c1      	strb	r1, [r0, #3]
 8008fe8:	1d03      	adds	r3, r0, #4
 8008fea:	e7f1      	b.n	8008fd0 <__exponent+0x58>
 8008fec:	0000      	movs	r0, r0
	...

08008ff0 <_printf_float>:
 8008ff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ff4:	b08d      	sub	sp, #52	@ 0x34
 8008ff6:	460c      	mov	r4, r1
 8008ff8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008ffc:	4616      	mov	r6, r2
 8008ffe:	461f      	mov	r7, r3
 8009000:	4605      	mov	r5, r0
 8009002:	f000 ffdb 	bl	8009fbc <_localeconv_r>
 8009006:	f8d0 b000 	ldr.w	fp, [r0]
 800900a:	4658      	mov	r0, fp
 800900c:	f7f7 f9c0 	bl	8000390 <strlen>
 8009010:	2300      	movs	r3, #0
 8009012:	930a      	str	r3, [sp, #40]	@ 0x28
 8009014:	f8d8 3000 	ldr.w	r3, [r8]
 8009018:	f894 9018 	ldrb.w	r9, [r4, #24]
 800901c:	6822      	ldr	r2, [r4, #0]
 800901e:	9005      	str	r0, [sp, #20]
 8009020:	3307      	adds	r3, #7
 8009022:	f023 0307 	bic.w	r3, r3, #7
 8009026:	f103 0108 	add.w	r1, r3, #8
 800902a:	f8c8 1000 	str.w	r1, [r8]
 800902e:	ed93 0b00 	vldr	d0, [r3]
 8009032:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8009290 <_printf_float+0x2a0>
 8009036:	eeb0 7bc0 	vabs.f64	d7, d0
 800903a:	eeb4 7b46 	vcmp.f64	d7, d6
 800903e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009042:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 8009046:	dd24      	ble.n	8009092 <_printf_float+0xa2>
 8009048:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800904c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009050:	d502      	bpl.n	8009058 <_printf_float+0x68>
 8009052:	232d      	movs	r3, #45	@ 0x2d
 8009054:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009058:	498f      	ldr	r1, [pc, #572]	@ (8009298 <_printf_float+0x2a8>)
 800905a:	4b90      	ldr	r3, [pc, #576]	@ (800929c <_printf_float+0x2ac>)
 800905c:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8009060:	bf94      	ite	ls
 8009062:	4688      	movls	r8, r1
 8009064:	4698      	movhi	r8, r3
 8009066:	f022 0204 	bic.w	r2, r2, #4
 800906a:	2303      	movs	r3, #3
 800906c:	6123      	str	r3, [r4, #16]
 800906e:	6022      	str	r2, [r4, #0]
 8009070:	f04f 0a00 	mov.w	sl, #0
 8009074:	9700      	str	r7, [sp, #0]
 8009076:	4633      	mov	r3, r6
 8009078:	aa0b      	add	r2, sp, #44	@ 0x2c
 800907a:	4621      	mov	r1, r4
 800907c:	4628      	mov	r0, r5
 800907e:	f000 f9d1 	bl	8009424 <_printf_common>
 8009082:	3001      	adds	r0, #1
 8009084:	f040 8089 	bne.w	800919a <_printf_float+0x1aa>
 8009088:	f04f 30ff 	mov.w	r0, #4294967295
 800908c:	b00d      	add	sp, #52	@ 0x34
 800908e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009092:	eeb4 0b40 	vcmp.f64	d0, d0
 8009096:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800909a:	d709      	bvc.n	80090b0 <_printf_float+0xc0>
 800909c:	ee10 3a90 	vmov	r3, s1
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	bfbc      	itt	lt
 80090a4:	232d      	movlt	r3, #45	@ 0x2d
 80090a6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80090aa:	497d      	ldr	r1, [pc, #500]	@ (80092a0 <_printf_float+0x2b0>)
 80090ac:	4b7d      	ldr	r3, [pc, #500]	@ (80092a4 <_printf_float+0x2b4>)
 80090ae:	e7d5      	b.n	800905c <_printf_float+0x6c>
 80090b0:	6863      	ldr	r3, [r4, #4]
 80090b2:	1c59      	adds	r1, r3, #1
 80090b4:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 80090b8:	d139      	bne.n	800912e <_printf_float+0x13e>
 80090ba:	2306      	movs	r3, #6
 80090bc:	6063      	str	r3, [r4, #4]
 80090be:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80090c2:	2300      	movs	r3, #0
 80090c4:	6022      	str	r2, [r4, #0]
 80090c6:	9303      	str	r3, [sp, #12]
 80090c8:	ab0a      	add	r3, sp, #40	@ 0x28
 80090ca:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80090ce:	ab09      	add	r3, sp, #36	@ 0x24
 80090d0:	9300      	str	r3, [sp, #0]
 80090d2:	6861      	ldr	r1, [r4, #4]
 80090d4:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80090d8:	4628      	mov	r0, r5
 80090da:	f7ff fef9 	bl	8008ed0 <__cvt>
 80090de:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80090e2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80090e4:	4680      	mov	r8, r0
 80090e6:	d129      	bne.n	800913c <_printf_float+0x14c>
 80090e8:	1cc8      	adds	r0, r1, #3
 80090ea:	db02      	blt.n	80090f2 <_printf_float+0x102>
 80090ec:	6863      	ldr	r3, [r4, #4]
 80090ee:	4299      	cmp	r1, r3
 80090f0:	dd41      	ble.n	8009176 <_printf_float+0x186>
 80090f2:	f1a9 0902 	sub.w	r9, r9, #2
 80090f6:	fa5f f989 	uxtb.w	r9, r9
 80090fa:	3901      	subs	r1, #1
 80090fc:	464a      	mov	r2, r9
 80090fe:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009102:	9109      	str	r1, [sp, #36]	@ 0x24
 8009104:	f7ff ff38 	bl	8008f78 <__exponent>
 8009108:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800910a:	1813      	adds	r3, r2, r0
 800910c:	2a01      	cmp	r2, #1
 800910e:	4682      	mov	sl, r0
 8009110:	6123      	str	r3, [r4, #16]
 8009112:	dc02      	bgt.n	800911a <_printf_float+0x12a>
 8009114:	6822      	ldr	r2, [r4, #0]
 8009116:	07d2      	lsls	r2, r2, #31
 8009118:	d501      	bpl.n	800911e <_printf_float+0x12e>
 800911a:	3301      	adds	r3, #1
 800911c:	6123      	str	r3, [r4, #16]
 800911e:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8009122:	2b00      	cmp	r3, #0
 8009124:	d0a6      	beq.n	8009074 <_printf_float+0x84>
 8009126:	232d      	movs	r3, #45	@ 0x2d
 8009128:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800912c:	e7a2      	b.n	8009074 <_printf_float+0x84>
 800912e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009132:	d1c4      	bne.n	80090be <_printf_float+0xce>
 8009134:	2b00      	cmp	r3, #0
 8009136:	d1c2      	bne.n	80090be <_printf_float+0xce>
 8009138:	2301      	movs	r3, #1
 800913a:	e7bf      	b.n	80090bc <_printf_float+0xcc>
 800913c:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8009140:	d9db      	bls.n	80090fa <_printf_float+0x10a>
 8009142:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 8009146:	d118      	bne.n	800917a <_printf_float+0x18a>
 8009148:	2900      	cmp	r1, #0
 800914a:	6863      	ldr	r3, [r4, #4]
 800914c:	dd0b      	ble.n	8009166 <_printf_float+0x176>
 800914e:	6121      	str	r1, [r4, #16]
 8009150:	b913      	cbnz	r3, 8009158 <_printf_float+0x168>
 8009152:	6822      	ldr	r2, [r4, #0]
 8009154:	07d0      	lsls	r0, r2, #31
 8009156:	d502      	bpl.n	800915e <_printf_float+0x16e>
 8009158:	3301      	adds	r3, #1
 800915a:	440b      	add	r3, r1
 800915c:	6123      	str	r3, [r4, #16]
 800915e:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009160:	f04f 0a00 	mov.w	sl, #0
 8009164:	e7db      	b.n	800911e <_printf_float+0x12e>
 8009166:	b913      	cbnz	r3, 800916e <_printf_float+0x17e>
 8009168:	6822      	ldr	r2, [r4, #0]
 800916a:	07d2      	lsls	r2, r2, #31
 800916c:	d501      	bpl.n	8009172 <_printf_float+0x182>
 800916e:	3302      	adds	r3, #2
 8009170:	e7f4      	b.n	800915c <_printf_float+0x16c>
 8009172:	2301      	movs	r3, #1
 8009174:	e7f2      	b.n	800915c <_printf_float+0x16c>
 8009176:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800917a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800917c:	4299      	cmp	r1, r3
 800917e:	db05      	blt.n	800918c <_printf_float+0x19c>
 8009180:	6823      	ldr	r3, [r4, #0]
 8009182:	6121      	str	r1, [r4, #16]
 8009184:	07d8      	lsls	r0, r3, #31
 8009186:	d5ea      	bpl.n	800915e <_printf_float+0x16e>
 8009188:	1c4b      	adds	r3, r1, #1
 800918a:	e7e7      	b.n	800915c <_printf_float+0x16c>
 800918c:	2900      	cmp	r1, #0
 800918e:	bfd4      	ite	le
 8009190:	f1c1 0202 	rsble	r2, r1, #2
 8009194:	2201      	movgt	r2, #1
 8009196:	4413      	add	r3, r2
 8009198:	e7e0      	b.n	800915c <_printf_float+0x16c>
 800919a:	6823      	ldr	r3, [r4, #0]
 800919c:	055a      	lsls	r2, r3, #21
 800919e:	d407      	bmi.n	80091b0 <_printf_float+0x1c0>
 80091a0:	6923      	ldr	r3, [r4, #16]
 80091a2:	4642      	mov	r2, r8
 80091a4:	4631      	mov	r1, r6
 80091a6:	4628      	mov	r0, r5
 80091a8:	47b8      	blx	r7
 80091aa:	3001      	adds	r0, #1
 80091ac:	d12a      	bne.n	8009204 <_printf_float+0x214>
 80091ae:	e76b      	b.n	8009088 <_printf_float+0x98>
 80091b0:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 80091b4:	f240 80e0 	bls.w	8009378 <_printf_float+0x388>
 80091b8:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 80091bc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80091c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091c4:	d133      	bne.n	800922e <_printf_float+0x23e>
 80091c6:	4a38      	ldr	r2, [pc, #224]	@ (80092a8 <_printf_float+0x2b8>)
 80091c8:	2301      	movs	r3, #1
 80091ca:	4631      	mov	r1, r6
 80091cc:	4628      	mov	r0, r5
 80091ce:	47b8      	blx	r7
 80091d0:	3001      	adds	r0, #1
 80091d2:	f43f af59 	beq.w	8009088 <_printf_float+0x98>
 80091d6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80091da:	4543      	cmp	r3, r8
 80091dc:	db02      	blt.n	80091e4 <_printf_float+0x1f4>
 80091de:	6823      	ldr	r3, [r4, #0]
 80091e0:	07d8      	lsls	r0, r3, #31
 80091e2:	d50f      	bpl.n	8009204 <_printf_float+0x214>
 80091e4:	9b05      	ldr	r3, [sp, #20]
 80091e6:	465a      	mov	r2, fp
 80091e8:	4631      	mov	r1, r6
 80091ea:	4628      	mov	r0, r5
 80091ec:	47b8      	blx	r7
 80091ee:	3001      	adds	r0, #1
 80091f0:	f43f af4a 	beq.w	8009088 <_printf_float+0x98>
 80091f4:	f04f 0900 	mov.w	r9, #0
 80091f8:	f108 38ff 	add.w	r8, r8, #4294967295
 80091fc:	f104 0a1a 	add.w	sl, r4, #26
 8009200:	45c8      	cmp	r8, r9
 8009202:	dc09      	bgt.n	8009218 <_printf_float+0x228>
 8009204:	6823      	ldr	r3, [r4, #0]
 8009206:	079b      	lsls	r3, r3, #30
 8009208:	f100 8107 	bmi.w	800941a <_printf_float+0x42a>
 800920c:	68e0      	ldr	r0, [r4, #12]
 800920e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009210:	4298      	cmp	r0, r3
 8009212:	bfb8      	it	lt
 8009214:	4618      	movlt	r0, r3
 8009216:	e739      	b.n	800908c <_printf_float+0x9c>
 8009218:	2301      	movs	r3, #1
 800921a:	4652      	mov	r2, sl
 800921c:	4631      	mov	r1, r6
 800921e:	4628      	mov	r0, r5
 8009220:	47b8      	blx	r7
 8009222:	3001      	adds	r0, #1
 8009224:	f43f af30 	beq.w	8009088 <_printf_float+0x98>
 8009228:	f109 0901 	add.w	r9, r9, #1
 800922c:	e7e8      	b.n	8009200 <_printf_float+0x210>
 800922e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009230:	2b00      	cmp	r3, #0
 8009232:	dc3b      	bgt.n	80092ac <_printf_float+0x2bc>
 8009234:	4a1c      	ldr	r2, [pc, #112]	@ (80092a8 <_printf_float+0x2b8>)
 8009236:	2301      	movs	r3, #1
 8009238:	4631      	mov	r1, r6
 800923a:	4628      	mov	r0, r5
 800923c:	47b8      	blx	r7
 800923e:	3001      	adds	r0, #1
 8009240:	f43f af22 	beq.w	8009088 <_printf_float+0x98>
 8009244:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009248:	ea59 0303 	orrs.w	r3, r9, r3
 800924c:	d102      	bne.n	8009254 <_printf_float+0x264>
 800924e:	6823      	ldr	r3, [r4, #0]
 8009250:	07d9      	lsls	r1, r3, #31
 8009252:	d5d7      	bpl.n	8009204 <_printf_float+0x214>
 8009254:	9b05      	ldr	r3, [sp, #20]
 8009256:	465a      	mov	r2, fp
 8009258:	4631      	mov	r1, r6
 800925a:	4628      	mov	r0, r5
 800925c:	47b8      	blx	r7
 800925e:	3001      	adds	r0, #1
 8009260:	f43f af12 	beq.w	8009088 <_printf_float+0x98>
 8009264:	f04f 0a00 	mov.w	sl, #0
 8009268:	f104 0b1a 	add.w	fp, r4, #26
 800926c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800926e:	425b      	negs	r3, r3
 8009270:	4553      	cmp	r3, sl
 8009272:	dc01      	bgt.n	8009278 <_printf_float+0x288>
 8009274:	464b      	mov	r3, r9
 8009276:	e794      	b.n	80091a2 <_printf_float+0x1b2>
 8009278:	2301      	movs	r3, #1
 800927a:	465a      	mov	r2, fp
 800927c:	4631      	mov	r1, r6
 800927e:	4628      	mov	r0, r5
 8009280:	47b8      	blx	r7
 8009282:	3001      	adds	r0, #1
 8009284:	f43f af00 	beq.w	8009088 <_printf_float+0x98>
 8009288:	f10a 0a01 	add.w	sl, sl, #1
 800928c:	e7ee      	b.n	800926c <_printf_float+0x27c>
 800928e:	bf00      	nop
 8009290:	ffffffff 	.word	0xffffffff
 8009294:	7fefffff 	.word	0x7fefffff
 8009298:	0800d630 	.word	0x0800d630
 800929c:	0800d634 	.word	0x0800d634
 80092a0:	0800d638 	.word	0x0800d638
 80092a4:	0800d63c 	.word	0x0800d63c
 80092a8:	0800d640 	.word	0x0800d640
 80092ac:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80092ae:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80092b2:	4553      	cmp	r3, sl
 80092b4:	bfa8      	it	ge
 80092b6:	4653      	movge	r3, sl
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	4699      	mov	r9, r3
 80092bc:	dc37      	bgt.n	800932e <_printf_float+0x33e>
 80092be:	2300      	movs	r3, #0
 80092c0:	9307      	str	r3, [sp, #28]
 80092c2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80092c6:	f104 021a 	add.w	r2, r4, #26
 80092ca:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80092cc:	9907      	ldr	r1, [sp, #28]
 80092ce:	9306      	str	r3, [sp, #24]
 80092d0:	eba3 0309 	sub.w	r3, r3, r9
 80092d4:	428b      	cmp	r3, r1
 80092d6:	dc31      	bgt.n	800933c <_printf_float+0x34c>
 80092d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80092da:	459a      	cmp	sl, r3
 80092dc:	dc3b      	bgt.n	8009356 <_printf_float+0x366>
 80092de:	6823      	ldr	r3, [r4, #0]
 80092e0:	07da      	lsls	r2, r3, #31
 80092e2:	d438      	bmi.n	8009356 <_printf_float+0x366>
 80092e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80092e6:	ebaa 0903 	sub.w	r9, sl, r3
 80092ea:	9b06      	ldr	r3, [sp, #24]
 80092ec:	ebaa 0303 	sub.w	r3, sl, r3
 80092f0:	4599      	cmp	r9, r3
 80092f2:	bfa8      	it	ge
 80092f4:	4699      	movge	r9, r3
 80092f6:	f1b9 0f00 	cmp.w	r9, #0
 80092fa:	dc34      	bgt.n	8009366 <_printf_float+0x376>
 80092fc:	f04f 0800 	mov.w	r8, #0
 8009300:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009304:	f104 0b1a 	add.w	fp, r4, #26
 8009308:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800930a:	ebaa 0303 	sub.w	r3, sl, r3
 800930e:	eba3 0309 	sub.w	r3, r3, r9
 8009312:	4543      	cmp	r3, r8
 8009314:	f77f af76 	ble.w	8009204 <_printf_float+0x214>
 8009318:	2301      	movs	r3, #1
 800931a:	465a      	mov	r2, fp
 800931c:	4631      	mov	r1, r6
 800931e:	4628      	mov	r0, r5
 8009320:	47b8      	blx	r7
 8009322:	3001      	adds	r0, #1
 8009324:	f43f aeb0 	beq.w	8009088 <_printf_float+0x98>
 8009328:	f108 0801 	add.w	r8, r8, #1
 800932c:	e7ec      	b.n	8009308 <_printf_float+0x318>
 800932e:	4642      	mov	r2, r8
 8009330:	4631      	mov	r1, r6
 8009332:	4628      	mov	r0, r5
 8009334:	47b8      	blx	r7
 8009336:	3001      	adds	r0, #1
 8009338:	d1c1      	bne.n	80092be <_printf_float+0x2ce>
 800933a:	e6a5      	b.n	8009088 <_printf_float+0x98>
 800933c:	2301      	movs	r3, #1
 800933e:	4631      	mov	r1, r6
 8009340:	4628      	mov	r0, r5
 8009342:	9206      	str	r2, [sp, #24]
 8009344:	47b8      	blx	r7
 8009346:	3001      	adds	r0, #1
 8009348:	f43f ae9e 	beq.w	8009088 <_printf_float+0x98>
 800934c:	9b07      	ldr	r3, [sp, #28]
 800934e:	9a06      	ldr	r2, [sp, #24]
 8009350:	3301      	adds	r3, #1
 8009352:	9307      	str	r3, [sp, #28]
 8009354:	e7b9      	b.n	80092ca <_printf_float+0x2da>
 8009356:	9b05      	ldr	r3, [sp, #20]
 8009358:	465a      	mov	r2, fp
 800935a:	4631      	mov	r1, r6
 800935c:	4628      	mov	r0, r5
 800935e:	47b8      	blx	r7
 8009360:	3001      	adds	r0, #1
 8009362:	d1bf      	bne.n	80092e4 <_printf_float+0x2f4>
 8009364:	e690      	b.n	8009088 <_printf_float+0x98>
 8009366:	9a06      	ldr	r2, [sp, #24]
 8009368:	464b      	mov	r3, r9
 800936a:	4442      	add	r2, r8
 800936c:	4631      	mov	r1, r6
 800936e:	4628      	mov	r0, r5
 8009370:	47b8      	blx	r7
 8009372:	3001      	adds	r0, #1
 8009374:	d1c2      	bne.n	80092fc <_printf_float+0x30c>
 8009376:	e687      	b.n	8009088 <_printf_float+0x98>
 8009378:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800937c:	f1b9 0f01 	cmp.w	r9, #1
 8009380:	dc01      	bgt.n	8009386 <_printf_float+0x396>
 8009382:	07db      	lsls	r3, r3, #31
 8009384:	d536      	bpl.n	80093f4 <_printf_float+0x404>
 8009386:	2301      	movs	r3, #1
 8009388:	4642      	mov	r2, r8
 800938a:	4631      	mov	r1, r6
 800938c:	4628      	mov	r0, r5
 800938e:	47b8      	blx	r7
 8009390:	3001      	adds	r0, #1
 8009392:	f43f ae79 	beq.w	8009088 <_printf_float+0x98>
 8009396:	9b05      	ldr	r3, [sp, #20]
 8009398:	465a      	mov	r2, fp
 800939a:	4631      	mov	r1, r6
 800939c:	4628      	mov	r0, r5
 800939e:	47b8      	blx	r7
 80093a0:	3001      	adds	r0, #1
 80093a2:	f43f ae71 	beq.w	8009088 <_printf_float+0x98>
 80093a6:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 80093aa:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80093ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093b2:	f109 39ff 	add.w	r9, r9, #4294967295
 80093b6:	d018      	beq.n	80093ea <_printf_float+0x3fa>
 80093b8:	464b      	mov	r3, r9
 80093ba:	f108 0201 	add.w	r2, r8, #1
 80093be:	4631      	mov	r1, r6
 80093c0:	4628      	mov	r0, r5
 80093c2:	47b8      	blx	r7
 80093c4:	3001      	adds	r0, #1
 80093c6:	d10c      	bne.n	80093e2 <_printf_float+0x3f2>
 80093c8:	e65e      	b.n	8009088 <_printf_float+0x98>
 80093ca:	2301      	movs	r3, #1
 80093cc:	465a      	mov	r2, fp
 80093ce:	4631      	mov	r1, r6
 80093d0:	4628      	mov	r0, r5
 80093d2:	47b8      	blx	r7
 80093d4:	3001      	adds	r0, #1
 80093d6:	f43f ae57 	beq.w	8009088 <_printf_float+0x98>
 80093da:	f108 0801 	add.w	r8, r8, #1
 80093de:	45c8      	cmp	r8, r9
 80093e0:	dbf3      	blt.n	80093ca <_printf_float+0x3da>
 80093e2:	4653      	mov	r3, sl
 80093e4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80093e8:	e6dc      	b.n	80091a4 <_printf_float+0x1b4>
 80093ea:	f04f 0800 	mov.w	r8, #0
 80093ee:	f104 0b1a 	add.w	fp, r4, #26
 80093f2:	e7f4      	b.n	80093de <_printf_float+0x3ee>
 80093f4:	2301      	movs	r3, #1
 80093f6:	4642      	mov	r2, r8
 80093f8:	e7e1      	b.n	80093be <_printf_float+0x3ce>
 80093fa:	2301      	movs	r3, #1
 80093fc:	464a      	mov	r2, r9
 80093fe:	4631      	mov	r1, r6
 8009400:	4628      	mov	r0, r5
 8009402:	47b8      	blx	r7
 8009404:	3001      	adds	r0, #1
 8009406:	f43f ae3f 	beq.w	8009088 <_printf_float+0x98>
 800940a:	f108 0801 	add.w	r8, r8, #1
 800940e:	68e3      	ldr	r3, [r4, #12]
 8009410:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009412:	1a5b      	subs	r3, r3, r1
 8009414:	4543      	cmp	r3, r8
 8009416:	dcf0      	bgt.n	80093fa <_printf_float+0x40a>
 8009418:	e6f8      	b.n	800920c <_printf_float+0x21c>
 800941a:	f04f 0800 	mov.w	r8, #0
 800941e:	f104 0919 	add.w	r9, r4, #25
 8009422:	e7f4      	b.n	800940e <_printf_float+0x41e>

08009424 <_printf_common>:
 8009424:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009428:	4616      	mov	r6, r2
 800942a:	4698      	mov	r8, r3
 800942c:	688a      	ldr	r2, [r1, #8]
 800942e:	690b      	ldr	r3, [r1, #16]
 8009430:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009434:	4293      	cmp	r3, r2
 8009436:	bfb8      	it	lt
 8009438:	4613      	movlt	r3, r2
 800943a:	6033      	str	r3, [r6, #0]
 800943c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009440:	4607      	mov	r7, r0
 8009442:	460c      	mov	r4, r1
 8009444:	b10a      	cbz	r2, 800944a <_printf_common+0x26>
 8009446:	3301      	adds	r3, #1
 8009448:	6033      	str	r3, [r6, #0]
 800944a:	6823      	ldr	r3, [r4, #0]
 800944c:	0699      	lsls	r1, r3, #26
 800944e:	bf42      	ittt	mi
 8009450:	6833      	ldrmi	r3, [r6, #0]
 8009452:	3302      	addmi	r3, #2
 8009454:	6033      	strmi	r3, [r6, #0]
 8009456:	6825      	ldr	r5, [r4, #0]
 8009458:	f015 0506 	ands.w	r5, r5, #6
 800945c:	d106      	bne.n	800946c <_printf_common+0x48>
 800945e:	f104 0a19 	add.w	sl, r4, #25
 8009462:	68e3      	ldr	r3, [r4, #12]
 8009464:	6832      	ldr	r2, [r6, #0]
 8009466:	1a9b      	subs	r3, r3, r2
 8009468:	42ab      	cmp	r3, r5
 800946a:	dc26      	bgt.n	80094ba <_printf_common+0x96>
 800946c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009470:	6822      	ldr	r2, [r4, #0]
 8009472:	3b00      	subs	r3, #0
 8009474:	bf18      	it	ne
 8009476:	2301      	movne	r3, #1
 8009478:	0692      	lsls	r2, r2, #26
 800947a:	d42b      	bmi.n	80094d4 <_printf_common+0xb0>
 800947c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009480:	4641      	mov	r1, r8
 8009482:	4638      	mov	r0, r7
 8009484:	47c8      	blx	r9
 8009486:	3001      	adds	r0, #1
 8009488:	d01e      	beq.n	80094c8 <_printf_common+0xa4>
 800948a:	6823      	ldr	r3, [r4, #0]
 800948c:	6922      	ldr	r2, [r4, #16]
 800948e:	f003 0306 	and.w	r3, r3, #6
 8009492:	2b04      	cmp	r3, #4
 8009494:	bf02      	ittt	eq
 8009496:	68e5      	ldreq	r5, [r4, #12]
 8009498:	6833      	ldreq	r3, [r6, #0]
 800949a:	1aed      	subeq	r5, r5, r3
 800949c:	68a3      	ldr	r3, [r4, #8]
 800949e:	bf0c      	ite	eq
 80094a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80094a4:	2500      	movne	r5, #0
 80094a6:	4293      	cmp	r3, r2
 80094a8:	bfc4      	itt	gt
 80094aa:	1a9b      	subgt	r3, r3, r2
 80094ac:	18ed      	addgt	r5, r5, r3
 80094ae:	2600      	movs	r6, #0
 80094b0:	341a      	adds	r4, #26
 80094b2:	42b5      	cmp	r5, r6
 80094b4:	d11a      	bne.n	80094ec <_printf_common+0xc8>
 80094b6:	2000      	movs	r0, #0
 80094b8:	e008      	b.n	80094cc <_printf_common+0xa8>
 80094ba:	2301      	movs	r3, #1
 80094bc:	4652      	mov	r2, sl
 80094be:	4641      	mov	r1, r8
 80094c0:	4638      	mov	r0, r7
 80094c2:	47c8      	blx	r9
 80094c4:	3001      	adds	r0, #1
 80094c6:	d103      	bne.n	80094d0 <_printf_common+0xac>
 80094c8:	f04f 30ff 	mov.w	r0, #4294967295
 80094cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094d0:	3501      	adds	r5, #1
 80094d2:	e7c6      	b.n	8009462 <_printf_common+0x3e>
 80094d4:	18e1      	adds	r1, r4, r3
 80094d6:	1c5a      	adds	r2, r3, #1
 80094d8:	2030      	movs	r0, #48	@ 0x30
 80094da:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80094de:	4422      	add	r2, r4
 80094e0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80094e4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80094e8:	3302      	adds	r3, #2
 80094ea:	e7c7      	b.n	800947c <_printf_common+0x58>
 80094ec:	2301      	movs	r3, #1
 80094ee:	4622      	mov	r2, r4
 80094f0:	4641      	mov	r1, r8
 80094f2:	4638      	mov	r0, r7
 80094f4:	47c8      	blx	r9
 80094f6:	3001      	adds	r0, #1
 80094f8:	d0e6      	beq.n	80094c8 <_printf_common+0xa4>
 80094fa:	3601      	adds	r6, #1
 80094fc:	e7d9      	b.n	80094b2 <_printf_common+0x8e>
	...

08009500 <_printf_i>:
 8009500:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009504:	7e0f      	ldrb	r7, [r1, #24]
 8009506:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009508:	2f78      	cmp	r7, #120	@ 0x78
 800950a:	4691      	mov	r9, r2
 800950c:	4680      	mov	r8, r0
 800950e:	460c      	mov	r4, r1
 8009510:	469a      	mov	sl, r3
 8009512:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009516:	d807      	bhi.n	8009528 <_printf_i+0x28>
 8009518:	2f62      	cmp	r7, #98	@ 0x62
 800951a:	d80a      	bhi.n	8009532 <_printf_i+0x32>
 800951c:	2f00      	cmp	r7, #0
 800951e:	f000 80d2 	beq.w	80096c6 <_printf_i+0x1c6>
 8009522:	2f58      	cmp	r7, #88	@ 0x58
 8009524:	f000 80b9 	beq.w	800969a <_printf_i+0x19a>
 8009528:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800952c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009530:	e03a      	b.n	80095a8 <_printf_i+0xa8>
 8009532:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009536:	2b15      	cmp	r3, #21
 8009538:	d8f6      	bhi.n	8009528 <_printf_i+0x28>
 800953a:	a101      	add	r1, pc, #4	@ (adr r1, 8009540 <_printf_i+0x40>)
 800953c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009540:	08009599 	.word	0x08009599
 8009544:	080095ad 	.word	0x080095ad
 8009548:	08009529 	.word	0x08009529
 800954c:	08009529 	.word	0x08009529
 8009550:	08009529 	.word	0x08009529
 8009554:	08009529 	.word	0x08009529
 8009558:	080095ad 	.word	0x080095ad
 800955c:	08009529 	.word	0x08009529
 8009560:	08009529 	.word	0x08009529
 8009564:	08009529 	.word	0x08009529
 8009568:	08009529 	.word	0x08009529
 800956c:	080096ad 	.word	0x080096ad
 8009570:	080095d7 	.word	0x080095d7
 8009574:	08009667 	.word	0x08009667
 8009578:	08009529 	.word	0x08009529
 800957c:	08009529 	.word	0x08009529
 8009580:	080096cf 	.word	0x080096cf
 8009584:	08009529 	.word	0x08009529
 8009588:	080095d7 	.word	0x080095d7
 800958c:	08009529 	.word	0x08009529
 8009590:	08009529 	.word	0x08009529
 8009594:	0800966f 	.word	0x0800966f
 8009598:	6833      	ldr	r3, [r6, #0]
 800959a:	1d1a      	adds	r2, r3, #4
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	6032      	str	r2, [r6, #0]
 80095a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80095a4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80095a8:	2301      	movs	r3, #1
 80095aa:	e09d      	b.n	80096e8 <_printf_i+0x1e8>
 80095ac:	6833      	ldr	r3, [r6, #0]
 80095ae:	6820      	ldr	r0, [r4, #0]
 80095b0:	1d19      	adds	r1, r3, #4
 80095b2:	6031      	str	r1, [r6, #0]
 80095b4:	0606      	lsls	r6, r0, #24
 80095b6:	d501      	bpl.n	80095bc <_printf_i+0xbc>
 80095b8:	681d      	ldr	r5, [r3, #0]
 80095ba:	e003      	b.n	80095c4 <_printf_i+0xc4>
 80095bc:	0645      	lsls	r5, r0, #25
 80095be:	d5fb      	bpl.n	80095b8 <_printf_i+0xb8>
 80095c0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80095c4:	2d00      	cmp	r5, #0
 80095c6:	da03      	bge.n	80095d0 <_printf_i+0xd0>
 80095c8:	232d      	movs	r3, #45	@ 0x2d
 80095ca:	426d      	negs	r5, r5
 80095cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80095d0:	4859      	ldr	r0, [pc, #356]	@ (8009738 <_printf_i+0x238>)
 80095d2:	230a      	movs	r3, #10
 80095d4:	e011      	b.n	80095fa <_printf_i+0xfa>
 80095d6:	6821      	ldr	r1, [r4, #0]
 80095d8:	6833      	ldr	r3, [r6, #0]
 80095da:	0608      	lsls	r0, r1, #24
 80095dc:	f853 5b04 	ldr.w	r5, [r3], #4
 80095e0:	d402      	bmi.n	80095e8 <_printf_i+0xe8>
 80095e2:	0649      	lsls	r1, r1, #25
 80095e4:	bf48      	it	mi
 80095e6:	b2ad      	uxthmi	r5, r5
 80095e8:	2f6f      	cmp	r7, #111	@ 0x6f
 80095ea:	4853      	ldr	r0, [pc, #332]	@ (8009738 <_printf_i+0x238>)
 80095ec:	6033      	str	r3, [r6, #0]
 80095ee:	bf14      	ite	ne
 80095f0:	230a      	movne	r3, #10
 80095f2:	2308      	moveq	r3, #8
 80095f4:	2100      	movs	r1, #0
 80095f6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80095fa:	6866      	ldr	r6, [r4, #4]
 80095fc:	60a6      	str	r6, [r4, #8]
 80095fe:	2e00      	cmp	r6, #0
 8009600:	bfa2      	ittt	ge
 8009602:	6821      	ldrge	r1, [r4, #0]
 8009604:	f021 0104 	bicge.w	r1, r1, #4
 8009608:	6021      	strge	r1, [r4, #0]
 800960a:	b90d      	cbnz	r5, 8009610 <_printf_i+0x110>
 800960c:	2e00      	cmp	r6, #0
 800960e:	d04b      	beq.n	80096a8 <_printf_i+0x1a8>
 8009610:	4616      	mov	r6, r2
 8009612:	fbb5 f1f3 	udiv	r1, r5, r3
 8009616:	fb03 5711 	mls	r7, r3, r1, r5
 800961a:	5dc7      	ldrb	r7, [r0, r7]
 800961c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009620:	462f      	mov	r7, r5
 8009622:	42bb      	cmp	r3, r7
 8009624:	460d      	mov	r5, r1
 8009626:	d9f4      	bls.n	8009612 <_printf_i+0x112>
 8009628:	2b08      	cmp	r3, #8
 800962a:	d10b      	bne.n	8009644 <_printf_i+0x144>
 800962c:	6823      	ldr	r3, [r4, #0]
 800962e:	07df      	lsls	r7, r3, #31
 8009630:	d508      	bpl.n	8009644 <_printf_i+0x144>
 8009632:	6923      	ldr	r3, [r4, #16]
 8009634:	6861      	ldr	r1, [r4, #4]
 8009636:	4299      	cmp	r1, r3
 8009638:	bfde      	ittt	le
 800963a:	2330      	movle	r3, #48	@ 0x30
 800963c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009640:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009644:	1b92      	subs	r2, r2, r6
 8009646:	6122      	str	r2, [r4, #16]
 8009648:	f8cd a000 	str.w	sl, [sp]
 800964c:	464b      	mov	r3, r9
 800964e:	aa03      	add	r2, sp, #12
 8009650:	4621      	mov	r1, r4
 8009652:	4640      	mov	r0, r8
 8009654:	f7ff fee6 	bl	8009424 <_printf_common>
 8009658:	3001      	adds	r0, #1
 800965a:	d14a      	bne.n	80096f2 <_printf_i+0x1f2>
 800965c:	f04f 30ff 	mov.w	r0, #4294967295
 8009660:	b004      	add	sp, #16
 8009662:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009666:	6823      	ldr	r3, [r4, #0]
 8009668:	f043 0320 	orr.w	r3, r3, #32
 800966c:	6023      	str	r3, [r4, #0]
 800966e:	4833      	ldr	r0, [pc, #204]	@ (800973c <_printf_i+0x23c>)
 8009670:	2778      	movs	r7, #120	@ 0x78
 8009672:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009676:	6823      	ldr	r3, [r4, #0]
 8009678:	6831      	ldr	r1, [r6, #0]
 800967a:	061f      	lsls	r7, r3, #24
 800967c:	f851 5b04 	ldr.w	r5, [r1], #4
 8009680:	d402      	bmi.n	8009688 <_printf_i+0x188>
 8009682:	065f      	lsls	r7, r3, #25
 8009684:	bf48      	it	mi
 8009686:	b2ad      	uxthmi	r5, r5
 8009688:	6031      	str	r1, [r6, #0]
 800968a:	07d9      	lsls	r1, r3, #31
 800968c:	bf44      	itt	mi
 800968e:	f043 0320 	orrmi.w	r3, r3, #32
 8009692:	6023      	strmi	r3, [r4, #0]
 8009694:	b11d      	cbz	r5, 800969e <_printf_i+0x19e>
 8009696:	2310      	movs	r3, #16
 8009698:	e7ac      	b.n	80095f4 <_printf_i+0xf4>
 800969a:	4827      	ldr	r0, [pc, #156]	@ (8009738 <_printf_i+0x238>)
 800969c:	e7e9      	b.n	8009672 <_printf_i+0x172>
 800969e:	6823      	ldr	r3, [r4, #0]
 80096a0:	f023 0320 	bic.w	r3, r3, #32
 80096a4:	6023      	str	r3, [r4, #0]
 80096a6:	e7f6      	b.n	8009696 <_printf_i+0x196>
 80096a8:	4616      	mov	r6, r2
 80096aa:	e7bd      	b.n	8009628 <_printf_i+0x128>
 80096ac:	6833      	ldr	r3, [r6, #0]
 80096ae:	6825      	ldr	r5, [r4, #0]
 80096b0:	6961      	ldr	r1, [r4, #20]
 80096b2:	1d18      	adds	r0, r3, #4
 80096b4:	6030      	str	r0, [r6, #0]
 80096b6:	062e      	lsls	r6, r5, #24
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	d501      	bpl.n	80096c0 <_printf_i+0x1c0>
 80096bc:	6019      	str	r1, [r3, #0]
 80096be:	e002      	b.n	80096c6 <_printf_i+0x1c6>
 80096c0:	0668      	lsls	r0, r5, #25
 80096c2:	d5fb      	bpl.n	80096bc <_printf_i+0x1bc>
 80096c4:	8019      	strh	r1, [r3, #0]
 80096c6:	2300      	movs	r3, #0
 80096c8:	6123      	str	r3, [r4, #16]
 80096ca:	4616      	mov	r6, r2
 80096cc:	e7bc      	b.n	8009648 <_printf_i+0x148>
 80096ce:	6833      	ldr	r3, [r6, #0]
 80096d0:	1d1a      	adds	r2, r3, #4
 80096d2:	6032      	str	r2, [r6, #0]
 80096d4:	681e      	ldr	r6, [r3, #0]
 80096d6:	6862      	ldr	r2, [r4, #4]
 80096d8:	2100      	movs	r1, #0
 80096da:	4630      	mov	r0, r6
 80096dc:	f7f6 fe08 	bl	80002f0 <memchr>
 80096e0:	b108      	cbz	r0, 80096e6 <_printf_i+0x1e6>
 80096e2:	1b80      	subs	r0, r0, r6
 80096e4:	6060      	str	r0, [r4, #4]
 80096e6:	6863      	ldr	r3, [r4, #4]
 80096e8:	6123      	str	r3, [r4, #16]
 80096ea:	2300      	movs	r3, #0
 80096ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80096f0:	e7aa      	b.n	8009648 <_printf_i+0x148>
 80096f2:	6923      	ldr	r3, [r4, #16]
 80096f4:	4632      	mov	r2, r6
 80096f6:	4649      	mov	r1, r9
 80096f8:	4640      	mov	r0, r8
 80096fa:	47d0      	blx	sl
 80096fc:	3001      	adds	r0, #1
 80096fe:	d0ad      	beq.n	800965c <_printf_i+0x15c>
 8009700:	6823      	ldr	r3, [r4, #0]
 8009702:	079b      	lsls	r3, r3, #30
 8009704:	d413      	bmi.n	800972e <_printf_i+0x22e>
 8009706:	68e0      	ldr	r0, [r4, #12]
 8009708:	9b03      	ldr	r3, [sp, #12]
 800970a:	4298      	cmp	r0, r3
 800970c:	bfb8      	it	lt
 800970e:	4618      	movlt	r0, r3
 8009710:	e7a6      	b.n	8009660 <_printf_i+0x160>
 8009712:	2301      	movs	r3, #1
 8009714:	4632      	mov	r2, r6
 8009716:	4649      	mov	r1, r9
 8009718:	4640      	mov	r0, r8
 800971a:	47d0      	blx	sl
 800971c:	3001      	adds	r0, #1
 800971e:	d09d      	beq.n	800965c <_printf_i+0x15c>
 8009720:	3501      	adds	r5, #1
 8009722:	68e3      	ldr	r3, [r4, #12]
 8009724:	9903      	ldr	r1, [sp, #12]
 8009726:	1a5b      	subs	r3, r3, r1
 8009728:	42ab      	cmp	r3, r5
 800972a:	dcf2      	bgt.n	8009712 <_printf_i+0x212>
 800972c:	e7eb      	b.n	8009706 <_printf_i+0x206>
 800972e:	2500      	movs	r5, #0
 8009730:	f104 0619 	add.w	r6, r4, #25
 8009734:	e7f5      	b.n	8009722 <_printf_i+0x222>
 8009736:	bf00      	nop
 8009738:	0800d642 	.word	0x0800d642
 800973c:	0800d653 	.word	0x0800d653

08009740 <_scanf_float>:
 8009740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009744:	b087      	sub	sp, #28
 8009746:	4617      	mov	r7, r2
 8009748:	9303      	str	r3, [sp, #12]
 800974a:	688b      	ldr	r3, [r1, #8]
 800974c:	1e5a      	subs	r2, r3, #1
 800974e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8009752:	bf81      	itttt	hi
 8009754:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8009758:	eb03 0b05 	addhi.w	fp, r3, r5
 800975c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8009760:	608b      	strhi	r3, [r1, #8]
 8009762:	680b      	ldr	r3, [r1, #0]
 8009764:	460a      	mov	r2, r1
 8009766:	f04f 0500 	mov.w	r5, #0
 800976a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800976e:	f842 3b1c 	str.w	r3, [r2], #28
 8009772:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8009776:	4680      	mov	r8, r0
 8009778:	460c      	mov	r4, r1
 800977a:	bf98      	it	ls
 800977c:	f04f 0b00 	movls.w	fp, #0
 8009780:	9201      	str	r2, [sp, #4]
 8009782:	4616      	mov	r6, r2
 8009784:	46aa      	mov	sl, r5
 8009786:	46a9      	mov	r9, r5
 8009788:	9502      	str	r5, [sp, #8]
 800978a:	68a2      	ldr	r2, [r4, #8]
 800978c:	b152      	cbz	r2, 80097a4 <_scanf_float+0x64>
 800978e:	683b      	ldr	r3, [r7, #0]
 8009790:	781b      	ldrb	r3, [r3, #0]
 8009792:	2b4e      	cmp	r3, #78	@ 0x4e
 8009794:	d864      	bhi.n	8009860 <_scanf_float+0x120>
 8009796:	2b40      	cmp	r3, #64	@ 0x40
 8009798:	d83c      	bhi.n	8009814 <_scanf_float+0xd4>
 800979a:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800979e:	b2c8      	uxtb	r0, r1
 80097a0:	280e      	cmp	r0, #14
 80097a2:	d93a      	bls.n	800981a <_scanf_float+0xda>
 80097a4:	f1b9 0f00 	cmp.w	r9, #0
 80097a8:	d003      	beq.n	80097b2 <_scanf_float+0x72>
 80097aa:	6823      	ldr	r3, [r4, #0]
 80097ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80097b0:	6023      	str	r3, [r4, #0]
 80097b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80097b6:	f1ba 0f01 	cmp.w	sl, #1
 80097ba:	f200 8117 	bhi.w	80099ec <_scanf_float+0x2ac>
 80097be:	9b01      	ldr	r3, [sp, #4]
 80097c0:	429e      	cmp	r6, r3
 80097c2:	f200 8108 	bhi.w	80099d6 <_scanf_float+0x296>
 80097c6:	2001      	movs	r0, #1
 80097c8:	b007      	add	sp, #28
 80097ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097ce:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80097d2:	2a0d      	cmp	r2, #13
 80097d4:	d8e6      	bhi.n	80097a4 <_scanf_float+0x64>
 80097d6:	a101      	add	r1, pc, #4	@ (adr r1, 80097dc <_scanf_float+0x9c>)
 80097d8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80097dc:	08009923 	.word	0x08009923
 80097e0:	080097a5 	.word	0x080097a5
 80097e4:	080097a5 	.word	0x080097a5
 80097e8:	080097a5 	.word	0x080097a5
 80097ec:	08009983 	.word	0x08009983
 80097f0:	0800995b 	.word	0x0800995b
 80097f4:	080097a5 	.word	0x080097a5
 80097f8:	080097a5 	.word	0x080097a5
 80097fc:	08009931 	.word	0x08009931
 8009800:	080097a5 	.word	0x080097a5
 8009804:	080097a5 	.word	0x080097a5
 8009808:	080097a5 	.word	0x080097a5
 800980c:	080097a5 	.word	0x080097a5
 8009810:	080098e9 	.word	0x080098e9
 8009814:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8009818:	e7db      	b.n	80097d2 <_scanf_float+0x92>
 800981a:	290e      	cmp	r1, #14
 800981c:	d8c2      	bhi.n	80097a4 <_scanf_float+0x64>
 800981e:	a001      	add	r0, pc, #4	@ (adr r0, 8009824 <_scanf_float+0xe4>)
 8009820:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8009824:	080098d9 	.word	0x080098d9
 8009828:	080097a5 	.word	0x080097a5
 800982c:	080098d9 	.word	0x080098d9
 8009830:	0800996f 	.word	0x0800996f
 8009834:	080097a5 	.word	0x080097a5
 8009838:	08009881 	.word	0x08009881
 800983c:	080098bf 	.word	0x080098bf
 8009840:	080098bf 	.word	0x080098bf
 8009844:	080098bf 	.word	0x080098bf
 8009848:	080098bf 	.word	0x080098bf
 800984c:	080098bf 	.word	0x080098bf
 8009850:	080098bf 	.word	0x080098bf
 8009854:	080098bf 	.word	0x080098bf
 8009858:	080098bf 	.word	0x080098bf
 800985c:	080098bf 	.word	0x080098bf
 8009860:	2b6e      	cmp	r3, #110	@ 0x6e
 8009862:	d809      	bhi.n	8009878 <_scanf_float+0x138>
 8009864:	2b60      	cmp	r3, #96	@ 0x60
 8009866:	d8b2      	bhi.n	80097ce <_scanf_float+0x8e>
 8009868:	2b54      	cmp	r3, #84	@ 0x54
 800986a:	d07b      	beq.n	8009964 <_scanf_float+0x224>
 800986c:	2b59      	cmp	r3, #89	@ 0x59
 800986e:	d199      	bne.n	80097a4 <_scanf_float+0x64>
 8009870:	2d07      	cmp	r5, #7
 8009872:	d197      	bne.n	80097a4 <_scanf_float+0x64>
 8009874:	2508      	movs	r5, #8
 8009876:	e02c      	b.n	80098d2 <_scanf_float+0x192>
 8009878:	2b74      	cmp	r3, #116	@ 0x74
 800987a:	d073      	beq.n	8009964 <_scanf_float+0x224>
 800987c:	2b79      	cmp	r3, #121	@ 0x79
 800987e:	e7f6      	b.n	800986e <_scanf_float+0x12e>
 8009880:	6821      	ldr	r1, [r4, #0]
 8009882:	05c8      	lsls	r0, r1, #23
 8009884:	d51b      	bpl.n	80098be <_scanf_float+0x17e>
 8009886:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800988a:	6021      	str	r1, [r4, #0]
 800988c:	f109 0901 	add.w	r9, r9, #1
 8009890:	f1bb 0f00 	cmp.w	fp, #0
 8009894:	d003      	beq.n	800989e <_scanf_float+0x15e>
 8009896:	3201      	adds	r2, #1
 8009898:	f10b 3bff 	add.w	fp, fp, #4294967295
 800989c:	60a2      	str	r2, [r4, #8]
 800989e:	68a3      	ldr	r3, [r4, #8]
 80098a0:	3b01      	subs	r3, #1
 80098a2:	60a3      	str	r3, [r4, #8]
 80098a4:	6923      	ldr	r3, [r4, #16]
 80098a6:	3301      	adds	r3, #1
 80098a8:	6123      	str	r3, [r4, #16]
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	3b01      	subs	r3, #1
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	607b      	str	r3, [r7, #4]
 80098b2:	f340 8087 	ble.w	80099c4 <_scanf_float+0x284>
 80098b6:	683b      	ldr	r3, [r7, #0]
 80098b8:	3301      	adds	r3, #1
 80098ba:	603b      	str	r3, [r7, #0]
 80098bc:	e765      	b.n	800978a <_scanf_float+0x4a>
 80098be:	eb1a 0105 	adds.w	r1, sl, r5
 80098c2:	f47f af6f 	bne.w	80097a4 <_scanf_float+0x64>
 80098c6:	6822      	ldr	r2, [r4, #0]
 80098c8:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80098cc:	6022      	str	r2, [r4, #0]
 80098ce:	460d      	mov	r5, r1
 80098d0:	468a      	mov	sl, r1
 80098d2:	f806 3b01 	strb.w	r3, [r6], #1
 80098d6:	e7e2      	b.n	800989e <_scanf_float+0x15e>
 80098d8:	6822      	ldr	r2, [r4, #0]
 80098da:	0610      	lsls	r0, r2, #24
 80098dc:	f57f af62 	bpl.w	80097a4 <_scanf_float+0x64>
 80098e0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80098e4:	6022      	str	r2, [r4, #0]
 80098e6:	e7f4      	b.n	80098d2 <_scanf_float+0x192>
 80098e8:	f1ba 0f00 	cmp.w	sl, #0
 80098ec:	d10e      	bne.n	800990c <_scanf_float+0x1cc>
 80098ee:	f1b9 0f00 	cmp.w	r9, #0
 80098f2:	d10e      	bne.n	8009912 <_scanf_float+0x1d2>
 80098f4:	6822      	ldr	r2, [r4, #0]
 80098f6:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80098fa:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80098fe:	d108      	bne.n	8009912 <_scanf_float+0x1d2>
 8009900:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8009904:	6022      	str	r2, [r4, #0]
 8009906:	f04f 0a01 	mov.w	sl, #1
 800990a:	e7e2      	b.n	80098d2 <_scanf_float+0x192>
 800990c:	f1ba 0f02 	cmp.w	sl, #2
 8009910:	d055      	beq.n	80099be <_scanf_float+0x27e>
 8009912:	2d01      	cmp	r5, #1
 8009914:	d002      	beq.n	800991c <_scanf_float+0x1dc>
 8009916:	2d04      	cmp	r5, #4
 8009918:	f47f af44 	bne.w	80097a4 <_scanf_float+0x64>
 800991c:	3501      	adds	r5, #1
 800991e:	b2ed      	uxtb	r5, r5
 8009920:	e7d7      	b.n	80098d2 <_scanf_float+0x192>
 8009922:	f1ba 0f01 	cmp.w	sl, #1
 8009926:	f47f af3d 	bne.w	80097a4 <_scanf_float+0x64>
 800992a:	f04f 0a02 	mov.w	sl, #2
 800992e:	e7d0      	b.n	80098d2 <_scanf_float+0x192>
 8009930:	b97d      	cbnz	r5, 8009952 <_scanf_float+0x212>
 8009932:	f1b9 0f00 	cmp.w	r9, #0
 8009936:	f47f af38 	bne.w	80097aa <_scanf_float+0x6a>
 800993a:	6822      	ldr	r2, [r4, #0]
 800993c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8009940:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8009944:	f040 8101 	bne.w	8009b4a <_scanf_float+0x40a>
 8009948:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800994c:	6022      	str	r2, [r4, #0]
 800994e:	2501      	movs	r5, #1
 8009950:	e7bf      	b.n	80098d2 <_scanf_float+0x192>
 8009952:	2d03      	cmp	r5, #3
 8009954:	d0e2      	beq.n	800991c <_scanf_float+0x1dc>
 8009956:	2d05      	cmp	r5, #5
 8009958:	e7de      	b.n	8009918 <_scanf_float+0x1d8>
 800995a:	2d02      	cmp	r5, #2
 800995c:	f47f af22 	bne.w	80097a4 <_scanf_float+0x64>
 8009960:	2503      	movs	r5, #3
 8009962:	e7b6      	b.n	80098d2 <_scanf_float+0x192>
 8009964:	2d06      	cmp	r5, #6
 8009966:	f47f af1d 	bne.w	80097a4 <_scanf_float+0x64>
 800996a:	2507      	movs	r5, #7
 800996c:	e7b1      	b.n	80098d2 <_scanf_float+0x192>
 800996e:	6822      	ldr	r2, [r4, #0]
 8009970:	0591      	lsls	r1, r2, #22
 8009972:	f57f af17 	bpl.w	80097a4 <_scanf_float+0x64>
 8009976:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800997a:	6022      	str	r2, [r4, #0]
 800997c:	f8cd 9008 	str.w	r9, [sp, #8]
 8009980:	e7a7      	b.n	80098d2 <_scanf_float+0x192>
 8009982:	6822      	ldr	r2, [r4, #0]
 8009984:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8009988:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800998c:	d006      	beq.n	800999c <_scanf_float+0x25c>
 800998e:	0550      	lsls	r0, r2, #21
 8009990:	f57f af08 	bpl.w	80097a4 <_scanf_float+0x64>
 8009994:	f1b9 0f00 	cmp.w	r9, #0
 8009998:	f000 80d7 	beq.w	8009b4a <_scanf_float+0x40a>
 800999c:	0591      	lsls	r1, r2, #22
 800999e:	bf58      	it	pl
 80099a0:	9902      	ldrpl	r1, [sp, #8]
 80099a2:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80099a6:	bf58      	it	pl
 80099a8:	eba9 0101 	subpl.w	r1, r9, r1
 80099ac:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80099b0:	bf58      	it	pl
 80099b2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80099b6:	6022      	str	r2, [r4, #0]
 80099b8:	f04f 0900 	mov.w	r9, #0
 80099bc:	e789      	b.n	80098d2 <_scanf_float+0x192>
 80099be:	f04f 0a03 	mov.w	sl, #3
 80099c2:	e786      	b.n	80098d2 <_scanf_float+0x192>
 80099c4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80099c8:	4639      	mov	r1, r7
 80099ca:	4640      	mov	r0, r8
 80099cc:	4798      	blx	r3
 80099ce:	2800      	cmp	r0, #0
 80099d0:	f43f aedb 	beq.w	800978a <_scanf_float+0x4a>
 80099d4:	e6e6      	b.n	80097a4 <_scanf_float+0x64>
 80099d6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80099da:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80099de:	463a      	mov	r2, r7
 80099e0:	4640      	mov	r0, r8
 80099e2:	4798      	blx	r3
 80099e4:	6923      	ldr	r3, [r4, #16]
 80099e6:	3b01      	subs	r3, #1
 80099e8:	6123      	str	r3, [r4, #16]
 80099ea:	e6e8      	b.n	80097be <_scanf_float+0x7e>
 80099ec:	1e6b      	subs	r3, r5, #1
 80099ee:	2b06      	cmp	r3, #6
 80099f0:	d824      	bhi.n	8009a3c <_scanf_float+0x2fc>
 80099f2:	2d02      	cmp	r5, #2
 80099f4:	d836      	bhi.n	8009a64 <_scanf_float+0x324>
 80099f6:	9b01      	ldr	r3, [sp, #4]
 80099f8:	429e      	cmp	r6, r3
 80099fa:	f67f aee4 	bls.w	80097c6 <_scanf_float+0x86>
 80099fe:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009a02:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009a06:	463a      	mov	r2, r7
 8009a08:	4640      	mov	r0, r8
 8009a0a:	4798      	blx	r3
 8009a0c:	6923      	ldr	r3, [r4, #16]
 8009a0e:	3b01      	subs	r3, #1
 8009a10:	6123      	str	r3, [r4, #16]
 8009a12:	e7f0      	b.n	80099f6 <_scanf_float+0x2b6>
 8009a14:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009a18:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8009a1c:	463a      	mov	r2, r7
 8009a1e:	4640      	mov	r0, r8
 8009a20:	4798      	blx	r3
 8009a22:	6923      	ldr	r3, [r4, #16]
 8009a24:	3b01      	subs	r3, #1
 8009a26:	6123      	str	r3, [r4, #16]
 8009a28:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009a2c:	fa5f fa8a 	uxtb.w	sl, sl
 8009a30:	f1ba 0f02 	cmp.w	sl, #2
 8009a34:	d1ee      	bne.n	8009a14 <_scanf_float+0x2d4>
 8009a36:	3d03      	subs	r5, #3
 8009a38:	b2ed      	uxtb	r5, r5
 8009a3a:	1b76      	subs	r6, r6, r5
 8009a3c:	6823      	ldr	r3, [r4, #0]
 8009a3e:	05da      	lsls	r2, r3, #23
 8009a40:	d530      	bpl.n	8009aa4 <_scanf_float+0x364>
 8009a42:	055b      	lsls	r3, r3, #21
 8009a44:	d511      	bpl.n	8009a6a <_scanf_float+0x32a>
 8009a46:	9b01      	ldr	r3, [sp, #4]
 8009a48:	429e      	cmp	r6, r3
 8009a4a:	f67f aebc 	bls.w	80097c6 <_scanf_float+0x86>
 8009a4e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009a52:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009a56:	463a      	mov	r2, r7
 8009a58:	4640      	mov	r0, r8
 8009a5a:	4798      	blx	r3
 8009a5c:	6923      	ldr	r3, [r4, #16]
 8009a5e:	3b01      	subs	r3, #1
 8009a60:	6123      	str	r3, [r4, #16]
 8009a62:	e7f0      	b.n	8009a46 <_scanf_float+0x306>
 8009a64:	46aa      	mov	sl, r5
 8009a66:	46b3      	mov	fp, r6
 8009a68:	e7de      	b.n	8009a28 <_scanf_float+0x2e8>
 8009a6a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8009a6e:	6923      	ldr	r3, [r4, #16]
 8009a70:	2965      	cmp	r1, #101	@ 0x65
 8009a72:	f103 33ff 	add.w	r3, r3, #4294967295
 8009a76:	f106 35ff 	add.w	r5, r6, #4294967295
 8009a7a:	6123      	str	r3, [r4, #16]
 8009a7c:	d00c      	beq.n	8009a98 <_scanf_float+0x358>
 8009a7e:	2945      	cmp	r1, #69	@ 0x45
 8009a80:	d00a      	beq.n	8009a98 <_scanf_float+0x358>
 8009a82:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009a86:	463a      	mov	r2, r7
 8009a88:	4640      	mov	r0, r8
 8009a8a:	4798      	blx	r3
 8009a8c:	6923      	ldr	r3, [r4, #16]
 8009a8e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8009a92:	3b01      	subs	r3, #1
 8009a94:	1eb5      	subs	r5, r6, #2
 8009a96:	6123      	str	r3, [r4, #16]
 8009a98:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009a9c:	463a      	mov	r2, r7
 8009a9e:	4640      	mov	r0, r8
 8009aa0:	4798      	blx	r3
 8009aa2:	462e      	mov	r6, r5
 8009aa4:	6822      	ldr	r2, [r4, #0]
 8009aa6:	f012 0210 	ands.w	r2, r2, #16
 8009aaa:	d001      	beq.n	8009ab0 <_scanf_float+0x370>
 8009aac:	2000      	movs	r0, #0
 8009aae:	e68b      	b.n	80097c8 <_scanf_float+0x88>
 8009ab0:	7032      	strb	r2, [r6, #0]
 8009ab2:	6823      	ldr	r3, [r4, #0]
 8009ab4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8009ab8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009abc:	d11a      	bne.n	8009af4 <_scanf_float+0x3b4>
 8009abe:	9b02      	ldr	r3, [sp, #8]
 8009ac0:	454b      	cmp	r3, r9
 8009ac2:	eba3 0209 	sub.w	r2, r3, r9
 8009ac6:	d121      	bne.n	8009b0c <_scanf_float+0x3cc>
 8009ac8:	9901      	ldr	r1, [sp, #4]
 8009aca:	2200      	movs	r2, #0
 8009acc:	4640      	mov	r0, r8
 8009ace:	f002 fc95 	bl	800c3fc <_strtod_r>
 8009ad2:	9b03      	ldr	r3, [sp, #12]
 8009ad4:	6821      	ldr	r1, [r4, #0]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	f011 0f02 	tst.w	r1, #2
 8009adc:	f103 0204 	add.w	r2, r3, #4
 8009ae0:	d01f      	beq.n	8009b22 <_scanf_float+0x3e2>
 8009ae2:	9903      	ldr	r1, [sp, #12]
 8009ae4:	600a      	str	r2, [r1, #0]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	ed83 0b00 	vstr	d0, [r3]
 8009aec:	68e3      	ldr	r3, [r4, #12]
 8009aee:	3301      	adds	r3, #1
 8009af0:	60e3      	str	r3, [r4, #12]
 8009af2:	e7db      	b.n	8009aac <_scanf_float+0x36c>
 8009af4:	9b04      	ldr	r3, [sp, #16]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d0e6      	beq.n	8009ac8 <_scanf_float+0x388>
 8009afa:	9905      	ldr	r1, [sp, #20]
 8009afc:	230a      	movs	r3, #10
 8009afe:	3101      	adds	r1, #1
 8009b00:	4640      	mov	r0, r8
 8009b02:	f002 fcfb 	bl	800c4fc <_strtol_r>
 8009b06:	9b04      	ldr	r3, [sp, #16]
 8009b08:	9e05      	ldr	r6, [sp, #20]
 8009b0a:	1ac2      	subs	r2, r0, r3
 8009b0c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8009b10:	429e      	cmp	r6, r3
 8009b12:	bf28      	it	cs
 8009b14:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8009b18:	490d      	ldr	r1, [pc, #52]	@ (8009b50 <_scanf_float+0x410>)
 8009b1a:	4630      	mov	r0, r6
 8009b1c:	f000 f94e 	bl	8009dbc <siprintf>
 8009b20:	e7d2      	b.n	8009ac8 <_scanf_float+0x388>
 8009b22:	f011 0f04 	tst.w	r1, #4
 8009b26:	9903      	ldr	r1, [sp, #12]
 8009b28:	600a      	str	r2, [r1, #0]
 8009b2a:	d1dc      	bne.n	8009ae6 <_scanf_float+0x3a6>
 8009b2c:	eeb4 0b40 	vcmp.f64	d0, d0
 8009b30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b34:	681d      	ldr	r5, [r3, #0]
 8009b36:	d705      	bvc.n	8009b44 <_scanf_float+0x404>
 8009b38:	4806      	ldr	r0, [pc, #24]	@ (8009b54 <_scanf_float+0x414>)
 8009b3a:	f000 fb1b 	bl	800a174 <nanf>
 8009b3e:	ed85 0a00 	vstr	s0, [r5]
 8009b42:	e7d3      	b.n	8009aec <_scanf_float+0x3ac>
 8009b44:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8009b48:	e7f9      	b.n	8009b3e <_scanf_float+0x3fe>
 8009b4a:	f04f 0900 	mov.w	r9, #0
 8009b4e:	e630      	b.n	80097b2 <_scanf_float+0x72>
 8009b50:	0800d664 	.word	0x0800d664
 8009b54:	0800d9fd 	.word	0x0800d9fd

08009b58 <std>:
 8009b58:	2300      	movs	r3, #0
 8009b5a:	b510      	push	{r4, lr}
 8009b5c:	4604      	mov	r4, r0
 8009b5e:	e9c0 3300 	strd	r3, r3, [r0]
 8009b62:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009b66:	6083      	str	r3, [r0, #8]
 8009b68:	8181      	strh	r1, [r0, #12]
 8009b6a:	6643      	str	r3, [r0, #100]	@ 0x64
 8009b6c:	81c2      	strh	r2, [r0, #14]
 8009b6e:	6183      	str	r3, [r0, #24]
 8009b70:	4619      	mov	r1, r3
 8009b72:	2208      	movs	r2, #8
 8009b74:	305c      	adds	r0, #92	@ 0x5c
 8009b76:	f000 fa19 	bl	8009fac <memset>
 8009b7a:	4b0d      	ldr	r3, [pc, #52]	@ (8009bb0 <std+0x58>)
 8009b7c:	6263      	str	r3, [r4, #36]	@ 0x24
 8009b7e:	4b0d      	ldr	r3, [pc, #52]	@ (8009bb4 <std+0x5c>)
 8009b80:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009b82:	4b0d      	ldr	r3, [pc, #52]	@ (8009bb8 <std+0x60>)
 8009b84:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009b86:	4b0d      	ldr	r3, [pc, #52]	@ (8009bbc <std+0x64>)
 8009b88:	6323      	str	r3, [r4, #48]	@ 0x30
 8009b8a:	4b0d      	ldr	r3, [pc, #52]	@ (8009bc0 <std+0x68>)
 8009b8c:	6224      	str	r4, [r4, #32]
 8009b8e:	429c      	cmp	r4, r3
 8009b90:	d006      	beq.n	8009ba0 <std+0x48>
 8009b92:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009b96:	4294      	cmp	r4, r2
 8009b98:	d002      	beq.n	8009ba0 <std+0x48>
 8009b9a:	33d0      	adds	r3, #208	@ 0xd0
 8009b9c:	429c      	cmp	r4, r3
 8009b9e:	d105      	bne.n	8009bac <std+0x54>
 8009ba0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009ba4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009ba8:	f000 bad2 	b.w	800a150 <__retarget_lock_init_recursive>
 8009bac:	bd10      	pop	{r4, pc}
 8009bae:	bf00      	nop
 8009bb0:	08009dfd 	.word	0x08009dfd
 8009bb4:	08009e1f 	.word	0x08009e1f
 8009bb8:	08009e57 	.word	0x08009e57
 8009bbc:	08009e7b 	.word	0x08009e7b
 8009bc0:	24004cd8 	.word	0x24004cd8

08009bc4 <stdio_exit_handler>:
 8009bc4:	4a02      	ldr	r2, [pc, #8]	@ (8009bd0 <stdio_exit_handler+0xc>)
 8009bc6:	4903      	ldr	r1, [pc, #12]	@ (8009bd4 <stdio_exit_handler+0x10>)
 8009bc8:	4803      	ldr	r0, [pc, #12]	@ (8009bd8 <stdio_exit_handler+0x14>)
 8009bca:	f000 b869 	b.w	8009ca0 <_fwalk_sglue>
 8009bce:	bf00      	nop
 8009bd0:	24000014 	.word	0x24000014
 8009bd4:	0800cb3d 	.word	0x0800cb3d
 8009bd8:	24000024 	.word	0x24000024

08009bdc <cleanup_stdio>:
 8009bdc:	6841      	ldr	r1, [r0, #4]
 8009bde:	4b0c      	ldr	r3, [pc, #48]	@ (8009c10 <cleanup_stdio+0x34>)
 8009be0:	4299      	cmp	r1, r3
 8009be2:	b510      	push	{r4, lr}
 8009be4:	4604      	mov	r4, r0
 8009be6:	d001      	beq.n	8009bec <cleanup_stdio+0x10>
 8009be8:	f002 ffa8 	bl	800cb3c <_fflush_r>
 8009bec:	68a1      	ldr	r1, [r4, #8]
 8009bee:	4b09      	ldr	r3, [pc, #36]	@ (8009c14 <cleanup_stdio+0x38>)
 8009bf0:	4299      	cmp	r1, r3
 8009bf2:	d002      	beq.n	8009bfa <cleanup_stdio+0x1e>
 8009bf4:	4620      	mov	r0, r4
 8009bf6:	f002 ffa1 	bl	800cb3c <_fflush_r>
 8009bfa:	68e1      	ldr	r1, [r4, #12]
 8009bfc:	4b06      	ldr	r3, [pc, #24]	@ (8009c18 <cleanup_stdio+0x3c>)
 8009bfe:	4299      	cmp	r1, r3
 8009c00:	d004      	beq.n	8009c0c <cleanup_stdio+0x30>
 8009c02:	4620      	mov	r0, r4
 8009c04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c08:	f002 bf98 	b.w	800cb3c <_fflush_r>
 8009c0c:	bd10      	pop	{r4, pc}
 8009c0e:	bf00      	nop
 8009c10:	24004cd8 	.word	0x24004cd8
 8009c14:	24004d40 	.word	0x24004d40
 8009c18:	24004da8 	.word	0x24004da8

08009c1c <global_stdio_init.part.0>:
 8009c1c:	b510      	push	{r4, lr}
 8009c1e:	4b0b      	ldr	r3, [pc, #44]	@ (8009c4c <global_stdio_init.part.0+0x30>)
 8009c20:	4c0b      	ldr	r4, [pc, #44]	@ (8009c50 <global_stdio_init.part.0+0x34>)
 8009c22:	4a0c      	ldr	r2, [pc, #48]	@ (8009c54 <global_stdio_init.part.0+0x38>)
 8009c24:	601a      	str	r2, [r3, #0]
 8009c26:	4620      	mov	r0, r4
 8009c28:	2200      	movs	r2, #0
 8009c2a:	2104      	movs	r1, #4
 8009c2c:	f7ff ff94 	bl	8009b58 <std>
 8009c30:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009c34:	2201      	movs	r2, #1
 8009c36:	2109      	movs	r1, #9
 8009c38:	f7ff ff8e 	bl	8009b58 <std>
 8009c3c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009c40:	2202      	movs	r2, #2
 8009c42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c46:	2112      	movs	r1, #18
 8009c48:	f7ff bf86 	b.w	8009b58 <std>
 8009c4c:	24004e10 	.word	0x24004e10
 8009c50:	24004cd8 	.word	0x24004cd8
 8009c54:	08009bc5 	.word	0x08009bc5

08009c58 <__sfp_lock_acquire>:
 8009c58:	4801      	ldr	r0, [pc, #4]	@ (8009c60 <__sfp_lock_acquire+0x8>)
 8009c5a:	f000 ba7a 	b.w	800a152 <__retarget_lock_acquire_recursive>
 8009c5e:	bf00      	nop
 8009c60:	24004e19 	.word	0x24004e19

08009c64 <__sfp_lock_release>:
 8009c64:	4801      	ldr	r0, [pc, #4]	@ (8009c6c <__sfp_lock_release+0x8>)
 8009c66:	f000 ba75 	b.w	800a154 <__retarget_lock_release_recursive>
 8009c6a:	bf00      	nop
 8009c6c:	24004e19 	.word	0x24004e19

08009c70 <__sinit>:
 8009c70:	b510      	push	{r4, lr}
 8009c72:	4604      	mov	r4, r0
 8009c74:	f7ff fff0 	bl	8009c58 <__sfp_lock_acquire>
 8009c78:	6a23      	ldr	r3, [r4, #32]
 8009c7a:	b11b      	cbz	r3, 8009c84 <__sinit+0x14>
 8009c7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c80:	f7ff bff0 	b.w	8009c64 <__sfp_lock_release>
 8009c84:	4b04      	ldr	r3, [pc, #16]	@ (8009c98 <__sinit+0x28>)
 8009c86:	6223      	str	r3, [r4, #32]
 8009c88:	4b04      	ldr	r3, [pc, #16]	@ (8009c9c <__sinit+0x2c>)
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d1f5      	bne.n	8009c7c <__sinit+0xc>
 8009c90:	f7ff ffc4 	bl	8009c1c <global_stdio_init.part.0>
 8009c94:	e7f2      	b.n	8009c7c <__sinit+0xc>
 8009c96:	bf00      	nop
 8009c98:	08009bdd 	.word	0x08009bdd
 8009c9c:	24004e10 	.word	0x24004e10

08009ca0 <_fwalk_sglue>:
 8009ca0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ca4:	4607      	mov	r7, r0
 8009ca6:	4688      	mov	r8, r1
 8009ca8:	4614      	mov	r4, r2
 8009caa:	2600      	movs	r6, #0
 8009cac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009cb0:	f1b9 0901 	subs.w	r9, r9, #1
 8009cb4:	d505      	bpl.n	8009cc2 <_fwalk_sglue+0x22>
 8009cb6:	6824      	ldr	r4, [r4, #0]
 8009cb8:	2c00      	cmp	r4, #0
 8009cba:	d1f7      	bne.n	8009cac <_fwalk_sglue+0xc>
 8009cbc:	4630      	mov	r0, r6
 8009cbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009cc2:	89ab      	ldrh	r3, [r5, #12]
 8009cc4:	2b01      	cmp	r3, #1
 8009cc6:	d907      	bls.n	8009cd8 <_fwalk_sglue+0x38>
 8009cc8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009ccc:	3301      	adds	r3, #1
 8009cce:	d003      	beq.n	8009cd8 <_fwalk_sglue+0x38>
 8009cd0:	4629      	mov	r1, r5
 8009cd2:	4638      	mov	r0, r7
 8009cd4:	47c0      	blx	r8
 8009cd6:	4306      	orrs	r6, r0
 8009cd8:	3568      	adds	r5, #104	@ 0x68
 8009cda:	e7e9      	b.n	8009cb0 <_fwalk_sglue+0x10>

08009cdc <iprintf>:
 8009cdc:	b40f      	push	{r0, r1, r2, r3}
 8009cde:	b507      	push	{r0, r1, r2, lr}
 8009ce0:	4906      	ldr	r1, [pc, #24]	@ (8009cfc <iprintf+0x20>)
 8009ce2:	ab04      	add	r3, sp, #16
 8009ce4:	6808      	ldr	r0, [r1, #0]
 8009ce6:	f853 2b04 	ldr.w	r2, [r3], #4
 8009cea:	6881      	ldr	r1, [r0, #8]
 8009cec:	9301      	str	r3, [sp, #4]
 8009cee:	f002 fd89 	bl	800c804 <_vfiprintf_r>
 8009cf2:	b003      	add	sp, #12
 8009cf4:	f85d eb04 	ldr.w	lr, [sp], #4
 8009cf8:	b004      	add	sp, #16
 8009cfa:	4770      	bx	lr
 8009cfc:	24000020 	.word	0x24000020

08009d00 <_puts_r>:
 8009d00:	6a03      	ldr	r3, [r0, #32]
 8009d02:	b570      	push	{r4, r5, r6, lr}
 8009d04:	6884      	ldr	r4, [r0, #8]
 8009d06:	4605      	mov	r5, r0
 8009d08:	460e      	mov	r6, r1
 8009d0a:	b90b      	cbnz	r3, 8009d10 <_puts_r+0x10>
 8009d0c:	f7ff ffb0 	bl	8009c70 <__sinit>
 8009d10:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009d12:	07db      	lsls	r3, r3, #31
 8009d14:	d405      	bmi.n	8009d22 <_puts_r+0x22>
 8009d16:	89a3      	ldrh	r3, [r4, #12]
 8009d18:	0598      	lsls	r0, r3, #22
 8009d1a:	d402      	bmi.n	8009d22 <_puts_r+0x22>
 8009d1c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009d1e:	f000 fa18 	bl	800a152 <__retarget_lock_acquire_recursive>
 8009d22:	89a3      	ldrh	r3, [r4, #12]
 8009d24:	0719      	lsls	r1, r3, #28
 8009d26:	d502      	bpl.n	8009d2e <_puts_r+0x2e>
 8009d28:	6923      	ldr	r3, [r4, #16]
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d135      	bne.n	8009d9a <_puts_r+0x9a>
 8009d2e:	4621      	mov	r1, r4
 8009d30:	4628      	mov	r0, r5
 8009d32:	f000 f8e5 	bl	8009f00 <__swsetup_r>
 8009d36:	b380      	cbz	r0, 8009d9a <_puts_r+0x9a>
 8009d38:	f04f 35ff 	mov.w	r5, #4294967295
 8009d3c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009d3e:	07da      	lsls	r2, r3, #31
 8009d40:	d405      	bmi.n	8009d4e <_puts_r+0x4e>
 8009d42:	89a3      	ldrh	r3, [r4, #12]
 8009d44:	059b      	lsls	r3, r3, #22
 8009d46:	d402      	bmi.n	8009d4e <_puts_r+0x4e>
 8009d48:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009d4a:	f000 fa03 	bl	800a154 <__retarget_lock_release_recursive>
 8009d4e:	4628      	mov	r0, r5
 8009d50:	bd70      	pop	{r4, r5, r6, pc}
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	da04      	bge.n	8009d60 <_puts_r+0x60>
 8009d56:	69a2      	ldr	r2, [r4, #24]
 8009d58:	429a      	cmp	r2, r3
 8009d5a:	dc17      	bgt.n	8009d8c <_puts_r+0x8c>
 8009d5c:	290a      	cmp	r1, #10
 8009d5e:	d015      	beq.n	8009d8c <_puts_r+0x8c>
 8009d60:	6823      	ldr	r3, [r4, #0]
 8009d62:	1c5a      	adds	r2, r3, #1
 8009d64:	6022      	str	r2, [r4, #0]
 8009d66:	7019      	strb	r1, [r3, #0]
 8009d68:	68a3      	ldr	r3, [r4, #8]
 8009d6a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009d6e:	3b01      	subs	r3, #1
 8009d70:	60a3      	str	r3, [r4, #8]
 8009d72:	2900      	cmp	r1, #0
 8009d74:	d1ed      	bne.n	8009d52 <_puts_r+0x52>
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	da11      	bge.n	8009d9e <_puts_r+0x9e>
 8009d7a:	4622      	mov	r2, r4
 8009d7c:	210a      	movs	r1, #10
 8009d7e:	4628      	mov	r0, r5
 8009d80:	f000 f87f 	bl	8009e82 <__swbuf_r>
 8009d84:	3001      	adds	r0, #1
 8009d86:	d0d7      	beq.n	8009d38 <_puts_r+0x38>
 8009d88:	250a      	movs	r5, #10
 8009d8a:	e7d7      	b.n	8009d3c <_puts_r+0x3c>
 8009d8c:	4622      	mov	r2, r4
 8009d8e:	4628      	mov	r0, r5
 8009d90:	f000 f877 	bl	8009e82 <__swbuf_r>
 8009d94:	3001      	adds	r0, #1
 8009d96:	d1e7      	bne.n	8009d68 <_puts_r+0x68>
 8009d98:	e7ce      	b.n	8009d38 <_puts_r+0x38>
 8009d9a:	3e01      	subs	r6, #1
 8009d9c:	e7e4      	b.n	8009d68 <_puts_r+0x68>
 8009d9e:	6823      	ldr	r3, [r4, #0]
 8009da0:	1c5a      	adds	r2, r3, #1
 8009da2:	6022      	str	r2, [r4, #0]
 8009da4:	220a      	movs	r2, #10
 8009da6:	701a      	strb	r2, [r3, #0]
 8009da8:	e7ee      	b.n	8009d88 <_puts_r+0x88>
	...

08009dac <puts>:
 8009dac:	4b02      	ldr	r3, [pc, #8]	@ (8009db8 <puts+0xc>)
 8009dae:	4601      	mov	r1, r0
 8009db0:	6818      	ldr	r0, [r3, #0]
 8009db2:	f7ff bfa5 	b.w	8009d00 <_puts_r>
 8009db6:	bf00      	nop
 8009db8:	24000020 	.word	0x24000020

08009dbc <siprintf>:
 8009dbc:	b40e      	push	{r1, r2, r3}
 8009dbe:	b500      	push	{lr}
 8009dc0:	b09c      	sub	sp, #112	@ 0x70
 8009dc2:	ab1d      	add	r3, sp, #116	@ 0x74
 8009dc4:	9002      	str	r0, [sp, #8]
 8009dc6:	9006      	str	r0, [sp, #24]
 8009dc8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009dcc:	4809      	ldr	r0, [pc, #36]	@ (8009df4 <siprintf+0x38>)
 8009dce:	9107      	str	r1, [sp, #28]
 8009dd0:	9104      	str	r1, [sp, #16]
 8009dd2:	4909      	ldr	r1, [pc, #36]	@ (8009df8 <siprintf+0x3c>)
 8009dd4:	f853 2b04 	ldr.w	r2, [r3], #4
 8009dd8:	9105      	str	r1, [sp, #20]
 8009dda:	6800      	ldr	r0, [r0, #0]
 8009ddc:	9301      	str	r3, [sp, #4]
 8009dde:	a902      	add	r1, sp, #8
 8009de0:	f002 fbea 	bl	800c5b8 <_svfiprintf_r>
 8009de4:	9b02      	ldr	r3, [sp, #8]
 8009de6:	2200      	movs	r2, #0
 8009de8:	701a      	strb	r2, [r3, #0]
 8009dea:	b01c      	add	sp, #112	@ 0x70
 8009dec:	f85d eb04 	ldr.w	lr, [sp], #4
 8009df0:	b003      	add	sp, #12
 8009df2:	4770      	bx	lr
 8009df4:	24000020 	.word	0x24000020
 8009df8:	ffff0208 	.word	0xffff0208

08009dfc <__sread>:
 8009dfc:	b510      	push	{r4, lr}
 8009dfe:	460c      	mov	r4, r1
 8009e00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e04:	f000 f956 	bl	800a0b4 <_read_r>
 8009e08:	2800      	cmp	r0, #0
 8009e0a:	bfab      	itete	ge
 8009e0c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009e0e:	89a3      	ldrhlt	r3, [r4, #12]
 8009e10:	181b      	addge	r3, r3, r0
 8009e12:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009e16:	bfac      	ite	ge
 8009e18:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009e1a:	81a3      	strhlt	r3, [r4, #12]
 8009e1c:	bd10      	pop	{r4, pc}

08009e1e <__swrite>:
 8009e1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e22:	461f      	mov	r7, r3
 8009e24:	898b      	ldrh	r3, [r1, #12]
 8009e26:	05db      	lsls	r3, r3, #23
 8009e28:	4605      	mov	r5, r0
 8009e2a:	460c      	mov	r4, r1
 8009e2c:	4616      	mov	r6, r2
 8009e2e:	d505      	bpl.n	8009e3c <__swrite+0x1e>
 8009e30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e34:	2302      	movs	r3, #2
 8009e36:	2200      	movs	r2, #0
 8009e38:	f000 f92a 	bl	800a090 <_lseek_r>
 8009e3c:	89a3      	ldrh	r3, [r4, #12]
 8009e3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009e42:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009e46:	81a3      	strh	r3, [r4, #12]
 8009e48:	4632      	mov	r2, r6
 8009e4a:	463b      	mov	r3, r7
 8009e4c:	4628      	mov	r0, r5
 8009e4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009e52:	f000 b941 	b.w	800a0d8 <_write_r>

08009e56 <__sseek>:
 8009e56:	b510      	push	{r4, lr}
 8009e58:	460c      	mov	r4, r1
 8009e5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e5e:	f000 f917 	bl	800a090 <_lseek_r>
 8009e62:	1c43      	adds	r3, r0, #1
 8009e64:	89a3      	ldrh	r3, [r4, #12]
 8009e66:	bf15      	itete	ne
 8009e68:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009e6a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009e6e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009e72:	81a3      	strheq	r3, [r4, #12]
 8009e74:	bf18      	it	ne
 8009e76:	81a3      	strhne	r3, [r4, #12]
 8009e78:	bd10      	pop	{r4, pc}

08009e7a <__sclose>:
 8009e7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e7e:	f000 b8a1 	b.w	8009fc4 <_close_r>

08009e82 <__swbuf_r>:
 8009e82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e84:	460e      	mov	r6, r1
 8009e86:	4614      	mov	r4, r2
 8009e88:	4605      	mov	r5, r0
 8009e8a:	b118      	cbz	r0, 8009e94 <__swbuf_r+0x12>
 8009e8c:	6a03      	ldr	r3, [r0, #32]
 8009e8e:	b90b      	cbnz	r3, 8009e94 <__swbuf_r+0x12>
 8009e90:	f7ff feee 	bl	8009c70 <__sinit>
 8009e94:	69a3      	ldr	r3, [r4, #24]
 8009e96:	60a3      	str	r3, [r4, #8]
 8009e98:	89a3      	ldrh	r3, [r4, #12]
 8009e9a:	071a      	lsls	r2, r3, #28
 8009e9c:	d501      	bpl.n	8009ea2 <__swbuf_r+0x20>
 8009e9e:	6923      	ldr	r3, [r4, #16]
 8009ea0:	b943      	cbnz	r3, 8009eb4 <__swbuf_r+0x32>
 8009ea2:	4621      	mov	r1, r4
 8009ea4:	4628      	mov	r0, r5
 8009ea6:	f000 f82b 	bl	8009f00 <__swsetup_r>
 8009eaa:	b118      	cbz	r0, 8009eb4 <__swbuf_r+0x32>
 8009eac:	f04f 37ff 	mov.w	r7, #4294967295
 8009eb0:	4638      	mov	r0, r7
 8009eb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009eb4:	6823      	ldr	r3, [r4, #0]
 8009eb6:	6922      	ldr	r2, [r4, #16]
 8009eb8:	1a98      	subs	r0, r3, r2
 8009eba:	6963      	ldr	r3, [r4, #20]
 8009ebc:	b2f6      	uxtb	r6, r6
 8009ebe:	4283      	cmp	r3, r0
 8009ec0:	4637      	mov	r7, r6
 8009ec2:	dc05      	bgt.n	8009ed0 <__swbuf_r+0x4e>
 8009ec4:	4621      	mov	r1, r4
 8009ec6:	4628      	mov	r0, r5
 8009ec8:	f002 fe38 	bl	800cb3c <_fflush_r>
 8009ecc:	2800      	cmp	r0, #0
 8009ece:	d1ed      	bne.n	8009eac <__swbuf_r+0x2a>
 8009ed0:	68a3      	ldr	r3, [r4, #8]
 8009ed2:	3b01      	subs	r3, #1
 8009ed4:	60a3      	str	r3, [r4, #8]
 8009ed6:	6823      	ldr	r3, [r4, #0]
 8009ed8:	1c5a      	adds	r2, r3, #1
 8009eda:	6022      	str	r2, [r4, #0]
 8009edc:	701e      	strb	r6, [r3, #0]
 8009ede:	6962      	ldr	r2, [r4, #20]
 8009ee0:	1c43      	adds	r3, r0, #1
 8009ee2:	429a      	cmp	r2, r3
 8009ee4:	d004      	beq.n	8009ef0 <__swbuf_r+0x6e>
 8009ee6:	89a3      	ldrh	r3, [r4, #12]
 8009ee8:	07db      	lsls	r3, r3, #31
 8009eea:	d5e1      	bpl.n	8009eb0 <__swbuf_r+0x2e>
 8009eec:	2e0a      	cmp	r6, #10
 8009eee:	d1df      	bne.n	8009eb0 <__swbuf_r+0x2e>
 8009ef0:	4621      	mov	r1, r4
 8009ef2:	4628      	mov	r0, r5
 8009ef4:	f002 fe22 	bl	800cb3c <_fflush_r>
 8009ef8:	2800      	cmp	r0, #0
 8009efa:	d0d9      	beq.n	8009eb0 <__swbuf_r+0x2e>
 8009efc:	e7d6      	b.n	8009eac <__swbuf_r+0x2a>
	...

08009f00 <__swsetup_r>:
 8009f00:	b538      	push	{r3, r4, r5, lr}
 8009f02:	4b29      	ldr	r3, [pc, #164]	@ (8009fa8 <__swsetup_r+0xa8>)
 8009f04:	4605      	mov	r5, r0
 8009f06:	6818      	ldr	r0, [r3, #0]
 8009f08:	460c      	mov	r4, r1
 8009f0a:	b118      	cbz	r0, 8009f14 <__swsetup_r+0x14>
 8009f0c:	6a03      	ldr	r3, [r0, #32]
 8009f0e:	b90b      	cbnz	r3, 8009f14 <__swsetup_r+0x14>
 8009f10:	f7ff feae 	bl	8009c70 <__sinit>
 8009f14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f18:	0719      	lsls	r1, r3, #28
 8009f1a:	d422      	bmi.n	8009f62 <__swsetup_r+0x62>
 8009f1c:	06da      	lsls	r2, r3, #27
 8009f1e:	d407      	bmi.n	8009f30 <__swsetup_r+0x30>
 8009f20:	2209      	movs	r2, #9
 8009f22:	602a      	str	r2, [r5, #0]
 8009f24:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009f28:	81a3      	strh	r3, [r4, #12]
 8009f2a:	f04f 30ff 	mov.w	r0, #4294967295
 8009f2e:	e033      	b.n	8009f98 <__swsetup_r+0x98>
 8009f30:	0758      	lsls	r0, r3, #29
 8009f32:	d512      	bpl.n	8009f5a <__swsetup_r+0x5a>
 8009f34:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009f36:	b141      	cbz	r1, 8009f4a <__swsetup_r+0x4a>
 8009f38:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009f3c:	4299      	cmp	r1, r3
 8009f3e:	d002      	beq.n	8009f46 <__swsetup_r+0x46>
 8009f40:	4628      	mov	r0, r5
 8009f42:	f000 fefb 	bl	800ad3c <_free_r>
 8009f46:	2300      	movs	r3, #0
 8009f48:	6363      	str	r3, [r4, #52]	@ 0x34
 8009f4a:	89a3      	ldrh	r3, [r4, #12]
 8009f4c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009f50:	81a3      	strh	r3, [r4, #12]
 8009f52:	2300      	movs	r3, #0
 8009f54:	6063      	str	r3, [r4, #4]
 8009f56:	6923      	ldr	r3, [r4, #16]
 8009f58:	6023      	str	r3, [r4, #0]
 8009f5a:	89a3      	ldrh	r3, [r4, #12]
 8009f5c:	f043 0308 	orr.w	r3, r3, #8
 8009f60:	81a3      	strh	r3, [r4, #12]
 8009f62:	6923      	ldr	r3, [r4, #16]
 8009f64:	b94b      	cbnz	r3, 8009f7a <__swsetup_r+0x7a>
 8009f66:	89a3      	ldrh	r3, [r4, #12]
 8009f68:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009f6c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009f70:	d003      	beq.n	8009f7a <__swsetup_r+0x7a>
 8009f72:	4621      	mov	r1, r4
 8009f74:	4628      	mov	r0, r5
 8009f76:	f002 fe2f 	bl	800cbd8 <__smakebuf_r>
 8009f7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f7e:	f013 0201 	ands.w	r2, r3, #1
 8009f82:	d00a      	beq.n	8009f9a <__swsetup_r+0x9a>
 8009f84:	2200      	movs	r2, #0
 8009f86:	60a2      	str	r2, [r4, #8]
 8009f88:	6962      	ldr	r2, [r4, #20]
 8009f8a:	4252      	negs	r2, r2
 8009f8c:	61a2      	str	r2, [r4, #24]
 8009f8e:	6922      	ldr	r2, [r4, #16]
 8009f90:	b942      	cbnz	r2, 8009fa4 <__swsetup_r+0xa4>
 8009f92:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009f96:	d1c5      	bne.n	8009f24 <__swsetup_r+0x24>
 8009f98:	bd38      	pop	{r3, r4, r5, pc}
 8009f9a:	0799      	lsls	r1, r3, #30
 8009f9c:	bf58      	it	pl
 8009f9e:	6962      	ldrpl	r2, [r4, #20]
 8009fa0:	60a2      	str	r2, [r4, #8]
 8009fa2:	e7f4      	b.n	8009f8e <__swsetup_r+0x8e>
 8009fa4:	2000      	movs	r0, #0
 8009fa6:	e7f7      	b.n	8009f98 <__swsetup_r+0x98>
 8009fa8:	24000020 	.word	0x24000020

08009fac <memset>:
 8009fac:	4402      	add	r2, r0
 8009fae:	4603      	mov	r3, r0
 8009fb0:	4293      	cmp	r3, r2
 8009fb2:	d100      	bne.n	8009fb6 <memset+0xa>
 8009fb4:	4770      	bx	lr
 8009fb6:	f803 1b01 	strb.w	r1, [r3], #1
 8009fba:	e7f9      	b.n	8009fb0 <memset+0x4>

08009fbc <_localeconv_r>:
 8009fbc:	4800      	ldr	r0, [pc, #0]	@ (8009fc0 <_localeconv_r+0x4>)
 8009fbe:	4770      	bx	lr
 8009fc0:	24000160 	.word	0x24000160

08009fc4 <_close_r>:
 8009fc4:	b538      	push	{r3, r4, r5, lr}
 8009fc6:	4d06      	ldr	r5, [pc, #24]	@ (8009fe0 <_close_r+0x1c>)
 8009fc8:	2300      	movs	r3, #0
 8009fca:	4604      	mov	r4, r0
 8009fcc:	4608      	mov	r0, r1
 8009fce:	602b      	str	r3, [r5, #0]
 8009fd0:	f7f6 ff82 	bl	8000ed8 <_close>
 8009fd4:	1c43      	adds	r3, r0, #1
 8009fd6:	d102      	bne.n	8009fde <_close_r+0x1a>
 8009fd8:	682b      	ldr	r3, [r5, #0]
 8009fda:	b103      	cbz	r3, 8009fde <_close_r+0x1a>
 8009fdc:	6023      	str	r3, [r4, #0]
 8009fde:	bd38      	pop	{r3, r4, r5, pc}
 8009fe0:	24004e14 	.word	0x24004e14

08009fe4 <_reclaim_reent>:
 8009fe4:	4b29      	ldr	r3, [pc, #164]	@ (800a08c <_reclaim_reent+0xa8>)
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	4283      	cmp	r3, r0
 8009fea:	b570      	push	{r4, r5, r6, lr}
 8009fec:	4604      	mov	r4, r0
 8009fee:	d04b      	beq.n	800a088 <_reclaim_reent+0xa4>
 8009ff0:	69c3      	ldr	r3, [r0, #28]
 8009ff2:	b1ab      	cbz	r3, 800a020 <_reclaim_reent+0x3c>
 8009ff4:	68db      	ldr	r3, [r3, #12]
 8009ff6:	b16b      	cbz	r3, 800a014 <_reclaim_reent+0x30>
 8009ff8:	2500      	movs	r5, #0
 8009ffa:	69e3      	ldr	r3, [r4, #28]
 8009ffc:	68db      	ldr	r3, [r3, #12]
 8009ffe:	5959      	ldr	r1, [r3, r5]
 800a000:	2900      	cmp	r1, #0
 800a002:	d13b      	bne.n	800a07c <_reclaim_reent+0x98>
 800a004:	3504      	adds	r5, #4
 800a006:	2d80      	cmp	r5, #128	@ 0x80
 800a008:	d1f7      	bne.n	8009ffa <_reclaim_reent+0x16>
 800a00a:	69e3      	ldr	r3, [r4, #28]
 800a00c:	4620      	mov	r0, r4
 800a00e:	68d9      	ldr	r1, [r3, #12]
 800a010:	f000 fe94 	bl	800ad3c <_free_r>
 800a014:	69e3      	ldr	r3, [r4, #28]
 800a016:	6819      	ldr	r1, [r3, #0]
 800a018:	b111      	cbz	r1, 800a020 <_reclaim_reent+0x3c>
 800a01a:	4620      	mov	r0, r4
 800a01c:	f000 fe8e 	bl	800ad3c <_free_r>
 800a020:	6961      	ldr	r1, [r4, #20]
 800a022:	b111      	cbz	r1, 800a02a <_reclaim_reent+0x46>
 800a024:	4620      	mov	r0, r4
 800a026:	f000 fe89 	bl	800ad3c <_free_r>
 800a02a:	69e1      	ldr	r1, [r4, #28]
 800a02c:	b111      	cbz	r1, 800a034 <_reclaim_reent+0x50>
 800a02e:	4620      	mov	r0, r4
 800a030:	f000 fe84 	bl	800ad3c <_free_r>
 800a034:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800a036:	b111      	cbz	r1, 800a03e <_reclaim_reent+0x5a>
 800a038:	4620      	mov	r0, r4
 800a03a:	f000 fe7f 	bl	800ad3c <_free_r>
 800a03e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a040:	b111      	cbz	r1, 800a048 <_reclaim_reent+0x64>
 800a042:	4620      	mov	r0, r4
 800a044:	f000 fe7a 	bl	800ad3c <_free_r>
 800a048:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800a04a:	b111      	cbz	r1, 800a052 <_reclaim_reent+0x6e>
 800a04c:	4620      	mov	r0, r4
 800a04e:	f000 fe75 	bl	800ad3c <_free_r>
 800a052:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800a054:	b111      	cbz	r1, 800a05c <_reclaim_reent+0x78>
 800a056:	4620      	mov	r0, r4
 800a058:	f000 fe70 	bl	800ad3c <_free_r>
 800a05c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800a05e:	b111      	cbz	r1, 800a066 <_reclaim_reent+0x82>
 800a060:	4620      	mov	r0, r4
 800a062:	f000 fe6b 	bl	800ad3c <_free_r>
 800a066:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800a068:	b111      	cbz	r1, 800a070 <_reclaim_reent+0x8c>
 800a06a:	4620      	mov	r0, r4
 800a06c:	f000 fe66 	bl	800ad3c <_free_r>
 800a070:	6a23      	ldr	r3, [r4, #32]
 800a072:	b14b      	cbz	r3, 800a088 <_reclaim_reent+0xa4>
 800a074:	4620      	mov	r0, r4
 800a076:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a07a:	4718      	bx	r3
 800a07c:	680e      	ldr	r6, [r1, #0]
 800a07e:	4620      	mov	r0, r4
 800a080:	f000 fe5c 	bl	800ad3c <_free_r>
 800a084:	4631      	mov	r1, r6
 800a086:	e7bb      	b.n	800a000 <_reclaim_reent+0x1c>
 800a088:	bd70      	pop	{r4, r5, r6, pc}
 800a08a:	bf00      	nop
 800a08c:	24000020 	.word	0x24000020

0800a090 <_lseek_r>:
 800a090:	b538      	push	{r3, r4, r5, lr}
 800a092:	4d07      	ldr	r5, [pc, #28]	@ (800a0b0 <_lseek_r+0x20>)
 800a094:	4604      	mov	r4, r0
 800a096:	4608      	mov	r0, r1
 800a098:	4611      	mov	r1, r2
 800a09a:	2200      	movs	r2, #0
 800a09c:	602a      	str	r2, [r5, #0]
 800a09e:	461a      	mov	r2, r3
 800a0a0:	f7f6 ff41 	bl	8000f26 <_lseek>
 800a0a4:	1c43      	adds	r3, r0, #1
 800a0a6:	d102      	bne.n	800a0ae <_lseek_r+0x1e>
 800a0a8:	682b      	ldr	r3, [r5, #0]
 800a0aa:	b103      	cbz	r3, 800a0ae <_lseek_r+0x1e>
 800a0ac:	6023      	str	r3, [r4, #0]
 800a0ae:	bd38      	pop	{r3, r4, r5, pc}
 800a0b0:	24004e14 	.word	0x24004e14

0800a0b4 <_read_r>:
 800a0b4:	b538      	push	{r3, r4, r5, lr}
 800a0b6:	4d07      	ldr	r5, [pc, #28]	@ (800a0d4 <_read_r+0x20>)
 800a0b8:	4604      	mov	r4, r0
 800a0ba:	4608      	mov	r0, r1
 800a0bc:	4611      	mov	r1, r2
 800a0be:	2200      	movs	r2, #0
 800a0c0:	602a      	str	r2, [r5, #0]
 800a0c2:	461a      	mov	r2, r3
 800a0c4:	f7f6 fecf 	bl	8000e66 <_read>
 800a0c8:	1c43      	adds	r3, r0, #1
 800a0ca:	d102      	bne.n	800a0d2 <_read_r+0x1e>
 800a0cc:	682b      	ldr	r3, [r5, #0]
 800a0ce:	b103      	cbz	r3, 800a0d2 <_read_r+0x1e>
 800a0d0:	6023      	str	r3, [r4, #0]
 800a0d2:	bd38      	pop	{r3, r4, r5, pc}
 800a0d4:	24004e14 	.word	0x24004e14

0800a0d8 <_write_r>:
 800a0d8:	b538      	push	{r3, r4, r5, lr}
 800a0da:	4d07      	ldr	r5, [pc, #28]	@ (800a0f8 <_write_r+0x20>)
 800a0dc:	4604      	mov	r4, r0
 800a0de:	4608      	mov	r0, r1
 800a0e0:	4611      	mov	r1, r2
 800a0e2:	2200      	movs	r2, #0
 800a0e4:	602a      	str	r2, [r5, #0]
 800a0e6:	461a      	mov	r2, r3
 800a0e8:	f7f6 feda 	bl	8000ea0 <_write>
 800a0ec:	1c43      	adds	r3, r0, #1
 800a0ee:	d102      	bne.n	800a0f6 <_write_r+0x1e>
 800a0f0:	682b      	ldr	r3, [r5, #0]
 800a0f2:	b103      	cbz	r3, 800a0f6 <_write_r+0x1e>
 800a0f4:	6023      	str	r3, [r4, #0]
 800a0f6:	bd38      	pop	{r3, r4, r5, pc}
 800a0f8:	24004e14 	.word	0x24004e14

0800a0fc <__errno>:
 800a0fc:	4b01      	ldr	r3, [pc, #4]	@ (800a104 <__errno+0x8>)
 800a0fe:	6818      	ldr	r0, [r3, #0]
 800a100:	4770      	bx	lr
 800a102:	bf00      	nop
 800a104:	24000020 	.word	0x24000020

0800a108 <__libc_init_array>:
 800a108:	b570      	push	{r4, r5, r6, lr}
 800a10a:	4d0d      	ldr	r5, [pc, #52]	@ (800a140 <__libc_init_array+0x38>)
 800a10c:	4c0d      	ldr	r4, [pc, #52]	@ (800a144 <__libc_init_array+0x3c>)
 800a10e:	1b64      	subs	r4, r4, r5
 800a110:	10a4      	asrs	r4, r4, #2
 800a112:	2600      	movs	r6, #0
 800a114:	42a6      	cmp	r6, r4
 800a116:	d109      	bne.n	800a12c <__libc_init_array+0x24>
 800a118:	4d0b      	ldr	r5, [pc, #44]	@ (800a148 <__libc_init_array+0x40>)
 800a11a:	4c0c      	ldr	r4, [pc, #48]	@ (800a14c <__libc_init_array+0x44>)
 800a11c:	f003 fa1e 	bl	800d55c <_init>
 800a120:	1b64      	subs	r4, r4, r5
 800a122:	10a4      	asrs	r4, r4, #2
 800a124:	2600      	movs	r6, #0
 800a126:	42a6      	cmp	r6, r4
 800a128:	d105      	bne.n	800a136 <__libc_init_array+0x2e>
 800a12a:	bd70      	pop	{r4, r5, r6, pc}
 800a12c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a130:	4798      	blx	r3
 800a132:	3601      	adds	r6, #1
 800a134:	e7ee      	b.n	800a114 <__libc_init_array+0xc>
 800a136:	f855 3b04 	ldr.w	r3, [r5], #4
 800a13a:	4798      	blx	r3
 800a13c:	3601      	adds	r6, #1
 800a13e:	e7f2      	b.n	800a126 <__libc_init_array+0x1e>
 800a140:	0800da68 	.word	0x0800da68
 800a144:	0800da68 	.word	0x0800da68
 800a148:	0800da68 	.word	0x0800da68
 800a14c:	0800da6c 	.word	0x0800da6c

0800a150 <__retarget_lock_init_recursive>:
 800a150:	4770      	bx	lr

0800a152 <__retarget_lock_acquire_recursive>:
 800a152:	4770      	bx	lr

0800a154 <__retarget_lock_release_recursive>:
 800a154:	4770      	bx	lr

0800a156 <memcpy>:
 800a156:	440a      	add	r2, r1
 800a158:	4291      	cmp	r1, r2
 800a15a:	f100 33ff 	add.w	r3, r0, #4294967295
 800a15e:	d100      	bne.n	800a162 <memcpy+0xc>
 800a160:	4770      	bx	lr
 800a162:	b510      	push	{r4, lr}
 800a164:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a168:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a16c:	4291      	cmp	r1, r2
 800a16e:	d1f9      	bne.n	800a164 <memcpy+0xe>
 800a170:	bd10      	pop	{r4, pc}
	...

0800a174 <nanf>:
 800a174:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800a17c <nanf+0x8>
 800a178:	4770      	bx	lr
 800a17a:	bf00      	nop
 800a17c:	7fc00000 	.word	0x7fc00000

0800a180 <quorem>:
 800a180:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a184:	6903      	ldr	r3, [r0, #16]
 800a186:	690c      	ldr	r4, [r1, #16]
 800a188:	42a3      	cmp	r3, r4
 800a18a:	4607      	mov	r7, r0
 800a18c:	db7e      	blt.n	800a28c <quorem+0x10c>
 800a18e:	3c01      	subs	r4, #1
 800a190:	f101 0814 	add.w	r8, r1, #20
 800a194:	00a3      	lsls	r3, r4, #2
 800a196:	f100 0514 	add.w	r5, r0, #20
 800a19a:	9300      	str	r3, [sp, #0]
 800a19c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a1a0:	9301      	str	r3, [sp, #4]
 800a1a2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a1a6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a1aa:	3301      	adds	r3, #1
 800a1ac:	429a      	cmp	r2, r3
 800a1ae:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a1b2:	fbb2 f6f3 	udiv	r6, r2, r3
 800a1b6:	d32e      	bcc.n	800a216 <quorem+0x96>
 800a1b8:	f04f 0a00 	mov.w	sl, #0
 800a1bc:	46c4      	mov	ip, r8
 800a1be:	46ae      	mov	lr, r5
 800a1c0:	46d3      	mov	fp, sl
 800a1c2:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a1c6:	b298      	uxth	r0, r3
 800a1c8:	fb06 a000 	mla	r0, r6, r0, sl
 800a1cc:	0c02      	lsrs	r2, r0, #16
 800a1ce:	0c1b      	lsrs	r3, r3, #16
 800a1d0:	fb06 2303 	mla	r3, r6, r3, r2
 800a1d4:	f8de 2000 	ldr.w	r2, [lr]
 800a1d8:	b280      	uxth	r0, r0
 800a1da:	b292      	uxth	r2, r2
 800a1dc:	1a12      	subs	r2, r2, r0
 800a1de:	445a      	add	r2, fp
 800a1e0:	f8de 0000 	ldr.w	r0, [lr]
 800a1e4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a1e8:	b29b      	uxth	r3, r3
 800a1ea:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a1ee:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a1f2:	b292      	uxth	r2, r2
 800a1f4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a1f8:	45e1      	cmp	r9, ip
 800a1fa:	f84e 2b04 	str.w	r2, [lr], #4
 800a1fe:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a202:	d2de      	bcs.n	800a1c2 <quorem+0x42>
 800a204:	9b00      	ldr	r3, [sp, #0]
 800a206:	58eb      	ldr	r3, [r5, r3]
 800a208:	b92b      	cbnz	r3, 800a216 <quorem+0x96>
 800a20a:	9b01      	ldr	r3, [sp, #4]
 800a20c:	3b04      	subs	r3, #4
 800a20e:	429d      	cmp	r5, r3
 800a210:	461a      	mov	r2, r3
 800a212:	d32f      	bcc.n	800a274 <quorem+0xf4>
 800a214:	613c      	str	r4, [r7, #16]
 800a216:	4638      	mov	r0, r7
 800a218:	f001 f954 	bl	800b4c4 <__mcmp>
 800a21c:	2800      	cmp	r0, #0
 800a21e:	db25      	blt.n	800a26c <quorem+0xec>
 800a220:	4629      	mov	r1, r5
 800a222:	2000      	movs	r0, #0
 800a224:	f858 2b04 	ldr.w	r2, [r8], #4
 800a228:	f8d1 c000 	ldr.w	ip, [r1]
 800a22c:	fa1f fe82 	uxth.w	lr, r2
 800a230:	fa1f f38c 	uxth.w	r3, ip
 800a234:	eba3 030e 	sub.w	r3, r3, lr
 800a238:	4403      	add	r3, r0
 800a23a:	0c12      	lsrs	r2, r2, #16
 800a23c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a240:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a244:	b29b      	uxth	r3, r3
 800a246:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a24a:	45c1      	cmp	r9, r8
 800a24c:	f841 3b04 	str.w	r3, [r1], #4
 800a250:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a254:	d2e6      	bcs.n	800a224 <quorem+0xa4>
 800a256:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a25a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a25e:	b922      	cbnz	r2, 800a26a <quorem+0xea>
 800a260:	3b04      	subs	r3, #4
 800a262:	429d      	cmp	r5, r3
 800a264:	461a      	mov	r2, r3
 800a266:	d30b      	bcc.n	800a280 <quorem+0x100>
 800a268:	613c      	str	r4, [r7, #16]
 800a26a:	3601      	adds	r6, #1
 800a26c:	4630      	mov	r0, r6
 800a26e:	b003      	add	sp, #12
 800a270:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a274:	6812      	ldr	r2, [r2, #0]
 800a276:	3b04      	subs	r3, #4
 800a278:	2a00      	cmp	r2, #0
 800a27a:	d1cb      	bne.n	800a214 <quorem+0x94>
 800a27c:	3c01      	subs	r4, #1
 800a27e:	e7c6      	b.n	800a20e <quorem+0x8e>
 800a280:	6812      	ldr	r2, [r2, #0]
 800a282:	3b04      	subs	r3, #4
 800a284:	2a00      	cmp	r2, #0
 800a286:	d1ef      	bne.n	800a268 <quorem+0xe8>
 800a288:	3c01      	subs	r4, #1
 800a28a:	e7ea      	b.n	800a262 <quorem+0xe2>
 800a28c:	2000      	movs	r0, #0
 800a28e:	e7ee      	b.n	800a26e <quorem+0xee>

0800a290 <_dtoa_r>:
 800a290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a294:	ed2d 8b02 	vpush	{d8}
 800a298:	69c7      	ldr	r7, [r0, #28]
 800a29a:	b091      	sub	sp, #68	@ 0x44
 800a29c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a2a0:	ec55 4b10 	vmov	r4, r5, d0
 800a2a4:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800a2a6:	9107      	str	r1, [sp, #28]
 800a2a8:	4681      	mov	r9, r0
 800a2aa:	9209      	str	r2, [sp, #36]	@ 0x24
 800a2ac:	930d      	str	r3, [sp, #52]	@ 0x34
 800a2ae:	b97f      	cbnz	r7, 800a2d0 <_dtoa_r+0x40>
 800a2b0:	2010      	movs	r0, #16
 800a2b2:	f000 fd8d 	bl	800add0 <malloc>
 800a2b6:	4602      	mov	r2, r0
 800a2b8:	f8c9 001c 	str.w	r0, [r9, #28]
 800a2bc:	b920      	cbnz	r0, 800a2c8 <_dtoa_r+0x38>
 800a2be:	4ba0      	ldr	r3, [pc, #640]	@ (800a540 <_dtoa_r+0x2b0>)
 800a2c0:	21ef      	movs	r1, #239	@ 0xef
 800a2c2:	48a0      	ldr	r0, [pc, #640]	@ (800a544 <_dtoa_r+0x2b4>)
 800a2c4:	f002 fd2c 	bl	800cd20 <__assert_func>
 800a2c8:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a2cc:	6007      	str	r7, [r0, #0]
 800a2ce:	60c7      	str	r7, [r0, #12]
 800a2d0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a2d4:	6819      	ldr	r1, [r3, #0]
 800a2d6:	b159      	cbz	r1, 800a2f0 <_dtoa_r+0x60>
 800a2d8:	685a      	ldr	r2, [r3, #4]
 800a2da:	604a      	str	r2, [r1, #4]
 800a2dc:	2301      	movs	r3, #1
 800a2de:	4093      	lsls	r3, r2
 800a2e0:	608b      	str	r3, [r1, #8]
 800a2e2:	4648      	mov	r0, r9
 800a2e4:	f000 fe6a 	bl	800afbc <_Bfree>
 800a2e8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a2ec:	2200      	movs	r2, #0
 800a2ee:	601a      	str	r2, [r3, #0]
 800a2f0:	1e2b      	subs	r3, r5, #0
 800a2f2:	bfbb      	ittet	lt
 800a2f4:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a2f8:	9303      	strlt	r3, [sp, #12]
 800a2fa:	2300      	movge	r3, #0
 800a2fc:	2201      	movlt	r2, #1
 800a2fe:	bfac      	ite	ge
 800a300:	6033      	strge	r3, [r6, #0]
 800a302:	6032      	strlt	r2, [r6, #0]
 800a304:	4b90      	ldr	r3, [pc, #576]	@ (800a548 <_dtoa_r+0x2b8>)
 800a306:	9e03      	ldr	r6, [sp, #12]
 800a308:	43b3      	bics	r3, r6
 800a30a:	d110      	bne.n	800a32e <_dtoa_r+0x9e>
 800a30c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a30e:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a312:	6013      	str	r3, [r2, #0]
 800a314:	f3c6 0313 	ubfx	r3, r6, #0, #20
 800a318:	4323      	orrs	r3, r4
 800a31a:	f000 84de 	beq.w	800acda <_dtoa_r+0xa4a>
 800a31e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a320:	4f8a      	ldr	r7, [pc, #552]	@ (800a54c <_dtoa_r+0x2bc>)
 800a322:	2b00      	cmp	r3, #0
 800a324:	f000 84e0 	beq.w	800ace8 <_dtoa_r+0xa58>
 800a328:	1cfb      	adds	r3, r7, #3
 800a32a:	f000 bcdb 	b.w	800ace4 <_dtoa_r+0xa54>
 800a32e:	ed9d 8b02 	vldr	d8, [sp, #8]
 800a332:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800a336:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a33a:	d10a      	bne.n	800a352 <_dtoa_r+0xc2>
 800a33c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a33e:	2301      	movs	r3, #1
 800a340:	6013      	str	r3, [r2, #0]
 800a342:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a344:	b113      	cbz	r3, 800a34c <_dtoa_r+0xbc>
 800a346:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800a348:	4b81      	ldr	r3, [pc, #516]	@ (800a550 <_dtoa_r+0x2c0>)
 800a34a:	6013      	str	r3, [r2, #0]
 800a34c:	4f81      	ldr	r7, [pc, #516]	@ (800a554 <_dtoa_r+0x2c4>)
 800a34e:	f000 bccb 	b.w	800ace8 <_dtoa_r+0xa58>
 800a352:	aa0e      	add	r2, sp, #56	@ 0x38
 800a354:	a90f      	add	r1, sp, #60	@ 0x3c
 800a356:	4648      	mov	r0, r9
 800a358:	eeb0 0b48 	vmov.f64	d0, d8
 800a35c:	f001 f9d2 	bl	800b704 <__d2b>
 800a360:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800a364:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a366:	9001      	str	r0, [sp, #4]
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d045      	beq.n	800a3f8 <_dtoa_r+0x168>
 800a36c:	eeb0 7b48 	vmov.f64	d7, d8
 800a370:	ee18 1a90 	vmov	r1, s17
 800a374:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800a378:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800a37c:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800a380:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800a384:	2500      	movs	r5, #0
 800a386:	ee07 1a90 	vmov	s15, r1
 800a38a:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800a38e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800a528 <_dtoa_r+0x298>
 800a392:	ee37 7b46 	vsub.f64	d7, d7, d6
 800a396:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800a530 <_dtoa_r+0x2a0>
 800a39a:	eea7 6b05 	vfma.f64	d6, d7, d5
 800a39e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800a538 <_dtoa_r+0x2a8>
 800a3a2:	ee07 3a90 	vmov	s15, r3
 800a3a6:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800a3aa:	eeb0 7b46 	vmov.f64	d7, d6
 800a3ae:	eea4 7b05 	vfma.f64	d7, d4, d5
 800a3b2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800a3b6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800a3ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a3be:	ee16 8a90 	vmov	r8, s13
 800a3c2:	d508      	bpl.n	800a3d6 <_dtoa_r+0x146>
 800a3c4:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800a3c8:	eeb4 6b47 	vcmp.f64	d6, d7
 800a3cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a3d0:	bf18      	it	ne
 800a3d2:	f108 38ff 	addne.w	r8, r8, #4294967295
 800a3d6:	f1b8 0f16 	cmp.w	r8, #22
 800a3da:	d82b      	bhi.n	800a434 <_dtoa_r+0x1a4>
 800a3dc:	495e      	ldr	r1, [pc, #376]	@ (800a558 <_dtoa_r+0x2c8>)
 800a3de:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800a3e2:	ed91 7b00 	vldr	d7, [r1]
 800a3e6:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800a3ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a3ee:	d501      	bpl.n	800a3f4 <_dtoa_r+0x164>
 800a3f0:	f108 38ff 	add.w	r8, r8, #4294967295
 800a3f4:	2100      	movs	r1, #0
 800a3f6:	e01e      	b.n	800a436 <_dtoa_r+0x1a6>
 800a3f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a3fa:	4413      	add	r3, r2
 800a3fc:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 800a400:	2920      	cmp	r1, #32
 800a402:	bfc1      	itttt	gt
 800a404:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 800a408:	408e      	lslgt	r6, r1
 800a40a:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800a40e:	fa24 f101 	lsrgt.w	r1, r4, r1
 800a412:	bfd6      	itet	le
 800a414:	f1c1 0120 	rsble	r1, r1, #32
 800a418:	4331      	orrgt	r1, r6
 800a41a:	fa04 f101 	lslle.w	r1, r4, r1
 800a41e:	ee07 1a90 	vmov	s15, r1
 800a422:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800a426:	3b01      	subs	r3, #1
 800a428:	ee17 1a90 	vmov	r1, s15
 800a42c:	2501      	movs	r5, #1
 800a42e:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800a432:	e7a8      	b.n	800a386 <_dtoa_r+0xf6>
 800a434:	2101      	movs	r1, #1
 800a436:	1ad2      	subs	r2, r2, r3
 800a438:	1e53      	subs	r3, r2, #1
 800a43a:	9306      	str	r3, [sp, #24]
 800a43c:	bf45      	ittet	mi
 800a43e:	f1c2 0301 	rsbmi	r3, r2, #1
 800a442:	9305      	strmi	r3, [sp, #20]
 800a444:	2300      	movpl	r3, #0
 800a446:	2300      	movmi	r3, #0
 800a448:	bf4c      	ite	mi
 800a44a:	9306      	strmi	r3, [sp, #24]
 800a44c:	9305      	strpl	r3, [sp, #20]
 800a44e:	f1b8 0f00 	cmp.w	r8, #0
 800a452:	910c      	str	r1, [sp, #48]	@ 0x30
 800a454:	db18      	blt.n	800a488 <_dtoa_r+0x1f8>
 800a456:	9b06      	ldr	r3, [sp, #24]
 800a458:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800a45c:	4443      	add	r3, r8
 800a45e:	9306      	str	r3, [sp, #24]
 800a460:	2300      	movs	r3, #0
 800a462:	9a07      	ldr	r2, [sp, #28]
 800a464:	2a09      	cmp	r2, #9
 800a466:	d849      	bhi.n	800a4fc <_dtoa_r+0x26c>
 800a468:	2a05      	cmp	r2, #5
 800a46a:	bfc4      	itt	gt
 800a46c:	3a04      	subgt	r2, #4
 800a46e:	9207      	strgt	r2, [sp, #28]
 800a470:	9a07      	ldr	r2, [sp, #28]
 800a472:	f1a2 0202 	sub.w	r2, r2, #2
 800a476:	bfcc      	ite	gt
 800a478:	2400      	movgt	r4, #0
 800a47a:	2401      	movle	r4, #1
 800a47c:	2a03      	cmp	r2, #3
 800a47e:	d848      	bhi.n	800a512 <_dtoa_r+0x282>
 800a480:	e8df f002 	tbb	[pc, r2]
 800a484:	3a2c2e0b 	.word	0x3a2c2e0b
 800a488:	9b05      	ldr	r3, [sp, #20]
 800a48a:	2200      	movs	r2, #0
 800a48c:	eba3 0308 	sub.w	r3, r3, r8
 800a490:	9305      	str	r3, [sp, #20]
 800a492:	920a      	str	r2, [sp, #40]	@ 0x28
 800a494:	f1c8 0300 	rsb	r3, r8, #0
 800a498:	e7e3      	b.n	800a462 <_dtoa_r+0x1d2>
 800a49a:	2200      	movs	r2, #0
 800a49c:	9208      	str	r2, [sp, #32]
 800a49e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a4a0:	2a00      	cmp	r2, #0
 800a4a2:	dc39      	bgt.n	800a518 <_dtoa_r+0x288>
 800a4a4:	f04f 0b01 	mov.w	fp, #1
 800a4a8:	46da      	mov	sl, fp
 800a4aa:	465a      	mov	r2, fp
 800a4ac:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800a4b0:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800a4b4:	2100      	movs	r1, #0
 800a4b6:	2004      	movs	r0, #4
 800a4b8:	f100 0614 	add.w	r6, r0, #20
 800a4bc:	4296      	cmp	r6, r2
 800a4be:	d930      	bls.n	800a522 <_dtoa_r+0x292>
 800a4c0:	6079      	str	r1, [r7, #4]
 800a4c2:	4648      	mov	r0, r9
 800a4c4:	9304      	str	r3, [sp, #16]
 800a4c6:	f000 fd39 	bl	800af3c <_Balloc>
 800a4ca:	9b04      	ldr	r3, [sp, #16]
 800a4cc:	4607      	mov	r7, r0
 800a4ce:	2800      	cmp	r0, #0
 800a4d0:	d146      	bne.n	800a560 <_dtoa_r+0x2d0>
 800a4d2:	4b22      	ldr	r3, [pc, #136]	@ (800a55c <_dtoa_r+0x2cc>)
 800a4d4:	4602      	mov	r2, r0
 800a4d6:	f240 11af 	movw	r1, #431	@ 0x1af
 800a4da:	e6f2      	b.n	800a2c2 <_dtoa_r+0x32>
 800a4dc:	2201      	movs	r2, #1
 800a4de:	e7dd      	b.n	800a49c <_dtoa_r+0x20c>
 800a4e0:	2200      	movs	r2, #0
 800a4e2:	9208      	str	r2, [sp, #32]
 800a4e4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a4e6:	eb08 0b02 	add.w	fp, r8, r2
 800a4ea:	f10b 0a01 	add.w	sl, fp, #1
 800a4ee:	4652      	mov	r2, sl
 800a4f0:	2a01      	cmp	r2, #1
 800a4f2:	bfb8      	it	lt
 800a4f4:	2201      	movlt	r2, #1
 800a4f6:	e7db      	b.n	800a4b0 <_dtoa_r+0x220>
 800a4f8:	2201      	movs	r2, #1
 800a4fa:	e7f2      	b.n	800a4e2 <_dtoa_r+0x252>
 800a4fc:	2401      	movs	r4, #1
 800a4fe:	2200      	movs	r2, #0
 800a500:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800a504:	f04f 3bff 	mov.w	fp, #4294967295
 800a508:	2100      	movs	r1, #0
 800a50a:	46da      	mov	sl, fp
 800a50c:	2212      	movs	r2, #18
 800a50e:	9109      	str	r1, [sp, #36]	@ 0x24
 800a510:	e7ce      	b.n	800a4b0 <_dtoa_r+0x220>
 800a512:	2201      	movs	r2, #1
 800a514:	9208      	str	r2, [sp, #32]
 800a516:	e7f5      	b.n	800a504 <_dtoa_r+0x274>
 800a518:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 800a51c:	46da      	mov	sl, fp
 800a51e:	465a      	mov	r2, fp
 800a520:	e7c6      	b.n	800a4b0 <_dtoa_r+0x220>
 800a522:	3101      	adds	r1, #1
 800a524:	0040      	lsls	r0, r0, #1
 800a526:	e7c7      	b.n	800a4b8 <_dtoa_r+0x228>
 800a528:	636f4361 	.word	0x636f4361
 800a52c:	3fd287a7 	.word	0x3fd287a7
 800a530:	8b60c8b3 	.word	0x8b60c8b3
 800a534:	3fc68a28 	.word	0x3fc68a28
 800a538:	509f79fb 	.word	0x509f79fb
 800a53c:	3fd34413 	.word	0x3fd34413
 800a540:	0800d676 	.word	0x0800d676
 800a544:	0800d68d 	.word	0x0800d68d
 800a548:	7ff00000 	.word	0x7ff00000
 800a54c:	0800d672 	.word	0x0800d672
 800a550:	0800d641 	.word	0x0800d641
 800a554:	0800d640 	.word	0x0800d640
 800a558:	0800d788 	.word	0x0800d788
 800a55c:	0800d6e5 	.word	0x0800d6e5
 800a560:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800a564:	f1ba 0f0e 	cmp.w	sl, #14
 800a568:	6010      	str	r0, [r2, #0]
 800a56a:	d86f      	bhi.n	800a64c <_dtoa_r+0x3bc>
 800a56c:	2c00      	cmp	r4, #0
 800a56e:	d06d      	beq.n	800a64c <_dtoa_r+0x3bc>
 800a570:	f1b8 0f00 	cmp.w	r8, #0
 800a574:	f340 80c2 	ble.w	800a6fc <_dtoa_r+0x46c>
 800a578:	4aca      	ldr	r2, [pc, #808]	@ (800a8a4 <_dtoa_r+0x614>)
 800a57a:	f008 010f 	and.w	r1, r8, #15
 800a57e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800a582:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800a586:	ed92 7b00 	vldr	d7, [r2]
 800a58a:	ea4f 1128 	mov.w	r1, r8, asr #4
 800a58e:	f000 80a9 	beq.w	800a6e4 <_dtoa_r+0x454>
 800a592:	4ac5      	ldr	r2, [pc, #788]	@ (800a8a8 <_dtoa_r+0x618>)
 800a594:	ed92 6b08 	vldr	d6, [r2, #32]
 800a598:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800a59c:	ed8d 6b02 	vstr	d6, [sp, #8]
 800a5a0:	f001 010f 	and.w	r1, r1, #15
 800a5a4:	2203      	movs	r2, #3
 800a5a6:	48c0      	ldr	r0, [pc, #768]	@ (800a8a8 <_dtoa_r+0x618>)
 800a5a8:	2900      	cmp	r1, #0
 800a5aa:	f040 809d 	bne.w	800a6e8 <_dtoa_r+0x458>
 800a5ae:	ed9d 6b02 	vldr	d6, [sp, #8]
 800a5b2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800a5b6:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a5ba:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800a5bc:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a5c0:	2900      	cmp	r1, #0
 800a5c2:	f000 80c1 	beq.w	800a748 <_dtoa_r+0x4b8>
 800a5c6:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800a5ca:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800a5ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a5d2:	f140 80b9 	bpl.w	800a748 <_dtoa_r+0x4b8>
 800a5d6:	f1ba 0f00 	cmp.w	sl, #0
 800a5da:	f000 80b5 	beq.w	800a748 <_dtoa_r+0x4b8>
 800a5de:	f1bb 0f00 	cmp.w	fp, #0
 800a5e2:	dd31      	ble.n	800a648 <_dtoa_r+0x3b8>
 800a5e4:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800a5e8:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a5ec:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a5f0:	f108 31ff 	add.w	r1, r8, #4294967295
 800a5f4:	9104      	str	r1, [sp, #16]
 800a5f6:	3201      	adds	r2, #1
 800a5f8:	465c      	mov	r4, fp
 800a5fa:	ed9d 6b02 	vldr	d6, [sp, #8]
 800a5fe:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800a602:	ee07 2a90 	vmov	s15, r2
 800a606:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800a60a:	eea7 5b06 	vfma.f64	d5, d7, d6
 800a60e:	ee15 2a90 	vmov	r2, s11
 800a612:	ec51 0b15 	vmov	r0, r1, d5
 800a616:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800a61a:	2c00      	cmp	r4, #0
 800a61c:	f040 8098 	bne.w	800a750 <_dtoa_r+0x4c0>
 800a620:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800a624:	ee36 6b47 	vsub.f64	d6, d6, d7
 800a628:	ec41 0b17 	vmov	d7, r0, r1
 800a62c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a630:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a634:	f300 8261 	bgt.w	800aafa <_dtoa_r+0x86a>
 800a638:	eeb1 7b47 	vneg.f64	d7, d7
 800a63c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a640:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a644:	f100 80f5 	bmi.w	800a832 <_dtoa_r+0x5a2>
 800a648:	ed8d 8b02 	vstr	d8, [sp, #8]
 800a64c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800a64e:	2a00      	cmp	r2, #0
 800a650:	f2c0 812c 	blt.w	800a8ac <_dtoa_r+0x61c>
 800a654:	f1b8 0f0e 	cmp.w	r8, #14
 800a658:	f300 8128 	bgt.w	800a8ac <_dtoa_r+0x61c>
 800a65c:	4b91      	ldr	r3, [pc, #580]	@ (800a8a4 <_dtoa_r+0x614>)
 800a65e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800a662:	ed93 6b00 	vldr	d6, [r3]
 800a666:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a668:	2b00      	cmp	r3, #0
 800a66a:	da03      	bge.n	800a674 <_dtoa_r+0x3e4>
 800a66c:	f1ba 0f00 	cmp.w	sl, #0
 800a670:	f340 80d2 	ble.w	800a818 <_dtoa_r+0x588>
 800a674:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800a678:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a67c:	463e      	mov	r6, r7
 800a67e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800a682:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800a686:	ee15 3a10 	vmov	r3, s10
 800a68a:	3330      	adds	r3, #48	@ 0x30
 800a68c:	f806 3b01 	strb.w	r3, [r6], #1
 800a690:	1bf3      	subs	r3, r6, r7
 800a692:	459a      	cmp	sl, r3
 800a694:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800a698:	eea3 7b46 	vfms.f64	d7, d3, d6
 800a69c:	f040 80f8 	bne.w	800a890 <_dtoa_r+0x600>
 800a6a0:	ee37 7b07 	vadd.f64	d7, d7, d7
 800a6a4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800a6a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6ac:	f300 80dd 	bgt.w	800a86a <_dtoa_r+0x5da>
 800a6b0:	eeb4 7b46 	vcmp.f64	d7, d6
 800a6b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6b8:	d104      	bne.n	800a6c4 <_dtoa_r+0x434>
 800a6ba:	ee15 3a10 	vmov	r3, s10
 800a6be:	07db      	lsls	r3, r3, #31
 800a6c0:	f100 80d3 	bmi.w	800a86a <_dtoa_r+0x5da>
 800a6c4:	9901      	ldr	r1, [sp, #4]
 800a6c6:	4648      	mov	r0, r9
 800a6c8:	f000 fc78 	bl	800afbc <_Bfree>
 800a6cc:	2300      	movs	r3, #0
 800a6ce:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a6d0:	7033      	strb	r3, [r6, #0]
 800a6d2:	f108 0301 	add.w	r3, r8, #1
 800a6d6:	6013      	str	r3, [r2, #0]
 800a6d8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	f000 8304 	beq.w	800ace8 <_dtoa_r+0xa58>
 800a6e0:	601e      	str	r6, [r3, #0]
 800a6e2:	e301      	b.n	800ace8 <_dtoa_r+0xa58>
 800a6e4:	2202      	movs	r2, #2
 800a6e6:	e75e      	b.n	800a5a6 <_dtoa_r+0x316>
 800a6e8:	07cc      	lsls	r4, r1, #31
 800a6ea:	d504      	bpl.n	800a6f6 <_dtoa_r+0x466>
 800a6ec:	ed90 6b00 	vldr	d6, [r0]
 800a6f0:	3201      	adds	r2, #1
 800a6f2:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a6f6:	1049      	asrs	r1, r1, #1
 800a6f8:	3008      	adds	r0, #8
 800a6fa:	e755      	b.n	800a5a8 <_dtoa_r+0x318>
 800a6fc:	d022      	beq.n	800a744 <_dtoa_r+0x4b4>
 800a6fe:	f1c8 0100 	rsb	r1, r8, #0
 800a702:	4a68      	ldr	r2, [pc, #416]	@ (800a8a4 <_dtoa_r+0x614>)
 800a704:	f001 000f 	and.w	r0, r1, #15
 800a708:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800a70c:	ed92 7b00 	vldr	d7, [r2]
 800a710:	ee28 7b07 	vmul.f64	d7, d8, d7
 800a714:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a718:	4863      	ldr	r0, [pc, #396]	@ (800a8a8 <_dtoa_r+0x618>)
 800a71a:	1109      	asrs	r1, r1, #4
 800a71c:	2400      	movs	r4, #0
 800a71e:	2202      	movs	r2, #2
 800a720:	b929      	cbnz	r1, 800a72e <_dtoa_r+0x49e>
 800a722:	2c00      	cmp	r4, #0
 800a724:	f43f af49 	beq.w	800a5ba <_dtoa_r+0x32a>
 800a728:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a72c:	e745      	b.n	800a5ba <_dtoa_r+0x32a>
 800a72e:	07ce      	lsls	r6, r1, #31
 800a730:	d505      	bpl.n	800a73e <_dtoa_r+0x4ae>
 800a732:	ed90 6b00 	vldr	d6, [r0]
 800a736:	3201      	adds	r2, #1
 800a738:	2401      	movs	r4, #1
 800a73a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a73e:	1049      	asrs	r1, r1, #1
 800a740:	3008      	adds	r0, #8
 800a742:	e7ed      	b.n	800a720 <_dtoa_r+0x490>
 800a744:	2202      	movs	r2, #2
 800a746:	e738      	b.n	800a5ba <_dtoa_r+0x32a>
 800a748:	f8cd 8010 	str.w	r8, [sp, #16]
 800a74c:	4654      	mov	r4, sl
 800a74e:	e754      	b.n	800a5fa <_dtoa_r+0x36a>
 800a750:	4a54      	ldr	r2, [pc, #336]	@ (800a8a4 <_dtoa_r+0x614>)
 800a752:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800a756:	ed12 4b02 	vldr	d4, [r2, #-8]
 800a75a:	9a08      	ldr	r2, [sp, #32]
 800a75c:	ec41 0b17 	vmov	d7, r0, r1
 800a760:	443c      	add	r4, r7
 800a762:	b34a      	cbz	r2, 800a7b8 <_dtoa_r+0x528>
 800a764:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 800a768:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 800a76c:	463e      	mov	r6, r7
 800a76e:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800a772:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800a776:	ee35 7b47 	vsub.f64	d7, d5, d7
 800a77a:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800a77e:	ee14 2a90 	vmov	r2, s9
 800a782:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800a786:	3230      	adds	r2, #48	@ 0x30
 800a788:	ee36 6b45 	vsub.f64	d6, d6, d5
 800a78c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a790:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a794:	f806 2b01 	strb.w	r2, [r6], #1
 800a798:	d438      	bmi.n	800a80c <_dtoa_r+0x57c>
 800a79a:	ee32 5b46 	vsub.f64	d5, d2, d6
 800a79e:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800a7a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7a6:	d462      	bmi.n	800a86e <_dtoa_r+0x5de>
 800a7a8:	42a6      	cmp	r6, r4
 800a7aa:	f43f af4d 	beq.w	800a648 <_dtoa_r+0x3b8>
 800a7ae:	ee27 7b03 	vmul.f64	d7, d7, d3
 800a7b2:	ee26 6b03 	vmul.f64	d6, d6, d3
 800a7b6:	e7e0      	b.n	800a77a <_dtoa_r+0x4ea>
 800a7b8:	4621      	mov	r1, r4
 800a7ba:	463e      	mov	r6, r7
 800a7bc:	ee27 7b04 	vmul.f64	d7, d7, d4
 800a7c0:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800a7c4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800a7c8:	ee14 2a90 	vmov	r2, s9
 800a7cc:	3230      	adds	r2, #48	@ 0x30
 800a7ce:	f806 2b01 	strb.w	r2, [r6], #1
 800a7d2:	42a6      	cmp	r6, r4
 800a7d4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800a7d8:	ee36 6b45 	vsub.f64	d6, d6, d5
 800a7dc:	d119      	bne.n	800a812 <_dtoa_r+0x582>
 800a7de:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800a7e2:	ee37 4b05 	vadd.f64	d4, d7, d5
 800a7e6:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800a7ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7ee:	dc3e      	bgt.n	800a86e <_dtoa_r+0x5de>
 800a7f0:	ee35 5b47 	vsub.f64	d5, d5, d7
 800a7f4:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800a7f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7fc:	f57f af24 	bpl.w	800a648 <_dtoa_r+0x3b8>
 800a800:	460e      	mov	r6, r1
 800a802:	3901      	subs	r1, #1
 800a804:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a808:	2b30      	cmp	r3, #48	@ 0x30
 800a80a:	d0f9      	beq.n	800a800 <_dtoa_r+0x570>
 800a80c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800a810:	e758      	b.n	800a6c4 <_dtoa_r+0x434>
 800a812:	ee26 6b03 	vmul.f64	d6, d6, d3
 800a816:	e7d5      	b.n	800a7c4 <_dtoa_r+0x534>
 800a818:	d10b      	bne.n	800a832 <_dtoa_r+0x5a2>
 800a81a:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800a81e:	ee26 6b07 	vmul.f64	d6, d6, d7
 800a822:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a826:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a82a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a82e:	f2c0 8161 	blt.w	800aaf4 <_dtoa_r+0x864>
 800a832:	2400      	movs	r4, #0
 800a834:	4625      	mov	r5, r4
 800a836:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a838:	43db      	mvns	r3, r3
 800a83a:	9304      	str	r3, [sp, #16]
 800a83c:	463e      	mov	r6, r7
 800a83e:	f04f 0800 	mov.w	r8, #0
 800a842:	4621      	mov	r1, r4
 800a844:	4648      	mov	r0, r9
 800a846:	f000 fbb9 	bl	800afbc <_Bfree>
 800a84a:	2d00      	cmp	r5, #0
 800a84c:	d0de      	beq.n	800a80c <_dtoa_r+0x57c>
 800a84e:	f1b8 0f00 	cmp.w	r8, #0
 800a852:	d005      	beq.n	800a860 <_dtoa_r+0x5d0>
 800a854:	45a8      	cmp	r8, r5
 800a856:	d003      	beq.n	800a860 <_dtoa_r+0x5d0>
 800a858:	4641      	mov	r1, r8
 800a85a:	4648      	mov	r0, r9
 800a85c:	f000 fbae 	bl	800afbc <_Bfree>
 800a860:	4629      	mov	r1, r5
 800a862:	4648      	mov	r0, r9
 800a864:	f000 fbaa 	bl	800afbc <_Bfree>
 800a868:	e7d0      	b.n	800a80c <_dtoa_r+0x57c>
 800a86a:	f8cd 8010 	str.w	r8, [sp, #16]
 800a86e:	4633      	mov	r3, r6
 800a870:	461e      	mov	r6, r3
 800a872:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a876:	2a39      	cmp	r2, #57	@ 0x39
 800a878:	d106      	bne.n	800a888 <_dtoa_r+0x5f8>
 800a87a:	429f      	cmp	r7, r3
 800a87c:	d1f8      	bne.n	800a870 <_dtoa_r+0x5e0>
 800a87e:	9a04      	ldr	r2, [sp, #16]
 800a880:	3201      	adds	r2, #1
 800a882:	9204      	str	r2, [sp, #16]
 800a884:	2230      	movs	r2, #48	@ 0x30
 800a886:	703a      	strb	r2, [r7, #0]
 800a888:	781a      	ldrb	r2, [r3, #0]
 800a88a:	3201      	adds	r2, #1
 800a88c:	701a      	strb	r2, [r3, #0]
 800a88e:	e7bd      	b.n	800a80c <_dtoa_r+0x57c>
 800a890:	ee27 7b04 	vmul.f64	d7, d7, d4
 800a894:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a898:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a89c:	f47f aeef 	bne.w	800a67e <_dtoa_r+0x3ee>
 800a8a0:	e710      	b.n	800a6c4 <_dtoa_r+0x434>
 800a8a2:	bf00      	nop
 800a8a4:	0800d788 	.word	0x0800d788
 800a8a8:	0800d760 	.word	0x0800d760
 800a8ac:	9908      	ldr	r1, [sp, #32]
 800a8ae:	2900      	cmp	r1, #0
 800a8b0:	f000 80e3 	beq.w	800aa7a <_dtoa_r+0x7ea>
 800a8b4:	9907      	ldr	r1, [sp, #28]
 800a8b6:	2901      	cmp	r1, #1
 800a8b8:	f300 80c8 	bgt.w	800aa4c <_dtoa_r+0x7bc>
 800a8bc:	2d00      	cmp	r5, #0
 800a8be:	f000 80c1 	beq.w	800aa44 <_dtoa_r+0x7b4>
 800a8c2:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800a8c6:	9e05      	ldr	r6, [sp, #20]
 800a8c8:	461c      	mov	r4, r3
 800a8ca:	9304      	str	r3, [sp, #16]
 800a8cc:	9b05      	ldr	r3, [sp, #20]
 800a8ce:	4413      	add	r3, r2
 800a8d0:	9305      	str	r3, [sp, #20]
 800a8d2:	9b06      	ldr	r3, [sp, #24]
 800a8d4:	2101      	movs	r1, #1
 800a8d6:	4413      	add	r3, r2
 800a8d8:	4648      	mov	r0, r9
 800a8da:	9306      	str	r3, [sp, #24]
 800a8dc:	f000 fc6c 	bl	800b1b8 <__i2b>
 800a8e0:	9b04      	ldr	r3, [sp, #16]
 800a8e2:	4605      	mov	r5, r0
 800a8e4:	b166      	cbz	r6, 800a900 <_dtoa_r+0x670>
 800a8e6:	9a06      	ldr	r2, [sp, #24]
 800a8e8:	2a00      	cmp	r2, #0
 800a8ea:	dd09      	ble.n	800a900 <_dtoa_r+0x670>
 800a8ec:	42b2      	cmp	r2, r6
 800a8ee:	9905      	ldr	r1, [sp, #20]
 800a8f0:	bfa8      	it	ge
 800a8f2:	4632      	movge	r2, r6
 800a8f4:	1a89      	subs	r1, r1, r2
 800a8f6:	9105      	str	r1, [sp, #20]
 800a8f8:	9906      	ldr	r1, [sp, #24]
 800a8fa:	1ab6      	subs	r6, r6, r2
 800a8fc:	1a8a      	subs	r2, r1, r2
 800a8fe:	9206      	str	r2, [sp, #24]
 800a900:	b1fb      	cbz	r3, 800a942 <_dtoa_r+0x6b2>
 800a902:	9a08      	ldr	r2, [sp, #32]
 800a904:	2a00      	cmp	r2, #0
 800a906:	f000 80bc 	beq.w	800aa82 <_dtoa_r+0x7f2>
 800a90a:	b19c      	cbz	r4, 800a934 <_dtoa_r+0x6a4>
 800a90c:	4629      	mov	r1, r5
 800a90e:	4622      	mov	r2, r4
 800a910:	4648      	mov	r0, r9
 800a912:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a914:	f000 fd10 	bl	800b338 <__pow5mult>
 800a918:	9a01      	ldr	r2, [sp, #4]
 800a91a:	4601      	mov	r1, r0
 800a91c:	4605      	mov	r5, r0
 800a91e:	4648      	mov	r0, r9
 800a920:	f000 fc60 	bl	800b1e4 <__multiply>
 800a924:	9901      	ldr	r1, [sp, #4]
 800a926:	9004      	str	r0, [sp, #16]
 800a928:	4648      	mov	r0, r9
 800a92a:	f000 fb47 	bl	800afbc <_Bfree>
 800a92e:	9a04      	ldr	r2, [sp, #16]
 800a930:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a932:	9201      	str	r2, [sp, #4]
 800a934:	1b1a      	subs	r2, r3, r4
 800a936:	d004      	beq.n	800a942 <_dtoa_r+0x6b2>
 800a938:	9901      	ldr	r1, [sp, #4]
 800a93a:	4648      	mov	r0, r9
 800a93c:	f000 fcfc 	bl	800b338 <__pow5mult>
 800a940:	9001      	str	r0, [sp, #4]
 800a942:	2101      	movs	r1, #1
 800a944:	4648      	mov	r0, r9
 800a946:	f000 fc37 	bl	800b1b8 <__i2b>
 800a94a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a94c:	4604      	mov	r4, r0
 800a94e:	2b00      	cmp	r3, #0
 800a950:	f000 81d0 	beq.w	800acf4 <_dtoa_r+0xa64>
 800a954:	461a      	mov	r2, r3
 800a956:	4601      	mov	r1, r0
 800a958:	4648      	mov	r0, r9
 800a95a:	f000 fced 	bl	800b338 <__pow5mult>
 800a95e:	9b07      	ldr	r3, [sp, #28]
 800a960:	2b01      	cmp	r3, #1
 800a962:	4604      	mov	r4, r0
 800a964:	f300 8095 	bgt.w	800aa92 <_dtoa_r+0x802>
 800a968:	9b02      	ldr	r3, [sp, #8]
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	f040 808b 	bne.w	800aa86 <_dtoa_r+0x7f6>
 800a970:	9b03      	ldr	r3, [sp, #12]
 800a972:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800a976:	2a00      	cmp	r2, #0
 800a978:	f040 8087 	bne.w	800aa8a <_dtoa_r+0x7fa>
 800a97c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800a980:	0d12      	lsrs	r2, r2, #20
 800a982:	0512      	lsls	r2, r2, #20
 800a984:	2a00      	cmp	r2, #0
 800a986:	f000 8082 	beq.w	800aa8e <_dtoa_r+0x7fe>
 800a98a:	9b05      	ldr	r3, [sp, #20]
 800a98c:	3301      	adds	r3, #1
 800a98e:	9305      	str	r3, [sp, #20]
 800a990:	9b06      	ldr	r3, [sp, #24]
 800a992:	3301      	adds	r3, #1
 800a994:	9306      	str	r3, [sp, #24]
 800a996:	2301      	movs	r3, #1
 800a998:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a99a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	f000 81af 	beq.w	800ad00 <_dtoa_r+0xa70>
 800a9a2:	6922      	ldr	r2, [r4, #16]
 800a9a4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800a9a8:	6910      	ldr	r0, [r2, #16]
 800a9aa:	f000 fbb9 	bl	800b120 <__hi0bits>
 800a9ae:	f1c0 0020 	rsb	r0, r0, #32
 800a9b2:	9b06      	ldr	r3, [sp, #24]
 800a9b4:	4418      	add	r0, r3
 800a9b6:	f010 001f 	ands.w	r0, r0, #31
 800a9ba:	d076      	beq.n	800aaaa <_dtoa_r+0x81a>
 800a9bc:	f1c0 0220 	rsb	r2, r0, #32
 800a9c0:	2a04      	cmp	r2, #4
 800a9c2:	dd69      	ble.n	800aa98 <_dtoa_r+0x808>
 800a9c4:	9b05      	ldr	r3, [sp, #20]
 800a9c6:	f1c0 001c 	rsb	r0, r0, #28
 800a9ca:	4403      	add	r3, r0
 800a9cc:	9305      	str	r3, [sp, #20]
 800a9ce:	9b06      	ldr	r3, [sp, #24]
 800a9d0:	4406      	add	r6, r0
 800a9d2:	4403      	add	r3, r0
 800a9d4:	9306      	str	r3, [sp, #24]
 800a9d6:	9b05      	ldr	r3, [sp, #20]
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	dd05      	ble.n	800a9e8 <_dtoa_r+0x758>
 800a9dc:	9901      	ldr	r1, [sp, #4]
 800a9de:	461a      	mov	r2, r3
 800a9e0:	4648      	mov	r0, r9
 800a9e2:	f000 fd03 	bl	800b3ec <__lshift>
 800a9e6:	9001      	str	r0, [sp, #4]
 800a9e8:	9b06      	ldr	r3, [sp, #24]
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	dd05      	ble.n	800a9fa <_dtoa_r+0x76a>
 800a9ee:	4621      	mov	r1, r4
 800a9f0:	461a      	mov	r2, r3
 800a9f2:	4648      	mov	r0, r9
 800a9f4:	f000 fcfa 	bl	800b3ec <__lshift>
 800a9f8:	4604      	mov	r4, r0
 800a9fa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d056      	beq.n	800aaae <_dtoa_r+0x81e>
 800aa00:	9801      	ldr	r0, [sp, #4]
 800aa02:	4621      	mov	r1, r4
 800aa04:	f000 fd5e 	bl	800b4c4 <__mcmp>
 800aa08:	2800      	cmp	r0, #0
 800aa0a:	da50      	bge.n	800aaae <_dtoa_r+0x81e>
 800aa0c:	f108 33ff 	add.w	r3, r8, #4294967295
 800aa10:	9304      	str	r3, [sp, #16]
 800aa12:	9901      	ldr	r1, [sp, #4]
 800aa14:	2300      	movs	r3, #0
 800aa16:	220a      	movs	r2, #10
 800aa18:	4648      	mov	r0, r9
 800aa1a:	f000 faf1 	bl	800b000 <__multadd>
 800aa1e:	9b08      	ldr	r3, [sp, #32]
 800aa20:	9001      	str	r0, [sp, #4]
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	f000 816e 	beq.w	800ad04 <_dtoa_r+0xa74>
 800aa28:	4629      	mov	r1, r5
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	220a      	movs	r2, #10
 800aa2e:	4648      	mov	r0, r9
 800aa30:	f000 fae6 	bl	800b000 <__multadd>
 800aa34:	f1bb 0f00 	cmp.w	fp, #0
 800aa38:	4605      	mov	r5, r0
 800aa3a:	dc64      	bgt.n	800ab06 <_dtoa_r+0x876>
 800aa3c:	9b07      	ldr	r3, [sp, #28]
 800aa3e:	2b02      	cmp	r3, #2
 800aa40:	dc3e      	bgt.n	800aac0 <_dtoa_r+0x830>
 800aa42:	e060      	b.n	800ab06 <_dtoa_r+0x876>
 800aa44:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800aa46:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800aa4a:	e73c      	b.n	800a8c6 <_dtoa_r+0x636>
 800aa4c:	f10a 34ff 	add.w	r4, sl, #4294967295
 800aa50:	42a3      	cmp	r3, r4
 800aa52:	bfbf      	itttt	lt
 800aa54:	1ae2      	sublt	r2, r4, r3
 800aa56:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800aa58:	189b      	addlt	r3, r3, r2
 800aa5a:	930a      	strlt	r3, [sp, #40]	@ 0x28
 800aa5c:	bfae      	itee	ge
 800aa5e:	1b1c      	subge	r4, r3, r4
 800aa60:	4623      	movlt	r3, r4
 800aa62:	2400      	movlt	r4, #0
 800aa64:	f1ba 0f00 	cmp.w	sl, #0
 800aa68:	bfb5      	itete	lt
 800aa6a:	9a05      	ldrlt	r2, [sp, #20]
 800aa6c:	9e05      	ldrge	r6, [sp, #20]
 800aa6e:	eba2 060a 	sublt.w	r6, r2, sl
 800aa72:	4652      	movge	r2, sl
 800aa74:	bfb8      	it	lt
 800aa76:	2200      	movlt	r2, #0
 800aa78:	e727      	b.n	800a8ca <_dtoa_r+0x63a>
 800aa7a:	9e05      	ldr	r6, [sp, #20]
 800aa7c:	9d08      	ldr	r5, [sp, #32]
 800aa7e:	461c      	mov	r4, r3
 800aa80:	e730      	b.n	800a8e4 <_dtoa_r+0x654>
 800aa82:	461a      	mov	r2, r3
 800aa84:	e758      	b.n	800a938 <_dtoa_r+0x6a8>
 800aa86:	2300      	movs	r3, #0
 800aa88:	e786      	b.n	800a998 <_dtoa_r+0x708>
 800aa8a:	9b02      	ldr	r3, [sp, #8]
 800aa8c:	e784      	b.n	800a998 <_dtoa_r+0x708>
 800aa8e:	920b      	str	r2, [sp, #44]	@ 0x2c
 800aa90:	e783      	b.n	800a99a <_dtoa_r+0x70a>
 800aa92:	2300      	movs	r3, #0
 800aa94:	930b      	str	r3, [sp, #44]	@ 0x2c
 800aa96:	e784      	b.n	800a9a2 <_dtoa_r+0x712>
 800aa98:	d09d      	beq.n	800a9d6 <_dtoa_r+0x746>
 800aa9a:	9b05      	ldr	r3, [sp, #20]
 800aa9c:	321c      	adds	r2, #28
 800aa9e:	4413      	add	r3, r2
 800aaa0:	9305      	str	r3, [sp, #20]
 800aaa2:	9b06      	ldr	r3, [sp, #24]
 800aaa4:	4416      	add	r6, r2
 800aaa6:	4413      	add	r3, r2
 800aaa8:	e794      	b.n	800a9d4 <_dtoa_r+0x744>
 800aaaa:	4602      	mov	r2, r0
 800aaac:	e7f5      	b.n	800aa9a <_dtoa_r+0x80a>
 800aaae:	f1ba 0f00 	cmp.w	sl, #0
 800aab2:	f8cd 8010 	str.w	r8, [sp, #16]
 800aab6:	46d3      	mov	fp, sl
 800aab8:	dc21      	bgt.n	800aafe <_dtoa_r+0x86e>
 800aaba:	9b07      	ldr	r3, [sp, #28]
 800aabc:	2b02      	cmp	r3, #2
 800aabe:	dd1e      	ble.n	800aafe <_dtoa_r+0x86e>
 800aac0:	f1bb 0f00 	cmp.w	fp, #0
 800aac4:	f47f aeb7 	bne.w	800a836 <_dtoa_r+0x5a6>
 800aac8:	4621      	mov	r1, r4
 800aaca:	465b      	mov	r3, fp
 800aacc:	2205      	movs	r2, #5
 800aace:	4648      	mov	r0, r9
 800aad0:	f000 fa96 	bl	800b000 <__multadd>
 800aad4:	4601      	mov	r1, r0
 800aad6:	4604      	mov	r4, r0
 800aad8:	9801      	ldr	r0, [sp, #4]
 800aada:	f000 fcf3 	bl	800b4c4 <__mcmp>
 800aade:	2800      	cmp	r0, #0
 800aae0:	f77f aea9 	ble.w	800a836 <_dtoa_r+0x5a6>
 800aae4:	463e      	mov	r6, r7
 800aae6:	2331      	movs	r3, #49	@ 0x31
 800aae8:	f806 3b01 	strb.w	r3, [r6], #1
 800aaec:	9b04      	ldr	r3, [sp, #16]
 800aaee:	3301      	adds	r3, #1
 800aaf0:	9304      	str	r3, [sp, #16]
 800aaf2:	e6a4      	b.n	800a83e <_dtoa_r+0x5ae>
 800aaf4:	f8cd 8010 	str.w	r8, [sp, #16]
 800aaf8:	4654      	mov	r4, sl
 800aafa:	4625      	mov	r5, r4
 800aafc:	e7f2      	b.n	800aae4 <_dtoa_r+0x854>
 800aafe:	9b08      	ldr	r3, [sp, #32]
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	f000 8103 	beq.w	800ad0c <_dtoa_r+0xa7c>
 800ab06:	2e00      	cmp	r6, #0
 800ab08:	dd05      	ble.n	800ab16 <_dtoa_r+0x886>
 800ab0a:	4629      	mov	r1, r5
 800ab0c:	4632      	mov	r2, r6
 800ab0e:	4648      	mov	r0, r9
 800ab10:	f000 fc6c 	bl	800b3ec <__lshift>
 800ab14:	4605      	mov	r5, r0
 800ab16:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d058      	beq.n	800abce <_dtoa_r+0x93e>
 800ab1c:	6869      	ldr	r1, [r5, #4]
 800ab1e:	4648      	mov	r0, r9
 800ab20:	f000 fa0c 	bl	800af3c <_Balloc>
 800ab24:	4606      	mov	r6, r0
 800ab26:	b928      	cbnz	r0, 800ab34 <_dtoa_r+0x8a4>
 800ab28:	4b82      	ldr	r3, [pc, #520]	@ (800ad34 <_dtoa_r+0xaa4>)
 800ab2a:	4602      	mov	r2, r0
 800ab2c:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800ab30:	f7ff bbc7 	b.w	800a2c2 <_dtoa_r+0x32>
 800ab34:	692a      	ldr	r2, [r5, #16]
 800ab36:	3202      	adds	r2, #2
 800ab38:	0092      	lsls	r2, r2, #2
 800ab3a:	f105 010c 	add.w	r1, r5, #12
 800ab3e:	300c      	adds	r0, #12
 800ab40:	f7ff fb09 	bl	800a156 <memcpy>
 800ab44:	2201      	movs	r2, #1
 800ab46:	4631      	mov	r1, r6
 800ab48:	4648      	mov	r0, r9
 800ab4a:	f000 fc4f 	bl	800b3ec <__lshift>
 800ab4e:	1c7b      	adds	r3, r7, #1
 800ab50:	9305      	str	r3, [sp, #20]
 800ab52:	eb07 030b 	add.w	r3, r7, fp
 800ab56:	9309      	str	r3, [sp, #36]	@ 0x24
 800ab58:	9b02      	ldr	r3, [sp, #8]
 800ab5a:	f003 0301 	and.w	r3, r3, #1
 800ab5e:	46a8      	mov	r8, r5
 800ab60:	9308      	str	r3, [sp, #32]
 800ab62:	4605      	mov	r5, r0
 800ab64:	9b05      	ldr	r3, [sp, #20]
 800ab66:	9801      	ldr	r0, [sp, #4]
 800ab68:	4621      	mov	r1, r4
 800ab6a:	f103 3bff 	add.w	fp, r3, #4294967295
 800ab6e:	f7ff fb07 	bl	800a180 <quorem>
 800ab72:	4641      	mov	r1, r8
 800ab74:	9002      	str	r0, [sp, #8]
 800ab76:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800ab7a:	9801      	ldr	r0, [sp, #4]
 800ab7c:	f000 fca2 	bl	800b4c4 <__mcmp>
 800ab80:	462a      	mov	r2, r5
 800ab82:	9006      	str	r0, [sp, #24]
 800ab84:	4621      	mov	r1, r4
 800ab86:	4648      	mov	r0, r9
 800ab88:	f000 fcb8 	bl	800b4fc <__mdiff>
 800ab8c:	68c2      	ldr	r2, [r0, #12]
 800ab8e:	4606      	mov	r6, r0
 800ab90:	b9fa      	cbnz	r2, 800abd2 <_dtoa_r+0x942>
 800ab92:	4601      	mov	r1, r0
 800ab94:	9801      	ldr	r0, [sp, #4]
 800ab96:	f000 fc95 	bl	800b4c4 <__mcmp>
 800ab9a:	4602      	mov	r2, r0
 800ab9c:	4631      	mov	r1, r6
 800ab9e:	4648      	mov	r0, r9
 800aba0:	920a      	str	r2, [sp, #40]	@ 0x28
 800aba2:	f000 fa0b 	bl	800afbc <_Bfree>
 800aba6:	9b07      	ldr	r3, [sp, #28]
 800aba8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800abaa:	9e05      	ldr	r6, [sp, #20]
 800abac:	ea43 0102 	orr.w	r1, r3, r2
 800abb0:	9b08      	ldr	r3, [sp, #32]
 800abb2:	4319      	orrs	r1, r3
 800abb4:	d10f      	bne.n	800abd6 <_dtoa_r+0x946>
 800abb6:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800abba:	d028      	beq.n	800ac0e <_dtoa_r+0x97e>
 800abbc:	9b06      	ldr	r3, [sp, #24]
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	dd02      	ble.n	800abc8 <_dtoa_r+0x938>
 800abc2:	9b02      	ldr	r3, [sp, #8]
 800abc4:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800abc8:	f88b a000 	strb.w	sl, [fp]
 800abcc:	e639      	b.n	800a842 <_dtoa_r+0x5b2>
 800abce:	4628      	mov	r0, r5
 800abd0:	e7bd      	b.n	800ab4e <_dtoa_r+0x8be>
 800abd2:	2201      	movs	r2, #1
 800abd4:	e7e2      	b.n	800ab9c <_dtoa_r+0x90c>
 800abd6:	9b06      	ldr	r3, [sp, #24]
 800abd8:	2b00      	cmp	r3, #0
 800abda:	db04      	blt.n	800abe6 <_dtoa_r+0x956>
 800abdc:	9907      	ldr	r1, [sp, #28]
 800abde:	430b      	orrs	r3, r1
 800abe0:	9908      	ldr	r1, [sp, #32]
 800abe2:	430b      	orrs	r3, r1
 800abe4:	d120      	bne.n	800ac28 <_dtoa_r+0x998>
 800abe6:	2a00      	cmp	r2, #0
 800abe8:	ddee      	ble.n	800abc8 <_dtoa_r+0x938>
 800abea:	9901      	ldr	r1, [sp, #4]
 800abec:	2201      	movs	r2, #1
 800abee:	4648      	mov	r0, r9
 800abf0:	f000 fbfc 	bl	800b3ec <__lshift>
 800abf4:	4621      	mov	r1, r4
 800abf6:	9001      	str	r0, [sp, #4]
 800abf8:	f000 fc64 	bl	800b4c4 <__mcmp>
 800abfc:	2800      	cmp	r0, #0
 800abfe:	dc03      	bgt.n	800ac08 <_dtoa_r+0x978>
 800ac00:	d1e2      	bne.n	800abc8 <_dtoa_r+0x938>
 800ac02:	f01a 0f01 	tst.w	sl, #1
 800ac06:	d0df      	beq.n	800abc8 <_dtoa_r+0x938>
 800ac08:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800ac0c:	d1d9      	bne.n	800abc2 <_dtoa_r+0x932>
 800ac0e:	2339      	movs	r3, #57	@ 0x39
 800ac10:	f88b 3000 	strb.w	r3, [fp]
 800ac14:	4633      	mov	r3, r6
 800ac16:	461e      	mov	r6, r3
 800ac18:	3b01      	subs	r3, #1
 800ac1a:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800ac1e:	2a39      	cmp	r2, #57	@ 0x39
 800ac20:	d053      	beq.n	800acca <_dtoa_r+0xa3a>
 800ac22:	3201      	adds	r2, #1
 800ac24:	701a      	strb	r2, [r3, #0]
 800ac26:	e60c      	b.n	800a842 <_dtoa_r+0x5b2>
 800ac28:	2a00      	cmp	r2, #0
 800ac2a:	dd07      	ble.n	800ac3c <_dtoa_r+0x9ac>
 800ac2c:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800ac30:	d0ed      	beq.n	800ac0e <_dtoa_r+0x97e>
 800ac32:	f10a 0301 	add.w	r3, sl, #1
 800ac36:	f88b 3000 	strb.w	r3, [fp]
 800ac3a:	e602      	b.n	800a842 <_dtoa_r+0x5b2>
 800ac3c:	9b05      	ldr	r3, [sp, #20]
 800ac3e:	9a05      	ldr	r2, [sp, #20]
 800ac40:	f803 ac01 	strb.w	sl, [r3, #-1]
 800ac44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac46:	4293      	cmp	r3, r2
 800ac48:	d029      	beq.n	800ac9e <_dtoa_r+0xa0e>
 800ac4a:	9901      	ldr	r1, [sp, #4]
 800ac4c:	2300      	movs	r3, #0
 800ac4e:	220a      	movs	r2, #10
 800ac50:	4648      	mov	r0, r9
 800ac52:	f000 f9d5 	bl	800b000 <__multadd>
 800ac56:	45a8      	cmp	r8, r5
 800ac58:	9001      	str	r0, [sp, #4]
 800ac5a:	f04f 0300 	mov.w	r3, #0
 800ac5e:	f04f 020a 	mov.w	r2, #10
 800ac62:	4641      	mov	r1, r8
 800ac64:	4648      	mov	r0, r9
 800ac66:	d107      	bne.n	800ac78 <_dtoa_r+0x9e8>
 800ac68:	f000 f9ca 	bl	800b000 <__multadd>
 800ac6c:	4680      	mov	r8, r0
 800ac6e:	4605      	mov	r5, r0
 800ac70:	9b05      	ldr	r3, [sp, #20]
 800ac72:	3301      	adds	r3, #1
 800ac74:	9305      	str	r3, [sp, #20]
 800ac76:	e775      	b.n	800ab64 <_dtoa_r+0x8d4>
 800ac78:	f000 f9c2 	bl	800b000 <__multadd>
 800ac7c:	4629      	mov	r1, r5
 800ac7e:	4680      	mov	r8, r0
 800ac80:	2300      	movs	r3, #0
 800ac82:	220a      	movs	r2, #10
 800ac84:	4648      	mov	r0, r9
 800ac86:	f000 f9bb 	bl	800b000 <__multadd>
 800ac8a:	4605      	mov	r5, r0
 800ac8c:	e7f0      	b.n	800ac70 <_dtoa_r+0x9e0>
 800ac8e:	f1bb 0f00 	cmp.w	fp, #0
 800ac92:	bfcc      	ite	gt
 800ac94:	465e      	movgt	r6, fp
 800ac96:	2601      	movle	r6, #1
 800ac98:	443e      	add	r6, r7
 800ac9a:	f04f 0800 	mov.w	r8, #0
 800ac9e:	9901      	ldr	r1, [sp, #4]
 800aca0:	2201      	movs	r2, #1
 800aca2:	4648      	mov	r0, r9
 800aca4:	f000 fba2 	bl	800b3ec <__lshift>
 800aca8:	4621      	mov	r1, r4
 800acaa:	9001      	str	r0, [sp, #4]
 800acac:	f000 fc0a 	bl	800b4c4 <__mcmp>
 800acb0:	2800      	cmp	r0, #0
 800acb2:	dcaf      	bgt.n	800ac14 <_dtoa_r+0x984>
 800acb4:	d102      	bne.n	800acbc <_dtoa_r+0xa2c>
 800acb6:	f01a 0f01 	tst.w	sl, #1
 800acba:	d1ab      	bne.n	800ac14 <_dtoa_r+0x984>
 800acbc:	4633      	mov	r3, r6
 800acbe:	461e      	mov	r6, r3
 800acc0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800acc4:	2a30      	cmp	r2, #48	@ 0x30
 800acc6:	d0fa      	beq.n	800acbe <_dtoa_r+0xa2e>
 800acc8:	e5bb      	b.n	800a842 <_dtoa_r+0x5b2>
 800acca:	429f      	cmp	r7, r3
 800accc:	d1a3      	bne.n	800ac16 <_dtoa_r+0x986>
 800acce:	9b04      	ldr	r3, [sp, #16]
 800acd0:	3301      	adds	r3, #1
 800acd2:	9304      	str	r3, [sp, #16]
 800acd4:	2331      	movs	r3, #49	@ 0x31
 800acd6:	703b      	strb	r3, [r7, #0]
 800acd8:	e5b3      	b.n	800a842 <_dtoa_r+0x5b2>
 800acda:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800acdc:	4f16      	ldr	r7, [pc, #88]	@ (800ad38 <_dtoa_r+0xaa8>)
 800acde:	b11b      	cbz	r3, 800ace8 <_dtoa_r+0xa58>
 800ace0:	f107 0308 	add.w	r3, r7, #8
 800ace4:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800ace6:	6013      	str	r3, [r2, #0]
 800ace8:	4638      	mov	r0, r7
 800acea:	b011      	add	sp, #68	@ 0x44
 800acec:	ecbd 8b02 	vpop	{d8}
 800acf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acf4:	9b07      	ldr	r3, [sp, #28]
 800acf6:	2b01      	cmp	r3, #1
 800acf8:	f77f ae36 	ble.w	800a968 <_dtoa_r+0x6d8>
 800acfc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800acfe:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ad00:	2001      	movs	r0, #1
 800ad02:	e656      	b.n	800a9b2 <_dtoa_r+0x722>
 800ad04:	f1bb 0f00 	cmp.w	fp, #0
 800ad08:	f77f aed7 	ble.w	800aaba <_dtoa_r+0x82a>
 800ad0c:	463e      	mov	r6, r7
 800ad0e:	9801      	ldr	r0, [sp, #4]
 800ad10:	4621      	mov	r1, r4
 800ad12:	f7ff fa35 	bl	800a180 <quorem>
 800ad16:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800ad1a:	f806 ab01 	strb.w	sl, [r6], #1
 800ad1e:	1bf2      	subs	r2, r6, r7
 800ad20:	4593      	cmp	fp, r2
 800ad22:	ddb4      	ble.n	800ac8e <_dtoa_r+0x9fe>
 800ad24:	9901      	ldr	r1, [sp, #4]
 800ad26:	2300      	movs	r3, #0
 800ad28:	220a      	movs	r2, #10
 800ad2a:	4648      	mov	r0, r9
 800ad2c:	f000 f968 	bl	800b000 <__multadd>
 800ad30:	9001      	str	r0, [sp, #4]
 800ad32:	e7ec      	b.n	800ad0e <_dtoa_r+0xa7e>
 800ad34:	0800d6e5 	.word	0x0800d6e5
 800ad38:	0800d669 	.word	0x0800d669

0800ad3c <_free_r>:
 800ad3c:	b538      	push	{r3, r4, r5, lr}
 800ad3e:	4605      	mov	r5, r0
 800ad40:	2900      	cmp	r1, #0
 800ad42:	d041      	beq.n	800adc8 <_free_r+0x8c>
 800ad44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ad48:	1f0c      	subs	r4, r1, #4
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	bfb8      	it	lt
 800ad4e:	18e4      	addlt	r4, r4, r3
 800ad50:	f000 f8e8 	bl	800af24 <__malloc_lock>
 800ad54:	4a1d      	ldr	r2, [pc, #116]	@ (800adcc <_free_r+0x90>)
 800ad56:	6813      	ldr	r3, [r2, #0]
 800ad58:	b933      	cbnz	r3, 800ad68 <_free_r+0x2c>
 800ad5a:	6063      	str	r3, [r4, #4]
 800ad5c:	6014      	str	r4, [r2, #0]
 800ad5e:	4628      	mov	r0, r5
 800ad60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ad64:	f000 b8e4 	b.w	800af30 <__malloc_unlock>
 800ad68:	42a3      	cmp	r3, r4
 800ad6a:	d908      	bls.n	800ad7e <_free_r+0x42>
 800ad6c:	6820      	ldr	r0, [r4, #0]
 800ad6e:	1821      	adds	r1, r4, r0
 800ad70:	428b      	cmp	r3, r1
 800ad72:	bf01      	itttt	eq
 800ad74:	6819      	ldreq	r1, [r3, #0]
 800ad76:	685b      	ldreq	r3, [r3, #4]
 800ad78:	1809      	addeq	r1, r1, r0
 800ad7a:	6021      	streq	r1, [r4, #0]
 800ad7c:	e7ed      	b.n	800ad5a <_free_r+0x1e>
 800ad7e:	461a      	mov	r2, r3
 800ad80:	685b      	ldr	r3, [r3, #4]
 800ad82:	b10b      	cbz	r3, 800ad88 <_free_r+0x4c>
 800ad84:	42a3      	cmp	r3, r4
 800ad86:	d9fa      	bls.n	800ad7e <_free_r+0x42>
 800ad88:	6811      	ldr	r1, [r2, #0]
 800ad8a:	1850      	adds	r0, r2, r1
 800ad8c:	42a0      	cmp	r0, r4
 800ad8e:	d10b      	bne.n	800ada8 <_free_r+0x6c>
 800ad90:	6820      	ldr	r0, [r4, #0]
 800ad92:	4401      	add	r1, r0
 800ad94:	1850      	adds	r0, r2, r1
 800ad96:	4283      	cmp	r3, r0
 800ad98:	6011      	str	r1, [r2, #0]
 800ad9a:	d1e0      	bne.n	800ad5e <_free_r+0x22>
 800ad9c:	6818      	ldr	r0, [r3, #0]
 800ad9e:	685b      	ldr	r3, [r3, #4]
 800ada0:	6053      	str	r3, [r2, #4]
 800ada2:	4408      	add	r0, r1
 800ada4:	6010      	str	r0, [r2, #0]
 800ada6:	e7da      	b.n	800ad5e <_free_r+0x22>
 800ada8:	d902      	bls.n	800adb0 <_free_r+0x74>
 800adaa:	230c      	movs	r3, #12
 800adac:	602b      	str	r3, [r5, #0]
 800adae:	e7d6      	b.n	800ad5e <_free_r+0x22>
 800adb0:	6820      	ldr	r0, [r4, #0]
 800adb2:	1821      	adds	r1, r4, r0
 800adb4:	428b      	cmp	r3, r1
 800adb6:	bf04      	itt	eq
 800adb8:	6819      	ldreq	r1, [r3, #0]
 800adba:	685b      	ldreq	r3, [r3, #4]
 800adbc:	6063      	str	r3, [r4, #4]
 800adbe:	bf04      	itt	eq
 800adc0:	1809      	addeq	r1, r1, r0
 800adc2:	6021      	streq	r1, [r4, #0]
 800adc4:	6054      	str	r4, [r2, #4]
 800adc6:	e7ca      	b.n	800ad5e <_free_r+0x22>
 800adc8:	bd38      	pop	{r3, r4, r5, pc}
 800adca:	bf00      	nop
 800adcc:	24004e20 	.word	0x24004e20

0800add0 <malloc>:
 800add0:	4b02      	ldr	r3, [pc, #8]	@ (800addc <malloc+0xc>)
 800add2:	4601      	mov	r1, r0
 800add4:	6818      	ldr	r0, [r3, #0]
 800add6:	f000 b825 	b.w	800ae24 <_malloc_r>
 800adda:	bf00      	nop
 800addc:	24000020 	.word	0x24000020

0800ade0 <sbrk_aligned>:
 800ade0:	b570      	push	{r4, r5, r6, lr}
 800ade2:	4e0f      	ldr	r6, [pc, #60]	@ (800ae20 <sbrk_aligned+0x40>)
 800ade4:	460c      	mov	r4, r1
 800ade6:	6831      	ldr	r1, [r6, #0]
 800ade8:	4605      	mov	r5, r0
 800adea:	b911      	cbnz	r1, 800adf2 <sbrk_aligned+0x12>
 800adec:	f001 ff7e 	bl	800ccec <_sbrk_r>
 800adf0:	6030      	str	r0, [r6, #0]
 800adf2:	4621      	mov	r1, r4
 800adf4:	4628      	mov	r0, r5
 800adf6:	f001 ff79 	bl	800ccec <_sbrk_r>
 800adfa:	1c43      	adds	r3, r0, #1
 800adfc:	d103      	bne.n	800ae06 <sbrk_aligned+0x26>
 800adfe:	f04f 34ff 	mov.w	r4, #4294967295
 800ae02:	4620      	mov	r0, r4
 800ae04:	bd70      	pop	{r4, r5, r6, pc}
 800ae06:	1cc4      	adds	r4, r0, #3
 800ae08:	f024 0403 	bic.w	r4, r4, #3
 800ae0c:	42a0      	cmp	r0, r4
 800ae0e:	d0f8      	beq.n	800ae02 <sbrk_aligned+0x22>
 800ae10:	1a21      	subs	r1, r4, r0
 800ae12:	4628      	mov	r0, r5
 800ae14:	f001 ff6a 	bl	800ccec <_sbrk_r>
 800ae18:	3001      	adds	r0, #1
 800ae1a:	d1f2      	bne.n	800ae02 <sbrk_aligned+0x22>
 800ae1c:	e7ef      	b.n	800adfe <sbrk_aligned+0x1e>
 800ae1e:	bf00      	nop
 800ae20:	24004e1c 	.word	0x24004e1c

0800ae24 <_malloc_r>:
 800ae24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae28:	1ccd      	adds	r5, r1, #3
 800ae2a:	f025 0503 	bic.w	r5, r5, #3
 800ae2e:	3508      	adds	r5, #8
 800ae30:	2d0c      	cmp	r5, #12
 800ae32:	bf38      	it	cc
 800ae34:	250c      	movcc	r5, #12
 800ae36:	2d00      	cmp	r5, #0
 800ae38:	4606      	mov	r6, r0
 800ae3a:	db01      	blt.n	800ae40 <_malloc_r+0x1c>
 800ae3c:	42a9      	cmp	r1, r5
 800ae3e:	d904      	bls.n	800ae4a <_malloc_r+0x26>
 800ae40:	230c      	movs	r3, #12
 800ae42:	6033      	str	r3, [r6, #0]
 800ae44:	2000      	movs	r0, #0
 800ae46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae4a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800af20 <_malloc_r+0xfc>
 800ae4e:	f000 f869 	bl	800af24 <__malloc_lock>
 800ae52:	f8d8 3000 	ldr.w	r3, [r8]
 800ae56:	461c      	mov	r4, r3
 800ae58:	bb44      	cbnz	r4, 800aeac <_malloc_r+0x88>
 800ae5a:	4629      	mov	r1, r5
 800ae5c:	4630      	mov	r0, r6
 800ae5e:	f7ff ffbf 	bl	800ade0 <sbrk_aligned>
 800ae62:	1c43      	adds	r3, r0, #1
 800ae64:	4604      	mov	r4, r0
 800ae66:	d158      	bne.n	800af1a <_malloc_r+0xf6>
 800ae68:	f8d8 4000 	ldr.w	r4, [r8]
 800ae6c:	4627      	mov	r7, r4
 800ae6e:	2f00      	cmp	r7, #0
 800ae70:	d143      	bne.n	800aefa <_malloc_r+0xd6>
 800ae72:	2c00      	cmp	r4, #0
 800ae74:	d04b      	beq.n	800af0e <_malloc_r+0xea>
 800ae76:	6823      	ldr	r3, [r4, #0]
 800ae78:	4639      	mov	r1, r7
 800ae7a:	4630      	mov	r0, r6
 800ae7c:	eb04 0903 	add.w	r9, r4, r3
 800ae80:	f001 ff34 	bl	800ccec <_sbrk_r>
 800ae84:	4581      	cmp	r9, r0
 800ae86:	d142      	bne.n	800af0e <_malloc_r+0xea>
 800ae88:	6821      	ldr	r1, [r4, #0]
 800ae8a:	1a6d      	subs	r5, r5, r1
 800ae8c:	4629      	mov	r1, r5
 800ae8e:	4630      	mov	r0, r6
 800ae90:	f7ff ffa6 	bl	800ade0 <sbrk_aligned>
 800ae94:	3001      	adds	r0, #1
 800ae96:	d03a      	beq.n	800af0e <_malloc_r+0xea>
 800ae98:	6823      	ldr	r3, [r4, #0]
 800ae9a:	442b      	add	r3, r5
 800ae9c:	6023      	str	r3, [r4, #0]
 800ae9e:	f8d8 3000 	ldr.w	r3, [r8]
 800aea2:	685a      	ldr	r2, [r3, #4]
 800aea4:	bb62      	cbnz	r2, 800af00 <_malloc_r+0xdc>
 800aea6:	f8c8 7000 	str.w	r7, [r8]
 800aeaa:	e00f      	b.n	800aecc <_malloc_r+0xa8>
 800aeac:	6822      	ldr	r2, [r4, #0]
 800aeae:	1b52      	subs	r2, r2, r5
 800aeb0:	d420      	bmi.n	800aef4 <_malloc_r+0xd0>
 800aeb2:	2a0b      	cmp	r2, #11
 800aeb4:	d917      	bls.n	800aee6 <_malloc_r+0xc2>
 800aeb6:	1961      	adds	r1, r4, r5
 800aeb8:	42a3      	cmp	r3, r4
 800aeba:	6025      	str	r5, [r4, #0]
 800aebc:	bf18      	it	ne
 800aebe:	6059      	strne	r1, [r3, #4]
 800aec0:	6863      	ldr	r3, [r4, #4]
 800aec2:	bf08      	it	eq
 800aec4:	f8c8 1000 	streq.w	r1, [r8]
 800aec8:	5162      	str	r2, [r4, r5]
 800aeca:	604b      	str	r3, [r1, #4]
 800aecc:	4630      	mov	r0, r6
 800aece:	f000 f82f 	bl	800af30 <__malloc_unlock>
 800aed2:	f104 000b 	add.w	r0, r4, #11
 800aed6:	1d23      	adds	r3, r4, #4
 800aed8:	f020 0007 	bic.w	r0, r0, #7
 800aedc:	1ac2      	subs	r2, r0, r3
 800aede:	bf1c      	itt	ne
 800aee0:	1a1b      	subne	r3, r3, r0
 800aee2:	50a3      	strne	r3, [r4, r2]
 800aee4:	e7af      	b.n	800ae46 <_malloc_r+0x22>
 800aee6:	6862      	ldr	r2, [r4, #4]
 800aee8:	42a3      	cmp	r3, r4
 800aeea:	bf0c      	ite	eq
 800aeec:	f8c8 2000 	streq.w	r2, [r8]
 800aef0:	605a      	strne	r2, [r3, #4]
 800aef2:	e7eb      	b.n	800aecc <_malloc_r+0xa8>
 800aef4:	4623      	mov	r3, r4
 800aef6:	6864      	ldr	r4, [r4, #4]
 800aef8:	e7ae      	b.n	800ae58 <_malloc_r+0x34>
 800aefa:	463c      	mov	r4, r7
 800aefc:	687f      	ldr	r7, [r7, #4]
 800aefe:	e7b6      	b.n	800ae6e <_malloc_r+0x4a>
 800af00:	461a      	mov	r2, r3
 800af02:	685b      	ldr	r3, [r3, #4]
 800af04:	42a3      	cmp	r3, r4
 800af06:	d1fb      	bne.n	800af00 <_malloc_r+0xdc>
 800af08:	2300      	movs	r3, #0
 800af0a:	6053      	str	r3, [r2, #4]
 800af0c:	e7de      	b.n	800aecc <_malloc_r+0xa8>
 800af0e:	230c      	movs	r3, #12
 800af10:	6033      	str	r3, [r6, #0]
 800af12:	4630      	mov	r0, r6
 800af14:	f000 f80c 	bl	800af30 <__malloc_unlock>
 800af18:	e794      	b.n	800ae44 <_malloc_r+0x20>
 800af1a:	6005      	str	r5, [r0, #0]
 800af1c:	e7d6      	b.n	800aecc <_malloc_r+0xa8>
 800af1e:	bf00      	nop
 800af20:	24004e20 	.word	0x24004e20

0800af24 <__malloc_lock>:
 800af24:	4801      	ldr	r0, [pc, #4]	@ (800af2c <__malloc_lock+0x8>)
 800af26:	f7ff b914 	b.w	800a152 <__retarget_lock_acquire_recursive>
 800af2a:	bf00      	nop
 800af2c:	24004e18 	.word	0x24004e18

0800af30 <__malloc_unlock>:
 800af30:	4801      	ldr	r0, [pc, #4]	@ (800af38 <__malloc_unlock+0x8>)
 800af32:	f7ff b90f 	b.w	800a154 <__retarget_lock_release_recursive>
 800af36:	bf00      	nop
 800af38:	24004e18 	.word	0x24004e18

0800af3c <_Balloc>:
 800af3c:	b570      	push	{r4, r5, r6, lr}
 800af3e:	69c6      	ldr	r6, [r0, #28]
 800af40:	4604      	mov	r4, r0
 800af42:	460d      	mov	r5, r1
 800af44:	b976      	cbnz	r6, 800af64 <_Balloc+0x28>
 800af46:	2010      	movs	r0, #16
 800af48:	f7ff ff42 	bl	800add0 <malloc>
 800af4c:	4602      	mov	r2, r0
 800af4e:	61e0      	str	r0, [r4, #28]
 800af50:	b920      	cbnz	r0, 800af5c <_Balloc+0x20>
 800af52:	4b18      	ldr	r3, [pc, #96]	@ (800afb4 <_Balloc+0x78>)
 800af54:	4818      	ldr	r0, [pc, #96]	@ (800afb8 <_Balloc+0x7c>)
 800af56:	216b      	movs	r1, #107	@ 0x6b
 800af58:	f001 fee2 	bl	800cd20 <__assert_func>
 800af5c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800af60:	6006      	str	r6, [r0, #0]
 800af62:	60c6      	str	r6, [r0, #12]
 800af64:	69e6      	ldr	r6, [r4, #28]
 800af66:	68f3      	ldr	r3, [r6, #12]
 800af68:	b183      	cbz	r3, 800af8c <_Balloc+0x50>
 800af6a:	69e3      	ldr	r3, [r4, #28]
 800af6c:	68db      	ldr	r3, [r3, #12]
 800af6e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800af72:	b9b8      	cbnz	r0, 800afa4 <_Balloc+0x68>
 800af74:	2101      	movs	r1, #1
 800af76:	fa01 f605 	lsl.w	r6, r1, r5
 800af7a:	1d72      	adds	r2, r6, #5
 800af7c:	0092      	lsls	r2, r2, #2
 800af7e:	4620      	mov	r0, r4
 800af80:	f001 feec 	bl	800cd5c <_calloc_r>
 800af84:	b160      	cbz	r0, 800afa0 <_Balloc+0x64>
 800af86:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800af8a:	e00e      	b.n	800afaa <_Balloc+0x6e>
 800af8c:	2221      	movs	r2, #33	@ 0x21
 800af8e:	2104      	movs	r1, #4
 800af90:	4620      	mov	r0, r4
 800af92:	f001 fee3 	bl	800cd5c <_calloc_r>
 800af96:	69e3      	ldr	r3, [r4, #28]
 800af98:	60f0      	str	r0, [r6, #12]
 800af9a:	68db      	ldr	r3, [r3, #12]
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d1e4      	bne.n	800af6a <_Balloc+0x2e>
 800afa0:	2000      	movs	r0, #0
 800afa2:	bd70      	pop	{r4, r5, r6, pc}
 800afa4:	6802      	ldr	r2, [r0, #0]
 800afa6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800afaa:	2300      	movs	r3, #0
 800afac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800afb0:	e7f7      	b.n	800afa2 <_Balloc+0x66>
 800afb2:	bf00      	nop
 800afb4:	0800d676 	.word	0x0800d676
 800afb8:	0800d6f6 	.word	0x0800d6f6

0800afbc <_Bfree>:
 800afbc:	b570      	push	{r4, r5, r6, lr}
 800afbe:	69c6      	ldr	r6, [r0, #28]
 800afc0:	4605      	mov	r5, r0
 800afc2:	460c      	mov	r4, r1
 800afc4:	b976      	cbnz	r6, 800afe4 <_Bfree+0x28>
 800afc6:	2010      	movs	r0, #16
 800afc8:	f7ff ff02 	bl	800add0 <malloc>
 800afcc:	4602      	mov	r2, r0
 800afce:	61e8      	str	r0, [r5, #28]
 800afd0:	b920      	cbnz	r0, 800afdc <_Bfree+0x20>
 800afd2:	4b09      	ldr	r3, [pc, #36]	@ (800aff8 <_Bfree+0x3c>)
 800afd4:	4809      	ldr	r0, [pc, #36]	@ (800affc <_Bfree+0x40>)
 800afd6:	218f      	movs	r1, #143	@ 0x8f
 800afd8:	f001 fea2 	bl	800cd20 <__assert_func>
 800afdc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800afe0:	6006      	str	r6, [r0, #0]
 800afe2:	60c6      	str	r6, [r0, #12]
 800afe4:	b13c      	cbz	r4, 800aff6 <_Bfree+0x3a>
 800afe6:	69eb      	ldr	r3, [r5, #28]
 800afe8:	6862      	ldr	r2, [r4, #4]
 800afea:	68db      	ldr	r3, [r3, #12]
 800afec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800aff0:	6021      	str	r1, [r4, #0]
 800aff2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800aff6:	bd70      	pop	{r4, r5, r6, pc}
 800aff8:	0800d676 	.word	0x0800d676
 800affc:	0800d6f6 	.word	0x0800d6f6

0800b000 <__multadd>:
 800b000:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b004:	690d      	ldr	r5, [r1, #16]
 800b006:	4607      	mov	r7, r0
 800b008:	460c      	mov	r4, r1
 800b00a:	461e      	mov	r6, r3
 800b00c:	f101 0c14 	add.w	ip, r1, #20
 800b010:	2000      	movs	r0, #0
 800b012:	f8dc 3000 	ldr.w	r3, [ip]
 800b016:	b299      	uxth	r1, r3
 800b018:	fb02 6101 	mla	r1, r2, r1, r6
 800b01c:	0c1e      	lsrs	r6, r3, #16
 800b01e:	0c0b      	lsrs	r3, r1, #16
 800b020:	fb02 3306 	mla	r3, r2, r6, r3
 800b024:	b289      	uxth	r1, r1
 800b026:	3001      	adds	r0, #1
 800b028:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b02c:	4285      	cmp	r5, r0
 800b02e:	f84c 1b04 	str.w	r1, [ip], #4
 800b032:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b036:	dcec      	bgt.n	800b012 <__multadd+0x12>
 800b038:	b30e      	cbz	r6, 800b07e <__multadd+0x7e>
 800b03a:	68a3      	ldr	r3, [r4, #8]
 800b03c:	42ab      	cmp	r3, r5
 800b03e:	dc19      	bgt.n	800b074 <__multadd+0x74>
 800b040:	6861      	ldr	r1, [r4, #4]
 800b042:	4638      	mov	r0, r7
 800b044:	3101      	adds	r1, #1
 800b046:	f7ff ff79 	bl	800af3c <_Balloc>
 800b04a:	4680      	mov	r8, r0
 800b04c:	b928      	cbnz	r0, 800b05a <__multadd+0x5a>
 800b04e:	4602      	mov	r2, r0
 800b050:	4b0c      	ldr	r3, [pc, #48]	@ (800b084 <__multadd+0x84>)
 800b052:	480d      	ldr	r0, [pc, #52]	@ (800b088 <__multadd+0x88>)
 800b054:	21ba      	movs	r1, #186	@ 0xba
 800b056:	f001 fe63 	bl	800cd20 <__assert_func>
 800b05a:	6922      	ldr	r2, [r4, #16]
 800b05c:	3202      	adds	r2, #2
 800b05e:	f104 010c 	add.w	r1, r4, #12
 800b062:	0092      	lsls	r2, r2, #2
 800b064:	300c      	adds	r0, #12
 800b066:	f7ff f876 	bl	800a156 <memcpy>
 800b06a:	4621      	mov	r1, r4
 800b06c:	4638      	mov	r0, r7
 800b06e:	f7ff ffa5 	bl	800afbc <_Bfree>
 800b072:	4644      	mov	r4, r8
 800b074:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b078:	3501      	adds	r5, #1
 800b07a:	615e      	str	r6, [r3, #20]
 800b07c:	6125      	str	r5, [r4, #16]
 800b07e:	4620      	mov	r0, r4
 800b080:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b084:	0800d6e5 	.word	0x0800d6e5
 800b088:	0800d6f6 	.word	0x0800d6f6

0800b08c <__s2b>:
 800b08c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b090:	460c      	mov	r4, r1
 800b092:	4615      	mov	r5, r2
 800b094:	461f      	mov	r7, r3
 800b096:	2209      	movs	r2, #9
 800b098:	3308      	adds	r3, #8
 800b09a:	4606      	mov	r6, r0
 800b09c:	fb93 f3f2 	sdiv	r3, r3, r2
 800b0a0:	2100      	movs	r1, #0
 800b0a2:	2201      	movs	r2, #1
 800b0a4:	429a      	cmp	r2, r3
 800b0a6:	db09      	blt.n	800b0bc <__s2b+0x30>
 800b0a8:	4630      	mov	r0, r6
 800b0aa:	f7ff ff47 	bl	800af3c <_Balloc>
 800b0ae:	b940      	cbnz	r0, 800b0c2 <__s2b+0x36>
 800b0b0:	4602      	mov	r2, r0
 800b0b2:	4b19      	ldr	r3, [pc, #100]	@ (800b118 <__s2b+0x8c>)
 800b0b4:	4819      	ldr	r0, [pc, #100]	@ (800b11c <__s2b+0x90>)
 800b0b6:	21d3      	movs	r1, #211	@ 0xd3
 800b0b8:	f001 fe32 	bl	800cd20 <__assert_func>
 800b0bc:	0052      	lsls	r2, r2, #1
 800b0be:	3101      	adds	r1, #1
 800b0c0:	e7f0      	b.n	800b0a4 <__s2b+0x18>
 800b0c2:	9b08      	ldr	r3, [sp, #32]
 800b0c4:	6143      	str	r3, [r0, #20]
 800b0c6:	2d09      	cmp	r5, #9
 800b0c8:	f04f 0301 	mov.w	r3, #1
 800b0cc:	6103      	str	r3, [r0, #16]
 800b0ce:	dd16      	ble.n	800b0fe <__s2b+0x72>
 800b0d0:	f104 0909 	add.w	r9, r4, #9
 800b0d4:	46c8      	mov	r8, r9
 800b0d6:	442c      	add	r4, r5
 800b0d8:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b0dc:	4601      	mov	r1, r0
 800b0de:	3b30      	subs	r3, #48	@ 0x30
 800b0e0:	220a      	movs	r2, #10
 800b0e2:	4630      	mov	r0, r6
 800b0e4:	f7ff ff8c 	bl	800b000 <__multadd>
 800b0e8:	45a0      	cmp	r8, r4
 800b0ea:	d1f5      	bne.n	800b0d8 <__s2b+0x4c>
 800b0ec:	f1a5 0408 	sub.w	r4, r5, #8
 800b0f0:	444c      	add	r4, r9
 800b0f2:	1b2d      	subs	r5, r5, r4
 800b0f4:	1963      	adds	r3, r4, r5
 800b0f6:	42bb      	cmp	r3, r7
 800b0f8:	db04      	blt.n	800b104 <__s2b+0x78>
 800b0fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b0fe:	340a      	adds	r4, #10
 800b100:	2509      	movs	r5, #9
 800b102:	e7f6      	b.n	800b0f2 <__s2b+0x66>
 800b104:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b108:	4601      	mov	r1, r0
 800b10a:	3b30      	subs	r3, #48	@ 0x30
 800b10c:	220a      	movs	r2, #10
 800b10e:	4630      	mov	r0, r6
 800b110:	f7ff ff76 	bl	800b000 <__multadd>
 800b114:	e7ee      	b.n	800b0f4 <__s2b+0x68>
 800b116:	bf00      	nop
 800b118:	0800d6e5 	.word	0x0800d6e5
 800b11c:	0800d6f6 	.word	0x0800d6f6

0800b120 <__hi0bits>:
 800b120:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b124:	4603      	mov	r3, r0
 800b126:	bf36      	itet	cc
 800b128:	0403      	lslcc	r3, r0, #16
 800b12a:	2000      	movcs	r0, #0
 800b12c:	2010      	movcc	r0, #16
 800b12e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b132:	bf3c      	itt	cc
 800b134:	021b      	lslcc	r3, r3, #8
 800b136:	3008      	addcc	r0, #8
 800b138:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b13c:	bf3c      	itt	cc
 800b13e:	011b      	lslcc	r3, r3, #4
 800b140:	3004      	addcc	r0, #4
 800b142:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b146:	bf3c      	itt	cc
 800b148:	009b      	lslcc	r3, r3, #2
 800b14a:	3002      	addcc	r0, #2
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	db05      	blt.n	800b15c <__hi0bits+0x3c>
 800b150:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b154:	f100 0001 	add.w	r0, r0, #1
 800b158:	bf08      	it	eq
 800b15a:	2020      	moveq	r0, #32
 800b15c:	4770      	bx	lr

0800b15e <__lo0bits>:
 800b15e:	6803      	ldr	r3, [r0, #0]
 800b160:	4602      	mov	r2, r0
 800b162:	f013 0007 	ands.w	r0, r3, #7
 800b166:	d00b      	beq.n	800b180 <__lo0bits+0x22>
 800b168:	07d9      	lsls	r1, r3, #31
 800b16a:	d421      	bmi.n	800b1b0 <__lo0bits+0x52>
 800b16c:	0798      	lsls	r0, r3, #30
 800b16e:	bf49      	itett	mi
 800b170:	085b      	lsrmi	r3, r3, #1
 800b172:	089b      	lsrpl	r3, r3, #2
 800b174:	2001      	movmi	r0, #1
 800b176:	6013      	strmi	r3, [r2, #0]
 800b178:	bf5c      	itt	pl
 800b17a:	6013      	strpl	r3, [r2, #0]
 800b17c:	2002      	movpl	r0, #2
 800b17e:	4770      	bx	lr
 800b180:	b299      	uxth	r1, r3
 800b182:	b909      	cbnz	r1, 800b188 <__lo0bits+0x2a>
 800b184:	0c1b      	lsrs	r3, r3, #16
 800b186:	2010      	movs	r0, #16
 800b188:	b2d9      	uxtb	r1, r3
 800b18a:	b909      	cbnz	r1, 800b190 <__lo0bits+0x32>
 800b18c:	3008      	adds	r0, #8
 800b18e:	0a1b      	lsrs	r3, r3, #8
 800b190:	0719      	lsls	r1, r3, #28
 800b192:	bf04      	itt	eq
 800b194:	091b      	lsreq	r3, r3, #4
 800b196:	3004      	addeq	r0, #4
 800b198:	0799      	lsls	r1, r3, #30
 800b19a:	bf04      	itt	eq
 800b19c:	089b      	lsreq	r3, r3, #2
 800b19e:	3002      	addeq	r0, #2
 800b1a0:	07d9      	lsls	r1, r3, #31
 800b1a2:	d403      	bmi.n	800b1ac <__lo0bits+0x4e>
 800b1a4:	085b      	lsrs	r3, r3, #1
 800b1a6:	f100 0001 	add.w	r0, r0, #1
 800b1aa:	d003      	beq.n	800b1b4 <__lo0bits+0x56>
 800b1ac:	6013      	str	r3, [r2, #0]
 800b1ae:	4770      	bx	lr
 800b1b0:	2000      	movs	r0, #0
 800b1b2:	4770      	bx	lr
 800b1b4:	2020      	movs	r0, #32
 800b1b6:	4770      	bx	lr

0800b1b8 <__i2b>:
 800b1b8:	b510      	push	{r4, lr}
 800b1ba:	460c      	mov	r4, r1
 800b1bc:	2101      	movs	r1, #1
 800b1be:	f7ff febd 	bl	800af3c <_Balloc>
 800b1c2:	4602      	mov	r2, r0
 800b1c4:	b928      	cbnz	r0, 800b1d2 <__i2b+0x1a>
 800b1c6:	4b05      	ldr	r3, [pc, #20]	@ (800b1dc <__i2b+0x24>)
 800b1c8:	4805      	ldr	r0, [pc, #20]	@ (800b1e0 <__i2b+0x28>)
 800b1ca:	f240 1145 	movw	r1, #325	@ 0x145
 800b1ce:	f001 fda7 	bl	800cd20 <__assert_func>
 800b1d2:	2301      	movs	r3, #1
 800b1d4:	6144      	str	r4, [r0, #20]
 800b1d6:	6103      	str	r3, [r0, #16]
 800b1d8:	bd10      	pop	{r4, pc}
 800b1da:	bf00      	nop
 800b1dc:	0800d6e5 	.word	0x0800d6e5
 800b1e0:	0800d6f6 	.word	0x0800d6f6

0800b1e4 <__multiply>:
 800b1e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1e8:	4614      	mov	r4, r2
 800b1ea:	690a      	ldr	r2, [r1, #16]
 800b1ec:	6923      	ldr	r3, [r4, #16]
 800b1ee:	429a      	cmp	r2, r3
 800b1f0:	bfa8      	it	ge
 800b1f2:	4623      	movge	r3, r4
 800b1f4:	460f      	mov	r7, r1
 800b1f6:	bfa4      	itt	ge
 800b1f8:	460c      	movge	r4, r1
 800b1fa:	461f      	movge	r7, r3
 800b1fc:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800b200:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800b204:	68a3      	ldr	r3, [r4, #8]
 800b206:	6861      	ldr	r1, [r4, #4]
 800b208:	eb0a 0609 	add.w	r6, sl, r9
 800b20c:	42b3      	cmp	r3, r6
 800b20e:	b085      	sub	sp, #20
 800b210:	bfb8      	it	lt
 800b212:	3101      	addlt	r1, #1
 800b214:	f7ff fe92 	bl	800af3c <_Balloc>
 800b218:	b930      	cbnz	r0, 800b228 <__multiply+0x44>
 800b21a:	4602      	mov	r2, r0
 800b21c:	4b44      	ldr	r3, [pc, #272]	@ (800b330 <__multiply+0x14c>)
 800b21e:	4845      	ldr	r0, [pc, #276]	@ (800b334 <__multiply+0x150>)
 800b220:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b224:	f001 fd7c 	bl	800cd20 <__assert_func>
 800b228:	f100 0514 	add.w	r5, r0, #20
 800b22c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b230:	462b      	mov	r3, r5
 800b232:	2200      	movs	r2, #0
 800b234:	4543      	cmp	r3, r8
 800b236:	d321      	bcc.n	800b27c <__multiply+0x98>
 800b238:	f107 0114 	add.w	r1, r7, #20
 800b23c:	f104 0214 	add.w	r2, r4, #20
 800b240:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800b244:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800b248:	9302      	str	r3, [sp, #8]
 800b24a:	1b13      	subs	r3, r2, r4
 800b24c:	3b15      	subs	r3, #21
 800b24e:	f023 0303 	bic.w	r3, r3, #3
 800b252:	3304      	adds	r3, #4
 800b254:	f104 0715 	add.w	r7, r4, #21
 800b258:	42ba      	cmp	r2, r7
 800b25a:	bf38      	it	cc
 800b25c:	2304      	movcc	r3, #4
 800b25e:	9301      	str	r3, [sp, #4]
 800b260:	9b02      	ldr	r3, [sp, #8]
 800b262:	9103      	str	r1, [sp, #12]
 800b264:	428b      	cmp	r3, r1
 800b266:	d80c      	bhi.n	800b282 <__multiply+0x9e>
 800b268:	2e00      	cmp	r6, #0
 800b26a:	dd03      	ble.n	800b274 <__multiply+0x90>
 800b26c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b270:	2b00      	cmp	r3, #0
 800b272:	d05b      	beq.n	800b32c <__multiply+0x148>
 800b274:	6106      	str	r6, [r0, #16]
 800b276:	b005      	add	sp, #20
 800b278:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b27c:	f843 2b04 	str.w	r2, [r3], #4
 800b280:	e7d8      	b.n	800b234 <__multiply+0x50>
 800b282:	f8b1 a000 	ldrh.w	sl, [r1]
 800b286:	f1ba 0f00 	cmp.w	sl, #0
 800b28a:	d024      	beq.n	800b2d6 <__multiply+0xf2>
 800b28c:	f104 0e14 	add.w	lr, r4, #20
 800b290:	46a9      	mov	r9, r5
 800b292:	f04f 0c00 	mov.w	ip, #0
 800b296:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b29a:	f8d9 3000 	ldr.w	r3, [r9]
 800b29e:	fa1f fb87 	uxth.w	fp, r7
 800b2a2:	b29b      	uxth	r3, r3
 800b2a4:	fb0a 330b 	mla	r3, sl, fp, r3
 800b2a8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800b2ac:	f8d9 7000 	ldr.w	r7, [r9]
 800b2b0:	4463      	add	r3, ip
 800b2b2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b2b6:	fb0a c70b 	mla	r7, sl, fp, ip
 800b2ba:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800b2be:	b29b      	uxth	r3, r3
 800b2c0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b2c4:	4572      	cmp	r2, lr
 800b2c6:	f849 3b04 	str.w	r3, [r9], #4
 800b2ca:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b2ce:	d8e2      	bhi.n	800b296 <__multiply+0xb2>
 800b2d0:	9b01      	ldr	r3, [sp, #4]
 800b2d2:	f845 c003 	str.w	ip, [r5, r3]
 800b2d6:	9b03      	ldr	r3, [sp, #12]
 800b2d8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b2dc:	3104      	adds	r1, #4
 800b2de:	f1b9 0f00 	cmp.w	r9, #0
 800b2e2:	d021      	beq.n	800b328 <__multiply+0x144>
 800b2e4:	682b      	ldr	r3, [r5, #0]
 800b2e6:	f104 0c14 	add.w	ip, r4, #20
 800b2ea:	46ae      	mov	lr, r5
 800b2ec:	f04f 0a00 	mov.w	sl, #0
 800b2f0:	f8bc b000 	ldrh.w	fp, [ip]
 800b2f4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800b2f8:	fb09 770b 	mla	r7, r9, fp, r7
 800b2fc:	4457      	add	r7, sl
 800b2fe:	b29b      	uxth	r3, r3
 800b300:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b304:	f84e 3b04 	str.w	r3, [lr], #4
 800b308:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b30c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b310:	f8be 3000 	ldrh.w	r3, [lr]
 800b314:	fb09 330a 	mla	r3, r9, sl, r3
 800b318:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800b31c:	4562      	cmp	r2, ip
 800b31e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b322:	d8e5      	bhi.n	800b2f0 <__multiply+0x10c>
 800b324:	9f01      	ldr	r7, [sp, #4]
 800b326:	51eb      	str	r3, [r5, r7]
 800b328:	3504      	adds	r5, #4
 800b32a:	e799      	b.n	800b260 <__multiply+0x7c>
 800b32c:	3e01      	subs	r6, #1
 800b32e:	e79b      	b.n	800b268 <__multiply+0x84>
 800b330:	0800d6e5 	.word	0x0800d6e5
 800b334:	0800d6f6 	.word	0x0800d6f6

0800b338 <__pow5mult>:
 800b338:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b33c:	4615      	mov	r5, r2
 800b33e:	f012 0203 	ands.w	r2, r2, #3
 800b342:	4607      	mov	r7, r0
 800b344:	460e      	mov	r6, r1
 800b346:	d007      	beq.n	800b358 <__pow5mult+0x20>
 800b348:	4c25      	ldr	r4, [pc, #148]	@ (800b3e0 <__pow5mult+0xa8>)
 800b34a:	3a01      	subs	r2, #1
 800b34c:	2300      	movs	r3, #0
 800b34e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b352:	f7ff fe55 	bl	800b000 <__multadd>
 800b356:	4606      	mov	r6, r0
 800b358:	10ad      	asrs	r5, r5, #2
 800b35a:	d03d      	beq.n	800b3d8 <__pow5mult+0xa0>
 800b35c:	69fc      	ldr	r4, [r7, #28]
 800b35e:	b97c      	cbnz	r4, 800b380 <__pow5mult+0x48>
 800b360:	2010      	movs	r0, #16
 800b362:	f7ff fd35 	bl	800add0 <malloc>
 800b366:	4602      	mov	r2, r0
 800b368:	61f8      	str	r0, [r7, #28]
 800b36a:	b928      	cbnz	r0, 800b378 <__pow5mult+0x40>
 800b36c:	4b1d      	ldr	r3, [pc, #116]	@ (800b3e4 <__pow5mult+0xac>)
 800b36e:	481e      	ldr	r0, [pc, #120]	@ (800b3e8 <__pow5mult+0xb0>)
 800b370:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b374:	f001 fcd4 	bl	800cd20 <__assert_func>
 800b378:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b37c:	6004      	str	r4, [r0, #0]
 800b37e:	60c4      	str	r4, [r0, #12]
 800b380:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b384:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b388:	b94c      	cbnz	r4, 800b39e <__pow5mult+0x66>
 800b38a:	f240 2171 	movw	r1, #625	@ 0x271
 800b38e:	4638      	mov	r0, r7
 800b390:	f7ff ff12 	bl	800b1b8 <__i2b>
 800b394:	2300      	movs	r3, #0
 800b396:	f8c8 0008 	str.w	r0, [r8, #8]
 800b39a:	4604      	mov	r4, r0
 800b39c:	6003      	str	r3, [r0, #0]
 800b39e:	f04f 0900 	mov.w	r9, #0
 800b3a2:	07eb      	lsls	r3, r5, #31
 800b3a4:	d50a      	bpl.n	800b3bc <__pow5mult+0x84>
 800b3a6:	4631      	mov	r1, r6
 800b3a8:	4622      	mov	r2, r4
 800b3aa:	4638      	mov	r0, r7
 800b3ac:	f7ff ff1a 	bl	800b1e4 <__multiply>
 800b3b0:	4631      	mov	r1, r6
 800b3b2:	4680      	mov	r8, r0
 800b3b4:	4638      	mov	r0, r7
 800b3b6:	f7ff fe01 	bl	800afbc <_Bfree>
 800b3ba:	4646      	mov	r6, r8
 800b3bc:	106d      	asrs	r5, r5, #1
 800b3be:	d00b      	beq.n	800b3d8 <__pow5mult+0xa0>
 800b3c0:	6820      	ldr	r0, [r4, #0]
 800b3c2:	b938      	cbnz	r0, 800b3d4 <__pow5mult+0x9c>
 800b3c4:	4622      	mov	r2, r4
 800b3c6:	4621      	mov	r1, r4
 800b3c8:	4638      	mov	r0, r7
 800b3ca:	f7ff ff0b 	bl	800b1e4 <__multiply>
 800b3ce:	6020      	str	r0, [r4, #0]
 800b3d0:	f8c0 9000 	str.w	r9, [r0]
 800b3d4:	4604      	mov	r4, r0
 800b3d6:	e7e4      	b.n	800b3a2 <__pow5mult+0x6a>
 800b3d8:	4630      	mov	r0, r6
 800b3da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b3de:	bf00      	nop
 800b3e0:	0800d750 	.word	0x0800d750
 800b3e4:	0800d676 	.word	0x0800d676
 800b3e8:	0800d6f6 	.word	0x0800d6f6

0800b3ec <__lshift>:
 800b3ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b3f0:	460c      	mov	r4, r1
 800b3f2:	6849      	ldr	r1, [r1, #4]
 800b3f4:	6923      	ldr	r3, [r4, #16]
 800b3f6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b3fa:	68a3      	ldr	r3, [r4, #8]
 800b3fc:	4607      	mov	r7, r0
 800b3fe:	4691      	mov	r9, r2
 800b400:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b404:	f108 0601 	add.w	r6, r8, #1
 800b408:	42b3      	cmp	r3, r6
 800b40a:	db0b      	blt.n	800b424 <__lshift+0x38>
 800b40c:	4638      	mov	r0, r7
 800b40e:	f7ff fd95 	bl	800af3c <_Balloc>
 800b412:	4605      	mov	r5, r0
 800b414:	b948      	cbnz	r0, 800b42a <__lshift+0x3e>
 800b416:	4602      	mov	r2, r0
 800b418:	4b28      	ldr	r3, [pc, #160]	@ (800b4bc <__lshift+0xd0>)
 800b41a:	4829      	ldr	r0, [pc, #164]	@ (800b4c0 <__lshift+0xd4>)
 800b41c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b420:	f001 fc7e 	bl	800cd20 <__assert_func>
 800b424:	3101      	adds	r1, #1
 800b426:	005b      	lsls	r3, r3, #1
 800b428:	e7ee      	b.n	800b408 <__lshift+0x1c>
 800b42a:	2300      	movs	r3, #0
 800b42c:	f100 0114 	add.w	r1, r0, #20
 800b430:	f100 0210 	add.w	r2, r0, #16
 800b434:	4618      	mov	r0, r3
 800b436:	4553      	cmp	r3, sl
 800b438:	db33      	blt.n	800b4a2 <__lshift+0xb6>
 800b43a:	6920      	ldr	r0, [r4, #16]
 800b43c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b440:	f104 0314 	add.w	r3, r4, #20
 800b444:	f019 091f 	ands.w	r9, r9, #31
 800b448:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b44c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b450:	d02b      	beq.n	800b4aa <__lshift+0xbe>
 800b452:	f1c9 0e20 	rsb	lr, r9, #32
 800b456:	468a      	mov	sl, r1
 800b458:	2200      	movs	r2, #0
 800b45a:	6818      	ldr	r0, [r3, #0]
 800b45c:	fa00 f009 	lsl.w	r0, r0, r9
 800b460:	4310      	orrs	r0, r2
 800b462:	f84a 0b04 	str.w	r0, [sl], #4
 800b466:	f853 2b04 	ldr.w	r2, [r3], #4
 800b46a:	459c      	cmp	ip, r3
 800b46c:	fa22 f20e 	lsr.w	r2, r2, lr
 800b470:	d8f3      	bhi.n	800b45a <__lshift+0x6e>
 800b472:	ebac 0304 	sub.w	r3, ip, r4
 800b476:	3b15      	subs	r3, #21
 800b478:	f023 0303 	bic.w	r3, r3, #3
 800b47c:	3304      	adds	r3, #4
 800b47e:	f104 0015 	add.w	r0, r4, #21
 800b482:	4584      	cmp	ip, r0
 800b484:	bf38      	it	cc
 800b486:	2304      	movcc	r3, #4
 800b488:	50ca      	str	r2, [r1, r3]
 800b48a:	b10a      	cbz	r2, 800b490 <__lshift+0xa4>
 800b48c:	f108 0602 	add.w	r6, r8, #2
 800b490:	3e01      	subs	r6, #1
 800b492:	4638      	mov	r0, r7
 800b494:	612e      	str	r6, [r5, #16]
 800b496:	4621      	mov	r1, r4
 800b498:	f7ff fd90 	bl	800afbc <_Bfree>
 800b49c:	4628      	mov	r0, r5
 800b49e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4a2:	f842 0f04 	str.w	r0, [r2, #4]!
 800b4a6:	3301      	adds	r3, #1
 800b4a8:	e7c5      	b.n	800b436 <__lshift+0x4a>
 800b4aa:	3904      	subs	r1, #4
 800b4ac:	f853 2b04 	ldr.w	r2, [r3], #4
 800b4b0:	f841 2f04 	str.w	r2, [r1, #4]!
 800b4b4:	459c      	cmp	ip, r3
 800b4b6:	d8f9      	bhi.n	800b4ac <__lshift+0xc0>
 800b4b8:	e7ea      	b.n	800b490 <__lshift+0xa4>
 800b4ba:	bf00      	nop
 800b4bc:	0800d6e5 	.word	0x0800d6e5
 800b4c0:	0800d6f6 	.word	0x0800d6f6

0800b4c4 <__mcmp>:
 800b4c4:	690a      	ldr	r2, [r1, #16]
 800b4c6:	4603      	mov	r3, r0
 800b4c8:	6900      	ldr	r0, [r0, #16]
 800b4ca:	1a80      	subs	r0, r0, r2
 800b4cc:	b530      	push	{r4, r5, lr}
 800b4ce:	d10e      	bne.n	800b4ee <__mcmp+0x2a>
 800b4d0:	3314      	adds	r3, #20
 800b4d2:	3114      	adds	r1, #20
 800b4d4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b4d8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b4dc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b4e0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b4e4:	4295      	cmp	r5, r2
 800b4e6:	d003      	beq.n	800b4f0 <__mcmp+0x2c>
 800b4e8:	d205      	bcs.n	800b4f6 <__mcmp+0x32>
 800b4ea:	f04f 30ff 	mov.w	r0, #4294967295
 800b4ee:	bd30      	pop	{r4, r5, pc}
 800b4f0:	42a3      	cmp	r3, r4
 800b4f2:	d3f3      	bcc.n	800b4dc <__mcmp+0x18>
 800b4f4:	e7fb      	b.n	800b4ee <__mcmp+0x2a>
 800b4f6:	2001      	movs	r0, #1
 800b4f8:	e7f9      	b.n	800b4ee <__mcmp+0x2a>
	...

0800b4fc <__mdiff>:
 800b4fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b500:	4689      	mov	r9, r1
 800b502:	4606      	mov	r6, r0
 800b504:	4611      	mov	r1, r2
 800b506:	4648      	mov	r0, r9
 800b508:	4614      	mov	r4, r2
 800b50a:	f7ff ffdb 	bl	800b4c4 <__mcmp>
 800b50e:	1e05      	subs	r5, r0, #0
 800b510:	d112      	bne.n	800b538 <__mdiff+0x3c>
 800b512:	4629      	mov	r1, r5
 800b514:	4630      	mov	r0, r6
 800b516:	f7ff fd11 	bl	800af3c <_Balloc>
 800b51a:	4602      	mov	r2, r0
 800b51c:	b928      	cbnz	r0, 800b52a <__mdiff+0x2e>
 800b51e:	4b3f      	ldr	r3, [pc, #252]	@ (800b61c <__mdiff+0x120>)
 800b520:	f240 2137 	movw	r1, #567	@ 0x237
 800b524:	483e      	ldr	r0, [pc, #248]	@ (800b620 <__mdiff+0x124>)
 800b526:	f001 fbfb 	bl	800cd20 <__assert_func>
 800b52a:	2301      	movs	r3, #1
 800b52c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b530:	4610      	mov	r0, r2
 800b532:	b003      	add	sp, #12
 800b534:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b538:	bfbc      	itt	lt
 800b53a:	464b      	movlt	r3, r9
 800b53c:	46a1      	movlt	r9, r4
 800b53e:	4630      	mov	r0, r6
 800b540:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b544:	bfba      	itte	lt
 800b546:	461c      	movlt	r4, r3
 800b548:	2501      	movlt	r5, #1
 800b54a:	2500      	movge	r5, #0
 800b54c:	f7ff fcf6 	bl	800af3c <_Balloc>
 800b550:	4602      	mov	r2, r0
 800b552:	b918      	cbnz	r0, 800b55c <__mdiff+0x60>
 800b554:	4b31      	ldr	r3, [pc, #196]	@ (800b61c <__mdiff+0x120>)
 800b556:	f240 2145 	movw	r1, #581	@ 0x245
 800b55a:	e7e3      	b.n	800b524 <__mdiff+0x28>
 800b55c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b560:	6926      	ldr	r6, [r4, #16]
 800b562:	60c5      	str	r5, [r0, #12]
 800b564:	f109 0310 	add.w	r3, r9, #16
 800b568:	f109 0514 	add.w	r5, r9, #20
 800b56c:	f104 0e14 	add.w	lr, r4, #20
 800b570:	f100 0b14 	add.w	fp, r0, #20
 800b574:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b578:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b57c:	9301      	str	r3, [sp, #4]
 800b57e:	46d9      	mov	r9, fp
 800b580:	f04f 0c00 	mov.w	ip, #0
 800b584:	9b01      	ldr	r3, [sp, #4]
 800b586:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b58a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b58e:	9301      	str	r3, [sp, #4]
 800b590:	fa1f f38a 	uxth.w	r3, sl
 800b594:	4619      	mov	r1, r3
 800b596:	b283      	uxth	r3, r0
 800b598:	1acb      	subs	r3, r1, r3
 800b59a:	0c00      	lsrs	r0, r0, #16
 800b59c:	4463      	add	r3, ip
 800b59e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b5a2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b5a6:	b29b      	uxth	r3, r3
 800b5a8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b5ac:	4576      	cmp	r6, lr
 800b5ae:	f849 3b04 	str.w	r3, [r9], #4
 800b5b2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b5b6:	d8e5      	bhi.n	800b584 <__mdiff+0x88>
 800b5b8:	1b33      	subs	r3, r6, r4
 800b5ba:	3b15      	subs	r3, #21
 800b5bc:	f023 0303 	bic.w	r3, r3, #3
 800b5c0:	3415      	adds	r4, #21
 800b5c2:	3304      	adds	r3, #4
 800b5c4:	42a6      	cmp	r6, r4
 800b5c6:	bf38      	it	cc
 800b5c8:	2304      	movcc	r3, #4
 800b5ca:	441d      	add	r5, r3
 800b5cc:	445b      	add	r3, fp
 800b5ce:	461e      	mov	r6, r3
 800b5d0:	462c      	mov	r4, r5
 800b5d2:	4544      	cmp	r4, r8
 800b5d4:	d30e      	bcc.n	800b5f4 <__mdiff+0xf8>
 800b5d6:	f108 0103 	add.w	r1, r8, #3
 800b5da:	1b49      	subs	r1, r1, r5
 800b5dc:	f021 0103 	bic.w	r1, r1, #3
 800b5e0:	3d03      	subs	r5, #3
 800b5e2:	45a8      	cmp	r8, r5
 800b5e4:	bf38      	it	cc
 800b5e6:	2100      	movcc	r1, #0
 800b5e8:	440b      	add	r3, r1
 800b5ea:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b5ee:	b191      	cbz	r1, 800b616 <__mdiff+0x11a>
 800b5f0:	6117      	str	r7, [r2, #16]
 800b5f2:	e79d      	b.n	800b530 <__mdiff+0x34>
 800b5f4:	f854 1b04 	ldr.w	r1, [r4], #4
 800b5f8:	46e6      	mov	lr, ip
 800b5fa:	0c08      	lsrs	r0, r1, #16
 800b5fc:	fa1c fc81 	uxtah	ip, ip, r1
 800b600:	4471      	add	r1, lr
 800b602:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b606:	b289      	uxth	r1, r1
 800b608:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b60c:	f846 1b04 	str.w	r1, [r6], #4
 800b610:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b614:	e7dd      	b.n	800b5d2 <__mdiff+0xd6>
 800b616:	3f01      	subs	r7, #1
 800b618:	e7e7      	b.n	800b5ea <__mdiff+0xee>
 800b61a:	bf00      	nop
 800b61c:	0800d6e5 	.word	0x0800d6e5
 800b620:	0800d6f6 	.word	0x0800d6f6

0800b624 <__ulp>:
 800b624:	b082      	sub	sp, #8
 800b626:	ed8d 0b00 	vstr	d0, [sp]
 800b62a:	9a01      	ldr	r2, [sp, #4]
 800b62c:	4b0f      	ldr	r3, [pc, #60]	@ (800b66c <__ulp+0x48>)
 800b62e:	4013      	ands	r3, r2
 800b630:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800b634:	2b00      	cmp	r3, #0
 800b636:	dc08      	bgt.n	800b64a <__ulp+0x26>
 800b638:	425b      	negs	r3, r3
 800b63a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800b63e:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b642:	da04      	bge.n	800b64e <__ulp+0x2a>
 800b644:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800b648:	4113      	asrs	r3, r2
 800b64a:	2200      	movs	r2, #0
 800b64c:	e008      	b.n	800b660 <__ulp+0x3c>
 800b64e:	f1a2 0314 	sub.w	r3, r2, #20
 800b652:	2b1e      	cmp	r3, #30
 800b654:	bfda      	itte	le
 800b656:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800b65a:	40da      	lsrle	r2, r3
 800b65c:	2201      	movgt	r2, #1
 800b65e:	2300      	movs	r3, #0
 800b660:	4619      	mov	r1, r3
 800b662:	4610      	mov	r0, r2
 800b664:	ec41 0b10 	vmov	d0, r0, r1
 800b668:	b002      	add	sp, #8
 800b66a:	4770      	bx	lr
 800b66c:	7ff00000 	.word	0x7ff00000

0800b670 <__b2d>:
 800b670:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b674:	6906      	ldr	r6, [r0, #16]
 800b676:	f100 0814 	add.w	r8, r0, #20
 800b67a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800b67e:	1f37      	subs	r7, r6, #4
 800b680:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b684:	4610      	mov	r0, r2
 800b686:	f7ff fd4b 	bl	800b120 <__hi0bits>
 800b68a:	f1c0 0320 	rsb	r3, r0, #32
 800b68e:	280a      	cmp	r0, #10
 800b690:	600b      	str	r3, [r1, #0]
 800b692:	491b      	ldr	r1, [pc, #108]	@ (800b700 <__b2d+0x90>)
 800b694:	dc15      	bgt.n	800b6c2 <__b2d+0x52>
 800b696:	f1c0 0c0b 	rsb	ip, r0, #11
 800b69a:	fa22 f30c 	lsr.w	r3, r2, ip
 800b69e:	45b8      	cmp	r8, r7
 800b6a0:	ea43 0501 	orr.w	r5, r3, r1
 800b6a4:	bf34      	ite	cc
 800b6a6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b6aa:	2300      	movcs	r3, #0
 800b6ac:	3015      	adds	r0, #21
 800b6ae:	fa02 f000 	lsl.w	r0, r2, r0
 800b6b2:	fa23 f30c 	lsr.w	r3, r3, ip
 800b6b6:	4303      	orrs	r3, r0
 800b6b8:	461c      	mov	r4, r3
 800b6ba:	ec45 4b10 	vmov	d0, r4, r5
 800b6be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b6c2:	45b8      	cmp	r8, r7
 800b6c4:	bf3a      	itte	cc
 800b6c6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b6ca:	f1a6 0708 	subcc.w	r7, r6, #8
 800b6ce:	2300      	movcs	r3, #0
 800b6d0:	380b      	subs	r0, #11
 800b6d2:	d012      	beq.n	800b6fa <__b2d+0x8a>
 800b6d4:	f1c0 0120 	rsb	r1, r0, #32
 800b6d8:	fa23 f401 	lsr.w	r4, r3, r1
 800b6dc:	4082      	lsls	r2, r0
 800b6de:	4322      	orrs	r2, r4
 800b6e0:	4547      	cmp	r7, r8
 800b6e2:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800b6e6:	bf8c      	ite	hi
 800b6e8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800b6ec:	2200      	movls	r2, #0
 800b6ee:	4083      	lsls	r3, r0
 800b6f0:	40ca      	lsrs	r2, r1
 800b6f2:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800b6f6:	4313      	orrs	r3, r2
 800b6f8:	e7de      	b.n	800b6b8 <__b2d+0x48>
 800b6fa:	ea42 0501 	orr.w	r5, r2, r1
 800b6fe:	e7db      	b.n	800b6b8 <__b2d+0x48>
 800b700:	3ff00000 	.word	0x3ff00000

0800b704 <__d2b>:
 800b704:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b708:	460f      	mov	r7, r1
 800b70a:	2101      	movs	r1, #1
 800b70c:	ec59 8b10 	vmov	r8, r9, d0
 800b710:	4616      	mov	r6, r2
 800b712:	f7ff fc13 	bl	800af3c <_Balloc>
 800b716:	4604      	mov	r4, r0
 800b718:	b930      	cbnz	r0, 800b728 <__d2b+0x24>
 800b71a:	4602      	mov	r2, r0
 800b71c:	4b23      	ldr	r3, [pc, #140]	@ (800b7ac <__d2b+0xa8>)
 800b71e:	4824      	ldr	r0, [pc, #144]	@ (800b7b0 <__d2b+0xac>)
 800b720:	f240 310f 	movw	r1, #783	@ 0x30f
 800b724:	f001 fafc 	bl	800cd20 <__assert_func>
 800b728:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b72c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b730:	b10d      	cbz	r5, 800b736 <__d2b+0x32>
 800b732:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b736:	9301      	str	r3, [sp, #4]
 800b738:	f1b8 0300 	subs.w	r3, r8, #0
 800b73c:	d023      	beq.n	800b786 <__d2b+0x82>
 800b73e:	4668      	mov	r0, sp
 800b740:	9300      	str	r3, [sp, #0]
 800b742:	f7ff fd0c 	bl	800b15e <__lo0bits>
 800b746:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b74a:	b1d0      	cbz	r0, 800b782 <__d2b+0x7e>
 800b74c:	f1c0 0320 	rsb	r3, r0, #32
 800b750:	fa02 f303 	lsl.w	r3, r2, r3
 800b754:	430b      	orrs	r3, r1
 800b756:	40c2      	lsrs	r2, r0
 800b758:	6163      	str	r3, [r4, #20]
 800b75a:	9201      	str	r2, [sp, #4]
 800b75c:	9b01      	ldr	r3, [sp, #4]
 800b75e:	61a3      	str	r3, [r4, #24]
 800b760:	2b00      	cmp	r3, #0
 800b762:	bf0c      	ite	eq
 800b764:	2201      	moveq	r2, #1
 800b766:	2202      	movne	r2, #2
 800b768:	6122      	str	r2, [r4, #16]
 800b76a:	b1a5      	cbz	r5, 800b796 <__d2b+0x92>
 800b76c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b770:	4405      	add	r5, r0
 800b772:	603d      	str	r5, [r7, #0]
 800b774:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b778:	6030      	str	r0, [r6, #0]
 800b77a:	4620      	mov	r0, r4
 800b77c:	b003      	add	sp, #12
 800b77e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b782:	6161      	str	r1, [r4, #20]
 800b784:	e7ea      	b.n	800b75c <__d2b+0x58>
 800b786:	a801      	add	r0, sp, #4
 800b788:	f7ff fce9 	bl	800b15e <__lo0bits>
 800b78c:	9b01      	ldr	r3, [sp, #4]
 800b78e:	6163      	str	r3, [r4, #20]
 800b790:	3020      	adds	r0, #32
 800b792:	2201      	movs	r2, #1
 800b794:	e7e8      	b.n	800b768 <__d2b+0x64>
 800b796:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b79a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b79e:	6038      	str	r0, [r7, #0]
 800b7a0:	6918      	ldr	r0, [r3, #16]
 800b7a2:	f7ff fcbd 	bl	800b120 <__hi0bits>
 800b7a6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b7aa:	e7e5      	b.n	800b778 <__d2b+0x74>
 800b7ac:	0800d6e5 	.word	0x0800d6e5
 800b7b0:	0800d6f6 	.word	0x0800d6f6

0800b7b4 <__ratio>:
 800b7b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7b8:	4688      	mov	r8, r1
 800b7ba:	4669      	mov	r1, sp
 800b7bc:	4681      	mov	r9, r0
 800b7be:	f7ff ff57 	bl	800b670 <__b2d>
 800b7c2:	a901      	add	r1, sp, #4
 800b7c4:	4640      	mov	r0, r8
 800b7c6:	ec55 4b10 	vmov	r4, r5, d0
 800b7ca:	f7ff ff51 	bl	800b670 <__b2d>
 800b7ce:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800b7d2:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800b7d6:	1ad2      	subs	r2, r2, r3
 800b7d8:	e9dd 3100 	ldrd	r3, r1, [sp]
 800b7dc:	1a5b      	subs	r3, r3, r1
 800b7de:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 800b7e2:	ec57 6b10 	vmov	r6, r7, d0
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	bfd6      	itet	le
 800b7ea:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b7ee:	462a      	movgt	r2, r5
 800b7f0:	463a      	movle	r2, r7
 800b7f2:	46ab      	mov	fp, r5
 800b7f4:	46a2      	mov	sl, r4
 800b7f6:	bfce      	itee	gt
 800b7f8:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800b7fc:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 800b800:	ee00 3a90 	vmovle	s1, r3
 800b804:	ec4b ab17 	vmov	d7, sl, fp
 800b808:	ee87 0b00 	vdiv.f64	d0, d7, d0
 800b80c:	b003      	add	sp, #12
 800b80e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b812 <__copybits>:
 800b812:	3901      	subs	r1, #1
 800b814:	b570      	push	{r4, r5, r6, lr}
 800b816:	1149      	asrs	r1, r1, #5
 800b818:	6914      	ldr	r4, [r2, #16]
 800b81a:	3101      	adds	r1, #1
 800b81c:	f102 0314 	add.w	r3, r2, #20
 800b820:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b824:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b828:	1f05      	subs	r5, r0, #4
 800b82a:	42a3      	cmp	r3, r4
 800b82c:	d30c      	bcc.n	800b848 <__copybits+0x36>
 800b82e:	1aa3      	subs	r3, r4, r2
 800b830:	3b11      	subs	r3, #17
 800b832:	f023 0303 	bic.w	r3, r3, #3
 800b836:	3211      	adds	r2, #17
 800b838:	42a2      	cmp	r2, r4
 800b83a:	bf88      	it	hi
 800b83c:	2300      	movhi	r3, #0
 800b83e:	4418      	add	r0, r3
 800b840:	2300      	movs	r3, #0
 800b842:	4288      	cmp	r0, r1
 800b844:	d305      	bcc.n	800b852 <__copybits+0x40>
 800b846:	bd70      	pop	{r4, r5, r6, pc}
 800b848:	f853 6b04 	ldr.w	r6, [r3], #4
 800b84c:	f845 6f04 	str.w	r6, [r5, #4]!
 800b850:	e7eb      	b.n	800b82a <__copybits+0x18>
 800b852:	f840 3b04 	str.w	r3, [r0], #4
 800b856:	e7f4      	b.n	800b842 <__copybits+0x30>

0800b858 <__any_on>:
 800b858:	f100 0214 	add.w	r2, r0, #20
 800b85c:	6900      	ldr	r0, [r0, #16]
 800b85e:	114b      	asrs	r3, r1, #5
 800b860:	4298      	cmp	r0, r3
 800b862:	b510      	push	{r4, lr}
 800b864:	db11      	blt.n	800b88a <__any_on+0x32>
 800b866:	dd0a      	ble.n	800b87e <__any_on+0x26>
 800b868:	f011 011f 	ands.w	r1, r1, #31
 800b86c:	d007      	beq.n	800b87e <__any_on+0x26>
 800b86e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b872:	fa24 f001 	lsr.w	r0, r4, r1
 800b876:	fa00 f101 	lsl.w	r1, r0, r1
 800b87a:	428c      	cmp	r4, r1
 800b87c:	d10b      	bne.n	800b896 <__any_on+0x3e>
 800b87e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b882:	4293      	cmp	r3, r2
 800b884:	d803      	bhi.n	800b88e <__any_on+0x36>
 800b886:	2000      	movs	r0, #0
 800b888:	bd10      	pop	{r4, pc}
 800b88a:	4603      	mov	r3, r0
 800b88c:	e7f7      	b.n	800b87e <__any_on+0x26>
 800b88e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b892:	2900      	cmp	r1, #0
 800b894:	d0f5      	beq.n	800b882 <__any_on+0x2a>
 800b896:	2001      	movs	r0, #1
 800b898:	e7f6      	b.n	800b888 <__any_on+0x30>

0800b89a <sulp>:
 800b89a:	b570      	push	{r4, r5, r6, lr}
 800b89c:	4604      	mov	r4, r0
 800b89e:	460d      	mov	r5, r1
 800b8a0:	4616      	mov	r6, r2
 800b8a2:	ec45 4b10 	vmov	d0, r4, r5
 800b8a6:	f7ff febd 	bl	800b624 <__ulp>
 800b8aa:	b17e      	cbz	r6, 800b8cc <sulp+0x32>
 800b8ac:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b8b0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	dd09      	ble.n	800b8cc <sulp+0x32>
 800b8b8:	051b      	lsls	r3, r3, #20
 800b8ba:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 800b8be:	2000      	movs	r0, #0
 800b8c0:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 800b8c4:	ec41 0b17 	vmov	d7, r0, r1
 800b8c8:	ee20 0b07 	vmul.f64	d0, d0, d7
 800b8cc:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b8d0 <_strtod_l>:
 800b8d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8d4:	ed2d 8b0a 	vpush	{d8-d12}
 800b8d8:	b097      	sub	sp, #92	@ 0x5c
 800b8da:	4688      	mov	r8, r1
 800b8dc:	920e      	str	r2, [sp, #56]	@ 0x38
 800b8de:	2200      	movs	r2, #0
 800b8e0:	9212      	str	r2, [sp, #72]	@ 0x48
 800b8e2:	9005      	str	r0, [sp, #20]
 800b8e4:	f04f 0a00 	mov.w	sl, #0
 800b8e8:	f04f 0b00 	mov.w	fp, #0
 800b8ec:	460a      	mov	r2, r1
 800b8ee:	9211      	str	r2, [sp, #68]	@ 0x44
 800b8f0:	7811      	ldrb	r1, [r2, #0]
 800b8f2:	292b      	cmp	r1, #43	@ 0x2b
 800b8f4:	d04c      	beq.n	800b990 <_strtod_l+0xc0>
 800b8f6:	d839      	bhi.n	800b96c <_strtod_l+0x9c>
 800b8f8:	290d      	cmp	r1, #13
 800b8fa:	d833      	bhi.n	800b964 <_strtod_l+0x94>
 800b8fc:	2908      	cmp	r1, #8
 800b8fe:	d833      	bhi.n	800b968 <_strtod_l+0x98>
 800b900:	2900      	cmp	r1, #0
 800b902:	d03c      	beq.n	800b97e <_strtod_l+0xae>
 800b904:	2200      	movs	r2, #0
 800b906:	9208      	str	r2, [sp, #32]
 800b908:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 800b90a:	782a      	ldrb	r2, [r5, #0]
 800b90c:	2a30      	cmp	r2, #48	@ 0x30
 800b90e:	f040 80b5 	bne.w	800ba7c <_strtod_l+0x1ac>
 800b912:	786a      	ldrb	r2, [r5, #1]
 800b914:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b918:	2a58      	cmp	r2, #88	@ 0x58
 800b91a:	d170      	bne.n	800b9fe <_strtod_l+0x12e>
 800b91c:	9302      	str	r3, [sp, #8]
 800b91e:	9b08      	ldr	r3, [sp, #32]
 800b920:	9301      	str	r3, [sp, #4]
 800b922:	ab12      	add	r3, sp, #72	@ 0x48
 800b924:	9300      	str	r3, [sp, #0]
 800b926:	4a8b      	ldr	r2, [pc, #556]	@ (800bb54 <_strtod_l+0x284>)
 800b928:	9805      	ldr	r0, [sp, #20]
 800b92a:	ab13      	add	r3, sp, #76	@ 0x4c
 800b92c:	a911      	add	r1, sp, #68	@ 0x44
 800b92e:	f001 fa91 	bl	800ce54 <__gethex>
 800b932:	f010 060f 	ands.w	r6, r0, #15
 800b936:	4604      	mov	r4, r0
 800b938:	d005      	beq.n	800b946 <_strtod_l+0x76>
 800b93a:	2e06      	cmp	r6, #6
 800b93c:	d12a      	bne.n	800b994 <_strtod_l+0xc4>
 800b93e:	3501      	adds	r5, #1
 800b940:	2300      	movs	r3, #0
 800b942:	9511      	str	r5, [sp, #68]	@ 0x44
 800b944:	9308      	str	r3, [sp, #32]
 800b946:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b948:	2b00      	cmp	r3, #0
 800b94a:	f040 852f 	bne.w	800c3ac <_strtod_l+0xadc>
 800b94e:	9b08      	ldr	r3, [sp, #32]
 800b950:	ec4b ab10 	vmov	d0, sl, fp
 800b954:	b1cb      	cbz	r3, 800b98a <_strtod_l+0xba>
 800b956:	eeb1 0b40 	vneg.f64	d0, d0
 800b95a:	b017      	add	sp, #92	@ 0x5c
 800b95c:	ecbd 8b0a 	vpop	{d8-d12}
 800b960:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b964:	2920      	cmp	r1, #32
 800b966:	d1cd      	bne.n	800b904 <_strtod_l+0x34>
 800b968:	3201      	adds	r2, #1
 800b96a:	e7c0      	b.n	800b8ee <_strtod_l+0x1e>
 800b96c:	292d      	cmp	r1, #45	@ 0x2d
 800b96e:	d1c9      	bne.n	800b904 <_strtod_l+0x34>
 800b970:	2101      	movs	r1, #1
 800b972:	9108      	str	r1, [sp, #32]
 800b974:	1c51      	adds	r1, r2, #1
 800b976:	9111      	str	r1, [sp, #68]	@ 0x44
 800b978:	7852      	ldrb	r2, [r2, #1]
 800b97a:	2a00      	cmp	r2, #0
 800b97c:	d1c4      	bne.n	800b908 <_strtod_l+0x38>
 800b97e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b980:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800b984:	2b00      	cmp	r3, #0
 800b986:	f040 850f 	bne.w	800c3a8 <_strtod_l+0xad8>
 800b98a:	ec4b ab10 	vmov	d0, sl, fp
 800b98e:	e7e4      	b.n	800b95a <_strtod_l+0x8a>
 800b990:	2100      	movs	r1, #0
 800b992:	e7ee      	b.n	800b972 <_strtod_l+0xa2>
 800b994:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800b996:	b13a      	cbz	r2, 800b9a8 <_strtod_l+0xd8>
 800b998:	2135      	movs	r1, #53	@ 0x35
 800b99a:	a814      	add	r0, sp, #80	@ 0x50
 800b99c:	f7ff ff39 	bl	800b812 <__copybits>
 800b9a0:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800b9a2:	9805      	ldr	r0, [sp, #20]
 800b9a4:	f7ff fb0a 	bl	800afbc <_Bfree>
 800b9a8:	1e73      	subs	r3, r6, #1
 800b9aa:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b9ac:	2b04      	cmp	r3, #4
 800b9ae:	d806      	bhi.n	800b9be <_strtod_l+0xee>
 800b9b0:	e8df f003 	tbb	[pc, r3]
 800b9b4:	201d0314 	.word	0x201d0314
 800b9b8:	14          	.byte	0x14
 800b9b9:	00          	.byte	0x00
 800b9ba:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 800b9be:	05e3      	lsls	r3, r4, #23
 800b9c0:	bf48      	it	mi
 800b9c2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800b9c6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b9ca:	0d1b      	lsrs	r3, r3, #20
 800b9cc:	051b      	lsls	r3, r3, #20
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d1b9      	bne.n	800b946 <_strtod_l+0x76>
 800b9d2:	f7fe fb93 	bl	800a0fc <__errno>
 800b9d6:	2322      	movs	r3, #34	@ 0x22
 800b9d8:	6003      	str	r3, [r0, #0]
 800b9da:	e7b4      	b.n	800b946 <_strtod_l+0x76>
 800b9dc:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 800b9e0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800b9e4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800b9e8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800b9ec:	e7e7      	b.n	800b9be <_strtod_l+0xee>
 800b9ee:	f8df b16c 	ldr.w	fp, [pc, #364]	@ 800bb5c <_strtod_l+0x28c>
 800b9f2:	e7e4      	b.n	800b9be <_strtod_l+0xee>
 800b9f4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800b9f8:	f04f 3aff 	mov.w	sl, #4294967295
 800b9fc:	e7df      	b.n	800b9be <_strtod_l+0xee>
 800b9fe:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ba00:	1c5a      	adds	r2, r3, #1
 800ba02:	9211      	str	r2, [sp, #68]	@ 0x44
 800ba04:	785b      	ldrb	r3, [r3, #1]
 800ba06:	2b30      	cmp	r3, #48	@ 0x30
 800ba08:	d0f9      	beq.n	800b9fe <_strtod_l+0x12e>
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d09b      	beq.n	800b946 <_strtod_l+0x76>
 800ba0e:	2301      	movs	r3, #1
 800ba10:	2600      	movs	r6, #0
 800ba12:	9307      	str	r3, [sp, #28]
 800ba14:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ba16:	930a      	str	r3, [sp, #40]	@ 0x28
 800ba18:	46b1      	mov	r9, r6
 800ba1a:	4635      	mov	r5, r6
 800ba1c:	220a      	movs	r2, #10
 800ba1e:	9811      	ldr	r0, [sp, #68]	@ 0x44
 800ba20:	7804      	ldrb	r4, [r0, #0]
 800ba22:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 800ba26:	b2d9      	uxtb	r1, r3
 800ba28:	2909      	cmp	r1, #9
 800ba2a:	d929      	bls.n	800ba80 <_strtod_l+0x1b0>
 800ba2c:	494a      	ldr	r1, [pc, #296]	@ (800bb58 <_strtod_l+0x288>)
 800ba2e:	2201      	movs	r2, #1
 800ba30:	f001 f928 	bl	800cc84 <strncmp>
 800ba34:	b378      	cbz	r0, 800ba96 <_strtod_l+0x1c6>
 800ba36:	2000      	movs	r0, #0
 800ba38:	4622      	mov	r2, r4
 800ba3a:	462b      	mov	r3, r5
 800ba3c:	4607      	mov	r7, r0
 800ba3e:	9006      	str	r0, [sp, #24]
 800ba40:	2a65      	cmp	r2, #101	@ 0x65
 800ba42:	d001      	beq.n	800ba48 <_strtod_l+0x178>
 800ba44:	2a45      	cmp	r2, #69	@ 0x45
 800ba46:	d117      	bne.n	800ba78 <_strtod_l+0x1a8>
 800ba48:	b91b      	cbnz	r3, 800ba52 <_strtod_l+0x182>
 800ba4a:	9b07      	ldr	r3, [sp, #28]
 800ba4c:	4303      	orrs	r3, r0
 800ba4e:	d096      	beq.n	800b97e <_strtod_l+0xae>
 800ba50:	2300      	movs	r3, #0
 800ba52:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 800ba56:	f108 0201 	add.w	r2, r8, #1
 800ba5a:	9211      	str	r2, [sp, #68]	@ 0x44
 800ba5c:	f898 2001 	ldrb.w	r2, [r8, #1]
 800ba60:	2a2b      	cmp	r2, #43	@ 0x2b
 800ba62:	d06b      	beq.n	800bb3c <_strtod_l+0x26c>
 800ba64:	2a2d      	cmp	r2, #45	@ 0x2d
 800ba66:	d071      	beq.n	800bb4c <_strtod_l+0x27c>
 800ba68:	f04f 0e00 	mov.w	lr, #0
 800ba6c:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 800ba70:	2c09      	cmp	r4, #9
 800ba72:	d979      	bls.n	800bb68 <_strtod_l+0x298>
 800ba74:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800ba78:	2400      	movs	r4, #0
 800ba7a:	e094      	b.n	800bba6 <_strtod_l+0x2d6>
 800ba7c:	2300      	movs	r3, #0
 800ba7e:	e7c7      	b.n	800ba10 <_strtod_l+0x140>
 800ba80:	2d08      	cmp	r5, #8
 800ba82:	f100 0001 	add.w	r0, r0, #1
 800ba86:	bfd4      	ite	le
 800ba88:	fb02 3909 	mlale	r9, r2, r9, r3
 800ba8c:	fb02 3606 	mlagt	r6, r2, r6, r3
 800ba90:	3501      	adds	r5, #1
 800ba92:	9011      	str	r0, [sp, #68]	@ 0x44
 800ba94:	e7c3      	b.n	800ba1e <_strtod_l+0x14e>
 800ba96:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ba98:	1c5a      	adds	r2, r3, #1
 800ba9a:	9211      	str	r2, [sp, #68]	@ 0x44
 800ba9c:	785a      	ldrb	r2, [r3, #1]
 800ba9e:	b375      	cbz	r5, 800bafe <_strtod_l+0x22e>
 800baa0:	4607      	mov	r7, r0
 800baa2:	462b      	mov	r3, r5
 800baa4:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800baa8:	2909      	cmp	r1, #9
 800baaa:	d913      	bls.n	800bad4 <_strtod_l+0x204>
 800baac:	2101      	movs	r1, #1
 800baae:	9106      	str	r1, [sp, #24]
 800bab0:	e7c6      	b.n	800ba40 <_strtod_l+0x170>
 800bab2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800bab4:	1c5a      	adds	r2, r3, #1
 800bab6:	9211      	str	r2, [sp, #68]	@ 0x44
 800bab8:	785a      	ldrb	r2, [r3, #1]
 800baba:	3001      	adds	r0, #1
 800babc:	2a30      	cmp	r2, #48	@ 0x30
 800babe:	d0f8      	beq.n	800bab2 <_strtod_l+0x1e2>
 800bac0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800bac4:	2b08      	cmp	r3, #8
 800bac6:	f200 8476 	bhi.w	800c3b6 <_strtod_l+0xae6>
 800baca:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800bacc:	930a      	str	r3, [sp, #40]	@ 0x28
 800bace:	4607      	mov	r7, r0
 800bad0:	2000      	movs	r0, #0
 800bad2:	4603      	mov	r3, r0
 800bad4:	3a30      	subs	r2, #48	@ 0x30
 800bad6:	f100 0101 	add.w	r1, r0, #1
 800bada:	d023      	beq.n	800bb24 <_strtod_l+0x254>
 800badc:	440f      	add	r7, r1
 800bade:	eb00 0c03 	add.w	ip, r0, r3
 800bae2:	4619      	mov	r1, r3
 800bae4:	240a      	movs	r4, #10
 800bae6:	4561      	cmp	r1, ip
 800bae8:	d10b      	bne.n	800bb02 <_strtod_l+0x232>
 800baea:	1c5c      	adds	r4, r3, #1
 800baec:	4403      	add	r3, r0
 800baee:	2b08      	cmp	r3, #8
 800baf0:	4404      	add	r4, r0
 800baf2:	dc11      	bgt.n	800bb18 <_strtod_l+0x248>
 800baf4:	230a      	movs	r3, #10
 800baf6:	fb03 2909 	mla	r9, r3, r9, r2
 800bafa:	2100      	movs	r1, #0
 800bafc:	e013      	b.n	800bb26 <_strtod_l+0x256>
 800bafe:	4628      	mov	r0, r5
 800bb00:	e7dc      	b.n	800babc <_strtod_l+0x1ec>
 800bb02:	2908      	cmp	r1, #8
 800bb04:	f101 0101 	add.w	r1, r1, #1
 800bb08:	dc02      	bgt.n	800bb10 <_strtod_l+0x240>
 800bb0a:	fb04 f909 	mul.w	r9, r4, r9
 800bb0e:	e7ea      	b.n	800bae6 <_strtod_l+0x216>
 800bb10:	2910      	cmp	r1, #16
 800bb12:	bfd8      	it	le
 800bb14:	4366      	mulle	r6, r4
 800bb16:	e7e6      	b.n	800bae6 <_strtod_l+0x216>
 800bb18:	2b0f      	cmp	r3, #15
 800bb1a:	dcee      	bgt.n	800bafa <_strtod_l+0x22a>
 800bb1c:	230a      	movs	r3, #10
 800bb1e:	fb03 2606 	mla	r6, r3, r6, r2
 800bb22:	e7ea      	b.n	800bafa <_strtod_l+0x22a>
 800bb24:	461c      	mov	r4, r3
 800bb26:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800bb28:	1c5a      	adds	r2, r3, #1
 800bb2a:	9211      	str	r2, [sp, #68]	@ 0x44
 800bb2c:	785a      	ldrb	r2, [r3, #1]
 800bb2e:	4608      	mov	r0, r1
 800bb30:	4623      	mov	r3, r4
 800bb32:	e7b7      	b.n	800baa4 <_strtod_l+0x1d4>
 800bb34:	2301      	movs	r3, #1
 800bb36:	2700      	movs	r7, #0
 800bb38:	9306      	str	r3, [sp, #24]
 800bb3a:	e786      	b.n	800ba4a <_strtod_l+0x17a>
 800bb3c:	f04f 0e00 	mov.w	lr, #0
 800bb40:	f108 0202 	add.w	r2, r8, #2
 800bb44:	9211      	str	r2, [sp, #68]	@ 0x44
 800bb46:	f898 2002 	ldrb.w	r2, [r8, #2]
 800bb4a:	e78f      	b.n	800ba6c <_strtod_l+0x19c>
 800bb4c:	f04f 0e01 	mov.w	lr, #1
 800bb50:	e7f6      	b.n	800bb40 <_strtod_l+0x270>
 800bb52:	bf00      	nop
 800bb54:	0800d868 	.word	0x0800d868
 800bb58:	0800d850 	.word	0x0800d850
 800bb5c:	7ff00000 	.word	0x7ff00000
 800bb60:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800bb62:	1c54      	adds	r4, r2, #1
 800bb64:	9411      	str	r4, [sp, #68]	@ 0x44
 800bb66:	7852      	ldrb	r2, [r2, #1]
 800bb68:	2a30      	cmp	r2, #48	@ 0x30
 800bb6a:	d0f9      	beq.n	800bb60 <_strtod_l+0x290>
 800bb6c:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 800bb70:	2c08      	cmp	r4, #8
 800bb72:	d881      	bhi.n	800ba78 <_strtod_l+0x1a8>
 800bb74:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 800bb78:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800bb7a:	9209      	str	r2, [sp, #36]	@ 0x24
 800bb7c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800bb7e:	1c51      	adds	r1, r2, #1
 800bb80:	9111      	str	r1, [sp, #68]	@ 0x44
 800bb82:	7852      	ldrb	r2, [r2, #1]
 800bb84:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 800bb88:	2c09      	cmp	r4, #9
 800bb8a:	d938      	bls.n	800bbfe <_strtod_l+0x32e>
 800bb8c:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 800bb8e:	1b0c      	subs	r4, r1, r4
 800bb90:	2c08      	cmp	r4, #8
 800bb92:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 800bb96:	dc02      	bgt.n	800bb9e <_strtod_l+0x2ce>
 800bb98:	4564      	cmp	r4, ip
 800bb9a:	bfa8      	it	ge
 800bb9c:	4664      	movge	r4, ip
 800bb9e:	f1be 0f00 	cmp.w	lr, #0
 800bba2:	d000      	beq.n	800bba6 <_strtod_l+0x2d6>
 800bba4:	4264      	negs	r4, r4
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d14e      	bne.n	800bc48 <_strtod_l+0x378>
 800bbaa:	9b07      	ldr	r3, [sp, #28]
 800bbac:	4318      	orrs	r0, r3
 800bbae:	f47f aeca 	bne.w	800b946 <_strtod_l+0x76>
 800bbb2:	9b06      	ldr	r3, [sp, #24]
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	f47f aee2 	bne.w	800b97e <_strtod_l+0xae>
 800bbba:	2a69      	cmp	r2, #105	@ 0x69
 800bbbc:	d027      	beq.n	800bc0e <_strtod_l+0x33e>
 800bbbe:	dc24      	bgt.n	800bc0a <_strtod_l+0x33a>
 800bbc0:	2a49      	cmp	r2, #73	@ 0x49
 800bbc2:	d024      	beq.n	800bc0e <_strtod_l+0x33e>
 800bbc4:	2a4e      	cmp	r2, #78	@ 0x4e
 800bbc6:	f47f aeda 	bne.w	800b97e <_strtod_l+0xae>
 800bbca:	4997      	ldr	r1, [pc, #604]	@ (800be28 <_strtod_l+0x558>)
 800bbcc:	a811      	add	r0, sp, #68	@ 0x44
 800bbce:	f001 fb63 	bl	800d298 <__match>
 800bbd2:	2800      	cmp	r0, #0
 800bbd4:	f43f aed3 	beq.w	800b97e <_strtod_l+0xae>
 800bbd8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800bbda:	781b      	ldrb	r3, [r3, #0]
 800bbdc:	2b28      	cmp	r3, #40	@ 0x28
 800bbde:	d12d      	bne.n	800bc3c <_strtod_l+0x36c>
 800bbe0:	4992      	ldr	r1, [pc, #584]	@ (800be2c <_strtod_l+0x55c>)
 800bbe2:	aa14      	add	r2, sp, #80	@ 0x50
 800bbe4:	a811      	add	r0, sp, #68	@ 0x44
 800bbe6:	f001 fb6b 	bl	800d2c0 <__hexnan>
 800bbea:	2805      	cmp	r0, #5
 800bbec:	d126      	bne.n	800bc3c <_strtod_l+0x36c>
 800bbee:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800bbf0:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 800bbf4:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800bbf8:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800bbfc:	e6a3      	b.n	800b946 <_strtod_l+0x76>
 800bbfe:	240a      	movs	r4, #10
 800bc00:	fb04 2c0c 	mla	ip, r4, ip, r2
 800bc04:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 800bc08:	e7b8      	b.n	800bb7c <_strtod_l+0x2ac>
 800bc0a:	2a6e      	cmp	r2, #110	@ 0x6e
 800bc0c:	e7db      	b.n	800bbc6 <_strtod_l+0x2f6>
 800bc0e:	4988      	ldr	r1, [pc, #544]	@ (800be30 <_strtod_l+0x560>)
 800bc10:	a811      	add	r0, sp, #68	@ 0x44
 800bc12:	f001 fb41 	bl	800d298 <__match>
 800bc16:	2800      	cmp	r0, #0
 800bc18:	f43f aeb1 	beq.w	800b97e <_strtod_l+0xae>
 800bc1c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800bc1e:	4985      	ldr	r1, [pc, #532]	@ (800be34 <_strtod_l+0x564>)
 800bc20:	3b01      	subs	r3, #1
 800bc22:	a811      	add	r0, sp, #68	@ 0x44
 800bc24:	9311      	str	r3, [sp, #68]	@ 0x44
 800bc26:	f001 fb37 	bl	800d298 <__match>
 800bc2a:	b910      	cbnz	r0, 800bc32 <_strtod_l+0x362>
 800bc2c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800bc2e:	3301      	adds	r3, #1
 800bc30:	9311      	str	r3, [sp, #68]	@ 0x44
 800bc32:	f8df b214 	ldr.w	fp, [pc, #532]	@ 800be48 <_strtod_l+0x578>
 800bc36:	f04f 0a00 	mov.w	sl, #0
 800bc3a:	e684      	b.n	800b946 <_strtod_l+0x76>
 800bc3c:	487e      	ldr	r0, [pc, #504]	@ (800be38 <_strtod_l+0x568>)
 800bc3e:	f001 f867 	bl	800cd10 <nan>
 800bc42:	ec5b ab10 	vmov	sl, fp, d0
 800bc46:	e67e      	b.n	800b946 <_strtod_l+0x76>
 800bc48:	ee07 9a90 	vmov	s15, r9
 800bc4c:	1be2      	subs	r2, r4, r7
 800bc4e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800bc52:	2d00      	cmp	r5, #0
 800bc54:	bf08      	it	eq
 800bc56:	461d      	moveq	r5, r3
 800bc58:	2b10      	cmp	r3, #16
 800bc5a:	9209      	str	r2, [sp, #36]	@ 0x24
 800bc5c:	461a      	mov	r2, r3
 800bc5e:	bfa8      	it	ge
 800bc60:	2210      	movge	r2, #16
 800bc62:	2b09      	cmp	r3, #9
 800bc64:	ec5b ab17 	vmov	sl, fp, d7
 800bc68:	dc15      	bgt.n	800bc96 <_strtod_l+0x3c6>
 800bc6a:	1be1      	subs	r1, r4, r7
 800bc6c:	2900      	cmp	r1, #0
 800bc6e:	f43f ae6a 	beq.w	800b946 <_strtod_l+0x76>
 800bc72:	eba4 0107 	sub.w	r1, r4, r7
 800bc76:	dd72      	ble.n	800bd5e <_strtod_l+0x48e>
 800bc78:	2916      	cmp	r1, #22
 800bc7a:	dc59      	bgt.n	800bd30 <_strtod_l+0x460>
 800bc7c:	4b6f      	ldr	r3, [pc, #444]	@ (800be3c <_strtod_l+0x56c>)
 800bc7e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bc80:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bc84:	ed93 7b00 	vldr	d7, [r3]
 800bc88:	ec4b ab16 	vmov	d6, sl, fp
 800bc8c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800bc90:	ec5b ab17 	vmov	sl, fp, d7
 800bc94:	e657      	b.n	800b946 <_strtod_l+0x76>
 800bc96:	4969      	ldr	r1, [pc, #420]	@ (800be3c <_strtod_l+0x56c>)
 800bc98:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800bc9c:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 800bca0:	ee06 6a90 	vmov	s13, r6
 800bca4:	2b0f      	cmp	r3, #15
 800bca6:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 800bcaa:	eea7 6b05 	vfma.f64	d6, d7, d5
 800bcae:	ec5b ab16 	vmov	sl, fp, d6
 800bcb2:	ddda      	ble.n	800bc6a <_strtod_l+0x39a>
 800bcb4:	1a9a      	subs	r2, r3, r2
 800bcb6:	1be1      	subs	r1, r4, r7
 800bcb8:	440a      	add	r2, r1
 800bcba:	2a00      	cmp	r2, #0
 800bcbc:	f340 8094 	ble.w	800bde8 <_strtod_l+0x518>
 800bcc0:	f012 000f 	ands.w	r0, r2, #15
 800bcc4:	d00a      	beq.n	800bcdc <_strtod_l+0x40c>
 800bcc6:	495d      	ldr	r1, [pc, #372]	@ (800be3c <_strtod_l+0x56c>)
 800bcc8:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800bccc:	ed91 7b00 	vldr	d7, [r1]
 800bcd0:	ec4b ab16 	vmov	d6, sl, fp
 800bcd4:	ee27 7b06 	vmul.f64	d7, d7, d6
 800bcd8:	ec5b ab17 	vmov	sl, fp, d7
 800bcdc:	f032 020f 	bics.w	r2, r2, #15
 800bce0:	d073      	beq.n	800bdca <_strtod_l+0x4fa>
 800bce2:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 800bce6:	dd47      	ble.n	800bd78 <_strtod_l+0x4a8>
 800bce8:	2400      	movs	r4, #0
 800bcea:	4625      	mov	r5, r4
 800bcec:	9407      	str	r4, [sp, #28]
 800bcee:	4626      	mov	r6, r4
 800bcf0:	9a05      	ldr	r2, [sp, #20]
 800bcf2:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800be48 <_strtod_l+0x578>
 800bcf6:	2322      	movs	r3, #34	@ 0x22
 800bcf8:	6013      	str	r3, [r2, #0]
 800bcfa:	f04f 0a00 	mov.w	sl, #0
 800bcfe:	9b07      	ldr	r3, [sp, #28]
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	f43f ae20 	beq.w	800b946 <_strtod_l+0x76>
 800bd06:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800bd08:	9805      	ldr	r0, [sp, #20]
 800bd0a:	f7ff f957 	bl	800afbc <_Bfree>
 800bd0e:	9805      	ldr	r0, [sp, #20]
 800bd10:	4631      	mov	r1, r6
 800bd12:	f7ff f953 	bl	800afbc <_Bfree>
 800bd16:	9805      	ldr	r0, [sp, #20]
 800bd18:	4629      	mov	r1, r5
 800bd1a:	f7ff f94f 	bl	800afbc <_Bfree>
 800bd1e:	9907      	ldr	r1, [sp, #28]
 800bd20:	9805      	ldr	r0, [sp, #20]
 800bd22:	f7ff f94b 	bl	800afbc <_Bfree>
 800bd26:	9805      	ldr	r0, [sp, #20]
 800bd28:	4621      	mov	r1, r4
 800bd2a:	f7ff f947 	bl	800afbc <_Bfree>
 800bd2e:	e60a      	b.n	800b946 <_strtod_l+0x76>
 800bd30:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 800bd34:	1be0      	subs	r0, r4, r7
 800bd36:	4281      	cmp	r1, r0
 800bd38:	dbbc      	blt.n	800bcb4 <_strtod_l+0x3e4>
 800bd3a:	4a40      	ldr	r2, [pc, #256]	@ (800be3c <_strtod_l+0x56c>)
 800bd3c:	f1c3 030f 	rsb	r3, r3, #15
 800bd40:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800bd44:	ed91 7b00 	vldr	d7, [r1]
 800bd48:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800bd4a:	ec4b ab16 	vmov	d6, sl, fp
 800bd4e:	1acb      	subs	r3, r1, r3
 800bd50:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800bd54:	ee27 7b06 	vmul.f64	d7, d7, d6
 800bd58:	ed92 6b00 	vldr	d6, [r2]
 800bd5c:	e796      	b.n	800bc8c <_strtod_l+0x3bc>
 800bd5e:	3116      	adds	r1, #22
 800bd60:	dba8      	blt.n	800bcb4 <_strtod_l+0x3e4>
 800bd62:	4b36      	ldr	r3, [pc, #216]	@ (800be3c <_strtod_l+0x56c>)
 800bd64:	1b3c      	subs	r4, r7, r4
 800bd66:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800bd6a:	ed94 7b00 	vldr	d7, [r4]
 800bd6e:	ec4b ab16 	vmov	d6, sl, fp
 800bd72:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800bd76:	e78b      	b.n	800bc90 <_strtod_l+0x3c0>
 800bd78:	2000      	movs	r0, #0
 800bd7a:	ec4b ab17 	vmov	d7, sl, fp
 800bd7e:	4e30      	ldr	r6, [pc, #192]	@ (800be40 <_strtod_l+0x570>)
 800bd80:	1112      	asrs	r2, r2, #4
 800bd82:	4601      	mov	r1, r0
 800bd84:	2a01      	cmp	r2, #1
 800bd86:	dc23      	bgt.n	800bdd0 <_strtod_l+0x500>
 800bd88:	b108      	cbz	r0, 800bd8e <_strtod_l+0x4be>
 800bd8a:	ec5b ab17 	vmov	sl, fp, d7
 800bd8e:	4a2c      	ldr	r2, [pc, #176]	@ (800be40 <_strtod_l+0x570>)
 800bd90:	482c      	ldr	r0, [pc, #176]	@ (800be44 <_strtod_l+0x574>)
 800bd92:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800bd96:	ed92 7b00 	vldr	d7, [r2]
 800bd9a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800bd9e:	ec4b ab16 	vmov	d6, sl, fp
 800bda2:	4a29      	ldr	r2, [pc, #164]	@ (800be48 <_strtod_l+0x578>)
 800bda4:	ee27 7b06 	vmul.f64	d7, d7, d6
 800bda8:	ee17 1a90 	vmov	r1, s15
 800bdac:	400a      	ands	r2, r1
 800bdae:	4282      	cmp	r2, r0
 800bdb0:	ec5b ab17 	vmov	sl, fp, d7
 800bdb4:	d898      	bhi.n	800bce8 <_strtod_l+0x418>
 800bdb6:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 800bdba:	4282      	cmp	r2, r0
 800bdbc:	bf86      	itte	hi
 800bdbe:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 800be4c <_strtod_l+0x57c>
 800bdc2:	f04f 3aff 	movhi.w	sl, #4294967295
 800bdc6:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 800bdca:	2200      	movs	r2, #0
 800bdcc:	9206      	str	r2, [sp, #24]
 800bdce:	e076      	b.n	800bebe <_strtod_l+0x5ee>
 800bdd0:	f012 0f01 	tst.w	r2, #1
 800bdd4:	d004      	beq.n	800bde0 <_strtod_l+0x510>
 800bdd6:	ed96 6b00 	vldr	d6, [r6]
 800bdda:	2001      	movs	r0, #1
 800bddc:	ee27 7b06 	vmul.f64	d7, d7, d6
 800bde0:	3101      	adds	r1, #1
 800bde2:	1052      	asrs	r2, r2, #1
 800bde4:	3608      	adds	r6, #8
 800bde6:	e7cd      	b.n	800bd84 <_strtod_l+0x4b4>
 800bde8:	d0ef      	beq.n	800bdca <_strtod_l+0x4fa>
 800bdea:	4252      	negs	r2, r2
 800bdec:	f012 000f 	ands.w	r0, r2, #15
 800bdf0:	d00a      	beq.n	800be08 <_strtod_l+0x538>
 800bdf2:	4912      	ldr	r1, [pc, #72]	@ (800be3c <_strtod_l+0x56c>)
 800bdf4:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800bdf8:	ed91 7b00 	vldr	d7, [r1]
 800bdfc:	ec4b ab16 	vmov	d6, sl, fp
 800be00:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800be04:	ec5b ab17 	vmov	sl, fp, d7
 800be08:	1112      	asrs	r2, r2, #4
 800be0a:	d0de      	beq.n	800bdca <_strtod_l+0x4fa>
 800be0c:	2a1f      	cmp	r2, #31
 800be0e:	dd1f      	ble.n	800be50 <_strtod_l+0x580>
 800be10:	2400      	movs	r4, #0
 800be12:	4625      	mov	r5, r4
 800be14:	9407      	str	r4, [sp, #28]
 800be16:	4626      	mov	r6, r4
 800be18:	9a05      	ldr	r2, [sp, #20]
 800be1a:	2322      	movs	r3, #34	@ 0x22
 800be1c:	f04f 0a00 	mov.w	sl, #0
 800be20:	f04f 0b00 	mov.w	fp, #0
 800be24:	6013      	str	r3, [r2, #0]
 800be26:	e76a      	b.n	800bcfe <_strtod_l+0x42e>
 800be28:	0800d63d 	.word	0x0800d63d
 800be2c:	0800d854 	.word	0x0800d854
 800be30:	0800d635 	.word	0x0800d635
 800be34:	0800d66c 	.word	0x0800d66c
 800be38:	0800d9fd 	.word	0x0800d9fd
 800be3c:	0800d788 	.word	0x0800d788
 800be40:	0800d760 	.word	0x0800d760
 800be44:	7ca00000 	.word	0x7ca00000
 800be48:	7ff00000 	.word	0x7ff00000
 800be4c:	7fefffff 	.word	0x7fefffff
 800be50:	f012 0110 	ands.w	r1, r2, #16
 800be54:	bf18      	it	ne
 800be56:	216a      	movne	r1, #106	@ 0x6a
 800be58:	9106      	str	r1, [sp, #24]
 800be5a:	ec4b ab17 	vmov	d7, sl, fp
 800be5e:	49b0      	ldr	r1, [pc, #704]	@ (800c120 <_strtod_l+0x850>)
 800be60:	2000      	movs	r0, #0
 800be62:	07d6      	lsls	r6, r2, #31
 800be64:	d504      	bpl.n	800be70 <_strtod_l+0x5a0>
 800be66:	ed91 6b00 	vldr	d6, [r1]
 800be6a:	2001      	movs	r0, #1
 800be6c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800be70:	1052      	asrs	r2, r2, #1
 800be72:	f101 0108 	add.w	r1, r1, #8
 800be76:	d1f4      	bne.n	800be62 <_strtod_l+0x592>
 800be78:	b108      	cbz	r0, 800be7e <_strtod_l+0x5ae>
 800be7a:	ec5b ab17 	vmov	sl, fp, d7
 800be7e:	9a06      	ldr	r2, [sp, #24]
 800be80:	b1b2      	cbz	r2, 800beb0 <_strtod_l+0x5e0>
 800be82:	f3cb 510a 	ubfx	r1, fp, #20, #11
 800be86:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 800be8a:	2a00      	cmp	r2, #0
 800be8c:	4658      	mov	r0, fp
 800be8e:	dd0f      	ble.n	800beb0 <_strtod_l+0x5e0>
 800be90:	2a1f      	cmp	r2, #31
 800be92:	dd55      	ble.n	800bf40 <_strtod_l+0x670>
 800be94:	2a34      	cmp	r2, #52	@ 0x34
 800be96:	bfde      	ittt	le
 800be98:	f04f 32ff 	movle.w	r2, #4294967295
 800be9c:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 800bea0:	408a      	lslle	r2, r1
 800bea2:	f04f 0a00 	mov.w	sl, #0
 800bea6:	bfcc      	ite	gt
 800bea8:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800beac:	ea02 0b00 	andle.w	fp, r2, r0
 800beb0:	ec4b ab17 	vmov	d7, sl, fp
 800beb4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800beb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bebc:	d0a8      	beq.n	800be10 <_strtod_l+0x540>
 800bebe:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800bec0:	9805      	ldr	r0, [sp, #20]
 800bec2:	f8cd 9000 	str.w	r9, [sp]
 800bec6:	462a      	mov	r2, r5
 800bec8:	f7ff f8e0 	bl	800b08c <__s2b>
 800becc:	9007      	str	r0, [sp, #28]
 800bece:	2800      	cmp	r0, #0
 800bed0:	f43f af0a 	beq.w	800bce8 <_strtod_l+0x418>
 800bed4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bed6:	1b3f      	subs	r7, r7, r4
 800bed8:	2b00      	cmp	r3, #0
 800beda:	bfb4      	ite	lt
 800bedc:	463b      	movlt	r3, r7
 800bede:	2300      	movge	r3, #0
 800bee0:	930a      	str	r3, [sp, #40]	@ 0x28
 800bee2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bee4:	ed9f bb8a 	vldr	d11, [pc, #552]	@ 800c110 <_strtod_l+0x840>
 800bee8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800beec:	2400      	movs	r4, #0
 800beee:	930d      	str	r3, [sp, #52]	@ 0x34
 800bef0:	4625      	mov	r5, r4
 800bef2:	9b07      	ldr	r3, [sp, #28]
 800bef4:	9805      	ldr	r0, [sp, #20]
 800bef6:	6859      	ldr	r1, [r3, #4]
 800bef8:	f7ff f820 	bl	800af3c <_Balloc>
 800befc:	4606      	mov	r6, r0
 800befe:	2800      	cmp	r0, #0
 800bf00:	f43f aef6 	beq.w	800bcf0 <_strtod_l+0x420>
 800bf04:	9b07      	ldr	r3, [sp, #28]
 800bf06:	691a      	ldr	r2, [r3, #16]
 800bf08:	ec4b ab19 	vmov	d9, sl, fp
 800bf0c:	3202      	adds	r2, #2
 800bf0e:	f103 010c 	add.w	r1, r3, #12
 800bf12:	0092      	lsls	r2, r2, #2
 800bf14:	300c      	adds	r0, #12
 800bf16:	f7fe f91e 	bl	800a156 <memcpy>
 800bf1a:	eeb0 0b49 	vmov.f64	d0, d9
 800bf1e:	9805      	ldr	r0, [sp, #20]
 800bf20:	aa14      	add	r2, sp, #80	@ 0x50
 800bf22:	a913      	add	r1, sp, #76	@ 0x4c
 800bf24:	f7ff fbee 	bl	800b704 <__d2b>
 800bf28:	9012      	str	r0, [sp, #72]	@ 0x48
 800bf2a:	2800      	cmp	r0, #0
 800bf2c:	f43f aee0 	beq.w	800bcf0 <_strtod_l+0x420>
 800bf30:	9805      	ldr	r0, [sp, #20]
 800bf32:	2101      	movs	r1, #1
 800bf34:	f7ff f940 	bl	800b1b8 <__i2b>
 800bf38:	4605      	mov	r5, r0
 800bf3a:	b940      	cbnz	r0, 800bf4e <_strtod_l+0x67e>
 800bf3c:	2500      	movs	r5, #0
 800bf3e:	e6d7      	b.n	800bcf0 <_strtod_l+0x420>
 800bf40:	f04f 31ff 	mov.w	r1, #4294967295
 800bf44:	fa01 f202 	lsl.w	r2, r1, r2
 800bf48:	ea02 0a0a 	and.w	sl, r2, sl
 800bf4c:	e7b0      	b.n	800beb0 <_strtod_l+0x5e0>
 800bf4e:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 800bf50:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800bf52:	2f00      	cmp	r7, #0
 800bf54:	bfab      	itete	ge
 800bf56:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 800bf58:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 800bf5a:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 800bf5e:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 800bf62:	bfac      	ite	ge
 800bf64:	eb07 0903 	addge.w	r9, r7, r3
 800bf68:	eba3 0807 	sublt.w	r8, r3, r7
 800bf6c:	9b06      	ldr	r3, [sp, #24]
 800bf6e:	1aff      	subs	r7, r7, r3
 800bf70:	4417      	add	r7, r2
 800bf72:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 800bf76:	4a6b      	ldr	r2, [pc, #428]	@ (800c124 <_strtod_l+0x854>)
 800bf78:	3f01      	subs	r7, #1
 800bf7a:	4297      	cmp	r7, r2
 800bf7c:	da51      	bge.n	800c022 <_strtod_l+0x752>
 800bf7e:	1bd1      	subs	r1, r2, r7
 800bf80:	291f      	cmp	r1, #31
 800bf82:	eba3 0301 	sub.w	r3, r3, r1
 800bf86:	f04f 0201 	mov.w	r2, #1
 800bf8a:	dc3e      	bgt.n	800c00a <_strtod_l+0x73a>
 800bf8c:	408a      	lsls	r2, r1
 800bf8e:	920c      	str	r2, [sp, #48]	@ 0x30
 800bf90:	2200      	movs	r2, #0
 800bf92:	920b      	str	r2, [sp, #44]	@ 0x2c
 800bf94:	eb09 0703 	add.w	r7, r9, r3
 800bf98:	4498      	add	r8, r3
 800bf9a:	9b06      	ldr	r3, [sp, #24]
 800bf9c:	45b9      	cmp	r9, r7
 800bf9e:	4498      	add	r8, r3
 800bfa0:	464b      	mov	r3, r9
 800bfa2:	bfa8      	it	ge
 800bfa4:	463b      	movge	r3, r7
 800bfa6:	4543      	cmp	r3, r8
 800bfa8:	bfa8      	it	ge
 800bfaa:	4643      	movge	r3, r8
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	bfc2      	ittt	gt
 800bfb0:	1aff      	subgt	r7, r7, r3
 800bfb2:	eba8 0803 	subgt.w	r8, r8, r3
 800bfb6:	eba9 0903 	subgt.w	r9, r9, r3
 800bfba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	dd16      	ble.n	800bfee <_strtod_l+0x71e>
 800bfc0:	4629      	mov	r1, r5
 800bfc2:	9805      	ldr	r0, [sp, #20]
 800bfc4:	461a      	mov	r2, r3
 800bfc6:	f7ff f9b7 	bl	800b338 <__pow5mult>
 800bfca:	4605      	mov	r5, r0
 800bfcc:	2800      	cmp	r0, #0
 800bfce:	d0b5      	beq.n	800bf3c <_strtod_l+0x66c>
 800bfd0:	4601      	mov	r1, r0
 800bfd2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800bfd4:	9805      	ldr	r0, [sp, #20]
 800bfd6:	f7ff f905 	bl	800b1e4 <__multiply>
 800bfda:	900f      	str	r0, [sp, #60]	@ 0x3c
 800bfdc:	2800      	cmp	r0, #0
 800bfde:	f43f ae87 	beq.w	800bcf0 <_strtod_l+0x420>
 800bfe2:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800bfe4:	9805      	ldr	r0, [sp, #20]
 800bfe6:	f7fe ffe9 	bl	800afbc <_Bfree>
 800bfea:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bfec:	9312      	str	r3, [sp, #72]	@ 0x48
 800bfee:	2f00      	cmp	r7, #0
 800bff0:	dc1b      	bgt.n	800c02a <_strtod_l+0x75a>
 800bff2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	dd21      	ble.n	800c03c <_strtod_l+0x76c>
 800bff8:	4631      	mov	r1, r6
 800bffa:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800bffc:	9805      	ldr	r0, [sp, #20]
 800bffe:	f7ff f99b 	bl	800b338 <__pow5mult>
 800c002:	4606      	mov	r6, r0
 800c004:	b9d0      	cbnz	r0, 800c03c <_strtod_l+0x76c>
 800c006:	2600      	movs	r6, #0
 800c008:	e672      	b.n	800bcf0 <_strtod_l+0x420>
 800c00a:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 800c00e:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 800c012:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 800c016:	37e2      	adds	r7, #226	@ 0xe2
 800c018:	fa02 f107 	lsl.w	r1, r2, r7
 800c01c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800c01e:	920c      	str	r2, [sp, #48]	@ 0x30
 800c020:	e7b8      	b.n	800bf94 <_strtod_l+0x6c4>
 800c022:	2200      	movs	r2, #0
 800c024:	920b      	str	r2, [sp, #44]	@ 0x2c
 800c026:	2201      	movs	r2, #1
 800c028:	e7f9      	b.n	800c01e <_strtod_l+0x74e>
 800c02a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800c02c:	9805      	ldr	r0, [sp, #20]
 800c02e:	463a      	mov	r2, r7
 800c030:	f7ff f9dc 	bl	800b3ec <__lshift>
 800c034:	9012      	str	r0, [sp, #72]	@ 0x48
 800c036:	2800      	cmp	r0, #0
 800c038:	d1db      	bne.n	800bff2 <_strtod_l+0x722>
 800c03a:	e659      	b.n	800bcf0 <_strtod_l+0x420>
 800c03c:	f1b8 0f00 	cmp.w	r8, #0
 800c040:	dd07      	ble.n	800c052 <_strtod_l+0x782>
 800c042:	4631      	mov	r1, r6
 800c044:	9805      	ldr	r0, [sp, #20]
 800c046:	4642      	mov	r2, r8
 800c048:	f7ff f9d0 	bl	800b3ec <__lshift>
 800c04c:	4606      	mov	r6, r0
 800c04e:	2800      	cmp	r0, #0
 800c050:	d0d9      	beq.n	800c006 <_strtod_l+0x736>
 800c052:	f1b9 0f00 	cmp.w	r9, #0
 800c056:	dd08      	ble.n	800c06a <_strtod_l+0x79a>
 800c058:	4629      	mov	r1, r5
 800c05a:	9805      	ldr	r0, [sp, #20]
 800c05c:	464a      	mov	r2, r9
 800c05e:	f7ff f9c5 	bl	800b3ec <__lshift>
 800c062:	4605      	mov	r5, r0
 800c064:	2800      	cmp	r0, #0
 800c066:	f43f ae43 	beq.w	800bcf0 <_strtod_l+0x420>
 800c06a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800c06c:	9805      	ldr	r0, [sp, #20]
 800c06e:	4632      	mov	r2, r6
 800c070:	f7ff fa44 	bl	800b4fc <__mdiff>
 800c074:	4604      	mov	r4, r0
 800c076:	2800      	cmp	r0, #0
 800c078:	f43f ae3a 	beq.w	800bcf0 <_strtod_l+0x420>
 800c07c:	2300      	movs	r3, #0
 800c07e:	f8d0 800c 	ldr.w	r8, [r0, #12]
 800c082:	60c3      	str	r3, [r0, #12]
 800c084:	4629      	mov	r1, r5
 800c086:	f7ff fa1d 	bl	800b4c4 <__mcmp>
 800c08a:	2800      	cmp	r0, #0
 800c08c:	da4e      	bge.n	800c12c <_strtod_l+0x85c>
 800c08e:	ea58 080a 	orrs.w	r8, r8, sl
 800c092:	d174      	bne.n	800c17e <_strtod_l+0x8ae>
 800c094:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d170      	bne.n	800c17e <_strtod_l+0x8ae>
 800c09c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c0a0:	0d1b      	lsrs	r3, r3, #20
 800c0a2:	051b      	lsls	r3, r3, #20
 800c0a4:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800c0a8:	d969      	bls.n	800c17e <_strtod_l+0x8ae>
 800c0aa:	6963      	ldr	r3, [r4, #20]
 800c0ac:	b913      	cbnz	r3, 800c0b4 <_strtod_l+0x7e4>
 800c0ae:	6923      	ldr	r3, [r4, #16]
 800c0b0:	2b01      	cmp	r3, #1
 800c0b2:	dd64      	ble.n	800c17e <_strtod_l+0x8ae>
 800c0b4:	4621      	mov	r1, r4
 800c0b6:	2201      	movs	r2, #1
 800c0b8:	9805      	ldr	r0, [sp, #20]
 800c0ba:	f7ff f997 	bl	800b3ec <__lshift>
 800c0be:	4629      	mov	r1, r5
 800c0c0:	4604      	mov	r4, r0
 800c0c2:	f7ff f9ff 	bl	800b4c4 <__mcmp>
 800c0c6:	2800      	cmp	r0, #0
 800c0c8:	dd59      	ble.n	800c17e <_strtod_l+0x8ae>
 800c0ca:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c0ce:	9a06      	ldr	r2, [sp, #24]
 800c0d0:	0d1b      	lsrs	r3, r3, #20
 800c0d2:	051b      	lsls	r3, r3, #20
 800c0d4:	2a00      	cmp	r2, #0
 800c0d6:	d070      	beq.n	800c1ba <_strtod_l+0x8ea>
 800c0d8:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800c0dc:	d86d      	bhi.n	800c1ba <_strtod_l+0x8ea>
 800c0de:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800c0e2:	f67f ae99 	bls.w	800be18 <_strtod_l+0x548>
 800c0e6:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 800c118 <_strtod_l+0x848>
 800c0ea:	ec4b ab16 	vmov	d6, sl, fp
 800c0ee:	4b0e      	ldr	r3, [pc, #56]	@ (800c128 <_strtod_l+0x858>)
 800c0f0:	ee26 7b07 	vmul.f64	d7, d6, d7
 800c0f4:	ee17 2a90 	vmov	r2, s15
 800c0f8:	4013      	ands	r3, r2
 800c0fa:	ec5b ab17 	vmov	sl, fp, d7
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	f47f ae01 	bne.w	800bd06 <_strtod_l+0x436>
 800c104:	9a05      	ldr	r2, [sp, #20]
 800c106:	2322      	movs	r3, #34	@ 0x22
 800c108:	6013      	str	r3, [r2, #0]
 800c10a:	e5fc      	b.n	800bd06 <_strtod_l+0x436>
 800c10c:	f3af 8000 	nop.w
 800c110:	ffc00000 	.word	0xffc00000
 800c114:	41dfffff 	.word	0x41dfffff
 800c118:	00000000 	.word	0x00000000
 800c11c:	39500000 	.word	0x39500000
 800c120:	0800d880 	.word	0x0800d880
 800c124:	fffffc02 	.word	0xfffffc02
 800c128:	7ff00000 	.word	0x7ff00000
 800c12c:	46d9      	mov	r9, fp
 800c12e:	d15d      	bne.n	800c1ec <_strtod_l+0x91c>
 800c130:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c134:	f1b8 0f00 	cmp.w	r8, #0
 800c138:	d02a      	beq.n	800c190 <_strtod_l+0x8c0>
 800c13a:	4aab      	ldr	r2, [pc, #684]	@ (800c3e8 <_strtod_l+0xb18>)
 800c13c:	4293      	cmp	r3, r2
 800c13e:	d12a      	bne.n	800c196 <_strtod_l+0x8c6>
 800c140:	9b06      	ldr	r3, [sp, #24]
 800c142:	4652      	mov	r2, sl
 800c144:	b1fb      	cbz	r3, 800c186 <_strtod_l+0x8b6>
 800c146:	4ba9      	ldr	r3, [pc, #676]	@ (800c3ec <_strtod_l+0xb1c>)
 800c148:	ea0b 0303 	and.w	r3, fp, r3
 800c14c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800c150:	f04f 31ff 	mov.w	r1, #4294967295
 800c154:	d81a      	bhi.n	800c18c <_strtod_l+0x8bc>
 800c156:	0d1b      	lsrs	r3, r3, #20
 800c158:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800c15c:	fa01 f303 	lsl.w	r3, r1, r3
 800c160:	429a      	cmp	r2, r3
 800c162:	d118      	bne.n	800c196 <_strtod_l+0x8c6>
 800c164:	4ba2      	ldr	r3, [pc, #648]	@ (800c3f0 <_strtod_l+0xb20>)
 800c166:	4599      	cmp	r9, r3
 800c168:	d102      	bne.n	800c170 <_strtod_l+0x8a0>
 800c16a:	3201      	adds	r2, #1
 800c16c:	f43f adc0 	beq.w	800bcf0 <_strtod_l+0x420>
 800c170:	4b9e      	ldr	r3, [pc, #632]	@ (800c3ec <_strtod_l+0xb1c>)
 800c172:	ea09 0303 	and.w	r3, r9, r3
 800c176:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 800c17a:	f04f 0a00 	mov.w	sl, #0
 800c17e:	9b06      	ldr	r3, [sp, #24]
 800c180:	2b00      	cmp	r3, #0
 800c182:	d1b0      	bne.n	800c0e6 <_strtod_l+0x816>
 800c184:	e5bf      	b.n	800bd06 <_strtod_l+0x436>
 800c186:	f04f 33ff 	mov.w	r3, #4294967295
 800c18a:	e7e9      	b.n	800c160 <_strtod_l+0x890>
 800c18c:	460b      	mov	r3, r1
 800c18e:	e7e7      	b.n	800c160 <_strtod_l+0x890>
 800c190:	ea53 030a 	orrs.w	r3, r3, sl
 800c194:	d099      	beq.n	800c0ca <_strtod_l+0x7fa>
 800c196:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c198:	b1c3      	cbz	r3, 800c1cc <_strtod_l+0x8fc>
 800c19a:	ea13 0f09 	tst.w	r3, r9
 800c19e:	d0ee      	beq.n	800c17e <_strtod_l+0x8ae>
 800c1a0:	9a06      	ldr	r2, [sp, #24]
 800c1a2:	4650      	mov	r0, sl
 800c1a4:	4659      	mov	r1, fp
 800c1a6:	f1b8 0f00 	cmp.w	r8, #0
 800c1aa:	d013      	beq.n	800c1d4 <_strtod_l+0x904>
 800c1ac:	f7ff fb75 	bl	800b89a <sulp>
 800c1b0:	ee39 7b00 	vadd.f64	d7, d9, d0
 800c1b4:	ec5b ab17 	vmov	sl, fp, d7
 800c1b8:	e7e1      	b.n	800c17e <_strtod_l+0x8ae>
 800c1ba:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800c1be:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800c1c2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800c1c6:	f04f 3aff 	mov.w	sl, #4294967295
 800c1ca:	e7d8      	b.n	800c17e <_strtod_l+0x8ae>
 800c1cc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c1ce:	ea13 0f0a 	tst.w	r3, sl
 800c1d2:	e7e4      	b.n	800c19e <_strtod_l+0x8ce>
 800c1d4:	f7ff fb61 	bl	800b89a <sulp>
 800c1d8:	ee39 0b40 	vsub.f64	d0, d9, d0
 800c1dc:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800c1e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1e4:	ec5b ab10 	vmov	sl, fp, d0
 800c1e8:	d1c9      	bne.n	800c17e <_strtod_l+0x8ae>
 800c1ea:	e615      	b.n	800be18 <_strtod_l+0x548>
 800c1ec:	4629      	mov	r1, r5
 800c1ee:	4620      	mov	r0, r4
 800c1f0:	f7ff fae0 	bl	800b7b4 <__ratio>
 800c1f4:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 800c1f8:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800c1fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c200:	d85d      	bhi.n	800c2be <_strtod_l+0x9ee>
 800c202:	f1b8 0f00 	cmp.w	r8, #0
 800c206:	d164      	bne.n	800c2d2 <_strtod_l+0xa02>
 800c208:	f1ba 0f00 	cmp.w	sl, #0
 800c20c:	d14b      	bne.n	800c2a6 <_strtod_l+0x9d6>
 800c20e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c212:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800c216:	2b00      	cmp	r3, #0
 800c218:	d160      	bne.n	800c2dc <_strtod_l+0xa0c>
 800c21a:	eeb4 0bc8 	vcmpe.f64	d0, d8
 800c21e:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800c222:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c226:	d401      	bmi.n	800c22c <_strtod_l+0x95c>
 800c228:	ee20 8b08 	vmul.f64	d8, d0, d8
 800c22c:	eeb1 ab48 	vneg.f64	d10, d8
 800c230:	486e      	ldr	r0, [pc, #440]	@ (800c3ec <_strtod_l+0xb1c>)
 800c232:	4970      	ldr	r1, [pc, #448]	@ (800c3f4 <_strtod_l+0xb24>)
 800c234:	ea09 0700 	and.w	r7, r9, r0
 800c238:	428f      	cmp	r7, r1
 800c23a:	ec53 2b1a 	vmov	r2, r3, d10
 800c23e:	d17d      	bne.n	800c33c <_strtod_l+0xa6c>
 800c240:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 800c244:	ec4b ab1c 	vmov	d12, sl, fp
 800c248:	eeb0 0b4c 	vmov.f64	d0, d12
 800c24c:	f7ff f9ea 	bl	800b624 <__ulp>
 800c250:	4866      	ldr	r0, [pc, #408]	@ (800c3ec <_strtod_l+0xb1c>)
 800c252:	eea0 cb0a 	vfma.f64	d12, d0, d10
 800c256:	ee1c 3a90 	vmov	r3, s25
 800c25a:	4a67      	ldr	r2, [pc, #412]	@ (800c3f8 <_strtod_l+0xb28>)
 800c25c:	ea03 0100 	and.w	r1, r3, r0
 800c260:	4291      	cmp	r1, r2
 800c262:	ec5b ab1c 	vmov	sl, fp, d12
 800c266:	d93c      	bls.n	800c2e2 <_strtod_l+0xa12>
 800c268:	ee19 2a90 	vmov	r2, s19
 800c26c:	4b60      	ldr	r3, [pc, #384]	@ (800c3f0 <_strtod_l+0xb20>)
 800c26e:	429a      	cmp	r2, r3
 800c270:	d104      	bne.n	800c27c <_strtod_l+0x9ac>
 800c272:	ee19 3a10 	vmov	r3, s18
 800c276:	3301      	adds	r3, #1
 800c278:	f43f ad3a 	beq.w	800bcf0 <_strtod_l+0x420>
 800c27c:	f8df b170 	ldr.w	fp, [pc, #368]	@ 800c3f0 <_strtod_l+0xb20>
 800c280:	f04f 3aff 	mov.w	sl, #4294967295
 800c284:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800c286:	9805      	ldr	r0, [sp, #20]
 800c288:	f7fe fe98 	bl	800afbc <_Bfree>
 800c28c:	9805      	ldr	r0, [sp, #20]
 800c28e:	4631      	mov	r1, r6
 800c290:	f7fe fe94 	bl	800afbc <_Bfree>
 800c294:	9805      	ldr	r0, [sp, #20]
 800c296:	4629      	mov	r1, r5
 800c298:	f7fe fe90 	bl	800afbc <_Bfree>
 800c29c:	9805      	ldr	r0, [sp, #20]
 800c29e:	4621      	mov	r1, r4
 800c2a0:	f7fe fe8c 	bl	800afbc <_Bfree>
 800c2a4:	e625      	b.n	800bef2 <_strtod_l+0x622>
 800c2a6:	f1ba 0f01 	cmp.w	sl, #1
 800c2aa:	d103      	bne.n	800c2b4 <_strtod_l+0x9e4>
 800c2ac:	f1bb 0f00 	cmp.w	fp, #0
 800c2b0:	f43f adb2 	beq.w	800be18 <_strtod_l+0x548>
 800c2b4:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800c2b8:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800c2bc:	e7b8      	b.n	800c230 <_strtod_l+0x960>
 800c2be:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800c2c2:	ee20 8b08 	vmul.f64	d8, d0, d8
 800c2c6:	f1b8 0f00 	cmp.w	r8, #0
 800c2ca:	d0af      	beq.n	800c22c <_strtod_l+0x95c>
 800c2cc:	eeb0 ab48 	vmov.f64	d10, d8
 800c2d0:	e7ae      	b.n	800c230 <_strtod_l+0x960>
 800c2d2:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 800c2d6:	eeb0 8b4a 	vmov.f64	d8, d10
 800c2da:	e7a9      	b.n	800c230 <_strtod_l+0x960>
 800c2dc:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800c2e0:	e7a6      	b.n	800c230 <_strtod_l+0x960>
 800c2e2:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800c2e6:	9b06      	ldr	r3, [sp, #24]
 800c2e8:	46d9      	mov	r9, fp
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d1ca      	bne.n	800c284 <_strtod_l+0x9b4>
 800c2ee:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c2f2:	0d1b      	lsrs	r3, r3, #20
 800c2f4:	051b      	lsls	r3, r3, #20
 800c2f6:	429f      	cmp	r7, r3
 800c2f8:	d1c4      	bne.n	800c284 <_strtod_l+0x9b4>
 800c2fa:	ec51 0b18 	vmov	r0, r1, d8
 800c2fe:	f7f4 fa23 	bl	8000748 <__aeabi_d2lz>
 800c302:	f7f4 f9db 	bl	80006bc <__aeabi_l2d>
 800c306:	f3cb 0913 	ubfx	r9, fp, #0, #20
 800c30a:	ec41 0b17 	vmov	d7, r0, r1
 800c30e:	ea49 090a 	orr.w	r9, r9, sl
 800c312:	ea59 0908 	orrs.w	r9, r9, r8
 800c316:	ee38 8b47 	vsub.f64	d8, d8, d7
 800c31a:	d03c      	beq.n	800c396 <_strtod_l+0xac6>
 800c31c:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 800c3d0 <_strtod_l+0xb00>
 800c320:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800c324:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c328:	f53f aced 	bmi.w	800bd06 <_strtod_l+0x436>
 800c32c:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 800c3d8 <_strtod_l+0xb08>
 800c330:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800c334:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c338:	dda4      	ble.n	800c284 <_strtod_l+0x9b4>
 800c33a:	e4e4      	b.n	800bd06 <_strtod_l+0x436>
 800c33c:	9906      	ldr	r1, [sp, #24]
 800c33e:	b1e1      	cbz	r1, 800c37a <_strtod_l+0xaaa>
 800c340:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 800c344:	d819      	bhi.n	800c37a <_strtod_l+0xaaa>
 800c346:	eeb4 8bcb 	vcmpe.f64	d8, d11
 800c34a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c34e:	d811      	bhi.n	800c374 <_strtod_l+0xaa4>
 800c350:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 800c354:	ee18 3a10 	vmov	r3, s16
 800c358:	2b01      	cmp	r3, #1
 800c35a:	bf38      	it	cc
 800c35c:	2301      	movcc	r3, #1
 800c35e:	ee08 3a10 	vmov	s16, r3
 800c362:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 800c366:	f1b8 0f00 	cmp.w	r8, #0
 800c36a:	d111      	bne.n	800c390 <_strtod_l+0xac0>
 800c36c:	eeb1 7b48 	vneg.f64	d7, d8
 800c370:	ec53 2b17 	vmov	r2, r3, d7
 800c374:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 800c378:	1bcb      	subs	r3, r1, r7
 800c37a:	eeb0 0b49 	vmov.f64	d0, d9
 800c37e:	ec43 2b1a 	vmov	d10, r2, r3
 800c382:	f7ff f94f 	bl	800b624 <__ulp>
 800c386:	eeaa 9b00 	vfma.f64	d9, d10, d0
 800c38a:	ec5b ab19 	vmov	sl, fp, d9
 800c38e:	e7aa      	b.n	800c2e6 <_strtod_l+0xa16>
 800c390:	eeb0 7b48 	vmov.f64	d7, d8
 800c394:	e7ec      	b.n	800c370 <_strtod_l+0xaa0>
 800c396:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 800c3e0 <_strtod_l+0xb10>
 800c39a:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800c39e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c3a2:	f57f af6f 	bpl.w	800c284 <_strtod_l+0x9b4>
 800c3a6:	e4ae      	b.n	800bd06 <_strtod_l+0x436>
 800c3a8:	2300      	movs	r3, #0
 800c3aa:	9308      	str	r3, [sp, #32]
 800c3ac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c3ae:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c3b0:	6013      	str	r3, [r2, #0]
 800c3b2:	f7ff bacc 	b.w	800b94e <_strtod_l+0x7e>
 800c3b6:	2a65      	cmp	r2, #101	@ 0x65
 800c3b8:	f43f abbc 	beq.w	800bb34 <_strtod_l+0x264>
 800c3bc:	2a45      	cmp	r2, #69	@ 0x45
 800c3be:	f43f abb9 	beq.w	800bb34 <_strtod_l+0x264>
 800c3c2:	2301      	movs	r3, #1
 800c3c4:	9306      	str	r3, [sp, #24]
 800c3c6:	f7ff bbf0 	b.w	800bbaa <_strtod_l+0x2da>
 800c3ca:	bf00      	nop
 800c3cc:	f3af 8000 	nop.w
 800c3d0:	94a03595 	.word	0x94a03595
 800c3d4:	3fdfffff 	.word	0x3fdfffff
 800c3d8:	35afe535 	.word	0x35afe535
 800c3dc:	3fe00000 	.word	0x3fe00000
 800c3e0:	94a03595 	.word	0x94a03595
 800c3e4:	3fcfffff 	.word	0x3fcfffff
 800c3e8:	000fffff 	.word	0x000fffff
 800c3ec:	7ff00000 	.word	0x7ff00000
 800c3f0:	7fefffff 	.word	0x7fefffff
 800c3f4:	7fe00000 	.word	0x7fe00000
 800c3f8:	7c9fffff 	.word	0x7c9fffff

0800c3fc <_strtod_r>:
 800c3fc:	4b01      	ldr	r3, [pc, #4]	@ (800c404 <_strtod_r+0x8>)
 800c3fe:	f7ff ba67 	b.w	800b8d0 <_strtod_l>
 800c402:	bf00      	nop
 800c404:	24000070 	.word	0x24000070

0800c408 <_strtol_l.constprop.0>:
 800c408:	2b24      	cmp	r3, #36	@ 0x24
 800c40a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c40e:	4686      	mov	lr, r0
 800c410:	4690      	mov	r8, r2
 800c412:	d801      	bhi.n	800c418 <_strtol_l.constprop.0+0x10>
 800c414:	2b01      	cmp	r3, #1
 800c416:	d106      	bne.n	800c426 <_strtol_l.constprop.0+0x1e>
 800c418:	f7fd fe70 	bl	800a0fc <__errno>
 800c41c:	2316      	movs	r3, #22
 800c41e:	6003      	str	r3, [r0, #0]
 800c420:	2000      	movs	r0, #0
 800c422:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c426:	4834      	ldr	r0, [pc, #208]	@ (800c4f8 <_strtol_l.constprop.0+0xf0>)
 800c428:	460d      	mov	r5, r1
 800c42a:	462a      	mov	r2, r5
 800c42c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c430:	5d06      	ldrb	r6, [r0, r4]
 800c432:	f016 0608 	ands.w	r6, r6, #8
 800c436:	d1f8      	bne.n	800c42a <_strtol_l.constprop.0+0x22>
 800c438:	2c2d      	cmp	r4, #45	@ 0x2d
 800c43a:	d12d      	bne.n	800c498 <_strtol_l.constprop.0+0x90>
 800c43c:	782c      	ldrb	r4, [r5, #0]
 800c43e:	2601      	movs	r6, #1
 800c440:	1c95      	adds	r5, r2, #2
 800c442:	f033 0210 	bics.w	r2, r3, #16
 800c446:	d109      	bne.n	800c45c <_strtol_l.constprop.0+0x54>
 800c448:	2c30      	cmp	r4, #48	@ 0x30
 800c44a:	d12a      	bne.n	800c4a2 <_strtol_l.constprop.0+0x9a>
 800c44c:	782a      	ldrb	r2, [r5, #0]
 800c44e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c452:	2a58      	cmp	r2, #88	@ 0x58
 800c454:	d125      	bne.n	800c4a2 <_strtol_l.constprop.0+0x9a>
 800c456:	786c      	ldrb	r4, [r5, #1]
 800c458:	2310      	movs	r3, #16
 800c45a:	3502      	adds	r5, #2
 800c45c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800c460:	f10c 3cff 	add.w	ip, ip, #4294967295
 800c464:	2200      	movs	r2, #0
 800c466:	fbbc f9f3 	udiv	r9, ip, r3
 800c46a:	4610      	mov	r0, r2
 800c46c:	fb03 ca19 	mls	sl, r3, r9, ip
 800c470:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800c474:	2f09      	cmp	r7, #9
 800c476:	d81b      	bhi.n	800c4b0 <_strtol_l.constprop.0+0xa8>
 800c478:	463c      	mov	r4, r7
 800c47a:	42a3      	cmp	r3, r4
 800c47c:	dd27      	ble.n	800c4ce <_strtol_l.constprop.0+0xc6>
 800c47e:	1c57      	adds	r7, r2, #1
 800c480:	d007      	beq.n	800c492 <_strtol_l.constprop.0+0x8a>
 800c482:	4581      	cmp	r9, r0
 800c484:	d320      	bcc.n	800c4c8 <_strtol_l.constprop.0+0xc0>
 800c486:	d101      	bne.n	800c48c <_strtol_l.constprop.0+0x84>
 800c488:	45a2      	cmp	sl, r4
 800c48a:	db1d      	blt.n	800c4c8 <_strtol_l.constprop.0+0xc0>
 800c48c:	fb00 4003 	mla	r0, r0, r3, r4
 800c490:	2201      	movs	r2, #1
 800c492:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c496:	e7eb      	b.n	800c470 <_strtol_l.constprop.0+0x68>
 800c498:	2c2b      	cmp	r4, #43	@ 0x2b
 800c49a:	bf04      	itt	eq
 800c49c:	782c      	ldrbeq	r4, [r5, #0]
 800c49e:	1c95      	addeq	r5, r2, #2
 800c4a0:	e7cf      	b.n	800c442 <_strtol_l.constprop.0+0x3a>
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d1da      	bne.n	800c45c <_strtol_l.constprop.0+0x54>
 800c4a6:	2c30      	cmp	r4, #48	@ 0x30
 800c4a8:	bf0c      	ite	eq
 800c4aa:	2308      	moveq	r3, #8
 800c4ac:	230a      	movne	r3, #10
 800c4ae:	e7d5      	b.n	800c45c <_strtol_l.constprop.0+0x54>
 800c4b0:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800c4b4:	2f19      	cmp	r7, #25
 800c4b6:	d801      	bhi.n	800c4bc <_strtol_l.constprop.0+0xb4>
 800c4b8:	3c37      	subs	r4, #55	@ 0x37
 800c4ba:	e7de      	b.n	800c47a <_strtol_l.constprop.0+0x72>
 800c4bc:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800c4c0:	2f19      	cmp	r7, #25
 800c4c2:	d804      	bhi.n	800c4ce <_strtol_l.constprop.0+0xc6>
 800c4c4:	3c57      	subs	r4, #87	@ 0x57
 800c4c6:	e7d8      	b.n	800c47a <_strtol_l.constprop.0+0x72>
 800c4c8:	f04f 32ff 	mov.w	r2, #4294967295
 800c4cc:	e7e1      	b.n	800c492 <_strtol_l.constprop.0+0x8a>
 800c4ce:	1c53      	adds	r3, r2, #1
 800c4d0:	d108      	bne.n	800c4e4 <_strtol_l.constprop.0+0xdc>
 800c4d2:	2322      	movs	r3, #34	@ 0x22
 800c4d4:	f8ce 3000 	str.w	r3, [lr]
 800c4d8:	4660      	mov	r0, ip
 800c4da:	f1b8 0f00 	cmp.w	r8, #0
 800c4de:	d0a0      	beq.n	800c422 <_strtol_l.constprop.0+0x1a>
 800c4e0:	1e69      	subs	r1, r5, #1
 800c4e2:	e006      	b.n	800c4f2 <_strtol_l.constprop.0+0xea>
 800c4e4:	b106      	cbz	r6, 800c4e8 <_strtol_l.constprop.0+0xe0>
 800c4e6:	4240      	negs	r0, r0
 800c4e8:	f1b8 0f00 	cmp.w	r8, #0
 800c4ec:	d099      	beq.n	800c422 <_strtol_l.constprop.0+0x1a>
 800c4ee:	2a00      	cmp	r2, #0
 800c4f0:	d1f6      	bne.n	800c4e0 <_strtol_l.constprop.0+0xd8>
 800c4f2:	f8c8 1000 	str.w	r1, [r8]
 800c4f6:	e794      	b.n	800c422 <_strtol_l.constprop.0+0x1a>
 800c4f8:	0800d8a9 	.word	0x0800d8a9

0800c4fc <_strtol_r>:
 800c4fc:	f7ff bf84 	b.w	800c408 <_strtol_l.constprop.0>

0800c500 <__ssputs_r>:
 800c500:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c504:	688e      	ldr	r6, [r1, #8]
 800c506:	461f      	mov	r7, r3
 800c508:	42be      	cmp	r6, r7
 800c50a:	680b      	ldr	r3, [r1, #0]
 800c50c:	4682      	mov	sl, r0
 800c50e:	460c      	mov	r4, r1
 800c510:	4690      	mov	r8, r2
 800c512:	d82d      	bhi.n	800c570 <__ssputs_r+0x70>
 800c514:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c518:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c51c:	d026      	beq.n	800c56c <__ssputs_r+0x6c>
 800c51e:	6965      	ldr	r5, [r4, #20]
 800c520:	6909      	ldr	r1, [r1, #16]
 800c522:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c526:	eba3 0901 	sub.w	r9, r3, r1
 800c52a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c52e:	1c7b      	adds	r3, r7, #1
 800c530:	444b      	add	r3, r9
 800c532:	106d      	asrs	r5, r5, #1
 800c534:	429d      	cmp	r5, r3
 800c536:	bf38      	it	cc
 800c538:	461d      	movcc	r5, r3
 800c53a:	0553      	lsls	r3, r2, #21
 800c53c:	d527      	bpl.n	800c58e <__ssputs_r+0x8e>
 800c53e:	4629      	mov	r1, r5
 800c540:	f7fe fc70 	bl	800ae24 <_malloc_r>
 800c544:	4606      	mov	r6, r0
 800c546:	b360      	cbz	r0, 800c5a2 <__ssputs_r+0xa2>
 800c548:	6921      	ldr	r1, [r4, #16]
 800c54a:	464a      	mov	r2, r9
 800c54c:	f7fd fe03 	bl	800a156 <memcpy>
 800c550:	89a3      	ldrh	r3, [r4, #12]
 800c552:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c556:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c55a:	81a3      	strh	r3, [r4, #12]
 800c55c:	6126      	str	r6, [r4, #16]
 800c55e:	6165      	str	r5, [r4, #20]
 800c560:	444e      	add	r6, r9
 800c562:	eba5 0509 	sub.w	r5, r5, r9
 800c566:	6026      	str	r6, [r4, #0]
 800c568:	60a5      	str	r5, [r4, #8]
 800c56a:	463e      	mov	r6, r7
 800c56c:	42be      	cmp	r6, r7
 800c56e:	d900      	bls.n	800c572 <__ssputs_r+0x72>
 800c570:	463e      	mov	r6, r7
 800c572:	6820      	ldr	r0, [r4, #0]
 800c574:	4632      	mov	r2, r6
 800c576:	4641      	mov	r1, r8
 800c578:	f000 fb6a 	bl	800cc50 <memmove>
 800c57c:	68a3      	ldr	r3, [r4, #8]
 800c57e:	1b9b      	subs	r3, r3, r6
 800c580:	60a3      	str	r3, [r4, #8]
 800c582:	6823      	ldr	r3, [r4, #0]
 800c584:	4433      	add	r3, r6
 800c586:	6023      	str	r3, [r4, #0]
 800c588:	2000      	movs	r0, #0
 800c58a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c58e:	462a      	mov	r2, r5
 800c590:	f000 ff43 	bl	800d41a <_realloc_r>
 800c594:	4606      	mov	r6, r0
 800c596:	2800      	cmp	r0, #0
 800c598:	d1e0      	bne.n	800c55c <__ssputs_r+0x5c>
 800c59a:	6921      	ldr	r1, [r4, #16]
 800c59c:	4650      	mov	r0, sl
 800c59e:	f7fe fbcd 	bl	800ad3c <_free_r>
 800c5a2:	230c      	movs	r3, #12
 800c5a4:	f8ca 3000 	str.w	r3, [sl]
 800c5a8:	89a3      	ldrh	r3, [r4, #12]
 800c5aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c5ae:	81a3      	strh	r3, [r4, #12]
 800c5b0:	f04f 30ff 	mov.w	r0, #4294967295
 800c5b4:	e7e9      	b.n	800c58a <__ssputs_r+0x8a>
	...

0800c5b8 <_svfiprintf_r>:
 800c5b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5bc:	4698      	mov	r8, r3
 800c5be:	898b      	ldrh	r3, [r1, #12]
 800c5c0:	061b      	lsls	r3, r3, #24
 800c5c2:	b09d      	sub	sp, #116	@ 0x74
 800c5c4:	4607      	mov	r7, r0
 800c5c6:	460d      	mov	r5, r1
 800c5c8:	4614      	mov	r4, r2
 800c5ca:	d510      	bpl.n	800c5ee <_svfiprintf_r+0x36>
 800c5cc:	690b      	ldr	r3, [r1, #16]
 800c5ce:	b973      	cbnz	r3, 800c5ee <_svfiprintf_r+0x36>
 800c5d0:	2140      	movs	r1, #64	@ 0x40
 800c5d2:	f7fe fc27 	bl	800ae24 <_malloc_r>
 800c5d6:	6028      	str	r0, [r5, #0]
 800c5d8:	6128      	str	r0, [r5, #16]
 800c5da:	b930      	cbnz	r0, 800c5ea <_svfiprintf_r+0x32>
 800c5dc:	230c      	movs	r3, #12
 800c5de:	603b      	str	r3, [r7, #0]
 800c5e0:	f04f 30ff 	mov.w	r0, #4294967295
 800c5e4:	b01d      	add	sp, #116	@ 0x74
 800c5e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5ea:	2340      	movs	r3, #64	@ 0x40
 800c5ec:	616b      	str	r3, [r5, #20]
 800c5ee:	2300      	movs	r3, #0
 800c5f0:	9309      	str	r3, [sp, #36]	@ 0x24
 800c5f2:	2320      	movs	r3, #32
 800c5f4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c5f8:	f8cd 800c 	str.w	r8, [sp, #12]
 800c5fc:	2330      	movs	r3, #48	@ 0x30
 800c5fe:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c79c <_svfiprintf_r+0x1e4>
 800c602:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c606:	f04f 0901 	mov.w	r9, #1
 800c60a:	4623      	mov	r3, r4
 800c60c:	469a      	mov	sl, r3
 800c60e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c612:	b10a      	cbz	r2, 800c618 <_svfiprintf_r+0x60>
 800c614:	2a25      	cmp	r2, #37	@ 0x25
 800c616:	d1f9      	bne.n	800c60c <_svfiprintf_r+0x54>
 800c618:	ebba 0b04 	subs.w	fp, sl, r4
 800c61c:	d00b      	beq.n	800c636 <_svfiprintf_r+0x7e>
 800c61e:	465b      	mov	r3, fp
 800c620:	4622      	mov	r2, r4
 800c622:	4629      	mov	r1, r5
 800c624:	4638      	mov	r0, r7
 800c626:	f7ff ff6b 	bl	800c500 <__ssputs_r>
 800c62a:	3001      	adds	r0, #1
 800c62c:	f000 80a7 	beq.w	800c77e <_svfiprintf_r+0x1c6>
 800c630:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c632:	445a      	add	r2, fp
 800c634:	9209      	str	r2, [sp, #36]	@ 0x24
 800c636:	f89a 3000 	ldrb.w	r3, [sl]
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	f000 809f 	beq.w	800c77e <_svfiprintf_r+0x1c6>
 800c640:	2300      	movs	r3, #0
 800c642:	f04f 32ff 	mov.w	r2, #4294967295
 800c646:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c64a:	f10a 0a01 	add.w	sl, sl, #1
 800c64e:	9304      	str	r3, [sp, #16]
 800c650:	9307      	str	r3, [sp, #28]
 800c652:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c656:	931a      	str	r3, [sp, #104]	@ 0x68
 800c658:	4654      	mov	r4, sl
 800c65a:	2205      	movs	r2, #5
 800c65c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c660:	484e      	ldr	r0, [pc, #312]	@ (800c79c <_svfiprintf_r+0x1e4>)
 800c662:	f7f3 fe45 	bl	80002f0 <memchr>
 800c666:	9a04      	ldr	r2, [sp, #16]
 800c668:	b9d8      	cbnz	r0, 800c6a2 <_svfiprintf_r+0xea>
 800c66a:	06d0      	lsls	r0, r2, #27
 800c66c:	bf44      	itt	mi
 800c66e:	2320      	movmi	r3, #32
 800c670:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c674:	0711      	lsls	r1, r2, #28
 800c676:	bf44      	itt	mi
 800c678:	232b      	movmi	r3, #43	@ 0x2b
 800c67a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c67e:	f89a 3000 	ldrb.w	r3, [sl]
 800c682:	2b2a      	cmp	r3, #42	@ 0x2a
 800c684:	d015      	beq.n	800c6b2 <_svfiprintf_r+0xfa>
 800c686:	9a07      	ldr	r2, [sp, #28]
 800c688:	4654      	mov	r4, sl
 800c68a:	2000      	movs	r0, #0
 800c68c:	f04f 0c0a 	mov.w	ip, #10
 800c690:	4621      	mov	r1, r4
 800c692:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c696:	3b30      	subs	r3, #48	@ 0x30
 800c698:	2b09      	cmp	r3, #9
 800c69a:	d94b      	bls.n	800c734 <_svfiprintf_r+0x17c>
 800c69c:	b1b0      	cbz	r0, 800c6cc <_svfiprintf_r+0x114>
 800c69e:	9207      	str	r2, [sp, #28]
 800c6a0:	e014      	b.n	800c6cc <_svfiprintf_r+0x114>
 800c6a2:	eba0 0308 	sub.w	r3, r0, r8
 800c6a6:	fa09 f303 	lsl.w	r3, r9, r3
 800c6aa:	4313      	orrs	r3, r2
 800c6ac:	9304      	str	r3, [sp, #16]
 800c6ae:	46a2      	mov	sl, r4
 800c6b0:	e7d2      	b.n	800c658 <_svfiprintf_r+0xa0>
 800c6b2:	9b03      	ldr	r3, [sp, #12]
 800c6b4:	1d19      	adds	r1, r3, #4
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	9103      	str	r1, [sp, #12]
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	bfbb      	ittet	lt
 800c6be:	425b      	neglt	r3, r3
 800c6c0:	f042 0202 	orrlt.w	r2, r2, #2
 800c6c4:	9307      	strge	r3, [sp, #28]
 800c6c6:	9307      	strlt	r3, [sp, #28]
 800c6c8:	bfb8      	it	lt
 800c6ca:	9204      	strlt	r2, [sp, #16]
 800c6cc:	7823      	ldrb	r3, [r4, #0]
 800c6ce:	2b2e      	cmp	r3, #46	@ 0x2e
 800c6d0:	d10a      	bne.n	800c6e8 <_svfiprintf_r+0x130>
 800c6d2:	7863      	ldrb	r3, [r4, #1]
 800c6d4:	2b2a      	cmp	r3, #42	@ 0x2a
 800c6d6:	d132      	bne.n	800c73e <_svfiprintf_r+0x186>
 800c6d8:	9b03      	ldr	r3, [sp, #12]
 800c6da:	1d1a      	adds	r2, r3, #4
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	9203      	str	r2, [sp, #12]
 800c6e0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c6e4:	3402      	adds	r4, #2
 800c6e6:	9305      	str	r3, [sp, #20]
 800c6e8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c7ac <_svfiprintf_r+0x1f4>
 800c6ec:	7821      	ldrb	r1, [r4, #0]
 800c6ee:	2203      	movs	r2, #3
 800c6f0:	4650      	mov	r0, sl
 800c6f2:	f7f3 fdfd 	bl	80002f0 <memchr>
 800c6f6:	b138      	cbz	r0, 800c708 <_svfiprintf_r+0x150>
 800c6f8:	9b04      	ldr	r3, [sp, #16]
 800c6fa:	eba0 000a 	sub.w	r0, r0, sl
 800c6fe:	2240      	movs	r2, #64	@ 0x40
 800c700:	4082      	lsls	r2, r0
 800c702:	4313      	orrs	r3, r2
 800c704:	3401      	adds	r4, #1
 800c706:	9304      	str	r3, [sp, #16]
 800c708:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c70c:	4824      	ldr	r0, [pc, #144]	@ (800c7a0 <_svfiprintf_r+0x1e8>)
 800c70e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c712:	2206      	movs	r2, #6
 800c714:	f7f3 fdec 	bl	80002f0 <memchr>
 800c718:	2800      	cmp	r0, #0
 800c71a:	d036      	beq.n	800c78a <_svfiprintf_r+0x1d2>
 800c71c:	4b21      	ldr	r3, [pc, #132]	@ (800c7a4 <_svfiprintf_r+0x1ec>)
 800c71e:	bb1b      	cbnz	r3, 800c768 <_svfiprintf_r+0x1b0>
 800c720:	9b03      	ldr	r3, [sp, #12]
 800c722:	3307      	adds	r3, #7
 800c724:	f023 0307 	bic.w	r3, r3, #7
 800c728:	3308      	adds	r3, #8
 800c72a:	9303      	str	r3, [sp, #12]
 800c72c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c72e:	4433      	add	r3, r6
 800c730:	9309      	str	r3, [sp, #36]	@ 0x24
 800c732:	e76a      	b.n	800c60a <_svfiprintf_r+0x52>
 800c734:	fb0c 3202 	mla	r2, ip, r2, r3
 800c738:	460c      	mov	r4, r1
 800c73a:	2001      	movs	r0, #1
 800c73c:	e7a8      	b.n	800c690 <_svfiprintf_r+0xd8>
 800c73e:	2300      	movs	r3, #0
 800c740:	3401      	adds	r4, #1
 800c742:	9305      	str	r3, [sp, #20]
 800c744:	4619      	mov	r1, r3
 800c746:	f04f 0c0a 	mov.w	ip, #10
 800c74a:	4620      	mov	r0, r4
 800c74c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c750:	3a30      	subs	r2, #48	@ 0x30
 800c752:	2a09      	cmp	r2, #9
 800c754:	d903      	bls.n	800c75e <_svfiprintf_r+0x1a6>
 800c756:	2b00      	cmp	r3, #0
 800c758:	d0c6      	beq.n	800c6e8 <_svfiprintf_r+0x130>
 800c75a:	9105      	str	r1, [sp, #20]
 800c75c:	e7c4      	b.n	800c6e8 <_svfiprintf_r+0x130>
 800c75e:	fb0c 2101 	mla	r1, ip, r1, r2
 800c762:	4604      	mov	r4, r0
 800c764:	2301      	movs	r3, #1
 800c766:	e7f0      	b.n	800c74a <_svfiprintf_r+0x192>
 800c768:	ab03      	add	r3, sp, #12
 800c76a:	9300      	str	r3, [sp, #0]
 800c76c:	462a      	mov	r2, r5
 800c76e:	4b0e      	ldr	r3, [pc, #56]	@ (800c7a8 <_svfiprintf_r+0x1f0>)
 800c770:	a904      	add	r1, sp, #16
 800c772:	4638      	mov	r0, r7
 800c774:	f7fc fc3c 	bl	8008ff0 <_printf_float>
 800c778:	1c42      	adds	r2, r0, #1
 800c77a:	4606      	mov	r6, r0
 800c77c:	d1d6      	bne.n	800c72c <_svfiprintf_r+0x174>
 800c77e:	89ab      	ldrh	r3, [r5, #12]
 800c780:	065b      	lsls	r3, r3, #25
 800c782:	f53f af2d 	bmi.w	800c5e0 <_svfiprintf_r+0x28>
 800c786:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c788:	e72c      	b.n	800c5e4 <_svfiprintf_r+0x2c>
 800c78a:	ab03      	add	r3, sp, #12
 800c78c:	9300      	str	r3, [sp, #0]
 800c78e:	462a      	mov	r2, r5
 800c790:	4b05      	ldr	r3, [pc, #20]	@ (800c7a8 <_svfiprintf_r+0x1f0>)
 800c792:	a904      	add	r1, sp, #16
 800c794:	4638      	mov	r0, r7
 800c796:	f7fc feb3 	bl	8009500 <_printf_i>
 800c79a:	e7ed      	b.n	800c778 <_svfiprintf_r+0x1c0>
 800c79c:	0800d9a9 	.word	0x0800d9a9
 800c7a0:	0800d9b3 	.word	0x0800d9b3
 800c7a4:	08008ff1 	.word	0x08008ff1
 800c7a8:	0800c501 	.word	0x0800c501
 800c7ac:	0800d9af 	.word	0x0800d9af

0800c7b0 <__sfputc_r>:
 800c7b0:	6893      	ldr	r3, [r2, #8]
 800c7b2:	3b01      	subs	r3, #1
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	b410      	push	{r4}
 800c7b8:	6093      	str	r3, [r2, #8]
 800c7ba:	da08      	bge.n	800c7ce <__sfputc_r+0x1e>
 800c7bc:	6994      	ldr	r4, [r2, #24]
 800c7be:	42a3      	cmp	r3, r4
 800c7c0:	db01      	blt.n	800c7c6 <__sfputc_r+0x16>
 800c7c2:	290a      	cmp	r1, #10
 800c7c4:	d103      	bne.n	800c7ce <__sfputc_r+0x1e>
 800c7c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c7ca:	f7fd bb5a 	b.w	8009e82 <__swbuf_r>
 800c7ce:	6813      	ldr	r3, [r2, #0]
 800c7d0:	1c58      	adds	r0, r3, #1
 800c7d2:	6010      	str	r0, [r2, #0]
 800c7d4:	7019      	strb	r1, [r3, #0]
 800c7d6:	4608      	mov	r0, r1
 800c7d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c7dc:	4770      	bx	lr

0800c7de <__sfputs_r>:
 800c7de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7e0:	4606      	mov	r6, r0
 800c7e2:	460f      	mov	r7, r1
 800c7e4:	4614      	mov	r4, r2
 800c7e6:	18d5      	adds	r5, r2, r3
 800c7e8:	42ac      	cmp	r4, r5
 800c7ea:	d101      	bne.n	800c7f0 <__sfputs_r+0x12>
 800c7ec:	2000      	movs	r0, #0
 800c7ee:	e007      	b.n	800c800 <__sfputs_r+0x22>
 800c7f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c7f4:	463a      	mov	r2, r7
 800c7f6:	4630      	mov	r0, r6
 800c7f8:	f7ff ffda 	bl	800c7b0 <__sfputc_r>
 800c7fc:	1c43      	adds	r3, r0, #1
 800c7fe:	d1f3      	bne.n	800c7e8 <__sfputs_r+0xa>
 800c800:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c804 <_vfiprintf_r>:
 800c804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c808:	460d      	mov	r5, r1
 800c80a:	b09d      	sub	sp, #116	@ 0x74
 800c80c:	4614      	mov	r4, r2
 800c80e:	4698      	mov	r8, r3
 800c810:	4606      	mov	r6, r0
 800c812:	b118      	cbz	r0, 800c81c <_vfiprintf_r+0x18>
 800c814:	6a03      	ldr	r3, [r0, #32]
 800c816:	b90b      	cbnz	r3, 800c81c <_vfiprintf_r+0x18>
 800c818:	f7fd fa2a 	bl	8009c70 <__sinit>
 800c81c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c81e:	07d9      	lsls	r1, r3, #31
 800c820:	d405      	bmi.n	800c82e <_vfiprintf_r+0x2a>
 800c822:	89ab      	ldrh	r3, [r5, #12]
 800c824:	059a      	lsls	r2, r3, #22
 800c826:	d402      	bmi.n	800c82e <_vfiprintf_r+0x2a>
 800c828:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c82a:	f7fd fc92 	bl	800a152 <__retarget_lock_acquire_recursive>
 800c82e:	89ab      	ldrh	r3, [r5, #12]
 800c830:	071b      	lsls	r3, r3, #28
 800c832:	d501      	bpl.n	800c838 <_vfiprintf_r+0x34>
 800c834:	692b      	ldr	r3, [r5, #16]
 800c836:	b99b      	cbnz	r3, 800c860 <_vfiprintf_r+0x5c>
 800c838:	4629      	mov	r1, r5
 800c83a:	4630      	mov	r0, r6
 800c83c:	f7fd fb60 	bl	8009f00 <__swsetup_r>
 800c840:	b170      	cbz	r0, 800c860 <_vfiprintf_r+0x5c>
 800c842:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c844:	07dc      	lsls	r4, r3, #31
 800c846:	d504      	bpl.n	800c852 <_vfiprintf_r+0x4e>
 800c848:	f04f 30ff 	mov.w	r0, #4294967295
 800c84c:	b01d      	add	sp, #116	@ 0x74
 800c84e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c852:	89ab      	ldrh	r3, [r5, #12]
 800c854:	0598      	lsls	r0, r3, #22
 800c856:	d4f7      	bmi.n	800c848 <_vfiprintf_r+0x44>
 800c858:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c85a:	f7fd fc7b 	bl	800a154 <__retarget_lock_release_recursive>
 800c85e:	e7f3      	b.n	800c848 <_vfiprintf_r+0x44>
 800c860:	2300      	movs	r3, #0
 800c862:	9309      	str	r3, [sp, #36]	@ 0x24
 800c864:	2320      	movs	r3, #32
 800c866:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c86a:	f8cd 800c 	str.w	r8, [sp, #12]
 800c86e:	2330      	movs	r3, #48	@ 0x30
 800c870:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ca20 <_vfiprintf_r+0x21c>
 800c874:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c878:	f04f 0901 	mov.w	r9, #1
 800c87c:	4623      	mov	r3, r4
 800c87e:	469a      	mov	sl, r3
 800c880:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c884:	b10a      	cbz	r2, 800c88a <_vfiprintf_r+0x86>
 800c886:	2a25      	cmp	r2, #37	@ 0x25
 800c888:	d1f9      	bne.n	800c87e <_vfiprintf_r+0x7a>
 800c88a:	ebba 0b04 	subs.w	fp, sl, r4
 800c88e:	d00b      	beq.n	800c8a8 <_vfiprintf_r+0xa4>
 800c890:	465b      	mov	r3, fp
 800c892:	4622      	mov	r2, r4
 800c894:	4629      	mov	r1, r5
 800c896:	4630      	mov	r0, r6
 800c898:	f7ff ffa1 	bl	800c7de <__sfputs_r>
 800c89c:	3001      	adds	r0, #1
 800c89e:	f000 80a7 	beq.w	800c9f0 <_vfiprintf_r+0x1ec>
 800c8a2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c8a4:	445a      	add	r2, fp
 800c8a6:	9209      	str	r2, [sp, #36]	@ 0x24
 800c8a8:	f89a 3000 	ldrb.w	r3, [sl]
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	f000 809f 	beq.w	800c9f0 <_vfiprintf_r+0x1ec>
 800c8b2:	2300      	movs	r3, #0
 800c8b4:	f04f 32ff 	mov.w	r2, #4294967295
 800c8b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c8bc:	f10a 0a01 	add.w	sl, sl, #1
 800c8c0:	9304      	str	r3, [sp, #16]
 800c8c2:	9307      	str	r3, [sp, #28]
 800c8c4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c8c8:	931a      	str	r3, [sp, #104]	@ 0x68
 800c8ca:	4654      	mov	r4, sl
 800c8cc:	2205      	movs	r2, #5
 800c8ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c8d2:	4853      	ldr	r0, [pc, #332]	@ (800ca20 <_vfiprintf_r+0x21c>)
 800c8d4:	f7f3 fd0c 	bl	80002f0 <memchr>
 800c8d8:	9a04      	ldr	r2, [sp, #16]
 800c8da:	b9d8      	cbnz	r0, 800c914 <_vfiprintf_r+0x110>
 800c8dc:	06d1      	lsls	r1, r2, #27
 800c8de:	bf44      	itt	mi
 800c8e0:	2320      	movmi	r3, #32
 800c8e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c8e6:	0713      	lsls	r3, r2, #28
 800c8e8:	bf44      	itt	mi
 800c8ea:	232b      	movmi	r3, #43	@ 0x2b
 800c8ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c8f0:	f89a 3000 	ldrb.w	r3, [sl]
 800c8f4:	2b2a      	cmp	r3, #42	@ 0x2a
 800c8f6:	d015      	beq.n	800c924 <_vfiprintf_r+0x120>
 800c8f8:	9a07      	ldr	r2, [sp, #28]
 800c8fa:	4654      	mov	r4, sl
 800c8fc:	2000      	movs	r0, #0
 800c8fe:	f04f 0c0a 	mov.w	ip, #10
 800c902:	4621      	mov	r1, r4
 800c904:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c908:	3b30      	subs	r3, #48	@ 0x30
 800c90a:	2b09      	cmp	r3, #9
 800c90c:	d94b      	bls.n	800c9a6 <_vfiprintf_r+0x1a2>
 800c90e:	b1b0      	cbz	r0, 800c93e <_vfiprintf_r+0x13a>
 800c910:	9207      	str	r2, [sp, #28]
 800c912:	e014      	b.n	800c93e <_vfiprintf_r+0x13a>
 800c914:	eba0 0308 	sub.w	r3, r0, r8
 800c918:	fa09 f303 	lsl.w	r3, r9, r3
 800c91c:	4313      	orrs	r3, r2
 800c91e:	9304      	str	r3, [sp, #16]
 800c920:	46a2      	mov	sl, r4
 800c922:	e7d2      	b.n	800c8ca <_vfiprintf_r+0xc6>
 800c924:	9b03      	ldr	r3, [sp, #12]
 800c926:	1d19      	adds	r1, r3, #4
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	9103      	str	r1, [sp, #12]
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	bfbb      	ittet	lt
 800c930:	425b      	neglt	r3, r3
 800c932:	f042 0202 	orrlt.w	r2, r2, #2
 800c936:	9307      	strge	r3, [sp, #28]
 800c938:	9307      	strlt	r3, [sp, #28]
 800c93a:	bfb8      	it	lt
 800c93c:	9204      	strlt	r2, [sp, #16]
 800c93e:	7823      	ldrb	r3, [r4, #0]
 800c940:	2b2e      	cmp	r3, #46	@ 0x2e
 800c942:	d10a      	bne.n	800c95a <_vfiprintf_r+0x156>
 800c944:	7863      	ldrb	r3, [r4, #1]
 800c946:	2b2a      	cmp	r3, #42	@ 0x2a
 800c948:	d132      	bne.n	800c9b0 <_vfiprintf_r+0x1ac>
 800c94a:	9b03      	ldr	r3, [sp, #12]
 800c94c:	1d1a      	adds	r2, r3, #4
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	9203      	str	r2, [sp, #12]
 800c952:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c956:	3402      	adds	r4, #2
 800c958:	9305      	str	r3, [sp, #20]
 800c95a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ca30 <_vfiprintf_r+0x22c>
 800c95e:	7821      	ldrb	r1, [r4, #0]
 800c960:	2203      	movs	r2, #3
 800c962:	4650      	mov	r0, sl
 800c964:	f7f3 fcc4 	bl	80002f0 <memchr>
 800c968:	b138      	cbz	r0, 800c97a <_vfiprintf_r+0x176>
 800c96a:	9b04      	ldr	r3, [sp, #16]
 800c96c:	eba0 000a 	sub.w	r0, r0, sl
 800c970:	2240      	movs	r2, #64	@ 0x40
 800c972:	4082      	lsls	r2, r0
 800c974:	4313      	orrs	r3, r2
 800c976:	3401      	adds	r4, #1
 800c978:	9304      	str	r3, [sp, #16]
 800c97a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c97e:	4829      	ldr	r0, [pc, #164]	@ (800ca24 <_vfiprintf_r+0x220>)
 800c980:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c984:	2206      	movs	r2, #6
 800c986:	f7f3 fcb3 	bl	80002f0 <memchr>
 800c98a:	2800      	cmp	r0, #0
 800c98c:	d03f      	beq.n	800ca0e <_vfiprintf_r+0x20a>
 800c98e:	4b26      	ldr	r3, [pc, #152]	@ (800ca28 <_vfiprintf_r+0x224>)
 800c990:	bb1b      	cbnz	r3, 800c9da <_vfiprintf_r+0x1d6>
 800c992:	9b03      	ldr	r3, [sp, #12]
 800c994:	3307      	adds	r3, #7
 800c996:	f023 0307 	bic.w	r3, r3, #7
 800c99a:	3308      	adds	r3, #8
 800c99c:	9303      	str	r3, [sp, #12]
 800c99e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c9a0:	443b      	add	r3, r7
 800c9a2:	9309      	str	r3, [sp, #36]	@ 0x24
 800c9a4:	e76a      	b.n	800c87c <_vfiprintf_r+0x78>
 800c9a6:	fb0c 3202 	mla	r2, ip, r2, r3
 800c9aa:	460c      	mov	r4, r1
 800c9ac:	2001      	movs	r0, #1
 800c9ae:	e7a8      	b.n	800c902 <_vfiprintf_r+0xfe>
 800c9b0:	2300      	movs	r3, #0
 800c9b2:	3401      	adds	r4, #1
 800c9b4:	9305      	str	r3, [sp, #20]
 800c9b6:	4619      	mov	r1, r3
 800c9b8:	f04f 0c0a 	mov.w	ip, #10
 800c9bc:	4620      	mov	r0, r4
 800c9be:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c9c2:	3a30      	subs	r2, #48	@ 0x30
 800c9c4:	2a09      	cmp	r2, #9
 800c9c6:	d903      	bls.n	800c9d0 <_vfiprintf_r+0x1cc>
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d0c6      	beq.n	800c95a <_vfiprintf_r+0x156>
 800c9cc:	9105      	str	r1, [sp, #20]
 800c9ce:	e7c4      	b.n	800c95a <_vfiprintf_r+0x156>
 800c9d0:	fb0c 2101 	mla	r1, ip, r1, r2
 800c9d4:	4604      	mov	r4, r0
 800c9d6:	2301      	movs	r3, #1
 800c9d8:	e7f0      	b.n	800c9bc <_vfiprintf_r+0x1b8>
 800c9da:	ab03      	add	r3, sp, #12
 800c9dc:	9300      	str	r3, [sp, #0]
 800c9de:	462a      	mov	r2, r5
 800c9e0:	4b12      	ldr	r3, [pc, #72]	@ (800ca2c <_vfiprintf_r+0x228>)
 800c9e2:	a904      	add	r1, sp, #16
 800c9e4:	4630      	mov	r0, r6
 800c9e6:	f7fc fb03 	bl	8008ff0 <_printf_float>
 800c9ea:	4607      	mov	r7, r0
 800c9ec:	1c78      	adds	r0, r7, #1
 800c9ee:	d1d6      	bne.n	800c99e <_vfiprintf_r+0x19a>
 800c9f0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c9f2:	07d9      	lsls	r1, r3, #31
 800c9f4:	d405      	bmi.n	800ca02 <_vfiprintf_r+0x1fe>
 800c9f6:	89ab      	ldrh	r3, [r5, #12]
 800c9f8:	059a      	lsls	r2, r3, #22
 800c9fa:	d402      	bmi.n	800ca02 <_vfiprintf_r+0x1fe>
 800c9fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c9fe:	f7fd fba9 	bl	800a154 <__retarget_lock_release_recursive>
 800ca02:	89ab      	ldrh	r3, [r5, #12]
 800ca04:	065b      	lsls	r3, r3, #25
 800ca06:	f53f af1f 	bmi.w	800c848 <_vfiprintf_r+0x44>
 800ca0a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ca0c:	e71e      	b.n	800c84c <_vfiprintf_r+0x48>
 800ca0e:	ab03      	add	r3, sp, #12
 800ca10:	9300      	str	r3, [sp, #0]
 800ca12:	462a      	mov	r2, r5
 800ca14:	4b05      	ldr	r3, [pc, #20]	@ (800ca2c <_vfiprintf_r+0x228>)
 800ca16:	a904      	add	r1, sp, #16
 800ca18:	4630      	mov	r0, r6
 800ca1a:	f7fc fd71 	bl	8009500 <_printf_i>
 800ca1e:	e7e4      	b.n	800c9ea <_vfiprintf_r+0x1e6>
 800ca20:	0800d9a9 	.word	0x0800d9a9
 800ca24:	0800d9b3 	.word	0x0800d9b3
 800ca28:	08008ff1 	.word	0x08008ff1
 800ca2c:	0800c7df 	.word	0x0800c7df
 800ca30:	0800d9af 	.word	0x0800d9af

0800ca34 <__sflush_r>:
 800ca34:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ca38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca3c:	0716      	lsls	r6, r2, #28
 800ca3e:	4605      	mov	r5, r0
 800ca40:	460c      	mov	r4, r1
 800ca42:	d454      	bmi.n	800caee <__sflush_r+0xba>
 800ca44:	684b      	ldr	r3, [r1, #4]
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	dc02      	bgt.n	800ca50 <__sflush_r+0x1c>
 800ca4a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	dd48      	ble.n	800cae2 <__sflush_r+0xae>
 800ca50:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ca52:	2e00      	cmp	r6, #0
 800ca54:	d045      	beq.n	800cae2 <__sflush_r+0xae>
 800ca56:	2300      	movs	r3, #0
 800ca58:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ca5c:	682f      	ldr	r7, [r5, #0]
 800ca5e:	6a21      	ldr	r1, [r4, #32]
 800ca60:	602b      	str	r3, [r5, #0]
 800ca62:	d030      	beq.n	800cac6 <__sflush_r+0x92>
 800ca64:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ca66:	89a3      	ldrh	r3, [r4, #12]
 800ca68:	0759      	lsls	r1, r3, #29
 800ca6a:	d505      	bpl.n	800ca78 <__sflush_r+0x44>
 800ca6c:	6863      	ldr	r3, [r4, #4]
 800ca6e:	1ad2      	subs	r2, r2, r3
 800ca70:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ca72:	b10b      	cbz	r3, 800ca78 <__sflush_r+0x44>
 800ca74:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ca76:	1ad2      	subs	r2, r2, r3
 800ca78:	2300      	movs	r3, #0
 800ca7a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ca7c:	6a21      	ldr	r1, [r4, #32]
 800ca7e:	4628      	mov	r0, r5
 800ca80:	47b0      	blx	r6
 800ca82:	1c43      	adds	r3, r0, #1
 800ca84:	89a3      	ldrh	r3, [r4, #12]
 800ca86:	d106      	bne.n	800ca96 <__sflush_r+0x62>
 800ca88:	6829      	ldr	r1, [r5, #0]
 800ca8a:	291d      	cmp	r1, #29
 800ca8c:	d82b      	bhi.n	800cae6 <__sflush_r+0xb2>
 800ca8e:	4a2a      	ldr	r2, [pc, #168]	@ (800cb38 <__sflush_r+0x104>)
 800ca90:	410a      	asrs	r2, r1
 800ca92:	07d6      	lsls	r6, r2, #31
 800ca94:	d427      	bmi.n	800cae6 <__sflush_r+0xb2>
 800ca96:	2200      	movs	r2, #0
 800ca98:	6062      	str	r2, [r4, #4]
 800ca9a:	04d9      	lsls	r1, r3, #19
 800ca9c:	6922      	ldr	r2, [r4, #16]
 800ca9e:	6022      	str	r2, [r4, #0]
 800caa0:	d504      	bpl.n	800caac <__sflush_r+0x78>
 800caa2:	1c42      	adds	r2, r0, #1
 800caa4:	d101      	bne.n	800caaa <__sflush_r+0x76>
 800caa6:	682b      	ldr	r3, [r5, #0]
 800caa8:	b903      	cbnz	r3, 800caac <__sflush_r+0x78>
 800caaa:	6560      	str	r0, [r4, #84]	@ 0x54
 800caac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800caae:	602f      	str	r7, [r5, #0]
 800cab0:	b1b9      	cbz	r1, 800cae2 <__sflush_r+0xae>
 800cab2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cab6:	4299      	cmp	r1, r3
 800cab8:	d002      	beq.n	800cac0 <__sflush_r+0x8c>
 800caba:	4628      	mov	r0, r5
 800cabc:	f7fe f93e 	bl	800ad3c <_free_r>
 800cac0:	2300      	movs	r3, #0
 800cac2:	6363      	str	r3, [r4, #52]	@ 0x34
 800cac4:	e00d      	b.n	800cae2 <__sflush_r+0xae>
 800cac6:	2301      	movs	r3, #1
 800cac8:	4628      	mov	r0, r5
 800caca:	47b0      	blx	r6
 800cacc:	4602      	mov	r2, r0
 800cace:	1c50      	adds	r0, r2, #1
 800cad0:	d1c9      	bne.n	800ca66 <__sflush_r+0x32>
 800cad2:	682b      	ldr	r3, [r5, #0]
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d0c6      	beq.n	800ca66 <__sflush_r+0x32>
 800cad8:	2b1d      	cmp	r3, #29
 800cada:	d001      	beq.n	800cae0 <__sflush_r+0xac>
 800cadc:	2b16      	cmp	r3, #22
 800cade:	d11e      	bne.n	800cb1e <__sflush_r+0xea>
 800cae0:	602f      	str	r7, [r5, #0]
 800cae2:	2000      	movs	r0, #0
 800cae4:	e022      	b.n	800cb2c <__sflush_r+0xf8>
 800cae6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800caea:	b21b      	sxth	r3, r3
 800caec:	e01b      	b.n	800cb26 <__sflush_r+0xf2>
 800caee:	690f      	ldr	r7, [r1, #16]
 800caf0:	2f00      	cmp	r7, #0
 800caf2:	d0f6      	beq.n	800cae2 <__sflush_r+0xae>
 800caf4:	0793      	lsls	r3, r2, #30
 800caf6:	680e      	ldr	r6, [r1, #0]
 800caf8:	bf08      	it	eq
 800cafa:	694b      	ldreq	r3, [r1, #20]
 800cafc:	600f      	str	r7, [r1, #0]
 800cafe:	bf18      	it	ne
 800cb00:	2300      	movne	r3, #0
 800cb02:	eba6 0807 	sub.w	r8, r6, r7
 800cb06:	608b      	str	r3, [r1, #8]
 800cb08:	f1b8 0f00 	cmp.w	r8, #0
 800cb0c:	dde9      	ble.n	800cae2 <__sflush_r+0xae>
 800cb0e:	6a21      	ldr	r1, [r4, #32]
 800cb10:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800cb12:	4643      	mov	r3, r8
 800cb14:	463a      	mov	r2, r7
 800cb16:	4628      	mov	r0, r5
 800cb18:	47b0      	blx	r6
 800cb1a:	2800      	cmp	r0, #0
 800cb1c:	dc08      	bgt.n	800cb30 <__sflush_r+0xfc>
 800cb1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cb22:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cb26:	81a3      	strh	r3, [r4, #12]
 800cb28:	f04f 30ff 	mov.w	r0, #4294967295
 800cb2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb30:	4407      	add	r7, r0
 800cb32:	eba8 0800 	sub.w	r8, r8, r0
 800cb36:	e7e7      	b.n	800cb08 <__sflush_r+0xd4>
 800cb38:	dfbffffe 	.word	0xdfbffffe

0800cb3c <_fflush_r>:
 800cb3c:	b538      	push	{r3, r4, r5, lr}
 800cb3e:	690b      	ldr	r3, [r1, #16]
 800cb40:	4605      	mov	r5, r0
 800cb42:	460c      	mov	r4, r1
 800cb44:	b913      	cbnz	r3, 800cb4c <_fflush_r+0x10>
 800cb46:	2500      	movs	r5, #0
 800cb48:	4628      	mov	r0, r5
 800cb4a:	bd38      	pop	{r3, r4, r5, pc}
 800cb4c:	b118      	cbz	r0, 800cb56 <_fflush_r+0x1a>
 800cb4e:	6a03      	ldr	r3, [r0, #32]
 800cb50:	b90b      	cbnz	r3, 800cb56 <_fflush_r+0x1a>
 800cb52:	f7fd f88d 	bl	8009c70 <__sinit>
 800cb56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d0f3      	beq.n	800cb46 <_fflush_r+0xa>
 800cb5e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800cb60:	07d0      	lsls	r0, r2, #31
 800cb62:	d404      	bmi.n	800cb6e <_fflush_r+0x32>
 800cb64:	0599      	lsls	r1, r3, #22
 800cb66:	d402      	bmi.n	800cb6e <_fflush_r+0x32>
 800cb68:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cb6a:	f7fd faf2 	bl	800a152 <__retarget_lock_acquire_recursive>
 800cb6e:	4628      	mov	r0, r5
 800cb70:	4621      	mov	r1, r4
 800cb72:	f7ff ff5f 	bl	800ca34 <__sflush_r>
 800cb76:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cb78:	07da      	lsls	r2, r3, #31
 800cb7a:	4605      	mov	r5, r0
 800cb7c:	d4e4      	bmi.n	800cb48 <_fflush_r+0xc>
 800cb7e:	89a3      	ldrh	r3, [r4, #12]
 800cb80:	059b      	lsls	r3, r3, #22
 800cb82:	d4e1      	bmi.n	800cb48 <_fflush_r+0xc>
 800cb84:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cb86:	f7fd fae5 	bl	800a154 <__retarget_lock_release_recursive>
 800cb8a:	e7dd      	b.n	800cb48 <_fflush_r+0xc>

0800cb8c <__swhatbuf_r>:
 800cb8c:	b570      	push	{r4, r5, r6, lr}
 800cb8e:	460c      	mov	r4, r1
 800cb90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cb94:	2900      	cmp	r1, #0
 800cb96:	b096      	sub	sp, #88	@ 0x58
 800cb98:	4615      	mov	r5, r2
 800cb9a:	461e      	mov	r6, r3
 800cb9c:	da0d      	bge.n	800cbba <__swhatbuf_r+0x2e>
 800cb9e:	89a3      	ldrh	r3, [r4, #12]
 800cba0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800cba4:	f04f 0100 	mov.w	r1, #0
 800cba8:	bf14      	ite	ne
 800cbaa:	2340      	movne	r3, #64	@ 0x40
 800cbac:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800cbb0:	2000      	movs	r0, #0
 800cbb2:	6031      	str	r1, [r6, #0]
 800cbb4:	602b      	str	r3, [r5, #0]
 800cbb6:	b016      	add	sp, #88	@ 0x58
 800cbb8:	bd70      	pop	{r4, r5, r6, pc}
 800cbba:	466a      	mov	r2, sp
 800cbbc:	f000 f874 	bl	800cca8 <_fstat_r>
 800cbc0:	2800      	cmp	r0, #0
 800cbc2:	dbec      	blt.n	800cb9e <__swhatbuf_r+0x12>
 800cbc4:	9901      	ldr	r1, [sp, #4]
 800cbc6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800cbca:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800cbce:	4259      	negs	r1, r3
 800cbd0:	4159      	adcs	r1, r3
 800cbd2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cbd6:	e7eb      	b.n	800cbb0 <__swhatbuf_r+0x24>

0800cbd8 <__smakebuf_r>:
 800cbd8:	898b      	ldrh	r3, [r1, #12]
 800cbda:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cbdc:	079d      	lsls	r5, r3, #30
 800cbde:	4606      	mov	r6, r0
 800cbe0:	460c      	mov	r4, r1
 800cbe2:	d507      	bpl.n	800cbf4 <__smakebuf_r+0x1c>
 800cbe4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800cbe8:	6023      	str	r3, [r4, #0]
 800cbea:	6123      	str	r3, [r4, #16]
 800cbec:	2301      	movs	r3, #1
 800cbee:	6163      	str	r3, [r4, #20]
 800cbf0:	b003      	add	sp, #12
 800cbf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cbf4:	ab01      	add	r3, sp, #4
 800cbf6:	466a      	mov	r2, sp
 800cbf8:	f7ff ffc8 	bl	800cb8c <__swhatbuf_r>
 800cbfc:	9f00      	ldr	r7, [sp, #0]
 800cbfe:	4605      	mov	r5, r0
 800cc00:	4639      	mov	r1, r7
 800cc02:	4630      	mov	r0, r6
 800cc04:	f7fe f90e 	bl	800ae24 <_malloc_r>
 800cc08:	b948      	cbnz	r0, 800cc1e <__smakebuf_r+0x46>
 800cc0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cc0e:	059a      	lsls	r2, r3, #22
 800cc10:	d4ee      	bmi.n	800cbf0 <__smakebuf_r+0x18>
 800cc12:	f023 0303 	bic.w	r3, r3, #3
 800cc16:	f043 0302 	orr.w	r3, r3, #2
 800cc1a:	81a3      	strh	r3, [r4, #12]
 800cc1c:	e7e2      	b.n	800cbe4 <__smakebuf_r+0xc>
 800cc1e:	89a3      	ldrh	r3, [r4, #12]
 800cc20:	6020      	str	r0, [r4, #0]
 800cc22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cc26:	81a3      	strh	r3, [r4, #12]
 800cc28:	9b01      	ldr	r3, [sp, #4]
 800cc2a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800cc2e:	b15b      	cbz	r3, 800cc48 <__smakebuf_r+0x70>
 800cc30:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cc34:	4630      	mov	r0, r6
 800cc36:	f000 f849 	bl	800cccc <_isatty_r>
 800cc3a:	b128      	cbz	r0, 800cc48 <__smakebuf_r+0x70>
 800cc3c:	89a3      	ldrh	r3, [r4, #12]
 800cc3e:	f023 0303 	bic.w	r3, r3, #3
 800cc42:	f043 0301 	orr.w	r3, r3, #1
 800cc46:	81a3      	strh	r3, [r4, #12]
 800cc48:	89a3      	ldrh	r3, [r4, #12]
 800cc4a:	431d      	orrs	r5, r3
 800cc4c:	81a5      	strh	r5, [r4, #12]
 800cc4e:	e7cf      	b.n	800cbf0 <__smakebuf_r+0x18>

0800cc50 <memmove>:
 800cc50:	4288      	cmp	r0, r1
 800cc52:	b510      	push	{r4, lr}
 800cc54:	eb01 0402 	add.w	r4, r1, r2
 800cc58:	d902      	bls.n	800cc60 <memmove+0x10>
 800cc5a:	4284      	cmp	r4, r0
 800cc5c:	4623      	mov	r3, r4
 800cc5e:	d807      	bhi.n	800cc70 <memmove+0x20>
 800cc60:	1e43      	subs	r3, r0, #1
 800cc62:	42a1      	cmp	r1, r4
 800cc64:	d008      	beq.n	800cc78 <memmove+0x28>
 800cc66:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cc6a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cc6e:	e7f8      	b.n	800cc62 <memmove+0x12>
 800cc70:	4402      	add	r2, r0
 800cc72:	4601      	mov	r1, r0
 800cc74:	428a      	cmp	r2, r1
 800cc76:	d100      	bne.n	800cc7a <memmove+0x2a>
 800cc78:	bd10      	pop	{r4, pc}
 800cc7a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cc7e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cc82:	e7f7      	b.n	800cc74 <memmove+0x24>

0800cc84 <strncmp>:
 800cc84:	b510      	push	{r4, lr}
 800cc86:	b16a      	cbz	r2, 800cca4 <strncmp+0x20>
 800cc88:	3901      	subs	r1, #1
 800cc8a:	1884      	adds	r4, r0, r2
 800cc8c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cc90:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800cc94:	429a      	cmp	r2, r3
 800cc96:	d103      	bne.n	800cca0 <strncmp+0x1c>
 800cc98:	42a0      	cmp	r0, r4
 800cc9a:	d001      	beq.n	800cca0 <strncmp+0x1c>
 800cc9c:	2a00      	cmp	r2, #0
 800cc9e:	d1f5      	bne.n	800cc8c <strncmp+0x8>
 800cca0:	1ad0      	subs	r0, r2, r3
 800cca2:	bd10      	pop	{r4, pc}
 800cca4:	4610      	mov	r0, r2
 800cca6:	e7fc      	b.n	800cca2 <strncmp+0x1e>

0800cca8 <_fstat_r>:
 800cca8:	b538      	push	{r3, r4, r5, lr}
 800ccaa:	4d07      	ldr	r5, [pc, #28]	@ (800ccc8 <_fstat_r+0x20>)
 800ccac:	2300      	movs	r3, #0
 800ccae:	4604      	mov	r4, r0
 800ccb0:	4608      	mov	r0, r1
 800ccb2:	4611      	mov	r1, r2
 800ccb4:	602b      	str	r3, [r5, #0]
 800ccb6:	f7f4 f91b 	bl	8000ef0 <_fstat>
 800ccba:	1c43      	adds	r3, r0, #1
 800ccbc:	d102      	bne.n	800ccc4 <_fstat_r+0x1c>
 800ccbe:	682b      	ldr	r3, [r5, #0]
 800ccc0:	b103      	cbz	r3, 800ccc4 <_fstat_r+0x1c>
 800ccc2:	6023      	str	r3, [r4, #0]
 800ccc4:	bd38      	pop	{r3, r4, r5, pc}
 800ccc6:	bf00      	nop
 800ccc8:	24004e14 	.word	0x24004e14

0800cccc <_isatty_r>:
 800cccc:	b538      	push	{r3, r4, r5, lr}
 800ccce:	4d06      	ldr	r5, [pc, #24]	@ (800cce8 <_isatty_r+0x1c>)
 800ccd0:	2300      	movs	r3, #0
 800ccd2:	4604      	mov	r4, r0
 800ccd4:	4608      	mov	r0, r1
 800ccd6:	602b      	str	r3, [r5, #0]
 800ccd8:	f7f4 f91a 	bl	8000f10 <_isatty>
 800ccdc:	1c43      	adds	r3, r0, #1
 800ccde:	d102      	bne.n	800cce6 <_isatty_r+0x1a>
 800cce0:	682b      	ldr	r3, [r5, #0]
 800cce2:	b103      	cbz	r3, 800cce6 <_isatty_r+0x1a>
 800cce4:	6023      	str	r3, [r4, #0]
 800cce6:	bd38      	pop	{r3, r4, r5, pc}
 800cce8:	24004e14 	.word	0x24004e14

0800ccec <_sbrk_r>:
 800ccec:	b538      	push	{r3, r4, r5, lr}
 800ccee:	4d06      	ldr	r5, [pc, #24]	@ (800cd08 <_sbrk_r+0x1c>)
 800ccf0:	2300      	movs	r3, #0
 800ccf2:	4604      	mov	r4, r0
 800ccf4:	4608      	mov	r0, r1
 800ccf6:	602b      	str	r3, [r5, #0]
 800ccf8:	f7f4 f922 	bl	8000f40 <_sbrk>
 800ccfc:	1c43      	adds	r3, r0, #1
 800ccfe:	d102      	bne.n	800cd06 <_sbrk_r+0x1a>
 800cd00:	682b      	ldr	r3, [r5, #0]
 800cd02:	b103      	cbz	r3, 800cd06 <_sbrk_r+0x1a>
 800cd04:	6023      	str	r3, [r4, #0]
 800cd06:	bd38      	pop	{r3, r4, r5, pc}
 800cd08:	24004e14 	.word	0x24004e14
 800cd0c:	00000000 	.word	0x00000000

0800cd10 <nan>:
 800cd10:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800cd18 <nan+0x8>
 800cd14:	4770      	bx	lr
 800cd16:	bf00      	nop
 800cd18:	00000000 	.word	0x00000000
 800cd1c:	7ff80000 	.word	0x7ff80000

0800cd20 <__assert_func>:
 800cd20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cd22:	4614      	mov	r4, r2
 800cd24:	461a      	mov	r2, r3
 800cd26:	4b09      	ldr	r3, [pc, #36]	@ (800cd4c <__assert_func+0x2c>)
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	4605      	mov	r5, r0
 800cd2c:	68d8      	ldr	r0, [r3, #12]
 800cd2e:	b954      	cbnz	r4, 800cd46 <__assert_func+0x26>
 800cd30:	4b07      	ldr	r3, [pc, #28]	@ (800cd50 <__assert_func+0x30>)
 800cd32:	461c      	mov	r4, r3
 800cd34:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cd38:	9100      	str	r1, [sp, #0]
 800cd3a:	462b      	mov	r3, r5
 800cd3c:	4905      	ldr	r1, [pc, #20]	@ (800cd54 <__assert_func+0x34>)
 800cd3e:	f000 fba7 	bl	800d490 <fiprintf>
 800cd42:	f000 fbb7 	bl	800d4b4 <abort>
 800cd46:	4b04      	ldr	r3, [pc, #16]	@ (800cd58 <__assert_func+0x38>)
 800cd48:	e7f4      	b.n	800cd34 <__assert_func+0x14>
 800cd4a:	bf00      	nop
 800cd4c:	24000020 	.word	0x24000020
 800cd50:	0800d9fd 	.word	0x0800d9fd
 800cd54:	0800d9cf 	.word	0x0800d9cf
 800cd58:	0800d9c2 	.word	0x0800d9c2

0800cd5c <_calloc_r>:
 800cd5c:	b570      	push	{r4, r5, r6, lr}
 800cd5e:	fba1 5402 	umull	r5, r4, r1, r2
 800cd62:	b93c      	cbnz	r4, 800cd74 <_calloc_r+0x18>
 800cd64:	4629      	mov	r1, r5
 800cd66:	f7fe f85d 	bl	800ae24 <_malloc_r>
 800cd6a:	4606      	mov	r6, r0
 800cd6c:	b928      	cbnz	r0, 800cd7a <_calloc_r+0x1e>
 800cd6e:	2600      	movs	r6, #0
 800cd70:	4630      	mov	r0, r6
 800cd72:	bd70      	pop	{r4, r5, r6, pc}
 800cd74:	220c      	movs	r2, #12
 800cd76:	6002      	str	r2, [r0, #0]
 800cd78:	e7f9      	b.n	800cd6e <_calloc_r+0x12>
 800cd7a:	462a      	mov	r2, r5
 800cd7c:	4621      	mov	r1, r4
 800cd7e:	f7fd f915 	bl	8009fac <memset>
 800cd82:	e7f5      	b.n	800cd70 <_calloc_r+0x14>

0800cd84 <rshift>:
 800cd84:	6903      	ldr	r3, [r0, #16]
 800cd86:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800cd8a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cd8e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800cd92:	f100 0414 	add.w	r4, r0, #20
 800cd96:	dd45      	ble.n	800ce24 <rshift+0xa0>
 800cd98:	f011 011f 	ands.w	r1, r1, #31
 800cd9c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800cda0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800cda4:	d10c      	bne.n	800cdc0 <rshift+0x3c>
 800cda6:	f100 0710 	add.w	r7, r0, #16
 800cdaa:	4629      	mov	r1, r5
 800cdac:	42b1      	cmp	r1, r6
 800cdae:	d334      	bcc.n	800ce1a <rshift+0x96>
 800cdb0:	1a9b      	subs	r3, r3, r2
 800cdb2:	009b      	lsls	r3, r3, #2
 800cdb4:	1eea      	subs	r2, r5, #3
 800cdb6:	4296      	cmp	r6, r2
 800cdb8:	bf38      	it	cc
 800cdba:	2300      	movcc	r3, #0
 800cdbc:	4423      	add	r3, r4
 800cdbe:	e015      	b.n	800cdec <rshift+0x68>
 800cdc0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800cdc4:	f1c1 0820 	rsb	r8, r1, #32
 800cdc8:	40cf      	lsrs	r7, r1
 800cdca:	f105 0e04 	add.w	lr, r5, #4
 800cdce:	46a1      	mov	r9, r4
 800cdd0:	4576      	cmp	r6, lr
 800cdd2:	46f4      	mov	ip, lr
 800cdd4:	d815      	bhi.n	800ce02 <rshift+0x7e>
 800cdd6:	1a9a      	subs	r2, r3, r2
 800cdd8:	0092      	lsls	r2, r2, #2
 800cdda:	3a04      	subs	r2, #4
 800cddc:	3501      	adds	r5, #1
 800cdde:	42ae      	cmp	r6, r5
 800cde0:	bf38      	it	cc
 800cde2:	2200      	movcc	r2, #0
 800cde4:	18a3      	adds	r3, r4, r2
 800cde6:	50a7      	str	r7, [r4, r2]
 800cde8:	b107      	cbz	r7, 800cdec <rshift+0x68>
 800cdea:	3304      	adds	r3, #4
 800cdec:	1b1a      	subs	r2, r3, r4
 800cdee:	42a3      	cmp	r3, r4
 800cdf0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800cdf4:	bf08      	it	eq
 800cdf6:	2300      	moveq	r3, #0
 800cdf8:	6102      	str	r2, [r0, #16]
 800cdfa:	bf08      	it	eq
 800cdfc:	6143      	streq	r3, [r0, #20]
 800cdfe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ce02:	f8dc c000 	ldr.w	ip, [ip]
 800ce06:	fa0c fc08 	lsl.w	ip, ip, r8
 800ce0a:	ea4c 0707 	orr.w	r7, ip, r7
 800ce0e:	f849 7b04 	str.w	r7, [r9], #4
 800ce12:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ce16:	40cf      	lsrs	r7, r1
 800ce18:	e7da      	b.n	800cdd0 <rshift+0x4c>
 800ce1a:	f851 cb04 	ldr.w	ip, [r1], #4
 800ce1e:	f847 cf04 	str.w	ip, [r7, #4]!
 800ce22:	e7c3      	b.n	800cdac <rshift+0x28>
 800ce24:	4623      	mov	r3, r4
 800ce26:	e7e1      	b.n	800cdec <rshift+0x68>

0800ce28 <__hexdig_fun>:
 800ce28:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800ce2c:	2b09      	cmp	r3, #9
 800ce2e:	d802      	bhi.n	800ce36 <__hexdig_fun+0xe>
 800ce30:	3820      	subs	r0, #32
 800ce32:	b2c0      	uxtb	r0, r0
 800ce34:	4770      	bx	lr
 800ce36:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800ce3a:	2b05      	cmp	r3, #5
 800ce3c:	d801      	bhi.n	800ce42 <__hexdig_fun+0x1a>
 800ce3e:	3847      	subs	r0, #71	@ 0x47
 800ce40:	e7f7      	b.n	800ce32 <__hexdig_fun+0xa>
 800ce42:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800ce46:	2b05      	cmp	r3, #5
 800ce48:	d801      	bhi.n	800ce4e <__hexdig_fun+0x26>
 800ce4a:	3827      	subs	r0, #39	@ 0x27
 800ce4c:	e7f1      	b.n	800ce32 <__hexdig_fun+0xa>
 800ce4e:	2000      	movs	r0, #0
 800ce50:	4770      	bx	lr
	...

0800ce54 <__gethex>:
 800ce54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce58:	b085      	sub	sp, #20
 800ce5a:	468a      	mov	sl, r1
 800ce5c:	9302      	str	r3, [sp, #8]
 800ce5e:	680b      	ldr	r3, [r1, #0]
 800ce60:	9001      	str	r0, [sp, #4]
 800ce62:	4690      	mov	r8, r2
 800ce64:	1c9c      	adds	r4, r3, #2
 800ce66:	46a1      	mov	r9, r4
 800ce68:	f814 0b01 	ldrb.w	r0, [r4], #1
 800ce6c:	2830      	cmp	r0, #48	@ 0x30
 800ce6e:	d0fa      	beq.n	800ce66 <__gethex+0x12>
 800ce70:	eba9 0303 	sub.w	r3, r9, r3
 800ce74:	f1a3 0b02 	sub.w	fp, r3, #2
 800ce78:	f7ff ffd6 	bl	800ce28 <__hexdig_fun>
 800ce7c:	4605      	mov	r5, r0
 800ce7e:	2800      	cmp	r0, #0
 800ce80:	d168      	bne.n	800cf54 <__gethex+0x100>
 800ce82:	49a0      	ldr	r1, [pc, #640]	@ (800d104 <__gethex+0x2b0>)
 800ce84:	2201      	movs	r2, #1
 800ce86:	4648      	mov	r0, r9
 800ce88:	f7ff fefc 	bl	800cc84 <strncmp>
 800ce8c:	4607      	mov	r7, r0
 800ce8e:	2800      	cmp	r0, #0
 800ce90:	d167      	bne.n	800cf62 <__gethex+0x10e>
 800ce92:	f899 0001 	ldrb.w	r0, [r9, #1]
 800ce96:	4626      	mov	r6, r4
 800ce98:	f7ff ffc6 	bl	800ce28 <__hexdig_fun>
 800ce9c:	2800      	cmp	r0, #0
 800ce9e:	d062      	beq.n	800cf66 <__gethex+0x112>
 800cea0:	4623      	mov	r3, r4
 800cea2:	7818      	ldrb	r0, [r3, #0]
 800cea4:	2830      	cmp	r0, #48	@ 0x30
 800cea6:	4699      	mov	r9, r3
 800cea8:	f103 0301 	add.w	r3, r3, #1
 800ceac:	d0f9      	beq.n	800cea2 <__gethex+0x4e>
 800ceae:	f7ff ffbb 	bl	800ce28 <__hexdig_fun>
 800ceb2:	fab0 f580 	clz	r5, r0
 800ceb6:	096d      	lsrs	r5, r5, #5
 800ceb8:	f04f 0b01 	mov.w	fp, #1
 800cebc:	464a      	mov	r2, r9
 800cebe:	4616      	mov	r6, r2
 800cec0:	3201      	adds	r2, #1
 800cec2:	7830      	ldrb	r0, [r6, #0]
 800cec4:	f7ff ffb0 	bl	800ce28 <__hexdig_fun>
 800cec8:	2800      	cmp	r0, #0
 800ceca:	d1f8      	bne.n	800cebe <__gethex+0x6a>
 800cecc:	498d      	ldr	r1, [pc, #564]	@ (800d104 <__gethex+0x2b0>)
 800cece:	2201      	movs	r2, #1
 800ced0:	4630      	mov	r0, r6
 800ced2:	f7ff fed7 	bl	800cc84 <strncmp>
 800ced6:	2800      	cmp	r0, #0
 800ced8:	d13f      	bne.n	800cf5a <__gethex+0x106>
 800ceda:	b944      	cbnz	r4, 800ceee <__gethex+0x9a>
 800cedc:	1c74      	adds	r4, r6, #1
 800cede:	4622      	mov	r2, r4
 800cee0:	4616      	mov	r6, r2
 800cee2:	3201      	adds	r2, #1
 800cee4:	7830      	ldrb	r0, [r6, #0]
 800cee6:	f7ff ff9f 	bl	800ce28 <__hexdig_fun>
 800ceea:	2800      	cmp	r0, #0
 800ceec:	d1f8      	bne.n	800cee0 <__gethex+0x8c>
 800ceee:	1ba4      	subs	r4, r4, r6
 800cef0:	00a7      	lsls	r7, r4, #2
 800cef2:	7833      	ldrb	r3, [r6, #0]
 800cef4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800cef8:	2b50      	cmp	r3, #80	@ 0x50
 800cefa:	d13e      	bne.n	800cf7a <__gethex+0x126>
 800cefc:	7873      	ldrb	r3, [r6, #1]
 800cefe:	2b2b      	cmp	r3, #43	@ 0x2b
 800cf00:	d033      	beq.n	800cf6a <__gethex+0x116>
 800cf02:	2b2d      	cmp	r3, #45	@ 0x2d
 800cf04:	d034      	beq.n	800cf70 <__gethex+0x11c>
 800cf06:	1c71      	adds	r1, r6, #1
 800cf08:	2400      	movs	r4, #0
 800cf0a:	7808      	ldrb	r0, [r1, #0]
 800cf0c:	f7ff ff8c 	bl	800ce28 <__hexdig_fun>
 800cf10:	1e43      	subs	r3, r0, #1
 800cf12:	b2db      	uxtb	r3, r3
 800cf14:	2b18      	cmp	r3, #24
 800cf16:	d830      	bhi.n	800cf7a <__gethex+0x126>
 800cf18:	f1a0 0210 	sub.w	r2, r0, #16
 800cf1c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800cf20:	f7ff ff82 	bl	800ce28 <__hexdig_fun>
 800cf24:	f100 3cff 	add.w	ip, r0, #4294967295
 800cf28:	fa5f fc8c 	uxtb.w	ip, ip
 800cf2c:	f1bc 0f18 	cmp.w	ip, #24
 800cf30:	f04f 030a 	mov.w	r3, #10
 800cf34:	d91e      	bls.n	800cf74 <__gethex+0x120>
 800cf36:	b104      	cbz	r4, 800cf3a <__gethex+0xe6>
 800cf38:	4252      	negs	r2, r2
 800cf3a:	4417      	add	r7, r2
 800cf3c:	f8ca 1000 	str.w	r1, [sl]
 800cf40:	b1ed      	cbz	r5, 800cf7e <__gethex+0x12a>
 800cf42:	f1bb 0f00 	cmp.w	fp, #0
 800cf46:	bf0c      	ite	eq
 800cf48:	2506      	moveq	r5, #6
 800cf4a:	2500      	movne	r5, #0
 800cf4c:	4628      	mov	r0, r5
 800cf4e:	b005      	add	sp, #20
 800cf50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf54:	2500      	movs	r5, #0
 800cf56:	462c      	mov	r4, r5
 800cf58:	e7b0      	b.n	800cebc <__gethex+0x68>
 800cf5a:	2c00      	cmp	r4, #0
 800cf5c:	d1c7      	bne.n	800ceee <__gethex+0x9a>
 800cf5e:	4627      	mov	r7, r4
 800cf60:	e7c7      	b.n	800cef2 <__gethex+0x9e>
 800cf62:	464e      	mov	r6, r9
 800cf64:	462f      	mov	r7, r5
 800cf66:	2501      	movs	r5, #1
 800cf68:	e7c3      	b.n	800cef2 <__gethex+0x9e>
 800cf6a:	2400      	movs	r4, #0
 800cf6c:	1cb1      	adds	r1, r6, #2
 800cf6e:	e7cc      	b.n	800cf0a <__gethex+0xb6>
 800cf70:	2401      	movs	r4, #1
 800cf72:	e7fb      	b.n	800cf6c <__gethex+0x118>
 800cf74:	fb03 0002 	mla	r0, r3, r2, r0
 800cf78:	e7ce      	b.n	800cf18 <__gethex+0xc4>
 800cf7a:	4631      	mov	r1, r6
 800cf7c:	e7de      	b.n	800cf3c <__gethex+0xe8>
 800cf7e:	eba6 0309 	sub.w	r3, r6, r9
 800cf82:	3b01      	subs	r3, #1
 800cf84:	4629      	mov	r1, r5
 800cf86:	2b07      	cmp	r3, #7
 800cf88:	dc0a      	bgt.n	800cfa0 <__gethex+0x14c>
 800cf8a:	9801      	ldr	r0, [sp, #4]
 800cf8c:	f7fd ffd6 	bl	800af3c <_Balloc>
 800cf90:	4604      	mov	r4, r0
 800cf92:	b940      	cbnz	r0, 800cfa6 <__gethex+0x152>
 800cf94:	4b5c      	ldr	r3, [pc, #368]	@ (800d108 <__gethex+0x2b4>)
 800cf96:	4602      	mov	r2, r0
 800cf98:	21e4      	movs	r1, #228	@ 0xe4
 800cf9a:	485c      	ldr	r0, [pc, #368]	@ (800d10c <__gethex+0x2b8>)
 800cf9c:	f7ff fec0 	bl	800cd20 <__assert_func>
 800cfa0:	3101      	adds	r1, #1
 800cfa2:	105b      	asrs	r3, r3, #1
 800cfa4:	e7ef      	b.n	800cf86 <__gethex+0x132>
 800cfa6:	f100 0a14 	add.w	sl, r0, #20
 800cfaa:	2300      	movs	r3, #0
 800cfac:	4655      	mov	r5, sl
 800cfae:	469b      	mov	fp, r3
 800cfb0:	45b1      	cmp	r9, r6
 800cfb2:	d337      	bcc.n	800d024 <__gethex+0x1d0>
 800cfb4:	f845 bb04 	str.w	fp, [r5], #4
 800cfb8:	eba5 050a 	sub.w	r5, r5, sl
 800cfbc:	10ad      	asrs	r5, r5, #2
 800cfbe:	6125      	str	r5, [r4, #16]
 800cfc0:	4658      	mov	r0, fp
 800cfc2:	f7fe f8ad 	bl	800b120 <__hi0bits>
 800cfc6:	016d      	lsls	r5, r5, #5
 800cfc8:	f8d8 6000 	ldr.w	r6, [r8]
 800cfcc:	1a2d      	subs	r5, r5, r0
 800cfce:	42b5      	cmp	r5, r6
 800cfd0:	dd54      	ble.n	800d07c <__gethex+0x228>
 800cfd2:	1bad      	subs	r5, r5, r6
 800cfd4:	4629      	mov	r1, r5
 800cfd6:	4620      	mov	r0, r4
 800cfd8:	f7fe fc3e 	bl	800b858 <__any_on>
 800cfdc:	4681      	mov	r9, r0
 800cfde:	b178      	cbz	r0, 800d000 <__gethex+0x1ac>
 800cfe0:	1e6b      	subs	r3, r5, #1
 800cfe2:	1159      	asrs	r1, r3, #5
 800cfe4:	f003 021f 	and.w	r2, r3, #31
 800cfe8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800cfec:	f04f 0901 	mov.w	r9, #1
 800cff0:	fa09 f202 	lsl.w	r2, r9, r2
 800cff4:	420a      	tst	r2, r1
 800cff6:	d003      	beq.n	800d000 <__gethex+0x1ac>
 800cff8:	454b      	cmp	r3, r9
 800cffa:	dc36      	bgt.n	800d06a <__gethex+0x216>
 800cffc:	f04f 0902 	mov.w	r9, #2
 800d000:	4629      	mov	r1, r5
 800d002:	4620      	mov	r0, r4
 800d004:	f7ff febe 	bl	800cd84 <rshift>
 800d008:	442f      	add	r7, r5
 800d00a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d00e:	42bb      	cmp	r3, r7
 800d010:	da42      	bge.n	800d098 <__gethex+0x244>
 800d012:	9801      	ldr	r0, [sp, #4]
 800d014:	4621      	mov	r1, r4
 800d016:	f7fd ffd1 	bl	800afbc <_Bfree>
 800d01a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d01c:	2300      	movs	r3, #0
 800d01e:	6013      	str	r3, [r2, #0]
 800d020:	25a3      	movs	r5, #163	@ 0xa3
 800d022:	e793      	b.n	800cf4c <__gethex+0xf8>
 800d024:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800d028:	2a2e      	cmp	r2, #46	@ 0x2e
 800d02a:	d012      	beq.n	800d052 <__gethex+0x1fe>
 800d02c:	2b20      	cmp	r3, #32
 800d02e:	d104      	bne.n	800d03a <__gethex+0x1e6>
 800d030:	f845 bb04 	str.w	fp, [r5], #4
 800d034:	f04f 0b00 	mov.w	fp, #0
 800d038:	465b      	mov	r3, fp
 800d03a:	7830      	ldrb	r0, [r6, #0]
 800d03c:	9303      	str	r3, [sp, #12]
 800d03e:	f7ff fef3 	bl	800ce28 <__hexdig_fun>
 800d042:	9b03      	ldr	r3, [sp, #12]
 800d044:	f000 000f 	and.w	r0, r0, #15
 800d048:	4098      	lsls	r0, r3
 800d04a:	ea4b 0b00 	orr.w	fp, fp, r0
 800d04e:	3304      	adds	r3, #4
 800d050:	e7ae      	b.n	800cfb0 <__gethex+0x15c>
 800d052:	45b1      	cmp	r9, r6
 800d054:	d8ea      	bhi.n	800d02c <__gethex+0x1d8>
 800d056:	492b      	ldr	r1, [pc, #172]	@ (800d104 <__gethex+0x2b0>)
 800d058:	9303      	str	r3, [sp, #12]
 800d05a:	2201      	movs	r2, #1
 800d05c:	4630      	mov	r0, r6
 800d05e:	f7ff fe11 	bl	800cc84 <strncmp>
 800d062:	9b03      	ldr	r3, [sp, #12]
 800d064:	2800      	cmp	r0, #0
 800d066:	d1e1      	bne.n	800d02c <__gethex+0x1d8>
 800d068:	e7a2      	b.n	800cfb0 <__gethex+0x15c>
 800d06a:	1ea9      	subs	r1, r5, #2
 800d06c:	4620      	mov	r0, r4
 800d06e:	f7fe fbf3 	bl	800b858 <__any_on>
 800d072:	2800      	cmp	r0, #0
 800d074:	d0c2      	beq.n	800cffc <__gethex+0x1a8>
 800d076:	f04f 0903 	mov.w	r9, #3
 800d07a:	e7c1      	b.n	800d000 <__gethex+0x1ac>
 800d07c:	da09      	bge.n	800d092 <__gethex+0x23e>
 800d07e:	1b75      	subs	r5, r6, r5
 800d080:	4621      	mov	r1, r4
 800d082:	9801      	ldr	r0, [sp, #4]
 800d084:	462a      	mov	r2, r5
 800d086:	f7fe f9b1 	bl	800b3ec <__lshift>
 800d08a:	1b7f      	subs	r7, r7, r5
 800d08c:	4604      	mov	r4, r0
 800d08e:	f100 0a14 	add.w	sl, r0, #20
 800d092:	f04f 0900 	mov.w	r9, #0
 800d096:	e7b8      	b.n	800d00a <__gethex+0x1b6>
 800d098:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800d09c:	42bd      	cmp	r5, r7
 800d09e:	dd6f      	ble.n	800d180 <__gethex+0x32c>
 800d0a0:	1bed      	subs	r5, r5, r7
 800d0a2:	42ae      	cmp	r6, r5
 800d0a4:	dc34      	bgt.n	800d110 <__gethex+0x2bc>
 800d0a6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d0aa:	2b02      	cmp	r3, #2
 800d0ac:	d022      	beq.n	800d0f4 <__gethex+0x2a0>
 800d0ae:	2b03      	cmp	r3, #3
 800d0b0:	d024      	beq.n	800d0fc <__gethex+0x2a8>
 800d0b2:	2b01      	cmp	r3, #1
 800d0b4:	d115      	bne.n	800d0e2 <__gethex+0x28e>
 800d0b6:	42ae      	cmp	r6, r5
 800d0b8:	d113      	bne.n	800d0e2 <__gethex+0x28e>
 800d0ba:	2e01      	cmp	r6, #1
 800d0bc:	d10b      	bne.n	800d0d6 <__gethex+0x282>
 800d0be:	9a02      	ldr	r2, [sp, #8]
 800d0c0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d0c4:	6013      	str	r3, [r2, #0]
 800d0c6:	2301      	movs	r3, #1
 800d0c8:	6123      	str	r3, [r4, #16]
 800d0ca:	f8ca 3000 	str.w	r3, [sl]
 800d0ce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d0d0:	2562      	movs	r5, #98	@ 0x62
 800d0d2:	601c      	str	r4, [r3, #0]
 800d0d4:	e73a      	b.n	800cf4c <__gethex+0xf8>
 800d0d6:	1e71      	subs	r1, r6, #1
 800d0d8:	4620      	mov	r0, r4
 800d0da:	f7fe fbbd 	bl	800b858 <__any_on>
 800d0de:	2800      	cmp	r0, #0
 800d0e0:	d1ed      	bne.n	800d0be <__gethex+0x26a>
 800d0e2:	9801      	ldr	r0, [sp, #4]
 800d0e4:	4621      	mov	r1, r4
 800d0e6:	f7fd ff69 	bl	800afbc <_Bfree>
 800d0ea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d0ec:	2300      	movs	r3, #0
 800d0ee:	6013      	str	r3, [r2, #0]
 800d0f0:	2550      	movs	r5, #80	@ 0x50
 800d0f2:	e72b      	b.n	800cf4c <__gethex+0xf8>
 800d0f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d1f3      	bne.n	800d0e2 <__gethex+0x28e>
 800d0fa:	e7e0      	b.n	800d0be <__gethex+0x26a>
 800d0fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d1dd      	bne.n	800d0be <__gethex+0x26a>
 800d102:	e7ee      	b.n	800d0e2 <__gethex+0x28e>
 800d104:	0800d850 	.word	0x0800d850
 800d108:	0800d6e5 	.word	0x0800d6e5
 800d10c:	0800d9fe 	.word	0x0800d9fe
 800d110:	1e6f      	subs	r7, r5, #1
 800d112:	f1b9 0f00 	cmp.w	r9, #0
 800d116:	d130      	bne.n	800d17a <__gethex+0x326>
 800d118:	b127      	cbz	r7, 800d124 <__gethex+0x2d0>
 800d11a:	4639      	mov	r1, r7
 800d11c:	4620      	mov	r0, r4
 800d11e:	f7fe fb9b 	bl	800b858 <__any_on>
 800d122:	4681      	mov	r9, r0
 800d124:	117a      	asrs	r2, r7, #5
 800d126:	2301      	movs	r3, #1
 800d128:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800d12c:	f007 071f 	and.w	r7, r7, #31
 800d130:	40bb      	lsls	r3, r7
 800d132:	4213      	tst	r3, r2
 800d134:	4629      	mov	r1, r5
 800d136:	4620      	mov	r0, r4
 800d138:	bf18      	it	ne
 800d13a:	f049 0902 	orrne.w	r9, r9, #2
 800d13e:	f7ff fe21 	bl	800cd84 <rshift>
 800d142:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800d146:	1b76      	subs	r6, r6, r5
 800d148:	2502      	movs	r5, #2
 800d14a:	f1b9 0f00 	cmp.w	r9, #0
 800d14e:	d047      	beq.n	800d1e0 <__gethex+0x38c>
 800d150:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d154:	2b02      	cmp	r3, #2
 800d156:	d015      	beq.n	800d184 <__gethex+0x330>
 800d158:	2b03      	cmp	r3, #3
 800d15a:	d017      	beq.n	800d18c <__gethex+0x338>
 800d15c:	2b01      	cmp	r3, #1
 800d15e:	d109      	bne.n	800d174 <__gethex+0x320>
 800d160:	f019 0f02 	tst.w	r9, #2
 800d164:	d006      	beq.n	800d174 <__gethex+0x320>
 800d166:	f8da 3000 	ldr.w	r3, [sl]
 800d16a:	ea49 0903 	orr.w	r9, r9, r3
 800d16e:	f019 0f01 	tst.w	r9, #1
 800d172:	d10e      	bne.n	800d192 <__gethex+0x33e>
 800d174:	f045 0510 	orr.w	r5, r5, #16
 800d178:	e032      	b.n	800d1e0 <__gethex+0x38c>
 800d17a:	f04f 0901 	mov.w	r9, #1
 800d17e:	e7d1      	b.n	800d124 <__gethex+0x2d0>
 800d180:	2501      	movs	r5, #1
 800d182:	e7e2      	b.n	800d14a <__gethex+0x2f6>
 800d184:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d186:	f1c3 0301 	rsb	r3, r3, #1
 800d18a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d18c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d0f0      	beq.n	800d174 <__gethex+0x320>
 800d192:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d196:	f104 0314 	add.w	r3, r4, #20
 800d19a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800d19e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800d1a2:	f04f 0c00 	mov.w	ip, #0
 800d1a6:	4618      	mov	r0, r3
 800d1a8:	f853 2b04 	ldr.w	r2, [r3], #4
 800d1ac:	f1b2 3fff 	cmp.w	r2, #4294967295
 800d1b0:	d01b      	beq.n	800d1ea <__gethex+0x396>
 800d1b2:	3201      	adds	r2, #1
 800d1b4:	6002      	str	r2, [r0, #0]
 800d1b6:	2d02      	cmp	r5, #2
 800d1b8:	f104 0314 	add.w	r3, r4, #20
 800d1bc:	d13c      	bne.n	800d238 <__gethex+0x3e4>
 800d1be:	f8d8 2000 	ldr.w	r2, [r8]
 800d1c2:	3a01      	subs	r2, #1
 800d1c4:	42b2      	cmp	r2, r6
 800d1c6:	d109      	bne.n	800d1dc <__gethex+0x388>
 800d1c8:	1171      	asrs	r1, r6, #5
 800d1ca:	2201      	movs	r2, #1
 800d1cc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d1d0:	f006 061f 	and.w	r6, r6, #31
 800d1d4:	fa02 f606 	lsl.w	r6, r2, r6
 800d1d8:	421e      	tst	r6, r3
 800d1da:	d13a      	bne.n	800d252 <__gethex+0x3fe>
 800d1dc:	f045 0520 	orr.w	r5, r5, #32
 800d1e0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d1e2:	601c      	str	r4, [r3, #0]
 800d1e4:	9b02      	ldr	r3, [sp, #8]
 800d1e6:	601f      	str	r7, [r3, #0]
 800d1e8:	e6b0      	b.n	800cf4c <__gethex+0xf8>
 800d1ea:	4299      	cmp	r1, r3
 800d1ec:	f843 cc04 	str.w	ip, [r3, #-4]
 800d1f0:	d8d9      	bhi.n	800d1a6 <__gethex+0x352>
 800d1f2:	68a3      	ldr	r3, [r4, #8]
 800d1f4:	459b      	cmp	fp, r3
 800d1f6:	db17      	blt.n	800d228 <__gethex+0x3d4>
 800d1f8:	6861      	ldr	r1, [r4, #4]
 800d1fa:	9801      	ldr	r0, [sp, #4]
 800d1fc:	3101      	adds	r1, #1
 800d1fe:	f7fd fe9d 	bl	800af3c <_Balloc>
 800d202:	4681      	mov	r9, r0
 800d204:	b918      	cbnz	r0, 800d20e <__gethex+0x3ba>
 800d206:	4b1a      	ldr	r3, [pc, #104]	@ (800d270 <__gethex+0x41c>)
 800d208:	4602      	mov	r2, r0
 800d20a:	2184      	movs	r1, #132	@ 0x84
 800d20c:	e6c5      	b.n	800cf9a <__gethex+0x146>
 800d20e:	6922      	ldr	r2, [r4, #16]
 800d210:	3202      	adds	r2, #2
 800d212:	f104 010c 	add.w	r1, r4, #12
 800d216:	0092      	lsls	r2, r2, #2
 800d218:	300c      	adds	r0, #12
 800d21a:	f7fc ff9c 	bl	800a156 <memcpy>
 800d21e:	4621      	mov	r1, r4
 800d220:	9801      	ldr	r0, [sp, #4]
 800d222:	f7fd fecb 	bl	800afbc <_Bfree>
 800d226:	464c      	mov	r4, r9
 800d228:	6923      	ldr	r3, [r4, #16]
 800d22a:	1c5a      	adds	r2, r3, #1
 800d22c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d230:	6122      	str	r2, [r4, #16]
 800d232:	2201      	movs	r2, #1
 800d234:	615a      	str	r2, [r3, #20]
 800d236:	e7be      	b.n	800d1b6 <__gethex+0x362>
 800d238:	6922      	ldr	r2, [r4, #16]
 800d23a:	455a      	cmp	r2, fp
 800d23c:	dd0b      	ble.n	800d256 <__gethex+0x402>
 800d23e:	2101      	movs	r1, #1
 800d240:	4620      	mov	r0, r4
 800d242:	f7ff fd9f 	bl	800cd84 <rshift>
 800d246:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d24a:	3701      	adds	r7, #1
 800d24c:	42bb      	cmp	r3, r7
 800d24e:	f6ff aee0 	blt.w	800d012 <__gethex+0x1be>
 800d252:	2501      	movs	r5, #1
 800d254:	e7c2      	b.n	800d1dc <__gethex+0x388>
 800d256:	f016 061f 	ands.w	r6, r6, #31
 800d25a:	d0fa      	beq.n	800d252 <__gethex+0x3fe>
 800d25c:	4453      	add	r3, sl
 800d25e:	f1c6 0620 	rsb	r6, r6, #32
 800d262:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800d266:	f7fd ff5b 	bl	800b120 <__hi0bits>
 800d26a:	42b0      	cmp	r0, r6
 800d26c:	dbe7      	blt.n	800d23e <__gethex+0x3ea>
 800d26e:	e7f0      	b.n	800d252 <__gethex+0x3fe>
 800d270:	0800d6e5 	.word	0x0800d6e5

0800d274 <L_shift>:
 800d274:	f1c2 0208 	rsb	r2, r2, #8
 800d278:	0092      	lsls	r2, r2, #2
 800d27a:	b570      	push	{r4, r5, r6, lr}
 800d27c:	f1c2 0620 	rsb	r6, r2, #32
 800d280:	6843      	ldr	r3, [r0, #4]
 800d282:	6804      	ldr	r4, [r0, #0]
 800d284:	fa03 f506 	lsl.w	r5, r3, r6
 800d288:	432c      	orrs	r4, r5
 800d28a:	40d3      	lsrs	r3, r2
 800d28c:	6004      	str	r4, [r0, #0]
 800d28e:	f840 3f04 	str.w	r3, [r0, #4]!
 800d292:	4288      	cmp	r0, r1
 800d294:	d3f4      	bcc.n	800d280 <L_shift+0xc>
 800d296:	bd70      	pop	{r4, r5, r6, pc}

0800d298 <__match>:
 800d298:	b530      	push	{r4, r5, lr}
 800d29a:	6803      	ldr	r3, [r0, #0]
 800d29c:	3301      	adds	r3, #1
 800d29e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d2a2:	b914      	cbnz	r4, 800d2aa <__match+0x12>
 800d2a4:	6003      	str	r3, [r0, #0]
 800d2a6:	2001      	movs	r0, #1
 800d2a8:	bd30      	pop	{r4, r5, pc}
 800d2aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d2ae:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800d2b2:	2d19      	cmp	r5, #25
 800d2b4:	bf98      	it	ls
 800d2b6:	3220      	addls	r2, #32
 800d2b8:	42a2      	cmp	r2, r4
 800d2ba:	d0f0      	beq.n	800d29e <__match+0x6>
 800d2bc:	2000      	movs	r0, #0
 800d2be:	e7f3      	b.n	800d2a8 <__match+0x10>

0800d2c0 <__hexnan>:
 800d2c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2c4:	680b      	ldr	r3, [r1, #0]
 800d2c6:	6801      	ldr	r1, [r0, #0]
 800d2c8:	115e      	asrs	r6, r3, #5
 800d2ca:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d2ce:	f013 031f 	ands.w	r3, r3, #31
 800d2d2:	b087      	sub	sp, #28
 800d2d4:	bf18      	it	ne
 800d2d6:	3604      	addne	r6, #4
 800d2d8:	2500      	movs	r5, #0
 800d2da:	1f37      	subs	r7, r6, #4
 800d2dc:	4682      	mov	sl, r0
 800d2de:	4690      	mov	r8, r2
 800d2e0:	9301      	str	r3, [sp, #4]
 800d2e2:	f846 5c04 	str.w	r5, [r6, #-4]
 800d2e6:	46b9      	mov	r9, r7
 800d2e8:	463c      	mov	r4, r7
 800d2ea:	9502      	str	r5, [sp, #8]
 800d2ec:	46ab      	mov	fp, r5
 800d2ee:	784a      	ldrb	r2, [r1, #1]
 800d2f0:	1c4b      	adds	r3, r1, #1
 800d2f2:	9303      	str	r3, [sp, #12]
 800d2f4:	b342      	cbz	r2, 800d348 <__hexnan+0x88>
 800d2f6:	4610      	mov	r0, r2
 800d2f8:	9105      	str	r1, [sp, #20]
 800d2fa:	9204      	str	r2, [sp, #16]
 800d2fc:	f7ff fd94 	bl	800ce28 <__hexdig_fun>
 800d300:	2800      	cmp	r0, #0
 800d302:	d151      	bne.n	800d3a8 <__hexnan+0xe8>
 800d304:	9a04      	ldr	r2, [sp, #16]
 800d306:	9905      	ldr	r1, [sp, #20]
 800d308:	2a20      	cmp	r2, #32
 800d30a:	d818      	bhi.n	800d33e <__hexnan+0x7e>
 800d30c:	9b02      	ldr	r3, [sp, #8]
 800d30e:	459b      	cmp	fp, r3
 800d310:	dd13      	ble.n	800d33a <__hexnan+0x7a>
 800d312:	454c      	cmp	r4, r9
 800d314:	d206      	bcs.n	800d324 <__hexnan+0x64>
 800d316:	2d07      	cmp	r5, #7
 800d318:	dc04      	bgt.n	800d324 <__hexnan+0x64>
 800d31a:	462a      	mov	r2, r5
 800d31c:	4649      	mov	r1, r9
 800d31e:	4620      	mov	r0, r4
 800d320:	f7ff ffa8 	bl	800d274 <L_shift>
 800d324:	4544      	cmp	r4, r8
 800d326:	d952      	bls.n	800d3ce <__hexnan+0x10e>
 800d328:	2300      	movs	r3, #0
 800d32a:	f1a4 0904 	sub.w	r9, r4, #4
 800d32e:	f844 3c04 	str.w	r3, [r4, #-4]
 800d332:	f8cd b008 	str.w	fp, [sp, #8]
 800d336:	464c      	mov	r4, r9
 800d338:	461d      	mov	r5, r3
 800d33a:	9903      	ldr	r1, [sp, #12]
 800d33c:	e7d7      	b.n	800d2ee <__hexnan+0x2e>
 800d33e:	2a29      	cmp	r2, #41	@ 0x29
 800d340:	d157      	bne.n	800d3f2 <__hexnan+0x132>
 800d342:	3102      	adds	r1, #2
 800d344:	f8ca 1000 	str.w	r1, [sl]
 800d348:	f1bb 0f00 	cmp.w	fp, #0
 800d34c:	d051      	beq.n	800d3f2 <__hexnan+0x132>
 800d34e:	454c      	cmp	r4, r9
 800d350:	d206      	bcs.n	800d360 <__hexnan+0xa0>
 800d352:	2d07      	cmp	r5, #7
 800d354:	dc04      	bgt.n	800d360 <__hexnan+0xa0>
 800d356:	462a      	mov	r2, r5
 800d358:	4649      	mov	r1, r9
 800d35a:	4620      	mov	r0, r4
 800d35c:	f7ff ff8a 	bl	800d274 <L_shift>
 800d360:	4544      	cmp	r4, r8
 800d362:	d936      	bls.n	800d3d2 <__hexnan+0x112>
 800d364:	f1a8 0204 	sub.w	r2, r8, #4
 800d368:	4623      	mov	r3, r4
 800d36a:	f853 1b04 	ldr.w	r1, [r3], #4
 800d36e:	f842 1f04 	str.w	r1, [r2, #4]!
 800d372:	429f      	cmp	r7, r3
 800d374:	d2f9      	bcs.n	800d36a <__hexnan+0xaa>
 800d376:	1b3b      	subs	r3, r7, r4
 800d378:	f023 0303 	bic.w	r3, r3, #3
 800d37c:	3304      	adds	r3, #4
 800d37e:	3401      	adds	r4, #1
 800d380:	3e03      	subs	r6, #3
 800d382:	42b4      	cmp	r4, r6
 800d384:	bf88      	it	hi
 800d386:	2304      	movhi	r3, #4
 800d388:	4443      	add	r3, r8
 800d38a:	2200      	movs	r2, #0
 800d38c:	f843 2b04 	str.w	r2, [r3], #4
 800d390:	429f      	cmp	r7, r3
 800d392:	d2fb      	bcs.n	800d38c <__hexnan+0xcc>
 800d394:	683b      	ldr	r3, [r7, #0]
 800d396:	b91b      	cbnz	r3, 800d3a0 <__hexnan+0xe0>
 800d398:	4547      	cmp	r7, r8
 800d39a:	d128      	bne.n	800d3ee <__hexnan+0x12e>
 800d39c:	2301      	movs	r3, #1
 800d39e:	603b      	str	r3, [r7, #0]
 800d3a0:	2005      	movs	r0, #5
 800d3a2:	b007      	add	sp, #28
 800d3a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d3a8:	3501      	adds	r5, #1
 800d3aa:	2d08      	cmp	r5, #8
 800d3ac:	f10b 0b01 	add.w	fp, fp, #1
 800d3b0:	dd06      	ble.n	800d3c0 <__hexnan+0x100>
 800d3b2:	4544      	cmp	r4, r8
 800d3b4:	d9c1      	bls.n	800d33a <__hexnan+0x7a>
 800d3b6:	2300      	movs	r3, #0
 800d3b8:	f844 3c04 	str.w	r3, [r4, #-4]
 800d3bc:	2501      	movs	r5, #1
 800d3be:	3c04      	subs	r4, #4
 800d3c0:	6822      	ldr	r2, [r4, #0]
 800d3c2:	f000 000f 	and.w	r0, r0, #15
 800d3c6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800d3ca:	6020      	str	r0, [r4, #0]
 800d3cc:	e7b5      	b.n	800d33a <__hexnan+0x7a>
 800d3ce:	2508      	movs	r5, #8
 800d3d0:	e7b3      	b.n	800d33a <__hexnan+0x7a>
 800d3d2:	9b01      	ldr	r3, [sp, #4]
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d0dd      	beq.n	800d394 <__hexnan+0xd4>
 800d3d8:	f1c3 0320 	rsb	r3, r3, #32
 800d3dc:	f04f 32ff 	mov.w	r2, #4294967295
 800d3e0:	40da      	lsrs	r2, r3
 800d3e2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800d3e6:	4013      	ands	r3, r2
 800d3e8:	f846 3c04 	str.w	r3, [r6, #-4]
 800d3ec:	e7d2      	b.n	800d394 <__hexnan+0xd4>
 800d3ee:	3f04      	subs	r7, #4
 800d3f0:	e7d0      	b.n	800d394 <__hexnan+0xd4>
 800d3f2:	2004      	movs	r0, #4
 800d3f4:	e7d5      	b.n	800d3a2 <__hexnan+0xe2>

0800d3f6 <__ascii_mbtowc>:
 800d3f6:	b082      	sub	sp, #8
 800d3f8:	b901      	cbnz	r1, 800d3fc <__ascii_mbtowc+0x6>
 800d3fa:	a901      	add	r1, sp, #4
 800d3fc:	b142      	cbz	r2, 800d410 <__ascii_mbtowc+0x1a>
 800d3fe:	b14b      	cbz	r3, 800d414 <__ascii_mbtowc+0x1e>
 800d400:	7813      	ldrb	r3, [r2, #0]
 800d402:	600b      	str	r3, [r1, #0]
 800d404:	7812      	ldrb	r2, [r2, #0]
 800d406:	1e10      	subs	r0, r2, #0
 800d408:	bf18      	it	ne
 800d40a:	2001      	movne	r0, #1
 800d40c:	b002      	add	sp, #8
 800d40e:	4770      	bx	lr
 800d410:	4610      	mov	r0, r2
 800d412:	e7fb      	b.n	800d40c <__ascii_mbtowc+0x16>
 800d414:	f06f 0001 	mvn.w	r0, #1
 800d418:	e7f8      	b.n	800d40c <__ascii_mbtowc+0x16>

0800d41a <_realloc_r>:
 800d41a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d41e:	4680      	mov	r8, r0
 800d420:	4615      	mov	r5, r2
 800d422:	460c      	mov	r4, r1
 800d424:	b921      	cbnz	r1, 800d430 <_realloc_r+0x16>
 800d426:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d42a:	4611      	mov	r1, r2
 800d42c:	f7fd bcfa 	b.w	800ae24 <_malloc_r>
 800d430:	b92a      	cbnz	r2, 800d43e <_realloc_r+0x24>
 800d432:	f7fd fc83 	bl	800ad3c <_free_r>
 800d436:	2400      	movs	r4, #0
 800d438:	4620      	mov	r0, r4
 800d43a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d43e:	f000 f840 	bl	800d4c2 <_malloc_usable_size_r>
 800d442:	4285      	cmp	r5, r0
 800d444:	4606      	mov	r6, r0
 800d446:	d802      	bhi.n	800d44e <_realloc_r+0x34>
 800d448:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800d44c:	d8f4      	bhi.n	800d438 <_realloc_r+0x1e>
 800d44e:	4629      	mov	r1, r5
 800d450:	4640      	mov	r0, r8
 800d452:	f7fd fce7 	bl	800ae24 <_malloc_r>
 800d456:	4607      	mov	r7, r0
 800d458:	2800      	cmp	r0, #0
 800d45a:	d0ec      	beq.n	800d436 <_realloc_r+0x1c>
 800d45c:	42b5      	cmp	r5, r6
 800d45e:	462a      	mov	r2, r5
 800d460:	4621      	mov	r1, r4
 800d462:	bf28      	it	cs
 800d464:	4632      	movcs	r2, r6
 800d466:	f7fc fe76 	bl	800a156 <memcpy>
 800d46a:	4621      	mov	r1, r4
 800d46c:	4640      	mov	r0, r8
 800d46e:	f7fd fc65 	bl	800ad3c <_free_r>
 800d472:	463c      	mov	r4, r7
 800d474:	e7e0      	b.n	800d438 <_realloc_r+0x1e>

0800d476 <__ascii_wctomb>:
 800d476:	4603      	mov	r3, r0
 800d478:	4608      	mov	r0, r1
 800d47a:	b141      	cbz	r1, 800d48e <__ascii_wctomb+0x18>
 800d47c:	2aff      	cmp	r2, #255	@ 0xff
 800d47e:	d904      	bls.n	800d48a <__ascii_wctomb+0x14>
 800d480:	228a      	movs	r2, #138	@ 0x8a
 800d482:	601a      	str	r2, [r3, #0]
 800d484:	f04f 30ff 	mov.w	r0, #4294967295
 800d488:	4770      	bx	lr
 800d48a:	700a      	strb	r2, [r1, #0]
 800d48c:	2001      	movs	r0, #1
 800d48e:	4770      	bx	lr

0800d490 <fiprintf>:
 800d490:	b40e      	push	{r1, r2, r3}
 800d492:	b503      	push	{r0, r1, lr}
 800d494:	4601      	mov	r1, r0
 800d496:	ab03      	add	r3, sp, #12
 800d498:	4805      	ldr	r0, [pc, #20]	@ (800d4b0 <fiprintf+0x20>)
 800d49a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d49e:	6800      	ldr	r0, [r0, #0]
 800d4a0:	9301      	str	r3, [sp, #4]
 800d4a2:	f7ff f9af 	bl	800c804 <_vfiprintf_r>
 800d4a6:	b002      	add	sp, #8
 800d4a8:	f85d eb04 	ldr.w	lr, [sp], #4
 800d4ac:	b003      	add	sp, #12
 800d4ae:	4770      	bx	lr
 800d4b0:	24000020 	.word	0x24000020

0800d4b4 <abort>:
 800d4b4:	b508      	push	{r3, lr}
 800d4b6:	2006      	movs	r0, #6
 800d4b8:	f000 f834 	bl	800d524 <raise>
 800d4bc:	2001      	movs	r0, #1
 800d4be:	f7f3 fcc7 	bl	8000e50 <_exit>

0800d4c2 <_malloc_usable_size_r>:
 800d4c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d4c6:	1f18      	subs	r0, r3, #4
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	bfbc      	itt	lt
 800d4cc:	580b      	ldrlt	r3, [r1, r0]
 800d4ce:	18c0      	addlt	r0, r0, r3
 800d4d0:	4770      	bx	lr

0800d4d2 <_raise_r>:
 800d4d2:	291f      	cmp	r1, #31
 800d4d4:	b538      	push	{r3, r4, r5, lr}
 800d4d6:	4605      	mov	r5, r0
 800d4d8:	460c      	mov	r4, r1
 800d4da:	d904      	bls.n	800d4e6 <_raise_r+0x14>
 800d4dc:	2316      	movs	r3, #22
 800d4de:	6003      	str	r3, [r0, #0]
 800d4e0:	f04f 30ff 	mov.w	r0, #4294967295
 800d4e4:	bd38      	pop	{r3, r4, r5, pc}
 800d4e6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d4e8:	b112      	cbz	r2, 800d4f0 <_raise_r+0x1e>
 800d4ea:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d4ee:	b94b      	cbnz	r3, 800d504 <_raise_r+0x32>
 800d4f0:	4628      	mov	r0, r5
 800d4f2:	f000 f831 	bl	800d558 <_getpid_r>
 800d4f6:	4622      	mov	r2, r4
 800d4f8:	4601      	mov	r1, r0
 800d4fa:	4628      	mov	r0, r5
 800d4fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d500:	f000 b818 	b.w	800d534 <_kill_r>
 800d504:	2b01      	cmp	r3, #1
 800d506:	d00a      	beq.n	800d51e <_raise_r+0x4c>
 800d508:	1c59      	adds	r1, r3, #1
 800d50a:	d103      	bne.n	800d514 <_raise_r+0x42>
 800d50c:	2316      	movs	r3, #22
 800d50e:	6003      	str	r3, [r0, #0]
 800d510:	2001      	movs	r0, #1
 800d512:	e7e7      	b.n	800d4e4 <_raise_r+0x12>
 800d514:	2100      	movs	r1, #0
 800d516:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d51a:	4620      	mov	r0, r4
 800d51c:	4798      	blx	r3
 800d51e:	2000      	movs	r0, #0
 800d520:	e7e0      	b.n	800d4e4 <_raise_r+0x12>
	...

0800d524 <raise>:
 800d524:	4b02      	ldr	r3, [pc, #8]	@ (800d530 <raise+0xc>)
 800d526:	4601      	mov	r1, r0
 800d528:	6818      	ldr	r0, [r3, #0]
 800d52a:	f7ff bfd2 	b.w	800d4d2 <_raise_r>
 800d52e:	bf00      	nop
 800d530:	24000020 	.word	0x24000020

0800d534 <_kill_r>:
 800d534:	b538      	push	{r3, r4, r5, lr}
 800d536:	4d07      	ldr	r5, [pc, #28]	@ (800d554 <_kill_r+0x20>)
 800d538:	2300      	movs	r3, #0
 800d53a:	4604      	mov	r4, r0
 800d53c:	4608      	mov	r0, r1
 800d53e:	4611      	mov	r1, r2
 800d540:	602b      	str	r3, [r5, #0]
 800d542:	f7f3 fc75 	bl	8000e30 <_kill>
 800d546:	1c43      	adds	r3, r0, #1
 800d548:	d102      	bne.n	800d550 <_kill_r+0x1c>
 800d54a:	682b      	ldr	r3, [r5, #0]
 800d54c:	b103      	cbz	r3, 800d550 <_kill_r+0x1c>
 800d54e:	6023      	str	r3, [r4, #0]
 800d550:	bd38      	pop	{r3, r4, r5, pc}
 800d552:	bf00      	nop
 800d554:	24004e14 	.word	0x24004e14

0800d558 <_getpid_r>:
 800d558:	f7f3 bc62 	b.w	8000e20 <_getpid>

0800d55c <_init>:
 800d55c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d55e:	bf00      	nop
 800d560:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d562:	bc08      	pop	{r3}
 800d564:	469e      	mov	lr, r3
 800d566:	4770      	bx	lr

0800d568 <_fini>:
 800d568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d56a:	bf00      	nop
 800d56c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d56e:	bc08      	pop	{r3}
 800d570:	469e      	mov	lr, r3
 800d572:	4770      	bx	lr
